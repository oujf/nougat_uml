class ViewHolder
!!!28903223.java!!!	ViewHolder(inout itemView : View)
            if (itemView == null) {
                throw new IllegalArgumentException("itemView may not be null");
            }
            this.itemView = itemView;
!!!28903351.java!!!	flagRemovedAndOffsetPosition(in mNewPosition : int, in offset : int, inout applyToPreLayout : boolean) : void
            addFlags(ViewHolder.FLAG_REMOVED);
            offsetPosition(offset, applyToPreLayout);
            mPosition = mNewPosition;
!!!28903479.java!!!	offsetPosition(in offset : int, inout applyToPreLayout : boolean) : void
            if (mOldPosition == NO_POSITION) {
                mOldPosition = mPosition;
            }
            if (mPreLayoutPosition == NO_POSITION) {
                mPreLayoutPosition = mPosition;
            }
            if (applyToPreLayout) {
                mPreLayoutPosition += offset;
            }
            mPosition += offset;
            if (itemView.getLayoutParams() != null) {
                ((LayoutParams) itemView.getLayoutParams()).mInsetsDirty = true;
            }
!!!28903607.java!!!	clearOldPosition() : void
            mOldPosition = NO_POSITION;
            mPreLayoutPosition = NO_POSITION;
!!!28903735.java!!!	saveOldPosition() : void
            if (mOldPosition == NO_POSITION) {
                mOldPosition = mPosition;
            }
!!!28903863.java!!!	shouldIgnore() : boolean
            return (mFlags & FLAG_IGNORE) != 0;
!!!28903991.java!!!	getPosition() : int
            return mPreLayoutPosition == NO_POSITION ? mPosition : mPreLayoutPosition;
!!!28904119.java!!!	getLayoutPosition() : int
            return mPreLayoutPosition == NO_POSITION ? mPosition : mPreLayoutPosition;
!!!28904247.java!!!	getAdapterPosition() : int
            if (mOwnerRecyclerView == null) {
                return NO_POSITION;
            }
            return mOwnerRecyclerView.getAdapterPositionFor(this);
!!!28904375.java!!!	getOldPosition() : int
            return mOldPosition;
!!!28904503.java!!!	getItemId() : long
            return mItemId;
!!!28904631.java!!!	getItemViewType() : int
            return mItemViewType;
!!!28904759.java!!!	isScrap() : boolean
            return mScrapContainer != null;
!!!28904887.java!!!	unScrap() : void
            mScrapContainer.unscrapView(this);
!!!28905015.java!!!	wasReturnedFromScrap() : boolean
            return (mFlags & FLAG_RETURNED_FROM_SCRAP) != 0;
!!!28905143.java!!!	clearReturnedFromScrapFlag() : void
            mFlags = mFlags & ~FLAG_RETURNED_FROM_SCRAP;
!!!28905271.java!!!	clearTmpDetachFlag() : void
            mFlags = mFlags & ~FLAG_TMP_DETACHED;
!!!28905399.java!!!	stopIgnoring() : void
            mFlags = mFlags & ~FLAG_IGNORE;
!!!28905527.java!!!	setScrapContainer(inout recycler : RecyclerView::Recycler, inout isChangeScrap : boolean) : void
            mScrapContainer = recycler;
            mInChangeScrap = isChangeScrap;
!!!28905655.java!!!	isInvalid() : boolean
            return (mFlags & FLAG_INVALID) != 0;
!!!28905783.java!!!	needsUpdate() : boolean
            return (mFlags & FLAG_UPDATE) != 0;
!!!28905911.java!!!	isBound() : boolean
            return (mFlags & FLAG_BOUND) != 0;
!!!28906039.java!!!	isRemoved() : boolean
            return (mFlags & FLAG_REMOVED) != 0;
!!!28906167.java!!!	hasAnyOfTheFlags(in flags : int) : boolean
            return (mFlags & flags) != 0;
!!!28906295.java!!!	isTmpDetached() : boolean
            return (mFlags & FLAG_TMP_DETACHED) != 0;
!!!28906423.java!!!	isAdapterPositionUnknown() : boolean
            return (mFlags & FLAG_ADAPTER_POSITION_UNKNOWN) != 0 || isInvalid();
!!!28906551.java!!!	setFlags(in flags : int, in mask : int) : void
            mFlags = (mFlags & ~mask) | (flags & mask);
!!!28906679.java!!!	addFlags(in flags : int) : void
            mFlags |= flags;
!!!28906807.java!!!	addChangePayload(inout payload : Object) : void
            if (payload == null) {
                addFlags(FLAG_ADAPTER_FULLUPDATE);
            } else if ((mFlags & FLAG_ADAPTER_FULLUPDATE) == 0) {
                createPayloadsIfNeeded();
                mPayloads.add(payload);
            }
!!!28906935.java!!!	createPayloadsIfNeeded() : void
            if (mPayloads == null) {
                mPayloads = new ArrayList<Object>();
                mUnmodifiedPayloads = Collections.unmodifiableList(mPayloads);
            }
!!!28907063.java!!!	clearPayload() : void
            if (mPayloads != null) {
                mPayloads.clear();
            }
            mFlags = mFlags & ~FLAG_ADAPTER_FULLUPDATE;
!!!28907191.java!!!	getUnmodifiedPayloads() : List<Object>
            if ((mFlags & FLAG_ADAPTER_FULLUPDATE) == 0) {
                if (mPayloads == null || mPayloads.size() == 0) {
                    // Initial state,  no update being called.
                    return FULLUPDATE_PAYLOADS;
                }
                // there are none-null payloads
                return mUnmodifiedPayloads;
            } else {
                // a full update has been called.
                return FULLUPDATE_PAYLOADS;
            }
!!!28907319.java!!!	resetInternal() : void
            mFlags = 0;
            mPosition = NO_POSITION;
            mOldPosition = NO_POSITION;
            mItemId = NO_ID;
            mPreLayoutPosition = NO_POSITION;
            mIsRecyclableCount = 0;
            mShadowedHolder = null;
            mShadowingHolder = null;
            clearPayload();
            mWasImportantForAccessibilityBeforeHidden = ViewCompat.IMPORTANT_FOR_ACCESSIBILITY_AUTO;
!!!28907447.java!!!	onEnteredHiddenState() : void
            // While the view item is in hidden state, make it invisible for the accessibility.
            mWasImportantForAccessibilityBeforeHidden =
                    ViewCompat.getImportantForAccessibility(itemView);
            ViewCompat.setImportantForAccessibility(itemView,
                    ViewCompat.IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS);
!!!28907575.java!!!	onLeftHiddenState() : void
            ViewCompat.setImportantForAccessibility(
                    itemView, mWasImportantForAccessibilityBeforeHidden);
            mWasImportantForAccessibilityBeforeHidden = ViewCompat.IMPORTANT_FOR_ACCESSIBILITY_AUTO;
!!!28907703.java!!!	toString() : String
            final StringBuilder sb = new StringBuilder("ViewHolder{" +
                    Integer.toHexString(hashCode()) + " position=" + mPosition + " id=" + mItemId +
                    ", oldPos=" + mOldPosition + ", pLpos:" + mPreLayoutPosition);
            if (isScrap()) {
                sb.append(" scrap ")
                        .append(mInChangeScrap ? "[changeScrap]" : "[attachedScrap]");
            }
            if (isInvalid()) sb.append(" invalid");
            if (!isBound()) sb.append(" unbound");
            if (needsUpdate()) sb.append(" update");
            if (isRemoved()) sb.append(" removed");
            if (shouldIgnore()) sb.append(" ignored");
            if (isTmpDetached()) sb.append(" tmpDetached");
            if (!isRecyclable()) sb.append(" not recyclable(" + mIsRecyclableCount + ")");
            if (isAdapterPositionUnknown()) sb.append(" undefined adapter position");

            if (itemView.getParent() == null) sb.append(" no parent");
            sb.append("}");
            return sb.toString();
!!!28907831.java!!!	setIsRecyclable(inout recyclable : boolean) : void
            mIsRecyclableCount = recyclable ? mIsRecyclableCount - 1 : mIsRecyclableCount + 1;
            if (mIsRecyclableCount < 0) {
                mIsRecyclableCount = 0;
                if (DEBUG) {
                    throw new RuntimeException("isRecyclable decremented below 0: " +
                            "unmatched pair of setIsRecyable() calls for " + this);
                }
                Log.e(VIEW_LOG_TAG, "isRecyclable decremented below 0: " +
                        "unmatched pair of setIsRecyable() calls for " + this);
            } else if (!recyclable && mIsRecyclableCount == 1) {
                mFlags |= FLAG_NOT_RECYCLABLE;
            } else if (recyclable && mIsRecyclableCount == 0) {
                mFlags &= ~FLAG_NOT_RECYCLABLE;
            }
            if (DEBUG) {
                Log.d(TAG, "setIsRecyclable val:" + recyclable + ":" + this);
            }
!!!28907959.java!!!	isRecyclable() : boolean
            return (mFlags & FLAG_NOT_RECYCLABLE) == 0 &&
                    !ViewCompat.hasTransientState(itemView);
!!!28908087.java!!!	shouldBeKeptAsChild() : boolean
            return (mFlags & FLAG_NOT_RECYCLABLE) != 0;
!!!28908215.java!!!	doesTransientStatePreventRecycling() : boolean
            return (mFlags & FLAG_NOT_RECYCLABLE) == 0 && ViewCompat.hasTransientState(itemView);
!!!28908343.java!!!	isUpdated() : boolean
            return (mFlags & FLAG_UPDATE) != 0;
