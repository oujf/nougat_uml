format 213
"sqlite" // android::frameworks::base::core::java::android::database::sqlite
  revision 5
  modified_by 55 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "D:\\Workspace\\AndroidSourceCode\\nougat_src\\frameworks/base/core/java/android/database/sqlite/"
  java_package "android.database.sqlite"
  classview 134583 "sqlite"
    
    classdiagramsettings member_max_width 0 end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 5892663 "SQLiteCursorTest"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 20002743 "mDatabaseFile"
	private explicit_type "File"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 47948983 "setUp"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 47949111 "tearDown"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 47949239 "testFillWindow"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@LargeTest
"
	
	
	
	comment "this test could take a while to execute. so, designate it as LargeTest
"
      end
    end

    class 6925239 "SQLiteDatabase"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Exposes methods to manage a SQLite database.

<p>
SQLiteDatabase has methods to create, delete, execute SQL commands, and
perform other common database management tasks.
</p><p>
See the Notepad sample application in the SDK for an example of creating
and managing a database.
</p><p>
Database names must be unique within an application, not across all applications.
</p>

<h3>Localized Collation - ORDER BY</h3>
<p>
In addition to SQLite's default <code>BINARY</code> collator, Android supplies
two more, <code>LOCALIZED</code>, which changes with the system's current locale,
and <code>UNICODE</code>, which is the Unicode Collation Algorithm and not tailored
to the current locale.
</p>
"
      class 6925367 "CursorFactory"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 79211063 "newCursor"
	  public return_type class_ref 6954295 // Cursor
	  nparams 4
	    param inout name "db" type class_ref 6925239 // SQLiteDatabase
	    param inout name "masterQuery" type class_ref 7134519 // SQLiteCursorDriver
	    param inout name "editTable" explicit_type "String"
	    param inout name "query" type class_ref 7134391 // SQLiteQuery
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "See {@link SQLiteCursor#SQLiteCursor(SQLiteCursorDriver, String, SQLiteQuery)}.
"
	end
      end

      class 7134647 "CustomFunction"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 79211191 "callback"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "args" explicit_type "String"
	  multiplicity "[]"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 15605431 // <generalisation>
	relation 15605431 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15605431 // <generalisation>
	  b parent class_ref 7130039 // SQLiteClosable
      end

      attribute 24721975 "EVENT_DB_CORRUPT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 75004"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 15605687 // sActiveDatabases (<unidirectional association>)
	relation 15605687 --->
	  stereotype "WeakHashMap"
	  a role_name "sActiveDatabases" init_value "
            new WeakHashMap<SQLiteDatabase, Object>()" class_relation private
	    comment " Stores reference to all databases opened in the current process.
 (The referent Object is not used at this time.)
 INVARIANT: Guarded by sActiveDatabases.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}, Object> ${name}${value};
"
	    classrelation_ref 15605687 // sActiveDatabases (<unidirectional association>)
	  b parent class_ref 6925239 // SQLiteDatabase
      end

      classrelation 15605815 // mThreadSession (<unidirectional association>)
	relation 15605815 --->
	  stereotype "ThreadLocal"
	  a role_name "mThreadSession" init_value " new ThreadLocal<SQLiteSession>() {
        @Override
        protected SQLiteSession initialValue() {
            return createSession();
        }
    }" const_relation private
	    comment " Thread-local for database sessions that belong to this database.
 Each thread has its own database session.
 INVARIANT: Immutable.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 15605815 // mThreadSession (<unidirectional association>)
	  b parent class_ref 7134775 // SQLiteSession
      end

      classrelation 15605943 // mCursorFactory (<unidirectional association>)
	relation 15605943 --->
	  a role_name "mCursorFactory" const_relation private
	    comment " The optional factory to use when creating new Cursors.  May be null.
 INVARIANT: Immutable.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15605943 // mCursorFactory (<unidirectional association>)
	  b parent class_ref 6925367 // CursorFactory
      end

      classrelation 15606071 // mErrorHandler (<unidirectional association>)
	relation 15606071 --->
	  a role_name "mErrorHandler" const_relation private
	    comment " Error handler to be used when SQLite returns corruption errors.
 INVARIANT: Immutable.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15606071 // mErrorHandler (<unidirectional association>)
	  b parent class_ref 6925495 // DatabaseErrorHandler
      end

      attribute 24722103 "mCloseGuardLocked"
	const_attribute private explicit_type "CloseGuard"
	init_value " CloseGuard.get()"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Warns if the database is finalized without being closed properly.
 INVARIANT: Guarded by mLock.
"
      end

      classrelation 15606327 // mConfigurationLocked (<unidirectional association>)
	relation 15606327 --->
	  a role_name "mConfigurationLocked" const_relation private
	    comment " The database configuration.
 INVARIANT: Guarded by mLock.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15606327 // mConfigurationLocked (<unidirectional association>)
	  b parent class_ref 7132727 // SQLiteDatabaseConfiguration
      end

      classrelation 15606455 // mConnectionPoolLocked (<unidirectional association>)
	relation 15606455 --->
	  a role_name "mConnectionPoolLocked" private
	    comment " The connection pool for the database, null when closed.
 The pool itself is thread-safe, but the reference to it can only be acquired
 when the lock is held.
 INVARIANT: Guarded by mLock.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15606455 // mConnectionPoolLocked (<unidirectional association>)
	  b parent class_ref 7132599 // SQLiteConnectionPool
      end

      attribute 24722231 "mHasAttachedDbsLocked"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " True if the database has attached databases.
 INVARIANT: Guarded by mLock.
"
      end

      attribute 24722359 "CONFLICT_ROLLBACK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "When a constraint violation occurs, an immediate ROLLBACK occurs,
thus ending the current transaction, and the command aborts with a
return code of SQLITE_CONSTRAINT. If no transaction is active
(other than the implied transaction that is created on every command)
then this algorithm works the same as ABORT.

"
      end

      attribute 24722487 "CONFLICT_ABORT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "When a constraint violation occurs,no ROLLBACK is executed
so changes from prior commands within the same transaction
are preserved. This is the default behavior.

"
      end

      attribute 24722615 "CONFLICT_FAIL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "When a constraint violation occurs, the command aborts with a return
code SQLITE_CONSTRAINT. But any changes to the database that
the command made prior to encountering the constraint violation
are preserved and are not backed out.

"
      end

      attribute 24722743 "CONFLICT_IGNORE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "When a constraint violation occurs, the one row that contains
the constraint violation is not inserted or changed.
But the command continues executing normally. Other rows before and
after the row that contained the constraint violation continue to be
inserted or updated normally. No error is returned.

"
      end

      attribute 24722871 "CONFLICT_REPLACE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 5"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "When a UNIQUE constraint violation occurs, the pre-existing rows that
are causing the constraint violation are removed prior to inserting
or updating the current row. Thus the insert or update always occurs.
The command continues executing normally. No error is returned.
If a NOT NULL constraint violation occurs, the NULL value is replaced
by the default value for that column. If the column has no default
value, then the ABORT algorithm is used. If a CHECK constraint
violation occurs then the IGNORE algorithm is used. When this conflict
resolution strategy deletes rows in order to satisfy a constraint,
it does not invoke delete triggers on those rows.
This behavior might change in a future release.

"
      end

      attribute 24722999 "CONFLICT_NONE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Use the following when no conflict action is specified.

"
      end

      attribute 24723127 "SQLITE_MAX_LIKE_PATTERN_LENGTH"
	class_attribute const_attribute public explicit_type "int"
	init_value " 50000"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Maximum Length Of A LIKE Or GLOB Pattern
The pattern matching algorithm used in the default LIKE and GLOB implementation
of SQLite can exhibit O(N^2) performance (where N is the number of characters in
the pattern) for certain pathological cases. To avoid denial-of-service attacks
the length of the LIKE or GLOB pattern is limited to SQLITE_MAX_LIKE_PATTERN_LENGTH bytes.
The default value of this limit is 50000. A modern workstation can evaluate
even a pathological LIKE or GLOB pattern of 50000 bytes relatively quickly.
The denial of service problem only comes into play when the pattern length gets
into millions of bytes. Nevertheless, since most useful LIKE or GLOB patterns
are at most a few dozen bytes in length, paranoid application developers may
want to reduce this parameter to something in the range of a few hundred
if they know that external users are able to generate arbitrary patterns.

"
      end

      attribute 24723255 "OPEN_READWRITE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000000"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Open flag: Flag for {@link #openDatabase} to open the database for reading and writing.
If the disk is full, this may fail even before you actually write anything.

{@more} Note that the value of this flag is 0, so it is the default.

 update native code if changing"
      end

      attribute 24723383 "OPEN_READONLY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000001"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Open flag: Flag for {@link #openDatabase} to open the database for reading only.
This is the only reliable way to open a database if the disk may be full.

 update native code if changing"
      end

      attribute 24723511 "OPEN_READ_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x00000001"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " update native code if changing"
      end

      attribute 24723639 "NO_LOCALIZED_COLLATORS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000010"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Open flag: Flag for {@link #openDatabase} to open the database without support for
localized collators.

{@more} This causes the collator <code>LOCALIZED</code> not to be created.
You must be consistent when using this flag to use the setting the database was
created with.  If this is set, {@link #setLocale} will do nothing.

 update native code if changing"
      end

      attribute 24723767 "CREATE_IF_NECESSARY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x10000000"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Open flag: Flag for {@link #openDatabase} to create the database file if it does not
already exist.

 update native code if changing"
      end

      attribute 24723895 "ENABLE_WRITE_AHEAD_LOGGING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x20000000"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Open flag: Flag for {@link #openDatabase} to open the database file with
write-ahead logging enabled by default.  Using this flag is more efficient
than calling {@link #enableWriteAheadLogging}.

Write-ahead logging cannot be used with read-only databases so the value of
this flag is ignored if the database is opened read-only.

@see #enableWriteAheadLogging

"
      end

      attribute 24724023 "MAX_SQL_CACHE_SIZE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 100"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Absolute max value that can be set by {@link #setMaxSqlCacheSize(int)}.

Each prepared-statement is between 1K - 6K, depending on the complexity of the
SQL statement & schema.  A large SQL cache may use a significant amount of memory.

"
      end

      operation 79199415 "SQLiteDatabase"
	private explicit_return_type ""
	nparams 4
	  param inout name "path" explicit_type "String"
	  param in name "openFlags" explicit_type "int"
	  param inout name "cursorFactory" type class_ref 6925367 // CursorFactory
	  param inout name "errorHandler" type class_ref 6925495 // DatabaseErrorHandler
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79199543 "finalize"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 79199671 "onAllReferencesReleased"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 79199799 "dispose"
	private explicit_return_type "void"
	nparams 1
	  param inout name "finalized" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79199927 "releaseMemory"
	class_operation public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to release memory that SQLite holds but does not require to
operate properly. Typically this memory will come from the page cache.

@return the number of bytes actually released
"
      end

      operation 79200055 "setLockingEnabled"
	public explicit_return_type "void"
	nparams 1
	  param inout name "lockingEnabled" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Control whether or not the SQLiteDatabase is made thread-safe by using locks
around critical sections. This is pretty expensive, so if you know that your
DB will only be used by a single thread then you should set this to false.
The default is true.
@param lockingEnabled set to true to enable locks, false otherwise

@deprecated This method now does nothing.  Do not use.
"
      end

      operation 79200183 "getLabel"
	package explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a label to use when describing the database in log messages.
@return The label.
"
      end

      operation 79200311 "onCorruption"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sends a corruption message to the database error handler.
"
      end

      operation 79200439 "getThreadSession"
	package return_type class_ref 7134775 // SQLiteSession
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@link SQLiteSession} that belongs to this thread for this database.
Once a thread has obtained a session, it will continue to obtain the same
session even after the database has been closed (although the session will not
be usable).  However, a thread that does not already have a session cannot
obtain one after the database has been closed.

The idea is that threads that have active connections to the database may still
have work to complete even after the call to {@link #close}.  Active database
connections are not actually disposed until they are released by the threads
that own them.

@return The session, never null.

@throws IllegalStateException if the thread does not yet have a session and
the database is not open.
"
      end

      operation 79200567 "createSession"
	package return_type class_ref 7134775 // SQLiteSession
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79200695 "getThreadDefaultConnectionFlags"
	package explicit_return_type "int"
	nparams 1
	  param inout name "readOnly" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets default connection flags that are appropriate for this thread, taking into
account whether the thread is acting on behalf of the UI.

@param readOnly True if the connection should be read-only.
@return The connection flags.
"
      end

      operation 79200823 "isMainThread"
	class_operation private explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79200951 "beginTransaction"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Begins a transaction in EXCLUSIVE mode.
<p>
Transactions can be nested.
When the outer transaction is ended all of
the work done in that transaction and all of the nested transactions will be committed or
rolled back. The changes will be rolled back if any transaction is ended without being
marked as clean (by calling setTransactionSuccessful). Otherwise they will be committed.
</p>
<p>Here is the standard idiom for transactions:

<pre>
  db.beginTransaction();
  try {
    ...
    db.setTransactionSuccessful();
  } finally {
    db.endTransaction();
  }
</pre>
"
      end

      operation 79201079 "beginTransactionNonExclusive"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Begins a transaction in IMMEDIATE mode. Transactions can be nested. When
the outer transaction is ended all of the work done in that transaction
and all of the nested transactions will be committed or rolled back. The
changes will be rolled back if any transaction is ended without being
marked as clean (by calling setTransactionSuccessful). Otherwise they
will be committed.
<p>
Here is the standard idiom for transactions:

<pre>
  db.beginTransactionNonExclusive();
  try {
    ...
    db.setTransactionSuccessful();
  } finally {
    db.endTransaction();
  }
</pre>
"
      end

      operation 79201207 "beginTransactionWithListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "transactionListener" type class_ref 7134903 // SQLiteTransactionListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Begins a transaction in EXCLUSIVE mode.
<p>
Transactions can be nested.
When the outer transaction is ended all of
the work done in that transaction and all of the nested transactions will be committed or
rolled back. The changes will be rolled back if any transaction is ended without being
marked as clean (by calling setTransactionSuccessful). Otherwise they will be committed.
</p>
<p>Here is the standard idiom for transactions:

<pre>
  db.beginTransactionWithListener(listener);
  try {
    ...
    db.setTransactionSuccessful();
  } finally {
    db.endTransaction();
  }
</pre>

@param transactionListener listener that should be notified when the transaction begins,
commits, or is rolled back, either explicitly or by a call to
{@link #yieldIfContendedSafely}.
"
      end

      operation 79201335 "beginTransactionWithListenerNonExclusive"
	public explicit_return_type "void"
	nparams 1
	  param inout name "transactionListener" type class_ref 7134903 // SQLiteTransactionListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Begins a transaction in IMMEDIATE mode. Transactions can be nested. When
the outer transaction is ended all of the work done in that transaction
and all of the nested transactions will be committed or rolled back. The
changes will be rolled back if any transaction is ended without being
marked as clean (by calling setTransactionSuccessful). Otherwise they
will be committed.
<p>
Here is the standard idiom for transactions:

<pre>
  db.beginTransactionWithListenerNonExclusive(listener);
  try {
    ...
    db.setTransactionSuccessful();
  } finally {
    db.endTransaction();
  }
</pre>

@param transactionListener listener that should be notified when the
           transaction begins, commits, or is rolled back, either
           explicitly or by a call to {@link #yieldIfContendedSafely}.
"
      end

      operation 79201463 "beginTransaction"
	private explicit_return_type "void"
	nparams 2
	  param inout name "transactionListener" type class_ref 7134903 // SQLiteTransactionListener
	  param inout name "exclusive" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79201591 "endTransaction"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "End a transaction. See beginTransaction for notes about how to use this and when transactions
are committed and rolled back.
"
      end

      operation 79201719 "setTransactionSuccessful"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks the current transaction as successful. Do not do any more database work between
calling this and calling endTransaction. Do as little non-database work as possible in that
situation too. If any errors are encountered between this and endTransaction the transaction
will still be committed.

@throws IllegalStateException if the current thread is not in a transaction or the
transaction is already marked as successful.
"
      end

      operation 79201847 "inTransaction"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the current thread has a transaction pending.

@return True if the current thread is in a transaction.
"
      end

      operation 79201975 "isDbLockedByCurrentThread"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the current thread is holding an active connection to the database.
<p>
The name of this method comes from a time when having an active connection
to the database meant that the thread was holding an actual lock on the
database.  Nowadays, there is no longer a true \"database lock\" although threads
may block if they cannot acquire a database connection to perform a
particular operation.
</p>

@return True if the current thread is holding an active connection to the database.
"
      end

      operation 79202103 "isDbLockedByOtherThreads"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Always returns false.
<p>
There is no longer the concept of a database lock, so this method always returns false.
</p>

@return False.
@deprecated Always returns false.  Do not use this method.
"
      end

      operation 79202231 "yieldIfContended"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Temporarily end the transaction to let other threads run. The transaction is assumed to be
successful so far. Do not call setTransactionSuccessful before calling this. When this
returns a new transaction will have been created but not marked as successful.
@return true if the transaction was yielded
@deprecated if the db is locked more than once (becuase of nested transactions) then the lock
  will not be yielded. Use yieldIfContendedSafely instead.
"
      end

      operation 79202359 "yieldIfContendedSafely"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Temporarily end the transaction to let other threads run. The transaction is assumed to be
successful so far. Do not call setTransactionSuccessful before calling this. When this
returns a new transaction will have been created but not marked as successful. This assumes
that there are no nested transactions (beginTransaction has only been called once) and will
throw an exception if that is not the case.
@return true if the transaction was yielded
"
      end

      operation 79202487 "yieldIfContendedSafely"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "sleepAfterYieldDelay" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Temporarily end the transaction to let other threads run. The transaction is assumed to be
successful so far. Do not call setTransactionSuccessful before calling this. When this
returns a new transaction will have been created but not marked as successful. This assumes
that there are no nested transactions (beginTransaction has only been called once) and will
throw an exception if that is not the case.
@param sleepAfterYieldDelay if > 0, sleep this long before starting a new transaction if
  the lock was actually yielded. This will allow other background threads to make some
  more progress than they would if we started the transaction immediately.
@return true if the transaction was yielded
"
      end

      operation 79202615 "yieldIfContendedHelper"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "throwIfUnsafe" explicit_type "boolean"
	  param in name "sleepAfterYieldDelay" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79202743 "getSyncedTables"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}Map<${type}, String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Deprecated.
@deprecated This method no longer serves any useful purpose and has been deprecated.
"
      end

      operation 79202871 "openDatabase"
	class_operation public return_type class_ref 6925239 // SQLiteDatabase
	nparams 3
	  param inout name "path" explicit_type "String"
	  param inout name "factory" type class_ref 6925367 // CursorFactory
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Open the database according to the flags {@link #OPEN_READWRITE}
{@link #OPEN_READONLY} {@link #CREATE_IF_NECESSARY} and/or {@link #NO_LOCALIZED_COLLATORS}.

<p>Sets the locale of the database to the  the system's current locale.
Call {@link #setLocale} if you would like something else.</p>

@param path to database file to open and/or create
@param factory an optional factory class that is called to instantiate a
           cursor when query is called, or null for default
@param flags to control database access mode
@return the newly opened database
@throws SQLiteException if the database cannot be opened
"
      end

      operation 79202999 "openDatabase"
	class_operation public return_type class_ref 6925239 // SQLiteDatabase
	nparams 4
	  param inout name "path" explicit_type "String"
	  param inout name "factory" type class_ref 6925367 // CursorFactory
	  param in name "flags" explicit_type "int"
	  param inout name "errorHandler" type class_ref 6925495 // DatabaseErrorHandler
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Open the database according to the flags {@link #OPEN_READWRITE}
{@link #OPEN_READONLY} {@link #CREATE_IF_NECESSARY} and/or {@link #NO_LOCALIZED_COLLATORS}.

<p>Sets the locale of the database to the  the system's current locale.
Call {@link #setLocale} if you would like something else.</p>

<p>Accepts input param: a concrete instance of {@link DatabaseErrorHandler} to be
used to handle corruption when sqlite reports database corruption.</p>

@param path to database file to open and/or create
@param factory an optional factory class that is called to instantiate a
           cursor when query is called, or null for default
@param flags to control database access mode
@param errorHandler the {@link DatabaseErrorHandler} obj to be used to handle corruption
when sqlite reports database corruption
@return the newly opened database
@throws SQLiteException if the database cannot be opened
"
      end

      operation 79203127 "openOrCreateDatabase"
	class_operation public return_type class_ref 6925239 // SQLiteDatabase
	nparams 2
	  param inout name "file" explicit_type "File"
	  param inout name "factory" type class_ref 6925367 // CursorFactory
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to openDatabase(file.getPath(), factory, CREATE_IF_NECESSARY).
"
      end

      operation 79203255 "openOrCreateDatabase"
	class_operation public return_type class_ref 6925239 // SQLiteDatabase
	nparams 2
	  param inout name "path" explicit_type "String"
	  param inout name "factory" type class_ref 6925367 // CursorFactory
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to openDatabase(path, factory, CREATE_IF_NECESSARY).
"
      end

      operation 79203383 "openOrCreateDatabase"
	class_operation public return_type class_ref 6925239 // SQLiteDatabase
	nparams 3
	  param inout name "path" explicit_type "String"
	  param inout name "factory" type class_ref 6925367 // CursorFactory
	  param inout name "errorHandler" type class_ref 6925495 // DatabaseErrorHandler
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to openDatabase(path, factory, CREATE_IF_NECESSARY, errorHandler).
"
      end

      operation 79203511 "deleteDatabase"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param inout name "file" explicit_type "File"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deletes a database including its journal file and other auxiliary files
that may have been created by the database engine.

@param file The database file path.
@return True if the database was successfully deleted.
"
      end

      operation 79203639 "reopenReadWrite"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reopens the database in read-write mode.
If the database is already read-write, does nothing.

@throws SQLiteException if the database could not be reopened as requested, in which
case it remains open in read only mode.
@throws IllegalStateException if the database is not open.

@see #isReadOnly()
@hide
"
      end

      operation 79203767 "open"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79203895 "openInner"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79204023 "create"
	class_operation public return_type class_ref 6925239 // SQLiteDatabase
	nparams 1
	  param inout name "factory" type class_ref 6925367 // CursorFactory
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a memory backed SQLite database.  Its contents will be destroyed
when the database is closed.

<p>Sets the locale of the database to the  the system's current locale.
Call {@link #setLocale} if you would like something else.</p>

@param factory an optional factory class that is called to instantiate a
           cursor when query is called
@return a SQLiteDatabase object, or null if the database can't be created
"
      end

      operation 79204151 "addCustomFunction"
	public explicit_return_type "void"
	nparams 3
	  param inout name "name" explicit_type "String"
	  param in name "numArgs" explicit_type "int"
	  param inout name "function" type class_ref 7134647 // CustomFunction
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers a CustomFunction callback as a function that can be called from
SQLite database triggers.

@param name the name of the sqlite3 function
@param numArgs the number of arguments for the function
@param function callback to call when the function is executed
@hide
"
      end

      operation 79204279 "getVersion"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the database version.

@return the database version
"
      end

      operation 79204407 "setVersion"
	public explicit_return_type "void"
	nparams 1
	  param in name "version" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the database version.

@param version the new database version
"
      end

      operation 79204535 "getMaximumSize"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum size the database may grow to.

@return the new maximum database size
"
      end

      operation 79204663 "setMaximumSize"
	public explicit_return_type "long"
	nparams 1
	  param in name "numBytes" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the maximum size the database will grow to. The maximum size cannot
be set below the current size.

@param numBytes the maximum database size, in bytes
@return the new maximum database size
"
      end

      operation 79204791 "getPageSize"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current database page size, in bytes.

@return the database page size, in bytes
"
      end

      operation 79204919 "setPageSize"
	public explicit_return_type "void"
	nparams 1
	  param in name "numBytes" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the database page size. The page size must be a power of two. This
method does not work if any data has been written to the database file,
and must be called right after the database has been created.

@param numBytes the database page size, in bytes
"
      end

      operation 79205047 "markTableSyncable"
	public explicit_return_type "void"
	nparams 2
	  param inout name "table" explicit_type "String"
	  param inout name "deletedTable" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Mark this table as syncable. When an update occurs in this table the
_sync_dirty field will be set to ensure proper syncing operation.

@param table the table to mark as syncable
@param deletedTable The deleted table that corresponds to the
         syncable table
@deprecated This method no longer serves any useful purpose and has been deprecated.
"
      end

      operation 79205175 "markTableSyncable"
	public explicit_return_type "void"
	nparams 3
	  param inout name "table" explicit_type "String"
	  param inout name "foreignKey" explicit_type "String"
	  param inout name "updateTable" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Mark this table as syncable, with the _sync_dirty residing in another
table. When an update occurs in this table the _sync_dirty field of the
row in updateTable with the _id in foreignKey will be set to
ensure proper syncing operation.

@param table an update on this table will trigger a sync time removal
@param foreignKey this is the column in table whose value is an _id in
         updateTable
@param updateTable this is the table that will have its _sync_dirty
@deprecated This method no longer serves any useful purpose and has been deprecated.
"
      end

      operation 79205303 "findEditTable"
	class_operation public explicit_return_type "String"
	nparams 1
	  param inout name "tables" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds the name of the first table, which is editable.

@param tables a list of tables
@return the first table listed
"
      end

      operation 79205431 "compileStatement"
	public return_type class_ref 7130679 // SQLiteStatement
	nparams 1
	  param inout name "sql" explicit_type "String"
	nexceptions 1
	  exception class_ref 7130807 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compiles an SQL statement into a reusable pre-compiled statement object.
The parameters are identical to {@link #execSQL(String)}. You may put ?s in the
statement and fill in those values with {@link SQLiteProgram#bindString}
and {@link SQLiteProgram#bindLong} each time you want to run the
statement. Statements may not return result sets larger than 1x1.
<p>
No two threads should be using the same {@link SQLiteStatement} at the same time.

@param sql The raw SQL statement, may contain ? for unknown values to be
           bound later.
@return A pre-compiled {@link SQLiteStatement} object. Note that
{@link SQLiteStatement}s are not synchronized, see the documentation for more details.
"
      end

      operation 79205559 "query"
	public return_type class_ref 6954295 // Cursor
	nparams 9
	  param inout name "distinct" explicit_type "boolean"
	  param inout name "table" explicit_type "String"
	  param inout name "columns" explicit_type "String"
	multiplicity "[]"
	  param inout name "selection" explicit_type "String"
	  param inout name "selectionArgs" explicit_type "String"
	multiplicity "[]"
	  param inout name "groupBy" explicit_type "String"
	  param inout name "having" explicit_type "String"
	  param inout name "orderBy" explicit_type "String"
	  param inout name "limit" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4}[] ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Query the given URL, returning a {@link Cursor} over the result set.

@param distinct true if you want each row to be unique, false otherwise.
@param table The table name to compile the query against.
@param columns A list of which columns to return. Passing null will
           return all columns, which is discouraged to prevent reading
           data from storage that isn't going to be used.
@param selection A filter declaring which rows to return, formatted as an
           SQL WHERE clause (excluding the WHERE itself). Passing null
           will return all rows for the given table.
@param selectionArgs You may include ?s in selection, which will be
        replaced by the values from selectionArgs, in order that they
        appear in the selection. The values will be bound as Strings.
@param groupBy A filter declaring how to group rows, formatted as an SQL
           GROUP BY clause (excluding the GROUP BY itself). Passing null
           will cause the rows to not be grouped.
@param having A filter declare which row groups to include in the cursor,
           if row grouping is being used, formatted as an SQL HAVING
           clause (excluding the HAVING itself). Passing null will cause
           all row groups to be included, and is required when row
           grouping is not being used.
@param orderBy How to order the rows, formatted as an SQL ORDER BY clause
           (excluding the ORDER BY itself). Passing null will use the
           default sort order, which may be unordered.
@param limit Limits the number of rows returned by the query,
           formatted as LIMIT clause. Passing null denotes no LIMIT clause.
@return A {@link Cursor} object, which is positioned before the first entry. Note that
{@link Cursor}s are not synchronized, see the documentation for more details.
@see Cursor
"
      end

      operation 79205687 "query"
	public return_type class_ref 6954295 // Cursor
	nparams 10
	  param inout name "distinct" explicit_type "boolean"
	  param inout name "table" explicit_type "String"
	  param inout name "columns" explicit_type "String"
	multiplicity "[]"
	  param inout name "selection" explicit_type "String"
	  param inout name "selectionArgs" explicit_type "String"
	multiplicity "[]"
	  param inout name "groupBy" explicit_type "String"
	  param inout name "having" explicit_type "String"
	  param inout name "orderBy" explicit_type "String"
	  param inout name "limit" explicit_type "String"
	  param inout name "cancellationSignal" type class_ref 7016503 // CancellationSignal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4}[] ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Query the given URL, returning a {@link Cursor} over the result set.

@param distinct true if you want each row to be unique, false otherwise.
@param table The table name to compile the query against.
@param columns A list of which columns to return. Passing null will
           return all columns, which is discouraged to prevent reading
           data from storage that isn't going to be used.
@param selection A filter declaring which rows to return, formatted as an
           SQL WHERE clause (excluding the WHERE itself). Passing null
           will return all rows for the given table.
@param selectionArgs You may include ?s in selection, which will be
        replaced by the values from selectionArgs, in order that they
        appear in the selection. The values will be bound as Strings.
@param groupBy A filter declaring how to group rows, formatted as an SQL
           GROUP BY clause (excluding the GROUP BY itself). Passing null
           will cause the rows to not be grouped.
@param having A filter declare which row groups to include in the cursor,
           if row grouping is being used, formatted as an SQL HAVING
           clause (excluding the HAVING itself). Passing null will cause
           all row groups to be included, and is required when row
           grouping is not being used.
@param orderBy How to order the rows, formatted as an SQL ORDER BY clause
           (excluding the ORDER BY itself). Passing null will use the
           default sort order, which may be unordered.
@param limit Limits the number of rows returned by the query,
           formatted as LIMIT clause. Passing null denotes no LIMIT clause.
@param cancellationSignal A signal to cancel the operation in progress, or null if none.
If the operation is canceled, then {@link OperationCanceledException} will be thrown
when the query is executed.
@return A {@link Cursor} object, which is positioned before the first entry. Note that
{@link Cursor}s are not synchronized, see the documentation for more details.
@see Cursor
"
      end

      operation 79205815 "queryWithFactory"
	public return_type class_ref 6954295 // Cursor
	nparams 10
	  param inout name "cursorFactory" type class_ref 6925367 // CursorFactory
	  param inout name "distinct" explicit_type "boolean"
	  param inout name "table" explicit_type "String"
	  param inout name "columns" explicit_type "String"
	multiplicity "[]"
	  param inout name "selection" explicit_type "String"
	  param inout name "selectionArgs" explicit_type "String"
	multiplicity "[]"
	  param inout name "groupBy" explicit_type "String"
	  param inout name "having" explicit_type "String"
	  param inout name "orderBy" explicit_type "String"
	  param inout name "limit" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Query the given URL, returning a {@link Cursor} over the result set.

@param cursorFactory the cursor factory to use, or null for the default factory
@param distinct true if you want each row to be unique, false otherwise.
@param table The table name to compile the query against.
@param columns A list of which columns to return. Passing null will
           return all columns, which is discouraged to prevent reading
           data from storage that isn't going to be used.
@param selection A filter declaring which rows to return, formatted as an
           SQL WHERE clause (excluding the WHERE itself). Passing null
           will return all rows for the given table.
@param selectionArgs You may include ?s in selection, which will be
        replaced by the values from selectionArgs, in order that they
        appear in the selection. The values will be bound as Strings.
@param groupBy A filter declaring how to group rows, formatted as an SQL
           GROUP BY clause (excluding the GROUP BY itself). Passing null
           will cause the rows to not be grouped.
@param having A filter declare which row groups to include in the cursor,
           if row grouping is being used, formatted as an SQL HAVING
           clause (excluding the HAVING itself). Passing null will cause
           all row groups to be included, and is required when row
           grouping is not being used.
@param orderBy How to order the rows, formatted as an SQL ORDER BY clause
           (excluding the ORDER BY itself). Passing null will use the
           default sort order, which may be unordered.
@param limit Limits the number of rows returned by the query,
           formatted as LIMIT clause. Passing null denotes no LIMIT clause.
@return A {@link Cursor} object, which is positioned before the first entry. Note that
{@link Cursor}s are not synchronized, see the documentation for more details.
@see Cursor
"
      end

      operation 79205943 "queryWithFactory"
	public return_type class_ref 6954295 // Cursor
	nparams 11
	  param inout name "cursorFactory" type class_ref 6925367 // CursorFactory
	  param inout name "distinct" explicit_type "boolean"
	  param inout name "table" explicit_type "String"
	  param inout name "columns" explicit_type "String"
	multiplicity "[]"
	  param inout name "selection" explicit_type "String"
	  param inout name "selectionArgs" explicit_type "String"
	multiplicity "[]"
	  param inout name "groupBy" explicit_type "String"
	  param inout name "having" explicit_type "String"
	  param inout name "orderBy" explicit_type "String"
	  param inout name "limit" explicit_type "String"
	  param inout name "cancellationSignal" type class_ref 7016503 // CancellationSignal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Query the given URL, returning a {@link Cursor} over the result set.

@param cursorFactory the cursor factory to use, or null for the default factory
@param distinct true if you want each row to be unique, false otherwise.
@param table The table name to compile the query against.
@param columns A list of which columns to return. Passing null will
           return all columns, which is discouraged to prevent reading
           data from storage that isn't going to be used.
@param selection A filter declaring which rows to return, formatted as an
           SQL WHERE clause (excluding the WHERE itself). Passing null
           will return all rows for the given table.
@param selectionArgs You may include ?s in selection, which will be
        replaced by the values from selectionArgs, in order that they
        appear in the selection. The values will be bound as Strings.
@param groupBy A filter declaring how to group rows, formatted as an SQL
           GROUP BY clause (excluding the GROUP BY itself). Passing null
           will cause the rows to not be grouped.
@param having A filter declare which row groups to include in the cursor,
           if row grouping is being used, formatted as an SQL HAVING
           clause (excluding the HAVING itself). Passing null will cause
           all row groups to be included, and is required when row
           grouping is not being used.
@param orderBy How to order the rows, formatted as an SQL ORDER BY clause
           (excluding the ORDER BY itself). Passing null will use the
           default sort order, which may be unordered.
@param limit Limits the number of rows returned by the query,
           formatted as LIMIT clause. Passing null denotes no LIMIT clause.
@param cancellationSignal A signal to cancel the operation in progress, or null if none.
If the operation is canceled, then {@link OperationCanceledException} will be thrown
when the query is executed.
@return A {@link Cursor} object, which is positioned before the first entry. Note that
{@link Cursor}s are not synchronized, see the documentation for more details.
@see Cursor
"
      end

      operation 79206071 "query"
	public return_type class_ref 6954295 // Cursor
	nparams 7
	  param inout name "table" explicit_type "String"
	  param inout name "columns" explicit_type "String"
	multiplicity "[]"
	  param inout name "selection" explicit_type "String"
	  param inout name "selectionArgs" explicit_type "String"
	multiplicity "[]"
	  param inout name "groupBy" explicit_type "String"
	  param inout name "having" explicit_type "String"
	  param inout name "orderBy" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Query the given table, returning a {@link Cursor} over the result set.

@param table The table name to compile the query against.
@param columns A list of which columns to return. Passing null will
           return all columns, which is discouraged to prevent reading
           data from storage that isn't going to be used.
@param selection A filter declaring which rows to return, formatted as an
           SQL WHERE clause (excluding the WHERE itself). Passing null
           will return all rows for the given table.
@param selectionArgs You may include ?s in selection, which will be
        replaced by the values from selectionArgs, in order that they
        appear in the selection. The values will be bound as Strings.
@param groupBy A filter declaring how to group rows, formatted as an SQL
           GROUP BY clause (excluding the GROUP BY itself). Passing null
           will cause the rows to not be grouped.
@param having A filter declare which row groups to include in the cursor,
           if row grouping is being used, formatted as an SQL HAVING
           clause (excluding the HAVING itself). Passing null will cause
           all row groups to be included, and is required when row
           grouping is not being used.
@param orderBy How to order the rows, formatted as an SQL ORDER BY clause
           (excluding the ORDER BY itself). Passing null will use the
           default sort order, which may be unordered.
@return A {@link Cursor} object, which is positioned before the first entry. Note that
{@link Cursor}s are not synchronized, see the documentation for more details.
@see Cursor
"
      end

      operation 79206199 "query"
	public return_type class_ref 6954295 // Cursor
	nparams 8
	  param inout name "table" explicit_type "String"
	  param inout name "columns" explicit_type "String"
	multiplicity "[]"
	  param inout name "selection" explicit_type "String"
	  param inout name "selectionArgs" explicit_type "String"
	multiplicity "[]"
	  param inout name "groupBy" explicit_type "String"
	  param inout name "having" explicit_type "String"
	  param inout name "orderBy" explicit_type "String"
	  param inout name "limit" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Query the given table, returning a {@link Cursor} over the result set.

@param table The table name to compile the query against.
@param columns A list of which columns to return. Passing null will
           return all columns, which is discouraged to prevent reading
           data from storage that isn't going to be used.
@param selection A filter declaring which rows to return, formatted as an
           SQL WHERE clause (excluding the WHERE itself). Passing null
           will return all rows for the given table.
@param selectionArgs You may include ?s in selection, which will be
        replaced by the values from selectionArgs, in order that they
        appear in the selection. The values will be bound as Strings.
@param groupBy A filter declaring how to group rows, formatted as an SQL
           GROUP BY clause (excluding the GROUP BY itself). Passing null
           will cause the rows to not be grouped.
@param having A filter declare which row groups to include in the cursor,
           if row grouping is being used, formatted as an SQL HAVING
           clause (excluding the HAVING itself). Passing null will cause
           all row groups to be included, and is required when row
           grouping is not being used.
@param orderBy How to order the rows, formatted as an SQL ORDER BY clause
           (excluding the ORDER BY itself). Passing null will use the
           default sort order, which may be unordered.
@param limit Limits the number of rows returned by the query,
           formatted as LIMIT clause. Passing null denotes no LIMIT clause.
@return A {@link Cursor} object, which is positioned before the first entry. Note that
{@link Cursor}s are not synchronized, see the documentation for more details.
@see Cursor
"
      end

      operation 79206327 "rawQuery"
	public return_type class_ref 6954295 // Cursor
	nparams 2
	  param inout name "sql" explicit_type "String"
	  param inout name "selectionArgs" explicit_type "String"
	multiplicity "[]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Runs the provided SQL and returns a {@link Cursor} over the result set.

@param sql the SQL query. The SQL string must not be ; terminated
@param selectionArgs You may include ?s in where clause in the query,
    which will be replaced by the values from selectionArgs. The
    values will be bound as Strings.
@return A {@link Cursor} object, which is positioned before the first entry. Note that
{@link Cursor}s are not synchronized, see the documentation for more details.
"
      end

      operation 79206455 "rawQuery"
	public return_type class_ref 6954295 // Cursor
	nparams 3
	  param inout name "sql" explicit_type "String"
	  param inout name "selectionArgs" explicit_type "String"
	multiplicity "[]"
	  param inout name "cancellationSignal" type class_ref 7016503 // CancellationSignal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Runs the provided SQL and returns a {@link Cursor} over the result set.

@param sql the SQL query. The SQL string must not be ; terminated
@param selectionArgs You may include ?s in where clause in the query,
    which will be replaced by the values from selectionArgs. The
    values will be bound as Strings.
@param cancellationSignal A signal to cancel the operation in progress, or null if none.
If the operation is canceled, then {@link OperationCanceledException} will be thrown
when the query is executed.
@return A {@link Cursor} object, which is positioned before the first entry. Note that
{@link Cursor}s are not synchronized, see the documentation for more details.
"
      end

      operation 79206583 "rawQueryWithFactory"
	public return_type class_ref 6954295 // Cursor
	nparams 4
	  param inout name "cursorFactory" type class_ref 6925367 // CursorFactory
	  param inout name "sql" explicit_type "String"
	  param inout name "selectionArgs" explicit_type "String"
	multiplicity "[]"
	  param inout name "editTable" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Runs the provided SQL and returns a cursor over the result set.

@param cursorFactory the cursor factory to use, or null for the default factory
@param sql the SQL query. The SQL string must not be ; terminated
@param selectionArgs You may include ?s in where clause in the query,
    which will be replaced by the values from selectionArgs. The
    values will be bound as Strings.
@param editTable the name of the first table, which is editable
@return A {@link Cursor} object, which is positioned before the first entry. Note that
{@link Cursor}s are not synchronized, see the documentation for more details.
"
      end

      operation 79206711 "rawQueryWithFactory"
	public return_type class_ref 6954295 // Cursor
	nparams 5
	  param inout name "cursorFactory" type class_ref 6925367 // CursorFactory
	  param inout name "sql" explicit_type "String"
	  param inout name "selectionArgs" explicit_type "String"
	multiplicity "[]"
	  param inout name "editTable" explicit_type "String"
	  param inout name "cancellationSignal" type class_ref 7016503 // CancellationSignal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Runs the provided SQL and returns a cursor over the result set.

@param cursorFactory the cursor factory to use, or null for the default factory
@param sql the SQL query. The SQL string must not be ; terminated
@param selectionArgs You may include ?s in where clause in the query,
    which will be replaced by the values from selectionArgs. The
    values will be bound as Strings.
@param editTable the name of the first table, which is editable
@param cancellationSignal A signal to cancel the operation in progress, or null if none.
If the operation is canceled, then {@link OperationCanceledException} will be thrown
when the query is executed.
@return A {@link Cursor} object, which is positioned before the first entry. Note that
{@link Cursor}s are not synchronized, see the documentation for more details.
"
      end

      operation 79206839 "insert"
	public explicit_return_type "long"
	nparams 3
	  param inout name "table" explicit_type "String"
	  param inout name "nullColumnHack" explicit_type "String"
	  param inout name "values" type class_ref 7016887 // ContentValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method for inserting a row into the database.

@param table the table to insert the row into
@param nullColumnHack optional; may be <code>null</code>.
           SQL doesn't allow inserting a completely empty row without
           naming at least one column name.  If your provided <code>values</code> is
           empty, no column names are known and an empty row can't be inserted.
           If not set to null, the <code>nullColumnHack</code> parameter
           provides the name of nullable column name to explicitly insert a NULL into
           in the case where your <code>values</code> is empty.
@param values this map contains the initial column values for the
           row. The keys should be the column names and the values the
           column values
@return the row ID of the newly inserted row, or -1 if an error occurred
"
      end

      operation 79206967 "insertOrThrow"
	public explicit_return_type "long"
	nparams 3
	  param inout name "table" explicit_type "String"
	  param inout name "nullColumnHack" explicit_type "String"
	  param inout name "values" type class_ref 7016887 // ContentValues
	nexceptions 1
	  exception class_ref 7130807 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method for inserting a row into the database.

@param table the table to insert the row into
@param nullColumnHack optional; may be <code>null</code>.
           SQL doesn't allow inserting a completely empty row without
           naming at least one column name.  If your provided <code>values</code> is
           empty, no column names are known and an empty row can't be inserted.
           If not set to null, the <code>nullColumnHack</code> parameter
           provides the name of nullable column name to explicitly insert a NULL into
           in the case where your <code>values</code> is empty.
@param values this map contains the initial column values for the
           row. The keys should be the column names and the values the
           column values
@throws SQLException
@return the row ID of the newly inserted row, or -1 if an error occurred
"
      end

      operation 79207095 "replace"
	public explicit_return_type "long"
	nparams 3
	  param inout name "table" explicit_type "String"
	  param inout name "nullColumnHack" explicit_type "String"
	  param inout name "initialValues" type class_ref 7016887 // ContentValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method for replacing a row in the database.

@param table the table in which to replace the row
@param nullColumnHack optional; may be <code>null</code>.
           SQL doesn't allow inserting a completely empty row without
           naming at least one column name.  If your provided <code>initialValues</code> is
           empty, no column names are known and an empty row can't be inserted.
           If not set to null, the <code>nullColumnHack</code> parameter
           provides the name of nullable column name to explicitly insert a NULL into
           in the case where your <code>initialValues</code> is empty.
@param initialValues this map contains the initial column values for
  the row.
@return the row ID of the newly inserted row, or -1 if an error occurred
"
      end

      operation 79207223 "replaceOrThrow"
	public explicit_return_type "long"
	nparams 3
	  param inout name "table" explicit_type "String"
	  param inout name "nullColumnHack" explicit_type "String"
	  param inout name "initialValues" type class_ref 7016887 // ContentValues
	nexceptions 1
	  exception class_ref 7130807 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method for replacing a row in the database.

@param table the table in which to replace the row
@param nullColumnHack optional; may be <code>null</code>.
           SQL doesn't allow inserting a completely empty row without
           naming at least one column name.  If your provided <code>initialValues</code> is
           empty, no column names are known and an empty row can't be inserted.
           If not set to null, the <code>nullColumnHack</code> parameter
           provides the name of nullable column name to explicitly insert a NULL into
           in the case where your <code>initialValues</code> is empty.
@param initialValues this map contains the initial column values for
  the row. The key
@throws SQLException
@return the row ID of the newly inserted row, or -1 if an error occurred
"
      end

      operation 79207351 "insertWithOnConflict"
	public explicit_return_type "long"
	nparams 4
	  param inout name "table" explicit_type "String"
	  param inout name "nullColumnHack" explicit_type "String"
	  param inout name "initialValues" type class_ref 7016887 // ContentValues
	  param in name "conflictAlgorithm" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "General method for inserting a row into the database.

@param table the table to insert the row into
@param nullColumnHack optional; may be <code>null</code>.
           SQL doesn't allow inserting a completely empty row without
           naming at least one column name.  If your provided <code>initialValues</code> is
           empty, no column names are known and an empty row can't be inserted.
           If not set to null, the <code>nullColumnHack</code> parameter
           provides the name of nullable column name to explicitly insert a NULL into
           in the case where your <code>initialValues</code> is empty.
@param initialValues this map contains the initial column values for the
           row. The keys should be the column names and the values the
           column values
@param conflictAlgorithm for insert conflict resolver
@return the row ID of the newly inserted row OR <code>-1</code> if either the
           input parameter <code>conflictAlgorithm</code> = {@link #CONFLICT_IGNORE}
           or an error occurred.
"
      end

      operation 79207479 "delete"
	public explicit_return_type "int"
	nparams 3
	  param inout name "table" explicit_type "String"
	  param inout name "whereClause" explicit_type "String"
	  param inout name "whereArgs" explicit_type "String"
	multiplicity "[]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method for deleting rows in the database.

@param table the table to delete from
@param whereClause the optional WHERE clause to apply when deleting.
           Passing null will delete all rows.
@param whereArgs You may include ?s in the where clause, which
           will be replaced by the values from whereArgs. The values
           will be bound as Strings.
@return the number of rows affected if a whereClause is passed in, 0
        otherwise. To remove all rows and get a count pass \"1\" as the
        whereClause.
"
      end

      operation 79207607 "update"
	public explicit_return_type "int"
	nparams 4
	  param inout name "table" explicit_type "String"
	  param inout name "values" type class_ref 7016887 // ContentValues
	  param inout name "whereClause" explicit_type "String"
	  param inout name "whereArgs" explicit_type "String"
	multiplicity "[]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method for updating rows in the database.

@param table the table to update in
@param values a map from column names to new column values. null is a
           valid value that will be translated to NULL.
@param whereClause the optional WHERE clause to apply when updating.
           Passing null will update all rows.
@param whereArgs You may include ?s in the where clause, which
           will be replaced by the values from whereArgs. The values
           will be bound as Strings.
@return the number of rows affected
"
      end

      operation 79207735 "updateWithOnConflict"
	public explicit_return_type "int"
	nparams 5
	  param inout name "table" explicit_type "String"
	  param inout name "values" type class_ref 7016887 // ContentValues
	  param inout name "whereClause" explicit_type "String"
	  param inout name "whereArgs" explicit_type "String"
	multiplicity "[]"
	  param in name "conflictAlgorithm" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method for updating rows in the database.

@param table the table to update in
@param values a map from column names to new column values. null is a
           valid value that will be translated to NULL.
@param whereClause the optional WHERE clause to apply when updating.
           Passing null will update all rows.
@param whereArgs You may include ?s in the where clause, which
           will be replaced by the values from whereArgs. The values
           will be bound as Strings.
@param conflictAlgorithm for update conflict resolver
@return the number of rows affected
"
      end

      operation 79207863 "execSQL"
	public explicit_return_type "void"
	nparams 1
	  param inout name "sql" explicit_type "String"
	nexceptions 1
	  exception class_ref 7130807 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Execute a single SQL statement that is NOT a SELECT
or any other SQL statement that returns data.
<p>
It has no means to return any data (such as the number of affected rows).
Instead, you're encouraged to use {@link #insert(String, String, ContentValues)},
{@link #update(String, ContentValues, String, String[])}, et al, when possible.
</p>
<p>
When using {@link #enableWriteAheadLogging()}, journal_mode is
automatically managed by this class. So, do not set journal_mode
using \"PRAGMA journal_mode'<value>\" statement if your app is using
{@link #enableWriteAheadLogging()}
</p>

@param sql the SQL statement to be executed. Multiple statements separated by semicolons are
not supported.
@throws SQLException if the SQL string is invalid
"
      end

      operation 79207991 "execSQL"
	public explicit_return_type "void"
	nparams 2
	  param inout name "sql" explicit_type "String"
	  param inout name "bindArgs" explicit_type "Object"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 7130807 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Execute a single SQL statement that is NOT a SELECT/INSERT/UPDATE/DELETE.
<p>
For INSERT statements, use any of the following instead.
<ul>
  <li>{@link #insert(String, String, ContentValues)}</li>
  <li>{@link #insertOrThrow(String, String, ContentValues)}</li>
  <li>{@link #insertWithOnConflict(String, String, ContentValues, int)}</li>
</ul>
<p>
For UPDATE statements, use any of the following instead.
<ul>
  <li>{@link #update(String, ContentValues, String, String[])}</li>
  <li>{@link #updateWithOnConflict(String, ContentValues, String, String[], int)}</li>
</ul>
<p>
For DELETE statements, use any of the following instead.
<ul>
  <li>{@link #delete(String, String, String[])}</li>
</ul>
<p>
For example, the following are good candidates for using this method:
<ul>
  <li>ALTER TABLE</li>
  <li>CREATE or DROP table / trigger / view / index / virtual table</li>
  <li>REINDEX</li>
  <li>RELEASE</li>
  <li>SAVEPOINT</li>
  <li>PRAGMA that returns no data</li>
</ul>
</p>
<p>
When using {@link #enableWriteAheadLogging()}, journal_mode is
automatically managed by this class. So, do not set journal_mode
using \"PRAGMA journal_mode'<value>\" statement if your app is using
{@link #enableWriteAheadLogging()}
</p>

@param sql the SQL statement to be executed. Multiple statements separated by semicolons are
not supported.
@param bindArgs only byte[], String, Long and Double are supported in bindArgs.
@throws SQLException if the SQL string is invalid
"
      end

      operation 79208119 "executeSql"
	private explicit_return_type "int"
	nparams 2
	  param inout name "sql" explicit_type "String"
	  param inout name "bindArgs" explicit_type "Object"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 7130807 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79208247 "validateSql"
	public explicit_return_type "void"
	nparams 2
	  param inout name "sql" explicit_type "String"
	  param inout name "cancellationSignal" type class_ref 7016503 // CancellationSignal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @Nullable ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Verifies that a SQL SELECT statement is valid by compiling it.
If the SQL statement is not valid, this method will throw a {@link SQLiteException}.

@param sql SQL to be validated
@param cancellationSignal A signal to cancel the operation in progress, or null if none.
If the operation is canceled, then {@link OperationCanceledException} will be thrown
when the query is executed.
@throws SQLiteException if {@code sql} is invalid
"
      end

      operation 79208375 "isReadOnly"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the database is opened as read only.

@return True if database is opened as read only.
"
      end

      operation 79208503 "isReadOnlyLocked"
	private explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79208631 "isInMemoryDatabase"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the database is in-memory db.

@return True if the database is in-memory.
@hide
"
      end

      operation 79208759 "isOpen"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the database is currently open.

@return True if the database is currently open (has not been closed).
"
      end

      operation 79208887 "needUpgrade"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "newVersion" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the new version code is greater than the current database version.

@param newVersion The new version code.
@return True if the new version code is greater than the current database version. 
"
      end

      operation 79209015 "getPath"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the path to the database file.

@return The path to the database file.
"
      end

      operation 79209143 "setLocale"
	public explicit_return_type "void"
	nparams 1
	  param inout name "locale" explicit_type "Locale"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the locale for this database.  Does nothing if this database has
the {@link #NO_LOCALIZED_COLLATORS} flag set or was opened read only.

@param locale The new locale.

@throws SQLException if the locale could not be set.  The most common reason
for this is that there is no collator available for the locale you requested.
In this case the database remains unchanged.
"
      end

      operation 79209271 "setMaxSqlCacheSize"
	public explicit_return_type "void"
	nparams 1
	  param in name "cacheSize" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the maximum size of the prepared-statement cache for this database.
(size of the cache = number of compiled-sql-statements stored in the cache).
<p>
Maximum cache size can ONLY be increased from its current size (default = 10).
If this method is called with smaller size than the current maximum value,
then IllegalStateException is thrown.
<p>
This method is thread-safe.

@param cacheSize the size of the cache. can be (0 to {@link #MAX_SQL_CACHE_SIZE})
@throws IllegalStateException if input cacheSize > {@link #MAX_SQL_CACHE_SIZE}.
"
      end

      operation 79209399 "setForeignKeyConstraintsEnabled"
	public explicit_return_type "void"
	nparams 1
	  param inout name "enable" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether foreign key constraints are enabled for the database.
<p>
By default, foreign key constraints are not enforced by the database.
This method allows an application to enable foreign key constraints.
It must be called each time the database is opened to ensure that foreign
key constraints are enabled for the session.
</p><p>
A good time to call this method is right after calling {@link #openOrCreateDatabase}
or in the {@link SQLiteOpenHelper#onConfigure} callback.
</p><p>
When foreign key constraints are disabled, the database does not check whether
changes to the database will violate foreign key constraints.  Likewise, when
foreign key constraints are disabled, the database will not execute cascade
delete or update triggers.  As a result, it is possible for the database
state to become inconsistent.  To perform a database integrity check,
call {@link #isDatabaseIntegrityOk}.
</p><p>
This method must not be called while a transaction is in progress.
</p><p>
See also <a href=\"http://sqlite.org/foreignkeys.html\">SQLite Foreign Key Constraints</a>
for more details about foreign key constraint support.
</p>

@param enable True to enable foreign key constraints, false to disable them.

@throws IllegalStateException if the are transactions is in progress
when this method is called.
"
      end

      operation 79209527 "enableWriteAheadLogging"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method enables parallel execution of queries from multiple threads on the
same database.  It does this by opening multiple connections to the database
and using a different database connection for each query.  The database
journal mode is also changed to enable writes to proceed concurrently with reads.
<p>
When write-ahead logging is not enabled (the default), it is not possible for
reads and writes to occur on the database at the same time.  Before modifying the
database, the writer implicitly acquires an exclusive lock on the database which
prevents readers from accessing the database until the write is completed.
</p><p>
In contrast, when write-ahead logging is enabled (by calling this method), write
operations occur in a separate log file which allows reads to proceed concurrently.
While a write is in progress, readers on other threads will perceive the state
of the database as it was before the write began.  When the write completes, readers
on other threads will then perceive the new state of the database.
</p><p>
It is a good idea to enable write-ahead logging whenever a database will be
concurrently accessed and modified by multiple threads at the same time.
However, write-ahead logging uses significantly more memory than ordinary
journaling because there are multiple connections to the same database.
So if a database will only be used by a single thread, or if optimizing
concurrency is not very important, then write-ahead logging should be disabled.
</p><p>
After calling this method, execution of queries in parallel is enabled as long as
the database remains open.  To disable execution of queries in parallel, either
call {@link #disableWriteAheadLogging} or close the database and reopen it.
</p><p>
The maximum number of connections used to execute queries in parallel is
dependent upon the device memory and possibly other properties.
</p><p>
If a query is part of a transaction, then it is executed on the same database handle the
transaction was begun.
</p><p>
Writers should use {@link #beginTransactionNonExclusive()} or
{@link #beginTransactionWithListenerNonExclusive(SQLiteTransactionListener)}
to start a transaction.  Non-exclusive mode allows database file to be in readable
by other threads executing queries.
</p><p>
If the database has any attached databases, then execution of queries in parallel is NOT
possible.  Likewise, write-ahead logging is not supported for read-only databases
or memory databases.  In such cases, {@link #enableWriteAheadLogging} returns false.
</p><p>
The best way to enable write-ahead logging is to pass the
{@link #ENABLE_WRITE_AHEAD_LOGGING} flag to {@link #openDatabase}.  This is
more efficient than calling {@link #enableWriteAheadLogging}.
<code><pre>
    SQLiteDatabase db = SQLiteDatabase.openDatabase(\"db_filename\", cursorFactory,
            SQLiteDatabase.CREATE_IF_NECESSARY | SQLiteDatabase.ENABLE_WRITE_AHEAD_LOGGING,
            myDatabaseErrorHandler);
    db.enableWriteAheadLogging();
</pre></code>
</p><p>
Another way to enable write-ahead logging is to call {@link #enableWriteAheadLogging}
after opening the database.
<code><pre>
    SQLiteDatabase db = SQLiteDatabase.openDatabase(\"db_filename\", cursorFactory,
            SQLiteDatabase.CREATE_IF_NECESSARY, myDatabaseErrorHandler);
    db.enableWriteAheadLogging();
</pre></code>
</p><p>
See also <a href=\"http://sqlite.org/wal.html\">SQLite Write-Ahead Logging</a> for
more details about how write-ahead logging works.
</p>

@return True if write-ahead logging is enabled.

@throws IllegalStateException if there are transactions in progress at the
time this method is called.  WAL mode can only be changed when there are no
transactions in progress.

@see #ENABLE_WRITE_AHEAD_LOGGING
@see #disableWriteAheadLogging
"
      end

      operation 79209655 "disableWriteAheadLogging"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method disables the features enabled by {@link #enableWriteAheadLogging()}.

@throws IllegalStateException if there are transactions in progress at the
time this method is called.  WAL mode can only be changed when there are no
transactions in progress.

@see #enableWriteAheadLogging
"
      end

      operation 79209783 "isWriteAheadLoggingEnabled"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if write-ahead logging has been enabled for this database.

@return True if write-ahead logging has been enabled for this database.

@see #enableWriteAheadLogging
@see #ENABLE_WRITE_AHEAD_LOGGING
"
      end

      operation 79209911 "getDbStats"
	class_operation package return_type class_ref 7133623 // DbStats
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}ArrayList<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Collect statistics about all open databases in the current process.
Used by bug report.
"
      end

      operation 79210039 "collectDbStats"
	private explicit_return_type "void"
	nparams 1
	  param inout name "dbStatsList" explicit_type "ArrayList<DbStats>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79210167 "getActiveDatabases"
	class_operation private return_type class_ref 6925239 // SQLiteDatabase
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}ArrayList<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79210295 "dumpAll"
	class_operation package explicit_return_type "void"
	nparams 2
	  param inout name "printer" type class_ref 6962999 // Printer
	  param inout name "verbose" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Dump detailed information about all open databases in the current process.
Used by bug report.
"
      end

      operation 79210423 "dump"
	private explicit_return_type "void"
	nparams 2
	  param inout name "printer" type class_ref 6962999 // Printer
	  param inout name "verbose" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79210551 "getAttachedDbs"
	public return_type class_ref 7022135 // Pair
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}<String, String>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns list of full pathnames of all attached databases including the main database
by executing 'pragma database_list' on the database.

@return ArrayList of pairs of (database name, database file path) or null if the database
is not open.
"
      end

      operation 79210679 "isDatabaseIntegrityOk"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Runs 'pragma integrity_check' on the given database (and all the attached databases)
and returns true if the given database (and all its attached databases) pass integrity_check,
false otherwise.
<p>
If the result is false, then this method logs the errors reported by the integrity_check
command execution.
<p>
Note that 'pragma integrity_check' on a database can take a long time.

@return true if the given database (and all its attached databases) pass integrity_check,
false otherwise.
"
      end

      operation 79210807 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 79210935 "throwIfNotOpenLocked"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 7107895 "SQLiteOpenHelper"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A helper class to manage database creation and version management.

<p>You create a subclass implementing {@link #onCreate}, {@link #onUpgrade} and
optionally {@link #onOpen}, and this class takes care of opening the database
if it exists, creating it if it does not, and upgrading it as necessary.
Transactions are used to make sure the database is always in a sensible state.

<p>This class makes it easy for {@link android.content.ContentProvider}
implementations to defer opening and upgrading the database until first use,
to avoid blocking application startup with long-running database upgrades.

<p>For an example, see the NotePadProvider class in the NotePad sample application,
in the <em>samples/</em> directory of the SDK.</p>

<p class=\"note\"><strong>Note:</strong> this class assumes
monotonically increasing version numbers for upgrades.</p>
"
      attribute 24574391 "DEBUG_STRICT_READONLY"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " When true, getReadableDatabase returns a read-only database if it is just being opened.
 The database handle is reopened in read/write mode when getWritableDatabase is called.
 We leave this behavior disabled in production because it is inefficient and breaks
 many applications.  For debugging purposes it can be useful to turn on strict
 read-only semantics to catch applications that call getReadableDatabase when they really
 wanted getWritableDatabase.
"
      end

      classrelation 15499063 // mContext (<unidirectional association>)
	relation 15499063 --->
	  a role_name "mContext" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15499063 // mContext (<unidirectional association>)
	  b parent class_ref 6923703 // Context
      end

      classrelation 15499319 // mFactory (<unidirectional association>)
	relation 15499319 --->
	  a role_name "mFactory" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15499319 // mFactory (<unidirectional association>)
	  b parent class_ref 6925367 // CursorFactory
      end

      attribute 24574519 "mNewVersion"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 15499447 // mDatabase (<unidirectional association>)
	relation 15499447 --->
	  a role_name "mDatabase" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15499447 // mDatabase (<unidirectional association>)
	  b parent class_ref 6925239 // SQLiteDatabase
      end

      attribute 24574647 "mIsInitializing"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24574775 "mEnableWriteAheadLogging"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 15499575 // mErrorHandler (<unidirectional association>)
	relation 15499575 --->
	  a role_name "mErrorHandler" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15499575 // mErrorHandler (<unidirectional association>)
	  b parent class_ref 6925495 // DatabaseErrorHandler
      end

      operation 78840887 "SQLiteOpenHelper"
	public explicit_return_type ""
	nparams 4
	  param inout name "context" type class_ref 6923703 // Context
	  param inout name "name" explicit_type "String"
	  param inout name "factory" type class_ref 6925367 // CursorFactory
	  param in name "version" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a helper object to create, open, and/or manage a database.
This method always returns very quickly.  The database is not actually
created or opened until one of {@link #getWritableDatabase} or
{@link #getReadableDatabase} is called.

@param context to use to open or create the database
@param name of the database file, or null for an in-memory database
@param factory to use for creating cursor objects, or null for the default
@param version number of the database (starting at 1); if the database is older,
    {@link #onUpgrade} will be used to upgrade the database; if the database is
    newer, {@link #onDowngrade} will be used to downgrade the database
"
      end

      operation 78841015 "SQLiteOpenHelper"
	public explicit_return_type ""
	nparams 5
	  param inout name "context" type class_ref 6923703 // Context
	  param inout name "name" explicit_type "String"
	  param inout name "factory" type class_ref 6925367 // CursorFactory
	  param in name "version" explicit_type "int"
	  param inout name "errorHandler" type class_ref 6925495 // DatabaseErrorHandler
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a helper object to create, open, and/or manage a database.
The database is not actually created or opened until one of
{@link #getWritableDatabase} or {@link #getReadableDatabase} is called.

<p>Accepts input param: a concrete instance of {@link DatabaseErrorHandler} to be
used to handle corruption when sqlite reports database corruption.</p>

@param context to use to open or create the database
@param name of the database file, or null for an in-memory database
@param factory to use for creating cursor objects, or null for the default
@param version number of the database (starting at 1); if the database is older,
    {@link #onUpgrade} will be used to upgrade the database; if the database is
    newer, {@link #onDowngrade} will be used to downgrade the database
@param errorHandler the {@link DatabaseErrorHandler} to be used when sqlite reports database
corruption, or null to use the default error handler.
"
      end

      operation 78841143 "getDatabaseName"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the name of the SQLite database being opened, as given to
the constructor.
"
      end

      operation 78841271 "setWriteAheadLoggingEnabled"
	public explicit_return_type "void"
	nparams 1
	  param inout name "enabled" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enables or disables the use of write-ahead logging for the database.

Write-ahead logging cannot be used with read-only databases so the value of
this flag is ignored if the database is opened read-only.

@param enabled True if write-ahead logging should be enabled, false if it
should be disabled.

@see SQLiteDatabase#enableWriteAheadLogging()
"
      end

      operation 78841399 "getWritableDatabase"
	public return_type class_ref 6925239 // SQLiteDatabase
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create and/or open a database that will be used for reading and writing.
The first time this is called, the database will be opened and
{@link #onCreate}, {@link #onUpgrade} and/or {@link #onOpen} will be
called.

<p>Once opened successfully, the database is cached, so you can
call this method every time you need to write to the database.
(Make sure to call {@link #close} when you no longer need the database.)
Errors such as bad permissions or a full disk may cause this method
to fail, but future attempts may succeed if the problem is fixed.</p>

<p class=\"caution\">Database upgrade may take a long time, you
should not call this method from the application main thread, including
from {@link android.content.ContentProvider#onCreate ContentProvider.onCreate()}.

@throws SQLiteException if the database cannot be opened for writing
@return a read/write database object valid until {@link #close} is called
"
      end

      operation 78841527 "getReadableDatabase"
	public return_type class_ref 6925239 // SQLiteDatabase
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create and/or open a database.  This will be the same object returned by
{@link #getWritableDatabase} unless some problem, such as a full disk,
requires the database to be opened read-only.  In that case, a read-only
database object will be returned.  If the problem is fixed, a future call
to {@link #getWritableDatabase} may succeed, in which case the read-only
database object will be closed and the read/write object will be returned
in the future.

<p class=\"caution\">Like {@link #getWritableDatabase}, this method may
take a long time to return, so you should not call it from the
application main thread, including from
{@link android.content.ContentProvider#onCreate ContentProvider.onCreate()}.

@throws SQLiteException if the database cannot be opened
@return a database object valid until {@link #getWritableDatabase}
    or {@link #close} is called.
"
      end

      operation 78841655 "getDatabaseLocked"
	private return_type class_ref 6925239 // SQLiteDatabase
	nparams 1
	  param inout name "writable" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 78841783 "close"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close any open database object.
"
      end

      operation 78841911 "onConfigure"
	public explicit_return_type "void"
	nparams 1
	  param inout name "db" type class_ref 6925239 // SQLiteDatabase
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when the database connection is being configured, to enable features
such as write-ahead logging or foreign key support.
<p>
This method is called before {@link #onCreate}, {@link #onUpgrade},
{@link #onDowngrade}, or {@link #onOpen} are called.  It should not modify
the database except to configure the database connection as required.
</p><p>
This method should only call methods that configure the parameters of the
database connection, such as {@link SQLiteDatabase#enableWriteAheadLogging}
{@link SQLiteDatabase#setForeignKeyConstraintsEnabled},
{@link SQLiteDatabase#setLocale}, {@link SQLiteDatabase#setMaximumSize},
or executing PRAGMA statements.
</p>

@param db The database.
"
      end

      operation 78842039 "onCreate"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "db" type class_ref 6925239 // SQLiteDatabase
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when the database is created for the first time. This is where the
creation of tables and the initial population of the tables should happen.

@param db The database.
"
      end

      operation 78842167 "onUpgrade"
	abstract public explicit_return_type "void"
	nparams 3
	  param inout name "db" type class_ref 6925239 // SQLiteDatabase
	  param in name "oldVersion" explicit_type "int"
	  param in name "newVersion" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when the database needs to be upgraded. The implementation
should use this method to drop tables, add tables, or do anything else it
needs to upgrade to the new schema version.

<p>
The SQLite ALTER TABLE documentation can be found
<a href=\"http://sqlite.org/lang_altertable.html\">here</a>. If you add new columns
you can use ALTER TABLE to insert them into a live table. If you rename or remove columns
you can use ALTER TABLE to rename the old table, then create the new table and then
populate the new table with the contents of the old table.
</p><p>
This method executes within a transaction.  If an exception is thrown, all changes
will automatically be rolled back.
</p>

@param db The database.
@param oldVersion The old database version.
@param newVersion The new database version.
"
      end

      operation 78842295 "onDowngrade"
	public explicit_return_type "void"
	nparams 3
	  param inout name "db" type class_ref 6925239 // SQLiteDatabase
	  param in name "oldVersion" explicit_type "int"
	  param in name "newVersion" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when the database needs to be downgraded. This is strictly similar to
{@link #onUpgrade} method, but is called whenever current version is newer than requested one.
However, this method is not abstract, so it is not mandatory for a customer to
implement it. If not overridden, default implementation will reject downgrade and
throws SQLiteException

<p>
This method executes within a transaction.  If an exception is thrown, all changes
will automatically be rolled back.
</p>

@param db The database.
@param oldVersion The old database version.
@param newVersion The new database version.
"
      end

      operation 78842423 "onOpen"
	public explicit_return_type "void"
	nparams 1
	  param inout name "db" type class_ref 6925239 // SQLiteDatabase
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when the database has been opened.  The implementation
should check {@link SQLiteDatabase#isReadOnly} before updating the
database.
<p>
This method is called after the database connection has been configured
and after the database schema has been created, upgraded or downgraded as necessary.
If the database connection must be configured in some way before the schema
is created, upgraded, or downgraded, do it in {@link #onConfigure} instead.
</p>

@param db The database.
"
      end
    end

    class 7130039 "SQLiteClosable"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An object created from a SQLiteDatabase that can be closed.

This class implements a primitive reference counting scheme for database objects.
"
      attribute 24712631 "mReferenceCount"
	private explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 79153335 "onAllReferencesReleased"
	abstract protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when the last reference to the object was released by
a call to {@link #releaseReference()} or {@link #close()}.
"
      end

      operation 79153463 "onAllReferencesReleasedFromContainer"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Called when the last reference to the object was released by
a call to {@link #releaseReferenceFromContainer()}.

@deprecated Do not use.
"
      end

      operation 79153591 "acquireReference"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Acquires a reference to the object.

@throws IllegalStateException if the last reference to the object has already
been released.
"
      end

      operation 79153719 "releaseReference"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Releases a reference to the object, closing the object if the last reference
was released.

@see #onAllReferencesReleased()
"
      end

      operation 79153847 "releaseReferenceFromContainer"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Releases a reference to the object that was owned by the container of the object,
closing the object if the last reference was released.

@see #onAllReferencesReleasedFromContainer()
@deprecated Do not use.
"
      end

      operation 79153975 "close"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Releases a reference to the object, closing the object if the last reference
was released.

Calling this method is equivalent to calling {@link #releaseReference}.

@see #releaseReference()
@see #onAllReferencesReleased()
"
      end
    end

    class 7130423 "SQLiteProgram"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A base class for compiled SQLite programs.
<p>
This class is not thread-safe.
</p>
"
      classrelation 15609655 // <generalisation>
	relation 15609655 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15609655 // <generalisation>
	  b parent class_ref 7130039 // SQLiteClosable
      end

      classrelation 15609911 // mDatabase (<unidirectional association>)
	relation 15609911 --->
	  a role_name "mDatabase" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15609911 // mDatabase (<unidirectional association>)
	  b parent class_ref 6925239 // SQLiteDatabase
      end

      attribute 24726199 "mReadOnly"
	const_attribute private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24726327 "mNumParameters"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 79216951 "SQLiteProgram"
	package explicit_return_type ""
	nparams 4
	  param inout name "db" type class_ref 6925239 // SQLiteDatabase
	  param inout name "sql" explicit_type "String"
	  param inout name "bindArgs" explicit_type "Object"
	multiplicity "[]"
	  param inout name "cancellationSignalForPrepare" type class_ref 7016503 // CancellationSignal
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79217079 "getDatabase"
	package return_type class_ref 6925239 // SQLiteDatabase
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79217207 "getSql"
	package explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79217335 "getBindArgs"
	package explicit_return_type "Object"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79217463 "getColumnNames"
	package explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79217591 "getSession"
	protected return_type class_ref 7134775 // SQLiteSession
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      operation 79217719 "getConnectionFlags"
	protected explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      operation 79217847 "onCorruption"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      operation 79217975 "getUniqueId"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Unimplemented.
@deprecated This method is deprecated and must not be used.
"
      end

      operation 79218103 "bindNull"
	public explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Bind a NULL value to this statement. The value remains bound until
{@link #clearBindings} is called.

@param index The 1-based index to the parameter to bind null to
"
      end

      operation 79218231 "bindLong"
	public explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param in name "value" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Bind a long value to this statement. The value remains bound until
{@link #clearBindings} is called.
addToBindArgs
@param index The 1-based index to the parameter to bind
@param value The value to bind
"
      end

      operation 79218359 "bindDouble"
	public explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param in name "value" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Bind a double value to this statement. The value remains bound until
{@link #clearBindings} is called.

@param index The 1-based index to the parameter to bind
@param value The value to bind
"
      end

      operation 79218487 "bindString"
	public explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "value" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Bind a String value to this statement. The value remains bound until
{@link #clearBindings} is called.

@param index The 1-based index to the parameter to bind
@param value The value to bind, must not be null
"
      end

      operation 79218615 "bindBlob"
	public explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "value" explicit_type "byte"
	multiplicity "[]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Bind a byte array value to this statement. The value remains bound until
{@link #clearBindings} is called.

@param index The 1-based index to the parameter to bind
@param value The value to bind, must not be null
"
      end

      operation 79218743 "clearBindings"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears all existing bindings. Unset bindings are treated as NULL.
"
      end

      operation 79218871 "bindAllArgsAsStrings"
	public explicit_return_type "void"
	nparams 1
	  param inout name "bindArgs" explicit_type "String"
	multiplicity "[]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given an array of String bindArgs, this method binds all of them in one single call.

@param bindArgs the String array of bind args, none of which must be null.
"
      end

      operation 79218999 "onAllReferencesReleased"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 79219127 "bind"
	private explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "value" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 7130679 "SQLiteStatement"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a statement that can be executed against a database.  The statement
cannot return multiple rows or columns, but single value (1 x 1) result sets
are supported.
<p>
This class is not thread-safe.
</p>
"
      classrelation 15612215 // <generalisation>
	relation 15612215 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15612215 // <generalisation>
	  b parent class_ref 7130423 // SQLiteProgram
      end

      operation 79226039 "SQLiteStatement"
	package explicit_return_type ""
	nparams 3
	  param inout name "db" type class_ref 6925239 // SQLiteDatabase
	  param inout name "sql" explicit_type "String"
	  param inout name "bindArgs" explicit_type "Object"
	multiplicity "[]"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79226167 "execute"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Execute this SQL statement, if it is not a SELECT / INSERT / DELETE / UPDATE, for example
CREATE / DROP table, view, trigger, index etc.

@throws android.database.SQLException If the SQL string is invalid for
        some reason
"
      end

      operation 79226295 "executeUpdateDelete"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Execute this SQL statement, if the the number of rows affected by execution of this SQL
statement is of any importance to the caller - for example, UPDATE / DELETE SQL statements.

@return the number of rows affected by this SQL statement execution.
@throws android.database.SQLException If the SQL string is invalid for
        some reason
"
      end

      operation 79226423 "executeInsert"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Execute this SQL statement and return the ID of the row inserted due to this call.
The SQL statement should be an INSERT for this to be a useful call.

@return the row ID of the last row inserted, if this insert is successful. -1 otherwise.

@throws android.database.SQLException If the SQL string is invalid for
        some reason
"
      end

      operation 79226551 "simpleQueryForLong"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Execute a statement that returns a 1 by 1 table with a numeric value.
For example, SELECT COUNT(*) FROM table;

@return The result of the query.

@throws android.database.sqlite.SQLiteDoneException if the query returns zero rows
"
      end

      operation 79226679 "simpleQueryForString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Execute a statement that returns a 1 by 1 table with a text value.
For example, SELECT COUNT(*) FROM table;

@return The result of the query.

@throws android.database.sqlite.SQLiteDoneException if the query returns zero rows
"
      end

      operation 79226807 "simpleQueryForBlobFileDescriptor"
	public return_type class_ref 6986295 // ParcelFileDescriptor
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes a statement that returns a 1 by 1 table with a blob value.

@return A read-only file descriptor for a copy of the blob value, or {@code null}
        if the value is null or could not be read for some reason.

@throws android.database.sqlite.SQLiteDoneException if the query returns zero rows
"
      end

      operation 79226935 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 7131575 "DatabaseObjectNotClosedException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An exception that indicates that garbage-collector is finalizing a database object
that is not explicitly closed
@hide
"
      operation 79178295 "DatabaseObjectNotClosedException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 7131703 "SQLiteAbortException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An exception that indicates that the SQLite program was aborted.
This can happen either through a call to ABORT in a trigger,
or as the result of using the ABORT conflict clause.
"
      classrelation 15599671 // <generalisation>
	relation 15599671 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15599671 // <generalisation>
	  b parent class_ref 7131831 // SQLiteException
      end

      operation 79178807 "SQLiteAbortException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79178935 "SQLiteAbortException"
	public explicit_return_type ""
	nparams 1
	  param inout name "error" explicit_type "String"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 7131831 "SQLiteException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A SQLite exception that indicates there was an error with SQL parsing or execution.
"
      classrelation 15599543 // <generalisation>
	relation 15599543 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15599543 // <generalisation>
	  b parent class_ref 7130807 // SQLException
      end

      operation 79178423 "SQLiteException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79178551 "SQLiteException"
	public explicit_return_type ""
	nparams 1
	  param inout name "error" explicit_type "String"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79178679 "SQLiteException"
	public explicit_return_type ""
	nparams 2
	  param inout name "error" explicit_type "String"
	  param inout name "cause" explicit_type "Throwable"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 7131959 "SQLiteAccessPermException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This exception class is used when sqlite can't access the database file
due to lack of permissions on the file.
"
      classrelation 15599799 // <generalisation>
	relation 15599799 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15599799 // <generalisation>
	  b parent class_ref 7131831 // SQLiteException
      end

      operation 79179063 "SQLiteAccessPermException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79179191 "SQLiteAccessPermException"
	public explicit_return_type ""
	nparams 1
	  param inout name "error" explicit_type "String"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 7132087 "SQLiteBindOrColumnIndexOutOfRangeException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Thrown if the the bind or column parameter index is out of range
"
      classrelation 15599927 // <generalisation>
	relation 15599927 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15599927 // <generalisation>
	  b parent class_ref 7131831 // SQLiteException
      end

      operation 79179319 "SQLiteBindOrColumnIndexOutOfRangeException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79179447 "SQLiteBindOrColumnIndexOutOfRangeException"
	public explicit_return_type ""
	nparams 1
	  param inout name "error" explicit_type "String"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 7132215 "SQLiteBlobTooBigException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 15600055 // <generalisation>
	relation 15600055 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15600055 // <generalisation>
	  b parent class_ref 7131831 // SQLiteException
      end

      operation 79179575 "SQLiteBlobTooBigException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79179703 "SQLiteBlobTooBigException"
	public explicit_return_type ""
	nparams 1
	  param inout name "error" explicit_type "String"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 7132343 "SQLiteCantOpenDatabaseException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 15600183 // <generalisation>
	relation 15600183 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15600183 // <generalisation>
	  b parent class_ref 7131831 // SQLiteException
      end

      operation 79179831 "SQLiteCantOpenDatabaseException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79179959 "SQLiteCantOpenDatabaseException"
	public explicit_return_type ""
	nparams 1
	  param inout name "error" explicit_type "String"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 7132471 "SQLiteConnection"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a SQLite database connection.
Each connection wraps an instance of a native <code>sqlite3</code> object.
<p>
When database connection pooling is enabled, there can be multiple active
connections to the same database.  Otherwise there is typically only one
connection per database.
</p><p>
When the SQLite WAL feature is enabled, multiple readers and one writer
can concurrently access the database.  Without WAL, readers and writers
are mutually exclusive.
</p>

<h2>Ownership and concurrency guarantees</h2>
<p>
Connection objects are not thread-safe.  They are acquired as needed to
perform a database operation and are then returned to the pool.  At any
given time, a connection is either owned and used by a {@link SQLiteSession}
object or the {@link SQLiteConnectionPool}.  Those classes are
responsible for serializing operations to guard against concurrent
use of a connection.
</p><p>
The guarantee of having a single owner allows this class to be implemented
without locks and greatly simplifies resource management.
</p>

<h2>Encapsulation guarantees</h2>
<p>
The connection object object owns *all* of the SQLite related native
objects that are associated with the connection.  What's more, there are
no other objects in the system that are capable of obtaining handles to
those native objects.  Consequently, when the connection is closed, we do
not have to worry about what other components might have references to
its associated SQLite state -- there are none.
</p><p>
Encapsulation is what ensures that the connection object's
lifecycle does not become a tortured mess of finalizers and reference
queues.
</p>

<h2>Reentrance</h2>
<p>
This class must tolerate reentrant execution of SQLite operations because
triggers may call custom SQLite functions that perform additional queries.
</p>

@hide
"
      classrelation 15600311 // <realization>
	relation 15600311 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15600311 // <realization>
	  b parent class_ref 7049143 // OnCancelListener
      end

      attribute 24715831 "DEBUG"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24715959 "EMPTY_BYTE_ARRAY"
	class_attribute const_attribute private explicit_type "byte"
	multiplicity "[]"
	init_value " new byte[0]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24716087 "mCloseGuard"
	const_attribute private explicit_type "CloseGuard"
	init_value " CloseGuard.get()"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 15600695 // mPool (<unidirectional association>)
	relation 15600695 --->
	  a role_name "mPool" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15600695 // mPool (<unidirectional association>)
	  b parent class_ref 7132599 // SQLiteConnectionPool
      end

      classrelation 15600823 // mConfiguration (<unidirectional association>)
	relation 15600823 --->
	  a role_name "mConfiguration" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15600823 // mConfiguration (<unidirectional association>)
	  b parent class_ref 7132727 // SQLiteDatabaseConfiguration
      end

      attribute 24716215 "mConnectionId"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24716343 "mIsPrimaryConnection"
	const_attribute private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24716471 "mIsReadOnlyConnection"
	const_attribute private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      class 7132855 "PreparedStatementCache"
	visibility private 
	nactuals 2
	actual class class_ref 5914295 // LruCache
	  rank 0 explicit_value ""
	actual class class_ref 5914295 // LruCache
	  rank 1 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 15601591 // <realization>
	  relation 15601591 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 15601591 // <realization>
	    b parent class_ref 5914295 // LruCache
	end

	operation 79189559 "PreparedStatementCache"
	  public explicit_return_type ""
	  nparams 1
	    param in name "size" explicit_type "int"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 79189687 "entryRemoved"
	  protected explicit_return_type "void"
	  nparams 4
	    param inout name "evicted" explicit_type "boolean"
	    param inout name "key" explicit_type "String"
	    param inout name "oldValue" type class_ref 7132983 // PreparedStatement
	    param inout name "newValue" type class_ref 7132983 // PreparedStatement
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 79189815 "dump"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "printer" type class_ref 6962999 // Printer
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 15600951 // mPreparedStatementCache (<unidirectional association>)
	relation 15600951 --->
	  a role_name "mPreparedStatementCache" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15600951 // mPreparedStatementCache (<unidirectional association>)
	  b parent class_ref 7132855 // PreparedStatementCache
      end

      class 7132983 "PreparedStatement"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 15601335 // mPoolNext (<unidirectional association>)
	  relation 15601335 --->
	    a role_name "mPoolNext" public
	      comment " Next item in pool.
"
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 15601335 // mPoolNext (<unidirectional association>)
	    b parent class_ref 7132983 // PreparedStatement
	end

	attribute 24716983 "mStatementPtr"
	  public explicit_type "long"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The native sqlite3_stmt object pointer.
 Lifetime is managed explicitly by the connection.
"
	end

	attribute 24717111 "mNumParameters"
	  public explicit_type "int"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The number of parameters that the prepared statement has.
"
	end

	attribute 24717239 "mType"
	  public explicit_type "int"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The statement type.
"
	end

	attribute 24717367 "mReadOnly"
	  public explicit_type "boolean"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " True if the statement is read-only.
"
	end

	attribute 24717495 "mInCache"
	  public explicit_type "boolean"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " True if the statement is in the cache.
"
	end

	attribute 24717623 "mInUse"
	  public explicit_type "boolean"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " True if the statement is in use (currently executing).
 We need this flag because due to the use of custom functions in triggers, it's
 possible for SQLite calls to be re-entrant.  Consequently we need to prevent
 in use statements from being finalized until they are no longer in use.
"
	end
      end

      classrelation 15601079 // mPreparedStatementPool (<unidirectional association>)
	relation 15601079 --->
	  a role_name "mPreparedStatementPool" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15601079 // mPreparedStatementPool (<unidirectional association>)
	  b parent class_ref 7132983 // PreparedStatement
      end

      class 7133111 "OperationLog"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 24717751 "MAX_RECENT_OPERATIONS"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " 20"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 24717879 "COOKIE_GENERATION_SHIFT"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " 8"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 24718007 "COOKIE_INDEX_MASK"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " 0xff"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 15601719 // mOperations (<unidirectional association>)
	  relation 15601719 --->
	    a role_name "mOperations" multiplicity "[]" init_value " new Operation[MAX_RECENT_OPERATIONS]" const_relation private
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 15601719 // mOperations (<unidirectional association>)
	    b parent class_ref 7133751 // Operation
	end

	attribute 24718135 "mIndex"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 24718263 "mGeneration"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 79189943 "beginOperation"
	  public explicit_return_type "int"
	  nparams 3
	    param inout name "kind" explicit_type "String"
	    param inout name "sql" explicit_type "String"
	    param inout name "bindArgs" explicit_type "Object"
	  multiplicity "[]"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 79190071 "failOperation"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "cookie" explicit_type "int"
	    param inout name "ex" explicit_type "Exception"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 79190199 "endOperation"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "cookie" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 79190327 "endOperationDeferLog"
	  public explicit_return_type "boolean"
	  nparams 1
	    param in name "cookie" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 79190455 "logOperation"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "cookie" explicit_type "int"
	    param inout name "detail" explicit_type "String"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 79190583 "endOperationDeferLogLocked"
	  private explicit_return_type "boolean"
	  nparams 1
	    param in name "cookie" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 79190711 "logOperationLocked"
	  private explicit_return_type "void"
	  nparams 2
	    param in name "cookie" explicit_type "int"
	    param inout name "detail" explicit_type "String"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 79190839 "newOperationCookieLocked"
	  private explicit_return_type "int"
	  nparams 1
	    param in name "index" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 79190967 "getOperationLocked"
	  private return_type class_ref 7133751 // Operation
	  nparams 1
	    param in name "cookie" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 79191095 "describeCurrentOperation"
	  public explicit_return_type "String"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 79191223 "dump"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "printer" type class_ref 6962999 // Printer
	    param inout name "verbose" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 15601207 // mRecentOperations (<unidirectional association>)
	relation 15601207 --->
	  a role_name "mRecentOperations" init_value " new OperationLog()" const_relation private
	    comment " The recent operations log.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15601207 // mRecentOperations (<unidirectional association>)
	  b parent class_ref 7133111 // OperationLog
      end

      attribute 24716599 "mConnectionPtr"
	private explicit_type "long"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The native SQLiteConnection pointer.  (FOR INTERNAL USE ONLY)
"
      end

      attribute 24716727 "mOnlyAllowReadOnlyOperations"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24716855 "mCancellationSignalAttachCount"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The number of times attachCancellationSignal has been called.
 Because SQLite statement execution can be reentrant, we keep track of how many
 times we have attempted to attach a cancellation signal to the connection so that
 we can ensure that we detach the signal at the right time.
"
      end

      operation 79180087 "nativeOpen"
	class_operation private explicit_return_type "long"
	nparams 5
	  param inout name "path" explicit_type "String"
	  param in name "openFlags" explicit_type "int"
	  param inout name "label" explicit_type "String"
	  param inout name "enableTrace" explicit_type "boolean"
	  param inout name "enableProfile" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws};
s"
	
	
	
      end

      operation 79180215 "nativeClose"
	class_operation private explicit_return_type "void"
	nparams 1
	  param in name "connectionPtr" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
      end

      operation 79180343 "nativeRegisterCustomFunction"
	class_operation private explicit_return_type "void"
	nparams 2
	  param in name "connectionPtr" explicit_type "long"
	  param inout name "function" type class_ref 7133239 // SQLiteCustomFunction
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
      end

      operation 79180471 "nativeRegisterLocalizedCollators"
	class_operation private explicit_return_type "void"
	nparams 2
	  param in name "connectionPtr" explicit_type "long"
	  param inout name "locale" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
      end

      operation 79180599 "nativePrepareStatement"
	class_operation private explicit_return_type "long"
	nparams 2
	  param in name "connectionPtr" explicit_type "long"
	  param inout name "sql" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
      end

      operation 79180727 "nativeFinalizeStatement"
	class_operation private explicit_return_type "void"
	nparams 2
	  param in name "connectionPtr" explicit_type "long"
	  param in name "statementPtr" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
      end

      operation 79180855 "nativeGetParameterCount"
	class_operation private explicit_return_type "int"
	nparams 2
	  param in name "connectionPtr" explicit_type "long"
	  param in name "statementPtr" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
      end

      operation 79180983 "nativeIsReadOnly"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param in name "connectionPtr" explicit_type "long"
	  param in name "statementPtr" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
      end

      operation 79181111 "nativeGetColumnCount"
	class_operation private explicit_return_type "int"
	nparams 2
	  param in name "connectionPtr" explicit_type "long"
	  param in name "statementPtr" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
      end

      operation 79181239 "nativeGetColumnName"
	class_operation private explicit_return_type "String"
	nparams 3
	  param in name "connectionPtr" explicit_type "long"
	  param in name "statementPtr" explicit_type "long"
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
s"
	
	
	
      end

      operation 79181367 "nativeBindNull"
	class_operation private explicit_return_type "void"
	nparams 3
	  param in name "connectionPtr" explicit_type "long"
	  param in name "statementPtr" explicit_type "long"
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
s"
	
	
	
      end

      operation 79181495 "nativeBindLong"
	class_operation private explicit_return_type "void"
	nparams 4
	  param in name "connectionPtr" explicit_type "long"
	  param in name "statementPtr" explicit_type "long"
	  param in name "index" explicit_type "int"
	  param in name "value" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws};
s"
	
	
	
      end

      operation 79181623 "nativeBindDouble"
	class_operation private explicit_return_type "void"
	nparams 4
	  param in name "connectionPtr" explicit_type "long"
	  param in name "statementPtr" explicit_type "long"
	  param in name "index" explicit_type "int"
	  param in name "value" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws};
s"
	
	
	
      end

      operation 79181751 "nativeBindString"
	class_operation private explicit_return_type "void"
	nparams 4
	  param in name "connectionPtr" explicit_type "long"
	  param in name "statementPtr" explicit_type "long"
	  param in name "index" explicit_type "int"
	  param inout name "value" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws};
s"
	
	
	
      end

      operation 79181879 "nativeBindBlob"
	class_operation private explicit_return_type "void"
	nparams 4
	  param in name "connectionPtr" explicit_type "long"
	  param in name "statementPtr" explicit_type "long"
	  param in name "index" explicit_type "int"
	  param inout name "value" explicit_type "byte"
	multiplicity "[]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws};
s"
	
	
	
      end

      operation 79182007 "nativeResetStatementAndClearBindings"
	class_operation private explicit_return_type "void"
	nparams 2
	  param in name "connectionPtr" explicit_type "long"
	  param in name "statementPtr" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
      end

      operation 79182135 "nativeExecute"
	class_operation private explicit_return_type "void"
	nparams 2
	  param in name "connectionPtr" explicit_type "long"
	  param in name "statementPtr" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
      end

      operation 79182263 "nativeExecuteForLong"
	class_operation private explicit_return_type "long"
	nparams 2
	  param in name "connectionPtr" explicit_type "long"
	  param in name "statementPtr" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
      end

      operation 79182391 "nativeExecuteForString"
	class_operation private explicit_return_type "String"
	nparams 2
	  param in name "connectionPtr" explicit_type "long"
	  param in name "statementPtr" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
      end

      operation 79182519 "nativeExecuteForBlobFileDescriptor"
	class_operation private explicit_return_type "int"
	nparams 2
	  param in name "connectionPtr" explicit_type "long"
	  param in name "statementPtr" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
      end

      operation 79182647 "nativeExecuteForChangedRowCount"
	class_operation private explicit_return_type "int"
	nparams 2
	  param in name "connectionPtr" explicit_type "long"
	  param in name "statementPtr" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
      end

      operation 79182775 "nativeExecuteForLastInsertedRowId"
	class_operation private explicit_return_type "long"
	nparams 2
	  param in name "connectionPtr" explicit_type "long"
	  param in name "statementPtr" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
      end

      operation 79182903 "nativeExecuteForCursorWindow"
	class_operation private explicit_return_type "long"
	nparams 6
	  param in name "connectionPtr" explicit_type "long"
	  param in name "statementPtr" explicit_type "long"
	  param in name "windowPtr" explicit_type "long"
	  param in name "startPos" explicit_type "int"
	  param in name "requiredPos" explicit_type "int"
	  param inout name "countAllRows" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws};
s"
	
	
	
      end

      operation 79183031 "nativeGetDbLookaside"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "connectionPtr" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
      end

      operation 79183159 "nativeCancel"
	class_operation private explicit_return_type "void"
	nparams 1
	  param in name "connectionPtr" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
      end

      operation 79183287 "nativeResetCancel"
	class_operation private explicit_return_type "void"
	nparams 2
	  param in name "connectionPtr" explicit_type "long"
	  param inout name "cancelable" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
      end

      operation 79183415 "SQLiteConnection"
	private explicit_return_type ""
	nparams 4
	  param inout name "pool" type class_ref 7132599 // SQLiteConnectionPool
	  param inout name "configuration" type class_ref 7132727 // SQLiteDatabaseConfiguration
	  param in name "connectionId" explicit_type "int"
	  param inout name "primaryConnection" explicit_type "boolean"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79183543 "finalize"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 79183671 "open"
	class_operation package return_type class_ref 7132471 // SQLiteConnection
	nparams 4
	  param inout name "pool" type class_ref 7132599 // SQLiteConnectionPool
	  param inout name "configuration" type class_ref 7132727 // SQLiteDatabaseConfiguration
	  param in name "connectionId" explicit_type "int"
	  param inout name "primaryConnection" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Called by SQLiteConnectionPool only."
      end

      operation 79183799 "close"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Called by SQLiteConnectionPool only.
 Closes the database closes and releases all of its associated resources.
 Do not call methods on the connection after it is closed.  It will probably crash."
      end

      operation 79183927 "open"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79184055 "dispose"
	private explicit_return_type "void"
	nparams 1
	  param inout name "finalized" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79184183 "setPageSize"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79184311 "setAutoCheckpointInterval"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79184439 "setJournalSizeLimit"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79184567 "setForeignKeyModeFromConfiguration"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79184695 "setWalModeFromConfiguration"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79184823 "setSyncMode"
	private explicit_return_type "void"
	nparams 1
	  param inout name "newValue" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79184951 "canonicalizeSyncMode"
	class_operation private explicit_return_type "String"
	nparams 1
	  param inout name "value" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79185079 "setJournalMode"
	private explicit_return_type "void"
	nparams 1
	  param inout name "newValue" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79185207 "setLocaleFromConfiguration"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79185335 "reconfigure"
	package explicit_return_type "void"
	nparams 1
	  param inout name "configuration" type class_ref 7132727 // SQLiteDatabaseConfiguration
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Called by SQLiteConnectionPool only."
      end

      operation 79185463 "setOnlyAllowReadOnlyOperations"
	package explicit_return_type "void"
	nparams 1
	  param inout name "readOnly" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Called by SQLiteConnectionPool only.
 When set to true, executing write operations will throw SQLiteException.
 Preparing statements that might write is ok, just don't execute them."
      end

      operation 79185591 "isPreparedStatementInCache"
	package explicit_return_type "boolean"
	nparams 1
	  param inout name "sql" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Called by SQLiteConnectionPool only.
 Returns true if the prepared statement cache contains the specified SQL."
      end

      operation 79185719 "getConnectionId"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the unique id of this connection.
@return The connection id.
"
      end

      operation 79185847 "isPrimaryConnection"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this is the primary database connection.
@return True if this is the primary database connection.
"
      end

      operation 79185975 "prepare"
	public explicit_return_type "void"
	nparams 2
	  param inout name "sql" explicit_type "String"
	  param inout name "outStatementInfo" type class_ref 7133367 // SQLiteStatementInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prepares a statement for execution but does not bind its parameters or execute it.
<p>
This method can be used to check for syntax errors during compilation
prior to execution of the statement.  If the {@code outStatementInfo} argument
is not null, the provided {@link SQLiteStatementInfo} object is populated
with information about the statement.
</p><p>
A prepared statement makes no reference to the arguments that may eventually
be bound to it, consequently it it possible to cache certain prepared statements
such as SELECT or INSERT/UPDATE statements.  If the statement is cacheable,
then it will be stored in the cache for later.
</p><p>
To take advantage of this behavior as an optimization, the connection pool
provides a method to acquire a connection that already has a given SQL statement
in its prepared statement cache so that it is ready for execution.
</p>

@param sql The SQL statement to prepare.
@param outStatementInfo The {@link SQLiteStatementInfo} object to populate
with information about the statement, or null if none.

@throws SQLiteException if an error occurs, such as a syntax error.
"
      end

      operation 79186103 "execute"
	public explicit_return_type "void"
	nparams 3
	  param inout name "sql" explicit_type "String"
	  param inout name "bindArgs" explicit_type "Object"
	multiplicity "[]"
	  param inout name "cancellationSignal" type class_ref 7016503 // CancellationSignal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes a statement that does not return a result.

@param sql The SQL statement to execute.
@param bindArgs The arguments to bind, or null if none.
@param cancellationSignal A signal to cancel the operation in progress, or null if none.

@throws SQLiteException if an error occurs, such as a syntax error
or invalid number of bind arguments.
@throws OperationCanceledException if the operation was canceled.
"
      end

      operation 79186231 "executeForLong"
	public explicit_return_type "long"
	nparams 3
	  param inout name "sql" explicit_type "String"
	  param inout name "bindArgs" explicit_type "Object"
	multiplicity "[]"
	  param inout name "cancellationSignal" type class_ref 7016503 // CancellationSignal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes a statement that returns a single <code>long</code> result.

@param sql The SQL statement to execute.
@param bindArgs The arguments to bind, or null if none.
@param cancellationSignal A signal to cancel the operation in progress, or null if none.
@return The value of the first column in the first row of the result set
as a <code>long</code>, or zero if none.

@throws SQLiteException if an error occurs, such as a syntax error
or invalid number of bind arguments.
@throws OperationCanceledException if the operation was canceled.
"
      end

      operation 79186359 "executeForString"
	public explicit_return_type "String"
	nparams 3
	  param inout name "sql" explicit_type "String"
	  param inout name "bindArgs" explicit_type "Object"
	multiplicity "[]"
	  param inout name "cancellationSignal" type class_ref 7016503 // CancellationSignal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes a statement that returns a single {@link String} result.

@param sql The SQL statement to execute.
@param bindArgs The arguments to bind, or null if none.
@param cancellationSignal A signal to cancel the operation in progress, or null if none.
@return The value of the first column in the first row of the result set
as a <code>String</code>, or null if none.

@throws SQLiteException if an error occurs, such as a syntax error
or invalid number of bind arguments.
@throws OperationCanceledException if the operation was canceled.
"
      end

      operation 79186487 "executeForBlobFileDescriptor"
	public return_type class_ref 6986295 // ParcelFileDescriptor
	nparams 3
	  param inout name "sql" explicit_type "String"
	  param inout name "bindArgs" explicit_type "Object"
	multiplicity "[]"
	  param inout name "cancellationSignal" type class_ref 7016503 // CancellationSignal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes a statement that returns a single BLOB result as a
file descriptor to a shared memory region.

@param sql The SQL statement to execute.
@param bindArgs The arguments to bind, or null if none.
@param cancellationSignal A signal to cancel the operation in progress, or null if none.
@return The file descriptor for a shared memory region that contains
the value of the first column in the first row of the result set as a BLOB,
or null if none.

@throws SQLiteException if an error occurs, such as a syntax error
or invalid number of bind arguments.
@throws OperationCanceledException if the operation was canceled.
"
      end

      operation 79186615 "executeForChangedRowCount"
	public explicit_return_type "int"
	nparams 3
	  param inout name "sql" explicit_type "String"
	  param inout name "bindArgs" explicit_type "Object"
	multiplicity "[]"
	  param inout name "cancellationSignal" type class_ref 7016503 // CancellationSignal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes a statement that returns a count of the number of rows
that were changed.  Use for UPDATE or DELETE SQL statements.

@param sql The SQL statement to execute.
@param bindArgs The arguments to bind, or null if none.
@param cancellationSignal A signal to cancel the operation in progress, or null if none.
@return The number of rows that were changed.

@throws SQLiteException if an error occurs, such as a syntax error
or invalid number of bind arguments.
@throws OperationCanceledException if the operation was canceled.
"
      end

      operation 79186743 "executeForLastInsertedRowId"
	public explicit_return_type "long"
	nparams 3
	  param inout name "sql" explicit_type "String"
	  param inout name "bindArgs" explicit_type "Object"
	multiplicity "[]"
	  param inout name "cancellationSignal" type class_ref 7016503 // CancellationSignal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes a statement that returns the row id of the last row inserted
by the statement.  Use for INSERT SQL statements.

@param sql The SQL statement to execute.
@param bindArgs The arguments to bind, or null if none.
@param cancellationSignal A signal to cancel the operation in progress, or null if none.
@return The row id of the last row that was inserted, or 0 if none.

@throws SQLiteException if an error occurs, such as a syntax error
or invalid number of bind arguments.
@throws OperationCanceledException if the operation was canceled.
"
      end

      operation 79186871 "executeForCursorWindow"
	public explicit_return_type "int"
	nparams 7
	  param inout name "sql" explicit_type "String"
	  param inout name "bindArgs" explicit_type "Object"
	multiplicity "[]"
	  param inout name "window" type class_ref 7019063 // CursorWindow
	  param in name "startPos" explicit_type "int"
	  param in name "requiredPos" explicit_type "int"
	  param inout name "countAllRows" explicit_type "boolean"
	  param inout name "cancellationSignal" type class_ref 7016503 // CancellationSignal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes a statement and populates the specified {@link CursorWindow}
with a range of results.  Returns the number of rows that were counted
during query execution.

@param sql The SQL statement to execute.
@param bindArgs The arguments to bind, or null if none.
@param window The cursor window to clear and fill.
@param startPos The start position for filling the window.
@param requiredPos The position of a row that MUST be in the window.
If it won't fit, then the query should discard part of what it filled
so that it does.  Must be greater than or equal to <code>startPos</code>.
@param countAllRows True to count all rows that the query would return
regagless of whether they fit in the window.
@param cancellationSignal A signal to cancel the operation in progress, or null if none.
@return The number of rows that were counted during query execution.  Might
not be all rows in the result set unless <code>countAllRows</code> is true.

@throws SQLiteException if an error occurs, such as a syntax error
or invalid number of bind arguments.
@throws OperationCanceledException if the operation was canceled.
"
      end

      operation 79186999 "acquirePreparedStatement"
	private return_type class_ref 7132983 // PreparedStatement
	nparams 1
	  param inout name "sql" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79187127 "releasePreparedStatement"
	private explicit_return_type "void"
	nparams 1
	  param inout name "statement" type class_ref 7132983 // PreparedStatement
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79187255 "finalizePreparedStatement"
	private explicit_return_type "void"
	nparams 1
	  param inout name "statement" type class_ref 7132983 // PreparedStatement
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79187383 "attachCancellationSignal"
	private explicit_return_type "void"
	nparams 1
	  param inout name "cancellationSignal" type class_ref 7016503 // CancellationSignal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79187511 "detachCancellationSignal"
	private explicit_return_type "void"
	nparams 1
	  param inout name "cancellationSignal" type class_ref 7016503 // CancellationSignal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79187639 "onCancel"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " CancellationSignal.OnCancelListener callback.
 This method may be called on a different thread than the executing statement.
 However, it will only be called between calls to attachCancellationSignal and
 detachCancellationSignal, while a statement is executing.  We can safely assume
 that the SQLite connection is still alive."
      end

      operation 79187767 "bindArguments"
	private explicit_return_type "void"
	nparams 2
	  param inout name "statement" type class_ref 7132983 // PreparedStatement
	  param inout name "bindArgs" explicit_type "Object"
	multiplicity "[]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79187895 "throwIfStatementForbidden"
	private explicit_return_type "void"
	nparams 1
	  param inout name "statement" type class_ref 7132983 // PreparedStatement
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79188023 "isCacheable"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "statementType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79188151 "applyBlockGuardPolicy"
	private explicit_return_type "void"
	nparams 1
	  param inout name "statement" type class_ref 7132983 // PreparedStatement
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79188279 "dump"
	public explicit_return_type "void"
	nparams 2
	  param inout name "printer" type class_ref 6962999 // Printer
	  param inout name "verbose" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Dumps debugging information about this connection.

@param printer The printer to receive the dump, not null.
@param verbose True to dump more verbose information.
"
      end

      operation 79188407 "dumpUnsafe"
	package explicit_return_type "void"
	nparams 2
	  param inout name "printer" type class_ref 6962999 // Printer
	  param inout name "verbose" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Dumps debugging information about this connection, in the case where the
caller might not actually own the connection.

This function is written so that it may be called by a thread that does not
own the connection.  We need to be very careful because the connection state is
not synchronized.

At worst, the method may return stale or slightly wrong data, however
it should not crash.  This is ok as it is only used for diagnostic purposes.

@param printer The printer to receive the dump, not null.
@param verbose True to dump more verbose information.
"
      end

      operation 79188535 "describeCurrentOperationUnsafe"
	package explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Describes the currently executing operation, in the case where the
caller might not actually own the connection.

This function is written so that it may be called by a thread that does not
own the connection.  We need to be very careful because the connection state is
not synchronized.

At worst, the method may return stale or slightly wrong data, however
it should not crash.  This is ok as it is only used for diagnostic purposes.

@return A description of the current operation including how long it has been running,
or null if none.
"
      end

      operation 79188663 "collectDbStats"
	package explicit_return_type "void"
	nparams 1
	  param inout name "dbStatsList" explicit_type "ArrayList<DbStats>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Collects statistics about database connection memory usage.

@param dbStatsList The list to populate.
"
      end

      operation 79188791 "collectDbStatsUnsafe"
	package explicit_return_type "void"
	nparams 1
	  param inout name "dbStatsList" explicit_type "ArrayList<DbStats>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Collects statistics about database connection memory usage, in the case where the
caller might not actually own the connection.

@return The statistics object, never null.
"
      end

      operation 79188919 "getMainDbStatsUnsafe"
	private return_type class_ref 7133623 // DbStats
	nparams 3
	  param in name "lookaside" explicit_type "int"
	  param in name "pageCount" explicit_type "long"
	  param in name "pageSize" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79189047 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 79189175 "obtainPreparedStatement"
	private return_type class_ref 7132983 // PreparedStatement
	nparams 5
	  param inout name "sql" explicit_type "String"
	  param in name "statementPtr" explicit_type "long"
	  param in name "numParameters" explicit_type "int"
	  param in name "type" explicit_type "int"
	  param inout name "readOnly" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79189303 "recyclePreparedStatement"
	private explicit_return_type "void"
	nparams 1
	  param inout name "statement" type class_ref 7132983 // PreparedStatement
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79189431 "trimSqlForDisplay"
	class_operation private explicit_return_type "String"
	nparams 1
	  param inout name "sql" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 7133751 "Operation"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 24718391 "MAX_TRACE_METHOD_NAME_LEN"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " 256"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Trim all SQL statements to 256 characters inside the trace marker.
 This limit gives plenty of context while leaving space for other
 entries in the trace buffer (and ensures atrace doesn't truncate the
 marker for us, potentially losing metadata in the process).
"
	end

	attribute 24718519 "mStartWallTime"
	  public explicit_type "long"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " in System.currentTimeMillis()"
	end

	attribute 24718647 "mStartTime"
	  public explicit_type "long"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " in SystemClock.uptimeMillis();"
	end

	attribute 24718775 "mEndTime"
	  public explicit_type "long"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " in SystemClock.uptimeMillis();"
	end

	attribute 24718903 "mFinished"
	  public explicit_type "boolean"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 24719031 "mCookie"
	  public explicit_type "int"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 79191351 "describe"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "msg" explicit_type "StringBuilder"
	    param inout name "verbose" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 79191479 "getStatus"
	  private explicit_return_type "String"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 79191607 "getTraceMethodName"
	  private explicit_return_type "String"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 79191735 "getFormattedStartTime"
	  private explicit_return_type "String"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 7132599 "SQLiteConnectionPool"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Maintains a pool of active SQLite database connections.
<p>
At any given time, a connection is either owned by the pool, or it has been
acquired by a {@link SQLiteSession}.  When the {@link SQLiteSession} is
finished with the connection it is using, it must return the connection
back to the pool.
</p><p>
The pool holds strong references to the connections it owns.  However,
it only holds <em>weak references</em> to the connections that sessions
have acquired from it.  Using weak references in the latter case ensures
that the connection pool can detect when connections have been improperly
abandoned so that it can create new connections to replace them if needed.
</p><p>
The connection pool is thread-safe (but the connections themselves are not).
</p>

<h2>Exception safety</h2>
<p>
This code attempts to maintain the invariant that opened connections are
always owned.  Unfortunately that means it needs to handle exceptions
all over to ensure that broken connections get cleaned up.  Most
operations invokving SQLite can throw {@link SQLiteException} or other
runtime exceptions.  This is a bit of a pain to deal with because the compiler
cannot help us catch missing exception handling code.
</p><p>
The general rule for this file: If we are making calls out to
{@link SQLiteConnection} then we must be prepared to handle any
runtime exceptions it might throw at us.  Note that out-of-memory
is an {@link Error}, not a {@link RuntimeException}.  We don't trouble ourselves
handling out of memory because it is hard to do anything at all sensible then
and most likely the VM is about to crash.
</p>

@hide
"
      attribute 24719159 "CONNECTION_POOL_BUSY_MILLIS"
	class_attribute const_attribute private explicit_type "long"
	init_value " 30 * 1000"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Amount of time to wait in milliseconds before unblocking acquireConnection
 and logging a message about the connection pool being busy.
 30 seconds"
      end

      attribute 24719287 "mCloseGuard"
	const_attribute private explicit_type "CloseGuard"
	init_value " CloseGuard.get()"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24719415 "mConnectionLeaked"
	const_attribute private explicit_type "AtomicBoolean"
	init_value " new AtomicBoolean()"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 15602743 // mConfiguration (<unidirectional association>)
	relation 15602743 --->
	  a role_name "mConfiguration" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15602743 // mConfiguration (<unidirectional association>)
	  b parent class_ref 7132727 // SQLiteDatabaseConfiguration
      end

      attribute 24719543 "mMaxConnectionPoolSize"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24719671 "mIsOpen"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24719799 "mNextConnectionId"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      class 7133879 "ConnectionWaiter"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 15603511 // mNext (<unidirectional association>)
	  relation 15603511 --->
	    a role_name "mNext" public
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 15603511 // mNext (<unidirectional association>)
	    b parent class_ref 7133879 // ConnectionWaiter
	end

	attribute 24720695 "mStartTime"
	  public explicit_type "long"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 24720823 "mPriority"
	  public explicit_type "int"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 24720951 "mWantPrimaryConnection"
	  public explicit_type "boolean"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 24721079 "mConnectionFlags"
	  public explicit_type "int"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 15603895 // mAssignedConnection (<unidirectional association>)
	  relation 15603895 --->
	    a role_name "mAssignedConnection" public
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 15603895 // mAssignedConnection (<unidirectional association>)
	    b parent class_ref 7132471 // SQLiteConnection
	end

	attribute 24721207 "mNonce"
	  public explicit_type "int"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      classrelation 15602871 // mConnectionWaiterPool (<unidirectional association>)
	relation 15602871 --->
	  a role_name "mConnectionWaiterPool" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15602871 // mConnectionWaiterPool (<unidirectional association>)
	  b parent class_ref 7133879 // ConnectionWaiter
      end

      classrelation 15602999 // mConnectionWaiterQueue (<unidirectional association>)
	relation 15602999 --->
	  a role_name "mConnectionWaiterQueue" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15602999 // mConnectionWaiterQueue (<unidirectional association>)
	  b parent class_ref 7133879 // ConnectionWaiter
      end

      classrelation 15603127 // mAvailableNonPrimaryConnections (<unidirectional association>)
	relation 15603127 --->
	  stereotype "ArrayList"
	  a role_name "mAvailableNonPrimaryConnections" init_value "
            new ArrayList<SQLiteConnection>()" const_relation private
	    comment " Strong references to all available connections.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 15603127 // mAvailableNonPrimaryConnections (<unidirectional association>)
	  b parent class_ref 7132471 // SQLiteConnection
      end

      classrelation 15603255 // mAvailablePrimaryConnection (<unidirectional association>)
	relation 15603255 --->
	  a role_name "mAvailablePrimaryConnection" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15603255 // mAvailablePrimaryConnection (<unidirectional association>)
	  b parent class_ref 7132471 // SQLiteConnection
      end

      class 7134007 "AcquiredConnectionStatus"
	visibility package stereotype "enum"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 24719927 "NORMAL"
	  public type class_ref 7134007 // AcquiredConnectionStatus
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The connection should be returned to the pool as usual.
"
	end

	attribute 24720055 "RECONFIGURE"
	  public type class_ref 7134007 // AcquiredConnectionStatus
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The connection must be reconfigured before being returned.
"
	end

	attribute 24720183 "DISCARD"
	  public type class_ref 7134007 // AcquiredConnectionStatus
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The connection must be closed and discarded.
"
	end
      end

      classrelation 15603383 // mAcquiredConnections (<unidirectional association>)
	relation 15603383 --->
	  stereotype "WeakHashMap"
	  a role_name "mAcquiredConnections" init_value "
            new WeakHashMap<SQLiteConnection, AcquiredConnectionStatus>()" const_relation private
	    comment " Weak references to all acquired connections.  The associated value
 indicates whether the connection must be reconfigured before being
 returned to the available connection list or discarded.
 For example, the prepared statement cache size may have changed and
 need to be updated in preparation for the next client.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}, AcquiredConnectionStatus> ${name}${value};
"
	    classrelation_ref 15603383 // mAcquiredConnections (<unidirectional association>)
	  b parent class_ref 7132471 // SQLiteConnection
      end

      attribute 24720311 "CONNECTION_FLAG_READ_ONLY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Connection flag: Read-only.
<p>
This flag indicates that the connection will only be used to
perform read-only operations.
</p>

"
      end

      attribute 24720439 "CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Connection flag: Primary connection affinity.
<p>
This flag indicates that the primary connection is required.
This flag helps support legacy applications that expect most data modifying
operations to be serialized by locking the primary database connection.
Setting this flag essentially implements the old \"db lock\" concept by preventing
an operation from being performed until it can obtain exclusive access to
the primary connection.
</p>

"
      end

      attribute 24720567 "CONNECTION_FLAG_INTERACTIVE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 2"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Connection flag: Connection is being used interactively.
<p>
This flag indicates that the connection is needed by the UI thread.
The connection pool can use this flag to elevate the priority
of the database connection request.
</p>

"
      end

      operation 79191863 "SQLiteConnectionPool"
	private explicit_return_type ""
	nparams 1
	  param inout name "configuration" type class_ref 7132727 // SQLiteDatabaseConfiguration
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79191991 "finalize"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 79192119 "open"
	class_operation public return_type class_ref 7132599 // SQLiteConnectionPool
	nparams 1
	  param inout name "configuration" type class_ref 7132727 // SQLiteDatabaseConfiguration
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens a connection pool for the specified database.

@param configuration The database configuration.
@return The connection pool.

@throws SQLiteException if a database error occurs.
"
      end

      operation 79192247 "open"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Might throw"
      end

      operation 79192375 "close"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes the connection pool.
<p>
When the connection pool is closed, it will refuse all further requests
to acquire connections.  All connections that are currently available in
the pool are closed immediately.  Any connections that are still in use
will be closed as soon as they are returned to the pool.
</p>

@throws IllegalStateException if the pool has been closed.
"
      end

      operation 79192503 "dispose"
	private explicit_return_type "void"
	nparams 1
	  param inout name "finalized" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79192631 "reconfigure"
	public explicit_return_type "void"
	nparams 1
	  param inout name "configuration" type class_ref 7132727 // SQLiteDatabaseConfiguration
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconfigures the database configuration of the connection pool and all of its
connections.
<p>
Configuration changes are propagated down to connections immediately if
they are available or as soon as they are released.  This includes changes
that affect the size of the pool.
</p>

@param configuration The new configuration.

@throws IllegalStateException if the pool has been closed.
"
      end

      operation 79192759 "acquireConnection"
	public return_type class_ref 7132471 // SQLiteConnection
	nparams 3
	  param inout name "sql" explicit_type "String"
	  param in name "connectionFlags" explicit_type "int"
	  param inout name "cancellationSignal" type class_ref 7016503 // CancellationSignal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Acquires a connection from the pool.
<p>
The caller must call {@link #releaseConnection} to release the connection
back to the pool when it is finished.  Failure to do so will result
in much unpleasantness.
</p>

@param sql If not null, try to find a connection that already has
the specified SQL statement in its prepared statement cache.
@param connectionFlags The connection request flags.
@param cancellationSignal A signal to cancel the operation in progress, or null if none.
@return The connection that was acquired, never null.

@throws IllegalStateException if the pool has been closed.
@throws SQLiteException if a database error occurs.
@throws OperationCanceledException if the operation was canceled.
"
      end

      operation 79192887 "releaseConnection"
	public explicit_return_type "void"
	nparams 1
	  param inout name "connection" type class_ref 7132471 // SQLiteConnection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Releases a connection back to the pool.
<p>
It is ok to call this method after the pool has closed, to release
connections that were still in use at the time of closure.
</p>

@param connection The connection to release.  Must not be null.

@throws IllegalStateException if the connection was not acquired
from this pool or if it has already been released.
"
      end

      operation 79193015 "recycleConnectionLocked"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "connection" type class_ref 7132471 // SQLiteConnection
	  param inout name "status" type class_ref 7134007 // AcquiredConnectionStatus
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Can't throw."
      end

      operation 79193143 "shouldYieldConnection"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "connection" type class_ref 7132471 // SQLiteConnection
	  param in name "connectionFlags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the session should yield the connection due to
contention over available database connections.

@param connection The connection owned by the session.
@param connectionFlags The connection request flags.
@return True if the session should yield its connection.

@throws IllegalStateException if the connection was not acquired
from this pool or if it has already been released.
"
      end

      operation 79193271 "collectDbStats"
	public explicit_return_type "void"
	nparams 1
	  param inout name "dbStatsList" explicit_type "ArrayList<DbStats>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Collects statistics about database connection memory usage.

@param dbStatsList The list to populate.
"
      end

      operation 79193399 "openConnectionLocked"
	private return_type class_ref 7132471 // SQLiteConnection
	nparams 2
	  param inout name "configuration" type class_ref 7132727 // SQLiteDatabaseConfiguration
	  param inout name "primaryConnection" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Might throw."
      end

      operation 79193527 "onConnectionLeaked"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79193655 "closeAvailableConnectionsAndLogExceptionsLocked"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Can't throw."
      end

      operation 79193783 "closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Can't throw."
      end

      operation 79193911 "closeExcessConnectionsAndLogExceptionsLocked"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Can't throw."
      end

      operation 79194039 "closeConnectionAndLogExceptionsLocked"
	private explicit_return_type "void"
	nparams 1
	  param inout name "connection" type class_ref 7132471 // SQLiteConnection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Can't throw."
      end

      operation 79194167 "discardAcquiredConnectionsLocked"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Can't throw."
      end

      operation 79194295 "reconfigureAllConnectionsLocked"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Can't throw."
      end

      operation 79194423 "markAcquiredConnectionsLocked"
	private explicit_return_type "void"
	nparams 1
	  param inout name "status" type class_ref 7134007 // AcquiredConnectionStatus
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Can't throw."
      end

      operation 79194551 "waitForConnection"
	private return_type class_ref 7132471 // SQLiteConnection
	nparams 3
	  param inout name "sql" explicit_type "String"
	  param in name "connectionFlags" explicit_type "int"
	  param inout name "cancellationSignal" type class_ref 7016503 // CancellationSignal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Might throw."
      end

      operation 79194679 "cancelConnectionWaiterLocked"
	private explicit_return_type "void"
	nparams 1
	  param inout name "waiter" type class_ref 7133879 // ConnectionWaiter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Can't throw."
      end

      operation 79194807 "logConnectionPoolBusyLocked"
	private explicit_return_type "void"
	nparams 2
	  param in name "waitMillis" explicit_type "long"
	  param in name "connectionFlags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Can't throw."
      end

      operation 79194935 "wakeConnectionWaitersLocked"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Can't throw."
      end

      operation 79195063 "tryAcquirePrimaryConnectionLocked"
	private return_type class_ref 7132471 // SQLiteConnection
	nparams 1
	  param in name "connectionFlags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Might throw."
      end

      operation 79195191 "tryAcquireNonPrimaryConnectionLocked"
	private return_type class_ref 7132471 // SQLiteConnection
	nparams 2
	  param inout name "sql" explicit_type "String"
	  param in name "connectionFlags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Might throw."
      end

      operation 79195319 "finishAcquireConnectionLocked"
	private explicit_return_type "void"
	nparams 2
	  param inout name "connection" type class_ref 7132471 // SQLiteConnection
	  param in name "connectionFlags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Might throw."
      end

      operation 79195447 "isSessionBlockingImportantConnectionWaitersLocked"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "holdingPrimaryConnection" explicit_type "boolean"
	  param in name "connectionFlags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79195575 "getPriority"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "connectionFlags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79195703 "setMaxConnectionPoolSizeLocked"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79195831 "throwIfClosedLocked"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79195959 "obtainConnectionWaiterLocked"
	private return_type class_ref 7133879 // ConnectionWaiter
	nparams 6
	  param inout name "thread" explicit_type "Thread"
	  param in name "startTime" explicit_type "long"
	  param in name "priority" explicit_type "int"
	  param inout name "wantPrimaryConnection" explicit_type "boolean"
	  param inout name "sql" explicit_type "String"
	  param in name "connectionFlags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79196087 "recycleConnectionWaiterLocked"
	private explicit_return_type "void"
	nparams 1
	  param inout name "waiter" type class_ref 7133879 // ConnectionWaiter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79196215 "dump"
	public explicit_return_type "void"
	nparams 2
	  param inout name "printer" type class_ref 6962999 // Printer
	  param inout name "verbose" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Dumps debugging information about this connection pool.

@param printer The printer to receive the dump, not null.
@param verbose True to dump more verbose information.
"
      end

      operation 79196343 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 7132727 "SQLiteDatabaseConfiguration"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Describes how to configure a database.
<p>
The purpose of this object is to keep track of all of the little
configuration settings that are applied to a database after it
is opened so that they can be applied to all connections in the
connection pool uniformly.
</p><p>
Each connection maintains its own copy of this object so it can
keep track of which settings have already been applied.
</p>

@hide
"
      attribute 24724151 "EMAIL_IN_DB_PATTERN"
	class_attribute const_attribute private explicit_type "Pattern"
	init_value "
            Pattern.compile(\"[\\\\w\\\\.\\\\-]+@[\\\\w\\\\.\\\\-]+\")"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The pattern we use to strip email addresses from database paths
 when constructing a label to use in log messages.
"
      end

      attribute 24724279 "openFlags"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The flags used to open the database.

"
      end

      attribute 24724407 "maxSqlCacheSize"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The maximum size of the prepared statement cache for each database connection.
Must be non-negative.

Default is 25.

"
      end

      attribute 24724535 "locale"
	public explicit_type "Locale"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The database locale.

Default is the value returned by {@link Locale#getDefault()}.

"
      end

      attribute 24724663 "foreignKeyConstraintsEnabled"
	public explicit_type "boolean"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "True if foreign key constraints are enabled.

Default is false.

"
      end

      classrelation 15607095 // customFunctions (<unidirectional association>)
	relation 15607095 --->
	  stereotype "ArrayList"
	  a role_name "customFunctions" init_value "
            new ArrayList<SQLiteCustomFunction>()" const_relation public
	    comment "The custom functions to register.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 15607095 // customFunctions (<unidirectional association>)
	  b parent class_ref 7133239 // SQLiteCustomFunction
      end

      operation 79211319 "SQLiteDatabaseConfiguration"
	public explicit_return_type ""
	nparams 2
	  param inout name "path" explicit_type "String"
	  param in name "openFlags" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a database configuration with the required parameters for opening a
database and default values for all other parameters.

@param path The database path.
@param openFlags Open flags for the database, such as {@link SQLiteDatabase#OPEN_READWRITE}.
"
      end

      operation 79211447 "SQLiteDatabaseConfiguration"
	public explicit_return_type ""
	nparams 1
	  param inout name "other" type class_ref 7132727 // SQLiteDatabaseConfiguration
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a database configuration as a copy of another configuration.

@param other The other configuration.
"
      end

      operation 79211575 "updateParametersFrom"
	public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 7132727 // SQLiteDatabaseConfiguration
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the non-immutable parameters of this configuration object
from the other configuration object.

@param other The object from which to copy the parameters.
"
      end

      operation 79211703 "isInMemoryDb"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the database is in-memory.
@return True if the database is in-memory.
"
      end

      operation 79211831 "stripPathForLogs"
	class_operation private explicit_return_type "String"
	nparams 1
	  param inout name "path" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 7133239 "SQLiteCustomFunction"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Describes a custom SQL function.

@hide
"
      attribute 24721847 "numArgs"
	const_attribute public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 15605303 // callback (<unidirectional association>)
	relation 15605303 --->
	  a role_name "callback" const_relation public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15605303 // callback (<unidirectional association>)
	  b parent class_ref 7134647 // CustomFunction
      end

      operation 79199159 "SQLiteCustomFunction"
	public explicit_return_type ""
	nparams 3
	  param inout name "name" explicit_type "String"
	  param in name "numArgs" explicit_type "int"
	  param inout name "callback" type class_ref 7134647 // CustomFunction
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create custom function.

@param name The name of the sqlite3 function.
@param numArgs The number of arguments for the function, or -1 to
support any number of arguments.
@param callback The callback to invoke when the function is executed.
"
      end

      operation 79199287 "dispatchCallback"
	private explicit_return_type "void"
	nparams 1
	  param inout name "args" explicit_type "String"
	multiplicity "[]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unused\")
"
	
	
	
	comment " Called from native."
      end
    end

    class 7133367 "SQLiteStatementInfo"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Describes a SQLite statement.

@hide
"
      attribute 24727991 "numParameters"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of parameters that the statement has.

"
      end

      attribute 24728119 "readOnly"
	public explicit_type "boolean"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "True if the statement is read-only.

"
      end
    end

    class 7133495 "SQLiteDebug"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Provides debugging info about all SQLite databases running in the current process.

{@hide}
"
      class 7133623 "DbStats"
	visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 24725687 "pageSize"
	  public explicit_type "long"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " the page size for the database 
"
	end

	attribute 24725815 "dbSize"
	  public explicit_type "long"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " the database size 
"
	end

	attribute 24725943 "lookaside"
	  public explicit_type "int"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " documented here http://www.sqlite.org/c3ref/c_dbstatus_lookaside_used.html 
"
	end

	operation 79213111 "DbStats"
	  public explicit_return_type ""
	  nparams 7
	    param inout name "dbName" explicit_type "String"
	    param in name "pageCount" explicit_type "long"
	    param in name "pageSize" explicit_type "long"
	    param in name "lookaside" explicit_type "int"
	    param in name "hits" explicit_type "int"
	    param in name "misses" explicit_type "int"
	    param in name "cachesize" explicit_type "int"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 79212727 "nativeGetPagerStats"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "stats" type class_ref 7135415 // PagerStats
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
      end

      class 7135415 "PagerStats"
	visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 24725303 "memoryUsed"
	  public explicit_type "int"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " the current amount of memory checked out by sqlite using sqlite3_malloc().
documented at http://www.sqlite.org/c3ref/c_status_malloc_size.html

"
	end

	attribute 24725431 "pageCacheOverflow"
	  public explicit_type "int"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " the number of bytes of page cache allocation which could not be sattisfied by the
SQLITE_CONFIG_PAGECACHE buffer and where forced to overflow to sqlite3_malloc().
The returned value includes allocations that overflowed because they where too large
(they were larger than the \"sz\" parameter to SQLITE_CONFIG_PAGECACHE) and allocations
that overflowed because no space was left in the page cache.
documented at http://www.sqlite.org/c3ref/c_status_malloc_size.html

"
	end

	attribute 24725559 "largestMemAlloc"
	  public explicit_type "int"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " records the largest memory allocation request handed to sqlite3.
documented at http://www.sqlite.org/c3ref/c_status_malloc_size.html

"
	end

	classrelation 15607607 // dbStats (<unidirectional association>)
	  relation 15607607 --->
	    stereotype "ArrayList"
	    a role_name "dbStats" public
	      comment " a list of {@link DbStats} - one for each main database opened by the applications
running on the android device

"
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	      classrelation_ref 15607607 // dbStats (<unidirectional association>)
	    b parent class_ref 7133623 // DbStats
	end
      end

      attribute 24724791 "DEBUG_SQL_LOG"
	class_attribute const_attribute public explicit_type "boolean"
	init_value "
            Log.isLoggable(\"SQLiteLog\", Log.VERBOSE)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Controls the printing of informational SQL log messages.

Enable using \"adb shell setprop log.tag.SQLiteLog VERBOSE\".

"
      end

      attribute 24724919 "DEBUG_SQL_STATEMENTS"
	class_attribute const_attribute public explicit_type "boolean"
	init_value "
            Log.isLoggable(\"SQLiteStatements\", Log.VERBOSE)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Controls the printing of SQL statements as they are executed.

Enable using \"adb shell setprop log.tag.SQLiteStatements VERBOSE\".

"
      end

      attribute 24725047 "DEBUG_SQL_TIME"
	class_attribute const_attribute public explicit_type "boolean"
	init_value "
            Log.isLoggable(\"SQLiteTime\", Log.VERBOSE)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Controls the printing of wall-clock time taken to execute SQL statements
as they are executed.

Enable using \"adb shell setprop log.tag.SQLiteTime VERBOSE\".

"
      end

      attribute 24725175 "DEBUG_LOG_SLOW_QUERIES"
	class_attribute const_attribute public explicit_type "boolean"
	init_value " Build.IS_DEBUGGABLE"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "True to enable database performance testing instrumentation.
@hide

"
      end

      operation 79212855 "SQLiteDebug"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79212983 "shouldLogSlowQuery"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "elapsedTimeMillis" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether a query should be logged.

Reads the \"db.log.slow_query_threshold\" system property, which can be changed
by the user at any time.  If the value is zero, then all queries will
be considered slow.  If the value does not exist or is negative, then no queries will
be considered slow.

This value can be changed dynamically while the system is running.
For example, \"adb shell setprop db.log.slow_query_threshold 200\" will
log all queries that take 200ms or longer to run.
@hide
"
      end

      operation 79213239 "getDatabaseInfo"
	class_operation public return_type class_ref 7135415 // PagerStats
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "return all pager and database stats for the current process.
@return {@link PagerStats}
"
      end

      operation 79213367 "dump"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "printer" type class_ref 6962999 // Printer
	  param inout name "args" explicit_type "String"
	multiplicity "[]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Dumps detailed information about all databases used by the process.
@param printer The printer for dumping database state.
@param args Command-line arguments supplied to dumpsys dbinfo
"
      end
    end

    class 7134135 "SQLiteConstraintException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An exception that indicates that an integrity constraint was violated.
"
      classrelation 15604151 // <generalisation>
	relation 15604151 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15604151 // <generalisation>
	  b parent class_ref 7131831 // SQLiteException
      end

      operation 79196471 "SQLiteConstraintException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79196599 "SQLiteConstraintException"
	public explicit_return_type ""
	nparams 1
	  param inout name "error" explicit_type "String"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 7134263 "SQLiteCursor"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A Cursor implementation that exposes results from a query on a
{@link SQLiteDatabase}.

SQLiteCursor is not internally synchronized so code using a SQLiteCursor from multiple
threads should perform its own synchronization when using the SQLiteCursor.
"
      classrelation 15604279 // <generalisation>
	relation 15604279 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15604279 // <generalisation>
	  b parent class_ref 7128247 // AbstractWindowedCursor
      end

      attribute 24721335 "NO_COUNT"
	class_attribute const_attribute package explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 15604791 // mQuery (<unidirectional association>)
	relation 15604791 --->
	  a role_name "mQuery" const_relation private
	    comment " The query object for the cursor 
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15604791 // mQuery (<unidirectional association>)
	  b parent class_ref 7134391 // SQLiteQuery
      end

      classrelation 15604919 // mDriver (<unidirectional association>)
	relation 15604919 --->
	  a role_name "mDriver" const_relation private
	    comment " The compiled query this cursor came from 
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15604919 // mDriver (<unidirectional association>)
	  b parent class_ref 7134519 // SQLiteCursorDriver
      end

      attribute 24721463 "mCount"
	private explicit_type "int"
	init_value " NO_COUNT"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The number of rows in the cursor 
"
      end

      attribute 24721591 "mCursorWindowCapacity"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The number of rows that can fit in the cursor window, 0 if unknown 
"
      end

      attribute 24721719 "mStackTrace"
	const_attribute private explicit_type "Throwable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Used to find out where a cursor was allocated in case it never got released. 
"
      end

      operation 79196727 "SQLiteCursor"
	public explicit_return_type ""
	nparams 4
	  param inout name "db" type class_ref 6925239 // SQLiteDatabase
	  param inout name "driver" type class_ref 7134519 // SQLiteCursorDriver
	  param inout name "editTable" explicit_type "String"
	  param inout name "query" type class_ref 7134391 // SQLiteQuery
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Execute a query and provide access to its result set through a Cursor
interface. For a query such as: {@code SELECT name, birth, phone FROM
myTable WHERE ... LIMIT 1,20 ORDER BY...} the column names (name, birth,
phone) would be in the projection argument and everything from
{@code FROM} onward would be in the params argument.

@param db a reference to a Database object that is already constructed
    and opened. This param is not used any longer
@param editTable the name of the table used for this query
@param query the rest of the query terms
    cursor is finalized
@deprecated use {@link #SQLiteCursor(SQLiteCursorDriver, String, SQLiteQuery)} instead
"
      end

      operation 79196855 "SQLiteCursor"
	public explicit_return_type ""
	nparams 3
	  param inout name "driver" type class_ref 7134519 // SQLiteCursorDriver
	  param inout name "editTable" explicit_type "String"
	  param inout name "query" type class_ref 7134391 // SQLiteQuery
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Execute a query and provide access to its result set through a Cursor
interface. For a query such as: {@code SELECT name, birth, phone FROM
myTable WHERE ... LIMIT 1,20 ORDER BY...} the column names (name, birth,
phone) would be in the projection argument and everything from
{@code FROM} onward would be in the params argument.

@param editTable the name of the table used for this query
@param query the {@link SQLiteQuery} object associated with this cursor object.
"
      end

      operation 79196983 "getDatabase"
	public return_type class_ref 6925239 // SQLiteDatabase
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the database that this cursor is associated with.
@return the SQLiteDatabase that this cursor is associated with.
"
      end

      operation 79197111 "onMove"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "oldPosition" explicit_type "int"
	  param in name "newPosition" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 79197239 "getCount"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 79197367 "fillWindow"
	private explicit_return_type "void"
	nparams 1
	  param in name "requiredPos" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79197495 "getColumnIndex"
	public explicit_return_type "int"
	nparams 1
	  param inout name "columnName" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 79197623 "getColumnNames"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 79197751 "deactivate"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 79197879 "close"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 79198007 "requery"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 79198135 "setWindow"
	public explicit_return_type "void"
	nparams 1
	  param inout name "window" type class_ref 7019063 // CursorWindow
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 79198263 "setSelectionArguments"
	public explicit_return_type "void"
	nparams 1
	  param inout name "selectionArgs" explicit_type "String"
	multiplicity "[]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Changes the selection arguments. The new values take effect after a call to requery().
"
      end

      operation 79198391 "finalize"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Release the native resources, if they haven't been released yet.
"
      end
    end

    class 7134391 "SQLiteQuery"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a query that reads the resulting rows into a {@link SQLiteQuery}.
This class is used by {@link SQLiteCursor} and isn't useful itself.
<p>
This class is not thread-safe.
</p>
"
      classrelation 15610423 // <generalisation>
	relation 15610423 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15610423 // <generalisation>
	  b parent class_ref 7130423 // SQLiteProgram
      end

      classrelation 15610679 // mCancellationSignal (<unidirectional association>)
	relation 15610679 --->
	  a role_name "mCancellationSignal" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15610679 // mCancellationSignal (<unidirectional association>)
	  b parent class_ref 7016503 // CancellationSignal
      end

      operation 79219255 "SQLiteQuery"
	package explicit_return_type ""
	nparams 3
	  param inout name "db" type class_ref 6925239 // SQLiteDatabase
	  param inout name "query" explicit_type "String"
	  param inout name "cancellationSignal" type class_ref 7016503 // CancellationSignal
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79219383 "fillWindow"
	package explicit_return_type "int"
	nparams 4
	  param inout name "window" type class_ref 7019063 // CursorWindow
	  param in name "startPos" explicit_type "int"
	  param in name "requiredPos" explicit_type "int"
	  param inout name "countAllRows" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads rows into a buffer.

@param window The window to fill into
@param startPos The start position for filling the window.
@param requiredPos The position of a row that MUST be in the window.
If it won't fit, then the query should discard part of what it filled.
@param countAllRows True to count all rows that the query would
return regardless of whether they fit in the window.
@return Number of rows that were enumerated.  Might not be all rows
unless countAllRows is true.

@throws SQLiteException if an error occurs.
@throws OperationCanceledException if the operation was canceled.
"
      end

      operation 79219511 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 7134519 "SQLiteCursorDriver"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A driver for SQLiteCursors that is used to create them and gets notified
by the cursors it creates on significant events in their lifetimes.
"
      operation 79198519 "query"
	public return_type class_ref 6954295 // Cursor
	nparams 2
	  param inout name "factory" type class_ref 6925367 // CursorFactory
	  param inout name "bindArgs" explicit_type "String"
	multiplicity "[]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the query returning a Cursor over the result set.

@param factory The CursorFactory to use when creating the Cursors, or
        null if standard SQLiteCursors should be returned.
@return a Cursor over the result set
"
      end

      operation 79198647 "cursorDeactivated"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a SQLiteCursor when it is released.
"
      end

      operation 79198775 "cursorRequeried"
	public explicit_return_type "void"
	nparams 1
	  param inout name "cursor" type class_ref 6954295 // Cursor
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a SQLiteCursor when it is requeried.
"
      end

      operation 79198903 "cursorClosed"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a SQLiteCursor when it it closed to destroy this object as well.
"
      end

      operation 79199031 "setBindArguments"
	public explicit_return_type "void"
	nparams 1
	  param inout name "bindArgs" explicit_type "String"
	multiplicity "[]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set new bind arguments. These will take effect in cursorRequeried().
@param bindArgs the new arguments
"
      end
    end

    class 7134775 "SQLiteSession"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Provides a single client the ability to use a database.

<h2>About database sessions</h2>
<p>
Database access is always performed using a session.  The session
manages the lifecycle of transactions and database connections.
</p><p>
Sessions can be used to perform both read-only and read-write operations.
There is some advantage to knowing when a session is being used for
read-only purposes because the connection pool can optimize the use
of the available connections to permit multiple read-only operations
to execute in parallel whereas read-write operations may need to be serialized.
</p><p>
When <em>Write Ahead Logging (WAL)</em> is enabled, the database can
execute simultaneous read-only and read-write transactions, provided that
at most one read-write transaction is performed at a time.  When WAL is not
enabled, read-only transactions can execute in parallel but read-write
transactions are mutually exclusive.
</p>

<h2>Ownership and concurrency guarantees</h2>
<p>
Session objects are not thread-safe.  In fact, session objects are thread-bound.
The {@link SQLiteDatabase} uses a thread-local variable to associate a session
with each thread for the use of that thread alone.  Consequently, each thread
has its own session object and therefore its own transaction state independent
of other threads.
</p><p>
A thread has at most one session per database.  This constraint ensures that
a thread can never use more than one database connection at a time for a
given database.  As the number of available database connections is limited,
if a single thread tried to acquire multiple connections for the same database
at the same time, it might deadlock.  Therefore we allow there to be only
one session (so, at most one connection) per thread per database.
</p>

<h2>Transactions</h2>
<p>
There are two kinds of transaction: implicit transactions and explicit
transactions.
</p><p>
An implicit transaction is created whenever a database operation is requested
and there is no explicit transaction currently in progress.  An implicit transaction
only lasts for the duration of the database operation in question and then it
is ended.  If the database operation was successful, then its changes are committed.
</p><p>
An explicit transaction is started by calling {@link #beginTransaction} and
specifying the desired transaction mode.  Once an explicit transaction has begun,
all subsequent database operations will be performed as part of that transaction.
To end an explicit transaction, first call {@link #setTransactionSuccessful} if the
transaction was successful, then call {@link #end}.  If the transaction was
marked successful, its changes will be committed, otherwise they will be rolled back.
</p><p>
Explicit transactions can also be nested.  A nested explicit transaction is
started with {@link #beginTransaction}, marked successful with
{@link #setTransactionSuccessful}and ended with {@link #endTransaction}.
If any nested transaction is not marked successful, then the entire transaction
including all of its nested transactions will be rolled back
when the outermost transaction is ended.
</p><p>
To improve concurrency, an explicit transaction can be yielded by calling
{@link #yieldTransaction}.  If there is contention for use of the database,
then yielding ends the current transaction, commits its changes, releases the
database connection for use by another session for a little while, and starts a
new transaction with the same properties as the original one.
Changes committed by {@link #yieldTransaction} cannot be rolled back.
</p><p>
When a transaction is started, the client can provide a {@link SQLiteTransactionListener}
to listen for notifications of transaction-related events.
</p><p>
Recommended usage:
<code><pre>
// First, begin the transaction.
session.beginTransaction(SQLiteSession.TRANSACTION_MODE_DEFERRED, 0);
try {
    // Then do stuff...
    session.execute(\"INSERT INTO ...\", null, 0);

    // As the very last step before ending the transaction, mark it successful.
    session.setTransactionSuccessful();
} finally {
    // Finally, end the transaction.
    // This statement will commit the transaction if it was marked successful or
    // roll it back otherwise.
    session.endTransaction();
}
</pre></code>
</p>

<h2>Database connections</h2>
<p>
A {@link SQLiteDatabase} can have multiple active sessions at the same
time.  Each session acquires and releases connections to the database
as needed to perform each requested database transaction.  If all connections
are in use, then database transactions on some sessions will block until a
connection becomes available.
</p><p>
The session acquires a single database connection only for the duration
of a single (implicit or explicit) database transaction, then releases it.
This characteristic allows a small pool of database connections to be shared
efficiently by multiple sessions as long as they are not all trying to perform
database transactions at the same time.
</p>

<h2>Responsiveness</h2>
<p>
Because there are a limited number of database connections and the session holds
a database connection for the entire duration of a database transaction,
it is important to keep transactions short.  This is especially important
for read-write transactions since they may block other transactions
from executing.  Consider calling {@link #yieldTransaction} periodically
during long-running transactions.
</p><p>
Another important consideration is that transactions that take too long to
run may cause the application UI to become unresponsive.  Even if the transaction
is executed in a background thread, the user will get bored and
frustrated if the application shows no data for several seconds while
a transaction runs.
</p><p>
Guidelines:
<ul>
<li>Do not perform database transactions on the UI thread.</li>
<li>Keep database transactions as short as possible.</li>
<li>Simple queries often run faster than complex queries.</li>
<li>Measure the performance of your database transactions.</li>
<li>Consider what will happen when the size of the data set grows.
A query that works well on 100 rows may struggle with 10,000.</li>
</ul>

<h2>Reentrance</h2>
<p>
This class must tolerate reentrant execution of SQLite operations because
triggers may call custom SQLite functions that perform additional queries.
</p>

@hide
"
      classrelation 15611447 // mConnectionPool (<unidirectional association>)
	relation 15611447 --->
	  a role_name "mConnectionPool" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15611447 // mConnectionPool (<unidirectional association>)
	  b parent class_ref 7132599 // SQLiteConnectionPool
      end

      classrelation 15611575 // mConnection (<unidirectional association>)
	relation 15611575 --->
	  a role_name "mConnection" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15611575 // mConnection (<unidirectional association>)
	  b parent class_ref 7132471 // SQLiteConnection
      end

      attribute 24726967 "mConnectionFlags"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24727095 "mConnectionUseCount"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      class 7136695 "Transaction"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 15611959 // mParent (<unidirectional association>)
	  relation 15611959 --->
	    a role_name "mParent" public
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 15611959 // mParent (<unidirectional association>)
	    b parent class_ref 7136695 // Transaction
	end

	attribute 24727607 "mMode"
	  public explicit_type "int"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 15612087 // mListener (<unidirectional association>)
	  relation 15612087 --->
	    a role_name "mListener" public
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 15612087 // mListener (<unidirectional association>)
	    b parent class_ref 7134903 // SQLiteTransactionListener
	end

	attribute 24727735 "mMarkedSuccessful"
	  public explicit_type "boolean"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 24727863 "mChildFailed"
	  public explicit_type "boolean"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      classrelation 15611703 // mTransactionPool (<unidirectional association>)
	relation 15611703 --->
	  a role_name "mTransactionPool" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15611703 // mTransactionPool (<unidirectional association>)
	  b parent class_ref 7136695 // Transaction
      end

      classrelation 15611831 // mTransactionStack (<unidirectional association>)
	relation 15611831 --->
	  a role_name "mTransactionStack" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15611831 // mTransactionStack (<unidirectional association>)
	  b parent class_ref 7136695 // Transaction
      end

      attribute 24727223 "TRANSACTION_MODE_DEFERRED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Transaction mode: Deferred.
<p>
In a deferred transaction, no locks are acquired on the database
until the first operation is performed.  If the first operation is
read-only, then a <code>SHARED</code> lock is acquired, otherwise
a <code>RESERVED</code> lock is acquired.
</p><p>
While holding a <code>SHARED</code> lock, this session is only allowed to
read but other sessions are allowed to read or write.
While holding a <code>RESERVED</code> lock, this session is allowed to read
or write but other sessions are only allowed to read.
</p><p>
Because the lock is only acquired when needed in a deferred transaction,
it is possible for another session to write to the database first before
this session has a chance to do anything.
</p><p>
Corresponds to the SQLite <code>BEGIN DEFERRED</code> transaction mode.
</p>

"
      end

      attribute 24727351 "TRANSACTION_MODE_IMMEDIATE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Transaction mode: Immediate.
<p>
When an immediate transaction begins, the session acquires a
<code>RESERVED</code> lock.
</p><p>
While holding a <code>RESERVED</code> lock, this session is allowed to read
or write but other sessions are only allowed to read.
</p><p>
Corresponds to the SQLite <code>BEGIN IMMEDIATE</code> transaction mode.
</p>

"
      end

      attribute 24727479 "TRANSACTION_MODE_EXCLUSIVE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Transaction mode: Exclusive.
<p>
When an exclusive transaction begins, the session acquires an
<code>EXCLUSIVE</code> lock.
</p><p>
While holding an <code>EXCLUSIVE</code> lock, this session is allowed to read
or write but no other sessions are allowed to access the database.
</p><p>
Corresponds to the SQLite <code>BEGIN EXCLUSIVE</code> transaction mode.
</p>

"
      end

      operation 79222583 "SQLiteSession"
	public explicit_return_type ""
	nparams 1
	  param inout name "connectionPool" type class_ref 7132599 // SQLiteConnectionPool
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a session bound to the specified connection pool.

@param connectionPool The connection pool.
"
      end

      operation 79222711 "hasTransaction"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the session has a transaction in progress.

@return True if the session has a transaction in progress.
"
      end

      operation 79222839 "hasNestedTransaction"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the session has a nested transaction in progress.

@return True if the session has a nested transaction in progress.
"
      end

      operation 79222967 "hasConnection"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the session has an active database connection.

@return True if the session has an active database connection.
"
      end

      operation 79223095 "beginTransaction"
	public explicit_return_type "void"
	nparams 4
	  param in name "transactionMode" explicit_type "int"
	  param inout name "transactionListener" type class_ref 7134903 // SQLiteTransactionListener
	  param in name "connectionFlags" explicit_type "int"
	  param inout name "cancellationSignal" type class_ref 7016503 // CancellationSignal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Begins a transaction.
<p>
Transactions may nest.  If the transaction is not in progress,
then a database connection is obtained and a new transaction is started.
Otherwise, a nested transaction is started.
</p><p>
Each call to {@link #beginTransaction} must be matched exactly by a call
to {@link #endTransaction}.  To mark a transaction as successful,
call {@link #setTransactionSuccessful} before calling {@link #endTransaction}.
If the transaction is not successful, or if any of its nested
transactions were not successful, then the entire transaction will
be rolled back when the outermost transaction is ended.
</p>

@param transactionMode The transaction mode.  One of: {@link #TRANSACTION_MODE_DEFERRED},
{@link #TRANSACTION_MODE_IMMEDIATE}, or {@link #TRANSACTION_MODE_EXCLUSIVE}.
Ignored when creating a nested transaction.
@param transactionListener The transaction listener, or null if none.
@param connectionFlags The connection flags to use if a connection must be
acquired by this operation.  Refer to {@link SQLiteConnectionPool}.
@param cancellationSignal A signal to cancel the operation in progress, or null if none.

@throws IllegalStateException if {@link #setTransactionSuccessful} has already been
called for the current transaction.
@throws SQLiteException if an error occurs.
@throws OperationCanceledException if the operation was canceled.

@see #setTransactionSuccessful
@see #yieldTransaction
@see #endTransaction
"
      end

      operation 79223223 "beginTransactionUnchecked"
	private explicit_return_type "void"
	nparams 4
	  param in name "transactionMode" explicit_type "int"
	  param inout name "transactionListener" type class_ref 7134903 // SQLiteTransactionListener
	  param in name "connectionFlags" explicit_type "int"
	  param inout name "cancellationSignal" type class_ref 7016503 // CancellationSignal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79223351 "setTransactionSuccessful"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks the current transaction as having completed successfully.
<p>
This method can be called at most once between {@link #beginTransaction} and
{@link #endTransaction} to indicate that the changes made by the transaction should be
committed.  If this method is not called, the changes will be rolled back
when the transaction is ended.
</p>

@throws IllegalStateException if there is no current transaction, or if
{@link #setTransactionSuccessful} has already been called for the current transaction.

@see #beginTransaction
@see #endTransaction
"
      end

      operation 79223479 "endTransaction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "cancellationSignal" type class_ref 7016503 // CancellationSignal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ends the current transaction and commits or rolls back changes.
<p>
If this is the outermost transaction (not nested within any other
transaction), then the changes are committed if {@link #setTransactionSuccessful}
was called or rolled back otherwise.
</p><p>
This method must be called exactly once for each call to {@link #beginTransaction}.
</p>

@param cancellationSignal A signal to cancel the operation in progress, or null if none.

@throws IllegalStateException if there is no current transaction.
@throws SQLiteException if an error occurs.
@throws OperationCanceledException if the operation was canceled.

@see #beginTransaction
@see #setTransactionSuccessful
@see #yieldTransaction
"
      end

      operation 79223607 "endTransactionUnchecked"
	private explicit_return_type "void"
	nparams 2
	  param inout name "cancellationSignal" type class_ref 7016503 // CancellationSignal
	  param inout name "yielding" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79223735 "yieldTransaction"
	public explicit_return_type "boolean"
	nparams 3
	  param in name "sleepAfterYieldDelayMillis" explicit_type "long"
	  param inout name "throwIfUnsafe" explicit_type "boolean"
	  param inout name "cancellationSignal" type class_ref 7016503 // CancellationSignal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Temporarily ends a transaction to let other threads have use of
the database.  Begins a new transaction after a specified delay.
<p>
If there are other threads waiting to acquire connections,
then the current transaction is committed and the database
connection is released.  After a short delay, a new transaction
is started.
</p><p>
The transaction is assumed to be successful so far.  Do not call
{@link #setTransactionSuccessful()} before calling this method.
This method will fail if the transaction has already been marked
successful.
</p><p>
The changes that were committed by a yield cannot be rolled back later.
</p><p>
Before this method was called, there must already have been
a transaction in progress.  When this method returns, there will
still be a transaction in progress, either the same one as before
or a new one if the transaction was actually yielded.
</p><p>
This method should not be called when there is a nested transaction
in progress because it is not possible to yield a nested transaction.
If <code>throwIfNested</code> is true, then attempting to yield
a nested transaction will throw {@link IllegalStateException}, otherwise
the method will return <code>false</code> in that case.
</p><p>
If there is no nested transaction in progress but a previous nested
transaction failed, then the transaction is not yielded (because it
must be rolled back) and this method returns <code>false</code>.
</p>

@param sleepAfterYieldDelayMillis A delay time to wait after yielding
the database connection to allow other threads some time to run.
If the value is less than or equal to zero, there will be no additional
delay beyond the time it will take to begin a new transaction.
@param throwIfUnsafe If true, then instead of returning false when no
transaction is in progress, a nested transaction is in progress, or when
the transaction has already been marked successful, throws {@link IllegalStateException}.
@param cancellationSignal A signal to cancel the operation in progress, or null if none.
@return True if the transaction was actually yielded.

@throws IllegalStateException if <code>throwIfNested</code> is true and
there is no current transaction, there is a nested transaction in progress or
if {@link #setTransactionSuccessful} has already been called for the current transaction.
@throws SQLiteException if an error occurs.
@throws OperationCanceledException if the operation was canceled.

@see #beginTransaction
@see #endTransaction
"
      end

      operation 79223863 "yieldTransactionUnchecked"
	private explicit_return_type "boolean"
	nparams 2
	  param in name "sleepAfterYieldDelayMillis" explicit_type "long"
	  param inout name "cancellationSignal" type class_ref 7016503 // CancellationSignal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79223991 "prepare"
	public explicit_return_type "void"
	nparams 4
	  param inout name "sql" explicit_type "String"
	  param in name "connectionFlags" explicit_type "int"
	  param inout name "cancellationSignal" type class_ref 7016503 // CancellationSignal
	  param inout name "outStatementInfo" type class_ref 7133367 // SQLiteStatementInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prepares a statement for execution but does not bind its parameters or execute it.
<p>
This method can be used to check for syntax errors during compilation
prior to execution of the statement.  If the {@code outStatementInfo} argument
is not null, the provided {@link SQLiteStatementInfo} object is populated
with information about the statement.
</p><p>
A prepared statement makes no reference to the arguments that may eventually
be bound to it, consequently it it possible to cache certain prepared statements
such as SELECT or INSERT/UPDATE statements.  If the statement is cacheable,
then it will be stored in the cache for later and reused if possible.
</p>

@param sql The SQL statement to prepare.
@param connectionFlags The connection flags to use if a connection must be
acquired by this operation.  Refer to {@link SQLiteConnectionPool}.
@param cancellationSignal A signal to cancel the operation in progress, or null if none.
@param outStatementInfo The {@link SQLiteStatementInfo} object to populate
with information about the statement, or null if none.

@throws SQLiteException if an error occurs, such as a syntax error.
@throws OperationCanceledException if the operation was canceled.
"
      end

      operation 79224119 "execute"
	public explicit_return_type "void"
	nparams 4
	  param inout name "sql" explicit_type "String"
	  param inout name "bindArgs" explicit_type "Object"
	multiplicity "[]"
	  param in name "connectionFlags" explicit_type "int"
	  param inout name "cancellationSignal" type class_ref 7016503 // CancellationSignal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes a statement that does not return a result.

@param sql The SQL statement to execute.
@param bindArgs The arguments to bind, or null if none.
@param connectionFlags The connection flags to use if a connection must be
acquired by this operation.  Refer to {@link SQLiteConnectionPool}.
@param cancellationSignal A signal to cancel the operation in progress, or null if none.

@throws SQLiteException if an error occurs, such as a syntax error
or invalid number of bind arguments.
@throws OperationCanceledException if the operation was canceled.
"
      end

      operation 79224247 "executeForLong"
	public explicit_return_type "long"
	nparams 4
	  param inout name "sql" explicit_type "String"
	  param inout name "bindArgs" explicit_type "Object"
	multiplicity "[]"
	  param in name "connectionFlags" explicit_type "int"
	  param inout name "cancellationSignal" type class_ref 7016503 // CancellationSignal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes a statement that returns a single <code>long</code> result.

@param sql The SQL statement to execute.
@param bindArgs The arguments to bind, or null if none.
@param connectionFlags The connection flags to use if a connection must be
acquired by this operation.  Refer to {@link SQLiteConnectionPool}.
@param cancellationSignal A signal to cancel the operation in progress, or null if none.
@return The value of the first column in the first row of the result set
as a <code>long</code>, or zero if none.

@throws SQLiteException if an error occurs, such as a syntax error
or invalid number of bind arguments.
@throws OperationCanceledException if the operation was canceled.
"
      end

      operation 79224375 "executeForString"
	public explicit_return_type "String"
	nparams 4
	  param inout name "sql" explicit_type "String"
	  param inout name "bindArgs" explicit_type "Object"
	multiplicity "[]"
	  param in name "connectionFlags" explicit_type "int"
	  param inout name "cancellationSignal" type class_ref 7016503 // CancellationSignal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes a statement that returns a single {@link String} result.

@param sql The SQL statement to execute.
@param bindArgs The arguments to bind, or null if none.
@param connectionFlags The connection flags to use if a connection must be
acquired by this operation.  Refer to {@link SQLiteConnectionPool}.
@param cancellationSignal A signal to cancel the operation in progress, or null if none.
@return The value of the first column in the first row of the result set
as a <code>String</code>, or null if none.

@throws SQLiteException if an error occurs, such as a syntax error
or invalid number of bind arguments.
@throws OperationCanceledException if the operation was canceled.
"
      end

      operation 79224503 "executeForBlobFileDescriptor"
	public return_type class_ref 6986295 // ParcelFileDescriptor
	nparams 4
	  param inout name "sql" explicit_type "String"
	  param inout name "bindArgs" explicit_type "Object"
	multiplicity "[]"
	  param in name "connectionFlags" explicit_type "int"
	  param inout name "cancellationSignal" type class_ref 7016503 // CancellationSignal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes a statement that returns a single BLOB result as a
file descriptor to a shared memory region.

@param sql The SQL statement to execute.
@param bindArgs The arguments to bind, or null if none.
@param connectionFlags The connection flags to use if a connection must be
acquired by this operation.  Refer to {@link SQLiteConnectionPool}.
@param cancellationSignal A signal to cancel the operation in progress, or null if none.
@return The file descriptor for a shared memory region that contains
the value of the first column in the first row of the result set as a BLOB,
or null if none.

@throws SQLiteException if an error occurs, such as a syntax error
or invalid number of bind arguments.
@throws OperationCanceledException if the operation was canceled.
"
      end

      operation 79224631 "executeForChangedRowCount"
	public explicit_return_type "int"
	nparams 4
	  param inout name "sql" explicit_type "String"
	  param inout name "bindArgs" explicit_type "Object"
	multiplicity "[]"
	  param in name "connectionFlags" explicit_type "int"
	  param inout name "cancellationSignal" type class_ref 7016503 // CancellationSignal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes a statement that returns a count of the number of rows
that were changed.  Use for UPDATE or DELETE SQL statements.

@param sql The SQL statement to execute.
@param bindArgs The arguments to bind, or null if none.
@param connectionFlags The connection flags to use if a connection must be
acquired by this operation.  Refer to {@link SQLiteConnectionPool}.
@param cancellationSignal A signal to cancel the operation in progress, or null if none.
@return The number of rows that were changed.

@throws SQLiteException if an error occurs, such as a syntax error
or invalid number of bind arguments.
@throws OperationCanceledException if the operation was canceled.
"
      end

      operation 79224759 "executeForLastInsertedRowId"
	public explicit_return_type "long"
	nparams 4
	  param inout name "sql" explicit_type "String"
	  param inout name "bindArgs" explicit_type "Object"
	multiplicity "[]"
	  param in name "connectionFlags" explicit_type "int"
	  param inout name "cancellationSignal" type class_ref 7016503 // CancellationSignal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes a statement that returns the row id of the last row inserted
by the statement.  Use for INSERT SQL statements.

@param sql The SQL statement to execute.
@param bindArgs The arguments to bind, or null if none.
@param connectionFlags The connection flags to use if a connection must be
acquired by this operation.  Refer to {@link SQLiteConnectionPool}.
@param cancellationSignal A signal to cancel the operation in progress, or null if none.
@return The row id of the last row that was inserted, or 0 if none.

@throws SQLiteException if an error occurs, such as a syntax error
or invalid number of bind arguments.
@throws OperationCanceledException if the operation was canceled.
"
      end

      operation 79224887 "executeForCursorWindow"
	public explicit_return_type "int"
	nparams 8
	  param inout name "sql" explicit_type "String"
	  param inout name "bindArgs" explicit_type "Object"
	multiplicity "[]"
	  param inout name "window" type class_ref 7019063 // CursorWindow
	  param in name "startPos" explicit_type "int"
	  param in name "requiredPos" explicit_type "int"
	  param inout name "countAllRows" explicit_type "boolean"
	  param in name "connectionFlags" explicit_type "int"
	  param inout name "cancellationSignal" type class_ref 7016503 // CancellationSignal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes a statement and populates the specified {@link CursorWindow}
with a range of results.  Returns the number of rows that were counted
during query execution.

@param sql The SQL statement to execute.
@param bindArgs The arguments to bind, or null if none.
@param window The cursor window to clear and fill.
@param startPos The start position for filling the window.
@param requiredPos The position of a row that MUST be in the window.
If it won't fit, then the query should discard part of what it filled
so that it does.  Must be greater than or equal to <code>startPos</code>.
@param countAllRows True to count all rows that the query would return
regagless of whether they fit in the window.
@param connectionFlags The connection flags to use if a connection must be
acquired by this operation.  Refer to {@link SQLiteConnectionPool}.
@param cancellationSignal A signal to cancel the operation in progress, or null if none.
@return The number of rows that were counted during query execution.  Might
not be all rows in the result set unless <code>countAllRows</code> is true.

@throws SQLiteException if an error occurs, such as a syntax error
or invalid number of bind arguments.
@throws OperationCanceledException if the operation was canceled.
"
      end

      operation 79225015 "executeSpecial"
	private explicit_return_type "boolean"
	nparams 4
	  param inout name "sql" explicit_type "String"
	  param inout name "bindArgs" explicit_type "Object"
	multiplicity "[]"
	  param in name "connectionFlags" explicit_type "int"
	  param inout name "cancellationSignal" type class_ref 7016503 // CancellationSignal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs special reinterpretation of certain SQL statements such as \"BEGIN\",
\"COMMIT\" and \"ROLLBACK\" to ensure that transaction state invariants are
maintained.

This function is mainly used to support legacy apps that perform their
own transactions by executing raw SQL rather than calling {@link #beginTransaction}
and the like.

@param sql The SQL statement to execute.
@param bindArgs The arguments to bind, or null if none.
@param connectionFlags The connection flags to use if a connection must be
acquired by this operation.  Refer to {@link SQLiteConnectionPool}.
@param cancellationSignal A signal to cancel the operation in progress, or null if none.
@return True if the statement was of a special form that was handled here,
false otherwise.

@throws SQLiteException if an error occurs, such as a syntax error
or invalid number of bind arguments.
@throws OperationCanceledException if the operation was canceled.
"
      end

      operation 79225143 "acquireConnection"
	private explicit_return_type "void"
	nparams 3
	  param inout name "sql" explicit_type "String"
	  param in name "connectionFlags" explicit_type "int"
	  param inout name "cancellationSignal" type class_ref 7016503 // CancellationSignal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79225271 "releaseConnection"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79225399 "throwIfNoTransaction"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79225527 "throwIfTransactionMarkedSuccessful"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79225655 "throwIfNestedTransaction"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79225783 "obtainTransaction"
	private return_type class_ref 7136695 // Transaction
	nparams 2
	  param in name "mode" explicit_type "int"
	  param inout name "listener" type class_ref 7134903 // SQLiteTransactionListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79225911 "recycleTransaction"
	private explicit_return_type "void"
	nparams 1
	  param inout name "transaction" type class_ref 7136695 // Transaction
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 7134903 "SQLiteTransactionListener"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A listener for transaction events.
"
      operation 79227319 "onBegin"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called immediately after the transaction begins.
"
      end

      operation 79227447 "onCommit"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called immediately before commiting the transaction.
"
      end

      operation 79227575 "onRollback"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called if the transaction is about to be rolled back.
"
      end
    end

    class 7135031 "SQLiteDatabaseCorruptException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An exception that indicates that the SQLite database file is corrupt.
"
      classrelation 15607223 // <generalisation>
	relation 15607223 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15607223 // <generalisation>
	  b parent class_ref 7131831 // SQLiteException
      end

      operation 79211959 "SQLiteDatabaseCorruptException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79212087 "SQLiteDatabaseCorruptException"
	public explicit_return_type ""
	nparams 1
	  param inout name "error" explicit_type "String"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 7135159 "SQLiteDatabaseLockedException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Thrown if  the database engine was unable to acquire the
database locks it needs to do its job.  If the statement is a [COMMIT]
or occurs outside of an explicit transaction, then you can retry the
statement.  If the statement is not a [COMMIT] and occurs within a
explicit transaction then you should rollback the transaction before
continuing.
"
      classrelation 15607351 // <generalisation>
	relation 15607351 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15607351 // <generalisation>
	  b parent class_ref 7131831 // SQLiteException
      end

      operation 79212215 "SQLiteDatabaseLockedException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79212343 "SQLiteDatabaseLockedException"
	public explicit_return_type ""
	nparams 1
	  param inout name "error" explicit_type "String"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 7135287 "SQLiteDatatypeMismatchException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 15607479 // <generalisation>
	relation 15607479 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15607479 // <generalisation>
	  b parent class_ref 7131831 // SQLiteException
      end

      operation 79212471 "SQLiteDatatypeMismatchException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79212599 "SQLiteDatatypeMismatchException"
	public explicit_return_type ""
	nparams 1
	  param inout name "error" explicit_type "String"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 7135543 "SQLiteDirectCursorDriver"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A cursor driver that uses the given query directly.

@hide
"
      classrelation 15607991 // <realization>
	relation 15607991 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15607991 // <realization>
	  b parent class_ref 7134519 // SQLiteCursorDriver
      end

      classrelation 15608119 // mDatabase (<unidirectional association>)
	relation 15608119 --->
	  a role_name "mDatabase" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15608119 // mDatabase (<unidirectional association>)
	  b parent class_ref 6925239 // SQLiteDatabase
      end

      classrelation 15608503 // mCancellationSignal (<unidirectional association>)
	relation 15608503 --->
	  a role_name "mCancellationSignal" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15608503 // mCancellationSignal (<unidirectional association>)
	  b parent class_ref 7016503 // CancellationSignal
      end

      classrelation 15608631 // mQuery (<unidirectional association>)
	relation 15608631 --->
	  a role_name "mQuery" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15608631 // mQuery (<unidirectional association>)
	  b parent class_ref 7134391 // SQLiteQuery
      end

      operation 79213495 "SQLiteDirectCursorDriver"
	public explicit_return_type ""
	nparams 4
	  param inout name "db" type class_ref 6925239 // SQLiteDatabase
	  param inout name "sql" explicit_type "String"
	  param inout name "editTable" explicit_type "String"
	  param inout name "cancellationSignal" type class_ref 7016503 // CancellationSignal
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79213623 "query"
	public return_type class_ref 6954295 // Cursor
	nparams 2
	  param inout name "factory" type class_ref 6925367 // CursorFactory
	  param inout name "selectionArgs" explicit_type "String"
	multiplicity "[]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79213751 "cursorClosed"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79213879 "setBindArguments"
	public explicit_return_type "void"
	nparams 1
	  param inout name "bindArgs" explicit_type "String"
	multiplicity "[]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79214007 "cursorDeactivated"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79214135 "cursorRequeried"
	public explicit_return_type "void"
	nparams 1
	  param inout name "cursor" type class_ref 6954295 // Cursor
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79214263 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 7135671 "SQLiteDiskIOException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An exception that indicates that an IO error occured while accessing the 
SQLite database file.
"
      classrelation 15608759 // <generalisation>
	relation 15608759 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15608759 // <generalisation>
	  b parent class_ref 7131831 // SQLiteException
      end

      operation 79214391 "SQLiteDiskIOException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79214519 "SQLiteDiskIOException"
	public explicit_return_type ""
	nparams 1
	  param inout name "error" explicit_type "String"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 7135799 "SQLiteDoneException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An exception that indicates that the SQLite program is done.
Thrown when an operation that expects a row (such as {@link
SQLiteStatement#simpleQueryForString} or {@link
SQLiteStatement#simpleQueryForLong}) does not get one.
"
      classrelation 15608887 // <generalisation>
	relation 15608887 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15608887 // <generalisation>
	  b parent class_ref 7131831 // SQLiteException
      end

      operation 79214647 "SQLiteDoneException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79214775 "SQLiteDoneException"
	public explicit_return_type ""
	nparams 1
	  param inout name "error" explicit_type "String"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 7135927 "SQLiteFullException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An exception that indicates that the SQLite database is full.
"
      classrelation 15609015 // <generalisation>
	relation 15609015 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15609015 // <generalisation>
	  b parent class_ref 7131831 // SQLiteException
      end

      operation 79214903 "SQLiteFullException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79215031 "SQLiteFullException"
	public explicit_return_type ""
	nparams 1
	  param inout name "error" explicit_type "String"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 7136055 "SQLiteGlobal"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Provides access to SQLite functions that affect all database connection,
such as memory management.

The native code associated with SQLiteGlobal is also sets global configuration options
using sqlite3_config() then calls sqlite3_initialize() to ensure that the SQLite
library is properly initialized exactly once before any other framework or application
code has a chance to run.

Verbose SQLite logging is enabled if the \"log.tag.SQLiteLog\" property is set to \"V\".
(per {@link SQLiteDebug#DEBUG_SQL_LOG}).

@hide
"
      attribute 24726071 "sDefaultPageSize"
	class_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 79215159 "nativeReleaseMemory"
	class_operation private explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
      end

      operation 79215287 "SQLiteGlobal"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79215415 "releaseMemory"
	class_operation public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to release memory by pruning the SQLite page cache and other
internal data structures.

@return The number of bytes that were freed.
"
      end

      operation 79215543 "getDefaultPageSize"
	class_operation public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the default page size to use when creating a database.
"
      end

      operation 79215671 "getDefaultJournalMode"
	class_operation public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the default journal mode when WAL is not in use.
"
      end

      operation 79215799 "getJournalSizeLimit"
	class_operation public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the journal size limit in bytes.
"
      end

      operation 79215927 "getDefaultSyncMode"
	class_operation public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the default database synchronization mode when WAL is not in use.
"
      end

      operation 79216055 "getWALSyncMode"
	class_operation public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the database synchronization mode when in WAL mode.
"
      end

      operation 79216183 "getWALAutoCheckpoint"
	class_operation public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the WAL auto-checkpoint integer in database pages.
"
      end

      operation 79216311 "getWALConnectionPoolSize"
	class_operation public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the connection pool size when in WAL mode.
"
      end
    end

    class 7136183 "SQLiteMisuseException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This error can occur if the application creates a SQLiteStatement object and allows multiple
threads in the application use it at the same time.
Sqlite returns this error if bind and execute methods on this object occur at the same time
from multiple threads, like so:
    thread # 1: in execute() method of the SQLiteStatement object
    while thread # 2: is in bind..() on the same object.
</p>
FIX this by NEVER sharing the same SQLiteStatement object between threads.
Create a local instance of the SQLiteStatement whenever it is needed, use it and close it ASAP.
NEVER make it globally available.
"
      classrelation 15609399 // <generalisation>
	relation 15609399 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15609399 // <generalisation>
	  b parent class_ref 7131831 // SQLiteException
      end

      operation 79216439 "SQLiteMisuseException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79216567 "SQLiteMisuseException"
	public explicit_return_type ""
	nparams 1
	  param inout name "error" explicit_type "String"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 7136311 "SQLiteOutOfMemoryException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 15609527 // <generalisation>
	relation 15609527 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15609527 // <generalisation>
	  b parent class_ref 7131831 // SQLiteException
      end

      operation 79216695 "SQLiteOutOfMemoryException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79216823 "SQLiteOutOfMemoryException"
	public explicit_return_type ""
	nparams 1
	  param inout name "error" explicit_type "String"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 7136439 "SQLiteQueryBuilder"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This is a convience class that helps build SQL queries to be sent to
{@link SQLiteDatabase} objects.
"
      attribute 24726455 "sLimitPattern"
	class_attribute const_attribute private explicit_type "Pattern"
	init_value "
            Pattern.compile(\"\\\\s*\\\\d+\\\\s*(,\\\\s*\\\\d+\\\\s*)?\")"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24726583 "mWhereClause"
	private explicit_type "StringBuilder"
	init_value " null"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " lazily created"
      end

      attribute 24726711 "mDistinct"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 15611191 // mFactory (<unidirectional association>)
	relation 15611191 --->
	  a role_name "mFactory" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15611191 // mFactory (<unidirectional association>)
	  b parent class_ref 6925367 // CursorFactory
      end

      attribute 24726839 "mStrict"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 79219639 "SQLiteQueryBuilder"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79219767 "setDistinct"
	public explicit_return_type "void"
	nparams 1
	  param inout name "distinct" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Mark the query as DISTINCT.

@param distinct if true the query is DISTINCT, otherwise it isn't
"
      end

      operation 79219895 "getTables"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the list of tables being queried

@return the list of tables being queried
"
      end

      operation 79220023 "setTables"
	public explicit_return_type "void"
	nparams 1
	  param inout name "inTables" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the list of tables to query. Multiple tables can be specified to perform a join.
For example:
  setTables(\"foo, bar\")
  setTables(\"foo LEFT OUTER JOIN bar ON (foo.id = bar.foo_id)\")

@param inTables the list of tables to query on
"
      end

      operation 79220151 "appendWhere"
	public explicit_return_type "void"
	nparams 1
	  param inout name "inWhere" explicit_type "CharSequence"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append a chunk to the WHERE clause of the query. All chunks appended are surrounded
by parenthesis and ANDed with the selection passed to {@link #query}. The final
WHERE clause looks like:

WHERE (&lt;append chunk 1>&lt;append chunk2>) AND (&lt;query() selection parameter>)

@param inWhere the chunk of text to append to the WHERE clause.
"
      end

      operation 79220279 "appendWhereEscapeString"
	public explicit_return_type "void"
	nparams 1
	  param inout name "inWhere" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append a chunk to the WHERE clause of the query. All chunks appended are surrounded
by parenthesis and ANDed with the selection passed to {@link #query}. The final
WHERE clause looks like:

WHERE (&lt;append chunk 1>&lt;append chunk2>) AND (&lt;query() selection parameter>)

@param inWhere the chunk of text to append to the WHERE clause. it will be escaped
to avoid SQL injection attacks
"
      end

      operation 79220407 "setProjectionMap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "columnMap" explicit_type "Map<String, String>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the projection map for the query.  The projection map maps
from column names that the caller passes into query to database
column names. This is useful for renaming columns as well as
disambiguating column names when doing joins. For example you
could map \"name\" to \"people.name\".  If a projection map is set
it must contain all column names the user may request, even if
the key and value are the same.

@param columnMap maps from the user column names to the database column names
"
      end

      operation 79220535 "setCursorFactory"
	public explicit_return_type "void"
	nparams 1
	  param inout name "factory" type class_ref 6925367 // CursorFactory
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the cursor factory to be used for the query.  You can use
one factory for all queries on a database but it is normally
easier to specify the factory when doing this query.

@param factory the factory to use.
"
      end

      operation 79220663 "setStrict"
	public explicit_return_type "void"
	nparams 1
	  param inout name "flag" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "When set, the selection is verified against malicious arguments.
When using this class to create a statement using
{@link #buildQueryString(boolean, String, String[], String, String, String, String, String)},
non-numeric limits will raise an exception. If a projection map is specified, fields
not in that map will be ignored.
If this class is used to execute the statement directly using
{@link #query(SQLiteDatabase, String[], String, String[], String, String, String)}
or
{@link #query(SQLiteDatabase, String[], String, String[], String, String, String, String)},
additionally also parenthesis escaping selection are caught.

To summarize: To get maximum protection against malicious third party apps (for example
content provider consumers), make sure to do the following:
<ul>
<li>Set this value to true</li>
<li>Use a projection map</li>
<li>Use one of the query overloads instead of getting the statement as a sql string</li>
</ul>
By default, this value is false.
"
      end

      operation 79220791 "buildQueryString"
	class_operation public explicit_return_type "String"
	nparams 8
	  param inout name "distinct" explicit_type "boolean"
	  param inout name "tables" explicit_type "String"
	  param inout name "columns" explicit_type "String"
	multiplicity "[]"
	  param inout name "where" explicit_type "String"
	  param inout name "groupBy" explicit_type "String"
	  param inout name "having" explicit_type "String"
	  param inout name "orderBy" explicit_type "String"
	  param inout name "limit" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Build an SQL query string from the given clauses.

@param distinct true if you want each row to be unique, false otherwise.
@param tables The table names to compile the query against.
@param columns A list of which columns to return. Passing null will
           return all columns, which is discouraged to prevent reading
           data from storage that isn't going to be used.
@param where A filter declaring which rows to return, formatted as an SQL
           WHERE clause (excluding the WHERE itself). Passing null will
           return all rows for the given URL.
@param groupBy A filter declaring how to group rows, formatted as an SQL
           GROUP BY clause (excluding the GROUP BY itself). Passing null
           will cause the rows to not be grouped.
@param having A filter declare which row groups to include in the cursor,
           if row grouping is being used, formatted as an SQL HAVING
           clause (excluding the HAVING itself). Passing null will cause
           all row groups to be included, and is required when row
           grouping is not being used.
@param orderBy How to order the rows, formatted as an SQL ORDER BY clause
           (excluding the ORDER BY itself). Passing null will use the
           default sort order, which may be unordered.
@param limit Limits the number of rows returned by the query,
           formatted as LIMIT clause. Passing null denotes no LIMIT clause.
@return the SQL query string
"
      end

      operation 79220919 "appendClause"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "s" explicit_type "StringBuilder"
	  param inout name "name" explicit_type "String"
	  param inout name "clause" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79221047 "appendColumns"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "s" explicit_type "StringBuilder"
	  param inout name "columns" explicit_type "String"
	multiplicity "[]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add the names that are non-null in columns to s, separating
them with commas.
"
      end

      operation 79221175 "query"
	public return_type class_ref 6954295 // Cursor
	nparams 7
	  param inout name "db" type class_ref 6925239 // SQLiteDatabase
	  param inout name "projectionIn" explicit_type "String"
	multiplicity "[]"
	  param inout name "selection" explicit_type "String"
	  param inout name "selectionArgs" explicit_type "String"
	multiplicity "[]"
	  param inout name "groupBy" explicit_type "String"
	  param inout name "having" explicit_type "String"
	  param inout name "sortOrder" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Perform a query by combining all current settings and the
information passed into this method.

@param db the database to query on
@param projectionIn A list of which columns to return. Passing
  null will return all columns, which is discouraged to prevent
  reading data from storage that isn't going to be used.
@param selection A filter declaring which rows to return,
  formatted as an SQL WHERE clause (excluding the WHERE
  itself). Passing null will return all rows for the given URL.
@param selectionArgs You may include ?s in selection, which
  will be replaced by the values from selectionArgs, in order
  that they appear in the selection. The values will be bound
  as Strings.
@param groupBy A filter declaring how to group rows, formatted
  as an SQL GROUP BY clause (excluding the GROUP BY
  itself). Passing null will cause the rows to not be grouped.
@param having A filter declare which row groups to include in
  the cursor, if row grouping is being used, formatted as an
  SQL HAVING clause (excluding the HAVING itself).  Passing
  null will cause all row groups to be included, and is
  required when row grouping is not being used.
@param sortOrder How to order the rows, formatted as an SQL
  ORDER BY clause (excluding the ORDER BY itself). Passing null
  will use the default sort order, which may be unordered.
@return a cursor over the result set
@see android.content.ContentResolver#query(android.net.Uri, String[],
     String, String[], String)
"
      end

      operation 79221303 "query"
	public return_type class_ref 6954295 // Cursor
	nparams 8
	  param inout name "db" type class_ref 6925239 // SQLiteDatabase
	  param inout name "projectionIn" explicit_type "String"
	multiplicity "[]"
	  param inout name "selection" explicit_type "String"
	  param inout name "selectionArgs" explicit_type "String"
	multiplicity "[]"
	  param inout name "groupBy" explicit_type "String"
	  param inout name "having" explicit_type "String"
	  param inout name "sortOrder" explicit_type "String"
	  param inout name "limit" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Perform a query by combining all current settings and the
information passed into this method.

@param db the database to query on
@param projectionIn A list of which columns to return. Passing
  null will return all columns, which is discouraged to prevent
  reading data from storage that isn't going to be used.
@param selection A filter declaring which rows to return,
  formatted as an SQL WHERE clause (excluding the WHERE
  itself). Passing null will return all rows for the given URL.
@param selectionArgs You may include ?s in selection, which
  will be replaced by the values from selectionArgs, in order
  that they appear in the selection. The values will be bound
  as Strings.
@param groupBy A filter declaring how to group rows, formatted
  as an SQL GROUP BY clause (excluding the GROUP BY
  itself). Passing null will cause the rows to not be grouped.
@param having A filter declare which row groups to include in
  the cursor, if row grouping is being used, formatted as an
  SQL HAVING clause (excluding the HAVING itself).  Passing
  null will cause all row groups to be included, and is
  required when row grouping is not being used.
@param sortOrder How to order the rows, formatted as an SQL
  ORDER BY clause (excluding the ORDER BY itself). Passing null
  will use the default sort order, which may be unordered.
@param limit Limits the number of rows returned by the query,
  formatted as LIMIT clause. Passing null denotes no LIMIT clause.
@return a cursor over the result set
@see android.content.ContentResolver#query(android.net.Uri, String[],
     String, String[], String)
"
      end

      operation 79221431 "query"
	public return_type class_ref 6954295 // Cursor
	nparams 9
	  param inout name "db" type class_ref 6925239 // SQLiteDatabase
	  param inout name "projectionIn" explicit_type "String"
	multiplicity "[]"
	  param inout name "selection" explicit_type "String"
	  param inout name "selectionArgs" explicit_type "String"
	multiplicity "[]"
	  param inout name "groupBy" explicit_type "String"
	  param inout name "having" explicit_type "String"
	  param inout name "sortOrder" explicit_type "String"
	  param inout name "limit" explicit_type "String"
	  param inout name "cancellationSignal" type class_ref 7016503 // CancellationSignal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Perform a query by combining all current settings and the
information passed into this method.

@param db the database to query on
@param projectionIn A list of which columns to return. Passing
  null will return all columns, which is discouraged to prevent
  reading data from storage that isn't going to be used.
@param selection A filter declaring which rows to return,
  formatted as an SQL WHERE clause (excluding the WHERE
  itself). Passing null will return all rows for the given URL.
@param selectionArgs You may include ?s in selection, which
  will be replaced by the values from selectionArgs, in order
  that they appear in the selection. The values will be bound
  as Strings.
@param groupBy A filter declaring how to group rows, formatted
  as an SQL GROUP BY clause (excluding the GROUP BY
  itself). Passing null will cause the rows to not be grouped.
@param having A filter declare which row groups to include in
  the cursor, if row grouping is being used, formatted as an
  SQL HAVING clause (excluding the HAVING itself).  Passing
  null will cause all row groups to be included, and is
  required when row grouping is not being used.
@param sortOrder How to order the rows, formatted as an SQL
  ORDER BY clause (excluding the ORDER BY itself). Passing null
  will use the default sort order, which may be unordered.
@param limit Limits the number of rows returned by the query,
  formatted as LIMIT clause. Passing null denotes no LIMIT clause.
@param cancellationSignal A signal to cancel the operation in progress, or null if none.
If the operation is canceled, then {@link OperationCanceledException} will be thrown
when the query is executed.
@return a cursor over the result set
@see android.content.ContentResolver#query(android.net.Uri, String[],
     String, String[], String)
"
      end

      operation 79221559 "buildQuery"
	public explicit_return_type "String"
	nparams 6
	  param inout name "projectionIn" explicit_type "String"
	multiplicity "[]"
	  param inout name "selection" explicit_type "String"
	  param inout name "groupBy" explicit_type "String"
	  param inout name "having" explicit_type "String"
	  param inout name "sortOrder" explicit_type "String"
	  param inout name "limit" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a SELECT statement suitable for use in a group of
SELECT statements that will be joined through UNION operators
in buildUnionQuery.

@param projectionIn A list of which columns to return. Passing
   null will return all columns, which is discouraged to
   prevent reading data from storage that isn't going to be
   used.
@param selection A filter declaring which rows to return,
  formatted as an SQL WHERE clause (excluding the WHERE
  itself).  Passing null will return all rows for the given
  URL.
@param groupBy A filter declaring how to group rows, formatted
  as an SQL GROUP BY clause (excluding the GROUP BY itself).
  Passing null will cause the rows to not be grouped.
@param having A filter declare which row groups to include in
  the cursor, if row grouping is being used, formatted as an
  SQL HAVING clause (excluding the HAVING itself).  Passing
  null will cause all row groups to be included, and is
  required when row grouping is not being used.
@param sortOrder How to order the rows, formatted as an SQL
  ORDER BY clause (excluding the ORDER BY itself). Passing null
  will use the default sort order, which may be unordered.
@param limit Limits the number of rows returned by the query,
  formatted as LIMIT clause. Passing null denotes no LIMIT clause.
@return the resulting SQL SELECT statement
"
      end

      operation 79221687 "buildQuery"
	public explicit_return_type "String"
	nparams 7
	  param inout name "projectionIn" explicit_type "String"
	multiplicity "[]"
	  param inout name "selection" explicit_type "String"
	  param inout name "selectionArgs" explicit_type "String"
	multiplicity "[]"
	  param inout name "groupBy" explicit_type "String"
	  param inout name "having" explicit_type "String"
	  param inout name "sortOrder" explicit_type "String"
	  param inout name "limit" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "@deprecated This method's signature is misleading since no SQL parameter
substitution is carried out.  The selection arguments parameter does not get
used at all.  To avoid confusion, call
{@link #buildQuery(String[], String, String, String, String, String)} instead.
"
      end

      operation 79221815 "buildUnionSubQuery"
	public explicit_return_type "String"
	nparams 8
	  param inout name "typeDiscriminatorColumn" explicit_type "String"
	  param inout name "unionColumns" explicit_type "String"
	multiplicity "[]"
	  param inout name "columnsPresentInTable" explicit_type "Set<String>"
	  param in name "computedColumnsOffset" explicit_type "int"
	  param inout name "typeDiscriminatorValue" explicit_type "String"
	  param inout name "selection" explicit_type "String"
	  param inout name "groupBy" explicit_type "String"
	  param inout name "having" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a SELECT statement suitable for use in a group of
SELECT statements that will be joined through UNION operators
in buildUnionQuery.

@param typeDiscriminatorColumn the name of the result column
  whose cells will contain the name of the table from which
  each row was drawn.
@param unionColumns the names of the columns to appear in the
  result.  This may include columns that do not appear in the
  table this SELECT is querying (i.e. mTables), but that do
  appear in one of the other tables in the UNION query that we
  are constructing.
@param columnsPresentInTable a Set of the names of the columns
  that appear in this table (i.e. in the table whose name is
  mTables).  Since columns in unionColumns include columns that
  appear only in other tables, we use this array to distinguish
  which ones actually are present.  Other columns will have
  NULL values for results from this subquery.
@param computedColumnsOffset all columns in unionColumns before
  this index are included under the assumption that they're
  computed and therefore won't appear in columnsPresentInTable,
  e.g. \"date * 1000 as normalized_date\"
@param typeDiscriminatorValue the value used for the
  type-discriminator column in this subquery
@param selection A filter declaring which rows to return,
  formatted as an SQL WHERE clause (excluding the WHERE
  itself).  Passing null will return all rows for the given
  URL.
@param groupBy A filter declaring how to group rows, formatted
  as an SQL GROUP BY clause (excluding the GROUP BY itself).
  Passing null will cause the rows to not be grouped.
@param having A filter declare which row groups to include in
  the cursor, if row grouping is being used, formatted as an
  SQL HAVING clause (excluding the HAVING itself).  Passing
  null will cause all row groups to be included, and is
  required when row grouping is not being used.
@return the resulting SQL SELECT statement
"
      end

      operation 79221943 "buildUnionSubQuery"
	public explicit_return_type "String"
	nparams 9
	  param inout name "typeDiscriminatorColumn" explicit_type "String"
	  param inout name "unionColumns" explicit_type "String"
	multiplicity "[]"
	  param inout name "columnsPresentInTable" explicit_type "Set<String>"
	  param in name "computedColumnsOffset" explicit_type "int"
	  param inout name "typeDiscriminatorValue" explicit_type "String"
	  param inout name "selection" explicit_type "String"
	  param inout name "selectionArgs" explicit_type "String"
	multiplicity "[]"
	  param inout name "groupBy" explicit_type "String"
	  param inout name "having" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6}[] ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "@deprecated This method's signature is misleading since no SQL parameter
substitution is carried out.  The selection arguments parameter does not get
used at all.  To avoid confusion, call
{@link #buildUnionSubQuery}
instead.
"
      end

      operation 79222071 "buildUnionQuery"
	public explicit_return_type "String"
	nparams 3
	  param inout name "subQueries" explicit_type "String"
	multiplicity "[]"
	  param inout name "sortOrder" explicit_type "String"
	  param inout name "limit" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Given a set of subqueries, all of which are SELECT statements,
construct a query that returns the union of what those
subqueries return.
@param subQueries an array of SQL SELECT statements, all of
  which must have the same columns as the same positions in
  their results
@param sortOrder How to order the rows, formatted as an SQL
  ORDER BY clause (excluding the ORDER BY itself).  Passing
  null will use the default sort order, which may be unordered.
@param limit The limit clause, which applies to the entire union result set

@return the resulting SQL SELECT statement
"
      end

      operation 79222199 "computeProjection"
	private explicit_return_type "String"
	nparams 1
	  param inout name "projectionIn" explicit_type "String"
	multiplicity "[]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 7136567 "SQLiteReadOnlyDatabaseException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 15611319 // <generalisation>
	relation 15611319 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15611319 // <generalisation>
	  b parent class_ref 7131831 // SQLiteException
      end

      operation 79222327 "SQLiteReadOnlyDatabaseException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79222455 "SQLiteReadOnlyDatabaseException"
	public explicit_return_type ""
	nparams 1
	  param inout name "error" explicit_type "String"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 7136823 "SQLiteTableLockedException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 15612471 // <generalisation>
	relation 15612471 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15612471 // <generalisation>
	  b parent class_ref 7131831 // SQLiteException
      end

      operation 79227063 "SQLiteTableLockedException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79227191 "SQLiteTableLockedException"
	public explicit_return_type ""
	nparams 1
	  param inout name "error" explicit_type "String"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 7136951 "SqliteWrapper"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "@hide
"
      operation 79227703 "SqliteWrapper"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79227831 "isLowMemory"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param inout name "e" type class_ref 7131831 // SQLiteException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " FIXME: need to optimize this method."
      end

      operation 79227959 "checkSQLiteException"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "context" type class_ref 6923703 // Context
	  param inout name "e" type class_ref 7131831 // SQLiteException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79228087 "query"
	class_operation public return_type class_ref 6954295 // Cursor
	nparams 7
	  param inout name "context" type class_ref 6923703 // Context
	  param inout name "resolver" type class_ref 6924215 // ContentResolver
	  param inout name "uri" type class_ref 6927159 // Uri
	  param inout name "projection" explicit_type "String"
	multiplicity "[]"
	  param inout name "selection" explicit_type "String"
	  param inout name "selectionArgs" explicit_type "String"
	multiplicity "[]"
	  param inout name "sortOrder" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79228215 "requery"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param inout name "context" type class_ref 6923703 // Context
	  param inout name "cursor" type class_ref 6954295 // Cursor
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79228343 "update"
	class_operation public explicit_return_type "int"
	nparams 6
	  param inout name "context" type class_ref 6923703 // Context
	  param inout name "resolver" type class_ref 6924215 // ContentResolver
	  param inout name "uri" type class_ref 6927159 // Uri
	  param inout name "values" type class_ref 7016887 // ContentValues
	  param inout name "where" explicit_type "String"
	  param inout name "selectionArgs" explicit_type "String"
	multiplicity "[]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79228471 "delete"
	class_operation public explicit_return_type "int"
	nparams 5
	  param inout name "context" type class_ref 6923703 // Context
	  param inout name "resolver" type class_ref 6924215 // ContentResolver
	  param inout name "uri" type class_ref 6927159 // Uri
	  param inout name "where" explicit_type "String"
	  param inout name "selectionArgs" explicit_type "String"
	multiplicity "[]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79228599 "insert"
	class_operation public return_type class_ref 6927159 // Uri
	nparams 4
	  param inout name "context" type class_ref 6923703 // Context
	  param inout name "resolver" type class_ref 6924215 // ContentResolver
	  param inout name "uri" type class_ref 6927159 // Uri
	  param inout name "values" type class_ref 7016887 // ContentValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end
  end

  deploymentview 134583 "sqlite"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 2161335 "SQLiteCursorTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.test.AndroidTestCase;
import android.test.suitebuilder.annotation.LargeTest;
import java.io.File;
import java.util.HashSet;
import java.util.Set;
${definition}"
      associated_classes
	class_ref 5892663 // SQLiteCursorTest
      end
    end

    artifact 2802999 "SQLiteOpenHelper"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.content.Context;
import android.database.DatabaseErrorHandler;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.util.Log;
${definition}"
      associated_classes
	class_ref 7107895 // SQLiteOpenHelper
      end
      comment "Copyright (C) 2007 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2818103 "SQLiteClosable"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.Closeable;
${definition}"
      associated_classes
	class_ref 7130039 // SQLiteClosable
      end
      comment "Copyright (C) 2007 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2819511 "DatabaseObjectNotClosedException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 7131575 // DatabaseObjectNotClosedException
      end
      comment "Copyright (C) 2006 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2819639 "SQLiteException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.database.SQLException;
${definition}"
      associated_classes
	class_ref 7131831 // SQLiteException
      end
      comment "Copyright (C) 2006 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2819767 "SQLiteAbortException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 7131703 // SQLiteAbortException
      end
      comment "Copyright (C) 2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2819895 "SQLiteAccessPermException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 7131959 // SQLiteAccessPermException
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2820023 "SQLiteBindOrColumnIndexOutOfRangeException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 7132087 // SQLiteBindOrColumnIndexOutOfRangeException
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2820151 "SQLiteBlobTooBigException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 7132215 // SQLiteBlobTooBigException
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2820279 "SQLiteCantOpenDatabaseException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 7132343 // SQLiteCantOpenDatabaseException
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2820407 "SQLiteConnection"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import dalvik.system.BlockGuard;
import dalvik.system.CloseGuard;
import android.database.Cursor;
import android.database.CursorWindow;
import android.database.DatabaseUtils;
import android.database.sqlite.SQLiteDebug.DbStats;
import android.os.CancellationSignal;
import android.os.OperationCanceledException;
import android.os.ParcelFileDescriptor;
import android.os.SystemClock;
import android.os.Trace;
import android.util.Log;
import android.util.LruCache;
import android.util.Printer;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Map;
import java.util.regex.Pattern;
${definition}"
      associated_classes
	class_ref 7132471 // SQLiteConnection
      end
      comment "Copyright (C) 2011 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2820535 "SQLiteConnectionPool"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import dalvik.system.CloseGuard;
import android.database.sqlite.SQLiteDebug.DbStats;
import android.os.CancellationSignal;
import android.os.OperationCanceledException;
import android.os.SystemClock;
import android.util.Log;
import android.util.PrefixPrinter;
import android.util.Printer;
import java.io.Closeable;
import java.util.ArrayList;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.locks.LockSupport;
${definition}"
      associated_classes
	class_ref 7132599 // SQLiteConnectionPool
      end
      comment "Copyright (C) 2011 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2820663 "SQLiteConstraintException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 7134135 // SQLiteConstraintException
      end
      comment "Copyright (C) 2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2820791 "SQLiteCursor"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.database.AbstractWindowedCursor;
import android.database.CursorWindow;
import android.database.DatabaseUtils;
import android.os.StrictMode;
import android.util.Log;
import java.util.HashMap;
import java.util.Map;
${definition}"
      associated_classes
	class_ref 7134263 // SQLiteCursor
      end
      comment "Copyright (C) 2006 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2820919 "SQLiteCursorDriver"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
${definition}"
      associated_classes
	class_ref 7134519 // SQLiteCursorDriver
      end
      comment "Copyright (C) 2007 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2821047 "SQLiteCustomFunction"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 7133239 // SQLiteCustomFunction
      end
      comment "Copyright (C) 2011 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2821175 "SQLiteDatabase"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.annotation.NonNull;
import android.annotation.Nullable;
import android.content.ContentValues;
import android.database.Cursor;
import android.database.DatabaseErrorHandler;
import android.database.DatabaseUtils;
import android.database.DefaultDatabaseErrorHandler;
import android.database.SQLException;
import android.database.sqlite.SQLiteDebug.DbStats;
import android.os.CancellationSignal;
import android.os.Looper;
import android.os.OperationCanceledException;
import android.text.TextUtils;
import android.util.EventLog;
import android.util.Log;
import android.util.Pair;
import android.util.Printer;
import dalvik.system.CloseGuard;
import java.io.File;
import java.io.FileFilter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.WeakHashMap;
${definition}"
      associated_classes
	class_ref 6925239 // SQLiteDatabase
      end
      comment "Copyright (C) 2006 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2821303 "SQLiteDatabaseConfiguration"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.ArrayList;
import java.util.Locale;
import java.util.regex.Pattern;
${definition}"
      associated_classes
	class_ref 7132727 // SQLiteDatabaseConfiguration
      end
      comment "Copyright (C) 2011 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2821431 "SQLiteDatabaseCorruptException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 7135031 // SQLiteDatabaseCorruptException
      end
      comment "Copyright (C) 2006 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2821559 "SQLiteDatabaseLockedException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 7135159 // SQLiteDatabaseLockedException
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2821687 "SQLiteDatatypeMismatchException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 7135287 // SQLiteDatatypeMismatchException
      end
      comment "Copyright (C) 2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2821815 "SQLiteDebug"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.ArrayList;
import android.os.Build;
import android.os.SystemProperties;
import android.util.Log;
import android.util.Printer;
${definition}"
      associated_classes
	class_ref 7133495 // SQLiteDebug
      end
      comment "Copyright (C) 2007 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2821943 "SQLiteDirectCursorDriver"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.os.CancellationSignal;
${definition}"
      associated_classes
	class_ref 7135543 // SQLiteDirectCursorDriver
      end
      comment "Copyright (C) 2007 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2822071 "SQLiteDiskIOException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 7135671 // SQLiteDiskIOException
      end
      comment "Copyright (C) 2006 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2822199 "SQLiteDoneException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 7135799 // SQLiteDoneException
      end
      comment "Copyright (C) 2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2822327 "SQLiteFullException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 7135927 // SQLiteFullException
      end
      comment "Copyright (C) 2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2822455 "SQLiteGlobal"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.content.res.Resources;
import android.os.StatFs;
import android.os.SystemProperties;
${definition}"
      associated_classes
	class_ref 7136055 // SQLiteGlobal
      end
      comment "Copyright (C) 2011 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2822583 "SQLiteMisuseException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 7136183 // SQLiteMisuseException
      end
      comment "Copyright (C) 2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2822711 "SQLiteOutOfMemoryException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 7136311 // SQLiteOutOfMemoryException
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2822839 "SQLiteProgram"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.database.DatabaseUtils;
import android.os.CancellationSignal;
import java.util.Arrays;
${definition}"
      associated_classes
	class_ref 7130423 // SQLiteProgram
      end
      comment "Copyright (C) 2006 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2822967 "SQLiteQuery"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.database.CursorWindow;
import android.os.CancellationSignal;
import android.os.OperationCanceledException;
import android.util.Log;
${definition}"
      associated_classes
	class_ref 7134391 // SQLiteQuery
      end
      comment "Copyright (C) 2006 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2823095 "SQLiteQueryBuilder"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.database.Cursor;
import android.database.DatabaseUtils;
import android.os.CancellationSignal;
import android.os.OperationCanceledException;
import android.provider.BaseColumns;
import android.text.TextUtils;
import android.util.Log;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.regex.Pattern;
${definition}"
      associated_classes
	class_ref 7136439 // SQLiteQueryBuilder
      end
      comment "Copyright (C) 2006 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2823223 "SQLiteReadOnlyDatabaseException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 7136567 // SQLiteReadOnlyDatabaseException
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2823351 "SQLiteSession"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.database.CursorWindow;
import android.database.DatabaseUtils;
import android.os.CancellationSignal;
import android.os.OperationCanceledException;
import android.os.ParcelFileDescriptor;
${definition}"
      associated_classes
	class_ref 7134775 // SQLiteSession
      end
      comment "Copyright (C) 2011 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2823479 "SQLiteStatement"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.os.ParcelFileDescriptor;
${definition}"
      associated_classes
	class_ref 7130679 // SQLiteStatement
      end
      comment "Copyright (C) 2006 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2823607 "SQLiteStatementInfo"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 7133367 // SQLiteStatementInfo
      end
      comment "Copyright (C) 2011 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2823735 "SQLiteTableLockedException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 7136823 // SQLiteTableLockedException
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2823863 "SQLiteTransactionListener"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 7134903 // SQLiteTransactionListener
      end
      comment "Copyright (C) 2009 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2823991 "SqliteWrapper"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.content.ContentResolver;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteException;
import android.net.Uri;
import android.util.Log;
import android.widget.Toast;
${definition}"
      associated_classes
	class_ref 7136951 // SqliteWrapper
      end
      comment "Copyright (C) 2008 Esmertec AG.
Copyright (C) 2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end
  end
end
