format 213
"animation" // android::frameworks::base::core::java::android::animation
  revision 5
  modified_by 55 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "D:\\Workspace\\AndroidSourceCode\\nougat_src\\frameworks/base/core/java/android/animation/"
  java_package "android.animation"
  classview 135607 "animation"
    
    classdiagramsettings member_max_width 0 end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 196535 "PropertyValuesHolder"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class holds information about a property and the values that that property
should take on during an animation. PropertyValuesHolder objects can be used to create
animations with ValueAnimator or ObjectAnimator that operate on several different properties
in parallel.
"
      classrelation 15032759 // mProperty (<unidirectional association>)
	relation 15032759 --->
	  a role_name "mProperty" protected
	    comment "
@hide

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15032759 // mProperty (<unidirectional association>)
	  b parent class_ref 6950455 // Property
      end

      attribute 24013495 "mSetter"
	package explicit_type "Method"
	init_value " null"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The setter function, if needed. ObjectAnimator hands off this functionality to
PropertyValuesHolder, since it holds all of the per-property information. This
property is automatically
derived when the animation starts in setupSetterAndGetter() if using ObjectAnimator.

"
      end

      attribute 24013623 "mGetter"
	private explicit_type "Method"
	init_value " null"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The getter function, if needed. ObjectAnimator hands off this functionality to
PropertyValuesHolder, since it holds all of the per-property information. This
property is automatically
derived when the animation starts in setupSetterAndGetter() if using ObjectAnimator.
The getter is only derived and used if one of the values is null.

"
      end

      classrelation 15033015 // mKeyframes (<unidirectional association>)
	relation 15033015 --->
	  a role_name "mKeyframes" init_value " null" package
	    comment "
The set of keyframes (time/value pairs) that define this animation.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15033015 // mKeyframes (<unidirectional association>)
	  b parent class_ref 6969783 // Keyframes
      end

      classrelation 15033143 // sIntEvaluator (<unidirectional association>)
	relation 15033143 --->
	  a role_name "sIntEvaluator" init_value " new IntEvaluator()" class_relation const_relation private
	    comment " type evaluators for the primitive types handled by this implementation
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15033143 // sIntEvaluator (<unidirectional association>)
	  b parent class_ref 6967735 // TypeEvaluator
      end

      classrelation 15033271 // sFloatEvaluator (<unidirectional association>)
	relation 15033271 --->
	  a role_name "sFloatEvaluator" init_value " new FloatEvaluator()" class_relation const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15033271 // sFloatEvaluator (<unidirectional association>)
	  b parent class_ref 6967735 // TypeEvaluator
      end

      classrelation 15034167 // mEvaluator (<unidirectional association>)
	relation 15034167 --->
	  a role_name "mEvaluator" private
	    comment "
The type evaluator used to calculate the animated values. This evaluator is determined
automatically based on the type of the start/end objects passed into the constructor,
but the system only knows about the primitive types int and float. Any other
type will need to set the evaluator to a custom evaluator for that type.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15034167 // mEvaluator (<unidirectional association>)
	  b parent class_ref 6967735 // TypeEvaluator
      end

      classrelation 15034423 // mConverter (<unidirectional association>)
	relation 15034423 --->
	  a role_name "mConverter" private
	    comment "
Converts from the source Object type to the setter Object type.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15034423 // mConverter (<unidirectional association>)
	  b parent class_ref 6969015 // TypeConverter
      end

      operation 77422647 "PropertyValuesHolder"
	private explicit_return_type ""
	nparams 1
	  param inout name "propertyName" explicit_type "String"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Internal utility constructor, used by the factory methods to set the property name.
@param propertyName The name of the property for this holder.
"
      end

      operation 77422775 "PropertyValuesHolder"
	private explicit_return_type ""
	nparams 1
	  param inout name "property" type class_ref 6950455 // Property
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Internal utility constructor, used by the factory methods to set the property.
@param property The property for this holder.
"
      end

      operation 77422903 "ofInt"
	class_operation public return_type class_ref 196535 // PropertyValuesHolder
	nparams 2
	  param inout name "propertyName" explicit_type "String"
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder with a given property name and
set of int values.
@param propertyName The name of the property being animated.
@param values The values that the named property will animate between.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
"
      end

      operation 77423031 "ofInt"
	class_operation public return_type class_ref 196535 // PropertyValuesHolder
	nparams 2
	  param inout name "property" type class_ref 6950455 // Property
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?, Integer> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder with a given property and
set of int values.
@param property The property being animated. Should not be null.
@param values The values that the property will animate between.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
"
      end

      operation 77423159 "ofMultiInt"
	class_operation public return_type class_ref 196535 // PropertyValuesHolder
	nparams 2
	  param inout name "propertyName" explicit_type "String"
	  param inout name "values" explicit_type "int"
	multiplicity "[][]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[][] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder with a given property name and
set of <code>int[]</code> values. At least two <code>int[]</code> values must be supplied,
a start and end value. If more values are supplied, the values will be animated from the
start, through all intermediate values to the end value. When used with ObjectAnimator,
the elements of the array represent the parameters of the setter function.

@param propertyName The name of the property being animated. Can also be the
                    case-sensitive name of the entire setter method. Should not be null.
@param values The values that the property will animate between.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
@see IntArrayEvaluator#IntArrayEvaluator(int[])
@see ObjectAnimator#ofMultiInt(Object, String, TypeConverter, TypeEvaluator, Object[])
"
      end

      operation 77423287 "ofMultiInt"
	class_operation public return_type class_ref 196535 // PropertyValuesHolder
	nparams 2
	  param inout name "propertyName" explicit_type "String"
	  param inout name "path" type class_ref 5842743 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder with a given property name to use
as a multi-int setter. The values are animated along the path, with the first
parameter of the setter set to the x coordinate and the second set to the y coordinate.

@param propertyName The name of the property being animated. Can also be the
                    case-sensitive name of the entire setter method. Should not be null.
                    The setter must take exactly two <code>int</code> parameters.
@param path The Path along which the values should be animated.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
@see ObjectAnimator#ofPropertyValuesHolder(Object, PropertyValuesHolder...)
"
      end

      operation 77423415 "ofMultiInt"
	class_operation public return_type class_ref 196535 // PropertyValuesHolder
	nparams 4
	  param inout name "propertyName" explicit_type "String"
	  param inout name "converter" type class_ref 6969015 // TypeConverter
	  param inout name "evaluator" type class_ref 6967735 // TypeEvaluator
	  param inout name "" explicit_type "V...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V> ${type} ${name}${(}${t0} ${p0}, ${t1}<V, int[]> ${p1}, ${t2}<V> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SafeVarargs
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder with a given property and
set of Object values for use with ObjectAnimator multi-value setters. The Object
values are converted to <code>int[]</code> using the converter.

@param propertyName The property being animated or complete name of the setter.
                    Should not be null.
@param converter Used to convert the animated value to setter parameters.
@param evaluator A TypeEvaluator that will be called on each animation frame to
provide the necessary interpolation between the Object values to derive the animated
value.
@param values The values that the property will animate between.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
@see ObjectAnimator#ofMultiInt(Object, String, TypeConverter, TypeEvaluator, Object[])
@see ObjectAnimator#ofPropertyValuesHolder(Object, PropertyValuesHolder...)
"
      end

      operation 77423543 "ofMultiInt"
	class_operation public return_type class_ref 196535 // PropertyValuesHolder
	nparams 4
	  param inout name "propertyName" explicit_type "String"
	  param inout name "converter" type class_ref 6969015 // TypeConverter
	  param inout name "evaluator" type class_ref 6967735 // TypeEvaluator
	  param inout name "" explicit_type "Keyframe...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T, int[]> ${p1}, ${t2}<T> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder object with the specified property name or
setter name for use in a multi-int setter function using ObjectAnimator. The values can be
of any type, but the type should be consistent so that the supplied
{@link android.animation.TypeEvaluator} can be used to to evaluate the animated value. The
<code>converter</code> converts the values to parameters in the setter function.

<p>At least two values must be supplied, a start and an end value.</p>

@param propertyName The name of the property to associate with the set of values. This
                    may also be the complete name of a setter function.
@param converter    Converts <code>values</code> into int parameters for the setter.
                    Can be null if the Keyframes have int[] values.
@param evaluator    Used to interpolate between values.
@param values       The values at specific fractional times to evaluate between
@return A PropertyValuesHolder for a multi-int parameter setter.
"
      end

      operation 77423671 "ofFloat"
	class_operation public return_type class_ref 196535 // PropertyValuesHolder
	nparams 2
	  param inout name "propertyName" explicit_type "String"
	  param inout name "" explicit_type "float...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder with a given property name and
set of float values.
@param propertyName The name of the property being animated.
@param values The values that the named property will animate between.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
"
      end

      operation 77423799 "ofFloat"
	class_operation public return_type class_ref 196535 // PropertyValuesHolder
	nparams 2
	  param inout name "property" type class_ref 6950455 // Property
	  param inout name "" explicit_type "float...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?, Float> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder with a given property and
set of float values.
@param property The property being animated. Should not be null.
@param values The values that the property will animate between.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
"
      end

      operation 77423927 "ofMultiFloat"
	class_operation public return_type class_ref 196535 // PropertyValuesHolder
	nparams 2
	  param inout name "propertyName" explicit_type "String"
	  param inout name "values" explicit_type "float"
	multiplicity "[][]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[][] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder with a given property name and
set of <code>float[]</code> values. At least two <code>float[]</code> values must be supplied,
a start and end value. If more values are supplied, the values will be animated from the
start, through all intermediate values to the end value. When used with ObjectAnimator,
the elements of the array represent the parameters of the setter function.

@param propertyName The name of the property being animated. Can also be the
                    case-sensitive name of the entire setter method. Should not be null.
@param values The values that the property will animate between.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
@see FloatArrayEvaluator#FloatArrayEvaluator(float[])
@see ObjectAnimator#ofMultiFloat(Object, String, TypeConverter, TypeEvaluator, Object[])
"
      end

      operation 77424055 "ofMultiFloat"
	class_operation public return_type class_ref 196535 // PropertyValuesHolder
	nparams 2
	  param inout name "propertyName" explicit_type "String"
	  param inout name "path" type class_ref 5842743 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder with a given property name to use
as a multi-float setter. The values are animated along the path, with the first
parameter of the setter set to the x coordinate and the second set to the y coordinate.

@param propertyName The name of the property being animated. Can also be the
                    case-sensitive name of the entire setter method. Should not be null.
                    The setter must take exactly two <code>float</code> parameters.
@param path The Path along which the values should be animated.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
@see ObjectAnimator#ofPropertyValuesHolder(Object, PropertyValuesHolder...)
"
      end

      operation 77424183 "ofMultiFloat"
	class_operation public return_type class_ref 196535 // PropertyValuesHolder
	nparams 4
	  param inout name "propertyName" explicit_type "String"
	  param inout name "converter" type class_ref 6969015 // TypeConverter
	  param inout name "evaluator" type class_ref 6967735 // TypeEvaluator
	  param inout name "" explicit_type "V...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V> ${type} ${name}${(}${t0} ${p0}, ${t1}<V, float[]> ${p1}, ${t2}<V> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SafeVarargs
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder with a given property and
set of Object values for use with ObjectAnimator multi-value setters. The Object
values are converted to <code>float[]</code> using the converter.

@param propertyName The property being animated or complete name of the setter.
                    Should not be null.
@param converter Used to convert the animated value to setter parameters.
@param evaluator A TypeEvaluator that will be called on each animation frame to
provide the necessary interpolation between the Object values to derive the animated
value.
@param values The values that the property will animate between.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
@see ObjectAnimator#ofMultiFloat(Object, String, TypeConverter, TypeEvaluator, Object[])
"
      end

      operation 77424311 "ofMultiFloat"
	class_operation public return_type class_ref 196535 // PropertyValuesHolder
	nparams 4
	  param inout name "propertyName" explicit_type "String"
	  param inout name "converter" type class_ref 6969015 // TypeConverter
	  param inout name "evaluator" type class_ref 6967735 // TypeEvaluator
	  param inout name "" explicit_type "Keyframe...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T, float[]> ${p1}, ${t2}<T> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder object with the specified property name or
setter name for use in a multi-float setter function using ObjectAnimator. The values can be
of any type, but the type should be consistent so that the supplied
{@link android.animation.TypeEvaluator} can be used to to evaluate the animated value. The
<code>converter</code> converts the values to parameters in the setter function.

<p>At least two values must be supplied, a start and an end value.</p>

@param propertyName The name of the property to associate with the set of values. This
                    may also be the complete name of a setter function.
@param converter    Converts <code>values</code> into float parameters for the setter.
                    Can be null if the Keyframes have float[] values.
@param evaluator    Used to interpolate between values.
@param values       The values at specific fractional times to evaluate between
@return A PropertyValuesHolder for a multi-float parameter setter.
"
      end

      operation 77424439 "ofObject"
	class_operation public return_type class_ref 196535 // PropertyValuesHolder
	nparams 3
	  param inout name "propertyName" explicit_type "String"
	  param inout name "evaluator" type class_ref 6967735 // TypeEvaluator
	  param inout name "" explicit_type "Object...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder with a given property name and
set of Object values. This variant also takes a TypeEvaluator because the system
cannot automatically interpolate between objects of unknown type.

<p><strong>Note:</strong> The Object values are stored as references to the original
objects, which means that changes to those objects after this method is called will
affect the values on the PropertyValuesHolder. If the objects will be mutated externally
after this method is called, callers should pass a copy of those objects instead.

@param propertyName The name of the property being animated.
@param evaluator A TypeEvaluator that will be called on each animation frame to
provide the necessary interpolation between the Object values to derive the animated
value.
@param values The values that the named property will animate between.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
"
      end

      operation 77424567 "ofObject"
	class_operation public return_type class_ref 196535 // PropertyValuesHolder
	nparams 3
	  param inout name "propertyName" explicit_type "String"
	  param inout name "converter" type class_ref 6969015 // TypeConverter
	  param inout name "path" type class_ref 5842743 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<PointF, ?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder with a given property name and
a Path along which the values should be animated. This variant supports a
<code>TypeConverter</code> to convert from <code>PointF</code> to the target
type.

<p>The PointF passed to <code>converter</code> or <code>property</code>, if
<code>converter</code> is <code>null</code>, is reused on each animation frame and should
not be stored by the setter or TypeConverter.</p>

@param propertyName The name of the property being animated.
@param converter Converts a PointF to the type associated with the setter. May be
                 null if conversion is unnecessary.
@param path The Path along which the values should be animated.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
"
      end

      operation 77424695 "ofObject"
	class_operation public return_type class_ref 196535 // PropertyValuesHolder
	nparams 3
	  param inout name "property" type class_ref 6950455 // Property
	  param inout name "evaluator" type class_ref 6967735 // TypeEvaluator
	  param inout name "" explicit_type "V...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V> ${type} ${name}${(}${t0} ${p0}, ${t1}<V> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SafeVarargs
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder with a given property and
set of Object values. This variant also takes a TypeEvaluator because the system
cannot automatically interpolate between objects of unknown type.

<p><strong>Note:</strong> The Object values are stored as references to the original
objects, which means that changes to those objects after this method is called will
affect the values on the PropertyValuesHolder. If the objects will be mutated externally
after this method is called, callers should pass a copy of those objects instead.

@param property The property being animated. Should not be null.
@param evaluator A TypeEvaluator that will be called on each animation frame to
provide the necessary interpolation between the Object values to derive the animated
value.
@param values The values that the property will animate between.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
"
      end

      operation 77424823 "ofObject"
	class_operation public return_type class_ref 196535 // PropertyValuesHolder
	nparams 4
	  param inout name "property" type class_ref 6950455 // Property
	  param inout name "converter" type class_ref 6969015 // TypeConverter
	  param inout name "evaluator" type class_ref 6967735 // TypeEvaluator
	  param inout name "" explicit_type "T...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T, V> ${type} ${name}${(}${t0}<?, V> ${p0}, ${t1}<T, V> ${p1}, ${t2}<T> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SafeVarargs
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder with a given property and
set of Object values. This variant also takes a TypeEvaluator because the system
cannot automatically interpolate between objects of unknown type. This variant also
takes a <code>TypeConverter</code> to convert from animated values to the type
of the property. If only one value is supplied, the <code>TypeConverter</code>
must be a {@link android.animation.BidirectionalTypeConverter} to retrieve the current
value.

<p><strong>Note:</strong> The Object values are stored as references to the original
objects, which means that changes to those objects after this method is called will
affect the values on the PropertyValuesHolder. If the objects will be mutated externally
after this method is called, callers should pass a copy of those objects instead.

@param property The property being animated. Should not be null.
@param converter Converts the animated object to the Property type.
@param evaluator A TypeEvaluator that will be called on each animation frame to
provide the necessary interpolation between the Object values to derive the animated
value.
@param values The values that the property will animate between.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
@see #setConverter(TypeConverter)
@see TypeConverter
"
      end

      operation 77424951 "ofObject"
	class_operation public return_type class_ref 196535 // PropertyValuesHolder
	nparams 3
	  param inout name "property" type class_ref 6950455 // Property
	  param inout name "converter" type class_ref 6969015 // TypeConverter
	  param inout name "path" type class_ref 5842743 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V> ${type} ${name}${(}${t0}<?, V> ${p0}, ${t1}<PointF, V> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder with a given property and
a Path along which the values should be animated. This variant supports a
<code>TypeConverter</code> to convert from <code>PointF</code> to the target
type.

<p>The PointF passed to <code>converter</code> or <code>property</code>, if
<code>converter</code> is <code>null</code>, is reused on each animation frame and should
not be stored by the setter or TypeConverter.</p>

@param property The property being animated. Should not be null.
@param converter Converts a PointF to the type associated with the setter. May be
                 null if conversion is unnecessary.
@param path The Path along which the values should be animated.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
"
      end

      operation 77425079 "ofKeyframe"
	class_operation public return_type class_ref 196535 // PropertyValuesHolder
	nparams 2
	  param inout name "propertyName" explicit_type "String"
	  param inout name "" explicit_type "Keyframe...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder object with the specified property name and set
of values. These values can be of any type, but the type should be consistent so that
an appropriate {@link android.animation.TypeEvaluator} can be found that matches
the common type.
<p>If there is only one value, it is assumed to be the end value of an animation,
and an initial value will be derived, if possible, by calling a getter function
on the object. Also, if any value is null, the value will be filled in when the animation
starts in the same way. This mechanism of automatically getting null values only works
if the PropertyValuesHolder object is used in conjunction
{@link ObjectAnimator}, and with a getter function
derived automatically from <code>propertyName</code>, since otherwise PropertyValuesHolder has
no way of determining what the value should be.
@param propertyName The name of the property associated with this set of values. This
can be the actual property name to be used when using a ObjectAnimator object, or
just a name used to get animated values, such as if this object is used with an
ValueAnimator object.
@param values The set of values to animate between.
"
      end

      operation 77425207 "ofKeyframe"
	class_operation public return_type class_ref 196535 // PropertyValuesHolder
	nparams 2
	  param inout name "property" type class_ref 6950455 // Property
	  param inout name "" explicit_type "Keyframe...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder object with the specified property and set
of values. These values can be of any type, but the type should be consistent so that
an appropriate {@link android.animation.TypeEvaluator} can be found that matches
the common type.
<p>If there is only one value, it is assumed to be the end value of an animation,
and an initial value will be derived, if possible, by calling the property's
{@link android.util.Property#get(Object)} function.
Also, if any value is null, the value will be filled in when the animation
starts in the same way. This mechanism of automatically getting null values only works
if the PropertyValuesHolder object is used in conjunction with
{@link ObjectAnimator}, since otherwise PropertyValuesHolder has
no way of determining what the value should be.
@param property The property associated with this set of values. Should not be null.
@param values The set of values to animate between.
"
      end

      operation 77425335 "ofKeyframes"
	class_operation package return_type class_ref 196535 // PropertyValuesHolder
	nparams 2
	  param inout name "propertyName" explicit_type "String"
	  param inout name "keyframes" type class_ref 6969783 // Keyframes
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77425463 "ofKeyframes"
	class_operation package return_type class_ref 196535 // PropertyValuesHolder
	nparams 2
	  param inout name "property" type class_ref 6950455 // Property
	  param inout name "keyframes" type class_ref 6969783 // Keyframes
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77425591 "setIntValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the animated values for this object to this set of ints.
If there is only one value, it is assumed to be the end value of an animation,
and an initial value will be derived, if possible, by calling a getter function
on the object. Also, if any value is null, the value will be filled in when the animation
starts in the same way. This mechanism of automatically getting null values only works
if the PropertyValuesHolder object is used in conjunction
{@link ObjectAnimator}, and with a getter function
derived automatically from <code>propertyName</code>, since otherwise PropertyValuesHolder has
no way of determining what the value should be.

@param values One or more values that the animation will animate between.
"
      end

      operation 77425719 "setFloatValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "float...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the animated values for this object to this set of floats.
If there is only one value, it is assumed to be the end value of an animation,
and an initial value will be derived, if possible, by calling a getter function
on the object. Also, if any value is null, the value will be filled in when the animation
starts in the same way. This mechanism of automatically getting null values only works
if the PropertyValuesHolder object is used in conjunction
{@link ObjectAnimator}, and with a getter function
derived automatically from <code>propertyName</code>, since otherwise PropertyValuesHolder has
no way of determining what the value should be.

@param values One or more values that the animation will animate between.
"
      end

      operation 77425847 "setKeyframes"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "Keyframe...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the animated values for this object to this set of Keyframes.

@param values One or more values that the animation will animate between.
"
      end

      operation 77425975 "setObjectValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "Object...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the animated values for this object to this set of Objects.
If there is only one value, it is assumed to be the end value of an animation,
and an initial value will be derived, if possible, by calling a getter function
on the object. Also, if any value is null, the value will be filled in when the animation
starts in the same way. This mechanism of automatically getting null values only works
if the PropertyValuesHolder object is used in conjunction
{@link ObjectAnimator}, and with a getter function
derived automatically from <code>propertyName</code>, since otherwise PropertyValuesHolder has
no way of determining what the value should be.

<p><strong>Note:</strong> The Object values are stored as references to the original
objects, which means that changes to those objects after this method is called will
affect the values on the PropertyValuesHolder. If the objects will be mutated externally
after this method is called, callers should pass a copy of those objects instead.

@param values One or more values that the animation will animate between.
"
      end

      operation 77426103 "setConverter"
	public explicit_return_type "void"
	nparams 1
	  param inout name "converter" type class_ref 6969015 // TypeConverter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the converter to convert from the values type to the setter's parameter type.
If only one value is supplied, <var>converter</var> must be a
{@link android.animation.BidirectionalTypeConverter}.
@param converter The converter to use to convert values.
"
      end

      operation 77426231 "getPropertyFunction"
	private explicit_return_type "Method"
	nparams 3
	  param inout name "targetClass" explicit_type "Class"
	  param inout name "prefix" explicit_type "String"
	  param inout name "valueType" explicit_type "Class"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine the setter or getter function using the JavaBeans convention of setFoo or
getFoo for a property named 'foo'. This function figures out what the name of the
function should be and uses reflection to find the Method with that name on the
target object.

@param targetClass The class to search for the method
@param prefix \"set\" or \"get\", depending on whether we need a setter or getter.
@param valueType The type of the parameter (in the case of a setter). This type
is derived from the values set on this PropertyValuesHolder. This type is used as
a first guess at the parameter type, but we check for methods with several different
types to avoid problems with slight mis-matches between supplied values and actual
value types used on the setter.
@return Method the method associated with mPropertyName.
"
      end

      operation 77426359 "setupSetterOrGetter"
	private explicit_return_type "Method"
	nparams 4
	  param inout name "targetClass" explicit_type "Class"
	  param inout name "propertyMapMap" explicit_type "HashMap<Class, HashMap<String, Method>>"
	  param inout name "prefix" explicit_type "String"
	  param inout name "valueType" explicit_type "Class"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the setter or getter requested. This utility function checks whether the
requested method exists in the propertyMapMap cache. If not, it calls another
utility function to request the Method from the targetClass directly.
@param targetClass The Class on which the requested method should exist.
@param propertyMapMap The cache of setters/getters derived so far.
@param prefix \"set\" or \"get\", for the setter or getter.
@param valueType The type of parameter passed into the method (null for getter).
@return Method the method associated with mPropertyName.
"
      end

      operation 77426487 "setupSetter"
	package explicit_return_type "void"
	nparams 1
	  param inout name "targetClass" explicit_type "Class"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function to get the setter from targetClass
@param targetClass The Class on which the requested method should exist.
"
      end

      operation 77426615 "setupGetter"
	private explicit_return_type "void"
	nparams 1
	  param inout name "targetClass" explicit_type "Class"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function to get the getter from targetClass
"
      end

      operation 77426743 "setupSetterAndGetter"
	package explicit_return_type "void"
	nparams 1
	  param inout name "target" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Internal function (called from ObjectAnimator) to set up the setter and getter
prior to running the animation. If the setter has not been manually set for this
object, it will be derived automatically given the property name, target object, and
types of values supplied. If no getter has been set, it will be supplied iff any of the
supplied values was null. If there is a null value, then the getter (supplied or derived)
will be called to set those null values to the current value of the property
on the target object.
@param target The object on which the setter (and possibly getter) exist.
"
      end

      operation 77426871 "convertBack"
	private explicit_return_type "Object"
	nparams 1
	  param inout name "value" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77426999 "setupValue"
	private explicit_return_type "void"
	nparams 2
	  param inout name "target" explicit_type "Object"
	  param inout name "kf" type class_ref 6968119 // Keyframe
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function to set the value stored in a particular Keyframe. The value used is
whatever the value is for the property name specified in the keyframe on the target object.

@param target The target object from which the current value should be extracted.
@param kf The keyframe which holds the property name and value.
"
      end

      operation 77427127 "setupStartValue"
	package explicit_return_type "void"
	nparams 1
	  param inout name "target" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This function is called by ObjectAnimator when setting the start values for an animation.
The start values are set according to the current values in the target object. The
property whose value is extracted is whatever is specified by the propertyName of this
PropertyValuesHolder object.

@param target The object which holds the start values that should be set.
"
      end

      operation 77427255 "setupEndValue"
	package explicit_return_type "void"
	nparams 1
	  param inout name "target" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This function is called by ObjectAnimator when setting the end values for an animation.
The end values are set according to the current values in the target object. The
property whose value is extracted is whatever is specified by the propertyName of this
PropertyValuesHolder object.

@param target The object which holds the start values that should be set.
"
      end

      operation 77427383 "clone"
	public return_type class_ref 196535 // PropertyValuesHolder
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77427511 "setAnimatedValue"
	package explicit_return_type "void"
	nparams 1
	  param inout name "target" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Internal function to set the value on the target object, using the setter set up
earlier on this PropertyValuesHolder object. This function is called by ObjectAnimator
to handle turning the value calculated by ValueAnimator into a value set on the object
according to the name of the property.
@param target The target object on which the value is set
"
      end

      operation 77427639 "init"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Internal function, called by ValueAnimator, to set up the TypeEvaluator that will be used
to calculate animated values.
"
      end

      operation 77427767 "setEvaluator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "evaluator" type class_ref 6967735 // TypeEvaluator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The TypeEvaluator will be automatically determined based on the type of values
supplied to PropertyValuesHolder. The evaluator can be manually set, however, if so
desired. This may be important in cases where either the type of the values supplied
do not match the way that they should be interpolated between, or if the values
are of a custom type or one not currently understood by the animation system. Currently,
only values of type float and int (and their Object equivalents: Float
and Integer) are  correctly interpolated; all other types require setting a TypeEvaluator.
@param evaluator
"
      end

      operation 77427895 "calculateValue"
	package explicit_return_type "void"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Function used to calculate the value according to the evaluator set up for
this PropertyValuesHolder object. This function is called by ValueAnimator.animateValue().

@param fraction The elapsed, interpolated fraction of the animation.
"
      end

      operation 77428023 "setPropertyName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "propertyName" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the name of the property that will be animated. This name is used to derive
a setter function that will be called to set animated values.
For example, a property name of <code>foo</code> will result
in a call to the function <code>setFoo()</code> on the target object. If either
<code>valueFrom</code> or <code>valueTo</code> is null, then a getter function will
also be derived and called.

<p>Note that the setter function derived from this property name
must take the same parameter type as the
<code>valueFrom</code> and <code>valueTo</code> properties, otherwise the call to
the setter function will fail.</p>

@param propertyName The name of the property being animated.
"
      end

      operation 77428151 "setProperty"
	public explicit_return_type "void"
	nparams 1
	  param inout name "property" type class_ref 6950455 // Property
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the property that will be animated.

<p>Note that if this PropertyValuesHolder object is used with ObjectAnimator, the property
must exist on the target object specified in that ObjectAnimator.</p>

@param property The property being animated.
"
      end

      operation 77428279 "getPropertyName"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the name of the property that will be animated. This name will be used to derive
a setter function that will be called to set animated values.
For example, a property name of <code>foo</code> will result
in a call to the function <code>setFoo()</code> on the target object. If either
<code>valueFrom</code> or <code>valueTo</code> is null, then a getter function will
also be derived and called.
"
      end

      operation 77428407 "getAnimatedValue"
	package explicit_return_type "Object"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Internal function, called by ValueAnimator and ObjectAnimator, to retrieve the value
most recently calculated in calculateValue().
@return
"
      end

      operation 77428535 "getPropertyValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "values" type class_ref 6973879 // PropertyValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "PropertyValuesHolder is Animators use to hold internal animation related data.
Therefore, in order to replicate the animation behavior, we need to get data out of
PropertyValuesHolder.
@hide
"
      end

      class 6973879 "PropertyValues"
	visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	class 6975031 "DataSource"
	  visibility public stereotype "interface"
	  cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	  java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  operation 77433271 "getValueAtFraction"
	    public explicit_return_type "Object"
	    nparams 1
	      param in name "fraction" explicit_type "float"
	    cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	    cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	    java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end
	end

	classrelation 15036855 // dataSource (<unidirectional association>)
	  relation 15036855 --->
	    a role_name "dataSource" init_value " null" public
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 15036855 // dataSource (<unidirectional association>)
	    b parent class_ref 6975031 // DataSource
	end

	operation 77433399 "toString"
	  public explicit_return_type "String"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 77428663 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77428791 "getMethodName"
	class_operation package explicit_return_type "String"
	nparams 2
	  param inout name "prefix" explicit_type "String"
	  param inout name "propertyName" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility method to derive a setter/getter method name from a property name, where the
prefix is typically \"set\" or \"get\" and the first letter of the property name is
capitalized.

@param prefix The precursor to the method name, before the property name begins, typically
\"set\" or \"get\".
@param propertyName The name of the property that represents the bulk of the method name
after the prefix. The first letter of this word will be capitalized in the resulting
method name.
@return String the property name converted to a method name according to the conventions
specified above.
"
      end

      class 6974007 "IntPropertyValuesHolder"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 15034551 // <generalisation>
	  relation 15034551 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 15034551 // <generalisation>
	    b parent class_ref 196535 // PropertyValuesHolder
	end

	attribute 24013751 "mJniSetter"
	  package explicit_type "long"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 15034807 // mIntProperty (<unidirectional association>)
	  relation 15034807 --->
	    a role_name "mIntProperty" private
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 15034807 // mIntProperty (<unidirectional association>)
	    b parent class_ref 6974135 // IntProperty
	end

	classrelation 15034935 // mIntKeyframes (<unidirectional association>)
	  relation 15034935 --->
	    a role_name "mIntKeyframes" package
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 15034935 // mIntKeyframes (<unidirectional association>)
	    b parent class_ref 6969911 // IntKeyframes
	end

	attribute 24013879 "mIntAnimatedValue"
	  package explicit_type "int"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 77428919 "IntPropertyValuesHolder"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "propertyName" explicit_type "String"
	    param inout name "keyframes" type class_ref 6969911 // IntKeyframes
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77429047 "IntPropertyValuesHolder"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "property" type class_ref 6950455 // Property
	    param inout name "keyframes" type class_ref 6969911 // IntKeyframes
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77429175 "IntPropertyValuesHolder"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "propertyName" explicit_type "String"
	    param inout name "" explicit_type "int...values"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77429303 "IntPropertyValuesHolder"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "property" type class_ref 6950455 // Property
	    param inout name "" explicit_type "int...values"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77429431 "setIntValues"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "" explicit_type "int...values"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 77429559 "calculateValue"
	  package explicit_return_type "void"
	  nparams 1
	    param in name "fraction" explicit_type "float"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 77429687 "getAnimatedValue"
	  package explicit_return_type "Object"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 77429815 "clone"
	  public return_type class_ref 6974007 // IntPropertyValuesHolder
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 77429943 "setAnimatedValue"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "target" explicit_type "Object"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Internal function to set the value on the target object, using the setter set up
earlier on this PropertyValuesHolder object. This function is called by ObjectAnimator
to handle turning the value calculated by ValueAnimator into a value set on the object
according to the name of the property.
@param target The target object on which the value is set
"
	end

	operation 77430071 "setupSetter"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "targetClass" explicit_type "Class"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 6974263 "FloatPropertyValuesHolder"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 15035063 // <generalisation>
	  relation 15035063 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 15035063 // <generalisation>
	    b parent class_ref 196535 // PropertyValuesHolder
	end

	attribute 24014007 "mJniSetter"
	  package explicit_type "long"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 15035319 // mFloatProperty (<unidirectional association>)
	  relation 15035319 --->
	    a role_name "mFloatProperty" private
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 15035319 // mFloatProperty (<unidirectional association>)
	    b parent class_ref 6974391 // FloatProperty
	end

	classrelation 15035447 // mFloatKeyframes (<unidirectional association>)
	  relation 15035447 --->
	    a role_name "mFloatKeyframes" package
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 15035447 // mFloatKeyframes (<unidirectional association>)
	    b parent class_ref 6970039 // FloatKeyframes
	end

	attribute 24014135 "mFloatAnimatedValue"
	  package explicit_type "float"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 77430199 "FloatPropertyValuesHolder"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "propertyName" explicit_type "String"
	    param inout name "keyframes" type class_ref 6970039 // FloatKeyframes
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77430327 "FloatPropertyValuesHolder"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "property" type class_ref 6950455 // Property
	    param inout name "keyframes" type class_ref 6970039 // FloatKeyframes
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77430455 "FloatPropertyValuesHolder"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "propertyName" explicit_type "String"
	    param inout name "" explicit_type "float...values"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77430583 "FloatPropertyValuesHolder"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "property" type class_ref 6950455 // Property
	    param inout name "" explicit_type "float...values"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77430711 "setFloatValues"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "" explicit_type "float...values"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 77430839 "calculateValue"
	  package explicit_return_type "void"
	  nparams 1
	    param in name "fraction" explicit_type "float"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 77430967 "getAnimatedValue"
	  package explicit_return_type "Object"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 77431095 "clone"
	  public return_type class_ref 6974263 // FloatPropertyValuesHolder
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 77431223 "setAnimatedValue"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "target" explicit_type "Object"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Internal function to set the value on the target object, using the setter set up
earlier on this PropertyValuesHolder object. This function is called by ObjectAnimator
to handle turning the value calculated by ValueAnimator into a value set on the object
according to the name of the property.
@param target The target object on which the value is set
"
	end

	operation 77431351 "setupSetter"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "targetClass" explicit_type "Class"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 6974519 "MultiFloatValuesHolder"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 15035575 // <generalisation>
	  relation 15035575 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 15035575 // <generalisation>
	    b parent class_ref 196535 // PropertyValuesHolder
	end

	attribute 24014263 "mJniSetter"
	  private explicit_type "long"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 77431479 "MultiFloatValuesHolder"
	  public explicit_return_type ""
	  nparams 4
	    param inout name "propertyName" explicit_type "String"
	    param inout name "converter" type class_ref 6969015 // TypeConverter
	    param inout name "evaluator" type class_ref 6967735 // TypeEvaluator
	    param inout name "" explicit_type "Object...values"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77431607 "MultiFloatValuesHolder"
	  public explicit_return_type ""
	  nparams 4
	    param inout name "propertyName" explicit_type "String"
	    param inout name "converter" type class_ref 6969015 // TypeConverter
	    param inout name "evaluator" type class_ref 6967735 // TypeEvaluator
	    param inout name "keyframes" type class_ref 6969783 // Keyframes
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77431735 "setAnimatedValue"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "target" explicit_type "Object"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Internal function to set the value on the target object, using the setter set up
earlier on this PropertyValuesHolder object. This function is called by ObjectAnimator
to handle turning the value calculated by ValueAnimator into a value set on the object
according to the name of the property.

@param target The target object on which the value is set
"
	end

	operation 77431863 "setupSetterAndGetter"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "target" explicit_type "Object"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Internal function (called from ObjectAnimator) to set up the setter and getter
prior to running the animation. No getter can be used for multiple parameters.

@param target The object on which the setter exists.
"
	end

	operation 77431991 "setupSetter"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "targetClass" explicit_type "Class"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 6974647 "MultiIntValuesHolder"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 15035831 // <generalisation>
	  relation 15035831 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 15035831 // <generalisation>
	    b parent class_ref 196535 // PropertyValuesHolder
	end

	attribute 24014391 "mJniSetter"
	  private explicit_type "long"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 77432119 "MultiIntValuesHolder"
	  public explicit_return_type ""
	  nparams 4
	    param inout name "propertyName" explicit_type "String"
	    param inout name "converter" type class_ref 6969015 // TypeConverter
	    param inout name "evaluator" type class_ref 6967735 // TypeEvaluator
	    param inout name "" explicit_type "Object...values"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77432247 "MultiIntValuesHolder"
	  public explicit_return_type ""
	  nparams 4
	    param inout name "propertyName" explicit_type "String"
	    param inout name "converter" type class_ref 6969015 // TypeConverter
	    param inout name "evaluator" type class_ref 6967735 // TypeEvaluator
	    param inout name "keyframes" type class_ref 6969783 // Keyframes
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77432375 "setAnimatedValue"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "target" explicit_type "Object"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Internal function to set the value on the target object, using the setter set up
earlier on this PropertyValuesHolder object. This function is called by ObjectAnimator
to handle turning the value calculated by ValueAnimator into a value set on the object
according to the name of the property.

@param target The target object on which the value is set
"
	end

	operation 77432503 "setupSetterAndGetter"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "target" explicit_type "Object"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Internal function (called from ObjectAnimator) to set up the setter and getter
prior to running the animation. No getter can be used for multiple parameters.

@param target The object on which the setter exists.
"
	end

	operation 77432631 "setupSetter"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "targetClass" explicit_type "Class"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 6974775 "PointFToFloatArray"
	visibility private 
	nactuals 2
	actual class class_ref 6969015 // TypeConverter
	  rank 0 explicit_value ""
	actual class class_ref 6969015 // TypeConverter
	  rank 1 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 15036087 // <realization>
	  relation 15036087 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 15036087 // <realization>
	    b parent class_ref 6969015 // TypeConverter
	end

	attribute 24014519 "mCoordinates"
	  private explicit_type "float"
	  multiplicity "[]"
	  init_value " new float[2]"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 77432759 "PointFToFloatArray"
	  public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77432887 "convert"
	  public explicit_return_type "float"
	  nparams 1
	    param inout name "value" type class_ref 6018615 // PointF
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 6974903 "PointFToIntArray"
	visibility private 
	nactuals 2
	actual class class_ref 6969015 // TypeConverter
	  rank 0 explicit_value ""
	actual class class_ref 6969015 // TypeConverter
	  rank 1 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 15036215 // <realization>
	  relation 15036215 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 15036215 // <realization>
	    b parent class_ref 6969015 // TypeConverter
	end

	attribute 24014647 "mCoordinates"
	  private explicit_type "int"
	  multiplicity "[]"
	  init_value " new int[2]"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 77433015 "PointFToIntArray"
	  public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77433143 "convert"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "value" type class_ref 6018615 // PointF
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      operation 77433527 "nGetIntMethod"
	class_operation private explicit_return_type "long"
	nparams 2
	  param inout name "targetClass" explicit_type "Class"
	  param inout name "methodName" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
      end

      operation 77433655 "nGetFloatMethod"
	class_operation private explicit_return_type "long"
	nparams 2
	  param inout name "targetClass" explicit_type "Class"
	  param inout name "methodName" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
      end

      operation 77433783 "nGetMultipleIntMethod"
	class_operation private explicit_return_type "long"
	nparams 3
	  param inout name "targetClass" explicit_type "Class"
	  param inout name "methodName" explicit_type "String"
	  param in name "numParams" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
s"
	
	
	
      end

      operation 77433911 "nGetMultipleFloatMethod"
	class_operation private explicit_return_type "long"
	nparams 3
	  param inout name "targetClass" explicit_type "Class"
	  param inout name "methodName" explicit_type "String"
	  param in name "numParams" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
s"
	
	
	
      end

      operation 77434039 "nCallIntMethod"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "target" explicit_type "Object"
	  param in name "methodID" explicit_type "long"
	  param in name "arg" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
s"
	
	
	
      end

      operation 77434167 "nCallFloatMethod"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "target" explicit_type "Object"
	  param in name "methodID" explicit_type "long"
	  param in name "arg" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
s"
	
	
	
      end

      operation 77434295 "nCallTwoIntMethod"
	class_operation private explicit_return_type "void"
	nparams 4
	  param inout name "target" explicit_type "Object"
	  param in name "methodID" explicit_type "long"
	  param in name "arg1" explicit_type "int"
	  param in name "arg2" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws};
s"
	
	
	
      end

      operation 77434423 "nCallFourIntMethod"
	class_operation private explicit_return_type "void"
	nparams 6
	  param inout name "target" explicit_type "Object"
	  param in name "methodID" explicit_type "long"
	  param in name "arg1" explicit_type "int"
	  param in name "arg2" explicit_type "int"
	  param in name "arg3" explicit_type "int"
	  param in name "arg4" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws};
s"
	
	
	
      end

      operation 77434551 "nCallMultipleIntMethod"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "target" explicit_type "Object"
	  param in name "methodID" explicit_type "long"
	  param inout name "args" explicit_type "int"
	multiplicity "[]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws};
s"
	
	
	
      end

      operation 77434679 "nCallTwoFloatMethod"
	class_operation private explicit_return_type "void"
	nparams 4
	  param inout name "target" explicit_type "Object"
	  param in name "methodID" explicit_type "long"
	  param in name "arg1" explicit_type "float"
	  param in name "arg2" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws};
s"
	
	
	
      end

      operation 77434807 "nCallFourFloatMethod"
	class_operation private explicit_return_type "void"
	nparams 6
	  param inout name "target" explicit_type "Object"
	  param in name "methodID" explicit_type "long"
	  param in name "arg1" explicit_type "float"
	  param in name "arg2" explicit_type "float"
	  param in name "arg3" explicit_type "float"
	  param in name "arg4" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws};
s"
	
	
	
      end

      operation 77434935 "nCallMultipleFloatMethod"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "target" explicit_type "Object"
	  param in name "methodID" explicit_type "long"
	  param inout name "args" explicit_type "float"
	multiplicity "[]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws};
s"
	
	
	
      end
    end

    class 5864759 "AnimatorInflaterTest"
      visibility public 
      nactuals 1
      actual class class_ref 5865015 // ActivityInstrumentationTestCase2
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 11417527 // <realization>
	relation 11417527 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 11417527 // <realization>
	  b parent class_ref 5865015 // ActivityInstrumentationTestCase2
      end

      attribute 19962295 "identityHashes"
	package explicit_type "Integer"
	init_value " new HashSet<Integer>()"
	stereotype "Set"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 47788087 "AnimatorInflaterTest"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 47788215 "assertUnique"
	private explicit_return_type "void"
	nparams 1
	  param inout name "object" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 47788343 "assertUnique"
	private explicit_return_type "void"
	nparams 2
	  param inout name "object" explicit_type "Object"
	  param inout name "msg" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 47788471 "testLoadStateListAnimator"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 5864887 "BasicAnimatorActivity"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 47797815 "onCreate"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "savedInstanceState" explicit_type "Bundle"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 5865271 "AnimatorSetActivity"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 47788599 "onCreate"
	public explicit_return_type "void"
	nparams 1
	  param inout name "savedBundleInstance" explicit_type "Bundle"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 5865399 "AnimatorSetActivityTest"
      visibility public 
      nactuals 1
      actual class class_ref 5865015 // ActivityInstrumentationTestCase2
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 11417783 // <realization>
	relation 11417783 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 11417783 // <realization>
	  b parent class_ref 5865015 // ActivityInstrumentationTestCase2
      end

      attribute 19962423 "POLL_INTERVAL"
	class_attribute const_attribute private explicit_type "long"
	init_value " 100"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " ms"
      end

      classrelation 11417911 // mActivity (<unidirectional association>)
	relation 11417911 --->
	  a role_name "mActivity" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 11417911 // mActivity (<unidirectional association>)
	  b parent class_ref 5865271 // AnimatorSetActivity
      end

      operation 47788727 "AnimatorSetActivityTest"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 5865527 "MyListener"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 19962551 "startIsCalled"
	  package explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 19962679 "endIsCalled"
	  package explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 19962807 "cancelIsCalled"
	  package explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 47788855 "onAnimationStart"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" explicit_type "Animator"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 47788983 "onAnimationEnd"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" explicit_type "Animator"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 47789111 "onAnimationCancel"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" explicit_type "Animator"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 47789239 "onAnimationRepeat"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" explicit_type "Animator"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      operation 47789367 "setUp"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 47789495 "tearDown"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 47789623 "testGetChildAnimations"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 47789751 "testTotalDuration"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 47789879 "testGetDuration"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 47790007 "testSetDuration"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
@UiThreadTest
"
	
	
	
      end

      operation 47790135 "testAddListener"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "InterruptedException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 47790263 "testRemoveListener"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 47790391 "testEnd"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 47790519 "testStart"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 47790647 "testCancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 47790775 "testIsRunning"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 47790903 "testPauseAndResume"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 47791031 "testClone"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 47791159 "onlyContains"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "animators" explicit_type "ArrayList<Animator>"
	  param inout name "" explicit_type "AnimatorSet...sets"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check that the animator list contains exactly the given animators and nothing else.
"
      end

      operation 47791287 "getSequentialSet"
	private explicit_return_type "AnimatorSet"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Create an AnimatorSet with all the animators running sequentially"
      end

      operation 47791415 "getAnimatorList"
	private explicit_return_type "Animator"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}ArrayList<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 5865655 "AnimatorSetEventsTest"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Listener tests for AnimatorSet.
"
      classrelation 11421239 // <generalisation>
	relation 11421239 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 11421239 // <generalisation>
	  b parent class_ref 5865783 // EventsTest
      end

      operation 47795895 "setUp"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 47796023 "getTimeout"
	protected explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 47796151 "testPlayingCancelDuringChildDelay"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Tests that an AnimatorSet can be correctly canceled during the delay of one of
its children
"
      end

      operation 47796279 "setTranslationX"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 47796407 "setTranslationY"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 5865783 "EventsTest"
      abstract visibility public 
      nactuals 1
      actual class class_ref 5865015 // ActivityInstrumentationTestCase2
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Tests for the various lifecycle events of Animators. This abstract class is subclassed by
concrete implementations that provide the actual Animator objects being tested. All of the
testing mechanisms are in this class; the subclasses are only responsible for providing
the mAnimator object.

This test is more complicated than a typical synchronous test because much of the functionality
must happen on the UI thread. Some tests do this by using the UiThreadTest annotation to
automatically run the whole test on that thread. Other tests must run on the UI thread and also
wait for some later event to occur before ending. These tests use a combination of an
AbstractFuture mechanism and a delayed action to release that Future later.
"
      classrelation 11418807 // <realization>
	relation 11418807 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 11418807 // <realization>
	  b parent class_ref 5865015 // ActivityInstrumentationTestCase2
      end

      attribute 19962935 "ANIM_DURATION"
	class_attribute const_attribute protected explicit_type "int"
	init_value " 400"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19963063 "ANIM_DELAY"
	class_attribute const_attribute protected explicit_type "int"
	init_value " 100"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19963191 "ANIM_MID_DURATION"
	class_attribute const_attribute protected explicit_type "int"
	init_value " ANIM_DURATION / 2"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19963319 "ANIM_MID_DELAY"
	class_attribute const_attribute protected explicit_type "int"
	init_value " ANIM_DELAY / 2"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19963447 "ANIM_PAUSE_DURATION"
	class_attribute const_attribute protected explicit_type "int"
	init_value " ANIM_DELAY"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19963575 "ANIM_PAUSE_DELAY"
	class_attribute const_attribute protected explicit_type "int"
	init_value " ANIM_DELAY / 2"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19963703 "FUTURE_RELEASE_DELAY"
	class_attribute const_attribute protected explicit_type "int"
	init_value " 50"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19963831 "ANIM_FULL_DURATION_SLOP"
	class_attribute const_attribute protected explicit_type "int"
	init_value " 100"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19963959 "mStarted"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " tracks whether we've received the onAnimationStart() callback"
      end

      attribute 19964087 "mRunning"
	protected explicit_type "boolean"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " tracks whether we've started the animator"
      end

      attribute 19964215 "mCanceled"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " tracks whether we've canceled the animator"
      end

      classrelation 11419063 // mFuture (<unidirectional association>)
	relation 11419063 --->
	  a role_name "mFuture" protected
	    comment " Mechanism for waiting for the UI test to complete"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 11419063 // mFuture (<unidirectional association>)
	  b parent class_ref 5865911 // FutureWaiter
      end

      class 5866039 "Canceler"
	visibility protected 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 11419703 // mFuture (<unidirectional association>)
	  relation 11419703 --->
	    a role_name "mFuture" package
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 11419703 // mFuture (<unidirectional association>)
	    b parent class_ref 5865911 // FutureWaiter
	end

	operation 47791543 "Canceler"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "anim" explicit_type "Animator"
	    param inout name "future" type class_ref 5865911 // FutureWaiter
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 47791671 "run"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      operation 47791799 "getTimeout"
	protected explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Timeout length, based on when the animation should reasonably be complete.
"
      end

      class 5866167 "Ender"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 11420087 // mFuture (<unidirectional association>)
	  relation 11420087 --->
	    a role_name "mFuture" package
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 11420087 // mFuture (<unidirectional association>)
	    b parent class_ref 5865911 // FutureWaiter
	end

	operation 47791927 "Ender"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "anim" explicit_type "Animator"
	    param inout name "future" type class_ref 5865911 // FutureWaiter
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 47792055 "run"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 5866295 "Pauser"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 11420471 // mFuture (<unidirectional association>)
	  relation 11420471 --->
	    a role_name "mFuture" package
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 11420471 // mFuture (<unidirectional association>)
	    b parent class_ref 5865911 // FutureWaiter
	end

	operation 47792183 "Pauser"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "anim" explicit_type "Animator"
	    param inout name "future" type class_ref 5865911 // FutureWaiter
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 47792311 "run"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 5866423 "Resumer"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 11420855 // mFuture (<unidirectional association>)
	  relation 11420855 --->
	    a role_name "mFuture" package
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 11420855 // mFuture (<unidirectional association>)
	    b parent class_ref 5865911 // FutureWaiter
	end

	operation 47792439 "Resumer"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "anim" explicit_type "Animator"
	    param inout name "future" type class_ref 5865911 // FutureWaiter
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 47792567 "run"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 5866551 "FutureReleaseListener"
	visibility protected 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 11421111 // mFuture (<unidirectional association>)
	  relation 11421111 --->
	    a role_name "mFuture" package
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 11421111 // mFuture (<unidirectional association>)
	    b parent class_ref 5865911 // FutureWaiter
	end

	operation 47792695 "FutureReleaseListener"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "future" type class_ref 5865911 // FutureWaiter
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 47792823 "FutureReleaseListener"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "future" type class_ref 5865911 // FutureWaiter
	    param in name "timeout" explicit_type "long"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Variant constructor that auto-releases the FutureWaiter after the specified timeout.
@param future
@param timeout
"
	end

	operation 47792951 "onAnimationEnd"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" explicit_type "Animator"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      operation 47793079 "EventsTest"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 47793207 "setUp"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets up the fields used by each test. Subclasses must override this method to create
the protected mAnimator object used in all tests. Overrides must create that animator
and then call super.setup(), where further properties are set on that animator.
@throws Exception
"
      end

      operation 47793335 "testCancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@UiThreadTest
@SmallTest
"
	
	
	
	comment "Verify that calling cancel on an unstarted animator does nothing.
"
      end

      operation 47793463 "testEnd"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@UiThreadTest
@SmallTest
"
	
	
	
	comment "Verify that calling end on an unstarted animator starts/ends an animator.
"
      end

      operation 47793591 "testStartCancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@UiThreadTest
@SmallTest
"
	
	
	
	comment "Verify that calling cancel on a started animator does the right thing.
"
      end

      operation 47793719 "testStartEnd"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@UiThreadTest
@SmallTest
"
	
	
	
	comment "Verify that calling end on a started animator does the right thing.
"
      end

      operation 47793847 "testStartDelayedCancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
	comment "Same as testStartCancel, but with a startDelayed animator
"
      end

      operation 47793975 "testStartDelayedEnd"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
	comment "Same as testStartEnd, but with a startDelayed animator
"
      end

      operation 47794103 "testPlayingCancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Verify that canceling an animator that is playing does the right thing.
"
      end

      operation 47794231 "testPlayingEnd"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Verify that ending an animator that is playing does the right thing.
"
      end

      operation 47794359 "testPlayingDelayedCancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Same as testPlayingCancel, but with a startDelayed animator
"
      end

      operation 47794487 "testPlayingDelayedEnd"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Same as testPlayingEnd, but with a startDelayed animator
"
      end

      operation 47794615 "testPlayingDelayedCancelMidDelay"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Same as testPlayingDelayedCancel, but cancel during the startDelay period
"
      end

      operation 47794743 "testPlayingDelayedEndMidDelay"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Same as testPlayingDelayedEnd, but end during the startDelay period
"
      end

      operation 47794871 "testStartDoubleCancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Verifies that canceling a started animation after it has already been canceled
does nothing.
"
      end

      operation 47794999 "testStartDoubleEnd"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Verifies that ending a started animation after it has already been ended
does nothing.
"
      end

      operation 47795127 "testStartDelayedDoubleCancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Same as testStartDoubleCancel, but with a startDelayed animator
"
      end

      operation 47795255 "testStartDelayedDoubleEnd"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Same as testStartDoubleEnd, but with a startDelayed animator
"
      end

      operation 47795383 "testPauseResume"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Verify that pausing and resuming an animator ends within
the appropriate timeout duration.
"
      end

      operation 47795511 "testPauseResumeDelayed"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Verify that pausing and resuming a startDelayed animator ends within
the appropriate timeout duration.
"
      end

      operation 47795639 "testPauseTimeout"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Verify that pausing an animator without resuming it causes a timeout.
"
      end

      operation 47795767 "testPauseTimeoutDelayed"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Verify that pausing a startDelayed animator without resuming it causes a timeout.
"
      end
    end

    class 5865911 "FutureWaiter"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Simple extension of {@link com.google.common.util.concurrent.AbstractFuture} which exposes a new
release() method which calls the protected
{@link com.google.common.util.concurrent.AbstractFuture#set(Object)} method internally. It
also exposes the protected {@link AbstractFuture#setException(Throwable)} method.
"
      operation 47797943 "release"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Release the Future currently waiting on
{@link com.google.common.util.concurrent.AbstractFuture#get()}.
"
      end

      operation 47798071 "set"
	public explicit_return_type "void"
	nparams 1
	  param inout name "result" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used to indicate failure (when the result value is false).
"
      end

      operation 47798199 "setException"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "throwable" explicit_type "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 5866679 "AutoCancelTest"
      visibility public 
      nactuals 1
      actual class class_ref 5865015 // ActivityInstrumentationTestCase2
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 11421751 // <realization>
	relation 11421751 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 11421751 // <realization>
	  b parent class_ref 5865015 // ActivityInstrumentationTestCase2
      end

      attribute 19964343 "mAnimX1Canceled"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19964471 "mAnimXY1Canceled"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19964599 "mAnimX2Canceled"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19964727 "mAnimXY2Canceled"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19964855 "START_DELAY"
	class_attribute const_attribute private explicit_type "long"
	init_value " 100"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19964983 "DELAYED_START_DURATION"
	class_attribute const_attribute private explicit_type "long"
	init_value " 200"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19965111 "FUTURE_TIMEOUT"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1000"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 47796535 "AutoCancelTest"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 47796663 "setupAnimator"
	package explicit_return_type "ObjectAnimator"
	nparams 2
	  param in name "startDelay" explicit_type "long"
	  param inout name "" explicit_type "String...properties"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 47796791 "setupAnimators"
	private explicit_return_type "void"
	nparams 3
	  param in name "startDelay" explicit_type "long"
	  param inout name "startLater" explicit_type "boolean"
	  param in name "future" type class_ref 5865911 // FutureWaiter
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, final ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 47796919 "testAutoCancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 47797047 "testAutoCancelDelayed"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 47797175 "testAutoCancelTestLater"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 47797303 "testAutoCancelDelayedTestLater"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 47797431 "setX"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 47797559 "setY"
	public explicit_return_type "void"
	nparams 1
	  param in name "y" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 47797687 "setZ"
	public explicit_return_type "void"
	nparams 1
	  param in name "z" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 5866807 "ObjectAnimatorEventsTest"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Listener tests for ObjectAnimator.
"
      classrelation 11422519 // <generalisation>
	relation 11422519 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 11422519 // <generalisation>
	  b parent class_ref 5865783 // EventsTest
      end

      operation 47798327 "setUp"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 5866935 "StateListAnimatorTest"
      visibility public 
      nactuals 1
      actual class class_ref 5865015 // ActivityInstrumentationTestCase2
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 11422647 // <realization>
	relation 11422647 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 11422647 // <realization>
	  b parent class_ref 5865015 // ActivityInstrumentationTestCase2
      end

      operation 47798455 "StateListAnimatorTest"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 47798583 "setUp"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 47798711 "testInflateFromAnimator"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 47798839 "testAttachDetach"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@UiThreadTest
"
	
	
	
      end

      operation 47798967 "testStateListLoading"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "InterruptedException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 5867063 "ValueAnimatorEventsTest"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Listener tests for ValueAnimator.
"
      classrelation 11422775 // <generalisation>
	relation 11422775 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 11422775 // <generalisation>
	  b parent class_ref 5865783 // EventsTest
      end

      operation 47799095 "setUp"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 5867191 "ValueAnimatorTests"
      visibility public 
      nactuals 1
      actual class class_ref 5865015 // ActivityInstrumentationTestCase2
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 11422903 // <realization>
	relation 11422903 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 11422903 // <realization>
	  b parent class_ref 5865015 // ActivityInstrumentationTestCase2
      end

      attribute 19965239 "WAIT_TIME_OUT"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5000"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19965367 "TOLERANCE"
	class_attribute const_attribute private explicit_type "long"
	init_value " 100"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Tolerance of error in calculations related to duration, frame time, etc. due to frame delay.
 ms"
      end

      attribute 19965495 "POLL_INTERVAL"
	class_attribute const_attribute private explicit_type "long"
	init_value " 100"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " ms"
      end

      attribute 19965623 "A1_START_VALUE"
	class_attribute const_attribute private explicit_type "float"
	init_value " 0f"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19965751 "A1_END_VALUE"
	class_attribute const_attribute private explicit_type "float"
	init_value " 1f"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19965879 "A2_START_VALUE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 100"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19966007 "A2_END_VALUE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 200"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19966135 "DEFAULT_FRAME_INTERVAL"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "ms"
      end

      attribute 19966263 "COMMIT_DELAY"
	class_attribute const_attribute private explicit_type "long"
	init_value " 3"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "ms"
      end

      operation 47799223 "ValueAnimatorTests"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 47799351 "setUp"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 47799479 "tearDown"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 47799607 "testStartDelay"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 47799735 "testListenerCallbacks"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 47799863 "testIsStarted"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 47799991 "testPause"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 47800119 "testPauseListener"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 47800247 "testResume"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 47800375 "testEnd"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 47800503 "testEndValue"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 47800631 "testUpdateListener"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "InterruptedException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 47800759 "testConcurrentModification"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 47800887 "testSeek"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 47801015 "testSeekWhileRunning"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 47801143 "testEndBeforeStart"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 47801271 "testZeroDuration"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 47801399 "testZeroScale"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 47801527 "testReverse"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      class 5867319 "MyUpdateListener"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 19966391 "wasRunning"
	  package explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 19966519 "firstRunningFrameTime"
	  package explicit_type "long"
	  init_value " -1"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 19966647 "lastUpdateTime"
	  package explicit_type "long"
	  init_value " -1"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 19966775 "startFraction"
	  package explicit_type "float"
	  init_value " 0"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 47801655 "onAnimationUpdate"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" explicit_type "ValueAnimator"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 47801783 "reset"
	  package explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 5867447 "MyListener"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 19966903 "startCalled"
	  package explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 19967031 "cancelCalled"
	  package explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 19967159 "endCalled"
	  package explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 19967287 "startTime"
	  package explicit_type "long"
	  init_value " -1"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 19967415 "endTime"
	  package explicit_type "long"
	  init_value " -1"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 47801911 "onAnimationStart"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" explicit_type "Animator"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 47802039 "onAnimationEnd"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" explicit_type "Animator"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 47802167 "onAnimationCancel"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" explicit_type "Animator"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 47802295 "onAnimationRepeat"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" explicit_type "Animator"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 5867575 "MyPauseListener"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 19967543 "pauseCalled"
	  package explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 19967671 "resumeCalled"
	  package explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 47802423 "onAnimationPause"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" explicit_type "Animator"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 47802551 "onAnimationResume"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" explicit_type "Animator"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 5867703 "MyFrameCallbackProvider"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 19967799 "MSG_FRAME"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " 0"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 19967927 "mFrameDelay"
	  private explicit_type "long"
	  init_value " DEFAULT_FRAME_INTERVAL"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	class 5867831 "LooperThread"
	  visibility package 
	  cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	  java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  operation 47803447 "run"
	    public explicit_return_type "void"
	    nparams 0
	    cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	    cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end
	end

	classrelation 11424055 // mThread (<unidirectional association>)
	  relation 11424055 --->
	    a role_name "mThread" init_value " new LooperThread()" const_relation package
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 11424055 // mThread (<unidirectional association>)
	    b parent class_ref 5867831 // LooperThread
	end

	operation 47802679 "MyFrameCallbackProvider"
	  public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 47802807 "postFrameCallback"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "callback" explicit_type "FrameCallback"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 47802935 "postCommitCallback"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "runnable" explicit_type "Runnable"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 47803063 "getFrameTime"
	  public explicit_return_type "long"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 47803191 "getFrameDelay"
	  public explicit_return_type "long"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 47803319 "setFrameDelay"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "delay" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 5867959 "ViewPropertyAnimatorTest"
      abstract visibility public 
      nactuals 1
      actual class class_ref 5865015 // ActivityInstrumentationTestCase2
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Tests for the various lifecycle events of Animators. This abstract class is subclassed by
concrete implementations that provide the actual Animator objects being tested. All of the
testing mechanisms are in this class; the subclasses are only responsible for providing
the mAnimator object.

This test is more complicated than a typical synchronous test because much of the functionality
must happen on the UI thread. Some tests do this by using the UiThreadTest annotation to
automatically run the whole test on that thread. Other tests must run on the UI thread and also
wait for some later event to occur before ending. These tests use a combination of an
AbstractFuture mechanism and a delayed action to release that Future later.
"
      classrelation 11424311 // <realization>
	relation 11424311 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 11424311 // <realization>
	  b parent class_ref 5865015 // ActivityInstrumentationTestCase2
      end

      attribute 19968055 "ANIM_DURATION"
	class_attribute const_attribute protected explicit_type "int"
	init_value " 400"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19968183 "ANIM_DELAY"
	class_attribute const_attribute protected explicit_type "int"
	init_value " 100"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19968311 "ANIM_MID_DURATION"
	class_attribute const_attribute protected explicit_type "int"
	init_value " ANIM_DURATION / 2"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19968439 "ANIM_MID_DELAY"
	class_attribute const_attribute protected explicit_type "int"
	init_value " ANIM_DELAY / 2"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19968567 "FUTURE_RELEASE_DELAY"
	class_attribute const_attribute protected explicit_type "int"
	init_value " 50"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19968695 "mStarted"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " tracks whether we've received the onAnimationStart() callback"
      end

      attribute 19968823 "mRunning"
	protected explicit_type "boolean"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " tracks whether we've started the animator"
      end

      attribute 19968951 "mCanceled"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " trackes whether we've canceled the animator"
      end

      classrelation 11424567 // mFuture (<unidirectional association>)
	relation 11424567 --->
	  a role_name "mFuture" protected
	    comment " Mechanism for waiting for the UI test to complete"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 11424567 // mFuture (<unidirectional association>)
	  b parent class_ref 5865911 // FutureWaiter
      end

      class 5868087 "Canceler"
	visibility protected 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 11425207 // mFuture (<unidirectional association>)
	  relation 11425207 --->
	    a role_name "mFuture" package
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 11425207 // mFuture (<unidirectional association>)
	    b parent class_ref 5865911 // FutureWaiter
	end

	operation 47803575 "Canceler"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "anim" explicit_type "ViewPropertyAnimator"
	    param inout name "future" type class_ref 5865911 // FutureWaiter
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 47803703 "run"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      operation 47803831 "getTimeout"
	protected explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Timeout length, based on when the animation should reasonably be complete.
"
      end

      class 5868215 "FutureReleaseListener"
	visibility protected 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 11425463 // mFuture (<unidirectional association>)
	  relation 11425463 --->
	    a role_name "mFuture" package
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 11425463 // mFuture (<unidirectional association>)
	    b parent class_ref 5865911 // FutureWaiter
	end

	operation 47803959 "FutureReleaseListener"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "future" type class_ref 5865911 // FutureWaiter
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 47804087 "FutureReleaseListener"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "future" type class_ref 5865911 // FutureWaiter
	    param in name "timeout" explicit_type "long"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Variant constructor that auto-releases the FutureWaiter after the specified timeout.
@param future
@param timeout
"
	end

	operation 47804215 "onAnimationEnd"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" explicit_type "Animator"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      operation 47804343 "ViewPropertyAnimatorTest"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 47804471 "setUp"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets up the fields used by each test. Subclasses must override this method to create
the protected mAnimator object used in all tests. Overrides must create that animator
and then call super.setup(), where further properties are set on that animator.
@throws Exception
"
      end

      operation 47804599 "testCancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@UiThreadTest
@SmallTest
"
	
	
	
	comment "Verify that calling cancel on an unstarted animator does nothing.
"
      end

      operation 47804727 "testStartCancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@UiThreadTest
@SmallTest
"
	
	
	
	comment "Verify that calling cancel on a started animator does the right thing.
"
      end

      operation 47804855 "testStartDelayedCancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
	comment "Same as testStartCancel, but with a startDelayed animator
"
      end

      operation 47804983 "testPlayingCancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Verify that canceling an animator that is playing does the right thing.
"
      end

      operation 47805111 "testPlayingDelayedCancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Same as testPlayingCancel, but with a startDelayed animator
"
      end

      operation 47805239 "testPlayingDelayedCancelMidDelay"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Same as testPlayingDelayedCancel, but cancel during the startDelay period
"
      end

      operation 47805367 "testStartDoubleCancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Verifies that canceling a started animation after it has already been canceled
does nothing.
"
      end

      operation 47805495 "testStartDelayedDoubleCancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Same as testStartDoubleCancel, but with a startDelayed animator
"
      end
    end

    class 6801591 "AnimationThread"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Abstract animation thread.
<p/>
This does not actually start an animation, instead it fakes a looper that will play whatever
animation is sending messages to its own {@link Handler}.
<p/>
Classes should implement {@link #preAnimation()} and {@link #postAnimation()}.
<p/>
If {@link #preAnimation()} does not start an animation somehow then the thread doesn't do
anything.

"
      class 6801719 "MessageBundle"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 14629303 // mMessage (<unidirectional association>)
	  relation 14629303 --->
	    a role_name "mMessage" const_relation package
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 14629303 // mMessage (<unidirectional association>)
	    b parent class_ref 134839 // Message
	end

	attribute 23234487 "mUptimeMillis"
	  const_attribute package explicit_type "long"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 75985463 "MessageBundle"
	  package explicit_return_type ""
	  nparams 3
	    param inout name "target" explicit_type "Handler"
	    param inout name "message" type class_ref 134839 // Message
	    param in name "uptimeMillis" explicit_type "long"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 75985591 "compareTo"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "bundle" type class_ref 6801719 // MessageBundle
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      classrelation 14629559 // mQueue (<unidirectional association>)
	relation 14629559 --->
	  stereotype "Queue"
	  a role_name "mQueue" init_value " new PriorityQueue<MessageBundle>()" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 14629559 // mQueue (<unidirectional association>)
	  b parent class_ref 6801719 // MessageBundle
      end

      attribute 23234615 "mListener"
	const_attribute private explicit_type "IAnimationListener"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 75985719 "AnimationThread"
	public explicit_return_type ""
	nparams 3
	  param inout name "scene" explicit_type "RenderSessionImpl"
	  param inout name "threadName" explicit_type "String"
	  param inout name "listener" explicit_type "IAnimationListener"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 75985847 "preAnimation"
	abstract public explicit_return_type "Result"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 75985975 "postAnimation"
	abstract public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 75986103 "run"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 6801975 "PropertyValuesHolder_Delegate"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SuppressWarnings(\"unused\")
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Delegate implementing the native methods of android.animation.PropertyValuesHolder

Through the layoutlib_create tool, the original native methods of PropertyValuesHolder have been
replaced by calls to methods of the same name in this delegate class.

Because it's a stateless class to start with, there's no need to keep a {@link DelegateManager}
around to map int to instance of the delegate.

The main goal of this class' methods are to provide a native way to access setters and getters
on some object. We override these methods to use reflection since the original reflection
implementation of the PropertyValuesHolder won't be able to access protected methods.


package"
      attribute 23234743 "ID_TO_METHOD"
	class_attribute const_attribute private explicit_type "Long, Method"
	init_value " new HashMap<Long, Method>()"
	stereotype "Map"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 23234871 "sNextId"
	class_attribute private explicit_type "long"
	init_value " 1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 75986231 "registerMethod"
	class_operation private explicit_return_type "long"
	nparams 4
	  param inout name "targetClass" explicit_type "Class"
	  param inout name "methodName" explicit_type "String"
	  param inout name "types" explicit_type "Class"
	multiplicity "[]"
	  param in name "nArgs" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 75986359 "callMethod"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "target" explicit_type "Object"
	  param in name "methodID" explicit_type "long"
	  param inout name "" explicit_type "Object...args"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 75986487 "nGetIntMethod"
	class_operation package explicit_return_type "long"
	nparams 2
	  param inout name "targetClass" explicit_type "Class"
	  param inout name "methodName" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@LayoutlibDelegate
"
	
	
	
	comment "package"
      end

      operation 75986615 "nGetFloatMethod"
	class_operation package explicit_return_type "long"
	nparams 2
	  param inout name "targetClass" explicit_type "Class"
	  param inout name "methodName" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@LayoutlibDelegate
"
	
	
	
	comment "package"
      end

      operation 75986743 "nGetMultipleIntMethod"
	class_operation package explicit_return_type "long"
	nparams 3
	  param inout name "targetClass" explicit_type "Class"
	  param inout name "methodName" explicit_type "String"
	  param in name "numParams" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@LayoutlibDelegate
"
	
	
	
	comment "package"
      end

      operation 75986871 "nGetMultipleFloatMethod"
	class_operation package explicit_return_type "long"
	nparams 3
	  param inout name "targetClass" explicit_type "Class"
	  param inout name "methodName" explicit_type "String"
	  param in name "numParams" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@LayoutlibDelegate
"
	
	
	
	comment "package"
      end

      operation 75986999 "nCallIntMethod"
	class_operation package explicit_return_type "void"
	nparams 3
	  param inout name "target" explicit_type "Object"
	  param in name "methodID" explicit_type "long"
	  param in name "arg" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@LayoutlibDelegate
"
	
	
	
	comment "package"
      end

      operation 75987127 "nCallFloatMethod"
	class_operation package explicit_return_type "void"
	nparams 3
	  param inout name "target" explicit_type "Object"
	  param in name "methodID" explicit_type "long"
	  param in name "arg" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@LayoutlibDelegate
"
	
	
	
	comment "package"
      end

      operation 75987255 "nCallTwoIntMethod"
	class_operation package explicit_return_type "void"
	nparams 4
	  param inout name "target" explicit_type "Object"
	  param in name "methodID" explicit_type "long"
	  param in name "arg1" explicit_type "int"
	  param in name "arg2" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@LayoutlibDelegate
"
	
	
	
	comment "package"
      end

      operation 75987383 "nCallFourIntMethod"
	class_operation package explicit_return_type "void"
	nparams 6
	  param inout name "target" explicit_type "Object"
	  param in name "methodID" explicit_type "long"
	  param in name "arg1" explicit_type "int"
	  param in name "arg2" explicit_type "int"
	  param in name "arg3" explicit_type "int"
	  param in name "arg4" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@LayoutlibDelegate
"
	
	
	
	comment "package"
      end

      operation 75987511 "nCallMultipleIntMethod"
	class_operation package explicit_return_type "void"
	nparams 3
	  param inout name "target" explicit_type "Object"
	  param in name "methodID" explicit_type "long"
	  param inout name "args" explicit_type "int"
	multiplicity "[]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@LayoutlibDelegate
"
	
	
	
	comment "package"
      end

      operation 75987639 "nCallTwoFloatMethod"
	class_operation package explicit_return_type "void"
	nparams 4
	  param inout name "target" explicit_type "Object"
	  param in name "methodID" explicit_type "long"
	  param in name "arg1" explicit_type "float"
	  param in name "arg2" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@LayoutlibDelegate
"
	
	
	
	comment "package"
      end

      operation 75987767 "nCallFourFloatMethod"
	class_operation package explicit_return_type "void"
	nparams 6
	  param inout name "target" explicit_type "Object"
	  param in name "methodID" explicit_type "long"
	  param in name "arg1" explicit_type "float"
	  param in name "arg2" explicit_type "float"
	  param in name "arg3" explicit_type "float"
	  param in name "arg4" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@LayoutlibDelegate
"
	
	
	
	comment "package"
      end

      operation 75987895 "nCallMultipleFloatMethod"
	class_operation package explicit_return_type "void"
	nparams 3
	  param inout name "target" explicit_type "Object"
	  param in name "methodID" explicit_type "long"
	  param inout name "args" explicit_type "float"
	multiplicity "[]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@LayoutlibDelegate
"
	
	
	
	comment "package"
      end
    end

    class 6946231 "StateListAnimator"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Lets you define a number of Animators that will run on the attached View depending on the View's
drawable state.
<p>
It can be defined in an XML file with the <code>&lt;selector></code> element.
Each State Animator is defined in a nested <code>&lt;item></code> element.

@attr ref android.R.styleable#DrawableStates_state_focused
@attr ref android.R.styleable#DrawableStates_state_window_focused
@attr ref android.R.styleable#DrawableStates_state_enabled
@attr ref android.R.styleable#DrawableStates_state_checkable
@attr ref android.R.styleable#DrawableStates_state_checked
@attr ref android.R.styleable#DrawableStates_state_selected
@attr ref android.R.styleable#DrawableStates_state_activated
@attr ref android.R.styleable#DrawableStates_state_active
@attr ref android.R.styleable#DrawableStates_state_single
@attr ref android.R.styleable#DrawableStates_state_first
@attr ref android.R.styleable#DrawableStates_state_middle
@attr ref android.R.styleable#DrawableStates_state_last
@attr ref android.R.styleable#DrawableStates_state_pressed
@attr ref android.R.styleable#StateListAnimatorItem_animation
"
      class 6975671 "Tuple"
	visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 24018487 "mSpecs"
	  const_attribute package explicit_type "int"
	  multiplicity "[]"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 15039671 // mAnimator (<unidirectional association>)
	  relation 15039671 --->
	    a role_name "mAnimator" const_relation package
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 15039671 // mAnimator (<unidirectional association>)
	    b parent class_ref 6966327 // Animator
	end

	operation 77445175 "Tuple"
	  private explicit_return_type ""
	  nparams 2
	    param inout name "specs" explicit_type "int"
	  multiplicity "[]"
	    param inout name "animator" type class_ref 6966327 // Animator
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77445303 "getSpecs"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "@hide
"
	end

	operation 77445431 "getAnimator"
	  public return_type class_ref 6966327 // Animator
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "@hide
"
	end
      end

      classrelation 15038903 // mTuples (<unidirectional association>)
	relation 15038903 --->
	  stereotype "ArrayList"
	  a role_name "mTuples" init_value " new ArrayList<Tuple>()" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 15038903 // mTuples (<unidirectional association>)
	  b parent class_ref 6975671 // Tuple
      end

      classrelation 15039031 // mLastMatch (<unidirectional association>)
	relation 15039031 --->
	  a role_name "mLastMatch" init_value " null" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15039031 // mLastMatch (<unidirectional association>)
	  b parent class_ref 6975671 // Tuple
      end

      classrelation 15039159 // mRunningAnimator (<unidirectional association>)
	relation 15039159 --->
	  a role_name "mRunningAnimator" init_value " null" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15039159 // mRunningAnimator (<unidirectional association>)
	  b parent class_ref 6966327 // Animator
      end

      classrelation 15039287 // mViewRef (<unidirectional association>)
	relation 15039287 --->
	  stereotype "WeakReference"
	  a role_name "mViewRef" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 15039287 // mViewRef (<unidirectional association>)
	  b parent class_ref 6937143 // View
      end

      class 6975799 "StateListAnimatorConstantState"
	visibility private 
	nactuals 1
	actual class class_ref 6967095 // ConstantState
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 15039799 // <realization>
	  relation 15039799 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 15039799 // <realization>
	    b parent class_ref 6967095 // ConstantState
	end

	classrelation 15039927 // mAnimator (<unidirectional association>)
	  relation 15039927 --->
	    a role_name "mAnimator" const_relation package
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 15039927 // mAnimator (<unidirectional association>)
	    b parent class_ref 6946231 // StateListAnimator
	end

	attribute 24018615 "mChangingConf"
	  package explicit_type "int"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  java_annotation "@Config
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 77445559 "StateListAnimatorConstantState"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "animator" type class_ref 6946231 // StateListAnimator
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77445687 "getChangingConfigurations"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
@Config
"
	  
	  
	  
	end

	operation 77445815 "newInstance"
	  public return_type class_ref 6946231 // StateListAnimator
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      classrelation 15039415 // mConstantState (<unidirectional association>)
	relation 15039415 --->
	  a role_name "mConstantState" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15039415 // mConstantState (<unidirectional association>)
	  b parent class_ref 6975799 // StateListAnimatorConstantState
      end

      classrelation 15039543 // mAnimatorListener (<unidirectional association>)
	relation 15039543 --->
	  a role_name "mAnimatorListener" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15039543 // mAnimatorListener (<unidirectional association>)
	  b parent class_ref 6968247 // AnimatorListenerAdapter
      end

      attribute 24018359 "mChangingConfigurations"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Config
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 77442999 "StateListAnimator"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77443127 "initAnimatorListener"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77443255 "addState"
	public explicit_return_type "void"
	nparams 2
	  param inout name "specs" explicit_type "int"
	multiplicity "[]"
	  param inout name "animator" type class_ref 6966327 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Associates the given animator with the provided drawable state specs so that it will be run
when the View's drawable state matches the specs.

@param specs The drawable state specs to match against
@param animator The animator to run when the specs match
"
      end

      operation 77443383 "getRunningAnimator"
	public return_type class_ref 6966327 // Animator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current {@link android.animation.Animator} which is started because of a state
change.

@return The currently running Animator or null if no Animator is running
@hide
"
      end

      operation 77443511 "getTarget"
	public return_type class_ref 6937143 // View
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide
"
      end

      operation 77443639 "setTarget"
	public explicit_return_type "void"
	nparams 1
	  param inout name "view" type class_ref 6937143 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by View
@hide
"
      end

      operation 77443767 "clearTarget"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77443895 "clone"
	public return_type class_ref 6946231 // StateListAnimator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77444023 "setState"
	public explicit_return_type "void"
	nparams 1
	  param inout name "state" explicit_type "int"
	multiplicity "[]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by View
@hide
"
      end

      operation 77444151 "start"
	private explicit_return_type "void"
	nparams 1
	  param inout name "match" type class_ref 6975671 // Tuple
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77444279 "cancel"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77444407 "getTuples"
	public return_type class_ref 6975671 // Tuple
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}ArrayList<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide
"
      end

      operation 77444535 "jumpToCurrentState"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If there is an animation running for a recent state change, ends it.
<p>
This causes the animation to assign the end value(s) to the View.
"
      end

      operation 77444663 "getChangingConfigurations"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Config
"
	
	
	
	comment "Return a mask of the configuration parameters for which this animator may change, requiring
that it be re-created.  The default implementation returns whatever was provided through
{@link #setChangingConfigurations(int)} or 0 by default.

@return Returns a mask of the changing configuration parameters, as defined by
{@link android.content.pm.ActivityInfo}.

@see android.content.pm.ActivityInfo
@hide
"
      end

      operation 77444791 "setChangingConfigurations"
	public explicit_return_type "void"
	nparams 1
	  param in name "configs" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Config ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a mask of the configuration parameters for which this animator may change, requiring
that it should be recreated from resources instead of being cloned.

@param configs A mask of the changing configuration parameters, as
defined by {@link android.content.pm.ActivityInfo}.

@see android.content.pm.ActivityInfo
@hide
"
      end

      operation 77444919 "appendChangingConfigurations"
	public explicit_return_type "void"
	nparams 1
	  param in name "configs" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Config ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the changing configurations value to the union of the current changing configurations
and the provided configs.
This method is called while loading the animator.
@hide
"
      end

      operation 77445047 "createConstantState"
	public return_type class_ref 6967095 // ConstantState
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<StateListAnimator> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a {@link android.content.res.ConstantState} instance that holds the shared state of
this Animator.
<p>
This constant state is used to create new instances of this animator when needed. Default
implementation creates a new {@link StateListAnimatorConstantState}. You can override this
method to provide your custom logic or return null if you don't want this animator to be
cached.

@return The {@link android.content.res.ConstantState} associated to this Animator.
@see android.content.res.ConstantState
@see #clone()
@hide
"
      end
    end

    class 6965431 "AnimationHandler"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This custom, static handler handles the timing pulse that is shared by all active
ValueAnimators. This approach ensures that the setting of animation values will happen on the
same thread that animations start on, and that all animations will share the same times for
calculating their values, which makes synchronizing animations possible.

The handler uses the Choreographer by default for doing periodic callbacks. A custom
AnimationFrameCallbackProvider can be set on the handler to provide timing pulse that
may be independent of UI frame update. This could be useful in testing.

@hide
"
      class 6965559 "AnimationFrameCallback"
	visibility package stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 77361335 "doAnimationFrame"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "frameTime" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Run animation based on the frame time.
@param frameTime The frame start time, in the {@link SystemClock#uptimeMillis()} time
                 base.
"
	end

	operation 77361463 "commitAnimationFrame"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "frameTime" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "This notifies the callback of frame commit time. Frame commit time is the time after
traversals happen, as opposed to the normal animation frame time that is before
traversals. This is used to compensate expensive traversals that happen as the
animation starts. When traversals take a long time to complete, the rendering of the
initial frame will be delayed (by a long time). But since the startTime of the
animation is set before the traversal, by the time of next frame, a lot of time would
have passed since startTime was set, the animation will consequently skip a few frames
to respect the new frameTime. By having the commit time, we can adjust the start time to
when the first frame was drawn (after any expensive traversals) so that no frames
will be skipped.

@param frameTime The frame time after traversals happen, if any, in the
                 {@link SystemClock#uptimeMillis()} time base.
"
	end
      end

      classrelation 15014455 // mDelayedCallbackStartTime (<unidirectional association>)
	relation 15014455 --->
	  a role_name "mDelayedCallbackStartTime" init_value "
            new ArrayMap<>()" const_relation private
	    comment "
Internal per-thread collections used to avoid set collisions as animations start and end
while being processed.
@hide

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<AnimationFrameCallback, Long> ${name}${value};
"
	    classrelation_ref 15014455 // mDelayedCallbackStartTime (<unidirectional association>)
	  b parent class_ref 6930743 // ArrayMap
      end

      classrelation 15014583 // mAnimationCallbacks (<unidirectional association>)
	relation 15014583 --->
	  stereotype "ArrayList"
	  a role_name "mAnimationCallbacks" init_value "
            new ArrayList<>()" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 15014583 // mAnimationCallbacks (<unidirectional association>)
	  b parent class_ref 6965559 // AnimationFrameCallback
      end

      classrelation 15014711 // mCommitCallbacks (<unidirectional association>)
	relation 15014711 --->
	  stereotype "ArrayList"
	  a role_name "mCommitCallbacks" init_value "
            new ArrayList<>()" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 15014711 // mCommitCallbacks (<unidirectional association>)
	  b parent class_ref 6965559 // AnimationFrameCallback
      end

      class 6965687 "AnimationFrameCallbackProvider"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 77361591 "postFrameCallback"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "callback" type class_ref 6965943 // FrameCallback
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77361719 "postCommitCallback"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "runnable" explicit_type "Runnable"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77361847 "getFrameTime"
	  public explicit_return_type "long"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77361975 "getFrameDelay"
	  public explicit_return_type "long"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77362103 "setFrameDelay"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "delay" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 15014839 // mProvider (<unidirectional association>)
	relation 15014839 --->
	  a role_name "mProvider" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15014839 // mProvider (<unidirectional association>)
	  b parent class_ref 6965687 // AnimationFrameCallbackProvider
      end

      classrelation 15014967 // mFrameCallback (<unidirectional association>)
	relation 15014967 --->
	  a role_name "mFrameCallback" init_value " new Choreographer.FrameCallback() {
        @Override
        public void doFrame(long frameTimeNanos) {
            doAnimationFrame(getProvider().getFrameTime());
            if (mAnimationCallbacks.size() > 0) {
                getProvider().postFrameCallback(this);
            }
        }
    }" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15014967 // mFrameCallback (<unidirectional association>)
	  b parent class_ref 6965943 // FrameCallback
      end

      classrelation 15015095 // sAnimatorHandler (<unidirectional association>)
	relation 15015095 --->
	  stereotype "ThreadLocal"
	  a role_name "sAnimatorHandler" init_value " new ThreadLocal<>()" class_relation const_relation public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 15015095 // sAnimatorHandler (<unidirectional association>)
	  b parent class_ref 6965431 // AnimationHandler
      end

      attribute 23999287 "mListDirty"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 77358775 "getInstance"
	class_operation public return_type class_ref 6965431 // AnimationHandler
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77358903 "setProvider"
	public explicit_return_type "void"
	nparams 1
	  param inout name "provider" type class_ref 6965687 // AnimationFrameCallbackProvider
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "By default, the Choreographer is used to provide timing for frame callbacks. A custom
provider can be used here to provide different timing pulse.
"
      end

      operation 77359031 "getProvider"
	private return_type class_ref 6965687 // AnimationFrameCallbackProvider
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77359159 "addAnimationFrameCallback"
	public explicit_return_type "void"
	nparams 2
	  param in name "callback" type class_ref 6965559 // AnimationFrameCallback
	  param in name "delay" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Register to get a callback on the next frame after the delay.
"
      end

      operation 77359287 "addOneShotCommitCallback"
	public explicit_return_type "void"
	nparams 1
	  param in name "callback" type class_ref 6965559 // AnimationFrameCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Register to get a one shot callback for frame commit timing. Frame commit timing is the
time *after* traversals are done, as opposed to the animation frame timing, which is
before any traversals. This timing can be used to adjust the start time of an animation
when expensive traversals create big delta between the animation frame timing and the time
that animation is first shown on screen.

Note this should only be called when the animation has already registered to receive
animation frame callbacks. This callback will be guaranteed to happen *after* the next
animation frame callback.
"
      end

      operation 77359415 "removeCallback"
	public explicit_return_type "void"
	nparams 1
	  param inout name "callback" type class_ref 6965559 // AnimationFrameCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the given callback from the list, so it will no longer be called for frame related
timing.
"
      end

      operation 77359543 "doAnimationFrame"
	private explicit_return_type "void"
	nparams 1
	  param in name "frameTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77359671 "commitAnimationFrame"
	private explicit_return_type "void"
	nparams 2
	  param inout name "callback" type class_ref 6965559 // AnimationFrameCallback
	  param in name "frameTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77359799 "isCallbackDue"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "callback" type class_ref 6965559 // AnimationFrameCallback
	  param in name "currentTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove the callbacks from mDelayedCallbackStartTime once they have passed the initial delay
so that they can start getting frame callbacks.

@return true if they have passed the initial delay or have no delay, false otherwise.
"
      end

      operation 77359927 "getAnimationCount"
	class_operation public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the number of callbacks that have registered for frame callbacks.
"
      end

      operation 77360055 "setFrameDelay"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "delay" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77360183 "getFrameDelay"
	class_operation public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77360311 "autoCancelBasedOn"
	package explicit_return_type "void"
	nparams 1
	  param inout name "objectAnimator" type class_ref 6966071 // ObjectAnimator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77360439 "cleanUpList"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77360567 "getCallbackSize"
	private explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 6966199 "MyFrameCallbackProvider"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 15015223 // <realization>
	  relation 15015223 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 15015223 // <realization>
	    b parent class_ref 6965687 // AnimationFrameCallbackProvider
	end

	classrelation 15015351 // mChoreographer (<unidirectional association>)
	  relation 15015351 --->
	    a role_name "mChoreographer" init_value " Choreographer.getInstance()" const_relation package
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 15015351 // mChoreographer (<unidirectional association>)
	    b parent class_ref 6965815 // Choreographer
	end

	operation 77360695 "postFrameCallback"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "callback" type class_ref 6965943 // FrameCallback
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 77360823 "postCommitCallback"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "runnable" explicit_type "Runnable"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 77360951 "getFrameTime"
	  public explicit_return_type "long"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 77361079 "getFrameDelay"
	  public explicit_return_type "long"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 77361207 "setFrameDelay"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "delay" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 6966071 "ObjectAnimator"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This subclass of {@link ValueAnimator} provides support for animating properties on target objects.
The constructors of this class take parameters to define the target object that will be animated
as well as the name of the property that will be animated. Appropriate set/get functions
are then determined internally and the animation will call these functions as necessary to
animate the property.

<p>Animators can be created from either code or resource files, as shown here:</p>

{@sample development/samples/ApiDemos/res/anim/object_animator.xml ObjectAnimatorResources}

<p>When using resource files, it is possible to use {@link PropertyValuesHolder} and
{@link Keyframe} to create more complex animations. Using PropertyValuesHolders
allows animators to animate several properties in parallel, as shown in this sample:</p>

{@sample development/samples/ApiDemos/res/anim/object_animator_pvh.xml
PropertyValuesHolderResources}

<p>Using Keyframes allows animations to follow more complex paths from the start
to the end values. Note that you can specify explicit fractional values (from 0 to 1) for
each keyframe to determine when, in the overall duration, the animation should arrive at that
value. Alternatively, you can leave the fractions off and the keyframes will be equally
distributed within the total duration. Also, a keyframe with no value will derive its value
from the target object when the animator starts, just like animators with only one
value specified. In addition, an optional interpolator can be specified. The interpolator will
be applied on the interval between the keyframe that the interpolator is set on and the previous
keyframe. When no interpolator is supplied, the default {@link AccelerateDecelerateInterpolator}
will be used. </p>

{@sample development/samples/ApiDemos/res/anim/object_animator_pvh_kf_interpolated.xml KeyframeResources}

<div class=\"special reference\">
<h3>Developer Guides</h3>
<p>For more information about animating with {@code ObjectAnimator}, read the
<a href=\"{@docRoot}guide/topics/graphics/prop-animation.html#object-animator\">Property
Animation</a> developer guide.</p>
</div>

@see #setPropertyName(String)

"
      classrelation 15030583 // <generalisation>
	relation 15030583 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15030583 // <generalisation>
	  b parent class_ref 6967863 // ValueAnimator
      end

      attribute 24012599 "DBG"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 15031095 // mProperty (<unidirectional association>)
	relation 15031095 --->
	  a role_name "mProperty" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15031095 // mProperty (<unidirectional association>)
	  b parent class_ref 6950455 // Property
      end

      attribute 24012727 "mAutoCancel"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 77413559 "setPropertyName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "propertyName" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the name of the property that will be animated. This name is used to derive
a setter function that will be called to set animated values.
For example, a property name of <code>foo</code> will result
in a call to the function <code>setFoo()</code> on the target object. If either
<code>valueFrom</code> or <code>valueTo</code> is null, then a getter function will
also be derived and called.

<p>For best performance of the mechanism that calls the setter function determined by the
name of the property being animated, use <code>float</code> or <code>int</code> typed values,
and make the setter function for those properties have a <code>void</code> return value. This
will cause the code to take an optimized path for these constrained circumstances. Other
property types and return types will work, but will have more overhead in processing
the requests due to normal reflection mechanisms.</p>

<p>Note that the setter function derived from this property name
must take the same parameter type as the
<code>valueFrom</code> and <code>valueTo</code> properties, otherwise the call to
the setter function will fail.</p>

<p>If this ObjectAnimator has been set up to animate several properties together,
using more than one PropertyValuesHolder objects, then setting the propertyName simply
sets the propertyName in the first of those PropertyValuesHolder objects.</p>

@param propertyName The name of the property being animated. Should not be null.
"
      end

      operation 77413687 "setProperty"
	public explicit_return_type "void"
	nparams 1
	  param inout name "property" type class_ref 6950455 // Property
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the property that will be animated. Property objects will take precedence over
properties specified by the {@link #setPropertyName(String)} method. Animations should
be set up to use one or the other, not both.

@param property The property being animated. Should not be null.
"
      end

      operation 77413815 "getPropertyName"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Nullable
"
	
	
	
	comment "Gets the name of the property that will be animated. This name will be used to derive
a setter function that will be called to set animated values.
For example, a property name of <code>foo</code> will result
in a call to the function <code>setFoo()</code> on the target object. If either
<code>valueFrom</code> or <code>valueTo</code> is null, then a getter function will
also be derived and called.

<p>If this animator was created with a {@link Property} object instead of the
string name of a property, then this method will return the {@link
Property#getName() name} of that Property object instead. If this animator was
created with one or more {@link PropertyValuesHolder} objects, then this method
will return the {@link PropertyValuesHolder#getPropertyName() name} of that
object (if there was just one) or a comma-separated list of all of the
names (if there are more than one).</p>
"
      end

      operation 77413943 "getNameForTrace"
	package explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77414071 "ObjectAnimator"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new ObjectAnimator object. This default constructor is primarily for
use internally; the other constructors which take parameters are more generally
useful.
"
      end

      operation 77414199 "ObjectAnimator"
	private explicit_return_type ""
	nparams 2
	  param inout name "target" explicit_type "Object"
	  param inout name "propertyName" explicit_type "String"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Private utility constructor that initializes the target object and name of the
property being animated.

@param target The object whose property is to be animated. This object should
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter.
@param propertyName The name of the property being animated.
"
      end

      operation 77414327 "ObjectAnimator"
	private explicit_return_type ""
	nparams 2
	  param inout name "target" explicit_type "T"
	  param inout name "property" type class_ref 6950455 // Property
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}<T> ${name}${(}${t0} ${p0}, ${t1}<T, ?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Private utility constructor that initializes the target object and property being animated.

@param target The object whose property is to be animated.
@param property The property being animated.
"
      end

      operation 77414455 "ofInt"
	class_operation public return_type class_ref 6966071 // ObjectAnimator
	nparams 3
	  param inout name "target" explicit_type "Object"
	  param inout name "propertyName" explicit_type "String"
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates between int values. A single
value implies that that value is the one being animated to, in which case the start value
will be derived from the property being animated and the target object when {@link #start()}
is called for the first time. Two values imply starting and ending values. More than two
values imply a starting value, values to animate through along the way, and an ending value
(these values will be distributed evenly across the duration of the animation).

@param target The object whose property is to be animated. This object should
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter.
@param propertyName The name of the property being animated.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values.
"
      end

      operation 77414583 "ofInt"
	class_operation public return_type class_ref 6966071 // ObjectAnimator
	nparams 4
	  param inout name "target" explicit_type "Object"
	  param inout name "xPropertyName" explicit_type "String"
	  param inout name "yPropertyName" explicit_type "String"
	  param inout name "path" type class_ref 5842743 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates coordinates along a <code>Path</code>
using two properties. A <code>Path</code></> animation moves in two dimensions, animating
coordinates <code>(x, y)</code> together to follow the line. In this variation, the
coordinates are integers that are set to separate properties designated by
<code>xPropertyName</code> and <code>yPropertyName</code>.

@param target The object whose properties are to be animated. This object should
              have public methods on it called <code>setNameX()</code> and
              <code>setNameY</code>, where <code>nameX</code> and <code>nameY</code>
              are the value of <code>xPropertyName</code> and <code>yPropertyName</code>
              parameters, respectively.
@param xPropertyName The name of the property for the x coordinate being animated.
@param yPropertyName The name of the property for the y coordinate being animated.
@param path The <code>Path</code> to animate values along.
@return An ObjectAnimator object that is set up to animate along <code>path</code>.
"
      end

      operation 77414711 "ofInt"
	class_operation public return_type class_ref 6966071 // ObjectAnimator
	nparams 3
	  param inout name "target" explicit_type "T"
	  param inout name "property" type class_ref 6950455 // Property
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T, Integer> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates between int values. A single
value implies that that value is the one being animated to, in which case the start value
will be derived from the property being animated and the target object when {@link #start()}
is called for the first time. Two values imply starting and ending values. More than two
values imply a starting value, values to animate through along the way, and an ending value
(these values will be distributed evenly across the duration of the animation).

@param target The object whose property is to be animated.
@param property The property being animated.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values.
"
      end

      operation 77414839 "ofInt"
	class_operation public return_type class_ref 6966071 // ObjectAnimator
	nparams 4
	  param inout name "target" explicit_type "T"
	  param inout name "xProperty" type class_ref 6950455 // Property
	  param inout name "yProperty" type class_ref 6950455 // Property
	  param inout name "path" type class_ref 5842743 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T, Integer> ${p1}, ${t2}<T, Integer> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates coordinates along a <code>Path</code>
using two properties.  A <code>Path</code></> animation moves in two dimensions, animating
coordinates <code>(x, y)</code> together to follow the line. In this variation, the
coordinates are integers that are set to separate properties, <code>xProperty</code> and
<code>yProperty</code>.

@param target The object whose properties are to be animated.
@param xProperty The property for the x coordinate being animated.
@param yProperty The property for the y coordinate being animated.
@param path The <code>Path</code> to animate values along.
@return An ObjectAnimator object that is set up to animate along <code>path</code>.
"
      end

      operation 77414967 "ofMultiInt"
	class_operation public return_type class_ref 6966071 // ObjectAnimator
	nparams 3
	  param inout name "target" explicit_type "Object"
	  param inout name "propertyName" explicit_type "String"
	  param inout name "values" explicit_type "int"
	multiplicity "[][]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[][] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates over int values for a multiple
parameters setter. Only public methods that take only int parameters are supported.
Each <code>int[]</code> contains a complete set of parameters to the setter method.
At least two <code>int[]</code> values must be provided, a start and end. More than two
values imply a starting value, values to animate through along the way, and an ending
value (these values will be distributed evenly across the duration of the animation).

@param target The object whose property is to be animated. This object may
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter. <code>propertyName</code> may also
be the case-sensitive complete name of the public setter method.
@param propertyName The name of the property being animated or the name of the setter method.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values.
"
      end

      operation 77415095 "ofMultiInt"
	class_operation public return_type class_ref 6966071 // ObjectAnimator
	nparams 3
	  param inout name "target" explicit_type "Object"
	  param inout name "propertyName" explicit_type "String"
	  param inout name "path" type class_ref 5842743 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates the target using a multi-int setter
along the given <code>Path</code>. A <code>Path</code></> animation moves in two dimensions,
animating coordinates <code>(x, y)</code> together to follow the line. In this variation, the
coordinates are integer x and y coordinates used in the first and second parameter of the
setter, respectively.

@param target The object whose property is to be animated. This object may
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter. <code>propertyName</code> may also
be the case-sensitive complete name of the public setter method.
@param propertyName The name of the property being animated or the name of the setter method.
@param path The <code>Path</code> to animate values along.
@return An ObjectAnimator object that is set up to animate along <code>path</code>.
"
      end

      operation 77415223 "ofMultiInt"
	class_operation public return_type class_ref 6966071 // ObjectAnimator
	nparams 5
	  param inout name "target" explicit_type "Object"
	  param inout name "propertyName" explicit_type "String"
	  param inout name "converter" type class_ref 6969015 // TypeConverter
	  param inout name "evaluator" type class_ref 6967735 // TypeEvaluator
	  param inout name "" explicit_type "T...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<T, int[]> ${p2}, ${t3}<T> ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SafeVarargs
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates over values for a multiple int
parameters setter. Only public methods that take only int parameters are supported.
<p>At least two values must be provided, a start and end. More than two
values imply a starting value, values to animate through along the way, and an ending
value (these values will be distributed evenly across the duration of the animation).</p>

@param target The object whose property is to be animated. This object may
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter. <code>propertyName</code> may also
be the case-sensitive complete name of the public setter method.
@param propertyName The name of the property being animated or the name of the setter method.
@param converter Converts T objects into int parameters for the multi-value setter.
@param evaluator A TypeEvaluator that will be called on each animation frame to
provide the necessary interpolation between the Object values to derive the animated
value.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values.
"
      end

      operation 77415351 "ofArgb"
	class_operation public return_type class_ref 6966071 // ObjectAnimator
	nparams 3
	  param inout name "target" explicit_type "Object"
	  param inout name "propertyName" explicit_type "String"
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates between color values. A single
value implies that that value is the one being animated to, in which case the start value
will be derived from the property being animated and the target object when {@link #start()}
is called for the first time. Two values imply starting and ending values. More than two
values imply a starting value, values to animate through along the way, and an ending value
(these values will be distributed evenly across the duration of the animation).

@param target The object whose property is to be animated. This object should
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter.
@param propertyName The name of the property being animated.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values.
"
      end

      operation 77415479 "ofArgb"
	class_operation public return_type class_ref 6966071 // ObjectAnimator
	nparams 3
	  param inout name "target" explicit_type "T"
	  param inout name "property" type class_ref 6950455 // Property
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T, Integer> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates between color values. A single
value implies that that value is the one being animated to, in which case the start value
will be derived from the property being animated and the target object when {@link #start()}
is called for the first time. Two values imply starting and ending values. More than two
values imply a starting value, values to animate through along the way, and an ending value
(these values will be distributed evenly across the duration of the animation).

@param target The object whose property is to be animated.
@param property The property being animated.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values.
"
      end

      operation 77415607 "ofFloat"
	class_operation public return_type class_ref 6966071 // ObjectAnimator
	nparams 3
	  param inout name "target" explicit_type "Object"
	  param inout name "propertyName" explicit_type "String"
	  param inout name "" explicit_type "float...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates between float values. A single
value implies that that value is the one being animated to, in which case the start value
will be derived from the property being animated and the target object when {@link #start()}
is called for the first time. Two values imply starting and ending values. More than two
values imply a starting value, values to animate through along the way, and an ending value
(these values will be distributed evenly across the duration of the animation).

@param target The object whose property is to be animated. This object should
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter.
@param propertyName The name of the property being animated.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values.
"
      end

      operation 77415735 "ofFloat"
	class_operation public return_type class_ref 6966071 // ObjectAnimator
	nparams 4
	  param inout name "target" explicit_type "Object"
	  param inout name "xPropertyName" explicit_type "String"
	  param inout name "yPropertyName" explicit_type "String"
	  param inout name "path" type class_ref 5842743 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates coordinates along a <code>Path</code>
using two properties. A <code>Path</code></> animation moves in two dimensions, animating
coordinates <code>(x, y)</code> together to follow the line. In this variation, the
coordinates are floats that are set to separate properties designated by
<code>xPropertyName</code> and <code>yPropertyName</code>.

@param target The object whose properties are to be animated. This object should
              have public methods on it called <code>setNameX()</code> and
              <code>setNameY</code>, where <code>nameX</code> and <code>nameY</code>
              are the value of the <code>xPropertyName</code> and <code>yPropertyName</code>
              parameters, respectively.
@param xPropertyName The name of the property for the x coordinate being animated.
@param yPropertyName The name of the property for the y coordinate being animated.
@param path The <code>Path</code> to animate values along.
@return An ObjectAnimator object that is set up to animate along <code>path</code>.
"
      end

      operation 77415863 "ofFloat"
	class_operation public return_type class_ref 6966071 // ObjectAnimator
	nparams 3
	  param inout name "target" explicit_type "T"
	  param inout name "property" type class_ref 6950455 // Property
	  param inout name "" explicit_type "float...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T, Float> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates between float values. A single
value implies that that value is the one being animated to, in which case the start value
will be derived from the property being animated and the target object when {@link #start()}
is called for the first time. Two values imply starting and ending values. More than two
values imply a starting value, values to animate through along the way, and an ending value
(these values will be distributed evenly across the duration of the animation).

@param target The object whose property is to be animated.
@param property The property being animated.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values.
"
      end

      operation 77415991 "ofFloat"
	class_operation public return_type class_ref 6966071 // ObjectAnimator
	nparams 4
	  param inout name "target" explicit_type "T"
	  param inout name "xProperty" type class_ref 6950455 // Property
	  param inout name "yProperty" type class_ref 6950455 // Property
	  param inout name "path" type class_ref 5842743 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T, Float> ${p1}, ${t2}<T, Float> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates coordinates along a <code>Path</code>
using two properties. A <code>Path</code></> animation moves in two dimensions, animating
coordinates <code>(x, y)</code> together to follow the line. In this variation, the
coordinates are floats that are set to separate properties, <code>xProperty</code> and
<code>yProperty</code>.

@param target The object whose properties are to be animated.
@param xProperty The property for the x coordinate being animated.
@param yProperty The property for the y coordinate being animated.
@param path The <code>Path</code> to animate values along.
@return An ObjectAnimator object that is set up to animate along <code>path</code>.
"
      end

      operation 77416119 "ofMultiFloat"
	class_operation public return_type class_ref 6966071 // ObjectAnimator
	nparams 3
	  param inout name "target" explicit_type "Object"
	  param inout name "propertyName" explicit_type "String"
	  param inout name "values" explicit_type "float"
	multiplicity "[][]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[][] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates over float values for a multiple
parameters setter. Only public methods that take only float parameters are supported.
Each <code>float[]</code> contains a complete set of parameters to the setter method.
At least two <code>float[]</code> values must be provided, a start and end. More than two
values imply a starting value, values to animate through along the way, and an ending
value (these values will be distributed evenly across the duration of the animation).

@param target The object whose property is to be animated. This object may
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter. <code>propertyName</code> may also
be the case-sensitive complete name of the public setter method.
@param propertyName The name of the property being animated or the name of the setter method.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values.
"
      end

      operation 77416247 "ofMultiFloat"
	class_operation public return_type class_ref 6966071 // ObjectAnimator
	nparams 3
	  param inout name "target" explicit_type "Object"
	  param inout name "propertyName" explicit_type "String"
	  param inout name "path" type class_ref 5842743 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates the target using a multi-float setter
along the given <code>Path</code>. A <code>Path</code></> animation moves in two dimensions,
animating coordinates <code>(x, y)</code> together to follow the line. In this variation, the
coordinates are float x and y coordinates used in the first and second parameter of the
setter, respectively.

@param target The object whose property is to be animated. This object may
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter. <code>propertyName</code> may also
be the case-sensitive complete name of the public setter method.
@param propertyName The name of the property being animated or the name of the setter method.
@param path The <code>Path</code> to animate values along.
@return An ObjectAnimator object that is set up to animate along <code>path</code>.
"
      end

      operation 77416375 "ofMultiFloat"
	class_operation public return_type class_ref 6966071 // ObjectAnimator
	nparams 5
	  param inout name "target" explicit_type "Object"
	  param inout name "propertyName" explicit_type "String"
	  param inout name "converter" type class_ref 6969015 // TypeConverter
	  param inout name "evaluator" type class_ref 6967735 // TypeEvaluator
	  param inout name "" explicit_type "T...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<T, float[]> ${p2}, ${t3}<T> ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SafeVarargs
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates over values for a multiple float
parameters setter. Only public methods that take only float parameters are supported.
<p>At least two values must be provided, a start and end. More than two
values imply a starting value, values to animate through along the way, and an ending
value (these values will be distributed evenly across the duration of the animation).</p>

@param target The object whose property is to be animated. This object may
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter. <code>propertyName</code> may also
be the case-sensitive complete name of the public setter method.
@param propertyName The name of the property being animated or the name of the setter method.
@param converter Converts T objects into float parameters for the multi-value setter.
@param evaluator A TypeEvaluator that will be called on each animation frame to
provide the necessary interpolation between the Object values to derive the animated
value.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values.
"
      end

      operation 77416503 "ofObject"
	class_operation public return_type class_ref 6966071 // ObjectAnimator
	nparams 4
	  param inout name "target" explicit_type "Object"
	  param inout name "propertyName" explicit_type "String"
	  param inout name "evaluator" type class_ref 6967735 // TypeEvaluator
	  param inout name "" explicit_type "Object...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates between Object values. A single
value implies that that value is the one being animated to, in which case the start value
will be derived from the property being animated and the target object when {@link #start()}
is called for the first time. Two values imply starting and ending values. More than two
values imply a starting value, values to animate through along the way, and an ending value
(these values will be distributed evenly across the duration of the animation).

<p><strong>Note:</strong> The values are stored as references to the original
objects, which means that changes to those objects after this method is called will
affect the values on the animator. If the objects will be mutated externally after
this method is called, callers should pass a copy of those objects instead.

@param target The object whose property is to be animated. This object should
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter.
@param propertyName The name of the property being animated.
@param evaluator A TypeEvaluator that will be called on each animation frame to
provide the necessary interpolation between the Object values to derive the animated
value.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values.
"
      end

      operation 77416631 "ofObject"
	class_operation public return_type class_ref 6966071 // ObjectAnimator
	nparams 4
	  param inout name "target" explicit_type "Object"
	  param inout name "propertyName" explicit_type "String"
	  param inout name "converter" type class_ref 6969015 // TypeConverter
	  param inout name "path" type class_ref 5842743 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, @Nullable ${t2}<PointF, ?> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@NonNull
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates a property along a <code>Path</code>.
A <code>Path</code></> animation moves in two dimensions, animating coordinates
<code>(x, y)</code> together to follow the line. This variant animates the coordinates
in a <code>PointF</code> to follow the <code>Path</code>. If the <code>Property</code>
associated with <code>propertyName</code> uses a type other than <code>PointF</code>,
<code>converter</code> can be used to change from <code>PointF</code> to the type
associated with the <code>Property</code>.

@param target The object whose property is to be animated. This object should
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter.
@param propertyName The name of the property being animated.
@param converter Converts a PointF to the type associated with the setter. May be
                 null if conversion is unnecessary.
@param path The <code>Path</code> to animate values along.
@return An ObjectAnimator object that is set up to animate along <code>path</code>.
"
      end

      operation 77416759 "ofObject"
	class_operation public return_type class_ref 6966071 // ObjectAnimator
	nparams 4
	  param inout name "target" explicit_type "T"
	  param inout name "property" type class_ref 6950455 // Property
	  param inout name "evaluator" type class_ref 6967735 // TypeEvaluator
	  param inout name "" explicit_type "V...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T, V> ${type} ${name}${(}${t0} ${p0}, ${t1}<T, V> ${p1}, ${t2}<V> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@NonNull
@SafeVarargs
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates between Object values. A single
value implies that that value is the one being animated to, in which case the start value
will be derived from the property being animated and the target object when {@link #start()}
is called for the first time. Two values imply starting and ending values. More than two
values imply a starting value, values to animate through along the way, and an ending value
(these values will be distributed evenly across the duration of the animation).

<p><strong>Note:</strong> The values are stored as references to the original
objects, which means that changes to those objects after this method is called will
affect the values on the animator. If the objects will be mutated externally after
this method is called, callers should pass a copy of those objects instead.

@param target The object whose property is to be animated.
@param property The property being animated.
@param evaluator A TypeEvaluator that will be called on each animation frame to
provide the necessary interpolation between the Object values to derive the animated
value.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values.
"
      end

      operation 77416887 "ofObject"
	class_operation public return_type class_ref 6966071 // ObjectAnimator
	nparams 5
	  param inout name "target" explicit_type "T"
	  param inout name "property" type class_ref 6950455 // Property
	  param inout name "converter" type class_ref 6969015 // TypeConverter
	  param inout name "evaluator" type class_ref 6967735 // TypeEvaluator
	  param inout name "" explicit_type "V...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T, V, P> ${type} ${name}${(}${t0} ${p0}, ${t1}<T, P> ${p1}, ${t2}<V, P> ${p2}, ${t3}<V> ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@NonNull
@SafeVarargs
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates between Object values. A single
value implies that that value is the one being animated to, in which case the start value
will be derived from the property being animated and the target object when {@link #start()}
is called for the first time. Two values imply starting and ending values. More than two
values imply a starting value, values to animate through along the way, and an ending value
(these values will be distributed evenly across the duration of the animation).
This variant supplies a <code>TypeConverter</code> to convert from the animated values to the
type of the property. If only one value is supplied, the <code>TypeConverter</code> must be a
{@link android.animation.BidirectionalTypeConverter} to retrieve the current value.

<p><strong>Note:</strong> The values are stored as references to the original
objects, which means that changes to those objects after this method is called will
affect the values on the animator. If the objects will be mutated externally after
this method is called, callers should pass a copy of those objects instead.

@param target The object whose property is to be animated.
@param property The property being animated.
@param converter Converts the animated object to the Property type.
@param evaluator A TypeEvaluator that will be called on each animation frame to
provide the necessary interpolation between the Object values to derive the animated
value.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values.
"
      end

      operation 77417015 "ofObject"
	class_operation public return_type class_ref 6966071 // ObjectAnimator
	nparams 4
	  param inout name "target" explicit_type "T"
	  param inout name "property" type class_ref 6950455 // Property
	  param inout name "converter" type class_ref 6969015 // TypeConverter
	  param inout name "path" type class_ref 5842743 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T, V> ${type} ${name}${(}${t0} ${p0}, @NonNull ${t1}<T, V> ${p1}, @Nullable ${t2}<PointF, V> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@NonNull
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates a property along a <code>Path</code>.
A <code>Path</code></> animation moves in two dimensions, animating coordinates
<code>(x, y)</code> together to follow the line. This variant animates the coordinates
in a <code>PointF</code> to follow the <code>Path</code>. If <code>property</code>
uses a type other than <code>PointF</code>, <code>converter</code> can be used to change
from <code>PointF</code> to the type associated with the <code>Property</code>.

<p>The PointF passed to <code>converter</code> or <code>property</code>, if
<code>converter</code> is <code>null</code>, is reused on each animation frame and should
not be stored by the setter or TypeConverter.</p>

@param target The object whose property is to be animated.
@param property The property being animated. Should not be null.
@param converter Converts a PointF to the type associated with the setter. May be
                 null if conversion is unnecessary.
@param path The <code>Path</code> to animate values along.
@return An ObjectAnimator object that is set up to animate along <code>path</code>.
"
      end

      operation 77417143 "ofPropertyValuesHolder"
	class_operation public return_type class_ref 6966071 // ObjectAnimator
	nparams 2
	  param inout name "target" explicit_type "Object"
	  param inout name "" explicit_type "PropertyValuesHolder...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@NonNull
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates between the sets of values specified
in <code>PropertyValueHolder</code> objects. This variant should be used when animating
several properties at once with the same ObjectAnimator, since PropertyValuesHolder allows
you to associate a set of animation values with a property name.

@param target The object whose property is to be animated. Depending on how the
PropertyValuesObjects were constructed, the target object should either have the {@link
android.util.Property} objects used to construct the PropertyValuesHolder objects or (if the
PropertyValuesHOlder objects were created with property names) the target object should have
public methods on it called <code>setName()</code>, where <code>name</code> is the name of
the property passed in as the <code>propertyName</code> parameter for each of the
PropertyValuesHolder objects.
@param values A set of PropertyValuesHolder objects whose values will be animated between
over time.
@return An ObjectAnimator object that is set up to animate between the given values.
"
      end

      operation 77417271 "setIntValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77417399 "setFloatValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "float...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77417527 "setObjectValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "Object...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77417655 "setAutoCancel"
	public explicit_return_type "void"
	nparams 1
	  param inout name "cancel" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "autoCancel controls whether an ObjectAnimator will be canceled automatically
when any other ObjectAnimator with the same target and properties is started.
Setting this flag may make it easier to run different animators on the same target
object without having to keep track of whether there are conflicting animators that
need to be manually canceled. Canceling animators must have the same exact set of
target properties, in the same order.

@param cancel Whether future ObjectAnimators with the same target and properties
as this ObjectAnimator will cause this ObjectAnimator to be canceled.
"
      end

      operation 77417783 "hasSameTargetAndProperties"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "anim" type class_ref 6966327 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77417911 "start"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77418039 "shouldAutoCancel"
	package explicit_return_type "boolean"
	nparams 1
	  param inout name "anim" type class_ref 6965559 // AnimationFrameCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77418167 "initAnimation"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallSuper
@Override
"
	
	
	
	comment "This function is called immediately before processing the first animation
frame of an animation. If there is a nonzero <code>startDelay</code>, the
function is called after that delay ends.
It takes care of the final initialization steps for the
animation. This includes setting mEvaluator, if the user has not yet
set it up, and the setter/getter methods, if the user did not supply
them.

 <p>Overriders of this method should call the superclass method to cause
 internal mechanisms to be set up correctly.</p>
"
      end

      operation 77418295 "setDuration"
	public return_type class_ref 6966071 // ObjectAnimator
	nparams 1
	  param in name "duration" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@NonNull
"
	
	
	
	comment "Sets the length of the animation. The default duration is 300 milliseconds.

@param duration The length of the animation, in milliseconds.
@return ObjectAnimator The object called with setDuration(). This return
value makes it easier to compose statements together that construct and then set the
duration, as in
<code>ObjectAnimator.ofInt(target, propertyName, 0, 10).setDuration(500).start()</code>.
"
      end

      operation 77418423 "getTarget"
	public explicit_return_type "Object"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Nullable
"
	
	
	
	comment "The target object whose property will be animated by this animation

@return The object being animated
"
      end

      operation 77418551 "setTarget"
	public explicit_return_type "void"
	nparams 1
	  param inout name "target" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77418679 "setupStartValues"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77418807 "setupEndValues"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77418935 "animateValue"
	package explicit_return_type "void"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallSuper
@Override
"
	
	
	
	comment "This method is called with the elapsed fraction of the animation during every
animation frame. This function turns the elapsed fraction into an interpolated fraction
and then into an animated value (from the evaluator. The function is called mostly during
animation updates, but it is also called when the <code>end()</code>
function is called, to set the final value on the property.

<p>Overrides of this method must call the superclass to perform the calculation
of the animated value.</p>

@param fraction The elapsed fraction of the animation.
"
      end

      operation 77419063 "clone"
	public return_type class_ref 6966071 // ObjectAnimator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77419191 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@NonNull
"
	
	
	
      end
    end

    class 6966327 "Animator"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This is the superclass for classes which provide basic support for animations which can be
started, ended, and have <code>AnimatorListeners</code> added to them.
"
      attribute 23999415 "DURATION_INFINITE"
	class_attribute const_attribute public explicit_type "long"
	init_value " -1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The value used to indicate infinite duration (e.g. when Animators repeat infinitely).

"
      end

      class 6966583 "AnimatorListener"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 77366199 "onAnimationStart"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 6966327 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "<p>Notifies the start of the animation.</p>

@param animation The started animation.
"
	end

	operation 77366327 "onAnimationEnd"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 6966327 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "<p>Notifies the end of the animation. This callback is not invoked
for animations with repeat count set to INFINITE.</p>

@param animation The animation which reached its end.
"
	end

	operation 77366455 "onAnimationCancel"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 6966327 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "<p>Notifies the cancellation of the animation. This callback is not invoked
for animations with repeat count set to INFINITE.</p>

@param animation The animation which was canceled.
"
	end

	operation 77366583 "onAnimationRepeat"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 6966327 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "<p>Notifies the repetition of the animation.</p>

@param animation The animation which was repeated.
"
	end
      end

      classrelation 15015607 // mListeners (<unidirectional association>)
	relation 15015607 --->
	  stereotype "ArrayList"
	  a role_name "mListeners" init_value " null" package
	    comment "The set of listeners to be sent events through the life of an animation.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 15015607 // mListeners (<unidirectional association>)
	  b parent class_ref 6966583 // AnimatorListener
      end

      class 6966711 "AnimatorPauseListener"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 77366711 "onAnimationPause"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 6966327 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "<p>Notifies that the animation was paused.</p>

@param animation The animaton being paused.
@see #pause()
"
	end

	operation 77366839 "onAnimationResume"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 6966327 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "<p>Notifies that the animation was resumed, after being
previously paused.</p>

@param animation The animation being resumed.
@see #resume()
"
	end
      end

      classrelation 15015735 // mPauseListeners (<unidirectional association>)
	relation 15015735 --->
	  stereotype "ArrayList"
	  a role_name "mPauseListeners" init_value " null" package
	    comment "The set of listeners to be sent pause/resume events through the life
of an animation.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 15015735 // mPauseListeners (<unidirectional association>)
	  b parent class_ref 6966711 // AnimatorPauseListener
      end

      attribute 23999543 "mPaused"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Whether this animator is currently in a paused state.

"
      end

      attribute 23999671 "mChangingConfigurations"
	package explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Config
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A set of flags which identify the type of configuration changes that can affect this
Animator. Used by the Animator cache.

"
      end

      class 6966839 "AnimatorConstantState"
	visibility private 
	nactuals 1
	actual class class_ref 6967095 // ConstantState
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 15015991 // <realization>
	  relation 15015991 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 15015991 // <realization>
	    b parent class_ref 6967095 // ConstantState
	end

	classrelation 15016119 // mAnimator (<unidirectional association>)
	  relation 15016119 --->
	    a role_name "mAnimator" const_relation package
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 15016119 // mAnimator (<unidirectional association>)
	    b parent class_ref 6966327 // Animator
	end

	attribute 23999799 "mChangingConf"
	  package explicit_type "int"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  java_annotation "@Config
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 77367607 "AnimatorConstantState"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "animator" type class_ref 6966327 // Animator
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77367735 "getChangingConfigurations"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
@Config
"
	  
	  
	  
	end

	operation 77367863 "newInstance"
	  public return_type class_ref 6966327 // Animator
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      classrelation 15015863 // mConstantState (<unidirectional association>)
	relation 15015863 --->
	  a role_name "mConstantState" private
	    comment "
If this animator is inflated from a constant state, keep a reference to it so that
ConstantState will not be garbage collected until this animator is collected

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15015863 // mConstantState (<unidirectional association>)
	  b parent class_ref 6966839 // AnimatorConstantState
      end

      operation 77362231 "start"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Starts this animation. If the animation has a nonzero startDelay, the animation will start
running after that delay elapses. A non-delayed animation will have its initial
value(s) set immediately, followed by calls to
{@link AnimatorListener#onAnimationStart(Animator)} for any listeners of this animator.

<p>The animation started by calling this method will be run on the thread that called
this method. This thread should have a Looper on it (a runtime exception will be thrown if
this is not the case). Also, if the animation will animate
properties of objects in the view hierarchy, then the calling thread should be the UI
thread for that view hierarchy.</p>

"
      end

      operation 77362359 "cancel"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Cancels the animation. Unlike {@link #end()}, <code>cancel()</code> causes the animation to
stop in its tracks, sending an
{@link android.animation.Animator.AnimatorListener#onAnimationCancel(Animator)} to
its listeners, followed by an
{@link android.animation.Animator.AnimatorListener#onAnimationEnd(Animator)} message.

<p>This method must be called on the thread that is running the animation.</p>
"
      end

      operation 77362487 "end"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ends the animation. This causes the animation to assign the end value of the property being
animated, then calling the
{@link android.animation.Animator.AnimatorListener#onAnimationEnd(Animator)} method on
its listeners.

<p>This method must be called on the thread that is running the animation.</p>
"
      end

      operation 77362615 "pause"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Pauses a running animation. This method should only be called on the same thread on
which the animation was started. If the animation has not yet been {@link
#isStarted() started} or has since ended, then the call is ignored. Paused
animations can be resumed by calling {@link #resume()}.

@see #resume()
@see #isPaused()
@see AnimatorPauseListener
"
      end

      operation 77362743 "resume"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resumes a paused animation, causing the animator to pick up where it left off
when it was paused. This method should only be called on the same thread on
which the animation was started. Calls to resume() on an animator that is
not currently paused will be ignored.

@see #pause()
@see #isPaused()
@see AnimatorPauseListener
"
      end

      operation 77362871 "isPaused"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether this animator is currently in a paused state.

@return True if the animator is currently paused, false otherwise.

@see #pause()
@see #resume()
"
      end

      operation 77362999 "getStartDelay"
	abstract public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The amount of time, in milliseconds, to delay processing the animation
after {@link #start()} is called.

@return the number of milliseconds to delay running the animation
"
      end

      operation 77363127 "setStartDelay"
	abstract public explicit_return_type "void"
	nparams 1
	  param in name "startDelay" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The amount of time, in milliseconds, to delay processing the animation
after {@link #start()} is called.

@param startDelay The amount of the delay, in milliseconds
"
      end

      operation 77363255 "setDuration"
	abstract public return_type class_ref 6966327 // Animator
	nparams 1
	  param in name "duration" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the duration of the animation.

@param duration The length of the animation, in milliseconds.
"
      end

      operation 77363383 "getDuration"
	abstract public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the duration of the animation.

@return The length of the animation, in milliseconds.
"
      end

      operation 77363511 "getTotalDuration"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the total duration of the animation, accounting for animation sequences, start delay,
and repeating. Return {@link #DURATION_INFINITE} if the duration is infinite.

@return  Total time an animation takes to finish, starting from the time {@link #start()}
         is called. {@link #DURATION_INFINITE} will be returned if the animation or any
         child animation repeats infinite times.
"
      end

      operation 77363639 "setInterpolator"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 6966967 // TimeInterpolator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The time interpolator used in calculating the elapsed fraction of the
animation. The interpolator determines whether the animation runs with
linear or non-linear motion, such as acceleration and deceleration. The
default value is {@link android.view.animation.AccelerateDecelerateInterpolator}.

@param value the interpolator to be used by this animation
"
      end

      operation 77363767 "getInterpolator"
	public return_type class_ref 6966967 // TimeInterpolator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the timing interpolator that this animation uses.

@return The timing interpolator for this animation.
"
      end

      operation 77363895 "isRunning"
	abstract public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether this Animator is currently running (having been started and gone past any
initial startDelay period and not yet ended).

@return Whether the Animator is running.
"
      end

      operation 77364023 "isStarted"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether this Animator has been started and not yet ended. For reusable
Animators (which most Animators are, apart from the one-shot animator produced by
{@link android.view.ViewAnimationUtils#createCircularReveal(
android.view.View, int, int, float, float) createCircularReveal()}),
this state is a superset of {@link #isRunning()}, because an Animator with a
nonzero {@link #getStartDelay() startDelay} will return true for {@link #isStarted()} during
the delay phase, whereas {@link #isRunning()} will return true only after the delay phase
is complete. Non-reusable animators will always return true after they have been
started, because they cannot return to a non-started state.

@return Whether the Animator has been started and not yet ended.
"
      end

      operation 77364151 "addListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 6966583 // AnimatorListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a listener to the set of listeners that are sent events through the life of an
animation, such as start, repeat, and end.

@param listener the listener to be added to the current set of listeners for this animation.
"
      end

      operation 77364279 "removeListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 6966583 // AnimatorListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a listener from the set listening to this animation.

@param listener the listener to be removed from the current set of listeners for this
                animation.
"
      end

      operation 77364407 "getListeners"
	public return_type class_ref 6966583 // AnimatorListener
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}ArrayList<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the set of {@link android.animation.Animator.AnimatorListener} objects that are currently
listening for events on this <code>Animator</code> object.

@return ArrayList<AnimatorListener> The set of listeners.
"
      end

      operation 77364535 "addPauseListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 6966711 // AnimatorPauseListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a pause listener to this animator.

@param listener the listener to be added to the current set of pause listeners
for this animation.
"
      end

      operation 77364663 "removePauseListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 6966711 // AnimatorPauseListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a pause listener from the set listening to this animation.

@param listener the listener to be removed from the current set of pause
listeners for this animation.
"
      end

      operation 77364791 "removeAllListeners"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all {@link #addListener(android.animation.Animator.AnimatorListener) listeners}
and {@link #addPauseListener(android.animation.Animator.AnimatorPauseListener)
pauseListeners} from this object.
"
      end

      operation 77364919 "getChangingConfigurations"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Config
"
	
	
	
	comment "Return a mask of the configuration parameters for which this animator may change, requiring
that it should be re-created from Resources. The default implementation returns whatever
value was provided through setChangingConfigurations(int) or 0 by default.

@return Returns a mask of the changing configuration parameters, as defined by
{@link android.content.pm.ActivityInfo}.
@see android.content.pm.ActivityInfo
@hide
"
      end

      operation 77365047 "setChangingConfigurations"
	public explicit_return_type "void"
	nparams 1
	  param in name "configs" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Config ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a mask of the configuration parameters for which this animator may change, requiring
that it be re-created from resource.

@param configs A mask of the changing configuration parameters, as
defined by {@link android.content.pm.ActivityInfo}.

@see android.content.pm.ActivityInfo
@hide
"
      end

      operation 77365175 "appendChangingConfigurations"
	public explicit_return_type "void"
	nparams 1
	  param in name "configs" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Config ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the changing configurations value to the union of the current changing configurations
and the provided configs.
This method is called while loading the animator.
@hide
"
      end

      operation 77365303 "createConstantState"
	public return_type class_ref 6967095 // ConstantState
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Animator> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a {@link android.content.res.ConstantState} instance that holds the shared state of
this Animator.
<p>
This constant state is used to create new instances of this animator when needed, instead
of re-loading it from resources. Default implementation creates a new
{@link AnimatorConstantState}. You can override this method to provide your custom logic or
return null if you don't want this animator to be cached.

@return The ConfigurationBoundResourceCache.BaseConstantState associated to this Animator.
@see android.content.res.ConstantState
@see #clone()
@hide
"
      end

      operation 77365431 "clone"
	public return_type class_ref 6966327 // Animator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77365559 "setupStartValues"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method tells the object to use appropriate information to extract
starting values for the animation. For example, a AnimatorSet object will pass
this call to its child objects to tell them to set up the values. A
ObjectAnimator object will use the information it has about its target object
and PropertyValuesHolder objects to get the start values for its properties.
A ValueAnimator object will ignore the request since it does not have enough
information (such as a target object) to gather these values.
"
      end

      operation 77365687 "setupEndValues"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method tells the object to use appropriate information to extract
ending values for the animation. For example, a AnimatorSet object will pass
this call to its child objects to tell them to set up the values. A
ObjectAnimator object will use the information it has about its target object
and PropertyValuesHolder objects to get the start values for its properties.
A ValueAnimator object will ignore the request since it does not have enough
information (such as a target object) to gather these values.
"
      end

      operation 77365815 "setTarget"
	public explicit_return_type "void"
	nparams 1
	  param inout name "target" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the target object whose property will be animated by this animation. Not all subclasses
operate on target objects (for example, {@link ValueAnimator}, but this method
is on the superclass for the convenience of dealing generically with those subclasses
that do handle targets.
<p>
<strong>Note:</strong> The target is stored as a weak reference internally to avoid leaking
resources by having animators directly reference old targets. Therefore, you should
ensure that animator targets always have a hard reference elsewhere.

@param target The object being animated
"
      end

      operation 77365943 "canReverse"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Hide reverse() and canReverse() for now since reverse() only work for simple
 cases, like we don't support sequential, neither startDelay.
 TODO: make reverse() works for all the Animators.

@hide
"
      end

      operation 77366071 "reverse"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide
"
      end

      operation 77366967 "setAllowRunningAsynchronously"
	public explicit_return_type "void"
	nparams 1
	  param inout name "mayRunAsync" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Whether or not the Animator is allowed to run asynchronously off of
the UI thread. This is a hint that informs the Animator that it is
OK to run the animation off-thread, however the Animator may decide
that it must run the animation on the UI thread anyway.

<p>Regardless of whether or not the animation runs asynchronously, all
listener callbacks will be called on the UI thread.</p>

<p>To be able to use this hint the following must be true:</p>
<ol>
<li>The animator is immutable while {@link #isStarted()} is true. Requests
   to change duration, delay, etc... may be ignored.</li>
<li>Lifecycle callback events may be asynchronous. Events such as
   {@link Animator.AnimatorListener#onAnimationEnd(Animator)} or
   {@link Animator.AnimatorListener#onAnimationRepeat(Animator)} may end up delayed
   as they must be posted back to the UI thread, and any actions performed
   by those callbacks (such as starting new animations) will not happen
   in the same frame.</li>
<li>State change requests ({@link #cancel()}, {@link #end()}, {@link #reverse()}, etc...)
   may be asynchronous. It is guaranteed that all state changes that are
   performed on the UI thread in the same frame will be applied as a single
   atomic update, however that frame may be the current frame,
   the next frame, or some future frame. This will also impact the observed
   state of the Animator. For example, {@link #isStarted()} may still return true
   after a call to {@link #end()}. Using the lifecycle callbacks is preferred over
   queries to {@link #isStarted()}, {@link #isRunning()}, and {@link #isPaused()}
   for this reason.</li>
</ol>
@hide
"
      end
    end

    class 6966967 "TimeInterpolator"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A time interpolator defines the rate of change of an animation. This allows animations
to have non-linear motion, such as acceleration and deceleration.
"
      operation 77446839 "getInterpolation"
	public explicit_return_type "float"
	nparams 1
	  param in name "input" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Maps a value representing the elapsed fraction of an animation to a value that represents
the interpolated fraction. This interpolated value is then multiplied by the change in
value of an animation to derive the animated value at the current elapsed animation time.

@param input A value between 0 and 1.0 indicating our current point
       in the animation where 0 represents the start and 1.0 represents
       the end
@return The interpolation value. This value can be more than 1.0 for
        interpolators which overshoot their targets, or less than 0 for
        interpolators that undershoot their targets.
"
      end
    end

    class 6967223 "AnimatorInflater"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is used to instantiate animator XML files into Animator objects.
<p>
For performance reasons, inflation relies heavily on pre-processing of
XML files that is done at build time. Therefore, it is not currently possible
to use this inflater with an XmlPullParser over a plain XML file at runtime;
it only works with an XmlPullParser returned from a compiled resource (R.
<em>something</em> file.)
"
      attribute 23999927 "TOGETHER"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "These flags are used when parsing AnimatorSet objects

"
      end

      attribute 24000055 "SEQUENTIALLY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24000183 "VALUE_TYPE_FLOAT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Enum values used in XML attributes to indicate the value for mValueType

"
      end

      attribute 24000311 "VALUE_TYPE_INT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24000439 "VALUE_TYPE_PATH"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24000567 "VALUE_TYPE_COLOR"
	class_attribute const_attribute private explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24000695 "VALUE_TYPE_UNDEFINED"
	class_attribute const_attribute private explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24000823 "DBG_ANIMATOR_INFLATER"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 15016375 // sTmpTypedValue (<unidirectional association>)
	relation 15016375 --->
	  a role_name "sTmpTypedValue" init_value " new TypedValue()" class_relation const_relation private
	    comment " used to calculate changing configs for resource references
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15016375 // sTmpTypedValue (<unidirectional association>)
	  b parent class_ref 6937015 // TypedValue
      end

      operation 77367991 "loadAnimator"
	class_operation public return_type class_ref 6966327 // Animator
	nparams 2
	  param inout name "context" type class_ref 6923703 // Context
	  param in name "id" explicit_type "int"
	nexceptions 1
	  exception class_ref 6924855 // NotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, @AnimatorRes ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Loads an {@link Animator} object from a resource

@param context Application context used to access resources
@param id The resource id of the animation to load
@return The animator object reference by the specified id
@throws android.content.res.Resources.NotFoundException when the animation cannot be loaded
"
      end

      operation 77368119 "loadAnimator"
	class_operation public return_type class_ref 6966327 // Animator
	nparams 3
	  param inout name "resources" type class_ref 6923959 // Resources
	  param inout name "theme" type class_ref 6924599 // Theme
	  param in name "id" explicit_type "int"
	nexceptions 1
	  exception class_ref 6924855 // NotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Loads an {@link Animator} object from a resource

@param resources The resources
@param theme The theme
@param id The resource id of the animation to load
@return The animator object reference by the specified id
@throws android.content.res.Resources.NotFoundException when the animation cannot be loaded
@hide
"
      end

      operation 77368247 "loadAnimator"
	class_operation public return_type class_ref 6966327 // Animator
	nparams 4
	  param inout name "resources" type class_ref 6923959 // Resources
	  param inout name "theme" type class_ref 6924599 // Theme
	  param in name "id" explicit_type "int"
	  param in name "pathErrorScale" explicit_type "float"
	nexceptions 1
	  exception class_ref 6924855 // NotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      operation 77368375 "loadStateListAnimator"
	class_operation public return_type class_ref 6946231 // StateListAnimator
	nparams 2
	  param inout name "context" type class_ref 6923703 // Context
	  param in name "id" explicit_type "int"
	nexceptions 1
	  exception class_ref 6924855 // NotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77368503 "createStateListAnimatorFromXml"
	class_operation private return_type class_ref 6946231 // StateListAnimator
	nparams 3
	  param inout name "context" type class_ref 6923703 // Context
	  param inout name "parser" explicit_type "XmlPullParser"
	  param inout name "attributeSet" type class_ref 6924983 // AttributeSet
	nexceptions 2
	  explicit_exception "IOException"
	  explicit_exception "XmlPullParserException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 6967351 "PathDataEvaluator"
	visibility private 
	nactuals 1
	actual class class_ref 6967735 // TypeEvaluator
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 15016503 // <realization>
	  relation 15016503 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 15016503 // <realization>
	    b parent class_ref 6967735 // TypeEvaluator
	end

	classrelation 15016631 // mPathData (<unidirectional association>)
	  relation 15016631 --->
	    a role_name "mPathData" init_value " new PathParser.PathData()" const_relation private
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 15016631 // mPathData (<unidirectional association>)
	    b parent class_ref 6967607 // PathData
	end

	operation 77368759 "evaluate"
	  public return_type class_ref 6967607 // PathData
	  nparams 3
	    param in name "fraction" explicit_type "float"
	    param inout name "startPathData" type class_ref 6967607 // PathData
	    param inout name "endPathData" type class_ref 6967607 // PathData
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      operation 77368887 "getPVH"
	class_operation private return_type class_ref 196535 // PropertyValuesHolder
	nparams 5
	  param inout name "styledAttributes" type class_ref 6924727 // TypedArray
	  param in name "valueType" explicit_type "int"
	  param in name "valueFromId" explicit_type "int"
	  param in name "valueToId" explicit_type "int"
	  param inout name "propertyName" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77369015 "parseAnimatorFromTypeArray"
	class_operation private explicit_return_type "void"
	nparams 4
	  param inout name "anim" type class_ref 6967863 // ValueAnimator
	  param inout name "arrayAnimator" type class_ref 6924727 // TypedArray
	  param inout name "arrayObjectAnimator" type class_ref 6924727 // TypedArray
	  param in name "pixelSize" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param anim The animator, must not be null
@param arrayAnimator Incoming typed array for Animator's attributes.
@param arrayObjectAnimator Incoming typed array for Object Animator's
           attributes.
@param pixelSize The relative pixel size, used to calculate the
                 maximum error for path animations.
"
      end

      operation 77369143 "setupAnimatorForPath"
	class_operation private return_type class_ref 6967735 // TypeEvaluator
	nparams 2
	  param inout name "anim" type class_ref 6967863 // ValueAnimator
	  param inout name "arrayAnimator" type class_ref 6924727 // TypedArray
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Setup the Animator to achieve path morphing.

@param anim The target Animator which will be updated.
@param arrayAnimator TypedArray for the ValueAnimator.
@return the PathDataEvaluator.
"
      end

      operation 77369271 "setupObjectAnimator"
	class_operation private explicit_return_type "void"
	nparams 4
	  param inout name "anim" type class_ref 6967863 // ValueAnimator
	  param inout name "arrayObjectAnimator" type class_ref 6924727 // TypedArray
	  param inout name "getFloats" explicit_type "boolean"
	  param in name "pixelSize" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Setup ObjectAnimator's property or values from pathData.

@param anim The target Animator which will be updated.
@param arrayObjectAnimator TypedArray for the ObjectAnimator.
@param getFloats True if the value type is float.
@param pixelSize The relative pixel size, used to calculate the
                 maximum error for path animations.
"
      end

      operation 77369399 "setupValues"
	class_operation private explicit_return_type "void"
	nparams 7
	  param inout name "anim" type class_ref 6967863 // ValueAnimator
	  param inout name "arrayAnimator" type class_ref 6924727 // TypedArray
	  param inout name "getFloats" explicit_type "boolean"
	  param inout name "hasFrom" explicit_type "boolean"
	  param in name "fromType" explicit_type "int"
	  param inout name "hasTo" explicit_type "boolean"
	  param in name "toType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Setup ValueAnimator's values.
This will handle all of the integer, float and color types.

@param anim The target Animator which will be updated.
@param arrayAnimator TypedArray for the ValueAnimator.
@param getFloats True if the value type is float.
@param hasFrom True if \"valueFrom\" exists.
@param fromType The type of \"valueFrom\".
@param hasTo True if \"valueTo\" exists.
@param toType The type of \"valueTo\".
"
      end

      operation 77369527 "createAnimatorFromXml"
	class_operation private return_type class_ref 6966327 // Animator
	nparams 4
	  param inout name "res" type class_ref 6923959 // Resources
	  param inout name "theme" type class_ref 6924599 // Theme
	  param inout name "parser" explicit_type "XmlPullParser"
	  param in name "pixelSize" explicit_type "float"
	nexceptions 2
	  explicit_exception "XmlPullParserException"
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77369655 "createAnimatorFromXml"
	class_operation private return_type class_ref 6966327 // Animator
	nparams 7
	  param inout name "res" type class_ref 6923959 // Resources
	  param inout name "theme" type class_ref 6924599 // Theme
	  param inout name "parser" explicit_type "XmlPullParser"
	  param inout name "attrs" type class_ref 6924983 // AttributeSet
	  param inout name "parent" type class_ref 6967991 // AnimatorSet
	  param in name "sequenceOrdering" explicit_type "int"
	  param in name "pixelSize" explicit_type "float"
	nexceptions 2
	  explicit_exception "XmlPullParserException"
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77369783 "loadValues"
	class_operation private return_type class_ref 196535 // PropertyValuesHolder
	nparams 4
	  param inout name "res" type class_ref 6923959 // Resources
	  param inout name "theme" type class_ref 6924599 // Theme
	  param inout name "parser" explicit_type "XmlPullParser"
	  param inout name "attrs" type class_ref 6924983 // AttributeSet
	nexceptions 2
	  explicit_exception "XmlPullParserException"
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77369911 "inferValueTypeOfKeyframe"
	class_operation private explicit_return_type "int"
	nparams 3
	  param inout name "res" type class_ref 6923959 // Resources
	  param inout name "theme" type class_ref 6924599 // Theme
	  param inout name "attrs" type class_ref 6924983 // AttributeSet
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " When no value type is provided in keyframe, we need to infer the type from the value. i.e.
 if value is defined in the style of a color value, then the color type is returned.
 Otherwise, default float type is returned."
      end

      operation 77370039 "inferValueTypeFromValues"
	class_operation private explicit_return_type "int"
	nparams 3
	  param inout name "styledAttributes" type class_ref 6924727 // TypedArray
	  param in name "valueFromId" explicit_type "int"
	  param in name "valueToId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77370167 "dumpKeyframes"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "keyframes" explicit_type "Object"
	multiplicity "[]"
	  param inout name "header" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77370295 "loadPvh"
	class_operation private return_type class_ref 196535 // PropertyValuesHolder
	nparams 5
	  param inout name "res" type class_ref 6923959 // Resources
	  param inout name "theme" type class_ref 6924599 // Theme
	  param inout name "parser" explicit_type "XmlPullParser"
	  param inout name "propertyName" explicit_type "String"
	  param in name "valueType" explicit_type "int"
	nexceptions 2
	  explicit_exception "XmlPullParserException"
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Load property values holder if there are keyframes defined in it. Otherwise return null."
      end

      operation 77370423 "createNewKeyframe"
	class_operation private return_type class_ref 6968119 // Keyframe
	nparams 2
	  param inout name "sampleKeyframe" type class_ref 6968119 // Keyframe
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77370551 "distributeKeyframes"
	class_operation private explicit_return_type "void"
	nparams 4
	  param inout name "keyframes" type class_ref 6968119 // Keyframe
	multiplicity "[]"
	  param in name "gap" explicit_type "float"
	  param in name "startIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function to set fractions on keyframes to cover a gap in which the
fractions are not currently set. Keyframe fractions will be distributed evenly
in this gap. For example, a gap of 1 keyframe in the range 0-1 will be at .5, a gap
of .6 spread between two keyframes will be at .2 and .4 beyond the fraction at the
keyframe before startIndex.
Assumptions:
- First and last keyframe fractions (bounding this spread) are already set. So,
for example, if no fractions are set, we will already set first and last keyframe
fraction values to 0 and 1.
- startIndex must be >0 (which follows from first assumption).
- endIndex must be >= startIndex.

@param keyframes the array of keyframes
@param gap The total gap we need to distribute
@param startIndex The index of the first keyframe whose fraction must be set
@param endIndex The index of the last keyframe whose fraction must be set
"
      end

      operation 77370679 "loadKeyframe"
	class_operation private return_type class_ref 6968119 // Keyframe
	nparams 4
	  param inout name "res" type class_ref 6923959 // Resources
	  param inout name "theme" type class_ref 6924599 // Theme
	  param inout name "attrs" type class_ref 6924983 // AttributeSet
	  param in name "valueType" explicit_type "int"
	nexceptions 2
	  explicit_exception "XmlPullParserException"
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77370807 "loadObjectAnimator"
	class_operation private return_type class_ref 6966071 // ObjectAnimator
	nparams 4
	  param inout name "res" type class_ref 6923959 // Resources
	  param inout name "theme" type class_ref 6924599 // Theme
	  param inout name "attrs" type class_ref 6924983 // AttributeSet
	  param in name "pathErrorScale" explicit_type "float"
	nexceptions 1
	  exception class_ref 6924855 // NotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77370935 "loadAnimator"
	class_operation private return_type class_ref 6967863 // ValueAnimator
	nparams 5
	  param inout name "res" type class_ref 6923959 // Resources
	  param inout name "theme" type class_ref 6924599 // Theme
	  param inout name "attrs" type class_ref 6924983 // AttributeSet
	  param inout name "anim" type class_ref 6967863 // ValueAnimator
	  param in name "pathErrorScale" explicit_type "float"
	nexceptions 1
	  exception class_ref 6924855 // NotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new animation whose parameters come from the specified context
and attributes set.

@param res The resources
@param attrs The set of attributes holding the animation parameters
@param anim Null if this is a ValueAnimator, otherwise this is an
           ObjectAnimator
"
      end

      operation 77371063 "getChangingConfigs"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "resources" type class_ref 6923959 // Resources
	  param in name "id" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @AnyRes ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Config
"
	
	
	
      end

      operation 77371191 "isColorType"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "type" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 6967735 "TypeEvaluator"
      visibility public stereotype "interface"
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Interface for use with the {@link ValueAnimator#setEvaluator(TypeEvaluator)} function. Evaluators
allow developers to create animations on arbitrary property types, by allowing them to supply
custom evaluators for types that are not automatically understood and used by the animation
system.

@see ValueAnimator#setEvaluator(TypeEvaluator)
"
      operation 77368631 "evaluate"
	cpp_inline public explicit_return_type "T"
	nparams 3
	  param in name "fraction" explicit_type "float"
	  param inout name "startValue" explicit_type "T"
	  param inout name "endValue" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This function returns the result of linearly interpolating the start and end values, with
<code>fraction</code> representing the proportion between the start and end values. The
calculation is a simple parametric calculation: <code>result = x0 + t * (x1 - x0)</code>,
where <code>x0</code> is <code>startValue</code>, <code>x1</code> is <code>endValue</code>,
and <code>t</code> is <code>fraction</code>.

@param fraction   The fraction from the starting to the ending values
@param startValue The start value.
@param endValue   The end value.
@return A linear interpolation between the start and end values, given the
        <code>fraction</code> parameter.
"
      end
    end

    class 6967863 "ValueAnimator"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SuppressWarnings(\"unchecked\")
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class provides a simple timing engine for running animations
which calculate animated values and set them on target objects.

<p>There is a single timing pulse that all animations use. It runs in a
custom handler to ensure that property changes happen on the UI thread.</p>

<p>By default, ValueAnimator uses non-linear time interpolation, via the
{@link AccelerateDecelerateInterpolator} class, which accelerates into and decelerates
out of an animation. This behavior can be changed by calling
{@link ValueAnimator#setInterpolator(TimeInterpolator)}.</p>

<p>Animators can be created from either code or resource files. Here is an example
of a ValueAnimator resource file:</p>

{@sample development/samples/ApiDemos/res/anim/animator.xml ValueAnimatorResources}

<p>It is also possible to use a combination of {@link PropertyValuesHolder} and
{@link Keyframe} resource tags to create a multi-step animation.
Note that you can specify explicit fractional values (from 0 to 1) for
each keyframe to determine when, in the overall duration, the animation should arrive at that
value. Alternatively, you can leave the fractions off and the keyframes will be equally
distributed within the total duration:</p>

{@sample development/samples/ApiDemos/res/anim/value_animator_pvh_kf.xml
ValueAnimatorKeyframeResources}

<div class=\"special reference\">
<h3>Developer Guides</h3>
<p>For more information about animating with {@code ValueAnimator}, read the
<a href=\"{@docRoot}guide/topics/graphics/prop-animation.html#value-animator\">Property
Animation</a> developer guide.</p>
</div>
"
      classrelation 15029559 // <generalisation>
	relation 15029559 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15029559 // <generalisation>
	  b parent class_ref 6966327 // Animator
      end

      classrelation 15029687 // <realization>
	relation 15029687 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15029687 // <realization>
	  b parent class_ref 6965559 // AnimationFrameCallback
      end

      attribute 24009655 "DEBUG"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24009783 "sDurationScale"
	class_attribute private explicit_type "float"
	init_value " 1.0f"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Internal constants

"
      end

      attribute 24009911 "mStartTime"
	package explicit_type "long"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Internal variables
NOTE: This object implements the clone() method, making a deep copy of any referenced
objects. As other non-trivial fields are added to this class, make sure to add logic
to clone() to make deep copies of them.


The first time that the animation's animateFrame() method is called. This time is used to
determine elapsed time (and therefore the elapsed fraction) in subsequent calls
to animateFrame().

Whenever mStartTime is set, you must also update mStartTimeCommitted.

"
      end

      attribute 24010039 "mStartTimeCommitted"
	package explicit_type "boolean"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "When true, the start time has been firmly committed as a chosen reference point in
time by which the progress of the animation will be evaluated.  When false, the
start time may be updated when the first animation frame is committed so as
to compensate for jank that may have occurred between when the start time was
initialized and when the frame was actually drawn.

This flag is generally set to false during the first frame of the animation
when the animation playing state transitions from STOPPED to RUNNING or
resumes after having been paused.  This flag is set to true when the start time
is firmly committed and should not be further compensated for jank.

"
      end

      attribute 24010167 "mSeekFraction"
	package explicit_type "float"
	init_value " -1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Set when setCurrentPlayTime() is called. If negative, animation is not currently seeked
to a value.

"
      end

      attribute 24010295 "mPauseTime"
	private explicit_type "long"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Set on the next frame after pause() is called, used to calculate a new startTime
or delayStartTime which allows the animator to continue from the point at which
it was paused. If negative, has not yet been set.

"
      end

      attribute 24010423 "mResumed"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Set when an animator is resumed. This triggers logic in the next frame which
actually resumes the animator.

"
      end

      classrelation 15029943 // sDefaultInterpolator (<unidirectional association>)
	relation 15029943 --->
	  a role_name "sDefaultInterpolator" init_value "
            new AccelerateDecelerateInterpolator()" class_relation const_relation private
	    comment " The time interpolator to be used if none is set on the animation
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15029943 // sDefaultInterpolator (<unidirectional association>)
	  b parent class_ref 6966967 // TimeInterpolator
      end

      attribute 24010551 "mReversing"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Flag to indicate whether this animator is playing in reverse mode, specifically
by being started or interrupted by a call to reverse(). This flag is different than
mPlayingBackwards, which indicates merely whether the current iteration of the
animator is playing in reverse. It is used in corner cases to determine proper end
behavior.

"
      end

      attribute 24010679 "mOverallFraction"
	private explicit_type "float"
	init_value " 0f"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Tracks the overall fraction of the animation, ranging from 0 to mRepeatCount + 1

"
      end

      attribute 24010807 "mCurrentFraction"
	private explicit_type "float"
	init_value " 0f"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Tracks current elapsed/eased fraction, for querying in getAnimatedFraction().
This is calculated by interpolating the fraction (range: [0, 1]) in the current iteration.

"
      end

      attribute 24010935 "mLastFrameTime"
	private explicit_type "long"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Tracks the time (in milliseconds) when the last frame arrived.

"
      end

      attribute 24011063 "mRunning"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Additional playing state to indicate whether an animator has been start()'d. There is
some lag between a call to start() and the first animation frame. We should still note
that the animation has been started, even if it's first animation frame has not yet
happened, and reflect that state in isRunning().
Note that delayed animations are different: they are not started until their first
animation frame, which occurs after their delay elapses.

"
      end

      attribute 24011191 "mStarted"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Additional playing state to indicate whether an animator has been start()'d, whether or
not there is a nonzero startDelay.

"
      end

      attribute 24011319 "mStartListenersCalled"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Tracks whether we've notified listeners of the onAnimationStart() event. This can be
complex to keep track of since we notify listeners at different times depending on
startDelay and whether start() was called before end().

"
      end

      attribute 24011447 "mInitialized"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Flag that denotes whether the animation is set up and ready to go. Used to
set up animation that has not yet been started.

"
      end

      attribute 24011575 "mAnimationEndRequested"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Flag that tracks whether animation has been requested to end.

"
      end

      attribute 24011703 "mDuration"
	private explicit_type "long"
	init_value " 300"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Backing variables

 How long the animation should last in ms
"
      end

      attribute 24011831 "mStartDelay"
	private explicit_type "long"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The amount of time in ms to delay starting the animation after start() is called. Note
 that this start delay is unscaled. When there is a duration scale set on the animator, the
 scaling factor will be applied to this delay.
"
      end

      attribute 24011959 "mRepeatCount"
	private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The number of times the animation will repeat. The default is 0, which means the animation
 will play only once
"
      end

      attribute 24012087 "mRepeatMode"
	private explicit_type "int"
	init_value " RESTART"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The type of repetition that will occur when repeatMode is nonzero. RESTART means the
animation will start from the beginning on every new cycle. REVERSE means the animation
will reverse directions on each iteration.

"
      end

      classrelation 15030071 // mInterpolator (<unidirectional association>)
	relation 15030071 --->
	  a role_name "mInterpolator" init_value " sDefaultInterpolator" private
	    comment "
The time interpolator to be used. The elapsed fraction of the animation will be passed
through this interpolator to calculate the interpolated fraction, which is then used to
calculate the animated values.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15030071 // mInterpolator (<unidirectional association>)
	  b parent class_ref 6966967 // TimeInterpolator
      end

      class 6973111 "AnimatorUpdateListener"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 77413047 "onAnimationUpdate"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 6967863 // ValueAnimator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "<p>Notifies the occurrence of another frame of the animation.</p>

@param animation The animation which was repeated.
"
	end
      end

      classrelation 15030199 // mUpdateListeners (<unidirectional association>)
	relation 15030199 --->
	  stereotype "ArrayList"
	  a role_name "mUpdateListeners" init_value " null" package
	    comment "The set of listeners to be sent events through the life of an animation.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 15030199 // mUpdateListeners (<unidirectional association>)
	  b parent class_ref 6973111 // AnimatorUpdateListener
      end

      classrelation 15030327 // mValues (<unidirectional association>)
	relation 15030327 --->
	  a role_name "mValues" multiplicity "[]" package
	    comment "
The property/value sets being animated.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 15030327 // mValues (<unidirectional association>)
	  b parent class_ref 196535 // PropertyValuesHolder
      end

      class 6973239 "RepeatMode"
	visibility public stereotype "@interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}@interface ${name}${extends} {
${members}}
"
	java_annotation "@IntDef({RESTART, REVERSE})
@Retention(RetentionPolicy.SOURCE)
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      attribute 24012215 "RESTART"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "When the animation reaches the end and <code>repeatCount</code> is INFINITE
or a positive value, the animation restarts from the beginning.

"
      end

      attribute 24012343 "REVERSE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "When the animation reaches the end and <code>repeatCount</code> is INFINITE
or a positive value, the animation reverses direction on every iteration.

"
      end

      attribute 24012471 "INFINITE"
	class_attribute const_attribute public explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This value used used with the {@link #setRepeatCount(int)} property to repeat
the animation indefinitely.

"
      end

      operation 77405111 "setDurationScale"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "durationScale" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide
"
      end

      operation 77405239 "getDurationScale"
	class_operation public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide
"
      end

      operation 77405367 "ValueAnimator"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new ValueAnimator object. This default constructor is primarily for
use internally; the factory methods which take parameters are more generally
useful.
"
      end

      operation 77405495 "ofInt"
	class_operation public return_type class_ref 6967863 // ValueAnimator
	nparams 1
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a ValueAnimator that animates between int values. A single
value implies that that value is the one being animated to. However, this is not typically
useful in a ValueAnimator object because there is no way for the object to determine the
starting value for the animation (unlike ObjectAnimator, which can derive that value
from the target object and property being animated). Therefore, there should typically
be two or more values.

@param values A set of values that the animation will animate between over time.
@return A ValueAnimator object that is set up to animate between the given values.
"
      end

      operation 77405623 "ofArgb"
	class_operation public return_type class_ref 6967863 // ValueAnimator
	nparams 1
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a ValueAnimator that animates between color values. A single
value implies that that value is the one being animated to. However, this is not typically
useful in a ValueAnimator object because there is no way for the object to determine the
starting value for the animation (unlike ObjectAnimator, which can derive that value
from the target object and property being animated). Therefore, there should typically
be two or more values.

@param values A set of values that the animation will animate between over time.
@return A ValueAnimator object that is set up to animate between the given values.
"
      end

      operation 77405751 "ofFloat"
	class_operation public return_type class_ref 6967863 // ValueAnimator
	nparams 1
	  param inout name "" explicit_type "float...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a ValueAnimator that animates between float values. A single
value implies that that value is the one being animated to. However, this is not typically
useful in a ValueAnimator object because there is no way for the object to determine the
starting value for the animation (unlike ObjectAnimator, which can derive that value
from the target object and property being animated). Therefore, there should typically
be two or more values.

@param values A set of values that the animation will animate between over time.
@return A ValueAnimator object that is set up to animate between the given values.
"
      end

      operation 77405879 "ofPropertyValuesHolder"
	class_operation public return_type class_ref 6967863 // ValueAnimator
	nparams 1
	  param inout name "" explicit_type "PropertyValuesHolder...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a ValueAnimator that animates between the values
specified in the PropertyValuesHolder objects.

@param values A set of PropertyValuesHolder objects whose values will be animated
between over time.
@return A ValueAnimator object that is set up to animate between the given values.
"
      end

      operation 77406007 "ofObject"
	class_operation public return_type class_ref 6967863 // ValueAnimator
	nparams 2
	  param inout name "evaluator" type class_ref 6967735 // TypeEvaluator
	  param inout name "" explicit_type "Object...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a ValueAnimator that animates between Object values. A single
value implies that that value is the one being animated to. However, this is not typically
useful in a ValueAnimator object because there is no way for the object to determine the
starting value for the animation (unlike ObjectAnimator, which can derive that value
from the target object and property being animated). Therefore, there should typically
be two or more values.

<p><strong>Note:</strong> The Object values are stored as references to the original
objects, which means that changes to those objects after this method is called will
affect the values on the animator. If the objects will be mutated externally after
this method is called, callers should pass a copy of those objects instead.

<p>Since ValueAnimator does not know how to animate between arbitrary Objects, this
factory method also takes a TypeEvaluator object that the ValueAnimator will use
to perform that interpolation.

@param evaluator A TypeEvaluator that will be called on each animation frame to
provide the ncessry interpolation between the Object values to derive the animated
value.
@param values A set of values that the animation will animate between over time.
@return A ValueAnimator object that is set up to animate between the given values.
"
      end

      operation 77406135 "setIntValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets int values that will be animated between. A single
value implies that that value is the one being animated to. However, this is not typically
useful in a ValueAnimator object because there is no way for the object to determine the
starting value for the animation (unlike ObjectAnimator, which can derive that value
from the target object and property being animated). Therefore, there should typically
be two or more values.

<p>If there are already multiple sets of values defined for this ValueAnimator via more
than one PropertyValuesHolder object, this method will set the values for the first
of those objects.</p>

@param values A set of values that the animation will animate between over time.
"
      end

      operation 77406263 "setFloatValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "float...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets float values that will be animated between. A single
value implies that that value is the one being animated to. However, this is not typically
useful in a ValueAnimator object because there is no way for the object to determine the
starting value for the animation (unlike ObjectAnimator, which can derive that value
from the target object and property being animated). Therefore, there should typically
be two or more values.

<p>If there are already multiple sets of values defined for this ValueAnimator via more
than one PropertyValuesHolder object, this method will set the values for the first
of those objects.</p>

@param values A set of values that the animation will animate between over time.
"
      end

      operation 77406391 "setObjectValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "Object...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the values to animate between for this animation. A single
value implies that that value is the one being animated to. However, this is not typically
useful in a ValueAnimator object because there is no way for the object to determine the
starting value for the animation (unlike ObjectAnimator, which can derive that value
from the target object and property being animated). Therefore, there should typically
be two or more values.

<p><strong>Note:</strong> The Object values are stored as references to the original
objects, which means that changes to those objects after this method is called will
affect the values on the animator. If the objects will be mutated externally after
this method is called, callers should pass a copy of those objects instead.

<p>If there are already multiple sets of values defined for this ValueAnimator via more
than one PropertyValuesHolder object, this method will set the values for the first
of those objects.</p>

<p>There should be a TypeEvaluator set on the ValueAnimator that knows how to interpolate
between these value objects. ValueAnimator only knows how to interpolate between the
primitive types specified in the other setValues() methods.</p>

@param values The set of values to animate between.
"
      end

      operation 77406519 "setValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "PropertyValuesHolder...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the values, per property, being animated between. This function is called internally
by the constructors of ValueAnimator that take a list of values. But a ValueAnimator can
be constructed without values and this method can be called to set the values manually
instead.

@param values The set of values, per property, being animated between.
"
      end

      operation 77406647 "getValues"
	public return_type class_ref 196535 // PropertyValuesHolder
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the values that this ValueAnimator animates between. These values are stored in
PropertyValuesHolder objects, even if the ValueAnimator was created with a simple list
of value objects instead.

@return PropertyValuesHolder[] An array of PropertyValuesHolder objects which hold the
values, per property, that define the animation.
"
      end

      operation 77406775 "initAnimation"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallSuper
"
	
	
	
	comment "This function is called immediately before processing the first animation
frame of an animation. If there is a nonzero <code>startDelay</code>, the
function is called after that delay ends.
It takes care of the final initialization steps for the
animation.

 <p>Overrides of this method should call the superclass method to ensure
 that internal mechanisms for the animation are set up correctly.</p>
"
      end

      operation 77406903 "setDuration"
	public return_type class_ref 6967863 // ValueAnimator
	nparams 1
	  param in name "duration" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets the length of the animation. The default duration is 300 milliseconds.

@param duration The length of the animation, in milliseconds. This value cannot
be negative.
@return ValueAnimator The object called with setDuration(). This return
value makes it easier to compose statements together that construct and then set the
duration, as in <code>ValueAnimator.ofInt(0, 10).setDuration(500).start()</code>.
"
      end

      operation 77407031 "getScaledDuration"
	private explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77407159 "getDuration"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the length of the animation. The default duration is 300 milliseconds.

@return The length of the animation, in milliseconds.
"
      end

      operation 77407287 "getTotalDuration"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77407415 "setCurrentPlayTime"
	public explicit_return_type "void"
	nparams 1
	  param in name "playTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the position of the animation to the specified point in time. This time should
be between 0 and the total duration of the animation, including any repetition. If
the animation has not yet been started, then it will not advance forward after it is
set to this time; it will simply set the time to this value and perform any appropriate
actions based on that time. If the animation is already running, then setCurrentPlayTime()
will set the current playing time to this value and continue playing from that point.

@param playTime The time, in milliseconds, to which the animation is advanced or rewound.
"
      end

      operation 77407543 "setCurrentFraction"
	public explicit_return_type "void"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the position of the animation to the specified fraction. This fraction should
be between 0 and the total fraction of the animation, including any repetition. That is,
a fraction of 0 will position the animation at the beginning, a value of 1 at the end,
and a value of 2 at the end of a reversing animator that repeats once. If
the animation has not yet been started, then it will not advance forward after it is
set to this fraction; it will simply set the fraction to this value and perform any
appropriate actions based on that fraction. If the animation is already running, then
setCurrentFraction() will set the current fraction to this value and continue
playing from that point. {@link Animator.AnimatorListener} events are not called
due to changing the fraction; those events are only processed while the animation
is running.

@param fraction The fraction to which the animation is advanced or rewound. Values
outside the range of 0 to the maximum fraction for the animator will be clamped to
the correct range.
"
      end

      operation 77407671 "getCurrentIteration"
	private explicit_return_type "int"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculates current iteration based on the overall fraction. The overall fraction will be
in the range of [0, mRepeatCount + 1]. Both current iteration and fraction in the current
iteration can be derived from it.
"
      end

      operation 77407799 "getCurrentIterationFraction"
	private explicit_return_type "float"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculates the fraction of the current iteration, taking into account whether the animation
should be played backwards. E.g. When the animation is played backwards in an iteration,
the fraction for that iteration will go from 1f to 0f.
"
      end

      operation 77407927 "clampFraction"
	private explicit_return_type "float"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clamps fraction into the correct range: [0, mRepeatCount + 1]. If repeat count is infinite,
no upper bound will be set for the fraction.

@param fraction fraction to be clamped
@return fraction clamped into the range of [0, mRepeatCount + 1]
"
      end

      operation 77408055 "shouldPlayBackward"
	private explicit_return_type "boolean"
	nparams 1
	  param in name "iteration" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculates the direction of animation playing (i.e. forward or backward), based on 1)
whether the entire animation is being reversed, 2) repeat mode applied to the current
iteration.
"
      end

      operation 77408183 "getCurrentPlayTime"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the current position of the animation in time, which is equal to the current
time minus the time that the animation started. An animation that is not yet started will
return a value of zero, unless the animation has has its play time set via
{@link #setCurrentPlayTime(long)} or {@link #setCurrentFraction(float)}, in which case
it will return the time that was set.

@return The current position in time of the animation.
"
      end

      operation 77408311 "getStartDelay"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "The amount of time, in milliseconds, to delay starting the animation after
{@link #start()} is called.

@return the number of milliseconds to delay running the animation
"
      end

      operation 77408439 "setStartDelay"
	public explicit_return_type "void"
	nparams 1
	  param in name "startDelay" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "The amount of time, in milliseconds, to delay starting the animation after
{@link #start()} is called. Note that the start delay should always be non-negative. Any
negative start delay will be clamped to 0 on N and above.

@param startDelay The amount of the delay, in milliseconds
"
      end

      operation 77408567 "getFrameDelay"
	class_operation public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The amount of time, in milliseconds, between each frame of the animation. This is a
requested time that the animation will attempt to honor, but the actual delay between
frames may be different, depending on system load and capabilities. This is a static
function because the same delay will be applied to all animations, since they are all
run off of a single timing loop.

The frame delay may be ignored when the animation system uses an external timing
source, such as the display refresh rate (vsync), to govern animations.

Note that this method should be called from the same thread that {@link #start()} is
called in order to check the frame delay for that animation. A runtime exception will be
thrown if the calling thread does not have a Looper.

@return the requested time between frames, in milliseconds
"
      end

      operation 77408695 "setFrameDelay"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "frameDelay" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The amount of time, in milliseconds, between each frame of the animation. This is a
requested time that the animation will attempt to honor, but the actual delay between
frames may be different, depending on system load and capabilities. This is a static
function because the same delay will be applied to all animations, since they are all
run off of a single timing loop.

The frame delay may be ignored when the animation system uses an external timing
source, such as the display refresh rate (vsync), to govern animations.

Note that this method should be called from the same thread that {@link #start()} is
called in order to have the new frame delay take effect on that animation. A runtime
exception will be thrown if the calling thread does not have a Looper.

@param frameDelay the requested time between frames, in milliseconds
"
      end

      operation 77408823 "getAnimatedValue"
	public explicit_return_type "Object"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The most recent value calculated by this <code>ValueAnimator</code> when there is just one
property being animated. This value is only sensible while the animation is running. The main
purpose for this read-only property is to retrieve the value from the <code>ValueAnimator</code>
during a call to {@link AnimatorUpdateListener#onAnimationUpdate(ValueAnimator)}, which
is called during each animation frame, immediately after the value is calculated.

@return animatedValue The value most recently calculated by this <code>ValueAnimator</code> for
the single property being animated. If there are several properties being animated
(specified by several PropertyValuesHolder objects in the constructor), this function
returns the animated value for the first of those objects.
"
      end

      operation 77408951 "getAnimatedValue"
	public explicit_return_type "Object"
	nparams 1
	  param inout name "propertyName" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The most recent value calculated by this <code>ValueAnimator</code> for <code>propertyName</code>.
The main purpose for this read-only property is to retrieve the value from the
<code>ValueAnimator</code> during a call to
{@link AnimatorUpdateListener#onAnimationUpdate(ValueAnimator)}, which
is called during each animation frame, immediately after the value is calculated.

@return animatedValue The value most recently calculated for the named property
by this <code>ValueAnimator</code>.
"
      end

      operation 77409079 "setRepeatCount"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets how many times the animation should be repeated. If the repeat
count is 0, the animation is never repeated. If the repeat count is
greater than 0 or {@link #INFINITE}, the repeat mode will be taken
into account. The repeat count is 0 by default.

@param value the number of times the animation should be repeated
"
      end

      operation 77409207 "getRepeatCount"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defines how many times the animation should repeat. The default value
is 0.

@return the number of times the animation should repeat, or {@link #INFINITE}
"
      end

      operation 77409335 "setRepeatMode"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@RepeatMode ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defines what this animation should do when it reaches the end. This
setting is applied only when the repeat count is either greater than
0 or {@link #INFINITE}. Defaults to {@link #RESTART}.

@param value {@link #RESTART} or {@link #REVERSE}
"
      end

      operation 77409463 "getRepeatMode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@RepeatMode
"
	
	
	
	comment "Defines what this animation should do when it reaches the end.

@return either one of {@link #REVERSE} or {@link #RESTART}
"
      end

      operation 77409591 "addUpdateListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 6973111 // AnimatorUpdateListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a listener to the set of listeners that are sent update events through the life of
an animation. This method is called on all listeners for every frame of the animation,
after the values for the animation have been calculated.

@param listener the listener to be added to the current set of listeners for this animation.
"
      end

      operation 77409719 "removeAllUpdateListeners"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all listeners from the set listening to frame updates for this animation.
"
      end

      operation 77409847 "removeUpdateListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 6973111 // AnimatorUpdateListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a listener from the set listening to frame updates for this animation.

@param listener the listener to be removed from the current set of update listeners
for this animation.
"
      end

      operation 77409975 "setInterpolator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 6966967 // TimeInterpolator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "The time interpolator used in calculating the elapsed fraction of this animation. The
interpolator determines whether the animation runs with linear or non-linear motion,
such as acceleration and deceleration. The default value is
{@link android.view.animation.AccelerateDecelerateInterpolator}

@param value the interpolator to be used by this animation. A value of <code>null</code>
will result in linear interpolation.
"
      end

      operation 77410103 "getInterpolator"
	public return_type class_ref 6966967 // TimeInterpolator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the timing interpolator that this ValueAnimator uses.

@return The timing interpolator for this ValueAnimator.
"
      end

      operation 77410231 "setEvaluator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 6967735 // TypeEvaluator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The type evaluator to be used when calculating the animated values of this animation.
The system will automatically assign a float or int evaluator based on the type
of <code>startValue</code> and <code>endValue</code> in the constructor. But if these values
are not one of these primitive types, or if different evaluation is desired (such as is
necessary with int values that represent colors), a custom evaluator needs to be assigned.
For example, when running an animation on color values, the {@link ArgbEvaluator}
should be used to get correct RGB color interpolation.

<p>If this ValueAnimator has only one set of values being animated between, this evaluator
will be used for that set. If there are several sets of values being animated, which is
the case if PropertyValuesHolder objects were set on the ValueAnimator, then the evaluator
is assigned just to the first PropertyValuesHolder object.</p>

@param value the evaluator to be used this animation
"
      end

      operation 77410359 "notifyStartListeners"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77410487 "start"
	private explicit_return_type "void"
	nparams 1
	  param inout name "playBackwards" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Start the animation playing. This version of start() takes a boolean flag that indicates
whether the animation should play in reverse. The flag is usually false, but may be set
to true if called from the reverse() method.

<p>The animation started by calling this method will be run on the thread that called
this method. This thread should have a Looper on it (a runtime exception will be thrown if
this is not the case). Also, if the animation will animate
properties of objects in the view hierarchy, then the calling thread should be the UI
thread for that view hierarchy.</p>

@param playBackwards Whether the ValueAnimator should start playing in reverse.
"
      end

      operation 77410615 "start"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77410743 "cancel"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77410871 "end"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77410999 "resume"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77411127 "pause"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77411255 "isRunning"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77411383 "isStarted"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77411511 "reverse"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Plays the ValueAnimator in reverse. If the animation is already running,
it will stop itself and play backwards from the point reached when reverse was called.
If the animation is not currently running, then it will start from the end and
play backwards. This behavior is only set for the current animation; future playing
of the animation will use the default behavior of playing forward.
"
      end

      operation 77411639 "canReverse"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "@hide
"
      end

      operation 77411767 "endAnimation"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called internally to end an animation by removing it from the animations list. Must be
called on the UI thread.
"
      end

      operation 77411895 "startAnimation"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called internally to start an animation by adding it to the active animations list. Must be
called on the UI thread.
"
      end

      operation 77412023 "isPulsingInternal"
	private explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Internal only: This tracks whether the animation has gotten on the animation loop. Note
this is different than {@link #isRunning()} in that the latter tracks the time after start()
is called (or after start delay if any), which may be before the animation loop starts.
"
      end

      operation 77412151 "getNameForTrace"
	package explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of this animator for debugging purposes.
"
      end

      operation 77412279 "commitAnimationFrame"
	public explicit_return_type "void"
	nparams 1
	  param in name "frameTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies an adjustment to the animation to compensate for jank between when
the animation first ran and when the frame was drawn.
@hide
"
      end

      operation 77412407 "animateBasedOnTime"
	package explicit_return_type "boolean"
	nparams 1
	  param in name "currentTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This internal function processes a single animation frame for a given animation. The
currentTime parameter is the timing pulse sent by the handler, used to calculate the
elapsed duration, and therefore
the elapsed fraction, of the animation. The return value indicates whether the animation
should be ended (which happens when the elapsed time of the animation exceeds the
animation's duration, including the repeatCount).

@param currentTime The current time, as tracked by the static timing handler
@return true if the animation's duration, including any repetitions due to
<code>repeatCount</code> has been exceeded and the animation should be ended.
"
      end

      operation 77412535 "doAnimationFrame"
	public explicit_return_type "void"
	nparams 1
	  param in name "frameTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Processes a frame of the animation, adjusting the start time if needed.

@param frameTime The frame time.
@return true if the animation has ended.
@hide
"
      end

      operation 77412663 "getAnimatedFraction"
	public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current animation fraction, which is the elapsed/interpolated fraction used in
the most recent frame update on the animation.

@return Elapsed/interpolated fraction of the animation.
"
      end

      operation 77412791 "animateValue"
	package explicit_return_type "void"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallSuper
"
	
	
	
	comment "This method is called with the elapsed fraction of the animation during every
animation frame. This function turns the elapsed fraction into an interpolated fraction
and then into an animated value (from the evaluator. The function is called mostly during
animation updates, but it is also called when the <code>end()</code>
function is called, to set the final value on the property.

<p>Overrides of this method must call the superclass to perform the calculation
of the animated value.</p>

@param fraction The elapsed fraction of the animation.
"
      end

      operation 77412919 "clone"
	public return_type class_ref 6967863 // ValueAnimator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77413175 "getCurrentAnimationsCount"
	class_operation public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the number of animations currently running.

Used by StrictMode internally to annotate violations.
May be called on arbitrary threads!

@hide
"
      end

      operation 77413303 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77413431 "setAllowRunningAsynchronously"
	public explicit_return_type "void"
	nparams 1
	  param inout name "mayRunAsync" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "<p>Whether or not the ValueAnimator is allowed to run asynchronously off of
the UI thread. This is a hint that informs the ValueAnimator that it is
OK to run the animation off-thread, however ValueAnimator may decide
that it must run the animation on the UI thread anyway. For example if there
is an {@link AnimatorUpdateListener} the animation will run on the UI thread,
regardless of the value of this hint.</p>

<p>Regardless of whether or not the animation runs asynchronously, all
listener callbacks will be called on the UI thread.</p>

<p>To be able to use this hint the following must be true:</p>
<ol>
<li>{@link #getAnimatedFraction()} is not needed (it will return undefined values).</li>
<li>The animator is immutable while {@link #isStarted()} is true. Requests
   to change values, duration, delay, etc... may be ignored.</li>
<li>Lifecycle callback events may be asynchronous. Events such as
   {@link Animator.AnimatorListener#onAnimationEnd(Animator)} or
   {@link Animator.AnimatorListener#onAnimationRepeat(Animator)} may end up delayed
   as they must be posted back to the UI thread, and any actions performed
   by those callbacks (such as starting new animations) will not happen
   in the same frame.</li>
<li>State change requests ({@link #cancel()}, {@link #end()}, {@link #reverse()}, etc...)
   may be asynchronous. It is guaranteed that all state changes that are
   performed on the UI thread in the same frame will be applied as a single
   atomic update, however that frame may be the current frame,
   the next frame, or some future frame. This will also impact the observed
   state of the Animator. For example, {@link #isStarted()} may still return true
   after a call to {@link #end()}. Using the lifecycle callbacks is preferred over
   queries to {@link #isStarted()}, {@link #isRunning()}, and {@link #isPaused()}
   for this reason.</li>
</ol>
@hide
"
      end
    end

    class 6967991 "AnimatorSet"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class plays a set of {@link Animator} objects in the specified order. Animations
can be set up to play together, in sequence, or after a specified delay.

<p>There are two different approaches to adding animations to a <code>AnimatorSet</code>:
either the {@link AnimatorSet#playTogether(Animator[]) playTogether()} or
{@link AnimatorSet#playSequentially(Animator[]) playSequentially()} methods can be called to add
a set of animations all at once, or the {@link AnimatorSet#play(Animator)} can be
used in conjunction with methods in the {@link AnimatorSet.Builder Builder}
class to add animations
one by one.</p>

<p>It is possible to set up a <code>AnimatorSet</code> with circular dependencies between
its animations. For example, an animation a1 could be set up to start before animation a2, a2
before a3, and a3 before a1. The results of this configuration are undefined, but will typically
result in none of the affected animations being played. Because of this (and because
circular dependencies do not make logical sense anyway), circular dependencies
should be avoided, and the dependency flow of animations should only be in one direction.

<div class=\"special reference\">
<h3>Developer Guides</h3>
<p>For more information about animating with {@code AnimatorSet}, read the
<a href=\"{@docRoot}guide/topics/graphics/prop-animation.html#choreography\">Property
Animation</a> developer guide.</p>
</div>
"
      classrelation 15017015 // <generalisation>
	relation 15017015 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15017015 // <generalisation>
	  b parent class_ref 6966327 // Animator
      end

      classrelation 15017271 // mPlayingSet (<unidirectional association>)
	relation 15017271 --->
	  stereotype "ArrayList"
	  a role_name "mPlayingSet" init_value " new ArrayList<Animator>()" private
	    comment "Internal variables
NOTE: This object implements the clone() method, making a deep copy of any referenced
objects. As other non-trivial fields are added to this class, make sure to add logic
to clone() to make deep copies of them.


Tracks animations currently being played, so that we know what to
cancel or end when cancel() or end() is called on this AnimatorSet

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 15017271 // mPlayingSet (<unidirectional association>)
	  b parent class_ref 6966327 // Animator
      end

      classrelation 15017399 // mNodeMap (<unidirectional association>)
	relation 15017399 --->
	  a role_name "mNodeMap" init_value " new ArrayMap<Animator, Node>()" private
	    comment "
Contains all nodes, mapped to their respective Animators. When new
dependency information is added for an Animator, we want to add it
to a single node representing that Animator, not create a new Node
if one already exists.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Animator, Node> ${name}${value};
"
	    classrelation_ref 15017399 // mNodeMap (<unidirectional association>)
	  b parent class_ref 6930743 // ArrayMap
      end

      class 6968375 "Node"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 15018551 // mAnimation (<unidirectional association>)
	  relation 15018551 --->
	    a role_name "mAnimation" package
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 15018551 // mAnimation (<unidirectional association>)
	    b parent class_ref 6966327 // Animator
	end

	classrelation 15018679 // mChildNodes (<unidirectional association>)
	  relation 15018679 --->
	    stereotype "ArrayList"
	    a role_name "mChildNodes" init_value " null" package
	      comment "Child nodes are the nodes associated with animations that will be played immediately
after current node.

"
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	      classrelation_ref 15018679 // mChildNodes (<unidirectional association>)
	    b parent class_ref 6968375 // Node
	end

	classrelation 15018807 // mTmpClone (<unidirectional association>)
	  relation 15018807 --->
	    a role_name "mTmpClone" init_value " null" private
	      comment "
Temporary field to hold the clone in AnimatorSet#clone. Cleaned after clone is complete

"
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 15018807 // mTmpClone (<unidirectional association>)
	    b parent class_ref 6968375 // Node
	end

	attribute 24001975 "mEnded"
	  package explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Flag indicating whether the animation in this node is finished. This flag
is used by AnimatorSet to check, as each animation ends, whether all child animations
are mEnded and it's time to send out an end event for the entire AnimatorSet.

"
	end

	classrelation 15018935 // mSiblings (<unidirectional association>)
	  relation 15018935 --->
	    stereotype "ArrayList"
	    a role_name "mSiblings" package
	      comment "Nodes with animations that are defined to play simultaneously with the animation
associated with this current node.

"
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	      classrelation_ref 15018935 // mSiblings (<unidirectional association>)
	    b parent class_ref 6968375 // Node
	end

	classrelation 15019063 // mParents (<unidirectional association>)
	  relation 15019063 --->
	    stereotype "ArrayList"
	    a role_name "mParents" package
	      comment "Parent nodes are the nodes with animations preceding current node's animation. Parent
nodes here are derived from user defined animation sequence.

"
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	      classrelation_ref 15019063 // mParents (<unidirectional association>)
	    b parent class_ref 6968375 // Node
	end

	classrelation 15019191 // mLatestParent (<unidirectional association>)
	  relation 15019191 --->
	    a role_name "mLatestParent" init_value " null" package
	      comment "
Latest parent is the parent node associated with a animation that finishes after all
the other parents' animations.

"
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 15019191 // mLatestParent (<unidirectional association>)
	    b parent class_ref 6968375 // Node
	end

	attribute 24002103 "mParentsAdded"
	  package explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 24002231 "mStartTime"
	  package explicit_type "long"
	  init_value " 0"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 24002359 "mEndTime"
	  package explicit_type "long"
	  init_value " 0"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 24002487 "mTotalDuration"
	  package explicit_type "long"
	  init_value " 0"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 77377719 "Node"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "animation" type class_ref 6966327 // Animator
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs the Node with the animation that it encapsulates. A Node has no
dependencies by default; dependencies are added via the addDependency()
method.

@param animation The animation that the Node encapsulates.
"
	end

	operation 77377847 "clone"
	  public return_type class_ref 6968375 // Node
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 77377975 "addChild"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "node" type class_ref 6968375 // Node
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77378103 "addSibling"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "node" type class_ref 6968375 // Node
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77378231 "addParent"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "node" type class_ref 6968375 // Node
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77378359 "addParents"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "parents" explicit_type "ArrayList<Node>"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 15017527 // mNodes (<unidirectional association>)
	relation 15017527 --->
	  stereotype "ArrayList"
	  a role_name "mNodes" init_value " new ArrayList<Node>()" private
	    comment "Set of all nodes created for this AnimatorSet. This list is used upon
starting the set, and the nodes are placed in sorted order into the
sortedNodes collection.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 15017527 // mNodes (<unidirectional association>)
	  b parent class_ref 6968375 // Node
      end

      class 6968503 "AnimatorSetListener"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 15018167 // <realization>
	  relation 15018167 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 15018167 // <realization>
	    b parent class_ref 6966583 // AnimatorListener
	end

	classrelation 15018295 // mAnimatorSet (<unidirectional association>)
	  relation 15018295 --->
	    a role_name "mAnimatorSet" private
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 15018295 // mAnimatorSet (<unidirectional association>)
	    b parent class_ref 6967991 // AnimatorSet
	end

	operation 77375671 "AnimatorSetListener"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "animatorSet" type class_ref 6967991 // AnimatorSet
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77375799 "onAnimationCancel"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 6966327 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77375927 "onAnimationEnd"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 6966327 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@SuppressWarnings(\"unchecked\")
"
	  
	  
	  
	end

	operation 77376055 "onAnimationRepeat"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 6966327 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Nothing to do"
	end

	operation 77376183 "onAnimationStart"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 6966327 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Nothing to do"
	end
      end

      classrelation 15017655 // mSetListener (<unidirectional association>)
	relation 15017655 --->
	  a role_name "mSetListener" init_value " new AnimatorSetListener(this)" private
	    comment "
Animator Listener that tracks the lifecycle of each Animator in the set. It will be added
to each Animator before they start and removed after they end.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15017655 // mSetListener (<unidirectional association>)
	  b parent class_ref 6968503 // AnimatorSetListener
      end

      attribute 24000951 "mTerminated"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Flag indicating that the AnimatorSet has been manually
terminated (by calling cancel() or end()).
This flag is used to avoid starting other animations when currently-playing
child animations of this AnimatorSet end. It also determines whether cancel/end
notifications are sent out via the normal AnimatorSetListener mechanism.

"
      end

      attribute 24001079 "mDependencyDirty"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Tracks whether any change has been made to the AnimatorSet, which is then used to
determine whether the dependency graph should be re-constructed.

"
      end

      attribute 24001207 "mStarted"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates whether an AnimatorSet has been start()'d, whether or
not there is a nonzero startDelay.

"
      end

      attribute 24001335 "mStartDelay"
	private explicit_type "long"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The amount of time in ms to delay starting the animation after start() is called
"
      end

      classrelation 15017783 // mDelayAnim (<unidirectional association>)
	relation 15017783 --->
	  a role_name "mDelayAnim" init_value " ValueAnimator.ofFloat(0f, 1f).setDuration(0)" private
	    comment " Animator used for a nonzero startDelay
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15017783 // mDelayAnim (<unidirectional association>)
	  b parent class_ref 6967863 // ValueAnimator
      end

      classrelation 15017911 // mRootNode (<unidirectional association>)
	relation 15017911 --->
	  a role_name "mRootNode" init_value " new Node(mDelayAnim)" private
	    comment " Root of the dependency tree of all the animators in the set. In this tree, parent-child
 relationship captures the order of animation (i.e. parent and child will play sequentially),
 and sibling relationship indicates \"with\" relationship, as sibling animators start at the
 same time.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15017911 // mRootNode (<unidirectional association>)
	  b parent class_ref 6968375 // Node
      end

      attribute 24001463 "mDuration"
	private explicit_type "long"
	init_value " -1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " How long the child animations should last in ms. The default value is negative, which
 simply means that there is no duration set on the AnimatorSet. When a real duration is
 set, it is passed along to the child animations.
"
      end

      classrelation 15018039 // mInterpolator (<unidirectional association>)
	relation 15018039 --->
	  a role_name "mInterpolator" init_value " null" private
	    comment " Records the interpolator for the set. Null value indicates that no interpolator
 was set on this AnimatorSet, so it should not be passed down to the children.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15018039 // mInterpolator (<unidirectional association>)
	  b parent class_ref 6966967 // TimeInterpolator
      end

      attribute 24001591 "mReversible"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Whether the AnimatorSet can be reversed.
"
      end

      attribute 24001719 "mTotalDuration"
	private explicit_type "long"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The total duration of finishing all the Animators in the set.
"
      end

      attribute 24001847 "mShouldIgnoreEndWithoutStart"
	const_attribute private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " In pre-N releases, calling end() before start() on an animator set is no-op. But that is not
 consistent with the behavior for other animator types. In order to keep the behavior
 consistent within Animation framework, when end() is called without start(), we will start
 the animator set and immediately end it for N and forward.
"
      end

      operation 77372087 "AnimatorSet"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77372215 "playTogether"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "Animator...items"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets up this AnimatorSet to play all of the supplied animations at the same time.
This is equivalent to calling {@link #play(Animator)} with the first animator in the
set and then {@link Builder#with(Animator)} with each of the other animators. Note that
an Animator with a {@link Animator#setStartDelay(long) startDelay} will not actually
start until that delay elapses, which means that if the first animator in the list
supplied to this constructor has a startDelay, none of the other animators will start
until that first animator's startDelay has elapsed.

@param items The animations that will be started simultaneously.
"
      end

      operation 77372343 "playTogether"
	public explicit_return_type "void"
	nparams 1
	  param inout name "items" explicit_type "Collection<Animator>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets up this AnimatorSet to play all of the supplied animations at the same time.

@param items The animations that will be started simultaneously.
"
      end

      operation 77372471 "playSequentially"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "Animator...items"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets up this AnimatorSet to play each of the supplied animations when the
previous animation ends.

@param items The animations that will be started one after another.
"
      end

      operation 77372599 "playSequentially"
	public explicit_return_type "void"
	nparams 1
	  param inout name "items" explicit_type "List<Animator>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets up this AnimatorSet to play each of the supplied animations when the
previous animation ends.

@param items The animations that will be started one after another.
"
      end

      operation 77372727 "getChildAnimations"
	public return_type class_ref 6966327 // Animator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}ArrayList<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current list of child Animator objects controlled by this
AnimatorSet. This is a copy of the internal list; modifications to the returned list
will not affect the AnimatorSet, although changes to the underlying Animator objects
will affect those objects being managed by the AnimatorSet.

@return ArrayList<Animator> The list of child animations of this AnimatorSet.
"
      end

      operation 77372855 "setTarget"
	public explicit_return_type "void"
	nparams 1
	  param inout name "target" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets the target object for all current {@link #getChildAnimations() child animations}
of this AnimatorSet that take targets ({@link ObjectAnimator} and
AnimatorSet).

@param target The object being animated
"
      end

      operation 77372983 "getChangingConfigurations"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "@hide
"
      end

      operation 77373111 "setInterpolator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "interpolator" type class_ref 6966967 // TimeInterpolator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets the TimeInterpolator for all current {@link #getChildAnimations() child animations}
of this AnimatorSet. The default value is null, which means that no interpolator
is set on this AnimatorSet. Setting the interpolator to any non-null value
will cause that interpolator to be set on the child animations
when the set is started.

@param interpolator the interpolator to be used by each child animation of this AnimatorSet
"
      end

      operation 77373239 "getInterpolator"
	public return_type class_ref 6966967 // TimeInterpolator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      class 6968631 "Builder"
	visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 15019319 // mCurrentNode (<unidirectional association>)
	  relation 15019319 --->
	    a role_name "mCurrentNode" private
	      comment "
This tracks the current node being processed. It is supplied to the play() method
of AnimatorSet and passed into the constructor of Builder.

"
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 15019319 // mCurrentNode (<unidirectional association>)
	    b parent class_ref 6968375 // Node
	end

	operation 77378487 "Builder"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "anim" type class_ref 6966327 // Animator
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "package-private constructor. Builders are only constructed by AnimatorSet, when the
play() method is called.

@param anim The animation that is the dependency for the other animations passed into
the other methods of this Builder object.
"
	end

	operation 77378615 "with"
	  public return_type class_ref 6968631 // Builder
	  nparams 1
	    param inout name "anim" type class_ref 6966327 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets up the given animation to play at the same time as the animation supplied in the
{@link AnimatorSet#play(Animator)} call that created this <code>Builder</code> object.

@param anim The animation that will play when the animation supplied to the
{@link AnimatorSet#play(Animator)} method starts.
"
	end

	operation 77378743 "before"
	  public return_type class_ref 6968631 // Builder
	  nparams 1
	    param inout name "anim" type class_ref 6966327 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets up the given animation to play when the animation supplied in the
{@link AnimatorSet#play(Animator)} call that created this <code>Builder</code> object
ends.

@param anim The animation that will play when the animation supplied to the
{@link AnimatorSet#play(Animator)} method ends.
"
	end

	operation 77378871 "after"
	  public return_type class_ref 6968631 // Builder
	  nparams 1
	    param inout name "anim" type class_ref 6966327 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets up the given animation to play when the animation supplied in the
{@link AnimatorSet#play(Animator)} call that created this <code>Builder</code> object
to start when the animation supplied in this method call ends.

@param anim The animation whose end will cause the animation supplied to the
{@link AnimatorSet#play(Animator)} method to play.
"
	end

	operation 77378999 "after"
	  public return_type class_ref 6968631 // Builder
	  nparams 1
	    param in name "delay" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets up the animation supplied in the
{@link AnimatorSet#play(Animator)} call that created this <code>Builder</code> object
to play when the given amount of time elapses.

@param delay The number of milliseconds that should elapse before the
animation starts.
"
	end
      end

      operation 77373367 "play"
	public return_type class_ref 6968631 // Builder
	nparams 1
	  param inout name "anim" type class_ref 6966327 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method creates a <code>Builder</code> object, which is used to
set up playing constraints. This initial <code>play()</code> method
tells the <code>Builder</code> the animation that is the dependency for
the succeeding commands to the <code>Builder</code>. For example,
calling <code>play(a1).with(a2)</code> sets up the AnimatorSet to play
<code>a1</code> and <code>a2</code> at the same time,
<code>play(a1).before(a2)</code> sets up the AnimatorSet to play
<code>a1</code> first, followed by <code>a2</code>, and
<code>play(a1).after(a2)</code> sets up the AnimatorSet to play
<code>a2</code> first, followed by <code>a1</code>.

<p>Note that <code>play()</code> is the only way to tell the
<code>Builder</code> the animation upon which the dependency is created,
so successive calls to the various functions in <code>Builder</code>
will all refer to the initial parameter supplied in <code>play()</code>
as the dependency of the other animations. For example, calling
<code>play(a1).before(a2).before(a3)</code> will play both <code>a2</code>
and <code>a3</code> when a1 ends; it does not set up a dependency between
<code>a2</code> and <code>a3</code>.</p>

@param anim The animation that is the dependency used in later calls to the
methods in the returned <code>Builder</code> object. A null parameter will result
in a null <code>Builder</code> return value.
@return Builder The object that constructs the AnimatorSet based on the dependencies
outlined in the calls to <code>play</code> and the other methods in the
<code>Builder</code object.
"
      end

      operation 77373495 "cancel"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
@Override
"
	
	
	
	comment "{@inheritDoc}

<p>Note that canceling a <code>AnimatorSet</code> also cancels all of the animations that it
is responsible for.</p>
"
      end

      operation 77373623 "end"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}

<p>Note that ending a <code>AnimatorSet</code> also ends all of the animations that it is
responsible for.</p>
"
      end

      operation 77373751 "endRemainingAnimations"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Iterate the animations that haven't finished or haven't started, and end them.
"
      end

      operation 77373879 "isRunning"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns true if any of the child animations of this AnimatorSet have been started and have
not yet ended. Child animations will not be started until the AnimatorSet has gone past
its initial delay set through {@link #setStartDelay(long)}.

@return Whether this AnimatorSet has gone past the initial delay, and at least one child
        animation has been started and not yet ended.
"
      end

      operation 77374007 "isStarted"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77374135 "getStartDelay"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "The amount of time, in milliseconds, to delay starting the animation after
{@link #start()} is called.

@return the number of milliseconds to delay running the animation
"
      end

      operation 77374263 "setStartDelay"
	public explicit_return_type "void"
	nparams 1
	  param in name "startDelay" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "The amount of time, in milliseconds, to delay starting the animation after
{@link #start()} is called. Note that the start delay should always be non-negative. Any
negative start delay will be clamped to 0 on N and above.

@param startDelay The amount of the delay, in milliseconds
"
      end

      operation 77374391 "getDuration"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the length of each of the child animations of this AnimatorSet. This value may
be less than 0, which indicates that no duration has been set on this AnimatorSet
and each of the child animations will use their own duration.

@return The length of the animation, in milliseconds, of each of the child
animations of this AnimatorSet.
"
      end

      operation 77374519 "setDuration"
	public return_type class_ref 6967991 // AnimatorSet
	nparams 1
	  param in name "duration" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets the length of each of the current child animations of this AnimatorSet. By default,
each child animation will use its own duration. If the duration is set on the AnimatorSet,
then each child animation inherits this duration.

@param duration The length of the animation, in milliseconds, of each of the child
animations of this AnimatorSet.
"
      end

      operation 77374647 "setupStartValues"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77374775 "setupEndValues"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77374903 "pause"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77375031 "resume"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77375159 "start"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
@Override
"
	
	
	
	comment "{@inheritDoc}

<p>Starting this <code>AnimatorSet</code> will, in turn, start the animations for which
it is responsible. The details of when exactly those animations are started depends on
the dependency relationships that have been set up between the animations.
"
      end

      operation 77375287 "updateAnimatorsDuration"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77375415 "start"
	package explicit_return_type "void"
	nparams 1
	  param in name "node" type class_ref 6968375 // Node
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77375543 "clone"
	public return_type class_ref 6967991 // AnimatorSet
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77376311 "onChildAnimatorEnded"
	private explicit_return_type "void"
	nparams 1
	  param inout name "animation" type class_ref 6966327 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77376439 "canReverse"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "AnimatorSet is only reversible when the set contains no sequential animation, and no child
animators have a start delay.
@hide
"
      end

      operation 77376567 "reverse"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "@hide
"
      end

      operation 77376695 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77376823 "printChildCount"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77376951 "createDependencyGraph"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77377079 "updatePlayTime"
	private explicit_return_type "void"
	nparams 2
	  param inout name "parent" type class_ref 6968375 // Node
	  param inout name "visited" explicit_type "ArrayList<Node>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Based on parent's start/end time, calculate children's start/end time. If cycle exists in
the graph, all the nodes on the cycle will be marked to start at {@link #DURATION_INFINITE},
meaning they will ever play.
"
      end

      operation 77377207 "findSiblings"
	private explicit_return_type "void"
	nparams 2
	  param inout name "node" type class_ref 6968375 // Node
	  param inout name "siblings" explicit_type "ArrayList<Node>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Recursively find all the siblings"
      end

      operation 77377335 "shouldPlayTogether"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide
TODO: For animatorSet defined in XML, we can use a flag to indicate what the play order
if defined (i.e. sequential or together), then we can use the flag instead of calculate
dynamically.
@return whether all the animators in the set are supposed to play together
"
      end

      operation 77377463 "getTotalDuration"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77377591 "getNodeForAnimation"
	private return_type class_ref 6968375 // Node
	nparams 1
	  param inout name "anim" type class_ref 6966327 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 6968119 "Keyframe"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class holds a time/value pair for an animation. The Keyframe class is used
by {@link ValueAnimator} to define the values that the animation target will have over the course
of the animation. As the time proceeds from one keyframe to the other, the value of the
target object will animate between the value at the previous keyframe and the value at the
next keyframe. Each keyframe also holds an optional {@link TimeInterpolator}
object, which defines the time interpolation over the intervalue preceding the keyframe.

<p>The Keyframe class itself is abstract. The type-specific factory methods will return
a subclass of Keyframe specific to the type of value being stored. This is done to improve
performance when dealing with the most common cases (e.g., <code>float</code> and
<code>int</code> values). Other types will fall into a more general Keyframe class that
treats its values as Objects. Unless your animation requires dealing with a custom type
or a data structure that needs to be animated directly (and evaluated using an implementation
of {@link TypeEvaluator}), you should stick to using float and int as animations using those
types have lower runtime overhead than other types.</p>
"
      attribute 24004023 "mHasValue"
	package explicit_type "boolean"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Flag to indicate whether this keyframe has a valid value. This flag is used when an
animation first starts, to populate placeholder keyframes with real values derived
from the target object.

"
      end

      attribute 24004151 "mValueWasSetOnStart"
	package explicit_type "boolean"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Flag to indicate whether the value in the keyframe was read from the target object or not.
If so, its value will be recalculated if target changes.

"
      end

      attribute 24004279 "mFraction"
	package explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The time at which mValue will hold true.

"
      end

      classrelation 15022903 // mInterpolator (<unidirectional association>)
	relation 15022903 --->
	  a role_name "mInterpolator" init_value " null" private
	    comment "
The optional time interpolator for the interval preceding this keyframe. A null interpolator
(the default) results in linear interpolation over the interval.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15022903 // mInterpolator (<unidirectional association>)
	  b parent class_ref 6966967 // TimeInterpolator
      end

      operation 77386039 "ofInt"
	class_operation public return_type class_ref 6968119 // Keyframe
	nparams 2
	  param in name "fraction" explicit_type "float"
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a Keyframe object with the given time and value. The time defines the
time, as a proportion of an overall animation's duration, at which the value will hold true
for the animation. The value for the animation between keyframes will be calculated as
an interpolation between the values at those keyframes.

@param fraction The time, expressed as a value between 0 and 1, representing the fraction
of time elapsed of the overall animation duration.
@param value The value that the object will animate to as the animation time approaches
the time in this keyframe, and the the value animated from as the time passes the time in
this keyframe.
"
      end

      operation 77386167 "ofInt"
	class_operation public return_type class_ref 6968119 // Keyframe
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a Keyframe object with the given time. The value at this time will be derived
from the target object when the animation first starts (note that this implies that keyframes
with no initial value must be used as part of an {@link ObjectAnimator}).
The time defines the
time, as a proportion of an overall animation's duration, at which the value will hold true
for the animation. The value for the animation between keyframes will be calculated as
an interpolation between the values at those keyframes.

@param fraction The time, expressed as a value between 0 and 1, representing the fraction
of time elapsed of the overall animation duration.
"
      end

      operation 77386295 "ofFloat"
	class_operation public return_type class_ref 6968119 // Keyframe
	nparams 2
	  param in name "fraction" explicit_type "float"
	  param in name "value" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a Keyframe object with the given time and value. The time defines the
time, as a proportion of an overall animation's duration, at which the value will hold true
for the animation. The value for the animation between keyframes will be calculated as
an interpolation between the values at those keyframes.

@param fraction The time, expressed as a value between 0 and 1, representing the fraction
of time elapsed of the overall animation duration.
@param value The value that the object will animate to as the animation time approaches
the time in this keyframe, and the the value animated from as the time passes the time in
this keyframe.
"
      end

      operation 77386423 "ofFloat"
	class_operation public return_type class_ref 6968119 // Keyframe
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a Keyframe object with the given time. The value at this time will be derived
from the target object when the animation first starts (note that this implies that keyframes
with no initial value must be used as part of an {@link ObjectAnimator}).
The time defines the
time, as a proportion of an overall animation's duration, at which the value will hold true
for the animation. The value for the animation between keyframes will be calculated as
an interpolation between the values at those keyframes.

@param fraction The time, expressed as a value between 0 and 1, representing the fraction
of time elapsed of the overall animation duration.
"
      end

      operation 77386551 "ofObject"
	class_operation public return_type class_ref 6968119 // Keyframe
	nparams 2
	  param in name "fraction" explicit_type "float"
	  param inout name "value" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a Keyframe object with the given time and value. The time defines the
time, as a proportion of an overall animation's duration, at which the value will hold true
for the animation. The value for the animation between keyframes will be calculated as
an interpolation between the values at those keyframes.

@param fraction The time, expressed as a value between 0 and 1, representing the fraction
of time elapsed of the overall animation duration.
@param value The value that the object will animate to as the animation time approaches
the time in this keyframe, and the the value animated from as the time passes the time in
this keyframe.
"
      end

      operation 77386679 "ofObject"
	class_operation public return_type class_ref 6968119 // Keyframe
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a Keyframe object with the given time. The value at this time will be derived
from the target object when the animation first starts (note that this implies that keyframes
with no initial value must be used as part of an {@link ObjectAnimator}).
The time defines the
time, as a proportion of an overall animation's duration, at which the value will hold true
for the animation. The value for the animation between keyframes will be calculated as
an interpolation between the values at those keyframes.

@param fraction The time, expressed as a value between 0 and 1, representing the fraction
of time elapsed of the overall animation duration.
"
      end

      operation 77386807 "hasValue"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this keyframe has a valid value. This method is called internally when
an {@link ObjectAnimator} first starts; keyframes without values are assigned values at
that time by deriving the value for the property from the target object.

@return boolean Whether this object has a value assigned.
"
      end

      operation 77386935 "valueWasSetOnStart"
	package explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the Keyframe's value was acquired from the target object, this flag should be set so that,
if target changes, value will be reset.

@return boolean Whether this Keyframe's value was retieved from the target object or not.
"
      end

      operation 77387063 "setValueWasSetOnStart"
	package explicit_return_type "void"
	nparams 1
	  param inout name "valueWasSetOnStart" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77387191 "getValue"
	abstract public explicit_return_type "Object"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value for this Keyframe.

@return The value for this Keyframe.
"
      end

      operation 77387319 "setValue"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value for this Keyframe.

@param value value for this Keyframe.
"
      end

      operation 77387447 "getFraction"
	public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the time for this keyframe, as a fraction of the overall animation duration.

@return The time associated with this keyframe, as a fraction of the overall animation
duration. This should be a value between 0 and 1.
"
      end

      operation 77387575 "setFraction"
	public explicit_return_type "void"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the time for this keyframe, as a fraction of the overall animation duration.

@param fraction time associated with this keyframe, as a fraction of the overall animation
duration. This should be a value between 0 and 1.
"
      end

      operation 77387703 "getInterpolator"
	public return_type class_ref 6966967 // TimeInterpolator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the optional interpolator for this Keyframe. A value of <code>null</code> indicates
that there is no interpolation, which is the same as linear interpolation.

@return The optional interpolator for this Keyframe.
"
      end

      operation 77387831 "setInterpolator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "interpolator" type class_ref 6966967 // TimeInterpolator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the optional interpolator for this Keyframe. A value of <code>null</code> indicates
that there is no interpolation, which is the same as linear interpolation.

@return The optional interpolator for this Keyframe.
"
      end

      operation 77387959 "getType"
	public explicit_return_type "Class"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the type of keyframe. This information is used by ValueAnimator to determine the type of
{@link TypeEvaluator} to use when calculating values between keyframes. The type is based
on the type of Keyframe created.

@return The type of the value stored in the Keyframe.
"
      end

      operation 77388087 "clone"
	abstract public return_type class_ref 6968119 // Keyframe
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      class 6970679 "ObjectKeyframe"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 15023031 // <generalisation>
	  relation 15023031 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 15023031 // <generalisation>
	    b parent class_ref 6968119 // Keyframe
	end

	operation 77388215 "ObjectKeyframe"
	  package explicit_return_type ""
	  nparams 2
	    param in name "fraction" explicit_type "float"
	    param inout name "value" explicit_type "Object"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77388343 "getValue"
	  public explicit_return_type "Object"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77388471 "setValue"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "value" explicit_type "Object"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77388599 "clone"
	  public return_type class_ref 6970679 // ObjectKeyframe
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 6970807 "IntKeyframe"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 15023287 // <generalisation>
	  relation 15023287 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 15023287 // <generalisation>
	    b parent class_ref 6968119 // Keyframe
	end

	attribute 24004407 "mValue"
	  package explicit_type "int"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The value of the animation at the time mFraction.

"
	end

	operation 77388727 "IntKeyframe"
	  package explicit_return_type ""
	  nparams 2
	    param in name "fraction" explicit_type "float"
	    param in name "value" explicit_type "int"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77388855 "IntKeyframe"
	  package explicit_return_type ""
	  nparams 1
	    param in name "fraction" explicit_type "float"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77388983 "getIntValue"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77389111 "getValue"
	  public explicit_return_type "Object"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77389239 "setValue"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "value" explicit_type "Object"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77389367 "clone"
	  public return_type class_ref 6970807 // IntKeyframe
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 6970935 "FloatKeyframe"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 15023415 // <generalisation>
	  relation 15023415 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 15023415 // <generalisation>
	    b parent class_ref 6968119 // Keyframe
	end

	attribute 24004535 "mValue"
	  package explicit_type "float"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The value of the animation at the time mFraction.

"
	end

	operation 77389495 "FloatKeyframe"
	  package explicit_return_type ""
	  nparams 2
	    param in name "fraction" explicit_type "float"
	    param in name "value" explicit_type "float"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77389623 "FloatKeyframe"
	  package explicit_return_type ""
	  nparams 1
	    param in name "fraction" explicit_type "float"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77389751 "getFloatValue"
	  public explicit_return_type "float"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77389879 "getValue"
	  public explicit_return_type "Object"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77390007 "setValue"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "value" explicit_type "Object"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77390135 "clone"
	  public return_type class_ref 6970935 // FloatKeyframe
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 6968247 "AnimatorListenerAdapter"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This adapter class provides empty implementations of the methods from {@link android.animation.Animator.AnimatorListener}.
Any custom listener that cares only about a subset of the methods of this listener can
simply subclass this adapter class instead of implementing the interface directly.
"
      classrelation 15016759 // <realization>
	relation 15016759 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15016759 // <realization>
	  b parent class_ref 6966583 // AnimatorListener
      end

      classrelation 15016887 // <realization>
	relation 15016887 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15016887 // <realization>
	  b parent class_ref 6966711 // AnimatorPauseListener
      end

      operation 77371319 "onAnimationCancel"
	public explicit_return_type "void"
	nparams 1
	  param inout name "animation" type class_ref 6966327 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 77371447 "onAnimationEnd"
	public explicit_return_type "void"
	nparams 1
	  param inout name "animation" type class_ref 6966327 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 77371575 "onAnimationRepeat"
	public explicit_return_type "void"
	nparams 1
	  param inout name "animation" type class_ref 6966327 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 77371703 "onAnimationStart"
	public explicit_return_type "void"
	nparams 1
	  param inout name "animation" type class_ref 6966327 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 77371831 "onAnimationPause"
	public explicit_return_type "void"
	nparams 1
	  param inout name "animation" type class_ref 6966327 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 77371959 "onAnimationResume"
	public explicit_return_type "void"
	nparams 1
	  param inout name "animation" type class_ref 6966327 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
"
      end
    end

    class 6968759 "ArgbEvaluator"
      visibility public 
      nactuals 1
      actual class class_ref 6967735 // TypeEvaluator
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This evaluator can be used to perform type interpolation between integer
values that represent ARGB colors.
"
      classrelation 15019447 // <realization>
	relation 15019447 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15019447 // <realization>
	  b parent class_ref 6967735 // TypeEvaluator
      end

      classrelation 15019575 // sInstance (<unidirectional association>)
	relation 15019575 --->
	  a role_name "sInstance" init_value " new ArgbEvaluator()" class_relation const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15019575 // sInstance (<unidirectional association>)
	  b parent class_ref 6968759 // ArgbEvaluator
      end

      operation 77379127 "getInstance"
	class_operation public return_type class_ref 6968759 // ArgbEvaluator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an instance of <code>ArgbEvaluator</code> that may be used in
{@link ValueAnimator#setEvaluator(TypeEvaluator)}. The same instance may
be used in multiple <code>Animator</code>s because it holds no state.
@return An instance of <code>ArgbEvalutor</code>.

@hide
"
      end

      operation 77379255 "evaluate"
	public explicit_return_type "Object"
	nparams 3
	  param in name "fraction" explicit_type "float"
	  param inout name "startValue" explicit_type "Object"
	  param inout name "endValue" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This function returns the calculated in-between value for a color
given integers that represent the start and end values in the four
bytes of the 32-bit int. Each channel is separately linearly interpolated
and the resulting calculated values are recombined into the return value.

@param fraction The fraction from the starting to the ending values
@param startValue A 32-bit int value representing colors in the
separate bytes of the parameter
@param endValue A 32-bit int value representing colors in the
separate bytes of the parameter
@return A value that is calculated to be the linearly interpolated
result, derived by separating the start and end values into separate
color channels and interpolating each one separately, recombining the
resulting values in the same way.
"
      end
    end

    class 6968887 "BidirectionalTypeConverter"
      abstract visibility public 
      nformals 2
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 6969015 // TypeConverter
        rank 0 explicit_value ""
      actual class class_ref 6969015 // TypeConverter
        rank 1 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Abstract base class used convert type T to another type V and back again. This
is necessary when the value types of in animation are different from the property
type. BidirectionalTypeConverter is needed when only the final value for the
animation is supplied to animators.
@see PropertyValuesHolder#setConverter(TypeConverter)
"
      classrelation 15019959 // <realization>
	relation 15019959 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15019959 // <realization>
	  b parent class_ref 6969015 // TypeConverter
      end

      classrelation 15020087 // mInvertedConverter (<unidirectional association>)
	relation 15020087 --->
	  a role_name "mInvertedConverter" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15020087 // mInvertedConverter (<unidirectional association>)
	  b parent class_ref 6968887 // BidirectionalTypeConverter
      end

      operation 77379895 "BidirectionalTypeConverter"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param inout name "fromClass" explicit_type "Class"
	  param inout name "toClass" explicit_type "Class"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<T> ${p0}, ${t1}<V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77380023 "convertBack"
	abstract cpp_inline public explicit_return_type "T"
	nparams 1
	  param inout name "value" explicit_type "V"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Does a conversion from the target type back to the source type. The subclass
must implement this when a TypeConverter is used in animations and current
values will need to be read for an animation.
@param value The Object to convert.
@return A value of type T, converted from <code>value</code>.
"
      end

      operation 77380151 "invert"
	cpp_inline public return_type class_ref 6968887 // BidirectionalTypeConverter
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V, T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the inverse of this converter, where the from and to classes are reversed.
The inverted converter uses this convert to call {@link #convertBack(Object)} for
{@link #convert(Object)} calls and {@link #convert(Object)} for
{@link #convertBack(Object)} calls.
@return The inverse of this converter, where the from and to classes are reversed.
"
      end

      class 6969143 "InvertedConverter"
	visibility private 
	nformals 2
	formal name "From" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "To" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 2
	actual class class_ref 6968887 // BidirectionalTypeConverter
	  rank 0 explicit_value ""
	actual class class_ref 6968887 // BidirectionalTypeConverter
	  rank 1 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 15020215 // <realization>
	  relation 15020215 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 15020215 // <realization>
	    b parent class_ref 6968887 // BidirectionalTypeConverter
	end

	classrelation 15020343 // mConverter (<unidirectional association>)
	  relation 15020343 --->
	    a role_name "mConverter" private
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<To, From> ${name}${value};
"
	      classrelation_ref 15020343 // mConverter (<unidirectional association>)
	    b parent class_ref 6968887 // BidirectionalTypeConverter
	end

	operation 77380279 "InvertedConverter"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param inout name "converter" type class_ref 6968887 // BidirectionalTypeConverter
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<To, From> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77380407 "convertBack"
	  cpp_inline public explicit_return_type "From"
	  nparams 1
	    param inout name "value" explicit_type "To"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 77380535 "convert"
	  cpp_inline public explicit_return_type "To"
	  nparams 1
	    param inout name "value" explicit_type "From"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 6969015 "TypeConverter"
      abstract visibility public 
      nformals 2
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Abstract base class used convert type T to another type V. This
is necessary when the value types of in animation are different
from the property type.
@see PropertyValuesHolder#setConverter(TypeConverter)
"
      operation 77379383 "TypeConverter"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param inout name "fromClass" explicit_type "Class"
	  param inout name "toClass" explicit_type "Class"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<T> ${p0}, ${t1}<V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77379511 "getTargetType"
	cpp_inline package explicit_return_type "Class"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the target converted type. Used by the animation system to determine
the proper setter function to call.
@return The Class to convert the input to.
"
      end

      operation 77379639 "getSourceType"
	cpp_inline package explicit_return_type "Class"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the source conversion type.
"
      end

      operation 77379767 "convert"
	abstract cpp_inline public explicit_return_type "V"
	nparams 1
	  param inout name "value" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts a value from one type to another.
@param value The Object to convert.
@return A value of type V, converted from <code>value</code>.
"
      end
    end

    class 6969271 "FloatArrayEvaluator"
      visibility public 
      nactuals 1
      actual class class_ref 6967735 // TypeEvaluator
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This evaluator can be used to perform type interpolation between <code>float[]</code> values.
Each index into the array is treated as a separate value to interpolate. For example,
evaluating <code>{100, 200}</code> and <code>{300, 400}</code> will interpolate the value at
the first index between 100 and 300 and the value at the second index value between 200 and 400.
"
      classrelation 15020471 // <realization>
	relation 15020471 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15020471 // <realization>
	  b parent class_ref 6967735 // TypeEvaluator
      end

      attribute 24002615 "mArray"
	private explicit_type "float"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 77380663 "FloatArrayEvaluator"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a FloatArrayEvaluator that does not reuse the animated value. Care must be taken
when using this option because on every evaluation a new <code>float[]</code> will be
allocated.

@see #FloatArrayEvaluator(float[])
"
      end

      operation 77380791 "FloatArrayEvaluator"
	public explicit_return_type ""
	nparams 1
	  param inout name "reuseArray" explicit_type "float"
	multiplicity "[]"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a FloatArrayEvaluator that reuses <code>reuseArray</code> for every evaluate() call.
Caution must be taken to ensure that the value returned from
{@link android.animation.ValueAnimator#getAnimatedValue()} is not cached, modified, or
used across threads. The value will be modified on each <code>evaluate()</code> call.

@param reuseArray The array to modify and return from <code>evaluate</code>.
"
      end

      operation 77380919 "evaluate"
	public explicit_return_type "float"
	nparams 3
	  param in name "fraction" explicit_type "float"
	  param inout name "startValue" explicit_type "float"
	multiplicity "[]"
	  param inout name "endValue" explicit_type "float"
	multiplicity "[]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Interpolates the value at each index by the fraction. If
{@link #FloatArrayEvaluator(float[])} was used to construct this object,
<code>reuseArray</code> will be returned, otherwise a new <code>float[]</code>
will be returned.

@param fraction   The fraction from the starting to the ending values
@param startValue The start value.
@param endValue   The end value.
@return A <code>float[]</code> where each element is an interpolation between
        the same index in startValue and endValue.
"
      end
    end

    class 6969399 "FloatEvaluator"
      visibility public 
      nactuals 1
      actual class class_ref 6967735 // TypeEvaluator
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This evaluator can be used to perform type interpolation between <code>float</code> values.
"
      classrelation 15020599 // <realization>
	relation 15020599 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15020599 // <realization>
	  b parent class_ref 6967735 // TypeEvaluator
      end

      operation 77381047 "evaluate"
	public explicit_return_type "Float"
	nparams 3
	  param in name "fraction" explicit_type "float"
	  param inout name "startValue" explicit_type "Number"
	  param inout name "endValue" explicit_type "Number"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This function returns the result of linearly interpolating the start and end values, with
<code>fraction</code> representing the proportion between the start and end values. The
calculation is a simple parametric calculation: <code>result = x0 + t * (v1 - v0)</code>,
where <code>x0</code> is <code>startValue</code>, <code>x1</code> is <code>endValue</code>,
and <code>t</code> is <code>fraction</code>.

@param fraction   The fraction from the starting to the ending values
@param startValue The start value; should be of type <code>float</code> or
                  <code>Float</code>
@param endValue   The end value; should be of type <code>float</code> or <code>Float</code>
@return A linear interpolation between the start and end values, given the
        <code>fraction</code> parameter.
"
      end
    end

    class 6969527 "FloatKeyframeSet"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class holds a collection of FloatKeyframe objects and is called by ValueAnimator to calculate
values between those keyframes for a given animation. The class internal to the animation
package because it is an implementation detail of how Keyframes are stored and used.

<p>This type-specific subclass of KeyframeSet, along with the other type-specific subclass for
int, exists to speed up the getValue() method when there is no custom
TypeEvaluator set for the animation, so that values can be calculated without autoboxing to the
Object equivalents of these primitive types.</p>
"
      classrelation 15021879 // <generalisation>
	relation 15021879 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15021879 // <generalisation>
	  b parent class_ref 6969655 // KeyframeSet
      end

      classrelation 15022007 // <realization>
	relation 15022007 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15022007 // <realization>
	  b parent class_ref 6970039 // FloatKeyframes
      end

      attribute 24002871 "firstValue"
	private explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24002999 "lastValue"
	private explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24003127 "deltaValue"
	private explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24003255 "firstTime"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 77383991 "FloatKeyframeSet"
	public explicit_return_type ""
	nparams 1
	  param inout name "" explicit_type "FloatKeyframe...keyframes"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77384119 "getValue"
	public explicit_return_type "Object"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77384247 "clone"
	public return_type class_ref 6969527 // FloatKeyframeSet
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77384375 "invalidateCache"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77384503 "getFloatValue"
	public explicit_return_type "float"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77384631 "getType"
	public explicit_return_type "Class"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 6969655 "KeyframeSet"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class holds a collection of Keyframe objects and is called by ValueAnimator to calculate
values between those keyframes for a given animation. The class internal to the animation
package because it is an implementation detail of how Keyframes are stored and used.
@hide
"
      classrelation 15021111 // <realization>
	relation 15021111 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15021111 // <realization>
	  b parent class_ref 6969783 // Keyframes
      end

      attribute 24002743 "mNumKeyframes"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 15021239 // mFirstKeyframe (<unidirectional association>)
	relation 15021239 --->
	  a role_name "mFirstKeyframe" package
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15021239 // mFirstKeyframe (<unidirectional association>)
	  b parent class_ref 6968119 // Keyframe
      end

      classrelation 15021367 // mLastKeyframe (<unidirectional association>)
	relation 15021367 --->
	  a role_name "mLastKeyframe" package
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15021367 // mLastKeyframe (<unidirectional association>)
	  b parent class_ref 6968119 // Keyframe
      end

      classrelation 15021495 // mInterpolator (<unidirectional association>)
	relation 15021495 --->
	  a role_name "mInterpolator" package
	    comment " only used in the 2-keyframe case"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15021495 // mInterpolator (<unidirectional association>)
	  b parent class_ref 6966967 // TimeInterpolator
      end

      classrelation 15021623 // mKeyframes (<unidirectional association>)
	relation 15021623 --->
	  stereotype "List"
	  a role_name "mKeyframes" package
	    comment " only used when there are not 2 keyframes"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 15021623 // mKeyframes (<unidirectional association>)
	  b parent class_ref 6968119 // Keyframe
      end

      classrelation 15021751 // mEvaluator (<unidirectional association>)
	relation 15021751 --->
	  a role_name "mEvaluator" package
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15021751 // mEvaluator (<unidirectional association>)
	  b parent class_ref 6967735 // TypeEvaluator
      end

      operation 77382199 "KeyframeSet"
	public explicit_return_type ""
	nparams 1
	  param inout name "" explicit_type "Keyframe...keyframes"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77382327 "invalidateCache"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "If subclass has variables that it calculates based on the Keyframes, it should reset them
when this method is called because Keyframe contents might have changed.
"
      end

      operation 77382455 "getKeyframes"
	public return_type class_ref 6968119 // Keyframe
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77382583 "ofInt"
	class_operation public return_type class_ref 6969655 // KeyframeSet
	nparams 1
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77382711 "ofFloat"
	class_operation public return_type class_ref 6969655 // KeyframeSet
	nparams 1
	  param inout name "" explicit_type "float...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77382839 "ofKeyframe"
	class_operation public return_type class_ref 6969655 // KeyframeSet
	nparams 1
	  param inout name "" explicit_type "Keyframe...keyframes"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77382967 "ofObject"
	class_operation public return_type class_ref 6969655 // KeyframeSet
	nparams 1
	  param inout name "" explicit_type "Object...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77383095 "ofPath"
	class_operation public return_type class_ref 6970167 // PathKeyframes
	nparams 1
	  param inout name "path" type class_ref 5842743 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77383223 "ofPath"
	class_operation public return_type class_ref 6970167 // PathKeyframes
	nparams 2
	  param inout name "path" type class_ref 5842743 // Path
	  param in name "error" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77383351 "setEvaluator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "evaluator" type class_ref 6967735 // TypeEvaluator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the TypeEvaluator to be used when calculating animated values. This object
is required only for KeyframeSets that are not either IntKeyframeSet or FloatKeyframeSet,
both of which assume their own evaluator to speed up calculations with those primitive
types.

@param evaluator The TypeEvaluator to be used to calculate animated values.
"
      end

      operation 77383479 "getType"
	public explicit_return_type "Class"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77383607 "clone"
	public return_type class_ref 6969655 // KeyframeSet
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77383735 "getValue"
	public explicit_return_type "Object"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the animated value, given the elapsed fraction of the animation (interpolated by the
animation's interpolator) and the evaluator used to calculate in-between values. This
function maps the input fraction to the appropriate keyframe interval and a fraction
between them and returns the interpolated value. Note that the input fraction may fall
outside the [0-1] bounds, if the animation's interpolator made that happen (e.g., a
spring interpolation that might send the fraction past 1.0). We handle this situation by
just using the two keyframes at the appropriate end when the value is outside those bounds.

@param fraction The elapsed fraction of the animation
@return The animated value.
"
      end

      operation 77383863 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 6969783 "Keyframes"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface abstracts a collection of Keyframe objects and is called by
ValueAnimator to calculate values between those keyframes for a given animation.
@hide
"
      operation 77381175 "setEvaluator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "evaluator" type class_ref 6967735 // TypeEvaluator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the TypeEvaluator to be used when calculating animated values. This object
is required only for Keyframes that are not either IntKeyframes or FloatKeyframes,
both of which assume their own evaluator to speed up calculations with those primitive
types.

@param evaluator The TypeEvaluator to be used to calculate animated values.
"
      end

      operation 77381303 "getType"
	public explicit_return_type "Class"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return The value type contained by the contained Keyframes.
"
      end

      operation 77381431 "getValue"
	public explicit_return_type "Object"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the animated value, given the elapsed fraction of the animation (interpolated by the
animation's interpolator) and the evaluator used to calculate in-between values. This
function maps the input fraction to the appropriate keyframe interval and a fraction
between them and returns the interpolated value. Note that the input fraction may fall
outside the [0-1] bounds, if the animation's interpolator made that happen (e.g., a
spring interpolation that might send the fraction past 1.0). We handle this situation by
just using the two keyframes at the appropriate end when the value is outside those bounds.

@param fraction The elapsed fraction of the animation
@return The animated value.
"
      end

      operation 77381559 "invalidateCache"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If subclass has variables that it calculates based on the Keyframes, it should reset them
when this method is called because Keyframe contents might have changed.
"
      end

      operation 77381687 "getKeyframes"
	public return_type class_ref 6968119 // Keyframe
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return A list of all Keyframes contained by this. This may return null if this is
not made up of Keyframes.
"
      end

      operation 77381815 "clone"
	public return_type class_ref 6969783 // Keyframes
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 6969911 "IntKeyframes"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 15020855 // <generalisation>
	  relation 15020855 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 15020855 // <generalisation>
	    b parent class_ref 6969783 // Keyframes
	end

	operation 77381943 "getIntValue"
	  public explicit_return_type "int"
	  nparams 1
	    param in name "fraction" explicit_type "float"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Works like {@link #getValue(float)}, but returning a primitive.
@param fraction The elapsed fraction of the animation
@return The animated value.
"
	end
      end

      class 6970039 "FloatKeyframes"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 15020983 // <generalisation>
	  relation 15020983 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 15020983 // <generalisation>
	    b parent class_ref 6969783 // Keyframes
	end

	operation 77382071 "getFloatValue"
	  public explicit_return_type "float"
	  nparams 1
	    param in name "fraction" explicit_type "float"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Works like {@link #getValue(float)}, but returning a primitive.
@param fraction The elapsed fraction of the animation
@return The animated value.
"
	end
      end
    end

    class 6970167 "PathKeyframes"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "PathKeyframes relies on approximating the Path as a series of line segments.
The line segments are recursively divided until there is less than 1/2 pixel error
between the lines and the curve. Each point of the line segment is converted
to a Keyframe and a linear interpolation between Keyframes creates a good approximation
of the curve.
<p>
PathKeyframes is optimized to reduce the number of objects created when there are
many keyframes for a curve.
</p>
<p>
Typically, the returned type is a PointF, but the individual components can be extracted
as either an IntKeyframes or FloatKeyframes.
</p>
@hide
"
      classrelation 15031223 // <realization>
	relation 15031223 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15031223 // <realization>
	  b parent class_ref 6969783 // Keyframes
      end

      attribute 24012855 "FRACTION_OFFSET"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24012983 "X_OFFSET"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24013111 "Y_OFFSET"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24013239 "NUM_COMPONENTS"
	class_attribute const_attribute private explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 15031351 // EMPTY_KEYFRAMES (<unidirectional association>)
	relation 15031351 --->
	  stereotype "ArrayList"
	  a role_name "EMPTY_KEYFRAMES" init_value " new ArrayList<Keyframe>()" class_relation const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 15031351 // EMPTY_KEYFRAMES (<unidirectional association>)
	  b parent class_ref 6968119 // Keyframe
      end

      classrelation 15031479 // mTempPointF (<unidirectional association>)
	relation 15031479 --->
	  a role_name "mTempPointF" init_value " new PointF()" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15031479 // mTempPointF (<unidirectional association>)
	  b parent class_ref 6018615 // PointF
      end

      attribute 24013367 "mKeyframeData"
	private explicit_type "float"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 77419319 "PathKeyframes"
	public explicit_return_type ""
	nparams 1
	  param inout name "path" type class_ref 5842743 // Path
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77419447 "PathKeyframes"
	public explicit_return_type ""
	nparams 2
	  param inout name "path" type class_ref 5842743 // Path
	  param in name "error" explicit_type "float"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77419575 "getKeyframes"
	public return_type class_ref 6968119 // Keyframe
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}ArrayList<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77419703 "getValue"
	public explicit_return_type "Object"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77419831 "interpolateInRange"
	private return_type class_ref 6018615 // PointF
	nparams 3
	  param in name "fraction" explicit_type "float"
	  param in name "startIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77419959 "invalidateCache"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77420087 "setEvaluator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "evaluator" type class_ref 6967735 // TypeEvaluator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77420215 "getType"
	public explicit_return_type "Class"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77420343 "clone"
	public return_type class_ref 6969783 // Keyframes
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77420471 "pointForIndex"
	private return_type class_ref 6018615 // PointF
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77420599 "interpolate"
	class_operation private explicit_return_type "float"
	nparams 3
	  param in name "fraction" explicit_type "float"
	  param in name "startValue" explicit_type "float"
	  param in name "endValue" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77420727 "createXFloatKeyframes"
	public return_type class_ref 6970039 // FloatKeyframes
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a FloatKeyframes for the X component of the Path.
@return a FloatKeyframes for the X component of the Path.
"
      end

      operation 77420855 "createYFloatKeyframes"
	public return_type class_ref 6970039 // FloatKeyframes
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a FloatKeyframes for the Y component of the Path.
@return a FloatKeyframes for the Y component of the Path.
"
      end

      operation 77420983 "createXIntKeyframes"
	public return_type class_ref 6969911 // IntKeyframes
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an IntKeyframes for the X component of the Path.
@return an IntKeyframes for the X component of the Path.
"
      end

      operation 77421111 "createYIntKeyframes"
	public return_type class_ref 6969911 // IntKeyframes
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an IntKeyframeSet for the Y component of the Path.
@return an IntKeyframeSet for the Y component of the Path.
"
      end

      class 6973367 "SimpleKeyframes"
	abstract visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 15031607 // <realization>
	  relation 15031607 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 15031607 // <realization>
	    b parent class_ref 6969783 // Keyframes
	end

	operation 77421239 "setEvaluator"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "evaluator" type class_ref 6967735 // TypeEvaluator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 77421367 "invalidateCache"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 77421495 "getKeyframes"
	  public return_type class_ref 6968119 // Keyframe
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}ArrayList<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 77421623 "clone"
	  public return_type class_ref 6969783 // Keyframes
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 6973495 "IntKeyframesBase"
	abstract visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 15031735 // <generalisation>
	  relation 15031735 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 15031735 // <generalisation>
	    b parent class_ref 6973367 // SimpleKeyframes
	end

	classrelation 15031863 // <realization>
	  relation 15031863 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 15031863 // <realization>
	    b parent class_ref 6969911 // IntKeyframes
	end

	operation 77421751 "getType"
	  public explicit_return_type "Class"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 77421879 "getValue"
	  public explicit_return_type "Object"
	  nparams 1
	    param in name "fraction" explicit_type "float"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 6973623 "FloatKeyframesBase"
	abstract visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 15031991 // <generalisation>
	  relation 15031991 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 15031991 // <generalisation>
	    b parent class_ref 6973367 // SimpleKeyframes
	end

	classrelation 15032119 // <realization>
	  relation 15032119 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 15032119 // <realization>
	    b parent class_ref 6970039 // FloatKeyframes
	end

	operation 77422007 "getType"
	  public explicit_return_type "Class"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 77422135 "getValue"
	  public explicit_return_type "Object"
	  nparams 1
	    param in name "fraction" explicit_type "float"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 6970295 "IntArrayEvaluator"
      visibility public 
      nactuals 1
      actual class class_ref 6967735 // TypeEvaluator
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This evaluator can be used to perform type interpolation between <code>int[]</code> values.
Each index into the array is treated as a separate value to interpolate. For example,
evaluating <code>{100, 200}</code> and <code>{300, 400}</code> will interpolate the value at
the first index between 100 and 300 and the value at the second index value between 200 and 400.
"
      classrelation 15022135 // <realization>
	relation 15022135 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15022135 // <realization>
	  b parent class_ref 6967735 // TypeEvaluator
      end

      attribute 24003383 "mArray"
	private explicit_type "int"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 77384759 "IntArrayEvaluator"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an IntArrayEvaluator that does not reuse the animated value. Care must be taken
when using this option because on every evaluation a new <code>int[]</code> will be
allocated.

@see #IntArrayEvaluator(int[])
"
      end

      operation 77384887 "IntArrayEvaluator"
	public explicit_return_type ""
	nparams 1
	  param inout name "reuseArray" explicit_type "int"
	multiplicity "[]"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an IntArrayEvaluator that reuses <code>reuseArray</code> for every evaluate() call.
Caution must be taken to ensure that the value returned from
{@link android.animation.ValueAnimator#getAnimatedValue()} is not cached, modified, or
used across threads. The value will be modified on each <code>evaluate()</code> call.

@param reuseArray The array to modify and return from <code>evaluate</code>.
"
      end

      operation 77385015 "evaluate"
	public explicit_return_type "int"
	nparams 3
	  param in name "fraction" explicit_type "float"
	  param inout name "startValue" explicit_type "int"
	multiplicity "[]"
	  param inout name "endValue" explicit_type "int"
	multiplicity "[]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Interpolates the value at each index by the fraction. If {@link #IntArrayEvaluator(int[])}
was used to construct this object, <code>reuseArray</code> will be returned, otherwise
a new <code>int[]</code> will be returned.

@param fraction   The fraction from the starting to the ending values
@param startValue The start value.
@param endValue   The end value.
@return An <code>int[]</code> where each element is an interpolation between
        the same index in startValue and endValue.
"
      end
    end

    class 6970423 "IntEvaluator"
      visibility public 
      nactuals 1
      actual class class_ref 6967735 // TypeEvaluator
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This evaluator can be used to perform type interpolation between <code>int</code> values.
"
      classrelation 15022263 // <realization>
	relation 15022263 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15022263 // <realization>
	  b parent class_ref 6967735 // TypeEvaluator
      end

      operation 77385143 "evaluate"
	public explicit_return_type "Integer"
	nparams 3
	  param in name "fraction" explicit_type "float"
	  param inout name "startValue" explicit_type "Integer"
	  param inout name "endValue" explicit_type "Integer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This function returns the result of linearly interpolating the start and end values, with
<code>fraction</code> representing the proportion between the start and end values. The
calculation is a simple parametric calculation: <code>result = x0 + t * (v1 - v0)</code>,
where <code>x0</code> is <code>startValue</code>, <code>x1</code> is <code>endValue</code>,
and <code>t</code> is <code>fraction</code>.

@param fraction   The fraction from the starting to the ending values
@param startValue The start value; should be of type <code>int</code> or
                  <code>Integer</code>
@param endValue   The end value; should be of type <code>int</code> or <code>Integer</code>
@return A linear interpolation between the start and end values, given the
        <code>fraction</code> parameter.
"
      end
    end

    class 6970551 "IntKeyframeSet"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class holds a collection of IntKeyframe objects and is called by ValueAnimator to calculate
values between those keyframes for a given animation. The class internal to the animation
package because it is an implementation detail of how Keyframes are stored and used.

<p>This type-specific subclass of KeyframeSet, along with the other type-specific subclass for
float, exists to speed up the getValue() method when there is no custom
TypeEvaluator set for the animation, so that values can be calculated without autoboxing to the
Object equivalents of these primitive types.</p>
"
      classrelation 15022391 // <generalisation>
	relation 15022391 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15022391 // <generalisation>
	  b parent class_ref 6969655 // KeyframeSet
      end

      classrelation 15022519 // <realization>
	relation 15022519 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15022519 // <realization>
	  b parent class_ref 6969911 // IntKeyframes
      end

      attribute 24003511 "firstValue"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24003639 "lastValue"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24003767 "deltaValue"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24003895 "firstTime"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 77385271 "IntKeyframeSet"
	public explicit_return_type ""
	nparams 1
	  param inout name "" explicit_type "IntKeyframe...keyframes"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77385399 "getValue"
	public explicit_return_type "Object"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77385527 "clone"
	public return_type class_ref 6970551 // IntKeyframeSet
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77385655 "invalidateCache"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77385783 "getIntValue"
	public explicit_return_type "int"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77385911 "getType"
	public explicit_return_type "Class"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 6971063 "LayoutTransition"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class enables automatic animations on layout changes in ViewGroup objects. To enable
transitions for a layout container, create a LayoutTransition object and set it on any
ViewGroup by calling {@link ViewGroup#setLayoutTransition(LayoutTransition)}. This will cause
default animations to run whenever items are added to or removed from that container. To specify
custom animations, use the {@link LayoutTransition#setAnimator(int, Animator)
setAnimator()} method.

<p>One of the core concepts of these transition animations is that there are two types of
changes that cause the transition and four different animations that run because of
those changes. The changes that trigger the transition are items being added to a container
(referred to as an \"appearing\" transition) or removed from a container (also known as
\"disappearing\"). Setting the visibility of views (between GONE and VISIBLE) will trigger
the same add/remove logic. The animations that run due to those events are one that animates
items being added, one that animates items being removed, and two that animate the other
items in the container that change due to the add/remove occurrence. Users of
the transition may want different animations for the changing items depending on whether
they are changing due to an appearing or disappearing event, so there is one animation for
each of these variations of the changing event. Most of the API of this class is concerned
with setting up the basic properties of the animations used in these four situations,
or with setting up custom animations for any or all of the four.</p>

<p>By default, the DISAPPEARING animation begins immediately, as does the CHANGE_APPEARING
animation. The other animations begin after a delay that is set to the default duration
of the animations. This behavior facilitates a sequence of animations in transitions as
follows: when an item is being added to a layout, the other children of that container will
move first (thus creating space for the new item), then the appearing animation will run to
animate the item being added. Conversely, when an item is removed from a container, the
animation to remove it will run first, then the animations of the other children in the
layout will run (closing the gap created in the layout when the item was removed). If this
default choreography behavior is not desired, the {@link #setDuration(int, long)} and
{@link #setStartDelay(int, long)} of any or all of the animations can be changed as
appropriate.</p>

<p>The animations specified for the transition, both the defaults and any custom animations
set on the transition object, are templates only. That is, these animations exist to hold the
basic animation properties, such as the duration, start delay, and properties being animated.
But the actual target object, as well as the start and end values for those properties, are
set automatically in the process of setting up the transition each time it runs. Each of the
animations is cloned from the original copy and the clone is then populated with the dynamic
values of the target being animated (such as one of the items in a layout container that is
moving as a result of the layout event) as well as the values that are changing (such as the
position and size of that object). The actual values that are pushed to each animation
depends on what properties are specified for the animation. For example, the default
CHANGE_APPEARING animation animates the <code>left</code>, <code>top</code>, <code>right</code>,
<code>bottom</code>, <code>scrollX</code>, and <code>scrollY</code> properties.
Values for these properties are updated with the pre- and post-layout
values when the transition begins. Custom animations will be similarly populated with
the target and values being animated, assuming they use ObjectAnimator objects with
property names that are known on the target object.</p>

<p>This class, and the associated XML flag for containers, animateLayoutChanges=\"true\",
provides a simple utility meant for automating changes in straightforward situations.
Using LayoutTransition at multiple levels of a nested view hierarchy may not work due to the
interrelationship of the various levels of layout. Also, a container that is being scrolled
at the same time as items are being added or removed is probably not a good candidate for
this utility, because the before/after locations calculated by LayoutTransition
may not match the actual locations when the animations finish due to the container
being scrolled as the animations are running. You can work around that
particular issue by disabling the 'changing' animations by setting the CHANGE_APPEARING
and CHANGE_DISAPPEARING animations to null, and setting the startDelay of the
other animations appropriately.</p>
"
      attribute 24004663 "CHANGE_APPEARING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A flag indicating the animation that runs on those items that are changing
due to a new item appearing in the container.

"
      end

      attribute 24004791 "CHANGE_DISAPPEARING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A flag indicating the animation that runs on those items that are changing
due to an item disappearing from the container.

"
      end

      attribute 24004919 "APPEARING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A flag indicating the animation that runs on those items that are appearing
in the container.

"
      end

      attribute 24005047 "DISAPPEARING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A flag indicating the animation that runs on those items that are disappearing
from the container.

"
      end

      attribute 24005175 "CHANGING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A flag indicating the animation that runs on those items that are changing
due to a layout change not caused by items being added to or removed
from the container. This transition type is not enabled by default; it can be
enabled via {@link #enableTransitionType(int)}.

"
      end

      attribute 24005303 "FLAG_APPEARING"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x01"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Private bit fields used to set the collection of enabled transition types for
mTransitionTypes.

"
      end

      attribute 24005431 "FLAG_DISAPPEARING"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x02"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24005559 "FLAG_CHANGE_APPEARING"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x04"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24005687 "FLAG_CHANGE_DISAPPEARING"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x08"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24005815 "FLAG_CHANGING"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x10"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 15023543 // mDisappearingAnim (<unidirectional association>)
	relation 15023543 --->
	  a role_name "mDisappearingAnim" init_value " null" private
	    comment "
These variables hold the animations that are currently used to run the transition effects.
These animations are set to defaults, but can be changed to custom animations by
calls to setAnimator().

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15023543 // mDisappearingAnim (<unidirectional association>)
	  b parent class_ref 6966327 // Animator
      end

      classrelation 15023671 // mAppearingAnim (<unidirectional association>)
	relation 15023671 --->
	  a role_name "mAppearingAnim" init_value " null" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15023671 // mAppearingAnim (<unidirectional association>)
	  b parent class_ref 6966327 // Animator
      end

      classrelation 15023799 // mChangingAppearingAnim (<unidirectional association>)
	relation 15023799 --->
	  a role_name "mChangingAppearingAnim" init_value " null" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15023799 // mChangingAppearingAnim (<unidirectional association>)
	  b parent class_ref 6966327 // Animator
      end

      classrelation 15023927 // mChangingDisappearingAnim (<unidirectional association>)
	relation 15023927 --->
	  a role_name "mChangingDisappearingAnim" init_value " null" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15023927 // mChangingDisappearingAnim (<unidirectional association>)
	  b parent class_ref 6966327 // Animator
      end

      classrelation 15024055 // mChangingAnim (<unidirectional association>)
	relation 15024055 --->
	  a role_name "mChangingAnim" init_value " null" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15024055 // mChangingAnim (<unidirectional association>)
	  b parent class_ref 6966327 // Animator
      end

      classrelation 15024183 // defaultChange (<unidirectional association>)
	relation 15024183 --->
	  a role_name "defaultChange" class_relation private
	    comment "
These are the default animations, defined in the constructor, that will be used
unless the user specifies custom animations.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15024183 // defaultChange (<unidirectional association>)
	  b parent class_ref 6966071 // ObjectAnimator
      end

      classrelation 15024311 // defaultChangeIn (<unidirectional association>)
	relation 15024311 --->
	  a role_name "defaultChangeIn" class_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15024311 // defaultChangeIn (<unidirectional association>)
	  b parent class_ref 6966071 // ObjectAnimator
      end

      classrelation 15024439 // defaultChangeOut (<unidirectional association>)
	relation 15024439 --->
	  a role_name "defaultChangeOut" class_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15024439 // defaultChangeOut (<unidirectional association>)
	  b parent class_ref 6966071 // ObjectAnimator
      end

      classrelation 15024567 // defaultFadeIn (<unidirectional association>)
	relation 15024567 --->
	  a role_name "defaultFadeIn" class_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15024567 // defaultFadeIn (<unidirectional association>)
	  b parent class_ref 6966071 // ObjectAnimator
      end

      classrelation 15024695 // defaultFadeOut (<unidirectional association>)
	relation 15024695 --->
	  a role_name "defaultFadeOut" class_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15024695 // defaultFadeOut (<unidirectional association>)
	  b parent class_ref 6966071 // ObjectAnimator
      end

      attribute 24005943 "DEFAULT_DURATION"
	class_attribute private explicit_type "long"
	init_value " 300"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The default duration used by all animations.

"
      end

      attribute 24006071 "mChangingAppearingDuration"
	private explicit_type "long"
	init_value " DEFAULT_DURATION"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The durations of the different animations

"
      end

      attribute 24006199 "mChangingDisappearingDuration"
	private explicit_type "long"
	init_value " DEFAULT_DURATION"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24006327 "mChangingDuration"
	private explicit_type "long"
	init_value " DEFAULT_DURATION"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24006455 "mAppearingDuration"
	private explicit_type "long"
	init_value " DEFAULT_DURATION"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24006583 "mDisappearingDuration"
	private explicit_type "long"
	init_value " DEFAULT_DURATION"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24006711 "mAppearingDelay"
	private explicit_type "long"
	init_value " DEFAULT_DURATION"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The start delays of the different animations. Note that the default behavior of
the appearing item is the default duration, since it should wait for the items to move
before fading it. Same for the changing animation when disappearing; it waits for the item
to fade out before moving the other items.

"
      end

      attribute 24006839 "mDisappearingDelay"
	private explicit_type "long"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24006967 "mChangingAppearingDelay"
	private explicit_type "long"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24007095 "mChangingDisappearingDelay"
	private explicit_type "long"
	init_value " DEFAULT_DURATION"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24007223 "mChangingDelay"
	private explicit_type "long"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24007351 "mChangingAppearingStagger"
	private explicit_type "long"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The inter-animation delays used on the changing animations

"
      end

      attribute 24007479 "mChangingDisappearingStagger"
	private explicit_type "long"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24007607 "mChangingStagger"
	private explicit_type "long"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 15024823 // ACCEL_DECEL_INTERPOLATOR (<unidirectional association>)
	relation 15024823 --->
	  a role_name "ACCEL_DECEL_INTERPOLATOR" init_value "
            new AccelerateDecelerateInterpolator()" class_relation private
	    comment "
Static interpolators - these are stateless and can be shared across the instances

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15024823 // ACCEL_DECEL_INTERPOLATOR (<unidirectional association>)
	  b parent class_ref 6966967 // TimeInterpolator
      end

      classrelation 15024951 // DECEL_INTERPOLATOR (<unidirectional association>)
	relation 15024951 --->
	  a role_name "DECEL_INTERPOLATOR" init_value " new DecelerateInterpolator()" class_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15024951 // DECEL_INTERPOLATOR (<unidirectional association>)
	  b parent class_ref 6966967 // TimeInterpolator
      end

      classrelation 15025079 // sAppearingInterpolator (<unidirectional association>)
	relation 15025079 --->
	  a role_name "sAppearingInterpolator" init_value " ACCEL_DECEL_INTERPOLATOR" class_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15025079 // sAppearingInterpolator (<unidirectional association>)
	  b parent class_ref 6966967 // TimeInterpolator
      end

      classrelation 15025207 // sDisappearingInterpolator (<unidirectional association>)
	relation 15025207 --->
	  a role_name "sDisappearingInterpolator" init_value " ACCEL_DECEL_INTERPOLATOR" class_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15025207 // sDisappearingInterpolator (<unidirectional association>)
	  b parent class_ref 6966967 // TimeInterpolator
      end

      classrelation 15025335 // sChangingAppearingInterpolator (<unidirectional association>)
	relation 15025335 --->
	  a role_name "sChangingAppearingInterpolator" init_value " DECEL_INTERPOLATOR" class_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15025335 // sChangingAppearingInterpolator (<unidirectional association>)
	  b parent class_ref 6966967 // TimeInterpolator
      end

      classrelation 15025463 // sChangingDisappearingInterpolator (<unidirectional association>)
	relation 15025463 --->
	  a role_name "sChangingDisappearingInterpolator" init_value " DECEL_INTERPOLATOR" class_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15025463 // sChangingDisappearingInterpolator (<unidirectional association>)
	  b parent class_ref 6966967 // TimeInterpolator
      end

      classrelation 15025591 // sChangingInterpolator (<unidirectional association>)
	relation 15025591 --->
	  a role_name "sChangingInterpolator" init_value " DECEL_INTERPOLATOR" class_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15025591 // sChangingInterpolator (<unidirectional association>)
	  b parent class_ref 6966967 // TimeInterpolator
      end

      classrelation 15025719 // mAppearingInterpolator (<unidirectional association>)
	relation 15025719 --->
	  a role_name "mAppearingInterpolator" init_value " sAppearingInterpolator" private
	    comment "
The default interpolators used for the animations

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15025719 // mAppearingInterpolator (<unidirectional association>)
	  b parent class_ref 6966967 // TimeInterpolator
      end

      classrelation 15025847 // mDisappearingInterpolator (<unidirectional association>)
	relation 15025847 --->
	  a role_name "mDisappearingInterpolator" init_value " sDisappearingInterpolator" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15025847 // mDisappearingInterpolator (<unidirectional association>)
	  b parent class_ref 6966967 // TimeInterpolator
      end

      classrelation 15025975 // mChangingAppearingInterpolator (<unidirectional association>)
	relation 15025975 --->
	  a role_name "mChangingAppearingInterpolator" init_value " sChangingAppearingInterpolator" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15025975 // mChangingAppearingInterpolator (<unidirectional association>)
	  b parent class_ref 6966967 // TimeInterpolator
      end

      classrelation 15026103 // mChangingDisappearingInterpolator (<unidirectional association>)
	relation 15026103 --->
	  a role_name "mChangingDisappearingInterpolator" init_value " sChangingDisappearingInterpolator" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15026103 // mChangingDisappearingInterpolator (<unidirectional association>)
	  b parent class_ref 6966967 // TimeInterpolator
      end

      classrelation 15026231 // mChangingInterpolator (<unidirectional association>)
	relation 15026231 --->
	  a role_name "mChangingInterpolator" init_value " sChangingInterpolator" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15026231 // mChangingInterpolator (<unidirectional association>)
	  b parent class_ref 6966967 // TimeInterpolator
      end

      classrelation 15026359 // pendingAnimations (<unidirectional association>)
	relation 15026359 --->
	  stereotype "HashMap"
	  a role_name "pendingAnimations" init_value "
            new HashMap<View, Animator>()" const_relation private
	    comment "These hashmaps are used to store the animations that are currently running as part of
the transition. The reason for this is that a further layout event should cause
existing animations to stop where they are prior to starting new animations. So
we cache all of the current animations in this map for possible cancellation on
another layout event. LinkedHashMaps are used to preserve the order in which animations
are inserted, so that we process events (such as setting up start values) in the same order.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}, Animator> ${name}${value};
"
	    classrelation_ref 15026359 // pendingAnimations (<unidirectional association>)
	  b parent class_ref 6937143 // View
      end

      classrelation 15026487 // currentChangingAnimations (<unidirectional association>)
	relation 15026487 --->
	  stereotype "LinkedHashMap"
	  a role_name "currentChangingAnimations" init_value "
            new LinkedHashMap<View, Animator>()" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}, Animator> ${name}${value};
"
	    classrelation_ref 15026487 // currentChangingAnimations (<unidirectional association>)
	  b parent class_ref 6937143 // View
      end

      classrelation 15026615 // currentAppearingAnimations (<unidirectional association>)
	relation 15026615 --->
	  stereotype "LinkedHashMap"
	  a role_name "currentAppearingAnimations" init_value "
            new LinkedHashMap<View, Animator>()" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}, Animator> ${name}${value};
"
	    classrelation_ref 15026615 // currentAppearingAnimations (<unidirectional association>)
	  b parent class_ref 6937143 // View
      end

      classrelation 15026743 // currentDisappearingAnimations (<unidirectional association>)
	relation 15026743 --->
	  stereotype "LinkedHashMap"
	  a role_name "currentDisappearingAnimations" init_value "
            new LinkedHashMap<View, Animator>()" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}, Animator> ${name}${value};
"
	    classrelation_ref 15026743 // currentDisappearingAnimations (<unidirectional association>)
	  b parent class_ref 6937143 // View
      end

      classrelation 15026871 // layoutChangeListenerMap (<unidirectional association>)
	relation 15026871 --->
	  stereotype "HashMap"
	  a role_name "layoutChangeListenerMap" init_value "
            new HashMap<View, View.OnLayoutChangeListener>()" const_relation private
	    comment "This hashmap is used to track the listeners that have been added to the children of
a container. When a layout change occurs, an animation is created for each View, so that
the pre-layout values can be cached in that animation. Then a listener is added to the
view to see whether the layout changes the bounds of that view. If so, the animation
is set with the final values and then run. If not, the animation is not started. When
the process of setting up and running all appropriate animations is done, we need to
remove these listeners and clear out the map.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}, View.OnLayoutChangeListener> ${name}${value};
"
	    classrelation_ref 15026871 // layoutChangeListenerMap (<unidirectional association>)
	  b parent class_ref 6937143 // View
      end

      attribute 24007735 "staggerDelay"
	private explicit_type "long"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Used to track the current delay being assigned to successive animations as they are
started. This value is incremented for each new animation, then zeroed before the next
transition begins.

"
      end

      attribute 24007863 "mTransitionTypes"
	private explicit_type "int"
	init_value " FLAG_CHANGE_APPEARING | FLAG_CHANGE_DISAPPEARING |
            FLAG_APPEARING | FLAG_DISAPPEARING"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "These are the types of transition animations that the LayoutTransition is reacting
to. By default, appearing/disappearing and the change animations related to them are
enabled (not CHANGING).

"
      end

      class 6971191 "TransitionListener"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 77395255 "startTransition"
	  public explicit_return_type "void"
	  nparams 4
	    param inout name "transition" type class_ref 6971063 // LayoutTransition
	    param inout name "container" type class_ref 6937399 // ViewGroup
	    param inout name "view" type class_ref 6937143 // View
	    param in name "transitionType" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "This event is sent to listeners when any type of transition animation begins.

@param transition The LayoutTransition sending out the event.
@param container The ViewGroup on which the transition is playing.
@param view The View object being affected by the transition animation.
@param transitionType The type of transition that is beginning,
{@link android.animation.LayoutTransition#APPEARING},
{@link android.animation.LayoutTransition#DISAPPEARING},
{@link android.animation.LayoutTransition#CHANGE_APPEARING}, or
{@link android.animation.LayoutTransition#CHANGE_DISAPPEARING}.
"
	end

	operation 77395383 "endTransition"
	  public explicit_return_type "void"
	  nparams 4
	    param inout name "transition" type class_ref 6971063 // LayoutTransition
	    param inout name "container" type class_ref 6937399 // ViewGroup
	    param inout name "view" type class_ref 6937143 // View
	    param in name "transitionType" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "This event is sent to listeners when any type of transition animation ends.

@param transition The LayoutTransition sending out the event.
@param container The ViewGroup on which the transition is playing.
@param view The View object being affected by the transition animation.
@param transitionType The type of transition that is ending,
{@link android.animation.LayoutTransition#APPEARING},
{@link android.animation.LayoutTransition#DISAPPEARING},
{@link android.animation.LayoutTransition#CHANGE_APPEARING}, or
{@link android.animation.LayoutTransition#CHANGE_DISAPPEARING}.
"
	end
      end

      classrelation 15026999 // mListeners (<unidirectional association>)
	relation 15026999 --->
	  stereotype "ArrayList"
	  a role_name "mListeners" private
	    comment "The set of listeners that should be notified when APPEARING/DISAPPEARING transitions
start and end.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 15026999 // mListeners (<unidirectional association>)
	  b parent class_ref 6971191 // TransitionListener
      end

      attribute 24007991 "mAnimateParentHierarchy"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Controls whether changing animations automatically animate the parent hierarchy as well.
This behavior prevents artifacts when wrap_content layouts snap to the end state as the
transition begins, causing visual glitches and clipping.
Default value is true.

"
      end

      operation 77390263 "LayoutTransition"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a LayoutTransition object. By default, the object will listen to layout
events on any ViewGroup that it is set on and will run default animations for each
type of layout event.
"
      end

      operation 77390391 "setDuration"
	public explicit_return_type "void"
	nparams 1
	  param in name "duration" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the duration to be used by all animations of this transition object. If you want to
set the duration of just one of the animations in particular, use the
{@link #setDuration(int, long)} method.

@param duration The length of time, in milliseconds, that the transition animations
should last.
"
      end

      operation 77390519 "enableTransitionType"
	public explicit_return_type "void"
	nparams 1
	  param in name "transitionType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enables the specified transitionType for this LayoutTransition object.
By default, a LayoutTransition listens for changes in children being
added/remove/hidden/shown in the container, and runs the animations associated with
those events. That is, all transition types besides {@link #CHANGING} are enabled by default.
You can also enable {@link #CHANGING} animations by calling this method with the
{@link #CHANGING} transitionType.

@param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},
{@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}.
"
      end

      operation 77390647 "disableTransitionType"
	public explicit_return_type "void"
	nparams 1
	  param in name "transitionType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Disables the specified transitionType for this LayoutTransition object.
By default, all transition types except {@link #CHANGING} are enabled.

@param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},
{@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}.
"
      end

      operation 77390775 "isTransitionTypeEnabled"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "transitionType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether the specified transitionType is enabled for this LayoutTransition object.
By default, all transition types except {@link #CHANGING} are enabled.

@param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},
{@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}.
@return true if the specified transitionType is currently enabled, false otherwise.
"
      end

      operation 77390903 "setStartDelay"
	public explicit_return_type "void"
	nparams 2
	  param in name "transitionType" explicit_type "int"
	  param in name "delay" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the start delay on one of the animation objects used by this transition. The
<code>transitionType</code> parameter determines the animation whose start delay
is being set.

@param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},
{@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which determines
the animation whose start delay is being set.
@param delay The length of time, in milliseconds, to delay before starting the animation.
@see Animator#setStartDelay(long)
"
      end

      operation 77391031 "getStartDelay"
	public explicit_return_type "long"
	nparams 1
	  param in name "transitionType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the start delay on one of the animation objects used by this transition. The
<code>transitionType</code> parameter determines the animation whose start delay
is returned.

@param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},
{@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which determines
the animation whose start delay is returned.
@return long The start delay of the specified animation.
@see Animator#getStartDelay()
"
      end

      operation 77391159 "setDuration"
	public explicit_return_type "void"
	nparams 2
	  param in name "transitionType" explicit_type "int"
	  param in name "duration" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the duration on one of the animation objects used by this transition. The
<code>transitionType</code> parameter determines the animation whose duration
is being set.

@param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},
{@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which determines
the animation whose duration is being set.
@param duration The length of time, in milliseconds, that the specified animation should run.
@see Animator#setDuration(long)
"
      end

      operation 77391287 "getDuration"
	public explicit_return_type "long"
	nparams 1
	  param in name "transitionType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the duration on one of the animation objects used by this transition. The
<code>transitionType</code> parameter determines the animation whose duration
is returned.

@param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},
{@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which determines
the animation whose duration is returned.
@return long The duration of the specified animation.
@see Animator#getDuration()
"
      end

      operation 77391415 "setStagger"
	public explicit_return_type "void"
	nparams 2
	  param in name "transitionType" explicit_type "int"
	  param in name "duration" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the length of time to delay between starting each animation during one of the
change animations.

@param transitionType A value of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING}, or
{@link #CHANGING}.
@param duration The length of time, in milliseconds, to delay before launching the next
animation in the sequence.
"
      end

      operation 77391543 "getStagger"
	public explicit_return_type "long"
	nparams 1
	  param in name "transitionType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the length of time to delay between starting each animation during one of the
change animations.

@param transitionType A value of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING}, or
{@link #CHANGING}.
@return long The length of time, in milliseconds, to delay before launching the next
animation in the sequence.
"
      end

      operation 77391671 "setInterpolator"
	public explicit_return_type "void"
	nparams 2
	  param in name "transitionType" explicit_type "int"
	  param inout name "interpolator" type class_ref 6966967 // TimeInterpolator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the interpolator on one of the animation objects used by this transition. The
<code>transitionType</code> parameter determines the animation whose interpolator
is being set.

@param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},
{@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which determines
the animation whose interpolator is being set.
@param interpolator The interpolator that the specified animation should use.
@see Animator#setInterpolator(TimeInterpolator)
"
      end

      operation 77391799 "getInterpolator"
	public return_type class_ref 6966967 // TimeInterpolator
	nparams 1
	  param in name "transitionType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the interpolator on one of the animation objects used by this transition. The
<code>transitionType</code> parameter determines the animation whose interpolator
is returned.

@param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},
{@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which determines
the animation whose interpolator is being returned.
@return TimeInterpolator The interpolator that the specified animation uses.
@see Animator#setInterpolator(TimeInterpolator)
"
      end

      operation 77391927 "setAnimator"
	public explicit_return_type "void"
	nparams 2
	  param in name "transitionType" explicit_type "int"
	  param inout name "animator" type class_ref 6966327 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the animation used during one of the transition types that may run. Any
Animator object can be used, but to be most useful in the context of layout
transitions, the animation should either be a ObjectAnimator or a AnimatorSet
of animations including PropertyAnimators. Also, these ObjectAnimator objects
should be able to get and set values on their target objects automatically. For
example, a ObjectAnimator that animates the property \"left\" is able to set and get the
<code>left</code> property from the View objects being animated by the layout
transition. The transition works by setting target objects and properties
dynamically, according to the pre- and post-layoout values of those objects, so
having animations that can handle those properties appropriately will work best
for custom animation. The dynamic setting of values is only the case for the
CHANGE animations; the APPEARING and DISAPPEARING animations are simply run with
the values they have.

<p>It is also worth noting that any and all animations (and their underlying
PropertyValuesHolder objects) will have their start and end values set according
to the pre- and post-layout values. So, for example, a custom animation on \"alpha\"
as the CHANGE_APPEARING animation will inherit the real value of alpha on the target
object (presumably 1) as its starting and ending value when the animation begins.
Animations which need to use values at the beginning and end that may not match the
values queried when the transition begins may need to use a different mechanism
than a standard ObjectAnimator object.</p>

@param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},
{@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which determines the
animation whose animator is being set.
@param animator The animation being assigned. A value of <code>null</code> means that no
animation will be run for the specified transitionType.
"
      end

      operation 77392055 "getAnimator"
	public return_type class_ref 6966327 // Animator
	nparams 1
	  param in name "transitionType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the animation used during one of the transition types that may run.

@param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},
{@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which determines
the animation whose animator is being returned.
@return Animator The animation being used for the given transition type.
@see #setAnimator(int, Animator)
"
      end

      operation 77392183 "runChangeTransition"
	private explicit_return_type "void"
	nparams 3
	  param in name "parent" type class_ref 6937399 // ViewGroup
	  param inout name "newView" type class_ref 6937143 // View
	  param in name "changeReason" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, ${t1} ${p1}, final ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This function sets up animations on all of the views that change during layout.
For every child in the parent, we create a change animation of the appropriate
type (appearing, disappearing, or changing) and ask it to populate its start values from its
target view. We add layout listeners to all child views and listen for changes. For
those views that change, we populate the end values for those animations and start them.
Animations are not run on unchanging views.

@param parent The container which is undergoing a change.
@param newView The view being added to or removed from the parent. May be null if the
changeReason is CHANGING.
@param changeReason A value of APPEARING, DISAPPEARING, or CHANGING, indicating whether the
transition is occurring because an item is being added to or removed from the parent, or
if it is running in response to a layout operation (that is, if the value is CHANGING).
"
      end

      operation 77392311 "setAnimateParentHierarchy"
	public explicit_return_type "void"
	nparams 1
	  param inout name "animateParentHierarchy" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This flag controls whether CHANGE_APPEARING or CHANGE_DISAPPEARING animations will
cause the default changing animation to be run on the parent hierarchy as well. This allows
containers of transitioning views to also transition, which may be necessary in situations
where the containers bounds change between the before/after states and may clip their
children during the transition animations. For example, layouts with wrap_content will
adjust their bounds according to the dimensions of their children.

<p>The default changing transitions animate the bounds and scroll positions of the
target views. These are the animations that will run on the parent hierarchy, not
the custom animations that happen to be set on the transition. This allows custom
behavior for the children of the transitioning container, but uses standard behavior
of resizing/rescrolling on any changing parents.

@param animateParentHierarchy A boolean value indicating whether the parents of
transitioning views should also be animated during the transition. Default value is true.
"
      end

      operation 77392439 "setupChangeAnimation"
	private explicit_return_type "void"
	nparams 5
	  param in name "parent" type class_ref 6937399 // ViewGroup
	  param in name "changeReason" explicit_type "int"
	  param inout name "baseAnimator" type class_ref 6966327 // Animator
	  param in name "duration" explicit_type "long"
	  param in name "child" type class_ref 6937143 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}, ${t2} ${p2}, final ${t3} ${p3}, final ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function called by runChangingTransition for both the children and the parent
hierarchy.
"
      end

      operation 77392567 "startChangingAnimations"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Starts the animations set up for a CHANGING transition. We separate the setup of these
animations from actually starting them, to avoid side-effects that starting the animations
may have on the properties of the affected objects. After setup, we tell the affected parent
that this transition should be started. The parent informs its ViewAncestor, which then
starts the transition after the current layout/measurement phase, just prior to drawing
the view hierarchy.

@hide
"
      end

      operation 77392695 "endChangingAnimations"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ends the animations that are set up for a CHANGING transition. This is a variant of
startChangingAnimations() which is called when the window the transition is playing in
is not visible. We need to make sure the animations put their targets in their end states
and that the transition finishes to remove any mid-process state (such as isRunning()).

@hide
"
      end

      operation 77392823 "isChangingLayout"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if animations are running which animate layout-related properties. This
essentially means that either CHANGE_APPEARING or CHANGE_DISAPPEARING animations
are running, since these animations operate on layout-related properties.

@return true if CHANGE_APPEARING or CHANGE_DISAPPEARING animations are currently
running.
"
      end

      operation 77392951 "isRunning"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if any of the animations in this transition are currently running.

@return true if any animations in the transition are running.
"
      end

      operation 77393079 "cancel"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Cancels the currently running transition. Note that we cancel() the changing animations
but end() the visibility animations. This is because this method is currently called
in the context of starting a new transition, so we want to move things from their mid-
transition positions, but we want them to have their end-transition visibility.

@hide
"
      end

      operation 77393207 "cancel"
	public explicit_return_type "void"
	nparams 1
	  param in name "transitionType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Cancels the specified type of transition. Note that we cancel() the changing animations
but end() the visibility animations. This is because this method is currently called
in the context of starting a new transition, so we want to move things from their mid-
transition positions, but we want them to have their end-transition visibility.

@hide
"
      end

      operation 77393335 "runAppearingTransition"
	private explicit_return_type "void"
	nparams 2
	  param in name "parent" type class_ref 6937399 // ViewGroup
	  param in name "child" type class_ref 6937143 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method runs the animation that makes an added item appear.

@param parent The ViewGroup to which the View is being added.
@param child The View being added to the ViewGroup.
"
      end

      operation 77393463 "runDisappearingTransition"
	private explicit_return_type "void"
	nparams 2
	  param in name "parent" type class_ref 6937399 // ViewGroup
	  param in name "child" type class_ref 6937143 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method runs the animation that makes a removed item disappear.

@param parent The ViewGroup from which the View is being removed.
@param child The View being removed from the ViewGroup.
"
      end

      operation 77393591 "addChild"
	private explicit_return_type "void"
	nparams 3
	  param inout name "parent" type class_ref 6937399 // ViewGroup
	  param inout name "child" type class_ref 6937143 // View
	  param inout name "changesLayout" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called by ViewGroup when a child view is about to be added to the
container. This callback starts the process of a transition; we grab the starting
values, listen for changes to all of the children of the container, and start appropriate
animations.

@param parent The ViewGroup to which the View is being added.
@param child The View being added to the ViewGroup.
@param changesLayout Whether the removal will cause changes in the layout of other views
in the container. INVISIBLE views becoming VISIBLE will not cause changes and thus will not
affect CHANGE_APPEARING or CHANGE_DISAPPEARING animations.
"
      end

      operation 77393719 "hasListeners"
	private explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77393847 "layoutChange"
	public explicit_return_type "void"
	nparams 1
	  param inout name "parent" type class_ref 6937399 // ViewGroup
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called by ViewGroup when there is a call to layout() on the container
with this LayoutTransition. If the CHANGING transition is enabled and if there is no other
transition currently running on the container, then this call runs a CHANGING transition.
The transition does not start immediately; it just sets up the mechanism to run if any
of the children of the container change their layout parameters (similar to
the CHANGE_APPEARING and CHANGE_DISAPPEARING transitions).

@param parent The ViewGroup whose layout() method has been called.

@hide
"
      end

      operation 77393975 "addChild"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parent" type class_ref 6937399 // ViewGroup
	  param inout name "child" type class_ref 6937143 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called by ViewGroup when a child view is about to be added to the
container. This callback starts the process of a transition; we grab the starting
values, listen for changes to all of the children of the container, and start appropriate
animations.

@param parent The ViewGroup to which the View is being added.
@param child The View being added to the ViewGroup.
"
      end

      operation 77394103 "showChild"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parent" type class_ref 6937399 // ViewGroup
	  param inout name "child" type class_ref 6937143 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "@deprecated Use {@link #showChild(android.view.ViewGroup, android.view.View, int)}.
"
      end

      operation 77394231 "showChild"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parent" type class_ref 6937399 // ViewGroup
	  param inout name "child" type class_ref 6937143 // View
	  param in name "oldVisibility" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called by ViewGroup when a child view is about to be made visible in the
container. This callback starts the process of a transition; we grab the starting
values, listen for changes to all of the children of the container, and start appropriate
animations.

@param parent The ViewGroup in which the View is being made visible.
@param child The View being made visible.
@param oldVisibility The previous visibility value of the child View, either
{@link View#GONE} or {@link View#INVISIBLE}.
"
      end

      operation 77394359 "removeChild"
	private explicit_return_type "void"
	nparams 3
	  param inout name "parent" type class_ref 6937399 // ViewGroup
	  param inout name "child" type class_ref 6937143 // View
	  param inout name "changesLayout" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called by ViewGroup when a child view is about to be removed from the
container. This callback starts the process of a transition; we grab the starting
values, listen for changes to all of the children of the container, and start appropriate
animations.

@param parent The ViewGroup from which the View is being removed.
@param child The View being removed from the ViewGroup.
@param changesLayout Whether the removal will cause changes in the layout of other views
in the container. Views becoming INVISIBLE will not cause changes and thus will not
affect CHANGE_APPEARING or CHANGE_DISAPPEARING animations.
"
      end

      operation 77394487 "removeChild"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parent" type class_ref 6937399 // ViewGroup
	  param inout name "child" type class_ref 6937143 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called by ViewGroup when a child view is about to be removed from the
container. This callback starts the process of a transition; we grab the starting
values, listen for changes to all of the children of the container, and start appropriate
animations.

@param parent The ViewGroup from which the View is being removed.
@param child The View being removed from the ViewGroup.
"
      end

      operation 77394615 "hideChild"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parent" type class_ref 6937399 // ViewGroup
	  param inout name "child" type class_ref 6937143 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "@deprecated Use {@link #hideChild(android.view.ViewGroup, android.view.View, int)}.
"
      end

      operation 77394743 "hideChild"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parent" type class_ref 6937399 // ViewGroup
	  param inout name "child" type class_ref 6937143 // View
	  param in name "newVisibility" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called by ViewGroup when a child view is about to be hidden in
container. This callback starts the process of a transition; we grab the starting
values, listen for changes to all of the children of the container, and start appropriate
animations.

@param parent The parent ViewGroup of the View being hidden.
@param child The View being hidden.
@param newVisibility The new visibility value of the child View, either
{@link View#GONE} or {@link View#INVISIBLE}.
"
      end

      operation 77394871 "addTransitionListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 6971191 // TransitionListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a listener that will be called when the bounds of the view change due to
layout processing.

@param listener The listener that will be called when layout bounds change.
"
      end

      operation 77394999 "removeTransitionListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 6971191 // TransitionListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove a listener for layout changes.

@param listener The listener for layout bounds change.
"
      end

      operation 77395127 "getTransitionListeners"
	public return_type class_ref 6971191 // TransitionListener
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the current list of listeners for layout changes.
@return
"
      end

      class 6971319 "CleanupCallback"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 15029047 // <realization>
	  relation 15029047 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 15029047 // <realization>
	    b parent class_ref 6971447 // OnPreDrawListener
	end

	classrelation 15029175 // <realization>
	  relation 15029175 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 15029175 // <realization>
	    b parent class_ref 6944567 // OnAttachStateChangeListener
	end

	classrelation 15029303 // layoutChangeListenerMap (<unidirectional association>)
	  relation 15029303 --->
	    stereotype "Map"
	    a role_name "layoutChangeListenerMap" const_relation package
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}, View.OnLayoutChangeListener> ${name}${value};
"
	      classrelation_ref 15029303 // layoutChangeListenerMap (<unidirectional association>)
	    b parent class_ref 6937143 // View
	end

	classrelation 15029431 // parent (<unidirectional association>)
	  relation 15029431 --->
	    a role_name "parent" const_relation package
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 15029431 // parent (<unidirectional association>)
	    b parent class_ref 6937399 // ViewGroup
	end

	operation 77404471 "CleanupCallback"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "listenerMap" explicit_type "Map<View, View.OnLayoutChangeListener>"
	    param inout name "parent" type class_ref 6937399 // ViewGroup
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77404599 "cleanup"
	  private explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 77404727 "onViewAttachedToWindow"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "v" type class_ref 6937143 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 77404855 "onViewDetachedFromWindow"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "v" type class_ref 6937143 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 77404983 "onPreDraw"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 6973751 "PointFEvaluator"
      visibility public 
      nactuals 1
      actual class class_ref 6967735 // TypeEvaluator
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This evaluator can be used to perform type interpolation between <code>PointF</code> values.
"
      classrelation 15032247 // <realization>
	relation 15032247 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15032247 // <realization>
	  b parent class_ref 6967735 // TypeEvaluator
      end

      classrelation 15032375 // mPoint (<unidirectional association>)
	relation 15032375 --->
	  a role_name "mPoint" private
	    comment "
When null, a new PointF is returned on every evaluate call. When non-null,
mPoint will be modified and returned on every evaluate.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15032375 // mPoint (<unidirectional association>)
	  b parent class_ref 6018615 // PointF
      end

      operation 77422263 "PointFEvaluator"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a PointFEvaluator that returns a new PointF on every evaluate call.
To avoid creating an object for each evaluate call,
{@link PointFEvaluator#PointFEvaluator(android.graphics.PointF)} should be used
whenever possible.
"
      end

      operation 77422391 "PointFEvaluator"
	public explicit_return_type ""
	nparams 1
	  param inout name "reuse" type class_ref 6018615 // PointF
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a PointFEvaluator that modifies and returns <code>reuse</code>
in {@link #evaluate(float, android.graphics.PointF, android.graphics.PointF)} calls.
The value returned from
{@link #evaluate(float, android.graphics.PointF, android.graphics.PointF)} should
not be cached because it will change over time as the object is reused on each
call.

@param reuse A PointF to be modified and returned by evaluate.
"
      end

      operation 77422519 "evaluate"
	public return_type class_ref 6018615 // PointF
	nparams 3
	  param in name "fraction" explicit_type "float"
	  param inout name "startValue" type class_ref 6018615 // PointF
	  param inout name "endValue" type class_ref 6018615 // PointF
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "This function returns the result of linearly interpolating the start and
end PointF values, with <code>fraction</code> representing the proportion
between the start and end values. The calculation is a simple parametric
calculation on each of the separate components in the PointF objects
(x, y).

<p>If {@link #PointFEvaluator(android.graphics.PointF)} was used to construct
this PointFEvaluator, the object returned will be the <code>reuse</code>
passed into the constructor.</p>

@param fraction   The fraction from the starting to the ending values
@param startValue The start PointF
@param endValue   The end PointF
@return A linear interpolation between the start and end values, given the
        <code>fraction</code> parameter.
"
      end
    end

    class 6975159 "RectEvaluator"
      visibility public 
      nactuals 1
      actual class class_ref 6967735 // TypeEvaluator
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This evaluator can be used to perform type interpolation between <code>Rect</code> values.
"
      classrelation 15036983 // <realization>
	relation 15036983 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15036983 // <realization>
	  b parent class_ref 6967735 // TypeEvaluator
      end

      classrelation 15037111 // mRect (<unidirectional association>)
	relation 15037111 --->
	  a role_name "mRect" private
	    comment "
When null, a new Rect is returned on every evaluate call. When non-null,
mRect will be modified and returned on every evaluate.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15037111 // mRect (<unidirectional association>)
	  b parent class_ref 5772599 // Rect
      end

      operation 77435063 "RectEvaluator"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a RectEvaluator that returns a new Rect on every evaluate call.
To avoid creating an object for each evaluate call,
{@link RectEvaluator#RectEvaluator(android.graphics.Rect)} should be used
whenever possible.
"
      end

      operation 77435191 "RectEvaluator"
	public explicit_return_type ""
	nparams 1
	  param inout name "reuseRect" type class_ref 5772599 // Rect
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a RectEvaluator that modifies and returns <code>reuseRect</code>
in {@link #evaluate(float, android.graphics.Rect, android.graphics.Rect)} calls.
The value returned from
{@link #evaluate(float, android.graphics.Rect, android.graphics.Rect)} should
not be cached because it will change over time as the object is reused on each
call.

@param reuseRect A Rect to be modified and returned by evaluate.
"
      end

      operation 77435319 "evaluate"
	public return_type class_ref 5772599 // Rect
	nparams 3
	  param in name "fraction" explicit_type "float"
	  param inout name "startValue" type class_ref 5772599 // Rect
	  param inout name "endValue" type class_ref 5772599 // Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "This function returns the result of linearly interpolating the start and
end Rect values, with <code>fraction</code> representing the proportion
between the start and end values. The calculation is a simple parametric
calculation on each of the separate components in the Rect objects
(left, top, right, and bottom).

<p>If {@link #RectEvaluator(android.graphics.Rect)} was used to construct
this RectEvaluator, the object returned will be the <code>reuseRect</code>
passed into the constructor.</p>

@param fraction   The fraction from the starting to the ending values
@param startValue The start Rect
@param endValue   The end Rect
@return A linear interpolation between the start and end values, given the
        <code>fraction</code> parameter.
"
      end
    end

    class 6975287 "RevealAnimator"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Reveals a View with an animated clipping circle.
The clipping is implemented efficiently by talking to a private reveal API on View.
This hidden class currently only accessed by the {@link android.view.View}.

@hide
"
      classrelation 15038519 // <generalisation>
	relation 15038519 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15038519 // <generalisation>
	  b parent class_ref 6975415 // RenderNodeAnimator
      end

      classrelation 15038647 // mClipView (<unidirectional association>)
	relation 15038647 --->
	  a role_name "mClipView" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15038647 // mClipView (<unidirectional association>)
	  b parent class_ref 6937143 // View
      end

      operation 77442743 "RevealAnimator"
	public explicit_return_type ""
	nparams 5
	  param inout name "clipView" type class_ref 6937143 // View
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "startRadius" explicit_type "float"
	  param in name "endRadius" explicit_type "float"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 77442871 "onFinished"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 6975927 "TimeAnimator"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class provides a simple callback mechanism to listeners that is synchronized with all
other animators in the system. There is no duration, interpolation, or object value-setting
with this Animator. Instead, it is simply started, after which it proceeds to send out events
on every animation frame to its TimeListener (if set), with information about this animator,
the total elapsed time, and the elapsed time since the previous animation frame.
"
      classrelation 15040055 // <generalisation>
	relation 15040055 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15040055 // <generalisation>
	  b parent class_ref 6967863 // ValueAnimator
      end

      class 6976055 "TimeListener"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	static java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 77446711 "onTimeUpdate"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "animation" type class_ref 6975927 // TimeAnimator
	    param in name "totalTime" explicit_type "long"
	    param in name "deltaTime" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "<p>Notifies listeners of the occurrence of another frame of the animation,
along with information about the elapsed time.</p>

@param animation The animator sending out the notification.
@param totalTime The total time elapsed since the animator started, in milliseconds.
@param deltaTime The time elapsed since the previous frame, in milliseconds.
"
	end
      end

      classrelation 15040183 // mListener (<unidirectional association>)
	relation 15040183 --->
	  a role_name "mListener" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15040183 // mListener (<unidirectional association>)
	  b parent class_ref 6976055 // TimeListener
      end

      attribute 24018743 "mPreviousTime"
	private explicit_type "long"
	init_value " -1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 77445943 "start"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77446071 "animateBasedOnTime"
	package explicit_return_type "boolean"
	nparams 1
	  param in name "currentTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77446199 "setCurrentPlayTime"
	public explicit_return_type "void"
	nparams 1
	  param in name "playTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77446327 "setTimeListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 6976055 // TimeListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a listener that is sent update events throughout the life of
an animation.

@param listener the listener to be set.
"
      end

      operation 77446455 "animateValue"
	package explicit_return_type "void"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 77446583 "initAnimation"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end
  end

  deploymentview 132151 "animation"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 2149303 "AnimatorInflaterTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.test.ActivityInstrumentationTestCase2;
import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import com.android.frameworks.coretests.R;
${definition}"
      associated_classes
	class_ref 5864759 // AnimatorInflaterTest
      end
    end

    artifact 2149431 "AnimatorSetActivity"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import com.android.frameworks.coretests.R;
import android.app.Activity;
import android.os.Bundle;
${definition}"
      associated_classes
	class_ref 5865271 // AnimatorSetActivity
      end
    end

    artifact 2149559 "AnimatorSetActivityTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import com.android.frameworks.coretests.R;
import android.test.ActivityInstrumentationTestCase2;
import android.test.UiThreadTest;
import android.test.suitebuilder.annotation.SmallTest;
import android.view.View;
import java.util.ArrayList;
${definition}"
      associated_classes
	class_ref 5865399 // AnimatorSetActivityTest
      end
    end

    artifact 2149687 "EventsTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.os.Handler;
import android.test.ActivityInstrumentationTestCase2;
import android.test.UiThreadTest;
import android.test.suitebuilder.annotation.MediumTest;
import android.test.suitebuilder.annotation.SmallTest;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
${definition}"
      associated_classes
	class_ref 5865783 // EventsTest
      end
    end

    artifact 2149815 "AnimatorSetEventsTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.os.Handler;
import android.test.suitebuilder.annotation.MediumTest;
import android.test.suitebuilder.annotation.SmallTest;
import android.widget.Button;
import com.android.frameworks.coretests.R;
import java.util.concurrent.TimeUnit;
${definition}"
      associated_classes
	class_ref 5865655 // AnimatorSetEventsTest
      end
    end

    artifact 2149943 "AutoCancelTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.os.Handler;
import android.test.ActivityInstrumentationTestCase2;
import android.test.suitebuilder.annotation.SmallTest;
import java.util.HashMap;
import java.util.concurrent.TimeUnit;
${definition}"
      associated_classes
	class_ref 5866679 // AutoCancelTest
      end
    end

    artifact 2150071 "BasicAnimatorActivity"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import com.android.frameworks.coretests.R;
import android.app.Activity;
import android.os.Bundle;
import android.widget.Button;
${definition}"
      associated_classes
	class_ref 5864887 // BasicAnimatorActivity
      end
    end

    artifact 2150199 "FutureWaiter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import com.google.common.util.concurrent.AbstractFuture;
${definition}"
      associated_classes
	class_ref 5865911 // FutureWaiter
      end
    end

    artifact 2150327 "ObjectAnimatorEventsTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.widget.Button;
import com.android.frameworks.coretests.R;
${definition}"
      associated_classes
	class_ref 5866807 // ObjectAnimatorEventsTest
      end
    end

    artifact 2150455 "StateListAnimatorTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.test.ActivityInstrumentationTestCase2;
import android.test.UiThreadTest;
import android.util.StateSet;
import android.view.View;
import android.view.ViewGroup;
import com.android.frameworks.coretests.R;
import java.util.concurrent.atomic.AtomicInteger;
${definition}"
      associated_classes
	class_ref 5866935 // StateListAnimatorTest
      end
    end

    artifact 2150583 "ValueAnimatorEventsTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 5867063 // ValueAnimatorEventsTest
      end
    end

    artifact 2150711 "ValueAnimatorTests"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.os.SystemClock;
import android.test.ActivityInstrumentationTestCase2;
import android.test.suitebuilder.annotation.SmallTest;
import android.view.Choreographer;
import android.view.animation.LinearInterpolator;
import java.util.ArrayList;
import static android.test.MoreAsserts.assertNotEqual;
${definition}"
      associated_classes
	class_ref 5867191 // ValueAnimatorTests
      end
    end

    artifact 2150839 "ViewPropertyAnimatorTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.os.Handler;
import android.test.ActivityInstrumentationTestCase2;
import android.test.UiThreadTest;
import android.test.suitebuilder.annotation.MediumTest;
import android.test.suitebuilder.annotation.SmallTest;
import android.view.ViewPropertyAnimator;
import android.widget.Button;
import com.android.frameworks.coretests.R;
import java.util.concurrent.TimeUnit;
${definition}"
      associated_classes
	class_ref 5867959 // ViewPropertyAnimatorTest
      end
    end

    artifact 2670647 "AnimationThread"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import com.android.ide.common.rendering.api.IAnimationListener;
import com.android.ide.common.rendering.api.RenderSession;
import com.android.ide.common.rendering.api.Result;
import com.android.ide.common.rendering.api.Result.Status;
import com.android.layoutlib.bridge.Bridge;
import com.android.layoutlib.bridge.impl.RenderSessionImpl;
import android.os.Handler;
import android.os.Handler_Delegate;
import android.os.Handler_Delegate.IHandlerCallback;
import android.os.Message;
import java.util.PriorityQueue;
import java.util.Queue;
${definition}"
      associated_classes
	class_ref 6801591 // AnimationThread
      end
    end

    artifact 2670775 "PropertyValuesHolder_Delegate"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import com.android.layoutlib.bridge.Bridge;
import com.android.layoutlib.bridge.impl.DelegateManager;
import com.android.tools.layoutlib.annotations.LayoutlibDelegate;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
${definition}"
      associated_classes
	class_ref 6801975 // PropertyValuesHolder_Delegate
      end
    end

    artifact 2749623 "AnimationHandler"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.os.SystemClock;
import android.util.ArrayMap;
import android.view.Choreographer;
import java.util.ArrayList;
${definition}"
      associated_classes
	class_ref 6965431 // AnimationHandler
      end
      comment "Copyright (C) 2015 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2749879 "Animator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.annotation.Nullable;
import android.content.pm.ActivityInfo.Config;
import android.content.res.ConstantState;
import java.util.ArrayList;
${definition}"
      associated_classes
	class_ref 6966327 // Animator
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2750007 "TypeEvaluator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 6967735 // TypeEvaluator
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2750135 "AnimatorInflater"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.annotation.AnimatorRes;
import android.annotation.AnyRes;
import android.annotation.NonNull;
import android.content.Context;
import android.content.pm.ActivityInfo.Config;
import android.content.res.ConfigurationBoundResourceCache;
import android.content.res.ConstantState;
import android.content.res.Resources;
import android.content.res.Resources.NotFoundException;
import android.content.res.Resources.Theme;
import android.content.res.TypedArray;
import android.content.res.XmlResourceParser;
import android.graphics.Path;
import android.util.AttributeSet;
import android.util.Log;
import android.util.PathParser;
import android.util.StateSet;
import android.util.TypedValue;
import android.util.Xml;
import android.view.InflateException;
import android.view.animation.AnimationUtils;
import android.view.animation.BaseInterpolator;
import android.view.animation.Interpolator;
import com.android.internal.R;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import java.io.IOException;
import java.util.ArrayList;
${definition}"
      associated_classes
	class_ref 6967223 // AnimatorInflater
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2750263 "AnimatorListenerAdapter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 6968247 // AnimatorListenerAdapter
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2750391 "AnimatorSet"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.app.ActivityThread;
import android.app.Application;
import android.os.Build;
import android.util.ArrayMap;
import android.util.Log;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
${definition}"
      associated_classes
	class_ref 6967991 // AnimatorSet
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2750519 "ArgbEvaluator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 6968759 // ArgbEvaluator
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2750647 "TypeConverter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 6969015 // TypeConverter
      end
      comment "Copyright (C) 2013 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2750775 "BidirectionalTypeConverter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 6968887 // BidirectionalTypeConverter
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2750903 "FloatArrayEvaluator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 6969271 // FloatArrayEvaluator
      end
      comment "Copyright (C) 2013 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2751031 "FloatEvaluator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 6969399 // FloatEvaluator
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2751159 "Keyframes"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_classes
	class_ref 6969783 // Keyframes
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2751287 "KeyframeSet"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
import java.util.List;
import android.animation.Keyframe.IntKeyframe;
import android.animation.Keyframe.FloatKeyframe;
import android.animation.Keyframe.ObjectKeyframe;
import android.graphics.Path;
import android.util.Log;
${definition}"
      associated_classes
	class_ref 6969655 // KeyframeSet
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2751415 "FloatKeyframeSet"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.animation.Keyframe.FloatKeyframe;
import java.util.List;
${definition}"
      associated_classes
	class_ref 6969527 // FloatKeyframeSet
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2751543 "IntArrayEvaluator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 6970295 // IntArrayEvaluator
      end
      comment "Copyright (C) 2013 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2751671 "IntEvaluator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 6970423 // IntEvaluator
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2751799 "IntKeyframeSet"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.animation.Keyframe.IntKeyframe;
import java.util.List;
${definition}"
      associated_classes
	class_ref 6970551 // IntKeyframeSet
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2751927 "Keyframe"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 6968119 // Keyframe
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2752183 "LayoutTransition"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewParent;
import android.view.ViewTreeObserver;
import android.view.animation.AccelerateDecelerateInterpolator;
import android.view.animation.DecelerateInterpolator;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
${definition}"
      associated_classes
	class_ref 6971063 // LayoutTransition
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2752311 "ValueAnimator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.annotation.CallSuper;
import android.annotation.IntDef;
import android.os.Looper;
import android.os.Trace;
import android.util.AndroidRuntimeException;
import android.util.Log;
import android.view.animation.AccelerateDecelerateInterpolator;
import android.view.animation.AnimationUtils;
import android.view.animation.LinearInterpolator;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.util.ArrayList;
import java.util.HashMap;
${definition}"
      associated_classes
	class_ref 6967863 // ValueAnimator
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2752439 "ObjectAnimator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.annotation.CallSuper;
import android.annotation.NonNull;
import android.annotation.Nullable;
import android.graphics.Path;
import android.graphics.PointF;
import android.util.Log;
import android.util.Property;
import android.view.animation.AccelerateDecelerateInterpolator;
import java.lang.ref.WeakReference;
${definition}"
      associated_classes
	class_ref 6966071 // ObjectAnimator
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2752567 "PathKeyframes"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.graphics.Path;
import android.graphics.PointF;
import java.util.ArrayList;
${definition}"
      associated_classes
	class_ref 6970167 // PathKeyframes
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2752695 "PointFEvaluator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.graphics.PointF;
${definition}"
      associated_classes
	class_ref 6973751 // PointFEvaluator
      end
      comment "Copyright (C) 2013 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2752823 "PropertyValuesHolder"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.graphics.Path;
import android.graphics.PointF;
import android.util.FloatProperty;
import android.util.IntProperty;
import android.util.Log;
import android.util.PathParser;
import android.util.Property;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.List;
${definition}"
      associated_classes
	class_ref 196535 // PropertyValuesHolder
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2752951 "RectEvaluator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.graphics.Rect;
${definition}"
      associated_classes
	class_ref 6975159 // RectEvaluator
      end
      comment "Copyright (C) 2013 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2753207 "RevealAnimator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.view.RenderNodeAnimator;
import android.view.View;
${definition}"
      associated_classes
	class_ref 6975287 // RevealAnimator
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2753335 "StateListAnimator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.content.pm.ActivityInfo.Config;
import android.content.res.ConstantState;
import android.util.StateSet;
import android.view.View;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
${definition}"
      associated_classes
	class_ref 6946231 // StateListAnimator
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2753463 "TimeAnimator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.view.animation.AnimationUtils;
${definition}"
      associated_classes
	class_ref 6975927 // TimeAnimator
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2753591 "TimeInterpolator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 6966967 // TimeInterpolator
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end
  end
end
