format 213
"params" // android::frameworks::base::core::java::android::hardware::camera2::params
  revision 4
  modified_by 55 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "D:\\Workspace\\AndroidSourceCode\\nougat_src\\frameworks/base/core/java/android/hardware/camera2/params/"
  java_package "android.hardware.camera2.params"
  classview 142391 "params"
    
    classdiagramsettings member_max_width 0 end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 7150135 "HighSpeedVideoConfiguration"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Immutable class to store the available
{@link CameraCharacteristics#CONTROL_AVAILABLE_HIGH_SPEED_VIDEO_CONFIGURATIONS high speed video
 configurations}

@see CameraCharacteristics#CONTROL_AVAILABLE_HIGH_SPEED_VIDEO_CONFIGURATIONS

@hide
"
      attribute 24845239 "HIGH_SPEED_MAX_MINIMAL_FPS"
	class_attribute const_attribute private explicit_type "int"
	init_value " 120"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 79451319 "HighSpeedVideoConfiguration"
	public explicit_return_type ""
	nparams 5
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	  param in name "fpsMin" explicit_type "int"
	  param in name "fpsMax" explicit_type "int"
	  param in name "batchSizeMax" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}final ${t0} ${p0}, final ${t1} ${p1}, final ${t2} ${p2}, final ${t3} ${p3}, final ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new {@link HighSpeedVideoConfiguration}.

@param width image width, in pixels (positive)
@param height image height, in pixels (positive)
@param fpsMin minimum frames per second for the configuration (positive)
@param fpsMax maximum frames per second for the configuration (larger or equal to 60)

@throws IllegalArgumentException
             if width/height/fpsMin were not positive or fpsMax less than 60

@hide
"
      end

      operation 79451447 "getWidth"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the width of the high speed video configuration.

@return width > 0
"
      end

      operation 79451575 "getHeight"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the height of the high speed video configuration.

@return height > 0
"
      end

      operation 79451703 "getFpsMin"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the minimum frame per second of the high speed video configuration.

@return fpsMin > 0
"
      end

      operation 79451831 "getFpsMax"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the maximum frame per second of the high speed video configuration.

@return fpsMax >= 60
"
      end

      operation 79451959 "getSize"
	public return_type class_ref 6985911 // Size
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method to return the size of this high speed video configuration.

@return a Size with positive width and height
"
      end

      operation 79452087 "getBatchSizeMax"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method to return the max batch size of this high speed video configuration.

@return the maximal batch size for this high speed video configuration
"
      end

      operation 79452215 "getFpsRange"
	public return_type class_ref 7149879 // Range
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Integer> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method to return the FPS range of this high speed video configuration.

@return a Range with high bound >= {@value #HIGH_SPEED_MAX_MINIMAL_FPS}
"
      end

      operation 79452343 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "obj" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Check if this {@link HighSpeedVideoConfiguration} is equal to another
{@link HighSpeedVideoConfiguration}.

<p>Two configurations are equal if and only if each of the respective elements is equal.</p>

@return {@code true} if the objects were equal, {@code false} otherwise
"
      end

      operation 79452471 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
"
      end

      attribute 24845367 "mWidth"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24845495 "mHeight"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24845623 "mFpsMin"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24845751 "mFpsMax"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24845879 "mBatchSizeMax"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 15726775 // mSize (<unidirectional association>)
	relation 15726775 --->
	  a role_name "mSize" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15726775 // mSize (<unidirectional association>)
	  b parent class_ref 6985911 // Size
      end

      classrelation 15726903 // mFpsRange (<unidirectional association>)
	relation 15726903 --->
	  a role_name "mFpsRange" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Integer> ${name}${value};
"
	    classrelation_ref 15726903 // mFpsRange (<unidirectional association>)
	  b parent class_ref 7149879 // Range
      end
    end

    class 7150263 "ReprocessFormatsMap"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Immutable class to store the input to output formats
{@link CameraCharacteristics#SCALER_AVAILABLE_INPUT_OUTPUT_FORMATS_MAP map} to be used for with
camera image reprocessing.

<p>
The mapping of image formats that are supported by this camera device for input streams,
to their corresponding output formats.</p>

<p>
Attempting to configure an input stream with output streams not listed as available in this map
is not valid.
</p>

@see CameraCharacteristics#SCALER_AVAILABLE_INPUT_OUTPUT_FORMATS_MAP
@see CameraCharacteristics#SCALER_AVAILABLE_STREAM_CONFIGURATIONS

<!-- hide this until we expose input streams through public API -->
@hide
"
      operation 79458359 "ReprocessFormatsMap"
	public explicit_return_type ""
	nparams 1
	  param in name "entry" explicit_type "int"
	multiplicity "[]"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}final ${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new {@link ReprocessFormatsMap}

<p>This value is encoded as a variable-size array-of-arrays.
The inner array always contains {@code [format, length, ...]} where ... has length elements.
An inner array is followed by another inner array if the total metadata entry size hasn't
yet been exceeded.</p>

<p>Entry must not be {@code null}. Empty array is acceptable.</p>

<p>The entry array ownership is passed to this instance after construction; do not
write to it afterwards.</p>

@param entry Array of ints, not yet deserialized (not-null)

@throws IllegalArgumentException
             if the data was poorly formatted
             (missing output format length or too few output formats)
             or if any of the input/formats were not valid
@throws NullPointerException
             if entry was null

@see StreamConfigurationMap#checkArgumentFormatInternal

@hide
"
      end

      operation 79458487 "getInputs"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a list of all input image formats that can be used to reprocess an input
stream into an output stream.

<p>Use this input format to look up the available output formats with {@link #getOutputs}.
</p>

@return an array of inputs (possibly empty, but never {@code null})

@see ImageFormat
@see #getOutputs
"
      end

      operation 79458615 "getOutputs"
	public explicit_return_type "int"
	nparams 1
	  param in name "format" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the list of output formats that can be reprocessed into from the input {@code format}.

<p>The input {@code format} must be one of the formats returned by {@link #getInputs}.</p>

@param format an input format

@return list of output image formats

@see ImageFormat
@see #getInputs
"
      end

      operation 79458743 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "obj" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Check if this {@link ReprocessFormatsMap} is equal to another
{@link ReprocessFormatsMap}.

<p>These two objects are only equal if and only if each of the respective elements is equal.
</p>

@return {@code true} if the objects were equal, {@code false} otherwise
"
      end

      operation 79458871 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
"
      end

      attribute 24849207 "mEntry"
	const_attribute private explicit_type "int"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24849335 "mInputCount"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Dependent fields: values are derived from mEntry

"
      end
    end

    class 7150391 "StreamConfiguration"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Immutable class to store the available stream
{@link CameraCharacteristics#SCALER_AVAILABLE_STREAM_CONFIGURATIONS configurations} to set up
{@link android.view.Surface Surfaces} for creating a {@link CameraCaptureSession capture session}
with {@link CameraDevice#createCaptureSession}.
<!-- TODO: link to input stream configuration -->

<p>This is the authoritative list for all input/output formats (and sizes respectively
for that format) that are supported by a camera device.</p>

@see CameraCharacteristics#SCALER_AVAILABLE_STREAM_CONFIGURATIONS

@hide
"
      operation 79460407 "StreamConfiguration"
	public explicit_return_type ""
	nparams 4
	  param in name "format" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	  param in name "input" explicit_type "boolean"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}final ${t0} ${p0}, final ${t1} ${p1}, final ${t2} ${p2}, final ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new {@link StreamConfiguration}.

@param format image format
@param width image width, in pixels (positive)
@param height image height, in pixels (positive)
@param input true if this is an input configuration, false for output configurations

@throws IllegalArgumentException
             if width/height were not positive
             or if the format was not user-defined in ImageFormat/PixelFormat
                 (IMPL_DEFINED is ok)

@hide
"
      end

      operation 79460535 "getFormat"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the internal image {@code format} in this stream configuration.

@return an integer format

@see ImageFormat
@see PixelFormat
"
      end

      operation 79460663 "getWidth"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the width of the stream configuration.

@return width > 0
"
      end

      operation 79460791 "getHeight"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the height of the stream configuration.

@return height > 0
"
      end

      operation 79460919 "getSize"
	public return_type class_ref 6985911 // Size
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method to return the size of this stream configuration.

@return a Size with positive width and height
"
      end

      operation 79461047 "isInput"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if this configuration is usable for input streams.

<p>Input and output stream configurations are not interchangeable;
input stream configurations must be used when configuring inputs.</p>

@return {@code true} if input configuration, {@code false} otherwise
"
      end

      operation 79461175 "isOutput"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if this configuration is usable for output streams.

<p>Input and output stream configurations are not interchangeable;
out stream configurations must be used when configuring outputs.</p>

@return {@code true} if output configuration, {@code false} otherwise

@see CameraDevice#createCaptureSession
"
      end

      operation 79461303 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "obj" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Check if this {@link StreamConfiguration} is equal to another {@link StreamConfiguration}.

<p>Two vectors are only equal if and only if each of the respective elements is equal.</p>

@return {@code true} if the objects were equal, {@code false} otherwise
"
      end

      operation 79461431 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
"
      end

      attribute 24850615 "mFormat"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24850743 "mWidth"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24850871 "mHeight"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24850999 "mInput"
	const_attribute private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 7150519 "StreamConfigurationDuration"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Immutable class to store a time duration for any given format/size combination.

@see CameraCharacteristics#SCALER_AVAILABLE_STREAM_CONFIGURATIONS
@see CameraCharacteristics#SCALER_AVAILABLE_MIN_FRAME_DURATIONS
@see CameraCharacteristics#SCALER_AVAILABLE_STALL_DURATIONS

@hide
"
      operation 79461559 "StreamConfigurationDuration"
	public explicit_return_type ""
	nparams 4
	  param in name "format" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	  param in name "durationNs" explicit_type "long"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}final ${t0} ${p0}, final ${t1} ${p1}, final ${t2} ${p2}, final ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new {@link StreamConfigurationDuration}.

@param format image format
@param width image width, in pixels (positive)
@param height image height, in pixels (positive)
@param durationNs duration in nanoseconds (non-negative)

@throws IllegalArgumentException
         if width/height were not positive, or durationNs was negative
         or if the format was not user-defined in ImageFormat/PixelFormat
             (IMPL_DEFINED is OK)


@hide
"
      end

      operation 79461687 "getFormat"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the internal image {@code format} in this stream configuration duration

@return an integer format

@see ImageFormat
@see PixelFormat
"
      end

      operation 79461815 "getWidth"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the width of the stream configuration duration.

@return width > 0
"
      end

      operation 79461943 "getHeight"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the height of the stream configuration duration

@return height > 0
"
      end

      operation 79462071 "getSize"
	public return_type class_ref 6985911 // Size
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method to return the size of this stream configuration duration.

@return a Size with positive width and height
"
      end

      operation 79462199 "getDuration"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the time duration (in nanoseconds).

@return long >= 0
"
      end

      operation 79462327 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "obj" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Check if this {@link StreamConfigurationDuration} is equal to another
{@link StreamConfigurationDuration}.

<p>Two vectors are only equal if and only if each of the respective elements is equal.</p>

@return {@code true} if the objects were equal, {@code false} otherwise
"
      end

      operation 79462455 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
"
      end

      attribute 24851127 "mFormat"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24851255 "mWidth"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24851383 "mHeight"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24851511 "mDurationNs"
	const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 7150647 "StreamConfigurationMap"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Immutable class to store the available stream
{@link CameraCharacteristics#SCALER_STREAM_CONFIGURATION_MAP configurations} to set up
{@link android.view.Surface Surfaces} for creating a
{@link android.hardware.camera2.CameraCaptureSession capture session} with
{@link android.hardware.camera2.CameraDevice#createCaptureSession}.
<!-- TODO: link to input stream configuration -->

<p>This is the authoritative list for all <!-- input/ -->output formats (and sizes respectively
for that format) that are supported by a camera device.</p>

<p>This also contains the minimum frame durations and stall durations for each format/size
combination that can be used to calculate effective frame rate when submitting multiple captures.
</p>

<p>An instance of this object is available from {@link CameraCharacteristics} using
the {@link CameraCharacteristics#SCALER_STREAM_CONFIGURATION_MAP} key and the
{@link CameraCharacteristics#get} method.</p>

<pre><code>{@code
CameraCharacteristics characteristics = cameraManager.getCameraCharacteristics(cameraId);
StreamConfigurationMap configs = characteristics.get(
        CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
}</code></pre>

@see CameraCharacteristics#SCALER_STREAM_CONFIGURATION_MAP
@see CameraDevice#createCaptureSession
"
      operation 79462583 "StreamConfigurationMap"
	public explicit_return_type ""
	nparams 9
	  param inout name "configurations" type class_ref 7150391 // StreamConfiguration
	multiplicity "[]"
	  param inout name "minFrameDurations" type class_ref 7150519 // StreamConfigurationDuration
	multiplicity "[]"
	  param inout name "stallDurations" type class_ref 7150519 // StreamConfigurationDuration
	multiplicity "[]"
	  param inout name "depthConfigurations" type class_ref 7150391 // StreamConfiguration
	multiplicity "[]"
	  param inout name "depthMinFrameDurations" type class_ref 7150519 // StreamConfigurationDuration
	multiplicity "[]"
	  param inout name "depthStallDurations" type class_ref 7150519 // StreamConfigurationDuration
	multiplicity "[]"
	  param inout name "highSpeedVideoConfigurations" type class_ref 7150135 // HighSpeedVideoConfiguration
	multiplicity "[]"
	  param inout name "inputOutputFormatsMap" type class_ref 7150263 // ReprocessFormatsMap
	  param inout name "listHighResolution" explicit_type "boolean"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}, ${t4}[] ${p4}, ${t5}[] ${p5}, ${t6}[] ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new {@link StreamConfigurationMap}.

<p>The array parameters ownership is passed to this object after creation; do not
write to them after this constructor is invoked.</p>

@param configurations a non-{@code null} array of {@link StreamConfiguration}
@param minFrameDurations a non-{@code null} array of {@link StreamConfigurationDuration}
@param stallDurations a non-{@code null} array of {@link StreamConfigurationDuration}
@param highSpeedVideoConfigurations an array of {@link HighSpeedVideoConfiguration}, null if
       camera device does not support high speed video recording
@param listHighResolution a flag indicating whether the device supports BURST_CAPTURE
       and thus needs a separate list of slow high-resolution output sizes
@throws NullPointerException if any of the arguments except highSpeedVideoConfigurations
        were {@code null} or any subelements were {@code null}

@hide
"
      end

      operation 79462711 "getOutputFormats"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the image {@code format} output formats in this stream configuration.

<p>All image formats returned by this function will be defined in either {@link ImageFormat}
or in {@link PixelFormat} (and there is no possibility of collision).</p>

<p>Formats listed in this array are guaranteed to return true if queried with
{@link #isOutputSupportedFor(int)}.</p>

@return an array of integer format

@see ImageFormat
@see PixelFormat
"
      end

      operation 79462839 "getValidOutputFormatsForInput"
	public explicit_return_type "int"
	nparams 1
	  param in name "inputFormat" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the image {@code format} output formats for a reprocessing input format.

<p>When submitting a {@link CaptureRequest} with an input Surface of a given format,
the only allowed target outputs of the {@link CaptureRequest} are the ones with a format
listed in the return value of this method. Including any other output Surface as a target
will throw an IllegalArgumentException. If no output format is supported given the input
format, an empty int[] will be returned.</p>

<p>All image formats returned by this function will be defined in either {@link ImageFormat}
or in {@link PixelFormat} (and there is no possibility of collision).</p>

<p>Formats listed in this array are guaranteed to return true if queried with
{@link #isOutputSupportedFor(int)}.</p>

@return an array of integer format

@see ImageFormat
@see PixelFormat
"
      end

      operation 79462967 "getInputFormats"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the image {@code format} input formats in this stream configuration.

<p>All image formats returned by this function will be defined in either {@link ImageFormat}
or in {@link PixelFormat} (and there is no possibility of collision).</p>

@return an array of integer format

@see ImageFormat
@see PixelFormat
"
      end

      operation 79463095 "getInputSizes"
	public return_type class_ref 6985911 // Size
	nparams 1
	  param in name "format" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the supported input sizes for this input format.

<p>The format must have come from {@link #getInputFormats}; otherwise
{@code null} is returned.</p>

@param format a format from {@link #getInputFormats}
@return a non-empty array of sizes, or {@code null} if the format was not available.
"
      end

      operation 79463223 "isOutputSupportedFor"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "format" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine whether or not output surfaces with a particular user-defined format can be passed
{@link CameraDevice#createCaptureSession createCaptureSession}.

<p>This method determines that the output {@code format} is supported by the camera device;
each output {@code surface} target may or may not itself support that {@code format}.
Refer to the class which provides the surface for additional documentation.</p>

<p>Formats for which this returns {@code true} are guaranteed to exist in the result
returned by {@link #getOutputSizes}.</p>

@param format an image format from either {@link ImageFormat} or {@link PixelFormat}
@return
         {@code true} iff using a {@code surface} with this {@code format} will be
         supported with {@link CameraDevice#createCaptureSession}

@throws IllegalArgumentException
         if the image format was not a defined named constant
         from either {@link ImageFormat} or {@link PixelFormat}

@see ImageFormat
@see PixelFormat
@see CameraDevice#createCaptureSession
"
      end

      operation 79463351 "isOutputSupportedFor"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param inout name "klass" explicit_type "Class"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine whether or not output streams can be configured with a particular class
as a consumer.

<p>The following list is generally usable for outputs:
<ul>
<li>{@link android.media.ImageReader} -
Recommended for image processing or streaming to external resources (such as a file or
network)
<li>{@link android.media.MediaRecorder} -
Recommended for recording video (simple to use)
<li>{@link android.media.MediaCodec} -
Recommended for recording video (more complicated to use, with more flexibility)
<li>{@link android.renderscript.Allocation} -
Recommended for image processing with {@link android.renderscript RenderScript}
<li>{@link android.view.SurfaceHolder} -
Recommended for low-power camera preview with {@link android.view.SurfaceView}
<li>{@link android.graphics.SurfaceTexture} -
Recommended for OpenGL-accelerated preview processing or compositing with
{@link android.view.TextureView}
</ul>
</p>

<p>Generally speaking this means that creating a {@link Surface} from that class <i>may</i>
provide a producer endpoint that is suitable to be used with
{@link CameraDevice#createCaptureSession}.</p>

<p>Since not all of the above classes support output of all format and size combinations,
the particular combination should be queried with {@link #isOutputSupportedFor(Surface)}.</p>

@param klass a non-{@code null} {@link Class} object reference
@return {@code true} if this class is supported as an output, {@code false} otherwise

@throws NullPointerException if {@code klass} was {@code null}

@see CameraDevice#createCaptureSession
@see #isOutputSupportedFor(Surface)
"
      end

      operation 79463479 "isOutputSupportedFor"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "surface" type class_ref 6952247 // Surface
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine whether or not the {@code surface} in its current state is suitable to be included
in a {@link CameraDevice#createCaptureSession capture session} as an output.

<p>Not all surfaces are usable with the {@link CameraDevice}, and not all configurations
of that {@code surface} are compatible. Some classes that provide the {@code surface} are
compatible with the {@link CameraDevice} in general
(see {@link #isOutputSupportedFor(Class)}, but it is the caller's responsibility to put the
{@code surface} into a state that will be compatible with the {@link CameraDevice}.</p>

<p>Reasons for a {@code surface} being specifically incompatible might be:
<ul>
<li>Using a format that's not listed by {@link #getOutputFormats}
<li>Using a format/size combination that's not listed by {@link #getOutputSizes}
<li>The {@code surface} itself is not in a state where it can service a new producer.</p>
</li>
</ul>

<p>Surfaces from flexible sources will return true even if the exact size of the Surface does
not match a camera-supported size, as long as the format (or class) is supported and the
camera device supports a size that is equal to or less than 1080p in that format. If such as
Surface is used to create a capture session, it will have its size rounded to the nearest
supported size, below or equal to 1080p. Flexible sources include SurfaceView, SurfaceTexture,
and ImageReader.</p>

<p>This is not an exhaustive list; see the particular class's documentation for further
possible reasons of incompatibility.</p>

@param surface a non-{@code null} {@link Surface} object reference
@return {@code true} if this is supported, {@code false} otherwise

@throws NullPointerException if {@code surface} was {@code null}
@throws IllegalArgumentException if the Surface endpoint is no longer valid

@see CameraDevice#createCaptureSession
@see #isOutputSupportedFor(Class)
"
      end

      operation 79463607 "getOutputSizes"
	public return_type class_ref 6985911 // Size
	nparams 1
	  param inout name "klass" explicit_type "Class"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a list of sizes compatible with {@code klass} to use as an output.

<p>Some of the supported classes may support additional formats beyond
{@link ImageFormat#PRIVATE}; this function only returns
sizes for {@link ImageFormat#PRIVATE}. For example, {@link android.media.ImageReader}
supports {@link ImageFormat#YUV_420_888} and {@link ImageFormat#PRIVATE}, this method will
only return the sizes for {@link ImageFormat#PRIVATE} for {@link android.media.ImageReader}
class.</p>

<p>If a well-defined format such as {@code NV21} is required, use
{@link #getOutputSizes(int)} instead.</p>

<p>The {@code klass} should be a supported output, that querying
{@code #isOutputSupportedFor(Class)} should return {@code true}.</p>

@param klass
         a non-{@code null} {@link Class} object reference
@return
         an array of supported sizes for {@link ImageFormat#PRIVATE} format,
         or {@code null} iff the {@code klass} is not a supported output.


@throws NullPointerException if {@code klass} was {@code null}

@see #isOutputSupportedFor(Class)
"
      end

      operation 79463735 "getOutputSizes"
	public return_type class_ref 6985911 // Size
	nparams 1
	  param in name "format" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a list of sizes compatible with the requested image {@code format}.

<p>The {@code format} should be a supported format (one of the formats returned by
{@link #getOutputFormats}).</p>

As of API level 23, the {@link #getHighResolutionOutputSizes} method can be used on devices
that support the
{@link android.hardware.camera2.CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES_BURST_CAPTURE BURST_CAPTURE}
capability to get a list of high-resolution output sizes that cannot operate at the preferred
20fps rate. This means that for some supported formats, this method will return an empty
list, if all the supported resolutions operate at below 20fps.  For devices that do not
support the BURST_CAPTURE capability, all output resolutions are listed through this method.

@param format an image format from {@link ImageFormat} or {@link PixelFormat}
@return
         an array of supported sizes,
         or {@code null} if the {@code format} is not a supported output

@see ImageFormat
@see PixelFormat
@see #getOutputFormats
"
      end

      operation 79463863 "getHighSpeedVideoSizes"
	public return_type class_ref 6985911 // Size
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a list of supported high speed video recording sizes.
<p>
When {@link CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEO} is
supported in {@link CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES}, this method will
list the supported high speed video size configurations. All the sizes listed will be a
subset of the sizes reported by {@link #getOutputSizes} for processed non-stalling formats
(typically {@link ImageFormat#PRIVATE} {@link ImageFormat#YUV_420_888}, etc.)
</p>
<p>
To enable high speed video recording, application must create a constrained create high speed
capture session via {@link CameraDevice#createConstrainedHighSpeedCaptureSession}, and submit
a CaptureRequest list created by
{@link android.hardware.camera2.CameraConstrainedHighSpeedCaptureSession#createHighSpeedRequestList}
to this session. The application must select the video size from this method and
{@link CaptureRequest#CONTROL_AE_TARGET_FPS_RANGE FPS range} from
{@link #getHighSpeedVideoFpsRangesFor} to configure the constrained high speed session and
generate the high speed request list. For example, if the application intends to do high
speed recording, it can select the maximum size reported by this method to create high speed
capture session. Note that for the use case of multiple output streams, application must
select one unique size from this method to use (e.g., preview and recording streams must have
the same size). Otherwise, the high speed session creation will fail. Once the size is
selected, application can get the supported FPS ranges by
{@link #getHighSpeedVideoFpsRangesFor}, and use these FPS ranges to setup the recording
request lists via
{@link android.hardware.camera2.CameraConstrainedHighSpeedCaptureSession#createHighSpeedRequestList}.
</p>

@return an array of supported high speed video recording sizes
@see #getHighSpeedVideoFpsRangesFor(Size)
@see CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEO
@see CameraDevice#createConstrainedHighSpeedCaptureSession
@see android.hardware.camera2.CameraConstrainedHighSpeedCaptureSession#createHighSpeedRequestList
"
      end

      operation 79463991 "getHighSpeedVideoFpsRangesFor"
	public return_type class_ref 7149879 // Range
	nparams 1
	  param inout name "size" type class_ref 6985911 // Size
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Integer>[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the frame per second ranges (fpsMin, fpsMax) for input high speed video size.
<p>
See {@link #getHighSpeedVideoFpsRanges} for how to enable high speed recording.
</p>
<p>
The {@link CaptureRequest#CONTROL_AE_TARGET_FPS_RANGE FPS ranges} reported in this method
must not be used to setup capture requests that are submitted to unconstrained capture
sessions, or it will result in {@link IllegalArgumentException IllegalArgumentExceptions}.
</p>
<p>
See {@link #getHighSpeedVideoFpsRanges} for the characteristics of the returned FPS ranges.
</p>

@param size one of the sizes returned by {@link #getHighSpeedVideoSizes()}
@return an array of supported high speed video recording FPS ranges The upper bound of
        returned ranges is guaranteed to be greater than or equal to 120.
@throws IllegalArgumentException if input size does not exist in the return value of
            getHighSpeedVideoSizes
@see #getHighSpeedVideoSizes()
@see #getHighSpeedVideoFpsRanges()
"
      end

      operation 79464119 "getHighSpeedVideoFpsRanges"
	public return_type class_ref 7149879 // Range
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Integer>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Get a list of supported high speed video recording FPS ranges.
<p>
When {@link CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEO} is
supported in {@link CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES}, this method will
list the supported high speed video FPS range configurations. Application can then use
{@link #getHighSpeedVideoSizesFor} to query available sizes for one of returned FPS range.
</p>
<p>
To enable high speed video recording, application must create a constrained create high speed
capture session via {@link CameraDevice#createConstrainedHighSpeedCaptureSession}, and submit
a CaptureRequest list created by
{@link android.hardware.camera2.CameraConstrainedHighSpeedCaptureSession#createHighSpeedRequestList}
to this session. The application must select the video size from this method and
{@link CaptureRequest#CONTROL_AE_TARGET_FPS_RANGE FPS range} from
{@link #getHighSpeedVideoFpsRangesFor} to configure the constrained high speed session and
generate the high speed request list. For example, if the application intends to do high
speed recording, it can select one FPS range reported by this method, query the video sizes
corresponding to this FPS range by {@link #getHighSpeedVideoSizesFor} and use one of reported
sizes to create a high speed capture session. Note that for the use case of multiple output
streams, application must select one unique size from this method to use (e.g., preview and
recording streams must have the same size). Otherwise, the high speed session creation will
fail. Once the high speed capture session is created, the application can set the FPS range
in the recording request lists via
{@link android.hardware.camera2.CameraConstrainedHighSpeedCaptureSession#createHighSpeedRequestList}.
</p>
<p>
The FPS ranges reported by this method will have below characteristics:
<li>The fpsMin and fpsMax will be a multiple 30fps.</li>
<li>The fpsMin will be no less than 30fps, the fpsMax will be no less than 120fps.</li>
<li>At least one range will be a fixed FPS range where fpsMin == fpsMax.</li>
<li>For each fixed FPS range, there will be one corresponding variable FPS range [30,
fps_max]. These kinds of FPS ranges are suitable for preview-only use cases where the
application doesn't want the camera device always produce higher frame rate than the display
refresh rate.</li>
</p>

@return an array of supported high speed video recording FPS ranges The upper bound of
        returned ranges is guaranteed to be larger or equal to 120.
@see #getHighSpeedVideoSizesFor
@see CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEO
@see CameraDevice#createConstrainedHighSpeedCaptureSession
@see CameraDevice#createHighSpeedRequestList
"
      end

      operation 79464247 "getHighSpeedVideoSizesFor"
	public return_type class_ref 6985911 // Size
	nparams 1
	  param inout name "fpsRange" type class_ref 7149879 // Range
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}<Integer> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the supported video sizes for an input high speed FPS range.

<p> See {@link #getHighSpeedVideoSizes} for how to enable high speed recording.</p>

@param fpsRange one of the FPS range returned by {@link #getHighSpeedVideoFpsRanges()}
@return An array of video sizes to create high speed capture sessions for high speed streaming
        use cases.

@throws IllegalArgumentException if input FPS range does not exist in the return value of
        getHighSpeedVideoFpsRanges
@see #getHighSpeedVideoFpsRanges()
"
      end

      operation 79464375 "getHighResolutionOutputSizes"
	public return_type class_ref 6985911 // Size
	nparams 1
	  param in name "format" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a list of supported high resolution sizes, which cannot operate at full BURST_CAPTURE
rate.

<p>This includes all output sizes that cannot meet the 20 fps frame rate requirements for the
{@link android.hardware.camera2.CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES_BURST_CAPTURE BURST_CAPTURE}
capability.  This does not include the stall duration, so for example, a JPEG or RAW16 output
resolution with a large stall duration but a minimum frame duration that's above 20 fps will
still be listed in the regular {@link #getOutputSizes} list. All the sizes on this list are
still guaranteed to operate at a rate of at least 10 fps, not including stall duration.</p>

<p>For a device that does not support the BURST_CAPTURE capability, this list will be
{@code null}, since resolutions in the {@link #getOutputSizes} list are already not
guaranteed to meet &gt;= 20 fps rate requirements. For a device that does support the
BURST_CAPTURE capability, this list may be empty, if all supported resolutions meet the 20
fps requirement.</p>

@return an array of supported slower high-resolution sizes, or {@code null} if the
        BURST_CAPTURE capability is not supported
"
      end

      operation 79464503 "getOutputMinFrameDuration"
	public explicit_return_type "long"
	nparams 2
	  param in name "format" explicit_type "int"
	  param inout name "size" type class_ref 6985911 // Size
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the minimum {@link CaptureRequest#SENSOR_FRAME_DURATION frame duration}
for the format/size combination (in nanoseconds).

<p>{@code format} should be one of the ones returned by {@link #getOutputFormats()}.</p>
<p>{@code size} should be one of the ones returned by
{@link #getOutputSizes(int)}.</p>

<p>This should correspond to the frame duration when only that stream is active, with all
processing (typically in {@code android.*.mode}) set to either {@code OFF} or {@code FAST}.
</p>

<p>When multiple streams are used in a request, the minimum frame duration will be
{@code max(individual stream min durations)}.</p>

<p>For devices that do not support manual sensor control
({@link android.hardware.camera2.CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSOR}),
this function may return 0.</p>

<!--
TODO: uncomment after adding input stream support
<p>The minimum frame duration of a stream (of a particular format, size) is the same
regardless of whether the stream is input or output.</p>
-->

@param format an image format from {@link ImageFormat} or {@link PixelFormat}
@param size an output-compatible size
@return a minimum frame duration {@code >} 0 in nanoseconds, or
         0 if the minimum frame duration is not available.

@throws IllegalArgumentException if {@code format} or {@code size} was not supported
@throws NullPointerException if {@code size} was {@code null}

@see CaptureRequest#SENSOR_FRAME_DURATION
@see #getOutputStallDuration(int, Size)
@see ImageFormat
@see PixelFormat
"
      end

      operation 79464631 "getOutputMinFrameDuration"
	public explicit_return_type "long"
	nparams 2
	  param in name "klass" explicit_type "Class"
	  param in name "size" type class_ref 6985911 // Size
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}final ${t0}<T> ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the minimum {@link CaptureRequest#SENSOR_FRAME_DURATION frame duration}
for the class/size combination (in nanoseconds).

<p>This assumes a the {@code klass} is set up to use {@link ImageFormat#PRIVATE}.
For user-defined formats, use {@link #getOutputMinFrameDuration(int, Size)}.</p>

<p>{@code klass} should be one of the ones which is supported by
{@link #isOutputSupportedFor(Class)}.</p>

<p>{@code size} should be one of the ones returned by
{@link #getOutputSizes(int)}.</p>

<p>This should correspond to the frame duration when only that stream is active, with all
processing (typically in {@code android.*.mode}) set to either {@code OFF} or {@code FAST}.
</p>

<p>When multiple streams are used in a request, the minimum frame duration will be
{@code max(individual stream min durations)}.</p>

<p>For devices that do not support manual sensor control
({@link android.hardware.camera2.CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSOR}),
this function may return 0.</p>

<!--
TODO: uncomment after adding input stream support
<p>The minimum frame duration of a stream (of a particular format, size) is the same
regardless of whether the stream is input or output.</p>
-->

@param klass
         a class which is supported by {@link #isOutputSupportedFor(Class)} and has a
         non-empty array returned by {@link #getOutputSizes(Class)}
@param size an output-compatible size
@return a minimum frame duration {@code >} 0 in nanoseconds, or
         0 if the minimum frame duration is not available.

@throws IllegalArgumentException if {@code klass} or {@code size} was not supported
@throws NullPointerException if {@code size} or {@code klass} was {@code null}

@see CaptureRequest#SENSOR_FRAME_DURATION
@see ImageFormat
@see PixelFormat
"
      end

      operation 79464759 "getOutputStallDuration"
	public explicit_return_type "long"
	nparams 2
	  param in name "format" explicit_type "int"
	  param inout name "size" type class_ref 6985911 // Size
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the stall duration for the format/size combination (in nanoseconds).

<p>{@code format} should be one of the ones returned by {@link #getOutputFormats()}.</p>
<p>{@code size} should be one of the ones returned by
{@link #getOutputSizes(int)}.</p>

<p>
A stall duration is how much extra time would get added to the normal minimum frame duration
for a repeating request that has streams with non-zero stall.

<p>For example, consider JPEG captures which have the following characteristics:

<ul>
<li>JPEG streams act like processed YUV streams in requests for which they are not included;
in requests in which they are directly referenced, they act as JPEG streams.
This is because supporting a JPEG stream requires the underlying YUV data to always be ready
for use by a JPEG encoder, but the encoder will only be used (and impact frame duration) on
requests that actually reference a JPEG stream.
<li>The JPEG processor can run concurrently to the rest of the camera pipeline, but cannot
process more than 1 capture at a time.
</ul>

<p>In other words, using a repeating YUV request would result in a steady frame rate
(let's say it's 30 FPS). If a single JPEG request is submitted periodically,
the frame rate will stay at 30 FPS (as long as we wait for the previous JPEG to return each
time). If we try to submit a repeating YUV + JPEG request, then the frame rate will drop from
30 FPS.</p>

<p>In general, submitting a new request with a non-0 stall time stream will <em>not</em> cause a
frame rate drop unless there are still outstanding buffers for that stream from previous
requests.</p>

<p>Submitting a repeating request with streams (call this {@code S}) is the same as setting
the minimum frame duration from the normal minimum frame duration corresponding to {@code S},
added with the maximum stall duration for {@code S}.</p>

<p>If interleaving requests with and without a stall duration, a request will stall by the
maximum of the remaining times for each can-stall stream with outstanding buffers.</p>

<p>This means that a stalling request will not have an exposure start until the stall has
completed.</p>

<p>This should correspond to the stall duration when only that stream is active, with all
processing (typically in {@code android.*.mode}) set to {@code FAST} or {@code OFF}.
Setting any of the processing modes to {@code HIGH_QUALITY} effectively results in an
indeterminate stall duration for all streams in a request (the regular stall calculation
rules are ignored).</p>

<p>The following formats may always have a stall duration:
<ul>
<li>{@link ImageFormat#JPEG JPEG}
<li>{@link ImageFormat#RAW_SENSOR RAW16}
<li>{@link ImageFormat#RAW_PRIVATE RAW_PRIVATE}
</ul>
</p>

<p>The following formats will never have a stall duration:
<ul>
<li>{@link ImageFormat#YUV_420_888 YUV_420_888}
<li>{@link #isOutputSupportedFor(Class) Implementation-Defined}
</ul></p>

<p>
All other formats may or may not have an allowed stall duration on a per-capability basis;
refer to {@link CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES
android.request.availableCapabilities} for more details.</p>
</p>

<p>See {@link CaptureRequest#SENSOR_FRAME_DURATION android.sensor.frameDuration}
for more information about calculating the max frame rate (absent stalls).</p>

@param format an image format from {@link ImageFormat} or {@link PixelFormat}
@param size an output-compatible size
@return a stall duration {@code >=} 0 in nanoseconds

@throws IllegalArgumentException if {@code format} or {@code size} was not supported
@throws NullPointerException if {@code size} was {@code null}

@see CaptureRequest#SENSOR_FRAME_DURATION
@see ImageFormat
@see PixelFormat
"
      end

      operation 79464887 "getOutputStallDuration"
	public explicit_return_type "long"
	nparams 2
	  param in name "klass" explicit_type "Class"
	  param in name "size" type class_ref 6985911 // Size
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}final ${t0}<T> ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the stall duration for the class/size combination (in nanoseconds).

<p>This assumes a the {@code klass} is set up to use {@link ImageFormat#PRIVATE}.
For user-defined formats, use {@link #getOutputMinFrameDuration(int, Size)}.</p>

<p>{@code klass} should be one of the ones with a non-empty array returned by
{@link #getOutputSizes(Class)}.</p>

<p>{@code size} should be one of the ones returned by
{@link #getOutputSizes(Class)}.</p>

<p>See {@link #getOutputStallDuration(int, Size)} for a definition of a
<em>stall duration</em>.</p>

@param klass
         a class which is supported by {@link #isOutputSupportedFor(Class)} and has a
         non-empty array returned by {@link #getOutputSizes(Class)}
@param size an output-compatible size
@return a minimum frame duration {@code >=} 0 in nanoseconds

@throws IllegalArgumentException if {@code klass} or {@code size} was not supported
@throws NullPointerException if {@code size} or {@code klass} was {@code null}

@see CaptureRequest#SENSOR_FRAME_DURATION
@see ImageFormat
@see PixelFormat
"
      end

      operation 79465015 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "obj" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Check if this {@link StreamConfigurationMap} is equal to another
{@link StreamConfigurationMap}.

<p>Two vectors are only equal if and only if each of the respective elements is equal.</p>

@return {@code true} if the objects were equal, {@code false} otherwise
"
      end

      operation 79465143 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 79465271 "checkArgumentFormatSupported"
	private explicit_return_type "int"
	nparams 2
	  param in name "format" explicit_type "int"
	  param inout name "output" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Check that the argument is supported by #getOutputFormats or #getInputFormats"
      end

      operation 79465399 "checkArgumentFormatInternal"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "format" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ensures that the format is either user-defined or implementation defined.

<p>If a format has a different internal representation than the public representation,
passing in the public representation here will fail.</p>

<p>For example if trying to use {@link ImageFormat#JPEG}:
it has a different public representation than the internal representation
{@code HAL_PIXEL_FORMAT_BLOB}, this check will fail.</p>

<p>Any invalid/undefined formats will raise an exception.</p>

@param format image format
@return the format

@throws IllegalArgumentException if the format was invalid
"
      end

      operation 79465527 "checkArgumentFormat"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "format" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ensures that the format is publicly user-defined in either ImageFormat or PixelFormat.

<p>If a format has a different public representation than the internal representation,
passing in the internal representation here will fail.</p>

<p>For example if trying to use {@code HAL_PIXEL_FORMAT_BLOB}:
it has a different internal representation than the public representation
{@link ImageFormat#JPEG}, this check will fail.</p>

<p>Any invalid/undefined formats will raise an exception, including implementation-defined.
</p>

<p>Note that {@code @hide} and deprecated formats will not pass this check.</p>

@param format image format
@return the format

@throws IllegalArgumentException if the format was not user-defined
"
      end

      operation 79465655 "imageFormatToPublic"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "format" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert an internal format compatible with {@code graphics.h} into public-visible
{@code ImageFormat}. This assumes the dataspace of the format is not HAL_DATASPACE_DEPTH.

<p>In particular these formats are converted:
<ul>
<li>HAL_PIXEL_FORMAT_BLOB => ImageFormat.JPEG</li>
</ul>
</p>

<p>Passing in a format which has no public equivalent will fail;
as will passing in a public format which has a different internal format equivalent.
See {@link #checkArgumentFormat} for more details about a legal public format.</p>

<p>All other formats are returned as-is, no further invalid check is performed.</p>

<p>This function is the dual of {@link #imageFormatToInternal} for dataspaces other than
HAL_DATASPACE_DEPTH.</p>

@param format image format from {@link ImageFormat} or {@link PixelFormat}
@return the converted image formats

@throws IllegalArgumentException
         if {@code format} is {@code HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED} or
         {@link ImageFormat#JPEG}

@see ImageFormat
@see PixelFormat
@see #checkArgumentFormat
"
      end

      operation 79465783 "depthFormatToPublic"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "format" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert an internal format compatible with {@code graphics.h} into public-visible
{@code ImageFormat}. This assumes the dataspace of the format is HAL_DATASPACE_DEPTH.

<p>In particular these formats are converted:
<ul>
<li>HAL_PIXEL_FORMAT_BLOB => ImageFormat.DEPTH_POINT_CLOUD
<li>HAL_PIXEL_FORMAT_Y16 => ImageFormat.DEPTH16
</ul>
</p>

<p>Passing in an implementation-defined format which has no public equivalent will fail;
as will passing in a public format which has a different internal format equivalent.
See {@link #checkArgumentFormat} for more details about a legal public format.</p>

<p>All other formats are returned as-is, no further invalid check is performed.</p>

<p>This function is the dual of {@link #imageFormatToInternal} for formats associated with
HAL_DATASPACE_DEPTH.</p>

@param format image format from {@link ImageFormat} or {@link PixelFormat}
@return the converted image formats

@throws IllegalArgumentException
         if {@code format} is {@code HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED} or
         {@link ImageFormat#JPEG}

@see ImageFormat
@see PixelFormat
@see #checkArgumentFormat
"
      end

      operation 79465911 "imageFormatToPublic"
	class_operation package explicit_return_type "int"
	nparams 1
	  param inout name "formats" explicit_type "int"
	multiplicity "[]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert image formats from internal to public formats (in-place).

@param formats an array of image formats
@return {@code formats}

@see #imageFormatToPublic
"
      end

      operation 79466039 "imageFormatToInternal"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "format" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert a public format compatible with {@code ImageFormat} to an internal format
from {@code graphics.h}.

<p>In particular these formats are converted:
<ul>
<li>ImageFormat.JPEG => HAL_PIXEL_FORMAT_BLOB
<li>ImageFormat.DEPTH_POINT_CLOUD => HAL_PIXEL_FORMAT_BLOB
<li>ImageFormat.DEPTH16 => HAL_PIXEL_FORMAT_Y16
</ul>
</p>

<p>Passing in an internal format which has a different public format equivalent will fail.
See {@link #checkArgumentFormat} for more details about a legal public format.</p>

<p>All other formats are returned as-is, no invalid check is performed.</p>

<p>This function is the dual of {@link #imageFormatToPublic}.</p>

@param format public image format from {@link ImageFormat} or {@link PixelFormat}
@return the converted image formats

@see ImageFormat
@see PixelFormat

@throws IllegalArgumentException
             if {@code format} was {@code HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED}
"
      end

      operation 79466167 "imageFormatToDataspace"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "format" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert a public format compatible with {@code ImageFormat} to an internal dataspace
from {@code graphics.h}.

<p>In particular these formats are converted:
<ul>
<li>ImageFormat.JPEG => HAL_DATASPACE_V0_JFIF
<li>ImageFormat.DEPTH_POINT_CLOUD => HAL_DATASPACE_DEPTH
<li>ImageFormat.DEPTH16 => HAL_DATASPACE_DEPTH
<li>others => HAL_DATASPACE_UNKNOWN
</ul>
</p>

<p>Passing in an implementation-defined format here will fail (it's not a public format);
as will passing in an internal format which has a different public format equivalent.
See {@link #checkArgumentFormat} for more details about a legal public format.</p>

<p>All other formats are returned as-is, no invalid check is performed.</p>

<p>This function is the dual of {@link #imageFormatToPublic}.</p>

@param format public image format from {@link ImageFormat} or {@link PixelFormat}
@return the converted image formats

@see ImageFormat
@see PixelFormat

@throws IllegalArgumentException
             if {@code format} was {@code HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED}
"
      end

      operation 79466295 "imageFormatToInternal"
	class_operation public explicit_return_type "int"
	nparams 1
	  param inout name "formats" explicit_type "int"
	multiplicity "[]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert image formats from public to internal formats (in-place).

@param formats an array of image formats
@return {@code formats}

@see #imageFormatToInternal

@hide
"
      end

      operation 79466423 "getPublicFormatSizes"
	private return_type class_ref 6985911 // Size
	nparams 3
	  param in name "format" explicit_type "int"
	  param inout name "output" explicit_type "boolean"
	  param inout name "highRes" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79466551 "getInternalFormatSizes"
	private return_type class_ref 6985911 // Size
	nparams 4
	  param in name "format" explicit_type "int"
	  param in name "dataspace" explicit_type "int"
	  param inout name "output" explicit_type "boolean"
	  param inout name "highRes" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79466679 "getPublicFormats"
	private explicit_return_type "int"
	nparams 1
	  param inout name "output" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Get the list of publically visible output formats; does not include IMPL_DEFINED "
      end

      operation 79466807 "getFormatsMap"
	private return_type class_ref 6940983 // SparseIntArray
	nparams 1
	  param inout name "output" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Get the format -> size count map for either output or input formats "
      end

      operation 79466935 "getInternalFormatDuration"
	private explicit_return_type "long"
	nparams 4
	  param in name "format" explicit_type "int"
	  param in name "dataspace" explicit_type "int"
	  param inout name "size" type class_ref 6985911 // Size
	  param in name "duration" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79467063 "getDurations"
	private return_type class_ref 7150519 // StreamConfigurationDuration
	nparams 2
	  param in name "duration" explicit_type "int"
	  param in name "dataspace" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the durations array for the kind of duration

@see #DURATION_MIN_FRAME
@see #DURATION_STALL
"
      end

      operation 79467191 "getPublicFormatCount"
	private explicit_return_type "int"
	nparams 1
	  param inout name "output" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Count the number of publicly-visible output formats "
      end

      operation 79467319 "arrayContains"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "array" explicit_type "T"
	multiplicity "[]"
	  param inout name "element" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79467447 "isSupportedInternalConfiguration"
	private explicit_return_type "boolean"
	nparams 3
	  param in name "format" explicit_type "int"
	  param in name "dataspace" explicit_type "int"
	  param inout name "size" type class_ref 6985911 // Size
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79467575 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Return this {@link StreamConfigurationMap} as a string representation.

<p>{@code \"StreamConfigurationMap(Outputs([w:%d, h:%d, format:%s(%d), min_duration:%d,
stall:%d], ... [w:%d, h:%d, format:%s(%d), min_duration:%d, stall:%d]), Inputs([w:%d, h:%d,
format:%s(%d)], ... [w:%d, h:%d, format:%s(%d)]), ValidOutputFormatsForInput(
[in:%d, out:%d, ... %d], ... [in:%d, out:%d, ... %d]), HighSpeedVideoConfigurations(
[w:%d, h:%d, min_fps:%d, max_fps:%d], ... [w:%d, h:%d, min_fps:%d, max_fps:%d]))\"}.</p>

<p>{@code Outputs([w:%d, h:%d, format:%s(%d), min_duration:%d, stall:%d], ...
[w:%d, h:%d, format:%s(%d), min_duration:%d, stall:%d])}, where
{@code [w:%d, h:%d, format:%s(%d), min_duration:%d, stall:%d]} represents an output
configuration's width, height, format, minimal frame duration in nanoseconds, and stall
duration in nanoseconds.</p>

<p>{@code Inputs([w:%d, h:%d, format:%s(%d)], ... [w:%d, h:%d, format:%s(%d)])}, where
{@code [w:%d, h:%d, format:%s(%d)]} represents an input configuration's width, height, and
format.</p>

<p>{@code ValidOutputFormatsForInput([in:%s(%d), out:%s(%d), ... %s(%d)],
... [in:%s(%d), out:%s(%d), ... %s(%d)])}, where {@code [in:%s(%d), out:%s(%d), ... %s(%d)]}
represents an input fomat and its valid output formats.</p>

<p>{@code HighSpeedVideoConfigurations([w:%d, h:%d, min_fps:%d, max_fps:%d],
... [w:%d, h:%d, min_fps:%d, max_fps:%d])}, where
{@code [w:%d, h:%d, min_fps:%d, max_fps:%d]} represents a high speed video output
configuration's width, height, minimal frame rate, and maximal frame rate.</p>

@return string representation of {@link StreamConfigurationMap}
"
      end

      operation 79467703 "appendOutputsString"
	private explicit_return_type "void"
	nparams 1
	  param inout name "sb" explicit_type "StringBuilder"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79467831 "appendHighResOutputsString"
	private explicit_return_type "void"
	nparams 1
	  param inout name "sb" explicit_type "StringBuilder"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79467959 "appendInputsString"
	private explicit_return_type "void"
	nparams 1
	  param inout name "sb" explicit_type "StringBuilder"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79468087 "appendValidOutputFormatsForInputString"
	private explicit_return_type "void"
	nparams 1
	  param inout name "sb" explicit_type "StringBuilder"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79468215 "appendHighSpeedVideoConfigurationsString"
	private explicit_return_type "void"
	nparams 1
	  param inout name "sb" explicit_type "StringBuilder"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79468343 "formatToString"
	private explicit_return_type "String"
	nparams 1
	  param in name "format" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 24851639 "HAL_PIXEL_FORMAT_RAW16"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x20"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " from system/core/include/system/graphics.h
"
      end

      attribute 24851767 "HAL_PIXEL_FORMAT_BLOB"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x21"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24851895 "HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x22"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24852023 "HAL_PIXEL_FORMAT_YCbCr_420_888"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x23"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24852151 "HAL_PIXEL_FORMAT_RAW_OPAQUE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x24"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24852279 "HAL_PIXEL_FORMAT_RAW10"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x25"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24852407 "HAL_PIXEL_FORMAT_RAW12"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x26"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24852535 "HAL_PIXEL_FORMAT_Y16"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x20363159"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24852663 "HAL_DATASPACE_STANDARD_SHIFT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 16"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24852791 "HAL_DATASPACE_TRANSFER_SHIFT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 22"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24852919 "HAL_DATASPACE_RANGE_SHIFT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 27"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24853047 "HAL_DATASPACE_UNKNOWN"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24853175 "HAL_DATASPACE_V0_JFIF"
	class_attribute const_attribute private explicit_type "int"
	init_value "
            (2 << HAL_DATASPACE_STANDARD_SHIFT) |
            (3 << HAL_DATASPACE_TRANSFER_SHIFT) |
            (1 << HAL_DATASPACE_RANGE_SHIFT)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24853303 "HAL_DATASPACE_DEPTH"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x1000"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24853431 "DURATION_20FPS_NS"
	class_attribute const_attribute private explicit_type "long"
	init_value " 50000000L"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24853559 "DURATION_MIN_FRAME"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@see #getDurations(int, int)

"
      end

      attribute 24853687 "DURATION_STALL"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 15727799 // mConfigurations (<unidirectional association>)
	relation 15727799 --->
	  a role_name "mConfigurations" multiplicity "[]" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 15727799 // mConfigurations (<unidirectional association>)
	  b parent class_ref 7150391 // StreamConfiguration
      end

      classrelation 15727927 // mMinFrameDurations (<unidirectional association>)
	relation 15727927 --->
	  a role_name "mMinFrameDurations" multiplicity "[]" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 15727927 // mMinFrameDurations (<unidirectional association>)
	  b parent class_ref 7150519 // StreamConfigurationDuration
      end

      classrelation 15728055 // mStallDurations (<unidirectional association>)
	relation 15728055 --->
	  a role_name "mStallDurations" multiplicity "[]" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 15728055 // mStallDurations (<unidirectional association>)
	  b parent class_ref 7150519 // StreamConfigurationDuration
      end

      classrelation 15728183 // mDepthConfigurations (<unidirectional association>)
	relation 15728183 --->
	  a role_name "mDepthConfigurations" multiplicity "[]" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 15728183 // mDepthConfigurations (<unidirectional association>)
	  b parent class_ref 7150391 // StreamConfiguration
      end

      classrelation 15728311 // mDepthMinFrameDurations (<unidirectional association>)
	relation 15728311 --->
	  a role_name "mDepthMinFrameDurations" multiplicity "[]" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 15728311 // mDepthMinFrameDurations (<unidirectional association>)
	  b parent class_ref 7150519 // StreamConfigurationDuration
      end

      classrelation 15728439 // mDepthStallDurations (<unidirectional association>)
	relation 15728439 --->
	  a role_name "mDepthStallDurations" multiplicity "[]" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 15728439 // mDepthStallDurations (<unidirectional association>)
	  b parent class_ref 7150519 // StreamConfigurationDuration
      end

      classrelation 15728567 // mHighSpeedVideoConfigurations (<unidirectional association>)
	relation 15728567 --->
	  a role_name "mHighSpeedVideoConfigurations" multiplicity "[]" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 15728567 // mHighSpeedVideoConfigurations (<unidirectional association>)
	  b parent class_ref 7150135 // HighSpeedVideoConfiguration
      end

      classrelation 15728695 // mInputOutputFormatsMap (<unidirectional association>)
	relation 15728695 --->
	  a role_name "mInputOutputFormatsMap" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15728695 // mInputOutputFormatsMap (<unidirectional association>)
	  b parent class_ref 7150263 // ReprocessFormatsMap
      end

      attribute 24853815 "mListHighResolution"
	const_attribute private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 15728823 // mOutputFormats (<unidirectional association>)
	relation 15728823 --->
	  a role_name "mOutputFormats" init_value " new SparseIntArray()" const_relation private
	    comment " internal format -> num output sizes mapping, not including slow high-res sizes, for
non-depth dataspaces 
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15728823 // mOutputFormats (<unidirectional association>)
	  b parent class_ref 6940983 // SparseIntArray
      end

      classrelation 15728951 // mHighResOutputFormats (<unidirectional association>)
	relation 15728951 --->
	  a role_name "mHighResOutputFormats" init_value " new SparseIntArray()" const_relation private
	    comment " internal format -> num output sizes mapping for slow high-res sizes, for non-depth
dataspaces 
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15728951 // mHighResOutputFormats (<unidirectional association>)
	  b parent class_ref 6940983 // SparseIntArray
      end

      classrelation 15729079 // mAllOutputFormats (<unidirectional association>)
	relation 15729079 --->
	  a role_name "mAllOutputFormats" init_value " new SparseIntArray()" const_relation private
	    comment " internal format -> num output sizes mapping for all non-depth dataspaces 
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15729079 // mAllOutputFormats (<unidirectional association>)
	  b parent class_ref 6940983 // SparseIntArray
      end

      classrelation 15729207 // mInputFormats (<unidirectional association>)
	relation 15729207 --->
	  a role_name "mInputFormats" init_value " new SparseIntArray()" const_relation private
	    comment " internal format -> num input sizes mapping, for input reprocessing formats 
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15729207 // mInputFormats (<unidirectional association>)
	  b parent class_ref 6940983 // SparseIntArray
      end

      classrelation 15729335 // mDepthOutputFormats (<unidirectional association>)
	relation 15729335 --->
	  a role_name "mDepthOutputFormats" init_value " new SparseIntArray()" const_relation private
	    comment " internal format -> num depth output sizes mapping, for HAL_DATASPACE_DEPTH 
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15729335 // mDepthOutputFormats (<unidirectional association>)
	  b parent class_ref 6940983 // SparseIntArray
      end

      classrelation 15729463 // mHighSpeedVideoSizeMap (<unidirectional association>)
	relation 15729463 --->
	  stereotype "HashMap"
	  a role_name "mHighSpeedVideoSizeMap" init_value "
            new HashMap<Size, Integer>()" const_relation private
	    comment " High speed video Size -> FPS range count mapping
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}</*HighSpeedVideoSize*/${type}, /*Count*/Integer> ${name}${value};
"
	    classrelation_ref 15729463 // mHighSpeedVideoSizeMap (<unidirectional association>)
	  b parent class_ref 6985911 // Size
      end

      classrelation 15729591 // mHighSpeedVideoFpsRangeMap (<unidirectional association>)
	relation 15729591 --->
	  stereotype "HashMap"
	  a role_name "mHighSpeedVideoFpsRangeMap" init_value " new HashMap<Range<Integer>, Integer>()" const_relation private
	    comment " High speed video FPS range -> Size count mapping
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}</*HighSpeedVideoFpsRange*/${type}<Integer>, /*Count*/Integer> ${name}${value};
"
	    classrelation_ref 15729591 // mHighSpeedVideoFpsRangeMap (<unidirectional association>)
	  b parent class_ref 7149879 // Range
      end
    end

    class 7150903 "ColorSpaceTransform"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Immutable class for describing a 3x3 matrix of {@link Rational} values in row-major order.

<p>This matrix maps a transform from one color space to another. For the particular color space
source and target, see the appropriate camera metadata documentation for the key that provides
this value.</p>

@see CameraMetadata
"
      attribute 24843575 "ROWS"
	class_attribute const_attribute private explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The number of rows in this matrix. 
"
      end

      attribute 24843703 "COLUMNS"
	class_attribute const_attribute private explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The number of columns in this matrix. 
"
      end

      attribute 24843831 "COUNT"
	class_attribute const_attribute private explicit_type "int"
	init_value " ROWS * COLUMNS"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The number of total Rational elements in this matrix. 
"
      end

      attribute 24843959 "RATIONAL_SIZE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Number of int elements in a rational. 
"
      end

      attribute 24844087 "OFFSET_NUMERATOR"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Numerator offset inside a rational (pair). 
"
      end

      attribute 24844215 "OFFSET_DENOMINATOR"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Denominator offset inside a rational (pair). 
"
      end

      attribute 24844343 "COUNT_INT"
	class_attribute const_attribute private explicit_type "int"
	init_value " ROWS * COLUMNS * RATIONAL_SIZE"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Number of int elements in this matrix. 
"
      end

      operation 79448759 "ColorSpaceTransform"
	public explicit_return_type ""
	nparams 1
	  param inout name "elements" type class_ref 7150007 // Rational
	multiplicity "[]"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new immutable {@link ColorSpaceTransform} instance from a {@link Rational} array.

<p>The elements must be stored in a row-major order.</p>

@param elements An array of {@code 9} elements

@throws IllegalArgumentException
           if the count of {@code elements} is not {@code 9}
@throws NullPointerException
           if {@code elements} or any sub-element is {@code null}
"
      end

      operation 79448887 "ColorSpaceTransform"
	public explicit_return_type ""
	nparams 1
	  param inout name "elements" explicit_type "int"
	multiplicity "[]"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new immutable {@link ColorSpaceTransform} instance from an {@code int} array.

<p>The elements must be stored in a row-major order. Each rational is stored
contiguously as a {@code (numerator, denominator)} pair.</p>

<p>In particular:<pre>{@code
int[] elements = new int[
    N11, D11, N12, D12, N13, D13,
    N21, D21, N22, D22, N23, D23,
    N31, D31, N32, D32, N33, D33
];

new ColorSpaceTransform(elements)}</pre>

where {@code Nij} and {@code Dij} is the numerator and denominator for row {@code i} and
column {@code j}.</p>

@param elements An array of {@code 18} elements

@throws IllegalArgumentException
           if the count of {@code elements} is not {@code 18}
@throws NullPointerException
           if {@code elements} is {@code null}
"
      end

      operation 79449015 "getElement"
	public return_type class_ref 7150007 // Rational
	nparams 2
	  param in name "column" explicit_type "int"
	  param in name "row" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get an element of this matrix by its row and column.

<p>The rows must be within the range [0, 3),
and the column must be within the range [0, 3).</p>

@return element (non-{@code null})

@throws IllegalArgumentException if column or row was out of range
"
      end

      operation 79449143 "copyElements"
	public explicit_return_type "void"
	nparams 2
	  param inout name "destination" type class_ref 7150007 // Rational
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copy the {@link Rational} elements in row-major order from this matrix into the destination.

@param destination
         an array big enough to hold at least {@code 9} elements after the
         {@code offset}
@param offset
         a non-negative offset into the array
@throws NullPointerException
         If {@code destination} was {@code null}
@throws ArrayIndexOutOfBoundsException
         If there's not enough room to write the elements at the specified destination and
         offset.
"
      end

      operation 79449271 "copyElements"
	public explicit_return_type "void"
	nparams 2
	  param inout name "destination" explicit_type "int"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copy the {@link Rational} elements in row-major order from this matrix into the destination.

<p>Each element is stored as a contiguous rational packed as a
{@code (numerator, denominator)} pair of ints, identical to the
{@link ColorSpaceTransform#ColorSpaceTransform(int[]) constructor}.</p>

@param destination
         an array big enough to hold at least {@code 18} elements after the
         {@code offset}
@param offset
         a non-negative offset into the array
@throws NullPointerException
         If {@code destination} was {@code null}
@throws ArrayIndexOutOfBoundsException
         If there's not enough room to write the elements at the specified destination and
         offset.

@see ColorSpaceTransform#ColorSpaceTransform(int[])
"
      end

      operation 79449399 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "obj" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Check if this {@link ColorSpaceTransform} is equal to another {@link ColorSpaceTransform}.

<p>Two color space transforms are equal if and only if all of their elements are
{@link Object#equals equal}.</p>

@return {@code true} if the objects were equal, {@code false} otherwise
"
      end

      operation 79449527 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 79449655 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Return the color space transform as a string representation.

 <p> Example:
{@code \"ColorSpaceTransform([1/1, 0/1, 0/1], [0/1, 1/1, 0/1], [0/1, 0/1, 1/1])\"} is an
identity transform. Elements are printed in row major order. </p>

@return string representation of color space transform
"
      end

      operation 79449783 "toShortString"
	private explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the color space transform as a compact string representation.

 <p> Example:
{@code \"([1/1, 0/1, 0/1], [0/1, 1/1, 0/1], [0/1, 0/1, 1/1])\"} is an identity transform.
Elements are printed in row major order. </p>

@return compact string representation of color space transform
"
      end

      attribute 24844471 "mElements"
	const_attribute private explicit_type "int"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 7151031 "BlackLevelPattern"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Immutable class to store a 4-element vector of integers corresponding to a 2x2 pattern
of color channel offsets used for the black level offsets of each color channel.
"
      attribute 24843319 "COUNT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of offsets in this vector.

"
      end

      operation 79447991 "BlackLevelPattern"
	public explicit_return_type ""
	nparams 1
	  param inout name "offsets" explicit_type "int"
	multiplicity "[]"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new {@link BlackLevelPattern} from a given offset array.

<p>The given offset array must contain offsets for each color channel in
a 2x2 pattern corresponding to the color filter arrangement.  Offsets are
given in row-column scan order.</p>

@param offsets an array containing a 2x2 pattern of offsets.

@throws IllegalArgumentException if the given array has an incorrect length.
@throws NullPointerException if the given array is null.
@hide
"
      end

      operation 79448119 "getOffsetForIndex"
	public explicit_return_type "int"
	nparams 2
	  param in name "column" explicit_type "int"
	  param in name "row" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the color channel offset for a given index into the array of raw pixel values.

@param column the column index in the the raw pixel array.
@param row the row index in the raw pixel array.
@return a color channel offset.

@throws IllegalArgumentException if a column or row given is negative.
"
      end

      operation 79448247 "copyTo"
	public explicit_return_type "void"
	nparams 2
	  param inout name "destination" explicit_type "int"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copy the ColorChannel offsets into the destination vector.

<p>Offsets are given in row-column scan order for a given 2x2 color pattern.</p>

@param destination an array big enough to hold at least {@value #COUNT} elements after the
         {@code offset}
@param offset a non-negative offset into the array

@throws IllegalArgumentException if the offset is invalid.
@throws ArrayIndexOutOfBoundsException if the destination vector is too small.
@throws NullPointerException if the destination is null.
"
      end

      operation 79448375 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Check if this {@link BlackLevelPattern} is equal to another {@link BlackLevelPattern}.

<p>Two vectors are only equal if and only if each of the respective elements is equal.</p>

@return {@code true} if the objects were equal, {@code false} otherwise
"
      end

      operation 79448503 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 79448631 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Return this {@link BlackLevelPattern} as a string representation.

<p> {@code \"BlackLevelPattern([%d, %d], [%d, %d])\"}, where each {@code %d} represents one
black level offset of a color channel. The values are in the same order as channels listed
for the CFA layout key (see
{@link android.hardware.camera2.CameraCharacteristics#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT}).
</p>

@return string representation of {@link BlackLevelPattern}

@see android.hardware.camera2.CameraCharacteristics#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT
"
      end

      attribute 24843447 "mCfaOffsets"
	const_attribute private explicit_type "int"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 7151415 "InputConfiguration"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Immutable class to store an input configuration that is used to create a reprocessable capture
session.

@see android.hardware.camera2.CameraDevice#createReprocessableCaptureSession
@see android.hardware.camera2.CameraCharacteristics#SCALER_STREAM_CONFIGURATION_MAP
"
      attribute 24846007 "mWidth"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24846135 "mHeight"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24846263 "mFormat"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 79452599 "InputConfiguration"
	public explicit_return_type ""
	nparams 3
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	  param in name "format" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an input configration with the width, height, and user-defined format.

<p>Images of an user-defined format are accessible by applications. Use
{@link android.hardware.camera2.CameraCharacteristics#SCALER_STREAM_CONFIGURATION_MAP}
to query supported input formats</p>

@param width Width of the input buffers.
@param height Height of the input buffers.
@param format Format of the input buffers. One of ImageFormat or PixelFormat constants.

@see android.graphics.ImageFormat
@see android.graphics.PixelFormat
@see android.hardware.camera2.CameraCharacteristics#SCALER_STREAM_CONFIGURATION_MAP
"
      end

      operation 79452727 "getWidth"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the width of this input configration.

@return width of this input configuration.
"
      end

      operation 79452855 "getHeight"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the height of this input configration.

@return height of this input configuration.
"
      end

      operation 79452983 "getFormat"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the format of this input configration.

@return format of this input configuration.
"
      end

      operation 79453111 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Check if this InputConfiguration is equal to another InputConfiguration.

<p>Two input configurations are equal if and only if they have the same widths, heights, and
formats.</p>

@param obj the object to compare this instance with.

@return {@code true} if the objects were equal, {@code false} otherwise.
"
      end

      operation 79453239 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 79453367 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Return this {@link InputConfiguration} as a string representation.

<p> {@code \"InputConfiguration(w:%d, h:%d, format:%d)\"}, where {@code %d} represents
the width, height, and format, respectively.</p>

@return string representation of {@link InputConfiguration}
"
      end
    end

    class 7152823 "RggbChannelVector"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Immutable class to store a 4-element vector of floats indexable by a bayer RAW 2x2 pixel block.
"
      attribute 24849463 "COUNT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of color channels in this vector.

"
      end

      attribute 24849591 "RED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Red color channel in a bayer Raw pattern. 
"
      end

      attribute 24849719 "GREEN_EVEN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Green color channel in a bayer Raw pattern used by the even rows. 
"
      end

      attribute 24849847 "GREEN_ODD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Green color channel in a bayer Raw pattern used by the odd rows. 
"
      end

      attribute 24849975 "BLUE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Blue color channel in a bayer Raw pattern. 
"
      end

      operation 79458999 "RggbChannelVector"
	public explicit_return_type ""
	nparams 4
	  param in name "red" explicit_type "float"
	  param in name "greenEven" explicit_type "float"
	  param in name "greenOdd" explicit_type "float"
	  param in name "blue" explicit_type "float"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}final ${t0} ${p0}, final ${t1} ${p1}, final ${t2} ${p2}, final ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new {@link RggbChannelVector} from an RGGB 2x2 pixel.

<p>All pixel values are considered normalized within {@code [0.0f, 1.0f]}
(i.e. {@code 1.0f} could be linearized to {@code 255} if converting to a
non-floating point pixel representation).</p>

<p>All arguments must be finite; NaN and infinity is not allowed.</p>

@param red red pixel
@param greenEven green pixel (even row)
@param greenOdd green pixel (odd row)
@param blue blue pixel

@throws IllegalArgumentException if any of the arguments were not finite
"
      end

      operation 79459127 "getRed"
	public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the red component.

@return a floating point value (guaranteed to be finite)
"
      end

      operation 79459255 "getGreenEven"
	public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the green (even rows) component.

@return a floating point value (guaranteed to be finite)
"
      end

      operation 79459383 "getGreenOdd"
	public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the green (odd rows) component.

@return a floating point value (guaranteed to be finite)
"
      end

      operation 79459511 "getBlue"
	public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the blue component.

@return a floating point value (guaranteed to be finite)
"
      end

      operation 79459639 "getComponent"
	public explicit_return_type "float"
	nparams 1
	  param in name "colorChannel" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the component by the color channel index.

<p>{@code colorChannel} must be one of {@link #RED}, {@link #GREEN_EVEN}, {@link #GREEN_ODD},
{@link #BLUE}.</p>

@param colorChannel greater or equal to {@code 0} and less than {@link #COUNT}
@return a floating point value (guaranteed to be finite)

@throws IllegalArgumentException if {@code colorChannel} was out of range
"
      end

      operation 79459767 "copyTo"
	public explicit_return_type "void"
	nparams 2
	  param in name "destination" explicit_type "float"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0}[] ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copy the vector into the destination in the order {@code [R, Geven, Godd, B]}.

@param destination
         an array big enough to hold at least {@value #COUNT} elements after the
         {@code offset}
@param offset
         a non-negative offset into the array

@throws NullPointerException
         If {@code destination} was {@code null}
@throws ArrayIndexOutOfBoundsException
         If there's not enough room to write the elements at the specified destination and
         offset.
"
      end

      operation 79459895 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "obj" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Check if this {@link RggbChannelVector} is equal to another {@link RggbChannelVector}.

<p>Two vectors are only equal if and only if each of the respective elements is equal.</p>

@return {@code true} if the objects were equal, {@code false} otherwise
"
      end

      operation 79460023 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 79460151 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Return the RggbChannelVector as a string representation.

<p> {@code \"RggbChannelVector{R:%f, G_even:%f, G_odd:%f, B:%f}\"}, where each
{@code %f} respectively represents one of the the four color channels. </p>

@return string representation of {@link RggbChannelVector}
"
      end

      operation 79460279 "toShortString"
	private explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the RggbChannelVector as a string in compact form.

<p> {@code \"{R:%f, G_even:%f, G_odd:%f, B:%f}\"}, where each {@code %f}
respectively represents one of the the four color channels. </p>

@return compact string representation of {@link RggbChannelVector}
"
      end

      attribute 24850103 "mRed"
	const_attribute private explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24850231 "mGreenEven"
	const_attribute private explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24850359 "mGreenOdd"
	const_attribute private explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24850487 "mBlue"
	const_attribute private explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 7152951 "MeteringRectangle"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An immutable class to represent a rectangle {@code (x, y, width, height)} with an additional
weight component.
<p>
The rectangle is defined to be inclusive of the specified coordinates.
</p>
<p>
When used with a {@link CaptureRequest}, the coordinate system is based on the active pixel
array, with {@code (0,0)} being the top-left pixel in the
{@link CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE active pixel array}, and
{@code (android.sensor.info.activeArraySize.width - 1,
android.sensor.info.activeArraySize.height - 1)} being the bottom-right pixel in the active pixel
array.
</p>
<p>
The weight must range from {@value #METERING_WEIGHT_MIN} to {@value #METERING_WEIGHT_MAX}
inclusively, and represents a weight for every pixel in the area. This means that a large
metering area with the same weight as a smaller area will have more effect in the metering
result. Metering areas can partially overlap and the camera device will add the weights in the
overlap rectangle.
</p>
<p>
If all rectangles have 0 weight, then no specific metering area needs to be used by the camera
device. If the metering rectangle is outside the used android.scaler.cropRegion returned in
capture result metadata, the camera device will ignore the sections outside the rectangle and
output the used sections in the result metadata.
</p>
"
      attribute 24846903 "METERING_WEIGHT_MIN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The minimum value of valid metering weight.

"
      end

      attribute 24847031 "METERING_WEIGHT_MAX"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1000"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The maximum value of valid metering weight.

"
      end

      attribute 24847159 "METERING_WEIGHT_DONT_CARE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Weights set to this value will cause the camera device to ignore this rectangle.
If all metering rectangles are weighed with 0, the camera device will choose its own metering
rectangles.

"
      end

      attribute 24847287 "mX"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24847415 "mY"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24847543 "mWidth"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24847671 "mHeight"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24847799 "mWeight"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 79454775 "MeteringRectangle"
	public explicit_return_type ""
	nparams 5
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	  param in name "meteringWeight" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new metering rectangle.

@param x coordinate >= 0
@param y coordinate >= 0
@param width width >= 0
@param height height >= 0
@param meteringWeight weight between {@value #METERING_WEIGHT_MIN} and
       {@value #METERING_WEIGHT_MAX} inclusively
@throws IllegalArgumentException if any of the parameters were negative
"
      end

      operation 79454903 "MeteringRectangle"
	public explicit_return_type ""
	nparams 3
	  param inout name "xy" type class_ref 5783351 // Point
	  param inout name "dimensions" type class_ref 6985911 // Size
	  param in name "meteringWeight" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new metering rectangle.

<p>The point {@code xy}'s data is copied; the reference is not retained.</p>

@param xy a non-{@code null} {@link Point} with both x,y >= 0
@param dimensions a non-{@code null} {@link android.util.Size Size} with width, height >= 0
@param meteringWeight weight >= 0

@throws IllegalArgumentException if any of the parameters were negative
@throws NullPointerException if any of the arguments were null
"
      end

      operation 79455031 "MeteringRectangle"
	public explicit_return_type ""
	nparams 2
	  param inout name "rect" type class_ref 5772599 // Rect
	  param in name "meteringWeight" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new metering rectangle.

<p>The rectangle data is copied; the reference is not retained.</p>

@param rect a non-{@code null} rectangle with all x,y,w,h dimensions >= 0
@param meteringWeight weight >= 0

@throws IllegalArgumentException if any of the parameters were negative
@throws NullPointerException if any of the arguments were null
"
      end

      operation 79455159 "getX"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the X coordinate of the left side of the rectangle.

@return x coordinate >= 0
"
      end

      operation 79455287 "getY"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the Y coordinate of the upper side of the rectangle.

@return y coordinate >= 0
"
      end

      operation 79455415 "getWidth"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the width of the rectangle.

@return width >= 0
"
      end

      operation 79455543 "getHeight"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the height of the rectangle.

@return height >= 0
"
      end

      operation 79455671 "getMeteringWeight"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the metering weight of the rectangle.

@return weight >= 0
"
      end

      operation 79455799 "getUpperLeftPoint"
	public return_type class_ref 5783351 // Point
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method to create the upper-left (X,Y) coordinate as a {@link Point}.

@return a new {@code (x,y)} {@link Point} with both x,y >= 0
"
      end

      operation 79455927 "getSize"
	public return_type class_ref 6985911 // Size
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method to create the size from this metering rectangle.

<p>This strips away the X,Y,weight from the rectangle.</p>

@return a new {@link Size} with non-negative width and height
"
      end

      operation 79456055 "getRect"
	public return_type class_ref 5772599 // Rect
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method to create a {@link Rect} from this metering rectangle.

<p>This strips away the weight from the rectangle.</p>

@return a new {@link Rect} with non-negative x1, y1, x2, y2
"
      end

      operation 79456183 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "other" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 79456311 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "other" type class_ref 7152951 // MeteringRectangle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compare two metering rectangles to see if they are equal.

Two weighted rectangles are only considered equal if each of their components
(x, y, width, height, weight) is respectively equal.

@param other Another MeteringRectangle

@return {@code true} if the metering rectangles are equal, {@code false} otherwise
"
      end

      operation 79456439 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 79456567 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Return the metering rectangle as a string representation
{@code \"(x:%d, y:%d, w:%d, h:%d, wt:%d)\"} where each {@code %d} respectively represents
the x, y, width, height, and weight points.

@return string representation of the metering rectangle
"
      end
    end

    class 7153079 "TonemapCurve"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Immutable class for describing a {@code 2 x M x 3} tonemap curve of floats.

<p>This defines red, green, and blue curves that the {@link CameraDevice} will
use as the tonemapping/contrast/gamma curve when {@link CaptureRequest#TONEMAP_MODE} is
set to {@link CameraMetadata#TONEMAP_MODE_CONTRAST_CURVE}.</p>

<p>The total number of points {@code (Pin, Pout)} for each color channel can be no more than
{@link CameraCharacteristics#TONEMAP_MAX_CURVE_POINTS}.</p>

<p>The coordinate system for each point is within the inclusive range
[{@value #LEVEL_BLACK}, {@value #LEVEL_WHITE}].</p>

@see CaptureRequest#TONEMAP_CURVE_BLUE
@see CaptureRequest#TONEMAP_CURVE_GREEN
@see CaptureRequest#TONEMAP_CURVE_RED
@see CameraMetadata#TONEMAP_MODE_CONTRAST_CURVE
@see CameraCharacteristics#TONEMAP_MAX_CURVE_POINTS
"
      attribute 24853943 "LEVEL_BLACK"
	class_attribute const_attribute public explicit_type "float"
	init_value " 0.0f"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Lower bound tonemap value corresponding to pure black for a single color channel.

"
      end

      attribute 24854071 "LEVEL_WHITE"
	class_attribute const_attribute public explicit_type "float"
	init_value " 1.0f"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Upper bound tonemap value corresponding to a pure white for a single color channel.

"
      end

      attribute 24854199 "POINT_SIZE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Number of elements in a {@code (Pin, Pout)} point;

"
      end

      attribute 24854327 "CHANNEL_RED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Index of the red color channel curve.

"
      end

      attribute 24854455 "CHANNEL_GREEN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Index of the green color channel curve.

"
      end

      attribute 24854583 "CHANNEL_BLUE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Index of the blue color channel curve.

"
      end

      operation 79468471 "TonemapCurve"
	public explicit_return_type ""
	nparams 3
	  param inout name "red" explicit_type "float"
	multiplicity "[]"
	  param inout name "green" explicit_type "float"
	multiplicity "[]"
	  param inout name "blue" explicit_type "float"
	multiplicity "[]"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new immutable TonemapCurve instance.

<p>Values are stored as a contiguous array of {@code (Pin, Pout)} points.</p>

<p>All parameters may have independent length but should have at most
{@link CameraCharacteristics#TONEMAP_MAX_CURVE_POINTS} * {@value #POINT_SIZE} elements and
at least 2 * {@value #POINT_SIZE} elements.</p>

<p>All sub-elements must be in the inclusive range of
[{@value #LEVEL_BLACK}, {@value #LEVEL_WHITE}].</p>

<p>This constructor copies the array contents and does not retain ownership of the array.</p>

@param red An array of elements whose length is divisible by {@value #POINT_SIZE}
@param green An array of elements whose length is divisible by {@value #POINT_SIZE}
@param blue An array of elements whose length is divisible by {@value #POINT_SIZE}

@throws IllegalArgumentException
           if any of input array length is invalid,
           or if any of the elements in the array are not in the range of
           [{@value #LEVEL_BLACK}, {@value #LEVEL_WHITE}]
@throws NullPointerException
           if any of the parameters are {@code null}
"
      end

      operation 79468599 "checkArgumentArrayLengthDivisibleBy"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "array" explicit_type "float"
	multiplicity "[]"
	  param in name "divisible" explicit_type "int"
	  param inout name "arrayName" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79468727 "checkArgumentColorChannel"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "colorChannel" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79468855 "checkArgumentArrayLengthNoLessThan"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "array" explicit_type "float"
	multiplicity "[]"
	  param in name "minLength" explicit_type "int"
	  param inout name "arrayName" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79468983 "getPointCount"
	public explicit_return_type "int"
	nparams 1
	  param in name "colorChannel" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the number of points stored in this tonemap curve for the specified color channel.

@param colorChannel one of {@link #CHANNEL_RED}, {@link #CHANNEL_GREEN}, {@link #CHANNEL_BLUE}
@return number of points stored in this tonemap for that color's curve (>= 0)

@throws IllegalArgumentException if {@code colorChannel} was out of range
"
      end

      operation 79469111 "getPoint"
	public return_type class_ref 6018615 // PointF
	nparams 2
	  param in name "colorChannel" explicit_type "int"
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the point for a color channel at a specified index.

<p>The index must be at least 0 but no greater than {@link #getPointCount(int)} for
that {@code colorChannel}.</p>

<p>All returned coordinates in the point are between the range of
[{@value #LEVEL_BLACK}, {@value #LEVEL_WHITE}].</p>

@param colorChannel {@link #CHANNEL_RED}, {@link #CHANNEL_GREEN}, or {@link #CHANNEL_BLUE}
@param index at least 0 but no greater than {@code getPointCount(colorChannel)}
@return the {@code (Pin, Pout)} pair mapping the tone for that index

@throws IllegalArgumentException if {@code colorChannel} or {@code index} was out of range

@see #LEVEL_BLACK
@see #LEVEL_WHITE
"
      end

      operation 79469239 "copyColorCurve"
	public explicit_return_type "void"
	nparams 3
	  param in name "colorChannel" explicit_type "int"
	  param inout name "destination" explicit_type "float"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copy the color curve for a single color channel from this tonemap curve into the destination.

<p>
<!--The output is encoded the same as in the constructor -->
Values are stored as packed {@code (Pin, Pout}) points, and there are a total of
{@link #getPointCount} points for that respective channel.</p>

<p>All returned coordinates are between the range of
[{@value #LEVEL_BLACK}, {@value #LEVEL_WHITE}].</p>

@param destination
         an array big enough to hold at least {@link #getPointCount} {@code *}
         {@link #POINT_SIZE} elements after the {@code offset}
@param offset
         a non-negative offset into the array
@throws NullPointerException
         If {@code destination} was {@code null}
@throws IllegalArgumentException
         If offset was negative
@throws ArrayIndexOutOfBoundsException
         If there's not enough room to write the elements at the specified destination and
         offset.

@see CaptureRequest#TONEMAP_CURVE_BLUE
@see CaptureRequest#TONEMAP_CURVE_RED
@see CaptureRequest#TONEMAP_CURVE_GREEN
@see #LEVEL_BLACK
@see #LEVEL_WHITE
"
      end

      operation 79469367 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Check if this TonemapCurve is equal to another TonemapCurve.

<p>Two matrices are equal if and only if all of their elements are
{@link Object#equals equal}.</p>

@return {@code true} if the objects were equal, {@code false} otherwise
"
      end

      operation 79469495 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 79469623 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Return the TonemapCurve as a string representation.

<p> {@code \"TonemapCurve{R:[(%f, %f), (%f, %f) ... (%f, %f)], G:[(%f, %f), (%f, %f) ...
(%f, %f)], B:[(%f, %f), (%f, %f) ... (%f, %f)]}\"},
where each {@code (%f, %f)} respectively represents one point of the corresponding
tonemap curve. </p>

@return string representation of {@link TonemapCurve}
"
      end

      operation 79469751 "curveToString"
	private explicit_return_type "String"
	nparams 1
	  param in name "colorChannel" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79469879 "getCurve"
	private explicit_return_type "float"
	nparams 1
	  param in name "colorChannel" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 24854711 "OFFSET_POINT_IN"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24854839 "OFFSET_POINT_OUT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24854967 "TONEMAP_MIN_CURVE_POINTS"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24855095 "MIN_CURVE_LENGTH"
	class_attribute const_attribute private explicit_type "int"
	init_value " TONEMAP_MIN_CURVE_POINTS * POINT_SIZE"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24855223 "mRed"
	const_attribute private explicit_type "float"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24855351 "mGreen"
	const_attribute private explicit_type "float"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24855479 "mBlue"
	const_attribute private explicit_type "float"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24855607 "mHashCode"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24855735 "mHashCalculated"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 7153335 "Face"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Describes a face detected in an image.
"
      attribute 24844599 "ID_UNSUPPORTED"
	class_attribute const_attribute public explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The ID is {@code -1} when the optional set of fields is unsupported.

@see Face#Face(Rect, int)
@see #getId()

"
      end

      attribute 24844727 "SCORE_MIN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The minimum possible value for the confidence level.

@see #getScore()

"
      end

      attribute 24844855 "SCORE_MAX"
	class_attribute const_attribute public explicit_type "int"
	init_value " 100"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The maximum possible value for the confidence level.

@see #getScore()

"
      end

      classrelation 15726263 // mBounds (<unidirectional association>)
	relation 15726263 --->
	  a role_name "mBounds" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15726263 // mBounds (<unidirectional association>)
	  b parent class_ref 5772599 // Rect
      end

      attribute 24844983 "mScore"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24845111 "mId"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 15726391 // mLeftEye (<unidirectional association>)
	relation 15726391 --->
	  a role_name "mLeftEye" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15726391 // mLeftEye (<unidirectional association>)
	  b parent class_ref 5783351 // Point
      end

      classrelation 15726519 // mRightEye (<unidirectional association>)
	relation 15726519 --->
	  a role_name "mRightEye" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15726519 // mRightEye (<unidirectional association>)
	  b parent class_ref 5783351 // Point
      end

      classrelation 15726647 // mMouth (<unidirectional association>)
	relation 15726647 --->
	  a role_name "mMouth" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15726647 // mMouth (<unidirectional association>)
	  b parent class_ref 5783351 // Point
      end

      operation 79449911 "Face"
	public explicit_return_type ""
	nparams 6
	  param inout name "bounds" type class_ref 5772599 // Rect
	  param in name "score" explicit_type "int"
	  param in name "id" explicit_type "int"
	  param inout name "leftEyePosition" type class_ref 5783351 // Point
	  param inout name "rightEyePosition" type class_ref 5783351 // Point
	  param inout name "mouthPosition" type class_ref 5783351 // Point
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new face with all fields set.

<p>The id, leftEyePosition, rightEyePosition, and mouthPosition are considered optional.
They are only required when the {@link CaptureResult} reports that the value of key
{@link CaptureResult#STATISTICS_FACE_DETECT_MODE} is
{@link CameraMetadata#STATISTICS_FACE_DETECT_MODE_FULL}.
If the id is {@value #ID_UNSUPPORTED} then the leftEyePosition, rightEyePosition, and
mouthPositions are guaranteed to be {@code null}. Otherwise, each of leftEyePosition,
rightEyePosition, and mouthPosition may be independently null or not-null.</p>

@param bounds Bounds of the face.
@param score Confidence level between {@value #SCORE_MIN}-{@value #SCORE_MAX}.
@param id A unique ID per face visible to the tracker.
@param leftEyePosition The position of the left eye.
@param rightEyePosition The position of the right eye.
@param mouthPosition The position of the mouth.

@throws IllegalArgumentException
            if bounds is {@code null},
            or if the confidence is not in the range of
            {@value #SCORE_MIN}-{@value #SCORE_MAX},
            or if id is {@value #ID_UNSUPPORTED} and
              leftEyePosition/rightEyePosition/mouthPosition aren't all null,
            or else if id is negative.

@hide
"
      end

      operation 79450039 "Face"
	public explicit_return_type ""
	nparams 2
	  param inout name "bounds" type class_ref 5772599 // Rect
	  param in name "score" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new face without the optional fields.

<p>The id, leftEyePosition, rightEyePosition, and mouthPosition are considered optional.
If the id is {@value #ID_UNSUPPORTED} then the leftEyePosition, rightEyePosition, and
mouthPositions are guaranteed to be {@code null}. Otherwise, each of leftEyePosition,
rightEyePosition, and mouthPosition may be independently null or not-null. When devices
report the value of key {@link CaptureResult#STATISTICS_FACE_DETECT_MODE} as
{@link CameraMetadata#STATISTICS_FACE_DETECT_MODE_SIMPLE} in {@link CaptureResult},
the face id of each face is expected to be {@value #ID_UNSUPPORTED}, the leftEyePosition,
rightEyePosition, and mouthPositions are expected to be {@code null} for each face.</p>

@param bounds Bounds of the face.
@param score Confidence level between {@value #SCORE_MIN}-{@value #SCORE_MAX}.

@throws IllegalArgumentException
            if bounds is {@code null},
            or if the confidence is not in the range of
            {@value #SCORE_MIN}-{@value #SCORE_MAX}.

@hide
"
      end

      operation 79450167 "getBounds"
	public return_type class_ref 5772599 // Rect
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Bounds of the face.

<p>A rectangle relative to the sensor's
{@link CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE}, with (0,0)
representing the top-left corner of the active array rectangle.</p>

<p>There is no constraints on the the Rectangle value other than it
is not-{@code null}.</p>
"
      end

      operation 79450295 "getScore"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The confidence level for the detection of the face.

<p>The range is {@value #SCORE_MIN} to {@value #SCORE_MAX}.
{@value #SCORE_MAX} is the highest confidence.</p>

<p>Depending on the device, even very low-confidence faces may be
listed, so applications should filter out faces with low confidence,
depending on the use case. For a typical point-and-shoot camera
application that wishes to display rectangles around detected faces,
filtering out faces with confidence less than half of {@value #SCORE_MAX}
is recommended.</p>

@see #SCORE_MAX
@see #SCORE_MIN
"
      end

      operation 79450423 "getId"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "An unique id per face while the face is visible to the tracker.

<p>
If the face leaves the field-of-view and comes back, it will get a new
id.</p>

<p>This is an optional field, may not be supported on all devices.
If the id is {@value #ID_UNSUPPORTED} then the leftEyePosition, rightEyePosition, and
mouthPositions are guaranteed to be {@code null}. Otherwise, each of leftEyePosition,
rightEyePosition, and mouthPosition may be independently null or not-null. When devices
report the value of key {@link CaptureResult#STATISTICS_FACE_DETECT_MODE} as
{@link CameraMetadata#STATISTICS_FACE_DETECT_MODE_SIMPLE} in {@link CaptureResult},
the face id of each face is expected to be {@value #ID_UNSUPPORTED}.</p>

<p>This value will either be {@value #ID_UNSUPPORTED} or
otherwise greater than {@code 0}.</p>

@see #ID_UNSUPPORTED
"
      end

      operation 79450551 "getLeftEyePosition"
	public return_type class_ref 5783351 // Point
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The coordinates of the center of the left eye.

<p>The coordinates are in
the same space as the ones for {@link #getBounds}. This is an
optional field, may not be supported on all devices. If not
supported, the value will always be set to null.
This value will  always be null only if {@link #getId()} returns
{@value #ID_UNSUPPORTED}.</p>

@return The left eye position, or {@code null} if unknown.
"
      end

      operation 79450679 "getRightEyePosition"
	public return_type class_ref 5783351 // Point
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The coordinates of the center of the right eye.

<p>The coordinates are
in the same space as the ones for {@link #getBounds}.This is an
optional field, may not be supported on all devices. If not
supported, the value will always be set to null.
This value will  always be null only if {@link #getId()} returns
{@value #ID_UNSUPPORTED}.</p>

@return The right eye position, or {@code null} if unknown.
"
      end

      operation 79450807 "getMouthPosition"
	public return_type class_ref 5783351 // Point
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The coordinates of the center of the mouth.

<p>The coordinates are in
the same space as the ones for {@link #getBounds}. This is an optional
field, may not be supported on all devices. If not
supported, the value will always be set to null.
This value will  always be null only if {@link #getId()} returns
{@value #ID_UNSUPPORTED}.</p>
</p>

@return The mouth position, or {@code null} if unknown.
"
      end

      operation 79450935 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Represent the Face as a string for debugging purposes.
"
      end

      operation 79451063 "checkNotNull"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "name" explicit_type "String"
	  param inout name "obj" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 79451191 "checkNull"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "name" explicit_type "String"
	  param inout name "obj" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 7153463 "LensShadingMap"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Immutable class for describing a {@code 4 x N x M} lens shading map of floats.

@see CaptureResult#STATISTICS_LENS_SHADING_CORRECTION_MAP
"
      attribute 24846391 "MINIMUM_GAIN_FACTOR"
	class_attribute const_attribute public explicit_type "float"
	init_value " 1.0f"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The smallest gain factor in this map.

<p>All values in this map will be at least this large.</p>

"
      end

      operation 79453495 "LensShadingMap"
	public explicit_return_type ""
	nparams 3
	  param in name "elements" explicit_type "float"
	multiplicity "[]"
	  param in name "rows" explicit_type "int"
	  param in name "columns" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}final ${t0}[] ${p0}, final ${t1} ${p1}, final ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new immutable LensShadingMap instance.

<p>The elements must be stored in a row-major order (fully packed).</p>

<p>This constructor takes over the array; do not write to the array afterwards.</p>

@param elements
         An array of elements whose length is
         {@code RggbChannelVector.COUNT * rows * columns}

@throws IllegalArgumentException
           if the {@code elements} array length is invalid,
           if any of the subelems are not finite or less than {@value #MINIMUM_GAIN_FACTOR},
           or if rows or columns is not positive
@throws NullPointerException
           if {@code elements} is {@code null}

@hide
"
      end

      operation 79453623 "getRowCount"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the number of rows in this map.
"
      end

      operation 79453751 "getColumnCount"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the number of columns in this map.
"
      end

      operation 79453879 "getGainFactorCount"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the total number of gain factors in this map.

<p>A single gain factor contains exactly one color channel.
Use with {@link #copyGainFactors} to allocate a large-enough array.</p>
"
      end

      operation 79454007 "getGainFactor"
	public explicit_return_type "float"
	nparams 3
	  param in name "colorChannel" explicit_type "int"
	  param in name "column" explicit_type "int"
	  param in name "row" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}, final ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a single color channel gain factor from this lens shading map by its row and column.

<p>The rows must be within the range [0, {@link #getRowCount}),
the column must be within the range [0, {@link #getColumnCount}),
and the color channel must be within the range [0, {@value RggbChannelVector#COUNT}).</p>

<p>The channel order is {@code [R, Geven, Godd, B]}, where
{@code Geven} is the green channel for the even rows of a Bayer pattern, and
{@code Godd} is the odd rows.
</p>

@param colorChannel color channel from {@code [R, Geven, Godd, B]}
@param column within the range [0, {@link #getColumnCount})
@param row within the range [0, {@link #getRowCount})

@return a gain factor >= {@value #MINIMUM_GAIN_FACTOR}

@throws IllegalArgumentException if any of the parameters was out of range

@see #RED
@see #GREEN_EVEN
@see #GREEN_ODD
@see #BLUE
@see #getRowCount
@see #getColumnCount
"
      end

      operation 79454135 "getGainFactorVector"
	public return_type class_ref 7152823 // RggbChannelVector
	nparams 2
	  param in name "column" explicit_type "int"
	  param in name "row" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a gain factor vector from this lens shading map by its row and column.

<p>The rows must be within the range [0, {@link #getRowCount}),
the column must be within the range [0, {@link #getColumnCount}).</p>

@param column within the range [0, {@link #getColumnCount})
@param row within the range [0, {@link #getRowCount})

@return an {@link RggbChannelVector} where each gain factor >= {@value #MINIMUM_GAIN_FACTOR}

@throws IllegalArgumentException if any of the parameters was out of range

@see #getRowCount
@see #getColumnCount
"
      end

      operation 79454263 "copyGainFactors"
	public explicit_return_type "void"
	nparams 2
	  param in name "destination" explicit_type "float"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0}[] ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copy all gain factors in row-major order from this lens shading map into the destination.

<p>Each gain factor will be >= {@link #MINIMUM_GAIN_FACTOR}.</p>

@param destination
         an array big enough to hold at least {@link RggbChannelVector#COUNT}
         elements after the {@code offset}
@param offset
         a non-negative offset into the array
@throws NullPointerException
         If {@code destination} was {@code null}
@throws IllegalArgumentException
         If offset was negative
@throws ArrayIndexOutOfBoundsException
         If there's not enough room to write the elements at the specified destination and
         offset.

@see CaptureResult#STATISTICS_LENS_SHADING_MAP
"
      end

      operation 79454391 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "obj" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Check if this LensShadingMap is equal to another LensShadingMap.

<p>Two lens shading maps are equal if and only if they have the same rows/columns,
and all of their elements are {@link Object#equals equal}.</p>

@return {@code true} if the objects were equal, {@code false} otherwise
"
      end

      operation 79454519 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 79454647 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Return the LensShadingMap as a string representation.

<p> {@code \"LensShadingMap{R:([%f, %f, ... %f], ... [%f, %f, ... %f]), G_even:([%f, %f, ...
 %f], ... [%f, %f, ... %f]), G_odd:([%f, %f, ... %f], ... [%f, %f, ... %f]), B:([%f, %f, ...
 %f], ... [%f, %f, ... %f])}\"},
where each {@code %f} represents one gain factor and each {@code [%f, %f, ... %f]} represents
a row of the lens shading map</p>

@return string representation of {@link LensShadingMap}
"
      end

      attribute 24846519 "mRows"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24846647 "mColumns"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24846775 "mElements"
	const_attribute private explicit_type "float"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 7155639 "OutputConfiguration"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A class for describing camera output, which contains a {@link Surface} and its specific
configuration for creating capture session.

@see CameraDevice#createCaptureSessionByOutputConfiguration

"
      classrelation 15727031 // <realization>
	relation 15727031 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15727031 // <realization>
	  b parent class_ref 6932663 // Parcelable
      end

      attribute 24847927 "ROTATION_0"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@SystemApi
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Rotation constant: 0 degree rotation (no rotation)

@hide

"
      end

      attribute 24848055 "ROTATION_90"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@SystemApi
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Rotation constant: 90 degree counterclockwise rotation.

@hide

"
      end

      attribute 24848183 "ROTATION_180"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@SystemApi
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Rotation constant: 180 degree counterclockwise rotation.

@hide

"
      end

      attribute 24848311 "ROTATION_270"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@SystemApi
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Rotation constant: 270 degree counterclockwise rotation.

@hide

"
      end

      attribute 24848439 "SURFACE_GROUP_ID_NONE"
	class_attribute const_attribute public explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Invalid surface group ID.

<p>An {@link OutputConfiguration} with this value indicates that the included surface
doesn't belong to any surface group.</p>

"
      end

      operation 79456695 "OutputConfiguration"
	public explicit_return_type ""
	nparams 1
	  param inout name "surface" type class_ref 6952247 // Surface
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new {@link OutputConfiguration} instance with a {@link Surface}.

@param surface
         A Surface for camera to output to.

<p>This constructor creates a default configuration, with a surface group ID of
{@value #SURFACE_GROUP_ID_NONE}.</p>

"
      end

      operation 79456823 "OutputConfiguration"
	public explicit_return_type ""
	nparams 2
	  param in name "surfaceGroupId" explicit_type "int"
	  param inout name "surface" type class_ref 6952247 // Surface
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, @NonNull ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new {@link OutputConfiguration} instance with a {@link Surface},
with a surface group ID.

<p>
A surface group ID is used to identify which surface group this output surface belongs to. A
surface group is a group of output surfaces that are not intended to receive camera output
buffer streams simultaneously. The {@link CameraDevice} may be able to share the buffers used
by all the surfaces from the same surface group, therefore may reduce the overall memory
footprint. The application should only set the same set ID for the streams that are not
simultaneously streaming. A negative ID indicates that this surface doesn't belong to any
surface group. The default value is {@value #SURFACE_GROUP_ID_NONE}.</p>

<p>For example, a video chat application that has an adaptive output resolution feature would
need two (or more) output resolutions, to switch resolutions without any output glitches.
However, at any given time, only one output is active to minimize outgoing network bandwidth
and encoding overhead.  To save memory, the application should set the video outputs to have
the same non-negative group ID, so that the camera device can share the same memory region
for the alternating outputs.</p>

<p>It is not an error to include output streams with the same group ID in the same capture
request, but the resulting memory consumption may be higher than if the two streams were
not in the same surface group to begin with, especially if the outputs have substantially
different dimensions.</p>

@param surfaceGroupId
         A group ID for this output, used for sharing memory between multiple outputs.
@param surface
         A Surface for camera to output to.

"
      end

      operation 79456951 "OutputConfiguration"
	public explicit_return_type ""
	nparams 2
	  param inout name "surface" type class_ref 6952247 // Surface
	  param in name "rotation" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SystemApi
"
	
	
	
	comment "Create a new {@link OutputConfiguration} instance.

<p>This constructor takes an argument for desired camera rotation</p>

@param surface
         A Surface for camera to output to.
@param rotation
         The desired rotation to be applied on camera output. Value must be one of
         ROTATION_[0, 90, 180, 270]. Note that when the rotation is 90 or 270 degrees,
         application should make sure corresponding surface size has width and height
         transposed relative to the width and height without rotation. For example,
         if application needs camera to capture 1280x720 picture and rotate it by 90 degree,
         application should set rotation to {@code ROTATION_90} and make sure the
         corresponding Surface size is 720x1280. Note that {@link CameraDevice} might
         throw {@code IllegalArgumentException} if device cannot perform such rotation.
@hide
"
      end

      operation 79457079 "OutputConfiguration"
	public explicit_return_type ""
	nparams 3
	  param in name "surfaceGroupId" explicit_type "int"
	  param inout name "surface" type class_ref 6952247 // Surface
	  param in name "rotation" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, @NonNull ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SystemApi
"
	
	
	
	comment "Create a new {@link OutputConfiguration} instance, with rotation and a group ID.

<p>This constructor takes an argument for desired camera rotation and for the surface group
ID.  See {@link #OutputConfiguration(int, Surface)} for details of the group ID.</p>

@param surfaceGroupId
         A group ID for this output, used for sharing memory between multiple outputs.
@param surface
         A Surface for camera to output to.
@param rotation
         The desired rotation to be applied on camera output. Value must be one of
         ROTATION_[0, 90, 180, 270]. Note that when the rotation is 90 or 270 degrees,
         application should make sure corresponding surface size has width and height
         transposed relative to the width and height without rotation. For example,
         if application needs camera to capture 1280x720 picture and rotate it by 90 degree,
         application should set rotation to {@code ROTATION_90} and make sure the
         corresponding Surface size is 720x1280. Note that {@link CameraDevice} might
         throw {@code IllegalArgumentException} if device cannot perform such rotation.
@hide
"
      end

      operation 79457207 "OutputConfiguration"
	public explicit_return_type ""
	nparams 1
	  param inout name "other" type class_ref 7155639 // OutputConfiguration
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new {@link OutputConfiguration} instance with another {@link OutputConfiguration}
instance.

@param other Another {@link OutputConfiguration} instance to be copied.

@hide
"
      end

      operation 79457335 "OutputConfiguration"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 6931895 // Parcel
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an OutputConfiguration from Parcel.
"
      end

      operation 79457463 "getSurface"
	public return_type class_ref 6952247 // Surface
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@NonNull
"
	
	
	
	comment "Get the {@link Surface} associated with this {@link OutputConfiguration}.

@return the {@link Surface} associated with this {@link OutputConfiguration}.
"
      end

      operation 79457591 "getRotation"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SystemApi
"
	
	
	
	comment "Get the rotation associated with this {@link OutputConfiguration}.

@return the rotation associated with this {@link OutputConfiguration}.
        Value will be one of ROTATION_[0, 90, 180, 270]

@hide
"
      end

      operation 79457719 "getSurfaceGroupId"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the surface group ID associated with this {@link OutputConfiguration}.

@return the surface group ID associated with this {@link OutputConfiguration}.
        The default value is {@value #SURFACE_GROUP_ID_NONE}.
"
      end

      classrelation 15727159 // CREATOR (<unidirectional association>)
	relation 15727159 --->
	  a role_name "CREATOR" init_value "
            new Parcelable.Creator<OutputConfiguration>() {
        @Override
        public OutputConfiguration createFromParcel(Parcel source) {
            try {
                OutputConfiguration outputConfiguration = new OutputConfiguration(source);
                return outputConfiguration;
            } catch (Exception e) {
                Log.e(TAG, \"Exception creating OutputConfiguration from parcel\", e);
                return null;
            }
        }

        @Override
        public OutputConfiguration[] newArray(int size) {
            return new OutputConfiguration[size];
        }
    }" class_relation const_relation public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<OutputConfiguration> ${name}${value};
"
	    classrelation_ref 15727159 // CREATOR (<unidirectional association>)
	  b parent class_ref 6932791 // Creator
      end

      operation 79457847 "describeContents"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 79457975 "writeToParcel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "dest" type class_ref 6931895 // Parcel
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 79458103 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Check if this {@link OutputConfiguration} is equal to another {@link OutputConfiguration}.

<p>Two output configurations are only equal if and only if the underlying surfaces, surface
properties (width, height, format, dataspace) when the output configurations are created,
and all other configuration parameters are equal. </p>

@return {@code true} if the objects were equal, {@code false} otherwise
"
      end

      operation 79458231 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
"
      end

      classrelation 15727415 // mSurface (<unidirectional association>)
	relation 15727415 --->
	  a role_name "mSurface" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15727415 // mSurface (<unidirectional association>)
	  b parent class_ref 6952247 // Surface
      end

      attribute 24848567 "mRotation"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24848695 "mSurfaceGroupId"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 15727543 // mConfiguredSize (<unidirectional association>)
	relation 15727543 --->
	  a role_name "mConfiguredSize" const_relation private
	    comment " The size, format, and dataspace of the surface when OutputConfiguration is created.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 15727543 // mConfiguredSize (<unidirectional association>)
	  b parent class_ref 6985911 // Size
      end

      attribute 24848823 "mConfiguredFormat"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24848951 "mConfiguredDataspace"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 24849079 "mConfiguredGenerationId"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Surface generation ID to distinguish changes to Surface native internals
"
      end
    end

    class 7169079 "VendorTagDescriptor"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A class for describing the vendor tags declared by a camera HAL module.
Generally only used by the native side of
android.hardware.camera2.impl.CameraMetadataNative

@hide
"
      classrelation 15729719 // <realization>
	relation 15729719 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 15729719 // <realization>
	  b parent class_ref 6932663 // Parcelable
      end

      operation 79470007 "VendorTagDescriptor"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 6931895 // Parcel
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 15729847 // CREATOR (<unidirectional association>)
	relation 15729847 --->
	  a role_name "CREATOR" init_value "
            new Parcelable.Creator<VendorTagDescriptor>() {
        @Override
        public VendorTagDescriptor createFromParcel(Parcel source) {
            try {
                VendorTagDescriptor vendorDescriptor = new VendorTagDescriptor(source);
                return vendorDescriptor;
            } catch (Exception e) {
                Log.e(TAG, \"Exception creating VendorTagDescriptor from parcel\", e);
                return null;
            }
        }

        @Override
        public VendorTagDescriptor[] newArray(int size) {
            return new VendorTagDescriptor[size];
        }
    }" class_relation const_relation public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<VendorTagDescriptor> ${name}${value};
"
	    classrelation_ref 15729847 // CREATOR (<unidirectional association>)
	  b parent class_ref 6932791 // Creator
      end

      operation 79470135 "describeContents"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 79470263 "writeToParcel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "dest" type class_ref 6931895 // Parcel
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

    end
  end

  deploymentview 136247 "params"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 2839735 "BlackLevelPattern"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
import static com.android.internal.util.Preconditions.checkNotNull;
${definition}"
      associated_classes
	class_ref 7151031 // BlackLevelPattern
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2839863 "ColorSpaceTransform"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.hardware.camera2.CameraMetadata;
import android.hardware.camera2.utils.HashCodeHelpers;
import android.util.Rational;
import java.util.Arrays;
import static com.android.internal.util.Preconditions.*;
${definition}"
      associated_classes
	class_ref 7150903 // ColorSpaceTransform
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2839991 "Face"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.graphics.Point;
import android.graphics.Rect;
import android.hardware.camera2.CameraCharacteristics;
import android.hardware.camera2.CameraMetadata;
import android.hardware.camera2.CaptureResult;
${definition}"
      associated_classes
	class_ref 7153335 // Face
      end
      comment "Copyright (C) 2013 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2840119 "HighSpeedVideoConfiguration"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.hardware.camera2.CameraCharacteristics;
import android.hardware.camera2.utils.HashCodeHelpers;
import android.util.Range;
import android.util.Size;
import static com.android.internal.util.Preconditions.*;
${definition}"
      associated_classes
	class_ref 7150135 // HighSpeedVideoConfiguration
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2840247 "InputConfiguration"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.hardware.camera2.utils.HashCodeHelpers;
${definition}"
      associated_classes
	class_ref 7151415 // InputConfiguration
      end
      comment "Copyright 2015 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2840375 "LensShadingMap"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.hardware.camera2.CaptureResult;
import android.hardware.camera2.utils.HashCodeHelpers;
import java.util.Arrays;
import static com.android.internal.util.Preconditions.*;
import static android.hardware.camera2.params.RggbChannelVector.*;
${definition}"
      associated_classes
	class_ref 7153463 // LensShadingMap
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2840503 "MeteringRectangle"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.util.Size;
import android.graphics.Point;
import android.graphics.Rect;
import android.hardware.camera2.CameraCharacteristics;
import android.hardware.camera2.CaptureRequest;
import android.hardware.camera2.utils.HashCodeHelpers;
import static com.android.internal.util.Preconditions.*;
${definition}"
      associated_classes
	class_ref 7152951 // MeteringRectangle
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2840631 "OutputConfiguration"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.annotation.NonNull;
import android.annotation.Nullable;
import android.annotation.SystemApi;
import android.hardware.camera2.CameraDevice;
import android.hardware.camera2.utils.HashCodeHelpers;
import android.hardware.camera2.utils.SurfaceUtils;
import android.os.Parcel;
import android.os.Parcelable;
import android.util.Log;
import android.util.Size;
import android.view.Surface;
import static com.android.internal.util.Preconditions.*;
${definition}"
      associated_classes
	class_ref 7155639 // OutputConfiguration
      end
      comment "Copyright (C) 2015 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2840759 "ReprocessFormatsMap"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.hardware.camera2.CameraCharacteristics;
import android.hardware.camera2.utils.HashCodeHelpers;
import java.util.Arrays;
import static com.android.internal.util.Preconditions.*;
${definition}"
      associated_classes
	class_ref 7150263 // ReprocessFormatsMap
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2840887 "RggbChannelVector"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import static com.android.internal.util.Preconditions.*;
${definition}"
      associated_classes
	class_ref 7152823 // RggbChannelVector
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2841015 "StreamConfiguration"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.graphics.ImageFormat;
import android.hardware.camera2.CameraCharacteristics;
import android.hardware.camera2.CameraDevice;
import android.hardware.camera2.utils.HashCodeHelpers;
import android.graphics.PixelFormat;
import android.util.Size;
import static com.android.internal.util.Preconditions.*;
import static android.hardware.camera2.params.StreamConfigurationMap.checkArgumentFormatInternal;
${definition}"
      associated_classes
	class_ref 7150391 // StreamConfiguration
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2841143 "StreamConfigurationDuration"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.graphics.ImageFormat;
import android.hardware.camera2.CameraCharacteristics;
import android.hardware.camera2.utils.HashCodeHelpers;
import android.graphics.PixelFormat;
import android.util.Size;
import static com.android.internal.util.Preconditions.*;
import static android.hardware.camera2.params.StreamConfigurationMap.checkArgumentFormatInternal;
${definition}"
      associated_classes
	class_ref 7150519 // StreamConfigurationDuration
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2841271 "StreamConfigurationMap"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.graphics.ImageFormat;
import android.graphics.PixelFormat;
import android.hardware.camera2.CameraCharacteristics;
import android.hardware.camera2.CameraDevice;
import android.hardware.camera2.CameraMetadata;
import android.hardware.camera2.CaptureRequest;
import android.hardware.camera2.utils.HashCodeHelpers;
import android.hardware.camera2.utils.SurfaceUtils;
import android.hardware.camera2.legacy.LegacyCameraDevice;
import android.hardware.camera2.legacy.LegacyMetadataMapper;
import android.view.Surface;
import android.util.Range;
import android.util.Size;
import android.util.SparseIntArray;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Objects;
import java.util.Set;
import static com.android.internal.util.Preconditions.*;
${definition}"
      associated_classes
	class_ref 7150647 // StreamConfigurationMap
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2841399 "TonemapCurve"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.graphics.PointF;
import android.hardware.camera2.CameraCharacteristics;
import android.hardware.camera2.CameraDevice;
import android.hardware.camera2.CameraMetadata;
import android.hardware.camera2.CaptureRequest;
import android.hardware.camera2.utils.HashCodeHelpers;
import java.util.Arrays;
import static com.android.internal.util.Preconditions.*;
${definition}"
      associated_classes
	class_ref 7153079 // TonemapCurve
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2841527 "VendorTagDescriptor"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.os.Parcel;
import android.os.Parcelable;
import android.util.Log;
${definition}"
      associated_classes
	class_ref 7169079 // VendorTagDescriptor
      end
      comment "Copyright (C) 2016 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end
  end
end
