format 213
"restrictions" // android::frameworks::base::core::java::android::service::restrictions
  revision 4
  modified_by 55 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "D:\\Workspace\\AndroidSourceCode\\nougat_src\\frameworks/base/core/java/android/service/restrictions/"
  java_package "android.service.restrictions"
  classview 152119 "restrictions"
    
    classdiagramsettings member_max_width 0 end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 7326775 "RestrictionsReceiver"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Abstract implementation of a Restrictions Provider BroadcastReceiver. To implement a
Restrictions Provider, extend from this class and implement the abstract methods.
Export this receiver in the manifest. A profile owner device admin can then register this
component as a Restrictions Provider using
{@link DevicePolicyManager#setRestrictionsProvider(ComponentName, ComponentName)}.
<p>
The function of a Restrictions Provider is to transport permission requests from apps on this
device to an administrator (most likely on a remote device or computer) and deliver back
responses. The response should be sent back to the app via
{@link RestrictionsManager#notifyPermissionResponse(String, PersistableBundle)}.

@see RestrictionsManager
"
      classrelation 16366391 // <generalisation>
	relation 16366391 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 16366391 // <generalisation>
	  b parent class_ref 6926263 // BroadcastReceiver
      end

      operation 80890807 "onRequestPermission"
	abstract public explicit_return_type "void"
	nparams 5
	  param inout name "context" type class_ref 6923703 // Context
	  param inout name "packageName" explicit_type "String"
	  param inout name "requestType" explicit_type "String"
	  param inout name "requestId" explicit_type "String"
	  param inout name "request" type class_ref 6955319 // PersistableBundle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "An asynchronous permission request made by an application for an operation that requires
authorization by a local or remote administrator other than the user. The Restrictions
Provider should transfer the request to the administrator and deliver back a response, when
available. The calling application is aware that the response could take an indefinite
amount of time.
<p>
If the request bundle contains the key {@link RestrictionsManager#REQUEST_KEY_NEW_REQUEST},
then a new request must be sent. Otherwise the provider can look up any previous response
to the same requestId and return the cached response.

@param packageName the application requesting permission.
@param requestType the type of request, which determines the content and presentation of
the request data.
@param request the request data bundle containing at a minimum a request id.

@see RestrictionsManager#REQUEST_TYPE_APPROVAL
@see RestrictionsManager#REQUEST_TYPE_LOCAL_APPROVAL
@see RestrictionsManager#REQUEST_KEY_ID
"
      end

      operation 80890935 "onReceive"
	public explicit_return_type "void"
	nparams 2
	  param inout name "context" type class_ref 6923703 // Context
	  param inout name "intent" type class_ref 6925623 // Intent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Intercept standard Restrictions Provider broadcasts.  Implementations
should not override this method; it is better to implement the
convenience callbacks for each action.
"
      end
    end
  end

  deploymentview 141367 "restrictions"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 2911287 "RestrictionsReceiver"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.app.admin.DevicePolicyManager;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.RestrictionsManager;
import android.os.PersistableBundle;
${definition}"
      associated_classes
	class_ref 7326775 // RestrictionsReceiver
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end
  end
end
