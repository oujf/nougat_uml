format 213
"util" // android::frameworks::base::core::java::android::text::util
  revision 5
  modified_by 55 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "D:\\Workspace\\AndroidSourceCode\\nougat_src\\frameworks/base/core/java/android/text/util/"
  java_package "android.text.util"
  classview 154551 "util"
    
    classdiagramsettings member_max_width 0 end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 5857079 "LinkifyBenchmark"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 19948599 "BASIC_PATTERN"
	class_attribute const_attribute private explicit_type "Pattern"
	init_value " Pattern.compile(
            \"(?:\\\\b|$|^)http://[a-zA-Z0-9:\\\\.@\\\\?=#/]+(?:\\\\b|$|^)\")"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " this pattern does not recognize strings without http scheme therefore is expected to be
 faster in MATCHING_STR case.
"
      end

      operation 47747383 "setUp"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@BeforeExperiment
"
	
	
	
      end

      operation 47747511 "tearDown"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@AfterExperiment
"
	
	
	
      end

      operation 47747639 "timeNewRegEx"
	public explicit_return_type "void"
	nparams 1
	  param in name "reps" explicit_type "int"
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Benchmark
"
	
	
	
      end

      operation 47747767 "timeOldRegEx"
	public explicit_return_type "void"
	nparams 1
	  param in name "reps" explicit_type "int"
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Benchmark
"
	
	
	
      end

      operation 47747895 "timeBasicRegEx"
	public explicit_return_type "void"
	nparams 1
	  param in name "reps" explicit_type "int"
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Benchmark
"
	
	
	
      end
    end

    class 5910839 "LinkifyTest"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "LinkifyTest tests {@link Linkify}.
"
      operation 48095415 "testNothing"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 48095543 "testNormal"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 48095671 "testUnclickable"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end
    end

    class 7370295 "Linkify"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Linkify take a piece of text and a regular expression and turns all of the
 regex matches in the text into clickable links.  This is particularly
 useful for matching things like email addresses, web URLs, etc. and making
 them actionable.

 Alone with the pattern that is to be matched, a URL scheme prefix is also
 required.  Any pattern match that does not begin with the supplied scheme
 will have the scheme prepended to the matched text when the clickable URL
 is created.  For instance, if you are matching web URLs you would supply
 the scheme <code>http://</code>. If the pattern matches example.com, which
 does not have a URL scheme prefix, the supplied scheme will be prepended to
 create <code>http://example.com</code> when the clickable URL link is
 created.
"
      attribute 25613495 "WEB_URLS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x01"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Bit field indicating that web URLs should be matched in methods that
 take an options mask

"
      end

      attribute 25613623 "EMAIL_ADDRESSES"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x02"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Bit field indicating that email addresses should be matched in methods
 that take an options mask

"
      end

      attribute 25613751 "PHONE_NUMBERS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x04"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Bit field indicating that phone numbers should be matched in methods that
 take an options mask

"
      end

      attribute 25613879 "MAP_ADDRESSES"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x08"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Bit field indicating that street addresses should be matched in methods that
 take an options mask. Note that this uses the
 {@link android.webkit.WebView#findAddress(String) findAddress()} method in
 {@link android.webkit.WebView} for finding addresses, which has various
 limitations.

"
      end

      attribute 25614007 "ALL"
	class_attribute const_attribute public explicit_type "int"
	init_value " WEB_URLS | EMAIL_ADDRESSES | PHONE_NUMBERS | MAP_ADDRESSES"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Bit mask indicating that all available patterns should be matched in
 methods that take an options mask

"
      end

      attribute 25614135 "PHONE_NUMBER_MINIMUM_DIGITS"
	class_attribute const_attribute private explicit_type "int"
	init_value " 5"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Don't treat anything with fewer than this many digits as a
phone number.

"
      end

      class 7370423 "LinkifyMask"
	visibility public stereotype "@interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}@interface ${name}${extends} {
${members}}
"
	java_annotation "@IntDef(flag = true, value = { WEB_URLS, EMAIL_ADDRESSES, PHONE_NUMBERS, MAP_ADDRESSES, ALL })
@Retention(RetentionPolicy.SOURCE)
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      class 7370551 "MatchFilter"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 81210935 "acceptMatch"
	  public explicit_return_type "boolean"
	  nparams 3
	    param inout name "s" explicit_type "CharSequence"
	    param in name "start" explicit_type "int"
	    param in name "end" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Examines the character span matched by the pattern and determines
 if the match should be turned into an actionable link.

 @param s        The body of text against which the pattern
                 was matched
 @param start    The index of the first character in s that was
                 matched by the pattern - inclusive
 @param end      The index of the last character in s that was
                 matched - exclusive

 @return         Whether this match should be turned into a link
"
	end
      end

      classrelation 16488375 // sUrlMatchFilter (<unidirectional association>)
	relation 16488375 --->
	  a role_name "sUrlMatchFilter" init_value " new MatchFilter() {
        public final boolean acceptMatch(CharSequence s, int start, int end) {
            if (start == 0) {
                return true;
            }

            if (s.charAt(start - 1) == '@') {
                return false;
            }

            return true;
        }
    }" class_relation const_relation public
	    comment "
 Filters out web URL matches that occur after an at-sign (@).  This is
 to prevent turning the domain name in an email address into a web link.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 16488375 // sUrlMatchFilter (<unidirectional association>)
	  b parent class_ref 7370551 // MatchFilter
      end

      classrelation 16488503 // sPhoneNumberMatchFilter (<unidirectional association>)
	relation 16488503 --->
	  a role_name "sPhoneNumberMatchFilter" init_value " new MatchFilter() {
        public final boolean acceptMatch(CharSequence s, int start, int end) {
            int digitCount = 0;

            for (int i = start; i < end; i++) {
                if (Character.isDigit(s.charAt(i))) {
                    digitCount++;
                    if (digitCount >= PHONE_NUMBER_MINIMUM_DIGITS) {
                        return true;
                    }
                }
            }
            return false;
        }
    }" class_relation const_relation public
	    comment "
 Filters out URL matches that don't have enough digits to be a
 phone number.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 16488503 // sPhoneNumberMatchFilter (<unidirectional association>)
	  b parent class_ref 7370551 // MatchFilter
      end

      class 7370679 "TransformFilter"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 81211063 "transformUrl"
	  public explicit_return_type "String"
	  nparams 2
	    param in name "match" explicit_type "Matcher"
	    param inout name "url" explicit_type "String"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Examines the matched text and either passes it through or uses the
 data in the Matcher state to produce a replacement.

 @param match    The regex matcher state that found this URL text
 @param url      The text that was matched

 @return         The transformed form of the URL
"
	end
      end

      classrelation 16488631 // sPhoneNumberTransformFilter (<unidirectional association>)
	relation 16488631 --->
	  a role_name "sPhoneNumberTransformFilter" init_value " new TransformFilter() {
        public final String transformUrl(final Matcher match, String url) {
            return Patterns.digitsAndPlusOnly(match);
        }
    }" class_relation const_relation public
	    comment "
 Transforms matched phone number text into something suitable
 to be used in a tel: URL.  It does this by removing everything
 but the digits and plus signs.  For instance:
 &apos;+1 (919) 555-1212&apos;
 becomes &apos;+19195551212&apos;

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 16488631 // sPhoneNumberTransformFilter (<unidirectional association>)
	  b parent class_ref 7370679 // TransformFilter
      end

      operation 81211191 "addLinks"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param inout name "text" type class_ref 7126711 // Spannable
	  param in name "mask" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @LinkifyMask ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Scans the text of the provided Spannable and turns all occurrences
 of the link types indicated in the mask into clickable links.
 If the mask is nonzero, it also removes any existing URLSpans
 attached to the Spannable, to avoid problems if you call it
 repeatedly on the same text.

 @param text Spannable whose text is to be marked-up with links
 @param mask Mask to define which kinds of links will be searched.

 @return True if at least one link is found and applied.
"
      end

      operation 81211319 "addLinks"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param inout name "text" type class_ref 6960567 // TextView
	  param in name "mask" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @LinkifyMask ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Scans the text of the provided TextView and turns all occurrences of
 the link types indicated in the mask into clickable links.  If matches
 are found the movement method for the TextView is set to
 LinkMovementMethod.

 @param text TextView whose text is to be marked-up with links
 @param mask Mask to define which kinds of links will be searched.

 @return True if at least one link is found and applied.
"
      end

      operation 81211447 "addLinkMovementMethod"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "t" type class_ref 6960567 // TextView
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 81211575 "addLinks"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "text" type class_ref 6960567 // TextView
	  param inout name "pattern" explicit_type "Pattern"
	  param inout name "scheme" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @NonNull ${t1} ${p1}, @Nullable ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Applies a regex to the text of a TextView turning the matches into
 links.  If links are found then UrlSpans are applied to the link
 text match areas, and the movement method for the text is changed
 to LinkMovementMethod.

 @param text         TextView whose text is to be marked-up with links
 @param pattern      Regex pattern to be used for finding links
 @param scheme       URL scheme string (eg <code>http://</code>) to be
                     prepended to the links that do not start with this scheme.
"
      end

      operation 81211703 "addLinks"
	class_operation public explicit_return_type "void"
	nparams 5
	  param inout name "text" type class_ref 6960567 // TextView
	  param inout name "pattern" explicit_type "Pattern"
	  param inout name "scheme" explicit_type "String"
	  param inout name "matchFilter" type class_ref 7370551 // MatchFilter
	  param inout name "transformFilter" type class_ref 7370679 // TransformFilter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @NonNull ${t1} ${p1}, @Nullable ${t2} ${p2}, @Nullable ${t3} ${p3}, @Nullable ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Applies a regex to the text of a TextView turning the matches into
 links.  If links are found then UrlSpans are applied to the link
 text match areas, and the movement method for the text is changed
 to LinkMovementMethod.

 @param text         TextView whose text is to be marked-up with links
 @param pattern      Regex pattern to be used for finding links
 @param scheme       URL scheme string (eg <code>http://</code>) to be
                     prepended to the links that do not start with this scheme.
 @param matchFilter  The filter that is used to allow the client code
                     additional control over which pattern matches are
                     to be converted into links.
"
      end

      operation 81211831 "addLinks"
	class_operation public explicit_return_type "void"
	nparams 6
	  param inout name "text" type class_ref 6960567 // TextView
	  param inout name "pattern" explicit_type "Pattern"
	  param inout name "defaultScheme" explicit_type "String"
	  param inout name "schemes" explicit_type "String"
	multiplicity "[]"
	  param inout name "matchFilter" type class_ref 7370551 // MatchFilter
	  param inout name "transformFilter" type class_ref 7370679 // TransformFilter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @NonNull ${t1} ${p1}, @Nullable ${t2} ${p2}, @Nullable ${t3}[] ${p3}, @Nullable ${t4} ${p4}, @Nullable ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Applies a regex to the text of a TextView turning the matches into
 links.  If links are found then UrlSpans are applied to the link
 text match areas, and the movement method for the text is changed
 to LinkMovementMethod.

 @param text TextView whose text is to be marked-up with links.
 @param pattern Regex pattern to be used for finding links.
 @param defaultScheme The default scheme to be prepended to links if the link does not
                      start with one of the <code>schemes</code> given.
 @param schemes Array of schemes (eg <code>http://</code>) to check if the link found
                contains a scheme. Passing a null or empty value means prepend defaultScheme
                to all links.
 @param matchFilter  The filter that is used to allow the client code additional control
                     over which pattern matches are to be converted into links.
 @param transformFilter Filter to allow the client code to update the link found.
"
      end

      operation 81211959 "addLinks"
	class_operation public explicit_return_type "boolean"
	nparams 3
	  param inout name "text" type class_ref 7126711 // Spannable
	  param inout name "pattern" explicit_type "Pattern"
	  param inout name "scheme" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @NonNull ${t1} ${p1}, @Nullable ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Applies a regex to a Spannable turning the matches into
 links.

 @param text         Spannable whose text is to be marked-up with links
 @param pattern      Regex pattern to be used for finding links
 @param scheme       URL scheme string (eg <code>http://</code>) to be
                     prepended to the links that do not start with this scheme.
"
      end

      operation 81212087 "addLinks"
	class_operation public explicit_return_type "boolean"
	nparams 5
	  param inout name "spannable" type class_ref 7126711 // Spannable
	  param inout name "pattern" explicit_type "Pattern"
	  param inout name "scheme" explicit_type "String"
	  param inout name "matchFilter" type class_ref 7370551 // MatchFilter
	  param inout name "transformFilter" type class_ref 7370679 // TransformFilter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @NonNull ${t1} ${p1}, @Nullable ${t2} ${p2}, @Nullable ${t3} ${p3}, @Nullable ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies a regex to a Spannable turning the matches into
links.

@param spannable    Spannable whose text is to be marked-up with links
@param pattern      Regex pattern to be used for finding links
@param scheme       URL scheme string (eg <code>http://</code>) to be
                    prepended to the links that do not start with this scheme.
@param matchFilter  The filter that is used to allow the client code
                    additional control over which pattern matches are
                    to be converted into links.
@param transformFilter Filter to allow the client code to update the link found.

@return True if at least one link is found and applied.
"
      end

      operation 81212215 "addLinks"
	class_operation public explicit_return_type "boolean"
	nparams 6
	  param inout name "spannable" type class_ref 7126711 // Spannable
	  param inout name "pattern" explicit_type "Pattern"
	  param inout name "defaultScheme" explicit_type "String"
	  param inout name "schemes" explicit_type "String"
	multiplicity "[]"
	  param inout name "matchFilter" type class_ref 7370551 // MatchFilter
	  param inout name "transformFilter" type class_ref 7370679 // TransformFilter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @NonNull ${t1} ${p1}, @Nullable ${t2} ${p2}, @Nullable ${t3}[] ${p3}, @Nullable ${t4} ${p4}, @Nullable ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies a regex to a Spannable turning the matches into links.

@param spannable Spannable whose text is to be marked-up with links.
@param pattern Regex pattern to be used for finding links.
@param defaultScheme The default scheme to be prepended to links if the link does not
                     start with one of the <code>schemes</code> given.
@param schemes Array of schemes (eg <code>http://</code>) to check if the link found
               contains a scheme. Passing a null or empty value means prepend defaultScheme
               to all links.
@param matchFilter  The filter that is used to allow the client code additional control
                    over which pattern matches are to be converted into links.
@param transformFilter Filter to allow the client code to update the link found.

@return True if at least one link is found and applied.
"
      end

      operation 81212343 "applyLink"
	class_operation private explicit_return_type "void"
	nparams 4
	  param inout name "url" explicit_type "String"
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	  param inout name "text" type class_ref 7126711 // Spannable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 81212471 "makeUrl"
	class_operation private explicit_return_type "String"
	nparams 4
	  param inout name "url" explicit_type "String"
	  param inout name "prefixes" explicit_type "String"
	multiplicity "[]"
	  param inout name "matcher" explicit_type "Matcher"
	  param inout name "filter" type class_ref 7370679 // TransformFilter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @NonNull ${t1}[] ${p1}, ${t2} ${p2}, @Nullable ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 81212599 "gatherLinks"
	class_operation private explicit_return_type "void"
	nparams 6
	  param inout name "links" explicit_type "ArrayList<LinkSpec>"
	  param inout name "s" type class_ref 7126711 // Spannable
	  param inout name "pattern" explicit_type "Pattern"
	  param inout name "schemes" explicit_type "String"
	multiplicity "[]"
	  param inout name "matchFilter" type class_ref 7370551 // MatchFilter
	  param inout name "transformFilter" type class_ref 7370679 // TransformFilter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 81212727 "gatherTelLinks"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "links" explicit_type "ArrayList<LinkSpec>"
	  param inout name "s" type class_ref 7126711 // Spannable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 81212855 "gatherMapLinks"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "links" explicit_type "ArrayList<LinkSpec>"
	  param inout name "s" type class_ref 7126711 // Spannable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 81212983 "pruneOverlaps"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "links" explicit_type "ArrayList<LinkSpec>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 7370807 "LinkSpec"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 25614263 "start"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 25614391 "end"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 7370935 "Rfc822Token"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class stores an RFC 822-like name, address, and comment,
and provides methods to convert them to quoted strings.
"
      operation 81213111 "Rfc822Token"
	public explicit_return_type ""
	nparams 3
	  param inout name "name" explicit_type "String"
	  param inout name "address" explicit_type "String"
	  param inout name "comment" explicit_type "String"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}@Nullable ${t0} ${p0}, @Nullable ${t1} ${p1}, @Nullable ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new Rfc822Token with the specified name, address,
and comment.
"
      end

      operation 81213239 "getName"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Nullable
"
	
	
	
	comment "Returns the name part.
"
      end

      operation 81213367 "getAddress"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Nullable
"
	
	
	
	comment "Returns the address part.
"
      end

      operation 81213495 "getComment"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Nullable
"
	
	
	
	comment "Returns the comment part.
"
      end

      operation 81213623 "setName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Changes the name to the specified name.
"
      end

      operation 81213751 "setAddress"
	public explicit_return_type "void"
	nparams 1
	  param inout name "address" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Changes the address to the specified address.
"
      end

      operation 81213879 "setComment"
	public explicit_return_type "void"
	nparams 1
	  param inout name "comment" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Changes the comment to the specified comment.
"
      end

      operation 81214007 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name (with quoting added if necessary),
the comment (in parentheses), and the address (in angle brackets).
This should be suitable for inclusion in an RFC 822 address list.
"
      end

      operation 81214135 "quoteNameIfNecessary"
	class_operation public explicit_return_type "String"
	nparams 1
	  param inout name "name" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name, conservatively quoting it if there are any
characters that are likely to cause trouble outside of a
quoted string, or returning it literally if it seems safe.
"
      end

      operation 81214263 "quoteName"
	class_operation public explicit_return_type "String"
	nparams 1
	  param inout name "name" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name, with internal backslashes and quotation marks
preceded by backslashes.  The outer quote marks themselves are not
added by this method.
"
      end

      operation 81214391 "quoteComment"
	class_operation public explicit_return_type "String"
	nparams 1
	  param inout name "comment" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the comment, with internal backslashes and parentheses
preceded by backslashes.  The outer parentheses themselves are
not added by this method.
"
      end

      operation 81214519 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 81214647 "stringEquals"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "a" explicit_type "String"
	  param inout name "b" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 81214775 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 7371063 "Rfc822Tokenizer"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class works as a Tokenizer for MultiAutoCompleteTextView for
address list fields, and also provides a method for converting
a string of addresses (such as might be typed into such a field)
into a series of Rfc822Tokens.
"
      classrelation 16492087 // <realization>
	relation 16492087 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 16492087 // <realization>
	  b parent class_ref 7371319 // Tokenizer
      end

      operation 81228215 "tokenize"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "text" explicit_type "CharSequence"
	  param inout name "out" explicit_type "Collection<Rfc822Token>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This constructor will try to take a string like
\"Foo Bar (something) &lt;foo\\@google.com&gt;,
blah\\@google.com (something)\"
and convert it into one or more Rfc822Tokens, output into the supplied
collection.

It does *not* decode MIME encoded-words; charset conversion
must already have taken place if necessary.
It will try to be tolerant of broken syntax instead of
returning an error.

"
      end

      operation 81228343 "tokenize"
	class_operation public return_type class_ref 7370935 // Rfc822Token
	nparams 1
	  param inout name "text" explicit_type "CharSequence"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method will try to take a string like
\"Foo Bar (something) &lt;foo\\@google.com&gt;,
blah\\@google.com (something)\"
and convert it into one or more Rfc822Tokens.
It does *not* decode MIME encoded-words; charset conversion
must already have taken place if necessary.
It will try to be tolerant of broken syntax instead of
returning an error.
"
      end

      operation 81228471 "crunch"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "sb" explicit_type "StringBuilder"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 81228599 "findTokenStart"
	public explicit_return_type "int"
	nparams 2
	  param inout name "text" explicit_type "CharSequence"
	  param in name "cursor" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 81228727 "findTokenEnd"
	public explicit_return_type "int"
	nparams 2
	  param inout name "text" explicit_type "CharSequence"
	  param in name "cursor" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 81228855 "terminateToken"
	public explicit_return_type "CharSequence"
	nparams 1
	  param inout name "text" explicit_type "CharSequence"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Terminates the specified address with a comma and space.
This assumes that the specified text already has valid syntax.
The Adapter subclass's convertToString() method must make that
guarantee.
"
      end
    end
  end

  deploymentview 142775 "util"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 2143287 "LinkifyBenchmark"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import com.google.caliper.AfterExperiment;
import com.google.caliper.BeforeExperiment;
import com.google.caliper.Benchmark;
import com.google.caliper.Param;
import android.text.Spannable;
import android.text.SpannableString;
import android.util.Patterns;
import java.util.regex.Pattern;
${definition}"
      associated_classes
	class_ref 5857079 // LinkifyBenchmark
      end
    end

    artifact 2173623 "LinkifyTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.test.AndroidTestCase;
import android.test.suitebuilder.annotation.SmallTest;
import android.text.method.LinkMovementMethod;
import android.widget.TextView;
${definition}"
      associated_classes
	class_ref 5910839 // LinkifyTest
      end
    end

    artifact 2932535 "Linkify"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.annotation.IntDef;
import android.annotation.NonNull;
import android.annotation.Nullable;
import android.telephony.PhoneNumberUtils;
import android.text.method.LinkMovementMethod;
import android.text.method.MovementMethod;
import android.text.style.URLSpan;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.Spanned;
import android.util.Patterns;
import android.webkit.WebView;
import android.widget.TextView;
import java.io.UnsupportedEncodingException;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import com.android.i18n.phonenumbers.PhoneNumberMatch;
import com.android.i18n.phonenumbers.PhoneNumberUtil;
import com.android.i18n.phonenumbers.PhoneNumberUtil.Leniency;
import libcore.util.EmptyArray;
${definition}"
      associated_classes
	class_ref 7370295 // Linkify
	class_ref 7370807 // LinkSpec
      end
      comment "Copyright (C) 2007 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2932663 "Rfc822Token"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.annotation.Nullable;
${definition}"
      associated_classes
	class_ref 7370935 // Rfc822Token
      end
      comment "Copyright (C) 2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end

    artifact 2933047 "Rfc822Tokenizer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.widget.MultiAutoCompleteTextView;
import java.util.ArrayList;
import java.util.Collection;
${definition}"
      associated_classes
	class_ref 7371063 // Rfc822Tokenizer
      end
      comment "Copyright (C) 2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end
  end
end
