format 213
"filterfw" // android::frameworks::base::core::java::android::filterfw
  revision 2
  modified_by 55 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "D:\\Workspace\\AndroidSourceCode\\nougat_src\\frameworks/base/media/mca/filterfw/java/android/filterfw/"
  java_package "android.filterfw"
  package_ref 178743 // core

  classview 173879 "filterfw"
    
    classdiagramsettings member_max_width 0 end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 6135991 "FilterFunctionEnvironment"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A FilterFunctionEnvironment provides a simple functional front-end to manually executing
filters. Use this environment if a graph-based approach is not convenient for your case.
Typically, a FilterFunctionEnvironment is used as follows:
  1. Instantiate a new FilterFunctionEnvironment instance.
  2. Perform any configuration, such as setting a GL environment.
  3. Wrap Filters into FilterFunctions by calling createFunction().
  4. Execute FilterFunctions individually and use the results for further processing.
Additionally, there is a convenience method to execute a number of filters in sequence.
@hide
"
      classrelation 12060343 // <generalisation>
	relation 12060343 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12060343 // <generalisation>
	  b parent class_ref 6136119 // MffEnvironment
      end

      operation 70028727 "FilterFunctionEnvironment"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new FilterFunctionEnvironment with the default components.
"
      end

      operation 70028855 "FilterFunctionEnvironment"
	public explicit_return_type ""
	nparams 1
	  param inout name "frameManager" type class_ref 6136247 // FrameManager
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new FilterFunctionEnvironment with a custom FrameManager. Pass null to auto-create
a FrameManager.

@param frameManager The FrameManager to use, or null to auto-create one.
"
      end

      operation 70028983 "createFunction"
	public return_type class_ref 6131895 // FilterFunction
	nparams 2
	  param inout name "filterClass" type class_ref 2612407 // Class
	  param inout name "" explicit_type "Object...parameters"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new FilterFunction from a specific filter class. The function is initialized with
the given key-value list of parameters. Note, that this function uses the default shared
FilterFactory to create the filter instance.

@param filterClass   The class of the filter to wrap. This must be a Filter subclass.
@param parameters    An argument list of alternating key-value filter parameters.
@return             A new FilterFunction instance.
"
      end
    end

    class 6136119 "MffEnvironment"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Base class for mobile filter framework (MFF) frontend environments. These convenience classes
allow using the filter framework without the requirement of performing manual setup of its
required components.

@hide
"
      classrelation 12060215 // mContext (<unidirectional association>)
	relation 12060215 --->
	  a role_name "mContext" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12060215 // mContext (<unidirectional association>)
	  b parent class_ref 6130871 // FilterContext
      end

      operation 70027959 "MffEnvironment"
	protected explicit_return_type ""
	nparams 1
	  param inout name "frameManager" type class_ref 6136247 // FrameManager
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Protected constructor to initialize the environment's essential components. These are the
frame-manager and the filter-context. Passing in null for the frame-manager causes this
to be auto-created.

@param frameManager The FrameManager to use or null to auto-create one.
"
      end

      operation 70028087 "getContext"
	public return_type class_ref 6130871 // FilterContext
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the environment's filter-context.
"
      end

      operation 70028215 "setGLEnvironment"
	public explicit_return_type "void"
	nparams 1
	  param inout name "glEnvironment" type class_ref 6136375 // GLEnvironment
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the environment's GL environment to the specified environment. This does not activate
the environment.
"
      end

      operation 70028343 "createGLEnvironment"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create and activate a new GL environment for use in this filter context.
"
      end

      operation 70028471 "activateGLEnvironment"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Activate the GL environment for use in the current thread. A GL environment must have been
previously set or created using setGLEnvironment() or createGLEnvironment()! Call this after
having switched to a new thread for GL filter execution.
"
      end

      operation 70028599 "deactivateGLEnvironment"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deactivate the GL environment from use in the current thread. A GL environment must have been
previously set or created using setGLEnvironment() or createGLEnvironment()! Call this before
running GL filters in another thread.
"
      end
    end

    class 6136503 "GraphEnvironment"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A GraphEnvironment provides a simple front-end to filter graph setup and execution using the
mobile filter framework. Typically, you use a GraphEnvironment in the following fashion:
  1. Instantiate a new GraphEnvironment instance.
  2. Perform any configuration, such as adding graph references and setting a GL environment.
  3. Load a graph file using loadGraph() or add a graph using addGraph().
  4. Obtain a GraphRunner instance using getRunner().
  5. Execute the obtained runner.
Note that it is possible to add multiple graphs and runners to a single GraphEnvironment.

@hide
"
      classrelation 12060471 // <generalisation>
	relation 12060471 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12060471 // <generalisation>
	  b parent class_ref 6136119 // MffEnvironment
      end

      attribute 20677943 "MODE_ASYNCHRONOUS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 20678071 "MODE_SYNCHRONOUS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 12060599 // mGraphReader (<unidirectional association>)
	relation 12060599 --->
	  a role_name "mGraphReader" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12060599 // mGraphReader (<unidirectional association>)
	  b parent class_ref 6136631 // GraphReader
      end

      class 6136759 "GraphHandle"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 12060855 // mGraph (<unidirectional association>)
	  relation 12060855 --->
	    a role_name "mGraph" private
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 12060855 // mGraph (<unidirectional association>)
	    b parent class_ref 6131639 // FilterGraph
	end

	classrelation 12060983 // mAsyncRunner (<unidirectional association>)
	  relation 12060983 --->
	    a role_name "mAsyncRunner" private
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 12060983 // mAsyncRunner (<unidirectional association>)
	    b parent class_ref 6136887 // AsyncRunner
	end

	classrelation 12061111 // mSyncRunner (<unidirectional association>)
	  relation 12061111 --->
	    a role_name "mSyncRunner" private
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 12061111 // mSyncRunner (<unidirectional association>)
	    b parent class_ref 6137015 // SyncRunner
	end

	operation 70029111 "GraphHandle"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "graph" type class_ref 6131639 // FilterGraph
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 70029239 "getGraph"
	  public return_type class_ref 6131639 // FilterGraph
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 70029367 "getAsyncRunner"
	  public return_type class_ref 6136887 // AsyncRunner
	  nparams 1
	    param inout name "environment" type class_ref 6130871 // FilterContext
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 70029495 "getSyncRunner"
	  public return_type class_ref 6131511 // GraphRunner
	  nparams 1
	    param inout name "environment" type class_ref 6130871 // FilterContext
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 12060727 // mGraphs (<unidirectional association>)
	relation 12060727 --->
	  stereotype "ArrayList"
	  a role_name "mGraphs" init_value " new ArrayList<GraphHandle>()" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 12060727 // mGraphs (<unidirectional association>)
	  b parent class_ref 6136759 // GraphHandle
      end

      operation 70029623 "GraphEnvironment"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new GraphEnvironment with default components.
"
      end

      operation 70029751 "GraphEnvironment"
	public explicit_return_type ""
	nparams 2
	  param inout name "frameManager" type class_ref 6136247 // FrameManager
	  param inout name "reader" type class_ref 6136631 // GraphReader
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new GraphEnvironment with a custom FrameManager and GraphReader. Specifying null
for either of these, will auto-create a default instance.

@param frameManager The FrameManager to use, or null to auto-create one.
@param reader        The GraphReader to use for graph loading, or null to auto-create one.
                     Note, that the reader will not be created until it is required. Pass
                     null if you will not load any graph files.
"
      end

      operation 70029879 "getGraphReader"
	public return_type class_ref 6136631 // GraphReader
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the used graph reader. This will create one, if a reader has not been set already.
"
      end

      operation 70030007 "addReferences"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "Object...references"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add graph references to resolve during graph reading. The references added here are shared
among all graphs.

@param references An alternating argument list of keys (Strings) and values.
"
      end

      operation 70030135 "loadGraph"
	public explicit_return_type "int"
	nparams 2
	  param inout name "context" explicit_type "Context"
	  param in name "resourceId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Loads a graph file from the specified resource and adds it to this environment.

@param context       The context in which to read the resource.
@param resourceId    The ID of the graph resource to load.
@return              A unique ID for the graph.
"
      end

      operation 70030263 "addGraph"
	public explicit_return_type "int"
	nparams 1
	  param inout name "graph" type class_ref 6131639 // FilterGraph
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a graph to the environment. Consider using loadGraph() if you are loading a graph from
a graph file.

@param graph The graph to add to the environment.
@return      A unique ID for the added graph.
"
      end

      operation 70030391 "getGraph"
	public return_type class_ref 6131639 // FilterGraph
	nparams 1
	  param in name "graphId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Access a specific graph of this environment given a graph ID (previously returned from
loadGraph() or addGraph()). Throws an InvalidArgumentException if no graph with the
specified ID could be found.

@param graphId   The ID of the graph to get.
@return          The graph with the specified ID.
"
      end

      operation 70030519 "getRunner"
	public return_type class_ref 6131511 // GraphRunner
	nparams 2
	  param in name "graphId" explicit_type "int"
	  param in name "executionMode" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a GraphRunner instance for the graph with the specified ID. The GraphRunner instance can
be used to execute the graph. Throws an InvalidArgumentException if no graph with the
specified ID could be found.

@param graphId       The ID of the graph to get.
@param executionMode The mode of graph execution. Currently this can be either
MODE_SYNCHRONOUS or MODE_ASYNCHRONOUS.
@return              A GraphRunner instance for this graph.
"
      end
    end
  end

  deploymentview 158135 "filterfw"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 2309303 "MffEnvironment"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.filterfw.core.CachedFrameManager;
import android.filterfw.core.FilterContext;
import android.filterfw.core.FrameManager;
import android.filterfw.core.GLEnvironment;
${definition}"
      associated_classes
	class_ref 6136119 // MffEnvironment
      end
    end

    artifact 2309431 "FilterFunctionEnvironment"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.filterfw.core.Filter;
import android.filterfw.core.FilterFactory;
import android.filterfw.core.FilterFunction;
import android.filterfw.core.FrameManager;
${definition}"
      associated_classes
	class_ref 6135991 // FilterFunctionEnvironment
      end
    end

    artifact 2309559 "GraphEnvironment"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.content.Context;
import android.filterfw.core.AsyncRunner;
import android.filterfw.core.FilterGraph;
import android.filterfw.core.FilterContext;
import android.filterfw.core.FrameManager;
import android.filterfw.core.GraphRunner;
import android.filterfw.core.RoundRobinScheduler;
import android.filterfw.core.SyncRunner;
import android.filterfw.io.GraphIOException;
import android.filterfw.io.GraphReader;
import android.filterfw.io.TextGraphReader;
import java.util.ArrayList;
${definition}"
      associated_classes
	class_ref 6136503 // GraphEnvironment
      end
    end
  end

  package_ref 179255 // io

  package_ref 179383 // geometry

  package_ref 179511 // format
end
