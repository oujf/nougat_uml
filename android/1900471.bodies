class CFunc
!!!35656247.java!!!	CFunc(in original : String)
        this.original = original;
!!!35656375.java!!!	getOriginal() : String
        return original;
!!!35656503.java!!!	setName(in fname : String) : void
        this.fname = fname;
!!!35656631.java!!!	getName() : String
        return fname;
!!!35656759.java!!!	setType(inout ftype : CType) : void
        this.ftype = ftype;
!!!35656887.java!!!	getType() : CType
        return ftype;
!!!35657015.java!!!	addArgument(in argName : String, inout argType : CType) : void
        argNames.add(argName);
        argTypes.add(argType);

        if (argType.isPointer()) {
            hasPointerArg = true;
        }
        if (argType.isTypedPointer()) {
            hasTypedPointerArg = true;
        }
        if (argType.isEGLHandle()) {
            hasEGLHandleArg = true;
        }
!!!35657143.java!!!	getNumArgs() : int
        return argNames.size();
!!!35657271.java!!!	getArgIndex(in name : String) : int
        int len = argNames.size();
        for (int i = 0; i < len; i++) {
            if (name.equals(argNames.get(i))) {
                return i;
            }
        }
        return -1;
!!!35657399.java!!!	getArgName(in index : int) : String
        return argNames.get(index);
!!!35657527.java!!!	getArgType(in index : int) : CType
        return argTypes.get(index);
!!!35657655.java!!!	hasPointerArg() : boolean
        return hasPointerArg;
!!!35657783.java!!!	hasTypedPointerArg() : boolean
        return hasTypedPointerArg;
!!!35657911.java!!!	hasEGLHandleArg() : boolean
        return hasEGLHandleArg;
!!!35658039.java!!!	toString() : String
        String s =  "Function " + fname + " returns " + ftype + ": ";
        for (int i = 0; i < argNames.size(); i++) {
            if (i > 0) {
                s += ", ";
            }
            s += argTypes.get(i) + " " + argNames.get(i);
        }
        return s;
!!!35658167.java!!!	parseCFunc(in s : String) : CFunc
        CFunc cfunc = new CFunc(s);
        String[] tokens = s.split("\\s");

        int i = 0;
        CType ftype = new CType();
        String ftypeName = tokens[i++];
        if (ftypeName.equals("const")) {
            ftype.setIsConst(true);
            ftypeName = tokens[i++];
        }
        ftype.setBaseType(ftypeName);

        String fname = tokens[i++];
        if (fname.equals("*")) {
            ftype.setIsPointer(true);
            fname = tokens[i++];
        }

        cfunc.setName(fname);
        cfunc.setType(ftype);

        while (i < tokens.length) {
            String tok = tokens[i++];

            if (tok.equals("(")) {
                tok = tokens[i++];
                if (tok.equals("void")) {
                    break;
                }
            }
            if (tok.equals(")")) {
                break;
            }

            CType argType = new CType();

            String argTypeName = tok;
            String argName = "";

            if (argTypeName.equals("const")) {
                argType.setIsConst(true);
                argTypeName = tokens[i++];
            }
            argType.setBaseType(argTypeName);

            argName = tokens[i++];
            if (argName.startsWith("*")) {
                argType.setIsPointer(true);
                argName = argName.substring(1, argName.length());
            }
            if (argName.endsWith(",")) {
                argName = argName.substring(0, argName.length() - 1);
            }

            cfunc.addArgument(argName, argType);
        }

        return cfunc;
