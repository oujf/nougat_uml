class JType
!!!35669687.java!!!	JType(in primitiveTypeName : String)
    this.baseType = primitiveTypeName;
    this.isClass = false;
    this.isArray = false;
!!!35669815.java!!!	JType(in primitiveTypeName : String, inout isClass : boolean, inout isArray : boolean)
    this.baseType = primitiveTypeName;
    this.isClass = isClass;
    this.isArray = isArray;
!!!35669943.java!!!	getBaseType() : String
    return baseType;
!!!35670071.java!!!	toString() : String
    return baseType + (isArray ? "[]" : "");
!!!35670199.java!!!	isArray() : boolean
    return isArray;
!!!35670327.java!!!	isClass() : boolean
    return isClass;
!!!35670455.java!!!	isString() : boolean
        return baseType.equals("String");
!!!35670583.java!!!	isPrimitive() : boolean
    return !isClass() && !isArray();
!!!35670711.java!!!	isVoid() : boolean
    return baseType.equals("void");
!!!35670839.java!!!	isBuffer() : boolean
    return baseType.indexOf("Buffer") != -1;
!!!35670967.java!!!	isTypedBuffer() : boolean
    return !baseType.equals("java.nio.Buffer") &&
        (baseType.indexOf("Buffer") != -1);
!!!35671095.java!!!	getArrayTypeForTypedBuffer() : JType
      if (!isTypedBuffer()) {
          throw new RuntimeException("Not typed buffer type " + this);
      }
      switch (baseType) {
        case "java.nio.ByteBuffer":
          return new JType("byte", false, true);
        case "java.nio.BooleanBuffer":
          return new JType("boolean", false, true);
        case "java.nio.ShortBuffer":
          return new JType("short", false, true);
        case "java.nio.CharBuffer":
          return new JType("char", false, true);
        case "java.nio.IntBuffer":
          return new JType("int", false, true);
        case "java.nio.LongBuffer":
          return new JType("long", false, true);
        case "java.nio.FloatBuffer":
          return new JType("float", false, true);
        case "java.nio.DoubleBuffer":
          return new JType("double", false, true);
        default:
          throw new RuntimeException("Unknown typed buffer type " + this);
      }
!!!35671223.java!!!	getArrayGetterForPrimitiveArray() : String
      if (!isArray() || isClass()) {
          throw new RuntimeException("Not array type " + this);
      }
      switch (baseType) {
        case "byte":
          return "GetByteArrayElements";
        case "boolean":
          return "GetBooleanArrayElements";
        case "short":
          return "GetShortArrayElements";
        case "char":
          return "GetCharArrayElements";
        case "int":
          return "GetIntArrayElements";
        case "long":
          return "GetLongArrayElements";
        case "float":
          return "GetFloatArrayElements";
        case "double":
          return "GetDoubleArrayElements";
        default:
          throw new RuntimeException("Unknown array type " + this);
      }
!!!35671351.java!!!	getArrayReleaserForPrimitiveArray() : String
      if (!isArray() || isClass()) {
          throw new RuntimeException("Not array type " + this);
      }
      switch (baseType) {
        case "byte":
          return "ReleaseByteArrayElements";
        case "boolean":
          return "ReleaseBooleanArrayElements";
        case "short":
          return "ReleaseShortArrayElements";
        case "char":
          return "ReleaseCharArrayElements";
        case "int":
          return "ReleaseIntArrayElements";
        case "long":
          return "ReleaseLongArrayElements";
        case "float":
          return "ReleaseFloatArrayElements";
        case "double":
          return "ReleaseDoubleArrayElements";
        default:
          throw new RuntimeException("Unknown array type " + this);
      }
!!!35671479.java!!!	isEGLHandle() : boolean
    return !isPrimitive() &&
        (baseType.startsWith("EGL"));
!!!35671607.java!!!	convert(inout ctype : CType, inout useArray : boolean) : JType
     JType javaType = null;
     if (useArray) {
         javaType = arrayTypeMapping.get(ctype);
     }
     if (javaType == null) {
         javaType = typeMapping.get(ctype);
     }
     if (javaType == null) {
         throw new RuntimeException("Unsupported C type: " + ctype);
     }
     return javaType;
