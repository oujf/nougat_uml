class CollapsingToolbarLayout
!!!38169143.java!!!	CollapsingToolbarLayout(inout context : Context)
        this(context, null);
!!!38169271.java!!!	CollapsingToolbarLayout(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, 0);
!!!38169399.java!!!	CollapsingToolbarLayout(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int)
        super(context, attrs, defStyleAttr);

        ThemeUtils.checkAppCompatTheme(context);

        mCollapsingTextHelper = new CollapsingTextHelper(this);
        mCollapsingTextHelper.setTextSizeInterpolator(AnimationUtils.DECELERATE_INTERPOLATOR);

        TypedArray a = context.obtainStyledAttributes(attrs,
                R.styleable.CollapsingToolbarLayout, defStyleAttr,
                R.style.Widget_Design_CollapsingToolbar);

        mCollapsingTextHelper.setExpandedTextGravity(
                a.getInt(R.styleable.CollapsingToolbarLayout_expandedTitleGravity,
                        GravityCompat.START | Gravity.BOTTOM));
        mCollapsingTextHelper.setCollapsedTextGravity(
                a.getInt(R.styleable.CollapsingToolbarLayout_collapsedTitleGravity,
                        GravityCompat.START | Gravity.CENTER_VERTICAL));

        mExpandedMarginStart = mExpandedMarginTop = mExpandedMarginEnd = mExpandedMarginBottom =
                a.getDimensionPixelSize(R.styleable.CollapsingToolbarLayout_expandedTitleMargin, 0);

        if (a.hasValue(R.styleable.CollapsingToolbarLayout_expandedTitleMarginStart)) {
            mExpandedMarginStart = a.getDimensionPixelSize(
                    R.styleable.CollapsingToolbarLayout_expandedTitleMarginStart, 0);
        }
        if (a.hasValue(R.styleable.CollapsingToolbarLayout_expandedTitleMarginEnd)) {
            mExpandedMarginEnd = a.getDimensionPixelSize(
                    R.styleable.CollapsingToolbarLayout_expandedTitleMarginEnd, 0);
        }
        if (a.hasValue(R.styleable.CollapsingToolbarLayout_expandedTitleMarginTop)) {
            mExpandedMarginTop = a.getDimensionPixelSize(
                    R.styleable.CollapsingToolbarLayout_expandedTitleMarginTop, 0);
        }
        if (a.hasValue(R.styleable.CollapsingToolbarLayout_expandedTitleMarginBottom)) {
            mExpandedMarginBottom = a.getDimensionPixelSize(
                    R.styleable.CollapsingToolbarLayout_expandedTitleMarginBottom, 0);
        }

        mCollapsingTitleEnabled = a.getBoolean(
                R.styleable.CollapsingToolbarLayout_titleEnabled, true);
        setTitle(a.getText(R.styleable.CollapsingToolbarLayout_title));

        // First load the default text appearances
        mCollapsingTextHelper.setExpandedTextAppearance(
                R.style.TextAppearance_Design_CollapsingToolbar_Expanded);
        mCollapsingTextHelper.setCollapsedTextAppearance(
                android.support.v7.appcompat.R.style.TextAppearance_AppCompat_Widget_ActionBar_Title);

        // Now overlay any custom text appearances
        if (a.hasValue(R.styleable.CollapsingToolbarLayout_expandedTitleTextAppearance)) {
            mCollapsingTextHelper.setExpandedTextAppearance(
                    a.getResourceId(
                            R.styleable.CollapsingToolbarLayout_expandedTitleTextAppearance, 0));
        }
        if (a.hasValue(R.styleable.CollapsingToolbarLayout_collapsedTitleTextAppearance)) {
            mCollapsingTextHelper.setCollapsedTextAppearance(
                    a.getResourceId(
                            R.styleable.CollapsingToolbarLayout_collapsedTitleTextAppearance, 0));
        }

        mScrimVisibleHeightTrigger = a.getInt(
                R.styleable.CollapsingToolbarLayout_scrimVisibleHeightTrigger, -1);

        mScrimAnimationDuration = a.getInt(
                R.styleable.CollapsingToolbarLayout_scrimAnimationDuration,
                DEFAULT_SCRIM_ANIMATION_DURATION);

        setContentScrim(a.getDrawable(R.styleable.CollapsingToolbarLayout_contentScrim));
        setStatusBarScrim(a.getDrawable(R.styleable.CollapsingToolbarLayout_statusBarScrim));

        mToolbarId = a.getResourceId(R.styleable.CollapsingToolbarLayout_toolbarId, -1);

        a.recycle();

        setWillNotDraw(false);

        ViewCompat.setOnApplyWindowInsetsListener(this,
                new android.support.v4.view.OnApplyWindowInsetsListener() {
                    @Override
                    public WindowInsetsCompat onApplyWindowInsets(View v,
                            WindowInsetsCompat insets) {
                        return setWindowInsets(insets);
                    }
                });
!!!38169527.java!!!	onAttachedToWindow() : void
        super.onAttachedToWindow();

        // Add an OnOffsetChangedListener if possible
        final ViewParent parent = getParent();
        if (parent instanceof AppBarLayout) {
            if (mOnOffsetChangedListener == null) {
                mOnOffsetChangedListener = new OffsetUpdateListener();
            }
            ((AppBarLayout) parent).addOnOffsetChangedListener(mOnOffsetChangedListener);
        }

        // We're attached, so lets request an inset dispatch
        ViewCompat.requestApplyInsets(this);
!!!38169655.java!!!	onDetachedFromWindow() : void
        // Remove our OnOffsetChangedListener if possible and it exists
        final ViewParent parent = getParent();
        if (mOnOffsetChangedListener != null && parent instanceof AppBarLayout) {
            ((AppBarLayout) parent).removeOnOffsetChangedListener(mOnOffsetChangedListener);
        }

        super.onDetachedFromWindow();
!!!38169783.java!!!	setWindowInsets(inout insets : WindowInsetsCompat) : WindowInsetsCompat
        if (mLastInsets != insets) {
            mLastInsets = insets;
            requestLayout();
        }
        return insets.consumeSystemWindowInsets();
!!!38169911.java!!!	draw(inout canvas : Canvas) : void
        super.draw(canvas);

        // If we don't have a toolbar, the scrim will be not be drawn in drawChild() below.
        // Instead, we draw it here, before our collapsing text.
        ensureToolbar();
        if (mToolbar == null && mContentScrim != null && mScrimAlpha > 0) {
            mContentScrim.mutate().setAlpha(mScrimAlpha);
            mContentScrim.draw(canvas);
        }

        // Let the collapsing text helper draw its text
        if (mCollapsingTitleEnabled && mDrawCollapsingTitle) {
            mCollapsingTextHelper.draw(canvas);
        }

        // Now draw the status bar scrim
        if (mStatusBarScrim != null && mScrimAlpha > 0) {
            final int topInset = mLastInsets != null ? mLastInsets.getSystemWindowInsetTop() : 0;
            if (topInset > 0) {
                mStatusBarScrim.setBounds(0, -mCurrentOffset, getWidth(),
                        topInset - mCurrentOffset);
                mStatusBarScrim.mutate().setAlpha(mScrimAlpha);
                mStatusBarScrim.draw(canvas);
            }
        }
!!!38170039.java!!!	drawChild(inout canvas : Canvas, inout child : View, in drawingTime : long) : boolean
        // This is a little weird. Our scrim needs to be behind the Toolbar (if it is present),
        // but in front of any other children which are behind it. To do this we intercept the
        // drawChild() call, and draw our scrim first when drawing the toolbar
        ensureToolbar();
        if (child == mToolbar && mContentScrim != null && mScrimAlpha > 0) {
            mContentScrim.mutate().setAlpha(mScrimAlpha);
            mContentScrim.draw(canvas);
        }

        // Carry on drawing the child...
        return super.drawChild(canvas, child, drawingTime);
!!!38170167.java!!!	onSizeChanged(in w : int, in h : int, in oldw : int, in oldh : int) : void
        super.onSizeChanged(w, h, oldw, oldh);
        if (mContentScrim != null) {
            mContentScrim.setBounds(0, 0, w, h);
        }
!!!38170295.java!!!	ensureToolbar() : void
        if (!mRefreshToolbar) {
            return;
        }

        // First clear out the current Toolbar
        mToolbar = null;
        mToolbarDirectChild = null;

        if (mToolbarId != -1) {
            // If we have an ID set, try and find it and it's direct parent to us
            mToolbar = (Toolbar) findViewById(mToolbarId);
            if (mToolbar != null) {
                mToolbarDirectChild = findDirectChild(mToolbar);
            }
        }

        if (mToolbar == null) {
            // If we don't have an ID, or couldn't find a Toolbar with the correct ID, try and find
            // one from our direct children
            Toolbar toolbar = null;
            for (int i = 0, count = getChildCount(); i < count; i++) {
                final View child = getChildAt(i);
                if (child instanceof Toolbar) {
                    toolbar = (Toolbar) child;
                    break;
                }
            }
            mToolbar = toolbar;
        }

        updateDummyView();
        mRefreshToolbar = false;
!!!38170423.java!!!	findDirectChild(in descendant : View) : View
        View directChild = descendant;
        for (ViewParent p = descendant.getParent(); p != this && p != null; p = p.getParent()) {
            if (p instanceof View) {
                directChild = (View) p;
            }
        }
        return directChild;
!!!38170551.java!!!	updateDummyView() : void
        if (!mCollapsingTitleEnabled && mDummyView != null) {
            // If we have a dummy view and we have our title disabled, remove it from its parent
            final ViewParent parent = mDummyView.getParent();
            if (parent instanceof ViewGroup) {
                ((ViewGroup) parent).removeView(mDummyView);
            }
        }
        if (mCollapsingTitleEnabled && mToolbar != null) {
            if (mDummyView == null) {
                mDummyView = new View(getContext());
            }
            if (mDummyView.getParent() == null) {
                mToolbar.addView(mDummyView, LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
            }
        }
!!!38170679.java!!!	onMeasure(in widthMeasureSpec : int, in heightMeasureSpec : int) : void
        ensureToolbar();
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
!!!38170807.java!!!	onLayout(inout changed : boolean, in left : int, in top : int, in right : int, in bottom : int) : void
        super.onLayout(changed, left, top, right, bottom);

        // Update the collapsed bounds by getting it's transformed bounds. This needs to be done
        // before the children are offset below
        if (mCollapsingTitleEnabled && mDummyView != null) {
            // We only draw the title if the dummy view is being displayed (Toolbar removes
            // views if there is no space)
            mDrawCollapsingTitle = ViewCompat.isAttachedToWindow(mDummyView)
                    && mDummyView.getVisibility() == VISIBLE;

            if (mDrawCollapsingTitle) {
                final boolean isRtl = ViewCompat.getLayoutDirection(this)
                        == ViewCompat.LAYOUT_DIRECTION_RTL;

                // Update the collapsed bounds
                int bottomOffset = 0;
                if (mToolbarDirectChild != null && mToolbarDirectChild != this) {
                    final LayoutParams lp = (LayoutParams) mToolbarDirectChild.getLayoutParams();
                    bottomOffset = lp.bottomMargin;
                }
                ViewGroupUtils.getDescendantRect(this, mDummyView, mTmpRect);
                mCollapsingTextHelper.setCollapsedBounds(
                        mTmpRect.left + (isRtl
                                ? mToolbar.getTitleMarginEnd()
                                : mToolbar.getTitleMarginStart()),
                        bottom + mToolbar.getTitleMarginTop() - mTmpRect.height() - bottomOffset,
                        mTmpRect.right + (isRtl
                                ? mToolbar.getTitleMarginStart()
                                : mToolbar.getTitleMarginEnd()),
                        bottom - bottomOffset - mToolbar.getTitleMarginBottom());

                // Update the expanded bounds
                mCollapsingTextHelper.setExpandedBounds(
                        isRtl ? mExpandedMarginEnd : mExpandedMarginStart,
                        mTmpRect.bottom + mExpandedMarginTop,
                        right - left - (isRtl ? mExpandedMarginStart : mExpandedMarginEnd),
                        bottom - top - mExpandedMarginBottom);
                // Now recalculate using the new bounds
                mCollapsingTextHelper.recalculate();
            }
        }

        // Update our child view offset helpers
        for (int i = 0, z = getChildCount(); i < z; i++) {
            final View child = getChildAt(i);

            if (mLastInsets != null && !ViewCompat.getFitsSystemWindows(child)) {
                final int insetTop = mLastInsets.getSystemWindowInsetTop();
                if (child.getTop() < insetTop) {
                    // If the child isn't set to fit system windows but is drawing within the inset
                    // offset it down
                    ViewCompat.offsetTopAndBottom(child, insetTop);
                }
            }

            getViewOffsetHelper(child).onViewLayout();
        }

        // Finally, set our minimum height to enable proper AppBarLayout collapsing
        if (mToolbar != null) {
            if (mCollapsingTitleEnabled && TextUtils.isEmpty(mCollapsingTextHelper.getText())) {
                // If we do not currently have a title, try and grab it from the Toolbar
                mCollapsingTextHelper.setText(mToolbar.getTitle());
            }
            if (mToolbarDirectChild == null || mToolbarDirectChild == this) {
                setMinimumHeight(getHeightWithMargins(mToolbar));
            } else {
                setMinimumHeight(getHeightWithMargins(mToolbarDirectChild));
            }
        }
!!!38170935.java!!!	getHeightWithMargins(in view : View) : int
        final ViewGroup.LayoutParams lp = view.getLayoutParams();
        if (lp instanceof MarginLayoutParams) {
            final MarginLayoutParams mlp = (MarginLayoutParams) lp;
            return view.getHeight() + mlp.topMargin + mlp.bottomMargin;
        }
        return view.getHeight();
!!!38171063.java!!!	getViewOffsetHelper(inout view : View) : ViewOffsetHelper
        ViewOffsetHelper offsetHelper = (ViewOffsetHelper) view.getTag(R.id.view_offset_helper);
        if (offsetHelper == null) {
            offsetHelper = new ViewOffsetHelper(view);
            view.setTag(R.id.view_offset_helper, offsetHelper);
        }
        return offsetHelper;
!!!38171191.java!!!	setTitle(inout title : CharSequence) : void
        mCollapsingTextHelper.setText(title);
!!!38171319.java!!!	getTitle() : CharSequence
        return mCollapsingTitleEnabled ? mCollapsingTextHelper.getText() : null;
!!!38171447.java!!!	setTitleEnabled(inout enabled : boolean) : void
        if (enabled != mCollapsingTitleEnabled) {
            mCollapsingTitleEnabled = enabled;
            updateDummyView();
            requestLayout();
        }
!!!38171575.java!!!	isTitleEnabled() : boolean
        return mCollapsingTitleEnabled;
!!!38171703.java!!!	setScrimsShown(inout shown : boolean) : void
        setScrimsShown(shown, ViewCompat.isLaidOut(this) && !isInEditMode());
!!!38171831.java!!!	setScrimsShown(inout shown : boolean, inout animate : boolean) : void
        if (mScrimsAreShown != shown) {
            if (animate) {
                animateScrim(shown ? 0xFF : 0x0);
            } else {
                setScrimAlpha(shown ? 0xFF : 0x0);
            }
            mScrimsAreShown = shown;
        }
!!!38171959.java!!!	animateScrim(in targetAlpha : int) : void
        ensureToolbar();
        if (mScrimAnimator == null) {
            mScrimAnimator = ViewUtils.createAnimator();
            mScrimAnimator.setDuration(mScrimAnimationDuration);
            mScrimAnimator.setInterpolator(
                    targetAlpha > mScrimAlpha
                            ? AnimationUtils.FAST_OUT_LINEAR_IN_INTERPOLATOR
                            : AnimationUtils.LINEAR_OUT_SLOW_IN_INTERPOLATOR);
            mScrimAnimator.setUpdateListener(new ValueAnimatorCompat.AnimatorUpdateListener() {
                @Override
                public void onAnimationUpdate(ValueAnimatorCompat animator) {
                    setScrimAlpha(animator.getAnimatedIntValue());
                }
            });
        } else if (mScrimAnimator.isRunning()) {
            mScrimAnimator.cancel();
        }

        mScrimAnimator.setIntValues(mScrimAlpha, targetAlpha);
        mScrimAnimator.start();
!!!38172087.java!!!	setScrimAlpha(in alpha : int) : void
        if (alpha != mScrimAlpha) {
            final Drawable contentScrim = mContentScrim;
            if (contentScrim != null && mToolbar != null) {
                ViewCompat.postInvalidateOnAnimation(mToolbar);
            }
            mScrimAlpha = alpha;
            ViewCompat.postInvalidateOnAnimation(CollapsingToolbarLayout.this);
        }
!!!38172215.java!!!	setContentScrim(inout drawable : Drawable) : void
        if (mContentScrim != drawable) {
            if (mContentScrim != null) {
                mContentScrim.setCallback(null);
            }
            mContentScrim = drawable != null ? drawable.mutate() : null;
            if (mContentScrim != null) {
                mContentScrim.setBounds(0, 0, getWidth(), getHeight());
                mContentScrim.setCallback(this);
                mContentScrim.setAlpha(mScrimAlpha);
            }
            ViewCompat.postInvalidateOnAnimation(this);
        }
!!!38172343.java!!!	setContentScrimColor(in color : int) : void
        setContentScrim(new ColorDrawable(color));
!!!38172471.java!!!	setContentScrimResource(in resId : int) : void
        setContentScrim(ContextCompat.getDrawable(getContext(), resId));

!!!38172599.java!!!	getContentScrim() : Drawable
        return mContentScrim;
!!!38172727.java!!!	setStatusBarScrim(inout drawable : Drawable) : void
        if (mStatusBarScrim != drawable) {
            if (mStatusBarScrim != null) {
                mStatusBarScrim.setCallback(null);
            }
            mStatusBarScrim = drawable != null ? drawable.mutate() : null;
            if (mStatusBarScrim != null) {
                if (mStatusBarScrim.isStateful()) {
                    mStatusBarScrim.setState(getDrawableState());
                }
                DrawableCompat.setLayoutDirection(mStatusBarScrim,
                        ViewCompat.getLayoutDirection(this));
                mStatusBarScrim.setVisible(getVisibility() == VISIBLE, false);
                mStatusBarScrim.setCallback(this);
                mStatusBarScrim.setAlpha(mScrimAlpha);
            }
            ViewCompat.postInvalidateOnAnimation(this);
        }
!!!38172855.java!!!	drawableStateChanged() : void
        super.drawableStateChanged();

        final int[] state = getDrawableState();
        boolean changed = false;

        Drawable d = mStatusBarScrim;
        if (d != null && d.isStateful()) {
            changed |= d.setState(state);
        }
        d = mContentScrim;
        if (d != null && d.isStateful()) {
            changed |= d.setState(state);
        }

        if (changed) {
            invalidate();
        }
!!!38172983.java!!!	verifyDrawable(inout who : Drawable) : boolean
        return super.verifyDrawable(who) || who == mContentScrim || who == mStatusBarScrim;
!!!38173111.java!!!	setVisibility(in visibility : int) : void
        super.setVisibility(visibility);

        final boolean visible = visibility == VISIBLE;
        if (mStatusBarScrim != null && mStatusBarScrim.isVisible() != visible) {
            mStatusBarScrim.setVisible(visible, false);
        }
        if (mContentScrim != null && mContentScrim.isVisible() != visible) {
            mContentScrim.setVisible(visible, false);
        }
!!!38173239.java!!!	setStatusBarScrimColor(in color : int) : void
        setStatusBarScrim(new ColorDrawable(color));
!!!38173367.java!!!	setStatusBarScrimResource(in resId : int) : void
        setStatusBarScrim(ContextCompat.getDrawable(getContext(), resId));
!!!38173495.java!!!	getStatusBarScrim() : Drawable
        return mStatusBarScrim;
!!!38173623.java!!!	setCollapsedTitleTextAppearance(in resId : int) : void
        mCollapsingTextHelper.setCollapsedTextAppearance(resId);
!!!38173751.java!!!	setCollapsedTitleTextColor(in color : int) : void
        mCollapsingTextHelper.setCollapsedTextColor(color);
!!!38173879.java!!!	setCollapsedTitleGravity(in gravity : int) : void
        mCollapsingTextHelper.setCollapsedTextGravity(gravity);
!!!38174007.java!!!	getCollapsedTitleGravity() : int
        return mCollapsingTextHelper.getCollapsedTextGravity();
!!!38174135.java!!!	setExpandedTitleTextAppearance(in resId : int) : void
        mCollapsingTextHelper.setExpandedTextAppearance(resId);
!!!38174263.java!!!	setExpandedTitleColor(in color : int) : void
        mCollapsingTextHelper.setExpandedTextColor(color);
!!!38174391.java!!!	setExpandedTitleGravity(in gravity : int) : void
        mCollapsingTextHelper.setExpandedTextGravity(gravity);
!!!38174519.java!!!	getExpandedTitleGravity() : int
        return mCollapsingTextHelper.getExpandedTextGravity();
!!!38174647.java!!!	setCollapsedTitleTypeface(inout typeface : Typeface) : void
        mCollapsingTextHelper.setCollapsedTypeface(typeface);
!!!38174775.java!!!	getCollapsedTitleTypeface() : Typeface
        return mCollapsingTextHelper.getCollapsedTypeface();
!!!38174903.java!!!	setExpandedTitleTypeface(inout typeface : Typeface) : void
        mCollapsingTextHelper.setExpandedTypeface(typeface);
!!!38175031.java!!!	getExpandedTitleTypeface() : Typeface
        return mCollapsingTextHelper.getExpandedTypeface();
!!!38175159.java!!!	setExpandedTitleMargin(in start : int, in top : int, in end : int, in bottom : int) : void
        mExpandedMarginStart = start;
        mExpandedMarginTop = top;
        mExpandedMarginEnd = end;
        mExpandedMarginBottom = bottom;
        requestLayout();
!!!38175287.java!!!	getExpandedTitleMarginStart() : int
        return mExpandedMarginStart;
!!!38175415.java!!!	setExpandedTitleMarginStart(in margin : int) : void
        mExpandedMarginStart = margin;
        requestLayout();
!!!38175543.java!!!	getExpandedTitleMarginTop() : int
        return mExpandedMarginTop;
!!!38175671.java!!!	setExpandedTitleMarginTop(in margin : int) : void
        mExpandedMarginTop = margin;
        requestLayout();
!!!38175799.java!!!	getExpandedTitleMarginEnd() : int
        return mExpandedMarginEnd;
!!!38175927.java!!!	setExpandedTitleMarginEnd(in margin : int) : void
        mExpandedMarginEnd = margin;
        requestLayout();
!!!38176055.java!!!	getExpandedTitleMarginBottom() : int
        return mExpandedMarginBottom;
!!!38176183.java!!!	setExpandedTitleMarginBottom(in margin : int) : void
        mExpandedMarginBottom = margin;
        requestLayout();
!!!38176311.java!!!	setScrimVisibleHeightTrigger(in height : int) : void
        if (mScrimVisibleHeightTrigger != height) {
            mScrimVisibleHeightTrigger = height;
            // Update the scrim visibilty
            updateScrimVisibility();
        }
!!!38176439.java!!!	getScrimVisibleHeightTrigger() : int
        if (mScrimVisibleHeightTrigger >= 0) {
            // If we have one explictly set, return it
            return mScrimVisibleHeightTrigger;
        }

        // Otherwise we'll use the default computed value
        final int insetTop = mLastInsets != null ? mLastInsets.getSystemWindowInsetTop() : 0;

        final int minHeight = ViewCompat.getMinimumHeight(this);
        if (minHeight > 0) {
            // If we have a minHeight set, lets use 2 * minHeight (capped at our height)
            return Math.min((minHeight * 2) + insetTop, getHeight());
        }

        // If we reach here then we don't have a min height set. Instead we'll take a
        // guess at 1/3 of our height being visible
        return getHeight() / 3;
!!!38176567.java!!!	setScrimAnimationDuration(in duration : long) : void
        mScrimAnimationDuration = duration;
!!!38176695.java!!!	getScrimAnimationDuration() : long
        return mScrimAnimationDuration;
!!!38176823.java!!!	checkLayoutParams(inout p : ViewGroup::LayoutParams) : boolean
        return p instanceof LayoutParams;
!!!38176951.java!!!	generateDefaultLayoutParams() : ViewGroup::LayoutParams
        return new LayoutParams(super.generateDefaultLayoutParams());
!!!38177079.java!!!	generateLayoutParams(inout attrs : AttributeSet) : FrameLayout::LayoutParams
        return new LayoutParams(getContext(), attrs);
!!!38177207.java!!!	generateLayoutParams(inout p : ViewGroup::LayoutParams) : FrameLayout::LayoutParams
        return new LayoutParams(p);
