class ActionBarOverlayLayout
!!!39708599.java!!!	ActionBarOverlayLayout(inout context : Context)
        this(context, null);
!!!39708727.java!!!	ActionBarOverlayLayout(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);
        init(context);

        mParentHelper = new NestedScrollingParentHelper(this);
!!!39708855.java!!!	init(inout context : Context) : void
        TypedArray ta = getContext().getTheme().obtainStyledAttributes(ATTRS);
        mActionBarHeight = ta.getDimensionPixelSize(0, 0);
        mWindowContentOverlay = ta.getDrawable(1);
        setWillNotDraw(mWindowContentOverlay == null);
        ta.recycle();

        mIgnoreWindowContentOverlay = context.getApplicationInfo().targetSdkVersion <
                Build.VERSION_CODES.KITKAT;

        mFlingEstimator = ScrollerCompat.create(context);
!!!39708983.java!!!	onDetachedFromWindow() : void
        super.onDetachedFromWindow();
        haltActionBarHideOffsetAnimations();
!!!39709111.java!!!	setActionBarVisibilityCallback(inout cb : ActionBarOverlayLayout::ActionBarVisibilityCallback) : void
        mActionBarVisibilityCallback = cb;
        if (getWindowToken() != null) {
            // This is being initialized after being added to a window;
            // make sure to update all state now.
            mActionBarVisibilityCallback.onWindowVisibilityChanged(mWindowVisibility);
            if (mLastSystemUiVisibility != 0) {
                int newVis = mLastSystemUiVisibility;
                onWindowSystemUiVisibilityChanged(newVis);
                ViewCompat.requestApplyInsets(this);
            }
        }
!!!39709239.java!!!	setOverlayMode(inout overlayMode : boolean) : void
        mOverlayMode = overlayMode;

        /*
         * Drawing the window content overlay was broken before K so starting to draw it
         * again unexpectedly will cause artifacts in some apps. They should fix it.
         */
        mIgnoreWindowContentOverlay = overlayMode &&
                getContext().getApplicationInfo().targetSdkVersion <
                        Build.VERSION_CODES.KITKAT;
!!!39709367.java!!!	isInOverlayMode() : boolean
        return mOverlayMode;
!!!39709495.java!!!	setHasNonEmbeddedTabs(inout hasNonEmbeddedTabs : boolean) : void
        mHasNonEmbeddedTabs = hasNonEmbeddedTabs;
!!!39709623.java!!!	setShowingForActionMode(inout showing : boolean) : void
        // TODO: Add workaround for this
//        if (showing) {
//            // Here's a fun hack: if the status bar is currently being hidden,
//            // and the application has asked for stable content insets, then
//            // we will end up with the action mode action bar being shown
//            // without the status bar, but moved below where the status bar
//            // would be.  Not nice.  Trying to have this be positioned
//            // correctly is not easy (basically we need yet *another* content
//            // inset from the window manager to know where to put it), so
//            // instead we will just temporarily force the status bar to be shown.
//            if ((getWindowSystemUiVisibility() & (SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
//                    | SYSTEM_UI_FLAG_LAYOUT_STABLE))
//                    == (SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | SYSTEM_UI_FLAG_LAYOUT_STABLE)) {
//                setDisabledSystemUiVisibility(SYSTEM_UI_FLAG_FULLSCREEN);
//            }
//        } else {
//            setDisabledSystemUiVisibility(0);
//        }
!!!39709751.java!!!	onConfigurationChanged(inout newConfig : Configuration) : void
        if (Build.VERSION.SDK_INT >= 8) {
            super.onConfigurationChanged(newConfig);
        }
        init(getContext());
        ViewCompat.requestApplyInsets(this);
!!!39709879.java!!!	onWindowSystemUiVisibilityChanged(in visible : int) : void
        if (Build.VERSION.SDK_INT >= 16) {
            super.onWindowSystemUiVisibilityChanged(visible);
        }
        pullChildren();
        final int diff = mLastSystemUiVisibility ^ visible;
        mLastSystemUiVisibility = visible;
        final boolean barVisible = (visible & SYSTEM_UI_FLAG_FULLSCREEN) == 0;
        final boolean stable = (visible & SYSTEM_UI_FLAG_LAYOUT_STABLE) != 0;
        if (mActionBarVisibilityCallback != null) {
            // We want the bar to be visible if it is not being hidden,
            // or the app has not turned on a stable UI mode (meaning they
            // are performing explicit layout around the action bar).
            mActionBarVisibilityCallback.enableContentAnimations(!stable);
            if (barVisible || !stable) mActionBarVisibilityCallback.showForSystem();
            else mActionBarVisibilityCallback.hideForSystem();
        }
        if ((diff & SYSTEM_UI_FLAG_LAYOUT_STABLE) != 0) {
            if (mActionBarVisibilityCallback != null) {
                ViewCompat.requestApplyInsets(this);
            }
        }
!!!39710007.java!!!	onWindowVisibilityChanged(in visibility : int) : void
        super.onWindowVisibilityChanged(visibility);
        mWindowVisibility = visibility;
        if (mActionBarVisibilityCallback != null) {
            mActionBarVisibilityCallback.onWindowVisibilityChanged(visibility);
        }
!!!39710135.java!!!	applyInsets(inout view : View, inout insets : Rect, inout left : boolean, inout top : boolean, inout bottom : boolean, inout right : boolean) : boolean
        boolean changed = false;
        LayoutParams lp = (LayoutParams)view.getLayoutParams();
        if (left && lp.leftMargin != insets.left) {
            changed = true;
            lp.leftMargin = insets.left;
        }
        if (top && lp.topMargin != insets.top) {
            changed = true;
            lp.topMargin = insets.top;
        }
        if (right && lp.rightMargin != insets.right) {
            changed = true;
            lp.rightMargin = insets.right;
        }
        if (bottom && lp.bottomMargin != insets.bottom) {
            changed = true;
            lp.bottomMargin = insets.bottom;
        }
        return changed;
!!!39710263.java!!!	fitSystemWindows(inout insets : Rect) : boolean
        pullChildren();

        final int vis = ViewCompat.getWindowSystemUiVisibility(this);
        final boolean stable = (vis & SYSTEM_UI_FLAG_LAYOUT_STABLE) != 0;
        final Rect systemInsets = insets;

        // The top action bar is always within the content area.
        boolean changed = applyInsets(mActionBarTop, systemInsets, true, true, false, true);

        mBaseInnerInsets.set(systemInsets);
        ViewUtils.computeFitSystemWindows(this, mBaseInnerInsets, mBaseContentInsets);
        if (!mLastBaseContentInsets.equals(mBaseContentInsets)) {
            changed = true;
            mLastBaseContentInsets.set(mBaseContentInsets);
        }

        if (changed) {
            requestLayout();
        }

        // We don't do any more at this point.  To correctly compute the content/inner
        // insets in all cases, we need to know the measured size of the various action
        // bar elements. fitSystemWindows() happens before the measure pass, so we can't
        // do that here. Instead we will take this up in onMeasure().
        return true;
!!!39710391.java!!!	generateDefaultLayoutParams() : ViewGroup::LayoutParams
        return new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
!!!39710519.java!!!	generateLayoutParams(inout attrs : AttributeSet) : ViewGroup::LayoutParams
        return new LayoutParams(getContext(), attrs);
!!!39710647.java!!!	generateLayoutParams(inout p : ViewGroup::LayoutParams) : ViewGroup::LayoutParams
        return new LayoutParams(p);
!!!39710775.java!!!	checkLayoutParams(inout p : ViewGroup::LayoutParams) : boolean
        return p instanceof LayoutParams;
!!!39710903.java!!!	onMeasure(in widthMeasureSpec : int, in heightMeasureSpec : int) : void
        pullChildren();

        int maxHeight = 0;
        int maxWidth = 0;
        int childState = 0;

        int topInset = 0;
        int bottomInset = 0;

        measureChildWithMargins(mActionBarTop, widthMeasureSpec, 0, heightMeasureSpec, 0);
        LayoutParams lp = (LayoutParams) mActionBarTop.getLayoutParams();
        maxWidth = Math.max(maxWidth,
                mActionBarTop.getMeasuredWidth() + lp.leftMargin + lp.rightMargin);
        maxHeight = Math.max(maxHeight,
                mActionBarTop.getMeasuredHeight() + lp.topMargin + lp.bottomMargin);
        childState = ViewUtils.combineMeasuredStates(childState,
                ViewCompat.getMeasuredState(mActionBarTop));

        final int vis = ViewCompat.getWindowSystemUiVisibility(this);
        final boolean stable = (vis & SYSTEM_UI_FLAG_LAYOUT_STABLE) != 0;

        if (stable) {
            // This is the standard space needed for the action bar.  For stable measurement,
            // we can't depend on the size currently reported by it -- this must remain constant.
            topInset = mActionBarHeight;
            if (mHasNonEmbeddedTabs) {
                final View tabs = mActionBarTop.getTabContainer();
                if (tabs != null) {
                    // If tabs are not embedded, increase space on top to account for them.
                    topInset += mActionBarHeight;
                }
            }
        } else if (mActionBarTop.getVisibility() != GONE) {
            // This is the space needed on top of the window for all of the action bar
            // and tabs.
            topInset = mActionBarTop.getMeasuredHeight();
        }

        // If the window has not requested system UI layout flags, we need to
        // make sure its content is not being covered by system UI...  though it
        // will still be covered by the action bar if they have requested it to
        // overlay.
        mContentInsets.set(mBaseContentInsets);
        mInnerInsets.set(mBaseInnerInsets);
        if (!mOverlayMode && !stable) {
            mContentInsets.top += topInset;
            mContentInsets.bottom += bottomInset;
        } else {
            mInnerInsets.top += topInset;
            mInnerInsets.bottom += bottomInset;
        }
        applyInsets(mContent, mContentInsets, true, true, true, true);

        if (!mLastInnerInsets.equals(mInnerInsets)) {
            // If the inner insets have changed, we need to dispatch this down to
            // the app's fitSystemWindows().  We do this before measuring the content
            // view to keep the same semantics as the normal fitSystemWindows() call.
            mLastInnerInsets.set(mInnerInsets);

            mContent.dispatchFitSystemWindows(mInnerInsets);
        }

        measureChildWithMargins(mContent, widthMeasureSpec, 0, heightMeasureSpec, 0);
        lp = (LayoutParams) mContent.getLayoutParams();
        maxWidth = Math.max(maxWidth,
                mContent.getMeasuredWidth() + lp.leftMargin + lp.rightMargin);
        maxHeight = Math.max(maxHeight,
                mContent.getMeasuredHeight() + lp.topMargin + lp.bottomMargin);
        childState = ViewUtils.combineMeasuredStates(childState,
                ViewCompat.getMeasuredState(mContent));

        // Account for padding too
        maxWidth += getPaddingLeft() + getPaddingRight();
        maxHeight += getPaddingTop() + getPaddingBottom();

        // Check against our minimum height and width
        maxHeight = Math.max(maxHeight, getSuggestedMinimumHeight());
        maxWidth = Math.max(maxWidth, getSuggestedMinimumWidth());

        setMeasuredDimension(
                ViewCompat.resolveSizeAndState(maxWidth, widthMeasureSpec, childState),
                ViewCompat.resolveSizeAndState(maxHeight, heightMeasureSpec,
                        childState << MEASURED_HEIGHT_STATE_SHIFT));
!!!39711031.java!!!	onLayout(inout changed : boolean, in left : int, in top : int, in right : int, in bottom : int) : void
        final int count = getChildCount();

        final int parentLeft = getPaddingLeft();
        final int parentRight = right - left - getPaddingRight();

        final int parentTop = getPaddingTop();
        final int parentBottom = bottom - top - getPaddingBottom();

        for (int i = 0; i < count; i++) {
            final View child = getChildAt(i);
            if (child.getVisibility() != GONE) {
                final LayoutParams lp = (LayoutParams) child.getLayoutParams();

                final int width = child.getMeasuredWidth();
                final int height = child.getMeasuredHeight();

                int childLeft = parentLeft + lp.leftMargin;
                int childTop = parentTop + lp.topMargin;

                child.layout(childLeft, childTop, childLeft + width, childTop + height);
            }
        }
!!!39711159.java!!!	draw(inout c : Canvas) : void
        super.draw(c);
        if (mWindowContentOverlay != null && !mIgnoreWindowContentOverlay) {
            final int top = mActionBarTop.getVisibility() == VISIBLE ?
                    (int) (mActionBarTop.getBottom() + ViewCompat.getTranslationY(mActionBarTop) + 0.5f)
                    : 0;
            mWindowContentOverlay.setBounds(0, top, getWidth(),
                    top + mWindowContentOverlay.getIntrinsicHeight());
            mWindowContentOverlay.draw(c);
        }
!!!39711287.java!!!	shouldDelayChildPressedState() : boolean
        return false;
!!!39711415.java!!!	onStartNestedScroll(inout child : View, inout target : View, in axes : int) : boolean
        if ((axes & SCROLL_AXIS_VERTICAL) == 0 || mActionBarTop.getVisibility() != VISIBLE) {
            return false;
        }
        return mHideOnContentScroll;
!!!39711543.java!!!	onNestedScrollAccepted(inout child : View, inout target : View, in axes : int) : void
        mParentHelper.onNestedScrollAccepted(child, target, axes);
        mHideOnContentScrollReference = getActionBarHideOffset();
        haltActionBarHideOffsetAnimations();
        if (mActionBarVisibilityCallback != null) {
            mActionBarVisibilityCallback.onContentScrollStarted();
        }
!!!39711671.java!!!	onNestedScroll(inout target : View, in dxConsumed : int, in dyConsumed : int, in dxUnconsumed : int, in dyUnconsumed : int) : void
        mHideOnContentScrollReference += dyConsumed;
        setActionBarHideOffset(mHideOnContentScrollReference);
!!!39711799.java!!!	onStopNestedScroll(inout target : View) : void
        if (mHideOnContentScroll && !mAnimatingForFling) {
            if (mHideOnContentScrollReference <= mActionBarTop.getHeight()) {
                postRemoveActionBarHideOffset();
            } else {
                postAddActionBarHideOffset();
            }
        }
        if (mActionBarVisibilityCallback != null) {
            mActionBarVisibilityCallback.onContentScrollStopped();
        }
!!!39711927.java!!!	onNestedFling(inout target : View, in velocityX : float, in velocityY : float, inout consumed : boolean) : boolean
        if (!mHideOnContentScroll || !consumed) {
            return false;
        }
        if (shouldHideActionBarOnFling(velocityX, velocityY)) {
            addActionBarHideOffset();
        } else {
            removeActionBarHideOffset();
        }
        mAnimatingForFling = true;
        return true;
!!!39712055.java!!!	onNestedPreScroll(inout target : View, in dx : int, in dy : int, inout consumed : int [[]]) : void
        // no-op
!!!39712183.java!!!	onNestedPreFling(inout target : View, in velocityX : float, in velocityY : float) : boolean
        return false;
!!!39712311.java!!!	getNestedScrollAxes() : int
        return mParentHelper.getNestedScrollAxes();
!!!39712439.java!!!	pullChildren() : void
        if (mContent == null) {
            mContent = (ContentFrameLayout) findViewById(R.id.action_bar_activity_content);
            mActionBarTop = (ActionBarContainer) findViewById(R.id.action_bar_container);
            mDecorToolbar = getDecorToolbar(findViewById(R.id.action_bar));
        }
!!!39712567.java!!!	getDecorToolbar(inout view : View) : DecorToolbar
        if (view instanceof DecorToolbar) {
            return (DecorToolbar) view;
        } else if (view instanceof Toolbar) {
            return ((Toolbar) view).getWrapper();
        } else {
            throw new IllegalStateException("Can't make a decor toolbar out of " +
                    view.getClass().getSimpleName());
        }
!!!39712695.java!!!	setHideOnContentScrollEnabled(inout hideOnContentScroll : boolean) : void
        if (hideOnContentScroll != mHideOnContentScroll) {
            mHideOnContentScroll = hideOnContentScroll;
            if (!hideOnContentScroll) {
                haltActionBarHideOffsetAnimations();
                setActionBarHideOffset(0);
            }
        }
!!!39712823.java!!!	isHideOnContentScrollEnabled() : boolean
        return mHideOnContentScroll;
!!!39712951.java!!!	getActionBarHideOffset() : int
        return mActionBarTop != null ? -((int) ViewCompat.getTranslationY(mActionBarTop)) : 0;
!!!39713079.java!!!	setActionBarHideOffset(in offset : int) : void
        haltActionBarHideOffsetAnimations();
        final int topHeight = mActionBarTop.getHeight();
        offset = Math.max(0, Math.min(offset, topHeight));
        ViewCompat.setTranslationY(mActionBarTop, -offset);
!!!39713207.java!!!	haltActionBarHideOffsetAnimations() : void
        removeCallbacks(mRemoveActionBarHideOffset);
        removeCallbacks(mAddActionBarHideOffset);
        if (mCurrentActionBarTopAnimator != null) {
            mCurrentActionBarTopAnimator.cancel();
        }
!!!39713335.java!!!	postRemoveActionBarHideOffset() : void
        haltActionBarHideOffsetAnimations();
        postDelayed(mRemoveActionBarHideOffset, ACTION_BAR_ANIMATE_DELAY);
!!!39713463.java!!!	postAddActionBarHideOffset() : void
        haltActionBarHideOffsetAnimations();
        postDelayed(mAddActionBarHideOffset, ACTION_BAR_ANIMATE_DELAY);
!!!39713591.java!!!	removeActionBarHideOffset() : void
        haltActionBarHideOffsetAnimations();
        mRemoveActionBarHideOffset.run();
!!!39713719.java!!!	addActionBarHideOffset() : void
        haltActionBarHideOffsetAnimations();
        mAddActionBarHideOffset.run();
!!!39713847.java!!!	shouldHideActionBarOnFling(in velocityX : float, in velocityY : float) : boolean
        mFlingEstimator.fling(0, 0, 0, (int) velocityY, 0, 0, Integer.MIN_VALUE, Integer.MAX_VALUE);
        final int finalY = mFlingEstimator.getFinalY();
        return finalY > mActionBarTop.getHeight();
!!!39713975.java!!!	setWindowCallback(inout cb : Window::Callback) : void
        pullChildren();
        mDecorToolbar.setWindowCallback(cb);
!!!39714103.java!!!	setWindowTitle(inout title : CharSequence) : void
        pullChildren();
        mDecorToolbar.setWindowTitle(title);
!!!39714231.java!!!	getTitle() : CharSequence
        pullChildren();
        return mDecorToolbar.getTitle();
!!!39714359.java!!!	initFeature(in windowFeature : int) : void
        pullChildren();
        switch (windowFeature) {
            case Window.FEATURE_PROGRESS:
                mDecorToolbar.initProgress();
                break;
            case Window.FEATURE_INDETERMINATE_PROGRESS:
                mDecorToolbar.initIndeterminateProgress();
                break;
            case AppCompatDelegate.FEATURE_SUPPORT_ACTION_BAR_OVERLAY:
                setOverlayMode(true);
                break;
        }
!!!39714487.java!!!	setUiOptions(in uiOptions : int) : void
        // Split Action Bar not included.
!!!39714615.java!!!	hasIcon() : boolean
        pullChildren();
        return mDecorToolbar.hasIcon();
!!!39714743.java!!!	hasLogo() : boolean
        pullChildren();
        return mDecorToolbar.hasLogo();
!!!39714871.java!!!	setIcon(in resId : int) : void
        pullChildren();
        mDecorToolbar.setIcon(resId);
!!!39714999.java!!!	setIcon(inout d : Drawable) : void
        pullChildren();
        mDecorToolbar.setIcon(d);
!!!39715127.java!!!	setLogo(in resId : int) : void
        pullChildren();
        mDecorToolbar.setLogo(resId);
!!!39715255.java!!!	canShowOverflowMenu() : boolean
        pullChildren();
        return mDecorToolbar.canShowOverflowMenu();
!!!39715383.java!!!	isOverflowMenuShowing() : boolean
        pullChildren();
        return mDecorToolbar.isOverflowMenuShowing();
!!!39715511.java!!!	isOverflowMenuShowPending() : boolean
        pullChildren();
        return mDecorToolbar.isOverflowMenuShowPending();
!!!39715639.java!!!	showOverflowMenu() : boolean
        pullChildren();
        return mDecorToolbar.showOverflowMenu();
!!!39715767.java!!!	hideOverflowMenu() : boolean
        pullChildren();
        return mDecorToolbar.hideOverflowMenu();
!!!39715895.java!!!	setMenuPrepared() : void
        pullChildren();
        mDecorToolbar.setMenuPrepared();
!!!39716023.java!!!	setMenu(inout menu : Menu, inout cb : MenuPresenter::Callback) : void
        pullChildren();
        mDecorToolbar.setMenu(menu, cb);
!!!39716151.java!!!	saveToolbarHierarchyState(inout toolbarStates : SparseArray) : void
        pullChildren();
        mDecorToolbar.saveHierarchyState(toolbarStates);
!!!39716279.java!!!	restoreToolbarHierarchyState(inout toolbarStates : SparseArray) : void
        pullChildren();
        mDecorToolbar.restoreHierarchyState(toolbarStates);
!!!39716407.java!!!	dismissPopups() : void
        pullChildren();
        mDecorToolbar.dismissPopupMenus();
