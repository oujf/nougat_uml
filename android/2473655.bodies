class Request
!!!40589495.java!!!	Request(in url : String, inout listener : Response::ErrorListener)
        this(Method.DEPRECATED_GET_OR_POST, url, listener);
!!!40589623.java!!!	Request(in method : int, in url : String, inout listener : Response::ErrorListener)
        mMethod = method;
        mUrl = url;
        mErrorListener = listener;
        setRetryPolicy(new DefaultRetryPolicy());

        mDefaultTrafficStatsTag = findDefaultTrafficStatsTag(url);
!!!40589751.java!!!	getMethod() : int
        return mMethod;
!!!40589879.java!!!	setTag(inout tag : Object) : Request
        mTag = tag;
        return this;
!!!40590007.java!!!	getTag() : Object
        return mTag;
!!!40590135.java!!!	getErrorListener() : Response::ErrorListener
        return mErrorListener;
!!!40590263.java!!!	getTrafficStatsTag() : int
        return mDefaultTrafficStatsTag;
!!!40590391.java!!!	findDefaultTrafficStatsTag(in url : String) : int
        if (!TextUtils.isEmpty(url)) {
            Uri uri = Uri.parse(url);
            if (uri != null) {
                String host = uri.getHost();
                if (host != null) {
                    return host.hashCode();
                }
            }
        }
        return 0;
!!!40590519.java!!!	setRetryPolicy(inout retryPolicy : RetryPolicy) : Request
        mRetryPolicy = retryPolicy;
        return this;
!!!40590647.java!!!	addMarker(in tag : String) : void
        if (MarkerLog.ENABLED) {
            mEventLog.add(tag, Thread.currentThread().getId());
        }
!!!40590775.java!!!	finish(in tag : String) : void
        if (mRequestQueue != null) {
            mRequestQueue.finish(this);
        }
        if (MarkerLog.ENABLED) {
            final long threadId = Thread.currentThread().getId();
            if (Looper.myLooper() != Looper.getMainLooper()) {
                // If we finish marking off of the main thread, we need to
                // actually do it on the main thread to ensure correct ordering.
                Handler mainThread = new Handler(Looper.getMainLooper());
                mainThread.post(new Runnable() {
                    @Override
                    public void run() {
                        mEventLog.add(tag, threadId);
                        mEventLog.finish(this.toString());
                    }
                });
                return;
            }

            mEventLog.add(tag, threadId);
            mEventLog.finish(this.toString());
        }
!!!40590903.java!!!	setRequestQueue(inout requestQueue : RequestQueue) : Request
        mRequestQueue = requestQueue;
        return this;
!!!40591031.java!!!	setSequence(in sequence : int) : Request
        mSequence = sequence;
        return this;
!!!40591159.java!!!	getSequence() : int
        if (mSequence == null) {
            throw new IllegalStateException("getSequence called before setSequence");
        }
        return mSequence;
!!!40591287.java!!!	getUrl() : String
        return mUrl;
!!!40591415.java!!!	getCacheKey() : String
        return getUrl();
!!!40591543.java!!!	setCacheEntry(inout entry : Cache::Entry) : Request
        mCacheEntry = entry;
        return this;
!!!40591671.java!!!	getCacheEntry() : Cache::Entry
        return mCacheEntry;
!!!40591799.java!!!	cancel() : void
        mCanceled = true;
!!!40591927.java!!!	isCanceled() : boolean
        return mCanceled;
!!!40592055.java!!!	getHeaders() : Map<String, String>
        return Collections.emptyMap();
!!!40592183.java!!!	getPostParams() : Map<String, String>
        return getParams();
!!!40592311.java!!!	getPostParamsEncoding() : String
        return getParamsEncoding();
!!!40592439.java!!!	getPostBodyContentType() : String
        return getBodyContentType();
!!!40592567.java!!!	getPostBody() : byte
        // Note: For compatibility with legacy clients of volley, this implementation must remain
        // here instead of simply calling the getBody() function because this function must
        // call getPostParams() and getPostParamsEncoding() since legacy clients would have
        // overridden these two member functions for POST requests.
        Map<String, String> postParams = getPostParams();
        if (postParams != null && postParams.size() > 0) {
            return encodeParameters(postParams, getPostParamsEncoding());
        }
        return null;
!!!40592695.java!!!	getParams() : Map<String, String>
        return null;
!!!40592823.java!!!	getParamsEncoding() : String
        return DEFAULT_PARAMS_ENCODING;
!!!40592951.java!!!	getBodyContentType() : String
        return "application/x-www-form-urlencoded; charset=" + getParamsEncoding();
!!!40593079.java!!!	getBody() : byte
        Map<String, String> params = getParams();
        if (params != null && params.size() > 0) {
            return encodeParameters(params, getParamsEncoding());
        }
        return null;
!!!40593207.java!!!	encodeParameters(inout params : Map<String, String>, in paramsEncoding : String) : byte
        StringBuilder encodedParams = new StringBuilder();
        try {
            for (Map.Entry<String, String> entry : params.entrySet()) {
                encodedParams.append(URLEncoder.encode(entry.getKey(), paramsEncoding));
                encodedParams.append('=');
                encodedParams.append(URLEncoder.encode(entry.getValue(), paramsEncoding));
                encodedParams.append('&');
            }
            return encodedParams.toString().getBytes(paramsEncoding);
        } catch (UnsupportedEncodingException uee) {
            throw new RuntimeException("Encoding not supported: " + paramsEncoding, uee);
        }
!!!40593335.java!!!	setShouldCache(inout shouldCache : boolean) : Request
        mShouldCache = shouldCache;
        return this;
!!!40593463.java!!!	shouldCache() : boolean
        return mShouldCache;
!!!40593591.java!!!	getPriority() : Request::Priority
        return Priority.NORMAL;
!!!40593719.java!!!	getTimeoutMs() : int
        return mRetryPolicy.getCurrentTimeout();
!!!40593847.java!!!	getRetryPolicy() : RetryPolicy
        return mRetryPolicy;
!!!40593975.java!!!	markDelivered() : void
        mResponseDelivered = true;
!!!40594103.java!!!	hasHadResponseDelivered() : boolean
        return mResponseDelivered;
!!!40594359.java!!!	parseNetworkError(inout volleyError : VolleyError) : VolleyError
        return volleyError;
!!!40594615.java!!!	deliverError(inout error : VolleyError) : void
        if (mErrorListener != null) {
            mErrorListener.onErrorResponse(error);
        }
!!!40594743.java!!!	compareTo(inout other : Request) : int
        Priority left = this.getPriority();
        Priority right = other.getPriority();

        // High-priority requests are "lesser" so they are sorted to the front.
        // Equal priorities are sorted by sequence number to provide FIFO ordering.
        return left == right ?
                this.mSequence - other.mSequence :
                right.ordinal() - left.ordinal();
!!!40594871.java!!!	toString() : String
        String trafficStatsTag = "0x" + Integer.toHexString(getTrafficStatsTag());
        return (mCanceled ? "[X] " : "[ ] ") + getUrl() + " " + trafficStatsTag + " "
                + getPriority() + " " + mSequence;
