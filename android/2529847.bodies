class GravitySensor
!!!40862135.cpp!!!	GravitySensor(in list : sensor_t, in count : size_t)
    for (size_t i=0 ; i<count ; i++) {
        if (list[i].type == SENSOR_TYPE_ACCELEROMETER) {
            mAccelerometer = Sensor(list + i);
            break;
        }
    }

    const sensor_t sensor = {
        .name       = "Gravity Sensor",
        .vendor     = "AOSP",
        .version    = 3,
        .handle     = '_grv',
        .type       = SENSOR_TYPE_GRAVITY,
        .maxRange   = GRAVITY_EARTH * 2,
        .resolution = mAccelerometer.getResolution(),
        .power      = mSensorFusion.getPowerUsage(),
        .minDelay   = mSensorFusion.getMinDelay(),
    };
    mSensor = Sensor(&sensor);
!!!40862263.cpp!!!	process(inout outEvent : sensors_event_t, in event : sensors_event_t) : bool
    if (event.type == SENSOR_TYPE_ACCELEROMETER) {
        vec3_t g;
        if (!mSensorFusion.hasEstimate(FUSION_NOMAG))
            return false;
        const mat33_t R(mSensorFusion.getRotationMatrix(FUSION_NOMAG));
        // FIXME: we need to estimate the length of gravity because
        // the accelerometer may have a small scaling error. This
        // translates to an offset in the linear-acceleration sensor.
        g = R[2] * GRAVITY_EARTH;

        *outEvent = event;
        outEvent->data[0] = g.x;
        outEvent->data[1] = g.y;
        outEvent->data[2] = g.z;
        outEvent->sensor = '_grv';
        outEvent->type = SENSOR_TYPE_GRAVITY;
        return true;
    }
    return false;
!!!40862391.cpp!!!	activate(inout ident : void, in enabled : bool) : status_t
    return mSensorFusion.activate(FUSION_NOMAG, ident, enabled);
!!!40862519.cpp!!!	setDelay(inout ident : void, in handle : int, in ns : int64_t) : status_t
    return mSensorFusion.setDelay(FUSION_NOMAG, ident, ns);
