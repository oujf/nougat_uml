class Display
!!!40958135.cpp!!!	Display(inout device : Device, in id : hwc2_display_t)
    ALOGV("Created display %" PRIu64, id);
!!!40958263.cpp!!!	~Display()
    ALOGV("Destroyed display %" PRIu64, mId);
    if (mIsVirtual) {
        mDevice.destroyVirtualDisplay(mId);
    }
!!!40960439.cpp!!!	acceptChanges() : Error
    int32_t intError = mDevice.mAcceptDisplayChanges(mDevice.mHwcDevice, mId);
    return static_cast<Error>(intError);
!!!40960567.cpp!!!	createLayer(inout outLayer : std::shared_ptr<Layer>) : Error
    hwc2_layer_t layerId = 0;
    int32_t intError = mDevice.mCreateLayer(mDevice.mHwcDevice, mId, &layerId);
    auto error = static_cast<Error>(intError);
    if (error != Error::None) {
        return error;
    }

    auto layer = std::make_shared<Layer>(shared_from_this(), layerId);
    mLayers.emplace(layerId, layer);
    *outLayer = std::move(layer);
    return Error::None;
!!!40960823.cpp!!!	getChangedCompositionTypes(inout outTypes : std::unordered_map<std::shared_ptr<Layer>, Composition>) : Error
    uint32_t numElements = 0;
    int32_t intError = mDevice.mGetChangedCompositionTypes(mDevice.mHwcDevice,
            mId, &numElements, nullptr, nullptr);
    auto error = static_cast<Error>(intError);
    if (error != Error::None) {
        return error;
    }

    std::vector<hwc2_layer_t> layerIds(numElements);
    std::vector<int32_t> types(numElements);
    intError = mDevice.mGetChangedCompositionTypes(mDevice.mHwcDevice, mId,
            &numElements, layerIds.data(), types.data());
    error = static_cast<Error>(intError);
    if (error != Error::None) {
        return error;
    }

    outTypes->clear();
    outTypes->reserve(numElements);
    for (uint32_t element = 0; element < numElements; ++element) {
        auto layer = getLayerById(layerIds[element]);
        if (layer) {
            auto type = static_cast<Composition>(types[element]);
            ALOGV("getChangedCompositionTypes: adding %" PRIu64 " %s",
                    layer->getId(), to_string(type).c_str());
            outTypes->emplace(layer, type);
        } else {
            ALOGE("getChangedCompositionTypes: invalid layer %" PRIu64 " found"
                    " on display %" PRIu64, layerIds[element], mId);
        }
    }

    return Error::None;
!!!40960951.cpp!!!	getColorModes(inout outModes : std::vector<int32_t>) : Error
    uint32_t numModes = 0;
    int32_t intError = mDevice.mGetColorModes(mDevice.mHwcDevice, mId,
            &numModes, nullptr);
    auto error = static_cast<Error>(intError);
    if (error != Error::None)  {
        return error;
    }

    std::vector<int32_t> modes(numModes);
    intError = mDevice.mGetColorModes(mDevice.mHwcDevice, mId, &numModes,
            modes.data());
    error = static_cast<Error>(intError);
    if (error != Error::None) {
        return error;
    }

    std::swap(*outModes, modes);
    return Error::None;
!!!40961079.cpp!!!	getConfigs() : std::vector<std::shared_ptr<const Config>>
    std::vector<std::shared_ptr<const Config>> configs;
    for (const auto& element : mConfigs) {
        configs.emplace_back(element.second);
    }
    return configs;
!!!40961207.cpp!!!	getName(inout outName : std::string) : Error
    uint32_t size;
    int32_t intError = mDevice.mGetDisplayName(mDevice.mHwcDevice, mId, &size,
            nullptr);
    auto error = static_cast<Error>(intError);
    if (error != Error::None) {
        return error;
    }

    std::vector<char> rawName(size);
    intError = mDevice.mGetDisplayName(mDevice.mHwcDevice, mId, &size,
            rawName.data());
    error = static_cast<Error>(intError);
    if (error != Error::None) {
        return error;
    }

    *outName = std::string(rawName.cbegin(), rawName.cend());
    return Error::None;
!!!40961463.cpp!!!	getType(inout outType : DisplayType) : Error
    int32_t intType = 0;
    int32_t intError = mDevice.mGetDisplayType(mDevice.mHwcDevice, mId,
            &intType);
    auto error = static_cast<Error>(intError);
    if (error != Error::None) {
        return error;
    }

    *outType = static_cast<DisplayType>(intType);
    return Error::None;
!!!40961591.cpp!!!	supportsDoze(inout outSupport : bool) : Error
    int32_t intSupport = 0;
    int32_t intError = mDevice.mGetDozeSupport(mDevice.mHwcDevice, mId,
            &intSupport);
    auto error = static_cast<Error>(intError);
    if (error != Error::None) {
        return error;
    }
    *outSupport = static_cast<bool>(intSupport);
    return Error::None;
!!!40962103.cpp!!!	setActiveConfig(in config : std::shared_ptr<const Config>) : Error
    if (config->getDisplayId() != mId) {
        ALOGE("setActiveConfig received config %u for the wrong display %"
                PRIu64 " (expected %" PRIu64 ")", config->getId(),
                config->getDisplayId(), mId);
        return Error::BadConfig;
    }
    int32_t intError = mDevice.mSetActiveConfig(mDevice.mHwcDevice, mId,
            config->getId());
    return static_cast<Error>(intError);
!!!40962359.cpp!!!	setColorMode(in mode : int32_t) : Error
    int32_t intError = mDevice.mSetColorMode(mDevice.mHwcDevice, mId, mode);
    return static_cast<Error>(intError);
!!!40962487.cpp!!!	setColorTransform(in matrix : android::mat4, in hint : android_color_transform_t) : Error
    int32_t intError = mDevice.mSetColorTransform(mDevice.mHwcDevice, mId,
            matrix.asArray(), static_cast<int32_t>(hint));
    return static_cast<Error>(intError);
!!!40962743.cpp!!!	setPowerMode(in mode : PowerMode) : Error
    auto intMode = static_cast<int32_t>(mode);
    int32_t intError = mDevice.mSetPowerMode(mDevice.mHwcDevice, mId, intMode);
    return static_cast<Error>(intError);
!!!40962871.cpp!!!	setVsyncEnabled(in enabled : Vsync) : Error
    auto intEnabled = static_cast<int32_t>(enabled);
    int32_t intError = mDevice.mSetVsyncEnabled(mDevice.mHwcDevice, mId,
            intEnabled);
    return static_cast<Error>(intError);
!!!40962999.cpp!!!	validate(inout outNumTypes : uint32_t, inout outNumRequests : uint32_t) : Error
    uint32_t numTypes = 0;
    uint32_t numRequests = 0;
    int32_t intError = mDevice.mValidateDisplay(mDevice.mHwcDevice, mId,
            &numTypes, &numRequests);
    auto error = static_cast<Error>(intError);
    if (error != Error::None && error != Error::HasChanges) {
        return error;
    }

    *outNumTypes = numTypes;
    *outNumRequests = numRequests;
    return error;
!!!40963767.cpp!!!	getAttribute(in configId : hwc2_config_t, in attribute : Attribute) : int32_t
    int32_t value = 0;
    int32_t intError = mDevice.mGetDisplayAttribute(mDevice.mHwcDevice, mId,
            configId, static_cast<int32_t>(attribute), &value);
    auto error = static_cast<Error>(intError);
    if (error != Error::None) {
        ALOGE("getDisplayAttribute(%" PRIu64 ", %u, %s) failed: %s (%d)", mId,
                configId, to_string(attribute).c_str(),
                to_string(error).c_str(), intError);
        return -1;
    }
    return value;
!!!40963895.cpp!!!	loadConfig(in configId : hwc2_config_t) : void
    ALOGV("[%" PRIu64 "] loadConfig(%u)", mId, configId);

    auto config = Config::Builder(*this, configId)
            .setWidth(getAttribute(configId, Attribute::Width))
            .setHeight(getAttribute(configId, Attribute::Height))
            .setVsyncPeriod(getAttribute(configId, Attribute::VsyncPeriod))
            .setDpiX(getAttribute(configId, Attribute::DpiX))
            .setDpiY(getAttribute(configId, Attribute::DpiY))
            .build();
    mConfigs.emplace(configId, std::move(config));
!!!40964023.cpp!!!	loadConfigs() : void
    ALOGV("[%" PRIu64 "] loadConfigs", mId);

    uint32_t numConfigs = 0;
    int32_t intError = mDevice.mGetDisplayConfigs(mDevice.mHwcDevice, mId,
            &numConfigs, nullptr);
    auto error = static_cast<Error>(intError);
    if (error != Error::None) {
        ALOGE("[%" PRIu64 "] getDisplayConfigs [1] failed: %s (%d)", mId,
                to_string(error).c_str(), intError);
        return;
    }

    std::vector<hwc2_config_t> configIds(numConfigs);
    intError = mDevice.mGetDisplayConfigs(mDevice.mHwcDevice, mId, &numConfigs,
            configIds.data());
    error = static_cast<Error>(intError);
    if (error != Error::None) {
        ALOGE("[%" PRIu64 "] getDisplayConfigs [2] failed: %s (%d)", mId,
                to_string(error).c_str(), intError);
        return;
    }

    for (auto configId : configIds) {
        loadConfig(configId);
    }
!!!40964151.cpp!!!	destroyLayer(in layerId : hwc2_layer_t) : void
    int32_t intError = mDevice.mDestroyLayer(mDevice.mHwcDevice, mId, layerId);
    auto error = static_cast<Error>(intError);
    ALOGE_IF(error != Error::None, "destroyLayer(%" PRIu64 ", %" PRIu64 ")"
            " failed: %s (%d)", mId, layerId, to_string(error).c_str(),
            intError);
    mLayers.erase(layerId);
!!!40964279.cpp!!!	getLayerById(in id : hwc2_layer_t) : std::shared_ptr<Layer>
    if (mLayers.count(id) == 0) {
        return nullptr;
    }

    auto layer = mLayers.at(id).lock();
    return layer;
