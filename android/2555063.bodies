class Config
!!!40976183.cpp!!!	setAttribute(in attribute : HWC2::Attribute, in value : int32_t) : void
    mAttributes[attribute] = value;
!!!40976439.cpp!!!	setHwc1Id(in id : uint32_t) : void
    int32_t colorTransform = getAttribute(ColorTransform);
    mHwc1Ids.emplace(colorTransform, id);
!!!40976567.cpp!!!	hasHwc1Id(in id : uint32_t) : bool
    for (const auto& idPair : mHwc1Ids) {
        if (id == idPair.second) {
            return true;
        }
    }
    return false;
!!!40976695.cpp!!!	getColorModeForHwc1Id(in id : uint32_t) : int32_t
    for (const auto& idPair : mHwc1Ids) {
        if (id == idPair.second) {
            return idPair.first;
        }
    }
    return -1;
!!!40976823.cpp!!!	getHwc1IdForColorMode(in mode : int32_t, inout outId : uint32_t) : HWC2::Error
    for (const auto& idPair : mHwc1Ids) {
        if (mode == idPair.first) {
            *outId = idPair.second;
            return Error::None;
        }
    }
    ALOGE("Unable to find HWC1 ID for color mode %d on config %u", mode, mId);
    return Error::BadParameter;
!!!40977207.cpp!!!	merge(in other : HWC2On1Adapter::Display::Config) : bool
    auto attributes = {HWC2::Attribute::Width, HWC2::Attribute::Height,
            HWC2::Attribute::VsyncPeriod, HWC2::Attribute::DpiX,
            HWC2::Attribute::DpiY};
    for (auto attribute : attributes) {
        if (getAttribute(attribute) != other.getAttribute(attribute)) {
            return false;
        }
    }
    int32_t otherColorTransform = other.getAttribute(ColorTransform);
    if (mHwc1Ids.count(otherColorTransform) != 0) {
        ALOGE("Attempted to merge two configs (%u and %u) which appear to be "
                "identical", mHwc1Ids.at(otherColorTransform),
                other.mHwc1Ids.at(otherColorTransform));
        return false;
    }
    mHwc1Ids.emplace(otherColorTransform,
            other.mHwc1Ids.at(otherColorTransform));
    return true;
!!!40977335.cpp!!!	getColorTransforms() : std::set<int32_t>
    std::set<int32_t> colorTransforms;
    for (const auto& idPair : mHwc1Ids) {
        colorTransforms.emplace(idPair.first);
    }
    return colorTransforms;
!!!40977463.cpp!!!	toString(in splitLine : bool = false) : std::string
    std::string output;

    const size_t BUFFER_SIZE = 100;
    char buffer[BUFFER_SIZE] = {};
    auto writtenBytes = snprintf(buffer, BUFFER_SIZE,
            "%u x %u", mAttributes.at(HWC2::Attribute::Width),
            mAttributes.at(HWC2::Attribute::Height));
    output.append(buffer, writtenBytes);

    if (mAttributes.count(HWC2::Attribute::VsyncPeriod) != 0) {
        std::memset(buffer, 0, BUFFER_SIZE);
        writtenBytes = snprintf(buffer, BUFFER_SIZE, " @ %.1f Hz",
                1e9 / mAttributes.at(HWC2::Attribute::VsyncPeriod));
        output.append(buffer, writtenBytes);
    }

    if (mAttributes.count(HWC2::Attribute::DpiX) != 0 &&
            mAttributes.at(HWC2::Attribute::DpiX) != -1) {
        std::memset(buffer, 0, BUFFER_SIZE);
        writtenBytes = snprintf(buffer, BUFFER_SIZE,
                ", DPI: %.1f x %.1f",
                mAttributes.at(HWC2::Attribute::DpiX) / 1000.0f,
                mAttributes.at(HWC2::Attribute::DpiY) / 1000.0f);
        output.append(buffer, writtenBytes);
    }

    std::memset(buffer, 0, BUFFER_SIZE);
    if (splitLine) {
        writtenBytes = snprintf(buffer, BUFFER_SIZE,
                "\n        HWC1 ID/Color transform:");
    } else {
        writtenBytes = snprintf(buffer, BUFFER_SIZE,
                ", HWC1 ID/Color transform:");
    }
    output.append(buffer, writtenBytes);


    for (const auto& id : mHwc1Ids) {
        int32_t colorTransform = id.first;
        uint32_t hwc1Id = id.second;
        std::memset(buffer, 0, BUFFER_SIZE);
        if (colorTransform == mDisplay.mActiveColorMode) {
            writtenBytes = snprintf(buffer, BUFFER_SIZE, " [%u/%d]", hwc1Id,
                    colorTransform);
        } else {
            writtenBytes = snprintf(buffer, BUFFER_SIZE, " %u/%d", hwc1Id,
                    colorTransform);
        }
        output.append(buffer, writtenBytes);
    }

    return output;
