class Layer
!!!40981943.cpp!!!	setBuffer(in buffer : buffer_handle_t, in acquireFence : int32_t) : HWC2::Error
    ALOGV("Setting acquireFence to %d for layer %" PRIu64, acquireFence, mId);
    mBuffer.setBuffer(buffer);
    mBuffer.setFence(acquireFence);
    return Error::None;
!!!40982071.cpp!!!	setCursorPosition(in x : int32_t, in y : int32_t) : HWC2::Error
    if (mCompositionType.getValue() != Composition::Cursor) {
        return Error::BadLayer;
    }

    if (mDisplay.hasChanges()) {
        return Error::NotValidated;
    }

    auto displayId = mDisplay.getHwc1Id();
    auto hwc1Device = mDisplay.getDevice().getHwc1Device();
    hwc1Device->setCursorPositionAsync(hwc1Device, displayId, x, y);
    return Error::None;
!!!40982199.cpp!!!	setSurfaceDamage(in damage : hwc_region_t) : HWC2::Error
    mSurfaceDamage.resize(damage.numRects);
    std::copy_n(damage.rects, damage.numRects, mSurfaceDamage.begin());
    return Error::None;
!!!40982455.cpp!!!	setColor(in color : hwc_color_t) : HWC2::Error
    mColor.setPending(color);
    return Error::None;
!!!40982711.cpp!!!	setDataspace(in dataspace : android_dataspace_t) : HWC2::Error
    mHasUnsupportedDataspace = (dataspace != HAL_DATASPACE_UNKNOWN);
    return Error::None;
!!!40982839.cpp!!!	setDisplayFrame(in frame : hwc_rect_t) : HWC2::Error
    mDisplayFrame.setPending(frame);
    return Error::None;
!!!40982967.cpp!!!	setPlaneAlpha(in alpha : float) : HWC2::Error
    mPlaneAlpha.setPending(alpha);
    return Error::None;
!!!40983095.cpp!!!	setSidebandStream(in stream : native_handle_t) : HWC2::Error
    mSidebandStream.setPending(stream);
    return Error::None;
!!!40983223.cpp!!!	setSourceCrop(in crop : hwc_frect_t) : HWC2::Error
    mSourceCrop.setPending(crop);
    return Error::None;
!!!40983479.cpp!!!	setVisibleRegion(in rawVisible : hwc_region_t) : HWC2::Error
    std::vector<hwc_rect_t> visible(rawVisible.rects,
            rawVisible.rects + rawVisible.numRects);
    mVisibleRegion.setPending(std::move(visible));
    return Error::None;
!!!40983607.cpp!!!	setZ(in z : uint32_t) : HWC2::Error
    mZ = z;
    return Error::None;
!!!40983991.cpp!!!	addReleaseFence(in fenceFd : int) : void
    ALOGV("addReleaseFence %d to layer %" PRIu64, fenceFd, mId);
    mReleaseFence.add(fenceFd);
!!!40984119.cpp!!!	getReleaseFence() : sp<Fence>
    return mReleaseFence.get();
!!!40984631.cpp!!!	dump() : std::string
    std::stringstream output;
    const char* fill = "      ";

    output << fill << to_string(mCompositionType.getPendingValue());
    output << " Layer  HWC2/1: " << mId << "/" << mHwc1Id << "  ";
    output << "Z: " << mZ;
    if (mCompositionType.getValue() == HWC2::Composition::SolidColor) {
        output << "  " << colorString(mColor.getValue());
    } else if (mCompositionType.getValue() == HWC2::Composition::Sideband) {
        output << "  Handle: " << mSidebandStream.getValue() << '\n';
    } else {
        output << "  Buffer: " << mBuffer.getBuffer() << "/" <<
                mBuffer.getFence() << '\n';
        output << fill << "  Display frame [LTRB]: " <<
                rectString(mDisplayFrame.getValue()) << '\n';
        output << fill << "  Source crop: " <<
                frectString(mSourceCrop.getValue()) << '\n';
        output << fill << "  Transform: " << to_string(mTransform.getValue());
        output << "  Blend mode: " << to_string(mBlendMode.getValue());
        if (mPlaneAlpha.getValue() != 1.0f) {
            output << "  Alpha: " <<
                alphaString(mPlaneAlpha.getValue()) << '\n';
        } else {
            output << '\n';
        }
        output << regionStrings(mVisibleRegion.getValue(), mSurfaceDamage);
    }
    return output.str();
