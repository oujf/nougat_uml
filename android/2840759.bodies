class UUID
!!!41858871.cpp!!!	GetRandom() : UUID
  UUID128Bit bytes;
  base::RandBytes(bytes.data(), bytes.size());
  return UUID(bytes);
!!!41858999.cpp!!!	GetNil() : UUID
  UUID128Bit bytes;
  bytes.fill(0);
  return UUID(bytes);
!!!41859127.cpp!!!	GetMax() : UUID
  UUID128Bit bytes;
  bytes.fill(1);
  return UUID(bytes);
!!!41859255.cpp!!!	UUID()
  InitializeDefault();
!!!41859383.cpp!!!	UUID(in uuid : bt_uuid_t)
  std::reverse_copy(uuid.uu, uuid.uu + sizeof(uuid.uu), id_.begin());
  is_valid_ = true;
!!!41859511.cpp!!!	UUID(in uuid : std::string)
  InitializeDefault();
  is_valid_ = false;

  if (uuid.empty())
    return;

  if (uuid.size() < 11 && uuid.find("0x") == 0)
    uuid = uuid.substr(2);

  if (uuid.size() != 4 && uuid.size() != 8 && uuid.size() != 36)
    return;

  if (uuid.size() == 36) {
    if (uuid[8] != '-')
      return;
    if (uuid[13] != '-')
      return;
    if (uuid[18] != '-')
      return;
    if (uuid[23] != '-')
      return;

    std::vector<std::string> tokens = base::SplitString(
        uuid, "-", base::TRIM_WHITESPACE, base::SPLIT_WANT_ALL);

    if (tokens.size() != 5)
      return;

    uuid = base::JoinString(tokens, "");
  }

  const int start_index = uuid.size() == 4 ? 2 : 0;
  const size_t copy_size = std::min(id_.size(), uuid.size() / 2);
  for (size_t i = 0; i < copy_size; ++i) {
      std::string octet_text(uuid, i * 2, 2);
      char* temp = nullptr;
      id_[start_index + i] = strtol(octet_text.c_str(), &temp, 16);
      if (*temp != '\0')
        return;
  }

  is_valid_ = true;
!!!41859639.cpp!!!	UUID(in uuid : UUID::UUID16Bit)
  InitializeDefault();
  std::copy(uuid.begin(), uuid.end(), id_.begin() + kNumBytes16);
!!!41859767.cpp!!!	UUID(in uuid : UUID::UUID32Bit)
  InitializeDefault();
  std::copy(uuid.begin(), uuid.end(), id_.begin());
!!!41860023.cpp!!!	GetFullBigEndian() : UUID::UUID128Bit
  return id_;
!!!41860151.cpp!!!	GetFullLittleEndian() : UUID::UUID128Bit
  UUID::UUID128Bit ret;
  std::reverse_copy(id_.begin(), id_.end(), ret.begin());
  return ret;
!!!41860279.cpp!!!	GetBlueDroid() : bt_uuid_t
  bt_uuid_t ret;
  std::reverse_copy(id_.begin(), id_.end(), ret.uu);
  return ret;
!!!41860407.cpp!!!	ToString() : std::string
  return base::StringPrintf(
      "%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
      id_[0], id_[1], id_[2], id_[3],
      id_[4], id_[5], id_[6], id_[7],
      id_[8], id_[9], id_[10], id_[11],
      id_[12], id_[13], id_[14], id_[15]);
!!!41860663.cpp!!!	GetShortestRepresentationSize() : size_t
  if (memcmp(id_.data() + 4, kSigBaseUUID.data() + 4, id_.size() - 4) != 0)
    return kNumBytes128;

  if (id_[0] == 0 && id_[1] == 0)
    return kNumBytes16;

  return kNumBytes32;
!!!41860791.cpp!!!	operator <(in rhs : UUID) : bool
  return std::lexicographical_compare(id_.begin(), id_.end(), rhs.id_.begin(),
                                      rhs.id_.end());
!!!41860919.cpp!!!	operator ==(in rhs : UUID) : bool
  return std::equal(id_.begin(), id_.end(), rhs.id_.begin());
!!!41861175.cpp!!!	InitializeDefault() : void
  // Initialize to Bluetooth SIG base UUID.
  id_ = kSigBaseUUID;
  is_valid_ = true;
