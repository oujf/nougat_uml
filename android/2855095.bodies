class IPCManager
!!!41900983.cpp!!!	IPCManager(inout adapter : Adapter)
  CHECK(adapter_);
!!!41901111.cpp!!!	~IPCManager()
  // Don't rely on the handlers getting destroyed since another thread might be
  // holding a reference to them. Instead, explicitly stop them here.
  if (BinderStarted())
    binder_handler_->Stop();
  if (LinuxStarted())
    linux_handler_->Stop();
!!!41901239.cpp!!!	Start(in type : IPCManager::Type, inout delegate : IPCManager::Delegate) : bool
  switch (type) {
  case TYPE_LINUX:
    if (LinuxStarted()) {
      LOG(ERROR) << "IPCManagerLinux already started.";
      return false;
    }

    linux_handler_ = new IPCHandlerLinux(adapter_, delegate);
    if (!linux_handler_->Run()) {
      linux_handler_ = nullptr;
      return false;
    }
    return true;

  case TYPE_BINDER:
    if (BinderStarted()) {
      LOG(ERROR) << "IPCManagerBinder already started.";
      return false;
    }

    binder_handler_ = new IPCHandlerBinder(adapter_, delegate);
    if (!binder_handler_->Run()) {
      binder_handler_ = nullptr;
      return false;
    }
    return true;

  default:
    LOG(ERROR) << "Unsupported IPC type given: " << type;
  }

  return false;
!!!41901367.cpp!!!	BinderStarted() : bool
  return binder_handler_.get();
!!!41901495.cpp!!!	LinuxStarted() : bool
  return linux_handler_.get();
