class BluetoothLowEnergyBinderServer
!!!41909431.cpp!!!	BluetoothLowEnergyBinderServer(inout adapter : Adapter)
  CHECK(adapter_);
!!!41909687.cpp!!!	RegisterClient(in callback : android::sp<IBluetoothLowEnergyCallback>) : bool
  VLOG(2) << __func__;
  bluetooth::LowEnergyClientFactory* ble_factory =
      adapter_->GetLowEnergyClientFactory();

  return RegisterInstanceBase(callback, ble_factory);
!!!41909815.cpp!!!	UnregisterClient(in client_id : int) : void
  VLOG(2) << __func__;
  UnregisterInstanceBase(client_id);
!!!41909943.cpp!!!	UnregisterAll() : void
  VLOG(2) << __func__;
  UnregisterAllBase();
!!!41910071.cpp!!!	Connect(in client_id : int, in address : char, in is_direct : bool) : bool
  VLOG(2) << __func__ << " client_id: " << client_id
          << " address: " << address
          << " is_direct: " << is_direct;
  std::lock_guard<std::mutex> lock(*maps_lock());

  auto client = GetLEClient(client_id);
  if (!client) {
    LOG(ERROR) << "Unknown client_id: " << client_id;
    return false;
  }

  return client->Connect(std::string(address), is_direct);
!!!41910199.cpp!!!	Disconnect(in client_id : int, in address : char) : bool
  VLOG(2) << __func__ << " client_id: " << client_id
          << " address: " << address;
  std::lock_guard<std::mutex> lock(*maps_lock());

  auto client = GetLEClient(client_id);
  if (!client) {
    LOG(ERROR) << "Unknown client_id: " << client_id;
    return false;
  }

  return client->Disconnect(std::string(address));
!!!41910327.cpp!!!	SetMtu(in client_id : int, in address : char, in mtu : int) : bool
  VLOG(2) << __func__ << " client_id: " << client_id
          << " address: " << address
          << " mtu: " << mtu;
  std::lock_guard<std::mutex> lock(*maps_lock());

  auto client = GetLEClient(client_id);
  if (!client) {
    LOG(ERROR) << "Unknown client_id: " << client_id;
    return false;
  }

  return client->SetMtu(address, mtu);
!!!41910455.cpp!!!	StartScan(in client_id : int, in settings : ScanSettings, in filters : std::vector<bluetooth::ScanFilter>) : bool
  VLOG(2) << __func__ << " client_id: " << client_id;
  std::lock_guard<std::mutex> lock(*maps_lock());

  auto client = GetLEClient(client_id);
  if (!client) {
    LOG(ERROR) << "Unknown client_id: " << client_id;
    return false;
  }

  return client->StartScan(settings, filters);
!!!41910583.cpp!!!	StopScan(in client_id : int) : bool
  VLOG(2) << __func__ << " client_id: " << client_id;
  std::lock_guard<std::mutex> lock(*maps_lock());

  auto client = GetLEClient(client_id);
  if (!client) {
    LOG(ERROR) << "Unknown client_id: " << client_id;
    return false;
  }

  return client->StopScan();
!!!41910711.cpp!!!	StartMultiAdvertising(in client_id : int, in advertise_data : bluetooth::AdvertiseData, in scan_response : bluetooth::AdvertiseData, in settings : AdvertiseSettings) : bool
  VLOG(2) << __func__ << " client_id: " << client_id;
  std::lock_guard<std::mutex> lock(*maps_lock());

  auto client = GetLEClient(client_id);
  if (!client) {
    LOG(ERROR) << "Unknown client_id: " << client_id;
    return false;
  }

  // Create a weak pointer and pass that to the callback to prevent a potential
  // use after free.
  android::wp<BluetoothLowEnergyBinderServer> weak_ptr_to_this(this);
  auto settings_copy = settings;
  auto callback = [=](bluetooth::BLEStatus status) {
    auto sp_to_this = weak_ptr_to_this.promote();
    if (!sp_to_this.get()) {
      VLOG(2) << "BluetoothLowEnergyBinderServer was deleted";
      return;
    }

    std::lock_guard<std::mutex> lock(*maps_lock());

    auto cb = GetLECallback(client_id);
    if (!cb.get()) {
      VLOG(1) << "Client was removed before callback: " << client_id;
      return;
    }

    cb->OnMultiAdvertiseCallback(status, true /* is_start */, settings_copy);
  };

  if (!client->StartAdvertising(
      settings, advertise_data, scan_response, callback)) {
    LOG(ERROR) << "Failed to initiate call to start advertising";
    return false;
  }

  return true;
!!!41910839.cpp!!!	StopMultiAdvertising(in client_id : int) : bool
  VLOG(2) << __func__;
  std::lock_guard<std::mutex> lock(*maps_lock());

  auto client = GetLEClient(client_id);
  if (!client) {
    LOG(ERROR) << "Unknown client_id: " << client_id;
    return false;
  }

  // Create a weak pointer and pass that to the callback to prevent a potential
  // use after free.
  android::wp<BluetoothLowEnergyBinderServer> weak_ptr_to_this(this);
  auto settings_copy = client->advertise_settings();
  auto callback = [=](bluetooth::BLEStatus status) {
    auto sp_to_this = weak_ptr_to_this.promote();
    if (!sp_to_this.get()) {
      VLOG(2) << "BluetoothLowEnergyBinderServer was deleted";
      return;
    }

    auto cb = GetLECallback(client_id);
    if (!cb.get()) {
      VLOG(2) << "Client was unregistered - client_id: " << client_id;
      return;
    }

    std::lock_guard<std::mutex> lock(*maps_lock());

    cb->OnMultiAdvertiseCallback(status, false /* is_start */, settings_copy);
  };

  if (!client->StopAdvertising(callback)) {
    LOG(ERROR) << "Failed to initiate call to start advertising";
    return false;
  }

  return true;
!!!41910967.cpp!!!	OnConnectionState(inout client : LowEnergyClient, in status : int, in address : char, in connected : bool) : void
  VLOG(2) << __func__ << " address: " << address << " connected: " << connected;

  int client_id = client->GetInstanceId();
  auto cb = GetLECallback(client->GetInstanceId());
  if (!cb.get()) {
    VLOG(2) << "Client was unregistered - client_id: " << client_id;
    return;
  }

  cb->OnConnectionState(status, client_id, address, connected);
!!!41911095.cpp!!!	OnMtuChanged(inout client : LowEnergyClient, in status : int, in address : char, in mtu : int) : void
  VLOG(2) << __func__ << " address: " << address
          << " status: " << status
          << " mtu: " << mtu;

  int client_id = client->GetInstanceId();
  auto cb = GetLECallback(client_id);
  if (!cb.get()) {
    VLOG(2) << "Client was unregistered - client_id: " << client_id;
    return;
  }

  cb->OnMtuChanged(status, address, mtu);
!!!41911223.cpp!!!	OnScanResult(inout client : LowEnergyClient, in result : ScanResult) : void
  VLOG(2) << __func__;
  std::lock_guard<std::mutex> lock(*maps_lock());

  int client_id = client->GetInstanceId();
  auto cb = GetLECallback(client->GetInstanceId());
  if (!cb.get()) {
    VLOG(2) << "Client was unregistered - client_id: " << client_id;
    return;
  }

  cb->OnScanResult(result);
!!!41911351.cpp!!!	GetLECallback(in client_id : int) : android::sp<IBluetoothLowEnergyCallback>
  auto cb = GetCallback(client_id);
  return android::sp<IBluetoothLowEnergyCallback>(
      static_cast<IBluetoothLowEnergyCallback*>(cb.get()));
!!!41911479.cpp!!!	GetLEClient(in client_id : int) : std::shared_ptr<bluetooth::LowEnergyClient>
  return std::static_pointer_cast<bluetooth::LowEnergyClient>(
      GetInstance(client_id));
!!!41911607.cpp!!!	OnRegisterInstanceImpl(in status : BLEStatus, in callback : android::sp<IInterface>, inout instance : BluetoothInstance) : void
  VLOG(1) << __func__ << " status: " << status;
  bluetooth::LowEnergyClient* le_client =
      static_cast<bluetooth::LowEnergyClient*>(instance);
  le_client->SetDelegate(this);

  android::sp<IBluetoothLowEnergyCallback> cb(
      static_cast<IBluetoothLowEnergyCallback*>(callback.get()));
  cb->OnClientRegistered(
      status,
      (status == bluetooth::BLE_STATUS_SUCCESS) ?
          instance->GetInstanceId() : kInvalidInstanceId);
