format 213
"include" // android::frameworks::av::drm::libdrmframework::plugins::common::include
  revision 1
  modified_by 55 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "D:/Workspace/AndroidSourceCode/nougat_src/frameworks/av/drm/libdrmframework/plugins/common/include/"
  cpp_src_dir "D:/Workspace/AndroidSourceCode/nougat_src/frameworks/av/drm/libdrmframework/plugins/common/include/"
  cpp_namespace "android"
  classview 273847 "include"
    
    classdiagramsettings member_max_width 0 end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 2497719 "IDrmEngine"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is an interface for plug-in user

Responsibility of this class is provide generic interface to DRM Engine Manager.
Each interface need to be as abstract as possible.
"
      class 2497847 "OnInfoListener"
	abstract visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 40712631 "onInfo"
	  abstract cpp_virtual public explicit_return_type "void"
	  nparams 1
	    param in name "event" type class_ref 2499383 // DrmInfoEvent
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 40712759 "~OnInfoListener"
	  cpp_virtual cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} { };
"
	  
	  
	  
	  
	end
      end

      operation 40712503 "~IDrmEngine"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 40712887 "initialize"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "uniqueId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "////////////////////////////////
 Implementation of IDrmEngine //
////////////////////////////////

Initialize plug-in

@param[in] uniqueId Unique identifier for a session
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure
"
      end

      operation 40713015 "setOnInfoListener"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "infoListener" type class_ref 2497847 // OnInfoListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Register a callback to be invoked when the caller required to
receive necessary information

@param[in] uniqueId Unique identifier for a session
@param[in] infoListener Listener
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure
"
      end

      operation 40713143 "terminate"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "uniqueId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Terminate the plug-in
and release resource bound to plug-in
e.g.) release native resource

@param[in] uniqueId Unique identifier for a session
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure
"
      end

      operation 40713271 "getConstraints"
	abstract cpp_virtual public return_type class_ref 2497975 // DrmConstraints
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" type class_ref 2495031 // String8
	  param in name "action" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get constraint information associated with input content

@param[in] uniqueId Unique identifier for a session
@param[in] path Path of the protected content
@param[in] action Actions defined such as,
    Action::DEFAULT, Action::PLAY, etc
@return DrmConstraints
    key-value pairs of constraint are embedded in it
@note
    In case of error, return NULL
"
      end

      operation 40713399 "getMetadata"
	abstract cpp_virtual public return_type class_ref 2498103 // DrmMetadata
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" type class_ref 2495031 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get metadata information associated with input content

@param[in] uniqueId Unique identifier for a session
@param[in] path Path of the protected content
@return DrmMetadata
        key-value pairs of metadata
@note
     In case of error, return NULL
"
      end

      operation 40713527 "canHandle"
	abstract cpp_virtual public explicit_return_type "bool"
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" type class_ref 2495031 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get whether the given content can be handled by this plugin or not

@param[in] uniqueId Unique identifier for a session
@param[in] path Path the protected object
@return bool
    true if this plugin can handle , false in case of not able to handle
"
      end

      operation 40713655 "processDrmInfo"
	abstract cpp_virtual public return_type class_ref 2498231 // DrmInfoStatus
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "drmInfo" type class_ref 2498359 // DrmInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes given drm information based on its type

@param[in] uniqueId Unique identifier for a session
@param[in] drmInfo Information needs to be processed
@return DrmInfoStatus
    instance as a result of processing given input
"
      end

      operation 40713783 "acquireDrmInfo"
	abstract cpp_virtual public return_type class_ref 2498359 // DrmInfo
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "drmInfoRequest" type class_ref 2498487 // DrmInfoRequest
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves necessary information for registration, unregistration or rights
acquisition information.

@param[in] uniqueId Unique identifier for a session
@param[in] drmInfoRequest Request information to retrieve drmInfo
@return DrmInfo
    instance as a result of processing given input
"
      end

      operation 40713911 "saveRights"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param in name "drmRights" type class_ref 2498615 // DrmRights
	  param in name "rightsPath" type class_ref 2495031 // String8
	  param in name "contentPath" type class_ref 2495031 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Save DRM rights to specified rights path
and make association with content path

@param[in] uniqueId Unique identifier for a session
@param[in] drmRights DrmRights to be saved
@param[in] rightsPath File path where rights to be saved
@param[in] contentPath File path where content was saved
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure
"
      end

      operation 40714039 "getOriginalMimeType"
	abstract cpp_virtual public return_type class_ref 2495031 // String8
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" type class_ref 2495031 // String8
	  param in name "fd" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the mime type embedded inside the original content

@param[in] uniqueId Unique identifier for a session
@param[in] path Path of the content or null.
@param[in] fd File descriptor of the protected content
@return String8
    Returns mime-type of the original content, such as \"video/mpeg\"
"
      end

      operation 40714167 "getDrmObjectType"
	abstract cpp_virtual public explicit_return_type "int"
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" type class_ref 2495031 // String8
	  param in name "mimeType" type class_ref 2495031 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the type of the protected object (content, rights, etc..)
using specified path or mimetype. At least one parameter should be non null
to retrieve DRM object type

@param[in] uniqueId Unique identifier for a session
@param[in] path Path of the content or null.
@param[in] mimeType Mime type of the content or null.
@return type of the DRM content,
    such as DrmObjectType::CONTENT, DrmObjectType::RIGHTS_OBJECT
"
      end

      operation 40714295 "checkRightsStatus"
	abstract cpp_virtual public explicit_return_type "int"
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" type class_ref 2495031 // String8
	  param in name "action" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check whether the given content has valid rights or not

@param[in] uniqueId Unique identifier for a session
@param[in] path Path of the protected content
@param[in] action Action to perform (Action::DEFAULT, Action::PLAY, etc)
@return the status of the rights for the protected content,
    such as RightsStatus::RIGHTS_VALID, RightsStatus::RIGHTS_EXPIRED, etc.
"
      end

      operation 40714423 "consumeRights"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 2498743 // DecryptHandle
	  param in name "action" explicit_type "int"
	  param in name "reserve" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Consumes the rights for a content.
If the reserve parameter is true the rights is reserved until the same
application calls this api again with the reserve parameter set to false.

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the decryption session
@param[in] action Action to perform. (Action::DEFAULT, Action::PLAY, etc)
@param[in] reserve True if the rights should be reserved.
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure
"
      end

      operation 40714551 "setPlaybackStatus"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 2498743 // DecryptHandle
	  param in name "playbackStatus" explicit_type "int"
	  param in name "position" explicit_type "int64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Informs the DRM Engine about the playback actions performed on the DRM files.

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the decryption session
@param[in] playbackStatus Playback action (Playback::START, Playback::STOP, Playback::PAUSE)
@param[in] position Position in the file (in milliseconds) where the start occurs.
    Only valid together with Playback::START.
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure
"
      end

      operation 40714679 "validateAction"
	abstract cpp_virtual public explicit_return_type "bool"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" type class_ref 2495031 // String8
	  param in name "action" explicit_type "int"
	  param in name "description" type class_ref 2498871 // ActionDescription
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Validates whether an action on the DRM content is allowed or not.

@param[in] uniqueId Unique identifier for a session
@param[in] path Path of the protected content
@param[in] action Action to validate (Action::PLAY, Action::TRANSFER, etc)
@param[in] description Detailed description of the action
@return true if the action is allowed.
"
      end

      operation 40714807 "removeRights"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" type class_ref 2495031 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the rights associated with the given protected content

@param[in] uniqueId Unique identifier for a session
@param[in] path Path of the protected content
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure
"
      end

      operation 40714935 "removeAllRights"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "uniqueId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all the rights information of each plug-in associated with
DRM framework. Will be used in master reset

@param[in] uniqueId Unique identifier for a session
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure
"
      end

      operation 40715063 "openConvertSession"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "convertId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This API is for Forward Lock based DRM scheme.
Each time the application tries to download a new DRM file
which needs to be converted, then the application has to
begin with calling this API.

@param[in] uniqueId Unique identifier for a session
@param[in] convertId Handle for the convert session
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure
"
      end

      operation 40715191 "convertData"
	abstract cpp_virtual public return_type class_ref 2498999 // DrmConvertedStatus
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param in name "convertId" explicit_type "int"
	  param in name "inputData" type class_ref 2499127 // DrmBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Accepts and converts the input data which is part of DRM file.
The resultant converted data and the status is returned in the DrmConvertedInfo
object. This method will be called each time there are new block
of data received by the application.

@param[in] uniqueId Unique identifier for a session
@param[in] convertId Handle for the convert session
@param[in] inputData Input Data which need to be converted
@return Return object contains the status of the data conversion,
    the output converted data and offset. In this case the
    application will ignore the offset information.
"
      end

      operation 40715319 "closeConvertSession"
	abstract cpp_virtual public return_type class_ref 2498999 // DrmConvertedStatus
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "convertId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Informs the Drm Agent when there is no more data which need to be converted
or when an error occurs. Upon successful conversion of the complete data,
the agent will inform that where the header and body signature
should be added. This signature appending is needed to integrity
protect the converted file.

@param[in] uniqueId Unique identifier for a session
@param[in] convertId Handle for the convert session
@return Return object contains the status of the data conversion,
    the header and body signature data. It also informs
    the application on which offset these signature data
    should be appended.
"
      end

      operation 40715447 "getSupportInfo"
	abstract cpp_virtual public return_type class_ref 2499255 // DrmSupportInfo
	nparams 1
	  param in name "uniqueId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the information about the Drm Engine capabilities which includes
supported MimeTypes and file suffixes.

@param[in] uniqueId Unique identifier for a session
@return DrmSupportInfo
    instance which holds the capabilities of a plug-in
"
      end

      operation 40715575 "openDecryptSession"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 6
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 2498743 // DecryptHandle
	  param in name "fd" explicit_type "int"
	  param in name "offset" explicit_type "off64_t"
	  param in name "length" explicit_type "off64_t"
	  param in name "mime" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, const ${t5} * ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Open the decrypt session to decrypt the given protected content

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the current decryption session
@param[in] fd File descriptor of the protected content to be decrypted
@param[in] offset Start position of the content
@param[in] length The length of the protected content
@param[in] mime Mime type of the protected content if it is
    not NULL or empty
@return
    DRM_ERROR_CANNOT_HANDLE for failure and DRM_NO_ERROR for success
"
      end

      operation 40715703 "openDecryptSession"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 2498743 // DecryptHandle
	  param in name "uri" explicit_type "char"
	  param in name "mime" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, const ${t2} * ${p2}${v2}, const ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Open the decrypt session to decrypt the given protected content

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the current decryption session
@param[in] uri Path of the protected content to be decrypted
@param[in] mime Mime type of the protected content if it is
    not NULL or empty
@return
    DRM_ERROR_CANNOT_HANDLE for failure and DRM_NO_ERROR for success
"
      end

      operation 40715831 "openDecryptSession"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 2498743 // DecryptHandle
	  param in name "buf" type class_ref 2499127 // DrmBuffer
	  param in name "mimeType" type class_ref 2495031 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Open the decrypt session to decrypt the given protected content

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the current decryption session
@param[in] buf Data to initiate decrypt session
@param[in] mimeType Mime type of the protected content
@return
    DRM_ERROR_CANNOT_HANDLE for failure and DRM_NO_ERROR for success
"
      end

      operation 40715959 "closeDecryptSession"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 2498743 // DecryptHandle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close the decrypt session for the given handle

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the decryption session
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure
"
      end

      operation 40716087 "initializeDecryptUnit"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 2498743 // DecryptHandle
	  param in name "decryptUnitId" explicit_type "int"
	  param in name "headerInfo" type class_ref 2499127 // DrmBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, const ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize decryption for the given unit of the protected content

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the decryption session
@param[in] decryptUnitId ID which specifies decryption unit, such as track ID
@param[in] headerInfo Information for initializing decryption of this decrypUnit
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure
"
      end

      operation 40716215 "decrypt"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 6
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 2498743 // DecryptHandle
	  param in name "decryptUnitId" explicit_type "int"
	  param in name "encBuffer" type class_ref 2499127 // DrmBuffer
	  param inout name "decBuffer" type class_ref 2499127 // DrmBuffer
	  param inout name "IV" type class_ref 2499127 // DrmBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, const ${t3} * ${p3}${v3}, ${t4} * * ${p4}${v4}, ${t5} * ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decrypt the protected content buffers for the given unit
This method will be called any number of times, based on number of
encrypted streams received from application.

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the decryption session
@param[in] decryptUnitId ID which specifies decryption unit, such as track ID
@param[in] encBuffer Encrypted data block
@param[out] decBuffer Decrypted data block
@param[in] IV Optional buffer
@return status_t
    Returns the error code for this API
    DRM_NO_ERROR for success, and one of DRM_ERROR_UNKNOWN, DRM_ERROR_LICENSE_EXPIRED
    DRM_ERROR_SESSION_NOT_OPENED, DRM_ERROR_DECRYPT_UNIT_NOT_INITIALIZED,
    DRM_ERROR_DECRYPT for failure.
"
      end

      operation 40716343 "finalizeDecryptUnit"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 2498743 // DecryptHandle
	  param in name "decryptUnitId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finalize decryption for the given unit of the protected content

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the decryption session
@param[in] decryptUnitId ID which specifies decryption unit, such as track ID
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure
"
      end

      operation 40716471 "pread"
	abstract cpp_virtual public explicit_return_type "ssize_t"
	nparams 5
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 2498743 // DecryptHandle
	  param inout name "buffer" explicit_type "void"
	  param in name "numBytes" explicit_type "ssize_t"
	  param in name "offset" explicit_type "off64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the specified number of bytes from an open DRM file.

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the decryption session
@param[out] buffer Reference to the buffer that should receive the read data.
@param[in] numBytes Number of bytes to read.
@param[in] offset Offset with which to update the file position.

@return Number of bytes read. Returns -1 for Failure.
"
      end
    end

    class 2503735 "DrmEngineBase"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is an interface for plug-in developers

Responsibility of this class is control the sequence of actual plug-in.
All each plug-in developer has to do is implement onXXX() type virtual interfaces.
"
      classrelation 5100855 // <generalisation>
	relation 5100855 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 5100855 // <generalisation>
	  b parent class_ref 2497719 // IDrmEngine
      end

      operation 40704567 "DrmEngineBase"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 40704695 "~DrmEngineBase"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 40704823 "getConstraints"
	public return_type class_ref 2497975 // DrmConstraints
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" type class_ref 2495031 // String8
	  param in name "action" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40704951 "getMetadata"
	public return_type class_ref 2498103 // DrmMetadata
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" type class_ref 2495031 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40705079 "initialize"
	public explicit_return_type "status_t"
	nparams 1
	  param in name "uniqueId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40705207 "setOnInfoListener"
	public explicit_return_type "status_t"
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "infoListener" type class_ref 2497847 // OnInfoListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40705335 "terminate"
	public explicit_return_type "status_t"
	nparams 1
	  param in name "uniqueId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40705463 "canHandle"
	public explicit_return_type "bool"
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" type class_ref 2495031 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40705591 "processDrmInfo"
	public return_type class_ref 2498231 // DrmInfoStatus
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "drmInfo" type class_ref 2498359 // DrmInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40705719 "saveRights"
	public explicit_return_type "status_t"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param in name "drmRights" type class_ref 2498615 // DrmRights
	  param in name "rightsPath" type class_ref 2495031 // String8
	  param in name "contentPath" type class_ref 2495031 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40705847 "acquireDrmInfo"
	public return_type class_ref 2498359 // DrmInfo
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "drmInfoRequest" type class_ref 2498487 // DrmInfoRequest
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40705975 "getOriginalMimeType"
	public return_type class_ref 2495031 // String8
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" type class_ref 2495031 // String8
	  param in name "fd" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40706103 "getDrmObjectType"
	public explicit_return_type "int"
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" type class_ref 2495031 // String8
	  param in name "mimeType" type class_ref 2495031 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40706231 "checkRightsStatus"
	public explicit_return_type "int"
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" type class_ref 2495031 // String8
	  param in name "action" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40706359 "consumeRights"
	public explicit_return_type "status_t"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 2498743 // DecryptHandle
	  param in name "action" explicit_type "int"
	  param in name "reserve" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40706487 "setPlaybackStatus"
	public explicit_return_type "status_t"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 2498743 // DecryptHandle
	  param in name "playbackStatus" explicit_type "int"
	  param in name "position" explicit_type "int64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40706615 "validateAction"
	public explicit_return_type "bool"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" type class_ref 2495031 // String8
	  param in name "action" explicit_type "int"
	  param in name "description" type class_ref 2498871 // ActionDescription
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} ${p2}, const ${t3} & ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40706743 "removeRights"
	public explicit_return_type "status_t"
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" type class_ref 2495031 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40706871 "removeAllRights"
	public explicit_return_type "status_t"
	nparams 1
	  param in name "uniqueId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40706999 "openConvertSession"
	public explicit_return_type "status_t"
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "convertId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40707127 "convertData"
	public return_type class_ref 2498999 // DrmConvertedStatus
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param in name "convertId" explicit_type "int"
	  param in name "inputData" type class_ref 2499127 // DrmBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, const ${t2} * ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40707255 "closeConvertSession"
	public return_type class_ref 2498999 // DrmConvertedStatus
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "convertId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40707383 "getSupportInfo"
	public return_type class_ref 2499255 // DrmSupportInfo
	nparams 1
	  param in name "uniqueId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40707511 "openDecryptSession"
	public explicit_return_type "status_t"
	nparams 6
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 2498743 // DecryptHandle
	  param in name "fd" explicit_type "int"
	  param in name "offset" explicit_type "off64_t"
	  param in name "length" explicit_type "off64_t"
	  param in name "mime" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, const ${t5} * ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, const ${t5} * ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40707639 "openDecryptSession"
	public explicit_return_type "status_t"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 2498743 // DecryptHandle
	  param in name "uri" explicit_type "char"
	  param in name "mime" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, const ${t2} * ${p2}${v2}, const ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}, const ${t2} * ${p2}, const ${t3} * ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40707767 "openDecryptSession"
	public explicit_return_type "status_t"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 2498743 // DecryptHandle
	  param in name "buf" type class_ref 2499127 // DrmBuffer
	  param in name "mimeType" type class_ref 2495031 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40707895 "closeDecryptSession"
	public explicit_return_type "status_t"
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 2498743 // DecryptHandle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40708023 "initializeDecryptUnit"
	public explicit_return_type "status_t"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 2498743 // DecryptHandle
	  param in name "decryptUnitId" explicit_type "int"
	  param in name "headerInfo" type class_ref 2499127 // DrmBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, const ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}, ${t2} ${p2}, const ${t3} * ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40708151 "decrypt"
	public explicit_return_type "status_t"
	nparams 6
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 2498743 // DecryptHandle
	  param in name "decryptUnitId" explicit_type "int"
	  param in name "encBuffer" type class_ref 2499127 // DrmBuffer
	  param inout name "decBuffer" type class_ref 2499127 // DrmBuffer
	  param inout name "IV" type class_ref 2499127 // DrmBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, const ${t3} * ${p3}${v3}, ${t4} * * ${p4}${v4}, ${t5} * ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}, ${t2} ${p2}, const ${t3} * ${p3}, ${t4} * * ${p4}, ${t5} * ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40708279 "finalizeDecryptUnit"
	public explicit_return_type "status_t"
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 2498743 // DecryptHandle
	  param in name "decryptUnitId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40708407 "pread"
	public explicit_return_type "ssize_t"
	nparams 5
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 2498743 // DecryptHandle
	  param inout name "buffer" explicit_type "void"
	  param in name "numBytes" explicit_type "ssize_t"
	  param in name "offset" explicit_type "off64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}, ${t2} * ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40708535 "onGetConstraints"
	abstract cpp_virtual protected return_type class_ref 2497975 // DrmConstraints
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" type class_ref 2495031 // String8
	  param in name "action" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "///////////////////////////////////////////////////
 Interface for plug-in developers                //
 each plug-in has to implement following method  //
///////////////////////////////////////////////////

Get constraint information associated with input content

@param[in] uniqueId Unique identifier for a session
@param[in] path Path of the protected content
@param[in] action Actions defined such as,
    Action::DEFAULT, Action::PLAY, etc
@return DrmConstraints
    key-value pairs of constraint are embedded in it
@note
    In case of error, return NULL
"
      end

      operation 40708663 "onGetMetadata"
	abstract cpp_virtual protected return_type class_ref 2498103 // DrmMetadata
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" type class_ref 2495031 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get metadata information associated with input content

@param[in] uniqueId Unique identifier for a session
@param[in] path Path of the protected content
@return DrmMetadata
        key-value pairs of metadata
@note
    In case of error, return NULL
"
      end

      operation 40708791 "onInitialize"
	abstract cpp_virtual protected explicit_return_type "status_t"
	nparams 1
	  param in name "uniqueId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize plug-in

@param[in] uniqueId Unique identifier for a session
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure
"
      end

      operation 40708919 "onSetOnInfoListener"
	abstract cpp_virtual protected explicit_return_type "status_t"
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "infoListener" type class_ref 2497847 // OnInfoListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Register a callback to be invoked when the caller required to
receive necessary information

@param[in] uniqueId Unique identifier for a session. uniqueId is a random
                    number generated in the DRM service. If the DrmManagerClient
                    is created in native code, uniqueId will be a number ranged
                    from 0x1000 to 0x1fff. If it comes from Java code, the uniqueId
                    will be a number ranged from 0x00 to 0xfff. So bit 0x1000 in
                    uniqueId could be used in DRM plugins to differentiate native
                    OnInfoListener and Java OnInfoListener.
@param[in] infoListener Listener
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure
"
      end

      operation 40709047 "onTerminate"
	abstract cpp_virtual protected explicit_return_type "status_t"
	nparams 1
	  param in name "uniqueId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Terminate the plug-in
and release resource bound to plug-in

@param[in] uniqueId Unique identifier for a session
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure
"
      end

      operation 40709175 "onCanHandle"
	abstract cpp_virtual protected explicit_return_type "bool"
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" type class_ref 2495031 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get whether the given content can be handled by this plugin or not

@param[in] uniqueId Unique identifier for a session
@param[in] path Path the protected object
@return bool
    Returns true if this plugin can handle , false in case of not able to handle
"
      end

      operation 40709303 "onProcessDrmInfo"
	abstract cpp_virtual protected return_type class_ref 2498231 // DrmInfoStatus
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "drmInfo" type class_ref 2498359 // DrmInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes given drm information based on its type

@param[in] uniqueId Unique identifier for a session
@param[in] drmInfo Information needs to be processed
@return DrmInfoStatus
    instance as a result of processing given input
"
      end

      operation 40709431 "onSaveRights"
	abstract cpp_virtual protected explicit_return_type "status_t"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param in name "drmRights" type class_ref 2498615 // DrmRights
	  param in name "rightspath" type class_ref 2495031 // String8
	  param in name "contentPath" type class_ref 2495031 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Save DRM rights to specified rights path
and make association with content path

@param[in] uniqueId Unique identifier for a session
@param[in] drmRights DrmRights to be saved
@param[in] rightsPath File path where rights to be saved
@param[in] contentPath File path where content was saved
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure
"
      end

      operation 40709559 "onAcquireDrmInfo"
	abstract cpp_virtual protected return_type class_ref 2498359 // DrmInfo
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "drmInforequest" type class_ref 2498487 // DrmInfoRequest
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves necessary information for registration, unregistration or rights
acquisition information.

@param[in] uniqueId Unique identifier for a session
@param[in] drmInfoRequest Request information to retrieve drmInfo
@return DrmInfo
    instance as a result of processing given input
"
      end

      operation 40709687 "onGetOriginalMimeType"
	abstract cpp_virtual protected return_type class_ref 2495031 // String8
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" type class_ref 2495031 // String8
	  param in name "fd" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the mime type embedded inside the original content

@param[in] uniqueId Unique identifier for a session
@param[in] path Path of the protected content
@param[in] fd descriptor of the protected content as a file source
@return String8
    Returns mime-type of the original content, such as \"video/mpeg\"
"
      end

      operation 40709815 "onGetDrmObjectType"
	abstract cpp_virtual protected explicit_return_type "int"
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" type class_ref 2495031 // String8
	  param in name "mimeType" type class_ref 2495031 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the type of the protected object (content, rights, etc..)
using specified path or mimetype. At least one parameter should be non null
to retrieve DRM object type

@param[in] uniqueId Unique identifier for a session
@param[in] path Path of the content or null.
@param[in] mimeType Mime type of the content or null.
@return type of the DRM content,
    such as DrmObjectType::CONTENT, DrmObjectType::RIGHTS_OBJECT
"
      end

      operation 40709943 "onCheckRightsStatus"
	abstract cpp_virtual protected explicit_return_type "int"
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" type class_ref 2495031 // String8
	  param in name "action" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check whether the given content has valid rights or not

@param[in] uniqueId Unique identifier for a session
@param[in] path Path of the protected content
@param[in] action Action to perform (Action::DEFAULT, Action::PLAY, etc)
@return the status of the rights for the protected content,
    such as RightsStatus::RIGHTS_VALID, RightsStatus::RIGHTS_EXPIRED, etc.
"
      end

      operation 40710071 "onConsumeRights"
	abstract cpp_virtual protected explicit_return_type "status_t"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 2498743 // DecryptHandle
	  param in name "action" explicit_type "int"
	  param in name "reserve" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Consumes the rights for a content.
If the reserve parameter is true the rights is reserved until the same
application calls this api again with the reserve parameter set to false.

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the decryption session
@param[in] action Action to perform. (Action::DEFAULT, Action::PLAY, etc)
@param[in] reserve True if the rights should be reserved.
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure
"
      end

      operation 40710199 "onSetPlaybackStatus"
	abstract cpp_virtual protected explicit_return_type "status_t"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 2498743 // DecryptHandle
	  param in name "playbackStatus" explicit_type "int"
	  param in name "position" explicit_type "int64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Informs the DRM Engine about the playback actions performed on the DRM files.

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the decryption session
@param[in] playbackStatus Playback action (Playback::START, Playback::STOP, Playback::PAUSE)
@param[in] position Position in the file (in milliseconds) where the start occurs.
    Only valid together with Playback::START.
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure
"
      end

      operation 40710327 "onValidateAction"
	abstract cpp_virtual protected explicit_return_type "bool"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" type class_ref 2495031 // String8
	  param in name "action" explicit_type "int"
	  param in name "description" type class_ref 2498871 // ActionDescription
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Validates whether an action on the DRM content is allowed or not.

@param[in] uniqueId Unique identifier for a session
@param[in] path Path of the protected content
@param[in] action Action to validate (Action::PLAY, Action::TRANSFER, etc)
@param[in] description Detailed description of the action
@return true if the action is allowed.
"
      end

      operation 40710455 "onRemoveRights"
	abstract cpp_virtual protected explicit_return_type "status_t"
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" type class_ref 2495031 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the rights associated with the given protected content

@param[in] uniqueId Unique identifier for a session
@param[in] path Path of the protected content
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure
"
      end

      operation 40710583 "onRemoveAllRights"
	abstract cpp_virtual protected explicit_return_type "status_t"
	nparams 1
	  param in name "uniqueId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all the rights information of each plug-in associated with
DRM framework. Will be used in master reset

@param[in] uniqueId Unique identifier for a session
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure
"
      end

      operation 40710711 "onOpenConvertSession"
	abstract cpp_virtual protected explicit_return_type "status_t"
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "convertId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This API is for Forward Lock based DRM scheme.
Each time the application tries to download a new DRM file
which needs to be converted, then the application has to
begin with calling this API.

@param[in] uniqueId Unique identifier for a session
@param[in] convertId Handle for the convert session
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure
"
      end

      operation 40710839 "onConvertData"
	abstract cpp_virtual protected return_type class_ref 2498999 // DrmConvertedStatus
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param in name "convertId" explicit_type "int"
	  param in name "inputData" type class_ref 2499127 // DrmBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Accepts and converts the input data which is part of DRM file.
The resultant converted data and the status is returned in the DrmConvertedInfo
object. This method will be called each time there are new block
of data received by the application.

@param[in] uniqueId Unique identifier for a session
@param[in] convertId Handle for the convert session
@param[in] inputData Input Data which need to be converted
@return Return object contains the status of the data conversion,
    the output converted data and offset. In this case the
    application will ignore the offset information.
"
      end

      operation 40710967 "onCloseConvertSession"
	abstract cpp_virtual protected return_type class_ref 2498999 // DrmConvertedStatus
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "convertId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Informs the Drm Agent when there is no more data which need to be converted
or when an error occurs. Upon successful conversion of the complete data,
the agent will inform that where the header and body signature
should be added. This signature appending is needed to integrity
protect the converted file.

@param[in] uniqueId Unique identifier for a session
@param[in] convertId Handle for the convert session
@return Return object contains the status of the data conversion,
    the header and body signature data. It also informs
    the application on which offset these signature data
    should be appended.
"
      end

      operation 40711095 "onGetSupportInfo"
	abstract cpp_virtual protected return_type class_ref 2499255 // DrmSupportInfo
	nparams 1
	  param in name "uniqueId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the information about the Drm Engine capabilities which includes
supported MimeTypes and file suffixes.

@param[in] uniqueId Unique identifier for a session
@return DrmSupportInfo
    instance which holds the capabilities of a plug-in
"
      end

      operation 40711223 "onOpenDecryptSession"
	abstract cpp_virtual protected explicit_return_type "status_t"
	nparams 5
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 2498743 // DecryptHandle
	  param in name "fd" explicit_type "int"
	  param in name "offset" explicit_type "off64_t"
	  param in name "length" explicit_type "off64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Open the decrypt session to decrypt the given protected content

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the current decryption session
@param[in] fd File descriptor of the protected content to be decrypted
@param[in] offset Start position of the content
@param[in] length The length of the protected content
@return
    DRM_ERROR_CANNOT_HANDLE for failure and DRM_NO_ERROR for success
"
      end

      operation 40711351 "onOpenDecryptSession"
	cpp_virtual cpp_inline protected explicit_return_type "status_t"
	nparams 6
	  param in name "" explicit_type "int"
	  param inout name "" type class_ref 2498743 // DecryptHandle
	  param in name "" explicit_type "int"
	  param in name "" explicit_type "off64_t"
	  param in name "" explicit_type "off64_t"
	  param in name "" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, const ${t5} * ${p5}${v5}${)}${const}${volatile}${throw}${abstract} {

        return DRM_ERROR_CANNOT_HANDLE;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Open the decrypt session to decrypt the given protected content

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the current decryption session
@param[in] fd File descriptor of the protected content to be decrypted
@param[in] offset Start position of the content
@param[in] length The length of the protected content
@param[in] mime Mime type of the protected content
    drm plugin may do some optimization since the mime type is known.
@return
    DRM_ERROR_CANNOT_HANDLE for failure and DRM_NO_ERROR for success
"
      end

      operation 40711479 "onOpenDecryptSession"
	abstract cpp_virtual protected explicit_return_type "status_t"
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 2498743 // DecryptHandle
	  param in name "uri" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, const ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Open the decrypt session to decrypt the given protected content

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the current decryption session
@param[in] uri Path of the protected content to be decrypted
@return
    DRM_ERROR_CANNOT_HANDLE for failure and DRM_NO_ERROR for success
"
      end

      operation 40711607 "onOpenDecryptSession"
	cpp_virtual cpp_inline protected explicit_return_type "status_t"
	nparams 4
	  param in name "" explicit_type "int"
	  param inout name "" type class_ref 2498743 // DecryptHandle
	  param in name "" explicit_type "char"
	  param in name "" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, const ${t2} * ${p2}${v2}, const ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {

        return DRM_ERROR_CANNOT_HANDLE;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Open the decrypt session to decrypt the given protected content

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the current decryption session
@param[in] uri Path of the protected content to be decrypted
@param[in] mime Mime type of the protected content. The corresponding
    drm plugin may do some optimization since the mime type is known.
@return
    DRM_ERROR_CANNOT_HANDLE for failure and DRM_NO_ERROR for success
"
      end

      operation 40711735 "onOpenDecryptSession"
	cpp_virtual cpp_inline protected explicit_return_type "status_t"
	nparams 4
	  param in name "" explicit_type "int"
	  param inout name "" type class_ref 2498743 // DecryptHandle
	  param in name "" type class_ref 2499127 // DrmBuffer
	  param in name "" type class_ref 2495031 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        return DRM_ERROR_CANNOT_HANDLE;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Open the decrypt session to decrypt the given protected content

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the current decryption session
@param[in] buf Data to initiate decrypt session
@param[in] mimeType Mime type of the protected content
@return
    DRM_ERROR_CANNOT_HANDLE for failure and DRM_NO_ERROR for success
"
      end

      operation 40711863 "onCloseDecryptSession"
	abstract cpp_virtual protected explicit_return_type "status_t"
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 2498743 // DecryptHandle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close the decrypt session for the given handle

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the decryption session
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure
"
      end

      operation 40711991 "onInitializeDecryptUnit"
	abstract cpp_virtual protected explicit_return_type "status_t"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 2498743 // DecryptHandle
	  param in name "decryptUnitId" explicit_type "int"
	  param in name "headerInfo" type class_ref 2499127 // DrmBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, const ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize decryption for the given unit of the protected content

@param[in] uniqueId Unique identifier for a session
@param[in] decryptId Handle for the decryption session
@param[in] decryptUnitId ID Specifies decryption unit, such as track ID
@param[in] headerInfo Information for initializing decryption of this decrypUnit
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure
"
      end

      operation 40712119 "onDecrypt"
	abstract cpp_virtual protected explicit_return_type "status_t"
	nparams 6
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 2498743 // DecryptHandle
	  param in name "decryptUnitId" explicit_type "int"
	  param in name "encBuffer" type class_ref 2499127 // DrmBuffer
	  param inout name "decBuffer" type class_ref 2499127 // DrmBuffer
	  param inout name "IV" type class_ref 2499127 // DrmBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, const ${t3} * ${p3}${v3}, ${t4} * * ${p4}${v4}, ${t5} * ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decrypt the protected content buffers for the given unit
This method will be called any number of times, based on number of
encrypted streams received from application.

@param[in] uniqueId Unique identifier for a session
@param[in] decryptId Handle for the decryption session
@param[in] decryptUnitId ID Specifies decryption unit, such as track ID
@param[in] encBuffer Encrypted data block
@param[out] decBuffer Decrypted data block
@param[in] IV Optional buffer
@return status_t
    Returns the error code for this API
    DRM_NO_ERROR for success, and one of DRM_ERROR_UNKNOWN, DRM_ERROR_LICENSE_EXPIRED
    DRM_ERROR_SESSION_NOT_OPENED, DRM_ERROR_DECRYPT_UNIT_NOT_INITIALIZED,
    DRM_ERROR_DECRYPT for failure.
"
      end

      operation 40712247 "onFinalizeDecryptUnit"
	abstract cpp_virtual protected explicit_return_type "status_t"
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 2498743 // DecryptHandle
	  param in name "decryptUnitId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finalize decryption for the given unit of the protected content

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the decryption session
@param[in] decryptUnitId ID Specifies decryption unit, such as track ID
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure
"
      end

      operation 40712375 "onPread"
	abstract cpp_virtual protected explicit_return_type "ssize_t"
	nparams 5
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 2498743 // DecryptHandle
	  param inout name "buffer" explicit_type "void"
	  param in name "numBytes" explicit_type "ssize_t"
	  param in name "offset" explicit_type "off64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the specified number of bytes from an open DRM file.

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the decryption session
@param[out] buffer Reference to the buffer that should receive the read data.
@param[in] numBytes Number of bytes to read.
@param[in] offset Offset with which to update the file position.

@return Number of bytes read. Returns -1 for Failure.
"
      end
    end
  end

  deploymentview 236343 "include"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 1338807 "DrmEngineBase"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2503735 // DrmEngineBase
      end
    end

    artifact 1338935 "IDrmEngine"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2497719 // IDrmEngine
      end
    end
  end
end
