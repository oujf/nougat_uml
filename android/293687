format 213
"include" // android::frameworks::av::drm::libdrmframework::plugins::common::util::include
  revision 1
  modified_by 55 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "D:/Workspace/AndroidSourceCode/nougat_src/frameworks/av/drm/libdrmframework/plugins/common/util/include/"
  cpp_src_dir "D:/Workspace/AndroidSourceCode/nougat_src/frameworks/av/drm/libdrmframework/plugins/common/util/include/"
  cpp_namespace "android"
  classview 274231 "include"
    
    classdiagramsettings member_max_width 0 end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 2503863 "MimeTypeUtil"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 40716599 "MimeTypeUtil"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 40716727 "~MimeTypeUtil"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 40716855 "convertMimeType"
	class_operation public return_type class_ref 2495031 // String8
	nparams 1
	  param inout name "mimeType" type class_ref 2495031 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "May convert the mimetype if there is a well known
replacement mimetype otherwise the original mimetype
is returned.

@param mimeType - mimetype in lower case to convert.

@return mimetype or null.
"
      end
    end

    class 2503991 "SessionMap"
      visibility package 
      nformals 1
      formal name "TValue" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A thread safe wrapper template class for session handlings for Drm Engines. It wraps a
pointer type over KeyedVector. It keeps pointer as data in the vector and free up memory
allocated pointer can be of any type of structure/class meant for keeping session data.
so session object here means pointer to the session data.
"
      operation 40716983 "SessionMap"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 40717111 "~SessionMap"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
        Mutex::Autolock lock(mLock);
        destroyMap();
    };
"
	
	
	
	
      end

      operation 40717239 "addValue"
	cpp_inline public explicit_return_type "bool"
	nparams 2
	  param in name "key" explicit_type "int"
	  param in name "value" explicit_type "TValue"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Mutex::Autolock lock(mLock);
        if (!isCreatedInternal(key)) {
            map.add(key, value);
            return true;
        }
        return false;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a new value in the session map table. It expects memory to be allocated already
for the session object

@param key - key or Session ID
@param value - session object to add

@return boolean result of adding value. returns false if key is already exist.
"
      end

      operation 40717367 "getValue"
	cpp_inline public explicit_return_type "TValue"
	nparams 1
	  param in name "key" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Mutex::Autolock lock(mLock);
        return getValueInternal(key);
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "returns the session object by the key

@param key - key or Session ID

@return session object as per the key
"
      end

      operation 40717495 "getSize"
	cpp_inline public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Mutex::Autolock lock(mLock);
        return map.size();
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "returns the number of objects in the session map table

@return count of number of session objects.
"
      end

      operation 40717623 "getValueAt"
	cpp_inline public explicit_return_type "TValue"
	nparams 1
	  param in name "index" explicit_type "uint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        TValue value = NULL;
        Mutex::Autolock lock(mLock);

        if (map.size() > index) {
            value = map.valueAt(index);
        }
        return value;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "returns the session object by the index in the session map table

@param index - index of the value required

@return session object as per the index
"
      end

      operation 40717751 "removeValue"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "key" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Mutex::Autolock lock(mLock);
        deleteValue(getValueInternal(key));
        map.removeItem(key);
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "deletes the object from session map. It also frees up memory for the session object.

@param key - key of the value to be deleted

"
      end

      operation 40717879 "isCreated"
	cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "key" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Mutex::Autolock lock(mLock);
        return isCreatedInternal(key);
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "decides if session is already created.

@param key - key of the value for the session

@return boolean result of whether session is created
"
      end

      operation 40718007 "operator ="
	cpp_inline public return_type class_ref 2503991 // SessionMap
	nparams 1
	  param in name "objectCopy" type class_ref 2503991 // SessionMap
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Mutex::Autolock lock(mLock);

        destroyMap();
        map = objectCopy.map;
        return *this;
    };
"
	
	
	
	
      end

      attribute 10401719 "map"
	private explicit_type "int, TValue"
	stereotype "KeyedVector"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 10401847 "mLock"
	private explicit_type "Mutex"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 40718135 "deleteValue"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "TValue"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        delete value;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "free up the memory for the session object.
Make sure if any reference to the session object anywhere, otherwise it will be a
dangle pointer after this call.

@param value - session object to free

"
      end

      operation 40718263 "destroyMap"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        int size = map.size();

        for (int i = 0; i < size; i++) {
            deleteValue(map.valueAt(i));
        }
        map.clear();
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "free up the memory for the entire map.
free up any resources in the sessions before calling this funtion.

"
      end

      operation 40718391 "isCreatedInternal"
	cpp_inline private explicit_return_type "bool"
	nparams 1
	  param in name "key" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return(0 <= map.indexOfKey(key));
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "decides if session is already created.

@param key - key of the value for the session

@return boolean result of whether session is created
"
      end

      operation 40718519 "getValueInternal"
	cpp_inline private explicit_return_type "TValue"
	nparams 1
	  param in name "key" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        TValue value = NULL;
        if (isCreatedInternal(key)) {
            value = (TValue) map.valueFor(key);
        }
        return value;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "returns the session object by the key

@param key - key or Session ID

@return session object as per the key
"
      end
    end
  end

  deploymentview 236471 "include"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 1339063 "MimeTypeUtil"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2503863 // MimeTypeUtil
      end
    end

    artifact 1339191 "SessionMap"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2503991 // SessionMap
      end
    end
  end
end
