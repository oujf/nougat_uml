format 213
"tests" // android::frameworks::native::services::sensorservice::tests
  revision 1
  modified_by 55 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "D:/Workspace/AndroidSourceCode/nougat_src/frameworks/native/services/sensorservice/tests/"
  cpp_src_dir "D:/Workspace/AndroidSourceCode/nougat_src/frameworks/native/services/sensorservice/tests/"
  deploymentview 239799 "tests"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 1355831 "main"
      stereotype "source"
      cpp_src "int main()
{
    SensorManager& mgr = SensorManager::getInstanceForPackage(String16(\"Sensor Service Test\"));

    Sensor const* const* list;
    ssize_t count = mgr.getSensorList(&list);
    printf(\"numSensors=%d\\n\", int(count));

    sp<SensorEventQueue> q = mgr.createEventQueue();
    printf(\"queue=%p\\n\", q.get());

    Sensor const* accelerometer = mgr.getDefaultSensor(Sensor::TYPE_ACCELEROMETER);
    printf(\"accelerometer=%p (%s)\\n\",
            accelerometer, accelerometer->getName().string());

    sStartTime = systemTime();

    q->enableSensor(accelerometer);

    q->setEventRate(accelerometer, ms2ns(10));

    sp<Looper> loop = new Looper(false);
    loop->addFd(q->getFd(), 0, ALOOPER_EVENT_INPUT, receiver, q.get());

    do {
        //printf(\"about to poll...\\n\");
        int32_t ret = loop->pollOnce(-1);
        switch (ret) {
            case ALOOPER_POLL_WAKE:
                //(\"ALOOPER_POLL_WAKE\\n\");
                break;
            case ALOOPER_POLL_CALLBACK:
                //(\"ALOOPER_POLL_CALLBACK\\n\");
                break;
            case ALOOPER_POLL_TIMEOUT:
                printf(\"ALOOPER_POLL_TIMEOUT\\n\");
                break;
            case ALOOPER_POLL_ERROR:
                printf(\"ALOOPER_POLL_TIMEOUT\\n\");
                break;
            default:
                printf(\"ugh? poll returned %d\\n\", ret);
                break;
        }
    } while (1);


    return 0;
}
"
      associated_classes
      end
    end
  end
end
