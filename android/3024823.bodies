class String16
!!!42761783.cpp!!!	String16(in  : String16::StaticLinkage)
    // this constructor is used when we can't rely on the static-initializers
    // having run. In this case we always allocate an empty string. It's less
    // efficient than using getEmptyString(), but we assume it's uncommon.

    char16_t* data = static_cast<char16_t*>(
            SharedBuffer::alloc(sizeof(char16_t))->data());
    data[0] = 0;
    mString = data;
!!!42761911.cpp!!!	String16(in o : String16)
    SharedBuffer::bufferFromData(mString)->acquire();
!!!42762039.cpp!!!	String16(in o : String16, in len : size_t, in begin : size_t = 0)
    setTo(o, len, begin);
!!!42762167.cpp!!!	String16(in o : char16_t)
    size_t len = strlen16(o);
    SharedBuffer* buf = SharedBuffer::alloc((len+1)*sizeof(char16_t));
    ALOG_ASSERT(buf, "Unable to allocate shared buffer");
    if (buf) {
        char16_t* str = (char16_t*)buf->data();
        strcpy16(str, o);
        mString = str;
        return;
    }
    
    mString = getEmptyString();
!!!42762295.cpp!!!	String16(in o : char16_t, in len : size_t)
    SharedBuffer* buf = SharedBuffer::alloc((len+1)*sizeof(char16_t));
    ALOG_ASSERT(buf, "Unable to allocate shared buffer");
    if (buf) {
        char16_t* str = (char16_t*)buf->data();
        memcpy(str, o, len*sizeof(char16_t));
        str[len] = 0;
        mString = str;
        return;
    }
    
    mString = getEmptyString();
!!!42762807.cpp!!!	~String16()
    SharedBuffer::bufferFromData(mString)->release();
!!!42762935.cpp!!!	string() : char16_t
    return mString;
!!!42763063.cpp!!!	size() : size_t
    return SharedBuffer::sizeFromData(mString)/sizeof(char16_t)-1;
!!!42763191.cpp!!!	setTo(in other : String16) : void
    SharedBuffer::bufferFromData(other.mString)->acquire();
    SharedBuffer::bufferFromData(mString)->release();
    mString = other.mString;
!!!42763319.cpp!!!	setTo(in other : char16_t) : status_t
    return setTo(other, strlen16(other));
!!!42763447.cpp!!!	setTo(in other : char16_t, in len : size_t) : status_t
    SharedBuffer* buf = SharedBuffer::bufferFromData(mString)
        ->editResize((len+1)*sizeof(char16_t));
    if (buf) {
        char16_t* str = (char16_t*)buf->data();
        memmove(str, other, len*sizeof(char16_t));
        str[len] = 0;
        mString = str;
        return NO_ERROR;
    }
    return NO_MEMORY;
!!!42763575.cpp!!!	setTo(in other : String16, in len : size_t, in begin : size_t = 0) : status_t
    const size_t N = other.size();
    if (begin >= N) {
        SharedBuffer::bufferFromData(mString)->release();
        mString = getEmptyString();
        return NO_ERROR;
    }
    if ((begin+len) > N) len = N-begin;
    if (begin == 0 && len == N) {
        setTo(other);
        return NO_ERROR;
    }

    if (&other == this) {
        LOG_ALWAYS_FATAL("Not implemented");
    }

    return setTo(other.string()+begin, len);
!!!42763703.cpp!!!	append(in other : String16) : status_t
    const size_t myLen = size();
    const size_t otherLen = other.size();
    if (myLen == 0) {
        setTo(other);
        return NO_ERROR;
    } else if (otherLen == 0) {
        return NO_ERROR;
    }
    
    SharedBuffer* buf = SharedBuffer::bufferFromData(mString)
        ->editResize((myLen+otherLen+1)*sizeof(char16_t));
    if (buf) {
        char16_t* str = (char16_t*)buf->data();
        memcpy(str+myLen, other, (otherLen+1)*sizeof(char16_t));
        mString = str;
        return NO_ERROR;
    }
    return NO_MEMORY;
!!!42763831.cpp!!!	append(in chrs : char16_t, in otherLen : size_t) : status_t
    const size_t myLen = size();
    if (myLen == 0) {
        setTo(chrs, otherLen);
        return NO_ERROR;
    } else if (otherLen == 0) {
        return NO_ERROR;
    }
    
    SharedBuffer* buf = SharedBuffer::bufferFromData(mString)
        ->editResize((myLen+otherLen+1)*sizeof(char16_t));
    if (buf) {
        char16_t* str = (char16_t*)buf->data();
        memcpy(str+myLen, chrs, otherLen*sizeof(char16_t));
        str[myLen+otherLen] = 0;
        mString = str;
        return NO_ERROR;
    }
    return NO_MEMORY;
!!!42763959.cpp!!!	operator =(in other : String16) : String16
    setTo(other);
    return *this;
!!!42764087.cpp!!!	operator +=(in other : String16) : String16
    append(other);
    return *this;
!!!42764215.cpp!!!	operator +(in other : String16) : String16
    String16 tmp(*this);
    tmp += other;
    return tmp;
!!!42764343.cpp!!!	insert(in pos : size_t, in chrs : char16_t) : status_t
    return insert(pos, chrs, strlen16(chrs));
!!!42764471.cpp!!!	insert(in pos : size_t, in chrs : char16_t, in len : size_t) : status_t
    const size_t myLen = size();
    if (myLen == 0) {
        return setTo(chrs, len);
        return NO_ERROR;
    } else if (len == 0) {
        return NO_ERROR;
    }

    if (pos > myLen) pos = myLen;

    #if 0
    printf("Insert in to %s: pos=%d, len=%d, myLen=%d, chrs=%s\n",
           String8(*this).string(), pos,
           len, myLen, String8(chrs, len).string());
    #endif

    SharedBuffer* buf = SharedBuffer::bufferFromData(mString)
        ->editResize((myLen+len+1)*sizeof(char16_t));
    if (buf) {
        char16_t* str = (char16_t*)buf->data();
        if (pos < myLen) {
            memmove(str+pos+len, str+pos, (myLen-pos)*sizeof(char16_t));
        }
        memcpy(str+pos, chrs, len*sizeof(char16_t));
        str[myLen+len] = 0;
        mString = str;
        #if 0
        printf("Result (%d chrs): %s\n", size(), String8(*this).string());
        #endif
        return NO_ERROR;
    }
    return NO_MEMORY;
!!!42764599.cpp!!!	findFirst(in c : char16_t) : ssize_t
    const char16_t* str = string();
    const char16_t* p = str;
    const char16_t* e = p + size();
    while (p < e) {
        if (*p == c) {
            return p-str;
        }
        p++;
    }
    return -1;
!!!42764727.cpp!!!	findLast(in c : char16_t) : ssize_t
    const char16_t* str = string();
    const char16_t* p = str;
    const char16_t* e = p + size();
    while (p < e) {
        e--;
        if (*e == c) {
            return e-str;
        }
    }
    return -1;
!!!42764855.cpp!!!	startsWith(in prefix : String16) : bool
    const size_t ps = prefix.size();
    if (ps > size()) return false;
    return strzcmp16(mString, ps, prefix.string(), ps) == 0;
!!!42764983.cpp!!!	startsWith(in prefix : char16_t) : bool
    const size_t ps = strlen16(prefix);
    if (ps > size()) return false;
    return strncmp16(mString, prefix, ps) == 0;
!!!42765111.cpp!!!	contains(in chrs : char16_t) : bool
    return strstr16(mString, chrs) != nullptr;
!!!42765239.cpp!!!	makeLower() : status_t
    const size_t N = size();
    const char16_t* str = string();
    char16_t* edit = NULL;
    for (size_t i=0; i<N; i++) {
        const char16_t v = str[i];
        if (v >= 'A' && v <= 'Z') {
            if (!edit) {
                SharedBuffer* buf = SharedBuffer::bufferFromData(mString)->edit();
                if (!buf) {
                    return NO_MEMORY;
                }
                edit = (char16_t*)buf->data();
                mString = str = edit;
            }
            edit[i] = tolower((char)v);
        }
    }
    return NO_ERROR;
!!!42765367.cpp!!!	replaceAll(in replaceThis : char16_t, in withThis : char16_t) : status_t
    const size_t N = size();
    const char16_t* str = string();
    char16_t* edit = NULL;
    for (size_t i=0; i<N; i++) {
        if (str[i] == replaceThis) {
            if (!edit) {
                SharedBuffer* buf = SharedBuffer::bufferFromData(mString)->edit();
                if (!buf) {
                    return NO_MEMORY;
                }
                edit = (char16_t*)buf->data();
                mString = str = edit;
            }
            edit[i] = withThis;
        }
    }
    return NO_ERROR;
!!!42765495.cpp!!!	remove(in len : size_t, in begin : size_t = 0) : status_t
    const size_t N = size();
    if (begin >= N) {
        SharedBuffer::bufferFromData(mString)->release();
        mString = getEmptyString();
        return NO_ERROR;
    }
    if ((begin+len) > N) len = N-begin;
    if (begin == 0 && len == N) {
        return NO_ERROR;
    }

    if (begin > 0) {
        SharedBuffer* buf = SharedBuffer::bufferFromData(mString)
            ->editResize((N+1)*sizeof(char16_t));
        if (!buf) {
            return NO_MEMORY;
        }
        char16_t* str = (char16_t*)buf->data();
        memmove(str, str+begin, (N-begin+1)*sizeof(char16_t));
        mString = str;
    }
    SharedBuffer* buf = SharedBuffer::bufferFromData(mString)
        ->editResize((len+1)*sizeof(char16_t));
    if (buf) {
        char16_t* str = (char16_t*)buf->data();
        str[len] = 0;
        mString = str;
        return NO_ERROR;
    }
    return NO_MEMORY;
!!!42765623.cpp!!!	compare(in other : String16) : int
    return strzcmp16(mString, size(), other.mString, other.size());
!!!42765751.cpp!!!	operator <(in other : String16) : bool
    return strzcmp16(mString, size(), other.mString, other.size()) < 0;
!!!42765879.cpp!!!	operator <=(in other : String16) : bool
    return strzcmp16(mString, size(), other.mString, other.size()) <= 0;
!!!42766007.cpp!!!	operator ==(in other : String16) : bool
    return strzcmp16(mString, size(), other.mString, other.size()) == 0;
!!!42766135.cpp!!!	operator !=(in other : String16) : bool
    return strzcmp16(mString, size(), other.mString, other.size()) != 0;
!!!42766263.cpp!!!	operator >=(in other : String16) : bool
    return strzcmp16(mString, size(), other.mString, other.size()) >= 0;
!!!42766391.cpp!!!	operator >(in other : String16) : bool
    return strzcmp16(mString, size(), other.mString, other.size()) > 0;
!!!42766519.cpp!!!	operator <(in other : char16_t) : bool
    return strcmp16(mString, other) < 0;
!!!42766647.cpp!!!	operator <=(in other : char16_t) : bool
    return strcmp16(mString, other) <= 0;
!!!42766775.cpp!!!	operator ==(in other : char16_t) : bool
    return strcmp16(mString, other) == 0;
!!!42766903.cpp!!!	operator !=(in other : char16_t) : bool
    return strcmp16(mString, other) != 0;
!!!42767031.cpp!!!	operator >=(in other : char16_t) : bool
    return strcmp16(mString, other) >= 0;
!!!42767159.cpp!!!	operator >(in other : char16_t) : bool
    return strcmp16(mString, other) > 0;
!!!42767287.cpp!!!	operator constchar16_t*()
    return mString;
