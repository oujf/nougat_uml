class atransport
!!!42638647.cpp!!!	Kick() : void
    if (!kicked_) {
        kicked_ = true;
        CHECK(kick_func_ != nullptr);
        kick_func_(this);
    }
!!!42638775.cpp!!!	connection_state_name() : std::string
    switch (connection_state) {
        case kCsOffline: return "offline";
        case kCsBootloader: return "bootloader";
        case kCsDevice: return "device";
        case kCsHost: return "host";
        case kCsRecovery: return "recovery";
        case kCsNoPerm: return UsbNoPermissionsShortHelpText();
        case kCsSideload: return "sideload";
        case kCsUnauthorized: return "unauthorized";
        default: return "unknown";
    }
!!!42638903.cpp!!!	update_version(in version : int, in payload : size_t) : void
    protocol_version = std::min(version, A_VERSION);
    max_payload = std::min(payload, MAX_PAYLOAD);
!!!42639031.cpp!!!	get_protocol_version() : int
    return protocol_version;
!!!42639159.cpp!!!	get_max_payload() : size_t
    return max_payload;
!!!42639415.cpp!!!	has_feature(in feature : std::string) : bool
    return features_.count(feature) > 0;
!!!42639543.cpp!!!	SetFeatures(in features_string : std::string) : void
    features_ = StringToFeatureSet(features_string);
!!!42639671.cpp!!!	AddDisconnect(inout disconnect : adisconnect) : void
    disconnects_.push_back(disconnect);
!!!42639799.cpp!!!	RemoveDisconnect(inout disconnect : adisconnect) : void
    disconnects_.remove(disconnect);
!!!42639927.cpp!!!	RunDisconnects() : void
    for (const auto& disconnect : disconnects_) {
        disconnect->func(disconnect->opaque, this);
    }
    disconnects_.clear();
!!!42640055.cpp!!!	MatchesTarget(in target : std::string) : bool
    if (serial) {
        if (target == serial) {
            return true;
        } else if (type == kTransportLocal) {
            // Local transports can match [tcp:|udp:]<hostname>[:port].
            const char* local_target_ptr = target.c_str();

            // For fastboot compatibility, ignore protocol prefixes.
            if (android::base::StartsWith(target, "tcp:") ||
                    android::base::StartsWith(target, "udp:")) {
                local_target_ptr += 4;
            }

            // Parse our |serial| and the given |target| to check if the hostnames and ports match.
            std::string serial_host, error;
            int serial_port = -1;
            if (android::base::ParseNetAddress(serial, &serial_host, &serial_port, nullptr,
                                               &error)) {
                // |target| may omit the port to default to ours.
                std::string target_host;
                int target_port = serial_port;
                if (android::base::ParseNetAddress(local_target_ptr, &target_host, &target_port,
                                                   nullptr, &error) &&
                        serial_host == target_host && serial_port == target_port) {
                    return true;
                }
            }
        }
    }

    return (devpath && target == devpath) ||
           qual_match(target.c_str(), "product:", product, false) ||
           qual_match(target.c_str(), "model:", model, true) ||
           qual_match(target.c_str(), "device:", device, false);
