class EventLogListBuilder
!!!42644791.cpp!!!	EventLogListBuilder()
  memset(payload_.get(), 0, MAX_EVENT_PAYLOAD_SIZE);

  // Set up the top-level EventLog data type.
  AppendByte(EVENT_TYPE_LIST);

  // Skip over the byte prepresenting the number of items in the list. This
  // value is set in Release().
  payload_size_++;
!!!42644919.cpp!!!	Append(in value : int) : bool
  DCHECK_NE(static_cast<uint8_t*>(nullptr), payload_.get());

  if (!IsSpaceAvailable(sizeof(value) + EVENT_TYPE_SIZE)) {
    return false;
  }

  AppendByte(EVENT_TYPE_INT);
  AppendData(&value, sizeof(value));

  payload_count_++;
  return true;
!!!42645047.cpp!!!	Append(in value : std::string) : bool
  DCHECK_NE(static_cast<uint8_t*>(nullptr), payload_.get());

  int len = value.length();
  if (!IsSpaceAvailable(sizeof(len) + len)) {
    return false;
  }

  AppendByte(EVENT_TYPE_STRING);
  AppendData(&len, sizeof(len));
  AppendData(value.c_str(), len);

  payload_count_++;
  return true;
!!!42645175.cpp!!!	Release(inout log : std::unique_ptr<uint8_t[]>, inout size : size_t) : void
  // Finalize the log payload.
  payload_[1] = payload_count_;

  // Return the log payload.
  *size = payload_size_;
  *log = std::move(payload_);
!!!42645303.cpp!!!	AppendData(in data : void, in size : size_t) : void
  DCHECK_LT(payload_size_ + size, MAX_EVENT_PAYLOAD_SIZE);
  memcpy(&payload_[payload_size_], data, size);
  payload_size_ += size;
!!!42645431.cpp!!!	AppendByte(in byte : uint8_t) : void
  DCHECK_LT(payload_size_ + sizeof(byte), MAX_EVENT_PAYLOAD_SIZE);
  payload_[payload_size_++] = byte;
!!!42645559.cpp!!!	IsSpaceAvailable(in value_size : size_t) : bool
  size_t space_needed = value_size + EVENT_TYPE_SIZE;
  if (payload_size_ + space_needed > MAX_EVENT_PAYLOAD_SIZE) {
    size_t remaining = MAX_EVENT_PAYLOAD_SIZE - payload_size_;
    LOG(WARNING) << "Not enough space for value. remain=" <<
        remaining << "; needed=" << space_needed;
    return false;
  }

  return true;
