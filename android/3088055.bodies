class SocketMock
!!!42660023.cpp!!!	~SocketMock()
    if (!events_.empty()) {
        ADD_FAILURE() << events_.size() << " event(s) were not handled";
    }
!!!42660151.cpp!!!	Send(in data : void, in length : size_t) : bool
    if (events_.empty()) {
        ADD_FAILURE() << "Send() was called when no message was expected";
        return false;
    }

    if (events_.front().type != EventType::kSend) {
        ADD_FAILURE() << "Send() was called out-of-order";
        return false;
    }

    std::string message(reinterpret_cast<const char*>(data), length);
    if (events_.front().message != message) {
        ADD_FAILURE() << "Send() expected " << events_.front().message << ", but got " << message;
        return false;
    }

    bool return_value = events_.front().status;
    events_.pop();
    return return_value;
!!!42660279.cpp!!!	Send(in buffers : std::vector<cutils_socket_buffer_t>) : bool
    std::string data;
    for (const auto& buffer : buffers) {
        data.append(reinterpret_cast<const char*>(buffer.data), buffer.length);
    }
    return Send(data.data(), data.size());
!!!42660407.cpp!!!	Receive(inout data : void, in length : size_t, in timeout_ms : int) : ssize_t
    if (events_.empty()) {
        ADD_FAILURE() << "Receive() was called when no message was ready";
        return -1;
    }

    const Event& event = events_.front();
    if (event.type != EventType::kReceive) {
        ADD_FAILURE() << "Receive() was called out-of-order";
        return -1;
    }

    const std::string& message = event.message;
    if (message.length() > length) {
        ADD_FAILURE() << "Receive(): not enough bytes (" << length << ") for " << message;
        return -1;
    }

    receive_timed_out_ = event.status;
    ssize_t return_value = message.length();

    // Empty message indicates failure.
    if (message.empty()) {
        return_value = -1;
    } else {
        memcpy(data, message.data(), message.length());
    }

    events_.pop();
    return return_value;
!!!42660535.cpp!!!	Close() : int
    return 0;
!!!42660663.cpp!!!	Accept() : std::unique_ptr<Socket>
    if (events_.empty()) {
        ADD_FAILURE() << "Accept() was called when no socket was ready";
        return nullptr;
    }

    if (events_.front().type != EventType::kAccept) {
        ADD_FAILURE() << "Accept() was called out-of-order";
        return nullptr;
    }

    std::unique_ptr<Socket> sock = std::move(events_.front().sock);
    events_.pop();
    return sock;
!!!42660791.cpp!!!	ExpectSend(in message : std::string) : void
    events_.push(Event(EventType::kSend, std::move(message), true, nullptr));
!!!42660919.cpp!!!	ExpectSendFailure(in message : std::string) : void
    events_.push(Event(EventType::kSend, std::move(message), false, nullptr));
!!!42661047.cpp!!!	AddReceive(in message : std::string) : void
    events_.push(Event(EventType::kReceive, std::move(message), false, nullptr));
!!!42661175.cpp!!!	AddReceiveTimeout() : void
    events_.push(Event(EventType::kReceive, "", true, nullptr));
!!!42661303.cpp!!!	AddReceiveFailure() : void
    events_.push(Event(EventType::kReceive, "", false, nullptr));
!!!42661431.cpp!!!	AddAccept(in sock : std::unique_ptr<Socket>) : void
    events_.push(Event(EventType::kAccept, "", false, std::move(sock)));
