class BatteryPropertiesRegistrar
!!!42671671.cpp!!!	publish(in service : sp<BatteryPropertiesRegistrar>) : void
    defaultServiceManager()->addService(String16("batteryproperties"), service);
!!!42671799.cpp!!!	notifyListeners(in props : BatteryProperties) : void
    Mutex::Autolock _l(mRegistrationLock);
    for (size_t i = 0; i < mListeners.size(); i++) {
        mListeners[i]->batteryPropertiesChanged(props);
    }
!!!42671927.cpp!!!	registerListener(in listener : sp<IBatteryPropertiesListener>) : void
    {
        if (listener == NULL)
            return;
        Mutex::Autolock _l(mRegistrationLock);
        // check whether this is a duplicate
        for (size_t i = 0; i < mListeners.size(); i++) {
            if (IInterface::asBinder(mListeners[i]) == IInterface::asBinder(listener)) {
                return;
            }
        }

        mListeners.add(listener);
        IInterface::asBinder(listener)->linkToDeath(this);
    }
    healthd_battery_update();
!!!42672055.cpp!!!	unregisterListener(in listener : sp<IBatteryPropertiesListener>) : void
    if (listener == NULL)
        return;
    Mutex::Autolock _l(mRegistrationLock);
    for (size_t i = 0; i < mListeners.size(); i++) {
        if (IInterface::asBinder(mListeners[i]) == IInterface::asBinder(listener)) {
            IInterface::asBinder(mListeners[i])->unlinkToDeath(this);
            mListeners.removeAt(i);
            break;
        }
    }
!!!42672183.cpp!!!	getProperty(in id : int, inout val : BatteryProperty) : status_t
    return healthd_get_property(id, val);
!!!42672311.cpp!!!	dump(in fd : int, in args : Vector<String16>) : status_t
    IPCThreadState* self = IPCThreadState::self();
    const int pid = self->getCallingPid();
    const int uid = self->getCallingUid();
    if ((uid != AID_SHELL) &&
        !PermissionCache::checkPermission(
                String16("android.permission.DUMP"), pid, uid))
        return PERMISSION_DENIED;

    healthd_dump_battery_state(fd);
    return OK;
!!!42672439.cpp!!!	binderDied(in who : wp<IBinder>) : void
    Mutex::Autolock _l(mRegistrationLock);

    for (size_t i = 0; i < mListeners.size(); i++) {
        if (IInterface::asBinder(mListeners[i]) == who) {
            mListeners.removeAt(i);
            break;
        }
    }
