class String8
!!!42767543.cpp!!!	String8(in  : String8::StaticLinkage)
    // this constructor is used when we can't rely on the static-initializers
    // having run. In this case we always allocate an empty string. It's less
    // efficient than using getEmptyString(), but we assume it's uncommon.

    char* data = static_cast<char*>(
            SharedBuffer::alloc(sizeof(char))->data());
    data[0] = 0;
    mString = data;
!!!42767671.cpp!!!	String8(in o : String8)
    SharedBuffer::bufferFromData(mString)->acquire();
!!!42767799.cpp!!!	String8(in o : char)
    if (mString == NULL) {
        mString = getEmptyString();
    }
!!!42767927.cpp!!!	String8(in o : char, in len : size_t)
    if (mString == NULL) {
        mString = getEmptyString();
    }
!!!42768695.cpp!!!	~String8()
    SharedBuffer::bufferFromData(mString)->release();
!!!42768823.cpp!!!	empty() : String8
    return String8();
!!!42769079.cpp!!!	formatV(in fmt : char, in args : va_list) : String8
    String8 result;
    result.appendFormatV(fmt, args);
    return result;
!!!42769207.cpp!!!	string() : char
    return mString;
!!!42769335.cpp!!!	size() : size_t
    return length();
!!!42769463.cpp!!!	bytes() : size_t
    return length();
!!!42769591.cpp!!!	isEmpty() : bool
    return length() == 0;
!!!42769719.cpp!!!	length() : size_t
    return SharedBuffer::sizeFromData(mString)-1;
!!!42769847.cpp!!!	clear() : void
    SharedBuffer::bufferFromData(mString)->release();
    mString = getEmptyString();
!!!42769975.cpp!!!	setTo(in other : String8) : void
    SharedBuffer::bufferFromData(other.mString)->acquire();
    SharedBuffer::bufferFromData(mString)->release();
    mString = other.mString;
!!!42770103.cpp!!!	setTo(in other : char) : status_t
    const char *newString = allocFromUTF8(other, strlen(other));
    SharedBuffer::bufferFromData(mString)->release();
    mString = newString;
    if (mString) return NO_ERROR;

    mString = getEmptyString();
    return NO_MEMORY;
!!!42770231.cpp!!!	setTo(in other : char, in len : size_t) : status_t
    const char *newString = allocFromUTF8(other, len);
    SharedBuffer::bufferFromData(mString)->release();
    mString = newString;
    if (mString) return NO_ERROR;

    mString = getEmptyString();
    return NO_MEMORY;
!!!42770359.cpp!!!	setTo(in other : char16_t, in len : size_t) : status_t
    const char *newString = allocFromUTF16(other, len);
    SharedBuffer::bufferFromData(mString)->release();
    mString = newString;
    if (mString) return NO_ERROR;

    mString = getEmptyString();
    return NO_MEMORY;
!!!42770487.cpp!!!	setTo(in other : char32_t, in len : size_t) : status_t
    const char *newString = allocFromUTF32(other, len);
    SharedBuffer::bufferFromData(mString)->release();
    mString = newString;
    if (mString) return NO_ERROR;

    mString = getEmptyString();
    return NO_MEMORY;
!!!42770615.cpp!!!	append(in other : String8) : status_t
    const size_t otherLen = other.bytes();
    if (bytes() == 0) {
        setTo(other);
        return NO_ERROR;
    } else if (otherLen == 0) {
        return NO_ERROR;
    }

    return real_append(other.string(), otherLen);
!!!42770743.cpp!!!	append(in other : char) : status_t
    return append(other, strlen(other));
!!!42770871.cpp!!!	append(in other : char, in otherLen : size_t) : status_t
    if (bytes() == 0) {
        return setTo(other, otherLen);
    } else if (otherLen == 0) {
        return NO_ERROR;
    }

    return real_append(other, otherLen);
!!!42771127.cpp!!!	appendFormatV(in fmt : char, in args : va_list) : status_t
    int n, result = NO_ERROR;
    va_list tmp_args;

    /* args is undefined after vsnprintf.
     * So we need a copy here to avoid the
     * second vsnprintf access undefined args.
     */
    va_copy(tmp_args, args);
    n = vsnprintf(NULL, 0, fmt, tmp_args);
    va_end(tmp_args);

    if (n != 0) {
        size_t oldLength = length();
        char* buf = lockBuffer(oldLength + n);
        if (buf) {
            vsnprintf(buf + oldLength, n + 1, fmt, args);
        } else {
            result = NO_MEMORY;
        }
    }
    return result;
!!!42771255.cpp!!!	getUtf32Length() : size_t
    return utf8_to_utf32_length(mString, length());
!!!42771383.cpp!!!	getUtf32At(in index : size_t, inout next_index : size_t) : int32_t
    return utf32_from_utf8_at(mString, length(), index, next_index);
!!!42771511.cpp!!!	getUtf32(inout dst : char32_t) : void
    utf8_to_utf32(mString, length(), dst);
!!!42771639.cpp!!!	operator =(in other : String8) : String8
    setTo(other);
    return *this;
!!!42771767.cpp!!!	operator =(in other : char) : String8
    setTo(other);
    return *this;
!!!42771895.cpp!!!	operator +=(in other : String8) : String8
    append(other);
    return *this;
!!!42772023.cpp!!!	operator +(in other : String8) : String8
    String8 tmp(*this);
    tmp += other;
    return tmp;
!!!42772151.cpp!!!	operator +=(in other : char) : String8
    append(other);
    return *this;
!!!42772279.cpp!!!	operator +(in other : char) : String8
    String8 tmp(*this);
    tmp += other;
    return tmp;
!!!42772407.cpp!!!	compare(in other : String8) : int
    return strcmp(mString, other.mString);
!!!42772535.cpp!!!	operator <(in other : String8) : bool
    return strcmp(mString, other.mString) < 0;
!!!42772663.cpp!!!	operator <=(in other : String8) : bool
    return strcmp(mString, other.mString) <= 0;
!!!42772791.cpp!!!	operator ==(in other : String8) : bool
    return strcmp(mString, other.mString) == 0;
!!!42772919.cpp!!!	operator !=(in other : String8) : bool
    return strcmp(mString, other.mString) != 0;
!!!42773047.cpp!!!	operator >=(in other : String8) : bool
    return strcmp(mString, other.mString) >= 0;
!!!42773175.cpp!!!	operator >(in other : String8) : bool
    return strcmp(mString, other.mString) > 0;
!!!42773303.cpp!!!	operator <(in other : char) : bool
    return strcmp(mString, other) < 0;
!!!42773431.cpp!!!	operator <=(in other : char) : bool
    return strcmp(mString, other) <= 0;
!!!42773559.cpp!!!	operator ==(in other : char) : bool
    return strcmp(mString, other) == 0;
!!!42773687.cpp!!!	operator !=(in other : char) : bool
    return strcmp(mString, other) != 0;
!!!42773815.cpp!!!	operator >=(in other : char) : bool
    return strcmp(mString, other) >= 0;
!!!42773943.cpp!!!	operator >(in other : char) : bool
    return strcmp(mString, other) > 0;
!!!42774071.cpp!!!	operator constchar*()
    return mString;
!!!42774199.cpp!!!	lockBuffer(in size : size_t) : char
    SharedBuffer* buf = SharedBuffer::bufferFromData(mString)
        ->editResize(size+1);
    if (buf) {
        char* str = (char*)buf->data();
        mString = str;
        return str;
    }
    return NULL;
!!!42774327.cpp!!!	unlockBuffer() : void
    unlockBuffer(strlen(mString));
!!!42774455.cpp!!!	unlockBuffer(in size : size_t) : status_t
    if (size != this->size()) {
        SharedBuffer* buf = SharedBuffer::bufferFromData(mString)
            ->editResize(size+1);
        if (! buf) {
            return NO_MEMORY;
        }

        char* str = (char*)buf->data();
        str[size] = 0;
        mString = str;
    }

    return NO_ERROR;
!!!42774583.cpp!!!	find(in other : char, in start : size_t = 0) : ssize_t
    size_t len = size();
    if (start >= len) {
        return -1;
    }
    const char* s = mString+start;
    const char* p = strstr(s, other);
    return p ? p-mString : -1;
!!!42774711.cpp!!!	contains(in other : char) : bool
    return find(other) >= 0;
!!!42774839.cpp!!!	removeAll(in other : char) : bool
    ssize_t index = find(other);
    if (index < 0) return false;

    char* buf = lockBuffer(size());
    if (!buf) return false; // out of memory

    size_t skip = strlen(other);
    size_t len = size();
    size_t tail = index;
    while (size_t(index) < len) {
        ssize_t next = find(other, index + skip);
        if (next < 0) {
            next = len;
        }

        memmove(buf + tail, buf + index + skip, next - index - skip);
        tail += next - index - skip;
        index = next;
    }
    unlockBuffer(tail);
    return true;
!!!42774967.cpp!!!	toLower() : void
    toLower(0, size());
!!!42775095.cpp!!!	toLower(in start : size_t, in length : size_t) : void
    const size_t len = size();
    if (start >= len) {
        return;
    }
    if (start+length > len) {
        length = len-start;
    }
    char* buf = lockBuffer(len);
    buf += start;
    while (length > 0) {
        *buf = tolower(*buf);
        buf++;
        length--;
    }
    unlockBuffer(len);
!!!42775223.cpp!!!	toUpper() : void
    toUpper(0, size());
!!!42775351.cpp!!!	toUpper(in start : size_t, in length : size_t) : void
    const size_t len = size();
    if (start >= len) {
        return;
    }
    if (start+length > len) {
        length = len-start;
    }
    char* buf = lockBuffer(len);
    buf += start;
    while (length > 0) {
        *buf = toupper(*buf);
        buf++;
        length--;
    }
    unlockBuffer(len);
!!!42775479.cpp!!!	setPathName(in name : char) : void
    setPathName(name, strlen(name));
!!!42775607.cpp!!!	setPathName(in name : char, in len : size_t) : void
    char* buf = lockBuffer(len);

    memcpy(buf, name, len);

    // remove trailing path separator, if present
    if (len > 0 && buf[len-1] == OS_PATH_SEPARATOR)
        len--;

    buf[len] = '\0';

    unlockBuffer(len);
!!!42775735.cpp!!!	getPathLeaf(in  : void) : String8
    const char* cp;
    const char*const buf = mString;

    cp = strrchr(buf, OS_PATH_SEPARATOR);
    if (cp == NULL)
        return String8(*this);
    else
        return String8(cp+1);
!!!42775863.cpp!!!	getPathDir(in  : void) : String8
    const char* cp;
    const char*const str = mString;

    cp = strrchr(str, OS_PATH_SEPARATOR);
    if (cp == NULL)
        return String8("");
    else
        return String8(str, cp - str);
!!!42775991.cpp!!!	walkPath(inout outRemains : String8 = NULL) : String8
    const char* cp;
    const char*const str = mString;
    const char* buf = str;

    cp = strchr(buf, OS_PATH_SEPARATOR);
    if (cp == buf) {
        // don't include a leading '/'.
        buf = buf+1;
        cp = strchr(buf, OS_PATH_SEPARATOR);
    }

    if (cp == NULL) {
        String8 res = buf != str ? String8(buf) : *this;
        if (outRemains) *outRemains = String8("");
        return res;
    }

    String8 res(buf, cp-buf);
    if (outRemains) *outRemains = String8(cp+1);
    return res;
!!!42776119.cpp!!!	getPathExtension(in  : void) : String8
    char* ext;

    ext = find_extension();
    if (ext != NULL)
        return String8(ext);
    else
        return String8("");
!!!42776247.cpp!!!	getBasePath(in  : void) : String8
    char* ext;
    const char* const str = mString;

    ext = find_extension();
    if (ext == NULL)
        return String8(*this);
    else
        return String8(str, ext - str);
!!!42776375.cpp!!!	appendPath(in name : char) : String8
    // TODO: The test below will fail for Win32 paths. Fix later or ignore.
    if (name[0] != OS_PATH_SEPARATOR) {
        if (*name == '\0') {
            // nothing to do
            return *this;
        }

        size_t len = length();
        if (len == 0) {
            // no existing filename, just use the new one
            setPathName(name);
            return *this;
        }

        // make room for oldPath + '/' + newPath
        int newlen = strlen(name);

        char* buf = lockBuffer(len+1+newlen);

        // insert a '/' if needed
        if (buf[len-1] != OS_PATH_SEPARATOR)
            buf[len++] = OS_PATH_SEPARATOR;

        memcpy(buf+len, name, newlen+1);
        len += newlen;

        unlockBuffer(len);

        return *this;
    } else {
        setPathName(name);
        return *this;
    }
!!!42776887.cpp!!!	convertToResPath() : String8
#if OS_PATH_SEPARATOR != RES_PATH_SEPARATOR
    size_t len = length();
    if (len > 0) {
        char * buf = lockBuffer(len);
        for (char * end = buf + len; buf < end; ++buf) {
            if (*buf == OS_PATH_SEPARATOR)
                *buf = RES_PATH_SEPARATOR;
        }
        unlockBuffer(len);
    }
#endif
    return *this;
!!!42777015.cpp!!!	real_append(in other : char, in otherLen : size_t) : status_t
    const size_t myLen = bytes();
    
    SharedBuffer* buf = SharedBuffer::bufferFromData(mString)
        ->editResize(myLen+otherLen+1);
    if (buf) {
        char* str = (char*)buf->data();
        mString = str;
        str += myLen;
        memcpy(str, other, otherLen);
        str[otherLen] = '\0';
        return NO_ERROR;
    }
    return NO_MEMORY;
!!!42777143.cpp!!!	find_extension(in  : void) : char
    const char* lastSlash;
    const char* lastDot;
    const char* const str = mString;

    // only look at the filename
    lastSlash = strrchr(str, OS_PATH_SEPARATOR);
    if (lastSlash == NULL)
        lastSlash = str;
    else
        lastSlash++;

    // find the last dot
    lastDot = strrchr(lastSlash, '.');
    if (lastDot == NULL)
        return NULL;

    // looks good, ship it
    return const_cast<char*>(lastDot);
