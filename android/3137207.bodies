class Action
!!!42805047.cpp!!!	AddCommand(in args : std::vector<std::string>, in filename : std::string, in line : int, inout err : std::string) : bool
    if (!function_map_) {
        *err = "no function map available";
        return false;
    }

    if (args.empty()) {
        *err = "command needed, but not provided";
        return false;
    }

    auto function = function_map_->FindFunction(args[0], args.size() - 1, err);
    if (!function) {
        return false;
    }

    AddCommand(function, args, filename, line);
    return true;
!!!42805175.cpp!!!	AddCommand(in f : BuiltinFunction, in args : std::vector<std::string>, in filename : std::string = "", in line : int = 0) : void
    commands_.emplace_back(f, args, filename, line);
!!!42805303.cpp!!!	CombineAction(in action : Action) : void
    for (const auto& c : action.commands_) {
        commands_.emplace_back(c);
    }
!!!42805431.cpp!!!	InitTriggers(in args : std::vector<std::string>, inout err : std::string) : bool
    const static std::string prop_str("property:");
    for (std::size_t i = 0; i < args.size(); ++i) {
        if (i % 2) {
            if (args[i] != "&&") {
                *err = "&& is the only symbol allowed to concatenate actions";
                return false;
            } else {
                continue;
            }
        }

        if (!args[i].compare(0, prop_str.length(), prop_str)) {
            if (!ParsePropertyTrigger(args[i], err)) {
                return false;
            }
        } else {
            if (!event_trigger_.empty()) {
                *err = "multiple event triggers are not allowed";
                return false;
            }

            event_trigger_ = args[i];
        }
    }

    return true;
!!!42805559.cpp!!!	InitSingleTrigger(in trigger : std::string) : bool
    std::vector<std::string> name_vector{trigger};
    std::string err;
    return InitTriggers(name_vector, &err);
!!!42805687.cpp!!!	NumCommands() : std::size_t
    return commands_.size();
!!!42805815.cpp!!!	ExecuteOneCommand(in command : std::size_t) : void
    ExecuteCommand(commands_[command]);
!!!42805943.cpp!!!	ExecuteAllCommands() : void
    for (const auto& c : commands_) {
        ExecuteCommand(c);
    }
!!!42806071.cpp!!!	CheckEventTrigger(in trigger : std::string) : bool
    return !event_trigger_.empty() &&
        trigger == event_trigger_ &&
        CheckPropertyTriggers();
!!!42806199.cpp!!!	CheckPropertyTrigger(in name : std::string, in value : std::string) : bool
    return event_trigger_.empty() && CheckPropertyTriggers(name, value);
!!!42806327.cpp!!!	TriggersEqual(in other : Action) : bool
    return property_triggers_ == other.property_triggers_ &&
        event_trigger_ == other.event_trigger_;
!!!42806455.cpp!!!	BuildTriggersString() : std::string
    std::string result;

    for (const auto& t : property_triggers_) {
        result += t.first;
        result += '=';
        result += t.second;
        result += ' ';
    }
    if (!event_trigger_.empty()) {
        result += event_trigger_;
        result += ' ';
    }
    result.pop_back();
    return result;
!!!42806583.cpp!!!	DumpState() : void
    std::string trigger_name = BuildTriggersString();
    INFO("on %s\n", trigger_name.c_str());

    for (const auto& c : commands_) {
        std::string cmd_str = c.BuildCommandString();
        INFO(" %s\n", cmd_str.c_str());
    }
    INFO("\n");
!!!42806967.cpp!!!	ExecuteCommand(in command : Command) : void
    Timer t;
    int result = command.InvokeFunc();

    if (klog_get_level() >= KLOG_INFO_LEVEL) {
        std::string trigger_name = BuildTriggersString();
        std::string cmd_str = command.BuildCommandString();
        std::string source = command.BuildSourceString();

        INFO("Command '%s' action=%s%s returned %d took %.2fs\n",
             cmd_str.c_str(), trigger_name.c_str(), source.c_str(),
             result, t.duration());
    }
!!!42807095.cpp!!!	CheckPropertyTriggers(in name : std::string = "", in value : std::string = "") : bool
    if (property_triggers_.empty()) {
        return true;
    }

    bool found = name.empty();
    for (const auto& t : property_triggers_) {
        const auto& trigger_name = t.first;
        const auto& trigger_value = t.second;
        if (trigger_name == name) {
            if (trigger_value != "*" && trigger_value != value) {
                return false;
            } else {
                found = true;
            }
        } else {
            std::string prop_val = property_get(trigger_name.c_str());
            if (prop_val.empty() || (trigger_value != "*" &&
                                     trigger_value != prop_val)) {
                return false;
            }
        }
    }
    return found;
!!!42807223.cpp!!!	ParsePropertyTrigger(in trigger : std::string, inout err : std::string) : bool
    const static std::string prop_str("property:");
    std::string prop_name(trigger.substr(prop_str.length()));
    size_t equal_pos = prop_name.find('=');
    if (equal_pos == std::string::npos) {
        *err = "property trigger found without matching '='";
        return false;
    }

    std::string prop_value(prop_name.substr(equal_pos + 1));
    prop_name.erase(equal_pos);

    auto res = property_triggers_.emplace(prop_name, prop_value);
    if (res.second == false) {
        *err = "multiple property triggers found for same property";
        return false;
    }
    return true;
