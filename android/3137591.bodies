class ActionManager
!!!42807607.cpp!!!	GetInstance() : ActionManager
    static ActionManager instance;
    return instance;
!!!42807735.cpp!!!	AddAction(in action : std::unique_ptr<Action>) : void
    auto old_action_it =
        std::find_if(actions_.begin(), actions_.end(),
                     [&action] (std::unique_ptr<Action>& a) {
                         return action->TriggersEqual(*a);
                     });

    if (old_action_it != actions_.end()) {
        (*old_action_it)->CombineAction(*action);
    } else {
        actions_.emplace_back(std::move(action));
    }
!!!42807863.cpp!!!	QueueEventTrigger(in trigger : std::string) : void
    trigger_queue_.push(std::make_unique<EventTrigger>(trigger));
!!!42807991.cpp!!!	QueuePropertyTrigger(in name : std::string, in value : std::string) : void
    trigger_queue_.push(std::make_unique<PropertyTrigger>(name, value));
!!!42808119.cpp!!!	QueueAllPropertyTriggers() : void
    QueuePropertyTrigger("", "");
!!!42808247.cpp!!!	QueueBuiltinAction(in func : BuiltinFunction, in name : std::string) : void
    auto action = std::make_unique<Action>(true);
    std::vector<std::string> name_vector{name};

    if (!action->InitSingleTrigger(name)) {
        return;
    }

    action->AddCommand(func, name_vector);

    trigger_queue_.push(std::make_unique<BuiltinTrigger>(action.get()));
    actions_.emplace_back(std::move(action));
!!!42808375.cpp!!!	ExecuteOneCommand() : void
    // Loop through the trigger queue until we have an action to execute
    while (current_executing_actions_.empty() && !trigger_queue_.empty()) {
        for (const auto& action : actions_) {
            if (trigger_queue_.front()->CheckTriggers(*action)) {
                current_executing_actions_.emplace(action.get());
            }
        }
        trigger_queue_.pop();
    }

    if (current_executing_actions_.empty()) {
        return;
    }

    auto action = current_executing_actions_.front();

    if (current_command_ == 0) {
        std::string trigger_name = action->BuildTriggersString();
        INFO("processing action (%s)\n", trigger_name.c_str());
    }

    action->ExecuteOneCommand(current_command_);

    // If this was the last command in the current action, then remove
    // the action from the executing list.
    // If this action was oneshot, then also remove it from actions_.
    ++current_command_;
    if (current_command_ == action->NumCommands()) {
        current_executing_actions_.pop();
        current_command_ = 0;
        if (action->oneshot()) {
            auto eraser = [&action] (std::unique_ptr<Action>& a) {
                return a.get() == action;
            };
            actions_.erase(std::remove_if(actions_.begin(), actions_.end(), eraser));
        }
    }
!!!42808503.cpp!!!	HasMoreCommands() : bool
    return !current_executing_actions_.empty() || !trigger_queue_.empty();
!!!42808631.cpp!!!	DumpState() : void
    for (const auto& a : actions_) {
        a->DumpState();
    }
    INFO("\n");
