class HeapImpl
!!!43787831.cpp!!!	~HeapImpl()
  for (unsigned int i = 0; i < kNumBuckets; i++) {
    while (!free_chunks_[i].empty()) {
      Chunk *chunk = free_chunks_[i].next()->data();
      chunk->node_.remove();
      delete chunk;
    }
    while (!full_chunks_[i].empty()) {
      Chunk *chunk = full_chunks_[i].next()->data();
      chunk->node_.remove();
      delete chunk;
    }
  }
!!!43788087.cpp!!!	operator delete(inout ptr : void) : void
  munmap(ptr, kPageSize);
!!!43788215.cpp!!!	Alloc(in size : size_t) : void
  std::lock_guard<std::mutex> lk(m_);
  return AllocLocked(size);
!!!43788343.cpp!!!	Free(inout ptr : void) : void
  std::lock_guard<std::mutex> lk(m_);
  FreeLocked(ptr);
!!!43788471.cpp!!!	Empty() : bool
  for (unsigned int i = 0; i < kNumBuckets; i++) {
    for (LinkedList<Chunk*> *it = free_chunks_[i].next(); it->data() != NULL; it = it->next()) {
      if (!it->data()->Empty()) {
        return false;
      }
    }
    for (LinkedList<Chunk*> *it = full_chunks_[i].next(); it->data() != NULL; it = it->next()) {
      if (!it->data()->Empty()) {
        return false;
      }
    }
  }

  return true;
!!!43788599.cpp!!!	MoveToFullList(inout chunk : Chunk, in bucket : int) : void
  MoveToList(chunk, &full_chunks_[bucket]);
!!!43788727.cpp!!!	MoveToFreeList(inout chunk : Chunk, in bucket : int) : void
  MoveToList(chunk, &free_chunks_[bucket]);
!!!43788855.cpp!!!	MoveToList(inout chunk : Chunk, inout head : LinkedList<Chunk*>) : void
  // Remove from old list
  chunk->node_.remove();

  LinkedList<Chunk*> *node = head;
  // Insert into new list, sorted by lowest free count
  while (node->next() != head && node->data() != nullptr
      && node->data()->free_count() < chunk->free_count())
    node = node->next();

  node->insert(chunk->node_);
!!!43788983.cpp!!!	MapAlloc(in size : size_t) : void
  size = (size + kPageSize - 1) & ~(kPageSize - 1);

  MapAllocation* allocation = reinterpret_cast<MapAllocation*>(AllocLocked(
      sizeof(MapAllocation)));
  void* ptr = MapAligned(size, kChunkSize);
  if (!ptr) {
    FreeLocked(allocation);
    abort(); //throw std::bad_alloc;
  }
  allocation->ptr = ptr;
  allocation->size = size;
  allocation->next = map_allocation_list_;
  map_allocation_list_ = allocation;

  return ptr;
!!!43789111.cpp!!!	MapFree(inout ptr : void) : void
  MapAllocation **allocation = &map_allocation_list_;
  while (*allocation && (*allocation)->ptr != ptr)
    allocation = &(*allocation)->next;

  assert(*allocation != nullptr);

  munmap((*allocation)->ptr, (*allocation)->size);
  FreeLocked(*allocation);

  *allocation = (*allocation)->next;
!!!43789239.cpp!!!	AllocLocked(in size : size_t) : void
  if (size > kMaxBucketAllocationSize) {
    return MapAlloc(size);
  }
  int bucket = size_to_bucket(size);
  if (free_chunks_[bucket].empty()) {
    Chunk *chunk = new Chunk(this, bucket);
    free_chunks_[bucket].insert(chunk->node_);
  }
  return free_chunks_[bucket].next()->data()->Alloc();
!!!43789367.cpp!!!	FreeLocked(inout ptr : void) : void
  if (!Chunk::is_chunk(ptr)) {
    HeapImpl::MapFree(ptr);
  } else {
    Chunk* chunk = Chunk::ptr_to_chunk(ptr);
    assert(chunk->heap() == this);
    chunk->Free(ptr);
  }
