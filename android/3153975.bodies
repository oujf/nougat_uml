class ArmToArm64Assembler
!!!42849975.cpp!!!	ArmToArm64Assembler(in assembly : sp<Assembly>)
    mBase = mPC = (uint32_t *)assembly->base();
    mDuration = ggl_system_time();
    mZeroReg = 13;
    mTmpReg1 = 15;
    mTmpReg2 = 16;
    mTmpReg3 = 17;
!!!42850103.cpp!!!	ArmToArm64Assembler(inout base : void)
    mBase = mPC = (uint32_t *)base;
    mDuration = ggl_system_time();
    // Regs 13, 15, 16, 17 are used as temporary registers
    mZeroReg = 13;
    mTmpReg1 = 15;
    mTmpReg2 = 16;
    mTmpReg3 = 17;
!!!42850359.cpp!!!	base() : uint32_t
    return mBase;
!!!42850487.cpp!!!	pc() : uint32_t
    return mPC;
!!!42850615.cpp!!!	disassemble(in name : char) : void
    if(name)
    {
        printf("%s:\n", name);
    }
    size_t count = pc()-base();
    uint32_t* i = base();
    while (count--)
    {
        ssize_t label = mLabelsInverseMapping.indexOfKey(i);
        if (label >= 0)
        {
            printf("%s:\n", mLabelsInverseMapping.valueAt(label));
        }
        ssize_t comment = mComments.indexOfKey(i);
        if (comment >= 0)
        {
            printf("; %s\n", mComments.valueAt(comment));
        }
        printf("%p:    %08x    ", i, uint32_t(i[0]));
        {
            char instr[256];
            ::arm64_disassemble(*i, instr);
            printf("%s\n", instr);
        }
        i++;
    }
!!!42850743.cpp!!!	reset() : void
    if(mAssembly == NULL)
        mPC = mBase;
    else
        mBase = mPC = (uint32_t *)mAssembly->base();
    mBranchTargets.clear();
    mLabels.clear();
    mLabelsInverseMapping.clear();
    mComments.clear();
#if ARM64_ASM_DEBUG
    ALOGI("RESET\n");
#endif
!!!42850871.cpp!!!	generate(in name : char) : int
    // fixup all the branches
    size_t count = mBranchTargets.size();
    while (count--)
    {
        const branch_target_t& bt = mBranchTargets[count];
        uint32_t* target_pc = mLabels.valueFor(bt.label);
        LOG_ALWAYS_FATAL_IF(!target_pc,
                "error resolving branch targets, target_pc is null");
        int32_t offset = int32_t(target_pc - bt.pc);
        *bt.pc |= (offset & 0x7FFFF) << 5;
    }

    if(mAssembly != NULL)
        mAssembly->resize( int(pc()-base())*4 );

    // the instruction cache is flushed by CodeCache
    const int64_t duration = ggl_system_time() - mDuration;
    const char * const format = "generated %s (%d ins) at [%p:%p] in %ld ns\n";
    ALOGI(format, name, int(pc()-base()), base(), pc(), duration);


    char value[PROPERTY_VALUE_MAX];
    property_get("debug.pf.disasm", value, "0");
    if (atoi(value) != 0)
    {
        printf(format, name, int(pc()-base()), base(), pc(), duration);
        disassemble(name);
    }
    return NO_ERROR;
!!!42850999.cpp!!!	getCodegenArch() : int
    return CODEGEN_ARCH_ARM64;
!!!42851127.cpp!!!	prolog() : void
    // write prolog code
    mPrologPC = mPC;
    *mPC++ = A64_MOVZ_X(mZeroReg,0,0);
!!!42851255.cpp!!!	epilog(in touched : uint32_t) : void
    // write epilog code
    static const int XLR = 30;
    *mPC++ = A64_RET(XLR);
!!!42851383.cpp!!!	comment(in string : char) : void
    mComments.add(mPC, string);
    LOG_INSTR("//%s\n", string);
!!!42851511.cpp!!!	isValidImmediate(in immediate : uint32_t) : bool
    uint32_t rot, imm;
    return buildImmediate(immediate, rot, imm) == 0;
!!!42851639.cpp!!!	buildImmediate(in immediate : uint32_t, inout rot : uint32_t, inout imm : uint32_t) : int
    rot = 0;
    imm = immediate;
    return 0; // Always true
!!!42851767.cpp!!!	imm(in immediate : uint32_t) : uint32_t
    mAddrMode.immediate = immediate;
    mAddrMode.writeback = false;
    mAddrMode.preindex  = false;
    mAddrMode.postindex = false;
    return OPERAND_IMM;

!!!42851895.cpp!!!	reg_imm(in Rm : int, in type : int, in shift : uint32_t) : uint32_t
    mAddrMode.reg_imm_Rm = Rm;
    mAddrMode.reg_imm_type = type;
    mAddrMode.reg_imm_shift = shift;
    return OPERAND_REG_IMM;
!!!42852023.cpp!!!	reg_rrx(in Rm : int) : uint32_t
    NOT_IMPLEMENTED();
    return OPERAND_UNSUPPORTED;
!!!42852151.cpp!!!	reg_reg(in Rm : int, in type : int, in Rs : int) : uint32_t
    NOT_IMPLEMENTED(); //Not required
    return OPERAND_UNSUPPORTED;
!!!42852279.cpp!!!	immed12_pre(in immed12 : int32_t, in W : int = 0) : uint32_t
    mAddrMode.immediate = immed12;
    mAddrMode.writeback = W;
    mAddrMode.preindex  = true;
    mAddrMode.postindex = false;
    return OPERAND_IMM;
!!!42852407.cpp!!!	immed12_post(in immed12 : int32_t) : uint32_t
    mAddrMode.immediate = immed12;
    mAddrMode.writeback = true;
    mAddrMode.preindex  = false;
    mAddrMode.postindex = true;
    return OPERAND_IMM;
!!!42852535.cpp!!!	reg_scale_pre(in Rm : int, in type : int = 0, in shift : uint32_t = 0, in W : int = 0) : uint32_t
    if(type != 0 || shift != 0 || W != 0)
    {
        NOT_IMPLEMENTED(); //Not required
        return OPERAND_UNSUPPORTED;
    }
    else
    {
        mAddrMode.reg_offset = Rm;
        return OPERAND_REG_OFFSET;
    }
!!!42852663.cpp!!!	reg_scale_post(in Rm : int, in type : int = 0, in shift : uint32_t = 0) : uint32_t
    NOT_IMPLEMENTED(); //Not required
    return OPERAND_UNSUPPORTED;
!!!42852791.cpp!!!	immed8_pre(in immed8 : int32_t, in W : int = 0) : uint32_t
    mAddrMode.immediate = immed8;
    mAddrMode.writeback = W;
    mAddrMode.preindex  = true;
    mAddrMode.postindex = false;
    return OPERAND_IMM;
!!!42852919.cpp!!!	immed8_post(in immed8 : int32_t) : uint32_t
    mAddrMode.immediate = immed8;
    mAddrMode.writeback = true;
    mAddrMode.preindex  = false;
    mAddrMode.postindex = true;
    return OPERAND_IMM;
!!!42853047.cpp!!!	reg_pre(in Rm : int, in W : int = 0) : uint32_t
    if(W != 0)
    {
        NOT_IMPLEMENTED(); //Not required
        return OPERAND_UNSUPPORTED;
    }
    else
    {
        mAddrMode.reg_offset = Rm;
        return OPERAND_REG_OFFSET;
    }
!!!42853175.cpp!!!	reg_post(in Rm : int) : uint32_t
    NOT_IMPLEMENTED(); //Not required
    return OPERAND_UNSUPPORTED;
!!!42853303.cpp!!!	dataProcessing(in opcode : int, in cc : int, in s : int, in Rd : int, in Rn : int, in Op2 : uint32_t) : void
    uint32_t Wd;

    if(cc != AL)
        Wd = mTmpReg1;
    else
        Wd = Rd;

    if(opcode == opADD || opcode == opAND || opcode == opORR ||opcode == opSUB)
    {
        dataProcessingCommon(opcode, s, Wd, Rn, Op2);
    }
    else if(opcode == opCMP)
    {
        dataProcessingCommon(opSUB, 1, mTmpReg3, Rn, Op2);
    }
    else if(opcode == opRSB)
    {
        dataProcessingCommon(opSUB, s, Wd, Rn, Op2);
        dataProcessingCommon(opSUB, s, Wd, mZeroReg, Wd);
    }
    else if(opcode == opMOV)
    {
        dataProcessingCommon(opORR, 0, Wd, mZeroReg, Op2);
        if(s == 1)
        {
            dataProcessingCommon(opSUB, 1, mTmpReg3, Wd, mZeroReg);
        }
    }
    else if(opcode == opMVN)
    {
        dataProcessingCommon(opMVN, s, Wd, mZeroReg, Op2);
    }
    else if(opcode == opBIC)
    {
        dataProcessingCommon(opMVN, s, mTmpReg3, mZeroReg, Op2);
        dataProcessingCommon(opAND, s, Wd, Rn, mTmpReg3);
    }
    else
    {
        NOT_IMPLEMENTED();
        return;
    }

    if(cc != AL)
    {
        *mPC++ = A64_CSEL_W(Rd, mTmpReg1, Rd, cc);
    }
!!!42853431.cpp!!!	MLA(in cc : int, in s : int, in Rd : int, in Rm : int, in Rs : int, in Rn : int) : void
    if(cc != AL){ NOT_IMPLEMENTED(); return;} //Not required

    *mPC++ = A64_MADD_W(Rd, Rm, Rs, Rn);
    if(s == 1)
        dataProcessingCommon(opSUB, 1, mTmpReg1, Rd, mZeroReg);
!!!42853559.cpp!!!	MUL(in cc : int, in s : int, in Rd : int, in Rm : int, in Rs : int) : void
    if(cc != AL){ NOT_IMPLEMENTED(); return;} //Not required
    if(s  != 0) { NOT_IMPLEMENTED(); return;} //Not required
    *mPC++ = A64_MADD_W(Rd, Rm, Rs, mZeroReg);
!!!42853687.cpp!!!	UMULL(in cc : int, in s : int, in RdLo : int, in RdHi : int, in Rm : int, in Rs : int) : void
    NOT_IMPLEMENTED(); //Not required
!!!42853815.cpp!!!	UMUAL(in cc : int, in s : int, in RdLo : int, in RdHi : int, in Rm : int, in Rs : int) : void
    NOT_IMPLEMENTED(); //Not required
!!!42853943.cpp!!!	SMULL(in cc : int, in s : int, in RdLo : int, in RdHi : int, in Rm : int, in Rs : int) : void
    NOT_IMPLEMENTED(); //Not required
!!!42854071.cpp!!!	SMUAL(in cc : int, in s : int, in RdLo : int, in RdHi : int, in Rm : int, in Rs : int) : void
    NOT_IMPLEMENTED(); //Not required
!!!42854199.cpp!!!	B(in cc : int, inout pc : uint32_t) : void
    NOT_IMPLEMENTED(); //Not required
!!!42854327.cpp!!!	BL(in cc : int, inout pc : uint32_t) : void
    NOT_IMPLEMENTED(); //Not required
!!!42854455.cpp!!!	BX(in cc : int, in Rn : int) : void
    NOT_IMPLEMENTED(); //Not required
!!!42854583.cpp!!!	label(in theLabel : char) : void
    mLabels.add(theLabel, mPC);
    mLabelsInverseMapping.add(mPC, theLabel);
    LOG_LABEL("%s:\n", theLabel);
!!!42854711.cpp!!!	B(in cc : int, in label : char) : void
    mBranchTargets.add(branch_target_t(label, mPC));
    LOG_INSTR("B%s %s\n", cc_codes[cc], label );
    *mPC++ = (0x54 << 24) | cc;
!!!42854839.cpp!!!	BL(in cc : int, in label : char) : void
    NOT_IMPLEMENTED(); //Not Required
!!!42854967.cpp!!!	pcForLabel(in label : char) : uint32_t
    return mLabels.valueFor(label);
!!!42855095.cpp!!!	ADDR_LDR(in cc : int, in Rd : int, in Rn : int, in op_type : uint32_t = 0) : void
    return dataTransfer(opLDR, cc, Rd, Rn, op_type, 64);
!!!42855223.cpp!!!	ADDR_ADD(in cc : int, in s : int, in Rd : int, in Rn : int, in Op2 : uint32_t) : void
    if(cc != AL){ NOT_IMPLEMENTED(); return;} //Not required
    if(s  != 0) { NOT_IMPLEMENTED(); return;} //Not required


    if(Op2 == OPERAND_REG_IMM && mAddrMode.reg_imm_type == LSL)
    {
        int Rm = mAddrMode.reg_imm_Rm;
        int amount = mAddrMode.reg_imm_shift;
        *mPC++ = A64_ADD_X_Wm_SXTW(Rd, Rn, Rm, amount);
    }
    else if(Op2 < OPERAND_REG)
    {
        int Rm = Op2;
        int amount = 0;
        *mPC++ = A64_ADD_X_Wm_SXTW(Rd, Rn, Rm, amount);
    }
    else if(Op2 == OPERAND_IMM)
    {
        int imm = mAddrMode.immediate;
        *mPC++ = A64_MOVZ_W(mTmpReg1, imm & 0x0000FFFF, 0);
        *mPC++ = A64_MOVK_W(mTmpReg1, (imm >> 16) & 0x0000FFFF, 16);

        int Rm = mTmpReg1;
        int amount = 0;
        *mPC++ = A64_ADD_X_Wm_SXTW(Rd, Rn, Rm, amount);
    }
    else
    {
        NOT_IMPLEMENTED(); //Not required
    }
!!!42855351.cpp!!!	ADDR_SUB(in cc : int, in s : int, in Rd : int, in Rn : int, in Op2 : uint32_t) : void
    if(cc != AL){ NOT_IMPLEMENTED(); return;} //Not required
    if(s  != 0) { NOT_IMPLEMENTED(); return;} //Not required

    if(Op2 == OPERAND_REG_IMM && mAddrMode.reg_imm_type == LSR)
    {
        *mPC++ = A64_ADD_W(mTmpReg1, mZeroReg, mAddrMode.reg_imm_Rm,
                           LSR, mAddrMode.reg_imm_shift);
        *mPC++ = A64_SUB_X_Wm_SXTW(Rd, Rn, mTmpReg1, 0);
    }
    else
    {
        NOT_IMPLEMENTED(); //Not required
    }
!!!42855479.cpp!!!	ADDR_STR(in cc : int, in Rd : int, in Rn : int, in op_type : uint32_t = 0) : void
    return dataTransfer(opSTR, cc, Rd, Rn, op_type, 64);
!!!42855607.cpp!!!	LDR(in cc : int, in Rd : int, in Rn : int, in op_type : uint32_t = 0) : void
    return dataTransfer(opLDR, cc, Rd, Rn, op_type);
!!!42855735.cpp!!!	LDRB(in cc : int, in Rd : int, in Rn : int, in op_type : uint32_t = 0) : void
    return dataTransfer(opLDRB, cc, Rd, Rn, op_type);
!!!42855863.cpp!!!	STR(in cc : int, in Rd : int, in Rn : int, in op_type : uint32_t = 0) : void
    return dataTransfer(opSTR, cc, Rd, Rn, op_type);
!!!42855991.cpp!!!	STRB(in cc : int, in Rd : int, in Rn : int, in op_type : uint32_t = 0) : void
    return dataTransfer(opSTRB, cc, Rd, Rn, op_type);
!!!42856119.cpp!!!	LDRH(in cc : int, in Rd : int, in Rn : int, in op_type : uint32_t = 0) : void
    return dataTransfer(opLDRH, cc, Rd, Rn, op_type);
!!!42856247.cpp!!!	LDRSB(in cc : int, in Rd : int, in Rn : int, in offset : uint32_t = 0) : void
    NOT_IMPLEMENTED(); //Not required
!!!42856375.cpp!!!	LDRSH(in cc : int, in Rd : int, in Rn : int, in offset : uint32_t = 0) : void
    NOT_IMPLEMENTED(); //Not required
!!!42856503.cpp!!!	STRH(in cc : int, in Rd : int, in Rn : int, in op_type : uint32_t = 0) : void
    return dataTransfer(opSTRH, cc, Rd, Rn, op_type);
!!!42856631.cpp!!!	LDM(in cc : int, in dir : int, in Rn : int, in W : int, in reg_list : uint32_t) : void
    const int XSP = 31;
    if(cc != AL || dir != IA || W == 0 || Rn != SP)
    {
        NOT_IMPLEMENTED();
        return;
    }

    for(int i = 0; i < 32; ++i)
    {
        if((reg_list & (1 << i)))
        {
            int reg = i;
            int size = 16;
            *mPC++ = A64_LDR_IMM_PostIndex(reg, XSP, size);
        }
    }
!!!42856759.cpp!!!	STM(in cc : int, in dir : int, in Rn : int, in W : int, in reg_list : uint32_t) : void
    const int XSP = 31;
    if(cc != AL || dir != DB || W == 0 || Rn != SP)
    {
        NOT_IMPLEMENTED();
        return;
    }

    for(int i = 31; i >= 0; --i)
    {
        if((reg_list & (1 << i)))
        {
            int size = -16;
            int reg  = i;
            *mPC++ = A64_STR_IMM_PreIndex(reg, XSP, size);
        }
    }
!!!42856887.cpp!!!	SWP(in cc : int, in Rn : int, in Rd : int, in Rm : int) : void
    NOT_IMPLEMENTED(); //Not required
!!!42857015.cpp!!!	SWPB(in cc : int, in Rn : int, in Rd : int, in Rm : int) : void
    NOT_IMPLEMENTED(); //Not required
!!!42857143.cpp!!!	SWI(in cc : int, in comment : uint32_t) : void
    NOT_IMPLEMENTED(); //Not required
!!!42857271.cpp!!!	PLD(in Rn : int, in offset : uint32_t) : void
    NOT_IMPLEMENTED(); //Not required
!!!42857399.cpp!!!	CLZ(in cc : int, in Rd : int, in Rm : int) : void
    NOT_IMPLEMENTED(); //Not required
!!!42857527.cpp!!!	QADD(in cc : int, in Rd : int, in Rm : int, in Rn : int) : void
    NOT_IMPLEMENTED(); //Not required
!!!42857655.cpp!!!	QDADD(in cc : int, in Rd : int, in Rm : int, in Rn : int) : void
    NOT_IMPLEMENTED(); //Not required
!!!42857783.cpp!!!	QSUB(in cc : int, in Rd : int, in Rm : int, in Rn : int) : void
    NOT_IMPLEMENTED(); //Not required
!!!42857911.cpp!!!	QDSUB(in cc : int, in Rd : int, in Rm : int, in Rn : int) : void
    NOT_IMPLEMENTED(); //Not required
!!!42858039.cpp!!!	SMUL(in cc : int, in xy : int, in Rd : int, in Rm : int, in Rs : int) : void
    if(cc != AL){ NOT_IMPLEMENTED(); return;} //Not required

    if (xy & xyTB)
        *mPC++ = A64_SBFM_W(mTmpReg1, Rm, 16, 31);
    else
        *mPC++ = A64_SBFM_W(mTmpReg1, Rm, 0, 15);

    if (xy & xyBT)
        *mPC++ = A64_SBFM_W(mTmpReg2, Rs, 16, 31);
    else
        *mPC++ = A64_SBFM_W(mTmpReg2, Rs, 0, 15);

    *mPC++ = A64_MADD_W(Rd,mTmpReg1,mTmpReg2, mZeroReg);
!!!42858167.cpp!!!	SMULW(in cc : int, in y : int, in Rd : int, in Rm : int, in Rs : int) : void
    if(cc != AL){ NOT_IMPLEMENTED(); return;} //Not required

    if (y & yT)
        *mPC++ = A64_SBFM_W(mTmpReg1, Rs, 16, 31);
    else
        *mPC++ = A64_SBFM_W(mTmpReg1, Rs, 0, 15);

    *mPC++ = A64_SBFM_W(mTmpReg2, Rm, 0, 31);
    *mPC++ = A64_SMADDL(mTmpReg3,mTmpReg1,mTmpReg2, mZeroReg);
    *mPC++ = A64_UBFM_X(Rd,mTmpReg3, 16, 47);
!!!42858295.cpp!!!	SMLA(in cc : int, in xy : int, in Rd : int, in Rm : int, in Rs : int, in Rn : int) : void
    if(cc != AL){ NOT_IMPLEMENTED(); return;} //Not required
    if(xy != xyBB) { NOT_IMPLEMENTED(); return;} //Not required

    *mPC++ = A64_SBFM_W(mTmpReg1, Rm, 0, 15);
    *mPC++ = A64_SBFM_W(mTmpReg2, Rs, 0, 15);
    *mPC++ = A64_MADD_W(Rd, mTmpReg1, mTmpReg2, Rn);
!!!42858423.cpp!!!	SMLAL(in cc : int, in xy : int, in RdHi : int, in RdLo : int, in Rs : int, in Rm : int) : void
    NOT_IMPLEMENTED(); //Not required
    return;
!!!42858551.cpp!!!	SMLAW(in cc : int, in y : int, in Rd : int, in Rm : int, in Rs : int, in Rn : int) : void
    NOT_IMPLEMENTED(); //Not required
    return;
!!!42858679.cpp!!!	UXTB16(in cc : int, in Rd : int, in Rm : int, in rotate : int) : void
    if(cc != AL){ NOT_IMPLEMENTED(); return;} //Not required

    *mPC++ = A64_EXTR_W(mTmpReg1, Rm, Rm, rotate * 8);

    uint32_t imm = 0x00FF00FF;
    *mPC++ = A64_MOVZ_W(mTmpReg2, imm & 0xFFFF, 0);
    *mPC++ = A64_MOVK_W(mTmpReg2, (imm >> 16) & 0x0000FFFF, 16);
    *mPC++ = A64_AND_W(Rd,mTmpReg1, mTmpReg2);
!!!42858807.cpp!!!	UBFX(in cc : int, in Rd : int, in Rn : int, in lsb : int, in width : int) : void
    if(cc != AL){ NOT_IMPLEMENTED(); return;} //Not required
    *mPC++ = A64_UBFM_W(Rd, Rn, lsb, lsb + width - 1);
!!!42859191.cpp!!!	dataTransfer(in op : int, in cc : int, in Rd : int, in Rn : int, in op_type : uint32_t, in size : uint32_t = 32) : void
    const int XSP = 31;
    if(Rn == SP)
        Rn = XSP;

    if(op_type == OPERAND_IMM)
    {
        int addrReg;
        int imm = mAddrMode.immediate;
        if(imm >= 0 && imm < (1<<12))
            *mPC++ = A64_ADD_IMM_X(mTmpReg1, mZeroReg, imm, 0);
        else if(imm < 0 && -imm < (1<<12))
            *mPC++ = A64_SUB_IMM_X(mTmpReg1, mZeroReg, -imm, 0);
        else
        {
            NOT_IMPLEMENTED();
            return;
        }

        addrReg = Rn;
        if(mAddrMode.preindex == true || mAddrMode.postindex == true)
        {
            *mPC++ = A64_ADD_X(mTmpReg2, addrReg, mTmpReg1);
            if(mAddrMode.preindex == true)
                addrReg = mTmpReg2;
        }

        if(cc != AL)
            *mPC++ = A64_B_COND(cc^1, 8);

        *mPC++ = A64_LDRSTR_Wm_SXTW_0(op, size, Rd, addrReg, mZeroReg);

        if(mAddrMode.writeback == true)
            *mPC++ = A64_CSEL_X(Rn, mTmpReg2, Rn, cc);
    }
    else if(op_type == OPERAND_REG_OFFSET)
    {
        if(cc != AL)
            *mPC++ = A64_B_COND(cc^1, 8);
        *mPC++ = A64_LDRSTR_Wm_SXTW_0(op, size, Rd, Rn, mAddrMode.reg_offset);

    }
    else if(op_type > OPERAND_UNSUPPORTED)
    {
        if(cc != AL)
            *mPC++ = A64_B_COND(cc^1, 8);
        *mPC++ = A64_LDRSTR_Wm_SXTW_0(op, size, Rd, Rn, mZeroReg);
    }
    else
    {
        NOT_IMPLEMENTED(); // Not required
    }
    return;

!!!42859319.cpp!!!	dataProcessingCommon(in opcode : int, in s : int, in Rd : int, in Rn : int, in Op2 : uint32_t) : void
    if(opcode != opSUB && s == 1)
    {
        NOT_IMPLEMENTED(); //Not required
        return;
    }

    if(opcode != opSUB && opcode != opADD && opcode != opAND &&
       opcode != opORR && opcode != opMVN)
    {
        NOT_IMPLEMENTED(); //Not required
        return;
    }

    if(Op2 == OPERAND_REG_IMM && mAddrMode.reg_imm_shift > 31)
        {
        NOT_IMPLEMENTED();
        return;
    }

    //Store immediate in temporary register and convert
    //immediate operation into register operation
    if(Op2 == OPERAND_IMM)
    {
        int imm = mAddrMode.immediate;
        *mPC++ = A64_MOVZ_W(mTmpReg2, imm & 0x0000FFFF, 0);
        *mPC++ = A64_MOVK_W(mTmpReg2, (imm >> 16) & 0x0000FFFF, 16);
        Op2 = mTmpReg2;
    }


    {
        uint32_t shift;
        uint32_t amount;
        uint32_t Rm;

        if(Op2 == OPERAND_REG_IMM)
        {
            shift   = mAddrMode.reg_imm_type;
            amount  = mAddrMode.reg_imm_shift;
            Rm      = mAddrMode.reg_imm_Rm;
        }
        else if(Op2 < OPERAND_REG)
        {
            shift   = 0;
            amount  = 0;
            Rm      = Op2;
        }
        else
        {
            NOT_IMPLEMENTED(); //Not required
            return;
        }

        switch(opcode)
        {
            case opADD: *mPC++ = A64_ADD_W(Rd, Rn, Rm, shift, amount); break;
            case opAND: *mPC++ = A64_AND_W(Rd, Rn, Rm, shift, amount); break;
            case opORR: *mPC++ = A64_ORR_W(Rd, Rn, Rm, shift, amount); break;
            case opMVN: *mPC++ = A64_ORN_W(Rd, Rn, Rm, shift, amount); break;
            case opSUB: *mPC++ = A64_SUB_W(Rd, Rn, Rm, shift, amount, s);break;
        };

    }
!!!42859447.cpp!!!	A64_B_COND(in cc : uint32_t, in offset : uint32_t) : uint32_t
    LOG_INSTR("B.%s #.+%d\n", cc_codes[cc], offset);
    return (0x54 << 24) | ((offset/4) << 5) | (cc);

!!!42859575.cpp!!!	A64_RET(in Rn : uint32_t) : uint32_t
    LOG_INSTR("RET X%d\n", Rn);
    return ((0xD6 << 24) | (0x1 << 22) | (0x1F << 16) | (Rn << 5));
!!!42859703.cpp!!!	A64_LDRSTR_Wm_SXTW_0(in op : uint32_t, in size : uint32_t, in Rt : uint32_t, in Rn : uint32_t, in Rm : uint32_t) : uint32_t
    if(size == 32)
    {
        LOG_INSTR("%s W%d, [X%d, W%d, SXTW #0]\n",
                   dataTransferOpName[op], Rt, Rn, Rm);
        return(dataTransferOpCode[op] | (Rm << 16) | (Rn << 5) | Rt);
    }
    else
    {
        LOG_INSTR("%s X%d, [X%d, W%d, SXTW #0]\n",
                  dataTransferOpName[op], Rt, Rn, Rm);
        return(dataTransferOpCode[op] | (0x1<<30) | (Rm<<16) | (Rn<<5)|Rt);
    }
!!!42859831.cpp!!!	A64_STR_IMM_PreIndex(in Rt : uint32_t, in Rn : uint32_t, in simm : int32_t) : uint32_t
    if(Rn == 31)
        LOG_INSTR("STR W%d, [SP, #%d]!\n", Rt, simm);
    else
        LOG_INSTR("STR W%d, [X%d, #%d]!\n", Rt, Rn, simm);

    uint32_t imm9 = (unsigned)(simm) & 0x01FF;
    return (0xB8 << 24) | (imm9 << 12) | (0x3 << 10) | (Rn << 5) | Rt;
!!!42859959.cpp!!!	A64_LDR_IMM_PostIndex(in Rt : uint32_t, in Rn : uint32_t, in simm : int32_t) : uint32_t
    if(Rn == 31)
        LOG_INSTR("LDR W%d, [SP], #%d\n",Rt,simm);
    else
        LOG_INSTR("LDR W%d, [X%d], #%d\n",Rt, Rn, simm);

    uint32_t imm9 = (unsigned)(simm) & 0x01FF;
    return (0xB8 << 24) | (0x1 << 22) |
             (imm9 << 12) | (0x1 << 10) | (Rn << 5) | Rt;

!!!42860087.cpp!!!	A64_ADD_X_Wm_SXTW(in Rd : uint32_t, in Rn : uint32_t, in Rm : uint32_t, in amount : uint32_t) : uint32_t
    LOG_INSTR("ADD X%d, X%d, W%d, SXTW #%d\n", Rd, Rn, Rm, amount);
    return ((0x8B << 24) | (0x1 << 21) |(Rm << 16) |
              (0x6 << 13) | (amount << 10) | (Rn << 5) | Rd);

!!!42860215.cpp!!!	A64_SUB_X_Wm_SXTW(in Rd : uint32_t, in Rn : uint32_t, in Rm : uint32_t, in amount : uint32_t) : uint32_t
    LOG_INSTR("SUB X%d, X%d, W%d, SXTW #%d\n", Rd, Rn, Rm, amount);
    return ((0xCB << 24) | (0x1 << 21) |(Rm << 16) |
            (0x6 << 13) | (amount << 10) | (Rn << 5) | Rd);

!!!42860343.cpp!!!	A64_ADD_IMM_X(in Rd : uint32_t, in Rn : uint32_t, in imm : uint32_t, in shift : uint32_t = 0) : uint32_t
    LOG_INSTR("ADD X%d, X%d, #%d, LSL #%d\n", Rd, Rn, imm, shift);
    return (0x91 << 24) | ((shift/12) << 22) | (imm << 10) | (Rn << 5) | Rd;
!!!42860471.cpp!!!	A64_SUB_IMM_X(in Rd : uint32_t, in Rn : uint32_t, in imm : uint32_t, in shift : uint32_t = 0) : uint32_t
    LOG_INSTR("SUB X%d, X%d, #%d, LSL #%d\n", Rd, Rn, imm, shift);
    return (0xD1 << 24) | ((shift/12) << 22) | (imm << 10) | (Rn << 5) | Rd;
!!!42860599.cpp!!!	A64_ADD_X(in Rd : uint32_t, in Rn : uint32_t, in Rm : uint32_t, in shift : uint32_t = 0, in amount : uint32_t = 0) : uint32_t
    LOG_INSTR("ADD X%d, X%d, X%d, %s #%d\n",
               Rd, Rn, Rm, shift_codes[shift], amount);
    return ((0x8B << 24) | (shift << 22) | ( Rm << 16) |
            (amount << 10) |(Rn << 5) | Rd);
!!!42860727.cpp!!!	A64_ADD_W(in Rd : uint32_t, in Rn : uint32_t, in Rm : uint32_t, in shift : uint32_t = 0, in amount : uint32_t = 0) : uint32_t
    LOG_INSTR("ADD W%d, W%d, W%d, %s #%d\n",
               Rd, Rn, Rm, shift_codes[shift], amount);
    return ((0x0B << 24) | (shift << 22) | ( Rm << 16) |
            (amount << 10) |(Rn << 5) | Rd);
!!!42860855.cpp!!!	A64_SUB_W(in Rd : uint32_t, in Rn : uint32_t, in Rm : uint32_t, in shift : uint32_t = 0, in amount : uint32_t = 0, in setflag : uint32_t = 0) : uint32_t
    if(setflag == 0)
    {
        LOG_INSTR("SUB W%d, W%d, W%d, %s #%d\n",
               Rd, Rn, Rm, shift_codes[shift], amount);
        return ((0x4B << 24) | (shift << 22) | ( Rm << 16) |
                (amount << 10) |(Rn << 5) | Rd);
    }
    else
    {
        LOG_INSTR("SUBS W%d, W%d, W%d, %s #%d\n",
                   Rd, Rn, Rm, shift_codes[shift], amount);
        return ((0x6B << 24) | (shift << 22) | ( Rm << 16) |
                (amount << 10) |(Rn << 5) | Rd);
    }
!!!42860983.cpp!!!	A64_AND_W(in Rd : uint32_t, in Rn : uint32_t, in Rm : uint32_t, in shift : uint32_t = 0, in amount : uint32_t = 0) : uint32_t
    LOG_INSTR("AND W%d, W%d, W%d, %s #%d\n",
               Rd, Rn, Rm, shift_codes[shift], amount);
    return ((0x0A << 24) | (shift << 22) | ( Rm << 16) |
            (amount << 10) |(Rn << 5) | Rd);
!!!42861111.cpp!!!	A64_ORR_W(in Rd : uint32_t, in Rn : uint32_t, in Rm : uint32_t, in shift : uint32_t = 0, in amount : uint32_t = 0) : uint32_t
    LOG_INSTR("ORR W%d, W%d, W%d, %s #%d\n",
               Rd, Rn, Rm, shift_codes[shift], amount);
    return ((0x2A << 24) | (shift << 22) | ( Rm << 16) |
            (amount << 10) |(Rn << 5) | Rd);
!!!42861239.cpp!!!	A64_ORN_W(in Rd : uint32_t, in Rn : uint32_t, in Rm : uint32_t, in shift : uint32_t = 0, in amount : uint32_t = 0) : uint32_t
    LOG_INSTR("ORN W%d, W%d, W%d, %s #%d\n",
               Rd, Rn, Rm, shift_codes[shift], amount);
    return ((0x2A << 24) | (shift << 22) | (0x1 << 21) | ( Rm << 16) |
            (amount << 10) |(Rn << 5) | Rd);
!!!42861367.cpp!!!	A64_MOVZ_W(in Rd : uint32_t, in imm : uint32_t, in shift : uint32_t) : uint32_t
    LOG_INSTR("MOVZ W%d, #0x%x, LSL #%d\n", Rd, imm, shift);
    return(0x52 << 24) | (0x1 << 23) | ((shift/16) << 21) |  (imm << 5) | Rd;
!!!42861495.cpp!!!	A64_MOVZ_X(in Rd : uint32_t, in imm : uint32_t, in shift : uint32_t) : uint32_t
    LOG_INSTR("MOVZ X%d, #0x%x, LSL #%d\n", Rd, imm, shift);
    return(0xD2 << 24) | (0x1 << 23) | ((shift/16) << 21) |  (imm << 5) | Rd;
!!!42861623.cpp!!!	A64_MOVK_W(in Rd : uint32_t, in imm : uint32_t, in shift : uint32_t) : uint32_t
    LOG_INSTR("MOVK W%d, #0x%x, LSL #%d\n", Rd, imm, shift);
    return (0x72 << 24) | (0x1 << 23) | ((shift/16) << 21) | (imm << 5) | Rd;
!!!42861751.cpp!!!	A64_SMADDL(in Rd : uint32_t, in Rn : uint32_t, in Rm : uint32_t, in Ra : uint32_t) : uint32_t
    LOG_INSTR("SMADDL X%d, W%d, W%d, X%d\n",Rd, Rn, Rm, Ra);
    return ((0x9B << 24) | (0x1 << 21) | (Rm << 16)|(Ra << 10)|(Rn << 5) | Rd);
!!!42861879.cpp!!!	A64_MADD_W(in Rd : uint32_t, in Rn : uint32_t, in Rm : uint32_t, in Ra : uint32_t) : uint32_t
    LOG_INSTR("MADD W%d, W%d, W%d, W%d\n",Rd, Rn, Rm, Ra);
    return ((0x1B << 24) | (Rm << 16) | (Ra << 10) |(Rn << 5) | Rd);
!!!42862007.cpp!!!	A64_SBFM_W(in Rd : uint32_t, in Rn : uint32_t, in immr : uint32_t, in imms : uint32_t) : uint32_t
    LOG_INSTR("SBFM W%d, W%d, #%d, #%d\n", Rd, Rn, immr, imms);
    return ((0x13 << 24) | (immr << 16) | (imms << 10) | (Rn << 5) | Rd);

!!!42862135.cpp!!!	A64_UBFM_W(in Rd : uint32_t, in Rn : uint32_t, in immr : uint32_t, in imms : uint32_t) : uint32_t
    LOG_INSTR("UBFM W%d, W%d, #%d, #%d\n", Rd, Rn, immr, imms);
    return ((0x53 << 24) | (immr << 16) | (imms << 10) | (Rn << 5) | Rd);

!!!42862263.cpp!!!	A64_UBFM_X(in Rd : uint32_t, in Rn : uint32_t, in immr : uint32_t, in imms : uint32_t) : uint32_t
    LOG_INSTR("UBFM X%d, X%d, #%d, #%d\n", Rd, Rn, immr, imms);
    return ((0xD3 << 24) | (0x1 << 22) |
            (immr << 16) | (imms << 10) | (Rn << 5) | Rd);

!!!42862391.cpp!!!	A64_EXTR_W(in Rd : uint32_t, in Rn : uint32_t, in Rm : uint32_t, in lsb : uint32_t) : uint32_t
    LOG_INSTR("EXTR W%d, W%d, W%d, #%d\n", Rd, Rn, Rm, lsb);
    return (0x13 << 24)|(0x1 << 23) | (Rm << 16) | (lsb << 10)|(Rn << 5) | Rd;
!!!42862519.cpp!!!	A64_CSEL_X(in Rd : uint32_t, in Rn : uint32_t, in Rm : uint32_t, in cond : uint32_t) : uint32_t
    LOG_INSTR("CSEL X%d, X%d, X%d, %s\n", Rd, Rn, Rm, cc_codes[cond]);
    return ((0x9A << 24)|(0x1 << 23)|(Rm << 16) |(cond << 12)| (Rn << 5) | Rd);
!!!42862647.cpp!!!	A64_CSEL_W(in Rd : uint32_t, in Rn : uint32_t, in Rm : uint32_t, in cond : uint32_t) : uint32_t
    LOG_INSTR("CSEL W%d, W%d, W%d, %s\n", Rd, Rn, Rm, cc_codes[cond]);
    return ((0x1A << 24)|(0x1 << 23)|(Rm << 16) |(cond << 12)| (Rn << 5) | Rd);
