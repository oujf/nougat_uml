class ARMAssembler
!!!42863031.cpp!!!	ARMAssembler(in assembly : sp<Assembly>)
    mBase = mPC = (uint32_t *)assembly->base();
    mDuration = ggl_system_time();
#if defined(WITH_LIB_HARDWARE)
    mQemuTracing = true;
#endif
!!!42863287.cpp!!!	base() : uint32_t
    return mBase;
!!!42863415.cpp!!!	pc() : uint32_t
    return mPC;
!!!42863543.cpp!!!	disassemble(in name : char) : void
    if (name) {
        printf("%s:\n", name);
    }
    size_t count = pc()-base();
    uint32_t* i = base();
    while (count--) {
        ssize_t label = mLabelsInverseMapping.indexOfKey(i);
        if (label >= 0) {
            printf("%s:\n", mLabelsInverseMapping.valueAt(label));
        }
        ssize_t comment = mComments.indexOfKey(i);
        if (comment >= 0) {
            printf("; %s\n", mComments.valueAt(comment));
        }
        printf("%08x:    %08x    ", uintptr_t(i), int(i[0]));
        ::disassemble((uintptr_t)i);
        i++;
    }
!!!42863671.cpp!!!	reset() : void
    mBase = mPC = (uint32_t *)mAssembly->base();
    mBranchTargets.clear();
    mLabels.clear();
    mLabelsInverseMapping.clear();
    mComments.clear();
!!!42863799.cpp!!!	generate(in name : char) : int
    // fixup all the branches
    size_t count = mBranchTargets.size();
    while (count--) {
        const branch_target_t& bt = mBranchTargets[count];
        uint32_t* target_pc = mLabels.valueFor(bt.label);
        LOG_ALWAYS_FATAL_IF(!target_pc,
                "error resolving branch targets, target_pc is null");
        int32_t offset = int32_t(target_pc - (bt.pc+2));
        *bt.pc |= offset & 0xFFFFFF;
    }

    mAssembly->resize( int(pc()-base())*4 );
    
    // the instruction cache is flushed by CodeCache
    const int64_t duration = ggl_system_time() - mDuration;
    const char * const format = "generated %s (%d ins) at [%p:%p] in %lld ns\n";
    ALOGI(format, name, int(pc()-base()), base(), pc(), duration);

#if defined(WITH_LIB_HARDWARE)
    if (__builtin_expect(mQemuTracing, 0)) {
        int err = qemu_add_mapping(uintptr_t(base()), name);
        mQemuTracing = (err >= 0);
    }
#endif

    char value[PROPERTY_VALUE_MAX];
    property_get("debug.pf.disasm", value, "0");
    if (atoi(value) != 0) {
        printf(format, name, int(pc()-base()), base(), pc(), duration);
        disassemble(name);
    }
    
    return NO_ERROR;
!!!42863927.cpp!!!	getCodegenArch() : int
    return CODEGEN_ARCH_ARM;
!!!42864055.cpp!!!	prolog() : void
    // write dummy prolog code
    mPrologPC = mPC;
    STM(AL, FD, SP, 1, LSAVED);
!!!42864183.cpp!!!	epilog(in touched : uint32_t) : void
    touched &= LSAVED;
    if (touched) {
        // write prolog code
        uint32_t* pc = mPC;
        mPC = mPrologPC;
        STM(AL, FD, SP, 1, touched | LLR);
        mPC = pc;
        // write epilog code
        LDM(AL, FD, SP, 1, touched | LLR);
        BX(AL, LR);
    } else {   // heh, no registers to save!
        // write prolog code
        uint32_t* pc = mPC;
        mPC = mPrologPC;
        MOV(AL, 0, R0, R0); // NOP
        mPC = pc;
        // write epilog code
        BX(AL, LR);
    }
!!!42864311.cpp!!!	comment(in string : char) : void
    mComments.add(mPC, string);
!!!42864439.cpp!!!	isValidImmediate(in immediate : uint32_t) : bool
    uint32_t rot, imm;
    return buildImmediate(immediate, rot, imm) == 0;
!!!42864567.cpp!!!	buildImmediate(in immediate : uint32_t, inout rot : uint32_t, inout imm : uint32_t) : int
    rot = 0;
    imm = immediate;
    if (imm > 0x7F) { // skip the easy cases
        while (!(imm&3)  || (imm&0xFC000000)) {
            uint32_t newval;
            newval = imm >> 2;
            newval |= (imm&3) << 30;
            imm = newval;
            rot += 2;
            if (rot == 32) {
                rot = 0;
                break;
            }
        }
    }
    rot = (16 - (rot>>1)) & 0xF;

    if (imm>=0x100)
        return -EINVAL;

    if (((imm>>(rot<<1)) | (imm<<(32-(rot<<1)))) != immediate)
        return -1;

    return 0;
!!!42864695.cpp!!!	imm(in immediate : uint32_t) : uint32_t
    uint32_t rot, imm;
    int err = buildImmediate(immediate, rot, imm);

    LOG_ALWAYS_FATAL_IF(err==-EINVAL,
                        "immediate %08x cannot be encoded",
                        immediate);

    LOG_ALWAYS_FATAL_IF(err,
                        "immediate (%08x) encoding bogus!",
                        immediate);

    return (1<<25) | (rot<<8) | imm;
!!!42864823.cpp!!!	reg_imm(in Rm : int, in type : int, in shift : uint32_t) : uint32_t
    return ((shift&0x1F)<<7) | ((type&0x3)<<5) | (Rm&0xF);
!!!42864951.cpp!!!	reg_rrx(in Rm : int) : uint32_t
    return (ROR<<5) | (Rm&0xF);
!!!42865079.cpp!!!	reg_reg(in Rm : int, in type : int, in Rs : int) : uint32_t
    return ((Rs&0xF)<<8) | ((type&0x3)<<5) | (1<<4) | (Rm&0xF);
!!!42865207.cpp!!!	immed12_pre(in immed12 : int32_t, in W : int = 0) : uint32_t
    LOG_ALWAYS_FATAL_IF(abs(immed12) >= 0x800,
                        "LDR(B)/STR(B)/PLD immediate too big (%08x)",
                        immed12);
    return (1<<24) | (((uint32_t(immed12)>>31)^1)<<23) |
            ((W&1)<<21) | (abs(immed12)&0x7FF);
!!!42865335.cpp!!!	immed12_post(in immed12 : int32_t) : uint32_t
    LOG_ALWAYS_FATAL_IF(abs(immed12) >= 0x800,
                        "LDR(B)/STR(B)/PLD immediate too big (%08x)",
                        immed12);

    return (((uint32_t(immed12)>>31)^1)<<23) | (abs(immed12)&0x7FF);
!!!42865463.cpp!!!	reg_scale_pre(in Rm : int, in type : int = 0, in shift : uint32_t = 0, in W : int = 0) : uint32_t
    return  (1<<25) | (1<<24) |
            (((uint32_t(Rm)>>31)^1)<<23) | ((W&1)<<21) |
            reg_imm(abs(Rm), type, shift);
!!!42865591.cpp!!!	reg_scale_post(in Rm : int, in type : int = 0, in shift : uint32_t = 0) : uint32_t
    return (1<<25) | (((uint32_t(Rm)>>31)^1)<<23) | reg_imm(abs(Rm), type, shift);
!!!42865719.cpp!!!	immed8_pre(in immed8 : int32_t, in W : int = 0) : uint32_t
    uint32_t offset = abs(immed8);

    LOG_ALWAYS_FATAL_IF(abs(immed8) >= 0x100,
                        "LDRH/LDRSB/LDRSH/STRH immediate too big (%08x)",
                        immed8);

    return  (1<<24) | (1<<22) | (((uint32_t(immed8)>>31)^1)<<23) |
            ((W&1)<<21) | (((offset&0xF0)<<4)|(offset&0xF));
!!!42865847.cpp!!!	immed8_post(in immed8 : int32_t) : uint32_t
    uint32_t offset = abs(immed8);

    LOG_ALWAYS_FATAL_IF(abs(immed8) >= 0x100,
                        "LDRH/LDRSB/LDRSH/STRH immediate too big (%08x)",
                        immed8);

    return (1<<22) | (((uint32_t(immed8)>>31)^1)<<23) |
            (((offset&0xF0)<<4) | (offset&0xF));
!!!42865975.cpp!!!	reg_pre(in Rm : int, in W : int = 0) : uint32_t
    return (1<<24) | (((uint32_t(Rm)>>31)^1)<<23) | ((W&1)<<21) | (abs(Rm)&0xF);
!!!42866103.cpp!!!	reg_post(in Rm : int) : uint32_t
    return (((uint32_t(Rm)>>31)^1)<<23) | (abs(Rm)&0xF);
!!!42866231.cpp!!!	dataProcessing(in opcode : int, in cc : int, in s : int, in Rd : int, in Rn : int, in Op2 : uint32_t) : void
    *mPC++ = (cc<<28) | (opcode<<21) | (s<<20) | (Rn<<16) | (Rd<<12) | Op2;
!!!42866359.cpp!!!	MLA(in cc : int, in s : int, in Rd : int, in Rm : int, in Rs : int, in Rn : int) : void
    if (Rd == Rm) { int t = Rm; Rm=Rs; Rs=t; } 
    LOG_FATAL_IF(Rd==Rm, "MLA(r%u,r%u,r%u,r%u)", Rd,Rm,Rs,Rn);
    *mPC++ =    (cc<<28) | (1<<21) | (s<<20) |
                (Rd<<16) | (Rn<<12) | (Rs<<8) | 0x90 | Rm;
!!!42866487.cpp!!!	MUL(in cc : int, in s : int, in Rd : int, in Rm : int, in Rs : int) : void
    if (Rd == Rm) { int t = Rm; Rm=Rs; Rs=t; } 
    LOG_FATAL_IF(Rd==Rm, "MUL(r%u,r%u,r%u)", Rd,Rm,Rs);
    *mPC++ = (cc<<28) | (s<<20) | (Rd<<16) | (Rs<<8) | 0x90 | Rm;
!!!42866615.cpp!!!	UMULL(in cc : int, in s : int, in RdLo : int, in RdHi : int, in Rm : int, in Rs : int) : void
    LOG_FATAL_IF(RdLo==Rm || RdHi==Rm || RdLo==RdHi,
                        "UMULL(r%u,r%u,r%u,r%u)", RdLo,RdHi,Rm,Rs);
    *mPC++ =    (cc<<28) | (1<<23) | (s<<20) |
                (RdHi<<16) | (RdLo<<12) | (Rs<<8) | 0x90 | Rm;
!!!42866743.cpp!!!	UMUAL(in cc : int, in s : int, in RdLo : int, in RdHi : int, in Rm : int, in Rs : int) : void
    LOG_FATAL_IF(RdLo==Rm || RdHi==Rm || RdLo==RdHi,
                        "UMUAL(r%u,r%u,r%u,r%u)", RdLo,RdHi,Rm,Rs);
    *mPC++ =    (cc<<28) | (1<<23) | (1<<21) | (s<<20) |
                (RdHi<<16) | (RdLo<<12) | (Rs<<8) | 0x90 | Rm;
!!!42866871.cpp!!!	SMULL(in cc : int, in s : int, in RdLo : int, in RdHi : int, in Rm : int, in Rs : int) : void
    LOG_FATAL_IF(RdLo==Rm || RdHi==Rm || RdLo==RdHi,
                        "SMULL(r%u,r%u,r%u,r%u)", RdLo,RdHi,Rm,Rs);
    *mPC++ =    (cc<<28) | (1<<23) | (1<<22) | (s<<20) |
                (RdHi<<16) | (RdLo<<12) | (Rs<<8) | 0x90 | Rm;
!!!42866999.cpp!!!	SMUAL(in cc : int, in s : int, in RdLo : int, in RdHi : int, in Rm : int, in Rs : int) : void
    LOG_FATAL_IF(RdLo==Rm || RdHi==Rm || RdLo==RdHi,
                        "SMUAL(r%u,r%u,r%u,r%u)", RdLo,RdHi,Rm,Rs);
    *mPC++ =    (cc<<28) | (1<<23) | (1<<22) | (1<<21) | (s<<20) |
                (RdHi<<16) | (RdLo<<12) | (Rs<<8) | 0x90 | Rm;
!!!42867127.cpp!!!	B(in cc : int, inout pc : uint32_t) : void
    int32_t offset = int32_t(pc - (mPC+2));
    *mPC++ = (cc<<28) | (0xA<<24) | (offset & 0xFFFFFF);
!!!42867255.cpp!!!	BL(in cc : int, inout pc : uint32_t) : void
    int32_t offset = int32_t(pc - (mPC+2));
    *mPC++ = (cc<<28) | (0xB<<24) | (offset & 0xFFFFFF);
!!!42867383.cpp!!!	BX(in cc : int, in Rn : int) : void
    *mPC++ = (cc<<28) | 0x12FFF10 | Rn;
!!!42867511.cpp!!!	label(in theLabel : char) : void
    mLabels.add(theLabel, mPC);
    mLabelsInverseMapping.add(mPC, theLabel);
!!!42867639.cpp!!!	B(in cc : int, in label : char) : void
    mBranchTargets.add(branch_target_t(label, mPC));
    *mPC++ = (cc<<28) | (0xA<<24) | 0;
!!!42867767.cpp!!!	BL(in cc : int, in label : char) : void
    mBranchTargets.add(branch_target_t(label, mPC));
    *mPC++ = (cc<<28) | (0xB<<24) | 0;
!!!42867895.cpp!!!	pcForLabel(in label : char) : uint32_t
    return mLabels.valueFor(label);
!!!42868023.cpp!!!	LDR(in cc : int, in Rd : int, in Rn : int, in offset : uint32_t = __immed12_pre(0)) : void
    *mPC++ = (cc<<28) | (1<<26) | (1<<20) | (Rn<<16) | (Rd<<12) | offset;
!!!42868151.cpp!!!	LDRB(in cc : int, in Rd : int, in Rn : int, in offset : uint32_t = __immed12_pre(0)) : void
    *mPC++ = (cc<<28) | (1<<26) | (1<<22) | (1<<20) | (Rn<<16) | (Rd<<12) | offset;
!!!42868279.cpp!!!	STR(in cc : int, in Rd : int, in Rn : int, in offset : uint32_t = __immed12_pre(0)) : void
    *mPC++ = (cc<<28) | (1<<26) | (Rn<<16) | (Rd<<12) | offset;
!!!42868407.cpp!!!	STRB(in cc : int, in Rd : int, in Rn : int, in offset : uint32_t = __immed12_pre(0)) : void
    *mPC++ = (cc<<28) | (1<<26) | (1<<22) | (Rn<<16) | (Rd<<12) | offset;
!!!42868535.cpp!!!	LDRH(in cc : int, in Rd : int, in Rn : int, in offset : uint32_t = __immed8_pre(0)) : void
    *mPC++ = (cc<<28) | (1<<20) | (Rn<<16) | (Rd<<12) | 0xB0 | offset;
!!!42868663.cpp!!!	LDRSB(in cc : int, in Rd : int, in Rn : int, in offset : uint32_t = __immed8_pre(0)) : void
    *mPC++ = (cc<<28) | (1<<20) | (Rn<<16) | (Rd<<12) | 0xD0 | offset;
!!!42868791.cpp!!!	LDRSH(in cc : int, in Rd : int, in Rn : int, in offset : uint32_t = __immed8_pre(0)) : void
    *mPC++ = (cc<<28) | (1<<20) | (Rn<<16) | (Rd<<12) | 0xF0 | offset;
!!!42868919.cpp!!!	STRH(in cc : int, in Rd : int, in Rn : int, in offset : uint32_t = __immed8_pre(0)) : void
    *mPC++ = (cc<<28) | (Rn<<16) | (Rd<<12) | 0xB0 | offset;
!!!42869047.cpp!!!	LDM(in cc : int, in dir : int, in Rn : int, in W : int, in reg_list : uint32_t) : void
   //                    ED FD EA FA      IB IA DB DA
    const uint8_t P[8] = { 1, 0, 1, 0,      1, 0, 1, 0 };
    const uint8_t U[8] = { 1, 1, 0, 0,      1, 1, 0, 0 };
    *mPC++ = (cc<<28) | (4<<25) | (uint32_t(P[dir])<<24) |
            (uint32_t(U[dir])<<23) | (1<<20) | (W<<21) | (Rn<<16) | reg_list;
!!!42869175.cpp!!!	STM(in cc : int, in dir : int, in Rn : int, in W : int, in reg_list : uint32_t) : void
   //                    ED FD EA FA      IB IA DB DA
    const uint8_t P[8] = { 0, 1, 0, 1,      1, 0, 1, 0 };
    const uint8_t U[8] = { 0, 0, 1, 1,      1, 1, 0, 0 };
    *mPC++ = (cc<<28) | (4<<25) | (uint32_t(P[dir])<<24) |
            (uint32_t(U[dir])<<23) | (0<<20) | (W<<21) | (Rn<<16) | reg_list;
!!!42869303.cpp!!!	SWP(in cc : int, in Rn : int, in Rd : int, in Rm : int) : void
    *mPC++ = (cc<<28) | (2<<23) | (Rn<<16) | (Rd << 12) | 0x90 | Rm;
!!!42869431.cpp!!!	SWPB(in cc : int, in Rn : int, in Rd : int, in Rm : int) : void
    *mPC++ = (cc<<28) | (2<<23) | (1<<22) | (Rn<<16) | (Rd << 12) | 0x90 | Rm;
!!!42869559.cpp!!!	SWI(in cc : int, in comment : uint32_t) : void
    *mPC++ = (cc<<28) | (0xF<<24) | comment;
!!!42869687.cpp!!!	PLD(in Rn : int, in offset : uint32_t) : void
    LOG_ALWAYS_FATAL_IF(!((offset&(1<<24)) && !(offset&(1<<21))),
                        "PLD only P=1, W=0");
    *mPC++ = 0xF550F000 | (Rn<<16) | offset;
!!!42869815.cpp!!!	CLZ(in cc : int, in Rd : int, in Rm : int) : void
    *mPC++ = (cc<<28) | 0x16F0F10| (Rd<<12) | Rm;
!!!42869943.cpp!!!	QADD(in cc : int, in Rd : int, in Rm : int, in Rn : int) : void
    *mPC++ = (cc<<28) | 0x1000050 | (Rn<<16) | (Rd<<12) | Rm;
!!!42870071.cpp!!!	QDADD(in cc : int, in Rd : int, in Rm : int, in Rn : int) : void
    *mPC++ = (cc<<28) | 0x1400050 | (Rn<<16) | (Rd<<12) | Rm;
!!!42870199.cpp!!!	QSUB(in cc : int, in Rd : int, in Rm : int, in Rn : int) : void
    *mPC++ = (cc<<28) | 0x1200050 | (Rn<<16) | (Rd<<12) | Rm;
!!!42870327.cpp!!!	QDSUB(in cc : int, in Rd : int, in Rm : int, in Rn : int) : void
    *mPC++ = (cc<<28) | 0x1600050 | (Rn<<16) | (Rd<<12) | Rm;
!!!42870455.cpp!!!	SMUL(in cc : int, in xy : int, in Rd : int, in Rm : int, in Rs : int) : void
    *mPC++ = (cc<<28) | 0x1600080 | (Rd<<16) | (Rs<<8) | (xy<<4) | Rm;
!!!42870583.cpp!!!	SMULW(in cc : int, in y : int, in Rd : int, in Rm : int, in Rs : int) : void
    *mPC++ = (cc<<28) | 0x12000A0 | (Rd<<16) | (Rs<<8) | (y<<4) | Rm;
!!!42870711.cpp!!!	SMLA(in cc : int, in xy : int, in Rd : int, in Rm : int, in Rs : int, in Rn : int) : void
    *mPC++ = (cc<<28) | 0x1000080 | (Rd<<16) | (Rn<<12) | (Rs<<8) | (xy<<4) | Rm;
!!!42870839.cpp!!!	SMLAL(in cc : int, in xy : int, in RdHi : int, in RdLo : int, in Rs : int, in Rm : int) : void
    *mPC++ = (cc<<28) | 0x1400080 | (RdHi<<16) | (RdLo<<12) | (Rs<<8) | (xy<<4) | Rm;
!!!42870967.cpp!!!	SMLAW(in cc : int, in y : int, in Rd : int, in Rm : int, in Rs : int, in Rn : int) : void
    *mPC++ = (cc<<28) | 0x1200080 | (Rd<<16) | (Rn<<12) | (Rs<<8) | (y<<4) | Rm;
!!!42871095.cpp!!!	UXTB16(in cc : int, in Rd : int, in Rm : int, in rotate : int) : void
    *mPC++ = (cc<<28) | 0x6CF0070 | (Rd<<12) | ((rotate >> 3) << 10) | Rm;
!!!42871223.cpp!!!	UBFX(in cc : int, in Rd : int, in Rn : int, in lsb : int, in width : int) : void
    *mPC++ = (cc<<28) | 0x7E00000 | ((width-1)<<16) | (Rd<<12) | (lsb<<7) | 0x50 | Rn;
