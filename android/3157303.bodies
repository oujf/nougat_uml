class RegisterFile
!!!42896951.cpp!!!	RegisterFile(in codegen_arch : int)
    if ((mArch == ARMAssemblerInterface::CODEGEN_ARCH_MIPS) ||
        (mArch == ARMAssemblerInterface::CODEGEN_ARCH_MIPS64)) {
        mRegisterOffset = 2;    // ARM has regs 0..15, MIPS offset to 2..17
    }
    reserve(ARMAssemblerInterface::SP);
    reserve(ARMAssemblerInterface::PC);
!!!42897079.cpp!!!	RegisterFile(in rhs : RegisterAllocator::RegisterFile, in codegen_arch : int)
    if ((mArch == ARMAssemblerInterface::CODEGEN_ARCH_MIPS) ||
        (mArch == ARMAssemblerInterface::CODEGEN_ARCH_MIPS64)) {
        mRegisterOffset = 2;    // ARM has regs 0..15, MIPS offset to 2..17
    }
!!!42897335.cpp!!!	reset() : void
    mRegs = mTouched = mStatus = 0;
    reserve(ARMAssemblerInterface::SP);
    reserve(ARMAssemblerInterface::PC);
!!!42897463.cpp!!!	operator ==(in rhs : RegisterAllocator::RegisterFile) : bool
    return (mRegs == rhs.mRegs);
!!!42897719.cpp!!!	reserve(in reg : int) : int
    reg += mRegisterOffset;
    LOG_ALWAYS_FATAL_IF(isUsed(reg),
                        "reserving register %d, but already in use",
                        reg);
    mRegs |= (1<<reg);
    mTouched |= mRegs;
    return reg;
!!!42897847.cpp!!!	reserveSeveral(in regMask : uint32_t) : void
    mRegs |= regMask;
    mTouched |= regMask;
!!!42897975.cpp!!!	recycle(in reg : int) : void
    // commented out, since common failure of running out of regs
    // triggers this assertion. Since the code is not execectued
    // in that case, it does not matter. No reason to FATAL err.
    // LOG_FATAL_IF(!isUsed(reg),
    //         "recycling unallocated register %d",
    //         reg);
    mRegs &= ~(1<<reg);
!!!42898103.cpp!!!	recycleSeveral(in regMask : uint32_t) : void
    // commented out, since common failure of running out of regs
    // triggers this assertion. Since the code is not execectued
    // in that case, it does not matter. No reason to FATAL err.
    // LOG_FATAL_IF((mRegs & regMask)!=regMask,
    //         "recycling unallocated registers "
    //         "(recycle=%08x, allocated=%08x, unallocated=%08x)",
    //         regMask, mRegs, mRegs&regMask);
    mRegs &= ~regMask;
!!!42898231.cpp!!!	obtain() : int
    const char priorityList[14] = {  0,  1, 2, 3, 
                                    12, 14, 4, 5, 
                                     6,  7, 8, 9,
                                    10, 11 };
    const int nbreg = sizeof(priorityList);
    int i, r, reg;
    for (i=0 ; i<nbreg ; i++) {
        r = priorityList[i];
        if (!isUsed(r + mRegisterOffset)) {
            break;
        }
    }
    // this is not an error anymore because, we'll try again with
    // a lower optimization level.
    //ALOGE_IF(i >= nbreg, "pixelflinger ran out of registers\n");
    if (i >= nbreg) {
        mStatus |= OUT_OF_REGISTERS;
        // we return SP so we can more easily debug things
        // the code will never be run anyway.
        return ARMAssemblerInterface::SP; 
    }
    reg = reserve(r);  // Param in Arm range 0-15, returns range 2-17 on Mips.
    return reg;
!!!42898359.cpp!!!	isUsed(in reg : int) : int
    LOG_ALWAYS_FATAL_IF(reg>=16+(int)mRegisterOffset, "invalid register %d", reg);
    return mRegs & (1<<reg);
!!!42898487.cpp!!!	hasFreeRegs() : bool
    uint32_t regs = mRegs >> mRegisterOffset;   // MIPS fix.
    return ((regs & 0xFFFF) == 0xFFFF) ? false : true;
!!!42898615.cpp!!!	countFreeRegs() : int
    uint32_t regs = mRegs >> mRegisterOffset;   // MIPS fix.
    int f = ~regs & 0xFFFF;
    // now count number of 1
   f = (f & 0x5555) + ((f>>1) & 0x5555);
   f = (f & 0x3333) + ((f>>2) & 0x3333);
   f = (f & 0x0F0F) + ((f>>4) & 0x0F0F);
   f = (f & 0x00FF) + ((f>>8) & 0x00FF);
   return f;
!!!42898743.cpp!!!	touched() : uint32_t
    return mTouched;
