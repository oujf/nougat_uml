class MIPSAssembler
!!!42932151.cpp!!!	MIPSAssembler(in assembly : sp<Assembly>, inout parent : ArmToMipsAssembler)
    mBase = mPC = (uint32_t *)assembly->base();
    mDuration = ggl_system_time();
!!!42932279.cpp!!!	MIPSAssembler(inout assembly : void)
    mBase = mPC = (uint32_t *)assembly;
!!!42932535.cpp!!!	base() : uint32_t
    return mBase;
!!!42932663.cpp!!!	pc() : uint32_t
    return mPC;
!!!42932791.cpp!!!	reset() : void
    mBase = mPC = (uint32_t *)mAssembly->base();
    mBranchTargets.clear();
    mLabels.clear();
    mLabelsInverseMapping.clear();
    mComments.clear();
!!!42932919.cpp!!!	disassemble(in name : char) : void
    char di_buf[140];

    if (name) {
        ALOGW("%s:\n", name);
    }

    bool arm_disasm_fmt = (mParent->mArmDisassemblyBuffer == NULL) ? false : true;

    typedef char dstr[40];
    dstr *lines = (dstr *)mParent->mArmDisassemblyBuffer;

    if (mParent->mArmDisassemblyBuffer != NULL) {
        for (int i=0; i<mParent->mArmInstrCount; ++i) {
            string_detab(lines[i]);
        }
    }

    // iArm is an index to Arm instructions 1...n for this assembly sequence
    // mArmPC[iArm] holds the value of the Mips-PC for the first MIPS
    // instruction corresponding to that Arm instruction number

    int iArm = 0;
    size_t count = pc()-base();
    uint32_t* mipsPC = base();
    while (count--) {
        ssize_t label = mLabelsInverseMapping.indexOfKey(mipsPC);
        if (label >= 0) {
            ALOGW("%s:\n", mLabelsInverseMapping.valueAt(label));
        }
        ssize_t comment = mComments.indexOfKey(mipsPC);
        if (comment >= 0) {
            ALOGW("; %s\n", mComments.valueAt(comment));
        }
        // ALOGW("%08x:    %08x    ", int(i), int(i[0]));
        ::mips_disassem(mipsPC, di_buf, arm_disasm_fmt);
        string_detab(di_buf);
        string_pad(di_buf, 30);
        ALOGW("%08x:    %08x    %s", uintptr_t(mipsPC), uint32_t(*mipsPC), di_buf);
        mipsPC++;
    }
!!!42933047.cpp!!!	prolog() : void
    // empty - done in ArmToMipsAssembler
!!!42933175.cpp!!!	epilog(in touched : uint32_t) : void
    // empty - done in ArmToMipsAssembler
!!!42933303.cpp!!!	generate(in name : char) : int
    // fixup all the branches
    size_t count = mBranchTargets.size();
    while (count--) {
        const branch_target_t& bt = mBranchTargets[count];
        uint32_t* target_pc = mLabels.valueFor(bt.label);
        LOG_ALWAYS_FATAL_IF(!target_pc,
                "error resolving branch targets, target_pc is null");
        int32_t offset = int32_t(target_pc - (bt.pc+1));
        *bt.pc |= offset & 0x00FFFF;
    }

    mAssembly->resize( int(pc()-base())*4 );

    // the instruction & data caches are flushed by CodeCache
    const int64_t duration = ggl_system_time() - mDuration;
    const char * const format = "generated %s (%d ins) at [%p:%p] in %lld ns\n";
    ALOGI(format, name, int(pc()-base()), base(), pc(), duration);

#if defined(WITH_LIB_HARDWARE)
    if (__builtin_expect(mQemuTracing, 0)) {
        int err = qemu_add_mapping(uintptr_t(base()), name);
        mQemuTracing = (err >= 0);
    }
#endif

    char value[PROPERTY_VALUE_MAX];
    value[0] = '\0';

    property_get("debug.pf.disasm", value, "0");

    if (atoi(value) != 0) {
        disassemble(name);
    }

    return NO_ERROR;
!!!42933431.cpp!!!	comment(in string : char) : void
    mComments.add(pc(), string);
!!!42933559.cpp!!!	label(in theLabel : char) : void
    mLabels.add(theLabel, pc());
    mLabelsInverseMapping.add(pc(), theLabel);
!!!42933687.cpp!!!	pcForLabel(in label : char) : uint32_t
    return mLabels.valueFor(label);
!!!42933815.cpp!!!	ADDU(in Rd : int, in Rs : int, in Rt : int) : void
    *mPC++ = (spec_op<<OP_SHF) | (addu_fn<<FUNC_SHF)
                    | (Rs<<RS_SHF) | (Rt<<RT_SHF) | (Rd<<RD_SHF);
!!!42933943.cpp!!!	ADDIU(in Rt : int, in Rs : int, in imm : int16_t) : void
    *mPC++ = (addiu_op<<OP_SHF) | (Rt<<RT_SHF) | (Rs<<RS_SHF) | (imm & MSK_16);
!!!42934071.cpp!!!	SUBU(in Rd : int, in Rs : int, in Rt : int) : void
    *mPC++ = (spec_op<<OP_SHF) | (subu_fn<<FUNC_SHF) |
                        (Rs<<RS_SHF) | (Rt<<RT_SHF) | (Rd<<RD_SHF) ;
!!!42934199.cpp!!!	SUBIU(in Rt : int, in Rs : int, in imm : int16_t) : void
    *mPC++ = (addiu_op<<OP_SHF) | (Rt<<RT_SHF) | (Rs<<RS_SHF) | ((-imm) & MSK_16);
!!!42934327.cpp!!!	NEGU(in Rd : int, in Rs : int) : void
    MIPSAssembler::SUBU(Rd, 0, Rs);
!!!42934455.cpp!!!	MUL(in Rd : int, in Rs : int, in Rt : int) : void
    *mPC++ = (spec2_op<<OP_SHF) | (mul_fn<<FUNC_SHF) |
                        (Rs<<RS_SHF) | (Rt<<RT_SHF) | (Rd<<RD_SHF) ;
!!!42934583.cpp!!!	MULT(in Rs : int, in Rt : int) : void
    *mPC++ = (spec_op<<OP_SHF) | (mult_fn<<FUNC_SHF) | (Rt<<RT_SHF) | (Rs<<RS_SHF);
!!!42934711.cpp!!!	MULTU(in Rs : int, in Rt : int) : void
    *mPC++ = (spec_op<<OP_SHF) | (multu_fn<<FUNC_SHF) | (Rt<<RT_SHF) | (Rs<<RS_SHF);
!!!42934839.cpp!!!	MADD(in Rs : int, in Rt : int) : void
    *mPC++ = (spec2_op<<OP_SHF) | (madd_fn<<FUNC_SHF) | (Rt<<RT_SHF) | (Rs<<RS_SHF);
!!!42934967.cpp!!!	MADDU(in Rs : int, in Rt : int) : void
    *mPC++ = (spec2_op<<OP_SHF) | (maddu_fn<<FUNC_SHF) | (Rt<<RT_SHF) | (Rs<<RS_SHF);
!!!42935095.cpp!!!	MSUB(in Rs : int, in Rt : int) : void
    *mPC++ = (spec2_op<<OP_SHF) | (msub_fn<<FUNC_SHF) | (Rt<<RT_SHF) | (Rs<<RS_SHF);
!!!42935223.cpp!!!	MSUBU(in Rs : int, in Rt : int) : void
    *mPC++ = (spec2_op<<OP_SHF) | (msubu_fn<<FUNC_SHF) | (Rt<<RT_SHF) | (Rs<<RS_SHF);
!!!42935351.cpp!!!	SEB(in Rd : int, in Rt : int) : void
    *mPC++ = (spec3_op<<OP_SHF) | (bshfl_fn<<FUNC_SHF) | (seb_fn << SA_SHF) |
                    (Rt<<RT_SHF) | (Rd<<RD_SHF);
!!!42935479.cpp!!!	SEH(in Rd : int, in Rt : int) : void
    *mPC++ = (spec3_op<<OP_SHF) | (bshfl_fn<<FUNC_SHF) | (seh_fn << SA_SHF) |
                    (Rt<<RT_SHF) | (Rd<<RD_SHF);
!!!42935607.cpp!!!	SLT(in Rd : int, in Rs : int, in Rt : int) : void
    *mPC++ = (spec_op<<OP_SHF) | (slt_fn<<FUNC_SHF) |
                        (Rd<<RD_SHF) | (Rs<<RS_SHF) | (Rt<<RT_SHF);
!!!42935735.cpp!!!	SLTI(in Rt : int, in Rs : int, in imm : int16_t) : void
    *mPC++ = (slti_op<<OP_SHF) | (Rt<<RT_SHF) | (Rs<<RS_SHF) | (imm & MSK_16);
!!!42935863.cpp!!!	SLTU(in Rd : int, in Rs : int, in Rt : int) : void
    *mPC++ = (spec_op<<OP_SHF) | (sltu_fn<<FUNC_SHF) |
                        (Rd<<RD_SHF) | (Rs<<RS_SHF) | (Rt<<RT_SHF);
!!!42935991.cpp!!!	SLTIU(in Rt : int, in Rs : int, in imm : int16_t) : void
    *mPC++ = (sltiu_op<<OP_SHF) | (Rt<<RT_SHF) | (Rs<<RS_SHF) | (imm & MSK_16);
!!!42936119.cpp!!!	AND(in Rd : int, in Rs : int, in Rt : int) : void
    *mPC++ = (spec_op<<OP_SHF) | (and_fn<<FUNC_SHF) |
                        (Rd<<RD_SHF) | (Rs<<RS_SHF) | (Rt<<RT_SHF);
!!!42936247.cpp!!!	ANDI(in Rt : int, in Rs : int, in imm : uint16_t) : void
    *mPC++ = (andi_op<<OP_SHF) | (Rt<<RT_SHF) | (Rs<<RS_SHF) | (imm & MSK_16);
!!!42936375.cpp!!!	OR(in Rd : int, in Rs : int, in Rt : int) : void
    *mPC++ = (spec_op<<OP_SHF) | (or_fn<<FUNC_SHF) |
                        (Rd<<RD_SHF) | (Rs<<RS_SHF) | (Rt<<RT_SHF);
!!!42936503.cpp!!!	ORI(in Rt : int, in Rs : int, in imm : uint16_t) : void
    *mPC++ = (ori_op<<OP_SHF) | (Rt<<RT_SHF) | (Rs<<RS_SHF) | (imm & MSK_16);
!!!42936631.cpp!!!	NOR(in Rd : int, in Rs : int, in Rt : int) : void
    *mPC++ = (spec_op<<OP_SHF) | (nor_fn<<FUNC_SHF) |
                        (Rd<<RD_SHF) | (Rs<<RS_SHF) | (Rt<<RT_SHF);
!!!42936759.cpp!!!	NOT(in Rd : int, in Rs : int) : void
    MIPSAssembler::NOR(Rd, Rs, 0);  // NOT(d,s) = NOR(d,s,zero)
!!!42936887.cpp!!!	XOR(in Rd : int, in Rs : int, in Rt : int) : void
    *mPC++ = (spec_op<<OP_SHF) | (xor_fn<<FUNC_SHF) |
                        (Rd<<RD_SHF) | (Rs<<RS_SHF) | (Rt<<RT_SHF);
!!!42937015.cpp!!!	XORI(in Rt : int, in Rs : int, in imm : uint16_t) : void
    *mPC++ = (xori_op<<OP_SHF) | (Rt<<RT_SHF) | (Rs<<RS_SHF) | (imm & MSK_16);
!!!42937143.cpp!!!	SLL(in Rd : int, in Rt : int, in shft : int) : void
    *mPC++ = (spec_op<<OP_SHF) | (sll_fn<<FUNC_SHF) |
                        (Rd<<RD_SHF) | (Rt<<RT_SHF) | (shft<<RE_SHF);
!!!42937271.cpp!!!	SLLV(in Rd : int, in Rt : int, in Rs : int) : void
    *mPC++ = (spec_op<<OP_SHF) | (sllv_fn<<FUNC_SHF) |
                        (Rd<<RD_SHF) | (Rs<<RS_SHF) | (Rt<<RT_SHF);
!!!42937399.cpp!!!	SRL(in Rd : int, in Rt : int, in shft : int) : void
    *mPC++ = (spec_op<<OP_SHF) | (srl_fn<<FUNC_SHF) |
                        (Rd<<RD_SHF) | (Rt<<RT_SHF) | (shft<<RE_SHF);
!!!42937527.cpp!!!	SRLV(in Rd : int, in Rt : int, in Rs : int) : void
    *mPC++ = (spec_op<<OP_SHF) | (srlv_fn<<FUNC_SHF) |
                        (Rd<<RD_SHF) | (Rs<<RS_SHF) | (Rt<<RT_SHF);
!!!42937655.cpp!!!	SRA(in Rd : int, in Rt : int, in shft : int) : void
    *mPC++ = (spec_op<<OP_SHF) | (sra_fn<<FUNC_SHF) |
                        (Rd<<RD_SHF) | (Rt<<RT_SHF) | (shft<<RE_SHF);
!!!42937783.cpp!!!	SRAV(in Rd : int, in Rt : int, in Rs : int) : void
    *mPC++ = (spec_op<<OP_SHF) | (srav_fn<<FUNC_SHF) |
                        (Rd<<RD_SHF) | (Rs<<RS_SHF) | (Rt<<RT_SHF);
!!!42937911.cpp!!!	ROTR(in Rd : int, in Rt : int, in shft : int) : void
    // note weird encoding (SRL + 1)
    *mPC++ = (spec_op<<OP_SHF) | (srl_fn<<FUNC_SHF) |
                        (1<<RS_SHF) | (Rd<<RD_SHF) | (Rt<<RT_SHF) | (shft<<RE_SHF);
!!!42938039.cpp!!!	ROTRV(in Rd : int, in Rt : int, in Rs : int) : void
    // note weird encoding (SRLV + 1)
    *mPC++ = (spec_op<<OP_SHF) | (srlv_fn<<FUNC_SHF) |
                        (Rd<<RD_SHF) | (Rs<<RS_SHF) | (Rt<<RT_SHF) | (1<<RE_SHF);
!!!42938167.cpp!!!	RORsyn(in Rd : int, in Rt : int, in Rs : int) : void
    // synthetic: d = t rotated by s
    MIPSAssembler::NEGU(R_at2, Rs);
    MIPSAssembler::SLLV(R_at2, Rt, R_at2);
    MIPSAssembler::SRLV(Rd, Rt, Rs);
    MIPSAssembler::OR(Rd, Rd, R_at2);
!!!42938295.cpp!!!	RORIsyn(in Rd : int, in Rt : int, in rot : int) : void
    // synthetic: d = t rotated by immed rot
    // d = s >> rot | s << (32-rot)
    MIPSAssembler::SLL(R_at2, Rt, 32-rot);
    MIPSAssembler::SRL(Rd, Rt, rot);
    MIPSAssembler::OR(Rd, Rd, R_at2);
!!!42938423.cpp!!!	CLO(in Rd : int, in Rs : int) : void
    // Rt field must have same gpr # as Rd
    *mPC++ = (spec2_op<<OP_SHF) | (clo_fn<<FUNC_SHF) |
                        (Rd<<RD_SHF) | (Rs<<RS_SHF) | (Rd<<RT_SHF);
!!!42938551.cpp!!!	CLZ(in Rd : int, in Rs : int) : void
    // Rt field must have same gpr # as Rd
    *mPC++ = (spec2_op<<OP_SHF) | (clz_fn<<FUNC_SHF) |
                        (Rd<<RD_SHF) | (Rs<<RS_SHF) | (Rd<<RT_SHF);
!!!42938679.cpp!!!	WSBH(in Rd : int, in Rt : int) : void
    *mPC++ = (spec3_op<<OP_SHF) | (bshfl_fn<<FUNC_SHF) | (wsbh_fn << SA_SHF) |
                        (Rt<<RT_SHF) | (Rd<<RD_SHF);
!!!42938807.cpp!!!	LW(in Rt : int, in Rbase : int, in offset : int16_t) : void
    *mPC++ = (lw_op<<OP_SHF) | (Rbase<<RS_SHF) | (Rt<<RT_SHF) | (offset & MSK_16);
!!!42938935.cpp!!!	SW(in Rt : int, in Rbase : int, in offset : int16_t) : void
    *mPC++ = (sw_op<<OP_SHF) | (Rbase<<RS_SHF) | (Rt<<RT_SHF) | (offset & MSK_16);
!!!42939063.cpp!!!	LB(in Rt : int, in Rbase : int, in offset : int16_t) : void
    *mPC++ = (lb_op<<OP_SHF) | (Rbase<<RS_SHF) | (Rt<<RT_SHF) | (offset & MSK_16);
!!!42939191.cpp!!!	LBU(in Rt : int, in Rbase : int, in offset : int16_t) : void
    *mPC++ = (lbu_op<<OP_SHF) | (Rbase<<RS_SHF) | (Rt<<RT_SHF) | (offset & MSK_16);
!!!42939319.cpp!!!	SB(in Rt : int, in Rbase : int, in offset : int16_t) : void
    *mPC++ = (sb_op<<OP_SHF) | (Rbase<<RS_SHF) | (Rt<<RT_SHF) | (offset & MSK_16);
!!!42939447.cpp!!!	LH(in Rt : int, in Rbase : int, in offset : int16_t) : void
    *mPC++ = (lh_op<<OP_SHF) | (Rbase<<RS_SHF) | (Rt<<RT_SHF) | (offset & MSK_16);
!!!42939575.cpp!!!	LHU(in Rt : int, in Rbase : int, in offset : int16_t) : void
    *mPC++ = (lhu_op<<OP_SHF) | (Rbase<<RS_SHF) | (Rt<<RT_SHF) | (offset & MSK_16);
!!!42939703.cpp!!!	SH(in Rt : int, in Rbase : int, in offset : int16_t) : void
    *mPC++ = (sh_op<<OP_SHF) | (Rbase<<RS_SHF) | (Rt<<RT_SHF) | (offset & MSK_16);
!!!42939831.cpp!!!	LUI(in Rt : int, in offset : int16_t) : void
    *mPC++ = (lui_op<<OP_SHF) | (Rt<<RT_SHF) | (offset & MSK_16);
!!!42939959.cpp!!!	MOVE(in Rd : int, in Rs : int) : void
    // encoded as "or rd, rs, zero"
    *mPC++ = (spec_op<<OP_SHF) | (or_fn<<FUNC_SHF) |
                        (Rd<<RD_SHF) | (Rs<<RS_SHF) | (0<<RT_SHF);
!!!42940087.cpp!!!	MOVN(in Rd : int, in Rs : int, in Rt : int) : void
    *mPC++ = (spec_op<<OP_SHF) | (movn_fn<<FUNC_SHF) |
                        (Rd<<RD_SHF) | (Rs<<RS_SHF) | (Rt<<RT_SHF);
!!!42940215.cpp!!!	MOVZ(in Rd : int, in Rs : int, in Rt : int) : void
    *mPC++ = (spec_op<<OP_SHF) | (movz_fn<<FUNC_SHF) |
                        (Rd<<RD_SHF) | (Rs<<RS_SHF) | (Rt<<RT_SHF);
!!!42940343.cpp!!!	MFHI(in Rd : int) : void
    *mPC++ = (spec_op<<OP_SHF) | (mfhi_fn<<FUNC_SHF) | (Rd<<RD_SHF);
!!!42940471.cpp!!!	MFLO(in Rd : int) : void
    *mPC++ = (spec_op<<OP_SHF) | (mflo_fn<<FUNC_SHF) | (Rd<<RD_SHF);
!!!42940599.cpp!!!	MTHI(in Rs : int) : void
    *mPC++ = (spec_op<<OP_SHF) | (mthi_fn<<FUNC_SHF) | (Rs<<RS_SHF);
!!!42940727.cpp!!!	MTLO(in Rs : int) : void
    *mPC++ = (spec_op<<OP_SHF) | (mtlo_fn<<FUNC_SHF) | (Rs<<RS_SHF);
!!!42940855.cpp!!!	B(in label : char) : void
    mBranchTargets.add(branch_target_t(label, mPC));

    // encoded as BEQ zero, zero, offset
    *mPC++ = (beq_op<<OP_SHF) | (0<<RT_SHF)
                        | (0<<RS_SHF) | 0;  // offset filled in later

    MIPSAssembler::NOP();
!!!42940983.cpp!!!	BEQ(in Rs : int, in Rt : int, in label : char) : void
    mBranchTargets.add(branch_target_t(label, mPC));
    *mPC++ = (beq_op<<OP_SHF) | (Rt<<RT_SHF) | (Rs<<RS_SHF) | 0;
    MIPSAssembler::NOP();
!!!42941111.cpp!!!	BNE(in Rs : int, in Rt : int, in label : char) : void
    mBranchTargets.add(branch_target_t(label, mPC));
    *mPC++ = (bne_op<<OP_SHF) | (Rt<<RT_SHF) | (Rs<<RS_SHF) | 0;
    MIPSAssembler::NOP();
!!!42941239.cpp!!!	BGEZ(in Rs : int, in label : char) : void
    mBranchTargets.add(branch_target_t(label, mPC));
    *mPC++ = (regimm_op<<OP_SHF) | (bgez_fn<<RT_SHF) | (Rs<<RS_SHF) | 0;
    MIPSAssembler::NOP();
!!!42941367.cpp!!!	BGTZ(in Rs : int, in label : char) : void
    mBranchTargets.add(branch_target_t(label, mPC));
    *mPC++ = (bgtz_op<<OP_SHF) | (0<<RT_SHF) | (Rs<<RS_SHF) | 0;
    MIPSAssembler::NOP();
!!!42941495.cpp!!!	BLEZ(in Rs : int, in label : char) : void
    mBranchTargets.add(branch_target_t(label, mPC));
    *mPC++ = (blez_op<<OP_SHF) | (0<<RT_SHF) | (Rs<<RS_SHF) | 0;
    MIPSAssembler::NOP();
!!!42941623.cpp!!!	BLTZ(in Rs : int, in label : char) : void
    mBranchTargets.add(branch_target_t(label, mPC));
    *mPC++ = (regimm_op<<OP_SHF) | (bltz_fn<<RT_SHF) | (Rs<<RS_SHF) | 0;
    MIPSAssembler::NOP();
!!!42941751.cpp!!!	JR(in Rs : int) : void
    *mPC++ = (spec_op<<OP_SHF) | (Rs<<RS_SHF) | (jr_fn << FUNC_SHF);
    MIPSAssembler::NOP();
!!!42941879.cpp!!!	BEQZ(in Rs : int, in label : char) : void
    BEQ(Rs, R_zero, label);
!!!42942007.cpp!!!	BNEZ(in Rs : int, in label : char) : void
    BNE(R_at, R_zero, label);
!!!42942135.cpp!!!	BGE(in Rs : int, in Rt : int, in label : char) : void
    SLT(R_at, Rs, Rt);
    BEQ(R_at, R_zero, label);
!!!42942263.cpp!!!	BGEU(in Rs : int, in Rt : int, in label : char) : void
    SLTU(R_at, Rs, Rt);
    BEQ(R_at, R_zero, label);
!!!42942391.cpp!!!	BGT(in Rs : int, in Rt : int, in label : char) : void
    SLT(R_at, Rt, Rs);   // rev
    BNE(R_at, R_zero, label);
!!!42942519.cpp!!!	BGTU(in Rs : int, in Rt : int, in label : char) : void
    SLTU(R_at, Rt, Rs);   // rev
    BNE(R_at, R_zero, label);
!!!42942647.cpp!!!	BLE(in Rs : int, in Rt : int, in label : char) : void
    SLT(R_at, Rt, Rs);   // rev
    BEQ(R_at, R_zero, label);
!!!42942775.cpp!!!	BLEU(in Rs : int, in Rt : int, in label : char) : void
    SLTU(R_at, Rt, Rs);  // rev
    BEQ(R_at, R_zero, label);
!!!42942903.cpp!!!	BLT(in Rs : int, in Rt : int, in label : char) : void
    SLT(R_at, Rs, Rt);
    BNE(R_at, R_zero, label);
!!!42943031.cpp!!!	BLTU(in Rs : int, in Rt : int, in label : char) : void
    SLTU(R_at, Rs, Rt);
    BNE(R_at, R_zero, label);
!!!42943159.cpp!!!	NOP(in  : void) : void
    // encoded as "sll zero, zero, 0", which is all zero
    *mPC++ = (spec_op<<OP_SHF) | (sll_fn<<FUNC_SHF);
!!!42943287.cpp!!!	NOP2(in  : void) : void
    // encoded as "sll zero, zero, 2", still a nop, but a unique code
    *mPC++ = (spec_op<<OP_SHF) | (sll_fn<<FUNC_SHF) | (2 << RE_SHF);
!!!42943415.cpp!!!	UNIMPL(in  : void) : void
    // encoded as "sll zero, zero, 3", still a nop, but a unique code
    *mPC++ = (spec_op<<OP_SHF) | (sll_fn<<FUNC_SHF) | (3 << RE_SHF);
!!!42943543.cpp!!!	string_detab(inout s : char) : void
    char *os = s;
    char temp[100];
    char *t = temp;
    int len = 99;
    int i = TABSTOP;

    while (*s && len-- > 0) {
        if (*s == '\n') { s++; continue; }
        if (*s == '\t') {
            s++;
            for ( ; i>0; i--) {*t++ = ' '; len--; }
        } else {
            *t++ = *s++;
        }
        if (i <= 0) i = TABSTOP;
        i--;
    }
    *t = '\0';
    strcpy(os, temp);
!!!42943671.cpp!!!	string_pad(inout s : char, in padded_len : int) : void
    int len = strlen(s);
    s += len;
    for (int i = padded_len - len; i > 0; --i) {
        *s++ = ' ';
    }
    *s = '\0';
