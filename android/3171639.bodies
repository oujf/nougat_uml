class SharedBuffer
!!!42944823.cpp!!!	alloc(in size : size_t) : SharedBuffer
    // Don't overflow if the combined size of the buffer / header is larger than
    // size_max.
    LOG_ALWAYS_FATAL_IF((size >= (SIZE_MAX - sizeof(SharedBuffer))),
                        "Invalid buffer size %zu", size);

    SharedBuffer* sb = static_cast<SharedBuffer *>(malloc(sizeof(SharedBuffer) + size));
    if (sb) {
        // Should be std::atomic_init(&sb->mRefs, 1);
        // But that generates a warning with some compilers.
        // The following is OK on Android-supported platforms.
        sb->mRefs.store(1, std::memory_order_relaxed);
        sb->mSize = size;
    }
    return sb;
!!!42944951.cpp!!!	dealloc(in released : SharedBuffer) : void
    free(const_cast<SharedBuffer*>(released));
!!!42945079.cpp!!!	data() : void
    return this + 1;
!!!42945207.cpp!!!	data() : void
    return this + 1;
!!!42945335.cpp!!!	size() : size_t
    return mSize;
!!!42945463.cpp!!!	bufferFromData(inout data : void) : SharedBuffer
    return data ? static_cast<SharedBuffer *>(data)-1 : 0;
!!!42945591.cpp!!!	bufferFromData(in data : void) : SharedBuffer
    return data ? static_cast<const SharedBuffer *>(data)-1 : 0;
!!!42945719.cpp!!!	sizeFromData(in data : void) : size_t
    return data ? bufferFromData(data)->mSize : 0;
!!!42945847.cpp!!!	edit() : SharedBuffer
    if (onlyOwner()) {
        return const_cast<SharedBuffer*>(this);
    }
    SharedBuffer* sb = alloc(mSize);
    if (sb) {
        memcpy(sb->data(), data(), size());
        release();
    }
    return sb;
!!!42945975.cpp!!!	editResize(in newSize : size_t) : SharedBuffer
    if (onlyOwner()) {
        SharedBuffer* buf = const_cast<SharedBuffer*>(this);
        if (buf->mSize == newSize) return buf;
        // Don't overflow if the combined size of the new buffer / header is larger than
        // size_max.
        LOG_ALWAYS_FATAL_IF((newSize >= (SIZE_MAX - sizeof(SharedBuffer))),
                            "Invalid buffer size %zu", newSize);

        buf = (SharedBuffer*)realloc(buf, sizeof(SharedBuffer) + newSize);
        if (buf != NULL) {
            buf->mSize = newSize;
            return buf;
        }
    }
    SharedBuffer* sb = alloc(newSize);
    if (sb) {
        const size_t mySize = mSize;
        memcpy(sb->data(), data(), newSize < mySize ? newSize : mySize);
        release();
    }
    return sb;    
!!!42946103.cpp!!!	attemptEdit() : SharedBuffer
    if (onlyOwner()) {
        return const_cast<SharedBuffer*>(this);
    }
    return 0;
!!!42946231.cpp!!!	reset(in new_size : size_t) : SharedBuffer
    // cheap-o-reset.
    SharedBuffer* sb = alloc(new_size);
    if (sb) {
        release();
    }
    return sb;
!!!42946359.cpp!!!	acquire() : void
    mRefs.fetch_add(1, std::memory_order_relaxed);
!!!42946487.cpp!!!	release(in flags : uint32_t = 0) : int32_t
    int32_t prev = 1;
    if (onlyOwner() || ((prev = mRefs.fetch_sub(1, std::memory_order_release) == 1)
            && (atomic_thread_fence(std::memory_order_acquire), true))) {
        mRefs.store(0, std::memory_order_relaxed);
        if ((flags & eKeepStorage) == 0) {
            free(const_cast<SharedBuffer*>(this));
        }
    }
    return prev;
!!!42946615.cpp!!!	onlyOwner() : bool
    return (mRefs.load(std::memory_order_acquire) == 1);
