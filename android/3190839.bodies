class TaskstatsSocket
!!!43001911.cpp!!!	Open() : bool
  std::unique_ptr<nl_sock, decltype(&nl_socket_free)> nl(
      nl_socket_alloc(), nl_socket_free);
  if (!nl.get()) {
    LOG(FATAL) << "Failed to allocate netlink socket";
  }

  int ret = genl_connect(nl.get());
  if (ret < 0) {
    LOG(FATAL) << nl_geterror(ret) << std::endl << "Unable to open netlink socket (are you root?)";
  }

  int family_id = genl_ctrl_resolve(nl.get(), TASKSTATS_GENL_NAME);
  if (family_id < 0) {
    LOG(FATAL) << nl_geterror(family_id) << std::endl << "Unable to determine taskstats family id (does your kernel support taskstats?)";
  }

  nl_ = std::move(nl);
  family_id_ = family_id;

  return true;
!!!43002039.cpp!!!	Close() : void
  nl_.reset();
!!!43002167.cpp!!!	GetPidStats(in pid : int, inout stats : TaskStatistics) : bool
  return GetStats(pid, TASKSTATS_CMD_ATTR_PID, stats);
!!!43002295.cpp!!!	GetTgidStats(in tgid : int, inout stats : TaskStatistics) : bool
  bool ret = GetStats(tgid, TASKSTATS_CMD_ATTR_TGID, stats);
  if (ret) {
    stats.set_pid(tgid);
  }
  return ret;
!!!43002423.cpp!!!	GetStats(in pid : int, in type : int, inout stats : TaskStatistics) : bool
  TaskStatsRequest taskstats_request = TaskStatsRequest();
  taskstats_request.requested_pid = pid;

  std::unique_ptr<nl_msg, decltype(&nlmsg_free)> message(nlmsg_alloc(),
                                                         nlmsg_free);

  genlmsg_put(message.get(), NL_AUTO_PID, NL_AUTO_SEQ, family_id_, 0, 0,
              TASKSTATS_CMD_GET, TASKSTATS_VERSION);
  nla_put_u32(message.get(), type, pid);

  int result = nl_send_auto_complete(nl_.get(), message.get());
  if (result < 0) {
    return false;
  }

  std::unique_ptr<nl_cb, decltype(&nl_cb_put)> callbacks(
      nl_cb_alloc(NL_CB_DEFAULT), nl_cb_put);
  nl_cb_set(callbacks.get(), NL_CB_VALID, NL_CB_CUSTOM, &ParseTaskStats,
            static_cast<void*>(&taskstats_request));

  result = nl_recvmsgs(nl_.get(), callbacks.get());
  if (result < 0) {
    return false;
  }
  nl_wait_for_ack(nl_.get());

  stats = TaskStatistics(taskstats_request.stats);

  return true;
