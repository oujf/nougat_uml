class Dso
!!!43030071.cpp!!!	SetDemangle(in demangle : bool) : void
  demangle_ = demangle;
!!!43030199.cpp!!!	Demangle(in name : std::string) : std::string
  if (!demangle_) {
    return name;
  }
  int status;
  bool is_linker_symbol = (name.find(linker_prefix) == 0);
  const char* mangled_str = name.c_str();
  if (is_linker_symbol) {
    mangled_str += linker_prefix.size();
  }
  std::string result = name;
  char* demangled_name = __cxa_demangle(mangled_str, nullptr, nullptr, &status);
  if (status == 0) {
    if (is_linker_symbol) {
      result = std::string("[linker]") + demangled_name;
    } else {
      result = demangled_name;
    }
    free(demangled_name);
  } else if (is_linker_symbol) {
    result = std::string("[linker]") + mangled_str;
  }
  return result;
!!!43030327.cpp!!!	SetSymFsDir(in symfs_dir : std::string) : bool
  std::string dirname = symfs_dir;
  if (!dirname.empty()) {
    if (dirname.back() != '/') {
      dirname.push_back('/');
    }
    std::vector<std::string> files;
    std::vector<std::string> subdirs;
    GetEntriesInDir(symfs_dir, &files, &subdirs);
    if (files.empty() && subdirs.empty()) {
      LOG(ERROR) << "Invalid symfs_dir '" << symfs_dir << "'";
      return false;
    }
  }
  symfs_dir_ = dirname;
  return true;
!!!43030455.cpp!!!	SetVmlinux(in vmlinux : std::string) : void
  vmlinux_ = vmlinux;
!!!43030583.cpp!!!	SetBuildIds(in build_ids : std::vector<std::pair<std::string, BuildId>>) : void
  std::unordered_map<std::string, BuildId> map;
  for (auto& pair : build_ids) {
    LOG(DEBUG) << "build_id_map: " << pair.first << ", " << pair.second.ToString();
    map.insert(pair);
  }
  build_id_map_ = std::move(map);
!!!43030711.cpp!!!	CreateDso(in dso_type : DsoType, in dso_path : std::string = "") : std::unique_ptr<Dso>
  std::string path = dso_path;
  if (dso_type == DSO_KERNEL) {
    path = "[kernel.kallsyms]";
  }
  return std::unique_ptr<Dso>(new Dso(dso_type, path));
!!!43030839.cpp!!!	~Dso()
  if (--dso_count_ == 0) {
    symbol_name_allocator.Clear();
  }
!!!43031095.cpp!!!	GetAccessiblePath() : std::string
  return symfs_dir_ + path_;
!!!43031223.cpp!!!	MinVirtualAddress() : uint64_t
  if (min_vaddr_ == std::numeric_limits<uint64_t>::max()) {
    min_vaddr_ = 0;
    if (type_ == DSO_ELF_FILE) {
      BuildId build_id = GetExpectedBuildId(GetAccessiblePath());

      uint64_t addr;
      if (ReadMinExecutableVirtualAddressFromElfFile(GetAccessiblePath(), build_id, &addr)) {
        min_vaddr_ = addr;
      }
    }
  }
  return min_vaddr_;
!!!43031351.cpp!!!	FindSymbol(in vaddr_in_dso : uint64_t) : Symbol
  if (!is_loaded_) {
    is_loaded_ = true;
    if (!Load()) {
      LOG(DEBUG) << "failed to load dso: " << path_;
      return nullptr;
    }
  }

  auto it = std::upper_bound(symbols_.begin(), symbols_.end(), Symbol("", vaddr_in_dso, 0),
                             SymbolComparator());
  if (it != symbols_.begin()) {
    --it;
    if (it->addr <= vaddr_in_dso && it->addr + it->len > vaddr_in_dso) {
      return &*it;
    }
  }
  return nullptr;
!!!43031479.cpp!!!	GetExpectedBuildId(in filename : std::string) : BuildId
  auto it = build_id_map_.find(filename);
  if (it != build_id_map_.end()) {
    return it->second;
  }
  return BuildId();
!!!43031607.cpp!!!	KernelSymbolCallback(in kernel_symbol : KernelSymbol, inout dso : Dso) : bool
  if (IsKernelFunctionSymbol(kernel_symbol)) {
    dso->InsertSymbol(Symbol(kernel_symbol.name, kernel_symbol.addr, 0));
  }
  return false;
!!!43031735.cpp!!!	VmlinuxSymbolCallback(in elf_symbol : ElfFileSymbol, inout dso : Dso) : void
  if (elf_symbol.is_func) {
    dso->InsertSymbol(Symbol(elf_symbol.name, elf_symbol.vaddr, elf_symbol.len));
  }
!!!43031863.cpp!!!	ElfFileSymbolCallback(in elf_symbol : ElfFileSymbol, inout dso : Dso, in filter : bool (*)(const ElfFileSymbol&)) : void
  if (filter(elf_symbol)) {
    dso->InsertSymbol(Symbol(elf_symbol.name, elf_symbol.vaddr, elf_symbol.len));
  }
!!!43031991.cpp!!!	Dso(in type : DsoType, in path : std::string)
  dso_count_++;
!!!43032119.cpp!!!	Load() : bool
  bool result = false;
  switch (type_) {
    case DSO_KERNEL:
      result = LoadKernel();
      break;
    case DSO_KERNEL_MODULE:
      result = LoadKernelModule();
      break;
    case DSO_ELF_FILE: {
      if (std::get<0>(SplitUrlInApk(path_))) {
        result = LoadEmbeddedElfFile();
      } else {
        result = LoadElfFile();
      }
      break;
    }
  }
  if (result) {
    std::sort(symbols_.begin(), symbols_.end(), SymbolComparator());
    FixupSymbolLength();
  }
  return result;
!!!43032247.cpp!!!	LoadKernel() : bool
  BuildId build_id = GetExpectedBuildId(DEFAULT_KERNEL_FILENAME_FOR_BUILD_ID);
  if (!vmlinux_.empty()) {
    ParseSymbolsFromElfFile(vmlinux_, build_id,
                            std::bind(VmlinuxSymbolCallback, std::placeholders::_1, this));
  } else {
    if (!build_id.IsEmpty()) {
      BuildId real_build_id;
      GetKernelBuildId(&real_build_id);
      bool match = (build_id == real_build_id);
      LOG(DEBUG) << "check kernel build id (" << (match ? "match" : "mismatch") << "): expected "
                 << build_id.ToString() << ", real " << real_build_id.ToString();
      if (!match) {
        return false;
      }
    }

    ProcessKernelSymbols("/proc/kallsyms",
                         std::bind(&KernelSymbolCallback, std::placeholders::_1, this));
    bool allZero = true;
    for (auto& symbol : symbols_) {
      if (symbol.addr != 0) {
        allZero = false;
        break;
      }
    }
    if (allZero) {
      LOG(WARNING) << "Symbol addresses in /proc/kallsyms are all zero. Check "
                      "/proc/sys/kernel/kptr_restrict if possible.";
      symbols_.clear();
      return false;
    }
  }
  return true;
!!!43032375.cpp!!!	LoadKernelModule() : bool
  BuildId build_id = GetExpectedBuildId(path_);
  ParseSymbolsFromElfFile(
      symfs_dir_ + path_, build_id,
      std::bind(ElfFileSymbolCallback, std::placeholders::_1, this, SymbolFilterForKernelModule));
  return true;
!!!43032503.cpp!!!	LoadElfFile() : bool
  bool loaded = false;
  BuildId build_id = GetExpectedBuildId(GetAccessiblePath());

  if (symfs_dir_.empty()) {
    // Linux host can store debug shared libraries in /usr/lib/debug.
    loaded = ParseSymbolsFromElfFile(
        "/usr/lib/debug" + path_, build_id,
        std::bind(ElfFileSymbolCallback, std::placeholders::_1, this, SymbolFilterForDso));
  }
  if (!loaded) {
    loaded = ParseSymbolsFromElfFile(
        GetAccessiblePath(), build_id,
        std::bind(ElfFileSymbolCallback, std::placeholders::_1, this, SymbolFilterForDso));
  }
  return loaded;
!!!43032631.cpp!!!	LoadEmbeddedElfFile() : bool
  std::string path = GetAccessiblePath();
  BuildId build_id = GetExpectedBuildId(path);
  auto tuple = SplitUrlInApk(path);
  CHECK(std::get<0>(tuple));
  return ParseSymbolsFromApkFile(std::get<1>(tuple), std::get<2>(tuple), build_id,
                                 std::bind(ElfFileSymbolCallback, std::placeholders::_1,
                                           this, SymbolFilterForDso));
!!!43032759.cpp!!!	InsertSymbol(in symbol : Symbol) : void
  symbols_.push_back(symbol);
!!!43032887.cpp!!!	FixupSymbolLength() : void
  Symbol* prev_symbol = nullptr;
  for (auto& symbol : symbols_) {
    if (prev_symbol != nullptr && prev_symbol->len == 0) {
      prev_symbol->len = symbol.addr - prev_symbol->addr;
    }
    prev_symbol = &symbol;
  }
  if (prev_symbol != nullptr && prev_symbol->len == 0) {
    prev_symbol->len = std::numeric_limits<unsigned long long>::max() - prev_symbol->addr;
  }
