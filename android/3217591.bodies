class AslrMmapTest
!!!43058999.cpp!!!	SetUpTestCase() : void
    /* set up per-arch values */
#if defined(__x86_64__)
    def = 32;
    min = 28;
    max = 32;
    path = SCRAPE_PATH_64;
    lib = SCRAPE_LIB_64;

    compat = true;
    def_cmpt = 16;
    min_cmpt = 8;
    max_cmpt = 16;

#elif defined(__i386__)
    def = 16;
    min = 8;
    max = 16;
    path = SCRAPE_PATH_32;
    lib = SCRAPE_LIB_32;

    if (!access(PROCFS_COMPAT_PATH, F_OK)) {
        // running 32 bit userspace over 64-bit kernel
        user32 = true;
        def_cmpt = 16;
        min_cmpt = 8;
        max_cmpt = 16;
    }

#elif defined(__aarch64__)
    unsigned int pgbits = std::log2(getpagesize());
    def = 24;
    min = 18 - (pgbits - 12);
    max = 24;
    path = SCRAPE_PATH_64;
    lib = SCRAPE_LIB_64;

    compat = true;
    def_cmpt = 16;
    min_cmpt = 11 - (pgbits - 12);
    max_cmpt = 16;

#elif defined(__arm__)
    unsigned int pgbits = std::log2(getpagesize());
    def = 16;
    min = 8;
    max = 16;
    path = SCRAPE_PATH_32;
    lib = SCRAPE_LIB_32;

    if (!access(PROCFS_COMPAT_PATH, F_OK)) {
        // running 32 bit userspace over 64-bit kernel
        user32 = true;
        def_cmpt = 16;
        min_cmpt = 11 - (pgbits - 12);;
        max_cmpt = 16;
    }
#endif
!!!43059127.cpp!!!	TearDown() : void
    if (!user32)
        set_mmap_rnd_bits(def, false);
    if (user32 || compat)
        set_mmap_rnd_bits(def_cmpt, true);
