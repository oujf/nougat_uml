class StopWatch
!!!43062327.cpp!!!	StopWatch(in name : char, in capacity : size_t = kUseDefaultCapacity)
    mStart.tv_sec = 0;
    mStart.tv_nsec = 0;
    mData = (Measurement *) malloc(mCapacity * sizeof(Measurement));
!!!43062455.cpp!!!	~StopWatch()
    if (mUsed && !mAlreadyPrinted)
    {
        fprintf(stderr, "Discarding data for %s\n", mName);
    }
    free(mData);
    free(mName);
    delete [] mDeltas;
!!!43062711.cpp!!!	start() : void
    checkCapacity();
    clock_gettime(CLOCK_MONOTONIC, &mData[mDataLen].mTime);
    mData[mDataLen].mIsStart = true;
    if (!mUsed)
    {
        mStart = mData[mDataLen].mTime; // mDataLen should be 0
        mUsed = true;
    }
    ++mNum;
    ++mDataLen;
!!!43062839.cpp!!!	stop() : void
    checkCapacity();
    clock_gettime(CLOCK_MONOTONIC, &mData[mDataLen].mTime);
    mData[mDataLen].mIsStart = false;
    ++mDataLen;
!!!43062967.cpp!!!	sprint(inout str : char, inout size : size_t) : void
    if (kVerbose) fprintf(stderr, "printing\n");
    mAlreadyPrinted = true;
    if (0 == mDataLen)
    {
        return;
    }
    if (mDataLen > 0 && mData[mDataLen - 1].mIsStart)
    {
        stop();
    }
    if (kVerbose) SNPRINTF_OR_RETURN(*str, *size, "# Got %d samples for %s\n", mDataLen, mName);
    processSamples();

    SNPRINTF_OR_RETURN(*str, *size, "# StopWatch %s total/cumulative duration %f Samples: %d\n",
                       mName, mDuration, mNum);
    printThroughput(str, size);
    printAverageMinMax(str, size);

    if (printRaw)
    {
        // print comment header and summary values.

        SNPRINTF_OR_RETURN(*str, *size, "# Name Iterations  Duration Min MinIdx Max MaxIdx SizeKbytes\n");
        SNPRINTF_OR_RETURN(*str, *size, "%s %d %f %f %d %f %d %d\n", mName, mNum, mDuration,
                           mMinDuration, mMinIdx, mMaxDuration, mMaxIdx, mSizeKbytes);
        // print each duration sample
        for (size_t i = 0; i < mDataLen / 2; ++i)
        {
            long second = mData[i * 2].mTime.tv_sec - mStart.tv_sec;
            long nano = mData[i * 2].mTime.tv_nsec - mStart.tv_nsec;

            SNPRINTF_OR_RETURN(*str, *size, "%f %f\n", double(second) + double(nano) / 1.0e9, mDeltas[i]);
        }
    }

!!!43063223.cpp!!!	setPrintRawMode(in raw : bool) : void
    printRaw = raw;
!!!43063351.cpp!!!	checkCapacity() : void
    if (mDataLen >= mCapacity)
    {
        mCapacity *= 2;
        fprintf(stderr, "# Increased capacity to %d for %s. Measurement affected.\n",
                mCapacity, mName);
        mData = (Measurement *)realloc(mData, mCapacity * sizeof(Measurement));
    }
!!!43063479.cpp!!!	timespecToDouble(in time : timespec) : double
    double val = double(time.tv_nsec) / 1.0e9 + double(time.tv_sec);
    return val < 0.0 ? -val : val;  // sometimes 0.00 is -0.00
!!!43063607.cpp!!!	printAverageMinMax(inout str : char, inout size : size_t) : void
    if (mDataLen > 2) // if there is only one sample, avg, min, max are trivial.
    {
        SNPRINTF_OR_RETURN(*str, *size, "# Average %s duration %f s/op\n", mName, mDuration / mNum);
        SNPRINTF_OR_RETURN(*str, *size, "# Standard deviation %s duration %f \n", mName, mDeviation);
        SNPRINTF_OR_RETURN(*str, *size, "# Min %s duration %f [%d]\n", mName, mMinDuration, mMinIdx);
        SNPRINTF_OR_RETURN(*str, *size, "# Max %s duration %f [%d]\n", mName, mMaxDuration, mMaxIdx);
    }
!!!43063735.cpp!!!	printThroughput(inout str : char, inout size : size_t) : void
    if (0 != mSizeKbytes)
    {
        SNPRINTF_OR_RETURN(*str, *size, "# Size: %d Kbytes  Total: %d\n", mSizeKbytes, mNum);
        SNPRINTF_OR_RETURN(*str, *size, "# Speed %f Kbyte/s\n", double(mSizeKbytes) * mNum / mDuration);
    }
!!!43063863.cpp!!!	processSamples() : void
    if (kVerbose) fprintf(stderr, "processing samples\n");
    size_t n = mDataLen / 2;
    mDeltas= new double[n];
    for (size_t i = 0; i < mDataLen; i += 2)   // even: start  odd: stop
    {
        long second = mData[i + 1].mTime.tv_sec - mData[i].mTime.tv_sec;
        long nano = mData[i + 1].mTime.tv_nsec - mData[i].mTime.tv_nsec;

        mDeltas[i / 2] = double(second) + double(nano) / 1.0e9;
    }

    for (size_t i = 0; i < n; ++i)
    {
        if (0 == i)
        {
            mMinDuration = mMaxDuration = mDeltas[i];
        }
        else
        {
            if (mMaxDuration < mDeltas[i])
            {
                mMaxDuration = mDeltas[i];
                mMaxIdx = i;
            }
            if (mMinDuration > mDeltas[i])
            {
                mMinDuration = mDeltas[i];
                mMinIdx = i;
            }
        }
        mDuration += mDeltas[i];
    }
    double avgDuration = mDuration / n;
    double diffSQ = 0.0;
    for (size_t i = 0; i < n; ++i)
    {
      diffSQ += pow((mDeltas[i] - avgDuration), 2.0);
    }
    mDeviation = sqrt(diffSQ / n);
