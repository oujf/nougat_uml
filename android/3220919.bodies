class AesKeyFactory
!!!43081015.cpp!!!	LoadKey(in key_material : KeymasterKeyBlob, in additional_params : AuthorizationSet, in hw_enforced : AuthorizationSet, in sw_enforced : AuthorizationSet, inout key : UniquePtr<Key>) : keymaster_error_t
    if (!key)
        return KM_ERROR_OUTPUT_PARAMETER_NULL;

    uint32_t min_mac_length = 0;
    if (hw_enforced.Contains(TAG_BLOCK_MODE, KM_MODE_GCM) ||
        sw_enforced.Contains(TAG_BLOCK_MODE, KM_MODE_GCM)) {

        if (!hw_enforced.GetTagValue(TAG_MIN_MAC_LENGTH, &min_mac_length) &&
            !sw_enforced.GetTagValue(TAG_MIN_MAC_LENGTH, &min_mac_length)) {

            LOG_E("AES-GCM key must have KM_TAG_MIN_MAC_LENGTH", 0);
            return KM_ERROR_INVALID_KEY_BLOB;
        }
    }

    keymaster_error_t error = KM_ERROR_OK;
    key->reset(new (std::nothrow) AesKey(key_material, hw_enforced, sw_enforced, &error));
    if (!key->get())
        error = KM_ERROR_MEMORY_ALLOCATION_FAILED;
    return error;
!!!43081143.cpp!!!	GetOperationFactory(in purpose : keymaster_purpose_t) : OperationFactory
    switch (purpose) {
    case KM_PURPOSE_ENCRYPT:
        return &encrypt_factory;
    case KM_PURPOSE_DECRYPT:
        return &decrypt_factory;
    default:
        return nullptr;
    }
!!!43081399.cpp!!!	validate_algorithm_specific_new_key_params(in key_description : AuthorizationSet) : keymaster_error_t
    if (key_description.Contains(TAG_BLOCK_MODE, KM_MODE_GCM)) {
        uint32_t min_tag_length;
        if (!key_description.GetTagValue(TAG_MIN_MAC_LENGTH, &min_tag_length))
            return KM_ERROR_MISSING_MIN_MAC_LENGTH;

        if (min_tag_length % 8 != 0)
            return KM_ERROR_UNSUPPORTED_MIN_MAC_LENGTH;

        if (min_tag_length < kMinGcmTagLength || min_tag_length > kMaxGcmTagLength)
            return KM_ERROR_UNSUPPORTED_MIN_MAC_LENGTH;
    } else {
        // Not GCM
        if (key_description.find(TAG_MIN_MAC_LENGTH) != -1) {
            LOG_W("KM_TAG_MIN_MAC_LENGTH found for non AES-GCM key", 0);
            return KM_ERROR_INVALID_TAG;
        }
    }

    return KM_ERROR_OK;
