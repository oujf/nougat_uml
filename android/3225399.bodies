class EcdsaKeymaster1KeyFactory
!!!43098679.cpp!!!	GenerateKey(in key_description : AuthorizationSet, inout key_blob : KeymasterKeyBlob, inout hw_enforced : AuthorizationSet, inout sw_enforced : AuthorizationSet) : keymaster_error_t
    AuthorizationSet key_params_copy;
    UpdateToWorkAroundUnsupportedDigests(key_description, &key_params_copy);
    return engine_->GenerateKey(key_params_copy, key_blob, hw_enforced, sw_enforced);
!!!43098807.cpp!!!	ImportKey(in key_description : AuthorizationSet, in input_key_material_format : keymaster_key_format_t, in input_key_material : KeymasterKeyBlob, inout output_key_blob : KeymasterKeyBlob, inout hw_enforced : AuthorizationSet, inout sw_enforced : AuthorizationSet) : keymaster_error_t
    AuthorizationSet key_params_copy;
    UpdateToWorkAroundUnsupportedDigests(key_description, &key_params_copy);
    return engine_->ImportKey(key_params_copy, input_key_material_format, input_key_material,
                              output_key_blob, hw_enforced, sw_enforced);
!!!43098935.cpp!!!	LoadKey(in key_material : KeymasterKeyBlob, in additional_params : AuthorizationSet, in hw_enforced : AuthorizationSet, in sw_enforced : AuthorizationSet, inout key : UniquePtr<Key>) : keymaster_error_t
    if (!key)
        return KM_ERROR_OUTPUT_PARAMETER_NULL;

    keymaster_error_t error;
    unique_ptr<EC_KEY, EC_KEY_Delete> ecdsa(
        engine_->BuildEcKey(key_material, additional_params, &error));
    if (!ecdsa)
        return error;

    key->reset(new (std::nothrow)
                   EcdsaKeymaster1Key(ecdsa.release(), hw_enforced, sw_enforced, &error));
    if (!key->get())
        error = KM_ERROR_MEMORY_ALLOCATION_FAILED;

    if (error != KM_ERROR_OK)
        return error;

    return KM_ERROR_OK;
!!!43099063.cpp!!!	GetOperationFactory(in purpose : keymaster_purpose_t) : OperationFactory
    switch (purpose) {
    case KM_PURPOSE_SIGN:
        return sign_factory_.get();
    case KM_PURPOSE_VERIFY:
        return verify_factory_.get();
    default:
        return nullptr;
    }
