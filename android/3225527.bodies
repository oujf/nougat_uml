class Keymaster1Engine
!!!43115191.cpp!!!	Keymaster1Engine(in keymaster1_device : keymaster1_device_t)
    assert(rsa_index_ != -1);
    assert(ec_key_index_ != -1);
    assert(keymaster1_device);
    assert(!instance_);

    instance_ = this;

    ENGINE_set_RSA_method(engine_.get(), &rsa_method_, sizeof(rsa_method_));
    ENGINE_set_ECDSA_method(engine_.get(), &ecdsa_method_, sizeof(ecdsa_method_));
!!!43115319.cpp!!!	~Keymaster1Engine()
    keymaster1_device_->common.close(
        reinterpret_cast<hw_device_t*>(const_cast<keymaster1_device_t*>(keymaster1_device_)));
    instance_ = nullptr;
!!!43115447.cpp!!!	GenerateKey(in key_description : AuthorizationSet, inout key_blob : KeymasterKeyBlob, inout hw_enforced : AuthorizationSet, inout sw_enforced : AuthorizationSet) : keymaster_error_t
    assert(key_blob);

    keymaster_key_characteristics_t* characteristics;
    keymaster_key_blob_t blob;
    keymaster_error_t error = keymaster1_device_->generate_key(keymaster1_device_, &key_description,
                                                               &blob, &characteristics);
    if (error != KM_ERROR_OK)
        return error;
    unique_ptr<uint8_t, Malloc_Delete> blob_deleter(const_cast<uint8_t*>(blob.key_material));
    key_blob->key_material = dup_buffer(blob.key_material, blob.key_material_size);
    key_blob->key_material_size = blob.key_material_size;

    ConvertCharacteristics(characteristics, hw_enforced, sw_enforced);
    return error;
!!!43115575.cpp!!!	ImportKey(in key_description : AuthorizationSet, in input_key_material_format : keymaster_key_format_t, in input_key_material : KeymasterKeyBlob, inout output_key_blob : KeymasterKeyBlob, inout hw_enforced : AuthorizationSet, inout sw_enforced : AuthorizationSet) : keymaster_error_t
    assert(output_key_blob);

    keymaster_key_characteristics_t* characteristics;
    const keymaster_blob_t input_key = {input_key_material.key_material,
                                        input_key_material.key_material_size};
    keymaster_key_blob_t blob;
    keymaster_error_t error = keymaster1_device_->import_key(keymaster1_device_, &key_description,
                                                             input_key_material_format, &input_key,
                                                             &blob, &characteristics);
    if (error != KM_ERROR_OK)
        return error;
    unique_ptr<uint8_t, Malloc_Delete> blob_deleter(const_cast<uint8_t*>(blob.key_material));
    output_key_blob->key_material = dup_buffer(blob.key_material, blob.key_material_size);
    output_key_blob->key_material_size = blob.key_material_size;

    ConvertCharacteristics(characteristics, hw_enforced, sw_enforced);
    return error;
!!!43115703.cpp!!!	DeleteKey(in blob : KeymasterKeyBlob) : keymaster_error_t
    if (!keymaster1_device_->delete_key)
        return KM_ERROR_OK;
    return keymaster1_device_->delete_key(keymaster1_device_, &blob);
!!!43115831.cpp!!!	DeleteAllKeys() : keymaster_error_t
    if (!keymaster1_device_->delete_all_keys)
        return KM_ERROR_OK;
    return keymaster1_device_->delete_all_keys(keymaster1_device_);
!!!43116087.cpp!!!	BuildRsaKey(in blob : KeymasterKeyBlob, in additional_params : AuthorizationSet, inout error : keymaster_error_t) : RSA
    // Create new RSA key (with engine methods) and add metadata
    unique_ptr<RSA, RSA_Delete> rsa(RSA_new_method(engine_.get()));
    if (!rsa) {
        *error = TranslateLastOpenSslError();
        return nullptr;
    }

    KeyData* key_data = new KeyData(blob, additional_params);
    if (!RSA_set_ex_data(rsa.get(), rsa_index_, key_data)) {
        *error = TranslateLastOpenSslError();
        delete key_data;
        return nullptr;
    }

    // Copy public key into new RSA key
    unique_ptr<EVP_PKEY, EVP_PKEY_Delete> pkey(
        GetKeymaster1PublicKey(key_data->key_material, key_data->begin_params, error));
    if (!pkey) {
        *error = TranslateLastOpenSslError();
        return nullptr;
    }

    unique_ptr<RSA, RSA_Delete> public_rsa(EVP_PKEY_get1_RSA(pkey.get()));
    if (!public_rsa) {
        *error = TranslateLastOpenSslError();
        return nullptr;
    }

    rsa->n = BN_dup(public_rsa->n);
    rsa->e = BN_dup(public_rsa->e);
    if (!rsa->n || !rsa->e) {
        *error = TranslateLastOpenSslError();
        return nullptr;
    }

    *error = KM_ERROR_OK;
    return rsa.release();
!!!43116215.cpp!!!	BuildEcKey(in blob : KeymasterKeyBlob, in additional_params : AuthorizationSet, inout error : keymaster_error_t) : EC_KEY
    // Create new EC key (with engine methods) and insert blob
    unique_ptr<EC_KEY, EC_KEY_Delete> ec_key(EC_KEY_new_method(engine_.get()));
    if (!ec_key) {
        *error = TranslateLastOpenSslError();
        return nullptr;
    }

    KeyData* key_data = new KeyData(blob, additional_params);
    if (!EC_KEY_set_ex_data(ec_key.get(), ec_key_index_, key_data)) {
        *error = TranslateLastOpenSslError();
        delete key_data;
        return nullptr;
    }

    // Copy public key into new EC key
    unique_ptr<EVP_PKEY, EVP_PKEY_Delete> pkey(
        GetKeymaster1PublicKey(blob, additional_params, error));
    if (!pkey) {
        *error = TranslateLastOpenSslError();
        return nullptr;
    }

    unique_ptr<EC_KEY, EC_KEY_Delete> public_ec_key(EVP_PKEY_get1_EC_KEY(pkey.get()));
    if (!public_ec_key) {
        *error = TranslateLastOpenSslError();
        return nullptr;
    }

    if (!EC_KEY_set_group(ec_key.get(), EC_KEY_get0_group(public_ec_key.get())) ||
        !EC_KEY_set_public_key(ec_key.get(), EC_KEY_get0_public_key(public_ec_key.get()))) {
        *error = TranslateLastOpenSslError();
        return nullptr;
    }

    *error = KM_ERROR_OK;
    return ec_key.release();
!!!43116343.cpp!!!	GetData(inout key : EVP_PKEY) : Keymaster1Engine::KeyData
    switch (EVP_PKEY_type(key->type)) {
    case EVP_PKEY_RSA: {
        unique_ptr<RSA, RSA_Delete> rsa(EVP_PKEY_get1_RSA(key));
        return GetData(rsa.get());
    }

    case EVP_PKEY_EC: {
        unique_ptr<EC_KEY, EC_KEY_Delete> ec_key(EVP_PKEY_get1_EC_KEY(key));
        return GetData(ec_key.get());
    }

    default:
        return nullptr;
    };
!!!43116471.cpp!!!	GetData(in rsa : RSA) : Keymaster1Engine::KeyData
    if (!rsa)
        return nullptr;
    return reinterpret_cast<KeyData*>(RSA_get_ex_data(rsa, rsa_index_));
!!!43116599.cpp!!!	GetData(in ec_key : EC_KEY) : Keymaster1Engine::KeyData
    if (!ec_key)
        return nullptr;
    return reinterpret_cast<KeyData*>(EC_KEY_get_ex_data(ec_key, ec_key_index_));
!!!43116855.cpp!!!	GetKeymaster1PublicKey(in blob : KeymasterKeyBlob, in additional_params : AuthorizationSet, inout error : keymaster_error_t) : EVP_PKEY
    keymaster_blob_t client_id = {nullptr, 0};
    keymaster_blob_t app_data = {nullptr, 0};
    keymaster_blob_t* client_id_ptr = nullptr;
    keymaster_blob_t* app_data_ptr = nullptr;
    if (additional_params.GetTagValue(TAG_APPLICATION_ID, &client_id))
        client_id_ptr = &client_id;
    if (additional_params.GetTagValue(TAG_APPLICATION_DATA, &app_data))
        app_data_ptr = &app_data;

    keymaster_blob_t export_data = {nullptr, 0};
    *error = keymaster1_device_->export_key(keymaster1_device_, KM_KEY_FORMAT_X509, &blob,
                                            client_id_ptr, app_data_ptr, &export_data);
    if (*error != KM_ERROR_OK)
        return nullptr;

    unique_ptr<uint8_t, Malloc_Delete> pub_key(const_cast<uint8_t*>(export_data.data));

    const uint8_t* p = export_data.data;
    return d2i_PUBKEY(nullptr /* allocate new struct */, &p, export_data.data_length);
!!!43117239.cpp!!!	BuildRsaMethod() : RSA_METHOD
    RSA_METHOD method;

    method.common.references = 0;
    method.common.is_static = 1;
    method.app_data = nullptr;
    method.init = nullptr;
    method.finish = nullptr;
    method.size = nullptr;
    method.sign = nullptr;
    method.verify = nullptr;
    method.encrypt = nullptr;
    method.sign_raw = Keymaster1Engine::rsa_sign_raw;
    method.decrypt = Keymaster1Engine::rsa_decrypt;
    method.verify_raw = nullptr;
    method.private_transform = nullptr;
    method.mod_exp = nullptr;
    method.bn_mod_exp = BN_mod_exp_mont;
    method.flags = RSA_FLAG_OPAQUE;
    method.keygen = nullptr;
    method.supports_digest = nullptr;

    return method;
!!!43117367.cpp!!!	BuildEcdsaMethod() : ECDSA_METHOD
    ECDSA_METHOD method;

    method.common.references = 0;
    method.common.is_static = 1;
    method.app_data = nullptr;
    method.init = nullptr;
    method.finish = nullptr;
    method.group_order_size = nullptr;
    method.sign = Keymaster1Engine::ecdsa_sign;
    method.verify = nullptr;
    method.flags = ECDSA_FLAG_OPAQUE;

    return method;
!!!43117751.cpp!!!	Keymaster1Finish(in key_data : Keymaster1Engine::KeyData, in input : keymaster_blob_t, inout output : keymaster_blob_t) : keymaster_error_t
    if (key_data->op_handle == 0)
        return KM_ERROR_UNKNOWN_ERROR;

    size_t input_consumed;
    // Note: devices are required to consume all input in a single update call for undigested
    // signing operations and encryption operations.  No need to loop here.
    keymaster_error_t error =
        device()->update(device(), key_data->op_handle, &key_data->finish_params, &input,
                         &input_consumed, nullptr /* out_params */, nullptr /* output */);
    if (error != KM_ERROR_OK)
        return error;

    return device()->finish(device(), key_data->op_handle, &key_data->finish_params,
                            nullptr /* signature */, nullptr /* out_params */, output);
!!!43117879.cpp!!!	duplicate_key_data(inout to : CRYPTO_EX_DATA, in from : CRYPTO_EX_DATA, inout from_d : void, in index : int, in argl : long, inout argp : void) : int
    KeyData* data = reinterpret_cast<KeyData*>(*from_d);
    if (!data)
        return 1;

    // Default copy ctor is good.
    *from_d = new KeyData(*data);
    if (*from_d)
        return 1;
    return 0;
!!!43118007.cpp!!!	free_key_data(inout parent : void, inout ptr : void, inout data : CRYPTO_EX_DATA, in index : int, in argl : long, inout argp : void) : void
    delete reinterpret_cast<KeyData*>(ptr);
!!!43118135.cpp!!!	rsa_sign_raw(inout rsa : RSA, inout out_len : size_t, inout out : uint8_t, in max_out : size_t, in in : uint8_t, in in_len : size_t, in padding : int) : int
    KeyData* key_data = instance_->GetData(rsa);
    if (!key_data)
        return 0;

    if (padding != key_data->expected_openssl_padding) {
        LOG_E("Expected sign_raw with padding %d but got padding %d",
              key_data->expected_openssl_padding, padding);
        return KM_ERROR_UNKNOWN_ERROR;
    }

    keymaster_blob_t input = {in, in_len};
    keymaster_blob_t output;
    key_data->error = instance_->Keymaster1Finish(key_data, input, &output);
    if (key_data->error != KM_ERROR_OK)
        return 0;
    unique_ptr<uint8_t, Malloc_Delete> output_deleter(const_cast<uint8_t*>(output.data));

    *out_len = std::min(output.data_length, max_out);
    memcpy(out, output.data, *out_len);
    return 1;
!!!43118263.cpp!!!	rsa_decrypt(inout rsa : RSA, inout out_len : size_t, inout out : uint8_t, in max_out : size_t, in in : uint8_t, in in_len : size_t, in padding : int) : int
    KeyData* key_data = instance_->GetData(rsa);
    if (!key_data)
        return 0;

    if (padding != key_data->expected_openssl_padding) {
        LOG_E("Expected sign_raw with padding %d but got padding %d",
              key_data->expected_openssl_padding, padding);
        return KM_ERROR_UNKNOWN_ERROR;
    }

    keymaster_blob_t input = {in, in_len};
    keymaster_blob_t output;
    key_data->error = instance_->Keymaster1Finish(key_data, input, &output);
    if (key_data->error != KM_ERROR_OK)
        return 0;
    unique_ptr<uint8_t, Malloc_Delete> output_deleter(const_cast<uint8_t*>(output.data));

    *out_len = std::min(output.data_length, max_out);
    memcpy(out, output.data, *out_len);
    return 1;
!!!43118391.cpp!!!	ecdsa_sign(in digest : uint8_t, in digest_len : size_t, inout sig : uint8_t, inout sig_len : uint, inout ec_key : EC_KEY) : int
    KeyData* key_data = instance_->GetData(ec_key);
    if (!key_data)
        return 0;

    // Truncate digest if it's too long
    size_t max_input_len = (ec_group_size_bits(ec_key) + 7) / 8;
    if (digest_len > max_input_len)
        digest_len = max_input_len;

    keymaster_blob_t input = {digest, digest_len};
    keymaster_blob_t output;
    key_data->error = instance_->Keymaster1Finish(key_data, input, &output);
    if (key_data->error != KM_ERROR_OK)
        return 0;
    unique_ptr<uint8_t, Malloc_Delete> output_deleter(const_cast<uint8_t*>(output.data));

    *sig_len = std::min(output.data_length, ECDSA_size(ec_key));
    memcpy(sig, output.data, *sig_len);
    return 1;
