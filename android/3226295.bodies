class EcdsaKeymaster1OperationFactory
!!!43100983.cpp!!!	CreateOperation(in key : Key, in begin_params : AuthorizationSet, inout error : keymaster_error_t) : Operation
    keymaster_digest_t digest;
    if (!GetAndValidateDigest(begin_params, key, &digest, error))
        return nullptr;

    const EcdsaKeymaster1Key& ecdsa_km1_key(static_cast<const EcdsaKeymaster1Key&>(key));
    unique_ptr<EVP_PKEY, EVP_PKEY_Delete> ecdsa(GetEvpKey(ecdsa_km1_key, error));
    if (!ecdsa)
        return nullptr;

    switch (purpose_) {
    case KM_PURPOSE_SIGN:
        return new EcdsaKeymaster1Operation<EcdsaSignOperation>(digest, ecdsa.release(), engine_);
    default:
        LOG_E(
            "Bug: Pubkey operation requested.  Those should be handled by normal ECDSA operations.",
            0);
        *error = KM_ERROR_UNSUPPORTED_PURPOSE;
        return nullptr;
    }
!!!43101111.cpp!!!	SupportedDigests(inout digest_count : size_t) : keymaster_digest_t
    *digest_count = array_length(supported_digests);
    return supported_digests;
!!!43101239.cpp!!!	SupportedPaddingModes(inout padding_mode_count : size_t) : keymaster_padding_t
    *padding_mode_count = 0;
    return nullptr;
