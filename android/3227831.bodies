class HmacSha256
!!!43105591.cpp!!!	DigestLength() : size_t
    return SHA256_DIGEST_LENGTH;
!!!43105719.cpp!!!	Init(in key : uint8_t, in key_len : size_t) : bool
    if (!key)
        return false;

    key_len_ = key_len;
    key_.reset(dup_buffer(key, key_len));
    if (!key_.get()) {
        return false;
    }
    return true;
!!!43105847.cpp!!!	Init(in key : Buffer) : bool
    return Init(key.peek_read(), key.available_read());
!!!43105975.cpp!!!	Sign(in data : Buffer, inout out_digest : uint8_t, in digest_len : size_t) : bool
    return Sign(data.peek_read(), data.available_read(), out_digest, digest_len);
!!!43106103.cpp!!!	Sign(in data : uint8_t, in data_len : size_t, inout out_digest : uint8_t, in digest_len : size_t) : bool
    assert(digest_len);

    uint8_t tmp[SHA256_DIGEST_LENGTH];
    uint8_t* digest = tmp;
    if (digest_len >= SHA256_DIGEST_LENGTH)
        digest = out_digest;

    if (nullptr == ::HMAC(EVP_sha256(), key_.get(), key_len_, data, data_len, digest, nullptr)) {
        return false;
    }
    if (digest_len < SHA256_DIGEST_LENGTH)
        memcpy(out_digest, tmp, digest_len);

    return true;
!!!43106231.cpp!!!	Verify(in data : Buffer, in digest : Buffer) : bool
    return Verify(data.peek_read(), data.available_read(), digest.peek_read(),
                  digest.available_read());
!!!43106359.cpp!!!	Verify(in data : uint8_t, in data_len : size_t, in digest : uint8_t, in digest_len : size_t) : bool
    if (digest_len != SHA256_DIGEST_LENGTH)
        return false;

    uint8_t computed_digest[SHA256_DIGEST_LENGTH];
    if (!Sign(data, data_len, computed_digest, sizeof(computed_digest)))
        return false;

    return 0 == CRYPTO_memcmp(digest, computed_digest, SHA256_DIGEST_LENGTH);
