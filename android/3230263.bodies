class OperationTable
!!!43123639.cpp!!!	Add(inout operation : Operation, inout op_handle : keymaster_operation_handle_t) : keymaster_error_t
    if (!table_.get()) {
        table_.reset(new (std::nothrow) Entry[table_size_]);
        if (!table_.get())
            return KM_ERROR_MEMORY_ALLOCATION_FAILED;
    }

    UniquePtr<Operation> op(operation);
    if (RAND_bytes(reinterpret_cast<uint8_t*>(op_handle), sizeof(*op_handle)) != 1)
        return TranslateLastOpenSslError();
    if (*op_handle == 0) {
        // Statistically this is vanishingly unlikely, which means if it ever happens in practice,
        // it indicates a broken RNG.
        return KM_ERROR_UNKNOWN_ERROR;
    }

    for (size_t i = 0; i < table_size_; ++i) {
        if (table_[i].operation == NULL) {
            table_[i].operation = op.release();
            table_[i].handle = *op_handle;
            return KM_ERROR_OK;
        }
    }
    return KM_ERROR_TOO_MANY_OPERATIONS;
!!!43123767.cpp!!!	Find(in op_handle : keymaster_operation_handle_t) : Operation
    if (op_handle == 0)
        return NULL;

    if (!table_.get())
        return NULL;

    for (size_t i = 0; i < table_size_; ++i) {
        if (table_[i].handle == op_handle)
            return table_[i].operation;
    }
    return NULL;
!!!43123895.cpp!!!	Delete(in op_handle : keymaster_operation_handle_t) : bool
    if (!table_.get())
        return false;

    for (size_t i = 0; i < table_size_; ++i) {
        if (table_[i].handle == op_handle) {
            delete table_[i].operation;
            table_[i].operation = NULL;
            table_[i].handle = 0;
            return true;
        }
    }
    return false;
