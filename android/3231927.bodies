class RsaKeymaster1OperationFactory
!!!43128119.cpp!!!	CreateOperation(in key : Key, in begin_params : AuthorizationSet, inout error : keymaster_error_t) : Operation
    keymaster_digest_t digest;
    if (!GetAndValidateDigest(begin_params, key, &digest, error))
        return nullptr;

    keymaster_padding_t padding;
    if (!GetAndValidatePadding(begin_params, key, &padding, error))
        return nullptr;

    const RsaKeymaster1Key& rsa_km1_key(static_cast<const RsaKeymaster1Key&>(key));
    unique_ptr<EVP_PKEY, EVP_PKEY_Delete> rsa(GetEvpKey(rsa_km1_key, error));
    if (!rsa)
        return nullptr;

    switch (purpose_) {
    case KM_PURPOSE_SIGN:
        return new RsaKeymaster1Operation<RsaSignOperation>(digest, padding, rsa.release(),
                                                            engine_);
    case KM_PURPOSE_DECRYPT:
        return new RsaKeymaster1Operation<RsaDecryptOperation>(digest, padding, rsa.release(),
                                                               engine_);
    default:
        LOG_E("Bug: Pubkey operation requested.  Those should be handled by normal RSA operations.",
              0);
        *error = KM_ERROR_UNSUPPORTED_PURPOSE;
        return nullptr;
    }
!!!43128247.cpp!!!	SupportedDigests(inout digest_count : size_t) : keymaster_digest_t
    *digest_count = array_length(supported_digests);
    return supported_digests;
!!!43128375.cpp!!!	SupportedPaddingModes(inout padding_mode_count : size_t) : keymaster_padding_t
    switch (purpose_) {
    case KM_PURPOSE_SIGN:
    case KM_PURPOSE_VERIFY:
        *padding_mode_count = array_length(supported_sig_padding);
        return supported_sig_padding;
    case KM_PURPOSE_ENCRYPT:
    case KM_PURPOSE_DECRYPT:
        *padding_mode_count = array_length(supported_crypt_padding);
        return supported_crypt_padding;
    default:
        *padding_mode_count = 0;
        return nullptr;
    }
