class AttestKeyResponse
!!!43161271.cpp!!!	~AttestKeyResponse()
    for (size_t i = 0; i < certificate_chain.entry_count; ++i)
        delete[] certificate_chain.entries[i].data;
    delete[] certificate_chain.entries;
!!!43161399.cpp!!!	AllocateChain(in entry_count : size_t) : bool
    if (entry_count > kMaxChainEntryCount)
        return false;

    if (certificate_chain.entries) {
        for (size_t i = 0; i < certificate_chain.entry_count; ++i)
            delete[] certificate_chain.entries[i].data;
        delete[] certificate_chain.entries;
    }

    certificate_chain.entry_count = entry_count;
    certificate_chain.entries = new keymaster_blob_t[entry_count];
    if (!certificate_chain.entries) {
        certificate_chain.entry_count = 0;
        return false;
    }

    memset(certificate_chain.entries, 0, sizeof(certificate_chain.entries[0]) * entry_count);
    return true;
!!!43161527.cpp!!!	NonErrorSerializedSize() : size_t
    size_t result = sizeof(uint32_t); /* certificate_chain.entry_count */
    for (size_t i = 0; i < certificate_chain.entry_count; ++i) {
        result += sizeof(uint32_t); /* certificate_chain.entries[i].data_length */
        result += certificate_chain.entries[i].data_length;
    }
    return result;
!!!43161655.cpp!!!	NonErrorSerialize(inout buf : uint8_t, in end : uint8_t) : uint8_t
    buf = append_uint32_to_buf(buf, end, certificate_chain.entry_count);
    for (size_t i = 0; i < certificate_chain.entry_count; ++i) {
        buf = append_size_and_data_to_buf(buf, end, certificate_chain.entries[i].data,
                                          certificate_chain.entries[i].data_length);
    }
    return buf;
!!!43161783.cpp!!!	NonErrorDeserialize(in buf_ptr : uint8_t, in end : uint8_t) : bool
    size_t entry_count;
    if (!copy_uint32_from_buf(buf_ptr, end, &entry_count) || !AllocateChain(entry_count))
        return false;

    for (size_t i = 0; i < certificate_chain.entry_count; ++i) {
        UniquePtr<uint8_t[]> data;
        size_t data_length;
        if (!copy_size_and_data_from_buf(buf_ptr, end, &data_length, &data))
            return false;
        certificate_chain.entries[i].data = data.release();
        certificate_chain.entries[i].data_length = data_length;
    }

    return true;
