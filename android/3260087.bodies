class DTSFrameScanner
!!!43213111.cpp!!!	parseHeader() : bool
    BitFieldParser parser(&mHeaderBuffer[mSyncLength]);

    // These variables are named after the fields in the DTS spec 5.3.1
    // Extract field in order.
    (void) /* uint32_t ftype = */ parser.readBits(1);
    (void) /* uint32_t deficit = */ parser.readBits(5); // "short"
    uint32_t cpf = parser.readBits(1);
    uint32_t nblks = parser.readBits(7);
    uint32_t fsize = parser.readBits(14);
    (void) /* uint32_t amode = */ parser.readBits(6);
    uint32_t sfreq = parser.readBits(4);
    // make sure we did not read past collected data
    ALOG_ASSERT((mSyncLength + ((parser.getBitCursor() + 7) >> 3))
            <= mHeaderLength);

    // Validate fields.
    if (cpf != 0) {
        ALOGE("DTSFrameScanner: ERROR - CPF not zero!");
        return false;
    }
    if (nblks < DTS_MINIMUM_NBLKS) {
        ALOGE("DTSFrameScanner: ERROR - nblks = %u", nblks);
        return false;
    }
    if (fsize < DTS_MINIMUM_FSIZE) {
        ALOGE("DTSFrameScanner: ERROR - fsize = %u", fsize);
        return false;
    }

    int32_t sampleRate = kDTSSampleRateTable[sfreq];
    if (sampleRate < 0) {
        ALOGE("DTSFrameScanner: ERROR - invalid sampleRate[%u] = %d", sfreq, sampleRate);
        return false;
    }
    mSampleRate = (uint32_t) sampleRate;

    mSampleFramesPerSyncFrame = (nblks + 1) * DTS_PCM_FRAMES_PER_BLOCK;
    if (mSampleFramesPerSyncFrame <= IEC61937_MAX_SAMPLES_TYPE_I) {
        mDataType = IEC61937_DATA_TYPE_DTS_I;
    } else if (mSampleFramesPerSyncFrame <= IEC61937_MAX_SAMPLES_TYPE_II) {
        mDataType = IEC61937_DATA_TYPE_DTS_II;
    } else if (mSampleFramesPerSyncFrame <= IEC61937_MAX_SAMPLES_TYPE_III) {
        mDataType = IEC61937_DATA_TYPE_DTS_III;
    } else {
        mDataType = IEC61937_DATA_TYPE_DTS_IV;
        // TODO set bits 8,10
    }

    mFrameSizeBytes = fsize + 1;

    mRateMultiplier = 1; // TODO what about "frequency extension"?
    ALOGI_IF((mFormatDumpCount == 0),
            "DTS frame rate = %d * %d, size = %zu",
            mSampleRate, mRateMultiplier, mFrameSizeBytes);
    mFormatDumpCount++;
    return true;
