class IptablesBaseTest
!!!43243703.cpp!!!	IptablesBaseTest()
    sCmds.clear();
    sRestoreCmds.clear();
!!!43243831.cpp!!!	fake_android_fork_exec(in argc : int, inout argv : char, inout status : int, in  : bool, in  : bool) : int
    std::string cmd = argv[0];
    for (int i = 1; i < argc; i++) {
        cmd += " ";
        cmd += argv[i];
    }
    sCmds.push_back(cmd);
    *status = 0;
    return 0;
!!!43243959.cpp!!!	fakeExecIptables(in target : IptablesTarget) : int
    std::string cmd = " -w";
    va_list args;
    va_start(args, target);
    const char *arg;
    do {
        arg = va_arg(args, const char *);
        if (arg != nullptr) {
            cmd += " ";
            cmd += arg;
        }
    } while (arg);

    if (target == V4 || target == V4V6) {
        sCmds.push_back(IPTABLES_PATH + cmd);
    }
    if (target == V6 || target == V4V6) {
        sCmds.push_back(IP6TABLES_PATH + cmd);
    }

    return 0;
!!!43244087.cpp!!!	fakeExecIptablesRestore(in target : IptablesTarget, in commands : std::string) : int
    sRestoreCmds.push_back({ target, commands });
    return 0;
!!!43244215.cpp!!!	expectIptablesCommands(in expectedCmds : std::vector<std::string>) : void
    ExpectedIptablesCommands expected;
    for (auto cmd : expectedCmds) {
        expected.push_back({ V4V6, cmd });
    }
    expectIptablesCommands(expected);
!!!43244343.cpp!!!	expectIptablesCommands(in expectedCmds : IptablesBaseTest::ExpectedIptablesCommands) : void
    size_t pos = 0;
    for (size_t i = 0; i < expectedCmds.size(); i ++) {
        auto target = expectedCmds[i].first;
        auto cmd = expectedCmds[i].second;
        int numConsumed = expectIptablesCommand(target, pos, cmd);
        if (numConsumed < 0) {
            // Read past the end of the array.
            break;
        }
        pos += numConsumed;
    }

    EXPECT_EQ(pos, sCmds.size());
    sCmds.clear();
!!!43244471.cpp!!!	expectIptablesRestoreCommands(in expectedCmds : std::vector<std::string>) : void
    ExpectedIptablesCommands expected;
    for (auto cmd : expectedCmds) {
        expected.push_back({ V4V6, cmd });
    }
    expectIptablesRestoreCommands(expected);
!!!43244599.cpp!!!	expectIptablesRestoreCommands(in expectedCmds : IptablesBaseTest::ExpectedIptablesCommands) : void
    EXPECT_EQ(expectedCmds.size(), sRestoreCmds.size());
    for (size_t i = 0; i < expectedCmds.size(); i++) {
        EXPECT_EQ(expectedCmds[i], sRestoreCmds[i]) <<
            "iptables-restore command " << i << " differs";
    }
    sRestoreCmds.clear();
!!!43244727.cpp!!!	expectIptablesCommand(in target : IptablesTarget, in pos : int, in cmd : std::string) : int

    if ((unsigned) pos >= sCmds.size()) {
        ADD_FAILURE() << "Expected too many iptables commands, want command "
               << pos + 1 << "/" << sCmds.size();
        return -1;
    }

    if (target == V4 || target == V4V6) {
        EXPECT_EQ("/system/bin/iptables -w " + cmd, sCmds[pos++]);
    }
    if (target == V6 || target == V4V6) {
        EXPECT_EQ("/system/bin/ip6tables -w " + cmd, sCmds[pos++]);
    }

    return target == V4V6 ? 2 : 1;
