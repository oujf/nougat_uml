class UidRanges
!!!43273271.cpp!!!	UidRanges(in ranges : std::vector<android::net::UidRange>)
    mRanges.resize(ranges.size());
    std::transform(ranges.begin(), ranges.end(), mRanges.begin(),
            [](const android::net::UidRange& range) {
                return Range(range.getStart(), range.getStop());
            });
    std::sort(mRanges.begin(), mRanges.end());
!!!43273399.cpp!!!	hasUid(in uid : uid_t) : bool
    auto iter = std::lower_bound(mRanges.begin(), mRanges.end(), Range(uid, uid));
    return (iter != mRanges.end() && iter->first == uid) ||
           (iter != mRanges.begin() && (--iter)->second >= uid);
!!!43273527.cpp!!!	getRanges() : std::vector<Range>
    return mRanges;
!!!43273655.cpp!!!	parseFrom(in argc : int, inout argv : char) : bool
    mRanges.clear();
    for (int i = 0; i < argc; ++i) {
        if (!*argv[i]) {
            // The UID string is empty.
            return false;
        }
        char* endPtr;
        uid_t uidStart = strtoul(argv[i], &endPtr, 0);
        uid_t uidEnd;
        if (!*endPtr) {
            // Found a single UID. The range contains just the one UID.
            uidEnd = uidStart;
        } else if (*endPtr == '-') {
            if (!*++endPtr) {
                // Unexpected end of string.
                return false;
            }
            uidEnd = strtoul(endPtr, &endPtr, 0);
            if (*endPtr) {
                // Illegal trailing chars.
                return false;
            }
            if (uidEnd < uidStart) {
                // Invalid order.
                return false;
            }
        } else {
            // Not a single uid, not a range. Found some other illegal char.
            return false;
        }
        if (uidStart == INVALID_UID || uidEnd == INVALID_UID) {
            // Invalid UIDs.
            return false;
        }
        mRanges.push_back(Range(uidStart, uidEnd));
    }
    std::sort(mRanges.begin(), mRanges.end());
    return true;
!!!43273783.cpp!!!	toString() : std::string
    std::string s("UidRanges{ ");
    for (Range range : mRanges) {
        if (range.first != range.second) {
            StringAppendF(&s, "%u-%u ", range.first, range.second);
        } else {
            StringAppendF(&s, "%u ", range.first);
        }
    }
    StringAppendF(&s, "}");
    return s;
!!!43273911.cpp!!!	add(in other : UidRanges) : void
    auto middle = mRanges.insert(mRanges.end(), other.mRanges.begin(), other.mRanges.end());
    std::inplace_merge(mRanges.begin(), middle, mRanges.end());
!!!43274039.cpp!!!	remove(in other : UidRanges) : void
    auto end = std::set_difference(mRanges.begin(), mRanges.end(), other.mRanges.begin(),
                                   other.mRanges.end(), mRanges.begin());
    mRanges.erase(end, mRanges.end());
