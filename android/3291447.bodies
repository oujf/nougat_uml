class ResolverStats
!!!43264567.cpp!!!	encode(inout out : std::vector<int32_t>) : void
    size_t ofs = out->size();
    out->resize(ofs + STATS_COUNT);
    int32_t* cur = &(*out)[ofs];
    cur[STATS_SUCCESSES] = successes;
    cur[STATS_ERRORS] = errors;
    cur[STATS_TIMEOUTS] = timeouts;
    cur[STATS_INTERNAL_ERRORS] = internal_errors;
    cur[STATS_RTT_AVG] = rtt_avg;
    cur[STATS_LAST_SAMPLE_TIME] = last_sample_time;
    cur[STATS_USABLE] = usable;
!!!43264695.cpp!!!	decode(in in : std::vector<int32_t>, in ofs : ssize_t) : ssize_t
    if (ofs < 0 || static_cast<size_t>(ofs) + STATS_COUNT > in.size()) {
        return -1;
    }
    const int32_t* cur = &in[ofs];
    successes = cur[STATS_SUCCESSES];
    errors = cur[STATS_ERRORS];
    timeouts = cur[STATS_TIMEOUTS];
    internal_errors = cur[STATS_INTERNAL_ERRORS];
    rtt_avg = cur[STATS_RTT_AVG];
    last_sample_time = cur[STATS_LAST_SAMPLE_TIME];
    usable = cur[STATS_USABLE];
    return ofs + STATS_COUNT;
!!!43264823.cpp!!!	encodeAll(in stats : std::vector<ResolverStats>, inout out : std::vector<int32_t>) : void
    for (const auto& s : stats) {
        s.encode(out);
    }
!!!43264951.cpp!!!	decodeAll(in in : std::vector<int32_t>, inout stats : std::vector<ResolverStats>) : bool
    ssize_t size = in.size();
    if (size % STATS_COUNT) {
        return false;
    }
    stats->resize(size / STATS_COUNT);
    ssize_t ofs = 0;
    for (auto& s : *stats) {
        ofs = s.decode(in, ofs);
        if (ofs < 0) {
            return false;
        }
    }
    return true;
