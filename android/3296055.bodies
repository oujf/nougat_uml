class OperationMap
!!!43299127.cpp!!!	addOperation(in handle : keymaster_operation_handle_t, in keyid : uint64_t, in purpose : keymaster_purpose_t, in dev : keymaster2_device_t, in appToken : sp<IBinder>, inout characteristics : keymaster_key_characteristics_t, in pruneable : bool) : sp<IBinder>
    sp<IBinder> token = new BBinder();
    mMap[token] = Operation(handle, keyid, purpose, dev, characteristics, appToken);
    if (pruneable) {
        mLru.push_back(token);
    }
    if (mAppTokenMap.find(appToken) == mAppTokenMap.end()) {
        appToken->linkToDeath(mDeathRecipient);
    }
    mAppTokenMap[appToken].push_back(token);
    return token;
!!!43299255.cpp!!!	getOperation(in token : sp<IBinder>, inout outHandle : keymaster_operation_handle_t, inout outKeyid : uint64_t, inout outPurpose : keymaster_purpose_t, in outDevice : keymaster2_device_t, in outCharacteristics : keymaster_key_characteristics_t) : bool
    if (!outHandle || !outDevice) {
        return false;
    }
    auto entry = mMap.find(token);
    if (entry == mMap.end()) {
        return false;
    }
    updateLru(token);

    *outHandle = entry->second.handle;
    *outKeyid = entry->second.keyid;
    *outPurpose = entry->second.purpose;
    *outDevice = entry->second.device;
    if (outCharacteristics) {
        *outCharacteristics = entry->second.characteristics.get();
    }
    return true;
!!!43299383.cpp!!!	removeOperation(in token : sp<IBinder>) : bool
    auto entry = mMap.find(token);
    if (entry == mMap.end()) {
        return false;
    }
    sp<IBinder> appToken = entry->second.appToken;
    mMap.erase(entry);
    auto lruEntry = std::find(mLru.begin(), mLru.end(), token);
    if (lruEntry != mLru.end()) {
        mLru.erase(lruEntry);
    }
    removeOperationTracking(token, appToken);
    return true;
!!!43299511.cpp!!!	hasPruneableOperation() : bool
    return mLru.size() != 0;
!!!43299767.cpp!!!	getPruneableOperationCount() : size_t
    return mLru.size();
!!!43299895.cpp!!!	getOperationAuthToken(in token : sp<IBinder>, in outToken : hw_auth_token_t) : bool
    auto entry = mMap.find(token);
    if (entry == mMap.end()) {
        return false;
    }
    *outToken = entry->second.authToken.get();
    return true;
!!!43300023.cpp!!!	setOperationAuthToken(in token : sp<IBinder>, in authToken : hw_auth_token_t) : bool
    auto entry = mMap.find(token);
    if (entry == mMap.end()) {
        return false;
    }
    entry->second.authToken.reset(new hw_auth_token_t);
    *entry->second.authToken = *authToken;
    return true;
!!!43300151.cpp!!!	getOldestPruneableOperation() : sp<IBinder>
    if (!hasPruneableOperation()) {
        return sp<IBinder>(NULL);
    }
    return mLru[0];
!!!43300279.cpp!!!	getOperationsForToken(in appToken : sp<IBinder>) : std::vector<sp<IBinder>>
    auto appEntry = mAppTokenMap.find(appToken);
    if (appEntry != mAppTokenMap.end()) {
        return appEntry->second;
    } else {
        return std::vector<sp<IBinder>>();
    }
!!!43300407.cpp!!!	updateLru(in token : sp<IBinder>) : void
    auto lruEntry = std::find(mLru.begin(), mLru.end(), token);
    if (lruEntry != mLru.end()) {
        mLru.erase(lruEntry);
        mLru.push_back(token);
    }
!!!43300535.cpp!!!	removeOperationTracking(in token : sp<IBinder>, in appToken : sp<IBinder>) : void
    auto appEntry = mAppTokenMap.find(appToken);
    if (appEntry == mAppTokenMap.end()) {
        ALOGE("Entry for %p contains unmapped application token %p", token.get(), appToken.get());
        return;
    }
    auto tokenEntry = std::find(appEntry->second.begin(), appEntry->second.end(), token);
    appEntry->second.erase(tokenEntry);
    // Stop listening for death if all operations tied to the token have finished.
    if (appEntry->second.size() == 0) {
        appToken->unlinkToDeath(mDeathRecipient);
        mAppTokenMap.erase(appEntry);
    }
