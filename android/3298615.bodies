class KeystoreClientImpl
!!!43314231.cpp!!!	KeystoreClientImpl()
    service_manager_ = android::defaultServiceManager();
    keystore_binder_ = service_manager_->getService(String16("android.security.keystore"));
    keystore_ = android::interface_cast<android::IKeystoreService>(keystore_binder_);
!!!43314487.cpp!!!	encryptWithAuthentication(in key_name : std::string, in data : std::string, inout encrypted_data : std::string) : bool
    // The encryption algorithm is AES-256-CBC with PKCS #7 padding and a random
    // IV. The authentication algorithm is HMAC-SHA256 and is computed over the
    // cipher-text (i.e. Encrypt-then-MAC approach). This was chosen over AES-GCM
    // because hardware support for GCM is not mandatory for all Brillo devices.
    std::string encryption_key_name = key_name + kEncryptSuffix;
    if (!createOrVerifyEncryptionKey(encryption_key_name)) {
        return false;
    }
    std::string authentication_key_name = key_name + kAuthenticateSuffix;
    if (!createOrVerifyAuthenticationKey(authentication_key_name)) {
        return false;
    }
    AuthorizationSetBuilder encrypt_params;
    encrypt_params.Padding(KM_PAD_PKCS7);
    encrypt_params.Authorization(keymaster::TAG_BLOCK_MODE, KM_MODE_CBC);
    AuthorizationSet output_params;
    std::string raw_encrypted_data;
    if (!oneShotOperation(KM_PURPOSE_ENCRYPT, encryption_key_name, encrypt_params.build(), data,
                          std::string(), /* signature_to_verify */
                          &output_params, &raw_encrypted_data)) {
        ALOGE("Encrypt: AES operation failed.");
        return false;
    }
    keymaster_blob_t init_vector_blob;
    if (!output_params.GetTagValue(keymaster::TAG_NONCE, &init_vector_blob)) {
        ALOGE("Encrypt: Missing initialization vector.");
        return false;
    }
    std::string init_vector =
        ByteArrayAsString(init_vector_blob.data, init_vector_blob.data_length);

    AuthorizationSetBuilder authenticate_params;
    authenticate_params.Digest(KM_DIGEST_SHA_2_256);
    authenticate_params.Authorization(keymaster::TAG_MAC_LENGTH, kHMACOutputSize);
    std::string raw_authentication_data;
    if (!oneShotOperation(KM_PURPOSE_SIGN, authentication_key_name, authenticate_params.build(),
                          init_vector + raw_encrypted_data, std::string(), /* signature_to_verify */
                          &output_params, &raw_authentication_data)) {
        ALOGE("Encrypt: HMAC operation failed.");
        return false;
    }
    EncryptedData protobuf;
    protobuf.set_init_vector(init_vector);
    protobuf.set_authentication_data(raw_authentication_data);
    protobuf.set_encrypted_data(raw_encrypted_data);
    if (!protobuf.SerializeToString(encrypted_data)) {
        ALOGE("Encrypt: Failed to serialize EncryptedData protobuf.");
        return false;
    }
    return true;
!!!43314615.cpp!!!	decryptWithAuthentication(in key_name : std::string, in encrypted_data : std::string, inout data : std::string) : bool
    EncryptedData protobuf;
    if (!protobuf.ParseFromString(encrypted_data)) {
        ALOGE("Decrypt: Failed to parse EncryptedData protobuf.");
    }
    // Verify authentication before attempting decryption.
    std::string authentication_key_name = key_name + kAuthenticateSuffix;
    AuthorizationSetBuilder authenticate_params;
    authenticate_params.Digest(KM_DIGEST_SHA_2_256);
    AuthorizationSet output_params;
    std::string output_data;
    if (!oneShotOperation(KM_PURPOSE_VERIFY, authentication_key_name, authenticate_params.build(),
                          protobuf.init_vector() + protobuf.encrypted_data(),
                          protobuf.authentication_data(), &output_params, &output_data)) {
        ALOGE("Decrypt: HMAC operation failed.");
        return false;
    }
    std::string encryption_key_name = key_name + kEncryptSuffix;
    AuthorizationSetBuilder encrypt_params;
    encrypt_params.Padding(KM_PAD_PKCS7);
    encrypt_params.Authorization(keymaster::TAG_BLOCK_MODE, KM_MODE_CBC);
    encrypt_params.Authorization(keymaster::TAG_NONCE, protobuf.init_vector().data(),
                                 protobuf.init_vector().size());
    if (!oneShotOperation(KM_PURPOSE_DECRYPT, encryption_key_name, encrypt_params.build(),
                          protobuf.encrypted_data(), std::string(), /* signature_to_verify */
                          &output_params, data)) {
        ALOGE("Decrypt: AES operation failed.");
        return false;
    }
    return true;
!!!43314743.cpp!!!	oneShotOperation(in purpose : keymaster_purpose_t, in key_name : std::string, in input_parameters : AuthorizationSet, in input_data : std::string, in signature_to_verify : std::string, inout output_parameters : AuthorizationSet, inout output_data : std::string) : bool
    keymaster_operation_handle_t handle;
    int32_t result =
        beginOperation(purpose, key_name, input_parameters, output_parameters, &handle);
    if (result != KM_ERROR_OK) {
        ALOGE("BeginOperation failed: %d", result);
        return false;
    }
    AuthorizationSet empty_params;
    size_t num_input_bytes_consumed;
    AuthorizationSet ignored_params;
    result = updateOperation(handle, empty_params, input_data, &num_input_bytes_consumed,
                             &ignored_params, output_data);
    if (result != KM_ERROR_OK) {
        ALOGE("UpdateOperation failed: %d", result);
        return false;
    }
    result =
        finishOperation(handle, empty_params, signature_to_verify, &ignored_params, output_data);
    if (result != KM_ERROR_OK) {
        ALOGE("FinishOperation failed: %d", result);
        return false;
    }
    return true;
!!!43314871.cpp!!!	addRandomNumberGeneratorEntropy(in entropy : std::string) : int32_t
    return mapKeystoreError(keystore_->addRngEntropy(StringAsByteArray(entropy), entropy.size()));
!!!43314999.cpp!!!	generateKey(in key_name : std::string, in key_parameters : AuthorizationSet, inout hardware_enforced_characteristics : AuthorizationSet, inout software_enforced_characteristics : AuthorizationSet) : int32_t
    String16 key_name16(key_name.data(), key_name.size());
    KeymasterArguments key_arguments;
    CopyParameters(key_parameters, &key_arguments.params);
    KeyCharacteristics characteristics;
    int32_t result =
        keystore_->generateKey(key_name16, key_arguments, NULL /*entropy*/, 0 /*entropyLength*/,
                               kDefaultUID, KEYSTORE_FLAG_NONE, &characteristics);
    hardware_enforced_characteristics->Reinitialize(characteristics.characteristics.hw_enforced);
    software_enforced_characteristics->Reinitialize(characteristics.characteristics.sw_enforced);
    return mapKeystoreError(result);
!!!43315127.cpp!!!	getKeyCharacteristics(in key_name : std::string, inout hardware_enforced_characteristics : AuthorizationSet, inout software_enforced_characteristics : AuthorizationSet) : int32_t
    String16 key_name16(key_name.data(), key_name.size());
    keymaster_blob_t client_id_blob = {nullptr, 0};
    keymaster_blob_t app_data_blob = {nullptr, 0};
    KeyCharacteristics characteristics;
    int32_t result = keystore_->getKeyCharacteristics(key_name16, &client_id_blob, &app_data_blob,
                                                      kDefaultUID, &characteristics);
    hardware_enforced_characteristics->Reinitialize(characteristics.characteristics.hw_enforced);
    software_enforced_characteristics->Reinitialize(characteristics.characteristics.sw_enforced);
    return mapKeystoreError(result);
!!!43315255.cpp!!!	importKey(in key_name : std::string, in key_parameters : AuthorizationSet, in key_format : keymaster_key_format_t, in key_data : std::string, inout hardware_enforced_characteristics : AuthorizationSet, inout software_enforced_characteristics : AuthorizationSet) : int32_t
    String16 key_name16(key_name.data(), key_name.size());
    KeymasterArguments key_arguments;
    CopyParameters(key_parameters, &key_arguments.params);
    KeyCharacteristics characteristics;
    int32_t result =
        keystore_->importKey(key_name16, key_arguments, key_format, StringAsByteArray(key_data),
                             key_data.size(), kDefaultUID, KEYSTORE_FLAG_NONE, &characteristics);
    hardware_enforced_characteristics->Reinitialize(characteristics.characteristics.hw_enforced);
    software_enforced_characteristics->Reinitialize(characteristics.characteristics.sw_enforced);
    return mapKeystoreError(result);
!!!43315383.cpp!!!	exportKey(in export_format : keymaster_key_format_t, in key_name : std::string, inout export_data : std::string) : int32_t
    String16 key_name16(key_name.data(), key_name.size());
    keymaster_blob_t client_id_blob = {nullptr, 0};
    keymaster_blob_t app_data_blob = {nullptr, 0};
    ExportResult export_result;
    keystore_->exportKey(key_name16, export_format, &client_id_blob, &app_data_blob,
                         kDefaultUID, &export_result);
    *export_data = ByteArrayAsString(export_result.exportData.get(), export_result.dataLength);
    return mapKeystoreError(export_result.resultCode);
!!!43315511.cpp!!!	deleteKey(in key_name : std::string) : int32_t
    String16 key_name16(key_name.data(), key_name.size());
    return mapKeystoreError(keystore_->del(key_name16, kDefaultUID));
!!!43315639.cpp!!!	deleteAllKeys() : int32_t
    return mapKeystoreError(keystore_->clear_uid(kDefaultUID));
!!!43315767.cpp!!!	beginOperation(in purpose : keymaster_purpose_t, in key_name : std::string, in input_parameters : AuthorizationSet, inout output_parameters : AuthorizationSet, inout handle : keymaster_operation_handle_t) : int32_t
    android::sp<android::IBinder> token(new android::BBinder);
    String16 key_name16(key_name.data(), key_name.size());
    KeymasterArguments input_arguments;
    CopyParameters(input_parameters, &input_arguments.params);
    OperationResult result;
    keystore_->begin(token, key_name16, purpose, true /*pruneable*/, input_arguments,
                     NULL /*entropy*/, 0 /*entropyLength*/, kDefaultUID, &result);
    int32_t error_code = mapKeystoreError(result.resultCode);
    if (error_code == KM_ERROR_OK) {
        *handle = getNextVirtualHandle();
        active_operations_[*handle] = result.token;
        if (!result.outParams.params.empty()) {
            output_parameters->Reinitialize(&*result.outParams.params.begin(),
                                            result.outParams.params.size());
        }
    }
    return error_code;
!!!43315895.cpp!!!	updateOperation(in handle : keymaster_operation_handle_t, in input_parameters : AuthorizationSet, in input_data : std::string, inout num_input_bytes_consumed : size_t, inout output_parameters : AuthorizationSet, inout output_data : std::string) : int32_t
    if (active_operations_.count(handle) == 0) {
        return KM_ERROR_INVALID_OPERATION_HANDLE;
    }
    KeymasterArguments input_arguments;
    CopyParameters(input_parameters, &input_arguments.params);
    OperationResult result;
    keystore_->update(active_operations_[handle], input_arguments, StringAsByteArray(input_data),
                      input_data.size(), &result);
    int32_t error_code = mapKeystoreError(result.resultCode);
    if (error_code == KM_ERROR_OK) {
        *num_input_bytes_consumed = result.inputConsumed;
        if (!result.outParams.params.empty()) {
            output_parameters->Reinitialize(&*result.outParams.params.begin(),
                                            result.outParams.params.size());
        }
        output_data->append(ByteArrayAsString(result.data.get(), result.dataLength));
    }
    return error_code;
!!!43316023.cpp!!!	finishOperation(in handle : keymaster_operation_handle_t, in input_parameters : AuthorizationSet, in signature_to_verify : std::string, inout output_parameters : AuthorizationSet, inout output_data : std::string) : int32_t
    if (active_operations_.count(handle) == 0) {
        return KM_ERROR_INVALID_OPERATION_HANDLE;
    }
    KeymasterArguments input_arguments;
    CopyParameters(input_parameters, &input_arguments.params);
    OperationResult result;
    keystore_->finish(active_operations_[handle], input_arguments,
                      StringAsByteArray(signature_to_verify), signature_to_verify.size(),
                      NULL /*entropy*/, 0 /*entropyLength*/, &result);
    int32_t error_code = mapKeystoreError(result.resultCode);
    if (error_code == KM_ERROR_OK) {
        if (!result.outParams.params.empty()) {
            output_parameters->Reinitialize(&*result.outParams.params.begin(),
                                            result.outParams.params.size());
        }
        output_data->append(ByteArrayAsString(result.data.get(), result.dataLength));
        active_operations_.erase(handle);
    }
    return error_code;
!!!43316151.cpp!!!	abortOperation(in handle : keymaster_operation_handle_t) : int32_t
    if (active_operations_.count(handle) == 0) {
        return KM_ERROR_INVALID_OPERATION_HANDLE;
    }
    int32_t error_code = mapKeystoreError(keystore_->abort(active_operations_[handle]));
    if (error_code == KM_ERROR_OK) {
        active_operations_.erase(handle);
    }
    return error_code;
!!!43316279.cpp!!!	doesKeyExist(in key_name : std::string) : bool
    String16 key_name16(key_name.data(), key_name.size());
    int32_t error_code = mapKeystoreError(keystore_->exist(key_name16, kDefaultUID));
    return (error_code == KM_ERROR_OK);
!!!43316407.cpp!!!	listKeys(in prefix : std::string, inout key_name_list : std::vector<std::string>) : bool
    String16 prefix16(prefix.data(), prefix.size());
    android::Vector<String16> matches;
    int32_t error_code = mapKeystoreError(keystore_->list(prefix16, kDefaultUID, &matches));
    if (error_code == KM_ERROR_OK) {
        for (const auto& match : matches) {
            android::String8 key_name(match);
            key_name_list->push_back(prefix + std::string(key_name.string(), key_name.size()));
        }
        return true;
    }
    return false;
!!!43316535.cpp!!!	getNextVirtualHandle() : keymaster_operation_handle_t
    return next_virtual_handle_++;
!!!43316663.cpp!!!	mapKeystoreError(in keystore_error : int32_t) : int32_t
    // See notes in keystore_client.h for rationale.
    if (keystore_error == ::NO_ERROR) {
        return KM_ERROR_OK;
    }
    return keystore_error;
!!!43316791.cpp!!!	createOrVerifyEncryptionKey(in key_name : std::string) : bool
    bool key_exists = doesKeyExist(key_name);
    if (key_exists) {
        bool verified = false;
        if (!verifyEncryptionKeyAttributes(key_name, &verified)) {
            return false;
        }
        if (!verified) {
            int32_t result = deleteKey(key_name);
            if (result != KM_ERROR_OK) {
                ALOGE("Failed to delete invalid encryption key: %d", result);
                return false;
            }
            key_exists = false;
        }
    }
    if (!key_exists) {
        AuthorizationSetBuilder key_parameters;
        key_parameters.AesEncryptionKey(kAESKeySize)
            .Padding(KM_PAD_PKCS7)
            .Authorization(keymaster::TAG_BLOCK_MODE, KM_MODE_CBC)
            .Authorization(keymaster::TAG_NO_AUTH_REQUIRED);
        AuthorizationSet hardware_enforced_characteristics;
        AuthorizationSet software_enforced_characteristics;
        int32_t result =
            generateKey(key_name, key_parameters.build(), &hardware_enforced_characteristics,
                        &software_enforced_characteristics);
        if (result != KM_ERROR_OK) {
            ALOGE("Failed to generate encryption key: %d", result);
            return false;
        }
        if (hardware_enforced_characteristics.size() == 0) {
            ALOGW("WARNING: Encryption key is not hardware-backed.");
        }
    }
    return true;
!!!43316919.cpp!!!	createOrVerifyAuthenticationKey(in key_name : std::string) : bool
    bool key_exists = doesKeyExist(key_name);
    if (key_exists) {
        bool verified = false;
        if (!verifyAuthenticationKeyAttributes(key_name, &verified)) {
            return false;
        }
        if (!verified) {
            int32_t result = deleteKey(key_name);
            if (result != KM_ERROR_OK) {
                ALOGE("Failed to delete invalid authentication key: %d", result);
                return false;
            }
            key_exists = false;
        }
    }
    if (!key_exists) {
        AuthorizationSetBuilder key_parameters;
        key_parameters.HmacKey(kHMACKeySize)
            .Digest(KM_DIGEST_SHA_2_256)
            .Authorization(keymaster::TAG_MIN_MAC_LENGTH, kHMACOutputSize)
            .Authorization(keymaster::TAG_NO_AUTH_REQUIRED);
        AuthorizationSet hardware_enforced_characteristics;
        AuthorizationSet software_enforced_characteristics;
        int32_t result =
            generateKey(key_name, key_parameters.build(), &hardware_enforced_characteristics,
                        &software_enforced_characteristics);
        if (result != KM_ERROR_OK) {
            ALOGE("Failed to generate authentication key: %d", result);
            return false;
        }
        if (hardware_enforced_characteristics.size() == 0) {
            ALOGW("WARNING: Authentication key is not hardware-backed.");
        }
    }
    return true;
!!!43317047.cpp!!!	verifyEncryptionKeyAttributes(in key_name : std::string, inout verified : bool) : bool
    AuthorizationSet hardware_enforced_characteristics;
    AuthorizationSet software_enforced_characteristics;
    int32_t result = getKeyCharacteristics(key_name, &hardware_enforced_characteristics,
                                           &software_enforced_characteristics);
    if (result != KM_ERROR_OK) {
        ALOGE("Failed to query encryption key: %d", result);
        return false;
    }
    *verified = true;
    keymaster_algorithm_t algorithm = KM_ALGORITHM_RSA;
    if ((!hardware_enforced_characteristics.GetTagValue(keymaster::TAG_ALGORITHM, &algorithm) &&
         !software_enforced_characteristics.GetTagValue(keymaster::TAG_ALGORITHM, &algorithm)) ||
        algorithm != KM_ALGORITHM_AES) {
        ALOGW("Found encryption key with invalid algorithm.");
        *verified = false;
    }
    uint32_t key_size = 0;
    if ((!hardware_enforced_characteristics.GetTagValue(keymaster::TAG_KEY_SIZE, &key_size) &&
         !software_enforced_characteristics.GetTagValue(keymaster::TAG_KEY_SIZE, &key_size)) ||
        key_size != kAESKeySize) {
        ALOGW("Found encryption key with invalid size.");
        *verified = false;
    }
    keymaster_block_mode_t block_mode = KM_MODE_ECB;
    if ((!hardware_enforced_characteristics.GetTagValue(keymaster::TAG_BLOCK_MODE, &block_mode) &&
         !software_enforced_characteristics.GetTagValue(keymaster::TAG_BLOCK_MODE, &block_mode)) ||
        block_mode != KM_MODE_CBC) {
        ALOGW("Found encryption key with invalid block mode.");
        *verified = false;
    }
    keymaster_padding_t padding_mode = KM_PAD_NONE;
    if ((!hardware_enforced_characteristics.GetTagValue(keymaster::TAG_PADDING, &padding_mode) &&
         !software_enforced_characteristics.GetTagValue(keymaster::TAG_PADDING, &padding_mode)) ||
        padding_mode != KM_PAD_PKCS7) {
        ALOGW("Found encryption key with invalid padding mode.");
        *verified = false;
    }
    if (hardware_enforced_characteristics.size() == 0) {
        ALOGW("WARNING: Encryption key is not hardware-backed.");
    }
    return true;
!!!43317175.cpp!!!	verifyAuthenticationKeyAttributes(in key_name : std::string, inout verified : bool) : bool
    AuthorizationSet hardware_enforced_characteristics;
    AuthorizationSet software_enforced_characteristics;
    int32_t result = getKeyCharacteristics(key_name, &hardware_enforced_characteristics,
                                           &software_enforced_characteristics);
    if (result != KM_ERROR_OK) {
        ALOGE("Failed to query authentication key: %d", result);
        return false;
    }
    *verified = true;
    keymaster_algorithm_t algorithm = KM_ALGORITHM_RSA;
    if ((!hardware_enforced_characteristics.GetTagValue(keymaster::TAG_ALGORITHM, &algorithm) &&
         !software_enforced_characteristics.GetTagValue(keymaster::TAG_ALGORITHM, &algorithm)) ||
        algorithm != KM_ALGORITHM_HMAC) {
        ALOGW("Found authentication key with invalid algorithm.");
        *verified = false;
    }
    uint32_t key_size = 0;
    if ((!hardware_enforced_characteristics.GetTagValue(keymaster::TAG_KEY_SIZE, &key_size) &&
         !software_enforced_characteristics.GetTagValue(keymaster::TAG_KEY_SIZE, &key_size)) ||
        key_size != kHMACKeySize) {
        ALOGW("Found authentication key with invalid size.");
        *verified = false;
    }
    uint32_t mac_size = 0;
    if ((!hardware_enforced_characteristics.GetTagValue(keymaster::TAG_MIN_MAC_LENGTH, &mac_size) &&
         !software_enforced_characteristics.GetTagValue(keymaster::TAG_MIN_MAC_LENGTH,
                                                        &mac_size)) ||
        mac_size != kHMACOutputSize) {
        ALOGW("Found authentication key with invalid minimum mac size.");
        *verified = false;
    }
    keymaster_digest_t digest = KM_DIGEST_NONE;
    if ((!hardware_enforced_characteristics.GetTagValue(keymaster::TAG_DIGEST, &digest) &&
         !software_enforced_characteristics.GetTagValue(keymaster::TAG_DIGEST, &digest)) ||
        digest != KM_DIGEST_SHA_2_256) {
        ALOGW("Found authentication key with invalid digest list.");
        *verified = false;
    }
    if (hardware_enforced_characteristics.size() == 0) {
        ALOGW("WARNING: Authentication key is not hardware-backed.");
    }
    return true;
