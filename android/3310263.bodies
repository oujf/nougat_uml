class TypeNamespace
!!!43359799.cpp!!!	Init() : void
  Add(new ByteType());
  Add(new PrimitiveType(
      ValidatableType::KIND_BUILT_IN, kNoPackage, "int",
      "cstdint", "int32_t", "readInt32", "writeInt32",
      "readInt32Vector", "writeInt32Vector"));
  Add(new PrimitiveType(
      ValidatableType::KIND_BUILT_IN, kNoPackage, "long",
      "cstdint", "int64_t", "readInt64", "writeInt64",
      "readInt64Vector", "writeInt64Vector"));
  Add(new PrimitiveType(
      ValidatableType::KIND_BUILT_IN, kNoPackage, "float",
      kNoHeader, "float", "readFloat", "writeFloat",
      "readFloatVector", "writeFloatVector"));
  Add(new PrimitiveType(
      ValidatableType::KIND_BUILT_IN, kNoPackage, "double",
      kNoHeader, "double", "readDouble", "writeDouble",
      "readDoubleVector", "writeDoubleVector"));
  Add(new PrimitiveType(
      ValidatableType::KIND_BUILT_IN, kNoPackage, "boolean",
      kNoHeader, "bool", "readBool", "writeBool",
      "readBoolVector", "writeBoolVector"));
  // C++11 defines the char16_t type as a built in for Unicode characters.
  Add(new PrimitiveType(
      ValidatableType::KIND_BUILT_IN, kNoPackage, "char",
      kNoHeader, "char16_t", "readChar", "writeChar",
      "readCharVector", "writeCharVector"));

  Type* nullable_string_array_type =
      new ArrayType(ValidatableType::KIND_BUILT_IN, "java.lang", "String[]",
                    {"utils/String16.h", "memory", "vector"},
                    "::std::unique_ptr<::std::vector<::std::unique_ptr<::android::String16>>>",
                    "readString16Vector", "writeString16Vector");

  Type* string_array_type = new ArrayType(ValidatableType::KIND_BUILT_IN,
                                          "java.lang", "String[]",
                                          {"utils/String16.h", "vector"},
                                          "::std::vector<::android::String16>",
                                          "readString16Vector",
                                          "writeString16Vector", kNoArrayType,
                                          nullable_string_array_type);

  Type* nullable_string_type =
      new Type(ValidatableType::KIND_BUILT_IN, "java.lang", "String",
               {"memory", "utils/String16.h"}, "::std::unique_ptr<::android::String16>",
               "readString16", "writeString16");

  string_type_ = new Type(ValidatableType::KIND_BUILT_IN, "java.lang", "String",
                          {"utils/String16.h"}, "::android::String16",
                          "readString16", "writeString16",
                          string_array_type, nullable_string_type);
  Add(string_type_);

  using ::android::aidl::kAidlReservedTypePackage;
  using ::android::aidl::kUtf8InCppStringClass;

  // This type is a Utf16 string in the parcel, but deserializes to
  // a std::string in Utf8 format when we use it in C++.
  Type* nullable_cpp_utf8_string_array = new ArrayType(
      ValidatableType::KIND_BUILT_IN,
      kAidlReservedTypePackage, StringPrintf("%s[]", kUtf8InCppStringClass),
      {"memory", "string", "vector"},
      "::std::unique_ptr<::std::vector<::std::unique_ptr<::std::string>>>",
      "readUtf8VectorFromUtf16Vector", "writeUtf8VectorAsUtf16Vector");
  Type* cpp_utf8_string_array = new ArrayType(
      ValidatableType::KIND_BUILT_IN,
      kAidlReservedTypePackage, StringPrintf("%s[]", kUtf8InCppStringClass),
      {"string", "vector"},
      "::std::vector<::std::string>",
      "readUtf8VectorFromUtf16Vector", "writeUtf8VectorAsUtf16Vector",
      kNoArrayType, nullable_cpp_utf8_string_array);
  Type* nullable_cpp_utf8_string_type = new Type(
      ValidatableType::KIND_BUILT_IN,
      kAidlReservedTypePackage, kUtf8InCppStringClass,
      {"string", "memory"}, "::std::unique_ptr<::std::string>",
      "readUtf8FromUtf16", "writeUtf8AsUtf16");
  Add(new Type(
      ValidatableType::KIND_BUILT_IN,
      kAidlReservedTypePackage, kUtf8InCppStringClass,
      {"string"}, "::std::string", "readUtf8FromUtf16", "writeUtf8AsUtf16",
      cpp_utf8_string_array, nullable_cpp_utf8_string_type));

  ibinder_type_ = new Type(ValidatableType::KIND_BUILT_IN, "android.os",
                           "IBinder", {"binder/IBinder.h"},
                           "::android::sp<::android::IBinder>", "readStrongBinder",
                           "writeStrongBinder");
  Add(ibinder_type_);

  Add(new BinderListType());
  Add(new StringListType());
  Add(new Utf8InCppStringListType());

  Type* fd_vector_type = new ArrayType(
      ValidatableType::KIND_BUILT_IN, kNoPackage, "FileDescriptor[]",
      {"nativehelper/ScopedFd.h", "vector"}, "::std::vector<::ScopedFd>",
      "readUniqueFileDescriptorVector", "writeUniqueFileDescriptorVector");

  Add(new Type(
      ValidatableType::KIND_BUILT_IN, kNoPackage, "FileDescriptor",
      {"nativehelper/ScopedFd.h"}, "::ScopedFd",
      "readUniqueFileDescriptor", "writeUniqueFileDescriptor",
      fd_vector_type));

  void_type_ = new class VoidType();
  Add(void_type_);
!!!43360183.cpp!!!	AddListType(in type_name : std::string) : bool
  const Type* contained_type = FindTypeByCanonicalName(type_name);
  if (!contained_type) {
    LOG(ERROR) << "Cannot create List<" << type_name << "> because contained "
                  "type cannot be found or is invalid.";
    return false;
  }
  if (contained_type->IsCppPrimitive()) {
    LOG(ERROR) << "Cannot create List<" << type_name << "> because contained "
                  "type is a primitive in Java and Java List cannot hold "
                  "primitives.";
    return false;
  }

  if (contained_type->CanonicalName() == kStringCanonicalName ||
      contained_type->CanonicalName() == kUtf8InCppStringCanonicalName ||
      contained_type == IBinderType()) {
    return true;
  }

  // TODO Support lists of parcelables b/23600712

  LOG(ERROR) << "aidl-cpp does not yet support List<" << type_name << ">";
  return false;
!!!43360311.cpp!!!	AddMapType(in key_type_name : std::string, in value_type_name : std::string) : bool
  // TODO Support list types b/25242025
  LOG(ERROR) << "aidl does not implement support for typed maps!";
  return false;
!!!43360567.cpp!!!	GetArgType(in a : AidlArgument, in arg_index : int, in filename : std::string) : ValidatableType
  const string error_prefix = StringPrintf(
      "In file %s line %d parameter %s (%d):\n    ",
      filename.c_str(), a.GetLine(), a.GetName().c_str(), arg_index);

  // check that the name doesn't match a keyword
  if (is_cpp_keyword(a.GetName().c_str())) {
    cerr << error_prefix << "Argument name is a C++ keyword"
         << endl;
    return nullptr;
  }

  return ::android::aidl::TypeNamespace::GetArgType(a, arg_index, filename);
