class JavaTypeNamespace
!!!43378103.cpp!!!	Init() : void
  Add(new BasicType(this, "void", "XXX", "XXX", "XXX", "XXX", "XXX"));

  m_bool_type = new BooleanType(this);
  Add(m_bool_type);

  Add(new BasicType(this, "byte", "writeByte", "readByte", "writeByteArray",
                    "createByteArray", "readByteArray"));

  Add(new CharType(this));

  m_int_type = new BasicType(this, "int", "writeInt", "readInt",
                             "writeIntArray", "createIntArray", "readIntArray");
  Add(m_int_type);

  Add(new BasicType(this, "long", "writeLong", "readLong", "writeLongArray",
                    "createLongArray", "readLongArray"));

  Add(new BasicType(this, "float", "writeFloat", "readFloat", "writeFloatArray",
                    "createFloatArray", "readFloatArray"));

  Add(new BasicType(this, "double", "writeDouble", "readDouble",
                    "writeDoubleArray", "createDoubleArray",
                    "readDoubleArray"));

  m_string_type = new class StringType(this, "java.lang", "String");
  Add(m_string_type);
  Add(new class StringType(this, ::android::aidl::kAidlReservedTypePackage,
                           ::android::aidl::kUtf8InCppStringClass));

  Add(new Type(this, "java.lang", "Object", ValidatableType::KIND_BUILT_IN,
               false, false));

  Add(new FileDescriptorType(this));

  Add(new CharSequenceType(this));

  Add(new MapType(this));

  Add(new ListType(this));

  m_text_utils_type =
      new Type(this, "android.text", "TextUtils",
               ValidatableType::KIND_BUILT_IN, false, false);
  Add(m_text_utils_type);

  m_remote_exception_type = new class RemoteExceptionType(this);
  Add(m_remote_exception_type);

  m_runtime_exception_type = new class RuntimeExceptionType(this);
  Add(m_runtime_exception_type);

  m_ibinder_type = new class IBinderType(this);
  Add(m_ibinder_type);

  m_iinterface_type = new class IInterfaceType(this);
  Add(m_iinterface_type);

  m_binder_native_type = new class BinderType(this);
  Add(m_binder_native_type);

  m_binder_proxy_type = new class BinderProxyType(this);
  Add(m_binder_proxy_type);

  m_parcel_type = new class ParcelType(this);
  Add(m_parcel_type);

  m_parcelable_interface_type = new class ParcelableInterfaceType(this);
  Add(m_parcelable_interface_type);

  m_context_type = new class Type(this, "android.content", "Context",
                                  ValidatableType::KIND_BUILT_IN, false, false);
  Add(m_context_type);

  m_classloader_type = new class ClassLoaderType(this);
  Add(m_classloader_type);

  NULL_VALUE = new LiteralExpression("null");
  THIS_VALUE = new LiteralExpression("this");
  SUPER_VALUE = new LiteralExpression("super");
  TRUE_VALUE = new LiteralExpression("true");
  FALSE_VALUE = new LiteralExpression("false");
!!!43378231.cpp!!!	AddParcelableType(in p : AidlParcelable, in filename : std::string) : bool
  Type* type =
      new UserDataType(this, p.GetPackage(), p.GetName(), false,
                       true, filename, p.GetLine());
  return Add(type);
!!!43378359.cpp!!!	AddBinderType(in b : AidlInterface, in filename : std::string) : bool
  // for interfaces, add the stub, proxy, and interface types.
  Type* stub = new Type(this, b.GetPackage(),
                        b.GetName() + ".Stub", ValidatableType::KIND_GENERATED,
                        false, false, filename, b.GetLine());
  Type* proxy = new Type(this, b.GetPackage(),
                         b.GetName() + ".Stub.Proxy",
                         ValidatableType::KIND_GENERATED,
                         false, false, filename, b.GetLine());
  Type* type =
      new InterfaceType(this, b.GetPackage(), b.GetName(), false,
                        b.IsOneway(), filename, b.GetLine(), stub, proxy);

  bool success = true;
  success &= Add(type);
  success &= Add(stub);
  success &= Add(proxy);
  return success;
!!!43378487.cpp!!!	AddListType(in contained_type_name : std::string) : bool
  const Type* contained_type = FindTypeByCanonicalName(contained_type_name);
  if (!contained_type) {
    return false;
  }
  Add(new GenericListType(this, contained_type));
  return true;
