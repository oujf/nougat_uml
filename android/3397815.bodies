class VolumeBase
!!!43716791.cpp!!!	~VolumeBase()
    CHECK(!mCreated);
!!!43718071.cpp!!!	setDiskId(in diskId : std::string) : status_t
    if (mCreated) {
        LOG(WARNING) << getId() << " diskId change requires destroyed";
        return -EBUSY;
    }

    mDiskId = diskId;
    return OK;
!!!43718199.cpp!!!	setPartGuid(in partGuid : std::string) : status_t
    if (mCreated) {
        LOG(WARNING) << getId() << " partGuid change requires destroyed";
        return -EBUSY;
    }

    mPartGuid = partGuid;
    return OK;
!!!43718327.cpp!!!	setMountFlags(in mountFlags : int) : status_t
    if ((mState != State::kUnmounted) && (mState != State::kUnmountable)) {
        LOG(WARNING) << getId() << " flags change requires state unmounted or unmountable";
        return -EBUSY;
    }

    mMountFlags = mountFlags;
    return OK;
!!!43718455.cpp!!!	setMountUserId(in mountUserId : userid_t) : status_t
    if ((mState != State::kUnmounted) && (mState != State::kUnmountable)) {
        LOG(WARNING) << getId() << " user change requires state unmounted or unmountable";
        return -EBUSY;
    }

    mMountUserId = mountUserId;
    return OK;
!!!43718583.cpp!!!	setSilent(in silent : bool) : status_t
    if (mCreated) {
        LOG(WARNING) << getId() << " silence change requires destroyed";
        return -EBUSY;
    }

    mSilent = silent;
    return OK;
!!!43718711.cpp!!!	addVolume(in volume : std::shared_ptr<VolumeBase>) : void
    mVolumes.push_back(volume);
!!!43718839.cpp!!!	removeVolume(in volume : std::shared_ptr<VolumeBase>) : void
    mVolumes.remove(volume);
!!!43718967.cpp!!!	findVolume(in id : std::string) : std::shared_ptr<VolumeBase>
    for (auto vol : mVolumes) {
        if (vol->getId() == id) {
            return vol;
        }
    }
    return nullptr;
!!!43719095.cpp!!!	create() : status_t
    CHECK(!mCreated);

    mCreated = true;
    status_t res = doCreate();
    notifyEvent(ResponseCode::VolumeCreated,
            StringPrintf("%d \"%s\" \"%s\"", mType, mDiskId.c_str(), mPartGuid.c_str()));
    setState(State::kUnmounted);
    return res;
!!!43719223.cpp!!!	destroy() : status_t
    CHECK(mCreated);

    if (mState == State::kMounted) {
        unmount();
        setState(State::kBadRemoval);
    } else {
        setState(State::kRemoved);
    }

    notifyEvent(ResponseCode::VolumeDestroyed);
    status_t res = doDestroy();
    mCreated = false;
    return res;
!!!43719351.cpp!!!	mount() : status_t
    if ((mState != State::kUnmounted) && (mState != State::kUnmountable)) {
        LOG(WARNING) << getId() << " mount requires state unmounted or unmountable";
        return -EBUSY;
    }

    setState(State::kChecking);
    status_t res = doMount();
    if (res == OK) {
        setState(State::kMounted);
    } else {
        setState(State::kUnmountable);
    }

    return res;
!!!43719479.cpp!!!	unmount() : status_t
    if (mState != State::kMounted) {
        LOG(WARNING) << getId() << " unmount requires state mounted";
        return -EBUSY;
    }

    setState(State::kEjecting);
    for (auto vol : mVolumes) {
        if (vol->destroy()) {
            LOG(WARNING) << getId() << " failed to destroy " << vol->getId()
                    << " stacked above";
        }
    }
    mVolumes.clear();

    status_t res = doUnmount();
    setState(State::kUnmounted);
    return res;
!!!43719607.cpp!!!	format(in fsType : std::string) : status_t
    if (mState == State::kMounted) {
        unmount();
    }

    if ((mState != State::kUnmounted) && (mState != State::kUnmountable)) {
        LOG(WARNING) << getId() << " format requires state unmounted or unmountable";
        return -EBUSY;
    }

    setState(State::kFormatting);
    status_t res = doFormat(fsType);
    setState(State::kUnmounted);
    return res;
!!!43719863.cpp!!!	doCreate() : status_t
    return OK;
!!!43719991.cpp!!!	doDestroy() : status_t
    return OK;
!!!43720375.cpp!!!	doFormat(in fsType : std::string) : status_t
    return -ENOTSUP;
!!!43720503.cpp!!!	setId(in id : std::string) : status_t
    if (mCreated) {
        LOG(WARNING) << getId() << " id change requires not created";
        return -EBUSY;
    }

    mId = id;
    return OK;
!!!43720631.cpp!!!	setPath(in path : std::string) : status_t
    if (mState != State::kChecking) {
        LOG(WARNING) << getId() << " path change requires state checking";
        return -EBUSY;
    }

    mPath = path;
    notifyEvent(ResponseCode::VolumePathChanged, mPath);
    return OK;
!!!43720759.cpp!!!	setInternalPath(in internalPath : std::string) : status_t
    if (mState != State::kChecking) {
        LOG(WARNING) << getId() << " internal path change requires state checking";
        return -EBUSY;
    }

    mInternalPath = internalPath;
    notifyEvent(ResponseCode::VolumeInternalPathChanged, mInternalPath);
    return OK;
!!!43720887.cpp!!!	notifyEvent(in event : int) : void
    if (mSilent) return;
    VolumeManager::Instance()->getBroadcaster()->sendBroadcast(event,
            getId().c_str(), false);
!!!43721015.cpp!!!	notifyEvent(in event : int, in value : std::string) : void
    if (mSilent) return;
    VolumeManager::Instance()->getBroadcaster()->sendBroadcast(event,
            StringPrintf("%s %s", getId().c_str(), value.c_str()).c_str(), false);
!!!43721143.cpp!!!	setState(in state : VolumeBase::State) : void
    mState = state;
    notifyEvent(ResponseCode::VolumeStateChanged, StringPrintf("%d", mState));
