class MoveTask
!!!43711415.cpp!!!	start() : void
    mThread = std::thread(&MoveTask::run, this);
!!!43711543.cpp!!!	run() : void
    acquire_wake_lock(PARTIAL_WAKE_LOCK, kWakeLock);

    std::string fromPath;
    std::string toPath;

    // TODO: add support for public volumes
    if (mFrom->getType() != VolumeBase::Type::kEmulated) goto fail;
    if (mTo->getType() != VolumeBase::Type::kEmulated) goto fail;

    // Step 1: tear down volumes and mount silently without making
    // visible to userspace apps
    bringOffline(mFrom);
    bringOffline(mTo);

    fromPath = mFrom->getInternalPath();
    toPath = mTo->getInternalPath();

    // Step 2: clean up any stale data
    if (execRm(toPath, 10, 10) != OK) {
        goto fail;
    }

    // Step 3: perform actual copy
    if (execCp(fromPath, toPath, 20, 60) != OK) {
        goto fail;
    }

    // NOTE: MountService watches for this magic value to know
    // that move was successful
    notifyProgress(82);
    bringOnline(mFrom);
    bringOnline(mTo);

    // Step 4: clean up old data
    if (execRm(fromPath, 85, 15) != OK) {
        goto fail;
    }

    notifyProgress(kMoveSucceeded);
    release_wake_lock(kWakeLock);
    return;
fail:
    bringOnline(mFrom);
    bringOnline(mTo);
    notifyProgress(kMoveFailedInternalError);
    release_wake_lock(kWakeLock);
    return;
