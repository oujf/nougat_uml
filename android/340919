format 213
"fastboot" // android::system::core::fastboot
  revision 1
  modified_by 55 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "D:/Workspace/AndroidSourceCode/nougat_src/system/core/fastboot/"
  cpp_src_dir "D:/Workspace/AndroidSourceCode/nougat_src/system/core/fastboot/"
  classview 311991 "fastboot"
    
    classdiagramsettings member_max_width 0 end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 3087543 "Socket"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Socket interface to be implemented for each platform."
      class 3087671 "Protocol"
	visibility package stereotype "enum_class"
	cpp_decl "${comment}enum class ${name} {
${items}};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 11685431 "kTcp"
	  public type class_ref 3087671 // Protocol
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 11685559 "kUdp"
	  public type class_ref 3087671 // Protocol
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      operation 42658103 "GetErrorMessage"
	class_operation preserve_cpp_body_indent public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the socket error message. This must be called immediately after a socket failure
 before any other system calls are made."
      end

      operation 42658231 "NewClient"
	class_operation preserve_cpp_body_indent public explicit_return_type "std::unique_ptr<Socket>"
	nparams 4
	  param in name "protocol" type class_ref 3087671 // Protocol
	  param in name "host" explicit_type "std::string"
	  param in name "port" explicit_type "int"
	  param inout name "error" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} ${p2}, ${t3} * ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Creates a new client connection. Clients are connected to a specific hostname/port and can
 only send to that destination.
 On failure, |error| is filled (if non-null) and nullptr is returned."
      end

      operation 42658359 "NewServer"
	class_operation preserve_cpp_body_indent public explicit_return_type "std::unique_ptr<Socket>"
	nparams 2
	  param in name "protocol" type class_ref 3087671 // Protocol
	  param in name "port" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// This functionality is currently only used by tests so we don't need any error messages.

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Creates a new server bound to local |port|. This is only meant for testing, during normal
 fastboot operation the device acts as the server.
 A UDP server saves sender addresses in Receive(), and uses the most recent address during
 calls to Send()."
      end

      operation 42658487 "~Socket"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment " Destructor closes the socket if it's open."
      end

      operation 42658615 "Send"
	abstract cpp_virtual public explicit_return_type "bool"
	nparams 2
	  param in name "data" explicit_type "void"
	  param in name "length" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sends |length| bytes of |data|. For TCP sockets this will continue trying to send until all
 bytes are transmitted. Returns true on success."
      end

      operation 42658743 "Send"
	abstract cpp_virtual public explicit_return_type "bool"
	nparams 1
	  param in name "buffers" explicit_type "std::vector<cutils_socket_buffer_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sends |buffers| using multi-buffer write, which can be significantly faster than making
 multiple calls. For UDP sockets |buffers| are all combined into a single datagram; for
 TCP sockets this will continue sending until all buffers are fully transmitted. Returns true
 on success.

 Note: This is non-functional for UDP server Sockets because it's not currently needed and
 would require an additional sendto() variation of multi-buffer write."
      end

      operation 42658871 "Receive"
	abstract cpp_virtual public explicit_return_type "ssize_t"
	nparams 3
	  param inout name "data" explicit_type "void"
	  param in name "length" explicit_type "size_t"
	  param in name "timeout_ms" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Waits up to |timeout_ms| to receive up to |length| bytes of data. |timout_ms| of 0 will
 block forever. Returns the number of bytes received or -1 on error/timeout; see
 ReceiveTimedOut() to distinguish between the two."
      end

      operation 42658999 "ReceiveAll"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "ssize_t"
	nparams 3
	  param inout name "data" explicit_type "void"
	  param in name "length" explicit_type "size_t"
	  param in name "timeout_ms" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Calls Receive() until exactly |length| bytes have been received or an error occurs."
      end

      operation 42659127 "ReceiveTimedOut"
	cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return receive_timed_out_; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns true if the last Receive() call timed out normally and can be retried; fatal errors
 or successful reads will return false."
      end

      operation 42659255 "Close"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Closes the socket. Returns 0 on success, -1 on error."
      end

      operation 42659383 "Accept"
	cpp_virtual cpp_inline public explicit_return_type "std::unique_ptr<Socket>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return nullptr; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Accepts an incoming TCP connection. No effect for UDP sockets. Returns a new Socket
 connected to the client on success, nullptr on failure."
      end

      operation 42659511 "GetLocalPort"
	preserve_cpp_body_indent public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the local port the Socket is bound to or -1 on error."
      end

      operation 42659639 "Socket"
	preserve_cpp_body_indent protected explicit_return_type ""
	nparams 1
	  param in name "sock" type class_ref 3087799 // cutils_socket_t
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)} : sock_(sock) ${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Protected constructor to force factory function use."
      end

      operation 42659767 "WaitForRecv"
	preserve_cpp_body_indent protected explicit_return_type "bool"
	nparams 1
	  param in name "timeout_ms" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// According to Windows setsockopt() documentation, if a Windows socket times out during send() or
// recv() the state is indeterminate and should not be used. Our UDP protocol relies on being able
// to re-send after a timeout, so we must use select() rather than SO_RCVTIMEO.
// See https://msdn.microsoft.com/en-us/library/windows/desktop/ms740476(v=vs.85).aspx.

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Blocks up to |timeout_ms| until a read is possible on |sock_|, and sets |receive_timed_out_|
 as appropriate to help distinguish between normal timeouts and fatal errors. Returns true if
 a subsequent recv() on |sock_| will complete without blocking or if |timeout_ms| <= 0."
      end

      classrelation 6482103 // sock_ (<directional composition>)
	relation 6482103 *-->
	  a role_name "sock_" init_value "=  INVALID_SOCKET" protected
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6482103 // sock_ (<directional composition>)
	  b parent class_ref 3087799 // cutils_socket_t
      end

      attribute 11685687 "receive_timed_out_"
	protected explicit_type "bool"
	init_value "=  false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 6482231 // socket_send_buffers_function_ (<unidirectional association>)
	relation 6482231 --->
	  stereotype "std::function"
	  a role_name "socket_send_buffers_function_" init_value "=  &socket_send_buffers" protected
	    comment " Non-class functions we want to override during tests to verify functionality. Implementation
 should call this rather than using socket_send_buffers() directly.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<ssize_t(cutils_socket_t,${type}*,size_t)> ${name}${h_value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6482231 // socket_send_buffers_function_ (<unidirectional association>)
	  b parent class_ref 3087927 // cutils_socket_buffer_t
      end
    end

    class 3088055 "SocketMock"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " A mock Socket implementation to be used for testing. Tests can set expectations for messages
 to be sent and provide messages to be received in order to verify protocol behavior.

 Example: testing sending \"foo\" and receiving \"bar\".
   SocketMock mock;
   mock.ExpectSend(\"foo\");
   mock.AddReceive(\"bar\");
   EXPECT_TRUE(DoFooBar(&mock));

 Example: testing sending \"foo\" and expecting \"bar\", but receiving \"baz\" instead.
   SocketMock mock;
   mock.ExpectSend(\"foo\");
   mock.AddReceive(\"baz\");
   EXPECT_FALSE(DoFooBar(&mock));"
      classrelation 6482359 // <generalisation>
	relation 6482359 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6482359 // <generalisation>
	  b parent class_ref 3087543 // Socket
      end

      operation 42659895 "SocketMock"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)} : Socket(INVALID_SOCKET) ${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 42660023 "~SocketMock"
	preserve_cpp_body_indent cpp_override public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 42660151 "Send"
	preserve_cpp_body_indent cpp_override public explicit_return_type "bool"
	nparams 2
	  param in name "data" explicit_type "void"
	  param in name "length" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 42660279 "Send"
	preserve_cpp_body_indent cpp_override public explicit_return_type "bool"
	nparams 1
	  param in name "buffers" explicit_type "std::vector<cutils_socket_buffer_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// Mock out multi-buffer send to be one large send, since that's what it should looks like from
// the user's perspective.

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 42660407 "Receive"
	preserve_cpp_body_indent cpp_override public explicit_return_type "ssize_t"
	nparams 3
	  param inout name "data" explicit_type "void"
	  param in name "length" explicit_type "size_t"
	  param in name "timeout_ms" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 42660535 "Close"
	preserve_cpp_body_indent cpp_override public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 42660663 "Accept"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "std::unique_ptr<Socket>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 42660791 "ExpectSend"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "message" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Adds an expectation for Send()."
      end

      operation 42660919 "ExpectSendFailure"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "message" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Adds an expectation for Send() that returns false."
      end

      operation 42661047 "AddReceive"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "message" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Adds data to provide for Receive()."
      end

      operation 42661175 "AddReceiveTimeout"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Adds a Receive() timeout after which ReceiveTimedOut() will return true."
      end

      operation 42661303 "AddReceiveFailure"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Adds a Receive() failure after which ReceiveTimedOut() will return false."
      end

      operation 42661431 "AddAccept"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "sock" explicit_type "std::unique_ptr<Socket>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Adds a Socket to return from Accept()."
      end

      class 3088183 "EventType"
	visibility package stereotype "enum_class"
	cpp_decl "${comment}enum class ${name} {
${items}};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 11685815 "kSend"
	  public type class_ref 3088183 // EventType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 11685943 "kReceive"
	  public type class_ref 3088183 // EventType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 11686071 "kAccept"
	  public type class_ref 3088183 // EventType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      class 3088311 "Event"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 42661559 "Event"
	  preserve_cpp_body_indent public explicit_return_type ""
	  nparams 4
	    param in name "_type" type class_ref 3088183 // EventType
	    param in name "_message" explicit_type "std::string"
	    param in name "_status" explicit_type "ssize_t"
	    param in name "_sock" explicit_type "std::unique_ptr<Socket>"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}
        : type(_type), message(_message), status(_status), sock(std::move(_sock)) ${throw}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	classrelation 6482487 // type (<directional composition>)
	  relation 6482487 *-->
	    a role_name "type" public
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 6482487 // type (<directional composition>)
	    b parent class_ref 3088183 // EventType
	end

	attribute 11686199 "message"
	  public explicit_type "std::string"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 11686327 "status"
	  public explicit_type "bool"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Return value for Send() or timeout status for Receive()."
	end

	classrelation 6482615 // sock (<directional composition>)
	  relation 6482615 *-->
	    stereotype "std::unique_ptr"
	    a role_name "sock" public
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 6482615 // sock (<directional composition>)
	    b parent class_ref 3087543 // Socket
	end
      end

      classrelation 6482743 // events_ (<directional composition>)
	relation 6482743 *-->
	  stereotype "std::queue"
	  a role_name "events_" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6482743 // events_ (<directional composition>)
	  b parent class_ref 3088311 // Event
      end
    end

    class 3088439 "Transport"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " General interface to allow the fastboot protocol to be used over different
 types of transports."
      operation 42661687 "Transport"
	cpp_defaulted public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 42661815 "~Transport"
	cpp_virtual cpp_defaulted public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 42661943 "Read"
	abstract cpp_virtual public explicit_return_type "ssize_t"
	nparams 2
	  param inout name "data" explicit_type "void"
	  param in name "len" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Reads |len| bytes into |data|. Returns the number of bytes actually
 read or -1 on error."
      end

      operation 42662071 "Write"
	abstract cpp_virtual public explicit_return_type "ssize_t"
	nparams 2
	  param in name "data" explicit_type "void"
	  param in name "len" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Writes |len| bytes from |data|. Returns the number of bytes actually
 written or -1 on error."
      end

      operation 42662199 "Close"
	abstract cpp_virtual public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Closes the underlying transport. Returns 0 on success."
      end

      operation 42662327 "WaitForDisconnect"
	cpp_virtual cpp_inline public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return 0; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Blocks until the transport disconnects. Transports that don't support
 this will return immediately. Returns 0 on success."
      end
    end

    class 3088823 "usb_ifc_info"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 11687223 "dev_vendor"
	public explicit_type "ushort"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " from device descriptor 
"
      end

      attribute 11687351 "dev_product"
	public explicit_type "ushort"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 11687479 "dev_class"
	public explicit_type "byte"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 11687607 "dev_subclass"
	public explicit_type "byte"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 11687735 "dev_protocol"
	public explicit_type "byte"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 11687863 "ifc_class"
	public explicit_type "byte"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 11687991 "ifc_subclass"
	public explicit_type "byte"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 11688119 "ifc_protocol"
	public explicit_type "byte"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 11688247 "has_bulk_in"
	public explicit_type "byte"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 11688375 "has_bulk_out"
	public explicit_type "byte"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 11688503 "writable"
	public explicit_type "byte"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 11688631 "serial_number"
	public explicit_type "char"
	multiplicity "[256]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 11688759 "device_path"
	public explicit_type "char"
	multiplicity "[256]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3088951 "ifc_match_func"
      visibility package stereotype "typedef" explicit_base_type "int"
      cpp_decl "${comment}typedef ${type}(* ${name})(usb_ifc_info *ifc);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 3421239 "fb_buffer_type"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 12480055 "FB_BUFFER"
	public type class_ref 3421239 // fb_buffer_type
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12480183 "FB_BUFFER_SPARSE"
	public type class_ref 3421239 // fb_buffer_type
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3421367 "fastboot_buffer"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 6860343 // type (<directional composition>)
	relation 6860343 *-->
	  a role_name "type" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}enum ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6860343 // type (<directional composition>)
	  b parent class_ref 3421239 // fb_buffer_type
      end

      attribute 12480311 "data"
	public explicit_type "void"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12480439 "sz"
	public explicit_type "int64_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3421495 "UdpSocket"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Implements the Socket interface for UDP."
      classrelation 6860471 // <generalisation>
	relation 6860471 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6860471 // <generalisation>
	  b parent class_ref 3087543 // Socket
      end

      class 3421623 "Type"
	visibility package stereotype "enum_class"
	cpp_decl "${comment}enum class ${name} {
${items}};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 12480567 "kClient"
	  public type class_ref 3421623 // Type
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 12480695 "kServer"
	  public type class_ref 3421623 // Type
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      operation 43773879 "UdpSocket"
	preserve_cpp_body_indent cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "type" type class_ref 3421623 // Type
	  param in name "sock" type class_ref 3087799 // cutils_socket_t
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)} : Socket(sock) ${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43774007 "Send"
	preserve_cpp_body_indent cpp_override cpp_inline public explicit_return_type "bool"
	nparams 2
	  param in name "data" explicit_type "void"
	  param in name "length" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43774135 "Send"
	preserve_cpp_body_indent cpp_override cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "buffers" explicit_type "std::vector<cutils_socket_buffer_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43774263 "Receive"
	preserve_cpp_body_indent cpp_override cpp_inline public explicit_return_type "ssize_t"
	nparams 3
	  param inout name "data" explicit_type "void"
	  param in name "length" explicit_type "size_t"
	  param in name "timeout_ms" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 12480823 "addr_"
	private explicit_type "sockaddr_storage"
	stereotype "std::unique_ptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 6860599 // addr_size_ (<directional composition>)
	relation 6860599 *-->
	  a role_name "addr_size_" init_value "=  0" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6860599 // addr_size_ (<directional composition>)
	  b parent class_ref 3097271 // socklen_t
      end
    end

    class 3421751 "TcpSocket"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Implements the Socket interface for TCP."
      classrelation 6860727 // <generalisation>
	relation 6860727 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6860727 // <generalisation>
	  b parent class_ref 3087543 // Socket
      end

      operation 43774391 "TcpSocket"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "sock" type class_ref 3087799 // cutils_socket_t
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract} : Socket(sock) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43774519 "Send"
	preserve_cpp_body_indent cpp_override cpp_inline public explicit_return_type "bool"
	nparams 2
	  param in name "data" explicit_type "void"
	  param in name "length" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43774647 "Send"
	preserve_cpp_body_indent cpp_override cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "buffers" explicit_type "std::vector<cutils_socket_buffer_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43774775 "Receive"
	preserve_cpp_body_indent cpp_override cpp_inline public explicit_return_type "ssize_t"
	nparams 3
	  param inout name "data" explicit_type "void"
	  param in name "length" explicit_type "size_t"
	  param in name "timeout_ms" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43774903 "Accept"
	preserve_cpp_body_indent cpp_override cpp_inline public explicit_return_type "std::unique_ptr<Socket>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 3422007 "TcpTest"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Fixture to configure a SocketMock for a successful TCP connection."
      classrelation 6861111 // <generalisation>
	relation 6861111 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6861111 // <generalisation>
	  b parent class_ref 3422135 // typedef225
      end

      operation 43775927 "SetUp"
	cpp_override cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        mock_ = new SocketMock;
        mock_->ExpectSend(\"FB01\");
        mock_->AddReceive(\"FB01\");

        std::string error;
        transport_ = tcp::internal::Connect(std::unique_ptr<Socket>(mock_), &error);
        ASSERT_NE(nullptr, transport_);
        ASSERT_EQ(\"\", error);
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43776055 "Write"
	cpp_inline protected explicit_return_type "bool"
	nparams 1
	  param in name "message" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return transport_->Write(message.data(), message.length()) ==
               static_cast<ssize_t>(message.length());
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Writes |message| to |transport_|, returns true on success."
      end

      operation 43776183 "Read"
	cpp_inline protected explicit_return_type "bool"
	nparams 1
	  param in name "message" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        std::string buffer(message.length(), '\\0');
        return transport_->Read(&buffer[0], buffer.length()) ==
                       static_cast<ssize_t>(message.length()) &&
               buffer == message;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Reads from |transport_|, returns true if it matches |message|."
      end

      classrelation 6861239 // mock_ (<unidirectional association>)
	relation 6861239 --->
	  a role_name "mock_" init_value "=  nullptr" protected
	    comment " Use a raw SocketMock* here because we pass ownership to the Transport object, but we still
 need access to configure mock expectations.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${h_value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6861239 // mock_ (<unidirectional association>)
	  b parent class_ref 3088055 // SocketMock
      end

      classrelation 6861367 // transport_ (<directional composition>)
	relation 6861367 *-->
	  stereotype "std::unique_ptr"
	  a role_name "transport_" protected
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6861367 // transport_ (<directional composition>)
	  b parent class_ref 3088439 // Transport
      end
    end

    class 3422135 "typedef225"
      visibility package stereotype "typedef" explicit_base_type "::testing::Test"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 3422647 "UdpConnectTest"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Fixture class to test protocol initialization. Usage is to set up the expected calls to the
 SocketMock object then call UdpConnect() and check the result."
      classrelation 6861751 // <generalisation>
	relation 6861751 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6861751 // <generalisation>
	  b parent class_ref 3422135 // typedef225
      end

      operation 43778231 "UdpConnectTest"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : mock_socket_(new SocketMock) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43778359 "UdpConnect"
	cpp_inline public explicit_return_type "bool"
	nparams 1
	  param inout name "error" explicit_type "std::string"
	    defaultvalue "nullptr"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        std::string local_error;
        if (error == nullptr) {
            error = &local_error;
        }
        std::unique_ptr<Transport> transport(Connect(std::move(mock_socket_), error));
        mock_socket_.reset(new SocketMock);
        return transport != nullptr && error->empty();
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Run the initialization, return whether it was successful or not. This passes ownership of
 the current |mock_socket_| but allocates a new one for re-use."
      end

      classrelation 6861879 // mock_socket_ (<directional composition>)
	relation 6861879 *-->
	  stereotype "std::unique_ptr"
	  a role_name "mock_socket_" protected
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6861879 // mock_socket_ (<directional composition>)
	  b parent class_ref 3088055 // SocketMock
      end
    end

    class 3422775 "UdpTest"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Fixture class to test UDP Transport read/write functionality."
      classrelation 6862007 // <generalisation>
	relation 6862007 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6862007 // <generalisation>
	  b parent class_ref 3422135 // typedef225
      end

      operation 43778487 "SetUp"
	cpp_override cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        // Create |transport_| starting at sequence 0 with 512 byte max packet size. Tests can call
        // InitializeTransport() again to change settings.
        ASSERT_TRUE(InitializeTransport(0, 512));
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43778615 "InitializeTransport"
	cpp_inline public explicit_return_type "bool"
	nparams 2
	  param in name "starting_sequence" explicit_type "uint16_t"
	  param in name "device_max_packet_size" explicit_type "int"
	    defaultvalue "512"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        mock_socket_ = new SocketMock;
        mock_socket_->ExpectSend(QueryPacket(0));
        mock_socket_->AddReceive(QueryPacket(0, starting_sequence));
        mock_socket_->ExpectSend(
                InitPacket(starting_sequence, kProtocolVersion, kHostMaxPacketSize));
        mock_socket_->AddReceive(
                InitPacket(starting_sequence, kProtocolVersion, device_max_packet_size));

        std::string error;
        transport_ = Connect(std::unique_ptr<Socket>(mock_socket_), &error);
        return transport_ != nullptr && error.empty();
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sets up |mock_socket_| to correctly initialize the protocol and creates |transport_|. This
 can be called multiple times in a test if needed."
      end

      operation 43778743 "Write"
	cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "message" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return transport_->Write(message.data(), message.length()) ==
                static_cast<ssize_t>(message.length());
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Writes |message| to |transport_|, returns true on success."
      end

      operation 43778871 "Read"
	cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "message" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        std::string buffer(message.length(), '\\0');
        return transport_->Read(&buffer[0], buffer.length()) ==
                static_cast<ssize_t>(message.length()) && buffer == message;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Reads from |transport_|, returns true if it matches |message|."
      end

      classrelation 6862135 // mock_socket_ (<unidirectional association>)
	relation 6862135 --->
	  a role_name "mock_socket_" init_value "=  nullptr" protected
	    comment " |mock_socket_| is a raw pointer here because we transfer ownership to |transport_| but we
 need to retain a pointer to set send and receive expectations.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${h_value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6862135 // mock_socket_ (<unidirectional association>)
	  b parent class_ref 3088055 // SocketMock
      end

      classrelation 6862263 // transport_ (<directional composition>)
	relation 6862263 *-->
	  stereotype "std::unique_ptr"
	  a role_name "transport_" protected
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6862263 // transport_ (<directional composition>)
	  b parent class_ref 3088439 // Transport
      end
    end

    class 3422903 "LinuxUsbTransport"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 6862391 // <generalisation>
	relation 6862391 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6862391 // <generalisation>
	  b parent class_ref 3088439 // Transport
      end

      operation 43778999 "LinuxUsbTransport"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "handle" explicit_type "std::unique_ptr<usb_handle>"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract} : handle_(std::move(handle)) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43779127 "~LinuxUsbTransport"
	cpp_override cpp_defaulted public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 43779255 "Read"
	preserve_cpp_body_indent cpp_override cpp_inline public explicit_return_type "ssize_t"
	nparams 2
	  param inout name "_data" explicit_type "void"
	  param in name "len" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43779383 "Write"
	preserve_cpp_body_indent cpp_override cpp_inline public explicit_return_type "ssize_t"
	nparams 2
	  param in name "_data" explicit_type "void"
	  param in name "len" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43779511 "Close"
	preserve_cpp_body_indent cpp_override cpp_inline public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43779639 "WaitForDisconnect"
	preserve_cpp_body_indent cpp_override cpp_inline public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// Wait for the system to notice the device is gone, so that a subsequent
//fastboot command won't try to access the device before it's rebooted.
//Returns 0 for success, -1 for timeout.
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 6862519 // handle_ (<directional composition>)
	relation 6862519 *-->
	  stereotype "std::unique_ptr"
	  a role_name "handle_" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6862519 // handle_ (<directional composition>)
	  b parent class_ref 3081911 // usb_handle
      end
    end

    class 3423031 "OsxUsbTransport"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 6862647 // <generalisation>
	relation 6862647 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6862647 // <generalisation>
	  b parent class_ref 3088439 // Transport
      end

      operation 43779767 "OsxUsbTransport"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "handle" explicit_type "std::unique_ptr<usb_handle>"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract} : handle_(std::move(handle)) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43779895 "~OsxUsbTransport"
	cpp_override cpp_defaulted public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 43780023 "Read"
	preserve_cpp_body_indent cpp_override cpp_inline public explicit_return_type "ssize_t"
	nparams 2
	  param inout name "data" explicit_type "void"
	  param in name "len" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43780151 "Write"
	preserve_cpp_body_indent cpp_override cpp_inline public explicit_return_type "ssize_t"
	nparams 2
	  param in name "data" explicit_type "void"
	  param in name "len" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43780279 "Close"
	preserve_cpp_body_indent cpp_override cpp_inline public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 6862775 // handle_ (<directional composition>)
	relation 6862775 *-->
	  stereotype "std::unique_ptr"
	  a role_name "handle_" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6862775 // handle_ (<directional composition>)
	  b parent class_ref 3081911 // usb_handle
      end
    end

    class 3423159 "WindowsUsbTransport"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 6862903 // <generalisation>
	relation 6862903 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6862903 // <generalisation>
	  b parent class_ref 3088439 // Transport
      end

      operation 43780407 "WindowsUsbTransport"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "handle" explicit_type "std::unique_ptr<usb_handle>"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract} : handle_(std::move(handle)) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43780535 "~WindowsUsbTransport"
	cpp_override cpp_defaulted public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 43780663 "Read"
	preserve_cpp_body_indent cpp_override cpp_inline public explicit_return_type "ssize_t"
	nparams 2
	  param inout name "data" explicit_type "void"
	  param in name "len" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43780791 "Write"
	preserve_cpp_body_indent cpp_override cpp_inline public explicit_return_type "ssize_t"
	nparams 2
	  param in name "data" explicit_type "void"
	  param in name "len" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43780919 "Close"
	preserve_cpp_body_indent cpp_override cpp_inline public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 6863031 // handle_ (<directional composition>)
	relation 6863031 *-->
	  stereotype "std::unique_ptr"
	  a role_name "handle_" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6863031 // handle_ (<directional composition>)
	  b parent class_ref 3081911 // usb_handle
      end
    end
  end

  deploymentview 272695 "fastboot"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 1544887 "socket"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3087543 // Socket
      end
    end

    artifact 1545015 "socket_mock"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3088055 // SocketMock
      end
    end

    artifact 1545143 "transport"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3088439 // Transport
      end
    end

    artifact 1545399 "usb"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3088823 // usb_ifc_info
	class_ref 3088951 // ifc_match_func
      end
    end

    artifact 1654967 "fb_buffer_type"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3421239 // fb_buffer_type
      end
    end

    artifact 1655095 "fastboot_buffer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3421367 // fastboot_buffer
      end
    end

    artifact 1655223 "main"
      stereotype "source"
      cpp_src "int main(int argc, char **argv)
{
    bool wants_wipe = false;
    bool wants_reboot = false;
    bool wants_reboot_bootloader = false;
    bool wants_set_active = false;
    bool erase_first = true;
    bool set_fbe_marker = false;
    void *data;
    int64_t sz;
    int longindex;
    std::string slot_override;
    std::string next_active;

    const struct option longopts[] = {
        {\"base\", required_argument, 0, 'b'},
        {\"kernel_offset\", required_argument, 0, 'k'},
        {\"kernel-offset\", required_argument, 0, 'k'},
        {\"page_size\", required_argument, 0, 'n'},
        {\"page-size\", required_argument, 0, 'n'},
        {\"ramdisk_offset\", required_argument, 0, 'r'},
        {\"ramdisk-offset\", required_argument, 0, 'r'},
        {\"tags_offset\", required_argument, 0, 't'},
        {\"tags-offset\", required_argument, 0, 't'},
        {\"help\", no_argument, 0, 'h'},
        {\"unbuffered\", no_argument, 0, 0},
        {\"version\", no_argument, 0, 0},
        {\"slot\", required_argument, 0, 0},
        {\"set_active\", optional_argument, 0, 'a'},
        {\"set-active\", optional_argument, 0, 'a'},
#if !defined(_WIN32)
        {\"wipe-and-use-fbe\", no_argument, 0, 0},
#endif
        {0, 0, 0, 0}
    };

    serial = getenv(\"ANDROID_SERIAL\");

    while (1) {
        int c = getopt_long(argc, argv, \"wub:k:n:r:t:s:S:lp:c:i:m:ha::\", longopts, &longindex);
        if (c < 0) {
            break;
        }
        /* Alphabetical cases */
        switch (c) {
        case 'a':
            wants_set_active = true;
            if (optarg)
                next_active = optarg;
            break;
        case 'b':
            base_addr = strtoul(optarg, 0, 16);
            break;
        case 'c':
            cmdline = optarg;
            break;
        case 'h':
            usage();
            return 1;
        case 'i': {
                char *endptr = nullptr;
                unsigned long val;

                val = strtoul(optarg, &endptr, 0);
                if (!endptr || *endptr != '\\0' || (val & ~0xffff))
                    die(\"invalid vendor id '%s'\", optarg);
                vendor_id = (unsigned short)val;
                break;
            }
        case 'k':
            kernel_offset = strtoul(optarg, 0, 16);
            break;
        case 'l':
            long_listing = 1;
            break;
        case 'n':
            page_size = (unsigned)strtoul(optarg, nullptr, 0);
            if (!page_size) die(\"invalid page size\");
            break;
        case 'p':
            product = optarg;
            break;
        case 'r':
            ramdisk_offset = strtoul(optarg, 0, 16);
            break;
        case 't':
            tags_offset = strtoul(optarg, 0, 16);
            break;
        case 's':
            serial = optarg;
            break;
        case 'S':
            sparse_limit = parse_num(optarg);
            if (sparse_limit < 0) {
                    die(\"invalid sparse limit\");
            }
            break;
        case 'u':
            erase_first = false;
            break;
        case 'w':
            wants_wipe = true;
            break;
        case '?':
            return 1;
        case 0:
            if (strcmp(\"unbuffered\", longopts[longindex].name) == 0) {
                setvbuf(stdout, nullptr, _IONBF, 0);
                setvbuf(stderr, nullptr, _IONBF, 0);
            } else if (strcmp(\"version\", longopts[longindex].name) == 0) {
                fprintf(stdout, \"fastboot version %s\\n\", FASTBOOT_REVISION);
                return 0;
            } else if (strcmp(\"slot\", longopts[longindex].name) == 0) {
                slot_override = std::string(optarg);
#if !defined(_WIN32)
            } else if (strcmp(\"wipe-and-use-fbe\", longopts[longindex].name) == 0) {
                wants_wipe = true;
                set_fbe_marker = true;
#endif
            } else {
                fprintf(stderr, \"Internal error in options processing for %s\\n\",
                    longopts[longindex].name);
                return 1;
            }
            break;
        default:
            abort();
        }
    }

    argc -= optind;
    argv += optind;

    if (argc == 0 && !wants_wipe && !wants_set_active) {
        usage();
        return 1;
    }

    if (argc > 0 && !strcmp(*argv, \"devices\")) {
        skip(1);
        list_devices();
        return 0;
    }

    if (argc > 0 && !strcmp(*argv, \"help\")) {
        usage();
        return 0;
    }

    Transport* transport = open_device();
    if (transport == nullptr) {
        return 1;
    }

    if (slot_override != \"\")
        slot_override = verify_slot(transport, slot_override.c_str());
    if (next_active != \"\")
        next_active = verify_slot(transport, next_active.c_str(), false);

    if (wants_set_active) {
        if (next_active == \"\") {
            if (slot_override == \"\") {
                wants_set_active = false;
            } else {
                next_active = verify_slot(transport, slot_override.c_str(), false);
            }
        }
    }

    while (argc > 0) {
        if (!strcmp(*argv, \"getvar\")) {
            require(2);
            fb_queue_display(argv[1], argv[1]);
            skip(2);
        } else if(!strcmp(*argv, \"erase\")) {
            require(2);

            auto erase = [&](const std::string &partition) {
                std::string partition_type;
                if (fb_getvar(transport, std::string(\"partition-type:\") + argv[1], &partition_type) &&
                    fs_get_generator(partition_type) != nullptr) {
                    fprintf(stderr, \"******** Did you mean to fastboot format this %s partition?\\n\",
                            partition_type.c_str());
                }

                fb_queue_erase(partition.c_str());
            };
            do_for_partitions(transport, argv[1], slot_override.c_str(), erase, true);
            skip(2);
        } else if(!strncmp(*argv, \"format\", strlen(\"format\"))) {
            char *overrides;
            char *type_override = nullptr;
            char *size_override = nullptr;
            require(2);
            /*
             * Parsing for: \"format[:[type][:[size]]]\"
             * Some valid things:
             *  - select ontly the size, and leave default fs type:
             *    format::0x4000000 userdata
             *  - default fs type and size:
             *    format userdata
             *    format:: userdata
             */
            overrides = strchr(*argv, ':');
            if (overrides) {
                overrides++;
                size_override = strchr(overrides, ':');
                if (size_override) {
                    size_override[0] = '\\0';
                    size_override++;
                }
                type_override = overrides;
            }
            if (type_override && !type_override[0]) type_override = nullptr;
            if (size_override && !size_override[0]) size_override = nullptr;

            auto format = [&](const std::string &partition) {
                if (erase_first && needs_erase(transport, partition.c_str())) {
                    fb_queue_erase(partition.c_str());
                }
                fb_perform_format(transport, partition.c_str(), 0,
                    type_override, size_override, \"\");
            };
            do_for_partitions(transport, argv[1], slot_override.c_str(), format, true);
            skip(2);
        } else if(!strcmp(*argv, \"signature\")) {
            require(2);
            data = load_file(argv[1], &sz);
            if (data == nullptr) die(\"could not load '%s': %s\", argv[1], strerror(errno));
            if (sz != 256) die(\"signature must be 256 bytes\");
            fb_queue_download(\"signature\", data, sz);
            fb_queue_command(\"signature\", \"installing signature\");
            skip(2);
        } else if(!strcmp(*argv, \"reboot\")) {
            wants_reboot = true;
            skip(1);
            if (argc > 0) {
                if (!strcmp(*argv, \"bootloader\")) {
                    wants_reboot = false;
                    wants_reboot_bootloader = true;
                    skip(1);
                }
            }
            require(0);
        } else if(!strcmp(*argv, \"reboot-bootloader\")) {
            wants_reboot_bootloader = true;
            skip(1);
        } else if (!strcmp(*argv, \"continue\")) {
            fb_queue_command(\"continue\", \"resuming boot\");
            skip(1);
        } else if(!strcmp(*argv, \"boot\")) {
            char *kname = 0;
            char *rname = 0;
            char *sname = 0;
            skip(1);
            if (argc > 0) {
                kname = argv[0];
                skip(1);
            }
            if (argc > 0) {
                rname = argv[0];
                skip(1);
            }
            if (argc > 0) {
                sname = argv[0];
                skip(1);
            }
            data = load_bootable_image(kname, rname, sname, &sz, cmdline);
            if (data == 0) return 1;
            fb_queue_download(\"boot.img\", data, sz);
            fb_queue_command(\"boot\", \"booting\");
        } else if(!strcmp(*argv, \"flash\")) {
            char *pname = argv[1];
            char *fname = 0;
            require(2);
            if (argc > 2) {
                fname = argv[2];
                skip(3);
            } else {
                fname = find_item(pname, product);
                skip(2);
            }
            if (fname == 0) die(\"cannot determine image filename for '%s'\", pname);

            auto flash = [&](const std::string &partition) {
                if (erase_first && needs_erase(transport, partition.c_str())) {
                    fb_queue_erase(partition.c_str());
                }
                do_flash(transport, partition.c_str(), fname);
            };
            do_for_partitions(transport, pname, slot_override.c_str(), flash, true);
        } else if(!strcmp(*argv, \"flash:raw\")) {
            char *kname = argv[2];
            char *rname = 0;
            char *sname = 0;
            require(3);
            skip(3);
            if (argc > 0) {
                rname = argv[0];
                skip(1);
            }
            if (argc > 0) {
                sname = argv[0];
                skip(1);
            }
            data = load_bootable_image(kname, rname, sname, &sz, cmdline);
            if (data == 0) die(\"cannot load bootable image\");
            auto flashraw = [&](const std::string &partition) {
                fb_queue_flash(partition.c_str(), data, sz);
            };
            do_for_partitions(transport, argv[1], slot_override.c_str(), flashraw, true);
        } else if(!strcmp(*argv, \"flashall\")) {
            skip(1);
            do_flashall(transport, slot_override.c_str(), erase_first);
            wants_reboot = true;
        } else if(!strcmp(*argv, \"update\")) {
            if (argc > 1) {
                do_update(transport, argv[1], slot_override.c_str(), erase_first);
                skip(2);
            } else {
                do_update(transport, \"update.zip\", slot_override.c_str(), erase_first);
                skip(1);
            }
            wants_reboot = 1;
        } else if(!strcmp(*argv, \"set_active\")) {
            require(2);
            std::string slot = verify_slot(transport, argv[1], false);
            fb_set_active(slot.c_str());
            skip(2);
        } else if(!strcmp(*argv, \"oem\")) {
            argc = do_oem_command(argc, argv);
        } else if(!strcmp(*argv, \"flashing\")) {
            if (argc == 2 && (!strcmp(*(argv+1), \"unlock\") ||
                              !strcmp(*(argv+1), \"lock\") ||
                              !strcmp(*(argv+1), \"unlock_critical\") ||
                              !strcmp(*(argv+1), \"lock_critical\") ||
                              !strcmp(*(argv+1), \"get_unlock_ability\") ||
                              !strcmp(*(argv+1), \"get_unlock_bootloader_nonce\") ||
                              !strcmp(*(argv+1), \"lock_bootloader\"))) {
                argc = do_oem_command(argc, argv);
            } else
            if (argc == 3 && !strcmp(*(argv+1), \"unlock_bootloader\")) {
                argc = do_bypass_unlock_command(argc, argv);
            } else {
              usage();
              return 1;
            }
        } else {
            usage();
            return 1;
        }
    }

    if (wants_wipe) {
        fprintf(stderr, \"wiping userdata...\\n\");
        fb_queue_erase(\"userdata\");
        if (set_fbe_marker) {
            fprintf(stderr, \"setting FBE marker...\\n\");
            std::string initial_userdata_dir = create_fbemarker_tmpdir();
            if (initial_userdata_dir.empty()) {
                return 1;
            }
            fb_perform_format(transport, \"userdata\", 1, nullptr, nullptr, initial_userdata_dir);
            delete_fbemarker_tmpdir(initial_userdata_dir);
        } else {
            fb_perform_format(transport, \"userdata\", 1, nullptr, nullptr, \"\");
        }

        std::string cache_type;
        if (fb_getvar(transport, \"partition-type:cache\", &cache_type) && !cache_type.empty()) {
            fprintf(stderr, \"wiping cache...\\n\");
            fb_queue_erase(\"cache\");
            fb_perform_format(transport, \"cache\", 1, nullptr, nullptr, \"\");
        }
    }
    if (wants_set_active) {
        fb_set_active(next_active.c_str());
    }
    if (wants_reboot) {
        fb_queue_reboot();
        fb_queue_wait_for_disconnect();
    } else if (wants_reboot_bootloader) {
        fb_queue_command(\"reboot-bootloader\", \"rebooting into bootloader\");
        fb_queue_wait_for_disconnect();
    }

    return fb_execute_queue(transport) ? EXIT_FAILURE : EXIT_SUCCESS;
}
"
      associated_classes
      end
    end

    artifact 1655351 "UdpSocket"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3421495 // UdpSocket
      end
    end

    artifact 1655479 "TcpSocket"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3421751 // TcpSocket
      end
    end

    artifact 1655735 "typedef225"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3422135 // typedef225
      end
    end

    artifact 1655863 "TcpTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3422007 // TcpTest
      end
    end

    artifact 1656375 "UdpConnectTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3422647 // UdpConnectTest
      end
    end

    artifact 1656503 "UdpTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3422775 // UdpTest
      end
    end

    artifact 1656631 "LinuxUsbTransport"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3422903 // LinuxUsbTransport
      end
    end

    artifact 1656759 "OsxUsbTransport"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3423031 // OsxUsbTransport
      end
    end

    artifact 1656887 "WindowsUsbTransport"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3423159 // WindowsUsbTransport
      end
    end
  end

  package_ref 341175 // udp internal

  package_ref 369463 // tcp

  package_ref 369591 // udp
end
