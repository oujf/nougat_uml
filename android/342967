format 213
"binderwrapper" // android::system::core::include::binderwrapper
  revision 1
  modified_by 55 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "D:/Workspace/AndroidSourceCode/nougat_src/system/core/include/binderwrapper/"
  cpp_src_dir "D:/Workspace/AndroidSourceCode/nougat_src/system/core/include/binderwrapper/"
  cpp_namespace "android"
  classview 313527 "binderwrapper"
    
    classdiagramsettings member_max_width 0 end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 3095095 "BinderTestBase"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Class that can be inherited from (or aliased via typedef/using) when writing
 tests that use StubBinderManager."
      classrelation 6489143 // <generalisation>
	relation 6489143 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6489143 // <generalisation>
	  b parent class_ref 3095223 // typedef115
      end

      operation 42679479 "BinderTestBase"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 42679607 "~BinderTestBase"
	cpp_override public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 42679735 "binder_wrapper"
	cpp_inline public return_type class_ref 3095351 // StubBinderWrapper
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return binder_wrapper_; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 6489271 // binder_wrapper_ (<unidirectional association>)
	relation 6489271 --->
	  a role_name "binder_wrapper_" protected
	    comment " Not owned."
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6489271 // binder_wrapper_ (<unidirectional association>)
	  b parent class_ref 3095351 // StubBinderWrapper
      end
    end

    class 3095223 "typedef115"
      visibility package stereotype "typedef" explicit_base_type "::testing::Test"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 3095351 "StubBinderWrapper"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Stub implementation of BinderWrapper for testing.

 Example usage:

 First, assuming a base IFoo binder interface, create a stub class that
 derives from BnFoo to implement the receiver side of the communication:

   class StubFoo : public BnFoo {
    public:
     ...
     status_t doSomething(int arg) override {
       // e.g. save passed-in value for later inspection by tests.
       return OK;
     }
   };

 Next, from your test code, inject a StubBinderManager either directly or by
 inheriting from the BinderTestBase class:

   StubBinderWrapper* wrapper = new StubBinderWrapper();
   BinderWrapper::InitForTesting(wrapper);  // Takes ownership.

 Also from your test, create a StubFoo and register it with the wrapper:

   StubFoo* foo = new StubFoo();
   sp<IBinder> binder(foo);
   wrapper->SetBinderForService(\"foo\", binder);

 The code being tested can now use the wrapper to get the stub and call it:

   sp<IBinder> binder = BinderWrapper::Get()->GetService(\"foo\");
   CHECK(binder.get());
   sp<IFoo> foo = interface_cast<IFoo>(binder);
   CHECK_EQ(foo->doSomething(3), OK);

 To create a local BBinder object, production code can call
 CreateLocalBinder(). Then, a test can get the BBinder's address via
 local_binders() to check that they're passed as expected in binder calls.
"
      classrelation 6489527 // <generalisation>
	relation 6489527 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6489527 // <generalisation>
	  b parent class_ref 3095479 // BinderWrapper
      end

      operation 42681527 "StubBinderWrapper"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 42681655 "~StubBinderWrapper"
	cpp_override public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 42681783 "local_binders"
	const cpp_inline public explicit_return_type "std::vector<sp<BBinder>>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return local_binders_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 42681911 "clear_local_binders"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { local_binders_.clear(); };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 42682039 "set_calling_uid"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "uid" type class_ref 3084983 // uid_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { calling_uid_ = uid; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 42682167 "set_calling_pid"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "pid" explicit_type "pid_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { calling_pid_ = pid; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 42682295 "SetBinderForService"
	public explicit_return_type "void"
	nparams 2
	  param in name "service_name" explicit_type "std::string"
	  param in name "binder" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sets the binder to return when |service_name| is passed to GetService() or
 WaitForService()."
      end

      operation 42682423 "GetRegisteredService"
	const public explicit_return_type "sp<IBinder>"
	nparams 1
	  param in name "service_name" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the binder previously registered for |service_name| via
 RegisterService(), or null if the service hasn't been registered."
      end

      operation 42682551 "NotifyAboutBinderDeath"
	public explicit_return_type "void"
	nparams 1
	  param in name "binder" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Run the calback in |death_callbacks_| corresponding to |binder|."
      end

      operation 42682679 "GetService"
	cpp_override public explicit_return_type "sp<IBinder>"
	nparams 1
	  param in name "service_name" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " BinderWrapper:"
      end

      operation 42682807 "RegisterService"
	cpp_override public explicit_return_type "bool"
	nparams 2
	  param in name "service_name" explicit_type "std::string"
	  param in name "binder" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 42682935 "CreateLocalBinder"
	cpp_override public explicit_return_type "sp<BBinder>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 42683063 "RegisterForDeathNotifications"
	cpp_override public explicit_return_type "bool"
	nparams 2
	  param in name "binder" explicit_type "sp<IBinder>"
	  param in name "callback" explicit_type "base::Closure"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 42683191 "UnregisterForDeathNotifications"
	cpp_override public explicit_return_type "bool"
	nparams 1
	  param in name "binder" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 42683319 "GetCallingUid"
	cpp_override public return_type class_ref 3084983 // uid_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 42683447 "GetCallingPid"
	cpp_override public explicit_return_type "pid_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 3095607 "ServiceMap"
	visibility package stereotype "template_typedef"
	cpp_decl "${comment}${template}using ${name} = ${inherit};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 6489655 // <generalisation>
	  relation 6489655 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 6489655 // <generalisation>
	    b parent class_ref 3095735 // typedef116
	end
      end

      class 3095735 "typedef116"
	visibility package stereotype "typedef" explicit_base_type "std::map<std::string, sp<IBinder>>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      classrelation 6489783 // services_to_return_ (<directional composition>)
	relation 6489783 *-->
	  a role_name "services_to_return_" private
	    comment " Map from service name to associated binder handle. Used by GetService() and
 WaitForService().
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6489783 // services_to_return_ (<directional composition>)
	  b parent class_ref 3095607 // ServiceMap
      end

      classrelation 6489911 // registered_services_ (<directional composition>)
	relation 6489911 *-->
	  a role_name "registered_services_" private
	    comment " Map from service name to associated binder handle. Updated by
 RegisterService().
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6489911 // registered_services_ (<directional composition>)
	  b parent class_ref 3095607 // ServiceMap
      end

      attribute 11703095 "local_binders_"
	private explicit_type "sp<BBinder>"
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Local binders returned by CreateLocalBinder().
"
      end

      attribute 11703223 "death_callbacks_"
	private explicit_type "sp<IBinder>, base::Closure"
	stereotype "std::map"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Map from binder handle to the callback that should be invoked on binder
 death.
"
      end

      classrelation 6490039 // calling_uid_ (<directional composition>)
	relation 6490039 *-->
	  a role_name "calling_uid_" private
	    comment " Values to return from GetCallingUid() and GetCallingPid();
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6490039 // calling_uid_ (<directional composition>)
	  b parent class_ref 3084983 // uid_t
      end

      attribute 11703351 "calling_pid_"
	private explicit_type "pid_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3095479 "BinderWrapper"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Wraps libbinder to make it testable.
 NOTE: Static methods of this class are not thread-safe."
      operation 42679863 "~BinderWrapper"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 42679991 "Create"
	class_operation public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Creates and initializes the singleton (using a wrapper that communicates
 with the real binder system)."
      end

      operation 42680119 "InitForTesting"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "wrapper" type class_ref 3095479 // BinderWrapper
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Initializes |wrapper| as the singleton, taking ownership of it. Tests that
 want to inject their own wrappers should call this instead of Create()."
      end

      operation 42680247 "Destroy"
	class_operation public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Destroys the singleton. Must be called before calling Create() or
 InitForTesting() a second time."
      end

      operation 42680375 "Get"
	class_operation public return_type class_ref 3095479 // BinderWrapper
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the singleton instance previously created by Create() or set by
 InitForTesting()."
      end

      operation 42680503 "GetOrCreateInstance"
	class_operation public return_type class_ref 3095479 // BinderWrapper
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the singleton instance if it was previously created by Create() or
 set by InitForTesting(), or creates a new one by calling Create()."
      end

      operation 42680631 "GetService"
	abstract cpp_virtual public explicit_return_type "sp<IBinder>"
	nparams 1
	  param in name "service_name" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Gets the binder for communicating with the service identified by
 |service_name|, returning null immediately if it doesn't exist."
      end

      operation 42680759 "RegisterService"
	abstract cpp_virtual public explicit_return_type "bool"
	nparams 2
	  param in name "service_name" explicit_type "std::string"
	  param in name "binder" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Registers |binder| as |service_name| with the service manager."
      end

      operation 42680887 "CreateLocalBinder"
	abstract cpp_virtual public explicit_return_type "sp<BBinder>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Creates a local binder object."
      end

      operation 42681015 "RegisterForDeathNotifications"
	abstract cpp_virtual public explicit_return_type "bool"
	nparams 2
	  param in name "binder" explicit_type "sp<IBinder>"
	  param in name "callback" explicit_type "base::Closure"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Registers |callback| to be invoked when |binder| dies. If another callback
 is currently registered for |binder|, it will be replaced."
      end

      operation 42681143 "UnregisterForDeathNotifications"
	abstract cpp_virtual public explicit_return_type "bool"
	nparams 1
	  param in name "binder" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Unregisters the callback, if any, for |binder|."
      end

      operation 42681271 "GetCallingUid"
	abstract cpp_virtual public return_type class_ref 3084983 // uid_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " When called while in a transaction, returns the caller's UID or PID."
      end

      operation 42681399 "GetCallingPid"
	abstract cpp_virtual public explicit_return_type "pid_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 6489399 // instance_ (<unidirectional association>)
	relation 6489399 --->
	  a role_name "instance_" class_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6489399 // instance_ (<unidirectional association>)
	  b parent class_ref 3095479 // BinderWrapper
      end
    end
  end

  deploymentview 274103 "binderwrapper"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 1547319 "binder_test_base"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3095223 // typedef115
	class_ref 3095095 // BinderTestBase
      end
    end

    artifact 1547447 "binder_wrapper"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3095479 // BinderWrapper
      end
    end

    artifact 1547575 "stub_binder_wrapper"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3095351 // StubBinderWrapper
      end
    end
  end
end
