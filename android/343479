format 213
"nativebridge" // android::system::core::include::nativebridge
  revision 1
  modified_by 55 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "D:/Workspace/AndroidSourceCode/nougat_src/system/core/include/nativebridge/"
  cpp_src_dir "D:/Workspace/AndroidSourceCode/nougat_src/system/core/include/nativebridge/"
  cpp_namespace "android"
  classview 314039 "nativebridge"
    
    classdiagramsettings member_max_width 0 end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 3102135 "NativeBridgeSignalHandlerFn"
      visibility package stereotype "typedef" explicit_base_type "bool"
      cpp_decl "${comment}typedef ${type}(* ${name})(int, siginfo_t*, void*);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Function pointer type for sigaction. This is mostly the signature of a signal handler, except
 for the return type. The runtime needs to know whether the signal was handled or should be given
 to the chain."
    end

    class 3102263 "NativeBridgeCallbacks"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Native bridge interfaces to runtime."
      classrelation 6495799 // version (<directional composition>)
	relation 6495799 *-->
	  a role_name "version" public
	    comment " Version number of the interface.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6495799 // version (<directional composition>)
	  b parent class_ref 2810935 // uint32_t
      end

      attribute 11718711 "initialize"
	public explicit_type "// Initialize native bridge. Native bridge's internal implementation must ensure MT safety and // that the native bridge is initialized only once. Thus it is OK to call this interface for an // already initialized native bridge. // // Parameters: // runtime_cbs [IN] the pointer to NativeBridgeRuntimeCallbacks. // Returns: // true iff initialization was successful. bool (*)(const NativeBridgeRuntimeCallbacks* runtime_cbs, const char* private_dir, const char* instruction_set)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
  // Initialize native bridge. Native bridge's internal implementation must ensure MT safety and
  // that the native bridge is initialized only once. Thus it is OK to call this interface for an
  // already initialized native bridge.
  //
  // Parameters:
  //   runtime_cbs [IN] the pointer to NativeBridgeRuntimeCallbacks.
  // Returns:
  //   true iff initialization was successful.
  bool (*${name})(const NativeBridgeRuntimeCallbacks* runtime_cbs, const char* private_dir,
                     const char* instruction_set)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Initialize native bridge. Native bridge's internal implementation must ensure MT safety and
 that the native bridge is initialized only once. Thus it is OK to call this interface for an
 already initialized native bridge.

 Parameters:
   runtime_cbs [IN] the pointer to NativeBridgeRuntimeCallbacks.
 Returns:
   true iff initialization was successful.
"
      end

      attribute 11718839 "loadLibrary"
	public explicit_type "// Load a shared library that is supported by the native bridge. // // Parameters: // libpath [IN] path to the shared library // flag [IN] the stardard RTLD_XXX defined in bionic dlfcn.h // Returns: // The opaque handle of the shared library if sucessful, otherwise NULL void* (*)(const char* libpath, int flag)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
  // Load a shared library that is supported by the native bridge.
  //
  // Parameters:
  //   libpath [IN] path to the shared library
  //   flag [IN] the stardard RTLD_XXX defined in bionic dlfcn.h
  // Returns:
  //   The opaque handle of the shared library if sucessful, otherwise NULL
  void* (*${name})(const char* libpath, int flag)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Load a shared library that is supported by the native bridge.

 Parameters:
   libpath [IN] path to the shared library
   flag [IN] the stardard RTLD_XXX defined in bionic dlfcn.h
 Returns:
   The opaque handle of the shared library if sucessful, otherwise NULL
"
      end

      attribute 11718967 "getTrampoline"
	public explicit_type "// Get a native bridge trampoline for specified native method. The trampoline has same // sigature as the native method. // // Parameters: // handle [IN] the handle returned from loadLibrary // shorty [IN] short descriptor of native method // len [IN] length of shorty // Returns: // address of trampoline if successful, otherwise NULL void* (*)(void* handle, const char* name, const char* shorty, uint32_t len)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
  // Get a native bridge trampoline for specified native method. The trampoline has same
  // sigature as the native method.
  //
  // Parameters:
  //   handle [IN] the handle returned from loadLibrary
  //   shorty [IN] short descriptor of native method
  //   len [IN] length of shorty
  // Returns:
  //   address of trampoline if successful, otherwise NULL
  void* (*${name})(void* handle, const char* name, const char* shorty, uint32_t len)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Get a native bridge trampoline for specified native method. The trampoline has same
 sigature as the native method.

 Parameters:
   handle [IN] the handle returned from loadLibrary
   shorty [IN] short descriptor of native method
   len [IN] length of shorty
 Returns:
   address of trampoline if successful, otherwise NULL
"
      end

      attribute 11719095 "isSupported"
	public explicit_type "// Check whether native library is valid and is for an ABI that is supported by native bridge. // // Parameters: // libpath [IN] path to the shared library // Returns: // TRUE if library is supported by native bridge, FALSE otherwise bool (*)(const char* libpath)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
  // Check whether native library is valid and is for an ABI that is supported by native bridge.
  //
  // Parameters:
  //   libpath [IN] path to the shared library
  // Returns:
  //   TRUE if library is supported by native bridge, FALSE otherwise
  bool (*${name})(const char* libpath)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Check whether native library is valid and is for an ABI that is supported by native bridge.

 Parameters:
   libpath [IN] path to the shared library
 Returns:
   TRUE if library is supported by native bridge, FALSE otherwise
"
      end

      attribute 11719223 "getAppEnv"
	const_attribute public explicit_type "NativeBridgeRuntimeValues* (*)(const char* instruction_set)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const} NativeBridgeRuntimeValues* (*${name})(const char* instruction_set)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Provide environment values required by the app running with native bridge according to the
 instruction set.

 Parameters:
    instruction_set [IN] the instruction set of the app
 Returns:
    NULL if not supported by native bridge.
    Otherwise, return all environment values to be set after fork.
"
      end

      attribute 11719351 "isCompatibleWith"
	public explicit_type "// Added callbacks in version 2. // Check whether the bridge is compatible with the given version. A bridge may decide not to be // forwards- or backwards-compatible, and libnativebridge will then stop using it. // // Parameters: // bridge_version [IN] the version of libnativebridge. // Returns: // true iff the native bridge supports the given version of libnativebridge. bool (*)(uint32_t bridge_version)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
  // Added callbacks in version 2.

  // Check whether the bridge is compatible with the given version. A bridge may decide not to be
  // forwards- or backwards-compatible, and libnativebridge will then stop using it.
  //
  // Parameters:
  //     bridge_version [IN] the version of libnativebridge.
  // Returns:
  //     true iff the native bridge supports the given version of libnativebridge.
  bool (*${name})(uint32_t bridge_version)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Added callbacks in version 2.
 Check whether the bridge is compatible with the given version. A bridge may decide not to be
 forwards- or backwards-compatible, and libnativebridge will then stop using it.

 Parameters:
     bridge_version [IN] the version of libnativebridge.
 Returns:
     true iff the native bridge supports the given version of libnativebridge.
"
      end

      attribute 11719479 "getSignalHandler"
	public explicit_type "// A callback to retrieve a native bridge's signal handler for the specified signal. The runtime // will ensure that the signal handler is being called after the runtime's own handler, but before // all chained handlers. The native bridge should not try to install the handler by itself, as // that will potentially lead to cycles. // // Parameters: // signal [IN] the signal for which the handler is asked for. Currently, only SIGSEGV is // supported by the runtime. // Returns: // NULL if the native bridge doesn't use a handler or doesn't want it to be managed by the // runtime. // Otherwise, a pointer to the signal handler. NativeBridgeSignalHandlerFn (*)(int signal)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
  // A callback to retrieve a native bridge's signal handler for the specified signal. The runtime
  // will ensure that the signal handler is being called after the runtime's own handler, but before
  // all chained handlers. The native bridge should not try to install the handler by itself, as
  // that will potentially lead to cycles.
  //
  // Parameters:
  //     signal [IN] the signal for which the handler is asked for. Currently, only SIGSEGV is
  //                 supported by the runtime.
  // Returns:
  //     NULL if the native bridge doesn't use a handler or doesn't want it to be managed by the
  //     runtime.
  //     Otherwise, a pointer to the signal handler.
  NativeBridgeSignalHandlerFn (*${name})(int signal)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " A callback to retrieve a native bridge's signal handler for the specified signal. The runtime
 will ensure that the signal handler is being called after the runtime's own handler, but before
 all chained handlers. The native bridge should not try to install the handler by itself, as
 that will potentially lead to cycles.

 Parameters:
     signal [IN] the signal for which the handler is asked for. Currently, only SIGSEGV is
                 supported by the runtime.
 Returns:
     NULL if the native bridge doesn't use a handler or doesn't want it to be managed by the
     runtime.
     Otherwise, a pointer to the signal handler.
"
      end
    end

    class 3102391 "NativeBridgeRuntimeCallbacks"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Runtime interfaces to native bridge."
      attribute 11719607 "getMethodShorty"
	const_attribute public explicit_type "char* (*)(JNIEnv* env, jmethodID mid)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const} char* (*${name})(JNIEnv* env, jmethodID mid)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Get shorty of a Java method. The shorty is supposed to be persistent in memory.

 Parameters:
   env [IN] pointer to JNIenv.
   mid [IN] Java methodID.
 Returns:
   short descriptor for method.
"
      end

      attribute 11719735 "getNativeMethodCount"
	public explicit_type "// Get number of native methods for specified class. // // Parameters: // env [IN] pointer to JNIenv. // clazz [IN] Java class object. // Returns: // number of native methods. uint32_t (*)(JNIEnv* env, jclass clazz)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
  // Get number of native methods for specified class.
  //
  // Parameters:
  //   env [IN] pointer to JNIenv.
  //   clazz [IN] Java class object.
  // Returns:
  //   number of native methods.
  uint32_t (*${name})(JNIEnv* env, jclass clazz)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Get number of native methods for specified class.

 Parameters:
   env [IN] pointer to JNIenv.
   clazz [IN] Java class object.
 Returns:
   number of native methods.
"
      end

      attribute 11719863 "getNativeMethods"
	public explicit_type "// Get at most 'method_count' native methods for specified class 'clazz'. Results are outputed // via 'methods' [OUT]. The signature pointer in JNINativeMethod is reused as the method shorty. // // Parameters: // env [IN] pointer to JNIenv. // clazz [IN] Java class object. // methods [OUT] array of method with the name, shorty, and fnPtr. // method_count [IN] max number of elements in methods. // Returns: // number of method it actually wrote to methods. uint32_t (*)(JNIEnv* env, jclass clazz, JNINativeMethod* methods, uint32_t method_count)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
  // Get at most 'method_count' native methods for specified class 'clazz'. Results are outputed
  // via 'methods' [OUT]. The signature pointer in JNINativeMethod is reused as the method shorty.
  //
  // Parameters:
  //   env [IN] pointer to JNIenv.
  //   clazz [IN] Java class object.
  //   methods [OUT] array of method with the name, shorty, and fnPtr.
  //   method_count [IN] max number of elements in methods.
  // Returns:
  //   number of method it actually wrote to methods.
  uint32_t (*${name})(JNIEnv* env, jclass clazz, JNINativeMethod* methods,
                               uint32_t method_count)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Get at most 'method_count' native methods for specified class 'clazz'. Results are outputed
 via 'methods' [OUT]. The signature pointer in JNINativeMethod is reused as the method shorty.

 Parameters:
   env [IN] pointer to JNIenv.
   clazz [IN] Java class object.
   methods [OUT] array of method with the name, shorty, and fnPtr.
   method_count [IN] max number of elements in methods.
 Returns:
   number of method it actually wrote to methods.
"
      end
    end
  end

  deploymentview 274743 "nativebridge"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 1550647 "native_bridge"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3102135 // NativeBridgeSignalHandlerFn
	class_ref 3102263 // NativeBridgeCallbacks
	class_ref 3102391 // NativeBridgeRuntimeCallbacks
      end
    end
  end
end
