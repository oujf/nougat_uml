format 213
"android sysutils" // android::system::core::include::sysutils::android sysutils
  revision 1
  modified_by 55 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "D:/Workspace/AndroidSourceCode/nougat_src/system/core/include/sysutils/"
  cpp_src_dir "D:/Workspace/AndroidSourceCode/nougat_src/system/core/include/sysutils/"
  cpp_namespace "android::sysutils"
  classview 314551 "sysutils"
    
    classdiagramsettings member_max_width 0 end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 3112631 "List"
      visibility package 
      nformals 1
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Doubly-linked list.  Instantiate with \"List<MyClass> myList\".

Objects added to the list are copied using the assignment operator,
so this must be defined.
"
      class 3112759 "_Node"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 42691255 "_Node"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param in name "val" explicit_type "T"
	  cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract} : mVal(val) {};
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 42691383 "~_Node"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	  
	  
	  
	  
	end

	operation 42691511 "getRef"
	  cpp_inline public explicit_return_type "T"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mVal; };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 42691639 "getRef"
	  const cpp_inline public explicit_return_type "T"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mVal; };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 42691767 "getPrev"
	  const cpp_inline public return_type class_ref 3112759 // _Node
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mpPrev; };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 42691895 "getNext"
	  const cpp_inline public return_type class_ref 3112759 // _Node
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mpNext; };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 42692023 "setVal"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param in name "val" explicit_type "T"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { mVal = val; };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 42692151 "setPrev"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "ptr" type class_ref 3112759 // _Node
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { mpPrev = ptr; };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 42692279 "setNext"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "ptr" type class_ref 3112759 // _Node
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { mpNext = ptr; };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 6500791 // <dependency>
	  relation 6500791 -_->
	    stereotype "friend"
	    a public
	      cpp default "Generated"
	      classrelation_ref 6500791 // <dependency>
	    b parent class_ref 3112631 // List
	end

	classrelation 6500919 // <dependency>
	  relation 6500919 -_->
	    stereotype "friend"
	    a public
	      cpp default "Generated"
	      classrelation_ref 6500919 // <dependency>
	    b parent class_ref 3112887 // _ListIterator
	end

	attribute 11759287 "mVal"
	  private explicit_type "T"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 6501047 // mpPrev (<unidirectional association>)
	  relation 6501047 --->
	    a role_name "mpPrev" private
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 6501047 // mpPrev (<unidirectional association>)
	    b parent class_ref 3112759 // _Node
	end

	classrelation 6501175 // mpNext (<unidirectional association>)
	  relation 6501175 --->
	    a role_name "mpNext" private
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 6501175 // mpNext (<unidirectional association>)
	    b parent class_ref 3112759 // _Node
	end
      end

      class 3112887 "_ListIterator"
	visibility package 
	nformals 2
	formal name "U" type "typename" explicit_default_value ""
	  explicit_extends ""
	formal name "Constness" type "
        template <class> class" explicit_default_value ""
	  explicit_extends ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	class 3113783 "_Iter"
	  visibility package stereotype "typedef" explicit_base_type "_ListIterator<U, Constness>"
	  cpp_decl "${comment}typedef ${type} ${name};
"
	  java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	end

	class 3113911 "_NodePtr"
	  visibility package stereotype "typedef" explicit_base_type "Constness<U>::NodePtr"
	  cpp_decl "${comment}typedef  typename ${type} ${name};
"
	  java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	end

	class 3114039 "_Type"
	  visibility package stereotype "typedef" explicit_base_type "Constness<U>::Type"
	  cpp_decl "${comment}typedef  typename ${type} ${name};
"
	  java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	end

	operation 42692407 "_ListIterator"
	  cpp_inline private explicit_return_type ""
	  nparams 1
	    param in name "ptr" type class_ref 3113911 // _NodePtr
	  cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract} : mpNode(ptr) {};
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 42692535 "_ListIterator"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 42692663 "_ListIterator"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param in name "rhs" type class_ref 3113783 // _Iter
	  cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract} : mpNode(rhs.mpNode) {};
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 42692791 "~_ListIterator"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	  
	  
	  
	  
	end

	operation 42692919 "_ListIterator"
	  stereotype "template"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param in name "rhs" explicit_type "V"
	  cpp_decl "    ${comment}template<typename V>
  ${inline}explicit ${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract} : mpNode(rhs.mpNode) {};
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	  comment " this will handle conversions from iterator to const_iterator
 (and also all convertible iterators)
 Here, in this implementation, the iterators can be converted
 if the nodes can be converted"
	end

	operation 42693047 "operator *"
	  const cpp_inline public return_type class_ref 3114039 // _Type
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mpNode->getRef(); };
"
	  
	  
	  
	  
	  comment "Dereference operator.  Used to get at the juicy insides.
"
	end

	operation 42693175 "operator ->"
	  const cpp_inline public return_type class_ref 3114039 // _Type
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return &(mpNode->getRef()); };
"
	  
	  
	  
	  
	end

	operation 42693303 "operator =="
	  const cpp_inline public explicit_return_type "bool"
	  nparams 1
	    param in name "right" type class_ref 3113783 // _Iter
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { 
            return mpNode == right.mpNode; };
"
	  
	  
	  
	  
	  comment "Iterator comparison.
"
	end

	operation 42693431 "operator !="
	  const cpp_inline public explicit_return_type "bool"
	  nparams 1
	    param in name "right" type class_ref 3113783 // _Iter
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { 
            return mpNode != right.mpNode; };
"
	  
	  
	  
	  
	end

	operation 42693559 "operator =="
	  stereotype "template"
	  const cpp_inline public explicit_return_type "bool"
	  nparams 1
	    param in name "right" explicit_type "OTHER"
	  cpp_decl "    ${comment}template<typename OTHER>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { 
            return mpNode == right.mpNode; };
"
	  
	  
	  
	  
	  comment "handle comparisons between iterator and const_iterator
"
	end

	operation 42693687 "operator !="
	  stereotype "template"
	  const cpp_inline public explicit_return_type "bool"
	  nparams 1
	    param in name "right" explicit_type "OTHER"
	  cpp_decl "    ${comment}template<typename OTHER>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { 
            return mpNode != right.mpNode; };
"
	  
	  
	  
	  
	end

	operation 42693815 "operator ++"
	  cpp_inline public return_type class_ref 3113783 // _Iter
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {     // pre-increment
            mpNode = mpNode->getNext();
            return *this;
        };
"
	  
	  
	  
	  
	  comment "Incr/decr, used to move through the list.
"
	end

	operation 42693943 "operator ++"
	  cpp_inline public return_type class_ref 3113783 // _Iter
	  nparams 1
	    param in name "" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {    // post-increment
            _Iter tmp(*this);
            mpNode = mpNode->getNext();
            return tmp;
        };
"
	  
	  
	  
	  
	end

	operation 42694071 "operator --"
	  cpp_inline public return_type class_ref 3113783 // _Iter
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {     // pre-increment
            mpNode = mpNode->getPrev();
            return *this;
        };
"
	  
	  
	  
	  
	end

	operation 42694199 "operator --"
	  cpp_inline public return_type class_ref 3113783 // _Iter
	  nparams 1
	    param in name "" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {   // post-increment
            _Iter tmp(*this);
            mpNode = mpNode->getPrev();
            return tmp;
        };
"
	  
	  
	  
	  
	end

	operation 42694327 "getNode"
	  const cpp_inline public return_type class_ref 3113911 // _NodePtr
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mpNode; };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 6501559 // mpNode (<directional composition>)
	  relation 6501559 *-->
	    a role_name "mpNode" public
	      comment " should be private, but older gcc fails "
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 6501559 // mpNode (<directional composition>)
	    b parent class_ref 3113911 // _NodePtr
	end

	classrelation 6501687 // <dependency>
	  relation 6501687 -_->
	    stereotype "friend"
	    a public
	      cpp default "Generated"
	      classrelation_ref 6501687 // <dependency>
	    b parent class_ref 3112631 // List
	end
      end

      class 3113015 "CONST_ITERATOR"
	visibility package stereotype "struct"
	nformals 1
	formal name "TYPE" type "typename" explicit_default_value ""
	  explicit_extends ""
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	class 3113143 "NodePtr"
	  visibility package stereotype "typedef" base_type class_ref 3112759 // _Node
	  cpp_decl "${comment}typedef ${type}const *  ${name};
"
	  java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  classrelation 6501303 // <dependency>
	    relation 6501303 -_->
	      a public
		cpp default "#include in source"
		classrelation_ref 6501303 // <dependency>
	      b parent class_ref 3112759 // _Node
	  end
	end

	class 3113271 "Type"
	  visibility package stereotype "typedef" explicit_base_type "TYPE"
	  cpp_decl "${comment}typedef  const ${type} ${name};
"
	  java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	end
      end

      class 3113399 "NON_CONST_ITERATOR"
	visibility package stereotype "struct"
	nformals 1
	formal name "TYPE" type "typename" explicit_default_value ""
	  explicit_extends ""
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	class 3113527 "NodePtr"
	  visibility package stereotype "typedef" base_type class_ref 3112759 // _Node
	  cpp_decl "${comment}typedef ${type}*  ${name};
"
	  java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  classrelation 6501431 // <dependency>
	    relation 6501431 -_->
	      a public
		cpp default "#include in source"
		classrelation_ref 6501431 // <dependency>
	      b parent class_ref 3112759 // _Node
	  end
	end

	class 3113655 "Type"
	  visibility package stereotype "typedef" explicit_base_type "TYPE"
	  cpp_decl "${comment}typedef ${type} ${name};
"
	  java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	end
      end

      operation 42694455 "List"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {
        prep();
    };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 42694583 "List"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "src" type class_ref 3112631 // List
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract} {      // copy-constructor
        prep();
        insert(begin(), src.begin(), src.end());
    };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 42694711 "~List"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
        clear();
        delete[] (unsigned char*) mpMiddle;
    };
"
	
	
	
	
      end

      class 3114167 "iterator"
	visibility package stereotype "typedef" explicit_base_type "_ListIterator<T, NON_CONST_ITERATOR>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      class 3114295 "const_iterator"
	visibility package stereotype "typedef" explicit_base_type "_ListIterator<T, CONST_ITERATOR>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      operation 42694839 "operator ="
	preserve_cpp_body_indent cpp_inline public return_type class_ref 3112631 // List
	nparams 1
	  param in name "right" type class_ref 3112631 // List
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Assignment operator.
//
//The simplest way to do this would be to clear out the target list and
//fill it with the source.  However, we can speed things along by
//re-using existing elements.
//

${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 42694967 "empty"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mpMiddle->getNext() == mpMiddle; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " returns true if the list is empty "
      end

      operation 42695095 "size"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return size_t(distance(begin(), end()));
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " return #of elements in list "
      end

      operation 42695223 "begin"
	cpp_inline public return_type class_ref 3114167 // iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { 
        return iterator(mpMiddle->getNext()); 
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the first element or one past the last element.  The
_Node* we're returning is converted to an \"iterator\" by a
constructor in _ListIterator.
"
      end

      operation 42695351 "begin"
	const cpp_inline public return_type class_ref 3114295 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { 
        return const_iterator(const_cast<_Node const*>(mpMiddle->getNext())); 
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 42695479 "end"
	cpp_inline public return_type class_ref 3114167 // iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { 
        return iterator(mpMiddle); 
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 42695607 "end"
	const cpp_inline public return_type class_ref 3114295 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { 
        return const_iterator(const_cast<_Node const*>(mpMiddle)); 
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 42695735 "push_front"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { insert(begin(), val); };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " add the object to the head or tail of the list "
      end

      operation 42695863 "push_back"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { insert(end(), val); };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 42695991 "insert"
	cpp_inline public return_type class_ref 3114167 // iterator
	nparams 2
	  param in name "posn" type class_ref 3114167 // iterator
	  param in name "val" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        _Node* newNode = new _Node(val);        // alloc & copy-construct
        newNode->setNext(posn.getNode());
        newNode->setPrev(posn.getNode()->getPrev());
        posn.getNode()->getPrev()->setNext(newNode);
        posn.getNode()->setPrev(newNode);
        return iterator(newNode);
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " insert before the current node; returns iterator at new node "
      end

      operation 42696119 "insert"
	cpp_inline public explicit_return_type "void"
	nparams 3
	  param in name "posn" type class_ref 3114167 // iterator
	  param in name "first" type class_ref 3114295 // const_iterator
	  param in name "last" type class_ref 3114295 // const_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        for ( ; first != last; ++first)
            insert(posn, *first);
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " insert a range of elements before the current node "
      end

      operation 42696247 "erase"
	cpp_inline public return_type class_ref 3114167 // iterator
	nparams 1
	  param in name "posn" type class_ref 3114167 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        _Node* pNext = posn.getNode()->getNext();
        _Node* pPrev = posn.getNode()->getPrev();
        pPrev->setNext(pNext);
        pNext->setPrev(pPrev);
        delete posn.getNode();
        return iterator(pNext);
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " remove one entry; returns iterator at next node "
      end

      operation 42696375 "erase"
	cpp_inline public return_type class_ref 3114167 // iterator
	nparams 2
	  param in name "first" type class_ref 3114167 // iterator
	  param in name "last" type class_ref 3114167 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        while (first != last)
            erase(first++);     // don't erase than incr later!
        return iterator(last);
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " remove a range of elements "
      end

      operation 42696503 "clear"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        _Node* pCurrent = mpMiddle->getNext();
        _Node* pNext;

        while (pCurrent != mpMiddle) {
            pNext = pCurrent->getNext();
            delete pCurrent;
            pCurrent = pNext;
        }
        mpMiddle->setPrev(mpMiddle);
        mpMiddle->setNext(mpMiddle);
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " remove all contents of the list "
      end

      operation 42696631 "distance"
	stereotype "template"
	const cpp_inline public explicit_return_type "ptrdiff_t"
	nparams 2
	  param in name "first" explicit_type "_ListIterator<U, CL>"
	  param in name "last" explicit_type "_ListIterator<U, CR>"
	cpp_decl "    ${comment}template<typename U, 
        template <class> class CL, 
        template <class> class CR>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        ptrdiff_t count = 0;
        while (first != last) {
            ++first;
            ++count;
        }
        return count;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Measure the distance between two iterators.  On exist, \"first\"
will be equal to \"last\".  The iterators must refer to the same
list.

FIXME: This is actually a generic iterator function. It should be a 
template function at the top-level with specializations for things like
vector<>, which can just do pointer math). Here we limit it to
_ListIterator of the same type but different constness.
"
      end

      operation 42696759 "prep"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        mpMiddle = (_Node*) new unsigned char[sizeof(_Node)];
        mpMiddle->setPrev(mpMiddle);
        mpMiddle->setNext(mpMiddle);
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "I want a _Node but don't need it to hold valid data.  More
to the point, I don't want T's constructor to fire, since it
might have side-effects or require arguments.  So, we do this
slightly uncouth storage alloc.
"
      end

      classrelation 6501815 // mpMiddle (<unidirectional association>)
	relation 6501815 --->
	  a role_name "mpMiddle" private
	    comment "This node plays the role of \"pointer to head\" and \"pointer to tail\".
It sits in the middle of a circular list of nodes.  The iterator
runs around the circle until it encounters this one.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6501815 // mpMiddle (<unidirectional association>)
	  b parent class_ref 3112759 // _Node
      end
    end
  end

  deploymentview 275255 "android sysutils"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 1552183 "List"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3112631 // List
      end
    end
  end
end
