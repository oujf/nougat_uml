format 213
"std" // android::system::core::libmemunreachable::std
  revision 1
  modified_by 55 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "D:/Workspace/AndroidSourceCode/nougat_src/system/core/libmemunreachable/"
  cpp_src_dir "D:/Workspace/AndroidSourceCode/nougat_src/system/core/libmemunreachable/"
  cpp_namespace "std"
  classview 316215 "libmemunreachable"
    
    classdiagramsettings member_max_width 0 end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 3148343 "hash<Leak::Backtrace>"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Custom std::hash specialization so that Leak::Backtrace can be used
 as a key in std::unordered_map."
      operation 42838327 "operator ()"
	const cpp_inline public explicit_return_type "std::size_t"
	nparams 1
	  param in name "key" type class_ref 3148599 // Backtrace
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    std::size_t seed = 0;

    hash_combine(seed, key.num_frames);
    for (size_t i = 0; i < key.num_frames; i++) {
      hash_combine(seed, key.frames[i]);
    }

    return seed;
  };
"
	
	
	
	
      end

      operation 42838455 "hash_combine"
	stereotype "template"
	const cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "seed" explicit_type "std::size_t"
	  param in name "v" explicit_type "T"
	cpp_decl "    ${comment}template<typename T>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    std::hash<T> hasher;
    seed ^= hasher(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end
  end

  deploymentview 277175 "std"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 1562039 "Leak"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3148343 // hash<Leak::Backtrace>
      end
    end
  end
end
