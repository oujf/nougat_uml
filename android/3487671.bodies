class AudioHotplugThread
!!!43897527.cpp!!!	~AudioHotplugThread()
    if (mShutdownEventFD != -1) {
        ::close(mShutdownEventFD);
    }
!!!43897655.cpp!!!	start() : bool
    mShutdownEventFD = eventfd(0, EFD_NONBLOCK);
    if (mShutdownEventFD == -1) {
        return false;
    }

    return (run(kThreadName) == NO_ERROR);
!!!43897783.cpp!!!	shutdown() : void
    requestExit();
    uint64_t tmp = 1;
    ::write(mShutdownEventFD, &tmp, sizeof(tmp));
    join();
!!!43897911.cpp!!!	parseCaptureDeviceName(in name : char, inout card : uint, inout device : uint) : bool
    char deviceType;
    int ret = sscanf(name, "pcmC%uD%u%c", card, device, &deviceType);
    return (ret == 3 && deviceType == kDeviceTypeCapture);
!!!43898039.cpp!!!	getDeviceInfo(in pcmCard : uint, in pcmDevice : uint, inout info : AudioHotplugThread::DeviceInfo) : bool
    bool result = false;
    int ret;
    int len;
    char cardName[64] = "";

    String8 devicePath = String8::format("%s/pcmC%dD%d%c",
            kAlsaDeviceDir, pcmCard, pcmDevice, kDeviceTypeCapture);

    ALOGD("AudioHotplugThread::getDeviceInfo opening %s", devicePath.string());
    int alsaFD = open(devicePath.string(), O_RDONLY);
    if (alsaFD == -1) {
        ALOGE("AudioHotplugThread::getDeviceInfo open failed for %s", devicePath.string());
        goto done;
    }

    // query the device's ALSA configuration space
    struct snd_pcm_hw_params params;
    param_init(&params);
    ret = ioctl(alsaFD, SNDRV_PCM_IOCTL_HW_REFINE, &params);
    if (ret == -1) {
        ALOGE("AudioHotplugThread: refine ioctl failed");
        goto done;
    }

    info->pcmCard = pcmCard;
    info->pcmDevice = pcmDevice;
    getAlsaParamInterval(params, SNDRV_PCM_HW_PARAM_SAMPLE_BITS,
                         &info->minSampleBits, &info->maxSampleBits);
    getAlsaParamInterval(params, SNDRV_PCM_HW_PARAM_CHANNELS,
                         &info->minChannelCount, &info->maxChannelCount);
    getAlsaParamInterval(params, SNDRV_PCM_HW_PARAM_RATE,
                         &info->minSampleRate, &info->maxSampleRate);

    // Ugly hack to recognize Remote mic and mark it for voice recognition
    info->forVoiceRecognition = false;
    len = s_get_alsa_card_name(cardName, sizeof(cardName), pcmCard);
    ALOGD("AudioHotplugThread get_alsa_card_name returned %d, %s", len, cardName);
    if (len > 0) {
        if (strcmp(ANDROID_TV_REMOTE_AUDIO_DEVICE_NAME, cardName) == 0) {
            ALOGD("AudioHotplugThread found Android TV remote mic on Card %d, for VOICE_RECOGNITION", pcmCard);
            info->forVoiceRecognition = true;
        }
    }

    result = true;

done:
    if (alsaFD != -1) {
        close(alsaFD);
    }
    return result;
!!!43898167.cpp!!!	threadLoop() : bool
    int inotifyFD = -1;
    int watchFD = -1;
    int flags;

    // watch for changes to the ALSA device directory
    inotifyFD = inotify_init();
    if (inotifyFD == -1) {
        ALOGE("AudioHotplugThread: inotify_init failed");
        goto done;
    }
    flags = fcntl(inotifyFD, F_GETFL, 0);
    if (flags == -1) {
        ALOGE("AudioHotplugThread: F_GETFL failed");
        goto done;
    }
    if (fcntl(inotifyFD, F_SETFL, flags | O_NONBLOCK) == -1) {
        ALOGE("AudioHotplugThread: F_SETFL failed");
        goto done;
    }

    watchFD = inotify_add_watch(inotifyFD, kAlsaDeviceDir,
                                IN_CREATE | IN_DELETE);
    if (watchFD == -1) {
        ALOGE("AudioHotplugThread: inotify_add_watch failed");
        goto done;
    }

    // check for any existing capture devices
    scanForDevice();

    while (!exitPending()) {
        // wait for a change to the ALSA directory or a shutdown signal
        struct pollfd fds[2] = {
            { inotifyFD, POLLIN, 0 },
            { mShutdownEventFD, POLLIN, 0 }
        };
        int ret = poll(fds, NELEM(fds), -1);
        if (ret == -1) {
            ALOGE("AudioHotplugThread: poll failed");
            break;
        } else if (fds[1].revents & POLLIN) {
            // shutdown requested
            break;
        }

        if (!(fds[0].revents & POLLIN)) {
            continue;
        }

        // parse the filesystem change events
        char eventBuf[256];
        ret = read(inotifyFD, eventBuf, sizeof(eventBuf));
        if (ret == -1) {
            ALOGE("AudioHotplugThread: read failed");
            break;
        }

        for (int i = 0; i < ret;) {
            if ((ret - i) < (int)sizeof(struct inotify_event)) {
                ALOGE("AudioHotplugThread: read an invalid inotify_event");
                break;
            }

            struct inotify_event *event =
                    reinterpret_cast<struct inotify_event*>(eventBuf + i);

            if ((ret - i) < (int)(sizeof(struct inotify_event) + event->len)) {
                ALOGE("AudioHotplugThread: read a bad inotify_event length");
                break;
            }

            char *name = ((char *) event) +
                    offsetof(struct inotify_event, name);

            unsigned int pcmCard, pcmDevice;
            if (parseCaptureDeviceName(name, &pcmCard, &pcmDevice)) {
                if (event->mask & IN_CREATE) {
                    // Some devices can not be opened immediately after the
                    // inotify event occurs.  Add a delay to avoid these
                    // races.  (50ms was chosen arbitrarily)
                    const int kOpenTimeoutMs = 50;
                    struct pollfd pfd = {mShutdownEventFD, POLLIN, 0};
                    if (poll(&pfd, 1, kOpenTimeoutMs) == -1) {
                        ALOGE("AudioHotplugThread: poll failed");
                        break;
                    } else if (pfd.revents & POLLIN) {
                        // shutdown requested
                        break;
                    }

                    DeviceInfo deviceInfo;
                    if (getDeviceInfo(pcmCard, pcmDevice, &deviceInfo)) {
                        mCallback.onDeviceFound(deviceInfo);
                    }
                } else if (event->mask & IN_DELETE) {
                    mCallback.onDeviceRemoved(pcmCard, pcmDevice);
                }
            }

            i += sizeof(struct inotify_event) + event->len;
        }
    }

done:
    if (watchFD != -1) {
        inotify_rm_watch(inotifyFD, watchFD);
    }
    if (inotifyFD != -1) {
        close(inotifyFD);
    }

    return false;
!!!43898295.cpp!!!	scanForDevice() : void
    DIR* alsaDir;
    DeviceInfo deviceInfo;

    alsaDir = opendir(kAlsaDeviceDir);
    if (alsaDir == NULL)
        return;

    while (true) {
        struct dirent entry, *result;
        int ret = readdir_r(alsaDir, &entry, &result);
        if (ret != 0 || result == NULL)
            break;
        unsigned int pcmCard, pcmDevice;
        if (parseCaptureDeviceName(entry.d_name, &pcmCard, &pcmDevice)) {
            if (getDeviceInfo(pcmCard, pcmDevice, &deviceInfo)) {
                mCallback.onDeviceFound(deviceInfo);
            }
        }
    }

    closedir(alsaDir);
