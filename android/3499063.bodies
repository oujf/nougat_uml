class Scene
!!!43965751.cpp!!!	Scene(in sensorWidthPx : int, in sensorHeightPx : int, in sensorSensitivity : float)
    // Map scene to sensor pixels
    if (mSensorWidth > mSensorHeight) {
        mMapDiv = (mSensorWidth / (kSceneWidth + 1) ) + 1;
    } else {
        mMapDiv = (mSensorHeight / (kSceneHeight + 1) ) + 1;
    }
    mOffsetX = (kSceneWidth * mMapDiv - mSensorWidth) / 2;
    mOffsetY = (kSceneHeight * mMapDiv - mSensorHeight) / 2;

    // Assume that sensor filters are sRGB primaries to start
    mFilterR[0]  =  3.2406f; mFilterR[1]  = -1.5372f; mFilterR[2]  = -0.4986f;
    mFilterGr[0] = -0.9689f; mFilterGr[1] =  1.8758f; mFilterGr[2] =  0.0415f;
    mFilterGb[0] = -0.9689f; mFilterGb[1] =  1.8758f; mFilterGb[2] =  0.0415f;
    mFilterB[0]  =  0.0557f; mFilterB[1]  = -0.2040f; mFilterB[2]  =  1.0570f;


!!!43966007.cpp!!!	setColorFilterXYZ(in rX : float, in rY : float, in rZ : float, in grX : float, in grY : float, in grZ : float, in gbX : float, in gbY : float, in gbZ : float, in bX : float, in bY : float, in bZ : float) : void
    mFilterR[0]  = rX;  mFilterR[1]  = rY;  mFilterR[2]  = rZ;
    mFilterGr[0] = grX; mFilterGr[1] = grY; mFilterGr[2] = grZ;
    mFilterGb[0] = gbX; mFilterGb[1] = gbY; mFilterGb[2] = gbZ;
    mFilterB[0]  = bX;  mFilterB[1]  = bY;  mFilterB[2]  = bZ;
!!!43966135.cpp!!!	setHour(in hour : int) : void
    ALOGV("Hour set to: %d", hour);
    mHour = hour % 24;
!!!43966263.cpp!!!	getHour() : int
    return mHour;
!!!43966391.cpp!!!	setExposureDuration(in seconds : float) : void
    mExposureDuration = seconds;
!!!43966519.cpp!!!	calculateScene(in time : nsecs_t) : void
    // Calculate time fractions for interpolation
    int timeIdx = mHour / kTimeStep;
    int nextTimeIdx = (timeIdx + 1) % (24 / kTimeStep);
    const nsecs_t kOneHourInNsec = 1e9 * 60 * 60;
    nsecs_t timeSinceIdx = (mHour - timeIdx * kTimeStep) * kOneHourInNsec + time;
    float timeFrac = timeSinceIdx / (float)(kOneHourInNsec * kTimeStep);

    // Determine overall sunlight levels
    float sunLux =
            kSunlight[timeIdx] * (1 - timeFrac) +
            kSunlight[nextTimeIdx] * timeFrac;
    ALOGV("Sun lux: %f", sunLux);

    float sunShadeLux = sunLux * (kDaylightShadeIllum / kDirectSunIllum);

    // Determine sun/shade illumination chromaticity
    float currentSunXY[2];
    float currentShadeXY[2];

    const float *prevSunXY, *nextSunXY;
    const float *prevShadeXY, *nextShadeXY;
    if (kSunlight[timeIdx] == kSunsetIllum ||
            kSunlight[timeIdx] == kTwilightIllum) {
        prevSunXY = kSunsetXY;
        prevShadeXY = kSunsetXY;
    } else {
        prevSunXY = kDirectSunlightXY;
        prevShadeXY = kDaylightXY;
    }
    if (kSunlight[nextTimeIdx] == kSunsetIllum ||
            kSunlight[nextTimeIdx] == kTwilightIllum) {
        nextSunXY = kSunsetXY;
        nextShadeXY = kSunsetXY;
    } else {
        nextSunXY = kDirectSunlightXY;
        nextShadeXY = kDaylightXY;
    }
    currentSunXY[0] = prevSunXY[0] * (1 - timeFrac) +
            nextSunXY[0] * timeFrac;
    currentSunXY[1] = prevSunXY[1] * (1 - timeFrac) +
            nextSunXY[1] * timeFrac;

    currentShadeXY[0] = prevShadeXY[0] * (1 - timeFrac) +
            nextShadeXY[0] * timeFrac;
    currentShadeXY[1] = prevShadeXY[1] * (1 - timeFrac) +
            nextShadeXY[1] * timeFrac;

    ALOGV("Sun XY: %f, %f, Shade XY: %f, %f",
            currentSunXY[0], currentSunXY[1],
            currentShadeXY[0], currentShadeXY[1]);

    // Converting for xyY to XYZ:
    // X = Y / y * x
    // Y = Y
    // Z = Y / y * (1 - x - y);
    float sunXYZ[3] = {
        sunLux / currentSunXY[1] * currentSunXY[0],
        sunLux,
        sunLux / currentSunXY[1] *
        (1 - currentSunXY[0] - currentSunXY[1])
    };
    float sunShadeXYZ[3] = {
        sunShadeLux / currentShadeXY[1] * currentShadeXY[0],
        sunShadeLux,
        sunShadeLux / currentShadeXY[1] *
        (1 - currentShadeXY[0] - currentShadeXY[1])
    };
    ALOGV("Sun XYZ: %f, %f, %f",
            sunXYZ[0], sunXYZ[1], sunXYZ[2]);
    ALOGV("Sun shade XYZ: %f, %f, %f",
            sunShadeXYZ[0], sunShadeXYZ[1], sunShadeXYZ[2]);

    // Determine moonlight levels
    float moonLux =
            kMoonlight[timeIdx] * (1 - timeFrac) +
            kMoonlight[nextTimeIdx] * timeFrac;
    float moonShadeLux = moonLux * (kDaylightShadeIllum / kDirectSunIllum);

    float moonXYZ[3] = {
        moonLux / kMoonlightXY[1] * kMoonlightXY[0],
        moonLux,
        moonLux / kMoonlightXY[1] *
        (1 - kMoonlightXY[0] - kMoonlightXY[1])
    };
    float moonShadeXYZ[3] = {
        moonShadeLux / kMoonlightXY[1] * kMoonlightXY[0],
        moonShadeLux,
        moonShadeLux / kMoonlightXY[1] *
        (1 - kMoonlightXY[0] - kMoonlightXY[1])
    };

    // Determine starlight level
    const float kClearNightXYZ[3] = {
        kClearNightIllum / kMoonlightXY[1] * kMoonlightXY[0],
        kClearNightIllum,
        kClearNightIllum / kMoonlightXY[1] *
            (1 - kMoonlightXY[0] - kMoonlightXY[1])
    };

    // Calculate direct and shaded light
    float directIllumXYZ[3] = {
        sunXYZ[0] + moonXYZ[0] + kClearNightXYZ[0],
        sunXYZ[1] + moonXYZ[1] + kClearNightXYZ[1],
        sunXYZ[2] + moonXYZ[2] + kClearNightXYZ[2],
    };

    float shadeIllumXYZ[3] = {
        kClearNightXYZ[0],
        kClearNightXYZ[1],
        kClearNightXYZ[2]
    };

    shadeIllumXYZ[0] += (mHour < kSunOverhead) ? sunXYZ[0] : sunShadeXYZ[0];
    shadeIllumXYZ[1] += (mHour < kSunOverhead) ? sunXYZ[1] : sunShadeXYZ[1];
    shadeIllumXYZ[2] += (mHour < kSunOverhead) ? sunXYZ[2] : sunShadeXYZ[2];

    // Moon up period covers 23->0 transition, shift for simplicity
    int adjHour = (mHour + 12) % 24;
    int adjMoonOverhead = (kMoonOverhead + 12 ) % 24;
    shadeIllumXYZ[0] += (adjHour < adjMoonOverhead) ?
            moonXYZ[0] : moonShadeXYZ[0];
    shadeIllumXYZ[1] += (adjHour < adjMoonOverhead) ?
            moonXYZ[1] : moonShadeXYZ[1];
    shadeIllumXYZ[2] += (adjHour < adjMoonOverhead) ?
            moonXYZ[2] : moonShadeXYZ[2];

    ALOGV("Direct XYZ: %f, %f, %f",
            directIllumXYZ[0],directIllumXYZ[1],directIllumXYZ[2]);
    ALOGV("Shade XYZ: %f, %f, %f",
            shadeIllumXYZ[0], shadeIllumXYZ[1], shadeIllumXYZ[2]);

    for (int i = 0; i < NUM_MATERIALS; i++) {
        // Converting for xyY to XYZ:
        // X = Y / y * x
        // Y = Y
        // Z = Y / y * (1 - x - y);
        float matXYZ[3] = {
            kMaterials_xyY[i][2] / kMaterials_xyY[i][1] *
              kMaterials_xyY[i][0],
            kMaterials_xyY[i][2],
            kMaterials_xyY[i][2] / kMaterials_xyY[i][1] *
              (1 - kMaterials_xyY[i][0] - kMaterials_xyY[i][1])
        };

        if (kMaterialsFlags[i] == 0 || kMaterialsFlags[i] & kSky) {
            matXYZ[0] *= directIllumXYZ[0];
            matXYZ[1] *= directIllumXYZ[1];
            matXYZ[2] *= directIllumXYZ[2];
        } else if (kMaterialsFlags[i] & kShadowed) {
            matXYZ[0] *= shadeIllumXYZ[0];
            matXYZ[1] *= shadeIllumXYZ[1];
            matXYZ[2] *= shadeIllumXYZ[2];
        } // else if (kMaterialsFlags[i] * kSelfLit), do nothing

        ALOGV("Mat %d XYZ: %f, %f, %f", i, matXYZ[0], matXYZ[1], matXYZ[2]);
        float luxToElectrons = mSensorSensitivity * mExposureDuration /
                (kAperture * kAperture);
        mCurrentColors[i*NUM_CHANNELS + 0] =
                (mFilterR[0] * matXYZ[0] +
                 mFilterR[1] * matXYZ[1] +
                 mFilterR[2] * matXYZ[2])
                * luxToElectrons;
        mCurrentColors[i*NUM_CHANNELS + 1] =
                (mFilterGr[0] * matXYZ[0] +
                 mFilterGr[1] * matXYZ[1] +
                 mFilterGr[2] * matXYZ[2])
                * luxToElectrons;
        mCurrentColors[i*NUM_CHANNELS + 2] =
                (mFilterGb[0] * matXYZ[0] +
                 mFilterGb[1] * matXYZ[1] +
                 mFilterGb[2] * matXYZ[2])
                * luxToElectrons;
        mCurrentColors[i*NUM_CHANNELS + 3] =
                (mFilterB[0] * matXYZ[0] +
                 mFilterB[1] * matXYZ[1] +
                 mFilterB[2] * matXYZ[2])
                * luxToElectrons;

        ALOGV("Color %d RGGB: %d, %d, %d, %d", i,
                mCurrentColors[i*NUM_CHANNELS + 0],
                mCurrentColors[i*NUM_CHANNELS + 1],
                mCurrentColors[i*NUM_CHANNELS + 2],
                mCurrentColors[i*NUM_CHANNELS + 3]);
    }
    // Shake viewpoint; horizontal and vertical sinusoids at roughly
    // human handshake frequencies
    mHandshakeX =
            ( kFreq1Magnitude * std::sin(kHorizShakeFreq1 * timeSinceIdx) +
              kFreq2Magnitude * std::sin(kHorizShakeFreq2 * timeSinceIdx) ) *
            mMapDiv * kShakeFraction;

    mHandshakeY =
            ( kFreq1Magnitude * std::sin(kVertShakeFreq1 * timeSinceIdx) +
              kFreq2Magnitude * std::sin(kVertShakeFreq2 * timeSinceIdx) ) *
            mMapDiv * kShakeFraction;

    // Set starting pixel
    setReadoutPixel(0,0);
!!!43966647.cpp!!!	setReadoutPixel(in x : int, in y : int) : void
    mCurrentX = x;
    mCurrentY = y;
    mSubX = (x + mOffsetX + mHandshakeX) % mMapDiv;
    mSubY = (y + mOffsetY + mHandshakeY) % mMapDiv;
    mSceneX = (x + mOffsetX + mHandshakeX) / mMapDiv;
    mSceneY = (y + mOffsetY + mHandshakeY) / mMapDiv;
    mSceneIdx = mSceneY * kSceneWidth + mSceneX;
    mCurrentSceneMaterial = &(mCurrentColors[kScene[mSceneIdx]]);
!!!43966775.cpp!!!	getPixelElectrons() : uint32_t
    const uint32_t *pixel = mCurrentSceneMaterial;
    mCurrentX++;
    mSubX++;
    if (mCurrentX >= mSensorWidth) {
        mCurrentX = 0;
        mCurrentY++;
        if (mCurrentY >= mSensorHeight) mCurrentY = 0;
        setReadoutPixel(mCurrentX, mCurrentY);
    } else if (mSubX > mMapDiv) {
        mSceneIdx++;
        mSceneX++;
        mCurrentSceneMaterial = &(mCurrentColors[kScene[mSceneIdx]]);
        mSubX = 0;
    }
    return pixel;
