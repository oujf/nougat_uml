class ChecksumCalculator
!!!43971383.cpp!!!	setVersion(in version : uint32_t) : bool
    if (version > kMaxVersion) {  // unsupported version
        LOG_CHECKSUMHELPER("%s: ChecksumCalculator Set Unsupported version Version %d\n",
                __FUNCTION__, m_version);
        return false;
    }
    if (m_isEncodingChecksum) { // setVersion is called in the middle of encoding checksums
        LOG_CHECKSUMHELPER("%s: called between addBuffer and writeChecksum\n",
                __FUNCTION__);
        return false;
    }
    m_version = version;
    LOG_CHECKSUMHELPER("%s: ChecksumCalculator Set Version %d\n", __FUNCTION__,
                m_version);
    return true;
!!!43971511.cpp!!!	getMaxVersion() : uint32_t
return kMaxVersion;
!!!43971639.cpp!!!	getMaxVersionStr() : char
return kMaxVersionStr;
!!!43971767.cpp!!!	getMaxVersionStrPrefix() : char
return kMaxVersionStrPrefix;
!!!43971895.cpp!!!	checksumByteSize() : size_t
    switch (m_version) {
        case 0:
            return 0;
        case 1:
            return sizeof(uint32_t) + sizeof(m_numWrite);
        default:
            return 0;
    }
!!!43972023.cpp!!!	addBuffer(in buf : void, in packetLen : size_t) : void
    m_isEncodingChecksum = true;
    switch (m_version) {
        case 1:
            m_v1BufferTotalLength += packetLen;
            break;
    }
!!!43972151.cpp!!!	writeChecksum(inout outputChecksum : void, in outputChecksumLen : size_t) : bool
    if (outputChecksumLen < checksumByteSize()) return false;
    char *checksumPtr = (char *)outputChecksum;
    switch (m_version) {
        case 1: { // protocol v1 is to reverse the packetLen and write it at the end
            uint32_t val = computeV1Checksum();
            memcpy(checksumPtr, &val, sizeof(val));
            memcpy(checksumPtr+sizeof(val), &m_numWrite, sizeof(m_numWrite));
            break;
        }
    }
    resetChecksum();
    m_numWrite++;
    return true;
!!!43972279.cpp!!!	resetChecksum() : void
    switch (m_version) {
        case 1:
            m_v1BufferTotalLength = 0;
            break;
    }
    m_isEncodingChecksum = false;
!!!43972407.cpp!!!	validate(in expectedChecksum : void, in expectedChecksumLen : size_t) : bool
    size_t checksumSize = checksumByteSize();
    if (expectedChecksumLen != checksumSize) {
        m_numRead++;
        resetChecksum();
        return false;
    }
    // buffers for computing the checksum
    unsigned char sChecksumBuffer[kMaxChecksumSize];
    switch (m_version) {
        case 1: {
            uint32_t val = computeV1Checksum();
            memcpy(sChecksumBuffer, &val, sizeof(val));
            memcpy(sChecksumBuffer+sizeof(val), &m_numRead, sizeof(m_numRead));
            break;
        }
    }
    bool isValid = !memcmp(sChecksumBuffer, expectedChecksum, checksumSize);
    m_numRead++;
    resetChecksum();
    return isValid;
!!!43972535.cpp!!!	computeV1Checksum() : uint32_t
    uint32_t revLen = m_v1BufferTotalLength;
    revLen = (revLen & 0xffff0000) >> 16 | (revLen & 0x0000ffff) << 16;
    revLen = (revLen & 0xff00ff00) >> 8 | (revLen & 0x00ff00ff) << 8;
    revLen = (revLen & 0xf0f0f0f0) >> 4 | (revLen & 0x0f0f0f0f) << 4;
    revLen = (revLen & 0xcccccccc) >> 2 | (revLen & 0x33333333) << 2;
    revLen = (revLen & 0xaaaaaaaa) >> 1 | (revLen & 0x55555555) << 1;
    return revLen;
