class GLSharedGroup
!!!43980471.cpp!!!	refShaderDataLocked(in shaderIdx : ssize_t) : void
    assert(shaderIdx >= 0 && shaderIdx <= m_shaders.size());
    ShaderData* data = m_shaders.valueAt(shaderIdx);
    data->refcount++;
!!!43980599.cpp!!!	unrefShaderDataLocked(in shaderIdx : ssize_t) : void
    assert(shaderIdx >= 0 && shaderIdx <= m_shaders.size());
    ShaderData* data = m_shaders.valueAt(shaderIdx);
    if (--data->refcount == 0) {
        delete data;
        m_shaders.removeItemsAt(shaderIdx);
    }
!!!43980855.cpp!!!	~GLSharedGroup()
    m_buffers.clear();
    m_programs.clear();
    clearObjectMap(m_buffers);
    clearObjectMap(m_programs);
    clearObjectMap(m_shaders);
!!!43980983.cpp!!!	isObject(in obj : GLuint) : bool
    android::AutoMutex _lock(m_lock);
    return ((m_shaders.valueFor(obj)!=NULL) || (m_programs.valueFor(obj)!=NULL));
!!!43981111.cpp!!!	getBufferData(in bufferId : GLuint) : BufferData
    android::AutoMutex _lock(m_lock);
    return m_buffers.valueFor(bufferId);
!!!43981239.cpp!!!	addBufferData(in bufferId : GLuint, in size : GLsizeiptr, inout data : void) : void
    android::AutoMutex _lock(m_lock);
    m_buffers.add(bufferId, new BufferData(size, data));
!!!43981367.cpp!!!	updateBufferData(in bufferId : GLuint, in size : GLsizeiptr, inout data : void) : void
    android::AutoMutex _lock(m_lock);
    ssize_t idx = m_buffers.indexOfKey(bufferId);
    if (idx >= 0) {
        delete m_buffers.valueAt(idx);
        m_buffers.editValueAt(idx) = new BufferData(size, data);
    } else {
        m_buffers.add(bufferId, new BufferData(size, data));
    }
!!!43981495.cpp!!!	subUpdateBufferData(in bufferId : GLuint, in offset : GLintptr, in size : GLsizeiptr, inout data : void) : GLenum
    android::AutoMutex _lock(m_lock);
    BufferData * buf = m_buffers.valueFor(bufferId);
    if ((!buf) || (buf->m_size < offset+size) || (offset < 0) || (size<0)) return GL_INVALID_VALUE;

    //it's safe to update now
    memcpy((char*)buf->m_fixedBuffer.ptr() + offset, data, size);
    return GL_NO_ERROR;
!!!43981623.cpp!!!	deleteBufferData(in bufferId : GLuint) : void
    android::AutoMutex _lock(m_lock);
    ssize_t idx = m_buffers.indexOfKey(bufferId);
    if (idx >= 0) {
        delete m_buffers.valueAt(idx);
        m_buffers.removeItemsAt(idx);
    }
!!!43981751.cpp!!!	isProgram(in program : GLuint) : bool
    android::AutoMutex _lock(m_lock);
    ProgramData* pData = m_programs.valueFor(program);
    return (pData!=NULL);
!!!43981879.cpp!!!	isProgramInitialized(in program : GLuint) : bool
    android::AutoMutex _lock(m_lock);
    ProgramData* pData = m_programs.valueFor(program);
    if (pData)
    {
        return pData->isInitialized();
    }
    return false;
!!!43982007.cpp!!!	addProgramData(in program : GLuint) : void
    android::AutoMutex _lock(m_lock);
    ProgramData *pData = m_programs.valueFor(program);
    if (pData)
    {
        m_programs.removeItem(program);
        delete pData;
    }

    m_programs.add(program,new ProgramData());
!!!43982135.cpp!!!	initProgramData(in program : GLuint, in numIndexes : GLuint) : void
    android::AutoMutex _lock(m_lock);
    ProgramData *pData = m_programs.valueFor(program);
    if (pData)
    {
        pData->initProgramData(numIndexes);
    }
!!!43982263.cpp!!!	attachShader(in program : GLuint, in shader : GLuint) : void
    android::AutoMutex _lock(m_lock);
    ProgramData* programData = m_programs.valueFor(program);
    ssize_t idx = m_shaders.indexOfKey(shader);
    if (programData && idx >= 0) {
        if (programData->attachShader(shader)) {
            refShaderDataLocked(idx);
        }
    }
!!!43982391.cpp!!!	detachShader(in program : GLuint, in shader : GLuint) : void
    android::AutoMutex _lock(m_lock);
    ProgramData* programData = m_programs.valueFor(program);
    ssize_t idx = m_shaders.indexOfKey(shader);
    if (programData && idx >= 0) {
        if (programData->detachShader(shader)) {
            unrefShaderDataLocked(idx);
        }
    }
!!!43982519.cpp!!!	deleteProgramData(in program : GLuint) : void
    android::AutoMutex _lock(m_lock);
    ProgramData *pData = m_programs.valueFor(program);
    if (pData)
        delete pData;
    m_programs.removeItem(program);
!!!43982647.cpp!!!	setProgramIndexInfo(in program : GLuint, in index : GLuint, in base : GLint, in size : GLint, in type : GLenum, in name : char) : void
    android::AutoMutex _lock(m_lock);
    ProgramData* pData = m_programs.valueFor(program);
    if (pData)
    {
        pData->setIndexInfo(index,base,size,type);

        if (type == GL_SAMPLER_2D) {
            size_t n = pData->getNumShaders();
            for (size_t i = 0; i < n; i++) {
                GLuint shaderId = pData->getShader(i);
                ShaderData* shader = m_shaders.valueFor(shaderId);
                if (!shader) continue;
                ShaderData::StringList::iterator nameIter = shader->samplerExternalNames.begin();
                ShaderData::StringList::iterator nameEnd  = shader->samplerExternalNames.end();
                while (nameIter != nameEnd) {
                    if (*nameIter == name) {
                        pData->setIndexFlags(index, ProgramData::INDEX_FLAG_SAMPLER_EXTERNAL);
                        break;
                    }
                    ++nameIter;
                }
            }
        }
    }
!!!43982775.cpp!!!	getProgramUniformType(in program : GLuint, in location : GLint) : GLenum
    android::AutoMutex _lock(m_lock);
    ProgramData* pData = m_programs.valueFor(program);
    GLenum type=0;
    if (pData)
    {
        type = pData->getTypeForLocation(location);
    }
    return type;
!!!43982903.cpp!!!	setupLocationShiftWAR(in program : GLuint) : void
    android::AutoMutex _lock(m_lock);
    ProgramData* pData = m_programs.valueFor(program);
    if (pData) pData->setupLocationShiftWAR();
!!!43983031.cpp!!!	locationWARHostToApp(in program : GLuint, in hostLoc : GLint, in arrIndex : GLint) : GLint
    android::AutoMutex _lock(m_lock);
    ProgramData* pData = m_programs.valueFor(program);
    if (pData) return pData->locationWARHostToApp(hostLoc, arrIndex);
    else return hostLoc;
!!!43983159.cpp!!!	locationWARAppToHost(in program : GLuint, in appLoc : GLint) : GLint
    android::AutoMutex _lock(m_lock);
    ProgramData* pData = m_programs.valueFor(program);
    if (pData) return pData->locationWARAppToHost(appLoc);
    else return appLoc;
!!!43983287.cpp!!!	needUniformLocationWAR(in program : GLuint) : bool
    android::AutoMutex _lock(m_lock);
    ProgramData* pData = m_programs.valueFor(program);
    if (pData) return pData->needUniformLocationWAR();
    return false;
!!!43983415.cpp!!!	getNextSamplerUniform(in program : GLuint, in index : GLint, inout val : GLint, inout target : GLenum) : GLint
    android::AutoMutex _lock(m_lock);
    ProgramData* pData = m_programs.valueFor(program);
    return pData ? pData->getNextSamplerUniform(index, val, target) : -1;
!!!43983543.cpp!!!	setSamplerUniform(in program : GLuint, in appLoc : GLint, in val : GLint, inout target : GLenum) : bool
    android::AutoMutex _lock(m_lock);
    ProgramData* pData = m_programs.valueFor(program);
    return pData ? pData->setSamplerUniform(appLoc, val, target) : false;
!!!43983671.cpp!!!	addShaderData(in shader : GLuint) : bool
    android::AutoMutex _lock(m_lock);
    ShaderData* data = new ShaderData;
    if (data) {
        if (m_shaders.add(shader, data) < 0) {
            delete data;
            data = NULL;
        }
        data->refcount = 1;
    }
    return data != NULL;
!!!43983799.cpp!!!	getShaderData(in shader : GLuint) : ShaderData
    android::AutoMutex _lock(m_lock);
    return m_shaders.valueFor(shader);
!!!43983927.cpp!!!	unrefShaderData(in shader : GLuint) : void
    android::AutoMutex _lock(m_lock);
    ssize_t idx = m_shaders.indexOfKey(shader);
    if (idx >= 0) {
        unrefShaderDataLocked(idx);
    }
