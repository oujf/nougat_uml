class ActivityContext
!!!44077495.cpp!!!	ActivityContext(in module : hw_module_t)
    memset(&device, 0, sizeof(device));

    device.common.tag = HARDWARE_DEVICE_TAG;
    device.common.version = ACTIVITY_RECOGNITION_API_VERSION_0_1;
    device.common.module = const_cast<hw_module_t *>(module);
    device.common.close = CloseWrapper;
    device.register_activity_callback = RegisterActivityCallbackWrapper;
    device.enable_activity_event = EnableActivityEventWrapper;
    device.disable_activity_event = DisableActivityEventWrapper;
    device.flush = FlushWrapper;

    if (mHubConnection->initCheck() != (status_t)OK) {
        mHubAlive = false;
    } else {
        if (mHubConnection->getAliveCheck() != (status_t)OK) {
            mHubAlive = false;
        } else {
            mHubConnection->setActivityCallback(
                    this, &ActivityContext::HubCallbackWrapper);

            mHubConnection->queueActivate(COMMS_SENSOR_ACTIVITY, false /* enable */);
        }
    }
!!!44077623.cpp!!!	onActivityEvent(in when_us : uint64_t, in is_flush : bool, in x : float, in y : float, in z : float) : void
    Mutex::Autolock autoLock(mLock);

    if (!mCallback) {
        return;
    }

    if (is_flush) {
        activity_event_t ev;
        memset(&ev, 0, sizeof(ev));

        ev.event_type = ACTIVITY_EVENT_FLUSH_COMPLETE;
        ev.activity = 0;
        ev.timestamp = 0ll;

        (*mCallback->activity_callback)(mCallback, &ev, 1);
        return;
    }

    int activityRaw = (int)x;

    ALOGV("activityRaw = %d", activityRaw);

    if (mPrevActivity >= 0 && mPrevActivity == activityRaw) {
        // same old, same old...
        return;
    }

    activity_event_t ev[8];
    memset(&ev, 0, 8*sizeof(activity_event_t));
    int num_events = 0;

    // exit all other activities when first enabled.
    if (!mInitExitDone) {
        mInitExitDone = true;

        int numActivities = sizeof(kActivityList) / sizeof(kActivityList[0]);
        for (int i = 0; i < numActivities; ++i) {
            if ((i == activityRaw) || !isEnabled(i, ACTIVITY_EVENT_EXIT)) {
                continue;
            }

            activity_event_t *curr_ev = &ev[num_events];
            curr_ev->event_type = ACTIVITY_EVENT_EXIT;
            curr_ev->activity = i;
            curr_ev->timestamp = when_us * 1000ll;  // timestamp is in ns.
            curr_ev->reserved[0] = curr_ev->reserved[1] = curr_ev->reserved[2] = curr_ev->reserved[3] = 0;
            num_events++;
        }
    }

    // tilt activities do not change the current activity type, but have a
    // simultaneous enter and exit event type
    if (activityRaw == ACTIVITY_TYPE_TILTING_INDEX) {
        if (isEnabled(activityRaw, ACTIVITY_EVENT_ENTER)) {
            activity_event_t *curr_ev = &ev[num_events];
            curr_ev->event_type = ACTIVITY_EVENT_ENTER;
            curr_ev->activity = activityRaw;
            curr_ev->timestamp = when_us * 1000ll;  // timestamp is in ns.
            curr_ev->reserved[0] = curr_ev->reserved[1] = curr_ev->reserved[2] = curr_ev->reserved[3] = 0;
            num_events++;
        }

        if (isEnabled(activityRaw, ACTIVITY_EVENT_EXIT)) {
            activity_event_t *curr_ev = &ev[num_events];
            curr_ev->event_type = ACTIVITY_EVENT_EXIT;
            curr_ev->activity = activityRaw;
            curr_ev->timestamp = when_us * 1000ll;  // timestamp is in ns.
            curr_ev->reserved[0] = curr_ev->reserved[1] = curr_ev->reserved[2] = curr_ev->reserved[3] = 0;
            num_events++;
        }
    } else {
        if ((mPrevActivity >= 0) &&
            (isEnabled(mPrevActivity, ACTIVITY_EVENT_EXIT))) {
            activity_event_t *curr_ev = &ev[num_events];
            curr_ev->event_type = ACTIVITY_EVENT_EXIT;
            curr_ev->activity = mPrevActivity;
            curr_ev->timestamp = when_us * 1000ll;  // timestamp is in ns.
            curr_ev->reserved[0] = curr_ev->reserved[1] = curr_ev->reserved[2] = curr_ev->reserved[3] = 0;
            num_events++;
        }

        if (isEnabled(activityRaw, ACTIVITY_EVENT_ENTER)) {
            activity_event_t *curr_ev = &ev[num_events];
            curr_ev->event_type = ACTIVITY_EVENT_ENTER;
            curr_ev->activity = activityRaw;
            curr_ev->timestamp = when_us * 1000ll;  // timestamp is in ns.
            curr_ev->reserved[0] = curr_ev->reserved[1] = curr_ev->reserved[2] = curr_ev->reserved[3] = 0;
            num_events++;
        }

        mPrevActivity = activityRaw;
    }

    if (num_events > 0) {
        (*mCallback->activity_callback)(mCallback, ev, num_events);
    }
!!!44077751.cpp!!!	getHubAlive() : bool
    return mHubAlive;
!!!44077879.cpp!!!	~ActivityContext()
    mHubConnection->setActivityCallback(NULL, NULL);
!!!44078007.cpp!!!	close() : int
    ALOGI("close");

    delete this;

    return 0;
!!!44078135.cpp!!!	registerActivityCallback(in callback : activity_recognition_callback_procs_t) : void
    ALOGI("registerActivityCallback");

    Mutex::Autolock autoLock(mLock);
    mCallback = callback;
!!!44078263.cpp!!!	isEnabled(in activity_handle : uint32_t, in event_type : uint32_t) : bool
    return mMaxBatchReportLatencyNs.indexOfKey(
            ((uint64_t)activity_handle << 32) | event_type) >= 0;
!!!44078391.cpp!!!	enableActivityEvent(in activity_handle : uint32_t, in event_type : uint32_t, in max_batch_report_latency_ns : int64_t) : int
    ALOGI("enableActivityEvent");

    bool wasEnabled = !mMaxBatchReportLatencyNs.isEmpty();
    int64_t prev_latency = calculateReportLatencyNs();

    ALOGD_IF(DEBUG_ACTIVITY_RECOGNITION, "ACTVT type = %u, latency = %d sec", (unsigned) event_type,
          (int)(max_batch_report_latency_ns/1000000000ull));

    mMaxBatchReportLatencyNs.add(
            ((uint64_t)activity_handle << 32) | event_type,
            max_batch_report_latency_ns);

    if (!wasEnabled) {
        mPrevActivity = -1;
        mInitExitDone = false;

        mHubConnection->queueBatch(
            COMMS_SENSOR_ACTIVITY, SENSOR_FLAG_ON_CHANGE_MODE, 1000000, max_batch_report_latency_ns);
        mHubConnection->queueActivate(COMMS_SENSOR_ACTIVITY, true /* enable */);
    } else if (max_batch_report_latency_ns != prev_latency) {
        mHubConnection->queueBatch(
            COMMS_SENSOR_ACTIVITY, SENSOR_FLAG_ON_CHANGE_MODE, 1000000, max_batch_report_latency_ns);
    }

    return 0;
!!!44078519.cpp!!!	disableActivityEvent(in activity_handle : uint32_t, in event_type : uint32_t) : int
    ALOGI("disableActivityEvent");

    bool wasEnabled = !mMaxBatchReportLatencyNs.isEmpty();

    mMaxBatchReportLatencyNs.removeItem(
            ((uint64_t)activity_handle << 32) | event_type);

    bool isEnabled = !mMaxBatchReportLatencyNs.isEmpty();

    if (wasEnabled && !isEnabled) {
        mHubConnection->queueActivate(COMMS_SENSOR_ACTIVITY, false /* enable */);
    }

    return 0;
!!!44078647.cpp!!!	flush() : int
    mHubConnection->queueFlush(COMMS_SENSOR_ACTIVITY);
    return 0;
!!!44078775.cpp!!!	calculateReportLatencyNs() : int64_t
    int64_t ret = INT64_MAX;

    for (size_t i = 0 ; i < mMaxBatchReportLatencyNs.size(); ++i) {
        if (mMaxBatchReportLatencyNs[i] <ret) {
            ret = mMaxBatchReportLatencyNs[i];
        }
    }
    return ret;
!!!44078903.cpp!!!	CloseWrapper(inout dev : hw_device_t) : int
    return reinterpret_cast<ActivityContext *>(dev)->close();
!!!44079031.cpp!!!	RegisterActivityCallbackWrapper(in dev : activity_recognition_device, in callback : activity_recognition_callback_procs_t) : void
    const_cast<ActivityContext *>(
            reinterpret_cast<const ActivityContext *>(dev))
        ->registerActivityCallback(callback);
!!!44079159.cpp!!!	EnableActivityEventWrapper(in dev : activity_recognition_device, in activity_handle : uint32_t, in event_type : uint32_t, in max_batch_report_latency_ns : int64_t) : int
    return const_cast<ActivityContext *>(
            reinterpret_cast<const ActivityContext *>(dev))
        ->enableActivityEvent(
            activity_handle, event_type, max_batch_report_latency_ns);
!!!44079287.cpp!!!	DisableActivityEventWrapper(in dev : activity_recognition_device, in activity_handle : uint32_t, in event_type : uint32_t) : int
    return const_cast<ActivityContext *>(
            reinterpret_cast<const ActivityContext *>(dev))
        ->disableActivityEvent(activity_handle, event_type);
!!!44079415.cpp!!!	FlushWrapper(in dev : activity_recognition_device) : int
    return const_cast<ActivityContext *>(
            reinterpret_cast<const ActivityContext *>(dev))->flush();
!!!44079543.cpp!!!	HubCallbackWrapper(inout me : void, in time_ms : uint64_t, in is_flush : bool, in x : float, in y : float, in z : float) : void
    static_cast<ActivityContext *>(me)->onActivityEvent(time_ms, is_flush, x, y, z);
