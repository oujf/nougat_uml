class SensorContext
!!!44081847.cpp!!!	SensorContext(in module : hw_module_t)
    memset(&device, 0, sizeof(device));

    device.common.tag = HARDWARE_DEVICE_TAG;
    device.common.version = SENSORS_DEVICE_API_VERSION_1_3;
    device.common.module = const_cast<hw_module_t *>(module);
    device.common.close = CloseWrapper;
    device.activate = ActivateWrapper;
    device.setDelay = SetDelayWrapper;
    device.poll = PollWrapper;
    device.batch = BatchWrapper;
    device.flush = FlushWrapper;

    mHubAlive = (mHubConnection->initCheck() == OK
        && mHubConnection->getAliveCheck() == OK);
!!!44081975.cpp!!!	getHubAlive() : bool
    return mHubAlive;
!!!44082103.cpp!!!	close() : int
    ALOGI("close");

    delete this;

    return 0;
!!!44082231.cpp!!!	activate(in handle : int, in enabled : int) : int
    ALOGI("activate");

    mHubConnection->queueActivate(handle, enabled);

    return 0;
!!!44082359.cpp!!!	setDelay(in handle : int, in delayNs : int64_t) : int
    ALOGI("setDelay");

    // clamp sample rate based on minDelay and maxDelay defined in kSensorList
    int64_t delayNsClamped = delayNs;
    for (size_t i = 0; i < kSensorCount; i++) {
        sensor_t sensor = kSensorList[i];
        if (sensor.handle != handle) {
            continue;
        }

        if ((sensor.flags & REPORTING_MODE_MASK) == SENSOR_FLAG_CONTINUOUS_MODE) {
            if ((delayNs/1000) < sensor.minDelay) {
                delayNsClamped = sensor.minDelay * 1000;
            } else if ((delayNs/1000) > sensor.maxDelay) {
                delayNsClamped = sensor.maxDelay * 1000;
            }
        }

        break;
    }

    mHubConnection->queueSetDelay(handle, delayNsClamped);

    return 0;
!!!44082487.cpp!!!	poll(inout data : sensors_event_t, in count : int) : int
    ALOGV("poll");

    ssize_t n = mHubConnection->read(data, count);

    if (n < 0) {
        return -1;
    }

    return n;
!!!44082615.cpp!!!	batch(in handle : int, in flags : int, in sampling_period_ns : int64_t, in max_report_latency_ns : int64_t) : int
    ALOGI("batch");

    // clamp sample rate based on minDelay and maxDelay defined in kSensorList
    int64_t sampling_period_ns_clamped = sampling_period_ns;
    for (size_t i = 0; i < kSensorCount; i++) {
        sensor_t sensor = kSensorList[i];
        if (sensor.handle != handle) {
            continue;
        }

        if ((sensor.flags & REPORTING_MODE_MASK) == SENSOR_FLAG_CONTINUOUS_MODE) {
            if ((sampling_period_ns/1000) < sensor.minDelay) {
                sampling_period_ns_clamped = sensor.minDelay * 1000;
            } else if ((sampling_period_ns/1000) > sensor.maxDelay) {
                sampling_period_ns_clamped = sensor.maxDelay * 1000;
            }
        }

        break;
    }

    mHubConnection->queueBatch(
            handle, flags, sampling_period_ns_clamped, max_report_latency_ns);

    return 0;
!!!44082743.cpp!!!	flush(in handle : int) : int
    ALOGI("flush");

    mHubConnection->queueFlush(handle);
    return 0;
!!!44082871.cpp!!!	CloseWrapper(inout dev : hw_device_t) : int
    return reinterpret_cast<SensorContext *>(dev)->close();
!!!44082999.cpp!!!	ActivateWrapper(inout dev : sensors_poll_device_t, in handle : int, in enabled : int) : int
    return reinterpret_cast<SensorContext *>(dev)->activate(handle, enabled);
!!!44083127.cpp!!!	SetDelayWrapper(inout dev : sensors_poll_device_t, in handle : int, in delayNs : int64_t) : int
    return reinterpret_cast<SensorContext *>(dev)->setDelay(handle, delayNs);
!!!44083255.cpp!!!	PollWrapper(inout dev : sensors_poll_device_t, inout data : sensors_event_t, in count : int) : int
    return reinterpret_cast<SensorContext *>(dev)->poll(data, count);
!!!44083383.cpp!!!	BatchWrapper(inout dev : sensors_poll_device_1, in handle : int, in flags : int, in sampling_period_ns : int64_t, in max_report_latency_ns : int64_t) : int
    return reinterpret_cast<SensorContext *>(dev)->batch(
            handle, flags, sampling_period_ns, max_report_latency_ns);
!!!44083511.cpp!!!	FlushWrapper(inout dev : sensors_poll_device_1, in handle : int) : int
    return reinterpret_cast<SensorContext *>(dev)->flush(handle);
