class JSONValue
!!!44084791.cpp!!!	Parse(in data : char, in size : size_t, inout out : JSONValue) : ssize_t
    size_t offset = 0;
    while (offset < size && isspace(data[offset])) {
        ++offset;
    }

    if (offset == size) {
        return ERROR_MALFORMED;
    }

    if (data[offset] == '[') {
        sp<JSONArray> array = new JSONArray;
        ++offset;

        for (;;) {
            while (offset < size && isspace(data[offset])) {
                ++offset;
            }

            if (offset == size) {
                return ERROR_MALFORMED;
            }

            if (data[offset] == ']') {
                ++offset;
                break;
            }

            JSONValue val;
            ssize_t n = Parse(&data[offset], size - offset, &val);

            if (n < 0) {
                return n;
            }

            array->addValue(val);

            offset += n;

            while (offset < size && isspace(data[offset])) {
                ++offset;
            }

            if (offset == size) {
                return ERROR_MALFORMED;
            }

            if (data[offset] == ',') {
                ++offset;
            } else if (data[offset] != ']') {
                return ERROR_MALFORMED;
            }
        };

        out->setArray(array);

        return offset;
    } else if (data[offset] == '{') {
        sp<JSONObject> obj = new JSONObject;
        ++offset;

        for (;;) {
            while (offset < size && isspace(data[offset])) {
                ++offset;
            }

            if (offset == size) {
                return ERROR_MALFORMED;
            }

            if (data[offset] == '}') {
                ++offset;
                break;
            }

            JSONValue key;
            ssize_t n = Parse(&data[offset], size - offset, &key);

            if (n < 0) {
                return n;
            }

            if (key.type() != TYPE_STRING) {
                return ERROR_MALFORMED;
            }

            offset += n;

            while (offset < size && isspace(data[offset])) {
                ++offset;
            }

            if (offset == size || data[offset] != ':') {
                return ERROR_MALFORMED;
            }

            ++offset;

            JSONValue val;
            n = Parse(&data[offset], size - offset, &val);

            if (n < 0) {
                return n;
            }

            AString keyVal;
            CHECK(key.getString(&keyVal));

            obj->setValue(keyVal.c_str(), val);

            offset += n;

            while (offset < size && isspace(data[offset])) {
                ++offset;
            }

            if (offset == size) {
                return ERROR_MALFORMED;
            }

            if (data[offset] == ',') {
                ++offset;
            } else if (data[offset] != '}') {
                return ERROR_MALFORMED;
            }
        };

        out->setObject(obj);

        return offset;
    } else if (data[offset] == '"') {
        ++offset;

        AString s;
        bool escaped = false;
        while (offset < size) {
            if (escaped) {
                char c;
                switch (data[offset]) {
                    case '\"':
                    case '\\':
                    case '/':
                        c = data[offset];
                        break;
                    case 'b':
                        c = '\x08';
                        break;
                    case 'f':
                        c = '\x0c';
                        break;
                    case 'n':
                        c = '\x0a';
                        break;
                    case 'r':
                        c = '\x0d';
                        break;
                    case 't':
                        c = '\x09';
                        break;
                    default:
                        return ERROR_MALFORMED;
                }

                s.append(c);
                ++offset;

                escaped = false;
            } else if (data[offset] == '\\') {
                escaped = true;
            } else if (data[offset] == '"') {
                break;
            }

            s.append(data[offset++]);
        }

        if (offset == size) {
            return ERROR_MALFORMED;
        }

        ++offset;
        out->setString(s);

        return offset;
    } else if (isdigit(data[offset]) || data[offset] == '-') {
        bool negate = false;
        if (data[offset] == '-') {
            negate = true;
            ++offset;

            if (offset == size) {
                return ERROR_MALFORMED;
            }
        }

        size_t firstDigitOffset = offset;
        while (offset < size && isdigit(data[offset])) {
            ++offset;
        }

        size_t numDigits = offset - firstDigitOffset;
        if (numDigits > 1 && data[firstDigitOffset] == '0') {
            // No leading zeros.
            return ERROR_MALFORMED;
        }

        size_t firstFracDigitOffset = 0;
        size_t numFracDigits = 0;

        if (offset < size && data[offset] == '.') {
            ++offset;

            firstFracDigitOffset = offset;
            while (offset < size && isdigit(data[offset])) {
                ++offset;
            }

            numFracDigits = offset - firstFracDigitOffset;
            if (numFracDigits == 0) {
                return ERROR_MALFORMED;
            }
        }

        bool negateExponent = false;
        size_t firstExpDigitOffset = 0;
        size_t numExpDigits = 0;

        if (offset < size && (data[offset] == 'e' || data[offset] == 'E')) {
            ++offset;

            if (offset == size) {
                return ERROR_MALFORMED;
            }

            if (data[offset] == '+' || data[offset] == '-') {
                if (data[offset] == '-') {
                    negateExponent = true;
                }

                ++offset;
            }

            firstExpDigitOffset = offset;
            while (offset < size && isdigit(data[offset])) {
                ++offset;
            }

            numExpDigits = offset - firstExpDigitOffset;
            if (numExpDigits == 0) {
                return ERROR_MALFORMED;
            }
        }

        if (numFracDigits == 0 && numExpDigits == 0) {
            int32_t x;
            if (parseInt32(&data[firstDigitOffset], numDigits, &x) != 0) {
                return ERROR_MALFORMED;
            }

            out->setInt32(negate ? -x : x);
        } else {
            int32_t mantissa;
            if (parseInt32(&data[firstDigitOffset], numDigits, &mantissa) != 0) {
                return ERROR_MALFORMED;
            }

            int32_t fraction;
            if (parseInt32(&data[firstFracDigitOffset], numFracDigits, &fraction) != 0) {
                return ERROR_MALFORMED;
            }

            int32_t exponent;
            if (parseInt32(&data[firstExpDigitOffset], numExpDigits, &exponent) != 0) {
                return ERROR_MALFORMED;
            }

            if (negateExponent) {
                exponent = -exponent;
            }

            float x = (float)mantissa;
            x += (float)fraction * powf(10.0f, exponent - (int32_t)numFracDigits);

            out->setFloat(negate ? -x : x);
        }

        return offset;
    } else if (offset + 4 <= size && !strncmp("null", &data[offset], 4)) {
        out->unset();
        return offset + 4;
    } else if (offset + 4 <= size && !strncmp("true", &data[offset], 4)) {
        out->setBoolean(true);
        return offset + 4;
    } else if (offset + 5 <= size && !strncmp("false", &data[offset], 5)) {
        out->setBoolean(false);
        return offset + 5;
    }

    return ERROR_MALFORMED;
!!!44085047.cpp!!!	JSONValue(in other : JSONValue)
    *this = other;
!!!44085175.cpp!!!	operator =(in other : JSONValue) : JSONValue
    if (&other != this) {
        unset();
        mType = other.mType;
        mValue = other.mValue;

        switch (mType) {
            case TYPE_STRING:
                mValue.mString = new AString(*other.mValue.mString);
                break;
            case TYPE_OBJECT:
            case TYPE_ARRAY:
                mValue.mObjectOrArray->incStrong(this /* id */);
                break;

            default:
                break;
        }
    }

    return *this;
!!!44085303.cpp!!!	~JSONValue()
    unset();
!!!44085431.cpp!!!	type() : JSONValue::FieldType
    return mType;
!!!44085559.cpp!!!	getInt32(inout value : int32_t) : bool
    if (mType != TYPE_INT32) {
        return false;
    }

    *value = mValue.mInt32;
    return true;
!!!44085687.cpp!!!	getFloat(inout value : float) : bool
    switch (mType) {
        case TYPE_INT32:
        {
            *value = mValue.mInt32;
            break;
        }

        case TYPE_FLOAT:
        {
            *value = mValue.mFloat;
            break;
        }

        default:
            return false;
    }

    return true;
!!!44085815.cpp!!!	getString(inout value : AString) : bool
    if (mType != TYPE_STRING) {
        return false;
    }

    *value = *mValue.mString;
    return true;
!!!44085943.cpp!!!	getBoolean(inout value : bool) : bool
    if (mType != TYPE_BOOLEAN) {
        return false;
    }

    *value = mValue.mBoolean;
    return true;
!!!44086071.cpp!!!	getObject(inout value : sp<JSONObject>) : bool
    if (mType != TYPE_OBJECT) {
        return false;
    }

    *value = static_cast<JSONObject *>(mValue.mObjectOrArray);
    return true;
!!!44086199.cpp!!!	getArray(inout value : sp<JSONArray>) : bool
    if (mType != TYPE_ARRAY) {
        return false;
    }

    *value = static_cast<JSONArray *>(mValue.mObjectOrArray);
    return true;
!!!44086327.cpp!!!	setInt32(in value : int32_t) : void
    unset();

    mValue.mInt32 = value;
    mType = TYPE_INT32;
!!!44086455.cpp!!!	setFloat(in value : float) : void
    unset();

    mValue.mFloat = value;
    mType = TYPE_FLOAT;
!!!44086583.cpp!!!	setString(in value : AString) : void
    unset();

    mValue.mString = new AString(value);
    mType = TYPE_STRING;
!!!44086711.cpp!!!	setBoolean(in value : bool) : void
    unset();

    mValue.mBoolean = value;
    mType = TYPE_BOOLEAN;
!!!44086839.cpp!!!	setObject(in obj : sp<JSONObject>) : void
    unset();

    mValue.mObjectOrArray = obj.get();
    mValue.mObjectOrArray->incStrong(this /* id */);

    mType = TYPE_OBJECT;
!!!44086967.cpp!!!	setArray(in array : sp<JSONArray>) : void
    unset();

    mValue.mObjectOrArray = array.get();
    mValue.mObjectOrArray->incStrong(this /* id */);

    mType = TYPE_ARRAY;
!!!44087095.cpp!!!	unset() : void
    switch (mType) {
        case TYPE_STRING:
            delete mValue.mString;
            break;
        case TYPE_OBJECT:
        case TYPE_ARRAY:
            mValue.mObjectOrArray->decStrong(this /* id */);
            break;

        default:
            break;
    }

    mType = TYPE_NULL;
!!!44087223.cpp!!!	toString(in depth : size_t = 0, in indentFirstLine : bool = true) : AString
    static const char kIndent[] = "                                        ";

    AString out;

    switch (mType) {
        case TYPE_STRING:
        {
            AString escaped;
            EscapeString(
                    mValue.mString->c_str(), mValue.mString->size(), &escaped);

            out.append("\"");
            out.append(escaped);
            out.append("\"");
            break;
        }

        case TYPE_INT32:
        {
            out = AStringPrintf("%d", mValue.mInt32);
            break;
        }

        case TYPE_FLOAT:
        {
            out = AStringPrintf("%f", mValue.mFloat);
            break;
        }

        case TYPE_BOOLEAN:
        {
            out = mValue.mBoolean ? "true" : "false";
            break;
        }

        case TYPE_NULL:
        {
            out = "null";
            break;
        }

        case TYPE_OBJECT:
        case TYPE_ARRAY:
        {
            out = (mType == TYPE_OBJECT) ? "{\n" : "[\n";
            out.append(mValue.mObjectOrArray->internalToString(depth + 1));
            out.append("\n");
            out.append(kIndent, 2 * depth);
            out.append(mType == TYPE_OBJECT ? "}" : "]");
            break;
        }

        default:
            TRESPASS();
    }

    if (indentFirstLine) {
        out.insert(kIndent, 2 * depth, 0);
    }

    return out;
