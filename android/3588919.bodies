class Log
!!!44102199.cpp!!!	Initialize(inout logger : Logger, in level : Log::LogLevel) : void
    if (Log::logger_) {
        Log::Warn("Re-initializing logger");
    }
    Log::init_time_ = std::chrono::steady_clock::now();
    Log::logger_ = logger;
    Log::SetLevel(level);
!!!44102327.cpp!!!	DebugBuf(in vec : std::vector<uint8_t>) : void
    Log::DebugBuf(vec.data(), vec.size());
!!!44102455.cpp!!!	DebugBuf(in buffer : uint8_t, in size : size_t) : void
    if (Log::level_ < LogLevel::Debug) {
        return;
    }

    char line[32];
    int offset = 0;
    char line_chars[32];
    int offset_chars = 0;

    Log::Debug("Dumping buffer of size %zu bytes", size);
    for (size_t i = 1; i <= size; ++i) {
        offset += snprintf(&line[offset], sizeof(line) - offset, "%02x ",
                           buffer[i - 1]);
        offset_chars += snprintf(
            &line_chars[offset_chars], sizeof(line_chars) - offset_chars,
            "%c", (isprint(buffer[i - 1])) ? buffer[i - 1] : '.');
        if ((i % 8) == 0) {
            Log::Debug("  %s\t%s", line, line_chars);
            offset = 0;
            offset_chars = 0;
        } else if ((i % 4) == 0) {
            offset += snprintf(&line[offset], sizeof(line) - offset, " ");
        }
    }

    if (offset > 0) {
        std::string tabs;
        while (offset < 28) {
            tabs += "\t";
            offset += 8;
        }
        Log::Debug("  %s%s%s", line, tabs.c_str(), line_chars);
    }
!!!44102583.cpp!!!	SetLevel(in level : Log::LogLevel) : void
    Log::level_ = level;
!!!44102711.cpp!!!	LevelAbbrev(in level : Log::LogLevel) : char
    switch (level) {
    case LogLevel::Error:
        return 'E';
    case LogLevel::Warn:
        return 'W';
    case LogLevel::Info:
        return 'I';
    case LogLevel::Debug:
        return 'D';
    default:
        return '?';
    }
!!!44102839.cpp!!!	LogEx(in level : Log::LogLevel, in format : char, in arg_list : va_list) : void
    if (Log::level_ < level) {
        return;
    }

    std::chrono::duration<float> log_time =
        (std::chrono::steady_clock::now() - Log::init_time_);

    // Can add colorization here if desired (should be configurable)
    char prefix[20];
    snprintf(prefix, sizeof(prefix), "%c %6.03f: ", Log::LevelAbbrev(level),
             log_time.count());

    Log::logger_->Output(prefix);
    Log::logger_->Output(format, arg_list);
    Log::logger_->Output("\n");
