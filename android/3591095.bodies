class NanoPacket
!!!44106935.cpp!!!	NanoPacket(in sequence_number : uint32_t, in reason : PacketReason, in data : std::vector<uint8_t> = nullptr)
    Reset();
    parsing_state_ = ParsingState::Complete;
    sequence_number_ = sequence_number;
    reason_ = static_cast<uint32_t>(reason);

    // Resize the buffer to accomodate header, footer and data content.
    size_t data_size = data ? data->size() : 0;
    size_t required_buffer_size = 14 + data_size;
    if (packet_buffer_.size() < required_buffer_size) {
        packet_buffer_.resize(required_buffer_size);
    }

    if (packet_content_.size() < required_buffer_size) {
        packet_content_.resize(required_buffer_size);
    }

    // Format the header of the packet.
    packet_buffer_[0] = kSyncByte;
    packet_buffer_[1] = sequence_number;
    packet_buffer_[2] = sequence_number >> 8;
    packet_buffer_[3] = sequence_number >> 16;
    packet_buffer_[4] = sequence_number >> 24;
    packet_buffer_[5] = static_cast<uint32_t>(reason);
    packet_buffer_[6] = static_cast<uint32_t>(reason) >> 8;
    packet_buffer_[7] = static_cast<uint32_t>(reason) >> 16;
    packet_buffer_[8] = static_cast<uint32_t>(reason) >> 24;
    packet_buffer_[9] = data_size;

    // Insert the data content of the packet.
    if (data) {
        std::copy(data->begin(), data->end(), packet_buffer_.begin() + 10);
        std::copy(data->begin(), data->end(), packet_content_.begin());
    }

    // Format the CRC footer.
    uint32_t crc = Crc32(packet_buffer_.data(), required_buffer_size - 4);
    packet_buffer_[data_size + 10] = crc;
    packet_buffer_[data_size + 11] = crc >> 8;
    packet_buffer_[data_size + 12] = crc >> 16;
    packet_buffer_[data_size + 13] = crc >> 24;
!!!44107063.cpp!!!	NanoPacket()
    Reset();
!!!44107191.cpp!!!	Reset() : void
    packet_buffer_.clear();
    parsing_state_ = ParsingState::Idle;
    parsing_progress_ = 0;
    sequence_number_ = 0;
    reason_ = 0;
    packet_content_.clear();
    crc_ = 0;
!!!44107319.cpp!!!	Parse(inout buffer : uint8_t, in length : size_t, inout bytes_parsed : size_t) : NanoPacket::ParseResult
    for (size_t i = 0; i < length; i++) {
        // Once the state machine is not idle, save all bytes to the current
        // packet to allow CRC to be computed at the end.
        if (parsing_state_ != ParsingState::Idle) {
            packet_buffer_.push_back(buffer[i]);
        }

        // Proceed through the various states of protocol parsing.
        if (parsing_state_ == ParsingState::Idle && buffer[i] == kSyncByte) {
            packet_buffer_.push_back(buffer[i]);
            parsing_state_ = ParsingState::ParsingSequenceNumber;
        } else if (parsing_state_ == ParsingState::ParsingSequenceNumber
                && DeserializeWord(&sequence_number_, buffer[i])) {
            parsing_state_ = ParsingState::ParsingReason;
        } else if (parsing_state_ == ParsingState::ParsingReason
                && DeserializeWord(&reason_, buffer[i])) {
            parsing_state_ = ParsingState::ParsingLength;
        } else if (parsing_state_ == ParsingState::ParsingLength) {
            uint8_t length = buffer[i];
            if (length > 0) {
                packet_content_.resize(buffer[i]);
                parsing_state_ = ParsingState::ParsingContent;
            } else {
                parsing_state_ = ParsingState::ParsingCrc;
            }
        } else if (parsing_state_ == ParsingState::ParsingContent) {
            packet_content_[parsing_progress_++] = buffer[i];

            if (parsing_progress_ == packet_content_.size()) {
                parsing_progress_ = 0;
                parsing_state_ = ParsingState::ParsingCrc;
            }
        } else if (parsing_state_ == ParsingState::ParsingCrc
                && DeserializeWord(&crc_, buffer[i])) {
            *bytes_parsed = i + 1;
            if (ValidateCrc()) {
                parsing_state_ = ParsingState::Complete;
                return ParseResult::Success;
            } else {
                return ParseResult::CrcMismatch;
            }
        }
    }

    *bytes_parsed = length;
    return ParseResult::Incomplete;
!!!44107447.cpp!!!	ParsingIsComplete() : bool
    return parsing_state_ == ParsingState::Complete;
!!!44107575.cpp!!!	packet_buffer() : std::vector<uint8_t>
    return packet_buffer_;
!!!44107703.cpp!!!	reason() : uint32_t
    return reason_;
!!!44107831.cpp!!!	TypedReason() : PacketReason
    return static_cast<PacketReason>(reason_);
!!!44107959.cpp!!!	packet_content() : std::vector<uint8_t>
    return packet_content_;
!!!44108087.cpp!!!	ValidateCrc() : bool
    size_t crc_length = packet_buffer_.size() - 4;
    uint32_t computed_crc = Crc32(packet_buffer_.data(), crc_length);

    if (computed_crc != crc_) {
        Reset();
        return false;
    }

    return true;
!!!44108215.cpp!!!	DeserializeWord(inout destination : T, in byte : uint8_t) : bool
    *destination |= byte << (8 * parsing_progress_);
    parsing_progress_++;

    if (parsing_progress_ == sizeof(T)) {
        parsing_progress_ = 0;
        return true;
    }

    return false;
