class QCameraCmdThread
!!!44279351.cpp!!!	QCameraCmdThread()
    cmd_pid = 0;
    cam_sem_init(&sync_sem, 0);
    cam_sem_init(&cmd_sem, 0);
!!!44279479.cpp!!!	~QCameraCmdThread()
    cam_sem_destroy(&sync_sem);
    cam_sem_destroy(&cmd_sem);
!!!44279607.cpp!!!	launch(inout start_routine : void *(*)(void *), inout user_data : void) : int32_t
    /* launch the thread */
    pthread_create(&cmd_pid,
                   NULL,
                   start_routine,
                   user_data);
    return NO_ERROR;
!!!44279735.cpp!!!	setName(in name : char) : int32_t
    /* name the thread */
    prctl(PR_SET_NAME, (unsigned long)name, 0, 0, 0);
    return NO_ERROR;
!!!44279863.cpp!!!	exit() : int32_t
    int32_t rc = NO_ERROR;

    if (cmd_pid == 0) {
        return rc;
    }

    rc = sendCmd(CAMERA_CMD_TYPE_EXIT, 0, 1);
    if (NO_ERROR != rc) {
        ALOGE("%s: Error during exit, rc = %d", __func__, rc);
        return rc;
    }

    /* wait until cmd thread exits */
    if (pthread_join(cmd_pid, NULL) != 0) {
        ALOGD("%s: pthread dead already\n", __func__);
    }
    cmd_pid = 0;
    return rc;
!!!44279991.cpp!!!	sendCmd(in cmd : camera_cmd_type_t, in sync_cmd : uint8_t, in priority : uint8_t) : int32_t
    camera_cmd_t *node = (camera_cmd_t *)malloc(sizeof(camera_cmd_t));
    if (NULL == node) {
        ALOGE("%s: No memory for camera_cmd_t", __func__);
        return NO_MEMORY;
    }
    memset(node, 0, sizeof(camera_cmd_t));
    node->cmd = cmd;

    if (priority) {
        cmd_queue.enqueueWithPriority((void *)node);
    } else {
        cmd_queue.enqueue((void *)node);
    }
    cam_sem_post(&cmd_sem);

    /* if is a sync call, need to wait until it returns */
    if (sync_cmd) {
        cam_sem_wait(&sync_sem);
    }
    return NO_ERROR;
!!!44280119.cpp!!!	getCmd() : camera_cmd_type_t
    camera_cmd_type_t cmd = CAMERA_CMD_TYPE_NONE;
    camera_cmd_t *node = (camera_cmd_t *)cmd_queue.dequeue();
    if (NULL == node) {
        ALOGD("%s: No notify avail", __func__);
        return CAMERA_CMD_TYPE_NONE;
    } else {
        cmd = node->cmd;
        free(node);
    }
    return cmd;
