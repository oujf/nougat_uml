class QCameraThermalAdapter
!!!44228151.cpp!!!	getInstance() : QCameraThermalAdapter
    static QCameraThermalAdapter instance;
    return instance;
!!!44228279.cpp!!!	init(inout thermalCb : QCameraThermalCallback) : int
    const char *error = NULL;
    int rc = NO_ERROR;

    CDBG("%s E", __func__);
    mHandle = dlopen("/vendor/lib/libthermalclient.so", RTLD_NOW);
    if (!mHandle) {
        error = dlerror();
        ALOGE("%s: dlopen failed with error %s",
                    __func__, error ? error : "");
        rc = UNKNOWN_ERROR;
        goto error;
    }
    *(void **)&mRegister = dlsym(mHandle, "thermal_client_register_callback");
    if (!mRegister) {
        error = dlerror();
        ALOGE("%s: dlsym failed with error code %s",
                    __func__, error ? error: "");
        rc = UNKNOWN_ERROR;
        goto error2;
    }
    *(void **)&mUnregister = dlsym(mHandle, "thermal_client_unregister_callback");
    if (!mUnregister) {
        error = dlerror();
        ALOGE("%s: dlsym failed with error code %s",
                    __func__, error ? error: "");
        rc = UNKNOWN_ERROR;
        goto error2;
    }

    mCallback = thermalCb;

    // Register camera and camcorder callbacks
    mCameraHandle = mRegister(mStrCamera, thermalCallback, NULL);
    if (mCameraHandle < 0) {
        ALOGE("%s: thermal_client_register_callback failed %d",
                        __func__, mCameraHandle);
        rc = UNKNOWN_ERROR;
        goto error2;
    }
    mCamcorderHandle = mRegister(mStrCamcorder, thermalCallback, NULL);
    if (mCamcorderHandle < 0) {
        ALOGE("%s: thermal_client_register_callback failed %d",
                        __func__, mCamcorderHandle);
        rc = UNKNOWN_ERROR;
        goto error3;
    }

    CDBG("%s X", __func__);
    return rc;

error3:
    mCamcorderHandle = 0;
    mUnregister(mCameraHandle);
error2:
    mCameraHandle = 0;
    dlclose(mHandle);
    mHandle = NULL;
error:
    CDBG("%s X", __func__);
    return rc;
!!!44228407.cpp!!!	deinit() : void
    CDBG("%s E", __func__);
    if (mUnregister) {
        if (mCameraHandle) {
            mUnregister(mCameraHandle);
            mCameraHandle = 0;
        }
        if (mCamcorderHandle) {
            mUnregister(mCamcorderHandle);
            mCamcorderHandle = 0;
        }
    }
    if (mHandle)
        dlclose(mHandle);

    mHandle = NULL;
    mRegister = NULL;
    mUnregister = NULL;
    mCallback = NULL;
    CDBG("%s X", __func__);
!!!44228535.cpp!!!	thermalCallback(in level : int, inout userdata : void, inout data : void) : int
    int rc = 0;
    CDBG("%s E", __func__);
    QCameraThermalAdapter& instance = getInstance();
    qcamera_thermal_level_enum_t lvl = (qcamera_thermal_level_enum_t) level;
    if (instance.mCallback)
        rc = instance.mCallback->thermalEvtHandle(lvl, userdata, data);
    CDBG("%s X", __func__);
    return rc;
