class QCameraMemoryPool
!!!44160695.cpp!!!	QCameraMemoryPool()
    pthread_mutex_init(&mLock, NULL);
!!!44160823.cpp!!!	~QCameraMemoryPool()
    clear();
    pthread_mutex_destroy(&mLock);
!!!44160951.cpp!!!	allocateBuffer(inout memInfo : QCameraMemory::QCameraMemInfo, in heap_id : uint, in size : size_t, in cached : bool, in streamType : cam_stream_type_t, in secure_mode : uint32_t) : int
    int rc = NO_ERROR;

    pthread_mutex_lock(&mLock);

    rc = findBufferLocked(memInfo, heap_id, size, cached, streamType);
    if (NAME_NOT_FOUND == rc ) {
        CDBG_HIGH("%s : Buffer not found!", __func__);
        rc = QCameraMemory::allocOneBuffer(memInfo, heap_id, size, cached,
                 secure_mode);
    }

    pthread_mutex_unlock(&mLock);

    return rc;
!!!44161079.cpp!!!	releaseBuffer(inout memInfo : QCameraMemory::QCameraMemInfo, in streamType : cam_stream_type_t) : void
    pthread_mutex_lock(&mLock);

    mPools[streamType].push_back(memInfo);

    pthread_mutex_unlock(&mLock);
!!!44161207.cpp!!!	clear() : void
    pthread_mutex_lock(&mLock);

    for (int i = CAM_STREAM_TYPE_DEFAULT; i < CAM_STREAM_TYPE_MAX; i++ ) {
        List<struct QCameraMemory::QCameraMemInfo>::iterator it;
        it = mPools[i].begin();
        for( ; it != mPools[i].end() ; it++) {
            QCameraMemory::deallocOneBuffer(*it);
        }

        mPools[i].clear();
    }

    pthread_mutex_unlock(&mLock);
!!!44161335.cpp!!!	findBufferLocked(inout memInfo : QCameraMemory::QCameraMemInfo, in heap_id : uint, in size : size_t, in cached : bool, in streamType : cam_stream_type_t) : int
    int rc = NAME_NOT_FOUND;

    if (mPools[streamType].empty()) {
        return NAME_NOT_FOUND;
    }

    List<struct QCameraMemory::QCameraMemInfo>::iterator it;
    it = mPools[streamType].begin();
    for ( ; it != mPools[streamType].end() ; it++) {
        if ( ((*it).size >= size) &&
            ((*it).heap_id == heap_id) &&
            ((*it).cached == cached) ) {
            memInfo = *it;
            mPools[streamType].erase(it);
            rc = NO_ERROR;
            break;
        }
    }

    return rc;
