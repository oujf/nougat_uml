class QCameraStreamMemory
!!!44162743.cpp!!!	QCameraStreamMemory(in memory : camera_request_memory, in cached : bool, inout pool : QCameraMemoryPool = NULL, in streamType : cam_stream_type_t = CAM_STREAM_TYPE_DEFAULT, in bufType : cam_stream_buf_type = CAM_STREAM_BUF_TYPE_MPLANE)
    for (int i = 0; i < MM_CAMERA_MAX_NUM_FRAMES; i ++)
        mCameraMemory[i] = NULL;
!!!44162999.cpp!!!	allocate(in count : uint8_t, in size : size_t, in isSecure : uint32_t) : int
    traceLogAllocStart(size, count, "StreamMemsize");
    unsigned int heap_id_mask = 0x1 << ION_IOMMU_HEAP_ID;
    int rc = alloc(count, size, heap_id_mask, isSecure);
    if (rc < 0)
        return rc;

    for (int i = 0; i < count; i ++) {
        if (isSecure == SECURE) {
            mCameraMemory[i] = 0;
        } else {
            mCameraMemory[i] = mGetMemory(mMemInfo[i].fd, mMemInfo[i].size, 1, this);
        }
    }
    mBufferCount = count;
    traceLogAllocEnd((size * count));
    return NO_ERROR;
!!!44163127.cpp!!!	allocateMore(in count : uint8_t, in size : size_t) : int
    traceLogAllocStart(size, count, "StreamMemsize");
    unsigned int heap_id_mask = 0x1 << ION_IOMMU_HEAP_ID;
    int rc = alloc(count, size, heap_id_mask, NON_SECURE);
    if (rc < 0)
        return rc;

    for (int i = mBufferCount; i < mBufferCount + count; i++) {
        mCameraMemory[i] = mGetMemory(mMemInfo[i].fd, mMemInfo[i].size, 1, this);
    }
    mBufferCount = (uint8_t)(mBufferCount + count);
    traceLogAllocEnd((size * count));
    return NO_ERROR;
!!!44163255.cpp!!!	deallocate() : void
    for (int i = 0; i < mBufferCount; i ++) {
        if (mCameraMemory[i])
            mCameraMemory[i]->release(mCameraMemory[i]);
        mCameraMemory[i] = NULL;
    }
    dealloc();
    mBufferCount = 0;
!!!44163383.cpp!!!	cacheOps(in index : uint32_t, in cmd : uint) : int
    if (index >= mBufferCount)
        return BAD_INDEX;
    return cacheOpsInternal(index, cmd, mCameraMemory[index]->data);
!!!44163511.cpp!!!	getRegFlags(inout regFlags : uint8_t) : int
    for (int i = 0; i < mBufferCount; i ++)
        regFlags[i] = 1;
    return NO_ERROR;
!!!44163639.cpp!!!	getMemory(in index : uint32_t, in metadata : bool) : camera_memory_t
    if (index >= mBufferCount || metadata)
        return NULL;
    return mCameraMemory[index];
!!!44163767.cpp!!!	getMatchBufIndex(in opaque : void, in metadata : bool) : int
    int index = -1;
    if (metadata) {
        return -1;
    }
    for (int i = 0; i < mBufferCount; i++) {
        if (mCameraMemory[i]->data == opaque) {
            index = i;
            break;
        }
    }
    return index;
!!!44163895.cpp!!!	getPtr(in index : uint32_t) : void
    if (index >= mBufferCount) {
        ALOGE("index out of bound");
        return (void *)BAD_INDEX;
    }
    if (mCameraMemory[index] == 0) {
        return NULL;
    }
    return mCameraMemory[index]->data;
