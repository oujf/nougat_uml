class QCameraVideoMemory
!!!44164023.cpp!!!	QCameraVideoMemory(in memory : camera_request_memory, in cached : bool, in bufType : cam_stream_buf_type = CAM_STREAM_BUF_TYPE_MPLANE)
    memset(mMetadata, 0, sizeof(mMetadata));
    mMetaBufCount = 0;
    mBufType = bufType;
!!!44164279.cpp!!!	allocate(in count : uint8_t, in size : size_t, in isSecure : uint32_t) : int
    traceLogAllocStart(size, count, "VideoMemsize");
    int rc = QCameraStreamMemory::allocate(count, size, isSecure);
    if (rc < 0)
        return rc;

    if (mBufType != CAM_STREAM_BUF_TYPE_USERPTR) {
        rc = allocateMeta(count);
        if (rc != NO_ERROR) {
            return rc;
        }

        for (int i = 0; i < count; i ++) {
            struct encoder_media_buffer_type * packet =
                    (struct encoder_media_buffer_type *)mMetadata[i]->data;
            //1     fd, 1 offset, 1 size, 1 color transform
            packet->meta_handle = native_handle_create(1, 3);
            packet->buffer_type = kMetadataBufferTypeCameraSource;
            native_handle_t * nh = const_cast<native_handle_t *>(packet->meta_handle);
            if (!nh) {
                ALOGE("%s: Error in getting video native handle", __func__);
                return NO_MEMORY;
            }
            nh->data[0] = mMemInfo[i].fd;
            nh->data[1] = 0;
            nh->data[2] = (int)mMemInfo[i].size;
            nh->data[3] = private_handle_t::PRIV_FLAGS_ITU_R_709;
        }
    }
    mBufferCount = count;
    traceLogAllocEnd((size * count));
    return NO_ERROR;
!!!44164407.cpp!!!	allocateMore(in count : uint8_t, in size : size_t) : int
    traceLogAllocStart(size, count, "VideoMemsize");
    int rc = QCameraStreamMemory::allocateMore(count, size);
    if (rc < 0)
        return rc;

    if (mBufType != CAM_STREAM_BUF_TYPE_USERPTR) {
        for (int i = mBufferCount; i < count + mBufferCount; i ++) {
            mMetadata[i] = mGetMemory(-1,
                    sizeof(struct encoder_media_buffer_type), 1, this);
            if (!mMetadata[i]) {
                ALOGE("allocation of video metadata failed.");
                for (int j = mBufferCount; j <= i-1; j ++) {
                    mMetadata[j]->release(mMetadata[j]);
                    mCameraMemory[j]->release(mCameraMemory[j]);
                    mCameraMemory[j] = NULL;
                    deallocOneBuffer(mMemInfo[j]);;
                }
                return NO_MEMORY;
            }
            struct encoder_media_buffer_type * packet =
                    (struct encoder_media_buffer_type *)mMetadata[i]->data;
            packet->meta_handle = native_handle_create(1, 2); //1 fd, 1 offset and 1 size
            packet->buffer_type = kMetadataBufferTypeCameraSource;
            native_handle_t * nh = const_cast<native_handle_t *>(packet->meta_handle);
            if (!nh) {
                ALOGE("%s: Error in getting video native handle", __func__);
                return NO_MEMORY;
            }
            nh->data[0] = mMemInfo[i].fd;
            nh->data[1] = 0;
            nh->data[2] = (int)mMemInfo[i].size;
        }
    }
    mBufferCount = (uint8_t)(mBufferCount + count);
    mMetaBufCount = mBufferCount;
    traceLogAllocEnd((size * count));
    return NO_ERROR;
!!!44164535.cpp!!!	deallocate() : void
    for (int i = 0; i < mBufferCount; i ++) {
        struct encoder_media_buffer_type * packet =
            (struct encoder_media_buffer_type *)mMetadata[i]->data;
        if (NULL != packet) {
            native_handle_t * nh = const_cast<native_handle_t *>(packet->meta_handle);
            if (NULL != nh) {
               if (native_handle_delete(nh)) {
                   ALOGE("Unable to delete native handle");
               }
            }
            else {
               ALOGE("native handle not available");
            }
        }
        else {
            ALOGE("packet not available");
        }
        mMetadata[i]->release(mMetadata[i]);
        mMetadata[i] = NULL;
    }
    QCameraStreamMemory::deallocate();
    mBufferCount = 0;
!!!44164663.cpp!!!	getMemory(in index : uint32_t, in metadata : bool) : camera_memory_t
    if (index >= mMetaBufCount || (!metadata && index >= mBufferCount))
        return NULL;

    if (metadata)
        return mMetadata[index];
    else
        return mCameraMemory[index];
!!!44164791.cpp!!!	getMatchBufIndex(in opaque : void, in metadata : bool) : int
    int index = -1;
    for (int i = 0; i < mBufferCount; i++) {
        if (metadata) {
            if (mMetadata[i]->data == opaque) {
                index = i;
                break;
            }
        } else {
            if (mCameraMemory[i]->data == opaque) {
                index = i;
                break;
            }
        }
    }
    return index;
!!!44164919.cpp!!!	allocateMeta(in buf_cnt : uint8_t) : int
    int rc = NO_ERROR;

    for (int i = 0; i < buf_cnt; i++) {
        mMetadata[i] = mGetMemory(-1,
                sizeof(struct encoder_media_buffer_type), 1, this);
        if (!mMetadata[i]) {
            ALOGE("allocation of video metadata failed.");
            for (int j = (i - 1); j >= 0; j--) {
                mMetadata[j]->release(mMetadata[j]);
            }
            return NO_MEMORY;
        }
    }
    mMetaBufCount = buf_cnt;
    return rc;
!!!44165047.cpp!!!	deallocateMeta() : void
    for (int i = 0; i < mMetaBufCount; i ++) {
        mMetadata[i]->release(mMetadata[i]);
        mMetadata[i] = NULL;
    }
    mMetaBufCount = 0;
