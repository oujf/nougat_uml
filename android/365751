format 213
"update_manager" // android::system::update_engine::update_manager
  revision 1
  modified_by 55 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "D:/Workspace/AndroidSourceCode/nougat_src/system/update_engine/update_manager/"
  cpp_src_dir "D:/Workspace/AndroidSourceCode/nougat_src/system/update_engine/update_manager/"
  cpp_namespace "chromeos_update_manager"
  classview 330295 "update_manager"
    
    classdiagramsettings member_max_width 0 end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 3362999 "UpdateManager"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The main Update Manager singleton class."
      operation 43696823 "UpdateManager"
	public explicit_return_type ""
	nparams 4
	  param inout name "clock" type class_ref 3362359 // ClockInterface
	  param in name "evaluation_timeout" explicit_type "base::TimeDelta"
	  param in name "expiration_timeout" explicit_type "base::TimeDelta"
	  param inout name "state" type class_ref 3389879 // State
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} * ${p3}${v3}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} * ${p3}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Creates the UpdateManager instance, assuming ownership on the provided
 |state|."
      end

      operation 43696951 "~UpdateManager"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 43697079 "set_policy"
	cpp_inline protected explicit_return_type "void"
	nparams 1
	  param in name "policy" type class_ref 3389623 // Policy
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    policy_.reset(policy);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The UpdateManager receives ownership of the passed Policy instance."
      end

      operation 43697207 "state"
	cpp_inline protected return_type class_ref 3389879 // State
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return state_.get(); };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " State getter used for testing."
      end

      operation 43697335 "UnregisterEvalContext"
	private explicit_return_type "void"
	nparams 1
	  param inout name "ec" type class_ref 3389751 // EvaluationContext
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Unregisters (removes from repo) a previously created EvaluationContext."
      end

      classrelation 6830007 // policy_ (<directional composition>)
	relation 6830007 *-->
	  stereotype "std::unique_ptr"
	  a role_name "policy_" private
	    comment " The policy used by the UpdateManager. Note that since it is a const Policy,
 policy implementations are not allowed to persist state on this class.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<const ${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6830007 // policy_ (<directional composition>)
	  b parent class_ref 3389623 // Policy
      end

      classrelation 6830135 // default_policy_ (<directional composition>)
	relation 6830135 *-->
	  a role_name "default_policy_" const_relation private
	    comment " A safe default value to the current policy. This policy is used whenever
 a policy implementation fails with EvalStatus::kFailed.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6830135 // default_policy_ (<directional composition>)
	  b parent class_ref 3390903 // DefaultPolicy
      end

      classrelation 6830263 // state_ (<directional composition>)
	relation 6830263 *-->
	  stereotype "std::unique_ptr"
	  a role_name "state_" private
	    comment " State Providers.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6830263 // state_ (<directional composition>)
	  b parent class_ref 3389879 // State
      end

      classrelation 6830391 // clock_ (<unidirectional association>)
	relation 6830391 --->
	  a role_name "clock_" private
	    comment " Pointer to the mockable clock interface;
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6830391 // clock_ (<unidirectional association>)
	  b parent class_ref 3362359 // ClockInterface
      end

      attribute 12430263 "evaluation_timeout_"
	const_attribute private explicit_type "base::TimeDelta"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Timeout for a policy evaluation.
"
      end

      attribute 12430391 "expiration_timeout_"
	const_attribute private explicit_type "base::TimeDelta"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Timeout for expiration of the evaluation context, used for async requests.
"
      end

      attribute 12430519 "ec_repo_"
	private explicit_type "scoped_refptr<EvaluationContext>,
           ScopedRefPtrLess<EvaluationContext>"
	stereotype "std::set"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Repository of previously created EvaluationContext objects. These are being
 unregistered (and the reference released) when the context is being
 destructed; alternatively, when the UpdateManager instance is destroyed, it
 will remove all pending events associated with all outstanding contexts
 (which should, in turn, trigger their destruction).
"
      end

      classrelation 6830519 // weak_ptr_factory_ (<directional composition>)
	relation 6830519 *-->
	  stereotype "base::WeakPtrFactory"
	  a role_name "weak_ptr_factory_" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6830519 // weak_ptr_factory_ (<directional composition>)
	  b parent class_ref 3362999 // UpdateManager
      end
    end

    class 3363639 "FakeUpdateManager"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 6824887 // <generalisation>
	relation 6824887 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6824887 // <generalisation>
	  b parent class_ref 3362999 // UpdateManager
      end

      operation 43675831 "FakeUpdateManager"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "clock" type class_ref 3362359 // ClockInterface
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${v0}${)}${volatile}${throw}${abstract} : UpdateManager(clock, base::TimeDelta::FromSeconds(5),
                      base::TimeDelta::FromHours(1), new FakeState()) {
    // The FakeUpdateManager uses a DefaultPolicy.
    set_policy(new DefaultPolicy(clock));
  };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      extra_member 223159 "using"
	
	cpp "  using UpdateManager::set_policy;" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 43675959 "state"
	cpp_inline public return_type class_ref 3392823 // FakeState
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return reinterpret_cast<FakeState*>(UpdateManager::state());
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 3372215 "EvalStatus"
      visibility package stereotype "enum_class"
      cpp_decl "${comment}enum class ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The three different results of a policy request."
      attribute 12417975 "kFailed"
	public type class_ref 3372215 // EvalStatus
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12418103 "kSucceeded"
	public type class_ref 3372215 // EvalStatus
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12418231 "kAskMeAgainLater"
	public type class_ref 3372215 // EvalStatus
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3372343 "UpdateCheckParams"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Parameters of an update check. These parameters are determined by the
 UpdateCheckAllowed policy."
      attribute 12418359 "updates_enabled"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Whether the auto-updates are enabled on this build."
      end

      attribute 12418487 "target_version_prefix"
	public explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Attributes pertaining to the case where update checks are allowed.

 A target version prefix, if imposed by policy; otherwise, an empty string.
"
      end

      attribute 12418615 "target_channel"
	public explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " A target channel, if so imposed by policy; otherwise, an empty string.
"
      end

      attribute 12418743 "is_interactive"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Whether the allowed update is interactive (user-initiated) or periodic.
"
      end
    end

    class 3389111 "BoxedValue"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " BoxedValue is a class to hold pointers of a given type that deletes them when
 the instance goes out of scope, as std::unique_ptr<T> does. The main
 difference with it is that the type T is not part of the class, i.e., this
 isn't a parametric class. The class has a parametric constructor that accepts
 a const T* which will define the type of the object passed on delete.

 It is safe to use this class in linked containers such as std::list and
 std::map but the object can't be copied. This means that you need to
 construct the BoxedValue in place using a container method like emplace()
 or move it with std::move().

   list<BoxedValue> lst;
   lst.emplace_back(new const int(42));
   lst.emplace_back(new const string(\"Hello world!\"));

   map<int, BoxedValue> m;
   m.emplace(123, std::move(BoxedValue(new const string(\"Hola mundo!\"))));

   auto it = m.find(42);
   if (it != m.end())
     cout << \"m[42] points to \" << it->second.value() << endl;
   cout << \"m[33] points to \" << m[33].value() << endl;

 Since copy and assign are not allowed, you can't create a copy of the
 BoxedValue which means that you can only use a reference to it.
"
      operation 43662903 "BoxedValue"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : value_(nullptr), deleter_(nullptr), printer_(nullptr) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Creates an empty BoxedValue. Since the pointer can't be assigned from other
 BoxedValues or pointers, this is only useful in places where a default
 constructor is required, such as std::map::operator[]."
      end

      operation 43663031 "BoxedValue"
	stereotype "template"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "value" explicit_type "T"
	cpp_decl "    ${comment}template<typename T>
  ${inline}explicit ${name}${(}const ${t0} * ${p0}${v0}${)}${volatile}${throw}${abstract} : value_(static_cast<const void*>(value)), deleter_(ValueDeleter<T>),
      printer_(ValuePrinter<T>) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Creates a BoxedValue for the passed pointer |value|. The BoxedValue keeps
 the ownership of this pointer and can't be released."
      end

      operation 43663159 "BoxedValue"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "other" type class_ref 3389111 // BoxedValue
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${v0}${)}${volatile}${throw}${abstract} : value_(other.value_), deleter_(other.deleter_),
        printer_(other.printer_) {
    other.value_ = nullptr;
    other.deleter_ = nullptr;
    other.printer_ = nullptr;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " The move constructor takes ownership of the pointer since the semantics of
 it allows to render the passed BoxedValue undefined. You need to use the
 move constructor explicitly preventing it from accidental references,
 like in:
   BoxedValue new_box(std::move(other_box));"
      end

      operation 43663287 "~BoxedValue"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    if (deleter_)
      deleter_(value_);
  };
"
	
	
	
	
	comment " Deletes the |value| passed on construction using the delete for the passed
 type."
      end

      operation 43663415 "value"
	const cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return value_; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43663543 "ToString"
	const cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    if (!printer_)
      return \"(no printer)\";
    if (!value_)
      return \"(no value)\";
    return printer_(value_);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43663671 "ValueDeleter"
	stereotype "template"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "void"
	cpp_decl "    ${comment}template<typename T>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    delete reinterpret_cast<const T*>(value);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Static method to call the destructor of the right type."
      end

      operation 43663799 "ValuePrinter"
	stereotype "template"
	class_operation public explicit_return_type "std::string"
	nparams 1
	  param in name "value" explicit_type "void"
	cpp_decl "    ${comment}template<typename T>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Static method to print a type. See boxed_value.cc for common
 instantiations."
      end

      attribute 12408503 "value_"
	const_attribute private explicit_type "void"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " A pointer to the cached value.
"
      end

      attribute 12408631 "deleter_"
	private explicit_type "// A function that calls delete for the right type of value_. void (*)(const void*)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
  // A function that calls delete for the right type of value_.
  void (*${name})(const void*)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " A function that calls delete for the right type of value_.
"
      end

      attribute 12408759 "printer_"
	private explicit_type "// A function that converts value_ to a string. std::string (*)(const void*)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
  // A function that converts value_ to a string.
  std::string (*${name})(const void*)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " A function that converts value_ to a string.
"
      end
    end

    class 3389239 "UpdateBackoffAndDownloadUrlResult"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Output information from UpdateBackoffAndDownloadUrl."
      attribute 12408887 "do_increment_failures"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Whether the failed attempt count (maintained by the caller) needs to be
 incremented.
"
      end

      attribute 12409015 "backoff_expiry"
	public explicit_type "base::Time"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The current backoff expiry. Null if backoff is not in effect.
"
      end

      attribute 12409143 "url_idx"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The new URL index to use and number of download errors associated with it.
 Significant iff |do_increment_failures| is false and |backoff_expiry| is
 null. Negative value means no usable URL was found.
"
      end

      attribute 12409271 "url_num_errors"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3389367 "UpdateScatteringResult"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Parameters for update scattering, as returned by UpdateScattering."
      attribute 12409399 "is_scattering"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12409527 "wait_period"
	public explicit_type "base::TimeDelta"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12409655 "check_threshold"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3389495 "ChromeOSPolicy"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ChromeOSPolicy implements the policy-related logic used in ChromeOS."
      classrelation 6821431 // <generalisation>
	relation 6821431 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6821431 // <generalisation>
	  b parent class_ref 3389623 // Policy
      end

      operation 43663927 "ChromeOSPolicy"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43664055 "~ChromeOSPolicy"
	cpp_override cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 43664183 "UpdateCheckAllowed"
	const cpp_override public return_type class_ref 3372215 // EvalStatus
	nparams 4
	  param inout name "ec" type class_ref 3389751 // EvaluationContext
	  param inout name "state" type class_ref 3389879 // State
	  param inout name "error" explicit_type "std::string"
	  param inout name "result" type class_ref 3372343 // UpdateCheckParams
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} * ${p2}, ${t3} * ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Policy overrides."
      end

      operation 43664311 "UpdateCanStart"
	const cpp_override public return_type class_ref 3372215 // EvalStatus
	nparams 5
	  param inout name "ec" type class_ref 3389751 // EvaluationContext
	  param inout name "state" type class_ref 3389879 // State
	  param inout name "error" explicit_type "std::string"
	  param inout name "result" type class_ref 3390007 // UpdateDownloadParams
	  param in name "update_state" type class_ref 3390135 // UpdateState
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} * ${p2}, ${t3} * ${p3}, ${t4} ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43664439 "UpdateDownloadAllowed"
	const cpp_override public return_type class_ref 3372215 // EvalStatus
	nparams 4
	  param inout name "ec" type class_ref 3389751 // EvaluationContext
	  param inout name "state" type class_ref 3389879 // State
	  param inout name "error" explicit_type "std::string"
	  param inout name "result" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} * ${p2}, ${t3} * ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43664567 "P2PEnabled"
	const cpp_override public return_type class_ref 3372215 // EvalStatus
	nparams 4
	  param inout name "ec" type class_ref 3389751 // EvaluationContext
	  param inout name "state" type class_ref 3389879 // State
	  param inout name "error" explicit_type "std::string"
	  param inout name "result" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} * ${p2}, ${t3} * ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43664695 "P2PEnabledChanged"
	const cpp_override public return_type class_ref 3372215 // EvalStatus
	nparams 5
	  param inout name "ec" type class_ref 3389751 // EvaluationContext
	  param inout name "state" type class_ref 3389879 // State
	  param inout name "error" explicit_type "std::string"
	  param inout name "result" explicit_type "bool"
	  param in name "prev_result" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} * ${p2}, ${t3} * ${p3}, ${t4} ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43664823 "PolicyName"
	const cpp_override cpp_inline protected explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return \"ChromeOSPolicy\"; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Policy override."
      end

      extra_member 222903 "friend"
	
	cpp "
  friend class UmChromeOSPolicyTest;" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      attribute 12409783 "kZeroInterval"
	const_attribute private explicit_type "base::TimeDelta"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Auxiliary constant (zero by default).
"
      end

      attribute 12409911 "kTimeoutInitialInterval"
	class_attribute const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Default update check timeout interval/fuzz values used to compute the
 NextUpdateCheckTime(), in seconds. Actual fuzz is within +/- half of the
 indicated value.
"
      end

      attribute 12410039 "kTimeoutPeriodicInterval"
	class_attribute const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12410167 "kTimeoutMaxBackoffInterval"
	class_attribute const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12410295 "kTimeoutRegularFuzz"
	class_attribute const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12410423 "kAttemptBackoffMaxIntervalInDays"
	class_attribute const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Maximum update attempt backoff interval and fuzz.
"
      end

      attribute 12410551 "kAttemptBackoffFuzzInHours"
	class_attribute const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12410679 "kMaxP2PAttempts"
	class_attribute const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Maximum number of times we'll allow using P2P for the same update payload.
"
      end

      attribute 12410807 "kMaxP2PAttemptsPeriodInSeconds"
	class_attribute const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Maximum period of time allowed for download a payload via P2P, in seconds.
"
      end

      operation 43664951 "NextUpdateCheckTime"
	const private return_type class_ref 3372215 // EvalStatus
	nparams 4
	  param inout name "ec" type class_ref 3389751 // EvaluationContext
	  param inout name "state" type class_ref 3389879 // State
	  param inout name "error" explicit_type "std::string"
	  param inout name "next_update_check" explicit_type "base::Time"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} * ${p2}, ${t3} * ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A private policy implementation returning the wallclock timestamp when
 the next update check should happen.
 TODO(garnold) We should probably change that to infer a monotonic
 timestamp, which will make the update check intervals more resilient to
 clock skews. Might require switching some of the variables exported by the
 UpdaterProvider to report monotonic time, as well."
      end

      operation 43665079 "FuzzedInterval"
	class_operation private explicit_return_type "base::TimeDelta"
	nparams 3
	  param inout name "prng" type class_ref 3390263 // PRNG
	  param in name "interval" explicit_type "int"
	  param in name "fuzz" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns a TimeDelta based on the provided |interval| seconds +/- half
 |fuzz| seconds. The return value is guaranteed to be a non-negative
 TimeDelta."
      end

      operation 43665207 "UpdateBackoffAndDownloadUrl"
	const private return_type class_ref 3372215 // EvalStatus
	nparams 5
	  param inout name "ec" type class_ref 3389751 // EvaluationContext
	  param inout name "state" type class_ref 3389879 // State
	  param inout name "error" explicit_type "std::string"
	  param inout name "result" type class_ref 3389239 // UpdateBackoffAndDownloadUrlResult
	  param in name "update_state" type class_ref 3390135 // UpdateState
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}, const ${t4} & ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} * ${p2}, ${t3} * ${p3}, const ${t4} & ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A private policy for determining backoff and the download URL to use.
 Within |update_state|, |backoff_expiry| and |is_backoff_disabled| are used
 for determining whether backoff is still in effect; if not,
 |download_errors| is scanned past |failures_last_updated|, and a new
 download URL from |download_urls| is found and written to |result->url_idx|
 (-1 means no usable URL exists); |download_errors_max| determines the
 maximum number of attempts per URL, according to the Omaha response. If an
 update failure is identified then |result->do_increment_failures| is set to
 true; if backoff is enabled, a new backoff period is computed (from the
 time of failure) based on |num_failures|. Otherwise, backoff expiry is
 nullified, indicating that no backoff is in effect.

 If backing off but the previous backoff expiry is unchanged, returns
 |EvalStatus::kAskMeAgainLater|. Otherwise:

 * If backing off with a new expiry time, then |result->backoff_expiry| is
   set to this time.

 * Else, |result->backoff_expiry| is set to null, indicating that no backoff
   is in effect.

 In any of these cases, returns |EvalStatus::kSucceeded|. If an error
 occurred, returns |EvalStatus::kFailed|."
      end

      operation 43665335 "UpdateScattering"
	const private return_type class_ref 3372215 // EvalStatus
	nparams 5
	  param inout name "ec" type class_ref 3389751 // EvaluationContext
	  param inout name "state" type class_ref 3389879 // State
	  param inout name "error" explicit_type "std::string"
	  param inout name "result" type class_ref 3389367 // UpdateScatteringResult
	  param in name "update_state" type class_ref 3390135 // UpdateState
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}, const ${t4} & ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} * ${p2}, ${t3} * ${p3}, const ${t4} & ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A private policy for checking whether scattering is due. Writes in |result|
 the decision as to whether or not to scatter; a wallclock-based scatter
 wait period, which ranges from zero (do not wait) and no greater than the
 current scatter factor provided by the device policy (if available) or the
 maximum wait period determined by Omaha; and an update check-based
 threshold between zero (no threshold) and the maximum number determined by
 the update engine. Within |update_state|, |scatter_wait_period| should
 contain the last scattering period returned by this function, or zero if no
 wait period is known; |scatter_check_threshold| is the last update check
 threshold, or zero if no such threshold is known. If not scattering, or if
 any of the scattering values has changed, returns |EvalStatus::kSucceeded|;
 otherwise, |EvalStatus::kAskMeAgainLater|."
      end
    end

    class 3389623 "Policy"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The Policy class is an interface to the ensemble of policy requests that the
 client can make. A derived class includes the policy implementations of
 these.

 When compile-time selection of the policy is required due to missing or extra
 parts in a given platform, a different Policy subclass can be used."
      operation 43681463 "~Policy"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 43681591 "UpdateCheckAllowed"
	abstract const cpp_virtual public return_type class_ref 3372215 // EvalStatus
	nparams 4
	  param inout name "ec" type class_ref 3389751 // EvaluationContext
	  param inout name "state" type class_ref 3389879 // State
	  param inout name "error" explicit_type "std::string"
	  param inout name "result" type class_ref 3372343 // UpdateCheckParams
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " List of policy requests. A policy request takes an EvaluationContext as the
 first argument, a State instance, a returned error message, a returned
 value and optionally followed by one or more arbitrary constant arguments.

 When the implementation fails, the method returns EvalStatus::kFailed and
 sets the |error| string.
 UpdateCheckAllowed returns whether it is allowed to request an update check
 to Omaha."
      end

      operation 43681719 "UpdateCanStart"
	abstract const cpp_virtual public return_type class_ref 3372215 // EvalStatus
	nparams 5
	  param inout name "ec" type class_ref 3389751 // EvaluationContext
	  param inout name "state" type class_ref 3389879 // State
	  param inout name "error" explicit_type "std::string"
	  param inout name "result" type class_ref 3390007 // UpdateDownloadParams
	  param in name "update_state" type class_ref 3390135 // UpdateState
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns EvalStatus::kSucceeded if either an update can start being
 processed, or the attempt needs to be aborted. In cases where the update
 needs to wait for some condition to be satisfied, but none of the values
 that need to be persisted has changed, returns
 EvalStatus::kAskMeAgainLater. Arguments include an |update_state| that
 encapsulates data pertaining to the current ongoing update process."
      end

      operation 43681847 "UpdateDownloadAllowed"
	abstract const cpp_virtual public return_type class_ref 3372215 // EvalStatus
	nparams 4
	  param inout name "ec" type class_ref 3389751 // EvaluationContext
	  param inout name "state" type class_ref 3389879 // State
	  param inout name "error" explicit_type "std::string"
	  param inout name "result" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Checks whether downloading of an update is allowed; currently, this checks
 whether the network connection type is suitable for updating over.  May
 consult the shill provider as well as the device policy (if available).
 Returns |EvalStatus::kSucceeded|, setting |result| according to whether or
 not the current connection can be used; on error, returns
 |EvalStatus::kFailed| and sets |error| accordingly."
      end

      operation 43681975 "P2PEnabled"
	abstract const cpp_virtual public return_type class_ref 3372215 // EvalStatus
	nparams 4
	  param inout name "ec" type class_ref 3389751 // EvaluationContext
	  param inout name "state" type class_ref 3389879 // State
	  param inout name "error" explicit_type "std::string"
	  param inout name "result" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Checks whether P2P is enabled. This may consult device policy and other
 global settings."
      end

      operation 43682103 "P2PEnabledChanged"
	abstract const cpp_virtual public return_type class_ref 3372215 // EvalStatus
	nparams 5
	  param inout name "ec" type class_ref 3389751 // EvaluationContext
	  param inout name "state" type class_ref 3389879 // State
	  param inout name "error" explicit_type "std::string"
	  param inout name "result" explicit_type "bool"
	  param in name "prev_result" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Checks whether P2P is enabled, but blocks (returns
 |EvalStatus::kAskMeAgainLater|) until it is different from |prev_result|.
 If the P2P enabled status is not expected to change, will return
 immediately with |EvalStatus::kSucceeded|. This internally uses the
 P2PEnabled() policy above."
      end

      operation 43682231 "Policy"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43682359 "PolicyName"
	abstract const cpp_virtual protected explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the name of the actual policy class."
      end
    end

    class 3389751 "EvaluationContext"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The EvaluationContext class is the interface between a policy implementation
 and the state. The EvaluationContext tracks the variables used by a policy
 request and caches the returned values, owning those cached values.
 The same EvaluationContext should be re-used for all the evaluations of the
 same policy request (an AsyncPolicyRequest might involve several
 re-evaluations). Each evaluation of the EvaluationContext is run at a given
 point in time, which is used as a reference for the evaluation timeout and
 the time based queries of the policy, such as
 Is{Wallclock,Monotonic}TimeGreaterThan().

 Example:

   scoped_refptr<EvaluationContext> ec = new EvaluationContext(...);

   ...
   // The following call to ResetEvaluation() is optional. Use it to reset the
   // evaluation time if the EvaluationContext isn't used right after its
   // construction.
   ec->ResetEvaluation();
   EvalStatus status = policy->SomeMethod(ec, state, &result, args...);

   ...
   // Run a closure when any of the used async variables changes its value or
   // the timeout for re-query the values happens again.
   ec->RunOnValueChangeOrTimeout(closure);
   // If the provided |closure| wants to re-evaluate the policy, it should
   // call ec->ResetEvaluation() to start a new evaluation.
"
      classrelation 6822199 // <generalisation>
	relation 6822199 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6822199 // <generalisation>
	  b parent class_ref 3391159 // typedef202
      end

      classrelation 6822327 // <generalisation>
	relation 6822327 ---|>
	  a private
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6822327 // <generalisation>
	  b parent class_ref 3391415 // ObserverInterface
      end

      operation 43668919 "EvaluationContext"
	public explicit_return_type ""
	nparams 4
	  param inout name "clock" type class_ref 3362359 // ClockInterface
	  param in name "evaluation_timeout" explicit_type "base::TimeDelta"
	  param in name "expiration_timeout" explicit_type "base::TimeDelta"
	  param in name "unregister_cb" explicit_type "std::unique_ptr<base::Callback<void(EvaluationContext*)>>"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43669047 "EvaluationContext"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param inout name "clock" type class_ref 3362359 // ClockInterface
	  param in name "evaluation_timeout" explicit_type "base::TimeDelta"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} : EvaluationContext(
          clock, evaluation_timeout, base::TimeDelta::Max(),
          std::unique_ptr<base::Callback<void(EvaluationContext*)>>()) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43669175 "~EvaluationContext"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 43669303 "GetValue"
	stereotype "template"
	public explicit_return_type "T"
	nparams 1
	  param inout name "var" explicit_type "Variable<T>"
	cpp_decl "    ${comment}template<typename T>
  ${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns a pointer to the value returned by the passed variable |var|. The
 EvaluationContext instance keeps the ownership of the returned object. The
 returned object is valid during the life of the evaluation, even if the
 passed Variable changes it.

 In case of error, a null value is returned."
      end

      operation 43669431 "IsWallclockTimeGreaterThan"
	public explicit_return_type "bool"
	nparams 1
	  param in name "timestamp" explicit_type "base::Time"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns whether the evaluation time has surpassed |timestamp|, on either
 the ClockInterface::GetWallclockTime() or
 ClockInterface::GetMonotonicTime() scales, respectively."
      end

      operation 43669559 "IsMonotonicTimeGreaterThan"
	public explicit_return_type "bool"
	nparams 1
	  param in name "timestamp" explicit_type "base::Time"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43669687 "is_expired"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return is_expired_; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns whether the evaluation context has expired."
      end

      operation 43669815 "ResetEvaluation"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " TODO(deymo): Move the following methods to an interface only visible by the
 UpdateManager class and not the policy implementations.
 Resets the EvaluationContext to its initial state removing all the
 non-const cached variables and re-setting the evaluation time. This should
 be called right before any new evaluation starts."
      end

      operation 43669943 "ResetExpiration"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Clears the expiration status of the EvaluationContext and resets its
 expiration timeout based on |expiration_timeout_|. This should be called if
 expiration occurred, prior to re-evaluating the policy."
      end

      operation 43670071 "RunOnValueChangeOrTimeout"
	public explicit_return_type "bool"
	nparams 1
	  param in name "callback" explicit_type "base::Closure"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Schedules the passed |callback| closure to be called when a cached
 variable changes its value, a polling interval passes, or the context
 expiration occurs. If none of these events can happen, for example if
 there's no cached variable, this method returns false.

 Right before the passed closure is called the EvaluationContext is
 reseted, removing all the non-const cached values."
      end

      operation 43670199 "DumpContext"
	const public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns a textual representation of the evaluation context,
 including the variables and their values. This is intended only
 to help with debugging and the format may change in the future."
      end

      operation 43670327 "RemoveObserversAndTimeout"
	public explicit_return_type "std::unique_ptr<base::Closure>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Removes all the Observers callbacks and timeout events scheduled by
 RunOnValueChangeOrTimeout(). Also releases and returns the closure
 associated with these events. This method is idempotent."
      end

      extra_member 223031 "friend"
	
	cpp "
  friend class UmEvaluationContextTest;" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 43670455 "ValueChanged"
	cpp_override private explicit_return_type "void"
	nparams 1
	  param inout name "var" type class_ref 3391287 // BaseVariable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " BaseVariable::ObserverInterface override."
      end

      operation 43670583 "OnTimeout"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Called from the main loop when a scheduled timeout has passed."
      end

      operation 43670711 "OnValueChangedOrTimeout"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Removes the observers from the used Variables and cancels the timeout,
 then executes the scheduled callback."
      end

      operation 43670839 "RemainingTime"
	const private explicit_return_type "base::TimeDelta"
	nparams 1
	  param in name "monotonic_deadline" explicit_type "base::Time"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " If |monotonic_deadline| is not Time::Max(), returns the remaining time
 until it is reached, or zero if it has passed. Otherwise, returns
 TimeDelta::Max()."
      end

      operation 43670967 "MonotonicDeadline"
	private explicit_return_type "base::Time"
	nparams 1
	  param in name "timeout" explicit_type "base::TimeDelta"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns a monotonic clock timestamp at which |timeout| will have elapsed
 since the current time."
      end

      class 3391543 "ValueCacheMap"
	visibility package stereotype "typedef" base_type class_ref 3391287 // BaseVariable
	cpp_decl "${comment}typedef std::map<${type}*,BoxedValue> ${name};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 6822455 // <dependency>
	  relation 6822455 -_->
	    a public
	      cpp default "#include in source"
	      classrelation_ref 6822455 // <dependency>
	    b parent class_ref 3391287 // BaseVariable
	end
      end

      classrelation 6822583 // value_cache_ (<directional composition>)
	relation 6822583 *-->
	  a role_name "value_cache_" private
	    comment " The cached values of the called Variables.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6822583 // value_cache_ (<directional composition>)
	  b parent class_ref 3391543 // ValueCacheMap
      end

      attribute 12411063 "callback_"
	private explicit_type "base::Closure"
	stereotype "std::unique_ptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " A callback used for triggering re-evaluation upon a value change or poll
 timeout, or notifying about the evaluation context expiration. It is up to
 the caller to determine whether or not expiration occurred via
 is_expired().
"
      end

      attribute 12411191 "timeout_event_"
	private explicit_type "brillo::MessageLoop::TaskId"
	init_value "= 
      brillo::MessageLoop::kTaskIdNull"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The TaskId returned by the message loop identifying the timeout callback.
 Used for canceling the timeout callback.
"
      end

      attribute 12411319 "timeout_marks_expiration_"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Whether a timeout event firing marks the expiration of the evaluation
 context.
"
      end

      attribute 12411447 "is_expired_"
	private explicit_type "bool"
	init_value "=  false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Whether the evaluation context has indeed expired.
"
      end

      attribute 12411575 "clock_"
	private type class_ref 3362359 // ClockInterface
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * const ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Pointer to the mockable clock interface;
"
      end

      attribute 12411703 "evaluation_start_wallclock_"
	private explicit_type "base::Time"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The timestamps when the evaluation of this EvaluationContext started,
 corresponding to ClockInterface::GetWallclockTime() and
 ClockInterface::GetMonotonicTime(), respectively. These values are reset
 every time ResetEvaluation() is called.
"
      end

      attribute 12411831 "evaluation_start_monotonic_"
	private explicit_type "base::Time"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12411959 "reevaluation_time_wallclock_"
	private explicit_type "base::Time"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The timestamps when a reevaluation should be triggered due to various
 expected value changes, corresponding to ClockInterface::GetWallclockTime()
 and ClockInterface::GetMonotonicTIme(), respectively. These timestamps are
 greater or equal to corresponding |evaluation_start_{wallclock,monotonic}_|
 counterparts since they are in the future; however, they may be smaller
 than the current corresponding times during the course of evaluation.
"
      end

      attribute 12412087 "reevaluation_time_monotonic_"
	private explicit_type "base::Time"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12412215 "evaluation_timeout_"
	const_attribute private explicit_type "base::TimeDelta"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The timeout of an evaluation.
"
      end

      attribute 12412343 "evaluation_monotonic_deadline_"
	private explicit_type "base::Time"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The timestamp in the ClockInterface::GetMonotonicTime() scale at which the
 current evaluation should finish.
"
      end

      attribute 12412471 "expiration_timeout_"
	const_attribute private explicit_type "base::TimeDelta"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The expiration timeout of the evaluation context.
"
      end

      attribute 12412599 "expiration_monotonic_deadline_"
	private explicit_type "base::Time"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The monotonic clock deadline at which expiration occurs.
"
      end

      attribute 12412727 "unregister_cb_"
	private explicit_type "base::Callback<void(EvaluationContext*)>"
	stereotype "std::unique_ptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " A callback for unregistering the context upon destruction.
"
      end

      classrelation 6822711 // weak_ptr_factory_ (<directional composition>)
	relation 6822711 *-->
	  stereotype "base::WeakPtrFactory"
	  a role_name "weak_ptr_factory_" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6822711 // weak_ptr_factory_ (<directional composition>)
	  b parent class_ref 3389751 // EvaluationContext
      end
    end

    class 3389879 "State"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The State class is an interface to the ensemble of providers. This class
 gives visibility of the state providers to policy implementations."
      operation 43693879 "~State"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 43694007 "config_provider"
	abstract cpp_virtual public return_type class_ref 3390391 // ConfigProvider
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " These methods return the given provider."
      end

      operation 43694135 "device_policy_provider"
	abstract cpp_virtual public return_type class_ref 3391031 // DevicePolicyProvider
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43694263 "random_provider"
	abstract cpp_virtual public return_type class_ref 3392183 // RandomProvider
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43694391 "shill_provider"
	abstract cpp_virtual public return_type class_ref 3392439 // ShillProvider
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43694519 "system_provider"
	abstract cpp_virtual public return_type class_ref 3393335 // SystemProvider
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43694647 "time_provider"
	abstract cpp_virtual public return_type class_ref 3393463 // TimeProvider
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43694775 "updater_provider"
	abstract cpp_virtual public return_type class_ref 3393591 // UpdaterProvider
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43694903 "State"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 3390007 "UpdateDownloadParams"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 12422327 "update_can_start"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Whether the update attempt is allowed to proceed.
"
      end

      classrelation 6826423 // cannot_start_reason (<directional composition>)
	relation 6826423 *-->
	  a role_name "cannot_start_reason" public
	    comment " If update cannot proceed, a reason code for why it cannot do so.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6826423 // cannot_start_reason (<directional composition>)
	  b parent class_ref 3394871 // UpdateCannotStartReason
      end

      attribute 12422455 "download_url_idx"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Download related attributes. The update engine uses them to choose the
 means for downloading and applying an update.

 The index of the download URL to use (-1 means no suitable URL was found)
 and whether it can be used. Even if there's no URL or its use is not
 allowed (backoff, scattering) there may still be other means for download
 (like P2P).  The URL index needs to be persisted and handed back to the
 policy on the next time it is called.
"
      end

      attribute 12422583 "download_url_allowed"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12422711 "download_url_num_errors"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The number of download errors associated with this download URL. This value
 needs to be persisted and handed back to the policy on the next time it is
 called.
"
      end

      attribute 12422839 "p2p_downloading_allowed"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Whether P2P download and sharing are allowed.
"
      end

      attribute 12422967 "p2p_sharing_allowed"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12423095 "do_increment_failures"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Other values that need to be persisted and handed to the policy as need on
 the next call.

 Whether an update failure has been identified by the policy. The client
 should increment and persist its update failure count, and record the time
 when this was done; it needs to hand these values back to the policy
 (UpdateState.{num_failures,failures_last_updated}) on the next time it is
 called.
"
      end

      attribute 12423223 "backoff_expiry"
	public explicit_type "base::Time"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The current backof expiry.
"
      end

      attribute 12423351 "scatter_wait_period"
	public explicit_type "base::TimeDelta"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The scattering wait period and check threshold.
"
      end

      attribute 12423479 "scatter_check_threshold"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3390135 "UpdateState"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Input arguments to UpdateCanStart.

 A snapshot of the state of the current update process. This includes
 everything that a policy might need and that occurred since the first time
 the current payload was first seen and attempted (consecutively)."
      attribute 12418871 "is_interactive"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Information pertaining to the current update payload and/or check.

 Whether the current update check is an interactive one. The caller should
 feed the value returned by the preceding call to UpdateCheckAllowed().
"
      end

      attribute 12418999 "is_delta_payload"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Whether it is a delta payload.
"
      end

      attribute 12419127 "first_seen"
	public explicit_type "base::Time"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Wallclock time when payload was first (consecutively) offered by Omaha.
"
      end

      attribute 12419255 "num_checks"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Number of consecutive update checks returning the current update.
"
      end

      attribute 12419383 "num_failures"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Number of update payload failures and the wallclock time when it was last
 updated by the updater. These should both be nullified whenever a new
 update is seen; they are updated at the policy's descretion (via
 UpdateDownloadParams.do_increment_failures) once all of the usable download
 URLs for the payload have been used without success. They should be
 persisted across reboots.
"
      end

      attribute 12419511 "failures_last_updated"
	public explicit_type "base::Time"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12419639 "download_urls"
	public explicit_type "std::string"
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Information pertaining to downloading and applying of the current update.

 An array of download URLs provided by Omaha.
"
      end

      attribute 12419767 "download_errors_max"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Max number of errors allowed per download URL.
"
      end

      attribute 12419895 "last_download_url_idx"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The index of the URL to download from, as determined in the previous call
 to the policy. For a newly seen payload, this should be -1.
"
      end

      attribute 12420023 "last_download_url_num_errors"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The number of successive download errors pertaining to this last URL, as
 determined in the previous call to the policy. For a newly seen payload,
 this should be zero.
"
      end

      attribute 12420151 "download_errors"
	public explicit_type "std::tuple<int, chromeos_update_engine::ErrorCode, base::Time>"
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " An array of errors that occurred while trying to download this update since
 the previous call to this policy has returned, or since this payload was
 first seen, or since the updater process has started (whichever is later).
 Includes the URL index attempted, the error code, and the wallclock-based
 timestamp when it occurred.
"
      end

      attribute 12420279 "p2p_downloading_disabled"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Whether Omaha forbids use of P2P for downloading and/or sharing.
"
      end

      attribute 12420407 "p2p_sharing_disabled"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12420535 "p2p_num_attempts"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The number of P2P download attempts and wallclock-based time when P2P
 download was first attempted.
"
      end

      attribute 12420663 "p2p_first_attempted"
	public explicit_type "base::Time"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12420791 "backoff_expiry"
	public explicit_type "base::Time"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Information pertaining to update backoff mechanism.

 The currently known (persisted) wallclock-based backoff expiration time;
 zero if none.
"
      end

      attribute 12420919 "is_backoff_disabled"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Whether backoff is disabled by Omaha.
"
      end

      attribute 12421047 "scatter_wait_period"
	public explicit_type "base::TimeDelta"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Information pertaining to update scattering.

 The currently knwon (persisted) scattering wallclock-based wait period and
 update check threshold; zero if none.
"
      end

      attribute 12421175 "scatter_check_threshold"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12421303 "scatter_wait_period_max"
	public explicit_type "base::TimeDelta"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Maximum wait period allowed for this update, as determined by Omaha.
"
      end

      attribute 12421431 "scatter_check_threshold_min"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Minimum/maximum check threshold values.
 TODO(garnold) These appear to not be related to the current update and so
 should probably be obtained as variables via UpdaterProvider.
"
      end

      attribute 12421559 "scatter_check_threshold_max"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3390263 "PRNG"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " A thread-safe, unsecure, 32-bit pseudo-random number generator based on
 std::mt19937."
      operation 43682487 "PRNG"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "seed" type class_ref 2810935 // uint32_t
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract} : gen_(seed) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Initializes the generator with the passed |seed| value."
      end

      operation 43682615 "Rand"
	cpp_inline public return_type class_ref 2810935 // uint32_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return gen_(); };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns a random unsigned 32-bit integer."
      end

      operation 43682743 "RandMinMax"
	cpp_inline public explicit_return_type "int"
	nparams 2
	  param in name "min" explicit_type "int"
	  param in name "max" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    DCHECK_LE(min, max);
    return std::uniform_int_distribution<>(min, max)(gen_);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns a random integer uniformly distributed in the range [min, max]."
      end

      attribute 12423607 "gen_"
	private explicit_type "std::mt19937"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " A pseudo-random number generator.
"
      end
    end

    class 3390391 "ConfigProvider"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Provider for const system configurations. This provider reads the
 configuration from a file on /etc."
      classrelation 6821559 // <generalisation>
	relation 6821559 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6821559 // <generalisation>
	  b parent class_ref 3390519 // Provider
      end

      operation 43665463 "var_is_oobe_enabled"
	abstract cpp_virtual public explicit_return_type "Variable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns a variable stating whether the out of the box experience (OOBE) is
 enabled on this device. A value of false means that the device doesn't have
 an OOBE workflow."
      end

      operation 43665591 "ConfigProvider"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 3390519 "Provider"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Abstract base class for a policy provider."
      operation 43682871 "~Provider"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 43682999 "Provider"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 3390647 "Variable"
      abstract visibility package 
      nformals 1
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Interface to an Update Manager variable of a given type. Implementation
 internals are hidden as protected members, since policies should not be
 using them directly."
      classrelation 6831031 // <generalisation>
	relation 6831031 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6831031 // <generalisation>
	  b parent class_ref 3391287 // BaseVariable
      end

      operation 43701175 "~Variable"
	cpp_override cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      classrelation 6831159 // <dependency>
	relation 6831159 -_->
	  stereotype "friend"
	  a public
	    cpp default "Generated"
	    classrelation_ref 6831159 // <dependency>
	  b parent class_ref 3389751 // EvaluationContext
      end

      classrelation 6831287 // <dependency>
	relation 6831287 -_->
	  stereotype "friend"
	  a public
	    cpp default "Generated"
	    classrelation_ref 6831287 // <dependency>
	  b parent class_ref 3396023 // UmTestUtils
      end

      operation 43701303 "Variable"
	cpp_inline protected explicit_return_type ""
	nparams 2
	  param in name "name" explicit_type "std::string"
	  param in name "mode" type class_ref 3393975 // VariableMode
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} : BaseVariable(name, mode) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43701431 "Variable"
	cpp_inline protected explicit_return_type ""
	nparams 2
	  param in name "name" explicit_type "std::string"
	  param in name "poll_interval" explicit_type "base::TimeDelta"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} : BaseVariable(name, poll_interval) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43701559 "GetValue"
	abstract cpp_virtual cpp_inline protected explicit_return_type "T"
	nparams 2
	  param in name "timeout" explicit_type "base::TimeDelta"
	  param inout name "errmsg" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Gets the current value of the variable. The current value is copied to a
 new object and returned. The caller of this method owns the object and
 should delete it.

 In case of and error getting the current value or the |timeout| timeout is
 exceeded, a null value is returned and the |errmsg| is set.

 The caller can pass a null value for |errmsg|, in which case the error
 message won't be set."
      end
    end

    class 3390775 "DefaultPolicyState"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Auxiliary state class for DefaultPolicy evaluations.

 IMPORTANT: The use of a state object in policies is generally forbidden, as
 it was a design decision to keep policy calls side-effect free. We make an
 exception here to ensure that DefaultPolicy indeed serves as a safe (and
 secure) fallback option. This practice should be avoided when imlpementing
 other policies."
      operation 43665719 "DefaultPolicyState"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43665847 "IsLastCheckAllowedTimeSet"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return last_check_allowed_time_ != base::Time::Max();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43665975 "set_last_check_allowed_time"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "timestamp" explicit_type "base::Time"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    last_check_allowed_time_ = timestamp;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sets/returns the point time on the monotonic time scale when the latest
 check allowed was recorded."
      end

      operation 43666103 "last_check_allowed_time"
	const cpp_inline public explicit_return_type "base::Time"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return last_check_allowed_time_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 12410935 "last_check_allowed_time_"
	private explicit_type "base::Time"
	init_value "=  base::Time::Max()"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3390903 "DefaultPolicy"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The DefaultPolicy is a safe Policy implementation that doesn't fail. The
 values returned by this policy are safe default in case of failure of the
 actual policy being used by the UpdateManager."
      classrelation 6821687 // <generalisation>
	relation 6821687 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6821687 // <generalisation>
	  b parent class_ref 3389623 // Policy
      end

      operation 43666231 "DefaultPolicy"
	public explicit_return_type ""
	nparams 1
	  param inout name "clock" type class_ref 3362359 // ClockInterface
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43666359 "DefaultPolicy"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : DefaultPolicy(nullptr) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43666487 "~DefaultPolicy"
	cpp_override cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 43666615 "UpdateCheckAllowed"
	const cpp_override public return_type class_ref 3372215 // EvalStatus
	nparams 4
	  param inout name "ec" type class_ref 3389751 // EvaluationContext
	  param inout name "state" type class_ref 3389879 // State
	  param inout name "error" explicit_type "std::string"
	  param inout name "result" type class_ref 3372343 // UpdateCheckParams
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} * ${p2}, ${t3} * ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Policy overrides."
      end

      operation 43666743 "UpdateCanStart"
	const cpp_override public return_type class_ref 3372215 // EvalStatus
	nparams 5
	  param inout name "ec" type class_ref 3389751 // EvaluationContext
	  param inout name "state" type class_ref 3389879 // State
	  param inout name "error" explicit_type "std::string"
	  param inout name "result" type class_ref 3390007 // UpdateDownloadParams
	  param in name "update_state" type class_ref 3390135 // UpdateState
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} * ${p2}, ${t3} * ${p3}, ${t4} ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43666871 "UpdateDownloadAllowed"
	const cpp_override public return_type class_ref 3372215 // EvalStatus
	nparams 4
	  param inout name "ec" type class_ref 3389751 // EvaluationContext
	  param inout name "state" type class_ref 3389879 // State
	  param inout name "error" explicit_type "std::string"
	  param inout name "result" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} * ${p2}, ${t3} * ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43666999 "P2PEnabled"
	const cpp_override public return_type class_ref 3372215 // EvalStatus
	nparams 4
	  param inout name "ec" type class_ref 3389751 // EvaluationContext
	  param inout name "state" type class_ref 3389879 // State
	  param inout name "error" explicit_type "std::string"
	  param inout name "result" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} * ${p2}, ${t3} * ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43667127 "P2PEnabledChanged"
	const cpp_override public return_type class_ref 3372215 // EvalStatus
	nparams 5
	  param inout name "ec" type class_ref 3389751 // EvaluationContext
	  param inout name "state" type class_ref 3389879 // State
	  param inout name "error" explicit_type "std::string"
	  param inout name "result" explicit_type "bool"
	  param in name "prev_result" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} * ${p2}, ${t3} * ${p3}, ${t4} ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43667255 "PolicyName"
	const cpp_override cpp_inline protected explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return \"DefaultPolicy\"; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Policy override."
      end

      classrelation 6821815 // clock_ (<unidirectional association>)
	relation 6821815 --->
	  a role_name "clock_" private
	    comment " A clock interface.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6821815 // clock_ (<unidirectional association>)
	  b parent class_ref 3362359 // ClockInterface
      end

      classrelation 6821943 // aux_state_ (<directional composition>)
	relation 6821943 *-->
	  stereotype "std::unique_ptr"
	  a role_name "aux_state_" private
	    comment " An auxiliary state object.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6821943 // aux_state_ (<directional composition>)
	  b parent class_ref 3390775 // DefaultPolicyState
      end
    end

    class 3391031 "DevicePolicyProvider"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Provides access to the current DevicePolicy."
      classrelation 6822071 // <generalisation>
	relation 6822071 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6822071 // <generalisation>
	  b parent class_ref 3390519 // Provider
      end

      operation 43667383 "~DevicePolicyProvider"
	cpp_override cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 43667511 "var_device_policy_is_loaded"
	abstract cpp_virtual public explicit_return_type "Variable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Variable stating whether the DevicePolicy was loaded."
      end

      operation 43667639 "var_release_channel"
	abstract cpp_virtual public explicit_return_type "Variable<std::string>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Variables mapping the information received on the DevicePolicy protobuf."
      end

      operation 43667767 "var_release_channel_delegated"
	abstract cpp_virtual public explicit_return_type "Variable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43667895 "var_update_disabled"
	abstract cpp_virtual public explicit_return_type "Variable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43668023 "var_target_version_prefix"
	abstract cpp_virtual public explicit_return_type "Variable<std::string>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43668151 "var_scatter_factor"
	abstract cpp_virtual public explicit_return_type "Variable<base::TimeDelta>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns a non-negative scatter interval used for updates."
      end

      operation 43668279 "var_allowed_connection_types_for_update"
	abstract cpp_virtual public explicit_return_type "Variable<std::set<ConnectionType>>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Variable returning the set of connection types allowed for updates. The
 identifiers returned are consistent with the ones returned by the
 ShillProvider."
      end

      operation 43668407 "var_owner"
	abstract cpp_virtual public explicit_return_type "Variable<std::string>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Variable stating the name of the device owner. For enterprise enrolled
 devices, this will be an empty string."
      end

      operation 43668535 "var_http_downloads_enabled"
	abstract cpp_virtual public explicit_return_type "Variable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43668663 "var_au_p2p_enabled"
	abstract cpp_virtual public explicit_return_type "Variable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43668791 "DevicePolicyProvider"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 3391159 "typedef202"
      visibility package stereotype "typedef" explicit_base_type "base::RefCounted<EvaluationContext>"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 3391287 "BaseVariable"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Const variables never changes during the life of a policy request, so the
 EvaluationContext caches the value even between different evaluations of
 the same policy request.
 Poll variables, or synchronous variables, represent a variable with a value
 that can be queried at any time, but it is not known when the value
 changes on the source of information. In order to detect if the value of
 the variable changes, it has to be queried again.
 Async variables are able to produce a signal or callback whenever the
 value changes. This means that it's not required to poll the value to
 detect when it changes, instead, you should register an observer to get
 a notification when that happens.
 This class is a base class with the common functionality that doesn't
 depend on the variable's type, implemented by all the variables."
      class 3391415 "ObserverInterface"
	abstract visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 43699511 "~ObserverInterface"
	  cpp_virtual cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	  
	  
	  
	  
	end

	operation 43699639 "ValueChanged"
	  abstract cpp_virtual public explicit_return_type "void"
	  nparams 1
	    param inout name "variable" type class_ref 3391287 // BaseVariable
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Called when the value on the variable changes."
	end
      end

      operation 43699767 "~BaseVariable"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    if (!observer_list_.empty()) {
      LOG(WARNING) << \"Variable \" << name_ << \" deleted with \"
                   << observer_list_.size() << \" observers.\";
    }
    DCHECK(observer_list_.empty()) << \"Don't destroy the variable without \"
                                      \"removing the observers.\";
  };
"
	
	
	
	
      end

      operation 43699895 "GetName"
	const cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return name_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the variable name as a string."
      end

      operation 43700023 "GetMode"
	const cpp_inline public return_type class_ref 3393975 // VariableMode
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return mode_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the variable mode."
      end

      operation 43700151 "GetPollInterval"
	const cpp_inline public explicit_return_type "base::TimeDelta"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return poll_interval_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " For VariableModePoll variables, it returns the polling interval of this
 variable. In other case, it returns 0."
      end

      operation 43700279 "AddObserver"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "observer" type class_ref 3391415 // ObserverInterface
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    if (std::find(observer_list_.begin(), observer_list_.end(), observer) ==
        observer_list_.end()) {
      observer_list_.push_back(observer);
    }
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Adds and removes observers for value changes on the variable. This only
 works for kVariableAsync variables since the other modes don't track value
 changes. Adding the same observer twice has no effect."
      end

      operation 43700407 "RemoveObserver"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "observer" type class_ref 3391415 // ObserverInterface
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    observer_list_.remove(observer);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43700535 "BaseVariable"
	cpp_inline protected explicit_return_type ""
	nparams 2
	  param in name "name" explicit_type "std::string"
	  param in name "mode" type class_ref 3393975 // VariableMode
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} : BaseVariable(name, mode,
                     base::TimeDelta::FromMinutes(kDefaultPollMinutes)) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Creates a BaseVariable using the default polling interval (5 minutes)."
      end

      operation 43700663 "BaseVariable"
	cpp_inline protected explicit_return_type ""
	nparams 2
	  param in name "name" explicit_type "std::string"
	  param in name "poll_interval" explicit_type "base::TimeDelta"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} : BaseVariable(name, kVariableModePoll, poll_interval) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Creates a BaseVariable with mode kVariableModePoll and the provided
 polling interval."
      end

      operation 43700791 "NotifyValueChanged"
	cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    // Fire all the observer methods from the main loop as single call. In order
    // to avoid scheduling these callbacks when it is not needed, we check
    // first the list of observers.
    if (!observer_list_.empty()) {
      brillo::MessageLoop::current()->PostTask(
          FROM_HERE,
          base::Bind(&BaseVariable::OnValueChangedNotification,
                     base::Unretained(this)));
    }
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Calls ValueChanged on all the observers."
      end

      extra_member 223543 "friend"
	
	cpp "
  friend class UmEvaluationContextTest;" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 43700919 "BaseVariable"
	cpp_inline private explicit_return_type ""
	nparams 3
	  param in name "name" explicit_type "std::string"
	  param in name "mode" type class_ref 3393975 // VariableMode
	  param in name "poll_interval" explicit_type "base::TimeDelta"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw}${abstract} : name_(name), mode_(mode),
      poll_interval_(mode == kVariableModePoll ?
                     poll_interval : base::TimeDelta()) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43701047 "OnValueChangedNotification"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    // A ValueChanged() method can change the list of observers, for example
    // removing itself and invalidating the iterator, so we create a snapshot
    // of the observers first. Also, to support the case when *another* observer
    // is removed, we check for them.
    std::list<BaseVariable::ObserverInterface*> observer_list_copy(
        observer_list_);

    for (auto& observer : observer_list_copy) {
      if (std::find(observer_list_.begin(), observer_list_.end(), observer) !=
          observer_list_.end()) {
        observer->ValueChanged(this);
      }
    }
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 12432567 "kDefaultPollMinutes"
	class_attribute private explicit_type "int"
	init_value "=  5"
	cpp_constexpr cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The default PollInterval in minutes.
"
      end

      attribute 12432695 "name_"
	const_attribute private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The variable's name as a string.
"
      end

      classrelation 6830775 // mode_ (<directional composition>)
	relation 6830775 *-->
	  a role_name "mode_" const_relation private
	    comment " The variable's mode.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6830775 // mode_ (<directional composition>)
	  b parent class_ref 3393975 // VariableMode
      end

      attribute 12432823 "poll_interval_"
	const_attribute private explicit_type "base::TimeDelta"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The variable's polling interval for VariableModePoll variable and 0 for
 other modes.
"
      end

      classrelation 6830903 // observer_list_ (<unidirectional association>)
	relation 6830903 --->
	  stereotype "std::list"
	  a role_name "observer_list_" private
	    comment " The list of value changes observers.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}*> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6830903 // observer_list_ (<unidirectional association>)
	  b parent class_ref 3391415 // ObserverInterface
      end
    end

    class 3391671 "FakeConfigProvider"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Fake implementation of the ConfigProvider base class."
      classrelation 6822839 // <generalisation>
	relation 6822839 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6822839 // <generalisation>
	  b parent class_ref 3390391 // ConfigProvider
      end

      operation 43671095 "FakeConfigProvider"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43671223 "var_is_oobe_enabled"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_is_oobe_enabled_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 12412855 "var_is_oobe_enabled_"
	private explicit_type "bool"
	init_value " {  // NOLINT(whitespace/braces)
      \"is_oobe_enabled\", kVariableModeConst}"
	stereotype "FakeVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3391799 "FakeVariable"
      visibility package 
      nformals 1
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 3390647 // Variable
        rank 0 explicit_value "T"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " A fake typed variable to use while testing policy implementations. The
 variable can be instructed to return any object of its type."
      classrelation 6825399 // <realization>
	relation 6825399 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6825399 // <realization>
	  b parent class_ref 3390647 // Variable
      end

      operation 43678007 "FakeVariable"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "name" explicit_type "std::string"
	  param in name "mode" type class_ref 3393975 // VariableMode
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} : Variable<T>(name, mode) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43678135 "FakeVariable"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "name" explicit_type "std::string"
	  param in name "poll_interval" explicit_type "base::TimeDelta"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} : Variable<T>(name, poll_interval) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43678263 "~FakeVariable"
	cpp_override cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 43678391 "reset"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "p_value" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    ptr_.reset(p_value);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sets the next value of this variable to the passed |p_value| pointer. Once
 returned by GetValue(), the pointer is released and has to be set again.
 A value of null means that the GetValue() call will fail and return
 null."
      end

      operation 43678519 "NotifyValueChanged"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    Variable<T>::NotifyValueChanged();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Make the NotifyValueChanged() public for FakeVariables."
      end

      operation 43678647 "GetValue"
	cpp_override cpp_inline protected explicit_return_type "T"
	nparams 2
	  param in name "" explicit_type "base::TimeDelta"
	  param inout name "errmsg" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    if (ptr_ == nullptr && errmsg != nullptr)
      *errmsg = this->GetName() + \" is an empty FakeVariable\";
    // Passes the pointer ownership to the caller.
    return ptr_.release();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Variable<T> overrides.
 Returns the pointer set with reset(). The ownership of the object is passed
 to the caller and the pointer is release from the FakeVariable. A second
 call to GetValue() without reset() will return null and set the error
 message."
      end

      attribute 12416951 "ptr_"
	private explicit_type "const T"
	stereotype "std::unique_ptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The pointer returned by GetValue().
"
      end
    end

    class 3391927 "FakeDevicePolicyProvider"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Fake implementation of the DevicePolicyProvider base class."
      classrelation 6822967 // <generalisation>
	relation 6822967 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6822967 // <generalisation>
	  b parent class_ref 3391031 // DevicePolicyProvider
      end

      operation 43671351 "FakeDevicePolicyProvider"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43671479 "var_device_policy_is_loaded"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_device_policy_is_loaded_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43671607 "var_release_channel"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<std::string>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_release_channel_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43671735 "var_release_channel_delegated"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_release_channel_delegated_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43671863 "var_update_disabled"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_update_disabled_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43671991 "var_target_version_prefix"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<std::string>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_target_version_prefix_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43672119 "var_scatter_factor"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<base::TimeDelta>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_scatter_factor_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43672247 "var_allowed_connection_types_for_update"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<std::set<ConnectionType>>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_allowed_connection_types_for_update_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43672375 "var_owner"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<std::string>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_owner_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43672503 "var_http_downloads_enabled"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_http_downloads_enabled_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43672631 "var_au_p2p_enabled"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_au_p2p_enabled_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 12412983 "var_device_policy_is_loaded_"
	private explicit_type "bool"
	init_value " {
      \"policy_is_loaded\", kVariableModePoll}"
	stereotype "FakeVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12413111 "var_release_channel_"
	private explicit_type "std::string"
	init_value " {
      \"release_channel\", kVariableModePoll}"
	stereotype "FakeVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12413239 "var_release_channel_delegated_"
	private explicit_type "bool"
	init_value " {
      \"release_channel_delegated\", kVariableModePoll}"
	stereotype "FakeVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12413367 "var_update_disabled_"
	private explicit_type "bool"
	init_value " {
      \"update_disabled\", kVariableModePoll}"
	stereotype "FakeVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12413495 "var_target_version_prefix_"
	private explicit_type "std::string"
	init_value " {
      \"target_version_prefix\", kVariableModePoll}"
	stereotype "FakeVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12413623 "var_scatter_factor_"
	private explicit_type "base::TimeDelta"
	init_value " {
      \"scatter_factor\", kVariableModePoll}"
	stereotype "FakeVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12413751 "var_allowed_connection_types_for_update_"
	private explicit_type "std::set<ConnectionType>"
	init_value " {
          \"allowed_connection_types_for_update\", kVariableModePoll}"
	stereotype "FakeVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12413879 "var_owner_"
	private explicit_type "std::string"
	init_value " {\"owner\", kVariableModePoll}"
	stereotype "FakeVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12414007 "var_http_downloads_enabled_"
	private explicit_type "bool"
	init_value " {
      \"http_downloads_enabled\", kVariableModePoll}"
	stereotype "FakeVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12414135 "var_au_p2p_enabled_"
	private explicit_type "bool"
	init_value " {\"au_p2p_enabled\", kVariableModePoll}"
	stereotype "FakeVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3392055 "FakeRandomProvider"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Fake implementation of the RandomProvider base class."
      classrelation 6823095 // <generalisation>
	relation 6823095 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6823095 // <generalisation>
	  b parent class_ref 3392183 // RandomProvider
      end

      operation 43672759 "FakeRandomProvider"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43672887 "var_seed"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<uint64_t>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return &var_seed_; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 12414263 "var_seed_"
	private explicit_type "uint64_t"
	init_value " {\"seed\", kVariableModePoll}"
	stereotype "FakeVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3392183 "RandomProvider"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Provider of random values."
      classrelation 6826551 // <generalisation>
	relation 6826551 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6826551 // <generalisation>
	  b parent class_ref 3390519 // Provider
      end

      operation 43683127 "~RandomProvider"
	cpp_override cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 43683255 "var_seed"
	abstract cpp_virtual public explicit_return_type "Variable<uint64_t>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return a random number every time it is requested. Note that values
 returned by the variables are cached by the EvaluationContext, so the
 returned value will be the same during the same policy request. If more
 random values are needed use a PRNG seeded with this value."
      end

      operation 43683383 "RandomProvider"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 3392311 "FakeShillProvider"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Fake implementation of the ShillProvider base class."
      classrelation 6823223 // <generalisation>
	relation 6823223 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6823223 // <generalisation>
	  b parent class_ref 3392439 // ShillProvider
      end

      operation 43673015 "FakeShillProvider"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43673143 "var_is_connected"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_is_connected_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43673271 "var_conn_type"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<ConnectionType>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_conn_type_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43673399 "var_conn_tethering"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<ConnectionTethering>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_conn_tethering_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43673527 "var_conn_last_changed"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<base::Time>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_conn_last_changed_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 12414391 "var_is_connected_"
	private explicit_type "bool"
	init_value " {\"is_connected\", kVariableModePoll}"
	stereotype "FakeVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 6823351 // var_conn_type_ (<directional composition>)
	relation 6823351 *-->
	  stereotype "FakeVariable"
	  a role_name "var_conn_type_" init_value " {\"conn_type\", kVariableModePoll}" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6823351 // var_conn_type_ (<directional composition>)
	  b parent class_ref 3392567 // ConnectionType
      end

      classrelation 6823479 // var_conn_tethering_ (<directional composition>)
	relation 6823479 *-->
	  stereotype "FakeVariable"
	  a role_name "var_conn_tethering_" init_value " {
      \"conn_tethering\", kVariableModePoll}" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6823479 // var_conn_tethering_ (<directional composition>)
	  b parent class_ref 3392695 // ConnectionTethering
      end

      attribute 12414519 "var_conn_last_changed_"
	private explicit_type "base::Time"
	init_value " {
      \"conn_last_changed\", kVariableModePoll}"
	stereotype "FakeVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3392439 "ShillProvider"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Provider for networking related information."
      classrelation 6829623 // <generalisation>
	relation 6829623 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6829623 // <generalisation>
	  b parent class_ref 3390519 // Provider
      end

      operation 43693111 "~ShillProvider"
	cpp_override cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 43693239 "var_is_connected"
	abstract cpp_virtual public explicit_return_type "Variable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A variable returning whether we currently have network connectivity."
      end

      operation 43693367 "var_conn_type"
	abstract cpp_virtual public explicit_return_type "Variable<ConnectionType>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A variable returning the current network connection type. Unknown if not
 connected."
      end

      operation 43693495 "var_conn_tethering"
	abstract cpp_virtual public explicit_return_type "Variable<ConnectionTethering>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A variable returning the tethering mode of a network connection. Unknown if
 not connected."
      end

      operation 43693623 "var_conn_last_changed"
	abstract cpp_virtual public explicit_return_type "Variable<base::Time>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A variable returning the time when network connection last changed.
 Initialized to current time."
      end

      operation 43693751 "ShillProvider"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 3392567 "ConnectionType"
      visibility package stereotype "enum_class"
      cpp_decl "${comment}enum class ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 12428855 "kEthernet"
	public type class_ref 3392567 // ConnectionType
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12428983 "kWifi"
	public type class_ref 3392567 // ConnectionType
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12429111 "kWimax"
	public type class_ref 3392567 // ConnectionType
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12429239 "kBluetooth"
	public type class_ref 3392567 // ConnectionType
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12429367 "kCellular"
	public type class_ref 3392567 // ConnectionType
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12429495 "kUnknown"
	public type class_ref 3392567 // ConnectionType
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3392695 "ConnectionTethering"
      visibility package stereotype "enum_class"
      cpp_decl "${comment}enum class ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 12429623 "kNotDetected"
	public type class_ref 3392695 // ConnectionTethering
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12429751 "kSuspected"
	public type class_ref 3392695 // ConnectionTethering
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12429879 "kConfirmed"
	public type class_ref 3392695 // ConnectionTethering
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12430007 "kUnknown"
	public type class_ref 3392695 // ConnectionTethering
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3392823 "FakeState"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " A fake State class that creates fake providers for all the providers.
 This fake can be used in unit testing of Policy subclasses. To fake out the
 value a variable is exposing, just call FakeVariable<T>::SetValue() on the
 variable you fake out. For example:

   FakeState fake_state_;
   fake_state_.random_provider_->var_seed()->SetValue(new uint64_t(12345));

 You can call SetValue more than once and the FakeVariable will take care of
 the memory, but only the last value will remain."
      classrelation 6823607 // <generalisation>
	relation 6823607 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6823607 // <generalisation>
	  b parent class_ref 3389879 // State
      end

      operation 43673655 "FakeState"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Creates and initializes the FakeState using fake providers."
      end

      operation 43673783 "~FakeState"
	cpp_override cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 43673911 "config_provider"
	cpp_override cpp_inline public return_type class_ref 3391671 // FakeConfigProvider
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &config_provider_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Downcasted getters to access the fake instances during testing."
      end

      operation 43674039 "device_policy_provider"
	cpp_override cpp_inline public return_type class_ref 3391927 // FakeDevicePolicyProvider
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &device_policy_provider_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43674167 "random_provider"
	cpp_override cpp_inline public return_type class_ref 3392055 // FakeRandomProvider
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &random_provider_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43674295 "shill_provider"
	cpp_override cpp_inline public return_type class_ref 3392311 // FakeShillProvider
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &shill_provider_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43674423 "system_provider"
	cpp_override cpp_inline public return_type class_ref 3392951 // FakeSystemProvider
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &system_provider_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43674551 "time_provider"
	cpp_override cpp_inline public return_type class_ref 3393079 // FakeTimeProvider
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &time_provider_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43674679 "updater_provider"
	cpp_override cpp_inline public return_type class_ref 3393207 // FakeUpdaterProvider
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &updater_provider_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 6823735 // config_provider_ (<directional composition>)
	relation 6823735 *-->
	  a role_name "config_provider_" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6823735 // config_provider_ (<directional composition>)
	  b parent class_ref 3391671 // FakeConfigProvider
      end

      classrelation 6823863 // device_policy_provider_ (<directional composition>)
	relation 6823863 *-->
	  a role_name "device_policy_provider_" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6823863 // device_policy_provider_ (<directional composition>)
	  b parent class_ref 3391927 // FakeDevicePolicyProvider
      end

      classrelation 6823991 // random_provider_ (<directional composition>)
	relation 6823991 *-->
	  a role_name "random_provider_" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6823991 // random_provider_ (<directional composition>)
	  b parent class_ref 3392055 // FakeRandomProvider
      end

      classrelation 6824119 // shill_provider_ (<directional composition>)
	relation 6824119 *-->
	  a role_name "shill_provider_" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6824119 // shill_provider_ (<directional composition>)
	  b parent class_ref 3392311 // FakeShillProvider
      end

      classrelation 6824247 // system_provider_ (<directional composition>)
	relation 6824247 *-->
	  a role_name "system_provider_" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6824247 // system_provider_ (<directional composition>)
	  b parent class_ref 3392951 // FakeSystemProvider
      end

      classrelation 6824375 // time_provider_ (<directional composition>)
	relation 6824375 *-->
	  a role_name "time_provider_" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6824375 // time_provider_ (<directional composition>)
	  b parent class_ref 3393079 // FakeTimeProvider
      end

      classrelation 6824503 // updater_provider_ (<directional composition>)
	relation 6824503 *-->
	  a role_name "updater_provider_" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6824503 // updater_provider_ (<directional composition>)
	  b parent class_ref 3393207 // FakeUpdaterProvider
      end
    end

    class 3392951 "FakeSystemProvider"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Fake implementation of the SystemProvider base class."
      classrelation 6824631 // <generalisation>
	relation 6824631 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6824631 // <generalisation>
	  b parent class_ref 3393335 // SystemProvider
      end

      operation 43674807 "FakeSystemProvider"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43674935 "var_is_normal_boot_mode"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_is_normal_boot_mode_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43675063 "var_is_official_build"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_is_official_build_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43675191 "var_is_oobe_complete"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_is_oobe_complete_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43675319 "var_num_slots"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<unsigned int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_num_slots_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 12414647 "var_is_normal_boot_mode_"
	private explicit_type "bool"
	init_value " {  // NOLINT(whitespace/braces)
    \"is_normal_boot_mode\", kVariableModeConst}"
	stereotype "FakeVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12414775 "var_is_official_build_"
	private explicit_type "bool"
	init_value " {  // NOLINT(whitespace/braces)
    \"is_official_build\", kVariableModeConst}"
	stereotype "FakeVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12414903 "var_is_oobe_complete_"
	private explicit_type "bool"
	init_value " {  // NOLINT(whitespace/braces)
    \"is_oobe_complete\", kVariableModePoll}"
	stereotype "FakeVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12415031 "var_num_slots_"
	private explicit_type "unsigned int"
	init_value " {\"num_slots\", kVariableModePoll}"
	stereotype "FakeVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3393079 "FakeTimeProvider"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Fake implementation of the TimeProvider base class."
      classrelation 6824759 // <generalisation>
	relation 6824759 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6824759 // <generalisation>
	  b parent class_ref 3393463 // TimeProvider
      end

      operation 43675447 "FakeTimeProvider"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43675575 "var_curr_date"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<base::Time>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return &var_curr_date_; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43675703 "var_curr_hour"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return &var_curr_hour_; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 12415159 "var_curr_date_"
	private explicit_type "base::Time"
	init_value " {\"curr_date\", kVariableModePoll}"
	stereotype "FakeVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12415287 "var_curr_hour_"
	private explicit_type "int"
	init_value " {\"curr_hour\", kVariableModePoll}"
	stereotype "FakeVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3393207 "FakeUpdaterProvider"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Fake implementation of the UpdaterProvider base class."
      classrelation 6825015 // <generalisation>
	relation 6825015 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6825015 // <generalisation>
	  b parent class_ref 3393591 // UpdaterProvider
      end

      operation 43676087 "FakeUpdaterProvider"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43676215 "var_updater_started_time"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<base::Time>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_updater_started_time_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43676343 "var_last_checked_time"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<base::Time>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_last_checked_time_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43676471 "var_update_completed_time"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<base::Time>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_update_completed_time_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43676599 "var_progress"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<double>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_progress_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43676727 "var_stage"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<Stage>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_stage_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43676855 "var_new_version"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<std::string>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_new_version_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43676983 "var_payload_size"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<int64_t>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_payload_size_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43677111 "var_curr_channel"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<std::string>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_curr_channel_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43677239 "var_new_channel"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<std::string>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_new_channel_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43677367 "var_p2p_enabled"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_p2p_enabled_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43677495 "var_cellular_enabled"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_cellular_enabled_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43677623 "var_consecutive_failed_update_checks"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<unsigned int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_consecutive_failed_update_checks_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43677751 "var_server_dictated_poll_interval"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<unsigned int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_server_dictated_poll_interval_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43677879 "var_forced_update_requested"
	cpp_override cpp_inline public explicit_return_type "FakeVariable<UpdateRequestStatus>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_forced_update_requested_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 12415415 "var_updater_started_time_"
	private explicit_type "base::Time"
	init_value " {  // NOLINT(whitespace/braces)
    \"updater_started_time\", kVariableModePoll}"
	stereotype "FakeVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12415543 "var_last_checked_time_"
	private explicit_type "base::Time"
	init_value " {  // NOLINT(whitespace/braces)
    \"last_checked_time\", kVariableModePoll}"
	stereotype "FakeVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12415671 "var_update_completed_time_"
	private explicit_type "base::Time"
	init_value " {  // NOLINT(whitespace/braces)
    \"update_completed_time\", kVariableModePoll}"
	stereotype "FakeVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12415799 "var_progress_"
	private explicit_type "double"
	init_value " {  // NOLINT(whitespace/braces)
    \"progress\", kVariableModePoll}"
	stereotype "FakeVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 6825143 // var_stage_ (<directional composition>)
	relation 6825143 *-->
	  stereotype "FakeVariable"
	  a role_name "var_stage_" init_value " {  // NOLINT(whitespace/braces)
    \"stage\", kVariableModePoll}" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6825143 // var_stage_ (<directional composition>)
	  b parent class_ref 3393719 // Stage
      end

      attribute 12415927 "var_new_version_"
	private explicit_type "std::string"
	init_value " {  // NOLINT(whitespace/braces)
    \"new_version\", kVariableModePoll}"
	stereotype "FakeVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12416055 "var_payload_size_"
	private explicit_type "int64_t"
	init_value " {  // NOLINT(whitespace/braces)
    \"payload_size\", kVariableModePoll}"
	stereotype "FakeVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12416183 "var_curr_channel_"
	private explicit_type "std::string"
	init_value " {  // NOLINT(whitespace/braces)
    \"curr_channel\", kVariableModePoll}"
	stereotype "FakeVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12416311 "var_new_channel_"
	private explicit_type "std::string"
	init_value " {  // NOLINT(whitespace/braces)
    \"new_channel\", kVariableModePoll}"
	stereotype "FakeVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12416439 "var_p2p_enabled_"
	private explicit_type "bool"
	init_value " {// NOLINT(whitespace/braces)
                                      \"p2p_enabled\",
                                      kVariableModeAsync}"
	stereotype "FakeVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12416567 "var_cellular_enabled_"
	private explicit_type "bool"
	init_value " {// NOLINT(whitespace/braces)
                                           \"cellular_enabled\",
                                           kVariableModeAsync}"
	stereotype "FakeVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12416695 "var_consecutive_failed_update_checks_"
	private explicit_type "unsigned int"
	init_value " {  // NOLINT(whitespace/braces)
    \"consecutive_failed_update_checks\", kVariableModePoll}"
	stereotype "FakeVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12416823 "var_server_dictated_poll_interval_"
	private explicit_type "unsigned int"
	init_value " {  // NOLINT(whitespace/braces)
    \"server_dictated_poll_interval\", kVariableModePoll}"
	stereotype "FakeVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 6825271 // var_forced_update_requested_ (<directional composition>)
	relation 6825271 *-->
	  stereotype "FakeVariable"
	  a role_name "var_forced_update_requested_" init_value " {  // NOLINT(whitespace/braces)
    \"forced_update_requested\", kVariableModeAsync}" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6825271 // var_forced_update_requested_ (<directional composition>)
	  b parent class_ref 3393847 // UpdateRequestStatus
      end
    end

    class 3393335 "SystemProvider"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Provider for system information, mostly constant, such as the information
 reported by crossystem, the kernel boot command line and the partition table."
      classrelation 6829751 // <generalisation>
	relation 6829751 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6829751 // <generalisation>
	  b parent class_ref 3390519 // Provider
      end

      operation 43695031 "~SystemProvider"
	cpp_override cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 43695159 "var_is_normal_boot_mode"
	abstract cpp_virtual public explicit_return_type "Variable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns true if the boot mode is normal or if it's unable to
 determine the boot mode. Returns false if the boot mode is
 developer."
      end

      operation 43695287 "var_is_official_build"
	abstract cpp_virtual public explicit_return_type "Variable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns whether this is an official Chrome OS build."
      end

      operation 43695415 "var_is_oobe_complete"
	abstract cpp_virtual public explicit_return_type "Variable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns a variable that tells whether OOBE was completed."
      end

      operation 43695543 "var_num_slots"
	abstract cpp_virtual public explicit_return_type "Variable<unsigned int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns a variable that tells the number of slots in the system."
      end

      operation 43695671 "SystemProvider"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 3393463 "TimeProvider"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Provider for time related information."
      classrelation 6829879 // <generalisation>
	relation 6829879 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6829879 // <generalisation>
	  b parent class_ref 3390519 // Provider
      end

      operation 43695799 "~TimeProvider"
	cpp_override cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 43695927 "var_curr_date"
	abstract cpp_virtual public explicit_return_type "Variable<base::Time>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the current date. The time of day component will be zero."
      end

      operation 43696055 "var_curr_hour"
	abstract cpp_virtual public explicit_return_type "Variable<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the current hour (0 to 23) in local time. The type is int to keep
 consistent with base::Time."
      end

      operation 43696183 "TimeProvider"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 3393591 "UpdaterProvider"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Provider for Chrome OS update related information."
      classrelation 6830647 // <generalisation>
	relation 6830647 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6830647 // <generalisation>
	  b parent class_ref 3390519 // Provider
      end

      operation 43697463 "~UpdaterProvider"
	cpp_override cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 43697591 "var_updater_started_time"
	abstract cpp_virtual public explicit_return_type "Variable<base::Time>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A variable returning the timestamp when the update engine was started in
 wallclock time."
      end

      operation 43697719 "var_last_checked_time"
	abstract cpp_virtual public explicit_return_type "Variable<base::Time>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A variable returning the last update check time."
      end

      operation 43697847 "var_update_completed_time"
	abstract cpp_virtual public explicit_return_type "Variable<base::Time>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A variable reporting the time when an update was last completed in the
 current boot cycle. Returns an error if an update completed time could not
 be read (e.g. no update was completed in the current boot cycle) or is
 invalid.

 IMPORTANT: The time reported is not the wallclock time reading at the time
 of the update, rather it is the point in time when the update completed
 relative to the current wallclock time reading. Therefore, the gap between
 the reported value and the current wallclock time is guaranteed to be
 monotonically increasing."
      end

      operation 43697975 "var_progress"
	abstract cpp_virtual public explicit_return_type "Variable<double>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A variable returning the update progress (0.0 to 1.0)."
      end

      operation 43698103 "var_stage"
	abstract cpp_virtual public explicit_return_type "Variable<Stage>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A variable returning the current update status."
      end

      operation 43698231 "var_new_version"
	abstract cpp_virtual public explicit_return_type "Variable<std::string>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A variable returning the update target version."
      end

      operation 43698359 "var_payload_size"
	abstract cpp_virtual public explicit_return_type "Variable<int64_t>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A variable returning the update payload size. The payload size is
 guaranteed to be non-negative."
      end

      operation 43698487 "var_curr_channel"
	abstract cpp_virtual public explicit_return_type "Variable<std::string>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A variable returning the current channel."
      end

      operation 43698615 "var_new_channel"
	abstract cpp_virtual public explicit_return_type "Variable<std::string>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A variable returning the update target channel."
      end

      operation 43698743 "var_p2p_enabled"
	abstract cpp_virtual public explicit_return_type "Variable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A variable indicating whether user settings allow P2P updates."
      end

      operation 43698871 "var_cellular_enabled"
	abstract cpp_virtual public explicit_return_type "Variable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A variable indicating whether user settings allow updates over a cellular
 network."
      end

      operation 43698999 "var_consecutive_failed_update_checks"
	abstract cpp_virtual public explicit_return_type "Variable<unsigned int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A variable returning the number of consecutive failed update checks."
      end

      operation 43699127 "var_server_dictated_poll_interval"
	abstract cpp_virtual public explicit_return_type "Variable<unsigned int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A server-dictated update check interval in seconds, if one was given."
      end

      operation 43699255 "var_forced_update_requested"
	abstract cpp_virtual public explicit_return_type "Variable<UpdateRequestStatus>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A variable denoting whether a forced update was request but no update check
 performed yet; also tells whether this request is for an interactive or
 scheduled update."
      end

      operation 43699383 "UpdaterProvider"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 3393719 "Stage"
      visibility package stereotype "enum_class"
      cpp_decl "${comment}enum class ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 12430647 "kIdle"
	public type class_ref 3393719 // Stage
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12430775 "kCheckingForUpdate"
	public type class_ref 3393719 // Stage
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12430903 "kUpdateAvailable"
	public type class_ref 3393719 // Stage
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12431031 "kDownloading"
	public type class_ref 3393719 // Stage
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12431159 "kVerifying"
	public type class_ref 3393719 // Stage
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12431287 "kFinalizing"
	public type class_ref 3393719 // Stage
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12431415 "kUpdatedNeedReboot"
	public type class_ref 3393719 // Stage
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12431543 "kReportingErrorEvent"
	public type class_ref 3393719 // Stage
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12431671 "kAttemptingRollback"
	public type class_ref 3393719 // Stage
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3393847 "UpdateRequestStatus"
      visibility package stereotype "enum_class"
      cpp_decl "${comment}enum class ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 12431799 "kNone"
	public type class_ref 3393847 // UpdateRequestStatus
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12431927 "kInteractive"
	public type class_ref 3393847 // UpdateRequestStatus
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12432055 "kPeriodic"
	public type class_ref 3393847 // UpdateRequestStatus
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3393975 "VariableMode"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The VariableMode specifies important behavior of the variable in terms of
 whether, how and when the value of the variable changes."
      attribute 12432183 "kVariableModeConst"
	public type class_ref 3393975 // VariableMode
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12432311 "kVariableModePoll"
	public type class_ref 3393975 // VariableMode
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12432439 "kVariableModeAsync"
	public type class_ref 3393975 // VariableMode
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3394103 "PollCopyVariable"
      visibility package 
      nformals 1
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 3390647 // Variable
        rank 0 explicit_value "T"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Variable class returning a copy of a given object using the copy constructor.
 This template class can be used to define variables that expose as a variable
 any fixed object, such as the a provider's private member. The variable will
 create copies of the provided object using the copy constructor of that
 class.

 For example, a state provider exposing a private member as a variable can
 implement this as follows:

   class SomethingProvider {
    public:
      SomethingProvider(...) {
        var_something_foo = new PollCopyVariable<MyType>(foo_);
      }
      ...
    private:
     MyType foo_;
   };"
      classrelation 6825527 // <realization>
	relation 6825527 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6825527 // <realization>
	  b parent class_ref 3390647 // Variable
      end

      operation 43678775 "PollCopyVariable"
	cpp_inline public explicit_return_type ""
	nparams 4
	  param in name "name" explicit_type "std::string"
	  param in name "ref" explicit_type "T"
	  param in name "is_set_p" explicit_type "bool"
	  param in name "errmsg" explicit_type "std::string"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} * ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${volatile}${throw}${abstract} : Variable<T>(name, kVariableModePoll), ref_(ref), is_set_p_(is_set_p),
        errmsg_(errmsg) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Creates the variable returning copies of the passed |ref|. The reference to
 this object is kept and it should be available whenever the GetValue()
 method is called. If |is_set_p| is not null, then this flag will be
 consulted prior to returning the value, and an |errmsg| will be returned if
 it is not set."
      end

      operation 43678903 "PollCopyVariable"
	cpp_inline public explicit_return_type ""
	nparams 3
	  param in name "name" explicit_type "std::string"
	  param in name "ref" explicit_type "T"
	  param in name "is_set_p" explicit_type "bool"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} * ${p2}${v2}${)}${volatile}${throw}${abstract} : PollCopyVariable(name, ref, is_set_p, std::string()) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43679031 "PollCopyVariable"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "name" explicit_type "std::string"
	  param in name "ref" explicit_type "T"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${volatile}${throw}${abstract} : PollCopyVariable(name, ref, nullptr) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43679159 "PollCopyVariable"
	cpp_inline public explicit_return_type ""
	nparams 5
	  param in name "name" explicit_type "std::string"
	  param in name "poll_interval" explicit_type "base::TimeDelta"
	  param in name "ref" explicit_type "T"
	  param in name "is_set_p" explicit_type "bool"
	  param in name "errmsg" explicit_type "std::string"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} * ${p3}${v3}, const ${t4} & ${p4}${v4}${)}${volatile}${throw}${abstract} : Variable<T>(name, poll_interval), ref_(ref), is_set_p_(is_set_p),
        errmsg_(errmsg) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43679287 "PollCopyVariable"
	cpp_inline public explicit_return_type ""
	nparams 4
	  param in name "name" explicit_type "std::string"
	  param in name "poll_interval" explicit_type "base::TimeDelta"
	  param in name "ref" explicit_type "T"
	  param in name "is_set_p" explicit_type "bool"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} * ${p3}${v3}${)}${volatile}${throw}${abstract} : PollCopyVariable(name, poll_interval, ref, is_set_p, std::string()) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43679415 "PollCopyVariable"
	cpp_inline public explicit_return_type ""
	nparams 3
	  param in name "name" explicit_type "std::string"
	  param in name "poll_interval" explicit_type "base::TimeDelta"
	  param in name "ref" explicit_type "T"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${volatile}${throw}${abstract} : PollCopyVariable(name, poll_interval, ref, nullptr) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43679543 "GetValue"
	cpp_override cpp_inline protected explicit_return_type "T"
	nparams 2
	  param in name "" explicit_type "base::TimeDelta"
	  param inout name "errmsg" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    if (is_set_p_ && !(*is_set_p_)) {
      if (errmsg) {
        if (errmsg_.empty())
          *errmsg = \"No value set for \" + this->GetName();
        else
          *errmsg = errmsg_;
      }
      return nullptr;
    }
    return new T(ref_);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Variable override."
      end

      attribute 12417079 "ref_"
	const_attribute private explicit_type "T"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} & ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Reference to the object to be copied by GetValue().
"
      end

      attribute 12417207 "is_set_p_"
	const_attribute private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * const ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " A pointer to a flag indicating whether the value is set. If null, then the
 value is assumed to be set.
"
      end

      attribute 12417335 "errmsg_"
	const_attribute private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " An error message to be returned when attempting to get an unset value.
"
      end
    end

    class 3394231 "ConstCopyVariable"
      visibility package 
      nformals 1
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 3390647 // Variable
        rank 0 explicit_value "T"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Variable class returning a constant value that is cached on the variable when
 it is created."
      classrelation 6825655 // <realization>
	relation 6825655 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6825655 // <realization>
	  b parent class_ref 3390647 // Variable
      end

      operation 43679671 "ConstCopyVariable"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "name" explicit_type "std::string"
	  param in name "obj" explicit_type "T"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${volatile}${throw}${abstract} : Variable<T>(name, kVariableModeConst), obj_(obj) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Creates the variable returning copies of the passed |obj|. The value passed
 is copied in this variable, and new copies of it will be returned by
 GetValue()."
      end

      operation 43679799 "GetValue"
	cpp_override cpp_inline protected explicit_return_type "T"
	nparams 2
	  param in name "" explicit_type "base::TimeDelta"
	  param inout name "" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    return new T(obj_);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Variable override."
      end

      attribute 12417463 "obj_"
	const_attribute private explicit_type "T"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Value to be copied by GetValue().
"
      end
    end

    class 3394359 "CallCopyVariable"
      visibility package 
      nformals 1
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 3390647 // Variable
        rank 0 explicit_value "T"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Variable class returning a copy of a value returned by a given function. The
 function is called every time the variable is being polled."
      classrelation 6825783 // <realization>
	relation 6825783 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6825783 // <realization>
	  b parent class_ref 3390647 // Variable
      end

      operation 43679927 "CallCopyVariable"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "name" explicit_type "std::string"
	  param in name "func" explicit_type "base::Callback<T(void)>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} : Variable<T>(name, kVariableModePoll), func_(func) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43680055 "CallCopyVariable"
	cpp_inline public explicit_return_type ""
	nparams 3
	  param in name "name" explicit_type "std::string"
	  param in name "poll_interval" explicit_type "base::TimeDelta"
	  param in name "func" explicit_type "base::Callback<T(void)>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw}${abstract} : Variable<T>(name, poll_interval), func_(func) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43680183 "GetValue"
	cpp_override cpp_inline protected explicit_return_type "T"
	nparams 2
	  param in name "" explicit_type "base::TimeDelta"
	  param inout name "" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    if (func_.is_null())
      return nullptr;
    return new T(func_.Run());
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Variable override."
      end

      attribute 12417591 "func_"
	private explicit_type "T(void)"
	stereotype "base::Callback"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The function to be called, stored as a base::Callback.
"
      end
    end

    class 3394487 "AsyncCopyVariable"
      visibility package 
      nformals 1
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 3390647 // Variable
        rank 0 explicit_value "T"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " A Variable class to implement simple Async variables. It provides two methods
 SetValue and UnsetValue to modify the current value of the variable and
 notify the registered observers whenever the value changed.

 The type T needs to be copy-constructible, default-constructible and have an
 operator== (to determine if the value changed), which makes this class
 suitable for basic types."
      classrelation 6825911 // <realization>
	relation 6825911 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6825911 // <realization>
	  b parent class_ref 3390647 // Variable
      end

      operation 43680311 "AsyncCopyVariable"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "name" explicit_type "std::string"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract} : Variable<T>(name, kVariableModeAsync), has_value_(false) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43680439 "AsyncCopyVariable"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "name" explicit_type "std::string"
	  param in name "value" explicit_type "T"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} : Variable<T>(name, kVariableModeAsync),
        has_value_(true), value_(value) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43680567 "SetValue"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "new_value" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    bool should_notify = !(has_value_ && new_value == value_);
    value_ = new_value;
    has_value_ = true;
    if (should_notify)
      this->NotifyValueChanged();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43680695 "UnsetValue"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    if (has_value_) {
      has_value_ = false;
      this->NotifyValueChanged();
    }
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43680823 "GetValue"
	cpp_override cpp_inline protected explicit_return_type "T"
	nparams 2
	  param in name "" explicit_type "base::TimeDelta"
	  param inout name "errmsg" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    if (!has_value_) {
      if (errmsg)
        *errmsg = \"No value set for \" + this->GetName();
      return nullptr;
    }
    return new T(value_);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Variable override."
      end

      attribute 12417719 "has_value_"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Whether the variable has a value set.
"
      end

      attribute 12417847 "value_"
	private explicit_type "T"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Copy of the object to be returned by GetValue().
"
      end
    end

    class 3394615 "MockPolicy"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " A mocked implementation of Policy."
      classrelation 6826039 // <generalisation>
	relation 6826039 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6826039 // <generalisation>
	  b parent class_ref 3389623 // Policy
      end

      operation 43680951 "MockPolicy"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "clock" type class_ref 3362359 // ClockInterface
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${v0}${)}${volatile}${throw}${abstract} : default_policy_(clock) {
    // We defer to the corresponding DefaultPolicy methods, by default.
    ON_CALL(*this, UpdateCheckAllowed(testing::_, testing::_, testing::_,
                                      testing::_))
        .WillByDefault(testing::Invoke(
                &default_policy_, &DefaultPolicy::UpdateCheckAllowed));
    ON_CALL(*this, UpdateCanStart(testing::_, testing::_, testing::_,
                                  testing::_, testing::_))
        .WillByDefault(testing::Invoke(
                &default_policy_, &DefaultPolicy::UpdateCanStart));
    ON_CALL(*this, UpdateDownloadAllowed(testing::_, testing::_, testing::_,
                                         testing::_))
        .WillByDefault(testing::Invoke(
                &default_policy_, &DefaultPolicy::UpdateDownloadAllowed));
    ON_CALL(*this, P2PEnabled(testing::_, testing::_, testing::_, testing::_))
        .WillByDefault(testing::Invoke(
                &default_policy_, &DefaultPolicy::P2PEnabled));
    ON_CALL(*this, P2PEnabledChanged(testing::_, testing::_, testing::_,
                                     testing::_, testing::_))
        .WillByDefault(testing::Invoke(
                &default_policy_, &DefaultPolicy::P2PEnabledChanged));
  };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43681079 "MockPolicy"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : MockPolicy(nullptr) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43681207 "~MockPolicy"
	cpp_override cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 43681335 "PolicyName"
	const cpp_override cpp_inline protected explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return \"MockPolicy\"; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Policy override."
      end

      classrelation 6826167 // default_policy_ (<directional composition>)
	relation 6826167 *-->
	  a role_name "default_policy_" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6826167 // default_policy_ (<directional composition>)
	  b parent class_ref 3390903 // DefaultPolicy
      end
    end

    class 3394743 "MockVariable"
      visibility package 
      nformals 1
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 3390647 // Variable
        rank 0 explicit_value "T"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " This is a generic mock of the Variable class."
      classrelation 6826295 // <realization>
	relation 6826295 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6826295 // <realization>
	  b parent class_ref 3390647 // Variable
      end

      extra_member 223287 "using"
	
	cpp "  using Variable<T>::Variable;" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end
    end

    class 3394871 "UpdateCannotStartReason"
      visibility package stereotype "enum_class"
      cpp_decl "${comment}enum class ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Results regarding the downloading and applying of an update, as determined by
 UpdateCanStart.

 An enumerator for the reasons of not allowing an update to start."
      attribute 12421687 "kUndefined"
	public type class_ref 3394871 // UpdateCannotStartReason
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12421815 "kCheckDue"
	public type class_ref 3394871 // UpdateCannotStartReason
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12421943 "kScattering"
	public type class_ref 3394871 // UpdateCannotStartReason
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12422071 "kBackoff"
	public type class_ref 3394871 // UpdateCannotStartReason
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12422199 "kCannotDownload"
	public type class_ref 3394871 // UpdateCannotStartReason
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3394999 "RealConfigProvider"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ConfigProvider concrete implementation."
      classrelation 6826679 // <generalisation>
	relation 6826679 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6826679 // <generalisation>
	  b parent class_ref 3390391 // ConfigProvider
      end

      operation 43683511 "RealConfigProvider"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "hardware" type class_ref 3360311 // HardwareInterface
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${v0}${)}${volatile}${throw}${abstract} : hardware_(hardware) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43683639 "Init"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Initializes the provider and returns whether it succeeded."
      end

      operation 43683767 "var_is_oobe_enabled"
	cpp_override cpp_inline public explicit_return_type "Variable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return var_is_oobe_enabled_.get();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      extra_member 223415 "friend"
	
	cpp "
  friend class UmRealConfigProviderTest;" ""
	java ""
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 43683895 "SetRootPrefix"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "prefix" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    root_prefix_ = prefix;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Used for testing. Sets the root prefix, which is by default \"\". Call this
 method before calling Init() in order to mock out the place where the files
 are being read from."
      end

      attribute 12423735 "var_is_oobe_enabled_"
	private explicit_type "ConstCopyVariable<bool>"
	stereotype "std::unique_ptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 6826807 // hardware_ (<unidirectional association>)
	relation 6826807 --->
	  a role_name "hardware_" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6826807 // hardware_ (<unidirectional association>)
	  b parent class_ref 3360311 // HardwareInterface
      end

      attribute 12423863 "root_prefix_"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Prefix to prepend to the file paths. Useful for testing.
"
      end
    end

    class 3395127 "RealDevicePolicyProvider"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " DevicePolicyProvider concrete implementation."
      classrelation 6826935 // <generalisation>
	relation 6826935 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6826935 // <generalisation>
	  b parent class_ref 3391031 // DevicePolicyProvider
      end

      operation 43684023 "RealDevicePolicyProvider"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param inout name "session_manager_proxy" type class_ref 3380023 // SessionManagerInterfaceProxyInterface
	  param inout name "policy_provider" explicit_type "policy::PolicyProvider"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${volatile}${throw}${abstract} : policy_provider_(policy_provider),
        session_manager_proxy_(session_manager_proxy) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43684151 "~RealDevicePolicyProvider"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 43684279 "Init"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Initializes the provider and returns whether it succeeded."
      end

      operation 43684407 "var_device_policy_is_loaded"
	cpp_override cpp_inline public explicit_return_type "Variable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_device_policy_is_loaded_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43684535 "var_release_channel"
	cpp_override cpp_inline public explicit_return_type "Variable<std::string>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_release_channel_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43684663 "var_release_channel_delegated"
	cpp_override cpp_inline public explicit_return_type "Variable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_release_channel_delegated_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43684791 "var_update_disabled"
	cpp_override cpp_inline public explicit_return_type "Variable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_update_disabled_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43684919 "var_target_version_prefix"
	cpp_override cpp_inline public explicit_return_type "Variable<std::string>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_target_version_prefix_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43685047 "var_scatter_factor"
	cpp_override cpp_inline public explicit_return_type "Variable<base::TimeDelta>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_scatter_factor_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43685175 "var_allowed_connection_types_for_update"
	cpp_override cpp_inline public explicit_return_type "Variable<std::set<ConnectionType>>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_allowed_connection_types_for_update_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43685303 "var_owner"
	cpp_override cpp_inline public explicit_return_type "Variable<std::string>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_owner_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43685431 "var_http_downloads_enabled"
	cpp_override cpp_inline public explicit_return_type "Variable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_http_downloads_enabled_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43685559 "var_au_p2p_enabled"
	cpp_override cpp_inline public explicit_return_type "Variable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_au_p2p_enabled_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43685687 "OnPropertyChangedCompletedSignal"
	private explicit_return_type "void"
	nparams 1
	  param in name "success" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A static handler for the PropertyChangedCompleted signal from the session
 manager used as a callback."
      end

      operation 43685815 "OnSignalConnected"
	private explicit_return_type "void"
	nparams 3
	  param in name "interface_name" explicit_type "std::string"
	  param in name "signal_name" explicit_type "std::string"
	  param in name "successful" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Called when the signal in UpdateEngineLibcrosProxyResolvedInterface is
 connected."
      end

      operation 43685943 "RefreshDevicePolicyAndReschedule"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Schedules a call to periodically refresh the device policy."
      end

      operation 43686071 "RefreshDevicePolicy"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Reloads the device policy and updates all the exposed variables."
      end

      operation 43686199 "UpdateVariable"
	stereotype "template"
	private explicit_return_type "void"
	nparams 2
	  param inout name "var" explicit_type "AsyncCopyVariable<T>"
	  param in name "getter_method" explicit_type "bool (policy::DevicePolicy::*)(T*)"
	cpp_decl "    ${comment}template<typename T>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const bool (policy::DevicePolicy::*${p1})(T*)${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const bool (policy::DevicePolicy::*${p1})(T*)${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Updates the async variable |var| based on the result value of the method
 passed, which is a DevicePolicy getter method."
      end

      operation 43686327 "UpdateVariable"
	stereotype "template"
	private explicit_return_type "void"
	nparams 2
	  param inout name "var" explicit_type "AsyncCopyVariable<T>"
	  param in name "getter_method" explicit_type "bool (RealDevicePolicyProvider::*)(T*)"
	cpp_decl "    ${comment}template<typename T>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const bool (RealDevicePolicyProvider::*${p1})(T*)${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const bool (RealDevicePolicyProvider::*${p1})(T*)${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Updates the async variable |var| based on the result value of the getter
 method passed, which is a wrapper getter on this class."
      end

      operation 43686455 "ConvertScatterFactor"
	const private explicit_return_type "bool"
	nparams 1
	  param inout name "scatter_factor" explicit_type "base::TimeDelta"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Wrapper for DevicePolicy::GetScatterFactorInSeconds() that converts the
 result to a base::TimeDelta. It returns the same value as
 GetScatterFactorInSeconds()."
      end

      operation 43686583 "ConvertAllowedConnectionTypesForUpdate"
	const private explicit_return_type "bool"
	nparams 1
	  param inout name "allowed_types" explicit_type "std::set<ConnectionType>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Wrapper for DevicePolicy::GetAllowedConnectionTypesForUpdate() that
 converts the result to a set of ConnectionType elements instead of strings."
      end

      attribute 12423991 "policy_provider_"
	private explicit_type "policy::PolicyProvider"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Used for fetching information about the device policy.
"
      end

      attribute 12424119 "scheduled_refresh_"
	private explicit_type "brillo::MessageLoop::TaskId"
	init_value " {
      brillo::MessageLoop::kTaskIdNull}"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Used to schedule refreshes of the device policy.
"
      end

      classrelation 6827063 // session_manager_proxy_ (<unidirectional association>)
	relation 6827063 --->
	  a role_name "session_manager_proxy_" init_value " {
      nullptr}" private
	    comment " The DBus (mockable) session manager proxy, owned by the caller.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${h_value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6827063 // session_manager_proxy_ (<unidirectional association>)
	  b parent class_ref 3380023 // SessionManagerInterfaceProxyInterface
      end

      attribute 12424247 "var_device_policy_is_loaded_"
	private explicit_type "bool"
	init_value " {
      \"policy_is_loaded\", false}"
	stereotype "AsyncCopyVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Variable exposing whether the policy is loaded.
"
      end

      attribute 12424375 "var_release_channel_"
	private explicit_type "std::string"
	init_value " {\"release_channel\"}"
	stereotype "AsyncCopyVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Variables mapping the exposed methods from the policy::DevicePolicy.
"
      end

      attribute 12424503 "var_release_channel_delegated_"
	private explicit_type "bool"
	init_value " {
      \"release_channel_delegated\"}"
	stereotype "AsyncCopyVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12424631 "var_update_disabled_"
	private explicit_type "bool"
	init_value " {\"update_disabled\"}"
	stereotype "AsyncCopyVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12424759 "var_target_version_prefix_"
	private explicit_type "std::string"
	init_value " {
      \"target_version_prefix\"}"
	stereotype "AsyncCopyVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12424887 "var_scatter_factor_"
	private explicit_type "base::TimeDelta"
	init_value " {\"scatter_factor\"}"
	stereotype "AsyncCopyVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12425015 "var_allowed_connection_types_for_update_"
	private explicit_type "std::set<ConnectionType>"
	init_value " {
          \"allowed_connection_types_for_update\"}"
	stereotype "AsyncCopyVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12425143 "var_owner_"
	private explicit_type "std::string"
	init_value " {\"owner\"}"
	stereotype "AsyncCopyVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12425271 "var_http_downloads_enabled_"
	private explicit_type "bool"
	init_value " {\"http_downloads_enabled\"}"
	stereotype "AsyncCopyVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12425399 "var_au_p2p_enabled_"
	private explicit_type "bool"
	init_value " {\"au_p2p_enabled\"}"
	stereotype "AsyncCopyVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3395255 "RealRandomProvider"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " RandomProvider implementation class."
      classrelation 6827191 // <generalisation>
	relation 6827191 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6827191 // <generalisation>
	  b parent class_ref 3392183 // RandomProvider
      end

      operation 43686711 "RealRandomProvider"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43686839 "var_seed"
	cpp_override cpp_inline public explicit_return_type "Variable<uint64_t>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return var_seed_.get(); };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43686967 "Init"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Initializes the provider and returns whether it succeeded."
      end

      attribute 12425527 "var_seed_"
	private explicit_type "Variable<uint64_t>"
	stereotype "std::unique_ptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The seed() scoped variable.
"
      end
    end

    class 3395383 "RealShillProvider"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ShillProvider concrete implementation."
      classrelation 6827319 // <generalisation>
	relation 6827319 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6827319 // <generalisation>
	  b parent class_ref 3392439 // ShillProvider
      end

      operation 43687095 "RealShillProvider"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param inout name "shill_proxy" type class_ref 3359287 // ShillProxyInterface
	  param inout name "clock" type class_ref 3362359 // ClockInterface
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${volatile}${throw}${abstract} : shill_proxy_(shill_proxy), clock_(clock) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43687223 "~RealShillProvider"
	cpp_override cpp_defaulted public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 43687351 "Init"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Initializes the provider and returns whether it succeeded."
      end

      operation 43687479 "var_is_connected"
	cpp_override cpp_inline public explicit_return_type "Variable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_is_connected_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43687607 "var_conn_type"
	cpp_override cpp_inline public explicit_return_type "Variable<ConnectionType>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_conn_type_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43687735 "var_conn_tethering"
	cpp_override cpp_inline public explicit_return_type "Variable<ConnectionTethering>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_conn_tethering_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43687863 "var_conn_last_changed"
	cpp_override cpp_inline public explicit_return_type "Variable<base::Time>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_conn_last_changed_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43687991 "ParseConnectionType"
	class_operation public return_type class_ref 3392567 // ConnectionType
	nparams 1
	  param in name "type_str" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Helper methods for converting shill strings into symbolic values."
      end

      operation 43688119 "ParseConnectionTethering"
	class_operation public return_type class_ref 3392695 // ConnectionTethering
	nparams 1
	  param in name "tethering_str" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43688247 "OnManagerPropertyChanged"
	private explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "std::string"
	  param in name "value" explicit_type "brillo::Any"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A handler for ManagerProxy.PropertyChanged signal."
      end

      operation 43688375 "OnSignalConnected"
	private explicit_return_type "void"
	nparams 3
	  param in name "interface_name" explicit_type "std::string"
	  param in name "signal_name" explicit_type "std::string"
	  param in name "successful" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Called when the signal in ManagerProxy.PropertyChanged is connected."
      end

      operation 43688503 "ProcessDefaultService"
	private explicit_return_type "bool"
	nparams 1
	  param in name "default_service_path" explicit_type "dbus::ObjectPath"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Get the connection and populate the type and tethering status of the given
 default connection."
      end

      attribute 12425655 "default_service_path_"
	private explicit_type "dbus::ObjectPath"
	init_value " {\"uninitialized\"}"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The current default service path, if connected. \"/\" means not connected.
"
      end

      classrelation 6827447 // shill_proxy_ (<unidirectional association>)
	relation 6827447 --->
	  a role_name "shill_proxy_" private
	    comment " The mockable interface to access the shill DBus proxies, owned by the
 caller.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6827447 // shill_proxy_ (<unidirectional association>)
	  b parent class_ref 3359287 // ShillProxyInterface
      end

      attribute 12425783 "clock_"
	private type class_ref 3362359 // ClockInterface
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * const ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " A clock abstraction (mockable).
"
      end

      attribute 12425911 "var_is_connected_"
	private explicit_type "bool"
	init_value " {\"is_connected\"}"
	stereotype "AsyncCopyVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The provider's variables.
"
      end

      classrelation 6827575 // var_conn_type_ (<directional composition>)
	relation 6827575 *-->
	  stereotype "AsyncCopyVariable"
	  a role_name "var_conn_type_" init_value " {\"conn_type\"}" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6827575 // var_conn_type_ (<directional composition>)
	  b parent class_ref 3392567 // ConnectionType
      end

      classrelation 6827703 // var_conn_tethering_ (<directional composition>)
	relation 6827703 *-->
	  stereotype "AsyncCopyVariable"
	  a role_name "var_conn_tethering_" init_value " {\"conn_tethering\"}" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6827703 // var_conn_tethering_ (<directional composition>)
	  b parent class_ref 3392695 // ConnectionTethering
      end

      attribute 12426039 "var_conn_last_changed_"
	private explicit_type "base::Time"
	init_value " {\"conn_last_changed\"}"
	stereotype "AsyncCopyVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3395511 "RealState"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " State concrete implementation."
      classrelation 6827831 // <generalisation>
	relation 6827831 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6827831 // <generalisation>
	  b parent class_ref 3389879 // State
      end

      operation 43688631 "~RealState"
	cpp_override cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 43688759 "RealState"
	cpp_inline public explicit_return_type ""
	nparams 7
	  param inout name "config_provider" type class_ref 3390391 // ConfigProvider
	  param inout name "device_policy_provider" type class_ref 3391031 // DevicePolicyProvider
	  param inout name "random_provider" type class_ref 3392183 // RandomProvider
	  param inout name "shill_provider" type class_ref 3392439 // ShillProvider
	  param inout name "system_provider" type class_ref 3393335 // SystemProvider
	  param inout name "time_provider" type class_ref 3393463 // TimeProvider
	  param inout name "updater_provider" type class_ref 3393591 // UpdaterProvider
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} * ${p4}${v4}, ${t5} * ${p5}${v5}, ${t6} * ${p6}${v6}${)}${volatile}${throw}${abstract} :
      config_provider_(config_provider),
      device_policy_provider_(device_policy_provider),
      random_provider_(random_provider),
      shill_provider_(shill_provider),
      system_provider_(system_provider),
      time_provider_(time_provider),
      updater_provider_(updater_provider) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43688887 "config_provider"
	cpp_override cpp_inline public return_type class_ref 3390391 // ConfigProvider
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return config_provider_.get();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " These methods return the given provider."
      end

      operation 43689015 "device_policy_provider"
	cpp_override cpp_inline public return_type class_ref 3391031 // DevicePolicyProvider
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return device_policy_provider_.get();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43689143 "random_provider"
	cpp_override cpp_inline public return_type class_ref 3392183 // RandomProvider
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return random_provider_.get();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43689271 "shill_provider"
	cpp_override cpp_inline public return_type class_ref 3392439 // ShillProvider
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return shill_provider_.get();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43689399 "system_provider"
	cpp_override cpp_inline public return_type class_ref 3393335 // SystemProvider
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return system_provider_.get();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43689527 "time_provider"
	cpp_override cpp_inline public return_type class_ref 3393463 // TimeProvider
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return time_provider_.get();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43689655 "updater_provider"
	cpp_override cpp_inline public return_type class_ref 3393591 // UpdaterProvider
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return updater_provider_.get();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 6827959 // config_provider_ (<directional composition>)
	relation 6827959 *-->
	  stereotype "std::unique_ptr"
	  a role_name "config_provider_" private
	    comment " Instances of the providers.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6827959 // config_provider_ (<directional composition>)
	  b parent class_ref 3390391 // ConfigProvider
      end

      classrelation 6828087 // device_policy_provider_ (<directional composition>)
	relation 6828087 *-->
	  stereotype "std::unique_ptr"
	  a role_name "device_policy_provider_" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6828087 // device_policy_provider_ (<directional composition>)
	  b parent class_ref 3391031 // DevicePolicyProvider
      end

      classrelation 6828215 // random_provider_ (<directional composition>)
	relation 6828215 *-->
	  stereotype "std::unique_ptr"
	  a role_name "random_provider_" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6828215 // random_provider_ (<directional composition>)
	  b parent class_ref 3392183 // RandomProvider
      end

      classrelation 6828343 // shill_provider_ (<directional composition>)
	relation 6828343 *-->
	  stereotype "std::unique_ptr"
	  a role_name "shill_provider_" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6828343 // shill_provider_ (<directional composition>)
	  b parent class_ref 3392439 // ShillProvider
      end

      classrelation 6828471 // system_provider_ (<directional composition>)
	relation 6828471 *-->
	  stereotype "std::unique_ptr"
	  a role_name "system_provider_" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6828471 // system_provider_ (<directional composition>)
	  b parent class_ref 3393335 // SystemProvider
      end

      classrelation 6828599 // time_provider_ (<directional composition>)
	relation 6828599 *-->
	  stereotype "std::unique_ptr"
	  a role_name "time_provider_" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6828599 // time_provider_ (<directional composition>)
	  b parent class_ref 3393463 // TimeProvider
      end

      classrelation 6828727 // updater_provider_ (<directional composition>)
	relation 6828727 *-->
	  stereotype "std::unique_ptr"
	  a role_name "updater_provider_" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6828727 // updater_provider_ (<directional composition>)
	  b parent class_ref 3393591 // UpdaterProvider
      end
    end

    class 3395639 "RealSystemProvider"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " SystemProvider concrete implementation."
      classrelation 6828855 // <generalisation>
	relation 6828855 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6828855 // <generalisation>
	  b parent class_ref 3393335 // SystemProvider
      end

      operation 43689783 "RealSystemProvider"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param inout name "hardware" type class_ref 3360311 // HardwareInterface
	  param inout name "boot_control" type class_ref 3357751 // BootControlInterface
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${volatile}${throw}${abstract} : hardware_(hardware), boot_control_(boot_control) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43689911 "Init"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Initializes the provider and returns whether it succeeded."
      end

      operation 43690039 "var_is_normal_boot_mode"
	cpp_override cpp_inline public explicit_return_type "Variable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return var_is_normal_boot_mode_.get();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43690167 "var_is_official_build"
	cpp_override cpp_inline public explicit_return_type "Variable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return var_is_official_build_.get();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43690295 "var_is_oobe_complete"
	cpp_override cpp_inline public explicit_return_type "Variable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return var_is_oobe_complete_.get();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43690423 "var_num_slots"
	cpp_override cpp_inline public explicit_return_type "Variable<unsigned int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return var_num_slots_.get();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 12426167 "var_is_normal_boot_mode_"
	private explicit_type "Variable<bool>"
	stereotype "std::unique_ptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12426295 "var_is_official_build_"
	private explicit_type "Variable<bool>"
	stereotype "std::unique_ptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12426423 "var_is_oobe_complete_"
	private explicit_type "Variable<bool>"
	stereotype "std::unique_ptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12426551 "var_num_slots_"
	private explicit_type "Variable<unsigned int>"
	stereotype "std::unique_ptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 6828983 // hardware_ (<unidirectional association>)
	relation 6828983 --->
	  a role_name "hardware_" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6828983 // hardware_ (<unidirectional association>)
	  b parent class_ref 3360311 // HardwareInterface
      end

      classrelation 6829111 // boot_control_ (<unidirectional association>)
	relation 6829111 --->
	  a role_name "boot_control_" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6829111 // boot_control_ (<unidirectional association>)
	  b parent class_ref 3357751 // BootControlInterface
      end
    end

    class 3395767 "RealTimeProvider"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " TimeProvider concrete implementation."
      classrelation 6829239 // <generalisation>
	relation 6829239 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6829239 // <generalisation>
	  b parent class_ref 3393463 // TimeProvider
      end

      operation 43690551 "RealTimeProvider"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "clock" type class_ref 3362359 // ClockInterface
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${v0}${)}${volatile}${throw}${abstract} : clock_(clock) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43690679 "Init"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Initializes the provider and returns whether it succeeded."
      end

      operation 43690807 "var_curr_date"
	cpp_override cpp_inline public explicit_return_type "Variable<base::Time>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return var_curr_date_.get();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43690935 "var_curr_hour"
	cpp_override cpp_inline public explicit_return_type "Variable<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return var_curr_hour_.get();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 12426679 "clock_"
	private type class_ref 3362359 // ClockInterface
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * const ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " A clock abstraction (fakeable).
"
      end

      attribute 12426807 "var_curr_date_"
	private explicit_type "Variable<base::Time>"
	stereotype "std::unique_ptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12426935 "var_curr_hour_"
	private explicit_type "Variable<int>"
	stereotype "std::unique_ptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3395895 "RealUpdaterProvider"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " A concrete UpdaterProvider implementation using local (in-process) bindings."
      classrelation 6829367 // <generalisation>
	relation 6829367 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6829367 // <generalisation>
	  b parent class_ref 3393591 // UpdaterProvider
      end

      operation 43691063 "RealUpdaterProvider"
	public explicit_return_type ""
	nparams 1
	  param inout name "system_state" type class_ref 3357239 // SystemState
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " We assume that any other object handle we get from the system state is
 \"volatile\", and so must be re-acquired whenever access is needed; this
 guarantees that parts of the system state can be mocked out at any time
 during testing. We further assume that, by the time Init() is called, the
 system state object is fully populated and usable."
      end

      operation 43691191 "Init"
	cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return true; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Initializes the provider and returns whether it succeeded."
      end

      operation 43691319 "var_updater_started_time"
	cpp_override cpp_inline public explicit_return_type "Variable<base::Time>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return &var_updater_started_time_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43691447 "var_last_checked_time"
	cpp_override cpp_inline public explicit_return_type "Variable<base::Time>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return var_last_checked_time_.get();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43691575 "var_update_completed_time"
	cpp_override cpp_inline public explicit_return_type "Variable<base::Time>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return var_update_completed_time_.get();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43691703 "var_progress"
	cpp_override cpp_inline public explicit_return_type "Variable<double>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return var_progress_.get();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43691831 "var_stage"
	cpp_override cpp_inline public explicit_return_type "Variable<Stage>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return var_stage_.get();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43691959 "var_new_version"
	cpp_override cpp_inline public explicit_return_type "Variable<std::string>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return var_new_version_.get();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43692087 "var_payload_size"
	cpp_override cpp_inline public explicit_return_type "Variable<int64_t>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return var_payload_size_.get();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43692215 "var_curr_channel"
	cpp_override cpp_inline public explicit_return_type "Variable<std::string>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return var_curr_channel_.get();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43692343 "var_new_channel"
	cpp_override cpp_inline public explicit_return_type "Variable<std::string>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return var_new_channel_.get();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43692471 "var_p2p_enabled"
	cpp_override cpp_inline public explicit_return_type "Variable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return var_p2p_enabled_.get();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43692599 "var_cellular_enabled"
	cpp_override cpp_inline public explicit_return_type "Variable<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return var_cellular_enabled_.get();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43692727 "var_consecutive_failed_update_checks"
	cpp_override cpp_inline public explicit_return_type "Variable<unsigned int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return var_consecutive_failed_update_checks_.get();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43692855 "var_server_dictated_poll_interval"
	cpp_override cpp_inline public explicit_return_type "Variable<unsigned int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return var_server_dictated_poll_interval_.get();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43692983 "var_forced_update_requested"
	cpp_override cpp_inline public explicit_return_type "Variable<UpdateRequestStatus>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return var_forced_update_requested_.get();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 6829495 // system_state_ (<unidirectional association>)
	relation 6829495 --->
	  a role_name "system_state_" private
	    comment " A pointer to the update engine's system state aggregator.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6829495 // system_state_ (<unidirectional association>)
	  b parent class_ref 3357239 // SystemState
      end

      attribute 12427063 "var_updater_started_time_"
	private explicit_type "base::Time"
	stereotype "ConstCopyVariable"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Variable implementations.
"
      end

      attribute 12427191 "var_last_checked_time_"
	private explicit_type "Variable<base::Time>"
	stereotype "std::unique_ptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12427319 "var_update_completed_time_"
	private explicit_type "Variable<base::Time>"
	stereotype "std::unique_ptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12427447 "var_progress_"
	private explicit_type "Variable<double>"
	stereotype "std::unique_ptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12427575 "var_stage_"
	private explicit_type "Variable<Stage>"
	stereotype "std::unique_ptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12427703 "var_new_version_"
	private explicit_type "Variable<std::string>"
	stereotype "std::unique_ptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12427831 "var_payload_size_"
	private explicit_type "Variable<int64_t>"
	stereotype "std::unique_ptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12427959 "var_curr_channel_"
	private explicit_type "Variable<std::string>"
	stereotype "std::unique_ptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12428087 "var_new_channel_"
	private explicit_type "Variable<std::string>"
	stereotype "std::unique_ptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12428215 "var_p2p_enabled_"
	private explicit_type "Variable<bool>"
	stereotype "std::unique_ptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12428343 "var_cellular_enabled_"
	private explicit_type "Variable<bool>"
	stereotype "std::unique_ptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12428471 "var_consecutive_failed_update_checks_"
	private explicit_type "Variable<unsigned int>"
	stereotype "std::unique_ptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12428599 "var_server_dictated_poll_interval_"
	private explicit_type "Variable<unsigned int>"
	stereotype "std::unique_ptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12428727 "var_forced_update_requested_"
	private explicit_type "Variable<UpdateRequestStatus>"
	stereotype "std::unique_ptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3396023 "UmTestUtils"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " A help class with common functionality for use in Update Manager testing."
      operation 43696311 "DefaultTimeout"
	class_operation cpp_inline public explicit_return_type "base::TimeDelta"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return base::TimeDelta::FromSeconds(kDefaultTimeoutInSeconds);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A default timeout to use when making various queries."
      end

      operation 43696439 "ExpectVariableHasValue"
	stereotype "template"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "expected" explicit_type "T"
	  param inout name "variable" explicit_type "Variable<T>"
	cpp_decl "    ${comment}template<typename T>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ASSERT_NE(nullptr, variable);
    std::unique_ptr<const T> value(
        variable->GetValue(DefaultTimeout(), nullptr));
    ASSERT_NE(nullptr, value.get()) << \"Variable: \" << variable->GetName();
    EXPECT_EQ(expected, *value) << \"Variable: \" << variable->GetName();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Calls GetValue on |variable| and expects its result to be |expected|."
      end

      operation 43696567 "ExpectVariableNotSet"
	stereotype "template"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "variable" explicit_type "Variable<T>"
	cpp_decl "    ${comment}template<typename T>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    ASSERT_NE(nullptr, variable);
    std::unique_ptr<const T> value(
        variable->GetValue(DefaultTimeout(), nullptr));
    EXPECT_EQ(nullptr, value.get()) << \"Variable: \" << variable->GetName();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Calls GetValue on |variable| and expects its result to be null."
      end

      attribute 12430135 "kDefaultTimeoutInSeconds"
	class_attribute const_attribute private explicit_type "uint"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3396151 "ScopedRefPtrLess"
      visibility package stereotype "struct"
      nformals 1
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Comparator for scoped_refptr objects."
      operation 43696695 "operator ()"
	const cpp_inline public explicit_return_type "bool"
	nparams 2
	  param in name "first" explicit_type "scoped_refptr<T>"
	  param in name "second" explicit_type "scoped_refptr<T>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    return first.get() < second.get();
  };
"
	
	
	
	
      end
    end
  end

  deploymentview 293175 "update_manager"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 1627959 "boxed_value"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3389111 // BoxedValue
      end
    end

    artifact 1628087 "chromeos_policy"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3389239 // UpdateBackoffAndDownloadUrlResult
	class_ref 3389367 // UpdateScatteringResult
	class_ref 3389495 // ChromeOSPolicy
      end
    end

    artifact 1628215 "config_provider"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3390391 // ConfigProvider
      end
    end

    artifact 1628343 "default_policy"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3390775 // DefaultPolicyState
	class_ref 3390903 // DefaultPolicy
      end
    end

    artifact 1628471 "device_policy_provider"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3391031 // DevicePolicyProvider
      end
    end

    artifact 1628599 "evaluation_context"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3391159 // typedef202
	class_ref 3389751 // EvaluationContext
      end
    end

    artifact 1628727 "fake_config_provider"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3391671 // FakeConfigProvider
      end
    end

    artifact 1628855 "fake_device_policy_provider"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3391927 // FakeDevicePolicyProvider
      end
    end

    artifact 1628983 "fake_random_provider"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3392055 // FakeRandomProvider
      end
    end

    artifact 1629111 "fake_shill_provider"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3392311 // FakeShillProvider
      end
    end

    artifact 1629239 "fake_state"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3392823 // FakeState
      end
    end

    artifact 1629367 "fake_system_provider"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3392951 // FakeSystemProvider
      end
    end

    artifact 1629495 "fake_time_provider"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3393079 // FakeTimeProvider
      end
    end

    artifact 1629623 "fake_update_manager"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3363639 // FakeUpdateManager
      end
    end

    artifact 1629751 "fake_updater_provider"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3393207 // FakeUpdaterProvider
      end
    end

    artifact 1629879 "fake_variable"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3391799 // FakeVariable
      end
    end

    artifact 1630007 "generic_variables"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3394103 // PollCopyVariable
	class_ref 3394231 // ConstCopyVariable
	class_ref 3394359 // CallCopyVariable
	class_ref 3394487 // AsyncCopyVariable
      end
    end

    artifact 1630135 "mock_policy"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3394615 // MockPolicy
      end
    end

    artifact 1630263 "mock_variable"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3394743 // MockVariable
      end
    end

    artifact 1630391 "policy"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3372215 // EvalStatus
	class_ref 3372343 // UpdateCheckParams
	class_ref 3390135 // UpdateState
	class_ref 3394871 // UpdateCannotStartReason
	class_ref 3390007 // UpdateDownloadParams
	class_ref 3389623 // Policy
      end
    end

    artifact 1630519 "prng"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3390263 // PRNG
      end
    end

    artifact 1630647 "provider"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3390519 // Provider
      end
    end

    artifact 1630775 "random_provider"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3392183 // RandomProvider
      end
    end

    artifact 1630903 "real_config_provider"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3394999 // RealConfigProvider
      end
    end

    artifact 1631031 "real_device_policy_provider"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3395127 // RealDevicePolicyProvider
      end
    end

    artifact 1631159 "real_random_provider"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3395255 // RealRandomProvider
      end
    end

    artifact 1631287 "real_shill_provider"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3395383 // RealShillProvider
      end
    end

    artifact 1631415 "real_state"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3395511 // RealState
      end
    end

    artifact 1631543 "real_system_provider"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3395639 // RealSystemProvider
      end
    end

    artifact 1631671 "real_time_provider"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3395767 // RealTimeProvider
      end
    end

    artifact 1631799 "real_updater_provider"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3395895 // RealUpdaterProvider
      end
    end

    artifact 1631927 "shill_provider"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3392567 // ConnectionType
	class_ref 3392695 // ConnectionTethering
	class_ref 3392439 // ShillProvider
      end
    end

    artifact 1632055 "state"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3389879 // State
      end
    end

    artifact 1632183 "system_provider"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3393335 // SystemProvider
      end
    end

    artifact 1632311 "time_provider"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3393463 // TimeProvider
      end
    end

    artifact 1632439 "umtest_utils"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3396023 // UmTestUtils
      end
    end

    artifact 1632567 "update_manager"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3396151 // ScopedRefPtrLess
	class_ref 3362999 // UpdateManager
      end
    end

    artifact 1632695 "updater_provider"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3393719 // Stage
	class_ref 3393847 // UpdateRequestStatus
	class_ref 3393591 // UpdaterProvider
      end
    end

    artifact 1632823 "variable"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3393975 // VariableMode
	class_ref 3391287 // BaseVariable
	class_ref 3390647 // Variable
      end
    end
  end
end
