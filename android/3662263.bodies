class QCamera3RawDumpChannel
!!!44238519.cpp!!!	QCamera3RawDumpChannel(in cam_handle : uint32_t, in channel_handle : uint32_t, inout cam_ops : mm_camera_ops_t, in rawDumpSize : cam_dimension_t, inout paddingInfo : cam_padding_info_t, inout userData : void, in postprocess_mask : uint32_t, in numBuffers : uint32_t = 3U)
    char prop[PROPERTY_VALUE_MAX];
    property_get("persist.camera.raw.dump", prop, "0");
    mRawDump = atoi(prop);
!!!44238775.cpp!!!	initialize(in isType : cam_is_type_t) : int32_t
    int32_t rc;

    rc = init(NULL, NULL);
    if (rc < 0) {
        ALOGE("%s: init failed", __func__);
        return rc;
    }
    mIsType = isType;
    rc = QCamera3Channel::addStream(CAM_STREAM_TYPE_RAW,
            CAM_FORMAT_BAYER_MIPI_RAW_10BPP_GBRG, mDim, ROTATE_0, kMaxBuffers,
            mPostProcMask, mIsType);
    if (rc < 0) {
        ALOGE("%s: addStream failed", __func__);
    }
    return rc;
!!!44238903.cpp!!!	streamCbRoutine(inout super_frame : mm_camera_super_buf_t, inout stream : QCamera3Stream) : void
    CDBG("%s: E",__func__);
    if (super_frame == NULL || super_frame->num_bufs != 1) {
        ALOGE("%s: super_frame is not valid", __func__);
        return;
    }

    if (mRawDump)
        dumpRawSnapshot(super_frame->bufs[0]);

    bufDone(super_frame);
    free(super_frame);
!!!44239031.cpp!!!	getStreamBufs(in len : uint32_t) : QCamera3StreamMem
    int rc;
    mMemory = new QCamera3HeapMemory();

    if (!mMemory) {
        ALOGE("%s: unable to create heap memory", __func__);
        return NULL;
    }
    rc = mMemory->allocate(kMaxBuffers, len, true);
    if (rc < 0) {
        ALOGE("%s: unable to allocate heap memory", __func__);
        delete mMemory;
        mMemory = NULL;
        return NULL;
    }
    return mMemory;
!!!44239159.cpp!!!	putStreamBufs() : void
    mMemory->deallocate();
    delete mMemory;
    mMemory = NULL;
!!!44239415.cpp!!!	request(inout buffer : buffer_handle_t, in frameNumber : uint32_t) : int32_t
    if (!m_bIsActive) {
        return QCamera3Channel::start();
    }
    else
        return 0;
!!!44239543.cpp!!!	dumpRawSnapshot(inout frame : mm_camera_buf_def_t) : void
    QCamera3Stream *stream = getStreamByIndex(0);
    char buf[128];
    struct timeval tv;
    struct tm *timeinfo;

    cam_dimension_t dim;
    memset(&dim, 0, sizeof(dim));
    stream->getFrameDimension(dim);

    cam_frame_len_offset_t offset;
    memset(&offset, 0, sizeof(cam_frame_len_offset_t));
    stream->getFrameOffset(offset);

    gettimeofday(&tv, NULL);
    timeinfo = localtime(&tv.tv_sec);

    memset(buf, 0, sizeof(buf));
    snprintf(buf, sizeof(buf),
                 "/data/%04d-%02d-%02d-%02d-%02d-%02d-%06ld_%d_%dx%d.raw",
                 timeinfo->tm_year + 1900, timeinfo->tm_mon + 1,
                 timeinfo->tm_mday, timeinfo->tm_hour,
                 timeinfo->tm_min, timeinfo->tm_sec,tv.tv_usec,
                 frame->frame_idx, dim.width, dim.height);

    int file_fd = open(buf, O_RDWR| O_CREAT, 0777);
    if (file_fd >= 0) {
        int written_len = write(file_fd, frame->buffer, offset.frame_len);
        CDBG("%s: written number of bytes %d", __func__, written_len);
        close(file_fd);
    } else {
        ALOGE("%s: failed to open file to dump image", __func__);
    }
