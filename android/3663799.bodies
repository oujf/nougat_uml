class QCamera3CropRegionMapper
!!!44246455.cpp!!!	update(in active_array_w : uint32_t, in active_array_h : uint32_t, in sensor_w : uint32_t, in sensor_h : uint32_t) : void
    // Sanity check
    if (active_array_w == 0 || active_array_h == 0 ||
            sensor_w == 0 || sensor_h == 0) {
        ALOGE("%s: active_array size and sensor output size must be non zero",
                __func__);
        return;
    }
    if (active_array_w < sensor_w || active_array_h < sensor_h) {
        ALOGE("%s: invalid input: active_array [%d, %d], sensor size [%d, %d]",
                __func__, active_array_w, active_array_h, sensor_w, sensor_h);
        return;
    }
    mSensorW = sensor_w;
    mSensorH = sensor_h;
    mActiveArrayW = active_array_w;
    mActiveArrayH = active_array_h;

    ALOGI("%s: active_array: %d x %d, sensor size %d x %d", __func__,
            mActiveArrayW, mActiveArrayH, mSensorW, mSensorH);
!!!44246583.cpp!!!	toActiveArray(inout crop_left : int32_t, inout crop_top : int32_t, inout crop_width : int32_t, inout crop_height : int32_t) : void
    if (mSensorW == 0 || mSensorH == 0 ||
            mActiveArrayW == 0 || mActiveArrayH == 0) {
        ALOGE("%s: sensor/active array sizes are not initialized!", __func__);
        return;
    }

    crop_left = crop_left * mActiveArrayW / mSensorW;
    crop_top = crop_top * mActiveArrayH / mSensorH;
    crop_width = crop_width * mActiveArrayW / mSensorW;
    crop_height = crop_height * mActiveArrayH / mSensorH;

    boundToSize(crop_left, crop_top, crop_width, crop_height,
            mActiveArrayW, mActiveArrayH);
!!!44246711.cpp!!!	toSensor(inout crop_left : int32_t, inout crop_top : int32_t, inout crop_width : int32_t, inout crop_height : int32_t) : void
    if (mSensorW == 0 || mSensorH == 0 ||
            mActiveArrayW == 0 || mActiveArrayH == 0) {
        ALOGE("%s: sensor/active array sizes are not initialized!", __func__);
        return;
    }

    crop_left = crop_left * mSensorW / mActiveArrayW;
    crop_top = crop_top * mSensorH / mActiveArrayH;
    crop_width = crop_width * mSensorW / mActiveArrayW;
    crop_height = crop_height * mSensorH / mActiveArrayH;

    CDBG("%s: before bounding left %d, top %d, width %d, height %d",
        __func__, crop_left, crop_top, crop_width, crop_height);
    boundToSize(crop_left, crop_top, crop_width, crop_height,
            mSensorW, mSensorH);
    CDBG("%s: after bounding left %d, top %d, width %d, height %d",
        __func__, crop_left, crop_top, crop_width, crop_height);
!!!44246839.cpp!!!	toActiveArray(inout x : uint32_t, inout y : uint32_t) : void
    if (mSensorW == 0 || mSensorH == 0 ||
            mActiveArrayW == 0 || mActiveArrayH == 0) {
        ALOGE("%s: sensor/active array sizes are not initialized!", __func__);
        return;
    }
    if ((x > static_cast<uint32_t>(mSensorW)) ||
            (y > static_cast<uint32_t>(mSensorH))) {
        ALOGE("%s: invalid co-ordinate (%d, %d) in (0, 0, %d, %d) space",
                __func__, x, y, mSensorW, mSensorH);
        return;
    }
    x = x * mActiveArrayW / mSensorW;
    y = y * mActiveArrayH / mSensorH;
!!!44246967.cpp!!!	toSensor(inout x : uint32_t, inout y : uint32_t) : void
    if (mSensorW == 0 || mSensorH == 0 ||
            mActiveArrayW == 0 || mActiveArrayH == 0) {
        ALOGE("%s: sensor/active array sizes are not initialized!", __func__);
        return;
    }

    if ((x > static_cast<uint32_t>(mActiveArrayW)) ||
            (y > static_cast<uint32_t>(mActiveArrayH))) {
        ALOGE("%s: invalid co-ordinate (%d, %d) in (0, 0, %d, %d) space",
                __func__, x, y, mSensorW, mSensorH);
        return;
    }
    x = x * mSensorW / mActiveArrayW;
    y = y * mSensorH / mActiveArrayH;
!!!44247095.cpp!!!	boundToSize(inout left : int32_t, inout top : int32_t, inout width : int32_t, inout height : int32_t, in bound_w : int32_t, in bound_h : int32_t) : void
    if (left < 0) {
        left = 0;
    }
    if (top < 0) {
        top = 0;
    }

    if ((left + width) > bound_w) {
        width = bound_w - left;
    }
    if ((top + height) > bound_h) {
        height = bound_h - top;
    }
