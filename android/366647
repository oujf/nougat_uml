format 213
"payload_generator" // android::system::update_engine::payload_generator
  revision 1
  modified_by 55 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "D:/Workspace/AndroidSourceCode/nougat_src/system/update_engine/payload_generator/"
  cpp_src_dir "D:/Workspace/AndroidSourceCode/nougat_src/system/update_engine/payload_generator/"
  cpp_namespace "chromeos_update_engine"
  classview 331319 "payload_generator"
    
    classdiagramsettings member_max_width 0 end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 3384375 "ABGenerator"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The ABGenerator is an operations generator that generates payloads using the
 A-to-B operations SOURCE_COPY and SOURCE_BSDIFF introduced in the payload
 minor version 2 format."
      classrelation 6815671 // <generalisation>
	relation 6815671 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6815671 // <generalisation>
	  b parent class_ref 3384503 // OperationsGenerator
      end

      operation 43645495 "ABGenerator"
	cpp_defaulted public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43645623 "GenerateOperations"
	cpp_override public explicit_return_type "bool"
	nparams 5
	  param in name "config" type class_ref 3384631 // PayloadGenerationConfig
	  param in name "old_part" type class_ref 3384759 // PartitionConfig
	  param in name "new_part" type class_ref 3384759 // PartitionConfig
	  param inout name "blob_file" type class_ref 3384887 // BlobFileWriter
	  param inout name "aops" explicit_type "std::vector<AnnotatedOperation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} * ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} * ${p3}, ${t4} * ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Generate the update payload operations for the given partition using
 SOURCE_* operations, used for generating deltas for the minor version
 kSourceMinorPayloadVersion. This function will generate operations in the
 partition that will read blocks from the source partition in random order
 and write the new image on the target partition, also possibly in random
 order. The operations are stored in |aops| and should be executed in that
 order. All the offsets in the operations reference the data written to
 |blob_file|."
      end

      operation 43645751 "FragmentOperations"
	class_operation public explicit_return_type "bool"
	nparams 4
	  param in name "version" type class_ref 3385015 // PayloadVersion
	  param inout name "aops" explicit_type "std::vector<AnnotatedOperation>"
	  param in name "target_part_path" explicit_type "std::string"
	  param inout name "blob_file" type class_ref 3384887 // BlobFileWriter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}, const ${t2} & ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}, const ${t2} & ${p2}, ${t3} * ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Split the operations in the vector of AnnotatedOperations |aops|
 such that for every operation there is only one dst extent and updates
 |aops| with the new list of operations. All kinds of operations are
 fragmented except BSDIFF and SOURCE_BSDIFF operations.
 The |target_part_path| is the filename of the new image, where the
 destination extents refer to. The blobs of the operations in |aops| should
 reference |blob_file|. |blob_file| are updated if needed."
      end

      operation 43645879 "SortOperationsByDestination"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "aops" explicit_type "std::vector<AnnotatedOperation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Takes a vector of AnnotatedOperations |aops| and sorts them by the first
 start block in their destination extents. Sets |aops| to a vector of the
 sorted operations."
      end

      operation 43646007 "SplitSourceCopy"
	class_operation public explicit_return_type "bool"
	nparams 2
	  param in name "original_aop" type class_ref 3385143 // AnnotatedOperation
	  param inout name "result_aops" explicit_type "std::vector<AnnotatedOperation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Takes an SOURCE_COPY install operation, |aop|, and adds one operation for
 each dst extent in |aop| to |ops|. The new operations added to |ops| will
 have only one dst extent. The src extents are split so the number of blocks
 in the src and dst extents are equal.
 E.g. we have a SOURCE_COPY operation:
   src extents: [(1, 3), (5, 1), (7, 1)], dst extents: [(2, 2), (6, 3)]
 Then we will get 2 new operations:
   1. src extents: [(1, 2)], dst extents: [(2, 2)]
   2. src extents: [(3, 1),(5, 1),(7, 1)], dst extents: [(6, 3)]"
      end

      operation 43646135 "SplitAReplaceOp"
	class_operation public explicit_return_type "bool"
	nparams 5
	  param in name "version" type class_ref 3385015 // PayloadVersion
	  param in name "original_aop" type class_ref 3385143 // AnnotatedOperation
	  param in name "target_part" explicit_type "std::string"
	  param inout name "result_aops" explicit_type "std::vector<AnnotatedOperation>"
	  param inout name "blob_file" type class_ref 3384887 // BlobFileWriter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} * ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} * ${p3}, ${t4} * ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Takes a REPLACE, REPLACE_BZ or REPLACE_XZ operation |aop|, and adds one
 operation for each dst extent in |aop| to |ops|. The new operations added
 to |ops| will have only one dst extent each, and may be of a different
 type depending on whether compression is advantageous."
      end

      operation 43646263 "MergeOperations"
	class_operation public explicit_return_type "bool"
	nparams 5
	  param inout name "aops" explicit_type "std::vector<AnnotatedOperation>"
	  param in name "version" type class_ref 3385015 // PayloadVersion
	  param in name "chunk_blocks" explicit_type "size_t"
	  param in name "target_part" explicit_type "std::string"
	  param inout name "blob_file" type class_ref 3384887 // BlobFileWriter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}, const ${t3} & ${p3}${v3}, ${t4} * ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} & ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} * ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Takes a sorted (by first destination extent) vector of operations |aops|
 and merges SOURCE_COPY, REPLACE, REPLACE_BZ and REPLACE_XZ, operations in
 that vector.
 It will merge two operations if:
   - They are both REPLACE_*, or they are both SOURCE_COPY,
   - Their destination blocks are contiguous.
   - Their combined blocks do not exceed |chunk_blocks| blocks.
 Note that unlike other methods, you can't pass a negative number in
 |chunk_blocks|."
      end

      operation 43646391 "AddSourceHash"
	class_operation public explicit_return_type "bool"
	nparams 2
	  param inout name "aops" explicit_type "std::vector<AnnotatedOperation>"
	  param in name "source_part_path" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Takes a vector of AnnotatedOperations |aops|, adds source hash to all
 operations that have src_extents."
      end

      operation 43646519 "AddDataAndSetType"
	class_operation private explicit_return_type "bool"
	nparams 4
	  param inout name "aop" type class_ref 3385143 // AnnotatedOperation
	  param in name "version" type class_ref 3385015 // PayloadVersion
	  param in name "target_part_path" explicit_type "std::string"
	  param inout name "blob_file" type class_ref 3384887 // BlobFileWriter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} * ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Adds the data payload for a REPLACE/REPLACE_BZ/REPLACE_XZ operation |aop|
 by reading its output extents from |target_part_path| and appending a
 corresponding data blob to |blob_file|. The blob will be compressed if this
 is smaller than the uncompressed form, and the operation type will be set
 accordingly. |*blob_file| will be updated as well. If the operation happens
 to have the right type and already points to a data blob, nothing is
 written. Caller should only set type and data blob if it's valid."
      end
    end

    class 3384503 "OperationsGenerator"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 43657143 "~OperationsGenerator"
	cpp_virtual cpp_defaulted public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 43657271 "GenerateOperations"
	abstract cpp_virtual public explicit_return_type "bool"
	nparams 5
	  param in name "config" type class_ref 3384631 // PayloadGenerationConfig
	  param in name "old_part" type class_ref 3384759 // PartitionConfig
	  param in name "new_part" type class_ref 3384759 // PartitionConfig
	  param inout name "blob_file" type class_ref 3384887 // BlobFileWriter
	  param inout name "aops" explicit_type "std::vector<AnnotatedOperation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} * ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " This method generates a list of operations to update from the partition
 |old_part| to |new_part| and stores the generated operations in |aops|.
 These operations are generated based on the given |config|.
 The operations should be applied in the order specified in the list, and
 they respect the payload version and type (delta or full) specified in
 |config|.
 The operations generated will refer to offsets in the file |blob_file|,
 where this function stores the output, but not necessarily in the same
 order as they appear in the |aops|."
      end

      operation 43657399 "OperationsGenerator"
	cpp_defaulted protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 3384631 "PayloadGenerationConfig"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The PayloadGenerationConfig struct encapsulates all the configuration to
 build the requested payload. This includes information about the old and new
 image as well as the restrictions applied to the payload (like minor-version
 and full/delta payload)."
      operation 43660087 "Validate"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns whether the PayloadGenerationConfig is valid."
      end

      classrelation 6820535 // target (<directional composition>)
	relation 6820535 *-->
	  a role_name "target" public
	    comment " Image information about the new image that's the target of this payload.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6820535 // target (<directional composition>)
	  b parent class_ref 3388599 // ImageConfig
      end

      classrelation 6820663 // source (<directional composition>)
	relation 6820663 *-->
	  a role_name "source" public
	    comment " Image information pertaining the old image, if any. This is only valid
 if is_full is false, so we are requested a delta payload.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6820663 // source (<directional composition>)
	  b parent class_ref 3388599 // ImageConfig
      end

      attribute 12407351 "is_delta"
	public explicit_type "bool"
	init_value "=  false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Wheter the requested payload is a delta payload.
"
      end

      classrelation 6820791 // version (<directional composition>)
	relation 6820791 *-->
	  a role_name "version" public
	    comment " The major/minor version of the payload.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6820791 // version (<directional composition>)
	  b parent class_ref 3385015 // PayloadVersion
      end

      attribute 12407479 "rootfs_partition_size"
	public explicit_type "uint64_t"
	init_value "=  0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The size of the rootfs partition, that not necessarily is the same as the
 filesystem in either source or target version, since there is some space
 after the partition used to store the verity hashes and or the bootcache.
"
      end

      attribute 12407607 "hard_chunk_size"
	public explicit_type "ssize_t"
	init_value "=  -1"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The |hard_chunk_size| is the maximum size that a single operation should
 write in the destination. Operations bigger than chunk_size should be
 split. A value of -1 means no hard chunk size limit. A very low limit
 means more operations, and less of a chance to reuse the data.
"
      end

      attribute 12407735 "soft_chunk_size"
	public explicit_type "size_t"
	init_value "=  2 * 1024 * 1024"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The |soft_chunk_size| is the preferred chunk size to use when there's no
 significant impact to the operations. For example, REPLACE, MOVE and
 SOURCE_COPY operations are not significantly impacted by the chunk size,
 except for a few bytes overhead in the manifest to describe extra
 operations. On the other hand, splitting BSDIFF operations impacts the
 payload size since it is not possible to use the redundancy *between*
 chunks.
"
      end

      attribute 12407863 "block_size"
	public explicit_type "size_t"
	init_value "=  4096"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " TODO(deymo): Remove the block_size member and maybe replace it with a
 minimum alignment size for blocks (if needed). Algorithms should be able to
 pick the block_size they want, but for now only 4 KiB is supported.
 The block size used for all the operations in the manifest.
"
      end
    end

    class 3384759 "PartitionConfig"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 43658423 "PartitionConfig"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "name" explicit_type "std::string"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract} : name(name) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43658551 "ValidateExists"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns whether the PartitionConfig is not an empty image and all the
 fields are set correctly to a valid image file."
      end

      operation 43658679 "OpenFilesystem"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Open then filesystem stored in this partition and stores it in
 |fs_interface|. Returns whether opening the filesystem worked."
      end

      attribute 12406583 "path"
	public explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The path to the partition file. This can be a regular file or a block
 device such as a loop device.
"
      end

      attribute 12406711 "size"
	public explicit_type "uint64_t"
	init_value "=  0"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The size of the data in |path|. If rootfs verification is used (verity)
 this value should match the size of the verity device for the rootfs, and
 the size of the whole kernel. This value could be smaller than the
 partition and is the size of the data update_engine assumes verified for
 the source image, and the size of that data it should generate for the
 target image.
"
      end

      classrelation 6820023 // fs_interface (<directional composition>)
	relation 6820023 *-->
	  stereotype "std::unique_ptr"
	  a role_name "fs_interface" public
	    comment " The FilesystemInterface implementation used to access this partition's
 files.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6820023 // fs_interface (<directional composition>)
	  b parent class_ref 3386551 // FilesystemInterface
      end

      attribute 12406839 "name"
	public explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 6820151 // postinstall (<directional composition>)
	relation 6820151 *-->
	  a role_name "postinstall" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6820151 // postinstall (<directional composition>)
	  b parent class_ref 3388471 // PostInstallConfig
      end
    end

    class 3384887 "BlobFileWriter"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 43646775 "BlobFileWriter"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "blob_fd" explicit_type "int"
	  param inout name "blob_file_size" explicit_type "off_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${volatile}${throw}${abstract} : blob_fd_(blob_fd),
      blob_file_size_(blob_file_size) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Create the BlobFileWriter object that will manage the blobs stored to
 |blob_fd| in a thread safe way."
      end

      operation 43646903 "StoreBlob"
	public explicit_return_type "off_t"
	nparams 1
	  param in name "blob" explicit_type "brillo::Blob"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Store the passed |blob| in the blob file. Returns the offset at which it
 was stored, or -1 in case of failure."
      end

      operation 43647031 "SetTotalBlobs"
	public explicit_return_type "void"
	nparams 1
	  param in name "total_blobs" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The number of |total_blobs| is the number of blobs that will be stored but
 is only used for logging purposes. If not set or set to 0, logging will be
 skipped. This function will also reset the number of stored blobs to 0."
      end

      attribute 12402231 "total_blobs_"
	private explicit_type "size_t"
	init_value " {0}"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12402359 "stored_blobs_"
	private explicit_type "size_t"
	init_value " {0}"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12402487 "blob_fd_"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The file and its size are protected with the |blob_mutex_|.
"
      end

      attribute 12402615 "blob_file_size_"
	private explicit_type "off_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12402743 "blob_mutex_"
	private explicit_type "base::Lock"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3385015 "PayloadVersion"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 43659319 "PayloadVersion"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : PayloadVersion(0, 0) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43659447 "PayloadVersion"
	public explicit_return_type ""
	nparams 2
	  param in name "major_version" explicit_type "uint64_t"
	  param in name "minor_version" type class_ref 2810935 // uint32_t
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43659575 "Validate"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns whether the PayloadVersion is valid."
      end

      operation 43659703 "OperationAllowed"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "operation" explicit_type "InstallOperation_Type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return whether the passed |operation| is allowed by this payload."
      end

      operation 43659831 "IsDelta"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Whether this payload version is a delta payload."
      end

      operation 43659959 "InplaceUpdate"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Tells whether the update is done in-place, that is, whether the operations
 read and write from the same partition."
      end

      attribute 12407095 "major"
	public explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The major version of the payload.
"
      end

      classrelation 6820407 // minor (<directional composition>)
	relation 6820407 *-->
	  a role_name "minor" public
	    comment " The minor version of the payload.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6820407 // minor (<directional composition>)
	  b parent class_ref 2810935 // uint32_t
      end

      attribute 12407223 "imgdiff_allowed"
	public explicit_type "bool"
	init_value "=  false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Wheter the IMGDIFF operation is allowed based on the available compressor
 in the delta_generator and the one supported by the target.
"
      end
    end

    class 3385143 "AnnotatedOperation"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 12401975 "name"
	public explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The name given to the operation, for logging and debugging purposes only.
 This normally includes the path to the file and the chunk used, if any.
"
      end

      attribute 12402103 "op"
	public explicit_type "InstallOperation"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The InstallOperation, as defined by the protobuf.
"
      end

      operation 43646647 "SetOperationBlob"
	public explicit_return_type "bool"
	nparams 2
	  param in name "blob" explicit_type "brillo::Blob"
	  param inout name "blob_file" type class_ref 3384887 // BlobFileWriter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Writes |blob| to the end of |blob_file|. It sets the data_offset and
 data_length in AnnotatedOperation to match the offset and size of |blob|
 in |blob_file|."
      end
    end

    class 3385271 "BlockMapping"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " BlockMapping allows to map data blocks (brillo::Blobs of block_size size)
 into unique integer values called \"block ids\". This mapping differs from a
 hash function in that two blocks with the same data will have the same id but
 also two blocks with the same id will have the same data. This is only valid
 in the context of the same BlockMapping instance."
      class 3385399 "BlockId"
	visibility package stereotype "template_typedef"
	cpp_decl "${comment}${template}using ${name} = ${inherit};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 6815799 // <generalisation>
	  relation 6815799 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 6815799 // <generalisation>
	    b parent class_ref 3385527 // typedef201
	end
      end

      class 3385527 "typedef201"
	visibility package stereotype "typedef" explicit_base_type "int64_t"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      operation 43647159 "BlockMapping"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "block_size" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract} : block_size_(block_size) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43647287 "AddBlock"
	public return_type class_ref 3385399 // BlockId
	nparams 1
	  param in name "block_data" explicit_type "brillo::Blob"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Add a single data block to the mapping. Returns its unique block id.
 In case of error returns -1."
      end

      operation 43647415 "AddDiskBlock"
	public return_type class_ref 3385399 // BlockId
	nparams 2
	  param in name "fd" explicit_type "int"
	  param in name "byte_offset" explicit_type "off_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Add a block from disk reading it from the file descriptor |fd| from the
 offset in bytes |byte_offset|. The data block may or may not be cached, so
 the file descriptor must be available until the BlockMapping is destroyed.
 Returns the unique block id of the added block or -1 in case of error."
      end

      operation 43647543 "AddManyDiskBlocks"
	public explicit_return_type "bool"
	nparams 4
	  param in name "fd" explicit_type "int"
	  param in name "initial_byte_offset" explicit_type "off_t"
	  param in name "num_blocks" explicit_type "size_t"
	  param inout name "block_ids" explicit_type "std::vector<BlockId>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} * ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " This is a helper method to add |num_blocks| contiguous blocks reading them
 from the file descriptor |fd| starting at offset |initial_byte_offset|.
 Returns whether it succeeded to add all the disk blocks and stores in
 |block_ids| the block id for each one of the added blocks."
      end

      operation 43647671 "AddBlock"
	private return_type class_ref 3385399 // BlockId
	nparams 3
	  param in name "fd" explicit_type "int"
	  param in name "byte_offset" explicit_type "off_t"
	  param in name "block_data" explicit_type "brillo::Blob"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, const ${t2} & ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Add a single block passed in |block_data|. If |fd| is not -1, the block
 can be discarded to save RAM and retrieved later from |fd| at the position
 |byte_offset|."
      end

      attribute 12402871 "block_size_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 6815927 // used_block_ids (<directional composition>)
	relation 6815927 *-->
	  a role_name "used_block_ids" init_value " {0}" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6815927 // used_block_ids (<directional composition>)
	  b parent class_ref 3385399 // BlockId
      end

      class 3385655 "UniqueBlock"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 12402999 "block_data"
	  public explicit_type "brillo::Blob"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 6816055 // block_id (<directional composition>)
	  relation 6816055 *-->
	    a role_name "block_id" public
	      comment " The block id assigned to this unique block.
"
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 6816055 // block_id (<directional composition>)
	    b parent class_ref 3385399 // BlockId
	end

	attribute 12403127 "fd"
	  public explicit_type "int"
	  init_value " {-1}"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The location on this unique block on disk (if not cached in block_data).
"
	end

	attribute 12403255 "byte_offset"
	  public explicit_type "off_t"
	  init_value " {0}"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 6816183 // times_read (<directional composition>)
	  relation 6816183 *-->
	    a role_name "times_read" init_value " {0}" public
	      comment " Number of times we have seen this data block. Used for caching.
"
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 6816183 // times_read (<directional composition>)
	    b parent class_ref 2810935 // uint32_t
	end

	operation 43647799 "CompareData"
	  public explicit_return_type "bool"
	  nparams 2
	    param in name "other_block" explicit_type "brillo::Blob"
	    param inout name "equals" explicit_type "bool"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Compares the UniqueBlock data with the other_block data and stores if
 they are equal in |equals|. Returns whether there was an error reading
 the block from disk while comparing it."
	end
      end

      attribute 12403383 "mapping_"
	private explicit_type "size_t, std::vector<UniqueBlock>"
	stereotype "std::map"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " A mapping from hash values to possible block ids.
"
      end
    end

    class 3385783 "CycleBreaker"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 43647927 "CycleBreaker"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : skipped_ops_(0) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43648055 "BreakCycles"
	public explicit_return_type "void"
	nparams 2
	  param in name "graph" type class_ref 3385911 // Graph
	  param inout name "out_cut_edges" explicit_type "std::set<Edge>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " out_cut_edges is replaced with the cut edges."
      end

      operation 43648183 "skipped_ops"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return skipped_ops_; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43648311 "HandleCircuit"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43648439 "Unblock"
	private explicit_return_type "void"
	nparams 1
	  param in name "u" type class_ref 3386167 // Index
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43648567 "Circuit"
	private explicit_return_type "bool"
	nparams 2
	  param in name "vertex" type class_ref 3386167 // Index
	  param in name "depth" type class_ref 3386167 // Index
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43648695 "StackContainsCutEdge"
	const private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 12403511 "blocked_"
	private explicit_type "bool"
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " \"blocked\" in the paper"
      end

      classrelation 6816311 // current_vertex_ (<directional composition>)
	relation 6816311 *-->
	  a role_name "current_vertex_" private
	    comment " \"s\" in the paper"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6816311 // current_vertex_ (<directional composition>)
	  b parent class_ref 3386167 // Index
      end

      classrelation 6816439 // stack_ (<directional composition>)
	relation 6816439 *-->
	  stereotype "std::vector"
	  a role_name "stack_" private
	    comment " the stack variable in the paper"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6816439 // stack_ (<directional composition>)
	  b parent class_ref 3386167 // Index
      end

      classrelation 6816567 // subgraph_ (<directional composition>)
	relation 6816567 *-->
	  a role_name "subgraph_" private
	    comment " \"A_K\" in the paper"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6816567 // subgraph_ (<directional composition>)
	  b parent class_ref 3385911 // Graph
      end

      classrelation 6816695 // blocked_graph_ (<directional composition>)
	relation 6816695 *-->
	  a role_name "blocked_graph_" private
	    comment " \"B\" in the paper"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6816695 // blocked_graph_ (<directional composition>)
	  b parent class_ref 3385911 // Graph
      end

      classrelation 6816823 // cut_edges_ (<directional composition>)
	relation 6816823 *-->
	  stereotype "std::set"
	  a role_name "cut_edges_" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6816823 // cut_edges_ (<directional composition>)
	  b parent class_ref 3386295 // Edge
      end

      attribute 12403639 "skipped_ops_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Number of operations skipped b/c we know they don't have any
 incoming edges.
"
      end
    end

    class 3385911 "Graph"
      visibility package stereotype "typedef" base_type class_ref 3386039 // Vertex
      cpp_decl "${comment}typedef std::vector<${type}> ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 6818615 // <dependency>
	relation 6818615 -_->
	  a public
	    cpp default "#include in source"
	    classrelation_ref 6818615 // <dependency>
	  b parent class_ref 3386039 // Vertex
      end
    end

    class 3386039 "Vertex"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      class 3386167 "Index"
	visibility package stereotype "typedef" base_type class_ref 3386039 // Vertex
	cpp_decl "${comment}typedef std::vector<${type}>::size_type ${name};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 6818359 // <dependency>
	  relation 6818359 -_->
	    a public
	      cpp default "#include in source"
	      classrelation_ref 6818359 // <dependency>
	    b parent class_ref 3386039 // Vertex
	end
      end

      operation 43654583 "Vertex"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
      valid(true),
      index(-1),
      lowlink(-1) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      attribute 12405303 "valid"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      class 3387575 "EdgeMap"
	visibility package stereotype "typedef" base_type class_ref 3387447 // EdgeProperties
	cpp_decl "${comment}typedef std::map<std::vector<Vertex>::size_type,${type}> ${name};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 6817591 // <dependency>
	  relation 6817591 -_->
	    a public
	      cpp default "#include in source"
	      classrelation_ref 6817591 // <dependency>
	    b parent class_ref 3387447 // EdgeProperties
	end
      end

      classrelation 6817719 // out_edges (<directional composition>)
	relation 6817719 *-->
	  a role_name "out_edges" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6817719 // out_edges (<directional composition>)
	  b parent class_ref 3387575 // EdgeMap
      end

      class 3387703 "SubgraphEdgeMap"
	visibility package stereotype "typedef" explicit_base_type "std::set<std::vector<Vertex>::size_type>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      classrelation 6817847 // subgraph_edges (<directional composition>)
	relation 6817847 *-->
	  a role_name "subgraph_edges" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6817847 // subgraph_edges (<directional composition>)
	  b parent class_ref 3387703 // SubgraphEdgeMap
      end

      classrelation 6817975 // index (<directional composition>)
	relation 6817975 *-->
	  stereotype "std::vector"
	  a role_name "index" public
	    comment " For Tarjan's algorithm:
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}>::size_type ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6817975 // index (<directional composition>)
	  b parent class_ref 3386039 // Vertex
      end

      classrelation 6818103 // lowlink (<directional composition>)
	relation 6818103 *-->
	  stereotype "std::vector"
	  a role_name "lowlink" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}>::size_type ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6818103 // lowlink (<directional composition>)
	  b parent class_ref 3386039 // Vertex
      end

      classrelation 6818231 // aop (<directional composition>)
	relation 6818231 *-->
	  a role_name "aop" public
	    comment " Other Vertex properties:
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6818231 // aop (<directional composition>)
	  b parent class_ref 3385143 // AnnotatedOperation
      end

      classrelation 6818487 // kInvalidIndex (<directional composition>)
	relation 6818487 *-->
	  a role_name "kInvalidIndex" class_relation const_relation public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6818487 // kInvalidIndex (<directional composition>)
	  b parent class_ref 3386167 // Index
      end
    end

    class 3386295 "Edge"
      visibility package stereotype "typedef" base_type class_ref 3386167 // Index
      cpp_decl "${comment}typedef std::pair<${type},Vertex::Index> ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 6818743 // <dependency>
	relation 6818743 -_->
	  a public
	    cpp default "#include in source"
	    classrelation_ref 6818743 // <dependency>
	  b parent class_ref 3386167 // Index
      end
    end

    class 3386423 "Ext2Filesystem"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 6816951 // <generalisation>
	relation 6816951 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6816951 // <generalisation>
	  b parent class_ref 3386551 // FilesystemInterface
      end

      operation 43648823 "CreateFromFile"
	class_operation public explicit_return_type "std::unique_ptr<Ext2Filesystem>"
	nparams 1
	  param in name "filename" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Creates an Ext2Filesystem from a ext2 formatted filesystem stored in a
 file. The file doesn't need to be loop-back mounted."
      end

      operation 43648951 "~Ext2Filesystem"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 43649079 "GetBlockSize"
	const cpp_override public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " FilesystemInterface overrides."
      end

      operation 43649207 "GetBlockCount"
	const cpp_override public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43649335 "GetFiles"
	const cpp_override public explicit_return_type "bool"
	nparams 1
	  param inout name "files" explicit_type "std::vector<File>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " GetFiles will return one FilesystemInterface::File for every file and every
 directory in the filesystem. Hard-linked files will appear in the list
 several times with the same list of blocks.
 On addition to actual files, it also returns these pseudo-files:
  <free-space>: With all the unallocated data-blocks.
  <inode-blocks>: Will all the data-blocks for second and third level inodes
    of all the files.
  <group-descriptors>: With the block group descriptor and their reserved
    space.
  <metadata>: With the rest of ext2 metadata blocks, such as superblocks
    and bitmap tables."
      end

      operation 43649463 "LoadSettings"
	const cpp_override public explicit_return_type "bool"
	nparams 1
	  param inout name "store" explicit_type "brillo::KeyValueStore"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43649591 "Ext2Filesystem"
	cpp_defaulted private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      attribute 12403767 "filsys_"
	private explicit_type "ext2_filsys"
	init_value "=  nullptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The ext2 main data structure holding the filesystem.
"
      end

      attribute 12403895 "filename_"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The file where the filesystem is stored.
"
      end
    end

    class 3386551 "FilesystemInterface"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      class 3387191 "File"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 43653303 "File"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {
      memset(&file_stat, 0, sizeof(file_stat));
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	attribute 12404663 "file_stat"
	  public explicit_type "stat"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The stat struct for the file. This is invalid (inode 0) for some
 pseudo-files.
"
	end

	attribute 12404791 "name"
	  public explicit_type "std::string"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The absolute path to the file inside the filesystem, for example,
 \"/usr/bin/bash\". For pseudo-files, like blocks associated to internal
 filesystem tables or free space, the path doesn't start with a /.
"
	end

	attribute 12404919 "extents"
	  public explicit_type "Extent"
	  stereotype "std::vector"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The list of all physical blocks holding the data of this file in
 the same order as the logical data. All the block numbers shall be
 between 0 and GetBlockCount() - 1. The blocks are encoded in extents,
 indicating the starting block, and the number of consecutive blocks.
"
	end
      end

      operation 43653431 "~FilesystemInterface"
	cpp_virtual cpp_defaulted public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 43653559 "GetBlockSize"
	abstract const cpp_virtual public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the size of a block in the filesystem."
      end

      operation 43653687 "GetBlockCount"
	abstract const cpp_virtual public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the number of blocks in the filesystem."
      end

      operation 43653815 "GetFiles"
	abstract const cpp_virtual public explicit_return_type "bool"
	nparams 1
	  param inout name "files" explicit_type "std::vector<File>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Stores in |files| the list of files and pseudo-files in the filesystem. See
 FileInterface for details. The paths returned by this method shall not
 be repeated; but the same block could be present in more than one file as
 happens for example with hard-linked files, but not limited to those cases.
 Returns whether the function succeeded."
      end

      operation 43653943 "LoadSettings"
	abstract const cpp_virtual public explicit_return_type "bool"
	nparams 1
	  param inout name "store" explicit_type "brillo::KeyValueStore"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Load the image settings stored in the filesystem in the
 /etc/update_engine.conf file. Returns whether the settings were found."
      end

      operation 43654071 "FilesystemInterface"
	cpp_defaulted protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 3386679 "ExtentLess"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " An ExtentRanges object represents an unordered collection of extents (and
 therefore blocks). Such an object may be modified by adding or subtracting
 blocks (think: set addition or set subtraction). Note that ExtentRanges
 ignores sparse hole extents mostly to avoid confusion between extending a
 sparse hole range vs. set addition but also to ensure that the delta
 generator doesn't use sparse holes as scratch space."
      operation 43649719 "operator ()"
	const cpp_inline public explicit_return_type "bool"
	nparams 2
	  param in name "x" explicit_type "Extent"
	  param in name "y" explicit_type "Extent"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    return x.start_block() < y.start_block();
  };
"
	
	
	
	
      end
    end

    class 3386807 "ExtentRanges"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      class 3386935 "ExtentSet"
	visibility package stereotype "typedef" base_type class_ref 3386679 // ExtentLess
	cpp_decl "${comment}typedef std::set<Extent,${type}> ${name};
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 6817079 // <dependency>
	  relation 6817079 -_->
	    a public
	      cpp default "#include in source"
	      classrelation_ref 6817079 // <dependency>
	    b parent class_ref 3386679 // ExtentLess
	end
      end

      operation 43649847 "ExtentRanges"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : blocks_(0) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43649975 "AddBlock"
	public explicit_return_type "void"
	nparams 1
	  param in name "block" explicit_type "uint64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43650103 "SubtractBlock"
	public explicit_return_type "void"
	nparams 1
	  param in name "block" explicit_type "uint64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43650231 "AddExtent"
	public explicit_return_type "void"
	nparams 1
	  param in name "extent" explicit_type "Extent"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43650359 "SubtractExtent"
	public explicit_return_type "void"
	nparams 1
	  param in name "extent" explicit_type "Extent"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43650487 "AddExtents"
	public explicit_return_type "void"
	nparams 1
	  param in name "extents" explicit_type "std::vector<Extent>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43650615 "SubtractExtents"
	public explicit_return_type "void"
	nparams 1
	  param in name "extents" explicit_type "std::vector<Extent>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43650743 "AddRepeatedExtents"
	public explicit_return_type "void"
	nparams 1
	  param in name "exts" explicit_type "::google::protobuf::RepeatedPtrField<Extent>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43650871 "SubtractRepeatedExtents"
	public explicit_return_type "void"
	nparams 1
	  param in name "exts" explicit_type "::google::protobuf::RepeatedPtrField<Extent>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43650999 "AddRanges"
	public explicit_return_type "void"
	nparams 1
	  param in name "ranges" type class_ref 3386807 // ExtentRanges
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43651127 "SubtractRanges"
	public explicit_return_type "void"
	nparams 1
	  param in name "ranges" type class_ref 3386807 // ExtentRanges
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43651255 "ContainsBlock"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "block" explicit_type "uint64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns whether the block |block| is in this ExtentRange."
      end

      operation 43651383 "ExtentsOverlapOrTouch"
	class_operation public explicit_return_type "bool"
	nparams 2
	  param in name "a" explicit_type "Extent"
	  param in name "b" explicit_type "Extent"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43651511 "ExtentsOverlap"
	class_operation public explicit_return_type "bool"
	nparams 2
	  param in name "a" explicit_type "Extent"
	  param in name "b" explicit_type "Extent"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43651639 "Dump"
	const public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Dumps contents to the log file. Useful for debugging."
      end

      operation 43651767 "blocks"
	const cpp_inline public explicit_return_type "uint64_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return blocks_; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43651895 "extent_set"
	const cpp_inline public return_type class_ref 3386935 // ExtentSet
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return extent_set_; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43652023 "GetExtentsForBlockCount"
	const public explicit_return_type "std::vector<Extent>"
	nparams 1
	  param in name "count" explicit_type "uint64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns an ordered vector of extents for |count| blocks,
 using extents in extent_set_. The returned extents are not
 removed from extent_set_. |count| must be less than or equal to
 the number of blocks in this extent set."
      end

      classrelation 6817207 // extent_set_ (<directional composition>)
	relation 6817207 *-->
	  a role_name "extent_set_" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6817207 // extent_set_ (<directional composition>)
	  b parent class_ref 3386935 // ExtentSet
      end

      attribute 12404023 "blocks_"
	private explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3387063 "FakeFilesystem"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 6817335 // <generalisation>
	relation 6817335 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6817335 // <generalisation>
	  b parent class_ref 3386551 // FilesystemInterface
      end

      operation 43652151 "FakeFilesystem"
	public explicit_return_type ""
	nparams 2
	  param in name "block_size" explicit_type "uint64_t"
	  param in name "block_count" explicit_type "uint64_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43652279 "~FakeFilesystem"
	cpp_virtual cpp_defaulted public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 43652407 "GetBlockSize"
	const cpp_override public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " FilesystemInterface overrides."
      end

      operation 43652535 "GetBlockCount"
	const cpp_override public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43652663 "GetFiles"
	const cpp_override public explicit_return_type "bool"
	nparams 1
	  param inout name "files" explicit_type "std::vector<File>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43652791 "LoadSettings"
	const cpp_override public explicit_return_type "bool"
	nparams 1
	  param inout name "store" explicit_type "brillo::KeyValueStore"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43652919 "AddFile"
	public explicit_return_type "void"
	nparams 2
	  param in name "filename" explicit_type "std::string"
	  param in name "extents" explicit_type "std::vector<Extent>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Fake methods.
 Add a file to the list of fake files."
      end

      operation 43653047 "SetMinorVersion"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "minor_version" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    minor_version_ = minor_version;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sets the PAYLOAD_MINOR_VERSION key stored by LoadSettings(). Use a negative
 value to produce an error in LoadSettings()."
      end

      operation 43653175 "FakeFilesystem"
	cpp_defaulted private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      attribute 12404151 "block_size_"
	private explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12404279 "block_count_"
	private explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12404407 "minor_version_"
	private explicit_type "int"
	init_value " {-1}"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12404535 "files_"
	private explicit_type "File"
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3387319 "FullUpdateGenerator"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 6817463 // <generalisation>
	relation 6817463 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6817463 // <generalisation>
	  b parent class_ref 3384503 // OperationsGenerator
      end

      operation 43654199 "FullUpdateGenerator"
	cpp_defaulted public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43654327 "GenerateOperations"
	cpp_override public explicit_return_type "bool"
	nparams 5
	  param in name "config" type class_ref 3384631 // PayloadGenerationConfig
	  param in name "old_part" type class_ref 3384759 // PartitionConfig
	  param in name "new_part" type class_ref 3384759 // PartitionConfig
	  param inout name "blob_file" type class_ref 3384887 // BlobFileWriter
	  param inout name "aops" explicit_type "std::vector<AnnotatedOperation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} * ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} * ${p3}, ${t4} * ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " OperationsGenerator override.
 Creates a full update for the target image defined in |config|. |config|
 must be a valid payload generation configuration for a full payload.
 Populates |aops|, with data about the update operations, and writes
 relevant data to |blob_file|."
      end
    end

    class 3387447 "EdgeProperties"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " A few classes that help in generating delta images use these types
 for the graph work."
      attribute 12405047 "extents"
	public explicit_type "Extent"
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Read-before extents. I.e., blocks in |extents| must be read by the
 node pointed to before the pointing node runs (presumably b/c it
 overwrites these blocks).
"
      end

      attribute 12405175 "write_extents"
	public explicit_type "Extent"
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Write before extents. I.e., blocks in |write_extents| must be written
 by the node pointed to before the pointing node runs (presumably
 b/c it reads the data written by the other node).
"
      end

      operation 43654455 "operator =="
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "that" type class_ref 3387447 // EdgeProperties
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    return extents == that.extents && write_extents == that.write_extents;
  };
"
	
	
	
	
      end
    end

    class 3387831 "CutEdgeVertexes"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " InplaceGenerator contains all functionality related to the inplace algorithm
 for generating update payloads. These are the functions used when delta minor
 version is 1.
 This struct stores all relevant info for an edge that is cut between
 nodes old_src -> old_dst by creating new vertex new_vertex. The new
 relationship is:
 old_src -(read before)-> new_vertex <-(write before)- old_dst
 new_vertex is a MOVE operation that moves some existing blocks into
 temp space. The temp extents are, by necessity, stored in new_vertex
 (as dst extents) and old_dst (as src extents), but they are also broken
 out into tmp_extents, as the nodes themselves may contain many more
 extents."
      classrelation 6818871 // new_vertex (<directional composition>)
	relation 6818871 *-->
	  a role_name "new_vertex" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6818871 // new_vertex (<directional composition>)
	  b parent class_ref 3386167 // Index
      end

      classrelation 6818999 // old_src (<directional composition>)
	relation 6818999 *-->
	  a role_name "old_src" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6818999 // old_src (<directional composition>)
	  b parent class_ref 3386167 // Index
      end

      classrelation 6819127 // old_dst (<directional composition>)
	relation 6819127 *-->
	  a role_name "old_dst" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6819127 // old_dst (<directional composition>)
	  b parent class_ref 3386167 // Index
      end

      attribute 12405431 "tmp_extents"
	public explicit_type "Extent"
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3387959 "InplaceGenerator"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 6819255 // <generalisation>
	relation 6819255 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6819255 // <generalisation>
	  b parent class_ref 3384503 // OperationsGenerator
      end

      class 3388087 "Block"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 43654711 "Block"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : reader(Vertex::kInvalidIndex), writer(Vertex::kInvalidIndex) {};
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	  comment " During install, each block on the install partition will be written
 and some may be read (in all likelihood, many will be read).
 The reading and writing will be performed by InstallOperations,
 each of which has a corresponding vertex in a graph.
 A Block object tells which vertex will read or write this block
 at install time.
 Generally, there will be a vector of Block objects whose length
 is the number of blocks on the install partition."
	end

	classrelation 6819383 // reader (<directional composition>)
	  relation 6819383 *-->
	    a role_name "reader" public
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 6819383 // reader (<directional composition>)
	    b parent class_ref 3386167 // Index
	end

	classrelation 6819511 // writer (<directional composition>)
	  relation 6819511 *-->
	    a role_name "writer" public
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 6819511 // writer (<directional composition>)
	    b parent class_ref 3386167 // Index
	end
      end

      operation 43654839 "InplaceGenerator"
	cpp_defaulted public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43654967 "CheckGraph"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "graph" type class_ref 3385911 // Graph
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Checks all the operations in the graph have a type assigned."
      end

      operation 43655095 "SubstituteBlocks"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "vertex" type class_ref 3386039 // Vertex
	  param in name "remove_extents" explicit_type "std::vector<Extent>"
	  param in name "replace_extents" explicit_type "std::vector<Extent>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Modifies blocks read by 'op' so that any blocks referred to by
 'remove_extents' are replaced with blocks from 'replace_extents'.
 'remove_extents' and 'replace_extents' must be the same number of blocks.
 Blocks will be substituted in the order listed in the vectors.
 E.g. if 'op' reads blocks 1, 2, 3, 4, 5, 6, 7, 8, remove_extents
 contains blocks 6, 2, 3, 5, and replace blocks contains
 12, 13, 14, 15, then op will be changed to read from:
 1, 13, 14, 4, 15, 12, 7, 8"
      end

      operation 43655223 "CutEdges"
	class_operation public explicit_return_type "bool"
	nparams 3
	  param inout name "graph" type class_ref 3385911 // Graph
	  param in name "edges" explicit_type "std::set<Edge>"
	  param inout name "out_cuts" explicit_type "std::vector<CutEdgeVertexes>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} & ${p1}, ${t2} * ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Cuts 'edges' from 'graph' according to the AU algorithm. This means
 for each edge A->B, remove the dependency that B occur before A.
 Do this by creating a new operation X that copies from the blocks
 specified by the edge's properties to temp space T. Modify B to read
 from T rather than the blocks in the edge. Modify A to depend on X,
 but not on B. Free space is found by looking in 'blocks'.
 Returns true on success."
      end

      operation 43655351 "CreateEdges"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "graph" type class_ref 3385911 // Graph
	  param in name "blocks" explicit_type "std::vector<Block>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Creates all the edges for the graph. Writers of a block point to
 readers of the same block. This is because for an edge A->B, B
 must complete before A executes."
      end

      operation 43655479 "GenerateReverseTopoOrderMap"
	class_operation public explicit_return_type "void"
	nparams 2
	  param in name "op_indexes" explicit_type "std::vector<Vertex::Index>"
	  param inout name "reverse_op_indexes" explicit_type "std::vector<std::vector<Vertex::Index>::size_type>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Takes |op_indexes|, which is effectively a mapping from order in
 which the op is performed -> graph vertex index, and produces the
 reverse: a mapping from graph vertex index -> op_indexes index."
      end

      operation 43655607 "SortCutsByTopoOrder"
	class_operation public explicit_return_type "void"
	nparams 2
	  param in name "op_indexes" explicit_type "std::vector<Vertex::Index>"
	  param inout name "cuts" explicit_type "std::vector<CutEdgeVertexes>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sorts the vector |cuts| by its |cuts[].old_dest| member. Order is
 determined by the order of elements in op_indexes."
      end

      operation 43655735 "MoveAndSortFullOpsToBack"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "graph" type class_ref 3385911 // Graph
	  param inout name "op_indexes" explicit_type "std::vector<Vertex::Index>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Given a topologically sorted graph |op_indexes| and |graph|, alters
 |op_indexes| to move all the full operations to the end of the vector.
 Full operations should not be depended on, so this is safe."
      end

      operation 43655863 "NoTempBlocksRemain"
	class_operation public explicit_return_type "bool"
	nparams 1
	  param in name "graph" type class_ref 3385911 // Graph
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns true iff there are no extents in the graph that refer to temp
 blocks. Temp blocks are in the range [kTempBlockStart, kSparseHole)."
      end

      operation 43655991 "AssignTempBlocks"
	class_operation public explicit_return_type "bool"
	nparams 6
	  param inout name "graph" type class_ref 3385911 // Graph
	  param in name "new_part" explicit_type "std::string"
	  param inout name "blob_file" type class_ref 3384887 // BlobFileWriter
	  param inout name "op_indexes" explicit_type "std::vector<Vertex::Index>"
	  param inout name "reverse_op_indexes" explicit_type "std::vector<std::vector<Vertex::Index>::size_type>"
	  param in name "cuts" explicit_type "std::vector<CutEdgeVertexes>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} * ${p4}${v4}, const ${t5} & ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} & ${p1}, ${t2} * ${p2}, ${t3} * ${p3}, ${t4} * ${p4}, const ${t5} & ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Takes a |graph|, which has edges that must be cut, as listed in
 |cuts|.  Cuts the edges. Maintains a list in which the operations
 will be performed (in |op_indexes|) and the reverse (in
 |reverse_op_indexes|).  Cutting edges requires scratch space, and
 if insufficient scratch is found, the file is reread and will be
 send down (either as REPLACE or REPLACE_BZ).  Returns true on
 success."
      end

      operation 43656119 "ConvertCutToFullOp"
	class_operation public explicit_return_type "bool"
	nparams 4
	  param inout name "graph" type class_ref 3385911 // Graph
	  param in name "cut" type class_ref 3387831 // CutEdgeVertexes
	  param in name "new_part" explicit_type "std::string"
	  param inout name "blob_file" type class_ref 3384887 // BlobFileWriter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} * ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Handles allocation of temp blocks to a cut edge by converting the
 dest node to a full op. This removes the need for temp blocks, but
 comes at the cost of a worse compression ratio.
 For example, say we have A->B->A. It would first be cut to form:
 A->B->N<-A, where N copies blocks to temp space. If there are no
 temp blocks, this function can be called to convert it to the form:
 A->B. Now, A is a full operation."
      end

      operation 43656247 "ConvertGraphToDag"
	class_operation public explicit_return_type "bool"
	nparams 5
	  param inout name "graph" type class_ref 3385911 // Graph
	  param in name "new_part" explicit_type "std::string"
	  param inout name "blob_file" type class_ref 3384887 // BlobFileWriter
	  param inout name "final_order" explicit_type "std::vector<Vertex::Index>"
	  param in name "scratch_vertex" type class_ref 3386167 // Index
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} & ${p1}, ${t2} * ${p2}, ${t3} * ${p3}, ${t4} ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Takes a graph, which is not a DAG, which represents the files just
 read from disk, and converts it into a DAG by breaking all cycles
 and finding temp space to resolve broken edges.
 The final order of the nodes is given in |final_order|
 Some files may need to be reread from disk, thus |fd| and
 |data_file_size| are be passed.
 If |scratch_vertex| is not kInvalidIndex, removes it from
 |final_order| before returning.
 Returns true on success."
      end

      operation 43656375 "CreateScratchNode"
	class_operation public explicit_return_type "void"
	nparams 3
	  param in name "start_block" explicit_type "uint64_t"
	  param in name "num_blocks" explicit_type "uint64_t"
	  param inout name "vertex" type class_ref 3386039 // Vertex
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} * ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Creates a dummy REPLACE_BZ node in the given |vertex|. This can be used
 to provide scratch space. The node writes |num_blocks| blocks starting at
 |start_block|The node should be marked invalid before writing all nodes to
 the output file."
      end

      operation 43656503 "AddInstallOpToBlocksVector"
	class_operation public explicit_return_type "bool"
	nparams 4
	  param in name "operation" explicit_type "InstallOperation"
	  param in name "graph" type class_ref 3385911 // Graph
	  param in name "vertex" type class_ref 3386167 // Index
	  param inout name "blocks" explicit_type "std::vector<Block>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}, ${t3} * ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The |blocks| vector contains a reader and writer for each block on the
 filesystem that's being in-place updated. We populate the reader/writer
 fields of |blocks| by calling this function.
 For each block in |operation| that is read or written, find that block
 in |blocks| and set the reader/writer field to the vertex passed.
 |graph| is not strictly necessary, but useful for printing out
 error messages."
      end

      operation 43656631 "AddInstallOpToGraph"
	class_operation public explicit_return_type "bool"
	nparams 5
	  param inout name "graph" type class_ref 3385911 // Graph
	  param in name "existing_vertex" type class_ref 3386167 // Index
	  param inout name "blocks" explicit_type "std::vector<Block>"
	  param in name "operation" explicit_type "InstallOperation"
	  param in name "op_name" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, const ${t3} ${p3}${v3}, const ${t4} & ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}, ${t2} * ${p2}, const ${t3} ${p3}, const ${t4} & ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Add a vertex (if |existing_vertex| is kInvalidVertex) or update an
 |existing_vertex| with the passed |operation|.
 This method will also register the vertex as the reader or writer of the
 blocks involved in the operation updating the |blocks| vector. The
 |op_name| associated with the Vertex is used for logging purposes."
      end

      operation 43656759 "ApplyMap"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "collection" explicit_type "std::vector<uint64_t>"
	  param in name "the_map" explicit_type "std::map<uint64_t, uint64_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Apply the transformation stored in |the_map| to the |collection| vector
 replacing the map keys found in |collection| with its associated value in
 |the_map|."
      end

      operation 43656887 "ResolveReadAfterWriteDependencies"
	class_operation public explicit_return_type "bool"
	nparams 5
	  param in name "new_part" type class_ref 3384759 // PartitionConfig
	  param in name "partition_size" explicit_type "uint64_t"
	  param in name "block_size" explicit_type "size_t"
	  param inout name "blob_file" type class_ref 3384887 // BlobFileWriter
	  param inout name "aops" explicit_type "std::vector<AnnotatedOperation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} * ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} * ${p3}, ${t4} * ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Resolve all read-after-write dependencies in the operation list |aops|. The
 operations in |aops| are such that they generate the desired |new_part| if
 applied reading always from the original image. This function reorders the
 operations and generates new operations when needed to make these
 operations produce the same |new_part| result when applied in-place.
 The new operations will create blobs in |data_file_fd| and update
 the file size pointed by |data_file_size| if needed.
 On success, stores the new operations in |aops| in the right order and
 returns true."
      end

      operation 43657015 "GenerateOperations"
	cpp_override public explicit_return_type "bool"
	nparams 5
	  param in name "config" type class_ref 3384631 // PayloadGenerationConfig
	  param in name "old_part" type class_ref 3384759 // PartitionConfig
	  param in name "new_part" type class_ref 3384759 // PartitionConfig
	  param inout name "blob_file" type class_ref 3384887 // BlobFileWriter
	  param inout name "aops" explicit_type "std::vector<AnnotatedOperation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} * ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} * ${p3}, ${t4} * ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Generate the update payload operations for the given partition using
 only operations that read from the target and/or write to the target,
 hence, applying the payload \"in-place\" in the target partition. This method
 assumes that the contents of the source image are pre-copied to the target
 partition, up to the size of the source image. Use this method to generate
 a delta update with the minor version kInPlaceMinorPayloadVersion.
 The operations are stored in |aops|. All the offsets in the operations
 reference the data written to |blob_file|."
      end
    end

    class 3388215 "PayloadFile"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Class to handle the creation of a payload file. This class is the only one
 dealing with writing the payload and its format, but has no logic about what
 should be on it."
      operation 43657527 "Init"
	public explicit_return_type "bool"
	nparams 1
	  param in name "config" type class_ref 3384631 // PayloadGenerationConfig
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Initialize the payload file with the payload generation config. It computes
 required hashes of the requested partitions."
      end

      operation 43657655 "AddPartition"
	public explicit_return_type "bool"
	nparams 3
	  param in name "old_conf" type class_ref 3384759 // PartitionConfig
	  param in name "new_conf" type class_ref 3384759 // PartitionConfig
	  param in name "aops" explicit_type "std::vector<AnnotatedOperation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Add a partition to the payload manifest. Including partition name, list of
 operations and partition info. The operations in |aops|
 reference a blob stored in the file provided to WritePayload()."
      end

      operation 43657783 "WritePayload"
	public explicit_return_type "bool"
	nparams 4
	  param in name "payload_file" explicit_type "std::string"
	  param in name "data_blobs_path" explicit_type "std::string"
	  param in name "private_key_path" explicit_type "std::string"
	  param inout name "metadata_size_out" explicit_type "uint64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} * ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Write the payload to the |payload_file| file. The operations reference
 blobs in the |data_blobs_path| file and the blobs will be reordered in the
 payload file to match the order of the operations. The size of the metadata
 section of the payload is stored in |metadata_size_out|."
      end

      operation 43657911 "AddOperationHash"
	class_operation private explicit_return_type "bool"
	nparams 2
	  param inout name "op" explicit_type "InstallOperation"
	  param in name "buf" explicit_type "brillo::Blob"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Computes a SHA256 hash of the given buf and sets the hash value in the
 operation so that update_engine could verify. This hash should be set
 for all operations that have a non-zero data blob. One exception is the
 dummy operation for signature blob because the contents of the signature
 blob will not be available at payload creation time. So, update_engine will
 gracefully ignore the dummy signature operation."
      end

      operation 43658039 "ReorderDataBlobs"
	private explicit_return_type "bool"
	nparams 2
	  param in name "data_blobs_path" explicit_type "std::string"
	  param in name "new_data_blobs_path" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Install operations in the manifest may reference data blobs, which
 are in data_blobs_path. This function creates a new data blobs file
 with the data blobs in the same order as the referencing install
 operations in the manifest. E.g. if manifest[0] has a data blob
 \"X\" at offset 1, manifest[1] has a data blob \"Y\" at offset 0,
 and data_blobs_path's file contains \"YX\", new_data_blobs_path
 will set to be a file that contains \"XY\"."
      end

      operation 43658167 "ReportPayloadUsage"
	const private explicit_return_type "void"
	nparams 1
	  param in name "metadata_size" explicit_type "uint64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Print in stderr the Payload usage report."
      end

      attribute 12405559 "major_version_"
	private explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The major_version of the requested payload.
"
      end

      attribute 12405687 "manifest_"
	private explicit_type "DeltaArchiveManifest"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      class 3388343 "Partition"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 12405815 "name"
	  public explicit_type "std::string"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The name of the partition.
"
	end

	classrelation 6819639 // aops (<directional composition>)
	  relation 6819639 *-->
	    stereotype "std::vector"
	    a role_name "aops" public
	      comment " The operations to be performed to this partition.
"
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 6819639 // aops (<directional composition>)
	    b parent class_ref 3385143 // AnnotatedOperation
	end

	attribute 12405943 "old_info"
	  public explicit_type "PartitionInfo"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 12406071 "new_info"
	  public explicit_type "PartitionInfo"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 6819767 // postinstall (<directional composition>)
	  relation 6819767 *-->
	    a role_name "postinstall" public
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 6819767 // postinstall (<directional composition>)
	    b parent class_ref 3388471 // PostInstallConfig
	end
      end

      classrelation 6819895 // part_vec_ (<directional composition>)
	relation 6819895 *-->
	  stereotype "std::vector"
	  a role_name "part_vec_" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6819895 // part_vec_ (<directional composition>)
	  b parent class_ref 3388343 // Partition
      end
    end

    class 3388471 "PostInstallConfig"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 43658295 "IsEmpty"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Whether the postinstall config is empty."
      end

      attribute 12406199 "run"
	public explicit_type "bool"
	init_value "=  false"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Whether this partition carries a filesystem with post-install program that
 must be run to finalize the update process.
"
      end

      attribute 12406327 "path"
	public explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The path to the post-install program relative to the root of this
 filesystem.
"
      end

      attribute 12406455 "filesystem_type"
	public explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The filesystem type used to mount the partition in order to run the
 post-install program.
"
      end
    end

    class 3388599 "ImageConfig"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The ImageConfig struct describes a pair of binaries kernel and rootfs and the
 metadata associated with the image they are part of, like build number, size,
 etc."
      operation 43658807 "ValidateIsEmpty"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns whether the ImageConfig is an empty image."
      end

      operation 43658935 "LoadImageSize"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Load |rootfs_size| and |kernel.size| from the respective image files. For
 the kernel, the whole |kernel.path| file is assumed. For the rootfs, the
 size is detected from the filesystem.
 Returns whether the image size was properly detected."
      end

      operation 43659063 "LoadPostInstallConfig"
	public explicit_return_type "bool"
	nparams 1
	  param in name "store" explicit_type "brillo::KeyValueStore"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Load postinstall config from a key value store."
      end

      operation 43659191 "ImageInfoIsEmpty"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns whether the |image_info| field is empty."
      end

      attribute 12406967 "image_info"
	public explicit_type "ImageInfo"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The ImageInfo message defined in the update_metadata.proto file describes
 the metadata of the image.
"
      end

      classrelation 6820279 // partitions (<directional composition>)
	relation 6820279 *-->
	  stereotype "std::vector"
	  a role_name "partitions" public
	    comment " The updated partitions.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6820279 // partitions (<directional composition>)
	  b parent class_ref 3384759 // PartitionConfig
      end
    end

    class 3388727 "PayloadSigner"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " This class encapsulates methods used for payload signing.
 See update_metadata.proto for more info."
      operation 43660215 "LoadPayloadMetadata"
	class_operation public explicit_return_type "bool"
	nparams 6
	  param in name "payload_path" explicit_type "std::string"
	  param inout name "out_payload_metadata" explicit_type "brillo::Blob"
	  param inout name "out_manifest" explicit_type "DeltaArchiveManifest"
	  param inout name "out_major_version" explicit_type "uint64_t"
	  param inout name "out_metadata_size" explicit_type "uint64_t"
	  param inout name "out_metadata_signature_size" type class_ref 2810935 // uint32_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} * ${p4}${v4}, ${t5} * ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}, ${t2} * ${p2}, ${t3} * ${p3}, ${t4} * ${p4}, ${t5} * ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Reads the payload metadata from the given |payload_path| into the
 |out_payload_metadata| vector if not null. It also parses the manifest
 protobuf in the payload and returns it in |out_manifest| if not null, along
 with the major version of the payload in |out_major_version| if not null,
 the size of the entire metadata in |out_metadata_size| and the size of
 metadata signature in |out_metadata_signature_size| if not null. Returns
 whether a valid payload metadata was found and parsed."
      end

      operation 43660343 "VerifySignedPayload"
	class_operation public explicit_return_type "bool"
	nparams 2
	  param in name "payload_path" explicit_type "std::string"
	  param in name "public_key_path" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns true if the payload in |payload_path| is signed and its hash can be
 verified using the public key in |public_key_path| with the signature
 of a given version in the signature blob. Returns false otherwise."
      end

      operation 43660471 "AddSignatureToManifest"
	class_operation public explicit_return_type "void"
	nparams 4
	  param in name "signature_blob_offset" explicit_type "uint64_t"
	  param in name "signature_blob_length" explicit_type "uint64_t"
	  param in name "add_dummy_op" explicit_type "bool"
	  param inout name "manifest" explicit_type "DeltaArchiveManifest"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} * ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Adds specified signature offset/length to given |manifest|, also adds a
 dummy operation that points to a signature blob located at the specified
 offset/length if |add_dummy_op| is true."
      end

      operation 43660599 "SignHash"
	class_operation public explicit_return_type "bool"
	nparams 3
	  param in name "hash" explicit_type "brillo::Blob"
	  param in name "private_key_path" explicit_type "std::string"
	  param inout name "out_signature" explicit_type "brillo::Blob"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} * ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Given a raw |hash| and a private key in |private_key_path| calculates the
 raw signature in |out_signature|. Returns true on success, false otherwise."
      end

      operation 43660727 "SignHashWithKeys"
	class_operation public explicit_return_type "bool"
	nparams 3
	  param in name "hash_data" explicit_type "brillo::Blob"
	  param in name "private_key_paths" explicit_type "std::vector<std::string>"
	  param inout name "out_signature_blob" explicit_type "brillo::Blob"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} * ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sign |hash_data| blob with all private keys in |private_key_paths|, then
 convert the signatures to protobuf blob."
      end

      operation 43660855 "SignPayload"
	class_operation public explicit_return_type "bool"
	nparams 6
	  param in name "unsigned_payload_path" explicit_type "std::string"
	  param in name "private_key_paths" explicit_type "std::vector<std::string>"
	  param in name "metadata_size" explicit_type "uint64_t"
	  param in name "metadata_signature_size" type class_ref 2810935 // uint32_t
	  param in name "signatures_offset" explicit_type "uint64_t"
	  param inout name "out_signature_blob" explicit_type "brillo::Blob"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} ${p2}${v2}, const ${t3} ${p3}${v3}, const ${t4} ${p4}${v4}, ${t5} * ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} ${p2}, const ${t3} ${p3}, const ${t4} ${p4}, ${t5} * ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Given an unsigned payload in |unsigned_payload_path|, private keys in
 |private_key_path|, metadata size in |metadata_size|, metadata signature
 size in |metadata_signature_size| and signatures offset in
 |signatures_offset|, calculates the payload signature blob into
 |out_signature_blob|. Note that the payload must already have an
 updated manifest that includes the dummy signature op and correct metadata
 signature size in header. Returns true on success, false otherwise."
      end

      operation 43660983 "SignatureBlobLength"
	class_operation public explicit_return_type "bool"
	nparams 2
	  param in name "private_key_paths" explicit_type "std::vector<std::string>"
	  param inout name "out_length" explicit_type "uint64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the length of out_signature_blob that will result in a call
 to SignPayload with the given private keys. Returns true on success."
      end

      operation 43661111 "HashPayloadForSigning"
	class_operation public explicit_return_type "bool"
	nparams 4
	  param in name "payload_path" explicit_type "std::string"
	  param in name "signature_sizes" explicit_type "std::vector<int>"
	  param inout name "out_payload_hash_data" explicit_type "brillo::Blob"
	  param inout name "out_metadata_hash" explicit_type "brillo::Blob"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} * ${p2}, ${t3} * ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Given an unsigned payload in |payload_path|,
 this method does two things:
 1. It loads the payload into memory, and inserts placeholder signature
    operations and placeholder metadata signature to make the header and
    the manifest match what the final signed payload will look like based
    on |signatures_sizes|, if needed.
 2. It calculates the raw SHA256 hash of the payload and the metadata in
    |payload_path| (except signatures) and returns the result in
    |out_hash_data| and |out_metadata_hash| respectively.

 The changes to payload are not preserved or written to disk."
      end

      operation 43661239 "AddSignatureToPayload"
	class_operation public explicit_return_type "bool"
	nparams 5
	  param in name "payload_path" explicit_type "std::string"
	  param in name "payload_signatures" explicit_type "std::vector<brillo::Blob>"
	  param in name "metadata_signatures" explicit_type "std::vector<brillo::Blob>"
	  param in name "signed_payload_path" explicit_type "std::string"
	  param inout name "out_metadata_size" explicit_type "uint64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}, ${t4} * ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, ${t4} * ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Given an unsigned payload in |payload_path| (with no dummy signature op)
 and the raw |payload_signatures| and |metadata_signatures| updates the
 payload to include the signature thus turning it into a signed payload. The
 new payload is stored in |signed_payload_path|. |payload_path| and
 |signed_payload_path| can point to the same file. Populates
 |out_metadata_size| with the size of the metadata after adding the
 signature operation in the manifest. Returns true on success, false
 otherwise."
      end

      operation 43661367 "GetMetadataSignature"
	class_operation public explicit_return_type "bool"
	nparams 4
	  param in name "metadata" explicit_type "void"
	  param in name "metadata_size" explicit_type "size_t"
	  param in name "private_key_path" explicit_type "std::string"
	  param inout name "out_signature" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * const ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} & ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * const ${p0}, ${t1} ${p1}, const ${t2} & ${p2}, ${t3} * ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Computes the SHA256 hash of the first metadata_size bytes of |metadata|
 and signs the hash with the given private_key_path and writes the signed
 hash in |out_signature|. Returns true if successful or false if there was
 any error in the computations."
      end

      operation 43661495 "ExtractPayloadProperties"
	class_operation public explicit_return_type "bool"
	nparams 2
	  param in name "payload_path" explicit_type "std::string"
	  param inout name "properties" explicit_type "brillo::KeyValueStore"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 3388855 "RawFilesystem"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 6820919 // <generalisation>
	relation 6820919 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6820919 // <generalisation>
	  b parent class_ref 3386551 // FilesystemInterface
      end

      operation 43661623 "Create"
	class_operation public explicit_return_type "std::unique_ptr<RawFilesystem>"
	nparams 3
	  param in name "filename" explicit_type "std::string"
	  param in name "block_size" explicit_type "uint64_t"
	  param in name "block_count" explicit_type "uint64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43661751 "~RawFilesystem"
	cpp_virtual cpp_defaulted public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 43661879 "GetBlockSize"
	const cpp_override public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " FilesystemInterface overrides."
      end

      operation 43662007 "GetBlockCount"
	const cpp_override public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43662135 "GetFiles"
	const cpp_override public explicit_return_type "bool"
	nparams 1
	  param inout name "files" explicit_type "std::vector<File>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " GetFiles will return only one file with all the blocks of the filesystem
 with the name passed during construction."
      end

      operation 43662263 "LoadSettings"
	const cpp_override cpp_inline public explicit_return_type "bool"
	nparams 1
	  param inout name "store" explicit_type "brillo::KeyValueStore"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    return false;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43662391 "RawFilesystem"
	cpp_defaulted private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      attribute 12407991 "filename_"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12408119 "block_count_"
	private explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12408247 "block_size_"
	private explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3388983 "TarjanAlgorithm"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 43662519 "TarjanAlgorithm"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : index_(0), required_vertex_(0) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43662647 "Execute"
	public explicit_return_type "void"
	nparams 3
	  param in name "vertex" type class_ref 3386167 // Index
	  param inout name "graph" type class_ref 3385911 // Graph
	  param inout name "out" explicit_type "std::vector<Vertex::Index>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}, ${t2} * ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " 'out' is set to the result if there is one, otherwise it's untouched."
      end

      operation 43662775 "Tarjan"
	private explicit_return_type "void"
	nparams 2
	  param in name "vertex" type class_ref 3386167 // Index
	  param inout name "graph" type class_ref 3385911 // Graph
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 6821047 // index_ (<directional composition>)
	relation 6821047 *-->
	  a role_name "index_" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6821047 // index_ (<directional composition>)
	  b parent class_ref 3386167 // Index
      end

      classrelation 6821175 // required_vertex_ (<directional composition>)
	relation 6821175 *-->
	  a role_name "required_vertex_" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6821175 // required_vertex_ (<directional composition>)
	  b parent class_ref 3386167 // Index
      end

      classrelation 6821303 // stack_ (<directional composition>)
	relation 6821303 *-->
	  stereotype "std::vector"
	  a role_name "stack_" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6821303 // stack_ (<directional composition>)
	  b parent class_ref 3386167 // Index
      end

      attribute 12408375 "components_"
	private explicit_type "std::vector<Vertex::Index>"
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end
  end

  deploymentview 293047 "payload_generator"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 1625655 "ab_generator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3384375 // ABGenerator
      end
    end

    artifact 1625783 "annotated_operation"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3385143 // AnnotatedOperation
      end
    end

    artifact 1625911 "blob_file_writer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3384887 // BlobFileWriter
      end
    end

    artifact 1626039 "block_mapping"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3385271 // BlockMapping
      end
    end

    artifact 1626167 "cycle_breaker"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3385783 // CycleBreaker
      end
    end

    artifact 1626295 "ext2_filesystem"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3386423 // Ext2Filesystem
      end
    end

    artifact 1626423 "extent_ranges"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3386679 // ExtentLess
	class_ref 3386807 // ExtentRanges
      end
    end

    artifact 1626551 "fake_filesystem"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3387063 // FakeFilesystem
      end
    end

    artifact 1626679 "filesystem_interface"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3386551 // FilesystemInterface
      end
    end

    artifact 1626807 "full_update_generator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3387319 // FullUpdateGenerator
      end
    end

    artifact 1626935 "graph_types"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3387447 // EdgeProperties
	class_ref 3386039 // Vertex
	class_ref 3385911 // Graph
	class_ref 3386295 // Edge
      end
    end

    artifact 1627063 "inplace_generator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3387831 // CutEdgeVertexes
	class_ref 3387959 // InplaceGenerator
      end
    end

    artifact 1627191 "operations_generator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3384503 // OperationsGenerator
      end
    end

    artifact 1627319 "payload_file"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3388215 // PayloadFile
      end
    end

    artifact 1627447 "payload_generation_config"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3388471 // PostInstallConfig
	class_ref 3384759 // PartitionConfig
	class_ref 3388599 // ImageConfig
	class_ref 3385015 // PayloadVersion
	class_ref 3384631 // PayloadGenerationConfig
      end
    end

    artifact 1627575 "payload_signer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3388727 // PayloadSigner
      end
    end

    artifact 1627703 "raw_filesystem"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3388855 // RawFilesystem
      end
    end

    artifact 1627831 "tarjan"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3388983 // TarjanAlgorithm
      end
    end
  end
end
