format 213
"heart_rate" // android::system::bt::service::example::heart_rate::heart_rate
  revision 1
  modified_by 55 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "D:/Workspace/AndroidSourceCode/nougat_src/system/bt/service/example/heart_rate/"
  cpp_src_dir "D:/Workspace/AndroidSourceCode/nougat_src/system/bt/service/example/heart_rate/"
  classview 332983 "heart_rate"
    
    classdiagramsettings member_max_width 0 end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 3411767 "BluetoothDeathRecipient"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Handles the case where the Bluetooth process dies."
      classrelation 6847415 // <generalisation>
	relation 6847415 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6847415 // <generalisation>
	  b parent class_ref 3411895 // typedef218
      end

      operation 43752887 "BluetoothDeathRecipient"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "main_task_runner" explicit_type "scoped_refptr<base::SingleThreadTaskRunner>"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract} : main_task_runner_(main_task_runner) {
  };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43753015 "~BluetoothDeathRecipient"
	cpp_override cpp_defaulted public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 43753143 "binderDied"
	cpp_override cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "" explicit_type "android::wp<android::IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    LOG(ERROR) << \"The Bluetooth daemon has died. Aborting.\";

    // binderDied executes on a dedicated thread. We need to stop the main loop
    // on the main thread so we post a message to it here. The main loop only
    // runs on the main thread.
    main_task_runner_->PostTask(FROM_HERE, base::Bind(&QuitMessageLoop));

    android::IPCThreadState::self()->stopProcess();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " android::IBinder::DeathRecipient override:"
      end

      attribute 12458423 "main_task_runner_"
	private explicit_type "base::SingleThreadTaskRunner"
	stereotype "scoped_refptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3411895 "typedef218"
      visibility package stereotype "typedef" explicit_base_type "android::IBinder::DeathRecipient"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end
  end

  deploymentview 294839 "heart_rate"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 1644343 "typedef218"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3411895 // typedef218
      end
    end

    artifact 1644471 "BluetoothDeathRecipient"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3411767 // BluetoothDeathRecipient
      end
    end

    artifact 1644599 "main"
      stereotype "source"
      cpp_src "// namespace

int main(int argc, char* argv[]) {
  base::AtExitManager exit_manager;
  base::CommandLine::Init(argc, argv);
  logging::LoggingSettings log_settings;

  // Initialize global logging based on command-line parameters (this is a
  // libchrome pattern).
  if (!logging::InitLogging(log_settings)) {
    LOG(ERROR) << \"Failed to set up logging\";
    return EXIT_FAILURE;
  }

  // Set up a message loop so that we can schedule timed Heart Rate
  // notifications.
  base::MessageLoop main_loop;

  LOG(INFO) << \"Starting GATT Heart Rate Service sample\";

  // Obtain the IBluetooth binder from the service manager service.
  sp<IBluetooth> bluetooth = IBluetooth::getClientInterface();
  if (!bluetooth.get()) {
    LOG(ERROR) << \"Failed to obtain a handle on IBluetooth\";
    return EXIT_FAILURE;
  }

  // Bluetooth needs to be enabled for our demo to work.
  if (!bluetooth->IsEnabled()) {
    LOG(ERROR) << \"Bluetooth is not enabled.\";
    return EXIT_FAILURE;
  }

  // Register for death notifications on the IBluetooth binder. This let's us
  // handle the case where the Bluetooth daemon process (bluetoothtbd) dies
  // outside of our control.
  sp<BluetoothDeathRecipient> dr(
      new BluetoothDeathRecipient(main_loop.task_runner()));
  if (android::IInterface::asBinder(bluetooth.get())->linkToDeath(dr) !=
      android::NO_ERROR) {
    LOG(ERROR) << \"Failed to register DeathRecipient for IBluetooth\";
    return EXIT_FAILURE;
  }

  // Initialize the Binder process thread pool. We have to set this up,
  // otherwise, incoming callbacks from the Bluetooth daemon would block the
  // main thread (in other words, we have to do this as we are a \"Binder
  // server\").
  android::ProcessState::self()->startThreadPool();

  // heart_rate::HeartRateServer notifies success or failure asynchronously
  // using a closure, so we set up a lambda for that here.
  auto callback = [&](bool success) {
    if (success) {
      LOG(INFO) << \"Heart Rate service started successfully\";
      return;
    }

    LOG(ERROR) << \"Starting Heart Rate server failed asynchronously\";
    main_loop.QuitWhenIdle();
  };

  bool advertise = base::CommandLine::ForCurrentProcess()->HasSwitch(\"advertise\");

  // Create the Heart Rate server.
  std::unique_ptr<heart_rate::HeartRateServer> hr(
      new heart_rate::HeartRateServer(bluetooth, main_loop.task_runner(), advertise));
  if (!hr->Run(callback)) {
    LOG(ERROR) << \"Failed to start Heart Rate server\";
    return EXIT_FAILURE;
  }

  // Run the main loop on the main process thread. Binder callbacks will be
  // received in dedicated threads set up by the ProcessState::startThreadPool
  // call above but we use this main loop for sending out heart rate
  // notifications.
  main_loop.Run();

  LOG(INFO) << \"Exiting\";
  return EXIT_SUCCESS;
}
"
      associated_classes
      end
    end
  end
end
