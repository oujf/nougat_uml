class QCameraFlash
!!!44280247.cpp!!!	getInstance() : QCameraFlash
    static QCameraFlash flashInstance;
    return flashInstance;
!!!44280375.cpp!!!	registerCallbacks(in callbacks : camera_module_callbacks_t) : int32_t
    int32_t retVal = 0;
    m_callbacks = callbacks;
    return retVal;
!!!44280503.cpp!!!	initFlash(in camera_id : int) : int32_t
    int32_t retVal = 0;
    bool hasFlash = false;
    char flashNode[QCAMERA_MAX_FILEPATH_LENGTH];
    char flashPath[QCAMERA_MAX_FILEPATH_LENGTH] = "/dev/";

    if (camera_id < 0 || camera_id >= MM_CAMERA_MAX_NUM_SENSORS) {
        ALOGE("%s: Invalid camera id: %d", __func__, camera_id);
        return -EINVAL;
    }

    QCamera3HardwareInterface::getFlashInfo(camera_id,
            hasFlash,
            flashNode);

    strlcat(flashPath,
            flashNode,
            sizeof(flashPath));

    if (!hasFlash) {
        ALOGE("%s: No flash available for camera id: %d",
                __func__,
                camera_id);
        retVal = -EINVAL;
    } else if (m_cameraOpen[camera_id]) {
        ALOGE("%s: Camera in use for camera id: %d",
                __func__,
                camera_id);
        retVal = -EBUSY;
    } else if (m_flashFds[camera_id] >= 0) {
        CDBG("%s: Flash is already inited for camera id: %d",
                __func__,
                camera_id);
    } else {
        m_flashFds[camera_id] = open(flashPath, O_RDWR | O_NONBLOCK);

        if (m_flashFds[camera_id] < 0) {
            ALOGE("%s: Unable to open node '%s'",
                    __func__,
                    flashPath);
            retVal = -EBUSY;
        } else {
            struct msm_camera_led_cfg_t cfg;
            cfg.cfgtype = MSM_CAMERA_LED_INIT;
            retVal = ioctl(m_flashFds[camera_id],
                    VIDIOC_MSM_FLASH_LED_DATA_CFG,
                    &cfg);
            if (retVal < 0) {
                ALOGE("%s: Unable to init flash for camera id: %d",
                        __func__,
                        camera_id);
                close(m_flashFds[camera_id]);
                m_flashFds[camera_id] = -1;
            }
        }
    }

    return retVal;
!!!44280631.cpp!!!	setFlashMode(in camera_id : int, in mode : bool) : int32_t
    int32_t retVal = 0;
    struct msm_camera_led_cfg_t cfg;

    if (camera_id < 0 || camera_id >= MM_CAMERA_MAX_NUM_SENSORS) {
        ALOGE("%s: Invalid camera id: %d", __func__, camera_id);
        retVal = -EINVAL;
    } else if (mode == m_flashOn[camera_id]) {
        CDBG("%s: flash %d is already in requested state: %d",
                __func__,
                camera_id,
                mode);
        retVal = -EALREADY;
    } else if (m_flashFds[camera_id] < 0) {
        ALOGE("%s: called for uninited flash: %d", __func__, camera_id);
        retVal = -EINVAL;
    }  else {
        cfg.cfgtype = mode ? MSM_CAMERA_LED_LOW : MSM_CAMERA_LED_OFF;
        retVal = ioctl(m_flashFds[camera_id],
                VIDIOC_MSM_FLASH_LED_DATA_CFG,
                &cfg);
        if (retVal == 0) {
            m_flashOn[camera_id] = mode;
        }
    }
    return retVal;
!!!44280759.cpp!!!	deinitFlash(in camera_id : int) : int32_t
    int32_t retVal = 0;

    if (camera_id < 0 || camera_id >= MM_CAMERA_MAX_NUM_SENSORS) {
        ALOGE("%s: Invalid camera id: %d", __func__, camera_id);
        retVal = -EINVAL;
    } else if (m_flashFds[camera_id] < 0) {
        ALOGE("%s: called deinitFlash for uninited flash", __func__);
        retVal = -EINVAL;
    } else {
        setFlashMode(camera_id, false);

        struct msm_camera_led_cfg_t cfg;
        cfg.cfgtype = MSM_CAMERA_LED_RELEASE;
        retVal = ioctl(m_flashFds[camera_id],
                VIDIOC_MSM_FLASH_LED_DATA_CFG,
                &cfg);
        if (retVal < 0) {
            ALOGE("%s: Failed to release flash for camera id: %d",
                    __func__,
                    camera_id);
        }

        close(m_flashFds[camera_id]);
        m_flashFds[camera_id] = -1;
    }

    return retVal;
!!!44280887.cpp!!!	reserveFlashForCamera(in camera_id : int) : int32_t
    int32_t retVal = 0;

    if (camera_id < 0 || camera_id >= MM_CAMERA_MAX_NUM_SENSORS) {
        ALOGE("%s: Invalid camera id: %d", __func__, camera_id);
        retVal = -EINVAL;
    } else if (m_cameraOpen[camera_id]) {
        CDBG("%s: Flash already reserved for camera id: %d",
                __func__,
                camera_id);
    } else {
        if (m_flashOn[camera_id]) {
            setFlashMode(camera_id, false);
            deinitFlash(camera_id);
        }
        m_cameraOpen[camera_id] = true;

        bool hasFlash = false;
        char flashNode[QCAMERA_MAX_FILEPATH_LENGTH];

        QCamera3HardwareInterface::getFlashInfo(camera_id,
                hasFlash,
                flashNode);

        if (m_callbacks == NULL ||
                m_callbacks->torch_mode_status_change == NULL) {
            ALOGE("%s: Callback is not defined!", __func__);
            retVal = -ENOSYS;
        } else if (!hasFlash) {
            CDBG("%s: Suppressing callback "
                    "because no flash exists for camera id: %d",
                    __func__,
                    camera_id);
        } else {
            char cameraIdStr[STRING_LENGTH_OF_64_BIT_NUMBER];
            snprintf(cameraIdStr, STRING_LENGTH_OF_64_BIT_NUMBER,
                    "%d", camera_id);
            m_callbacks->torch_mode_status_change(m_callbacks,
                    cameraIdStr,
                    TORCH_MODE_STATUS_NOT_AVAILABLE);
        }
    }

    return retVal;
!!!44281015.cpp!!!	releaseFlashFromCamera(in camera_id : int) : int32_t
    int32_t retVal = 0;

    if (camera_id < 0 || camera_id >= MM_CAMERA_MAX_NUM_SENSORS) {
        ALOGE("%s: Invalid camera id: %d", __func__, camera_id);
        retVal = -EINVAL;
    } else if (!m_cameraOpen[camera_id]) {
        CDBG("%s: Flash not reserved for camera id: %d",
                __func__,
                camera_id);
    } else {
        m_cameraOpen[camera_id] = false;

        bool hasFlash = false;
        char flashNode[QCAMERA_MAX_FILEPATH_LENGTH];

        QCamera3HardwareInterface::getFlashInfo(camera_id,
                hasFlash,
                flashNode);

        if (m_callbacks == NULL ||
                m_callbacks->torch_mode_status_change == NULL) {
            ALOGE("%s: Callback is not defined!", __func__);
            retVal = -ENOSYS;
        } else if (!hasFlash) {
            CDBG("%s: Suppressing callback "
                    "because no flash exists for camera id: %d",
                    __func__,
                    camera_id);
        } else {
            char cameraIdStr[STRING_LENGTH_OF_64_BIT_NUMBER];
            snprintf(cameraIdStr, STRING_LENGTH_OF_64_BIT_NUMBER,
                    "%d", camera_id);
            m_callbacks->torch_mode_status_change(m_callbacks,
                    cameraIdStr,
                    TORCH_MODE_STATUS_AVAILABLE_OFF);
        }
    }

    return retVal;
!!!44281143.cpp!!!	QCameraFlash()
    memset(&m_flashOn, 0, sizeof(m_flashOn));
    memset(&m_cameraOpen, 0, sizeof(m_cameraOpen));
    for (int pos = 0; pos < MM_CAMERA_MAX_NUM_SENSORS; pos++) {
        m_flashFds[pos] = -1;
    }
!!!44281271.cpp!!!	~QCameraFlash()
    for (int pos = 0; pos < MM_CAMERA_MAX_NUM_SENSORS; pos++) {
        if (m_flashFds[pos] >= 0)
            {
                setFlashMode(pos, false);
                close(m_flashFds[pos]);
                m_flashFds[pos] = -1;
            }
    }
