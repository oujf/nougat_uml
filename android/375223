format 213
"sdcard" // android::system::extras::tests::sdcard::sdcard
  revision 1
  modified_by 55 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "D:/Workspace/AndroidSourceCode/nougat_src/system/extras/tests/sdcard/"
  cpp_src_dir "D:/Workspace/AndroidSourceCode/nougat_src/system/extras/tests/sdcard/"
  deploymentview 301367 "sdcard"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 1690423 "main"
      stereotype "source"
      cpp_src "// anonymous namespace

int main(int argc, char **argv)
{
    android_test::TestCase testCase(kAppName);

    cleanup();

    parseCmdLine(argc, argv, &testCase);
    printHeader(argc, argv, testCase);

    printf(\"# File size %d kbytes\\n\", testCase.dataSize() / 1024);
    printf(\"# Chunk size %d kbytes\\n\", testCase.chunkSize() / 1024);
    printf(\"# Sync: %s\\n\", testCase.syncAsStr());

    if (!testCase.cpuScaling())
    {
        android::disableCpuScaling();
    }

    switch(testCase.type()) {
        case TestCase::WRITE:
            testCase.mTestBody = testWrite;
            break;
        case TestCase::READ:
            testCase.mTestBody = testRead;
            break;
        case TestCase::OPEN_CREATE:
            testCase.mTestBody = testOpenCreate;
            break;
        case TestCase::READ_WRITE:
            testCase.mTestBody = testReadWrite;
            break;
        case TestCase::TRAVERSE:
            testCase.mTestBody = testTraverse;
            break;
        default:
            fprintf(stderr, \"Unknown test type %s\", testCase.name());
            exit(EXIT_FAILURE);
    }

    testCase.createTimers();

    bool ok;

    ok = testCase.runTest();

    cleanup();
    if (!ok)
    {
        printf(\"error %d %s\", errno, strerror(errno));
        exit(EXIT_FAILURE);
    }
    else
    {
        exit(EXIT_SUCCESS);
    }
}
"
      associated_classes
      end
    end
  end
end
