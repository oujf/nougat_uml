class QCameraQueue
!!!44378679.cpp!!!	QCameraQueue()
    pthread_mutex_init(&mlock, NULL);
    cam_list_init(&mhead.list);
    msize = 0;
    mdata_rel_fn = NULL;
    muser_data = NULL;
!!!44378807.cpp!!!	QCameraQueue(in data_rel_fn : release_data_fn, inout user_data : void)
    pthread_mutex_init(&mlock, NULL);
    cam_list_init(&mhead.list);
    msize = 0;
    mdata_rel_fn = data_rel_fn;
    muser_data = user_data;
!!!44378935.cpp!!!	~QCameraQueue()
    flush();
    pthread_mutex_destroy(&mlock);
!!!44379063.cpp!!!	enqueue(inout data : void) : bool
    camera_q_node *node =
        (camera_q_node *)malloc(sizeof(camera_q_node));
    if (NULL == node) {
        ALOGE("%s: No memory for camera_q_node", __func__);
        return false;
    }

    memset(node, 0, sizeof(camera_q_node));
    node->data = data;

    pthread_mutex_lock(&mlock);
    cam_list_add_tail_node(&node->list, &mhead.list);
    msize++;
    pthread_mutex_unlock(&mlock);
    return true;
!!!44379191.cpp!!!	pri_enqueue(inout data : void) : bool
    camera_q_node *node =
        (camera_q_node *)malloc(sizeof(camera_q_node));
    if (NULL == node) {
        ALOGE("%s: No memory for camera_q_node", __func__);
        return false;
    }

    memset(node, 0, sizeof(camera_q_node));
    node->data = data;

    pthread_mutex_lock(&mlock);
    struct cam_list *p_next = mhead.list.next;

    mhead.list.next = &node->list;
    p_next->prev = &node->list;
    node->list.next = p_next;
    node->list.prev = &mhead.list;

    msize++;
    pthread_mutex_unlock(&mlock);
    return true;
!!!44379319.cpp!!!	flush() : void
    camera_q_node* node = NULL;
    void* data = NULL;
    struct cam_list *head = NULL;
    struct cam_list *pos = NULL;

    pthread_mutex_lock(&mlock);
    head = &mhead.list;
    pos = head->next;

    while(pos != head) {
        node = member_of(pos, camera_q_node, list);
        pos = pos->next;
        cam_list_del_node(&node->list);
        msize--;

        if (NULL != node->data) {
            if (mdata_rel_fn) {
                mdata_rel_fn(node->data, muser_data);
            }
            free(node->data);
        }
        free(node);

    }
    msize = 0;
    pthread_mutex_unlock(&mlock);
!!!44379447.cpp!!!	dequeue() : void
    camera_q_node* node = NULL;
    void* data = NULL;
    struct cam_list *head = NULL;
    struct cam_list *pos = NULL;

    pthread_mutex_lock(&mlock);
    head = &mhead.list;
    pos = head->next;
    if (pos != head) {
        node = member_of(pos, camera_q_node, list);
        cam_list_del_node(&node->list);
        msize--;
    }
    pthread_mutex_unlock(&mlock);

    if (NULL != node) {
        data = node->data;
        free(node);
    }

    return data;
!!!44379575.cpp!!!	is_empty() : bool
    bool isEmpty = true;
    pthread_mutex_lock(&mlock);
    if (msize > 0) {
        isEmpty = false;
    }
    pthread_mutex_unlock(&mlock);
    return isEmpty;
