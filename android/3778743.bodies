class QCameraStream
!!!44408119.cpp!!!	setResolution(inout res : mm_camera_dimension_t) : void
    mWidth = res->width;
    mHeight = res->height;
!!!44408247.cpp!!!	isResolutionSame(inout res : mm_camera_dimension_t) : bool
    if (mWidth != res->width || mHeight != res->height)
        return false;
    else
        return true;
!!!44408375.cpp!!!	getResolution(inout res : mm_camera_dimension_t) : void
    res->width = mWidth;
    res->height = mHeight;
!!!44408503.cpp!!!	release() : void
    return;
!!!44408631.cpp!!!	setFormat() : status_t
    ALOGE("%s: E",__func__);

    char mDeviceName[PROPERTY_VALUE_MAX];
    property_get("ro.product.device",mDeviceName," ");

    ALOGE("%s: X",__func__);
    return NO_ERROR;
!!!44408759.cpp!!!	dataCallback(inout bufs : mm_camera_super_buf_t) : void
    if(mPendingCount!=0) {
        ALOGD("Got frame request");
        pthread_mutex_lock(&mFrameDeliveredMutex);
        mPendingCount--;
        ALOGD("Completed frame request");
        pthread_cond_signal(&mFrameDeliveredCond);
        pthread_mutex_unlock(&mFrameDeliveredMutex);
        processPreviewFrame(bufs);
    } else {
        p_mm_ops->ops->qbuf(mCameraHandle,
                mChannelId, bufs->bufs[0]);
    }
!!!44408887.cpp!!!	streamOn() : int32_t
   status_t rc=NO_ERROR;
   mm_camera_stream_config_t stream_config;
   ALOGE("%s:streamid:%d",__func__,mMmStreamId);
   Mutex::Autolock lock(mLock);
   if(mActive){
       ALOGE("%s: Stream:%d is already active",
            __func__,mMmStreamId);
       return rc;
   }

   if (mInit == true) {
       /* this is the restart case */
       memset(&stream_config, 0, sizeof(mm_camera_stream_config_t));
       stream_config.fmt.fmt=(cam_format_t)mFormat;
       stream_config.fmt.meta_header=MM_CAMEAR_META_DATA_TYPE_DEF;
       stream_config.fmt.width=mWidth;
       stream_config.fmt.height=mHeight;
       stream_config.fmt.rotation = 0;
       ALOGE("<DEBUG>::%s: Width :%d Height:%d Format:%d",__func__,mWidth,mHeight,mFormat);
       stream_config.num_of_bufs=mNumBuffers;
       stream_config.need_stream_on=true;
       rc=p_mm_ops->ops->config_stream(mCameraHandle,
                                 mChannelId,
                                 mMmStreamId,
                                 &stream_config);
       ALOGE("%s: config_stream, rc = %d", __func__, rc);
   }

   rc = p_mm_ops->ops->start_streams(mCameraHandle,
                              mChannelId,
                              1,
                              &mMmStreamId);
   if(rc==NO_ERROR)
       mActive = true;
   return rc;
!!!44409015.cpp!!!	streamOff(in isAsyncCmd : bool) : int32_t
    status_t rc=NO_ERROR;
    Mutex::Autolock lock(mLock);
    if(!mActive) {
        ALOGE("%s: Stream:%d is not active",
              __func__,mMmStreamId);
        return rc;
    }

    rc = p_mm_ops->ops->stop_streams(mCameraHandle,
                              mChannelId,
                              1,
                              &mMmStreamId);

    mActive=false;
    return rc;

!!!44409143.cpp!!!	initStream(in no_cb_needed : uint8_t, in stream_on : uint8_t) : status_t

    int rc = MM_CAMERA_OK;

    /* save local copy */
    m_flag_no_cb = no_cb_needed;
    m_flag_stream_on = stream_on;

    ALOGD("%s: E, mActive = %d, mInit = %d, streamid = %d, image_mode = %d",
          __func__, mActive, mInit, mStreamId, mExtImgMode);

    if(mInit == true) {
        ALOGE("%s: alraedy initted, mActive = %d, mInit = %d, streamid = %d, image_mode = %d",
              __func__, mActive, mInit, mStreamId, mExtImgMode);
        return rc;
    }
    /***********Allocate Stream**************/
    mStreamId = p_mm_ops->ops->add_stream(mCameraHandle,
                        mChannelId,
                        no_cb_needed? NULL :  stream_cb_routine,
                        no_cb_needed? NULL : (void *)this,
                        mExtImgMode,
                        0/*sensor_idx*/);
    if (mStreamId == 0) {
        ALOGE("%s: err in add_stream, mActive = %d, mInit = %d, streamid = %d, image_mode = %d",
              __func__, mActive, mInit, mStreamId, mExtImgMode);
       return BAD_VALUE;
    }

    /***********Config Stream*****************/
    rc = setFormat();
    if(MM_CAMERA_OK != rc) {
        ALOGE("%s: err in config_stream, mActive = %d, streamid = %d, image_mode = %d",
              __func__, mActive, mStreamId, mExtImgMode);
        p_mm_ops->ops->del_stream(mCameraHandle,
                                  mChannelId,
                                  mStreamId);
        return BAD_VALUE;
    }

    mInit=true;
    ALOGE("%s: X, mActive = %d, streamid = %d, image_mode = %d",
          __func__, mActive, mStreamId, mExtImgMode);
    return NO_ERROR;
!!!44409271.cpp!!!	deinitStream() : status_t

    int rc = MM_CAMERA_OK;

    ALOGI("%s: E, Stream = %d\n", __func__, mMmStreamId);
    
    rc= p_mm_ops->ops->del_stream(mCameraHandle,mChannelId,
                              mMmStreamId);

    ALOGI("%s: X, Stream = %d\n", __func__, mMmStreamId);
    mInit=false;
    return NO_ERROR;
!!!44410295.cpp!!!	setCrop() : int32_t
    mm_camera_rect_t v4l2_crop;
    int32_t rc = 0;
    memset(&v4l2_crop,0,sizeof(v4l2_crop));

    if(!mActive) {
        ALOGE("%s: Stream:%d is not active", __func__, mStreamId);
        return -1;
    }

    rc = p_mm_ops->ops->get_stream_parm(mCameraHandle,
                                   mChannelId,
                                   mStreamId,
                                   MM_CAMERA_STREAM_CROP,
                                   &v4l2_crop);
    ALOGI("%s: Crop info received: %d, %d, %d, %d ",
                                 __func__,
                                 v4l2_crop.left,
                                 v4l2_crop.top,
                                 v4l2_crop.width,
                                 v4l2_crop.height);
    if (rc == 0) {
        mCrop.offset_x = v4l2_crop.left;
        mCrop.offset_y = v4l2_crop.top;
        mCrop.width = v4l2_crop.width;
        mCrop.height = v4l2_crop.height;
    }
    return rc;
!!!44410679.cpp!!!	QCameraStream()
    mInit = false;
    mActive = false;
    /* memset*/
    memset(&mCrop, 0, sizeof(mm_camera_rect_t));
!!!44410807.cpp!!!	QCameraStream(in CameraHandle : uint32_t, in ChannelId : uint32_t, in Width : uint32_t, in Height : uint32_t, in Format : uint32_t, in NumBuffers : uint8_t, inout mm_ops : mm_camera_vtbl_t, in imgmode : mm_camera_img_mode, in mode : camera_mode_t, inout camCtrl : QCameraHardwareInterface)
    mInit = false;
    mActive = false;

    mStreamId = 0;
    m_flag_no_cb = FALSE;
    m_flag_stream_on = TRUE;

    /* memset*/
    memset(&mCrop, 0, sizeof(mm_camera_rect_t));
!!!44410935.cpp!!!	~QCameraStream()
;
