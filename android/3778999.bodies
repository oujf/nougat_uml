class QCameraStream_record
!!!44411063.cpp!!!	release() : void
    ALOGV("%s: BEGIN", __func__);
    streamOff(0);
    deinitStream();
    ALOGV("%s: END", __func__);
!!!44411191.cpp!!!	QCameraStream_record(in CameraHandle : uint32_t, in ChannelId : uint32_t, in Width : uint32_t, in Height : uint32_t, in Format : uint32_t, in NumBuffers : uint8_t, inout mm_ops : mm_camera_vtbl_t, in imgmode : mm_camera_img_mode, in mode : camera_mode_t, inout camCtrl : QCameraHardwareInterface)
  char value[PROPERTY_VALUE_MAX];
  ALOGV("%s: BEGIN", __func__);

  property_get("persist.debug.sf.showfps", value, "0");
  mDebugFps = atoi(value);

  ALOGV("%s: END", __func__);
!!!44411319.cpp!!!	~QCameraStream_record()
    ALOGV("%s: BEGIN", __func__);
    release();
    ALOGV("%s: END", __func__);
!!!44411447.cpp!!!	processRecordFrame(inout frame : mm_camera_super_buf_t) : status_t
    ALOGV("%s : BEGIN",__func__);
    int video_buf_idx = frame->bufs[0]->buf_idx;

    if(!mActive) {
      ALOGE("Recording Stopped. Returning callback");
      return NO_ERROR;
    }

    if (UNLIKELY(mDebugFps)) {
        debugShowVideoFPS();
    }
    ALOGE("DEBUG4:%d",frame->bufs[0]->stream_id);
    ALOGE("<DEBUG4>: Timestamp: %ld %ld",frame->bufs[0]->ts.tv_sec,frame->bufs[0]->ts.tv_nsec);
    mHalCamCtrl->dumpFrameToFile(frame->bufs[0], HAL_DUMP_FRM_VIDEO);
    camera_data_timestamp_callback rcb = mHalCamCtrl->mDataCbTimestamp;
    void *rdata = mHalCamCtrl->mCallbackCookie;
	  nsecs_t timeStamp = nsecs_t(frame->bufs[0]->ts.tv_sec)*1000000000LL + \
                      frame->bufs[0]->ts.tv_nsec;

    ALOGE("Send Video frame to services/encoder TimeStamp : %lld",timeStamp);
    mRecordedFrames[video_buf_idx] = *frame;

    mHalCamCtrl->cache_ops(&mHalCamCtrl->mRecordingMemory.mem_info[video_buf_idx],
                           (void *)mHalCamCtrl->mRecordingMemory.camera_memory[video_buf_idx]->data,
                           ION_IOC_CLEAN_CACHES);

    if (mHalCamCtrl->mStoreMetaDataInFrame) {
        if((rcb != NULL) && (mHalCamCtrl->mMsgEnabled & CAMERA_MSG_VIDEO_FRAME)) {
            ALOGE("Calling video callback:%d", video_buf_idx);
            rcb(timeStamp, CAMERA_MSG_VIDEO_FRAME,
                mHalCamCtrl->mRecordingMemory.metadata_memory[video_buf_idx],
                0, mHalCamCtrl->mCallbackCookie);
        }
    } else {
        if((rcb != NULL) && (mHalCamCtrl->mMsgEnabled & CAMERA_MSG_VIDEO_FRAME)) {
            ALOGE("Calling video callback2");
            rcb(timeStamp, CAMERA_MSG_VIDEO_FRAME,
                mHalCamCtrl->mRecordingMemory.camera_memory[video_buf_idx],
                0, mHalCamCtrl->mCallbackCookie);
        }
    }

    ALOGV("%s : END",__func__);
    return NO_ERROR;
!!!44411831.cpp!!!	releaseRecordingFrame(in opaque : void) : void
    ALOGV("%s : BEGIN, opaque = 0x%p",__func__, opaque);
    if(!mActive)
    {
        ALOGE("%s : Recording already stopped!!! Leak???",__func__);
        return;
    }
    for(int cnt = 0; cnt < mHalCamCtrl->mRecordingMemory.buffer_count; cnt++) {
      if (mHalCamCtrl->mStoreMetaDataInFrame) {
        if(mHalCamCtrl->mRecordingMemory.metadata_memory[cnt] &&
                mHalCamCtrl->mRecordingMemory.metadata_memory[cnt]->data == opaque) {
            /* found the match */
            ALOGE("Releasing video frames:%d",cnt);
            if(MM_CAMERA_OK != p_mm_ops->ops->qbuf(mCameraHandle, mChannelId, mRecordedFrames[cnt].bufs[0]))
                ALOGE("%s : Buf Done Failed",__func__);
            mHalCamCtrl->cache_ops(&mHalCamCtrl->mRecordingMemory.mem_info[cnt],
                                   (void *)mRecordedFrames[cnt].bufs[0]->buffer,
                                   ION_IOC_INV_CACHES);
            ALOGV("%s : END",__func__);
            return;
        }
      } else {
        if(mHalCamCtrl->mRecordingMemory.camera_memory[cnt] &&
                mHalCamCtrl->mRecordingMemory.camera_memory[cnt]->data == opaque) {
            /* found the match */
            ALOGE("Releasing video frames2");
            if(MM_CAMERA_OK != p_mm_ops->ops->qbuf(mCameraHandle, mChannelId, mRecordedFrames[cnt].bufs[0]))
                ALOGE("%s : Buf Done Failed",__func__);
            mHalCamCtrl->cache_ops(&mHalCamCtrl->mRecordingMemory.mem_info[cnt],
                                   (void *)mRecordedFrames[cnt].bufs[0]->buffer,
                                   ION_IOC_INV_CACHES);
            ALOGV("%s : END",__func__);
            return;
        }
      }
    }
	ALOGE("%s: cannot find the matched frame with opaue = 0x%p", __func__, opaque);
!!!44411959.cpp!!!	debugShowVideoFPS() : void
  static int mFrameCount;
  static int mLastFrameCount = 0;
  static nsecs_t mLastFpsTime = 0;
  static float mFps = 0;
  mFrameCount++;
  nsecs_t now = systemTime();
  nsecs_t diff = now - mLastFpsTime;
  if (diff > ms2ns(250)) {
    mFps =  ((mFrameCount - mLastFrameCount) * float(s2ns(1))) / diff;
    ALOGI("Video Frames Per Second: %.4f", mFps);
    mLastFpsTime = now;
    mLastFrameCount = mFrameCount;
  }
!!!44412215.cpp!!!	getBuf(inout frame_offset_info : mm_camera_frame_len_offset, in num_bufs : uint8_t, inout initial_reg_flag : uint8_t, inout bufs : mm_camera_buf_def_t) : int
    ALOGE("%s : BEGIN",__func__);

    if (num_bufs > mNumBuffers) {
        mNumBuffers = num_bufs;
    }
    if ((mNumBuffers == 0) || (mNumBuffers > MM_CAMERA_MAX_NUM_FRAMES)) {
        ALOGE("%s: Invalid number of buffers (=%d) requested!",
             __func__, mNumBuffers);
        return BAD_VALUE;
    }

    memset(mRecordBuf, 0, sizeof(mRecordBuf));
    memcpy(&mFrameOffsetInfo, frame_offset_info, sizeof(mFrameOffsetInfo));
    if (mHalCamCtrl->initHeapMem(&mHalCamCtrl->mRecordingMemory,
                                 mNumBuffers,
                                 mFrameOffsetInfo.frame_len,
                                 MSM_PMEM_VIDEO,
                                 &mFrameOffsetInfo,
                                 mRecordBuf) < 0) {
        ALOGE("%s: Error getting heap mem for recording", __func__);
        return NO_MEMORY;
    }

    if (mHalCamCtrl->mStoreMetaDataInFrame) {
        for (int cnt = 0; cnt < mNumBuffers; cnt++) {
            mHalCamCtrl->mRecordingMemory.metadata_memory[cnt] =
                mHalCamCtrl->mGetMemory(-1,
                                        sizeof(struct encoder_media_buffer_type),
                                        1,
                                        (void *)this);
            struct encoder_media_buffer_type * packet =
                (struct encoder_media_buffer_type *)mHalCamCtrl->mRecordingMemory.metadata_memory[cnt]->data;
            packet->meta_handle = native_handle_create(1, 2); //1 fd, 1 offset and 1 size
            packet->buffer_type = kMetadataBufferTypeCameraSource;
            native_handle_t * nh = const_cast<native_handle_t *>(packet->meta_handle);
            nh->data[0] = mHalCamCtrl->mRecordingMemory.mem_info[cnt].fd;
            nh->data[1] = 0;
            nh->data[2] = mHalCamCtrl->mRecordingMemory.mem_info[cnt].size;
        }
    }

    for(int i = 0; i < num_bufs; i++) {
        bufs[i] = mRecordBuf[i];
        initial_reg_flag[i] = true;
    }

    ALOGE("%s : END",__func__);
    return NO_ERROR;
!!!44412343.cpp!!!	putBuf(in num_bufs : uint8_t, inout bufs : mm_camera_buf_def_t) : int
    for(int cnt = 0; cnt < mHalCamCtrl->mRecordingMemory.buffer_count; cnt++) {
        if (mHalCamCtrl->mStoreMetaDataInFrame) {
            struct encoder_media_buffer_type * packet =
                (struct encoder_media_buffer_type  *)mHalCamCtrl->mRecordingMemory.metadata_memory[cnt]->data;
            native_handle_delete(const_cast<native_handle_t *>(packet->meta_handle));
            mHalCamCtrl->mRecordingMemory.metadata_memory[cnt]->release(
               mHalCamCtrl->mRecordingMemory.metadata_memory[cnt]);
        }
        mHalCamCtrl->mRecordingMemory.camera_memory[cnt]->release(
           mHalCamCtrl->mRecordingMemory.camera_memory[cnt]);

#ifdef USE_ION
        mHalCamCtrl->deallocate_ion_memory(&mHalCamCtrl->mRecordingMemory.mem_info[cnt]);
#endif
    }
    memset(&mHalCamCtrl->mRecordingMemory, 0, sizeof(mHalCamCtrl->mRecordingMemory));
    return NO_ERROR;
!!!44412471.cpp!!!	initStream(in no_cb_needed : uint8_t, in stream_on : uint8_t) : status_t
    status_t ret = NO_ERROR;

    ALOGI(" %s : E ", __FUNCTION__);
    mNumBuffers = VIDEO_BUFFER_COUNT;
    if(mHalCamCtrl->isLowPowerCamcorder()) {
        ALOGE("%s: lower power camcorder selected", __func__);
        mNumBuffers = VIDEO_BUFFER_COUNT_LOW_POWER_CAMCORDER;
    }
    ret = QCameraStream::initStream(no_cb_needed, stream_on);
end:
    ALOGI(" %s : X ", __FUNCTION__);
    return ret;
