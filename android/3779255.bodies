class QCameraStream_SnapshotMain
!!!44415031.cpp!!!	release() : void
    streamOff(0);
    deinitStream();

!!!44415159.cpp!!!	initStream(in no_cb_needed : uint8_t, in stream_on : uint8_t) : status_t
    status_t ret = NO_ERROR;

    if(mHalCamCtrl->isZSLMode()) {
        mNumBuffers = mHalCamCtrl->getZSLQueueDepth() + 3;
    } else if (mHalCamCtrl->mHdrInfo.hdr_on) {
        mNumBuffers = mHalCamCtrl->mHdrInfo.num_frame;
    } else {
        mNumBuffers = mHalCamCtrl->getNumOfSnapshots();
    }
    ret = QCameraStream::initStream(no_cb_needed, stream_on);
    return ret;;
!!!44415671.cpp!!!	~QCameraStream_SnapshotMain()
    release();
!!!44415799.cpp!!!	getBuf(inout frame_offset_info : mm_camera_frame_len_offset, in num_bufs : uint8_t, inout initial_reg_flag : uint8_t, inout bufs : mm_camera_buf_def_t) : int
    int ret = MM_CAMERA_OK;
    ALOGE("%s : E", __func__);

    if (mNumBuffers < num_bufs) {
        mNumBuffers = num_bufs;
    }
    if ((mNumBuffers == 0) || (mNumBuffers > MM_CAMERA_MAX_NUM_FRAMES)) {
        ALOGE("%s: Invalid number of buffers (=%d) requested!",
             __func__, mNumBuffers);
        return BAD_VALUE;
    }

    memset(mSnapshotStreamBuf, 0, sizeof(mSnapshotStreamBuf));
    memcpy(&mFrameOffsetInfo, frame_offset_info, sizeof(mFrameOffsetInfo));
    ret = mHalCamCtrl->initHeapMem(&mHalCamCtrl->mSnapshotMemory,
                                   mNumBuffers,
                                   mFrameOffsetInfo.frame_len,
                                   MSM_PMEM_MAINIMG,
                                   &mFrameOffsetInfo,
                                   mSnapshotStreamBuf);

    if(MM_CAMERA_OK == ret) {
        for(int i = 0; i < num_bufs; i++) {
            bufs[i] = mSnapshotStreamBuf[i];
            initial_reg_flag[i] = (TRUE == m_flag_stream_on)? TRUE : FALSE;
        }
    }

    /* If we have reached here successfully, we have allocated buffer.
       Set state machine.*/
    ALOGD("%s: X", __func__);
    return ret;

!!!44415927.cpp!!!	putBuf(in num_bufs : uint8_t, inout bufs : mm_camera_buf_def_t) : int
    ALOGE("%s: Release Snapshot main Memory",__func__);
    return mHalCamCtrl->releaseHeapMem(&mHalCamCtrl->mSnapshotMemory);
