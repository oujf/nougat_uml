class QCameraStream_SnapshotThumbnail
!!!44416055.cpp!!!	release() : void
    streamOff(0);
    deinitStream();
!!!44416183.cpp!!!	QCameraStream_SnapshotThumbnail(in CameraHandle : uint32_t, in ChannelId : uint32_t, in Width : uint32_t, in Height : uint32_t, in Format : uint32_t, in NumBuffers : uint8_t, inout mm_ops : mm_camera_vtbl_t, in imgmode : mm_camera_img_mode, in mode : camera_mode_t, inout camCtrl : QCameraHardwareInterface)

!!!44416311.cpp!!!	~QCameraStream_SnapshotThumbnail()
     release();
!!!44416439.cpp!!!	getBuf(inout frame_offset_info : mm_camera_frame_len_offset, in num_bufs : uint8_t, inout initial_reg_flag : uint8_t, inout bufs : mm_camera_buf_def_t) : int
    int ret = MM_CAMERA_OK;

    if (mNumBuffers < num_bufs) {
        mNumBuffers = num_bufs;
    }
    if ((mNumBuffers == 0) || (mNumBuffers > MM_CAMERA_MAX_NUM_FRAMES)) {
        ALOGE("%s: Invalid number of buffers (=%d) requested!",
             __func__, mNumBuffers);
        return BAD_VALUE;
    }

    memset(mPostviewStreamBuf, 0, sizeof(mPostviewStreamBuf));
    memcpy(&mFrameOffsetInfo, frame_offset_info, sizeof(mFrameOffsetInfo));
    ret = mHalCamCtrl->initHeapMem(
                         &mHalCamCtrl->mThumbnailMemory,
                         mNumBuffers,
                         mFrameOffsetInfo.frame_len,
                         MSM_PMEM_THUMBNAIL,
                         &mFrameOffsetInfo,
                         mPostviewStreamBuf);
    if(MM_CAMERA_OK == ret) {
        for(int i = 0; i < num_bufs; i++) {
            bufs[i] = mPostviewStreamBuf[i];
            initial_reg_flag[i] = true;
        }
    }

    return ret;
!!!44416567.cpp!!!	putBuf(in num_bufs : uint8_t, inout bufs : mm_camera_buf_def_t) : int
     ALOGE("%s: Release Snapshot thumbnail Memory",__func__);
     return mHalCamCtrl->releaseHeapMem(&mHalCamCtrl->mThumbnailMemory);
!!!44416695.cpp!!!	initStream(in no_cb_needed : uint8_t, in stream_on : uint8_t) : status_t
    status_t ret = NO_ERROR;

    if(mHalCamCtrl->isZSLMode()) {
        mNumBuffers = mHalCamCtrl->getZSLQueueDepth() + 3;
    } else if (mHalCamCtrl->mHdrInfo.hdr_on) {
        mNumBuffers = mHalCamCtrl->mHdrInfo.num_frame;
    } else {
        mNumBuffers = mHalCamCtrl->getNumOfSnapshots();
    }
    ret = QCameraStream::initStream(no_cb_needed, stream_on);
    return ret;;
