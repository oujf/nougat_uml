class Interpreter
!!!44430903.cpp!!!	Interpreter(in file : char)
    if (!file){
        printf("no File Given\n");
        mUseScript = false;
        return;
    }

    FILE *fh = fopen(file, "r");
    if ( !fh ) {
        printf("Could not open file %s\n", file);
        mUseScript = false;
        return;
    }

    fseek(fh, 0, SEEK_END);
    int len = ftell(fh);
    rewind(fh);

    if( !len ) {
        printf("Script file %s is empty !\n", file);
        fclose(fh);
        return;
    }

    mScript = new char[len + 1];
    if ( !mScript ) {
        fclose(fh);
        return;
    }

    fread(mScript, sizeof(char), len, fh);
    mScript[len] = '\0'; // ensure null terminated;
    fclose(fh);


    char *p1;
    char *p2;
    p1 = p2 = mScript;

    do {
        switch (*p1) {
        case '\0':
        case '|':
            p1++;
            break;
        case SWITCH_CAMERA_CMD:
        case RESUME_PREVIEW_CMD:
        case START_PREVIEW_CMD:
        case STOP_PREVIEW_CMD:
        case CHANGE_PREVIEW_SIZE_CMD:
        case CHANGE_PICTURE_SIZE_CMD:
        case START_RECORD_CMD:
        case STOP_RECORD_CMD:
        case START_VIV_RECORD_CMD:
        case STOP_VIV_RECORD_CMD:
        case DUMP_CAPS_CMD:
        case AUTOFOCUS_CMD:
        case TAKEPICTURE_CMD:
        case TAKEPICTURE_IN_PICTURE_CMD:
        case ENABLE_PRV_CALLBACKS_CMD:
        case EXIT_CMD:
        case DELAY:
            p2 = p1;
            while( (p2 != (mScript + len)) && (*p2 != '|')) {
                p2++;
            }
            *p2 = '\0';
            if (p2 == (p1 + 1))
                mCommands.push_back(Command(
                    static_cast<Interpreter::Commands_e>(*p1)));
            else
                mCommands.push_back(Command(
                    static_cast<Interpreter::Commands_e>(*p1), (p1 + 1)));
            p1 = p2;
            break;
        default:
            printf("Invalid cmd %c \n", *p1);
            do {
                p1++;

            } while(*p1 != '|' && p1 != (mScript + len));

        }
    } while(p1 != (mScript + len));
    mUseScript = true;
!!!44431031.cpp!!!	~Interpreter()
    if ( mScript )
        delete[] mScript;

    mCommands.clear();
!!!44431159.cpp!!!	getCommand(in currentCamera : sp<CameraContext>) : Interpreter::Command
    if( mUseScript ) {
        return mCommands[mCmdIndex++];
    } else {
        currentCamera->printMenu(currentCamera);
        return Interpreter::Command(
            static_cast<Interpreter::Commands_e>(getchar()));
    }
!!!44431287.cpp!!!	releasePiPBuff() : void
    free(mTestContext->mViVBuff.buff);
    mTestContext->mViVBuff.buff = NULL;
!!!44431415.cpp!!!	configureViVCodec() : status_t
    status_t ret = NO_ERROR;
    char fileName[100];
    sp<AMessage> format = new AMessage;
    sp<ALooper> looper = new ALooper;

    if (mTestContext->mViVVid.VideoSizes[0].width *
            mTestContext->mViVVid.VideoSizes[0].height >=
            mTestContext->mViVVid.VideoSizes[1].width *
            mTestContext->mViVVid.VideoSizes[1].height) {
        sprintf(fileName, "/sdcard/ViV_vid_%dx%d_%d.mp4",
            mTestContext->mViVVid.VideoSizes[0].width,
            mTestContext->mViVVid.VideoSizes[0].height,
            mTestContext->mViVVid.ViVIdx++);
        format->setInt32("width", mTestContext->mViVVid.VideoSizes[0].width);
        format->setInt32("height", mTestContext->mViVVid.VideoSizes[0].height);
    } else {
        sprintf(fileName, "/sdcard/ViV_vid_%dx%d_%d.mp4",
            mTestContext->mViVVid.VideoSizes[1].width,
            mTestContext->mViVVid.VideoSizes[1].height,
            mTestContext->mViVVid.ViVIdx++);
        format->setInt32("width", mTestContext->mViVVid.VideoSizes[1].width);
        format->setInt32("height", mTestContext->mViVVid.VideoSizes[1].height);
    }
    mTestContext->mViVVid.muxer = new MediaMuxer(
        fileName, MediaMuxer::OUTPUT_FORMAT_MPEG_4);

    format->setString("mime", "video/avc");
    format->setInt32("color-format", OMX_COLOR_FormatAndroidOpaque);

    format->setInt32("bitrate", 1000000);
    format->setFloat("frame-rate", 30);
    format->setInt32("i-frame-interval", 10);

    looper->setName("ViV_recording_looper");
    looper->start();
    ALOGV("Creating codec");
    mTestContext->mViVVid.codec = MediaCodec::CreateByType(
        looper, "video/avc", true);
    if (mTestContext->mViVVid.codec == NULL) {
        fprintf(stderr, "ERROR: unable to create video/avc codec instance\n");
        return UNKNOWN_ERROR;
    }
    ret = mTestContext->mViVVid.codec->configure(format, NULL, NULL,
            MediaCodec::CONFIGURE_FLAG_ENCODE);
    if (ret != NO_ERROR) {
        mTestContext->mViVVid.codec->release();
        mTestContext->mViVVid.codec.clear();

        fprintf(stderr, "ERROR: unable to configure codec (err=%d)\n", ret);
        return ret;
    }

    ALOGV("Creating buffer producer");
    ret = mTestContext->mViVVid.codec->createInputSurface(
        &mTestContext->mViVVid.bufferProducer);
    if (ret != NO_ERROR) {
        mTestContext->mViVVid.codec->release();
        mTestContext->mViVVid.codec.clear();

        fprintf(stderr,
            "ERROR: unable to create encoder input surface (err=%d)\n", ret);
        return ret;
    }

    ret = mTestContext->mViVVid.codec->start();
    if (ret != NO_ERROR) {
        mTestContext->mViVVid.codec->release();
        mTestContext->mViVVid.codec.clear();

        fprintf(stderr, "ERROR: unable to start codec (err=%d)\n", ret);
        return ret;
    }
    ALOGV("Codec prepared");

    mTestContext->mViVVid.surface = new Surface(
        mTestContext->mViVVid.bufferProducer);
    mTestContext->mViVVid.ANW = mTestContext->mViVVid.surface;
    ret = native_window_api_connect(mTestContext->mViVVid.ANW.get(),
        NATIVE_WINDOW_API_CPU);
    if (mTestContext->mViVVid.VideoSizes[0].width *
        mTestContext->mViVVid.VideoSizes[0].height >=
        mTestContext->mViVVid.VideoSizes[1].width *
        mTestContext->mViVVid.VideoSizes[1].height) {
        native_window_set_buffers_geometry(mTestContext->mViVVid.ANW.get(),
            mTestContext->mViVVid.VideoSizes[0].width,
            mTestContext->mViVVid.VideoSizes[0].height,
            HAL_PIXEL_FORMAT_NV12_ENCODEABLE);
    } else {
        native_window_set_buffers_geometry(mTestContext->mViVVid.ANW.get(),
            mTestContext->mViVVid.VideoSizes[1].width,
            mTestContext->mViVVid.VideoSizes[1].height,
            HAL_PIXEL_FORMAT_NV12_ENCODEABLE);
    }
    native_window_set_usage(mTestContext->mViVVid.ANW.get(),
        GRALLOC_USAGE_SW_READ_OFTEN | GRALLOC_USAGE_SW_WRITE_OFTEN);
    native_window_set_buffer_count(mTestContext->mViVVid.ANW.get(),
        mTestContext->mViVVid.buff_cnt);

    ViVEncoderThread();

    return ret;
!!!44431671.cpp!!!	setTestCtxInst(inout instance : TestContext) : void
    mTestContext = instance;
!!!44431799.cpp!!!	unconfigureViVCodec() : status_t
    status_t ret = NO_ERROR;

    ret = native_window_api_disconnect(mTestContext->mViVVid.ANW.get(),
        NATIVE_WINDOW_API_CPU);
    mTestContext->mViVVid.bufferProducer = NULL;
    mTestContext->mViVVid.codec->stop();
    pthread_join(mViVEncThread, NULL);
    mTestContext->mViVVid.muxer->stop();
    mTestContext->mViVVid.codec->release();
    mTestContext->mViVVid.codec.clear();
    mTestContext->mViVVid.muxer.clear();
    mTestContext->mViVVid.surface.clear();
  return ret;
!!!44431927.cpp!!!	ViVEncoderThread() : status_t
    int ret = NO_ERROR;
    pthread_attr_t attr;
    pthread_attr_init(&attr);

    ret = pthread_create(&mViVEncThread, &attr, ThreadWrapper, this);
    ret = pthread_attr_destroy(&attr);

    return ret;
!!!44432055.cpp!!!	ViVEncode() : void
    status_t err = NO_ERROR;
    ssize_t trackIdx = -1;
    uint32_t debugNumFrames = 0;

    size_t bufIndex, offset, size;
    int64_t ptsUsec;
    uint32_t flags;
    bool DoRecording = true;


    err = mTestContext->mViVVid.codec->getOutputBuffers(
        &mTestContext->mViVVid.buffers);
    if (err != NO_ERROR) {
        printf("Unable to get output buffers (err=%d)\n", err);
    }

    while (DoRecording) {
        err = mTestContext->mViVVid.codec->dequeueOutputBuffer(
            &bufIndex,
            &offset,
            &size,
            &ptsUsec,
            &flags, -1);

        switch (err) {

        case NO_ERROR:
            // got a buffer
            if ((flags & MediaCodec::BUFFER_FLAG_CODECCONFIG) != 0) {
                // ignore this -- we passed the CSD into MediaMuxer when
                // we got the format change notification
                size = 0;
            }
            if (size != 0) {
                // If the virtual display isn't providing us with timestamps,
                // use the current time.
                if (ptsUsec == 0) {
                    ptsUsec = systemTime(SYSTEM_TIME_MONOTONIC) / 1000;
                }

                // The MediaMuxer docs are unclear, but it appears that we
                // need to pass either the full set of BufferInfo flags, or
                // (flags & BUFFER_FLAG_SYNCFRAME).
                err = mTestContext->mViVVid.muxer->writeSampleData(
                    mTestContext->mViVVid.buffers[bufIndex],
                    trackIdx,
                    ptsUsec,
                    flags);
                if (err != NO_ERROR) {
                    fprintf(stderr, "Failed writing data to muxer (err=%d)\n",
                            err);
                }
                debugNumFrames++;
            }
            err = mTestContext->mViVVid.codec->releaseOutputBuffer(bufIndex);
            if (err != NO_ERROR) {
                fprintf(stderr, "Unable to release output buffer (err=%d)\n",
                        err);
            }
            if ((flags & MediaCodec::BUFFER_FLAG_EOS) != 0) {
                // Not expecting EOS from SurfaceFlinger.  Go with it.
                printf("Received end-of-stream\n");
                //DoRecording = false;
            }
            break;
        case -EAGAIN:                       // INFO_TRY_AGAIN_LATER
            ALOGV("Got -EAGAIN, looping");
            break;
        case INFO_FORMAT_CHANGED:           // INFO_OUTPUT_FORMAT_CHANGED
        {
            // format includes CSD, which we must provide to muxer
            sp<AMessage> newFormat;
            mTestContext->mViVVid.codec->getOutputFormat(&newFormat);
            trackIdx = mTestContext->mViVVid.muxer->addTrack(newFormat);
            err = mTestContext->mViVVid.muxer->start();
            if (err != NO_ERROR) {
                printf("Unable to start muxer (err=%d)\n", err);
            }
        }
        break;
        case INFO_OUTPUT_BUFFERS_CHANGED:   // INFO_OUTPUT_BUFFERS_CHANGED
            // not expected for an encoder; handle it anyway
            ALOGV("Encoder buffers changed");
            err = mTestContext->mViVVid.codec->getOutputBuffers(
                &mTestContext->mViVVid.buffers);
            if (err != NO_ERROR) {
                printf("Unable to get new output buffers (err=%d)\n", err);
            }
        break;
        case INVALID_OPERATION:
            DoRecording = false;
        break;
        default:
            printf("Got weird result %d from dequeueOutputBuffer\n", err);
        break;
        }
    }

    return;
!!!44432183.cpp!!!	ThreadWrapper(inout context : void) : void
    Interpreter *writer = static_cast<Interpreter *>(context);
    writer->ViVEncode();
    return NULL;
