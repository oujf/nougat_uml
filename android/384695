format 213
"inc" // android::device::google::contexthub::inc
  revision 1
  modified_by 55 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "D:/Workspace/AndroidSourceCode/nougat_src/device/google/contexthub/inc/"
  cpp_src_dir "D:/Workspace/AndroidSourceCode/nougat_src/device/google/contexthub/inc/"
  classview 342967 "inc"
    
    classdiagramsettings member_max_width 0 end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 3578807 "chreMessageFromHostData"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "CHRE_EVENT_MESSAGE_FROM_HOST
"
      attribute 12893111 "reservedMessageType"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Message type (NOTE: not implemented correctly in the Android N release).

In future releases, this will be a message type provided by the host.

"
      end

      attribute 12893239 "messageSize"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The size, in bytes of the following 'message'.

This can be 0.

"
      end

      attribute 12893367 "message"
	const_attribute public explicit_type "void"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The message from the host.

These contents are of a format that the host and nanoapp must have
established beforehand.

This data is 'messageSize' bytes in length.  Note that if 'messageSize'
is 0, this might be NULL.

"
      end
    end

    class 3578935 "chreEventCompleteFunction"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}( ${name})(uint16_t eventType, void *eventData);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Callback which frees data associated with an event.

This callback is (optionally) provided to the chreSendEvent() method as
a means for freeing the event data and performing any other cleanup
necessary when the event is completed.  When this callback is invoked,
'eventData' is no longer needed and can be released.

@param eventType  The 'eventType' argument from chreSendEvent().
@param eventData  The 'eventData' argument from chreSendEvent().

@see chreSendEvent
"
    end

    class 3579063 "chreMessageFreeFunction"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}( ${name})(void *message, size_t messageSize);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Callback which frees a message.

This callback is (optionally) provided to the chreSendMessageToHost() method
as a means for freeing the message.  When this callback is invoked,
'message' is no longer needed and can be released.  Note that this in
no way assures that said message did or did not make it to the host, simply
that this memory is no longer needed.

@param message  The 'message' argument from chreSendMessageToHost().
@param messageSize  The 'messageSize' argument from chreSendMessageToHost().

@see chreSendMessageToHost
"
    end

    class 3579191 "chreLogLevel"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Logging levels used to indicate severity level of logging messages.

CHRE_LOG_ERROR: Something fatal has happened, i.e. something that will have
    user-visible consequences and won't be recoverable without explicitly
    deleting some data, uninstalling applications, wiping the data
    partitions or reflashing the entire phone (or worse).
CHRE_LOG_WARN: Something that will have user-visible consequences but is
    likely to be recoverable without data loss by performing some explicit
    action, ranging from waiting or restarting an app all the way to
    re-downloading a new version of an application or rebooting the device.
CHRE_LOG_INFO: Something interesting to most people happened, i.e. when a
    situation is detected that is likely to have widespread impact, though
    isn't necessarily an error.
CHRE_LOG_DEBUG: Used to further note what is happening on the device that
    could be relevant to investigate and debug unexpected behaviors. You
    should log only what is needed to gather enough information about what
    is going on about your component.

There is currently no API to turn on/off logging by level, but we anticipate
adding such in future releases.

@see chreLog
"
      attribute 12893495 "CHRE_LOG_ERROR"
	public type class_ref 3579191 // chreLogLevel
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12893623 "CHRE_LOG_WARN"
	public type class_ref 3579191 // chreLogLevel
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12893751 "CHRE_LOG_INFO"
	public type class_ref 3579191 // chreLogLevel
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12893879 "CHRE_LOG_DEBUG"
	public type class_ref 3579191 // chreLogLevel
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3579319 "chreSensorConfigureMode"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Modes we can configure a sensor to use.

Our mode will affect not only how/if we receive events, but
also whether or not the sensor will be powered on our behalf.

@see chreSensorConfigure
"
      attribute 12894007 "CHRE_SENSOR_CONFIGURE_MODE_CONTINUOUS"
	public type class_ref 3579319 // chreSensorConfigureMode
	init_value "
        (CHRE_SENSOR_CONFIGURE_RAW_POWER_ON |
         CHRE_SENSOR_CONFIGURE_RAW_REPORT_CONTINUOUS)"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12894135 "CHRE_SENSOR_CONFIGURE_MODE_ONE_SHOT"
	public type class_ref 3579319 // chreSensorConfigureMode
	init_value "
        (CHRE_SENSOR_CONFIGURE_RAW_POWER_ON |
         CHRE_SENSOR_CONFIGURE_RAW_REPORT_ONE_SHOT)"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12894263 "CHRE_SENSOR_CONFIGURE_MODE_PASSIVE_CONTINUOUS"
	public type class_ref 3579319 // chreSensorConfigureMode
	init_value "
        CHRE_SENSOR_CONFIGURE_RAW_REPORT_CONTINUOUS"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12894391 "CHRE_SENSOR_CONFIGURE_MODE_PASSIVE_ONE_SHOT"
	public type class_ref 3579319 // chreSensorConfigureMode
	init_value "
        CHRE_SENSOR_CONFIGURE_RAW_REPORT_ONE_SHOT"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 12894519 "CHRE_SENSOR_CONFIGURE_MODE_DONE"
	public type class_ref 3579319 // chreSensorConfigureMode
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3579447 "chreSensorInfo"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Get events from the sensor.

Power: Turn on if not already on.
Reporting: Continuous.  Send each new event as it comes (subject to
    batching and latency).


Get a single event from the sensor and then become DONE.

Once the event is sent, the sensor automatically
changes to CHRE_SENSOR_CONFIGURE_MODE_DONE mode.

Power: Turn on if not already on.
Reporting: One shot.  Send the next event and then be DONE.


Get events from a sensor that are generated for other apps.

This is considered passive because the sensor will not be powered
on for the sake of our nanoapp.  If and only if another app in
the system has requested this sensor power on will we get events.

This can be useful for something which is interested in seeing data,
but not interested enough to be responsible for powering on the sensor.

Power: Do not power the sensor on our behalf.
Reporting: Continuous.  Send each event as it comes.


Get a single event from a sensor that is generated for other apps.

See CHRE_SENSOR_CONFIGURE_MODE_PASSIVE_CONTINUOUS for more details
on what be \"passive\" means.

Power: Do not power the sensor on our behalf.
Reporting: One shot.  Send only the next event and then be DONE.


Indicate we are done using this sensor and no longer interested in it.

See chreSensorConfigure for more details on expressing interest or
lack of interest in a sensor.

Power: Do not power the sensor on our behalf.
Reporting: None.


A structure containing information about a Sensor.

See documentation of individual fields below.
"
      attribute 12894647 "sensorName"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The name of the sensor.

A text name, useful for logging/debugging, describing the Sensor.  This
is not assured to be unique (i.e. there could be multiple sensors with
the name \"Temperature\").

CHRE implementations may not set this as NULL.  An empty
string, while discouraged, is legal.

"
      end

      attribute 12894775 "sensorType"
	public explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "One of the CHRE_SENSOR_TYPE_* defines above.

"
      end

      attribute 12894903 "isOnChange"
	public explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value} : 1;
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Flag indicating if this sensor is on-change.

An on-change sensor only generates events when underlying state
changes.  This has the same meaning as on-change does in the Android
Sensors HAL.  See sensors.h for much more details.

A value of 1 indicates this is on-change.  0 indicates this is not
on-change.

"
      end

      attribute 12895031 "isOneShot"
	public explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value} : 1;
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Flag indicating if this sensor is one-shot.

A one-shot sensor only triggers a single event, and then automatically
disables itself.

A value of 1 indicates this is on-change.  0 indicates this is not
on-change.

"
      end

      attribute 12895159 "unusedFlags"
	public explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value} : 6;
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3579575 "chreSensorDataHeader"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Header used in every structure containing batchable data from a sensor.

The typical structure for sensor data looks like:

  struct chreSensorTypeData {
      struct chreSensorDataHeader header;
      struct {
          uint32_t timestampDelta;
          union {
              <type> value;
              <type> interpretation0;
              <type> interpretation1;
          };
      } readings[1];
  };

Despite 'readings' being declared as an array of 1 element,
an instance of the struct will actually have 'readings' as
an array of header.readingCount elements (which may be 1).
The 'timestampDelta' is in relation to the previous 'readings' (or
the baseTimestamp for readings[0].  So,
Timestamp for readings[0] == header.baseTimestamp +
    readings[0].timestampDelta.
Timestamp for readings[1] == timestamp for readings[0] +
    readings[1].timestampDelta.
And thus, in order to determine the timestamp for readings[N], it's
necessary to process through all of the N-1 readings.  The advantage,
though, is that our entire readings can span an arbitrary length of time,
just as long as any two consecutive readings differ by no more than
4.295 seconds (timestampDelta, like all time in the CHRE, is in
nanoseconds).

If a sensor has batched readings where two consecutive readings differ by
more than 4.295 seconds, the CHRE will split them across multiple
instances of the struct, and send multiple events.

The value from the sensor is typically expressed in a union,
allowing a generic access to the data ('value'), along with
differently named access giving a more natural interpretation
of the data for the specific sensor types which use this
structure.  This allows, for example, barometer code to
reference readings[N].pressure, and an ambient light sensor
to reference readings[N].light, while both use the same
structure.
"
      attribute 12895287 "baseTimestamp"
	public explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The base timestamp, in nanoseconds.

"
      end

      attribute 12895415 "sensorHandle"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The handle of the sensor producing this event.

"
      end

      attribute 12895543 "readingCount"
	public explicit_type "uint16_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number elements in the 'readings' array.

This must be at least 1.

"
      end

      attribute 12895671 "reserved"
	public explicit_type "uint8_t"
	multiplicity "[2]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Reserved bytes.

These must be 0.

"
      end
    end

    class 3579703 "chreSensorThreeAxisData"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Data for a sensor which reports on three axes.

This is used by CHRE_EVENT_SENSOR_DATA, CHRE_EVENT_SENSOR_GYROSCOPE_DATA,
CHRE_EVENT_SENSOR_GYROSCOPE_BIAS_INFO,
CHRE_EVENT_SENSOR_GEOMAGNETIC_FIELD_DATA, and
CHRE_EVENT_SENSOR_GEOMAGNETIC_FIELD_BIAS_INFO.
"
      classrelation 7018807 // header (<directional composition>)
	relation 7018807 *-->
	  a role_name "header" public
	    comment "@see chreSensorDataHeader

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 7018807 // header (<directional composition>)
	  b parent class_ref 3579575 // chreSensorDataHeader
      end

      attribute 12895799 "readings"
	public explicit_type "<complex type>"
	multiplicity "[1]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct  {
        /**
         * @see chreSensorDataHeader
         */
        uint32_t timestampDelta;
        union {
            float values[3];
            float v[3];
            struct {
                float x;
                float y;
                float z;
            };
            float bias[3];
            struct {
                float x_bias;
                float y_bias;
                float z_bias;
            };
        };
    } ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3579831 "chreSensorOccurrenceData"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Data from a sensor where we only care about a event occurring.

This is a bit unusual in that our readings have no data in addition
to the timestamp.  But since we only care about the occurrence, we
don't need to know anything else.

Used by: CHRE_EVENT_SENSOR_INSTANT_MOTION_DETECT_DATA and
    CHRE_EVENT_SENSOR_STATIONARY_DETECT_DATA.
"
      classrelation 7018935 // header (<directional composition>)
	relation 7018935 *-->
	  a role_name "header" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 7018935 // header (<directional composition>)
	  b parent class_ref 3579575 // chreSensorDataHeader
      end

      attribute 12895927 "readings"
	public explicit_type "<complex type>"
	multiplicity "[1]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct  {
        uint32_t timestampDelta;
        // This space intentionally left blank.
        // Only the timestamp is meaningful here, there
        // is no additional data.
    } ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3579959 "chreSensorFloatData"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "CHRE_EVENT_SENSOR_LIGHT_DATA and CHRE_EVENT_SENSOR_PRESSURE_DATA.
"
      classrelation 7019063 // header (<directional composition>)
	relation 7019063 *-->
	  a role_name "header" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 7019063 // header (<directional composition>)
	  b parent class_ref 3579575 // chreSensorDataHeader
      end

      attribute 12896055 "readings"
	public explicit_type "<complex type>"
	multiplicity "[1]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct  {
        uint32_t timestampDelta;
        union {
            float value;
            float light;  // lux
            float pressure;  // hectopascals (hPa)
        };
    } ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3580087 "chreSensorByteData"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "CHRE_EVENT_SENSOR_PROXIMITY_DATA.
"
      classrelation 7019191 // header (<directional composition>)
	relation 7019191 *-->
	  a role_name "header" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 7019191 // header (<directional composition>)
	  b parent class_ref 3579575 // chreSensorDataHeader
      end

      attribute 12896183 "readings"
	public explicit_type "<complex type>"
	multiplicity "[1]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct  {
        uint32_t timestampDelta;
        union {
            uint8_t value;
            struct {
                uint8_t isNear : 1;
                uint8_t invalid : 1;
                uint8_t padding0 : 6;
            };
        };
    } ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 3580215 "chreSensorSamplingStatus"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The status of a sensor's sampling configuration.
"
      attribute 12896311 "interval"
	public explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The interval, in nanoseconds, at which the sensor is now sampling.

If this is CHRE_SENSOR_INTERVAL_DEFAULT, then a sampling interval
isn't meaningful for this sensor.

Note that if 'enabled' is false, this value is not meaningful.

"
      end

      attribute 12896439 "latency"
	public explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The latency, in nanoseconds, at which the senor is now reporting.

If this is CHRE_SENSOR_LATENCY_DEFAULT, then a latency
isn't meaningful for this sensor.

Note that if 'enabled' is false, this value is not meaningful.

"
      end

      attribute 12896567 "enabled"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "True if the sensor is actively powered and sampling; false otherwise.

"
      end
    end

    class 3580343 "chreSensorSamplingStatusEvent"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The nanoappHandleEvent argument for CHRE_EVENT_SENSOR_SAMPLING_CHANGE.

Note that only at least one of 'interval' or 'latency' must be
different than it was prior to this event.  Thus, one of these
fields may be (but doesn't need to be) the same as before.
"
      attribute 12896695 "sensorHandle"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The handle of the sensor which has experienced a change in sampling.

"
      end

      classrelation 7019319 // status (<directional composition>)
	relation 7019319 *-->
	  a role_name "status" public
	    comment "The new sampling status.

At least one of the field in this struct will be different from
the previous sampling status event.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 7019319 // status (<directional composition>)
	  b parent class_ref 3580215 // chreSensorSamplingStatus
      end
    end
  end

  deploymentview 306999 "inc"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 1729591 "chre_event"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3578807 // chreMessageFromHostData
	class_ref 3578935 // chreEventCompleteFunction
	class_ref 3579063 // chreMessageFreeFunction
      end
    end

    artifact 1729719 "chre_re"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3579191 // chreLogLevel
      end
    end

    artifact 1729847 "chre_sensor"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3579319 // chreSensorConfigureMode
	class_ref 3579447 // chreSensorInfo
	class_ref 3579575 // chreSensorDataHeader
	class_ref 3579703 // chreSensorThreeAxisData
	class_ref 3579831 // chreSensorOccurrenceData
	class_ref 3579959 // chreSensorFloatData
	class_ref 3580087 // chreSensorByteData
	class_ref 3580215 // chreSensorSamplingStatus
	class_ref 3580343 // chreSensorSamplingStatusEvent
      end
    end
  end
end
