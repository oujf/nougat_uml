format 213
"hardware" // android::hardware::libhardware::include::hardware
  revision 2
  modified_by 55 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "D:/Workspace/AndroidSourceCode/nougat_src/hardware/libhardware/include/hardware/"
  cpp_src_dir "D:/Workspace/AndroidSourceCode/nougat_src/hardware/libhardware/include/hardware/"
  classview 351543 "hardware"
    
    classdiagramsettings member_max_width 0 end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 3803447 "sensors_event_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Marks the beginning of additional information frames
 Marks the end of additional information frames
 Basic information
 Estimation of the delay that is not tracked by sensor
 timestamps. This includes delay introduced by
 sensor front-end filtering, data transport, etc.
 float[2]: delay in seconds
           standard deviation of estimated value

 float: Celsius temperature.

 First three rows of a homogeneous matrix, which
 represents calibration to a three-element vector
 raw sensor reading.
 float[12]: 3x4 matrix in row major order

 Location and orientation of sensor element in the
 device frame: origin is the geometric center of the
 mobile device screen surface; the axis definition
 corresponds to Android sensor definitions.
 float[12]: 3x4 matrix in row major order

 float[2]: raw sample period in seconds,
           standard deviation of sampling period
 Sampling channel modeling information
 int32_t: noise type
 float[n]: parameters

 float[3]: sample period
           standard deviation of sample period,
           quantization unit

 Represents a filter:
      \\sum_j a_j y[n-j] == \\sum_i b_i x[n-i]

 int32_t[3]: number of feedforward coefficients, M,
             number of feedback coefficients, N, for
               FIR filter, N=1.
             bit mask that represents which element to
               which the filter is applied, bit 0 == 1
               means this filter applies to vector
               element 0.
 float[M+N]: filter coefficients (b0, b1, ..., BM-1),
             then (a0, a1, ..., aN-1), a0 is always 1.
             Multiple frames may be needed for higher
             number of taps.

 int32_t[2]: size in (row, column) ... 1st frame
 float[n]: matrix element values in row major order.

 int32_t[2]: extrapolate method
             interpolate method
 float[n]: mapping key points in pairs, (in, out)...
           (may be used to model saturation)

 int32_t:  resample method (0-th order, 1st order...)
 float[1]: resample ratio (upsampling if < 1.0;
           downsampling if > 1.0).

 Custom information

 Debugging


Union of the various types of sensor data
that can be returned.
"
      attribute 15744567 "data"
	public explicit_type "float"
	multiplicity "[16]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 8397239 // acceleration (<directional composition>)
	relation 8397239 *-->
	  a role_name "acceleration" public
	    comment " acceleration values are in meter per second per second (m/s^2) 
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8397239 // acceleration (<directional composition>)
	  b parent class_ref 4406839 // sensors_vec_t
      end

      classrelation 8397367 // magnetic (<directional composition>)
	relation 8397367 *-->
	  a role_name "magnetic" public
	    comment " magnetic vector values are in micro-Tesla (uT) 
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8397367 // magnetic (<directional composition>)
	  b parent class_ref 4406839 // sensors_vec_t
      end

      classrelation 8397495 // orientation (<directional composition>)
	relation 8397495 *-->
	  a role_name "orientation" public
	    comment " orientation values are in degrees 
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8397495 // orientation (<directional composition>)
	  b parent class_ref 4406839 // sensors_vec_t
      end

      classrelation 8397623 // gyro (<directional composition>)
	relation 8397623 *-->
	  a role_name "gyro" public
	    comment " gyroscope values are in rad/s 
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8397623 // gyro (<directional composition>)
	  b parent class_ref 4406839 // sensors_vec_t
      end

      attribute 15744695 "temperature"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " temperature is in degrees centigrade (Celsius) 
"
      end

      attribute 15744823 "distance"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " distance in centimeters 
"
      end

      attribute 15744951 "light"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " light in SI lux units 
"
      end

      attribute 15745079 "pressure"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " pressure in hectopascal (hPa) 
"
      end

      attribute 15745207 "relative_humidity"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " relative humidity in percent 
"
      end

      classrelation 8397751 // uncalibrated_gyro (<directional composition>)
	relation 8397751 *-->
	  a role_name "uncalibrated_gyro" public
	    comment " uncalibrated gyroscope values are in rad/s 
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8397751 // uncalibrated_gyro (<directional composition>)
	  b parent class_ref 4406967 // uncalibrated_event_t
      end

      classrelation 8397879 // uncalibrated_magnetic (<directional composition>)
	relation 8397879 *-->
	  a role_name "uncalibrated_magnetic" public
	    comment " uncalibrated magnetometer values are in micro-Teslas 
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8397879 // uncalibrated_magnetic (<directional composition>)
	  b parent class_ref 4406967 // uncalibrated_event_t
      end

      classrelation 8398007 // heart_rate (<directional composition>)
	relation 8398007 *-->
	  a role_name "heart_rate" public
	    comment " heart rate data containing value in bpm and status 
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8398007 // heart_rate (<directional composition>)
	  b parent class_ref 4407607 // heart_rate_event_t
      end

      classrelation 8398135 // meta_data (<directional composition>)
	relation 8398135 *-->
	  a role_name "meta_data" public
	    comment " this is a special event. see SENSOR_TYPE_META_DATA above.
sensors_meta_data_event_t events are all reported with a type of
SENSOR_TYPE_META_DATA. The handle is ignored and must be zero.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8398135 // meta_data (<directional composition>)
	  b parent class_ref 4407223 // meta_data_event_t
      end

      classrelation 8398263 // dynamic_sensor_meta (<directional composition>)
	relation 8398263 *-->
	  a role_name "dynamic_sensor_meta" public
	    comment " dynamic sensor meta event. See SENSOR_TYPE_DYNAMIC_SENSOR_META type for details 
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8398263 // dynamic_sensor_meta (<directional composition>)
	  b parent class_ref 4407479 // dynamic_sensor_meta_event_t
      end

      classrelation 8398391 // additional_info (<directional composition>)
	relation 8398391 *-->
	  a role_name "additional_info" public
	    comment "special additional sensor information frame, see
SENSOR_TYPE_ADDITIONAL_INFO for details.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8398391 // additional_info (<directional composition>)
	  b parent class_ref 4407735 // additional_info_event_t
      end
    end

    class 4199095 "gralloc_module_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " buffer is never read in software 
 buffer is rarely read in software 
 buffer is often read in software 
 mask for the software read values 
 buffer is never written in software 
 buffer is rarely written in software 
 buffer is often written in software 
 mask for the software write values 
 buffer will be used as an OpenGL ES texture 
 buffer will be used as an OpenGL ES render target 
 buffer will be used by the 2D hardware blitter 
 buffer will be used by the HWComposer HAL module 
 buffer will be used with the framebuffer device 
 buffer should be displayed full-screen on an external display when
possible 
 Must have a hardware-protected path to external display sink for
this buffer.  If a hardware-protected path is not available, then
either don't composite only this buffer (preferred) to the
external sink, or (less desirable) do not route the entire
composition to the external sink.  
 buffer may be used as a cursor 
 buffer will be used with the HW video encoder 
 buffer will be written by the HW camera pipeline 
 buffer will be read by the HW camera pipeline 
 buffer will be used as part of zero-shutter-lag queue 
 mask for the camera access values 
 mask for the software usage bit-mask 
 buffer will be used as a RenderScript Allocation 
 Set by the consumer to indicate to the producer that they may attach a
buffer that they did not detach from the BufferQueue. Will be filtered
out by GRALLOC_USAGE_ALLOC_MASK, so gralloc modules will not need to
handle this flag. 
 Mask of all flags which could be passed to a gralloc module for buffer
allocation. Any flags not in this mask do not need to be handled by
gralloc modules. 
 implementation-specific private usage flags 

Every hardware module must have a data structure named HAL_MODULE_INFO_SYM
and the fields of this data structure must begin with hw_module_t
followed by module specific information.
"
      classrelation 8377655 // common (<directional composition>)
	relation 8377655 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8377655 // common (<directional composition>)
	  b parent class_ref 4305335 // hw_module_t
      end

      attribute 15623351 "registerBuffer"
	public explicit_type "/* * (*registerBuffer)() must be called before a buffer_handle_t that has not * been created with (*alloc_device_t::alloc)() can be used. * * This is intended to be used with buffer_handle_t's that have been * received in this process through IPC. * * This function checks that the handle is indeed a valid one and prepares * it for use with (*lock)() and (*unlock)(). * * It is not necessary to call (*registerBuffer)() on a handle created * with (*alloc_device_t::alloc)(). * * returns an error if this buffer_handle_t is not valid. */ int (*)(struct gralloc_module_t const* module, buffer_handle_t handle)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    
    /*
     * (*registerBuffer)() must be called before a buffer_handle_t that has not
     * been created with (*alloc_device_t::alloc)() can be used.
     * 
     * This is intended to be used with buffer_handle_t's that have been
     * received in this process through IPC.
     * 
     * This function checks that the handle is indeed a valid one and prepares
     * it for use with (*lock)() and (*unlock)().
     * 
     * It is not necessary to call (*registerBuffer)() on a handle created 
     * with (*alloc_device_t::alloc)().
     * 
     * returns an error if this buffer_handle_t is not valid.
     */
    int (*${name})(struct gralloc_module_t const* module,
            buffer_handle_t handle)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*registerBuffer)() must be called before a buffer_handle_t that has not
been created with (*alloc_device_t::alloc)() can be used.

This is intended to be used with buffer_handle_t's that have been
received in this process through IPC.

This function checks that the handle is indeed a valid one and prepares
it for use with (*lock)() and (*unlock)().

It is not necessary to call (*registerBuffer)() on a handle created 
with (*alloc_device_t::alloc)().

returns an error if this buffer_handle_t is not valid.

"
      end

      attribute 15623479 "unregisterBuffer"
	public explicit_type "/* * (*unregisterBuffer)() is called once this handle is no longer needed in * this process. After this call, it is an error to call (*lock)(), * (*unlock)(), or (*registerBuffer)(). * * This function doesn't close or free the handle itself; this is done * by other means, usually through libcutils's native_handle_close() and * native_handle_free(). * * It is an error to call (*unregisterBuffer)() on a buffer that wasn't * explicitly registered first. */ int (*)(struct gralloc_module_t const* module, buffer_handle_t handle)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * (*unregisterBuffer)() is called once this handle is no longer needed in
     * this process. After this call, it is an error to call (*lock)(),
     * (*unlock)(), or (*registerBuffer)().
     * 
     * This function doesn't close or free the handle itself; this is done
     * by other means, usually through libcutils's native_handle_close() and
     * native_handle_free(). 
     * 
     * It is an error to call (*unregisterBuffer)() on a buffer that wasn't
     * explicitly registered first.
     */
    int (*${name})(struct gralloc_module_t const* module,
            buffer_handle_t handle)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*unregisterBuffer)() is called once this handle is no longer needed in
this process. After this call, it is an error to call (*lock)(),
(*unlock)(), or (*registerBuffer)().

This function doesn't close or free the handle itself; this is done
by other means, usually through libcutils's native_handle_close() and
native_handle_free(). 

It is an error to call (*unregisterBuffer)() on a buffer that wasn't
explicitly registered first.

"
      end

      attribute 15623607 "lock"
	public explicit_type "/* * The (*lock)() method is called before a buffer is accessed for the * specified usage. This call may block, for instance if the h/w needs * to finish rendering or if CPU caches need to be synchronized. * * The caller promises to modify only pixels in the area specified * by (l,t,w,h). * * The content of the buffer outside of the specified area is NOT modified * by this call. * * If usage specifies GRALLOC_USAGE_SW_*, vaddr is filled with the address * of the buffer in virtual memory. * * Note calling (*lock)() on HAL_PIXEL_FORMAT_YCbCr_*_888 buffers will fail * and return -EINVAL. These buffers must be locked with (*lock_ycbcr)() * instead. * * THREADING CONSIDERATIONS: * * It is legal for several different threads to lock a buffer from * read access, none of the threads are blocked. * * However, locking a buffer simultaneously for write or read/write is * undefined, but: * - shall not result in termination of the process * - shall not block the caller * It is acceptable to return an error or to leave the buffer's content * into an indeterminate state. * * If the buffer was created with a usage mask incompatible with the * requested usage flags here, -EINVAL is returned. * */ int (*)(struct gralloc_module_t const* module, buffer_handle_t handle, int usage, int l, int t, int w, int h, void** vaddr)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    
    /*
     * The (*lock)() method is called before a buffer is accessed for the 
     * specified usage. This call may block, for instance if the h/w needs
     * to finish rendering or if CPU caches need to be synchronized.
     * 
     * The caller promises to modify only pixels in the area specified 
     * by (l,t,w,h).
     * 
     * The content of the buffer outside of the specified area is NOT modified
     * by this call.
     *
     * If usage specifies GRALLOC_USAGE_SW_*, vaddr is filled with the address
     * of the buffer in virtual memory.
     *
     * Note calling (*lock)() on HAL_PIXEL_FORMAT_YCbCr_*_888 buffers will fail
     * and return -EINVAL.  These buffers must be locked with (*lock_ycbcr)()
     * instead.
     *
     * THREADING CONSIDERATIONS:
     *
     * It is legal for several different threads to lock a buffer from 
     * read access, none of the threads are blocked.
     * 
     * However, locking a buffer simultaneously for write or read/write is
     * undefined, but:
     * - shall not result in termination of the process
     * - shall not block the caller
     * It is acceptable to return an error or to leave the buffer's content
     * into an indeterminate state.
     *
     * If the buffer was created with a usage mask incompatible with the
     * requested usage flags here, -EINVAL is returned. 
     * 
     */
    
    int (*${name})(struct gralloc_module_t const* module,
            buffer_handle_t handle, int usage,
            int l, int t, int w, int h,
            void** vaddr)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The (*lock)() method is called before a buffer is accessed for the 
specified usage. This call may block, for instance if the h/w needs
to finish rendering or if CPU caches need to be synchronized.

The caller promises to modify only pixels in the area specified 
by (l,t,w,h).

The content of the buffer outside of the specified area is NOT modified
by this call.

If usage specifies GRALLOC_USAGE_SW_*, vaddr is filled with the address
of the buffer in virtual memory.

Note calling (*lock)() on HAL_PIXEL_FORMAT_YCbCr_*_888 buffers will fail
and return -EINVAL.  These buffers must be locked with (*lock_ycbcr)()
instead.

THREADING CONSIDERATIONS:

It is legal for several different threads to lock a buffer from 
read access, none of the threads are blocked.

However, locking a buffer simultaneously for write or read/write is
undefined, but:
- shall not result in termination of the process
- shall not block the caller
It is acceptable to return an error or to leave the buffer's content
into an indeterminate state.

If the buffer was created with a usage mask incompatible with the
requested usage flags here, -EINVAL is returned. 


"
      end

      attribute 15623735 "unlock"
	public explicit_type "/* * The (*unlock)() method must be called after all changes to the buffer * are completed. */ int (*)(struct gralloc_module_t const* module, buffer_handle_t handle)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    
    /*
     * The (*unlock)() method must be called after all changes to the buffer
     * are completed.
     */
    
    int (*${name})(struct gralloc_module_t const* module,
            buffer_handle_t handle)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The (*unlock)() method must be called after all changes to the buffer
are completed.

"
      end

      attribute 15623863 "perform"
	public explicit_type "/* reserved for future use */ int (*)(struct gralloc_module_t const* module, int operation, ... )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}

    /* reserved for future use */
    int (*${name})(struct gralloc_module_t const* module,
            int operation, ... )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " reserved for future use 
"
      end

      attribute 15623991 "lock_ycbcr"
	public explicit_type "/* * The (*lock_ycbcr)() method is like the (*lock)() method, with the * difference that it fills a struct ycbcr with a description of the buffer * layout, and zeroes out the reserved fields. * * If the buffer format is not compatible with a flexible YUV format (e.g. * the buffer layout cannot be represented with the ycbcr struct), it * will return -EINVAL. * * This method must work on buffers with HAL_PIXEL_FORMAT_YCbCr_*_888 * if supported by the device, as well as with any other format that is * requested by the multimedia codecs when they are configured with a * flexible-YUV-compatible color-format with android native buffers. * * Note that this method may also be called on buffers of other formats, * including non-YUV formats. * * Added in GRALLOC_MODULE_API_VERSION_0_2. */ int (*)(struct gralloc_module_t const* module, buffer_handle_t handle, int usage, int l, int t, int w, int h, struct android_ycbcr *ycbcr)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * The (*lock_ycbcr)() method is like the (*lock)() method, with the
     * difference that it fills a struct ycbcr with a description of the buffer
     * layout, and zeroes out the reserved fields.
     *
     * If the buffer format is not compatible with a flexible YUV format (e.g.
     * the buffer layout cannot be represented with the ycbcr struct), it
     * will return -EINVAL.
     *
     * This method must work on buffers with HAL_PIXEL_FORMAT_YCbCr_*_888
     * if supported by the device, as well as with any other format that is
     * requested by the multimedia codecs when they are configured with a
     * flexible-YUV-compatible color-format with android native buffers.
     *
     * Note that this method may also be called on buffers of other formats,
     * including non-YUV formats.
     *
     * Added in GRALLOC_MODULE_API_VERSION_0_2.
     */

    int (*${name})(struct gralloc_module_t const* module,
            buffer_handle_t handle, int usage,
            int l, int t, int w, int h,
            struct android_ycbcr *ycbcr)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The (*lock_ycbcr)() method is like the (*lock)() method, with the
difference that it fills a struct ycbcr with a description of the buffer
layout, and zeroes out the reserved fields.

If the buffer format is not compatible with a flexible YUV format (e.g.
the buffer layout cannot be represented with the ycbcr struct), it
will return -EINVAL.

This method must work on buffers with HAL_PIXEL_FORMAT_YCbCr_*_888
if supported by the device, as well as with any other format that is
requested by the multimedia codecs when they are configured with a
flexible-YUV-compatible color-format with android native buffers.

Note that this method may also be called on buffers of other formats,
including non-YUV formats.

Added in GRALLOC_MODULE_API_VERSION_0_2.

"
      end

      attribute 15624119 "lockAsync"
	public explicit_type "/* * The (*lockAsync)() method is like the (*lock)() method except * that the buffer's sync fence object is passed into the lock * call instead of requiring the caller to wait for completion. * * The gralloc implementation takes ownership of the fenceFd and * is responsible for closing it when no longer needed. * * Added in GRALLOC_MODULE_API_VERSION_0_3. */ int (*)(struct gralloc_module_t const* module, buffer_handle_t handle, int usage, int l, int t, int w, int h, void** vaddr, int fenceFd)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * The (*lockAsync)() method is like the (*lock)() method except
     * that the buffer's sync fence object is passed into the lock
     * call instead of requiring the caller to wait for completion.
     *
     * The gralloc implementation takes ownership of the fenceFd and
     * is responsible for closing it when no longer needed.
     *
     * Added in GRALLOC_MODULE_API_VERSION_0_3.
     */
    int (*${name})(struct gralloc_module_t const* module,
            buffer_handle_t handle, int usage,
            int l, int t, int w, int h,
            void** vaddr, int fenceFd)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The (*lockAsync)() method is like the (*lock)() method except
that the buffer's sync fence object is passed into the lock
call instead of requiring the caller to wait for completion.

The gralloc implementation takes ownership of the fenceFd and
is responsible for closing it when no longer needed.

Added in GRALLOC_MODULE_API_VERSION_0_3.

"
      end

      attribute 15624247 "unlockAsync"
	public explicit_type "/* * The (*unlockAsync)() method is like the (*unlock)() method * except that a buffer sync fence object is returned from the * lock call, representing the completion of any pending work * performed by the gralloc implementation. * * The caller takes ownership of the fenceFd and is responsible * for closing it when no longer needed. * * Added in GRALLOC_MODULE_API_VERSION_0_3. */ int (*)(struct gralloc_module_t const* module, buffer_handle_t handle, int* fenceFd)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * The (*unlockAsync)() method is like the (*unlock)() method
     * except that a buffer sync fence object is returned from the
     * lock call, representing the completion of any pending work
     * performed by the gralloc implementation.
     *
     * The caller takes ownership of the fenceFd and is responsible
     * for closing it when no longer needed.
     *
     * Added in GRALLOC_MODULE_API_VERSION_0_3.
     */
    int (*${name})(struct gralloc_module_t const* module,
            buffer_handle_t handle, int* fenceFd)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The (*unlockAsync)() method is like the (*unlock)() method
except that a buffer sync fence object is returned from the
lock call, representing the completion of any pending work
performed by the gralloc implementation.

The caller takes ownership of the fenceFd and is responsible
for closing it when no longer needed.

Added in GRALLOC_MODULE_API_VERSION_0_3.

"
      end

      attribute 15624375 "lockAsync_ycbcr"
	public explicit_type "/* * The (*lockAsync_ycbcr)() method is like the (*lock_ycbcr)() * method except that the buffer's sync fence object is passed * into the lock call instead of requiring the caller to wait for * completion. * * The gralloc implementation takes ownership of the fenceFd and * is responsible for closing it when no longer needed. * * Added in GRALLOC_MODULE_API_VERSION_0_3. */ int (*)(struct gralloc_module_t const* module, buffer_handle_t handle, int usage, int l, int t, int w, int h, struct android_ycbcr *ycbcr, int fenceFd)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * The (*lockAsync_ycbcr)() method is like the (*lock_ycbcr)()
     * method except that the buffer's sync fence object is passed
     * into the lock call instead of requiring the caller to wait for
     * completion.
     *
     * The gralloc implementation takes ownership of the fenceFd and
     * is responsible for closing it when no longer needed.
     *
     * Added in GRALLOC_MODULE_API_VERSION_0_3.
     */
    int (*${name})(struct gralloc_module_t const* module,
            buffer_handle_t handle, int usage,
            int l, int t, int w, int h,
            struct android_ycbcr *ycbcr, int fenceFd)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The (*lockAsync_ycbcr)() method is like the (*lock_ycbcr)()
method except that the buffer's sync fence object is passed
into the lock call instead of requiring the caller to wait for
completion.

The gralloc implementation takes ownership of the fenceFd and
is responsible for closing it when no longer needed.

Added in GRALLOC_MODULE_API_VERSION_0_3.

"
      end

      attribute 15624503 "reserved_proc"
	public explicit_type "void"
	multiplicity "[3]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " reserved for future use 
"
      end
    end

    class 4214583 "hwc_display_contents_1_t"
      visibility package stereotype "typedef" explicit_base_type ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4216503 "hwc_frect_t"
      visibility package stereotype "typedef" base_type class_ref 4393527 // hwc_frect
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4216631 "hwc_rect_t"
      visibility package stereotype "typedef" base_type class_ref 4393655 // hwc_rect
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4220087 "alloc_device_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Every device data structure must begin with hw_device_t
followed by module specific public methods and attributes.
"
      classrelation 8377783 // common (<directional composition>)
	relation 8377783 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8377783 // common (<directional composition>)
	  b parent class_ref 4305975 // hw_device_t
      end

      attribute 15624631 "alloc"
	public explicit_type "/* * (*alloc)() Allocates a buffer in graphic memory with the requested * parameters and returns a buffer_handle_t and the stride in pixels to * allow the implementation to satisfy hardware constraints on the width * of a pixmap (eg: it may have to be multiple of 8 pixels). * The CALLER TAKES OWNERSHIP of the buffer_handle_t. * * If format is HAL_PIXEL_FORMAT_YCbCr_420_888, the returned stride must be * 0, since the actual strides are available from the android_ycbcr * structure. * * Returns 0 on success or -errno on error. */ int (*)(struct alloc_device_t* dev, int w, int h, int format, int usage, buffer_handle_t* handle, int* stride)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* 
     * (*alloc)() Allocates a buffer in graphic memory with the requested
     * parameters and returns a buffer_handle_t and the stride in pixels to
     * allow the implementation to satisfy hardware constraints on the width
     * of a pixmap (eg: it may have to be multiple of 8 pixels). 
     * The CALLER TAKES OWNERSHIP of the buffer_handle_t.
     *
     * If format is HAL_PIXEL_FORMAT_YCbCr_420_888, the returned stride must be
     * 0, since the actual strides are available from the android_ycbcr
     * structure.
     * 
     * Returns 0 on success or -errno on error.
     */
    
    int (*${name})(struct alloc_device_t* dev,
            int w, int h, int format, int usage,
            buffer_handle_t* handle, int* stride)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*alloc)() Allocates a buffer in graphic memory with the requested
parameters and returns a buffer_handle_t and the stride in pixels to
allow the implementation to satisfy hardware constraints on the width
of a pixmap (eg: it may have to be multiple of 8 pixels). 
The CALLER TAKES OWNERSHIP of the buffer_handle_t.

If format is HAL_PIXEL_FORMAT_YCbCr_420_888, the returned stride must be
0, since the actual strides are available from the android_ycbcr
structure.

Returns 0 on success or -errno on error.

"
      end

      attribute 15624759 "free"
	public explicit_type "/* * (*free)() Frees a previously allocated buffer. * Behavior is undefined if the buffer is still mapped in any process, * but shall not result in termination of the program or security breaches * (allowing a process to get access to another process' buffers). * THIS FUNCTION TAKES OWNERSHIP of the buffer_handle_t which becomes * invalid after the call. * * Returns 0 on success or -errno on error. */ int (*)(struct alloc_device_t* dev, buffer_handle_t handle)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * (*free)() Frees a previously allocated buffer. 
     * Behavior is undefined if the buffer is still mapped in any process,
     * but shall not result in termination of the program or security breaches
     * (allowing a process to get access to another process' buffers).
     * THIS FUNCTION TAKES OWNERSHIP of the buffer_handle_t which becomes
     * invalid after the call. 
     * 
     * Returns 0 on success or -errno on error.
     */
    int (*${name})(struct alloc_device_t* dev,
            buffer_handle_t handle)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*free)() Frees a previously allocated buffer. 
Behavior is undefined if the buffer is still mapped in any process,
but shall not result in termination of the program or security breaches
(allowing a process to get access to another process' buffers).
THIS FUNCTION TAKES OWNERSHIP of the buffer_handle_t which becomes
invalid after the call. 

Returns 0 on success or -errno on error.

"
      end

      attribute 15624887 "dump"
	public explicit_type "/* This hook is OPTIONAL. * * If non NULL it will be caused by SurfaceFlinger on dumpsys */ void (*)(struct alloc_device_t *dev, char *buff, int buff_len)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* This hook is OPTIONAL.
     *
     * If non NULL it will be caused by SurfaceFlinger on dumpsys
     */
    void (*${name})(struct alloc_device_t *dev, char *buff, int buff_len)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " This hook is OPTIONAL.

If non NULL it will be caused by SurfaceFlinger on dumpsys

"
      end

      attribute 15625015 "reserved_proc"
	public explicit_type "void"
	multiplicity "[7]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4222519 "hwc_composer_device_1_t"
      visibility package stereotype "typedef" explicit_base_type ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4222647 "hwc_procs_t"
      visibility package stereotype "typedef" base_type class_ref 4384823 // hwc_procs
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4300215 "sensor_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15745591 "name"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Name of this sensor.
All sensors of the same \"type\" must have a different \"name\".

"
      end

      attribute 15745719 "vendor"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " vendor of the hardware part 
"
      end

      attribute 15745847 "version"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " version of the hardware part + driver. The value of this field
must increase when the driver is updated in a way that changes the
output of this sensor. This is important for fused sensors when the
fusion algorithm is updated.

"
      end

      attribute 15745975 "handle"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " handle that identifies this sensors. This handle is used to reference
this sensor throughout the HAL API.

"
      end

      attribute 15746103 "type"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " this sensor's type. 
"
      end

      attribute 15746231 "maxRange"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " maximum range of this sensor's value in SI units 
"
      end

      attribute 15746359 "resolution"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " smallest difference between two values reported by this sensor 
"
      end

      attribute 15746487 "power"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " rough estimate of this sensor's power consumption in mA 
"
      end

      attribute 15746615 "stringType"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " type of this sensor as a string. Set to corresponding
SENSOR_STRING_TYPE_*.
When defining an OEM specific sensor or sensor manufacturer specific
sensor, use your reserve domain name as a prefix.
ex: com.google.glass.onheaddetector
For sensors of known type, the android framework might overwrite this
string automatically.

"
      end

      attribute 15746743 "requiredPermission"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " permission required to see this sensor, register to it and receive data.
Set to \"\" if no permission is required. Some sensor types like the
heart rate monitor have a mandatory require_permission.
For sensors that always require a specific permission, like the heart
rate monitor, the android framework might overwrite this string
automatically.

"
      end

      attribute 15746871 "reserved"
	public explicit_type "void"
	multiplicity "[2]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " reserved fields, must be zero 
"
      end
    end

    class 4304951 "activity_event"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Values for activity_event.event_types. 

A flush_complete event which indicates that a flush() has been successfully completed. This
does not correspond to any activity/event. An event of this type should be added to the end
of a batch FIFO and it indicates that all the events in the batch FIFO have been successfully
reported to the framework. An event of this type should be generated only if flush() has been
explicitly called and if the FIFO is empty at the time flush() is called it should trivially
return a flush_complete_event to indicate that the FIFO is empty.

A flush complete event should have the following parameters set.
activity_event_t.event_type = ACTIVITY_EVENT_FLUSH_COMPLETE
activity_event_t.activity = 0
activity_event_t.timestamp = 0
activity_event_t.reserved = 0
See (*flush)() for more details.

 Signifies entering an activity. 
 Signifies exiting an activity. 

Each event is a separate activity with event_type indicating whether this activity has started
or ended. Eg event: (event_type=\"enter\", activity=\"ON_FOOT\", timestamp)
"
    end

    class 4305079 "activity_event_t"
      visibility package stereotype "typedef" base_type class_ref 4304951 // activity_event
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4305207 "activity_recognition_module"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8294583 // common (<directional composition>)
	relation 8294583 *-->
	  a role_name "common" public
	    comment "Common methods of the activity recognition module.  This *must* be the first member of
activity_recognition_module as users of this structure will cast a hw_module_t to
activity_recognition_module pointer in contexts where it's known the hw_module_t
references an activity_recognition_module.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8294583 // common (<directional composition>)
	  b parent class_ref 4305335 // hw_module_t
      end

      attribute 15493175 "get_supported_activities_list"
	public explicit_type "/* * List of all activities supported by this module including OEM defined activities. Each * activity is represented using a string defined above. Each string should be null terminated. * The index of the activity in this array is used as a \"handle\" for enabling/disabling and * event delivery. * Return value is the size of this list. */ int (*)(struct activity_recognition_module* module, char const* const* *activity_list)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * List of all activities supported by this module including OEM defined activities. Each
     * activity is represented using a string defined above. Each string should be null terminated.
     * The index of the activity in this array is used as a \"handle\" for enabling/disabling and
     * event delivery.
     * Return value is the size of this list.
     */
    int (*${name})(struct activity_recognition_module* module,
            char const* const* *activity_list)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "List of all activities supported by this module including OEM defined activities. Each
activity is represented using a string defined above. Each string should be null terminated.
The index of the activity in this array is used as a \"handle\" for enabling/disabling and
event delivery.
Return value is the size of this list.

"
      end
    end

    class 4305335 "hw_module_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Every hardware module must have a data structure named HAL_MODULE_INFO_SYM
and the fields of this data structure must begin with hw_module_t
followed by module specific information.
"
      attribute 15625143 "id"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Identifier of module 
"
      end

      attribute 15625271 "name"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Name of this module 
"
      end

      attribute 15625399 "author"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Author/owner/implementor of the module 
"
      end

      classrelation 8378295 // methods (<unidirectional association>)
	relation 8378295 --->
	  a role_name "methods" public
	    comment " Modules methods 
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8378295 // methods (<unidirectional association>)
	  b parent class_ref 4380855 // hw_module_methods_t
      end

      attribute 15625527 "dso"
	public explicit_type "void"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " module's dso 
"
      end

    end

    class 4305463 "activity_recognition_module_t"
      visibility package stereotype "typedef" base_type class_ref 4305207 // activity_recognition_module
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4305591 "activity_recognition_callback_procs"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15493303 "activity_callback"
	public explicit_type "// Callback for activity_data. This is guaranteed to not invoke any HAL methods. // Memory allocated for the events can be reused after this method returns. // events - Array of activity_event_t s that are reported. // count - size of the array. void (*)(const struct activity_recognition_callback_procs* procs, const activity_event_t* events, int count)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    // Callback for activity_data. This is guaranteed to not invoke any HAL methods.
    // Memory allocated for the events can be reused after this method returns.
    //    events - Array of activity_event_t s that are reported.
    //    count  - size of the array.
    void (*${name})(const struct activity_recognition_callback_procs* procs,
            const activity_event_t* events, int count)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Callback for activity_data. This is guaranteed to not invoke any HAL methods.
 Memory allocated for the events can be reused after this method returns.
    events - Array of activity_event_t s that are reported.
    count  - size of the array.
"
      end
    end

    class 4305719 "activity_recognition_callback_procs_t"
      visibility package stereotype "typedef" base_type class_ref 4305591 // activity_recognition_callback_procs
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4305847 "activity_recognition_device"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8294711 // common (<directional composition>)
	relation 8294711 *-->
	  a role_name "common" public
	    comment "Common methods of the activity recognition device.  This *must* be the first member of
activity_recognition_device as users of this structure will cast a hw_device_t to
activity_recognition_device pointer in contexts where it's known the hw_device_t
references an activity_recognition_device.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8294711 // common (<directional composition>)
	  b parent class_ref 4305975 // hw_device_t
      end

      attribute 15493431 "register_activity_callback"
	public explicit_type "/* * Sets the callback to invoke when there are events to report. This call overwrites the * previously registered callback (if any). */ void (*)(const struct activity_recognition_device* dev, const activity_recognition_callback_procs_t* callback)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * Sets the callback to invoke when there are events to report. This call overwrites the
     * previously registered callback (if any).
     */
    void (*${name})(const struct activity_recognition_device* dev,
            const activity_recognition_callback_procs_t* callback)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Sets the callback to invoke when there are events to report. This call overwrites the
previously registered callback (if any).

"
      end

      attribute 15493559 "enable_activity_event"
	public explicit_type "/* * Activates monitoring of activity transitions. Activities need not be reported as soon as they * are detected. The detected activities are stored in a FIFO and reported in batches when the * \"max_batch_report_latency\" expires or when the batch FIFO is full. The implementation should * allow the AP to go into suspend mode while the activities are detected and stored in the * batch FIFO. Whenever events need to be reported (like when the FIFO is full or when the * max_batch_report_latency has expired for an activity, event pair), it should wake_up the AP * so that no events are lost. Activities are stored as transitions and they are allowed to * overlap with each other. Each (activity, event_type) pair can be activated or deactivated * independently of the other. The HAL implementation needs to keep track of which pairs are * currently active and needs to detect only those pairs. * * At the first detection after this function gets called, the hardware should know whether the * user is in the activity. * - If event_type is ACTIVITY_EVENT_ENTER and the user is in the activity, then an * (ACTIVITY_EVENT_ENTER, activity) event should be added to the FIFO. * - If event_type is ACTIVITY_EVENT_EXIT and the user is not in the activity, then an * (ACTIVITY_EVENT_EXIT, activity) event should be added to the FIFO. * For example, suppose get_supported_activities_list contains on_bicyle and running, and the * user is biking. Consider the following four calls that could happen in any order. * - When enable_activity_event(on_bicycle, ACTIVITY_EVENT_ENTER) is called, * (ACTIVITY_EVENT_ENTER, on_bicycle) should be added to the FIFO. * - When enable_activity_event(on_bicycle, ACTIVITY_EVENT_EXIT) is called, nothing should be * added to the FIFO. * - When enable_activity_event(running, ACTIVITY_EVENT_ENTER) is called, nothing should be * added to the FIFO. * - When enable_activity_event(running, ACTIVITY_EVENT_EXIT) is called, * (ACTIVITY_EVENT_EXIT, running) should be added to the FIFO. * * activity_handle - Index of the specific activity that needs to be detected in the list * returned by get_supported_activities_list. * event_type - Specific transition of the activity that needs to be detected. It should be * either ACTIVITY_EVENT_ENTER or ACTIVITY_EVENT_EXIT. * max_batch_report_latency_ns - a transition can be delayed by at most * “max_batch_report_latency” nanoseconds. * Return 0 on success, negative errno code otherwise. */ int (*)(const struct activity_recognition_device* dev, uint32_t activity_handle, uint32_t event_type, int64_t max_batch_report_latency_ns)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * Activates monitoring of activity transitions. Activities need not be reported as soon as they
     * are detected. The detected activities are stored in a FIFO and reported in batches when the
     * \"max_batch_report_latency\" expires or when the batch FIFO is full. The implementation should
     * allow the AP to go into suspend mode while the activities are detected and stored in the
     * batch FIFO. Whenever events need to be reported (like when the FIFO is full or when the
     * max_batch_report_latency has expired for an activity, event pair), it should wake_up the AP
     * so that no events are lost. Activities are stored as transitions and they are allowed to
     * overlap with each other. Each (activity, event_type) pair can be activated or deactivated
     * independently of the other. The HAL implementation needs to keep track of which pairs are
     * currently active and needs to detect only those pairs.
     *
     * At the first detection after this function gets called, the hardware should know whether the
     * user is in the activity.
     * - If event_type is ACTIVITY_EVENT_ENTER and the user is in the activity, then an
     *   (ACTIVITY_EVENT_ENTER, activity) event should be added to the FIFO.
     * - If event_type is ACTIVITY_EVENT_EXIT and the user is not in the activity, then an
     *   (ACTIVITY_EVENT_EXIT, activity) event should be added to the FIFO.
     * For example, suppose get_supported_activities_list contains on_bicyle and running, and the
     * user is biking. Consider the following four calls that could happen in any order.
     * - When enable_activity_event(on_bicycle, ACTIVITY_EVENT_ENTER) is called,
     *   (ACTIVITY_EVENT_ENTER, on_bicycle) should be added to the FIFO.
     * - When enable_activity_event(on_bicycle, ACTIVITY_EVENT_EXIT) is called, nothing should be
     *   added to the FIFO.
     * - When enable_activity_event(running, ACTIVITY_EVENT_ENTER) is called, nothing should be
     *   added to the FIFO.
     * - When enable_activity_event(running, ACTIVITY_EVENT_EXIT) is called,
     *   (ACTIVITY_EVENT_EXIT, running) should be added to the FIFO.
     *
     * activity_handle - Index of the specific activity that needs to be detected in the list
     *                   returned by get_supported_activities_list.
     * event_type - Specific transition of the activity that needs to be detected. It should be
     *              either ACTIVITY_EVENT_ENTER or ACTIVITY_EVENT_EXIT.
     * max_batch_report_latency_ns - a transition can be delayed by at most
     *                               “max_batch_report_latency” nanoseconds.
     * Return 0 on success, negative errno code otherwise.
     */
    int (*${name})(const struct activity_recognition_device* dev,
            uint32_t activity_handle, uint32_t event_type, int64_t max_batch_report_latency_ns)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Activates monitoring of activity transitions. Activities need not be reported as soon as they
are detected. The detected activities are stored in a FIFO and reported in batches when the
\"max_batch_report_latency\" expires or when the batch FIFO is full. The implementation should
allow the AP to go into suspend mode while the activities are detected and stored in the
batch FIFO. Whenever events need to be reported (like when the FIFO is full or when the
max_batch_report_latency has expired for an activity, event pair), it should wake_up the AP
so that no events are lost. Activities are stored as transitions and they are allowed to
overlap with each other. Each (activity, event_type) pair can be activated or deactivated
independently of the other. The HAL implementation needs to keep track of which pairs are
currently active and needs to detect only those pairs.

At the first detection after this function gets called, the hardware should know whether the
user is in the activity.
- If event_type is ACTIVITY_EVENT_ENTER and the user is in the activity, then an
  (ACTIVITY_EVENT_ENTER, activity) event should be added to the FIFO.
- If event_type is ACTIVITY_EVENT_EXIT and the user is not in the activity, then an
  (ACTIVITY_EVENT_EXIT, activity) event should be added to the FIFO.
For example, suppose get_supported_activities_list contains on_bicyle and running, and the
user is biking. Consider the following four calls that could happen in any order.
- When enable_activity_event(on_bicycle, ACTIVITY_EVENT_ENTER) is called,
  (ACTIVITY_EVENT_ENTER, on_bicycle) should be added to the FIFO.
- When enable_activity_event(on_bicycle, ACTIVITY_EVENT_EXIT) is called, nothing should be
  added to the FIFO.
- When enable_activity_event(running, ACTIVITY_EVENT_ENTER) is called, nothing should be
  added to the FIFO.
- When enable_activity_event(running, ACTIVITY_EVENT_EXIT) is called,
  (ACTIVITY_EVENT_EXIT, running) should be added to the FIFO.

activity_handle - Index of the specific activity that needs to be detected in the list
                  returned by get_supported_activities_list.
event_type - Specific transition of the activity that needs to be detected. It should be
             either ACTIVITY_EVENT_ENTER or ACTIVITY_EVENT_EXIT.
max_batch_report_latency_ns - a transition can be delayed by at most
                              “max_batch_report_latency” nanoseconds.
Return 0 on success, negative errno code otherwise.

"
      end

      attribute 15493687 "disable_activity_event"
	public explicit_type "/* * Disables detection of a specific (activity, event_type) pair. All the (activity, event_type) * events in the FIFO are discarded. */ int (*)(const struct activity_recognition_device* dev, uint32_t activity_handle, uint32_t event_type)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * Disables detection of a specific (activity, event_type) pair. All the (activity, event_type)
     * events in the FIFO are discarded.
     */
    int (*${name})(const struct activity_recognition_device* dev,
            uint32_t activity_handle, uint32_t event_type)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Disables detection of a specific (activity, event_type) pair. All the (activity, event_type)
events in the FIFO are discarded.

"
      end

      attribute 15493815 "flush"
	public explicit_type "/* * Flush all the batch FIFOs. Report all the activities that were stored in the FIFO so far as * if max_batch_report_latency had expired. This shouldn't change the latency in any way. Add * a flush_complete_event to indicate the end of the FIFO after all events are delivered. * activity_callback should be called before this function returns successfully. * See ACTIVITY_EVENT_FLUSH_COMPLETE for more details. * Return 0 on success, negative errno code otherwise. */ int (*)(const struct activity_recognition_device* dev)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * Flush all the batch FIFOs. Report all the activities that were stored in the FIFO so far as
     * if max_batch_report_latency had expired. This shouldn't change the latency in any way. Add
     * a flush_complete_event to indicate the end of the FIFO after all events are delivered.
     * activity_callback should be called before this function returns successfully.
     * See ACTIVITY_EVENT_FLUSH_COMPLETE for more details.
     * Return 0 on success, negative errno code otherwise.
     */
    int (*${name})(const struct activity_recognition_device* dev)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Flush all the batch FIFOs. Report all the activities that were stored in the FIFO so far as
if max_batch_report_latency had expired. This shouldn't change the latency in any way. Add
a flush_complete_event to indicate the end of the FIFO after all events are delivered.
activity_callback should be called before this function returns successfully.
See ACTIVITY_EVENT_FLUSH_COMPLETE for more details.
Return 0 on success, negative errno code otherwise.

"
      end

      attribute 15493943 "reserved_procs"
	public explicit_type "// Must be set to NULL. void (*[16 - 4])(void)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    // Must be set to NULL.
    void (*${name}[16 - 4])(void)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Must be set to NULL.
"
      end
    end

    class 4305975 "hw_device_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Every device data structure must begin with hw_device_t
followed by module specific public methods and attributes.
"
      classrelation 8378935 // module (<unidirectional association>)
	relation 8378935 --->
	  a role_name "module" public
	    comment " reference to the module this device belongs to 
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8378935 // module (<unidirectional association>)
	  b parent class_ref 4305335 // hw_module_t
      end

      attribute 15625783 "close"
	public explicit_type "#endif /** Close this device */ int (*)(struct hw_device_t* device)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}#endif

    /** Close this device */
    int (*${name})(struct hw_device_t* device)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Close this device 
"
      end
    end

    class 4306103 "activity_recognition_device_t"
      visibility package stereotype "typedef" base_type class_ref 4305847 // activity_recognition_device
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4306231 "audio_stream_t"
      visibility package stereotype "typedef" explicit_base_type "audio_stream"
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4306359 "stream_callback_event_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " type of asynchronous write callback events. Mutually exclusive "
      attribute 15494071 "STREAM_CBK_EVENT_WRITE_READY"
	public type class_ref 4306359 // stream_callback_event_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15494199 "STREAM_CBK_EVENT_DRAIN_READY"
	public type class_ref 4306359 // stream_callback_event_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4306487 "stream_callback_t"
      visibility package stereotype "typedef" explicit_base_type "int"
      cpp_decl "${comment}typedef ${type}(* ${name})(stream_callback_event_t event, void *param, void *cookie);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " non blocking write completed 
 drain completed "
    end

    class 4306615 "audio_drain_type_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " type of drain requested to audio_stream_out->drain(). Mutually exclusive "
      attribute 15494327 "AUDIO_DRAIN_ALL"
	public type class_ref 4306615 // audio_drain_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15494455 "AUDIO_DRAIN_EARLY_NOTIFY"
	public type class_ref 4306615 // audio_drain_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4306743 "audio_stream_out"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " drain() returns when all data has been played 
 drain() returns a short time before all data
from the current track has been played to
give time for gapless track switch 

audio_stream_out is the abstraction interface for the audio output hardware.

It provides information about various properties of the audio output
hardware driver.
"
      attribute 15494583 "common"
	public explicit_type "audio_stream"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Common methods of the audio stream out.  This *must* be the first member of audio_stream_out
as users of this structure will cast a audio_stream to audio_stream_out pointer in contexts
where it's known the audio_stream references an audio_stream_out.

"
      end

      attribute 15494711 "get_latency"
	public explicit_type "/** * Return the audio hardware driver estimated latency in milliseconds. */ uint32_t (*)(const struct audio_stream_out *stream)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Return the audio hardware driver estimated latency in milliseconds.
     */
    uint32_t (*${name})(const struct audio_stream_out *stream)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Return the audio hardware driver estimated latency in milliseconds.

"
      end

      attribute 15494839 "set_volume"
	public explicit_type "/** * Use this method in situations where audio mixing is done in the * hardware. This method serves as a direct interface with hardware, * allowing you to directly set the volume as apposed to via the framework. * This method might produce multiple PCM outputs or hardware accelerated * codecs, such as MP3 or AAC. */ int (*)(struct audio_stream_out *stream, float left, float right)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Use this method in situations where audio mixing is done in the
     * hardware. This method serves as a direct interface with hardware,
     * allowing you to directly set the volume as apposed to via the framework.
     * This method might produce multiple PCM outputs or hardware accelerated
     * codecs, such as MP3 or AAC.
     */
    int (*${name})(struct audio_stream_out *stream, float left, float right)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Use this method in situations where audio mixing is done in the
hardware. This method serves as a direct interface with hardware,
allowing you to directly set the volume as apposed to via the framework.
This method might produce multiple PCM outputs or hardware accelerated
codecs, such as MP3 or AAC.

"
      end

      attribute 15494967 "write"
	public explicit_type "/** * Write audio buffer to driver. Returns number of bytes written, or a * negative status_t. If at least one frame was written successfully prior to the error, * it is suggested that the driver return that successful (short) byte count * and then return an error in the subsequent call. * * If set_callback() has previously been called to enable non-blocking mode * the write() is not allowed to block. It must write only the number of * bytes that currently fit in the driver/hardware buffer and then return * this byte count. If this is less than the requested write size the * callback function must be called when more space is available in the * driver/hardware buffer. */ ssize_t (*)(struct audio_stream_out *stream, const void* buffer, size_t bytes)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Write audio buffer to driver. Returns number of bytes written, or a
     * negative status_t. If at least one frame was written successfully prior to the error,
     * it is suggested that the driver return that successful (short) byte count
     * and then return an error in the subsequent call.
     *
     * If set_callback() has previously been called to enable non-blocking mode
     * the write() is not allowed to block. It must write only the number of
     * bytes that currently fit in the driver/hardware buffer and then return
     * this byte count. If this is less than the requested write size the
     * callback function must be called when more space is available in the
     * driver/hardware buffer.
     */
    ssize_t (*${name})(struct audio_stream_out *stream, const void* buffer,
                     size_t bytes)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Write audio buffer to driver. Returns number of bytes written, or a
negative status_t. If at least one frame was written successfully prior to the error,
it is suggested that the driver return that successful (short) byte count
and then return an error in the subsequent call.

If set_callback() has previously been called to enable non-blocking mode
the write() is not allowed to block. It must write only the number of
bytes that currently fit in the driver/hardware buffer and then return
this byte count. If this is less than the requested write size the
callback function must be called when more space is available in the
driver/hardware buffer.

"
      end

      attribute 15495095 "get_render_position"
	public explicit_type "/* return the number of audio frames written by the audio dsp to DAC since * the output has exited standby */ int (*)(const struct audio_stream_out *stream, uint32_t *dsp_frames)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* return the number of audio frames written by the audio dsp to DAC since
     * the output has exited standby
     */
    int (*${name})(const struct audio_stream_out *stream,
                               uint32_t *dsp_frames)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " return the number of audio frames written by the audio dsp to DAC since
the output has exited standby

"
      end

      attribute 15495223 "get_next_write_timestamp"
	public explicit_type "/** * get the local time at which the next write to the audio driver will be presented. * The units are microseconds, where the epoch is decided by the local audio HAL. */ int (*)(const struct audio_stream_out *stream, int64_t *timestamp)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * get the local time at which the next write to the audio driver will be presented.
     * The units are microseconds, where the epoch is decided by the local audio HAL.
     */
    int (*${name})(const struct audio_stream_out *stream,
                                    int64_t *timestamp)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "get the local time at which the next write to the audio driver will be presented.
The units are microseconds, where the epoch is decided by the local audio HAL.

"
      end

      attribute 15495351 "set_callback"
	public explicit_type "/** * set the callback function for notifying completion of non-blocking * write and drain. * Calling this function implies that all future write() and drain() * must be non-blocking and use the callback to signal completion. */ int (*)(struct audio_stream_out *stream, stream_callback_t callback, void *cookie)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * set the callback function for notifying completion of non-blocking
     * write and drain.
     * Calling this function implies that all future write() and drain()
     * must be non-blocking and use the callback to signal completion.
     */
    int (*${name})(struct audio_stream_out *stream,
            stream_callback_t callback, void *cookie)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "set the callback function for notifying completion of non-blocking
write and drain.
Calling this function implies that all future write() and drain()
must be non-blocking and use the callback to signal completion.

"
      end

      attribute 15495479 "pause"
	public explicit_type "/** * Notifies to the audio driver to stop playback however the queued buffers are * retained by the hardware. Useful for implementing pause/resume. Empty implementation * if not supported however should be implemented for hardware with non-trivial * latency. In the pause state audio hardware could still be using power. User may * consider calling suspend after a timeout. * * Implementation of this function is mandatory for offloaded playback. */ int (*)(struct audio_stream_out* stream)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Notifies to the audio driver to stop playback however the queued buffers are
     * retained by the hardware. Useful for implementing pause/resume. Empty implementation
     * if not supported however should be implemented for hardware with non-trivial
     * latency. In the pause state audio hardware could still be using power. User may
     * consider calling suspend after a timeout.
     *
     * Implementation of this function is mandatory for offloaded playback.
     */
    int (*${name})(struct audio_stream_out* stream)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Notifies to the audio driver to stop playback however the queued buffers are
retained by the hardware. Useful for implementing pause/resume. Empty implementation
if not supported however should be implemented for hardware with non-trivial
latency. In the pause state audio hardware could still be using power. User may
consider calling suspend after a timeout.

Implementation of this function is mandatory for offloaded playback.

"
      end

      attribute 15495607 "resume"
	public explicit_type "/** * Notifies to the audio driver to resume playback following a pause. * Returns error if called without matching pause. * * Implementation of this function is mandatory for offloaded playback. */ int (*)(struct audio_stream_out* stream)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Notifies to the audio driver to resume playback following a pause.
     * Returns error if called without matching pause.
     *
     * Implementation of this function is mandatory for offloaded playback.
     */
    int (*${name})(struct audio_stream_out* stream)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Notifies to the audio driver to resume playback following a pause.
Returns error if called without matching pause.

Implementation of this function is mandatory for offloaded playback.

"
      end

      attribute 15495735 "drain"
	public explicit_type "/** * Requests notification when data buffered by the driver/hardware has * been played. If set_callback() has previously been called to enable * non-blocking mode, the drain() must not block, instead it should return * quickly and completion of the drain is notified through the callback. * If set_callback() has not been called, the drain() must block until * completion. * If type==AUDIO_DRAIN_ALL, the drain completes when all previously written * data has been played. * If type==AUDIO_DRAIN_EARLY_NOTIFY, the drain completes shortly before all * data for the current track has played to allow time for the framework * to perform a gapless track switch. * * Drain must return immediately on stop() and flush() call * * Implementation of this function is mandatory for offloaded playback. */ int (*)(struct audio_stream_out* stream, audio_drain_type_t type )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Requests notification when data buffered by the driver/hardware has
     * been played. If set_callback() has previously been called to enable
     * non-blocking mode, the drain() must not block, instead it should return
     * quickly and completion of the drain is notified through the callback.
     * If set_callback() has not been called, the drain() must block until
     * completion.
     * If type==AUDIO_DRAIN_ALL, the drain completes when all previously written
     * data has been played.
     * If type==AUDIO_DRAIN_EARLY_NOTIFY, the drain completes shortly before all
     * data for the current track has played to allow time for the framework
     * to perform a gapless track switch.
     *
     * Drain must return immediately on stop() and flush() call
     *
     * Implementation of this function is mandatory for offloaded playback.
     */
    int (*${name})(struct audio_stream_out* stream, audio_drain_type_t type )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Requests notification when data buffered by the driver/hardware has
been played. If set_callback() has previously been called to enable
non-blocking mode, the drain() must not block, instead it should return
quickly and completion of the drain is notified through the callback.
If set_callback() has not been called, the drain() must block until
completion.
If type==AUDIO_DRAIN_ALL, the drain completes when all previously written
data has been played.
If type==AUDIO_DRAIN_EARLY_NOTIFY, the drain completes shortly before all
data for the current track has played to allow time for the framework
to perform a gapless track switch.

Drain must return immediately on stop() and flush() call

Implementation of this function is mandatory for offloaded playback.

"
      end

      attribute 15495863 "flush"
	public explicit_type "/** * Notifies to the audio driver to flush the queued data. Stream must already * be paused before calling flush(). * * Implementation of this function is mandatory for offloaded playback. */ int (*)(struct audio_stream_out* stream)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Notifies to the audio driver to flush the queued data. Stream must already
     * be paused before calling flush().
     *
     * Implementation of this function is mandatory for offloaded playback.
     */
   int (*${name})(struct audio_stream_out* stream)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Notifies to the audio driver to flush the queued data. Stream must already
be paused before calling flush().

Implementation of this function is mandatory for offloaded playback.

"
      end

      attribute 15495991 "get_presentation_position"
	public explicit_type "/** * Return a recent count of the number of audio frames presented to an external observer. * This excludes frames which have been written but are still in the pipeline. * The count is not reset to zero when output enters standby. * Also returns the value of CLOCK_MONOTONIC as of this presentation count. * The returned count is expected to be 'recent', * but does not need to be the most recent possible value. * However, the associated time should correspond to whatever count is returned. * Example: assume that N+M frames have been presented, where M is a 'small' number. * Then it is permissible to return N instead of N+M, * and the timestamp should correspond to N rather than N+M. * The terms 'recent' and 'small' are not defined. * They reflect the quality of the implementation. * * 3.0 and higher only. */ int (*)(const struct audio_stream_out *stream, uint64_t *frames, struct timespec *timestamp)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Return a recent count of the number of audio frames presented to an external observer.
     * This excludes frames which have been written but are still in the pipeline.
     * The count is not reset to zero when output enters standby.
     * Also returns the value of CLOCK_MONOTONIC as of this presentation count.
     * The returned count is expected to be 'recent',
     * but does not need to be the most recent possible value.
     * However, the associated time should correspond to whatever count is returned.
     * Example:  assume that N+M frames have been presented, where M is a 'small' number.
     * Then it is permissible to return N instead of N+M,
     * and the timestamp should correspond to N rather than N+M.
     * The terms 'recent' and 'small' are not defined.
     * They reflect the quality of the implementation.
     *
     * 3.0 and higher only.
     */
    int (*${name})(const struct audio_stream_out *stream,
                               uint64_t *frames, struct timespec *timestamp)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Return a recent count of the number of audio frames presented to an external observer.
This excludes frames which have been written but are still in the pipeline.
The count is not reset to zero when output enters standby.
Also returns the value of CLOCK_MONOTONIC as of this presentation count.
The returned count is expected to be 'recent',
but does not need to be the most recent possible value.
However, the associated time should correspond to whatever count is returned.
Example:  assume that N+M frames have been presented, where M is a 'small' number.
Then it is permissible to return N instead of N+M,
and the timestamp should correspond to N rather than N+M.
The terms 'recent' and 'small' are not defined.
They reflect the quality of the implementation.

3.0 and higher only.

"
      end
    end

    class 4306871 "audio_stream_out_t"
      visibility package stereotype "typedef" base_type class_ref 4306743 // audio_stream_out
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8294839 // <dependency>
	relation 8294839 -_->
	  a public
	    cpp default "#include in source"
	    classrelation_ref 8294839 // <dependency>
	  b parent class_ref 4306743 // audio_stream_out
      end
    end

    class 4306999 "audio_stream_in"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15496119 "common"
	public explicit_type "audio_stream"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Common methods of the audio stream in.  This *must* be the first member of audio_stream_in
as users of this structure will cast a audio_stream to audio_stream_in pointer in contexts
where it's known the audio_stream references an audio_stream_in.

"
      end

      attribute 15496247 "set_gain"
	public explicit_type "/** set the input gain for the audio driver. This method is for * for future use */ int (*)(struct audio_stream_in *stream, float gain)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** set the input gain for the audio driver. This method is for
     *  for future use */
    int (*${name})(struct audio_stream_in *stream, float gain)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " set the input gain for the audio driver. This method is for
 for future use 
"
      end

      attribute 15496375 "read"
	public explicit_type "/** Read audio buffer in from audio driver. Returns number of bytes read, or a * negative status_t. If at least one frame was read prior to the error, * read should return that byte count and then return an error in the subsequent call. */ ssize_t (*)(struct audio_stream_in *stream, void* buffer, size_t bytes)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Read audio buffer in from audio driver. Returns number of bytes read, or a
     *  negative status_t. If at least one frame was read prior to the error,
     *  read should return that byte count and then return an error in the subsequent call.
     */
    ssize_t (*${name})(struct audio_stream_in *stream, void* buffer,
                    size_t bytes)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Read audio buffer in from audio driver. Returns number of bytes read, or a
 negative status_t. If at least one frame was read prior to the error,
 read should return that byte count and then return an error in the subsequent call.

"
      end

      attribute 15496503 "get_input_frames_lost"
	public explicit_type "/** * Return the amount of input frames lost in the audio driver since the * last call of this function. * Audio driver is expected to reset the value to 0 and restart counting * upon returning the current value by this function call. * Such loss typically occurs when the user space process is blocked * longer than the capacity of audio driver buffers. * * Unit: the number of input audio frames */ uint32_t (*)(struct audio_stream_in *stream)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Return the amount of input frames lost in the audio driver since the
     * last call of this function.
     * Audio driver is expected to reset the value to 0 and restart counting
     * upon returning the current value by this function call.
     * Such loss typically occurs when the user space process is blocked
     * longer than the capacity of audio driver buffers.
     *
     * Unit: the number of input audio frames
     */
    uint32_t (*${name})(struct audio_stream_in *stream)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Return the amount of input frames lost in the audio driver since the
last call of this function.
Audio driver is expected to reset the value to 0 and restart counting
upon returning the current value by this function call.
Such loss typically occurs when the user space process is blocked
longer than the capacity of audio driver buffers.

Unit: the number of input audio frames

"
      end

      attribute 15496631 "get_capture_position"
	public explicit_type "/** * Return a recent count of the number of audio frames received and * the clock time associated with that frame count. * * frames is the total frame count received. This should be as early in * the capture pipeline as possible. In general, * frames should be non-negative and should not go \"backwards\". * * time is the clock MONOTONIC time when frames was measured. In general, * time should be a positive quantity and should not go \"backwards\". * * The status returned is 0 on success, -ENOSYS if the device is not * ready/available, or -EINVAL if the arguments are null or otherwise invalid. */ int (*)(const struct audio_stream_in *stream, int64_t *frames, int64_t *time)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Return a recent count of the number of audio frames received and
     * the clock time associated with that frame count.
     *
     * frames is the total frame count received. This should be as early in
     *     the capture pipeline as possible. In general,
     *     frames should be non-negative and should not go \"backwards\".
     *
     * time is the clock MONOTONIC time when frames was measured. In general,
     *     time should be a positive quantity and should not go \"backwards\".
     *
     * The status returned is 0 on success, -ENOSYS if the device is not
     * ready/available, or -EINVAL if the arguments are null or otherwise invalid.
     */
    int (*${name})(const struct audio_stream_in *stream,
                                int64_t *frames, int64_t *time)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Return a recent count of the number of audio frames received and
the clock time associated with that frame count.

frames is the total frame count received. This should be as early in
    the capture pipeline as possible. In general,
    frames should be non-negative and should not go \"backwards\".

time is the clock MONOTONIC time when frames was measured. In general,
    time should be a positive quantity and should not go \"backwards\".

The status returned is 0 on success, -ENOSYS if the device is not
ready/available, or -EINVAL if the arguments are null or otherwise invalid.

"
      end
    end

    class 4307127 "audio_stream_in_t"
      visibility package stereotype "typedef" base_type class_ref 4306999 // audio_stream_in
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8294967 // <dependency>
	relation 8294967 -_->
	  a public
	    cpp default "#include in source"
	    classrelation_ref 8294967 // <dependency>
	  b parent class_ref 4306999 // audio_stream_in
      end
    end

    class 4307255 "audio_module"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Every hardware module must have a data structure named HAL_MODULE_INFO_SYM
and the fields of this data structure must begin with hw_module_t
followed by module specific information.
"
      classrelation 8295095 // common (<directional composition>)
	relation 8295095 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8295095 // common (<directional composition>)
	  b parent class_ref 4305335 // hw_module_t
      end
    end

    class 4307383 "audio_hw_device"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8295223 // common (<directional composition>)
	relation 8295223 *-->
	  a role_name "common" public
	    comment "Common methods of the audio device.  This *must* be the first member of audio_hw_device
as users of this structure will cast a hw_device_t to audio_hw_device pointer in contexts
where it's known the hw_device_t references an audio_hw_device.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8295223 // common (<directional composition>)
	  b parent class_ref 4305975 // hw_device_t
      end

      attribute 15496759 "get_supported_devices"
	public explicit_type "/** * used by audio flinger to enumerate what devices are supported by * each audio_hw_device implementation. * * Return value is a bitmask of 1 or more values of audio_devices_t * * NOTE: audio HAL implementations starting with * AUDIO_DEVICE_API_VERSION_2_0 do not implement this function. * All supported devices should be listed in audio_policy.conf * file and the audio policy manager must choose the appropriate * audio module based on information in this file. */ uint32_t (*)(const struct audio_hw_device *dev)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * used by audio flinger to enumerate what devices are supported by
     * each audio_hw_device implementation.
     *
     * Return value is a bitmask of 1 or more values of audio_devices_t
     *
     * NOTE: audio HAL implementations starting with
     * AUDIO_DEVICE_API_VERSION_2_0 do not implement this function.
     * All supported devices should be listed in audio_policy.conf
     * file and the audio policy manager must choose the appropriate
     * audio module based on information in this file.
     */
    uint32_t (*${name})(const struct audio_hw_device *dev)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "used by audio flinger to enumerate what devices are supported by
each audio_hw_device implementation.

Return value is a bitmask of 1 or more values of audio_devices_t

NOTE: audio HAL implementations starting with
AUDIO_DEVICE_API_VERSION_2_0 do not implement this function.
All supported devices should be listed in audio_policy.conf
file and the audio policy manager must choose the appropriate
audio module based on information in this file.

"
      end

      attribute 15496887 "init_check"
	public explicit_type "/** * check to see if the audio hardware interface has been initialized. * returns 0 on success, -ENODEV on failure. */ int (*)(const struct audio_hw_device *dev)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * check to see if the audio hardware interface has been initialized.
     * returns 0 on success, -ENODEV on failure.
     */
    int (*${name})(const struct audio_hw_device *dev)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "check to see if the audio hardware interface has been initialized.
returns 0 on success, -ENODEV on failure.

"
      end

      attribute 15497015 "set_voice_volume"
	public explicit_type "/** set the audio volume of a voice call. Range is between 0.0 and 1.0 */ int (*)(struct audio_hw_device *dev, float volume)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** set the audio volume of a voice call. Range is between 0.0 and 1.0 */
    int (*${name})(struct audio_hw_device *dev, float volume)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " set the audio volume of a voice call. Range is between 0.0 and 1.0 
"
      end

      attribute 15497143 "set_master_volume"
	public explicit_type "/** * set the audio volume for all audio activities other than voice call. * Range between 0.0 and 1.0. If any value other than 0 is returned, * the software mixer will emulate this capability. */ int (*)(struct audio_hw_device *dev, float volume)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * set the audio volume for all audio activities other than voice call.
     * Range between 0.0 and 1.0. If any value other than 0 is returned,
     * the software mixer will emulate this capability.
     */
    int (*${name})(struct audio_hw_device *dev, float volume)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "set the audio volume for all audio activities other than voice call.
Range between 0.0 and 1.0. If any value other than 0 is returned,
the software mixer will emulate this capability.

"
      end

      attribute 15497271 "get_master_volume"
	public explicit_type "/** * Get the current master volume value for the HAL, if the HAL supports * master volume control. AudioFlinger will query this value from the * primary audio HAL when the service starts and use the value for setting * the initial master volume across all HALs. HALs which do not support * this method may leave it set to NULL. */ int (*)(struct audio_hw_device *dev, float *volume)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Get the current master volume value for the HAL, if the HAL supports
     * master volume control.  AudioFlinger will query this value from the
     * primary audio HAL when the service starts and use the value for setting
     * the initial master volume across all HALs.  HALs which do not support
     * this method may leave it set to NULL.
     */
    int (*${name})(struct audio_hw_device *dev, float *volume)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Get the current master volume value for the HAL, if the HAL supports
master volume control.  AudioFlinger will query this value from the
primary audio HAL when the service starts and use the value for setting
the initial master volume across all HALs.  HALs which do not support
this method may leave it set to NULL.

"
      end

      attribute 15497399 "set_mode"
	public explicit_type "/** * set_mode is called when the audio mode changes. AUDIO_MODE_NORMAL mode * is for standard audio playback, AUDIO_MODE_RINGTONE when a ringtone is * playing, and AUDIO_MODE_IN_CALL when a call is in progress. */ int (*)(struct audio_hw_device *dev, audio_mode_t mode)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * set_mode is called when the audio mode changes. AUDIO_MODE_NORMAL mode
     * is for standard audio playback, AUDIO_MODE_RINGTONE when a ringtone is
     * playing, and AUDIO_MODE_IN_CALL when a call is in progress.
     */
    int (*${name})(struct audio_hw_device *dev, audio_mode_t mode)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "set_mode is called when the audio mode changes. AUDIO_MODE_NORMAL mode
is for standard audio playback, AUDIO_MODE_RINGTONE when a ringtone is
playing, and AUDIO_MODE_IN_CALL when a call is in progress.

"
      end

      attribute 15497527 "set_mic_mute"
	public explicit_type "/* mic mute */ int (*)(struct audio_hw_device *dev, bool state)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* mic mute */
    int (*${name})(struct audio_hw_device *dev, bool state)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " mic mute 
"
      end

      attribute 15497655 "get_mic_mute"
	public explicit_type "int (*)(const struct audio_hw_device *dev, bool *state)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    int (*${name})(const struct audio_hw_device *dev, bool *state)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15497783 "set_parameters"
	public explicit_type "/* set/get global audio parameters */ int (*)(struct audio_hw_device *dev, const char *kv_pairs)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* set/get global audio parameters */
    int (*${name})(struct audio_hw_device *dev, const char *kv_pairs)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " set/get global audio parameters 
"
      end

      attribute 15497911 "get_parameters"
	public explicit_type "/* * Returns a pointer to a heap allocated string. The caller is responsible * for freeing the memory for it using free(). */ char * (*)(const struct audio_hw_device *dev, const char *keys)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * Returns a pointer to a heap allocated string. The caller is responsible
     * for freeing the memory for it using free().
     */
    char * (*${name})(const struct audio_hw_device *dev,
                             const char *keys)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Returns a pointer to a heap allocated string. The caller is responsible
for freeing the memory for it using free().

"
      end

      attribute 15498039 "get_input_buffer_size"
	public explicit_type "/* Returns audio input buffer size according to parameters passed or * 0 if one of the parameters is not supported. * See also get_buffer_size which is for a particular stream. */ size_t (*)(const struct audio_hw_device *dev, const struct audio_config *config)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* Returns audio input buffer size according to parameters passed or
     * 0 if one of the parameters is not supported.
     * See also get_buffer_size which is for a particular stream.
     */
    size_t (*${name})(const struct audio_hw_device *dev,
                                    const struct audio_config *config)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Returns audio input buffer size according to parameters passed or
0 if one of the parameters is not supported.
See also get_buffer_size which is for a particular stream.

"
      end

      attribute 15498167 "open_output_stream"
	public explicit_type "/** This method creates and opens the audio hardware output stream. * The \"address\" parameter qualifies the \"devices\" audio device type if needed. * The format format depends on the device type: * - Bluetooth devices use the MAC address of the device in the form \"00:11:22:AA:BB:CC\" * - USB devices use the ALSA card and device numbers in the form \"card=X;device=Y\" * - Other devices may use a number or any other string. */ int (*)(struct audio_hw_device *dev, audio_io_handle_t handle, audio_devices_t devices, audio_output_flags_t flags, struct audio_config *config, struct audio_stream_out **stream_out, const char *address)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** This method creates and opens the audio hardware output stream.
     * The \"address\" parameter qualifies the \"devices\" audio device type if needed.
     * The format format depends on the device type:
     * - Bluetooth devices use the MAC address of the device in the form \"00:11:22:AA:BB:CC\"
     * - USB devices use the ALSA card and device numbers in the form  \"card=X;device=Y\"
     * - Other devices may use a number or any other string.
     */

    int (*${name})(struct audio_hw_device *dev,
                              audio_io_handle_t handle,
                              audio_devices_t devices,
                              audio_output_flags_t flags,
                              struct audio_config *config,
                              struct audio_stream_out **stream_out,
                              const char *address)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " This method creates and opens the audio hardware output stream.
The \"address\" parameter qualifies the \"devices\" audio device type if needed.
The format format depends on the device type:
- Bluetooth devices use the MAC address of the device in the form \"00:11:22:AA:BB:CC\"
- USB devices use the ALSA card and device numbers in the form  \"card=X;device=Y\"
- Other devices may use a number or any other string.

"
      end

      attribute 15498295 "close_output_stream"
	public explicit_type "void (*)(struct audio_hw_device *dev, struct audio_stream_out* stream_out)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    void (*${name})(struct audio_hw_device *dev,
                                struct audio_stream_out* stream_out)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15498423 "open_input_stream"
	public explicit_type "/** This method creates and opens the audio hardware input stream */ int (*)(struct audio_hw_device *dev, audio_io_handle_t handle, audio_devices_t devices, struct audio_config *config, struct audio_stream_in **stream_in, audio_input_flags_t flags, const char *address, audio_source_t source)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** This method creates and opens the audio hardware input stream */
    int (*${name})(struct audio_hw_device *dev,
                             audio_io_handle_t handle,
                             audio_devices_t devices,
                             struct audio_config *config,
                             struct audio_stream_in **stream_in,
                             audio_input_flags_t flags,
                             const char *address,
                             audio_source_t source)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " This method creates and opens the audio hardware input stream 
"
      end

      attribute 15498551 "close_input_stream"
	public explicit_type "void (*)(struct audio_hw_device *dev, struct audio_stream_in *stream_in)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    void (*${name})(struct audio_hw_device *dev,
                               struct audio_stream_in *stream_in)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15498679 "dump"
	public explicit_type "/** This method dumps the state of the audio hardware */ int (*)(const struct audio_hw_device *dev, int fd)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** This method dumps the state of the audio hardware */
    int (*${name})(const struct audio_hw_device *dev, int fd)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " This method dumps the state of the audio hardware 
"
      end

      attribute 15498807 "set_master_mute"
	public explicit_type "/** * set the audio mute status for all audio activities. If any value other * than 0 is returned, the software mixer will emulate this capability. */ int (*)(struct audio_hw_device *dev, bool mute)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * set the audio mute status for all audio activities.  If any value other
     * than 0 is returned, the software mixer will emulate this capability.
     */
    int (*${name})(struct audio_hw_device *dev, bool mute)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "set the audio mute status for all audio activities.  If any value other
than 0 is returned, the software mixer will emulate this capability.

"
      end

      attribute 15498935 "get_master_mute"
	public explicit_type "/** * Get the current master mute status for the HAL, if the HAL supports * master mute control. AudioFlinger will query this value from the primary * audio HAL when the service starts and use the value for setting the * initial master mute across all HALs. HALs which do not support this * method may leave it set to NULL. */ int (*)(struct audio_hw_device *dev, bool *mute)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Get the current master mute status for the HAL, if the HAL supports
     * master mute control.  AudioFlinger will query this value from the primary
     * audio HAL when the service starts and use the value for setting the
     * initial master mute across all HALs.  HALs which do not support this
     * method may leave it set to NULL.
     */
    int (*${name})(struct audio_hw_device *dev, bool *mute)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Get the current master mute status for the HAL, if the HAL supports
master mute control.  AudioFlinger will query this value from the primary
audio HAL when the service starts and use the value for setting the
initial master mute across all HALs.  HALs which do not support this
method may leave it set to NULL.

"
      end

      attribute 15499063 "create_audio_patch"
	public explicit_type "/** * Routing control */ /* Creates an audio patch between several source and sink ports. * The handle is allocated by the HAL and should be unique for this * audio HAL module. */ int (*)(struct audio_hw_device *dev, unsigned int num_sources, const struct audio_port_config *sources, unsigned int num_sinks, const struct audio_port_config *sinks, audio_patch_handle_t *handle)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Routing control
     */

    /* Creates an audio patch between several source and sink ports.
     * The handle is allocated by the HAL and should be unique for this
     * audio HAL module. */
    int (*${name})(struct audio_hw_device *dev,
                               unsigned int num_sources,
                               const struct audio_port_config *sources,
                               unsigned int num_sinks,
                               const struct audio_port_config *sinks,
                               audio_patch_handle_t *handle)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Routing control

 Creates an audio patch between several source and sink ports.
The handle is allocated by the HAL and should be unique for this
audio HAL module. 
"
      end

      attribute 15499191 "release_audio_patch"
	public explicit_type "/* Release an audio patch */ int (*)(struct audio_hw_device *dev, audio_patch_handle_t handle)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* Release an audio patch */
    int (*${name})(struct audio_hw_device *dev,
                               audio_patch_handle_t handle)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Release an audio patch 
"
      end

      attribute 15499319 "get_audio_port"
	public explicit_type "/* Fills the list of supported attributes for a given audio port. * As input, \"port\" contains the information (type, role, address etc...) * needed by the HAL to identify the port. * As output, \"port\" contains possible attributes (sampling rates, formats, * channel masks, gain controllers...) for this port. */ int (*)(struct audio_hw_device *dev, struct audio_port *port)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* Fills the list of supported attributes for a given audio port.
     * As input, \"port\" contains the information (type, role, address etc...)
     * needed by the HAL to identify the port.
     * As output, \"port\" contains possible attributes (sampling rates, formats,
     * channel masks, gain controllers...) for this port.
     */
    int (*${name})(struct audio_hw_device *dev,
                          struct audio_port *port)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Fills the list of supported attributes for a given audio port.
As input, \"port\" contains the information (type, role, address etc...)
needed by the HAL to identify the port.
As output, \"port\" contains possible attributes (sampling rates, formats,
channel masks, gain controllers...) for this port.

"
      end

      attribute 15499447 "set_audio_port_config"
	public explicit_type "/* Set audio port configuration */ int (*)(struct audio_hw_device *dev, const struct audio_port_config *config)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* Set audio port configuration */
    int (*${name})(struct audio_hw_device *dev,
                         const struct audio_port_config *config)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Set audio port configuration 
"
      end
    end

    class 4307511 "audio_hw_device_t"
      visibility package stereotype "typedef" base_type class_ref 4307383 // audio_hw_device
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8295351 // <dependency>
	relation 8295351 -_->
	  a public
	    cpp default "#include in source"
	    classrelation_ref 8295351 // <dependency>
	  b parent class_ref 4307383 // audio_hw_device
      end
    end

    class 4307639 "effect_descriptor_s"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The effect descriptor contains necessary information to facilitate the enumeration of the effect
 engines present in a library."
      attribute 15499575 "type"
	public explicit_type "effect_uuid_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " UUID of to the OpenSL ES interface implemented by this effect"
      end

      attribute 15499703 "uuid"
	public explicit_type "effect_uuid_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " UUID for this particular implementation"
      end

      attribute 15499831 "name"
	public explicit_type "char"
	multiplicity "[EFFECT_STRING_LEN_MAX]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " human readable effect name"
      end

      attribute 15499959 "implementor"
	public explicit_type "char"
	multiplicity "[EFFECT_STRING_LEN_MAX]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " human readable effect implementor name"
      end
    end

    class 4307767 "effect_descriptor_t"
      visibility package stereotype "typedef" base_type class_ref 4307639 // effect_descriptor_s
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4307895 "effect_interface_s"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Effect control interface definition"
      attribute 15500087 "process"
	public explicit_type "//////////////////////////////////////////////////////////////////////////////// // // Function: process // // Description: Effect process function. Takes input samples as specified // (count and location) in input buffer descriptor and output processed // samples as specified in output buffer descriptor. If the buffer descriptor // is not specified the function must use either the buffer or the // buffer provider function installed by the EFFECT_CMD_SET_CONFIG command. // The effect framework will call the process() function after the EFFECT_CMD_ENABLE // command is received and until the EFFECT_CMD_DISABLE is received. When the engine // receives the EFFECT_CMD_DISABLE command it should turn off the effect gracefully // and when done indicate that it is OK to stop calling the process() function by // returning the -ENODATA status. // // NOTE: the process() function implementation should be \"real-time safe\" that is // it should not perform blocking calls: malloc/free, sleep, read/write/open/close, // pthread_cond_wait/pthread_mutex_lock... // // Input: // self: handle to the effect interface this function // is called on. // inBuffer: buffer descriptor indicating where to read samples to process. // If NULL, use the configuration passed by EFFECT_CMD_SET_CONFIG command. // // outBuffer: buffer descriptor indicating where to write processed samples. // If NULL, use the configuration passed by EFFECT_CMD_SET_CONFIG command. // // Output: // returned value: 0 successful operation // -ENODATA the engine has finished the disable phase and the framework // can stop calling process() // -EINVAL invalid interface handle or // invalid input/output buffer description //////////////////////////////////////////////////////////////////////////////// int32_t (*)(effect_handle_t self, audio_buffer_t *inBuffer, audio_buffer_t *outBuffer)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    ////////////////////////////////////////////////////////////////////////////////
    //
    //    Function:       process
    //
    //    Description:    Effect process function. Takes input samples as specified
    //          (count and location) in input buffer descriptor and output processed
    //          samples as specified in output buffer descriptor. If the buffer descriptor
    //          is not specified the function must use either the buffer or the
    //          buffer provider function installed by the EFFECT_CMD_SET_CONFIG command.
    //          The effect framework will call the process() function after the EFFECT_CMD_ENABLE
    //          command is received and until the EFFECT_CMD_DISABLE is received. When the engine
    //          receives the EFFECT_CMD_DISABLE command it should turn off the effect gracefully
    //          and when done indicate that it is OK to stop calling the process() function by
    //          returning the -ENODATA status.
    //
    //    NOTE: the process() function implementation should be \"real-time safe\" that is
    //      it should not perform blocking calls: malloc/free, sleep, read/write/open/close,
    //      pthread_cond_wait/pthread_mutex_lock...
    //
    //    Input:
    //          self:       handle to the effect interface this function
    //              is called on.
    //          inBuffer:   buffer descriptor indicating where to read samples to process.
    //              If NULL, use the configuration passed by EFFECT_CMD_SET_CONFIG command.
    //
    //          outBuffer:   buffer descriptor indicating where to write processed samples.
    //              If NULL, use the configuration passed by EFFECT_CMD_SET_CONFIG command.
    //
    //    Output:
    //        returned value:    0 successful operation
    //                          -ENODATA the engine has finished the disable phase and the framework
    //                                  can stop calling process()
    //                          -EINVAL invalid interface handle or
    //                                  invalid input/output buffer description
    ////////////////////////////////////////////////////////////////////////////////
    int32_t (*${name})(effect_handle_t self,
                       audio_buffer_t *inBuffer,
                       audio_buffer_t *outBuffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "//////////////////////////////////////////////////////////////////////////////

    Function:       process

    Description:    Effect process function. Takes input samples as specified
          (count and location) in input buffer descriptor and output processed
          samples as specified in output buffer descriptor. If the buffer descriptor
          is not specified the function must use either the buffer or the
          buffer provider function installed by the EFFECT_CMD_SET_CONFIG command.
          The effect framework will call the process() function after the EFFECT_CMD_ENABLE
          command is received and until the EFFECT_CMD_DISABLE is received. When the engine
          receives the EFFECT_CMD_DISABLE command it should turn off the effect gracefully
          and when done indicate that it is OK to stop calling the process() function by
          returning the -ENODATA status.

    NOTE: the process() function implementation should be \"real-time safe\" that is
      it should not perform blocking calls: malloc/free, sleep, read/write/open/close,
      pthread_cond_wait/pthread_mutex_lock...

    Input:
          self:       handle to the effect interface this function
              is called on.
          inBuffer:   buffer descriptor indicating where to read samples to process.
              If NULL, use the configuration passed by EFFECT_CMD_SET_CONFIG command.

          outBuffer:   buffer descriptor indicating where to write processed samples.
              If NULL, use the configuration passed by EFFECT_CMD_SET_CONFIG command.

    Output:
        returned value:    0 successful operation
                          -ENODATA the engine has finished the disable phase and the framework
                                  can stop calling process()
                          -EINVAL invalid interface handle or
                                  invalid input/output buffer description
//////////////////////////////////////////////////////////////////////////////
"
      end

      attribute 15500215 "command"
	public explicit_type "//////////////////////////////////////////////////////////////////////////////// // // Function: command // // Description: Send a command and receive a response to/from effect engine. // // Input: // self: handle to the effect interface this function // is called on. // cmdCode: command code: the command can be a standardized command defined in // effect_command_e (see below) or a proprietary command. // cmdSize: size of command in bytes // pCmdData: pointer to command data // pReplyData: pointer to reply data // // Input/Output: // replySize: maximum size of reply data as input // actual size of reply data as output // // Output: // returned value: 0 successful operation // -EINVAL invalid interface handle or // invalid command/reply size or format according to // command code // The return code should be restricted to indicate problems related to this API // specification. Status related to the execution of a particular command should be // indicated as part of the reply field. // // *pReplyData updated with command response // //////////////////////////////////////////////////////////////////////////////// int32_t (*)(effect_handle_t self, uint32_t cmdCode, uint32_t cmdSize, void *pCmdData, uint32_t *replySize, void *pReplyData)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    ////////////////////////////////////////////////////////////////////////////////
    //
    //    Function:       command
    //
    //    Description:    Send a command and receive a response to/from effect engine.
    //
    //    Input:
    //          self:       handle to the effect interface this function
    //              is called on.
    //          cmdCode:    command code: the command can be a standardized command defined in
    //              effect_command_e (see below) or a proprietary command.
    //          cmdSize:    size of command in bytes
    //          pCmdData:   pointer to command data
    //          pReplyData: pointer to reply data
    //
    //    Input/Output:
    //          replySize: maximum size of reply data as input
    //                      actual size of reply data as output
    //
    //    Output:
    //          returned value: 0       successful operation
    //                          -EINVAL invalid interface handle or
    //                                  invalid command/reply size or format according to
    //                                  command code
    //              The return code should be restricted to indicate problems related to this API
    //              specification. Status related to the execution of a particular command should be
    //              indicated as part of the reply field.
    //
    //          *pReplyData updated with command response
    //
    ////////////////////////////////////////////////////////////////////////////////
    int32_t (*${name})(effect_handle_t self,
                       uint32_t cmdCode,
                       uint32_t cmdSize,
                       void *pCmdData,
                       uint32_t *replySize,
                       void *pReplyData)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "//////////////////////////////////////////////////////////////////////////////

    Function:       command

    Description:    Send a command and receive a response to/from effect engine.

    Input:
          self:       handle to the effect interface this function
              is called on.
          cmdCode:    command code: the command can be a standardized command defined in
              effect_command_e (see below) or a proprietary command.
          cmdSize:    size of command in bytes
          pCmdData:   pointer to command data
          pReplyData: pointer to reply data

    Input/Output:
          replySize: maximum size of reply data as input
                      actual size of reply data as output

    Output:
          returned value: 0       successful operation
                          -EINVAL invalid interface handle or
                                  invalid command/reply size or format according to
                                  command code
              The return code should be restricted to indicate problems related to this API
              specification. Status related to the execution of a particular command should be
              indicated as part of the reply field.

          *pReplyData updated with command response

//////////////////////////////////////////////////////////////////////////////
"
      end

      attribute 15500343 "get_descriptor"
	public explicit_type "//////////////////////////////////////////////////////////////////////////////// // // Function: get_descriptor // // Description: Returns the effect descriptor // // Input: // self: handle to the effect interface this function // is called on. // // Input/Output: // pDescriptor: address where to return the effect descriptor. // // Output: // returned value: 0 successful operation. // -EINVAL invalid interface handle or invalid pDescriptor // *pDescriptor: updated with the effect descriptor. // //////////////////////////////////////////////////////////////////////////////// int32_t (*)(effect_handle_t self, effect_descriptor_t *pDescriptor)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    ////////////////////////////////////////////////////////////////////////////////
    //
    //    Function:        get_descriptor
    //
    //    Description:    Returns the effect descriptor
    //
    //    Input:
    //          self:       handle to the effect interface this function
    //              is called on.
    //
    //    Input/Output:
    //          pDescriptor:    address where to return the effect descriptor.
    //
    //    Output:
    //        returned value:    0          successful operation.
    //                          -EINVAL     invalid interface handle or invalid pDescriptor
    //        *pDescriptor:     updated with the effect descriptor.
    //
    ////////////////////////////////////////////////////////////////////////////////
    int32_t (*${name})(effect_handle_t self,
                              effect_descriptor_t *pDescriptor)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "//////////////////////////////////////////////////////////////////////////////

    Function:        get_descriptor

    Description:    Returns the effect descriptor

    Input:
          self:       handle to the effect interface this function
              is called on.

    Input/Output:
          pDescriptor:    address where to return the effect descriptor.

    Output:
        returned value:    0          successful operation.
                          -EINVAL     invalid interface handle or invalid pDescriptor
        *pDescriptor:     updated with the effect descriptor.

//////////////////////////////////////////////////////////////////////////////
"
      end

      attribute 15500471 "process_reverse"
	public explicit_type "//////////////////////////////////////////////////////////////////////////////// // // Function: process_reverse // // Description: Process reverse stream function. This function is used to pass // a reference stream to the effect engine. If the engine does not need a reference // stream, this function pointer can be set to NULL. // This function would typically implemented by an Echo Canceler. // // Input: // self: handle to the effect interface this function // is called on. // inBuffer: buffer descriptor indicating where to read samples to process. // If NULL, use the configuration passed by EFFECT_CMD_SET_CONFIG_REVERSE command. // // outBuffer: buffer descriptor indicating where to write processed samples. // If NULL, use the configuration passed by EFFECT_CMD_SET_CONFIG_REVERSE command. // If the buffer and buffer provider in the configuration received by // EFFECT_CMD_SET_CONFIG_REVERSE are also NULL, do not return modified reverse // stream data // // Output: // returned value: 0 successful operation // -ENODATA the engine has finished the disable phase and the framework // can stop calling process_reverse() // -EINVAL invalid interface handle or // invalid input/output buffer description //////////////////////////////////////////////////////////////////////////////// int32_t (*)(effect_handle_t self, audio_buffer_t *inBuffer, audio_buffer_t *outBuffer)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    ////////////////////////////////////////////////////////////////////////////////
    //
    //    Function:       process_reverse
    //
    //    Description:    Process reverse stream function. This function is used to pass
    //          a reference stream to the effect engine. If the engine does not need a reference
    //          stream, this function pointer can be set to NULL.
    //          This function would typically implemented by an Echo Canceler.
    //
    //    Input:
    //          self:       handle to the effect interface this function
    //              is called on.
    //          inBuffer:   buffer descriptor indicating where to read samples to process.
    //              If NULL, use the configuration passed by EFFECT_CMD_SET_CONFIG_REVERSE command.
    //
    //          outBuffer:   buffer descriptor indicating where to write processed samples.
    //              If NULL, use the configuration passed by EFFECT_CMD_SET_CONFIG_REVERSE command.
    //              If the buffer and buffer provider in the configuration received by
    //              EFFECT_CMD_SET_CONFIG_REVERSE are also NULL, do not return modified reverse
    //              stream data
    //
    //    Output:
    //        returned value:    0 successful operation
    //                          -ENODATA the engine has finished the disable phase and the framework
    //                                  can stop calling process_reverse()
    //                          -EINVAL invalid interface handle or
    //                                  invalid input/output buffer description
    ////////////////////////////////////////////////////////////////////////////////
    int32_t (*${name})(effect_handle_t self,
                               audio_buffer_t *inBuffer,
                               audio_buffer_t *outBuffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "//////////////////////////////////////////////////////////////////////////////

    Function:       process_reverse

    Description:    Process reverse stream function. This function is used to pass
          a reference stream to the effect engine. If the engine does not need a reference
          stream, this function pointer can be set to NULL.
          This function would typically implemented by an Echo Canceler.

    Input:
          self:       handle to the effect interface this function
              is called on.
          inBuffer:   buffer descriptor indicating where to read samples to process.
              If NULL, use the configuration passed by EFFECT_CMD_SET_CONFIG_REVERSE command.

          outBuffer:   buffer descriptor indicating where to write processed samples.
              If NULL, use the configuration passed by EFFECT_CMD_SET_CONFIG_REVERSE command.
              If the buffer and buffer provider in the configuration received by
              EFFECT_CMD_SET_CONFIG_REVERSE are also NULL, do not return modified reverse
              stream data

    Output:
        returned value:    0 successful operation
                          -ENODATA the engine has finished the disable phase and the framework
                                  can stop calling process_reverse()
                          -EINVAL invalid interface handle or
                                  invalid input/output buffer description
//////////////////////////////////////////////////////////////////////////////
"
      end
    end

    class 4308023 "effect_handle_t"
      visibility package stereotype "typedef" base_type class_ref 4307895 // effect_interface_s
      cpp_decl "${comment}typedef struct ${type}** ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Effect control interface structure: effect_interface_s
 The effect control interface is exposed by each effect engine implementation. It consists of
 a set of functions controlling the configuration, activation and process of the engine.
 The functions are grouped in a structure of type effect_interface_s.

 Effect control interface handle: effect_handle_t
 The effect_handle_t serves two purposes regarding the implementation of the effect engine:
 - 1 it is the address of a pointer to an effect_interface_s structure where the functions
 of the effect control API for a particular effect are located.
 - 2 it is the address of the context of a particular effect instance.
 A typical implementation in the effect library would define a structure as follows:
 struct effect_module_s {
        const struct effect_interface_s *itfe;
        effect_config_t config;
        effect_context_t context;
 }
 The implementation of EffectCreate() function would then allocate a structure of this
 type and return its address as effect_handle_t"
      classrelation 8295991 // <dependency>
	relation 8295991 -_->
	  a public
	    cpp default "#include in source"
	    classrelation_ref 8295991 // <dependency>
	  b parent class_ref 4307895 // effect_interface_s
      end
    end

    class 4308151 "audio_buffer_s"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " initialize effect engine
 configure effect engine (see effect_config_t)
 reset effect engine
 enable effect process
 disable effect process
 set parameter immediately (see effect_param_t)
 set parameter deferred
 commit previous set parameter deferred
 get parameter
 set audio device (see audio.h, audio_devices_t)
 set volume
 set the audio mode (normal, ring, ...)
 configure effect engine reverse stream(see effect_config_t)
 set capture device (see audio.h, audio_devices_t)
 read effect engine configuration
 read configure effect engine reverse stream configuration
 get all supported configurations for a feature.
 get current feature configuration
 set current feature configuration
 set the audio source (see audio.h, audio_source_t)
 set if effect thread is an offload one,
 send the ioHandle of the effect thread
 first proprietary command code
==================================================================================================
 command: EFFECT_CMD_INIT
--------------------------------------------------------------------------------------------------
 description:
  Initialize effect engine: All configurations return to default
--------------------------------------------------------------------------------------------------
 command format:
  size: 0
  data: N/A
--------------------------------------------------------------------------------------------------
 reply format:
  size: sizeof(int)
  data: status
==================================================================================================
 command: EFFECT_CMD_SET_CONFIG
--------------------------------------------------------------------------------------------------
 description:
  Apply new audio parameters configurations for input and output buffers
--------------------------------------------------------------------------------------------------
 command format:
  size: sizeof(effect_config_t)
  data: effect_config_t
--------------------------------------------------------------------------------------------------
 reply format:
  size: sizeof(int)
  data: status
==================================================================================================
 command: EFFECT_CMD_RESET
--------------------------------------------------------------------------------------------------
 description:
  Reset the effect engine. Keep configuration but resets state and buffer content
--------------------------------------------------------------------------------------------------
 command format:
  size: 0
  data: N/A
--------------------------------------------------------------------------------------------------
 reply format:
  size: 0
  data: N/A
==================================================================================================
 command: EFFECT_CMD_ENABLE
--------------------------------------------------------------------------------------------------
 description:
  Enable the process. Called by the framework before the first call to process()
--------------------------------------------------------------------------------------------------
 command format:
  size: 0
  data: N/A
--------------------------------------------------------------------------------------------------
 reply format:
  size: sizeof(int)
  data: status
==================================================================================================
 command: EFFECT_CMD_DISABLE
--------------------------------------------------------------------------------------------------
 description:
  Disable the process. Called by the framework after the last call to process()
--------------------------------------------------------------------------------------------------
 command format:
  size: 0
  data: N/A
--------------------------------------------------------------------------------------------------
 reply format:
  size: sizeof(int)
  data: status
==================================================================================================
 command: EFFECT_CMD_SET_PARAM
--------------------------------------------------------------------------------------------------
 description:
  Set a parameter and apply it immediately
--------------------------------------------------------------------------------------------------
 command format:
  size: sizeof(effect_param_t) + size of param and value
  data: effect_param_t + param + value. See effect_param_t definition below for value offset
--------------------------------------------------------------------------------------------------
 reply format:
  size: sizeof(int)
  data: status
==================================================================================================
 command: EFFECT_CMD_SET_PARAM_DEFERRED
--------------------------------------------------------------------------------------------------
 description:
  Set a parameter but apply it only when receiving EFFECT_CMD_SET_PARAM_COMMIT command
--------------------------------------------------------------------------------------------------
 command format:
  size: sizeof(effect_param_t) + size of param and value
  data: effect_param_t + param + value. See effect_param_t definition below for value offset
--------------------------------------------------------------------------------------------------
 reply format:
  size: 0
  data: N/A
==================================================================================================
 command: EFFECT_CMD_SET_PARAM_COMMIT
--------------------------------------------------------------------------------------------------
 description:
  Apply all previously received EFFECT_CMD_SET_PARAM_DEFERRED commands
--------------------------------------------------------------------------------------------------
 command format:
  size: 0
  data: N/A
--------------------------------------------------------------------------------------------------
 reply format:
  size: sizeof(int)
  data: status
==================================================================================================
 command: EFFECT_CMD_GET_PARAM
--------------------------------------------------------------------------------------------------
 description:
  Get a parameter value
--------------------------------------------------------------------------------------------------
 command format:
  size: sizeof(effect_param_t) + size of param
  data: effect_param_t + param
--------------------------------------------------------------------------------------------------
 reply format:
  size: sizeof(effect_param_t) + size of param and value
  data: effect_param_t + param + value. See effect_param_t definition below for value offset
==================================================================================================
 command: EFFECT_CMD_SET_DEVICE
--------------------------------------------------------------------------------------------------
 description:
  Set the rendering device the audio output path is connected to. See audio.h, audio_devices_t
  for device values.
  The effect implementation must set EFFECT_FLAG_DEVICE_IND flag in its descriptor to receive this
  command when the device changes
--------------------------------------------------------------------------------------------------
 command format:
  size: sizeof(uint32_t)
  data: uint32_t
--------------------------------------------------------------------------------------------------
 reply format:
  size: 0
  data: N/A
==================================================================================================
 command: EFFECT_CMD_SET_VOLUME
--------------------------------------------------------------------------------------------------
 description:
  Set and get volume. Used by audio framework to delegate volume control to effect engine.
  The effect implementation must set EFFECT_FLAG_VOLUME_IND or EFFECT_FLAG_VOLUME_CTRL flag in
  its descriptor to receive this command before every call to process() function
  If EFFECT_FLAG_VOLUME_CTRL flag is set in the effect descriptor, the effect engine must return
  the volume that should be applied before the effect is processed. The overall volume (the volume
  actually applied by the effect engine multiplied by the returned value) should match the value
  indicated in the command.
--------------------------------------------------------------------------------------------------
 command format:
  size: n * sizeof(uint32_t)
  data: volume for each channel defined in effect_config_t for output buffer expressed in
      8.24 fixed point format
--------------------------------------------------------------------------------------------------
 reply format:
  size: n * sizeof(uint32_t) / 0
  data: - if EFFECT_FLAG_VOLUME_CTRL is set in effect descriptor:
              volume for each channel defined in effect_config_t for output buffer expressed in
              8.24 fixed point format
        - if EFFECT_FLAG_VOLUME_CTRL is not set in effect descriptor:
              N/A
  It is legal to receive a null pointer as pReplyData in which case the effect framework has
  delegated volume control to another effect
==================================================================================================
 command: EFFECT_CMD_SET_AUDIO_MODE
--------------------------------------------------------------------------------------------------
 description:
  Set the audio mode. The effect implementation must set EFFECT_FLAG_AUDIO_MODE_IND flag in its
  descriptor to receive this command when the audio mode changes.
--------------------------------------------------------------------------------------------------
 command format:
  size: sizeof(uint32_t)
  data: audio_mode_t
--------------------------------------------------------------------------------------------------
 reply format:
  size: 0
  data: N/A
==================================================================================================
 command: EFFECT_CMD_SET_CONFIG_REVERSE
--------------------------------------------------------------------------------------------------
 description:
  Apply new audio parameters configurations for input and output buffers of reverse stream.
  An example of reverse stream is the echo reference supplied to an Acoustic Echo Canceler.
--------------------------------------------------------------------------------------------------
 command format:
  size: sizeof(effect_config_t)
  data: effect_config_t
--------------------------------------------------------------------------------------------------
 reply format:
  size: sizeof(int)
  data: status
==================================================================================================
 command: EFFECT_CMD_SET_INPUT_DEVICE
--------------------------------------------------------------------------------------------------
 description:
  Set the capture device the audio input path is connected to. See audio.h, audio_devices_t
  for device values.
  The effect implementation must set EFFECT_FLAG_DEVICE_IND flag in its descriptor to receive this
  command when the device changes
--------------------------------------------------------------------------------------------------
 command format:
  size: sizeof(uint32_t)
  data: uint32_t
--------------------------------------------------------------------------------------------------
 reply format:
  size: 0
  data: N/A
==================================================================================================
 command: EFFECT_CMD_GET_CONFIG
--------------------------------------------------------------------------------------------------
 description:
  Read audio parameters configurations for input and output buffers
--------------------------------------------------------------------------------------------------
 command format:
  size: 0
  data: N/A
--------------------------------------------------------------------------------------------------
 reply format:
  size: sizeof(effect_config_t)
  data: effect_config_t
==================================================================================================
 command: EFFECT_CMD_GET_CONFIG_REVERSE
--------------------------------------------------------------------------------------------------
 description:
  Read audio parameters configurations for input and output buffers of reverse stream
--------------------------------------------------------------------------------------------------
 command format:
  size: 0
  data: N/A
--------------------------------------------------------------------------------------------------
 reply format:
  size: sizeof(effect_config_t)
  data: effect_config_t
==================================================================================================
 command: EFFECT_CMD_GET_FEATURE_SUPPORTED_CONFIGS
--------------------------------------------------------------------------------------------------
 description:
  Queries for supported configurations for a particular feature (e.g. get the supported
 combinations of main and auxiliary channels for a noise suppressor).
 The command parameter is the feature identifier (See effect_feature_e for a list of defined
 features) followed by the maximum number of configuration descriptor to return.
 The reply is composed of:
  - status (uint32_t):
          - 0 if feature is supported
          - -ENOSYS if the feature is not supported,
          - -ENOMEM if the feature is supported but the total number of supported configurations
          exceeds the maximum number indicated by the caller.
  - total number of supported configurations (uint32_t)
  - an array of configuration descriptors.
 The actual number of descriptors returned must not exceed the maximum number indicated by
 the caller.
--------------------------------------------------------------------------------------------------
 command format:
  size: 2 x sizeof(uint32_t)
  data: effect_feature_e + maximum number of configurations to return
--------------------------------------------------------------------------------------------------
 reply format:
  size: 2 x sizeof(uint32_t) + n x sizeof (<config descriptor>)
  data: status + total number of configurations supported + array of n config descriptors
==================================================================================================
 command: EFFECT_CMD_GET_FEATURE_CONFIG
--------------------------------------------------------------------------------------------------
 description:
  Retrieves current configuration for a given feature.
 The reply status is:
      - 0 if feature is supported
      - -ENOSYS if the feature is not supported,
--------------------------------------------------------------------------------------------------
 command format:
  size: sizeof(uint32_t)
  data: effect_feature_e
--------------------------------------------------------------------------------------------------
 reply format:
  size: sizeof(uint32_t) + sizeof (<config descriptor>)
  data: status + config descriptor
==================================================================================================
 command: EFFECT_CMD_SET_FEATURE_CONFIG
--------------------------------------------------------------------------------------------------
 description:
  Sets current configuration for a given feature.
 The reply status is:
      - 0 if feature is supported
      - -ENOSYS if the feature is not supported,
      - -EINVAL if the configuration is invalid
--------------------------------------------------------------------------------------------------
 command format:
  size: sizeof(uint32_t) + sizeof (<config descriptor>)
  data: effect_feature_e + config descriptor
--------------------------------------------------------------------------------------------------
 reply format:
  size: sizeof(uint32_t)
  data: status
==================================================================================================
 command: EFFECT_CMD_SET_AUDIO_SOURCE
--------------------------------------------------------------------------------------------------
 description:
  Set the audio source the capture path is configured for (Camcorder, voice recognition...).
  See audio.h, audio_source_t for values.
--------------------------------------------------------------------------------------------------
 command format:
  size: sizeof(uint32_t)
  data: uint32_t
--------------------------------------------------------------------------------------------------
 reply format:
  size: 0
  data: N/A
==================================================================================================
 command: EFFECT_CMD_OFFLOAD
--------------------------------------------------------------------------------------------------
 description:
  1.indicate if the playback thread the effect is attached to is offloaded or not
  2.update the io handle of the playback thread the effect is attached to
--------------------------------------------------------------------------------------------------
 command format:
  size: sizeof(effect_offload_param_t)
  data: effect_offload_param_t
--------------------------------------------------------------------------------------------------
 reply format:
  size: sizeof(uint32_t)
  data: uint32_t
--------------------------------------------------------------------------------------------------
 command: EFFECT_CMD_FIRST_PROPRIETARY
--------------------------------------------------------------------------------------------------
 description:
  All proprietary effect commands must use command codes above this value. The size and format of
  command and response fields is free in this case
==================================================================================================
 Audio buffer descriptor used by process(), bufferProvider() functions and buffer_config_t
 structure. Multi-channel audio is always interleaved. The channel order is from LSB to MSB with
 regard to the channel mask definition in audio.h, audio_channel_mask_t e.g :
 Stereo: left, right
 5 point 1: front left, front right, front center, low frequency, back left, back right
 The buffer size is expressed in frame count, a frame being composed of samples for all
 channels at a given time. Frame size for unspecified format (AUDIO_FORMAT_OTHER) is 8 bit by
 definition"
      attribute 15503415 "raw"
	public explicit_type "void"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " raw pointer to start of buffer"
      end

    end

    class 4308279 "audio_buffer_t"
      visibility package stereotype "typedef" base_type class_ref 4308151 // audio_buffer_s
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Forward definition of type audio_buffer_t"
      classrelation 8296119 // <dependency>
	relation 8296119 -_->
	  a public
	    cpp default "#include in source"
	    classrelation_ref 8296119 // <dependency>
	  b parent class_ref 4308151 // audio_buffer_s
      end
    end

    class 4308407 "effect_command_e"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "--- Standardized command codes for command() function
"
      attribute 15500599 "EFFECT_CMD_INIT"
	public type class_ref 4308407 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15500727 "EFFECT_CMD_SET_CONFIG"
	public type class_ref 4308407 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15500855 "EFFECT_CMD_RESET"
	public type class_ref 4308407 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15500983 "EFFECT_CMD_ENABLE"
	public type class_ref 4308407 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15501111 "EFFECT_CMD_DISABLE"
	public type class_ref 4308407 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15501239 "EFFECT_CMD_SET_PARAM"
	public type class_ref 4308407 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15501367 "EFFECT_CMD_SET_PARAM_DEFERRED"
	public type class_ref 4308407 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15501495 "EFFECT_CMD_SET_PARAM_COMMIT"
	public type class_ref 4308407 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15501623 "EFFECT_CMD_GET_PARAM"
	public type class_ref 4308407 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15501751 "EFFECT_CMD_SET_DEVICE"
	public type class_ref 4308407 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15501879 "EFFECT_CMD_SET_VOLUME"
	public type class_ref 4308407 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15502007 "EFFECT_CMD_SET_AUDIO_MODE"
	public type class_ref 4308407 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15502135 "EFFECT_CMD_SET_CONFIG_REVERSE"
	public type class_ref 4308407 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15502263 "EFFECT_CMD_SET_INPUT_DEVICE"
	public type class_ref 4308407 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15502391 "EFFECT_CMD_GET_CONFIG"
	public type class_ref 4308407 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15502519 "EFFECT_CMD_GET_CONFIG_REVERSE"
	public type class_ref 4308407 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15502647 "EFFECT_CMD_GET_FEATURE_SUPPORTED_CONFIGS"
	public type class_ref 4308407 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15502775 "EFFECT_CMD_GET_FEATURE_CONFIG"
	public type class_ref 4308407 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15502903 "EFFECT_CMD_SET_FEATURE_CONFIG"
	public type class_ref 4308407 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15503031 "EFFECT_CMD_SET_AUDIO_SOURCE"
	public type class_ref 4308407 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15503159 "EFFECT_CMD_OFFLOAD"
	public type class_ref 4308407 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15503287 "EFFECT_CMD_FIRST_PROPRIETARY"
	public type class_ref 4308407 // effect_command_e
	init_value " 0x10000 // first proprietary command code
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4308535 "buffer_function_t"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(*  ${name})(void *cookie, audio_buffer_t *buffer);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The buffer_provider_s structure contains functions that can be used
 by the effect engine process() function to query and release input
 or output audio buffer.
 The getBuffer() function is called to retrieve a buffer where data
 should read from or written to by process() function.
 The releaseBuffer() function MUST be called when the buffer retrieved
 with getBuffer() is not needed anymore.
 The process function should use the buffer provider mechanism to retrieve
 input or output buffer if the inBuffer or outBuffer passed as argument is NULL
 and the buffer configuration (buffer_config_t) given by the EFFECT_CMD_SET_CONFIG
 command did not specify an audio buffer."
    end

    class 4308663 "buffer_provider_s"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8296887 // getBuffer (<directional composition>)
	relation 8296887 *-->
	  a role_name "getBuffer" public
	    comment " retrieve next buffer"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8296887 // getBuffer (<directional composition>)
	  b parent class_ref 4308535 // buffer_function_t
      end

      classrelation 8297015 // releaseBuffer (<directional composition>)
	relation 8297015 *-->
	  a role_name "releaseBuffer" public
	    comment " release used buffer"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8297015 // releaseBuffer (<directional composition>)
	  b parent class_ref 4308535 // buffer_function_t
      end

      attribute 15503543 "cookie"
	public explicit_type "void"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " for use by client of buffer provider functions"
      end
    end

    class 4308791 "buffer_provider_t"
      visibility package stereotype "typedef" base_type class_ref 4308663 // buffer_provider_s
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4308919 "buffer_config_s"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The buffer_config_s structure specifies the input or output audio format
 to be used by the effect engine. It is part of the effect_config_t
 structure that defines both input and output buffer configurations and is
 passed by the EFFECT_CMD_SET_CONFIG or EFFECT_CMD_SET_CONFIG_REVERSE command."
      classrelation 8297143 // buffer (<directional composition>)
	relation 8297143 *-->
	  a role_name "buffer" public
	    comment " buffer for use by process() function if not passed explicitly"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8297143 // buffer (<directional composition>)
	  b parent class_ref 4308279 // audio_buffer_t
      end

      classrelation 8297527 // bufferProvider (<directional composition>)
	relation 8297527 *-->
	  a role_name "bufferProvider" public
	    comment " buffer provider"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8297527 // bufferProvider (<directional composition>)
	  b parent class_ref 4308791 // buffer_provider_t
      end

    end

    class 4309047 "buffer_config_t"
      visibility package stereotype "typedef" base_type class_ref 4308919 // buffer_config_s
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4309175 "effect_buffer_access_e"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Values for \"accessMode\" field of buffer_config_t:
   overwrite, read only, accumulate (read/modify/write)"
      attribute 15503671 "EFFECT_BUFFER_ACCESS_WRITE"
	public type class_ref 4309175 // effect_buffer_access_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15503799 "EFFECT_BUFFER_ACCESS_READ"
	public type class_ref 4309175 // effect_buffer_access_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15503927 "EFFECT_BUFFER_ACCESS_ACCUMULATE"
	public type class_ref 4309175 // effect_buffer_access_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4309303 "effect_feature_e"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " feature identifiers for EFFECT_CMD_GET_FEATURE_SUPPORTED_CONFIGS command"
      attribute 15504055 "EFFECT_FEATURE_AUX_CHANNELS"
	public type class_ref 4309303 // effect_feature_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15504183 "EFFECT_FEATURE_CNT"
	public type class_ref 4309303 // effect_feature_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4309431 "channel_config_s"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " supports auxiliary channels (e.g. dual mic noise suppressor)
 EFFECT_FEATURE_AUX_CHANNELS feature configuration descriptor. Describe a combination
 of main and auxiliary channels supported"
      attribute 15504311 "main_channels"
	public explicit_type "audio_channel_mask_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " channel mask for main channels"
      end

      attribute 15504439 "aux_channels"
	public explicit_type "audio_channel_mask_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " channel mask for auxiliary channels"
      end
    end

    class 4309559 "channel_config_t"
      visibility package stereotype "typedef" base_type class_ref 4309431 // channel_config_s
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4309687 "effect_config_s"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " effect_config_s structure describes the format of the pCmdData argument of EFFECT_CMD_SET_CONFIG
 command to configure audio parameters and buffers for effect engine input and output."
      classrelation 8298039 // inputCfg (<directional composition>)
	relation 8298039 *-->
	  a role_name "inputCfg" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8298039 // inputCfg (<directional composition>)
	  b parent class_ref 4309047 // buffer_config_t
      end

      classrelation 8298167 // outputCfg (<directional composition>)
	relation 8298167 *-->
	  a role_name "outputCfg" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8298167 // outputCfg (<directional composition>)
	  b parent class_ref 4309047 // buffer_config_t
      end
    end

    class 4309815 "effect_config_t"
      visibility package stereotype "typedef" base_type class_ref 4309687 // effect_config_s
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4309943 "effect_param_s"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " effect_param_s structure describes the format of the pCmdData argument of EFFECT_CMD_SET_PARAM
 command and pCmdData and pReplyData of EFFECT_CMD_GET_PARAM command.
 psize and vsize represent the actual size of parameter and value.

 NOTE: the start of value field inside the data field is always on a 32 bit boundary:

  +-----------+
  | status    | sizeof(int)
  +-----------+
  | psize     | sizeof(int)
  +-----------+
  | vsize     | sizeof(int)
  +-----------+
  |           |   |           |
  ~ parameter ~   > psize     |
  |           |   |           >  ((psize - 1)/sizeof(int) + 1) * sizeof(int)
  +-----------+               |
  | padding   |               |
  +-----------+
  |           |   |
  ~ value     ~   > vsize
  |           |   |
  +-----------+"
      attribute 15504567 "data"
	public explicit_type "char"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Start of Parameter + Value data"
      end
    end

    class 4310071 "effect_param_t"
      visibility package stereotype "typedef" base_type class_ref 4309943 // effect_param_s
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4310199 "effect_offload_param_s"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " structure used by EFFECT_CMD_OFFLOAD command"
      attribute 15504695 "isOffload"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " true if the playback thread the effect is attached to is offloaded"
      end

      attribute 15504823 "ioHandle"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " io handle of the playback thread the effect is attached to"
      end
    end

    class 4310327 "effect_offload_param_t"
      visibility package stereotype "typedef" base_type class_ref 4310199 // effect_offload_param_s
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4310455 "audio_effect_library_s"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Every effect library must have a data structure named AUDIO_EFFECT_LIBRARY_INFO_SYM
 and the fields of this data structure must begin with audio_effect_library_t"
      attribute 15504951 "name"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Name of this library
"
      end

      attribute 15505079 "implementor"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Author/owner/implementor of the library
"
      end

      attribute 15505207 "create_effect"
	public explicit_type "//////////////////////////////////////////////////////////////////////////////// // // Function: create_effect // // Description: Creates an effect engine of the specified implementation uuid and // returns an effect control interface on this engine. The function will allocate the // resources for an instance of the requested effect engine and return // a handle on the effect control interface. // // Input: // uuid: pointer to the effect uuid. // sessionId: audio session to which this effect instance will be attached. // All effects created with the same session ID are connected in series and process // the same signal stream. Knowing that two effects are part of the same effect // chain can help the library implement some kind of optimizations. // ioId: identifies the output or input stream this effect is directed to in // audio HAL. // For future use especially with tunneled HW accelerated effects // // Input/Output: // pHandle: address where to return the effect interface handle. // // Output: // returned value: 0 successful operation. // -ENODEV library failed to initialize // -EINVAL invalid pEffectUuid or pHandle // -ENOENT no effect with this uuid found // *pHandle: updated with the effect interface handle. // //////////////////////////////////////////////////////////////////////////////// int32_t (*)(const effect_uuid_t *uuid, int32_t sessionId, int32_t ioId, effect_handle_t *pHandle)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    ////////////////////////////////////////////////////////////////////////////////
    //
    //    Function:        create_effect
    //
    //    Description:    Creates an effect engine of the specified implementation uuid and
    //          returns an effect control interface on this engine. The function will allocate the
    //          resources for an instance of the requested effect engine and return
    //          a handle on the effect control interface.
    //
    //    Input:
    //          uuid:    pointer to the effect uuid.
    //          sessionId:  audio session to which this effect instance will be attached.
    //              All effects created with the same session ID are connected in series and process
    //              the same signal stream. Knowing that two effects are part of the same effect
    //              chain can help the library implement some kind of optimizations.
    //          ioId:   identifies the output or input stream this effect is directed to in
    //              audio HAL.
    //              For future use especially with tunneled HW accelerated effects
    //
    //    Input/Output:
    //          pHandle:        address where to return the effect interface handle.
    //
    //    Output:
    //        returned value:    0          successful operation.
    //                          -ENODEV     library failed to initialize
    //                          -EINVAL     invalid pEffectUuid or pHandle
    //                          -ENOENT     no effect with this uuid found
    //        *pHandle:         updated with the effect interface handle.
    //
    ////////////////////////////////////////////////////////////////////////////////
    int32_t (*${name})(const effect_uuid_t *uuid,
                             int32_t sessionId,
                             int32_t ioId,
                             effect_handle_t *pHandle)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "//////////////////////////////////////////////////////////////////////////////

    Function:        create_effect

    Description:    Creates an effect engine of the specified implementation uuid and
          returns an effect control interface on this engine. The function will allocate the
          resources for an instance of the requested effect engine and return
          a handle on the effect control interface.

    Input:
          uuid:    pointer to the effect uuid.
          sessionId:  audio session to which this effect instance will be attached.
              All effects created with the same session ID are connected in series and process
              the same signal stream. Knowing that two effects are part of the same effect
              chain can help the library implement some kind of optimizations.
          ioId:   identifies the output or input stream this effect is directed to in
              audio HAL.
              For future use especially with tunneled HW accelerated effects

    Input/Output:
          pHandle:        address where to return the effect interface handle.

    Output:
        returned value:    0          successful operation.
                          -ENODEV     library failed to initialize
                          -EINVAL     invalid pEffectUuid or pHandle
                          -ENOENT     no effect with this uuid found
        *pHandle:         updated with the effect interface handle.

//////////////////////////////////////////////////////////////////////////////
"
      end

      attribute 15505335 "release_effect"
	public explicit_type "//////////////////////////////////////////////////////////////////////////////// // // Function: release_effect // // Description: Releases the effect engine whose handle is given as argument. // All resources allocated to this particular instance of the effect are // released. // // Input: // handle: handle on the effect interface to be released. // // Output: // returned value: 0 successful operation. // -ENODEV library failed to initialize // -EINVAL invalid interface handle // //////////////////////////////////////////////////////////////////////////////// int32_t (*)(effect_handle_t handle)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    ////////////////////////////////////////////////////////////////////////////////
    //
    //    Function:        release_effect
    //
    //    Description:    Releases the effect engine whose handle is given as argument.
    //          All resources allocated to this particular instance of the effect are
    //          released.
    //
    //    Input:
    //          handle:         handle on the effect interface to be released.
    //
    //    Output:
    //        returned value:    0          successful operation.
    //                          -ENODEV     library failed to initialize
    //                          -EINVAL     invalid interface handle
    //
    ////////////////////////////////////////////////////////////////////////////////
    int32_t (*${name})(effect_handle_t handle)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "//////////////////////////////////////////////////////////////////////////////

    Function:        release_effect

    Description:    Releases the effect engine whose handle is given as argument.
          All resources allocated to this particular instance of the effect are
          released.

    Input:
          handle:         handle on the effect interface to be released.

    Output:
        returned value:    0          successful operation.
                          -ENODEV     library failed to initialize
                          -EINVAL     invalid interface handle

//////////////////////////////////////////////////////////////////////////////
"
      end

      attribute 15505463 "get_descriptor"
	public explicit_type "//////////////////////////////////////////////////////////////////////////////// // // Function: get_descriptor // // Description: Returns the descriptor of the effect engine which implementation UUID is // given as argument. // // Input/Output: // uuid: pointer to the effect uuid. // pDescriptor: address where to return the effect descriptor. // // Output: // returned value: 0 successful operation. // -ENODEV library failed to initialize // -EINVAL invalid pDescriptor or uuid // *pDescriptor: updated with the effect descriptor. // //////////////////////////////////////////////////////////////////////////////// int32_t (*)(const effect_uuid_t *uuid, effect_descriptor_t *pDescriptor)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    ////////////////////////////////////////////////////////////////////////////////
    //
    //    Function:        get_descriptor
    //
    //    Description:    Returns the descriptor of the effect engine which implementation UUID is
    //          given as argument.
    //
    //    Input/Output:
    //          uuid:           pointer to the effect uuid.
    //          pDescriptor:    address where to return the effect descriptor.
    //
    //    Output:
    //        returned value:    0          successful operation.
    //                          -ENODEV     library failed to initialize
    //                          -EINVAL     invalid pDescriptor or uuid
    //        *pDescriptor:     updated with the effect descriptor.
    //
    ////////////////////////////////////////////////////////////////////////////////
    int32_t (*${name})(const effect_uuid_t *uuid,
                              effect_descriptor_t *pDescriptor)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "//////////////////////////////////////////////////////////////////////////////

    Function:        get_descriptor

    Description:    Returns the descriptor of the effect engine which implementation UUID is
          given as argument.

    Input/Output:
          uuid:           pointer to the effect uuid.
          pDescriptor:    address where to return the effect descriptor.

    Output:
        returned value:    0          successful operation.
                          -ENODEV     library failed to initialize
                          -EINVAL     invalid pDescriptor or uuid
        *pDescriptor:     updated with the effect descriptor.

//////////////////////////////////////////////////////////////////////////////
"
      end
    end

    class 4310583 "audio_effect_library_t"
      visibility package stereotype "typedef" base_type class_ref 4310455 // audio_effect_library_s
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4310711 "audio_policy"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " ---------------------------------------------------------------------------- 

The audio_policy and audio_policy_service_ops structs define the
communication interfaces between the platform specific audio policy manager
and Android generic audio policy manager.
The platform specific audio policy manager must implement methods of the
audio_policy struct.
This implementation makes use of the audio_policy_service_ops to control
the activity and configuration of audio input and output streams.

The platform specific audio policy manager is in charge of the audio
routing and volume control policies for a given platform.
The main roles of this module are:
  - keep track of current system state (removable device connections, phone
    state, user requests...).
  System state changes and user actions are notified to audio policy
  manager with methods of the audio_policy.

  - process get_output() queries received when AudioTrack objects are
    created: Those queries return a handler on an output that has been
    selected, configured and opened by the audio policy manager and that
    must be used by the AudioTrack when registering to the AudioFlinger
    with the createTrack() method.
  When the AudioTrack object is released, a release_output() query
  is received and the audio policy manager can decide to close or
  reconfigure the output depending on other streams using this output and
  current system state.

  - similarly process get_input() and release_input() queries received from
    AudioRecord objects and configure audio inputs.
  - process volume control requests: the stream volume is converted from
    an index value (received from UI) to a float value applicable to each
    output as a function of platform specific settings and current output
    route (destination device). It also make sure that streams are not
    muted if not allowed (e.g. camera shutter sound in some countries).

 XXX: this should be defined OUTSIDE of frameworks/base "
      attribute 15505591 "set_device_connection_state"
	public explicit_type "/* * configuration functions */ /* indicate a change in device connection status */ int (*)(struct audio_policy *pol, audio_devices_t device, audio_policy_dev_state_t state, const char *device_address)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * configuration functions
     */

    /* indicate a change in device connection status */
    int (*${name})(struct audio_policy *pol,
                                       audio_devices_t device,
                                       audio_policy_dev_state_t state,
                                       const char *device_address)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "configuration functions

 indicate a change in device connection status 
"
      end

      attribute 15505719 "get_device_connection_state"
	public explicit_type "/* retrieve a device connection status */ audio_policy_dev_state_t (*)( const struct audio_policy *pol, audio_devices_t device, const char *device_address)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* retrieve a device connection status */
    audio_policy_dev_state_t (*${name})(
                                            const struct audio_policy *pol,
                                            audio_devices_t device,
                                            const char *device_address)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " retrieve a device connection status 
"
      end

      attribute 15505847 "set_phone_state"
	public explicit_type "/* indicate a change in phone state. Valid phones states are defined * by audio_mode_t */ void (*)(struct audio_policy *pol, audio_mode_t state)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* indicate a change in phone state. Valid phones states are defined
     * by audio_mode_t */
    void (*${name})(struct audio_policy *pol, audio_mode_t state)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " indicate a change in phone state. Valid phones states are defined
by audio_mode_t 
"
      end

      attribute 15505975 "set_ringer_mode"
	public explicit_type "/* deprecated, never called (was \"indicate a change in ringer mode\") */ void (*)(struct audio_policy *pol, uint32_t mode, uint32_t mask)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* deprecated, never called (was \"indicate a change in ringer mode\") */
    void (*${name})(struct audio_policy *pol, uint32_t mode,
                            uint32_t mask)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " deprecated, never called (was \"indicate a change in ringer mode\") 
"
      end

      attribute 15506103 "set_force_use"
	public explicit_type "/* force using a specific device category for the specified usage */ void (*)(struct audio_policy *pol, audio_policy_force_use_t usage, audio_policy_forced_cfg_t config)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* force using a specific device category for the specified usage */
    void (*${name})(struct audio_policy *pol,
                          audio_policy_force_use_t usage,
                          audio_policy_forced_cfg_t config)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " force using a specific device category for the specified usage 
"
      end

      attribute 15506231 "get_force_use"
	public explicit_type "/* retrieve current device category forced for a given usage */ audio_policy_forced_cfg_t (*)(const struct audio_policy *pol, audio_policy_force_use_t usage)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* retrieve current device category forced for a given usage */
    audio_policy_forced_cfg_t (*${name})(const struct audio_policy *pol,
                                               audio_policy_force_use_t usage)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " retrieve current device category forced for a given usage 
"
      end

      attribute 15506359 "set_can_mute_enforced_audible"
	public explicit_type "/* if can_mute is true, then audio streams that are marked ENFORCED_AUDIBLE * can still be muted. */ void (*)(struct audio_policy *pol, bool can_mute)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* if can_mute is true, then audio streams that are marked ENFORCED_AUDIBLE
     * can still be muted. */
    void (*${name})(struct audio_policy *pol,
                                          bool can_mute)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " if can_mute is true, then audio streams that are marked ENFORCED_AUDIBLE
can still be muted. 
"
      end

      attribute 15506487 "init_check"
	public explicit_type "/* check proper initialization */ int (*)(const struct audio_policy *pol)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* check proper initialization */
    int (*${name})(const struct audio_policy *pol)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " check proper initialization 
"
      end

      attribute 15506615 "get_output"
	public explicit_type "/* * Audio routing query functions */ /* request an output appropriate for playback of the supplied stream type and * parameters */ audio_io_handle_t (*)(struct audio_policy *pol, audio_stream_type_t stream, uint32_t samplingRate, audio_format_t format, audio_channel_mask_t channelMask, audio_output_flags_t flags, const audio_offload_info_t *offloadInfo)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * Audio routing query functions
     */

    /* request an output appropriate for playback of the supplied stream type and
     * parameters */
    audio_io_handle_t (*${name})(struct audio_policy *pol,
                                    audio_stream_type_t stream,
                                    uint32_t samplingRate,
                                    audio_format_t format,
                                    audio_channel_mask_t channelMask,
                                    audio_output_flags_t flags,
                                    const audio_offload_info_t *offloadInfo)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Audio routing query functions

 request an output appropriate for playback of the supplied stream type and
parameters 
"
      end

      attribute 15506743 "start_output"
	public explicit_type "/* indicates to the audio policy manager that the output starts being used * by corresponding stream. */ int (*)(struct audio_policy *pol, audio_io_handle_t output, audio_stream_type_t stream, audio_session_t session)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* indicates to the audio policy manager that the output starts being used
     * by corresponding stream. */
    int (*${name})(struct audio_policy *pol,
                        audio_io_handle_t output,
                        audio_stream_type_t stream,
                        audio_session_t session)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " indicates to the audio policy manager that the output starts being used
by corresponding stream. 
"
      end

      attribute 15506871 "stop_output"
	public explicit_type "/* indicates to the audio policy manager that the output stops being used * by corresponding stream. */ int (*)(struct audio_policy *pol, audio_io_handle_t output, audio_stream_type_t stream, audio_session_t session)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* indicates to the audio policy manager that the output stops being used
     * by corresponding stream. */
    int (*${name})(struct audio_policy *pol,
                       audio_io_handle_t output,
                       audio_stream_type_t stream,
                       audio_session_t session)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " indicates to the audio policy manager that the output stops being used
by corresponding stream. 
"
      end

      attribute 15506999 "release_output"
	public explicit_type "/* releases the output. */ void (*)(struct audio_policy *pol, audio_io_handle_t output)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* releases the output. */
    void (*${name})(struct audio_policy *pol, audio_io_handle_t output)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " releases the output. 
"
      end

      attribute 15507127 "get_input"
	public explicit_type "/* request an input appropriate for record from the supplied device with * supplied parameters. */ audio_io_handle_t (*)(struct audio_policy *pol, audio_source_t inputSource, uint32_t samplingRate, audio_format_t format, audio_channel_mask_t channelMask, audio_in_acoustics_t acoustics)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* request an input appropriate for record from the supplied device with
     * supplied parameters. */
    audio_io_handle_t (*${name})(struct audio_policy *pol, audio_source_t inputSource,
                                   uint32_t samplingRate,
                                   audio_format_t format,
                                   audio_channel_mask_t channelMask,
                                   audio_in_acoustics_t acoustics)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " request an input appropriate for record from the supplied device with
supplied parameters. 
"
      end

      attribute 15507255 "start_input"
	public explicit_type "/* indicates to the audio policy manager that the input starts being used */ int (*)(struct audio_policy *pol, audio_io_handle_t input)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* indicates to the audio policy manager that the input starts being used */
    int (*${name})(struct audio_policy *pol, audio_io_handle_t input)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " indicates to the audio policy manager that the input starts being used 
"
      end

      attribute 15507383 "stop_input"
	public explicit_type "/* indicates to the audio policy manager that the input stops being used. */ int (*)(struct audio_policy *pol, audio_io_handle_t input)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* indicates to the audio policy manager that the input stops being used. */
    int (*${name})(struct audio_policy *pol, audio_io_handle_t input)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " indicates to the audio policy manager that the input stops being used. 
"
      end

      attribute 15507511 "release_input"
	public explicit_type "/* releases the input. */ void (*)(struct audio_policy *pol, audio_io_handle_t input)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* releases the input. */
    void (*${name})(struct audio_policy *pol, audio_io_handle_t input)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " releases the input. 
"
      end

      attribute 15507639 "init_stream_volume"
	public explicit_type "/* * volume control functions */ /* initialises stream volume conversion parameters by specifying volume * index range. The index range for each stream is defined by AudioService. */ void (*)(struct audio_policy *pol, audio_stream_type_t stream, int index_min, int index_max)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * volume control functions
     */

    /* initialises stream volume conversion parameters by specifying volume
     * index range. The index range for each stream is defined by AudioService. */
    void (*${name})(struct audio_policy *pol,
                               audio_stream_type_t stream,
                               int index_min,
                               int index_max)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "volume control functions

 initialises stream volume conversion parameters by specifying volume
index range. The index range for each stream is defined by AudioService. 
"
      end

      attribute 15507767 "set_stream_volume_index"
	public explicit_type "/* sets the new stream volume at a level corresponding to the supplied * index. The index is within the range specified by init_stream_volume() */ int (*)(struct audio_policy *pol, audio_stream_type_t stream, int index)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* sets the new stream volume at a level corresponding to the supplied
     * index. The index is within the range specified by init_stream_volume() */
    int (*${name})(struct audio_policy *pol,
                                   audio_stream_type_t stream,
                                   int index)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " sets the new stream volume at a level corresponding to the supplied
index. The index is within the range specified by init_stream_volume() 
"
      end

      attribute 15507895 "get_stream_volume_index"
	public explicit_type "/* retrieve current volume index for the specified stream */ int (*)(const struct audio_policy *pol, audio_stream_type_t stream, int *index)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* retrieve current volume index for the specified stream */
    int (*${name})(const struct audio_policy *pol,
                                   audio_stream_type_t stream,
                                   int *index)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " retrieve current volume index for the specified stream 
"
      end

      attribute 15508023 "set_stream_volume_index_for_device"
	public explicit_type "/* sets the new stream volume at a level corresponding to the supplied * index for the specified device. * The index is within the range specified by init_stream_volume() */ int (*)(struct audio_policy *pol, audio_stream_type_t stream, int index, audio_devices_t device)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* sets the new stream volume at a level corresponding to the supplied
     * index for the specified device.
     * The index is within the range specified by init_stream_volume() */
    int (*${name})(struct audio_policy *pol,
                                   audio_stream_type_t stream,
                                   int index,
                                   audio_devices_t device)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " sets the new stream volume at a level corresponding to the supplied
index for the specified device.
The index is within the range specified by init_stream_volume() 
"
      end

      attribute 15508151 "get_stream_volume_index_for_device"
	public explicit_type "/* retrieve current volume index for the specified stream for the specified device */ int (*)(const struct audio_policy *pol, audio_stream_type_t stream, int *index, audio_devices_t device)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* retrieve current volume index for the specified stream for the specified device */
    int (*${name})(const struct audio_policy *pol,
                                   audio_stream_type_t stream,
                                   int *index,
                                   audio_devices_t device)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " retrieve current volume index for the specified stream for the specified device 
"
      end

      attribute 15508279 "get_strategy_for_stream"
	public explicit_type "/* return the strategy corresponding to a given stream type */ uint32_t (*)(const struct audio_policy *pol, audio_stream_type_t stream)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* return the strategy corresponding to a given stream type */
    uint32_t (*${name})(const struct audio_policy *pol,
                                        audio_stream_type_t stream)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " return the strategy corresponding to a given stream type 
"
      end

      attribute 15508407 "get_devices_for_stream"
	public explicit_type "/* return the enabled output devices for the given stream type */ audio_devices_t (*)(const struct audio_policy *pol, audio_stream_type_t stream)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* return the enabled output devices for the given stream type */
    audio_devices_t (*${name})(const struct audio_policy *pol,
                                       audio_stream_type_t stream)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " return the enabled output devices for the given stream type 
"
      end

      attribute 15508535 "get_output_for_effect"
	public explicit_type "/* Audio effect management */ audio_io_handle_t (*)(struct audio_policy *pol, const struct effect_descriptor_s *desc)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* Audio effect management */
    audio_io_handle_t (*${name})(struct audio_policy *pol,
                                            const struct effect_descriptor_s *desc)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Audio effect management 
"
      end

      attribute 15508663 "register_effect"
	public explicit_type "int (*)(struct audio_policy *pol, const struct effect_descriptor_s *desc, audio_io_handle_t output, uint32_t strategy, audio_session_t session, int id)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    int (*${name})(struct audio_policy *pol,
                           const struct effect_descriptor_s *desc,
                           audio_io_handle_t output,
                           uint32_t strategy,
                           audio_session_t session,
                           int id)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15508791 "unregister_effect"
	public explicit_type "int (*)(struct audio_policy *pol, int id)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    int (*${name})(struct audio_policy *pol, int id)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15508919 "set_effect_enabled"
	public explicit_type "int (*)(struct audio_policy *pol, int id, bool enabled)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    int (*${name})(struct audio_policy *pol, int id, bool enabled)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15509047 "is_stream_active"
	public explicit_type "bool (*)(const struct audio_policy *pol, audio_stream_type_t stream, uint32_t in_past_ms)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    bool (*${name})(const struct audio_policy *pol,
            audio_stream_type_t stream,
            uint32_t in_past_ms)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15509175 "is_stream_active_remotely"
	public explicit_type "bool (*)(const struct audio_policy *pol, audio_stream_type_t stream, uint32_t in_past_ms)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    bool (*${name})(const struct audio_policy *pol,
            audio_stream_type_t stream,
            uint32_t in_past_ms)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15509303 "is_source_active"
	public explicit_type "bool (*)(const struct audio_policy *pol, audio_source_t source)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    bool (*${name})(const struct audio_policy *pol,
            audio_source_t source)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15509431 "dump"
	public explicit_type "/* dump state */ int (*)(const struct audio_policy *pol, int fd)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* dump state */
    int (*${name})(const struct audio_policy *pol, int fd)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " dump state 
"
      end

      attribute 15509559 "is_offload_supported"
	public explicit_type "/* check if offload is possible for given sample rate, bitrate, duration, ... */ bool (*)(const struct audio_policy *pol, const audio_offload_info_t *info)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* check if offload is possible for given sample rate, bitrate, duration, ... */
    bool (*${name})(const struct audio_policy *pol,
                                const audio_offload_info_t *info)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " check if offload is possible for given sample rate, bitrate, duration, ... 
"
      end
    end

    class 4310839 "audio_policy_service_ops"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15509687 "open_output"
	public explicit_type "/* * Audio output Control functions */ /* Opens an audio output with the requested parameters. * * The parameter values can indicate to use the default values in case the * audio policy manager has no specific requirements for the output being * opened. * * When the function returns, the parameter values reflect the actual * values used by the audio hardware output stream. * * The audio policy manager can check if the proposed parameters are * suitable or not and act accordingly. */ audio_io_handle_t (*)(void *service, audio_devices_t *pDevices, uint32_t *pSamplingRate, audio_format_t *pFormat, audio_channel_mask_t *pChannelMask, uint32_t *pLatencyMs, audio_output_flags_t flags)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * Audio output Control functions
     */

    /* Opens an audio output with the requested parameters.
     *
     * The parameter values can indicate to use the default values in case the
     * audio policy manager has no specific requirements for the output being
     * opened.
     *
     * When the function returns, the parameter values reflect the actual
     * values used by the audio hardware output stream.
     *
     * The audio policy manager can check if the proposed parameters are
     * suitable or not and act accordingly.
     */
    audio_io_handle_t (*${name})(void *service,
                                     audio_devices_t *pDevices,
                                     uint32_t *pSamplingRate,
                                     audio_format_t *pFormat,
                                     audio_channel_mask_t *pChannelMask,
                                     uint32_t *pLatencyMs,
                                     audio_output_flags_t flags)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Audio output Control functions

 Opens an audio output with the requested parameters.

The parameter values can indicate to use the default values in case the
audio policy manager has no specific requirements for the output being
opened.

When the function returns, the parameter values reflect the actual
values used by the audio hardware output stream.

The audio policy manager can check if the proposed parameters are
suitable or not and act accordingly.

"
      end

      attribute 15509815 "open_duplicate_output"
	public explicit_type "/* creates a special output that is duplicated to the two outputs passed as * arguments. The duplication is performed by * a special mixer thread in the AudioFlinger. */ audio_io_handle_t (*)(void *service, audio_io_handle_t output1, audio_io_handle_t output2)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* creates a special output that is duplicated to the two outputs passed as
     * arguments. The duplication is performed by
     * a special mixer thread in the AudioFlinger.
     */
    audio_io_handle_t (*${name})(void *service,
                                               audio_io_handle_t output1,
                                               audio_io_handle_t output2)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " creates a special output that is duplicated to the two outputs passed as
arguments. The duplication is performed by
a special mixer thread in the AudioFlinger.

"
      end

      attribute 15509943 "close_output"
	public explicit_type "/* closes the output stream */ int (*)(void *service, audio_io_handle_t output)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* closes the output stream */
    int (*${name})(void *service, audio_io_handle_t output)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " closes the output stream 
"
      end

      attribute 15510071 "suspend_output"
	public explicit_type "/* suspends the output. * * When an output is suspended, the corresponding audio hardware output * stream is placed in standby and the AudioTracks attached to the mixer * thread are still processed but the output mix is discarded. */ int (*)(void *service, audio_io_handle_t output)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* suspends the output.
     *
     * When an output is suspended, the corresponding audio hardware output
     * stream is placed in standby and the AudioTracks attached to the mixer
     * thread are still processed but the output mix is discarded.
     */
    int (*${name})(void *service, audio_io_handle_t output)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " suspends the output.

When an output is suspended, the corresponding audio hardware output
stream is placed in standby and the AudioTracks attached to the mixer
thread are still processed but the output mix is discarded.

"
      end

      attribute 15510199 "restore_output"
	public explicit_type "/* restores a suspended output. */ int (*)(void *service, audio_io_handle_t output)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* restores a suspended output. */
    int (*${name})(void *service, audio_io_handle_t output)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " restores a suspended output. 
"
      end

      attribute 15510327 "open_input"
	public explicit_type "/* */ /* Audio input Control functions */ /* */ /* opens an audio input * deprecated - new implementations should use open_input_on_module, * and the acoustics parameter is ignored */ audio_io_handle_t (*)(void *service, audio_devices_t *pDevices, uint32_t *pSamplingRate, audio_format_t *pFormat, audio_channel_mask_t *pChannelMask, audio_in_acoustics_t acoustics)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* */
    /* Audio input Control functions */
    /* */

    /* opens an audio input
     * deprecated - new implementations should use open_input_on_module,
     * and the acoustics parameter is ignored
     */
    audio_io_handle_t (*${name})(void *service,
                                    audio_devices_t *pDevices,
                                    uint32_t *pSamplingRate,
                                    audio_format_t *pFormat,
                                    audio_channel_mask_t *pChannelMask,
                                    audio_in_acoustics_t acoustics)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Audio input Control functions 
 
 opens an audio input
deprecated - new implementations should use open_input_on_module,
and the acoustics parameter is ignored

"
      end

      attribute 15510455 "close_input"
	public explicit_type "/* closes an audio input */ int (*)(void *service, audio_io_handle_t input)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* closes an audio input */
    int (*${name})(void *service, audio_io_handle_t input)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " closes an audio input 
"
      end

      attribute 15510583 "set_stream_volume"
	public explicit_type "/* */ /* misc control functions */ /* */ /* set a stream volume for a particular output. * * For the same user setting, a given stream type can have different * volumes for each output (destination device) it is attached to. */ int (*)(void *service, audio_stream_type_t stream, float volume, audio_io_handle_t output, int delay_ms)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* */
    /* misc control functions */
    /* */

    /* set a stream volume for a particular output.
     *
     * For the same user setting, a given stream type can have different
     * volumes for each output (destination device) it is attached to.
     */
    int (*${name})(void *service,
                             audio_stream_type_t stream,
                             float volume,
                             audio_io_handle_t output,
                             int delay_ms)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " misc control functions 
 
 set a stream volume for a particular output.

For the same user setting, a given stream type can have different
volumes for each output (destination device) it is attached to.

"
      end

      attribute 15510711 "invalidate_stream"
	public explicit_type "/* invalidate a stream type, causing a reroute to an unspecified new output */ int (*)(void *service, audio_stream_type_t stream)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* invalidate a stream type, causing a reroute to an unspecified new output */
    int (*${name})(void *service,
                             audio_stream_type_t stream)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " invalidate a stream type, causing a reroute to an unspecified new output 
"
      end

      attribute 15510839 "set_parameters"
	public explicit_type "/* function enabling to send proprietary informations directly from audio * policy manager to audio hardware interface. */ void (*)(void *service, audio_io_handle_t io_handle, const char *kv_pairs, int delay_ms)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* function enabling to send proprietary informations directly from audio
     * policy manager to audio hardware interface. */
    void (*${name})(void *service,
                           audio_io_handle_t io_handle,
                           const char *kv_pairs,
                           int delay_ms)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " function enabling to send proprietary informations directly from audio
policy manager to audio hardware interface. 
"
      end

      attribute 15510967 "get_parameters"
	public explicit_type "/* function enabling to receive proprietary informations directly from * audio hardware interface to audio policy manager. * * Returns a pointer to a heap allocated string. The caller is responsible * for freeing the memory for it using free(). */ char * (*)(void *service, audio_io_handle_t io_handle, const char *keys)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* function enabling to receive proprietary informations directly from
     * audio hardware interface to audio policy manager.
     *
     * Returns a pointer to a heap allocated string. The caller is responsible
     * for freeing the memory for it using free().
     */

    char * (*${name})(void *service, audio_io_handle_t io_handle,
                             const char *keys)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " function enabling to receive proprietary informations directly from
audio hardware interface to audio policy manager.

Returns a pointer to a heap allocated string. The caller is responsible
for freeing the memory for it using free().

"
      end

      attribute 15511095 "start_tone"
	public explicit_type "/* request the playback of a tone on the specified stream. * used for instance to replace notification sounds when playing over a * telephony device during a phone call. */ int (*)(void *service, audio_policy_tone_t tone, audio_stream_type_t stream)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* request the playback of a tone on the specified stream.
     * used for instance to replace notification sounds when playing over a
     * telephony device during a phone call.
     */
    int (*${name})(void *service,
                      audio_policy_tone_t tone,
                      audio_stream_type_t stream)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " request the playback of a tone on the specified stream.
used for instance to replace notification sounds when playing over a
telephony device during a phone call.

"
      end

      attribute 15511223 "stop_tone"
	public explicit_type "int (*)(void *service)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    int (*${name})(void *service)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15511351 "set_voice_volume"
	public explicit_type "/* set down link audio volume. */ int (*)(void *service, float volume, int delay_ms)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* set down link audio volume. */
    int (*${name})(void *service,
                            float volume,
                            int delay_ms)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " set down link audio volume. 
"
      end

      attribute 15511479 "move_effects"
	public explicit_type "/* move effect to the specified output */ int (*)(void *service, audio_session_t session, audio_io_handle_t src_output, audio_io_handle_t dst_output)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* move effect to the specified output */
    int (*${name})(void *service,
                        audio_session_t session,
                        audio_io_handle_t src_output,
                        audio_io_handle_t dst_output)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " move effect to the specified output 
"
      end

      attribute 15511607 "load_hw_module"
	public explicit_type "/* loads an audio hw module. * * The module name passed is the base name of the HW module library, e.g \"primary\" or \"a2dp\". * The function returns a handle on the module that will be used to specify a particular * module when calling open_output_on_module() or open_input_on_module() */ audio_module_handle_t (*)(void *service, const char *name)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* loads an audio hw module.
     *
     * The module name passed is the base name of the HW module library, e.g \"primary\" or \"a2dp\".
     * The function returns a handle on the module that will be used to specify a particular
     * module when calling open_output_on_module() or open_input_on_module()
     */
    audio_module_handle_t (*${name})(void *service,
                                              const char *name)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " loads an audio hw module.

The module name passed is the base name of the HW module library, e.g \"primary\" or \"a2dp\".
The function returns a handle on the module that will be used to specify a particular
module when calling open_output_on_module() or open_input_on_module()

"
      end

      attribute 15511735 "open_output_on_module"
	public explicit_type "/* Opens an audio output on a particular HW module. * * Same as open_output() but specifying a specific HW module on which the output must be opened. */ audio_io_handle_t (*)(void *service, audio_module_handle_t module, audio_devices_t *pDevices, uint32_t *pSamplingRate, audio_format_t *pFormat, audio_channel_mask_t *pChannelMask, uint32_t *pLatencyMs, audio_output_flags_t flags, const audio_offload_info_t *offloadInfo)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* Opens an audio output on a particular HW module.
     *
     * Same as open_output() but specifying a specific HW module on which the output must be opened.
     */
    audio_io_handle_t (*${name})(void *service,
                                     audio_module_handle_t module,
                                     audio_devices_t *pDevices,
                                     uint32_t *pSamplingRate,
                                     audio_format_t *pFormat,
                                     audio_channel_mask_t *pChannelMask,
                                     uint32_t *pLatencyMs,
                                     audio_output_flags_t flags,
                                     const audio_offload_info_t *offloadInfo)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Opens an audio output on a particular HW module.

Same as open_output() but specifying a specific HW module on which the output must be opened.

"
      end

      attribute 15511863 "open_input_on_module"
	public explicit_type "/* Opens an audio input on a particular HW module. * * Same as open_input() but specifying a specific HW module on which the input must be opened. * Also removed deprecated acoustics parameter */ audio_io_handle_t (*)(void *service, audio_module_handle_t module, audio_devices_t *pDevices, uint32_t *pSamplingRate, audio_format_t *pFormat, audio_channel_mask_t *pChannelMask)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* Opens an audio input on a particular HW module.
     *
     * Same as open_input() but specifying a specific HW module on which the input must be opened.
     * Also removed deprecated acoustics parameter
     */
    audio_io_handle_t (*${name})(void *service,
                                    audio_module_handle_t module,
                                    audio_devices_t *pDevices,
                                    uint32_t *pSamplingRate,
                                    audio_format_t *pFormat,
                                    audio_channel_mask_t *pChannelMask)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Opens an audio input on a particular HW module.

Same as open_input() but specifying a specific HW module on which the input must be opened.
Also removed deprecated acoustics parameter

"
      end
    end

    class 4310967 "audio_policy_module"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Every hardware module must have a data structure named HAL_MODULE_INFO_SYM
and the fields of this data structure must begin with hw_module_t
followed by module specific information.
"
      classrelation 8298935 // common (<directional composition>)
	relation 8298935 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8298935 // common (<directional composition>)
	  b parent class_ref 4305335 // hw_module_t
      end
    end

    class 4311095 "audio_policy_module_t"
      visibility package stereotype "typedef" base_type class_ref 4310967 // audio_policy_module
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4311223 "audio_policy_device"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8299063 // common (<directional composition>)
	relation 8299063 *-->
	  a role_name "common" public
	    comment "Common methods of the audio policy device.  This *must* be the first member of
audio_policy_device as users of this structure will cast a hw_device_t to
audio_policy_device pointer in contexts where it's known the hw_device_t references an
audio_policy_device.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8299063 // common (<directional composition>)
	  b parent class_ref 4305975 // hw_device_t
      end

      attribute 15511991 "create_audio_policy"
	public explicit_type "int (*)(const struct audio_policy_device *device, struct audio_policy_service_ops *aps_ops, void *service, struct audio_policy **ap)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    int (*${name})(const struct audio_policy_device *device,
                               struct audio_policy_service_ops *aps_ops,
                               void *service,
                               struct audio_policy **ap)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15512119 "destroy_audio_policy"
	public explicit_type "int (*)(const struct audio_policy_device *device, struct audio_policy *ap)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    int (*${name})(const struct audio_policy_device *device,
                                struct audio_policy *ap)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4311351 "bt_scan_mode_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Bluetooth Adapter Visibility Modes"
      attribute 15512247 "BT_SCAN_MODE_NONE"
	public type class_ref 4311351 // bt_scan_mode_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15512375 "BT_SCAN_MODE_CONNECTABLE"
	public type class_ref 4311351 // bt_scan_mode_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15512503 "BT_SCAN_MODE_CONNECTABLE_DISCOVERABLE"
	public type class_ref 4311351 // bt_scan_mode_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4311479 "bt_state_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Bluetooth Adapter State "
      attribute 15512631 "BT_STATE_OFF"
	public type class_ref 4311479 // bt_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15512759 "BT_STATE_ON"
	public type class_ref 4311479 // bt_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4311607 "bt_status_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Bluetooth Error Status 
 We need to build on this "
      attribute 15512887 "BT_STATUS_SUCCESS"
	public type class_ref 4311607 // bt_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15513015 "BT_STATUS_FAIL"
	public type class_ref 4311607 // bt_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15513143 "BT_STATUS_NOT_READY"
	public type class_ref 4311607 // bt_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15513271 "BT_STATUS_NOMEM"
	public type class_ref 4311607 // bt_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15513399 "BT_STATUS_BUSY"
	public type class_ref 4311607 // bt_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15513527 "BT_STATUS_DONE"
	public type class_ref 4311607 // bt_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15513655 "BT_STATUS_UNSUPPORTED"
	public type class_ref 4311607 // bt_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15513783 "BT_STATUS_PARM_INVALID"
	public type class_ref 4311607 // bt_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15513911 "BT_STATUS_UNHANDLED"
	public type class_ref 4311607 // bt_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15514039 "BT_STATUS_AUTH_FAILURE"
	public type class_ref 4311607 // bt_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15514167 "BT_STATUS_RMT_DEV_DOWN"
	public type class_ref 4311607 // bt_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15514295 "BT_STATUS_AUTH_REJECTED"
	public type class_ref 4311607 // bt_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15514423 "BT_STATUS_JNI_ENVIRONMENT_ERROR"
	public type class_ref 4311607 // bt_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15514551 "BT_STATUS_JNI_THREAD_ATTACH_ERROR"
	public type class_ref 4311607 // bt_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15514679 "BT_STATUS_WAKELOCK_ERROR"
	public type class_ref 4311607 // bt_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4311735 "bt_discovery_state_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Bluetooth Adapter Discovery state "
      attribute 15514807 "BT_DISCOVERY_STOPPED"
	public type class_ref 4311735 // bt_discovery_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15514935 "BT_DISCOVERY_STARTED"
	public type class_ref 4311735 // bt_discovery_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4311863 "bt_acl_state_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Bluetooth ACL connection state "
      attribute 15515063 "BT_ACL_STATE_CONNECTED"
	public type class_ref 4311863 // bt_acl_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15515191 "BT_ACL_STATE_DISCONNECTED"
	public type class_ref 4311863 // bt_acl_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4311991 "bt_uuid_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Bluetooth 128-bit UUID "
    end

    class 4312119 "bt_service_record_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Bluetooth SDP service record "
      classrelation 8299319 // uuid (<directional composition>)
	relation 8299319 *-->
	  a role_name "uuid" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8299319 // uuid (<directional composition>)
	  b parent class_ref 4311991 // bt_uuid_t
      end

      attribute 15515319 "name"
	public explicit_type "char"
	multiplicity "[256]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " what's the maximum length"
      end
    end

    class 4312247 "bt_remote_version_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Bluetooth Remote Version info "
      attribute 15515447 "version"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15515575 "sub_ver"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15515703 "manufacturer"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4312375 "bt_local_le_features_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15515831 "extended_scan_support"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15515959 "debug_logging_supported"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4312503 "bt_property_type_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Bluetooth Adapter and Remote Device property types "
      attribute 15516087 "BT_PROPERTY_BDNAME"
	public type class_ref 4312503 // bt_property_type_t
	init_value " 0x1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15516215 "BT_PROPERTY_BDADDR"
	public type class_ref 4312503 // bt_property_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15516343 "BT_PROPERTY_UUIDS"
	public type class_ref 4312503 // bt_property_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15516471 "BT_PROPERTY_CLASS_OF_DEVICE"
	public type class_ref 4312503 // bt_property_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15516599 "BT_PROPERTY_TYPE_OF_DEVICE"
	public type class_ref 4312503 // bt_property_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15516727 "BT_PROPERTY_SERVICE_RECORD"
	public type class_ref 4312503 // bt_property_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15516855 "BT_PROPERTY_ADAPTER_SCAN_MODE"
	public type class_ref 4312503 // bt_property_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15516983 "BT_PROPERTY_ADAPTER_BONDED_DEVICES"
	public type class_ref 4312503 // bt_property_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15517111 "BT_PROPERTY_ADAPTER_DISCOVERY_TIMEOUT"
	public type class_ref 4312503 // bt_property_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15517239 "BT_PROPERTY_REMOTE_FRIENDLY_NAME"
	public type class_ref 4312503 // bt_property_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15517367 "BT_PROPERTY_REMOTE_RSSI"
	public type class_ref 4312503 // bt_property_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15517495 "BT_PROPERTY_REMOTE_VERSION_INFO"
	public type class_ref 4312503 // bt_property_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15517623 "BT_PROPERTY_LOCAL_LE_FEATURES"
	public type class_ref 4312503 // bt_property_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15517751 "BT_PROPERTY_REMOTE_DEVICE_TIMESTAMP"
	public type class_ref 4312503 // bt_property_type_t
	init_value " 0xFF"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4312631 "bt_property_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Properties common to both adapter and remote device 

Description - Bluetooth Device Name
Access mode - Adapter name can be GET/SET. Remote device can be GET
Data type   - bt_bdname_t


Description - Bluetooth Device Address
Access mode - Only GET.
Data type   - bt_bdaddr_t


Description - Bluetooth Service 128-bit UUIDs
Access mode - Only GET.
Data type   - Array of bt_uuid_t (Array size inferred from property length).


Description - Bluetooth Class of Device as found in Assigned Numbers
Access mode - Only GET.
Data type   - uint32_t.


Description - Device Type - BREDR, BLE or DUAL Mode
Access mode - Only GET.
Data type   - bt_device_type_t


Description - Bluetooth Service Record
Access mode - Only GET.
Data type   - bt_service_record_t

 Properties unique to adapter 

Description - Bluetooth Adapter scan mode
Access mode - GET and SET
Data type   - bt_scan_mode_t.


Description - List of bonded devices
Access mode - Only GET.
Data type   - Array of bt_bdaddr_t of the bonded remote devices
              (Array size inferred from property length).


Description - Bluetooth Adapter Discovery timeout (in seconds)
Access mode - GET and SET
Data type   - uint32_t

 Properties unique to remote device 

Description - User defined friendly name of the remote device
Access mode - GET and SET
Data type   - bt_bdname_t.


Description - RSSI value of the inquired remote device
Access mode - Only GET.
Data type   - int32_t.


Description - Remote version info
Access mode - SET/GET.
Data type   - bt_remote_version_t.


Description - Local LE features
Access mode - GET.
Data type   - bt_local_le_features_t.

 Bluetooth Adapter Property data structure "
      classrelation 8300727 // type (<directional composition>)
	relation 8300727 *-->
	  a role_name "type" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8300727 // type (<directional composition>)
	  b parent class_ref 4312503 // bt_property_type_t
      end

      attribute 15517879 "len"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15518007 "val"
	public explicit_type "void"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4312759 "bt_out_of_band_data_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Bluetooth Out Of Band data for bonding "
    end

    class 4312887 "bt_device_type_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Bluetooth Device Type "
      attribute 15518135 "BT_DEVICE_DEVTYPE_BREDR"
	public type class_ref 4312887 // bt_device_type_t
	init_value " 0x1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15518263 "BT_DEVICE_DEVTYPE_BLE"
	public type class_ref 4312887 // bt_device_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15518391 "BT_DEVICE_DEVTYPE_DUAL"
	public type class_ref 4312887 // bt_device_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4313015 "bt_bond_state_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Bluetooth Bond state "
      attribute 15518519 "BT_BOND_STATE_NONE"
	public type class_ref 4313015 // bt_bond_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15518647 "BT_BOND_STATE_BONDING"
	public type class_ref 4313015 // bt_bond_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15518775 "BT_BOND_STATE_BONDED"
	public type class_ref 4313015 // bt_bond_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4313143 "bt_ssp_variant_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Bluetooth SSP Bonding Variant "
      attribute 15518903 "BT_SSP_VARIANT_PASSKEY_CONFIRMATION"
	public type class_ref 4313143 // bt_ssp_variant_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15519031 "BT_SSP_VARIANT_PASSKEY_ENTRY"
	public type class_ref 4313143 // bt_ssp_variant_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15519159 "BT_SSP_VARIANT_CONSENT"
	public type class_ref 4313143 // bt_ssp_variant_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15519287 "BT_SSP_VARIANT_PASSKEY_NOTIFICATION"
	public type class_ref 4313143 // bt_ssp_variant_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4313271 "adapter_state_changed_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(bt_state_t state);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Bluetooth Interface callbacks 
 Bluetooth Enable/Disable Callback. "
    end

    class 4313399 "adapter_properties_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(bt_status_t status,
                                               int num_properties,
                                               bt_property_t *properties);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " GET/SET Adapter Properties callback 
 TODO: For the GET/SET property APIs/callbacks, we may need a session
identifier to associate the call with the callback. This would be needed
whenever more than one simultaneous instance of the same adapter_type
is get/set.

If this is going to be handled in the Java framework, then we do not need
to manage sessions here.
"
    end

    class 4313527 "remote_device_properties_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(bt_status_t status,
                                                       bt_bdaddr_t *bd_addr,
                                                       int num_properties,
                                                       bt_property_t *properties);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " GET/SET Remote Device Properties callback 
 TODO: For remote device properties, do not see a need to get/set
multiple properties - num_properties shall be 1
"
    end

    class 4313655 "device_found_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int num_properties,
                                         bt_property_t *properties);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " New device discovered callback 
 If EIR data is not present, then BD_NAME and RSSI shall be NULL and -1
respectively "
    end

    class 4313783 "discovery_state_changed_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(bt_discovery_state_t state);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Discovery state changed callback "
    end

    class 4313911 "pin_request_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(bt_bdaddr_t *remote_bd_addr,
                                        bt_bdname_t *bd_name, uint32_t cod, bool min_16_digit);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Bluetooth Legacy PinKey Request callback "
    end

    class 4314039 "ssp_request_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(bt_bdaddr_t *remote_bd_addr,
                                        bt_bdname_t *bd_name,
                                        uint32_t cod,
                                        bt_ssp_variant_t pairing_variant,
                                     uint32_t pass_key);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Bluetooth SSP Request callback - Just Works & Numeric Comparison
 pass_key - Shall be 0 for BT_SSP_PAIRING_VARIANT_CONSENT &
 BT_SSP_PAIRING_PASSKEY_ENTRY 
 TODO: Passkey request callback shall not be needed for devices with display
capability. We still need support this in the stack for completeness "
    end

    class 4314167 "bond_state_changed_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(bt_status_t status,
                                               bt_bdaddr_t *remote_bd_addr,
                                               bt_bond_state_t state);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Bluetooth Bond state changed callback 
 Invoked in response to create_bond, cancel_bond or remove_bond "
    end

    class 4314295 "acl_state_changed_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(bt_status_t status, bt_bdaddr_t *remote_bd_addr,
                                            bt_acl_state_t state);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Bluetooth ACL connection state changed callback "
    end

    class 4314423 "bt_cb_thread_evt"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15519415 "ASSOCIATE_JVM"
	public type class_ref 4314423 // bt_cb_thread_evt
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15519543 "DISASSOCIATE_JVM"
	public type class_ref 4314423 // bt_cb_thread_evt
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4314551 "callback_thread_event"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(bt_cb_thread_evt evt);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Thread Associate/Disassociate JVM Callback 
 Callback that is invoked by the callback thread to allow upper layer to attach/detach to/from
the JVM "
    end

    class 4314679 "dut_mode_recv_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(uint16_t opcode, uint8_t *buf, uint8_t len);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Bluetooth Test Mode Callback 
 Receive any HCI event from controller. Must be in DUT Mode for this callback to be received "
    end

    class 4314807 "le_test_mode_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(bt_status_t status, uint16_t num_packets);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " LE Test mode callbacks
This callback shall be invoked whenever the le_tx_test, le_rx_test or le_test_end is invoked
The num_packets is valid only for le_test_end command "
    end

    class 4314935 "energy_info_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(bt_activity_energy_info *energy_info,
                                     bt_uid_traffic_t *uid_data);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback invoked when energy details are obtained 
 Ctrl_state-Current controller state-Active-1,scan-2,or idle-3 state as defined by HCI spec.
If the ctrl_state value is 0, it means the API call failed
Time values-In milliseconds as returned by the controller
Energy used-Value as returned by the controller
Status-Provides the status of the read_energy_info API call
uid_data provides an array of bt_uid_traffic_t, where the array is terminated by an element with
app_uid set to -1.
"
    end

    class 4315063 "bt_callbacks_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " TODO: Add callbacks for Link Up/Down and other generic
 notifications/callbacks 
 Bluetooth DM callback structure. "
      classrelation 8301879 // adapter_state_changed_cb (<directional composition>)
	relation 8301879 *-->
	  a role_name "adapter_state_changed_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8301879 // adapter_state_changed_cb (<directional composition>)
	  b parent class_ref 4313271 // adapter_state_changed_callback
      end

      classrelation 8302007 // adapter_properties_cb (<directional composition>)
	relation 8302007 *-->
	  a role_name "adapter_properties_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8302007 // adapter_properties_cb (<directional composition>)
	  b parent class_ref 4313399 // adapter_properties_callback
      end

      classrelation 8302135 // remote_device_properties_cb (<directional composition>)
	relation 8302135 *-->
	  a role_name "remote_device_properties_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8302135 // remote_device_properties_cb (<directional composition>)
	  b parent class_ref 4313527 // remote_device_properties_callback
      end

      classrelation 8302263 // device_found_cb (<directional composition>)
	relation 8302263 *-->
	  a role_name "device_found_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8302263 // device_found_cb (<directional composition>)
	  b parent class_ref 4313655 // device_found_callback
      end

      classrelation 8302391 // discovery_state_changed_cb (<directional composition>)
	relation 8302391 *-->
	  a role_name "discovery_state_changed_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8302391 // discovery_state_changed_cb (<directional composition>)
	  b parent class_ref 4313783 // discovery_state_changed_callback
      end

      classrelation 8302519 // pin_request_cb (<directional composition>)
	relation 8302519 *-->
	  a role_name "pin_request_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8302519 // pin_request_cb (<directional composition>)
	  b parent class_ref 4313911 // pin_request_callback
      end

      classrelation 8302647 // ssp_request_cb (<directional composition>)
	relation 8302647 *-->
	  a role_name "ssp_request_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8302647 // ssp_request_cb (<directional composition>)
	  b parent class_ref 4314039 // ssp_request_callback
      end

      classrelation 8302775 // bond_state_changed_cb (<directional composition>)
	relation 8302775 *-->
	  a role_name "bond_state_changed_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8302775 // bond_state_changed_cb (<directional composition>)
	  b parent class_ref 4314167 // bond_state_changed_callback
      end

      classrelation 8302903 // acl_state_changed_cb (<directional composition>)
	relation 8302903 *-->
	  a role_name "acl_state_changed_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8302903 // acl_state_changed_cb (<directional composition>)
	  b parent class_ref 4314295 // acl_state_changed_callback
      end

      classrelation 8303031 // thread_evt_cb (<directional composition>)
	relation 8303031 *-->
	  a role_name "thread_evt_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8303031 // thread_evt_cb (<directional composition>)
	  b parent class_ref 4314551 // callback_thread_event
      end

      classrelation 8303159 // dut_mode_recv_cb (<directional composition>)
	relation 8303159 *-->
	  a role_name "dut_mode_recv_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8303159 // dut_mode_recv_cb (<directional composition>)
	  b parent class_ref 4314679 // dut_mode_recv_callback
      end

      classrelation 8303287 // le_test_mode_cb (<directional composition>)
	relation 8303287 *-->
	  a role_name "le_test_mode_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8303287 // le_test_mode_cb (<directional composition>)
	  b parent class_ref 4314807 // le_test_mode_callback
      end

      classrelation 8303415 // energy_info_cb (<directional composition>)
	relation 8303415 *-->
	  a role_name "energy_info_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8303415 // energy_info_cb (<directional composition>)
	  b parent class_ref 4314935 // energy_info_callback
      end
    end

    class 4315191 "alarm_cb"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(void *data);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4315319 "set_wake_alarm_callout"
      visibility package stereotype "typedef" explicit_base_type "bool"
      cpp_decl "${comment}typedef ${type}(* ${name})(uint64_t delay_millis, bool should_wake, alarm_cb cb, void *data);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4315447 "acquire_wake_lock_callout"
      visibility package stereotype "typedef" explicit_base_type "int"
      cpp_decl "${comment}typedef ${type}(* ${name})(const char *lock_name);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4315575 "release_wake_lock_callout"
      visibility package stereotype "typedef" explicit_base_type "int"
      cpp_decl "${comment}typedef ${type}(* ${name})(const char *lock_name);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4315703 "bt_os_callouts_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The set of functions required by bluedroid to set wake alarms and
grab wake locks. This struct is passed into the stack through the
|set_os_callouts| function on |bt_interface_t|.
"
      classrelation 8303671 // set_wake_alarm (<directional composition>)
	relation 8303671 *-->
	  a role_name "set_wake_alarm" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8303671 // set_wake_alarm (<directional composition>)
	  b parent class_ref 4315319 // set_wake_alarm_callout
      end

      classrelation 8303799 // acquire_wake_lock (<directional composition>)
	relation 8303799 *-->
	  a role_name "acquire_wake_lock" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8303799 // acquire_wake_lock (<directional composition>)
	  b parent class_ref 4315447 // acquire_wake_lock_callout
      end

      classrelation 8303927 // release_wake_lock (<directional composition>)
	relation 8303927 *-->
	  a role_name "release_wake_lock" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8303927 // release_wake_lock (<directional composition>)
	  b parent class_ref 4315575 // release_wake_lock_callout
      end
    end

    class 4315831 "bt_interface_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " NOTE: By default, no profiles are initialized at the time of init/enable.
 Whenever the application invokes the 'init' API of a profile, then one of
 the following shall occur:

   1.) If Bluetooth is not enabled, then the Bluetooth core shall mark the
       profile as enabled. Subsequently, when the application invokes the
       Bluetooth 'enable', as part of the enable sequence the profile that were
       marked shall be enabled by calling appropriate stack APIs. The
       'adapter_properties_cb' shall return the list of UUIDs of the
       enabled profiles.

   2.) If Bluetooth is enabled, then the Bluetooth core shall invoke the stack
       profile API to initialize the profile and trigger a
       'adapter_properties_cb' with the current list of UUIDs including the
       newly added profile's UUID.

  The reverse shall occur whenever the profile 'cleanup' APIs are invoked

 Represents the standard Bluetooth DM interface. "
      attribute 15519671 "init"
	public explicit_type "/** * Opens the interface and provides the callback routines * to the implemenation of this interface. */ int (*)(bt_callbacks_t* callbacks )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    /**
     * Opens the interface and provides the callback routines
     * to the implemenation of this interface.
     */
    int (*${name})(bt_callbacks_t* callbacks )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Opens the interface and provides the callback routines
to the implemenation of this interface.

"
      end

      attribute 15519799 "enable"
	public explicit_type "/** Enable Bluetooth. */ int (*)(bool guest_mode)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Enable Bluetooth. */
    int (*${name})(bool guest_mode)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Enable Bluetooth. 
"
      end

      attribute 15519927 "disable"
	public explicit_type "/** Disable Bluetooth. */ int (*)(void)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Disable Bluetooth. */
    int (*${name})(void)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Disable Bluetooth. 
"
      end

      attribute 15520055 "cleanup"
	public explicit_type "/** Closes the interface. */ void (*)(void)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Closes the interface. */
    void (*${name})(void)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Closes the interface. 
"
      end

      attribute 15520183 "get_adapter_properties"
	public explicit_type "/** Get all Bluetooth Adapter properties at init */ int (*)(void)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Get all Bluetooth Adapter properties at init */
    int (*${name})(void)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Get all Bluetooth Adapter properties at init 
"
      end

      attribute 15520311 "get_adapter_property"
	public explicit_type "/** Get Bluetooth Adapter property of 'type' */ int (*)(bt_property_type_t type)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Get Bluetooth Adapter property of 'type' */
    int (*${name})(bt_property_type_t type)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Get Bluetooth Adapter property of 'type' 
"
      end

      attribute 15520439 "set_adapter_property"
	public explicit_type "/** Set Bluetooth Adapter property of 'type' */ /* Based on the type, val shall be one of * bt_bdaddr_t or bt_bdname_t or bt_scanmode_t etc */ int (*)(const bt_property_t *property)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Set Bluetooth Adapter property of 'type' */
    /* Based on the type, val shall be one of
     * bt_bdaddr_t or bt_bdname_t or bt_scanmode_t etc
     */
    int (*${name})(const bt_property_t *property)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Set Bluetooth Adapter property of 'type' 
 Based on the type, val shall be one of
bt_bdaddr_t or bt_bdname_t or bt_scanmode_t etc

"
      end

      attribute 15520567 "get_remote_device_properties"
	public explicit_type "/** Get all Remote Device properties */ int (*)(bt_bdaddr_t *remote_addr)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Get all Remote Device properties */
    int (*${name})(bt_bdaddr_t *remote_addr)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Get all Remote Device properties 
"
      end

      attribute 15520695 "get_remote_device_property"
	public explicit_type "/** Get Remote Device property of 'type' */ int (*)(bt_bdaddr_t *remote_addr, bt_property_type_t type)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Get Remote Device property of 'type' */
    int (*${name})(bt_bdaddr_t *remote_addr,
                                      bt_property_type_t type)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Get Remote Device property of 'type' 
"
      end

      attribute 15520823 "set_remote_device_property"
	public explicit_type "/** Set Remote Device property of 'type' */ int (*)(bt_bdaddr_t *remote_addr, const bt_property_t *property)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Set Remote Device property of 'type' */
    int (*${name})(bt_bdaddr_t *remote_addr,
                                      const bt_property_t *property)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Set Remote Device property of 'type' 
"
      end

      attribute 15520951 "get_remote_service_record"
	public explicit_type "/** Get Remote Device's service record for the given UUID */ int (*)(bt_bdaddr_t *remote_addr, bt_uuid_t *uuid)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Get Remote Device's service record  for the given UUID */
    int (*${name})(bt_bdaddr_t *remote_addr,
                                     bt_uuid_t *uuid)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Get Remote Device's service record  for the given UUID 
"
      end

      attribute 15521079 "get_remote_services"
	public explicit_type "/** Start SDP to get remote services */ int (*)(bt_bdaddr_t *remote_addr)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Start SDP to get remote services */
    int (*${name})(bt_bdaddr_t *remote_addr)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Start SDP to get remote services 
"
      end

      attribute 15521207 "start_discovery"
	public explicit_type "/** Start Discovery */ int (*)(void)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Start Discovery */
    int (*${name})(void)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Start Discovery 
"
      end

      attribute 15521335 "cancel_discovery"
	public explicit_type "/** Cancel Discovery */ int (*)(void)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Cancel Discovery */
    int (*${name})(void)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Cancel Discovery 
"
      end

      attribute 15521463 "create_bond"
	public explicit_type "/** Create Bluetooth Bonding */ int (*)(const bt_bdaddr_t *bd_addr, int transport)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Create Bluetooth Bonding */
    int (*${name})(const bt_bdaddr_t *bd_addr, int transport)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Create Bluetooth Bonding 
"
      end

      attribute 15521591 "create_bond_out_of_band"
	public explicit_type "/** Create Bluetooth Bond using out of band data */ int (*)(const bt_bdaddr_t *bd_addr, int transport, const bt_out_of_band_data_t *oob_data)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Create Bluetooth Bond using out of band data */
    int (*${name})(const bt_bdaddr_t *bd_addr, int transport,
                                   const bt_out_of_band_data_t *oob_data)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Create Bluetooth Bond using out of band data 
"
      end

      attribute 15521719 "remove_bond"
	public explicit_type "/** Remove Bond */ int (*)(const bt_bdaddr_t *bd_addr)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Remove Bond */
    int (*${name})(const bt_bdaddr_t *bd_addr)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Remove Bond 
"
      end

      attribute 15521847 "cancel_bond"
	public explicit_type "/** Cancel Bond */ int (*)(const bt_bdaddr_t *bd_addr)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Cancel Bond */
    int (*${name})(const bt_bdaddr_t *bd_addr)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Cancel Bond 
"
      end

      attribute 15521975 "get_connection_state"
	public explicit_type "/** * Get the connection status for a given remote device. * return value of 0 means the device is not connected, * non-zero return status indicates an active connection. */ int (*)(const bt_bdaddr_t *bd_addr)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Get the connection status for a given remote device.
     * return value of 0 means the device is not connected,
     * non-zero return status indicates an active connection.
     */
    int (*${name})(const bt_bdaddr_t *bd_addr)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Get the connection status for a given remote device.
return value of 0 means the device is not connected,
non-zero return status indicates an active connection.

"
      end

      attribute 15522103 "pin_reply"
	public explicit_type "/** BT Legacy PinKey Reply */ /** If accept==FALSE, then pin_len and pin_code shall be 0x0 */ int (*)(const bt_bdaddr_t *bd_addr, uint8_t accept, uint8_t pin_len, bt_pin_code_t *pin_code)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** BT Legacy PinKey Reply */
    /** If accept==FALSE, then pin_len and pin_code shall be 0x0 */
    int (*${name})(const bt_bdaddr_t *bd_addr, uint8_t accept,
                     uint8_t pin_len, bt_pin_code_t *pin_code)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " BT Legacy PinKey Reply 
 If accept==FALSE, then pin_len and pin_code shall be 0x0 
"
      end

      attribute 15522231 "ssp_reply"
	public explicit_type "/** BT SSP Reply - Just Works, Numeric Comparison and Passkey * passkey shall be zero for BT_SSP_VARIANT_PASSKEY_COMPARISON & * BT_SSP_VARIANT_CONSENT * For BT_SSP_VARIANT_PASSKEY_ENTRY, if accept==FALSE, then passkey * shall be zero */ int (*)(const bt_bdaddr_t *bd_addr, bt_ssp_variant_t variant, uint8_t accept, uint32_t passkey)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** BT SSP Reply - Just Works, Numeric Comparison and Passkey
     * passkey shall be zero for BT_SSP_VARIANT_PASSKEY_COMPARISON &
     * BT_SSP_VARIANT_CONSENT
     * For BT_SSP_VARIANT_PASSKEY_ENTRY, if accept==FALSE, then passkey
     * shall be zero */
    int (*${name})(const bt_bdaddr_t *bd_addr, bt_ssp_variant_t variant,
                     uint8_t accept, uint32_t passkey)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " BT SSP Reply - Just Works, Numeric Comparison and Passkey
passkey shall be zero for BT_SSP_VARIANT_PASSKEY_COMPARISON &
BT_SSP_VARIANT_CONSENT
For BT_SSP_VARIANT_PASSKEY_ENTRY, if accept==FALSE, then passkey
shall be zero 
"
      end

      attribute 15522359 "get_profile_interface"
	const_attribute public explicit_type "void* (*) (const char *profile_id)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const} void* (*${name}) (const char *profile_id)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Get Bluetooth profile interface 
"
      end

      attribute 15522487 "dut_mode_configure"
	public explicit_type "/** Bluetooth Test Mode APIs - Bluetooth must be enabled for these APIs */ /* Configure DUT Mode - Use this mode to enter/exit DUT mode */ int (*)(uint8_t enable)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Bluetooth Test Mode APIs - Bluetooth must be enabled for these APIs */
    /* Configure DUT Mode - Use this mode to enter/exit DUT mode */
    int (*${name})(uint8_t enable)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Bluetooth Test Mode APIs - Bluetooth must be enabled for these APIs 
 Configure DUT Mode - Use this mode to enter/exit DUT mode 
"
      end

      attribute 15522615 "dut_mode_send"
	public explicit_type "/* Send any test HCI (vendor-specific) command to the controller. Must be in DUT Mode */ int (*)(uint16_t opcode, uint8_t *buf, uint8_t len)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* Send any test HCI (vendor-specific) command to the controller. Must be in DUT Mode */
    int (*${name})(uint16_t opcode, uint8_t *buf, uint8_t len)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Send any test HCI (vendor-specific) command to the controller. Must be in DUT Mode 
"
      end

      attribute 15522743 "le_test_mode"
	public explicit_type "/** BLE Test Mode APIs */ /* opcode MUST be one of: LE_Receiver_Test, LE_Transmitter_Test, LE_Test_End */ int (*)(uint16_t opcode, uint8_t *buf, uint8_t len)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    /** BLE Test Mode APIs */
    /* opcode MUST be one of: LE_Receiver_Test, LE_Transmitter_Test, LE_Test_End */
    int (*${name})(uint16_t opcode, uint8_t *buf, uint8_t len)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " BLE Test Mode APIs 
 opcode MUST be one of: LE_Receiver_Test, LE_Transmitter_Test, LE_Test_End 
"
      end

      attribute 15522871 "config_hci_snoop_log"
	public explicit_type "/* enable or disable bluetooth HCI snoop log */ int (*)(uint8_t enable)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* enable or disable bluetooth HCI snoop log */
    int (*${name})(uint8_t enable)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " enable or disable bluetooth HCI snoop log 
"
      end

      attribute 15522999 "set_os_callouts"
	public explicit_type "/** Sets the OS call-out functions that bluedroid needs for alarms and wake locks. * This should be called immediately after a successful |init|. */ int (*)(bt_os_callouts_t *callouts)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Sets the OS call-out functions that bluedroid needs for alarms and wake locks.
      * This should be called immediately after a successful |init|.
      */
    int (*${name})(bt_os_callouts_t *callouts)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Sets the OS call-out functions that bluedroid needs for alarms and wake locks.
This should be called immediately after a successful |init|.

"
      end

      attribute 15523127 "read_energy_info"
	public explicit_type "/** Read Energy info details - return value indicates BT_STATUS_SUCCESS or BT_STATUS_NOT_READY * Success indicates that the VSC command was sent to controller */ int (*)()"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Read Energy info details - return value indicates BT_STATUS_SUCCESS or BT_STATUS_NOT_READY
      * Success indicates that the VSC command was sent to controller
      */
    int (*${name})()${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Read Energy info details - return value indicates BT_STATUS_SUCCESS or BT_STATUS_NOT_READY
Success indicates that the VSC command was sent to controller

"
      end

      attribute 15523255 "dump"
	public explicit_type "/** * Native support for dumpsys function * Function is synchronous and |fd| is owned by caller. * |arguments| are arguments which may affect the output, encoded as * UTF-8 strings. */ void (*)(int fd, const char **arguments)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Native support for dumpsys function
     * Function is synchronous and |fd| is owned by caller.
     * |arguments| are arguments which may affect the output, encoded as
     * UTF-8 strings.
     */
    void (*${name})(int fd, const char **arguments)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Native support for dumpsys function
Function is synchronous and |fd| is owned by caller.
|arguments| are arguments which may affect the output, encoded as
UTF-8 strings.

"
      end

      attribute 15523383 "config_clear"
	public explicit_type "/** * Clear /data/misc/bt_config.conf and erase all stored connections */ int (*)(void)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Clear /data/misc/bt_config.conf and erase all stored connections
     */
    int (*${name})(void)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Clear /data/misc/bt_config.conf and erase all stored connections

"
      end

      attribute 15523511 "interop_database_clear"
	public explicit_type "/** * Clear (reset) the dynamic portion of the device interoperability database. */ void (*)(void)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Clear (reset) the dynamic portion of the device interoperability database.
     */
    void (*${name})(void)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Clear (reset) the dynamic portion of the device interoperability database.

"
      end

      attribute 15523639 "interop_database_add"
	public explicit_type "/** * Add a new device interoperability workaround for a remote device whose * first |len| bytes of the its device address match |addr|. * NOTE: |feature| has to match an item defined in interop_feature_t (interop.h). */ void (*)(uint16_t feature, const bt_bdaddr_t *addr, size_t len)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Add a new device interoperability workaround for a remote device whose
     * first |len| bytes of the its device address match |addr|.
     * NOTE: |feature| has to match an item defined in interop_feature_t (interop.h).
     */
    void (*${name})(uint16_t feature, const bt_bdaddr_t *addr, size_t len)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Add a new device interoperability workaround for a remote device whose
first |len| bytes of the its device address match |addr|.
NOTE: |feature| has to match an item defined in interop_feature_t (interop.h).

"
      end
    end

    class 4315959 "bluetooth_device_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " TODO: Need to add APIs for Service Discovery, Service authorization and
      connection management. Also need to add APIs for configuring
      properties of remote bonded devices such as name, UUID etc. "
      classrelation 8304183 // common (<directional composition>)
	relation 8304183 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8304183 // common (<directional composition>)
	  b parent class_ref 4305975 // hw_device_t
      end

      attribute 15523767 "get_bluetooth_interface"
	const_attribute public explicit_type "bt_interface_t* (*)()"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const} bt_interface_t* (*${name})()${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4316087 "bluetooth_module_t"
      visibility package stereotype "typedef" base_type class_ref 4315959 // bluetooth_device_t
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8304311 // <dependency>
	relation 8304311 -_->
	  a public
	    cpp default "#include in source"
	    classrelation_ref 8304311 // <dependency>
	  b parent class_ref 4315959 // bluetooth_device_t
      end
    end

    class 4316215 "btav_audio_state_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Bluetooth AV connection states 
 Bluetooth AV datapath states "
      attribute 15523895 "BTAV_AUDIO_STATE_REMOTE_SUSPEND"
	public type class_ref 4316215 // btav_audio_state_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15524023 "BTAV_AUDIO_STATE_STOPPED"
	public type class_ref 4316215 // btav_audio_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15524151 "BTAV_AUDIO_STATE_STARTED"
	public type class_ref 4316215 // btav_audio_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4316343 "btav_connection_state_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(btav_connection_state_t state,
                                                    bt_bdaddr_t *bd_addr);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for connection state change.
 state will have one of the values from btav_connection_state_t
"
    end

    class 4316471 "btav_audio_state_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(btav_audio_state_t state,
                                               bt_bdaddr_t *bd_addr);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for audiopath state change.
 state will have one of the values from btav_audio_state_t
"
    end

    class 4316599 "btav_audio_config_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bt_bdaddr_t *bd_addr,
                                                uint32_t sample_rate,
                                                uint8_t channel_count);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for audio configuration change.
 Used only for the A2DP sink interface.
 state will have one of the values from btav_audio_state_t
 sample_rate: sample rate in Hz
 channel_count: number of channels (1 for mono, 2 for stereo)
"
    end

    class 4316727 "btav_callbacks_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " BT-AV callback structure. "
      classrelation 8304567 // connection_state_cb (<directional composition>)
	relation 8304567 *-->
	  a role_name "connection_state_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8304567 // connection_state_cb (<directional composition>)
	  b parent class_ref 4316343 // btav_connection_state_callback
      end

      classrelation 8304695 // audio_state_cb (<directional composition>)
	relation 8304695 *-->
	  a role_name "audio_state_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8304695 // audio_state_cb (<directional composition>)
	  b parent class_ref 4316471 // btav_audio_state_callback
      end

      classrelation 8304823 // audio_config_cb (<directional composition>)
	relation 8304823 *-->
	  a role_name "audio_config_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8304823 // audio_config_cb (<directional composition>)
	  b parent class_ref 4316599 // btav_audio_config_callback
      end
    end

    class 4316855 "btav_interface_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "NOTE:

1. AVRCP 1.0 shall be supported initially. AVRCP passthrough commands
   shall be handled internally via uinput

2. A2DP data path shall be handled via a socket pipe between the AudioFlinger
   android_audio_hw library and the Bluetooth stack.


 Represents the standard BT-AV interface.
 Used for both the A2DP source and sink interfaces.
"
      attribute 15524279 "init"
	public explicit_type "/** * Register the BtAv callbacks */ bt_status_t (*)( btav_callbacks_t* callbacks )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    /**
     * Register the BtAv callbacks
     */
    bt_status_t (*${name})( btav_callbacks_t* callbacks )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Register the BtAv callbacks

"
      end

      attribute 15524407 "connect"
	public explicit_type "/** connect to headset */ bt_status_t (*)( bt_bdaddr_t *bd_addr )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** connect to headset */
    bt_status_t (*${name})( bt_bdaddr_t *bd_addr )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " connect to headset 
"
      end

      attribute 15524535 "disconnect"
	public explicit_type "/** dis-connect from headset */ bt_status_t (*)( bt_bdaddr_t *bd_addr )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** dis-connect from headset */
    bt_status_t (*${name})( bt_bdaddr_t *bd_addr )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " dis-connect from headset 
"
      end

      attribute 15524663 "cleanup"
	public explicit_type "/** Closes the interface. */ void (*)( void )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Closes the interface. */
    void  (*${name})( void )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Closes the interface. 
"
      end

      attribute 15524791 "set_audio_focus_state"
	public explicit_type "/** Sends Audio Focus State. */ void (*)( int focus_state )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Sends Audio Focus State. */
    void  (*${name})( int focus_state )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Sends Audio Focus State. 
"
      end

      attribute 15524919 "set_audio_track_gain"
	public explicit_type "/** Sets the audio track gain. */ void (*)( float gain )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Sets the audio track gain. */
    void  (*${name})( float gain )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Sets the audio track gain. 
"
      end
    end

    class 4316983 "btgatt_track_adv_info_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15525047 "bd_addr"
	public explicit_type "bt_bdaddr_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

    end

    class 4317111 "bt_gatt_db_attribute_type_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15525175 "BTGATT_DB_PRIMARY_SERVICE"
	public type class_ref 4317111 // bt_gatt_db_attribute_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15525303 "BTGATT_DB_SECONDARY_SERVICE"
	public type class_ref 4317111 // bt_gatt_db_attribute_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15525431 "BTGATT_DB_INCLUDED_SERVICE"
	public type class_ref 4317111 // bt_gatt_db_attribute_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15525559 "BTGATT_DB_CHARACTERISTIC"
	public type class_ref 4317111 // bt_gatt_db_attribute_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15525687 "BTGATT_DB_DESCRIPTOR"
	public type class_ref 4317111 // bt_gatt_db_attribute_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4317239 "btgatt_db_element_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8306743 // uuid (<directional composition>)
	relation 8306743 *-->
	  a role_name "uuid" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8306743 // uuid (<directional composition>)
	  b parent class_ref 4311991 // bt_uuid_t
      end

      classrelation 8306871 // type (<directional composition>)
	relation 8306871 *-->
	  a role_name "type" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8306871 // type (<directional composition>)
	  b parent class_ref 4317111 // bt_gatt_db_attribute_type_t
      end

    end

    class 4317367 "btgatt_interface_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Represents the standard Bluetooth GATT interface. "
      attribute 15525815 "init"
	public explicit_type "/** * Initializes the interface and provides callback routines */ bt_status_t (*)( const btgatt_callbacks_t* callbacks )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Initializes the interface and provides callback routines
     */
    bt_status_t (*${name})( const btgatt_callbacks_t* callbacks )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Initializes the interface and provides callback routines

"
      end

      attribute 15525943 "cleanup"
	public explicit_type "/** Closes the interface */ void (*)( void )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Closes the interface */
    void (*${name})( void )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Closes the interface 
"
      end

      classrelation 8307639 // client (<unidirectional association>)
	relation 8307639 --->
	  a role_name "client" const_relation public
	    comment " Pointer to the GATT client interface methods.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8307639 // client (<unidirectional association>)
	  b parent class_ref 4317495 // btgatt_client_interface_t
      end

      classrelation 8307767 // server (<unidirectional association>)
	relation 8307767 --->
	  a role_name "server" const_relation public
	    comment " Pointer to the GATT server interface methods.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8307767 // server (<unidirectional association>)
	  b parent class_ref 4317623 // btgatt_server_interface_t
      end
    end

    class 4317495 "btgatt_client_interface_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Represents the standard BT-GATT client interface. "
      attribute 15528503 "register_client"
	public explicit_type "/** Registers a GATT client application with the stack */ bt_status_t (*)( bt_uuid_t *uuid )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Registers a GATT client application with the stack */
    bt_status_t (*${name})( bt_uuid_t *uuid )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Registers a GATT client application with the stack 
"
      end

      attribute 15528631 "unregister_client"
	public explicit_type "/** Unregister a client application from the stack */ bt_status_t (*)(int client_if )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Unregister a client application from the stack */
    bt_status_t (*${name})(int client_if )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Unregister a client application from the stack 
"
      end

      attribute 15528759 "scan"
	public explicit_type "/** Start or stop LE device scanning */ bt_status_t (*)( bool start )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Start or stop LE device scanning */
    bt_status_t (*${name})( bool start )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Start or stop LE device scanning 
"
      end

      attribute 15528887 "connect"
	public explicit_type "/** Create a connection to a remote LE or dual-mode device */ bt_status_t (*)( int client_if, const bt_bdaddr_t *bd_addr, bool is_direct, int transport )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Create a connection to a remote LE or dual-mode device */
    bt_status_t (*${name})( int client_if, const bt_bdaddr_t *bd_addr,
                         bool is_direct, int transport )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Create a connection to a remote LE or dual-mode device 
"
      end

      attribute 15529015 "disconnect"
	public explicit_type "/** Disconnect a remote device or cancel a pending connection */ bt_status_t (*)( int client_if, const bt_bdaddr_t *bd_addr, int conn_id)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Disconnect a remote device or cancel a pending connection */
    bt_status_t (*${name})( int client_if, const bt_bdaddr_t *bd_addr,
                    int conn_id)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Disconnect a remote device or cancel a pending connection 
"
      end

      attribute 15529143 "listen"
	public explicit_type "/** Start or stop advertisements to listen for incoming connections */ bt_status_t (*)(int client_if, bool start)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Start or stop advertisements to listen for incoming connections */
    bt_status_t (*${name})(int client_if, bool start)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Start or stop advertisements to listen for incoming connections 
"
      end

      attribute 15529271 "refresh"
	public explicit_type "/** Clear the attribute cache for a given device */ bt_status_t (*)( int client_if, const bt_bdaddr_t *bd_addr )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Clear the attribute cache for a given device */
    bt_status_t (*${name})( int client_if, const bt_bdaddr_t *bd_addr )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Clear the attribute cache for a given device 
"
      end

      attribute 15529399 "search_service"
	public explicit_type "/** * Enumerate all GATT services on a connected device. * Optionally, the results can be filtered for a given UUID. */ bt_status_t (*)(int conn_id, bt_uuid_t *filter_uuid )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Enumerate all GATT services on a connected device.
     * Optionally, the results can be filtered for a given UUID.
     */
    bt_status_t (*${name})(int conn_id, bt_uuid_t *filter_uuid )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Enumerate all GATT services on a connected device.
Optionally, the results can be filtered for a given UUID.

"
      end

      attribute 15529527 "read_characteristic"
	public explicit_type "/** Read a characteristic on a remote device */ bt_status_t (*)( int conn_id, uint16_t handle, int auth_req )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Read a characteristic on a remote device */
    bt_status_t (*${name})( int conn_id, uint16_t handle,
                    int auth_req )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Read a characteristic on a remote device 
"
      end

      attribute 15529655 "write_characteristic"
	public explicit_type "/** Write a remote characteristic */ bt_status_t (*)(int conn_id, uint16_t handle, int write_type, int len, int auth_req, char* p_value)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Write a remote characteristic */
    bt_status_t (*${name})(int conn_id, uint16_t handle,
                    int write_type, int len, int auth_req,
                    char* p_value)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Write a remote characteristic 
"
      end

      attribute 15529783 "read_descriptor"
	public explicit_type "/** Read the descriptor for a given characteristic */ bt_status_t (*)(int conn_id, uint16_t handle, int auth_req)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Read the descriptor for a given characteristic */
    bt_status_t (*${name})(int conn_id, uint16_t handle, int auth_req)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Read the descriptor for a given characteristic 
"
      end

      attribute 15529911 "write_descriptor"
	public explicit_type "/** Write a remote descriptor for a given characteristic */ bt_status_t (*)( int conn_id, uint16_t handle, int write_type, int len, int auth_req, char* p_value)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Write a remote descriptor for a given characteristic */
    bt_status_t (*${name})( int conn_id, uint16_t handle,
                    int write_type, int len,
                    int auth_req, char* p_value)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Write a remote descriptor for a given characteristic 
"
      end

      attribute 15530039 "execute_write"
	public explicit_type "/** Execute a prepared write operation */ bt_status_t (*)(int conn_id, int execute)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Execute a prepared write operation */
    bt_status_t (*${name})(int conn_id, int execute)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Execute a prepared write operation 
"
      end

      attribute 15530167 "register_for_notification"
	public explicit_type "/** * Register to receive notifications or indications for a given * characteristic */ bt_status_t (*)( int client_if, const bt_bdaddr_t *bd_addr, uint16_t handle)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Register to receive notifications or indications for a given
     * characteristic
     */
    bt_status_t (*${name})( int client_if,
                    const bt_bdaddr_t *bd_addr, uint16_t handle)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Register to receive notifications or indications for a given
characteristic

"
      end

      attribute 15530295 "deregister_for_notification"
	public explicit_type "/** Deregister a previous request for notifications/indications */ bt_status_t (*)( int client_if, const bt_bdaddr_t *bd_addr, uint16_t handle)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Deregister a previous request for notifications/indications */
    bt_status_t (*${name})( int client_if,
                    const bt_bdaddr_t *bd_addr, uint16_t handle)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Deregister a previous request for notifications/indications 
"
      end

      attribute 15530423 "read_remote_rssi"
	public explicit_type "/** Request RSSI for a given remote device */ bt_status_t (*)( int client_if, const bt_bdaddr_t *bd_addr)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Request RSSI for a given remote device */
    bt_status_t (*${name})( int client_if, const bt_bdaddr_t *bd_addr)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Request RSSI for a given remote device 
"
      end

      attribute 15530551 "scan_filter_param_setup"
	public explicit_type "/** Setup scan filter params */ bt_status_t (*)(btgatt_filt_param_setup_t filt_param)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Setup scan filter params */
    bt_status_t (*${name})(btgatt_filt_param_setup_t filt_param)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Setup scan filter params 
"
      end

      attribute 15530679 "scan_filter_add_remove"
	public explicit_type "/** Configure a scan filter condition */ bt_status_t (*)(int client_if, int action, int filt_type, int filt_index, int company_id, int company_id_mask, const bt_uuid_t *p_uuid, const bt_uuid_t *p_uuid_mask, const bt_bdaddr_t *bd_addr, char addr_type, int data_len, char* p_data, int mask_len, char* p_mask)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}

    /** Configure a scan filter condition  */
    bt_status_t (*${name})(int client_if, int action, int filt_type,
                                   int filt_index, int company_id,
                                   int company_id_mask, const bt_uuid_t *p_uuid,
                                   const bt_uuid_t *p_uuid_mask, const bt_bdaddr_t *bd_addr,
                                   char addr_type, int data_len, char* p_data, int mask_len,
                                   char* p_mask)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Configure a scan filter condition  
"
      end

      attribute 15530807 "scan_filter_clear"
	public explicit_type "/** Clear all scan filter conditions for specific filter index*/ bt_status_t (*)(int client_if, int filt_index)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Clear all scan filter conditions for specific filter index*/
    bt_status_t (*${name})(int client_if, int filt_index)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Clear all scan filter conditions for specific filter index
"
      end

      attribute 15530935 "scan_filter_enable"
	public explicit_type "/** Enable / disable scan filter feature*/ bt_status_t (*)(int client_if, bool enable)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Enable / disable scan filter feature*/
    bt_status_t (*${name})(int client_if, bool enable)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Enable / disable scan filter feature
"
      end

      attribute 15531063 "get_device_type"
	public explicit_type "/** Determine the type of the remote device (LE, BR/EDR, Dual-mode) */ int (*)( const bt_bdaddr_t *bd_addr )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Determine the type of the remote device (LE, BR/EDR, Dual-mode) */
    int (*${name})( const bt_bdaddr_t *bd_addr )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Determine the type of the remote device (LE, BR/EDR, Dual-mode) 
"
      end

      attribute 15531191 "set_adv_data"
	public explicit_type "/** Set the advertising data or scan response data */ bt_status_t (*)(int client_if, bool set_scan_rsp, bool include_name, bool include_txpower, int min_interval, int max_interval, int appearance, uint16_t manufacturer_len, char* manufacturer_data, uint16_t service_data_len, char* service_data, uint16_t service_uuid_len, char* service_uuid)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Set the advertising data or scan response data */
    bt_status_t (*${name})(int client_if, bool set_scan_rsp, bool include_name,
                    bool include_txpower, int min_interval, int max_interval, int appearance,
                    uint16_t manufacturer_len, char* manufacturer_data,
                    uint16_t service_data_len, char* service_data,
                    uint16_t service_uuid_len, char* service_uuid)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Set the advertising data or scan response data 
"
      end

      attribute 15531319 "configure_mtu"
	public explicit_type "/** Configure the MTU for a given connection */ bt_status_t (*)(int conn_id, int mtu)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Configure the MTU for a given connection */
    bt_status_t (*${name})(int conn_id, int mtu)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Configure the MTU for a given connection 
"
      end

      attribute 15531447 "conn_parameter_update"
	public explicit_type "/** Request a connection parameter update */ bt_status_t (*)(const bt_bdaddr_t *bd_addr, int min_interval, int max_interval, int latency, int timeout)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Request a connection parameter update */
    bt_status_t (*${name})(const bt_bdaddr_t *bd_addr, int min_interval,
                    int max_interval, int latency, int timeout)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Request a connection parameter update 
"
      end

      attribute 15531575 "set_scan_parameters"
	public explicit_type "/** Sets the LE scan interval and window in units of N*0.625 msec */ bt_status_t (*)(int client_if, int scan_interval, int scan_window)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Sets the LE scan interval and window in units of N*0.625 msec */
    bt_status_t (*${name})(int client_if, int scan_interval, int scan_window)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Sets the LE scan interval and window in units of N*0.625 msec 
"
      end

      attribute 15531703 "multi_adv_enable"
	public explicit_type "/* Setup the parameters as per spec, user manual specified values and enable multi ADV */ bt_status_t (*)(int client_if, int min_interval,int max_interval,int adv_type, int chnl_map, int tx_power, int timeout_s)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* Setup the parameters as per spec, user manual specified values and enable multi ADV */
    bt_status_t (*${name})(int client_if, int min_interval,int max_interval,int adv_type,
                 int chnl_map, int tx_power, int timeout_s)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Setup the parameters as per spec, user manual specified values and enable multi ADV 
"
      end

      attribute 15531831 "multi_adv_update"
	public explicit_type "/* Update the parameters as per spec, user manual specified values and restart multi ADV */ bt_status_t (*)(int client_if, int min_interval,int max_interval,int adv_type, int chnl_map, int tx_power, int timeout_s)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* Update the parameters as per spec, user manual specified values and restart multi ADV */
    bt_status_t (*${name})(int client_if, int min_interval,int max_interval,int adv_type,
                 int chnl_map, int tx_power, int timeout_s)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Update the parameters as per spec, user manual specified values and restart multi ADV 
"
      end

      attribute 15531959 "multi_adv_set_inst_data"
	public explicit_type "/* Setup the data for the specified instance */ bt_status_t (*)(int client_if, bool set_scan_rsp, bool include_name, bool incl_txpower, int appearance, int manufacturer_len, char* manufacturer_data, int service_data_len, char* service_data, int service_uuid_len, char* service_uuid)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* Setup the data for the specified instance */
    bt_status_t (*${name})(int client_if, bool set_scan_rsp, bool include_name,
                    bool incl_txpower, int appearance, int manufacturer_len,
                    char* manufacturer_data, int service_data_len,
                    char* service_data, int service_uuid_len, char* service_uuid)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Setup the data for the specified instance 
"
      end

      attribute 15532087 "multi_adv_disable"
	public explicit_type "/* Disable the multi adv instance */ bt_status_t (*)(int client_if)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* Disable the multi adv instance */
    bt_status_t (*${name})(int client_if)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Disable the multi adv instance 
"
      end

      attribute 15532215 "batchscan_cfg_storage"
	public explicit_type "/* Configure the batchscan storage */ bt_status_t (*)(int client_if, int batch_scan_full_max, int batch_scan_trunc_max, int batch_scan_notify_threshold)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* Configure the batchscan storage */
    bt_status_t (*${name})(int client_if, int batch_scan_full_max,
        int batch_scan_trunc_max, int batch_scan_notify_threshold)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Configure the batchscan storage 
"
      end

      attribute 15532343 "batchscan_enb_batch_scan"
	public explicit_type "/* Enable batchscan */ bt_status_t (*)(int client_if, int scan_mode, int scan_interval, int scan_window, int addr_type, int discard_rule)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* Enable batchscan */
    bt_status_t (*${name})(int client_if, int scan_mode,
        int scan_interval, int scan_window, int addr_type, int discard_rule)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Enable batchscan 
"
      end

      attribute 15532471 "batchscan_dis_batch_scan"
	public explicit_type "/* Disable batchscan */ bt_status_t (*)(int client_if)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* Disable batchscan */
    bt_status_t (*${name})(int client_if)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Disable batchscan 
"
      end

      attribute 15532599 "batchscan_read_reports"
	public explicit_type "/* Read out batchscan reports */ bt_status_t (*)(int client_if, int scan_mode)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* Read out batchscan reports */
    bt_status_t (*${name})(int client_if, int scan_mode)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Read out batchscan reports 
"
      end

      attribute 15532727 "test_command"
	public explicit_type "/** Test mode interface */ bt_status_t (*)( int command, btgatt_test_params_t* params)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Test mode interface */
    bt_status_t (*${name})( int command, btgatt_test_params_t* params)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Test mode interface 
"
      end

      attribute 15532855 "get_gatt_db"
	public explicit_type "/** Get gatt db content */ bt_status_t (*)( int conn_id)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Get gatt db content */
    bt_status_t (*${name})( int conn_id)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Get gatt db content 
"
      end
    end

    class 4317623 "btgatt_server_interface_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Represents the standard BT-GATT server interface. "
      attribute 15533111 "register_server"
	public explicit_type "/** Registers a GATT server application with the stack */ bt_status_t (*)( bt_uuid_t *uuid )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Registers a GATT server application with the stack */
    bt_status_t (*${name})( bt_uuid_t *uuid )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Registers a GATT server application with the stack 
"
      end

      attribute 15533239 "unregister_server"
	public explicit_type "/** Unregister a server application from the stack */ bt_status_t (*)(int server_if )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Unregister a server application from the stack */
    bt_status_t (*${name})(int server_if )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Unregister a server application from the stack 
"
      end

      attribute 15533367 "connect"
	public explicit_type "/** Create a connection to a remote peripheral */ bt_status_t (*)(int server_if, const bt_bdaddr_t *bd_addr, bool is_direct, int transport)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Create a connection to a remote peripheral */
    bt_status_t (*${name})(int server_if, const bt_bdaddr_t *bd_addr,
                            bool is_direct, int transport)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Create a connection to a remote peripheral 
"
      end

      attribute 15533495 "disconnect"
	public explicit_type "/** Disconnect an established connection or cancel a pending one */ bt_status_t (*)(int server_if, const bt_bdaddr_t *bd_addr, int conn_id )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Disconnect an established connection or cancel a pending one */
    bt_status_t (*${name})(int server_if, const bt_bdaddr_t *bd_addr,
                    int conn_id )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Disconnect an established connection or cancel a pending one 
"
      end

      attribute 15533623 "add_service"
	public explicit_type "/** Create a new service */ bt_status_t (*)( int server_if, btgatt_srvc_id_t *srvc_id, int num_handles)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Create a new service */
    bt_status_t (*${name})( int server_if, btgatt_srvc_id_t *srvc_id, int num_handles)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Create a new service 
"
      end

      attribute 15533751 "add_included_service"
	public explicit_type "/** Assign an included service to it's parent service */ bt_status_t (*)( int server_if, int service_handle, int included_handle)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Assign an included service to it's parent service */
    bt_status_t (*${name})( int server_if, int service_handle, int included_handle)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Assign an included service to it's parent service 
"
      end

      attribute 15533879 "add_characteristic"
	public explicit_type "/** Add a characteristic to a service */ bt_status_t (*)( int server_if, int service_handle, bt_uuid_t *uuid, int properties, int permissions)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Add a characteristic to a service */
    bt_status_t (*${name})( int server_if,
                    int service_handle, bt_uuid_t *uuid,
                    int properties, int permissions)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Add a characteristic to a service 
"
      end

      attribute 15534007 "add_descriptor"
	public explicit_type "/** Add a descriptor to a given service */ bt_status_t (*)(int server_if, int service_handle, bt_uuid_t *uuid, int permissions)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Add a descriptor to a given service */
    bt_status_t (*${name})(int server_if, int service_handle,
                                  bt_uuid_t *uuid, int permissions)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Add a descriptor to a given service 
"
      end

      attribute 15534135 "start_service"
	public explicit_type "/** Starts a local service */ bt_status_t (*)(int server_if, int service_handle, int transport)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Starts a local service */
    bt_status_t (*${name})(int server_if, int service_handle,
                                 int transport)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Starts a local service 
"
      end

      attribute 15534263 "stop_service"
	public explicit_type "/** Stops a local service */ bt_status_t (*)(int server_if, int service_handle)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Stops a local service */
    bt_status_t (*${name})(int server_if, int service_handle)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Stops a local service 
"
      end

      attribute 15534391 "delete_service"
	public explicit_type "/** Delete a local service */ bt_status_t (*)(int server_if, int service_handle)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Delete a local service */
    bt_status_t (*${name})(int server_if, int service_handle)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Delete a local service 
"
      end

      attribute 15534519 "send_indication"
	public explicit_type "/** Send value indication to a remote device */ bt_status_t (*)(int server_if, int attribute_handle, int conn_id, int len, int confirm, char* p_value)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Send value indication to a remote device */
    bt_status_t (*${name})(int server_if, int attribute_handle,
                                   int conn_id, int len, int confirm,
                                   char* p_value)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Send value indication to a remote device 
"
      end

      attribute 15534647 "send_response"
	public explicit_type "/** Send a response to a read/write operation */ bt_status_t (*)(int conn_id, int trans_id, int status, btgatt_response_t *response)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Send a response to a read/write operation */
    bt_status_t (*${name})(int conn_id, int trans_id,
                                 int status, btgatt_response_t *response)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Send a response to a read/write operation 
"
      end
    end

    class 4317751 "btgatt_read_params_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Parameters for GATT read operations "
      attribute 15526071 "value"
	public explicit_type "btgatt_unformatted_value_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

    end

    class 4317879 "btgatt_write_params_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Parameters for GATT write operations "
      classrelation 8308279 // srvc_id (<directional composition>)
	relation 8308279 *-->
	  a role_name "srvc_id" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8308279 // srvc_id (<directional composition>)
	  b parent class_ref 4318007 // btgatt_srvc_id_t
      end

      attribute 15526199 "char_id"
	public explicit_type "btgatt_gatt_id_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15526327 "descr_id"
	public explicit_type "btgatt_gatt_id_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

    end

    class 4318007 "btgatt_srvc_id_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " GATT Service ID also identifies the service type (primary/secondary) "
      attribute 15534775 "id"
	public explicit_type "btgatt_gatt_id_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

    end

    class 4318135 "btgatt_notify_params_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Attribute change notification parameters "
      attribute 15526455 "bda"
	public explicit_type "bt_bdaddr_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

    end

    class 4318263 "btgatt_filt_param_setup_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4318391 "btgatt_test_params_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15526583 "bda1"
	public explicit_type "bt_bdaddr_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 8310711 // uuid1 (<unidirectional association>)
	relation 8310711 --->
	  a role_name "uuid1" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8310711 // uuid1 (<unidirectional association>)
	  b parent class_ref 4311991 // bt_uuid_t
      end

    end

    class 4318519 "btgattc_error_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " BT GATT client error codes "
      attribute 15526711 "BT_GATTC_COMMAND_SUCCESS"
	public type class_ref 4318519 // btgattc_error_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15526839 "BT_GATTC_COMMAND_STARTED"
	public type class_ref 4318519 // btgattc_error_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15526967 "BT_GATTC_COMMAND_BUSY"
	public type class_ref 4318519 // btgattc_error_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15527095 "BT_GATTC_COMMAND_STORED"
	public type class_ref 4318519 // btgattc_error_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15527223 "BT_GATTC_NO_RESOURCES"
	public type class_ref 4318519 // btgattc_error_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15527351 "BT_GATTC_MODE_UNSUPPORTED"
	public type class_ref 4318519 // btgattc_error_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15527479 "BT_GATTC_ILLEGAL_VALUE"
	public type class_ref 4318519 // btgattc_error_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15527607 "BT_GATTC_INCORRECT_STATE"
	public type class_ref 4318519 // btgattc_error_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15527735 "BT_GATTC_UNKNOWN_ADDR"
	public type class_ref 4318519 // btgattc_error_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15527863 "BT_GATTC_DEVICE_TIMEOUT"
	public type class_ref 4318519 // btgattc_error_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15527991 "BT_GATTC_INVALID_CONTROLLER_OUTPUT"
	public type class_ref 4318519 // btgattc_error_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15528119 "BT_GATTC_SECURITY_ERROR"
	public type class_ref 4318519 // btgattc_error_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15528247 "BT_GATTC_DELAYED_ENCRYPTION_CHECK"
	public type class_ref 4318519 // btgattc_error_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15528375 "BT_GATTC_ERR_PROCESSING"
	public type class_ref 4318519 // btgattc_error_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4318647 "register_client_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int status, int client_if,
                bt_uuid_t *app_uuid);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " 0  Command succeeded                 
 1  Command started OK.               
 2  Device busy with another command  
 3 request is stored in control block 
 4  No resources to issue command     
 5  Request for 1 or more unsupported modes 
 6  Illegal command /parameter value  
 7  Device in wrong state for request  
 8  Unknown remote BD address         
 9  Device timeout                    
 10  An incorrect value was received from HCI 
 11 Authorization or security failure or not authorized  
12 Delayed encryption check 
 12 Generic error                     
 BT-GATT Client callback structure. 
 Callback invoked in response to register_client "
    end

    class 4318775 "scan_result_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(bt_bdaddr_t* bda, int rssi, uint8_t* adv_data);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for scan results "
    end

    class 4318903 "connect_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int conn_id, int status, int client_if, bt_bdaddr_t* bda);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " GATT open callback invoked in response to open "
    end

    class 4319031 "disconnect_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int conn_id, int status,
                int client_if, bt_bdaddr_t* bda);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback invoked in response to close "
    end

    class 4319159 "search_complete_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int conn_id, int status);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Invoked in response to search_service when the GATT service search
has been completed.
"
    end

    class 4319287 "register_for_notification_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int conn_id,
                int registered, int status, uint16_t handle);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback invoked in response to [de]register_for_notification "
    end

    class 4319415 "notify_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int conn_id, btgatt_notify_params_t *p_data);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Remote device notification callback, invoked when a remote device sends
a notification or indication that a client has registered for.
"
    end

    class 4319543 "read_characteristic_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int conn_id, int status,
                btgatt_read_params_t *p_data);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Reports result of a GATT read operation "
    end

    class 4319671 "write_characteristic_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int conn_id, int status, uint16_t handle);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " GATT write characteristic operation callback "
    end

    class 4319799 "execute_write_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int conn_id, int status);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " GATT execute prepared write callback "
    end

    class 4319927 "read_descriptor_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int conn_id, int status,
                btgatt_read_params_t *p_data);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback invoked in response to read_descriptor "
    end

    class 4320055 "write_descriptor_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int conn_id, int status, uint16_t handle);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback invoked in response to write_descriptor "
    end

    class 4320183 "read_remote_rssi_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int client_if, bt_bdaddr_t* bda,
                                          int rssi, int status);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback triggered in response to read_remote_rssi "
    end

    class 4320311 "listen_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int status, int server_if);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Callback indicating the status of a listen() operation
"
    end

    class 4320439 "configure_mtu_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int conn_id, int status, int mtu);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback invoked when the MTU for a given connection changes "
    end

    class 4320567 "scan_filter_cfg_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int action, int client_if, int status, int filt_type,
                                         int avbl_space);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback invoked when a scan filter configuration command has completed "
    end

    class 4320695 "scan_filter_param_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int action, int client_if, int status,
                                         int avbl_space);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback invoked when scan param has been added, cleared, or deleted "
    end

    class 4320823 "scan_filter_status_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int enable, int client_if, int status);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback invoked when a scan filter configuration command has completed "
    end

    class 4320951 "multi_adv_enable_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int client_if, int status);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback invoked when multi-adv enable operation has completed "
    end

    class 4321079 "multi_adv_update_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int client_if, int status);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback invoked when multi-adv param update operation has completed "
    end

    class 4321207 "multi_adv_data_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int client_if, int status);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback invoked when multi-adv instance data set operation has completed "
    end

    class 4321335 "multi_adv_disable_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int client_if, int status);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback invoked when multi-adv disable operation has completed "
    end

    class 4321463 "congestion_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int conn_id, bool congested);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Callback notifying an application that a remote device connection is currently congested
and cannot receive any more data. An application should avoid sending more data until
a further callback is received indicating the congestion status has been cleared.
"
    end

    class 4321591 "batchscan_cfg_storage_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int client_if, int status);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback invoked when batchscan storage config operation has completed "
    end

    class 4321719 "batchscan_enable_disable_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int action, int client_if, int status);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback invoked when batchscan enable / disable operation has completed "
    end

    class 4321847 "batchscan_reports_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int client_if, int status, int report_format,
                                           int num_records, int data_len, uint8_t* rep_data);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback invoked when batchscan reports are obtained "
    end

    class 4321975 "batchscan_threshold_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int client_if);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback invoked when batchscan storage threshold limit is crossed "
    end

    class 4322103 "track_adv_event_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(btgatt_track_adv_info_t *p_track_adv_info);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Track ADV VSE callback invoked when tracked device is found or lost "
    end

    class 4322231 "scan_parameter_setup_completed_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int client_if,
                                                        btgattc_error_t status);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback invoked when scan parameter setup has completed "
    end

    class 4322359 "get_gatt_db_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int conn_id, btgatt_db_element_t *db, int count);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " GATT get database callback "
    end

    class 4322487 "services_removed_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int conn_id, uint16_t start_handle, uint16_t end_handle);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " GATT services between start_handle and end_handle were removed "
    end

    class 4322615 "services_added_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int conn_id, btgatt_db_element_t *added, int added_count);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " GATT services were added "
    end

    class 4322743 "btgatt_client_callbacks_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8311479 // register_client_cb (<directional composition>)
	relation 8311479 *-->
	  a role_name "register_client_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8311479 // register_client_cb (<directional composition>)
	  b parent class_ref 4318647 // register_client_callback
      end

      classrelation 8311607 // scan_result_cb (<directional composition>)
	relation 8311607 *-->
	  a role_name "scan_result_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8311607 // scan_result_cb (<directional composition>)
	  b parent class_ref 4318775 // scan_result_callback
      end

      classrelation 8311735 // open_cb (<directional composition>)
	relation 8311735 *-->
	  a role_name "open_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8311735 // open_cb (<directional composition>)
	  b parent class_ref 4318903 // connect_callback
      end

      classrelation 8311863 // close_cb (<directional composition>)
	relation 8311863 *-->
	  a role_name "close_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8311863 // close_cb (<directional composition>)
	  b parent class_ref 4319031 // disconnect_callback
      end

      classrelation 8311991 // search_complete_cb (<directional composition>)
	relation 8311991 *-->
	  a role_name "search_complete_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8311991 // search_complete_cb (<directional composition>)
	  b parent class_ref 4319159 // search_complete_callback
      end

      classrelation 8312119 // register_for_notification_cb (<directional composition>)
	relation 8312119 *-->
	  a role_name "register_for_notification_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8312119 // register_for_notification_cb (<directional composition>)
	  b parent class_ref 4319287 // register_for_notification_callback
      end

      classrelation 8312247 // notify_cb (<directional composition>)
	relation 8312247 *-->
	  a role_name "notify_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8312247 // notify_cb (<directional composition>)
	  b parent class_ref 4319415 // notify_callback
      end

      classrelation 8312375 // read_characteristic_cb (<directional composition>)
	relation 8312375 *-->
	  a role_name "read_characteristic_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8312375 // read_characteristic_cb (<directional composition>)
	  b parent class_ref 4319543 // read_characteristic_callback
      end

      classrelation 8312503 // write_characteristic_cb (<directional composition>)
	relation 8312503 *-->
	  a role_name "write_characteristic_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8312503 // write_characteristic_cb (<directional composition>)
	  b parent class_ref 4319671 // write_characteristic_callback
      end

      classrelation 8312631 // read_descriptor_cb (<directional composition>)
	relation 8312631 *-->
	  a role_name "read_descriptor_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8312631 // read_descriptor_cb (<directional composition>)
	  b parent class_ref 4319927 // read_descriptor_callback
      end

      classrelation 8312759 // write_descriptor_cb (<directional composition>)
	relation 8312759 *-->
	  a role_name "write_descriptor_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8312759 // write_descriptor_cb (<directional composition>)
	  b parent class_ref 4320055 // write_descriptor_callback
      end

      classrelation 8312887 // execute_write_cb (<directional composition>)
	relation 8312887 *-->
	  a role_name "execute_write_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8312887 // execute_write_cb (<directional composition>)
	  b parent class_ref 4319799 // execute_write_callback
      end

      classrelation 8313015 // read_remote_rssi_cb (<directional composition>)
	relation 8313015 *-->
	  a role_name "read_remote_rssi_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8313015 // read_remote_rssi_cb (<directional composition>)
	  b parent class_ref 4320183 // read_remote_rssi_callback
      end

      classrelation 8313143 // listen_cb (<directional composition>)
	relation 8313143 *-->
	  a role_name "listen_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8313143 // listen_cb (<directional composition>)
	  b parent class_ref 4320311 // listen_callback
      end

      classrelation 8313271 // configure_mtu_cb (<directional composition>)
	relation 8313271 *-->
	  a role_name "configure_mtu_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8313271 // configure_mtu_cb (<directional composition>)
	  b parent class_ref 4320439 // configure_mtu_callback
      end

      classrelation 8313399 // scan_filter_cfg_cb (<directional composition>)
	relation 8313399 *-->
	  a role_name "scan_filter_cfg_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8313399 // scan_filter_cfg_cb (<directional composition>)
	  b parent class_ref 4320567 // scan_filter_cfg_callback
      end

      classrelation 8313527 // scan_filter_param_cb (<directional composition>)
	relation 8313527 *-->
	  a role_name "scan_filter_param_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8313527 // scan_filter_param_cb (<directional composition>)
	  b parent class_ref 4320695 // scan_filter_param_callback
      end

      classrelation 8313655 // scan_filter_status_cb (<directional composition>)
	relation 8313655 *-->
	  a role_name "scan_filter_status_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8313655 // scan_filter_status_cb (<directional composition>)
	  b parent class_ref 4320823 // scan_filter_status_callback
      end

      classrelation 8313783 // multi_adv_enable_cb (<directional composition>)
	relation 8313783 *-->
	  a role_name "multi_adv_enable_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8313783 // multi_adv_enable_cb (<directional composition>)
	  b parent class_ref 4320951 // multi_adv_enable_callback
      end

      classrelation 8313911 // multi_adv_update_cb (<directional composition>)
	relation 8313911 *-->
	  a role_name "multi_adv_update_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8313911 // multi_adv_update_cb (<directional composition>)
	  b parent class_ref 4321079 // multi_adv_update_callback
      end

      classrelation 8314039 // multi_adv_data_cb (<directional composition>)
	relation 8314039 *-->
	  a role_name "multi_adv_data_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8314039 // multi_adv_data_cb (<directional composition>)
	  b parent class_ref 4321207 // multi_adv_data_callback
      end

      classrelation 8314167 // multi_adv_disable_cb (<directional composition>)
	relation 8314167 *-->
	  a role_name "multi_adv_disable_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8314167 // multi_adv_disable_cb (<directional composition>)
	  b parent class_ref 4321335 // multi_adv_disable_callback
      end

      classrelation 8314295 // congestion_cb (<directional composition>)
	relation 8314295 *-->
	  a role_name "congestion_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8314295 // congestion_cb (<directional composition>)
	  b parent class_ref 4321463 // congestion_callback
      end

      classrelation 8314423 // batchscan_cfg_storage_cb (<directional composition>)
	relation 8314423 *-->
	  a role_name "batchscan_cfg_storage_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8314423 // batchscan_cfg_storage_cb (<directional composition>)
	  b parent class_ref 4321591 // batchscan_cfg_storage_callback
      end

      classrelation 8314551 // batchscan_enb_disable_cb (<directional composition>)
	relation 8314551 *-->
	  a role_name "batchscan_enb_disable_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8314551 // batchscan_enb_disable_cb (<directional composition>)
	  b parent class_ref 4321719 // batchscan_enable_disable_callback
      end

      classrelation 8314679 // batchscan_reports_cb (<directional composition>)
	relation 8314679 *-->
	  a role_name "batchscan_reports_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8314679 // batchscan_reports_cb (<directional composition>)
	  b parent class_ref 4321847 // batchscan_reports_callback
      end

      classrelation 8314807 // batchscan_threshold_cb (<directional composition>)
	relation 8314807 *-->
	  a role_name "batchscan_threshold_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8314807 // batchscan_threshold_cb (<directional composition>)
	  b parent class_ref 4321975 // batchscan_threshold_callback
      end

      classrelation 8314935 // track_adv_event_cb (<directional composition>)
	relation 8314935 *-->
	  a role_name "track_adv_event_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8314935 // track_adv_event_cb (<directional composition>)
	  b parent class_ref 4322103 // track_adv_event_callback
      end

      classrelation 8315063 // scan_parameter_setup_completed_cb (<directional composition>)
	relation 8315063 *-->
	  a role_name "scan_parameter_setup_completed_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8315063 // scan_parameter_setup_completed_cb (<directional composition>)
	  b parent class_ref 4322231 // scan_parameter_setup_completed_callback
      end

      classrelation 8315191 // get_gatt_db_cb (<directional composition>)
	relation 8315191 *-->
	  a role_name "get_gatt_db_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8315191 // get_gatt_db_cb (<directional composition>)
	  b parent class_ref 4322359 // get_gatt_db_callback
      end

      classrelation 8315319 // services_removed_cb (<directional composition>)
	relation 8315319 *-->
	  a role_name "services_removed_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8315319 // services_removed_cb (<directional composition>)
	  b parent class_ref 4322487 // services_removed_callback
      end

      classrelation 8315447 // services_added_cb (<directional composition>)
	relation 8315447 *-->
	  a role_name "services_added_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8315447 // services_added_cb (<directional composition>)
	  b parent class_ref 4322615 // services_added_callback
      end
    end

    class 4322871 "btgatt_response_t"
      visibility package stereotype "union"
      cpp_decl "${comment}${template}union ${name} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " GATT remote read request response type "
      attribute 15532983 "attr_value"
	public explicit_type "btgatt_value_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

    end

    class 4322999 "register_server_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int status, int server_if,
                bt_uuid_t *app_uuid);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " BT-GATT Server callback structure. 
 Callback invoked in response to register_server "
    end

    class 4323127 "connection_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int conn_id, int server_if, int connected,
                                    bt_bdaddr_t *bda);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback indicating that a remote device has connected or been disconnected "
    end

    class 4323255 "service_added_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int status, int server_if,
                btgatt_srvc_id_t *srvc_id, int srvc_handle);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback invoked in response to create_service "
    end

    class 4323383 "included_service_added_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int status, int server_if,
                int srvc_handle, int incl_srvc_handle);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback indicating that an included service has been added to a service "
    end

    class 4323511 "characteristic_added_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int status, int server_if,
                bt_uuid_t *uuid, int srvc_handle, int char_handle);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback invoked when a characteristic has been added to a service "
    end

    class 4323639 "descriptor_added_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int status, int server_if,
                bt_uuid_t *uuid, int srvc_handle, int descr_handle);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback invoked when a descriptor has been added to a characteristic "
    end

    class 4323767 "service_started_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int status, int server_if,
                                         int srvc_handle);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback invoked in response to start_service "
    end

    class 4323895 "service_stopped_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int status, int server_if,
                                         int srvc_handle);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback invoked in response to stop_service "
    end

    class 4324023 "service_deleted_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int status, int server_if,
                                         int srvc_handle);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback triggered when a service has been deleted "
    end

    class 4324151 "request_read_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int conn_id, int trans_id, bt_bdaddr_t *bda,
                                      int attr_handle, int offset, bool is_long);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Callback invoked when a remote device has requested to read a characteristic
or descriptor. The application must respond by calling send_response
"
    end

    class 4324279 "request_write_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int conn_id, int trans_id, bt_bdaddr_t *bda,
                                       int attr_handle, int offset, int length,
                                       bool need_rsp, bool is_prep, uint8_t* value);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Callback invoked when a remote device has requested to write to a
characteristic or descriptor.
"
    end

    class 4324407 "request_exec_write_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int conn_id, int trans_id,
                                            bt_bdaddr_t *bda, int exec_write);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback invoked when a previously prepared write is to be executed "
    end

    class 4324535 "response_confirmation_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int status, int handle);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Callback triggered in response to send_response if the remote device
sends a confirmation.
"
    end

    class 4324663 "indication_sent_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int conn_id, int status);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Callback confirming that a notification or indication has been sent
to a remote device.
"
    end

    class 4324791 "mtu_changed_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int conn_id, int mtu);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback invoked when the MTU for a given connection changes "
    end

    class 4324919 "btgatt_server_callbacks_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8315703 // register_server_cb (<directional composition>)
	relation 8315703 *-->
	  a role_name "register_server_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8315703 // register_server_cb (<directional composition>)
	  b parent class_ref 4322999 // register_server_callback
      end

      classrelation 8315831 // connection_cb (<directional composition>)
	relation 8315831 *-->
	  a role_name "connection_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8315831 // connection_cb (<directional composition>)
	  b parent class_ref 4323127 // connection_callback
      end

      classrelation 8315959 // service_added_cb (<directional composition>)
	relation 8315959 *-->
	  a role_name "service_added_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8315959 // service_added_cb (<directional composition>)
	  b parent class_ref 4323255 // service_added_callback
      end

      classrelation 8316087 // included_service_added_cb (<directional composition>)
	relation 8316087 *-->
	  a role_name "included_service_added_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8316087 // included_service_added_cb (<directional composition>)
	  b parent class_ref 4323383 // included_service_added_callback
      end

      classrelation 8316215 // characteristic_added_cb (<directional composition>)
	relation 8316215 *-->
	  a role_name "characteristic_added_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8316215 // characteristic_added_cb (<directional composition>)
	  b parent class_ref 4323511 // characteristic_added_callback
      end

      classrelation 8316343 // descriptor_added_cb (<directional composition>)
	relation 8316343 *-->
	  a role_name "descriptor_added_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8316343 // descriptor_added_cb (<directional composition>)
	  b parent class_ref 4323639 // descriptor_added_callback
      end

      classrelation 8316471 // service_started_cb (<directional composition>)
	relation 8316471 *-->
	  a role_name "service_started_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8316471 // service_started_cb (<directional composition>)
	  b parent class_ref 4323767 // service_started_callback
      end

      classrelation 8316599 // service_stopped_cb (<directional composition>)
	relation 8316599 *-->
	  a role_name "service_stopped_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8316599 // service_stopped_cb (<directional composition>)
	  b parent class_ref 4323895 // service_stopped_callback
      end

      classrelation 8316727 // service_deleted_cb (<directional composition>)
	relation 8316727 *-->
	  a role_name "service_deleted_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8316727 // service_deleted_cb (<directional composition>)
	  b parent class_ref 4324023 // service_deleted_callback
      end

      classrelation 8316855 // request_read_cb (<directional composition>)
	relation 8316855 *-->
	  a role_name "request_read_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8316855 // request_read_cb (<directional composition>)
	  b parent class_ref 4324151 // request_read_callback
      end

      classrelation 8316983 // request_write_cb (<directional composition>)
	relation 8316983 *-->
	  a role_name "request_write_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8316983 // request_write_cb (<directional composition>)
	  b parent class_ref 4324279 // request_write_callback
      end

      classrelation 8317111 // request_exec_write_cb (<directional composition>)
	relation 8317111 *-->
	  a role_name "request_exec_write_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8317111 // request_exec_write_cb (<directional composition>)
	  b parent class_ref 4324407 // request_exec_write_callback
      end

      classrelation 8317239 // response_confirmation_cb (<directional composition>)
	relation 8317239 *-->
	  a role_name "response_confirmation_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8317239 // response_confirmation_cb (<directional composition>)
	  b parent class_ref 4324535 // response_confirmation_callback
      end

      classrelation 8317367 // indication_sent_cb (<directional composition>)
	relation 8317367 *-->
	  a role_name "indication_sent_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8317367 // indication_sent_cb (<directional composition>)
	  b parent class_ref 4324663 // indication_sent_callback
      end

      classrelation 8317495 // congestion_cb (<directional composition>)
	relation 8317495 *-->
	  a role_name "congestion_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8317495 // congestion_cb (<directional composition>)
	  b parent class_ref 4321463 // congestion_callback
      end

      classrelation 8317623 // mtu_changed_cb (<directional composition>)
	relation 8317623 *-->
	  a role_name "mtu_changed_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8317623 // mtu_changed_cb (<directional composition>)
	  b parent class_ref 4324791 // mtu_changed_callback
      end
    end

    class 4325047 "btgatt_transport_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Preferred physical Transport for GATT connection "
      attribute 15534903 "GATT_TRANSPORT_AUTO"
	public type class_ref 4325047 // btgatt_transport_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15535031 "GATT_TRANSPORT_BREDR"
	public type class_ref 4325047 // btgatt_transport_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15535159 "GATT_TRANSPORT_LE"
	public type class_ref 4325047 // btgatt_transport_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4325175 "bthf_connection_state_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " AT response code - OK/Error "
      attribute 15535287 "BTHF_CONNECTION_STATE_DISCONNECTED"
	public type class_ref 4325175 // bthf_connection_state_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15535415 "BTHF_CONNECTION_STATE_CONNECTING"
	public type class_ref 4325175 // bthf_connection_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15535543 "BTHF_CONNECTION_STATE_CONNECTED"
	public type class_ref 4325175 // bthf_connection_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15535671 "BTHF_CONNECTION_STATE_SLC_CONNECTED"
	public type class_ref 4325175 // bthf_connection_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15535799 "BTHF_CONNECTION_STATE_DISCONNECTING"
	public type class_ref 4325175 // bthf_connection_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4325303 "bthf_audio_state_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15535927 "BTHF_AUDIO_STATE_DISCONNECTED"
	public type class_ref 4325303 // bthf_audio_state_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15536055 "BTHF_AUDIO_STATE_CONNECTING"
	public type class_ref 4325303 // bthf_audio_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15536183 "BTHF_AUDIO_STATE_CONNECTED"
	public type class_ref 4325303 // bthf_audio_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15536311 "BTHF_AUDIO_STATE_DISCONNECTING"
	public type class_ref 4325303 // bthf_audio_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4325431 "bthf_vr_state_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15536439 "BTHF_VR_STATE_STOPPED"
	public type class_ref 4325431 // bthf_vr_state_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15536567 "BTHF_VR_STATE_STARTED"
	public type class_ref 4325431 // bthf_vr_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4325559 "bthf_volume_type_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15536695 "BTHF_VOLUME_TYPE_SPK"
	public type class_ref 4325559 // bthf_volume_type_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15536823 "BTHF_VOLUME_TYPE_MIC"
	public type class_ref 4325559 // bthf_volume_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4325687 "bthf_nrec_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Noise Reduction and Echo Cancellation "
      attribute 15536951 "BTHF_NREC_STOP"
	public type class_ref 4325687 // bthf_nrec_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15537079 "BTHF_NREC_START"
	public type class_ref 4325687 // bthf_nrec_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4325815 "bthf_wbs_config_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " WBS codec setting "
      attribute 15537207 "BTHF_WBS_NONE"
	public type class_ref 4325815 // bthf_wbs_config_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15537335 "BTHF_WBS_NO"
	public type class_ref 4325815 // bthf_wbs_config_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15537463 "BTHF_WBS_YES"
	public type class_ref 4325815 // bthf_wbs_config_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4325943 "bthf_chld_type_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " CHLD - Call held handling "
      attribute 15537591 "BTHF_CHLD_TYPE_RELEASEHELD"
	public type class_ref 4325943 // bthf_chld_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15537719 "BTHF_CHLD_TYPE_RELEASEACTIVE_ACCEPTHELD"
	public type class_ref 4325943 // bthf_chld_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15537847 "BTHF_CHLD_TYPE_HOLDACTIVE_ACCEPTHELD"
	public type class_ref 4325943 // bthf_chld_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15537975 "BTHF_CHLD_TYPE_ADDHELDTOCONF"
	public type class_ref 4325943 // bthf_chld_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4326071 "bthf_connection_state_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bthf_connection_state_t state, bt_bdaddr_t *bd_addr);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Terminate all held or set UDUB(\"busy\") to a waiting call
 Terminate all active calls and accepts a waiting/held call
 Hold all active calls and accepts a waiting/held call
 Add all held calls to a conference
 Callback for connection state change.
 state will have one of the values from BtHfConnectionState
"
    end

    class 4326199 "bthf_audio_state_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bthf_audio_state_t state, bt_bdaddr_t *bd_addr);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for audio connection state change.
 state will have one of the values from BtHfAudioState
"
    end

    class 4326327 "bthf_vr_cmd_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bthf_vr_state_t state, bt_bdaddr_t *bd_addr);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for VR connection state change.
 state will have one of the values from BtHfVRState
"
    end

    class 4326455 "bthf_answer_call_cmd_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bt_bdaddr_t *bd_addr);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for answer incoming call (ATA)
"
    end

    class 4326583 "bthf_hangup_call_cmd_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bt_bdaddr_t *bd_addr);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for disconnect call (AT+CHUP)
"
    end

    class 4326711 "bthf_volume_cmd_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bthf_volume_type_t type, int volume, bt_bdaddr_t *bd_addr);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for disconnect call (AT+CHUP)
 type will denote Speaker/Mic gain (BtHfVolumeControl).
"
    end

    class 4326839 "bthf_dial_call_cmd_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(char *number, bt_bdaddr_t *bd_addr);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for dialing an outgoing call
 If number is NULL, redial
"
    end

    class 4326967 "bthf_dtmf_cmd_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(char tone, bt_bdaddr_t *bd_addr);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for sending DTMF tones
 tone contains the dtmf character to be sent
"
    end

    class 4327095 "bthf_nrec_cmd_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bthf_nrec_t nrec, bt_bdaddr_t *bd_addr);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for enabling/disabling noise reduction/echo cancellation
 value will be 1 to enable, 0 to disable
"
    end

    class 4327223 "bthf_wbs_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bthf_wbs_config_t wbs, bt_bdaddr_t *bd_addr);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for AT+BCS and event from BAC
 WBS enable, WBS disable
"
    end

    class 4327351 "bthf_chld_cmd_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bthf_chld_type_t chld, bt_bdaddr_t *bd_addr);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for call hold handling (AT+CHLD)
 value will contain the call hold command (0, 1, 2, 3)
"
    end

    class 4327479 "bthf_cnum_cmd_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bt_bdaddr_t *bd_addr);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for CNUM (subscriber number)
"
    end

    class 4327607 "bthf_cind_cmd_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bt_bdaddr_t *bd_addr);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for indicators (CIND)
"
    end

    class 4327735 "bthf_cops_cmd_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bt_bdaddr_t *bd_addr);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for operator selection (COPS)
"
    end

    class 4327863 "bthf_clcc_cmd_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name}) (bt_bdaddr_t *bd_addr);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for call list (AT+CLCC)
"
    end

    class 4327991 "bthf_unknown_at_cmd_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(char *at_string, bt_bdaddr_t *bd_addr);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for unknown AT command recd from HF
 at_string will contain the unparsed AT string
"
    end

    class 4328119 "bthf_key_pressed_cmd_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bt_bdaddr_t *bd_addr);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for keypressed (HSP) event.
"
    end

    class 4328247 "bthf_callbacks_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " BT-HF callback structure. "
      classrelation 8318007 // connection_state_cb (<directional composition>)
	relation 8318007 *-->
	  a role_name "connection_state_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8318007 // connection_state_cb (<directional composition>)
	  b parent class_ref 4326071 // bthf_connection_state_callback
      end

      classrelation 8318135 // audio_state_cb (<directional composition>)
	relation 8318135 *-->
	  a role_name "audio_state_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8318135 // audio_state_cb (<directional composition>)
	  b parent class_ref 4326199 // bthf_audio_state_callback
      end

      classrelation 8318263 // vr_cmd_cb (<directional composition>)
	relation 8318263 *-->
	  a role_name "vr_cmd_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8318263 // vr_cmd_cb (<directional composition>)
	  b parent class_ref 4326327 // bthf_vr_cmd_callback
      end

      classrelation 8318391 // answer_call_cmd_cb (<directional composition>)
	relation 8318391 *-->
	  a role_name "answer_call_cmd_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8318391 // answer_call_cmd_cb (<directional composition>)
	  b parent class_ref 4326455 // bthf_answer_call_cmd_callback
      end

      classrelation 8318519 // hangup_call_cmd_cb (<directional composition>)
	relation 8318519 *-->
	  a role_name "hangup_call_cmd_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8318519 // hangup_call_cmd_cb (<directional composition>)
	  b parent class_ref 4326583 // bthf_hangup_call_cmd_callback
      end

      classrelation 8318647 // volume_cmd_cb (<directional composition>)
	relation 8318647 *-->
	  a role_name "volume_cmd_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8318647 // volume_cmd_cb (<directional composition>)
	  b parent class_ref 4326711 // bthf_volume_cmd_callback
      end

      classrelation 8318775 // dial_call_cmd_cb (<directional composition>)
	relation 8318775 *-->
	  a role_name "dial_call_cmd_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8318775 // dial_call_cmd_cb (<directional composition>)
	  b parent class_ref 4326839 // bthf_dial_call_cmd_callback
      end

      classrelation 8318903 // dtmf_cmd_cb (<directional composition>)
	relation 8318903 *-->
	  a role_name "dtmf_cmd_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8318903 // dtmf_cmd_cb (<directional composition>)
	  b parent class_ref 4326967 // bthf_dtmf_cmd_callback
      end

      classrelation 8319031 // nrec_cmd_cb (<directional composition>)
	relation 8319031 *-->
	  a role_name "nrec_cmd_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8319031 // nrec_cmd_cb (<directional composition>)
	  b parent class_ref 4327095 // bthf_nrec_cmd_callback
      end

      classrelation 8319159 // wbs_cb (<directional composition>)
	relation 8319159 *-->
	  a role_name "wbs_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8319159 // wbs_cb (<directional composition>)
	  b parent class_ref 4327223 // bthf_wbs_callback
      end

      classrelation 8319287 // chld_cmd_cb (<directional composition>)
	relation 8319287 *-->
	  a role_name "chld_cmd_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8319287 // chld_cmd_cb (<directional composition>)
	  b parent class_ref 4327351 // bthf_chld_cmd_callback
      end

      classrelation 8319415 // cnum_cmd_cb (<directional composition>)
	relation 8319415 *-->
	  a role_name "cnum_cmd_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8319415 // cnum_cmd_cb (<directional composition>)
	  b parent class_ref 4327479 // bthf_cnum_cmd_callback
      end

      classrelation 8319543 // cind_cmd_cb (<directional composition>)
	relation 8319543 *-->
	  a role_name "cind_cmd_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8319543 // cind_cmd_cb (<directional composition>)
	  b parent class_ref 4327607 // bthf_cind_cmd_callback
      end

      classrelation 8319671 // cops_cmd_cb (<directional composition>)
	relation 8319671 *-->
	  a role_name "cops_cmd_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8319671 // cops_cmd_cb (<directional composition>)
	  b parent class_ref 4327735 // bthf_cops_cmd_callback
      end

      classrelation 8319799 // clcc_cmd_cb (<directional composition>)
	relation 8319799 *-->
	  a role_name "clcc_cmd_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8319799 // clcc_cmd_cb (<directional composition>)
	  b parent class_ref 4327863 // bthf_clcc_cmd_callback
      end

      classrelation 8319927 // unknown_at_cmd_cb (<directional composition>)
	relation 8319927 *-->
	  a role_name "unknown_at_cmd_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8319927 // unknown_at_cmd_cb (<directional composition>)
	  b parent class_ref 4327991 // bthf_unknown_at_cmd_callback
      end

      classrelation 8320055 // key_pressed_cmd_cb (<directional composition>)
	relation 8320055 *-->
	  a role_name "key_pressed_cmd_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8320055 // key_pressed_cmd_cb (<directional composition>)
	  b parent class_ref 4328119 // bthf_key_pressed_cmd_callback
      end
    end

    class 4328375 "bthf_network_state_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Network Status "
      attribute 15538103 "BTHF_NETWORK_STATE_NOT_AVAILABLE"
	public type class_ref 4328375 // bthf_network_state_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15538231 "BTHF_NETWORK_STATE_AVAILABLE"
	public type class_ref 4328375 // bthf_network_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4328503 "bthf_service_type_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Service type "
      attribute 15538359 "BTHF_SERVICE_TYPE_HOME"
	public type class_ref 4328503 // bthf_service_type_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15538487 "BTHF_SERVICE_TYPE_ROAMING"
	public type class_ref 4328503 // bthf_service_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4328631 "bthf_call_state_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15538615 "BTHF_CALL_STATE_ACTIVE"
	public type class_ref 4328631 // bthf_call_state_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15538743 "BTHF_CALL_STATE_HELD"
	public type class_ref 4328631 // bthf_call_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15538871 "BTHF_CALL_STATE_DIALING"
	public type class_ref 4328631 // bthf_call_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15538999 "BTHF_CALL_STATE_ALERTING"
	public type class_ref 4328631 // bthf_call_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15539127 "BTHF_CALL_STATE_INCOMING"
	public type class_ref 4328631 // bthf_call_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15539255 "BTHF_CALL_STATE_WAITING"
	public type class_ref 4328631 // bthf_call_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15539383 "BTHF_CALL_STATE_IDLE"
	public type class_ref 4328631 // bthf_call_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4328759 "bthf_call_direction_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15539511 "BTHF_CALL_DIRECTION_OUTGOING"
	public type class_ref 4328759 // bthf_call_direction_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15539639 "BTHF_CALL_DIRECTION_INCOMING"
	public type class_ref 4328759 // bthf_call_direction_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4328887 "bthf_call_mode_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15539767 "BTHF_CALL_TYPE_VOICE"
	public type class_ref 4328887 // bthf_call_mode_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15539895 "BTHF_CALL_TYPE_DATA"
	public type class_ref 4328887 // bthf_call_mode_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15540023 "BTHF_CALL_TYPE_FAX"
	public type class_ref 4328887 // bthf_call_mode_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4329015 "bthf_call_mpty_type_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15540151 "BTHF_CALL_MPTY_TYPE_SINGLE"
	public type class_ref 4329015 // bthf_call_mpty_type_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15540279 "BTHF_CALL_MPTY_TYPE_MULTI"
	public type class_ref 4329015 // bthf_call_mpty_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4329143 "bthf_call_addrtype_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15540407 "BTHF_CALL_ADDRTYPE_UNKNOWN"
	public type class_ref 4329143 // bthf_call_addrtype_t
	init_value " 0x81"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15540535 "BTHF_CALL_ADDRTYPE_INTERNATIONAL"
	public type class_ref 4329143 // bthf_call_addrtype_t
	init_value " 0x91
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4329271 "bthf_interface_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Represents the standard BT-HF interface. "
      attribute 15540663 "init"
	public explicit_type "/** * Register the BtHf callbacks */ bt_status_t (*)( bthf_callbacks_t* callbacks, int max_hf_clients)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    /**
     * Register the BtHf callbacks
     */
    bt_status_t (*${name})( bthf_callbacks_t* callbacks, int max_hf_clients)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Register the BtHf callbacks

"
      end

      attribute 15540791 "connect"
	public explicit_type "/** connect to headset */ bt_status_t (*)( bt_bdaddr_t *bd_addr )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** connect to headset */
    bt_status_t (*${name})( bt_bdaddr_t *bd_addr )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " connect to headset 
"
      end

      attribute 15540919 "disconnect"
	public explicit_type "/** dis-connect from headset */ bt_status_t (*)( bt_bdaddr_t *bd_addr )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** dis-connect from headset */
    bt_status_t (*${name})( bt_bdaddr_t *bd_addr )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " dis-connect from headset 
"
      end

      attribute 15541047 "connect_audio"
	public explicit_type "/** create an audio connection */ bt_status_t (*)( bt_bdaddr_t *bd_addr )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** create an audio connection */
    bt_status_t (*${name})( bt_bdaddr_t *bd_addr )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " create an audio connection 
"
      end

      attribute 15541175 "disconnect_audio"
	public explicit_type "/** close the audio connection */ bt_status_t (*)( bt_bdaddr_t *bd_addr )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** close the audio connection */
    bt_status_t (*${name})( bt_bdaddr_t *bd_addr )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " close the audio connection 
"
      end

      attribute 15541303 "start_voice_recognition"
	public explicit_type "/** start voice recognition */ bt_status_t (*)( bt_bdaddr_t *bd_addr )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** start voice recognition */
    bt_status_t (*${name})( bt_bdaddr_t *bd_addr )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " start voice recognition 
"
      end

      attribute 15541431 "stop_voice_recognition"
	public explicit_type "/** stop voice recognition */ bt_status_t (*)( bt_bdaddr_t *bd_addr )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** stop voice recognition */
    bt_status_t (*${name})( bt_bdaddr_t *bd_addr )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " stop voice recognition 
"
      end

      attribute 15541559 "volume_control"
	public explicit_type "/** volume control */ bt_status_t (*) (bthf_volume_type_t type, int volume, bt_bdaddr_t *bd_addr )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** volume control */
    bt_status_t (*${name}) (bthf_volume_type_t type, int volume, bt_bdaddr_t *bd_addr )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " volume control 
"
      end

      attribute 15541687 "device_status_notification"
	public explicit_type "/** Combined device status change notification */ bt_status_t (*)(bthf_network_state_t ntk_state, bthf_service_type_t svc_type, int signal, int batt_chg)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Combined device status change notification */
    bt_status_t (*${name})(bthf_network_state_t ntk_state, bthf_service_type_t svc_type, int signal,
                           int batt_chg)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Combined device status change notification 
"
      end

      attribute 15541815 "cops_response"
	public explicit_type "/** Response for COPS command */ bt_status_t (*)(const char *cops, bt_bdaddr_t *bd_addr )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Response for COPS command */
    bt_status_t (*${name})(const char *cops, bt_bdaddr_t *bd_addr )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Response for COPS command 
"
      end

      attribute 15541943 "cind_response"
	public explicit_type "/** Response for CIND command */ bt_status_t (*)(int svc, int num_active, int num_held, bthf_call_state_t call_setup_state, int signal, int roam, int batt_chg, bt_bdaddr_t *bd_addr )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Response for CIND command */
    bt_status_t (*${name})(int svc, int num_active, int num_held, bthf_call_state_t call_setup_state,
                                 int signal, int roam, int batt_chg, bt_bdaddr_t *bd_addr )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Response for CIND command 
"
      end

      attribute 15542071 "formatted_at_response"
	public explicit_type "/** Pre-formatted AT response, typically in response to unknown AT cmd */ bt_status_t (*)(const char *rsp, bt_bdaddr_t *bd_addr )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Pre-formatted AT response, typically in response to unknown AT cmd */
    bt_status_t (*${name})(const char *rsp, bt_bdaddr_t *bd_addr )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Pre-formatted AT response, typically in response to unknown AT cmd 
"
      end

      attribute 15542199 "at_response"
	public explicit_type "/** ok/error response * ERROR (0) * OK (1) */ bt_status_t (*) (bthf_at_response_t response_code, int error_code, bt_bdaddr_t *bd_addr )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** ok/error response
     *  ERROR (0)
     *  OK    (1)
     */
    bt_status_t (*${name}) (bthf_at_response_t response_code, int error_code, bt_bdaddr_t *bd_addr )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " ok/error response
 ERROR (0)
 OK    (1)

"
      end

      attribute 15542327 "clcc_response"
	public explicit_type "/** response for CLCC command * Can be iteratively called for each call index * Call index of 0 will be treated as NULL termination (Completes response) */ bt_status_t (*) (int index, bthf_call_direction_t dir, bthf_call_state_t state, bthf_call_mode_t mode, bthf_call_mpty_type_t mpty, const char *number, bthf_call_addrtype_t type, bt_bdaddr_t *bd_addr )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** response for CLCC command 
     *  Can be iteratively called for each call index
     *  Call index of 0 will be treated as NULL termination (Completes response)
     */
    bt_status_t (*${name}) (int index, bthf_call_direction_t dir,
                                bthf_call_state_t state, bthf_call_mode_t mode,
                                bthf_call_mpty_type_t mpty, const char *number,
                                bthf_call_addrtype_t type, bt_bdaddr_t *bd_addr )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " response for CLCC command 
 Can be iteratively called for each call index
 Call index of 0 will be treated as NULL termination (Completes response)

"
      end

      attribute 15542455 "phone_state_change"
	public explicit_type "/** notify of a call state change * Each update notifies * 1. Number of active/held/ringing calls * 2. call_state: This denotes the state change that triggered this msg * This will take one of the values from BtHfCallState * 3. number & type: valid only for incoming & waiting call */ bt_status_t (*) (int num_active, int num_held, bthf_call_state_t call_setup_state, const char *number, bthf_call_addrtype_t type)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** notify of a call state change
     *  Each update notifies 
     *    1. Number of active/held/ringing calls
     *    2. call_state: This denotes the state change that triggered this msg
     *                   This will take one of the values from BtHfCallState
     *    3. number & type: valid only for incoming & waiting call
    */
    bt_status_t (*${name}) (int num_active, int num_held, bthf_call_state_t call_setup_state,
                                       const char *number, bthf_call_addrtype_t type)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " notify of a call state change
 Each update notifies 
   1. Number of active/held/ringing calls
   2. call_state: This denotes the state change that triggered this msg
                  This will take one of the values from BtHfCallState
   3. number & type: valid only for incoming & waiting call

"
      end

      attribute 15542583 "cleanup"
	public explicit_type "/** Closes the interface. */ void (*)( void )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Closes the interface. */
    void  (*${name})( void )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Closes the interface. 
"
      end

      attribute 15542711 "configure_wbs"
	public explicit_type "/** configureation for the SCO codec */ bt_status_t (*)( bt_bdaddr_t *bd_addr ,bthf_wbs_config_t config )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** configureation for the SCO codec */
    bt_status_t (*${name})( bt_bdaddr_t *bd_addr ,bthf_wbs_config_t config )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " configureation for the SCO codec 
"
      end
    end

    class 4329399 "bthf_client_audio_state_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15542839 "BTHF_CLIENT_AUDIO_STATE_DISCONNECTED"
	public type class_ref 4329399 // bthf_client_audio_state_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15542967 "BTHF_CLIENT_AUDIO_STATE_CONNECTING"
	public type class_ref 4329399 // bthf_client_audio_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15543095 "BTHF_CLIENT_AUDIO_STATE_CONNECTED"
	public type class_ref 4329399 // bthf_client_audio_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15543223 "BTHF_CLIENT_AUDIO_STATE_CONNECTED_MSBC"
	public type class_ref 4329399 // bthf_client_audio_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4329527 "bthf_client_vr_state_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15543351 "BTHF_CLIENT_VR_STATE_STOPPED"
	public type class_ref 4329527 // bthf_client_vr_state_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15543479 "BTHF_CLIENT_VR_STATE_STARTED"
	public type class_ref 4329527 // bthf_client_vr_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4329655 "bthf_client_volume_type_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15543607 "BTHF_CLIENT_VOLUME_TYPE_SPK"
	public type class_ref 4329655 // bthf_client_volume_type_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15543735 "BTHF_CLIENT_VOLUME_TYPE_MIC"
	public type class_ref 4329655 // bthf_client_volume_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4329783 "bthf_client_network_state_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15543863 "BTHF_CLIENT_NETWORK_STATE_NOT_AVAILABLE"
	public type class_ref 4329783 // bthf_client_network_state_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15543991 "BTHF_CLIENT_NETWORK_STATE_AVAILABLE"
	public type class_ref 4329783 // bthf_client_network_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4329911 "bthf_client_service_type_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15544119 "BTHF_CLIENT_SERVICE_TYPE_HOME"
	public type class_ref 4329911 // bthf_client_service_type_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15544247 "BTHF_CLIENT_SERVICE_TYPE_ROAMING"
	public type class_ref 4329911 // bthf_client_service_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4330039 "bthf_client_call_state_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15544375 "BTHF_CLIENT_CALL_STATE_ACTIVE"
	public type class_ref 4330039 // bthf_client_call_state_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15544503 "BTHF_CLIENT_CALL_STATE_HELD"
	public type class_ref 4330039 // bthf_client_call_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15544631 "BTHF_CLIENT_CALL_STATE_DIALING"
	public type class_ref 4330039 // bthf_client_call_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15544759 "BTHF_CLIENT_CALL_STATE_ALERTING"
	public type class_ref 4330039 // bthf_client_call_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15544887 "BTHF_CLIENT_CALL_STATE_INCOMING"
	public type class_ref 4330039 // bthf_client_call_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15545015 "BTHF_CLIENT_CALL_STATE_WAITING"
	public type class_ref 4330039 // bthf_client_call_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15545143 "BTHF_CLIENT_CALL_STATE_HELD_BY_RESP_HOLD"
	public type class_ref 4330039 // bthf_client_call_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4330167 "bthf_client_call_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15545271 "BTHF_CLIENT_CALL_NO_CALLS_IN_PROGRESS"
	public type class_ref 4330167 // bthf_client_call_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15545399 "BTHF_CLIENT_CALL_CALLS_IN_PROGRESS"
	public type class_ref 4330167 // bthf_client_call_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4330295 "bthf_client_callsetup_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15545527 "BTHF_CLIENT_CALLSETUP_NONE"
	public type class_ref 4330295 // bthf_client_callsetup_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15545655 "BTHF_CLIENT_CALLSETUP_INCOMING"
	public type class_ref 4330295 // bthf_client_callsetup_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15545783 "BTHF_CLIENT_CALLSETUP_OUTGOING"
	public type class_ref 4330295 // bthf_client_callsetup_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15545911 "BTHF_CLIENT_CALLSETUP_ALERTING"
	public type class_ref 4330295 // bthf_client_callsetup_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4330423 "bthf_client_callheld_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15546039 "BTHF_CLIENT_CALLHELD_NONE"
	public type class_ref 4330423 // bthf_client_callheld_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15546167 "BTHF_CLIENT_CALLHELD_HOLD_AND_ACTIVE"
	public type class_ref 4330423 // bthf_client_callheld_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15546295 "BTHF_CLIENT_CALLHELD_HOLD"
	public type class_ref 4330423 // bthf_client_callheld_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4330551 "bthf_client_resp_and_hold_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15546423 "BTHF_CLIENT_RESP_AND_HOLD_HELD"
	public type class_ref 4330551 // bthf_client_resp_and_hold_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15546551 "BTRH_CLIENT_RESP_AND_HOLD_ACCEPT"
	public type class_ref 4330551 // bthf_client_resp_and_hold_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15546679 "BTRH_CLIENT_RESP_AND_HOLD_REJECT"
	public type class_ref 4330551 // bthf_client_resp_and_hold_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4330679 "bthf_client_call_direction_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15546807 "BTHF_CLIENT_CALL_DIRECTION_OUTGOING"
	public type class_ref 4330679 // bthf_client_call_direction_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15546935 "BTHF_CLIENT_CALL_DIRECTION_INCOMING"
	public type class_ref 4330679 // bthf_client_call_direction_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4330807 "bthf_client_call_mpty_type_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15547063 "BTHF_CLIENT_CALL_MPTY_TYPE_SINGLE"
	public type class_ref 4330807 // bthf_client_call_mpty_type_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15547191 "BTHF_CLIENT_CALL_MPTY_TYPE_MULTI"
	public type class_ref 4330807 // bthf_client_call_mpty_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4330935 "bthf_client_cmd_complete_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15547319 "BTHF_CLIENT_CMD_COMPLETE_OK"
	public type class_ref 4330935 // bthf_client_cmd_complete_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15547447 "BTHF_CLIENT_CMD_COMPLETE_ERROR"
	public type class_ref 4330935 // bthf_client_cmd_complete_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15547575 "BTHF_CLIENT_CMD_COMPLETE_ERROR_NO_CARRIER"
	public type class_ref 4330935 // bthf_client_cmd_complete_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15547703 "BTHF_CLIENT_CMD_COMPLETE_ERROR_BUSY"
	public type class_ref 4330935 // bthf_client_cmd_complete_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15547831 "BTHF_CLIENT_CMD_COMPLETE_ERROR_NO_ANSWER"
	public type class_ref 4330935 // bthf_client_cmd_complete_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15547959 "BTHF_CLIENT_CMD_COMPLETE_ERROR_DELAYED"
	public type class_ref 4330935 // bthf_client_cmd_complete_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15548087 "BTHF_CLIENT_CMD_COMPLETE_ERROR_BLACKLISTED"
	public type class_ref 4330935 // bthf_client_cmd_complete_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15548215 "BTHF_CLIENT_CMD_COMPLETE_ERROR_CME"
	public type class_ref 4330935 // bthf_client_cmd_complete_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4331063 "bthf_client_call_action_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15548343 "BTHF_CLIENT_CALL_ACTION_CHLD_0"
	public type class_ref 4331063 // bthf_client_call_action_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15548471 "BTHF_CLIENT_CALL_ACTION_CHLD_1"
	public type class_ref 4331063 // bthf_client_call_action_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15548599 "BTHF_CLIENT_CALL_ACTION_CHLD_2"
	public type class_ref 4331063 // bthf_client_call_action_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15548727 "BTHF_CLIENT_CALL_ACTION_CHLD_3"
	public type class_ref 4331063 // bthf_client_call_action_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15548855 "BTHF_CLIENT_CALL_ACTION_CHLD_4"
	public type class_ref 4331063 // bthf_client_call_action_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15548983 "BTHF_CLIENT_CALL_ACTION_CHLD_1x"
	public type class_ref 4331063 // bthf_client_call_action_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15549111 "BTHF_CLIENT_CALL_ACTION_CHLD_2x"
	public type class_ref 4331063 // bthf_client_call_action_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15549239 "BTHF_CLIENT_CALL_ACTION_ATA"
	public type class_ref 4331063 // bthf_client_call_action_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15549367 "BTHF_CLIENT_CALL_ACTION_CHUP"
	public type class_ref 4331063 // bthf_client_call_action_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15549495 "BTHF_CLIENT_CALL_ACTION_BTRH_0"
	public type class_ref 4331063 // bthf_client_call_action_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15549623 "BTHF_CLIENT_CALL_ACTION_BTRH_1"
	public type class_ref 4331063 // bthf_client_call_action_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15549751 "BTHF_CLIENT_CALL_ACTION_BTRH_2"
	public type class_ref 4331063 // bthf_client_call_action_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4331191 "bthf_client_subscriber_service_type_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15549879 "BTHF_CLIENT_SERVICE_UNKNOWN"
	public type class_ref 4331191 // bthf_client_subscriber_service_type_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15550007 "BTHF_CLIENT_SERVICE_VOICE"
	public type class_ref 4331191 // bthf_client_subscriber_service_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15550135 "BTHF_CLIENT_SERVICE_FAX"
	public type class_ref 4331191 // bthf_client_subscriber_service_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4331319 "bthf_client_in_band_ring_state_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15550263 "BTHF_CLIENT_IN_BAND_RINGTONE_NOT_PROVIDED"
	public type class_ref 4331319 // bthf_client_in_band_ring_state_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15550391 "BTHF_CLIENT_IN_BAND_RINGTONE_PROVIDED"
	public type class_ref 4331319 // bthf_client_in_band_ring_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4331447 "bthf_client_connection_state_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bthf_client_connection_state_t state,
                                                       unsigned int peer_feat,
                                                       unsigned int chld_feat,
                                                       bt_bdaddr_t *bd_addr);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for connection state change.
 state will have one of the values from BtHfConnectionState
 peer/chld_features are valid only for BTHF_CLIENT_CONNECTION_STATE_SLC_CONNECTED state
"
    end

    class 4331575 "bthf_client_audio_state_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bthf_client_audio_state_t state,
                                                  bt_bdaddr_t *bd_addr);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for audio connection state change.
 state will have one of the values from BtHfAudioState
"
    end

    class 4331703 "bthf_client_vr_cmd_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bthf_client_vr_state_t state);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for VR connection state change.
 state will have one of the values from BtHfVRState
"
    end

    class 4331831 "bthf_client_network_state_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name}) (bthf_client_network_state_t state);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for network state change
"
    end

    class 4331959 "bthf_client_network_roaming_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name}) (bthf_client_service_type_t type);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for network roaming status change
"
    end

    class 4332087 "bthf_client_network_signal_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name}) (int signal_strength);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for signal strength indication
"
    end

    class 4332215 "bthf_client_battery_level_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name}) (int battery_level);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for battery level indication
"
    end

    class 4332343 "bthf_client_current_operator_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name}) (const char *name);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for current operator name
"
    end

    class 4332471 "bthf_client_call_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name}) (bthf_client_call_t call);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for call indicator
"
    end

    class 4332599 "bthf_client_callsetup_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name}) (bthf_client_callsetup_t callsetup);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for callsetup indicator
"
    end

    class 4332727 "bthf_client_callheld_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name}) (bthf_client_callheld_t callheld);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for callheld indicator
"
    end

    class 4332855 "bthf_client_resp_and_hold_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name}) (bthf_client_resp_and_hold_t resp_and_hold);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for response and hold
"
    end

    class 4332983 "bthf_client_clip_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name}) (const char *number);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for Calling Line Identification notification
 Will be called only when there is an incoming call and number is provided.
"
    end

    class 4333111 "bthf_client_call_waiting_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name}) (const char *number);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Callback for Call Waiting notification
"
    end

    class 4333239 "bthf_client_current_calls"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name}) (int index, bthf_client_call_direction_t dir,
                                           bthf_client_call_state_t state,
                                           bthf_client_call_mpty_type_t mpty,
                                           const char *number);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for listing current calls. Can be called multiple time.
 If number is unknown NULL is passed.
"
    end

    class 4333367 "bthf_client_volume_change_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name}) (bthf_client_volume_type_t type, int volume);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for audio volume change
"
    end

    class 4333495 "bthf_client_cmd_complete_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name}) (bthf_client_cmd_complete_t type, int cme);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for command complete event
 cme is valid only for BTHF_CLIENT_CMD_COMPLETE_ERROR_CME type
"
    end

    class 4333623 "bthf_client_subscriber_info_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name}) (const char *name,
                                                       bthf_client_subscriber_service_type_t type);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for subscriber information
"
    end

    class 4333751 "bthf_client_in_band_ring_tone_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name}) (bthf_client_in_band_ring_state_t state);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for in-band ring tone settings
"
    end

    class 4333879 "bthf_client_last_voice_tag_number_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name}) (const char *number);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Callback for requested number from AG
"
    end

    class 4334007 "bthf_client_ring_indication_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name}) (void);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Callback for sending ring indication to app
"
    end

    class 4334135 "bthf_client_callbacks_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " BT-HF callback structure. "
      classrelation 8320439 // connection_state_cb (<directional composition>)
	relation 8320439 *-->
	  a role_name "connection_state_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8320439 // connection_state_cb (<directional composition>)
	  b parent class_ref 4331447 // bthf_client_connection_state_callback
      end

      classrelation 8320567 // audio_state_cb (<directional composition>)
	relation 8320567 *-->
	  a role_name "audio_state_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8320567 // audio_state_cb (<directional composition>)
	  b parent class_ref 4331575 // bthf_client_audio_state_callback
      end

      classrelation 8320695 // vr_cmd_cb (<directional composition>)
	relation 8320695 *-->
	  a role_name "vr_cmd_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8320695 // vr_cmd_cb (<directional composition>)
	  b parent class_ref 4331703 // bthf_client_vr_cmd_callback
      end

      classrelation 8320823 // network_state_cb (<directional composition>)
	relation 8320823 *-->
	  a role_name "network_state_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8320823 // network_state_cb (<directional composition>)
	  b parent class_ref 4331831 // bthf_client_network_state_callback
      end

      classrelation 8320951 // network_roaming_cb (<directional composition>)
	relation 8320951 *-->
	  a role_name "network_roaming_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8320951 // network_roaming_cb (<directional composition>)
	  b parent class_ref 4331959 // bthf_client_network_roaming_callback
      end

      classrelation 8321079 // network_signal_cb (<directional composition>)
	relation 8321079 *-->
	  a role_name "network_signal_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8321079 // network_signal_cb (<directional composition>)
	  b parent class_ref 4332087 // bthf_client_network_signal_callback
      end

      classrelation 8321207 // battery_level_cb (<directional composition>)
	relation 8321207 *-->
	  a role_name "battery_level_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8321207 // battery_level_cb (<directional composition>)
	  b parent class_ref 4332215 // bthf_client_battery_level_callback
      end

      classrelation 8321335 // current_operator_cb (<directional composition>)
	relation 8321335 *-->
	  a role_name "current_operator_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8321335 // current_operator_cb (<directional composition>)
	  b parent class_ref 4332343 // bthf_client_current_operator_callback
      end

      classrelation 8321463 // call_cb (<directional composition>)
	relation 8321463 *-->
	  a role_name "call_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8321463 // call_cb (<directional composition>)
	  b parent class_ref 4332471 // bthf_client_call_callback
      end

      classrelation 8321591 // callsetup_cb (<directional composition>)
	relation 8321591 *-->
	  a role_name "callsetup_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8321591 // callsetup_cb (<directional composition>)
	  b parent class_ref 4332599 // bthf_client_callsetup_callback
      end

      classrelation 8321719 // callheld_cb (<directional composition>)
	relation 8321719 *-->
	  a role_name "callheld_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8321719 // callheld_cb (<directional composition>)
	  b parent class_ref 4332727 // bthf_client_callheld_callback
      end

      classrelation 8321847 // resp_and_hold_cb (<directional composition>)
	relation 8321847 *-->
	  a role_name "resp_and_hold_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8321847 // resp_and_hold_cb (<directional composition>)
	  b parent class_ref 4332855 // bthf_client_resp_and_hold_callback
      end

      classrelation 8321975 // clip_cb (<directional composition>)
	relation 8321975 *-->
	  a role_name "clip_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8321975 // clip_cb (<directional composition>)
	  b parent class_ref 4332983 // bthf_client_clip_callback
      end

      classrelation 8322103 // call_waiting_cb (<directional composition>)
	relation 8322103 *-->
	  a role_name "call_waiting_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8322103 // call_waiting_cb (<directional composition>)
	  b parent class_ref 4333111 // bthf_client_call_waiting_callback
      end

      classrelation 8322231 // current_calls_cb (<directional composition>)
	relation 8322231 *-->
	  a role_name "current_calls_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8322231 // current_calls_cb (<directional composition>)
	  b parent class_ref 4333239 // bthf_client_current_calls
      end

      classrelation 8322359 // volume_change_cb (<directional composition>)
	relation 8322359 *-->
	  a role_name "volume_change_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8322359 // volume_change_cb (<directional composition>)
	  b parent class_ref 4333367 // bthf_client_volume_change_callback
      end

      classrelation 8322487 // cmd_complete_cb (<directional composition>)
	relation 8322487 *-->
	  a role_name "cmd_complete_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8322487 // cmd_complete_cb (<directional composition>)
	  b parent class_ref 4333495 // bthf_client_cmd_complete_callback
      end

      classrelation 8322615 // subscriber_info_cb (<directional composition>)
	relation 8322615 *-->
	  a role_name "subscriber_info_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8322615 // subscriber_info_cb (<directional composition>)
	  b parent class_ref 4333623 // bthf_client_subscriber_info_callback
      end

      classrelation 8322743 // in_band_ring_tone_cb (<directional composition>)
	relation 8322743 *-->
	  a role_name "in_band_ring_tone_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8322743 // in_band_ring_tone_cb (<directional composition>)
	  b parent class_ref 4333751 // bthf_client_in_band_ring_tone_callback
      end

      classrelation 8322871 // last_voice_tag_number_callback (<directional composition>)
	relation 8322871 *-->
	  a role_name "last_voice_tag_number_callback" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8322871 // last_voice_tag_number_callback (<directional composition>)
	  b parent class_ref 4333879 // bthf_client_last_voice_tag_number_callback
      end

      classrelation 8322999 // ring_indication_cb (<directional composition>)
	relation 8322999 *-->
	  a role_name "ring_indication_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8322999 // ring_indication_cb (<directional composition>)
	  b parent class_ref 4334007 // bthf_client_ring_indication_callback
      end
    end

    class 4334263 "bthf_client_interface_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Represents the standard BT-HF interface. "
      attribute 15550519 "init"
	public explicit_type "/** * Register the BtHf callbacks */ bt_status_t (*)(bthf_client_callbacks_t* callbacks)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    /**
     * Register the BtHf callbacks
     */
    bt_status_t (*${name})(bthf_client_callbacks_t* callbacks)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Register the BtHf callbacks

"
      end

      attribute 15550647 "connect"
	public explicit_type "/** connect to audio gateway */ bt_status_t (*)(bt_bdaddr_t *bd_addr)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** connect to audio gateway */
    bt_status_t (*${name})(bt_bdaddr_t *bd_addr)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " connect to audio gateway 
"
      end

      attribute 15550775 "disconnect"
	public explicit_type "/** disconnect from audio gateway */ bt_status_t (*)(bt_bdaddr_t *bd_addr)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** disconnect from audio gateway */
    bt_status_t (*${name})(bt_bdaddr_t *bd_addr)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " disconnect from audio gateway 
"
      end

      attribute 15550903 "connect_audio"
	public explicit_type "/** create an audio connection */ bt_status_t (*)(bt_bdaddr_t *bd_addr)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** create an audio connection */
    bt_status_t (*${name})(bt_bdaddr_t *bd_addr)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " create an audio connection 
"
      end

      attribute 15551031 "disconnect_audio"
	public explicit_type "/** close the audio connection */ bt_status_t (*)(bt_bdaddr_t *bd_addr)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** close the audio connection */
    bt_status_t (*${name})(bt_bdaddr_t *bd_addr)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " close the audio connection 
"
      end

      attribute 15551159 "start_voice_recognition"
	public explicit_type "/** start voice recognition */ bt_status_t (*)(void)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** start voice recognition */
    bt_status_t (*${name})(void)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " start voice recognition 
"
      end

      attribute 15551287 "stop_voice_recognition"
	public explicit_type "/** stop voice recognition */ bt_status_t (*)(void)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** stop voice recognition */
    bt_status_t (*${name})(void)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " stop voice recognition 
"
      end

      attribute 15551415 "volume_control"
	public explicit_type "/** volume control */ bt_status_t (*) (bthf_client_volume_type_t type, int volume)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** volume control */
    bt_status_t (*${name}) (bthf_client_volume_type_t type, int volume)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " volume control 
"
      end

      attribute 15551543 "dial"
	public explicit_type "/** place a call with number a number * if number is NULL last called number is called (aka re-dial)*/ bt_status_t (*) (const char *number)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** place a call with number a number
     * if number is NULL last called number is called (aka re-dial)*/
    bt_status_t (*${name}) (const char *number)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " place a call with number a number
if number is NULL last called number is called (aka re-dial)
"
      end

      attribute 15551671 "dial_memory"
	public explicit_type "/** place a call with number specified by location (speed dial) */ bt_status_t (*) (int location)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** place a call with number specified by location (speed dial) */
    bt_status_t (*${name}) (int location)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " place a call with number specified by location (speed dial) 
"
      end

      attribute 15551799 "handle_call_action"
	public explicit_type "/** perform specified call related action * idx is limited only for enhanced call control related action */ bt_status_t (*) (bthf_client_call_action_t action, int idx)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** perform specified call related action
     * idx is limited only for enhanced call control related action
     */
    bt_status_t (*${name}) (bthf_client_call_action_t action, int idx)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " perform specified call related action
idx is limited only for enhanced call control related action

"
      end

      attribute 15551927 "query_current_calls"
	public explicit_type "/** query list of current calls */ bt_status_t (*) (void)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** query list of current calls */
    bt_status_t (*${name}) (void)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " query list of current calls 
"
      end

      attribute 15552055 "query_current_operator_name"
	public explicit_type "/** query name of current selected operator */ bt_status_t (*) (void)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** query name of current selected operator */
    bt_status_t (*${name}) (void)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " query name of current selected operator 
"
      end

      attribute 15552183 "retrieve_subscriber_info"
	public explicit_type "/** Retrieve subscriber information */ bt_status_t (*) (void)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Retrieve subscriber information */
    bt_status_t (*${name}) (void)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Retrieve subscriber information 
"
      end

      attribute 15552311 "send_dtmf"
	public explicit_type "/** Send DTMF code*/ bt_status_t (*) (char code)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Send DTMF code*/
    bt_status_t (*${name}) (char code)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Send DTMF code
"
      end

      attribute 15552439 "request_last_voice_tag_number"
	public explicit_type "/** Request a phone number from AG corresponding to last voice tag recorded */ bt_status_t (*) (void)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Request a phone number from AG corresponding to last voice tag recorded */
    bt_status_t (*${name}) (void)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Request a phone number from AG corresponding to last voice tag recorded 
"
      end

      attribute 15552567 "cleanup"
	public explicit_type "/** Closes the interface. */ void (*)(void)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Closes the interface. */
    void (*${name})(void)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Closes the interface. 
"
      end

      attribute 15552695 "send_at_cmd"
	public explicit_type "/** Send AT Command. */ bt_status_t (*) (int cmd, int val1, int val2, const char *arg)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Send AT Command. */
    bt_status_t (*${name}) (int cmd, int val1, int val2, const char *arg)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Send AT Command. 
"
      end
    end

    class 4334391 "bthh_status_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " HH connection states "
      attribute 15552823 "BTHH_OK"
	public type class_ref 4334391 // bthh_status_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15552951 "BTHH_HS_HID_NOT_READY"
	public type class_ref 4334391 // bthh_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15553079 "BTHH_HS_INVALID_RPT_ID"
	public type class_ref 4334391 // bthh_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15553207 "BTHH_HS_TRANS_NOT_SPT"
	public type class_ref 4334391 // bthh_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15553335 "BTHH_HS_INVALID_PARAM"
	public type class_ref 4334391 // bthh_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15553463 "BTHH_HS_ERROR"
	public type class_ref 4334391 // bthh_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15553591 "BTHH_ERR"
	public type class_ref 4334391 // bthh_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15553719 "BTHH_ERR_SDP"
	public type class_ref 4334391 // bthh_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15553847 "BTHH_ERR_PROTO"
	public type class_ref 4334391 // bthh_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15553975 "BTHH_ERR_DB_FULL"
	public type class_ref 4334391 // bthh_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15554103 "BTHH_ERR_TOD_UNSPT"
	public type class_ref 4334391 // bthh_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15554231 "BTHH_ERR_NO_RES"
	public type class_ref 4334391 // bthh_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15554359 "BTHH_ERR_AUTH_FAILED"
	public type class_ref 4334391 // bthh_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15554487 "BTHH_ERR_HDL"
	public type class_ref 4334391 // bthh_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4334519 "bthh_protocol_mode_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " handshake error : device not ready 
 handshake error : invalid report ID 
 handshake error : transaction not spt 
 handshake error : invalid paremter 
 handshake error : unspecified HS error 
 general BTA HH error 
 SDP error 
 SET_Protocol error,
only used in BTA_HH_OPEN_EVT callback 
 device database full error, used  
 type of device not supported 
 out of system resources 
 authentication fail 
 Protocol modes "
      attribute 15554615 "BTHH_REPORT_MODE"
	public type class_ref 4334519 // bthh_protocol_mode_t
	init_value " 0x00"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15554743 "BTHH_BOOT_MODE"
	public type class_ref 4334519 // bthh_protocol_mode_t
	init_value " 0x01"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15554871 "BTHH_UNSUPPORTED_MODE"
	public type class_ref 4334519 // bthh_protocol_mode_t
	init_value " 0xff
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4334647 "bthh_report_type_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Report types "
      attribute 15554999 "BTHH_INPUT_REPORT"
	public type class_ref 4334647 // bthh_report_type_t
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15555127 "BTHH_OUTPUT_REPORT"
	public type class_ref 4334647 // bthh_report_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15555255 "BTHH_FEATURE_REPORT"
	public type class_ref 4334647 // bthh_report_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4334775 "bthh_hid_info_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15555383 "attr_mask"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15555511 "vendor_id"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15555639 "product_id"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15555767 "version"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15555895 "dl_len"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

    end

    class 4334903 "bthh_connection_state_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bt_bdaddr_t *bd_addr, bthh_connection_state_t state);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for connection state change.
 state will have one of the values from bthh_connection_state_t
"
    end

    class 4335031 "bthh_virtual_unplug_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bt_bdaddr_t *bd_addr, bthh_status_t hh_status);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for vitual unplug api.
 the status of the vitual unplug
"
    end

    class 4335159 "bthh_hid_info_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bt_bdaddr_t *bd_addr, bthh_hid_info_t hid_info);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for get hid info
 hid_info will contain attr_mask, sub_class, app_id, vendor_id, product_id, version, ctry_code, len
"
    end

    class 4335287 "bthh_protocol_mode_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bt_bdaddr_t *bd_addr, bthh_status_t hh_status, bthh_protocol_mode_t mode);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for get protocol api.
 the protocol mode is one of the value from bthh_protocol_mode_t
"
    end

    class 4335415 "bthh_idle_time_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bt_bdaddr_t *bd_addr, bthh_status_t hh_status, int idle_rate);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for get/set_idle_time api.
"
    end

    class 4335543 "bthh_get_report_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bt_bdaddr_t *bd_addr, bthh_status_t hh_status, uint8_t* rpt_data, int rpt_size);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for get report api.
 if staus is ok rpt_data contains the report data
"
    end

    class 4335671 "bthh_handshake_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bt_bdaddr_t *bd_addr, bthh_status_t hh_status);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for set_report/set_protocol api and if error
 occurs for get_report/get_protocol api.
"
    end

    class 4335799 "bthh_callbacks_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " BT-HH callback structure. "
      classrelation 8323895 // connection_state_cb (<directional composition>)
	relation 8323895 *-->
	  a role_name "connection_state_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8323895 // connection_state_cb (<directional composition>)
	  b parent class_ref 4334903 // bthh_connection_state_callback
      end

      classrelation 8324023 // hid_info_cb (<directional composition>)
	relation 8324023 *-->
	  a role_name "hid_info_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8324023 // hid_info_cb (<directional composition>)
	  b parent class_ref 4335159 // bthh_hid_info_callback
      end

      classrelation 8324151 // protocol_mode_cb (<directional composition>)
	relation 8324151 *-->
	  a role_name "protocol_mode_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8324151 // protocol_mode_cb (<directional composition>)
	  b parent class_ref 4335287 // bthh_protocol_mode_callback
      end

      classrelation 8324279 // idle_time_cb (<directional composition>)
	relation 8324279 *-->
	  a role_name "idle_time_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8324279 // idle_time_cb (<directional composition>)
	  b parent class_ref 4335415 // bthh_idle_time_callback
      end

      classrelation 8324407 // get_report_cb (<directional composition>)
	relation 8324407 *-->
	  a role_name "get_report_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8324407 // get_report_cb (<directional composition>)
	  b parent class_ref 4335543 // bthh_get_report_callback
      end

      classrelation 8324535 // virtual_unplug_cb (<directional composition>)
	relation 8324535 *-->
	  a role_name "virtual_unplug_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8324535 // virtual_unplug_cb (<directional composition>)
	  b parent class_ref 4335031 // bthh_virtual_unplug_callback
      end

      classrelation 8324663 // handshake_cb (<directional composition>)
	relation 8324663 *-->
	  a role_name "handshake_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8324663 // handshake_cb (<directional composition>)
	  b parent class_ref 4335671 // bthh_handshake_callback
      end
    end

    class 4335927 "bthh_interface_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Represents the standard BT-HH interface. "
      attribute 15556023 "init"
	public explicit_type "/** * Register the BtHh callbacks */ bt_status_t (*)( bthh_callbacks_t* callbacks )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Register the BtHh callbacks
     */
    bt_status_t (*${name})( bthh_callbacks_t* callbacks )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Register the BtHh callbacks

"
      end

      attribute 15556151 "connect"
	public explicit_type "/** connect to hid device */ bt_status_t (*)( bt_bdaddr_t *bd_addr)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** connect to hid device */
    bt_status_t (*${name})( bt_bdaddr_t *bd_addr)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " connect to hid device 
"
      end

      attribute 15556279 "disconnect"
	public explicit_type "/** dis-connect from hid device */ bt_status_t (*)( bt_bdaddr_t *bd_addr )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** dis-connect from hid device */
    bt_status_t (*${name})( bt_bdaddr_t *bd_addr )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " dis-connect from hid device 
"
      end

      attribute 15556407 "virtual_unplug"
	public explicit_type "/** Virtual UnPlug (VUP) the specified HID device */ bt_status_t (*)(bt_bdaddr_t *bd_addr)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Virtual UnPlug (VUP) the specified HID device */
    bt_status_t (*${name})(bt_bdaddr_t *bd_addr)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Virtual UnPlug (VUP) the specified HID device 
"
      end

      attribute 15556535 "set_info"
	public explicit_type "/** Set the HID device descriptor for the specified HID device. */ bt_status_t (*)(bt_bdaddr_t *bd_addr, bthh_hid_info_t hid_info )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Set the HID device descriptor for the specified HID device. */
    bt_status_t (*${name})(bt_bdaddr_t *bd_addr, bthh_hid_info_t hid_info )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Set the HID device descriptor for the specified HID device. 
"
      end

      attribute 15556663 "get_protocol"
	public explicit_type "/** Get the HID proto mode. */ bt_status_t (*) (bt_bdaddr_t *bd_addr, bthh_protocol_mode_t protocolMode)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Get the HID proto mode. */
    bt_status_t (*${name}) (bt_bdaddr_t *bd_addr, bthh_protocol_mode_t protocolMode)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Get the HID proto mode. 
"
      end

      attribute 15556791 "set_protocol"
	public explicit_type "/** Set the HID proto mode. */ bt_status_t (*)(bt_bdaddr_t *bd_addr, bthh_protocol_mode_t protocolMode)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Set the HID proto mode. */
    bt_status_t (*${name})(bt_bdaddr_t *bd_addr, bthh_protocol_mode_t protocolMode)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Set the HID proto mode. 
"
      end

      attribute 15556919 "get_report"
	public explicit_type "/** Send a GET_REPORT to HID device. */ bt_status_t (*)(bt_bdaddr_t *bd_addr, bthh_report_type_t reportType, uint8_t reportId, int bufferSize)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Send a GET_REPORT to HID device. */
    bt_status_t (*${name})(bt_bdaddr_t *bd_addr, bthh_report_type_t reportType, uint8_t reportId, int bufferSize)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Send a GET_REPORT to HID device. 
"
      end

      attribute 15557047 "set_report"
	public explicit_type "/** Send a SET_REPORT to HID device. */ bt_status_t (*)(bt_bdaddr_t *bd_addr, bthh_report_type_t reportType, char* report)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Send a SET_REPORT to HID device. */
    bt_status_t (*${name})(bt_bdaddr_t *bd_addr, bthh_report_type_t reportType, char* report)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Send a SET_REPORT to HID device. 
"
      end

      attribute 15557175 "send_data"
	public explicit_type "/** Send data to HID device. */ bt_status_t (*)(bt_bdaddr_t *bd_addr, char* data)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Send data to HID device. */
    bt_status_t (*${name})(bt_bdaddr_t *bd_addr, char* data)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Send data to HID device. 
"
      end

      attribute 15557303 "cleanup"
	public explicit_type "/** Closes the interface. */ void (*)( void )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
	/** Closes the interface. */
    void  (*${name})( void )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Closes the interface. 
"
      end
    end

    class 4336055 "bthl_app_reg_state_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " HL connection states "
      attribute 15557431 "BTHL_APP_REG_STATE_REG_SUCCESS"
	public type class_ref 4336055 // bthl_app_reg_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15557559 "BTHL_APP_REG_STATE_REG_FAILED"
	public type class_ref 4336055 // bthl_app_reg_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15557687 "BTHL_APP_REG_STATE_DEREG_SUCCESS"
	public type class_ref 4336055 // bthl_app_reg_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15557815 "BTHL_APP_REG_STATE_DEREG_FAILED"
	public type class_ref 4336055 // bthl_app_reg_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4336183 "bthl_channel_type_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15557943 "BTHL_CHANNEL_TYPE_RELIABLE"
	public type class_ref 4336183 // bthl_channel_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15558071 "BTHL_CHANNEL_TYPE_STREAMING"
	public type class_ref 4336183 // bthl_channel_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15558199 "BTHL_CHANNEL_TYPE_ANY"
	public type class_ref 4336183 // bthl_channel_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4336311 "bthl_channel_state_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " HL connection states "
      attribute 15558327 "BTHL_CONN_STATE_CONNECTING"
	public type class_ref 4336311 // bthl_channel_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15558455 "BTHL_CONN_STATE_CONNECTED"
	public type class_ref 4336311 // bthl_channel_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15558583 "BTHL_CONN_STATE_DISCONNECTING"
	public type class_ref 4336311 // bthl_channel_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15558711 "BTHL_CONN_STATE_DISCONNECTED"
	public type class_ref 4336311 // bthl_channel_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15558839 "BTHL_CONN_STATE_DESTROYED"
	public type class_ref 4336311 // bthl_channel_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4336439 "bthl_mdep_cfg_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15558967 "mdep_role"
	public explicit_type "bthl_mdep_role_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15559095 "data_type"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 8324919 // channel_type (<directional composition>)
	relation 8324919 *-->
	  a role_name "channel_type" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8324919 // channel_type (<directional composition>)
	  b parent class_ref 4336183 // bthl_channel_type_t
      end

      attribute 15559223 "mdep_description"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " MDEP description to be used in the SDP (optional); null terminated "
      end
    end

    class 4336567 "bthl_reg_param_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15559351 "application_name"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15559479 "provider_name"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " provider name to be used in the SDP (optional); null terminated "
      end

      attribute 15559607 "srv_name"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " service name to be used in the SDP (optional); null terminated"
      end

      attribute 15559735 "srv_desp"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " service description to be used in the SDP (optional); null terminated "
      end

      attribute 15559863 "number_of_mdeps"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 8325047 // mdep_cfg (<unidirectional association>)
	relation 8325047 --->
	  a role_name "mdep_cfg" public
	    comment " Dynamic array "
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8325047 // mdep_cfg (<unidirectional association>)
	  b parent class_ref 4336439 // bthl_mdep_cfg_t
      end
    end

    class 4336695 "bthl_app_reg_state_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(int app_id, bthl_app_reg_state_t state);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for application registration status.
 state will have one of the values from  bthl_app_reg_state_t
"
    end

    class 4336823 "bthl_channel_state_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(int app_id, bt_bdaddr_t *bd_addr, int mdep_cfg_index, int channel_id, bthl_channel_state_t state, int fd);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for channel connection state change.
 state will have one of the values from
 bthl_connection_state_t and fd (file descriptor)
"
    end

    class 4336951 "bthl_callbacks_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " BT-HL callback structure. "
      classrelation 8325303 // app_reg_state_cb (<directional composition>)
	relation 8325303 *-->
	  a role_name "app_reg_state_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8325303 // app_reg_state_cb (<directional composition>)
	  b parent class_ref 4336695 // bthl_app_reg_state_callback
      end

      classrelation 8325431 // channel_state_cb (<directional composition>)
	relation 8325431 *-->
	  a role_name "channel_state_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8325431 // channel_state_cb (<directional composition>)
	  b parent class_ref 4336823 // bthl_channel_state_callback
      end
    end

    class 4337079 "bthl_interface_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Represents the standard BT-HL interface. "
      attribute 15559991 "init"
	public explicit_type "/** * Register the Bthl callbacks */ bt_status_t (*)( bthl_callbacks_t* callbacks )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Register the Bthl callbacks
     */
    bt_status_t (*${name})( bthl_callbacks_t* callbacks )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Register the Bthl callbacks

"
      end

      attribute 15560119 "register_application"
	public explicit_type "/** Register HL application */ bt_status_t (*) ( bthl_reg_param_t *p_reg_param, int *app_id)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Register HL application */
    bt_status_t (*${name}) ( bthl_reg_param_t *p_reg_param, int *app_id)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Register HL application 
"
      end

      attribute 15560247 "unregister_application"
	public explicit_type "/** Unregister HL application */ bt_status_t (*) (int app_id)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Unregister HL application */
    bt_status_t (*${name}) (int app_id)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Unregister HL application 
"
      end

      attribute 15560375 "connect_channel"
	public explicit_type "/** connect channel */ bt_status_t (*)(int app_id, bt_bdaddr_t *bd_addr, int mdep_cfg_index, int *channel_id)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** connect channel */
    bt_status_t (*${name})(int app_id, bt_bdaddr_t *bd_addr, int mdep_cfg_index, int *channel_id)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " connect channel 
"
      end

      attribute 15560503 "destroy_channel"
	public explicit_type "/** destroy channel */ bt_status_t (*)(int channel_id)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** destroy channel */
    bt_status_t (*${name})(int channel_id)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " destroy channel 
"
      end

      attribute 15560631 "cleanup"
	public explicit_type "/** Close the Bthl callback **/ void (*)(void)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Close the  Bthl callback **/
    void (*${name})(void)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Close the  Bthl callback *
"
      end
    end

    class 4337207 "btmce_remote_mas_instances_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(bt_status_t status, bt_bdaddr_t *bd_addr,
                                                    int num_instances, btmce_mas_instance_t *instances);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " callback for get_remote_mas_instances "
    end

    class 4337335 "btmce_callbacks_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8325815 // remote_mas_instances_cb (<directional composition>)
	relation 8325815 *-->
	  a role_name "remote_mas_instances_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8325815 // remote_mas_instances_cb (<directional composition>)
	  b parent class_ref 4337207 // btmce_remote_mas_instances_callback
      end
    end

    class 4337463 "btmce_interface_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15560759 "init"
	public explicit_type "/** register BT MCE callbacks */ bt_status_t (*)(btmce_callbacks_t *callbacks)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** register BT MCE callbacks */
    bt_status_t (*${name})(btmce_callbacks_t *callbacks)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " register BT MCE callbacks 
"
      end

      attribute 15560887 "get_remote_mas_instances"
	public explicit_type "/** search for MAS instances on remote device */ bt_status_t (*)(bt_bdaddr_t *bd_addr)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** search for MAS instances on remote device */
    bt_status_t (*${name})(bt_bdaddr_t *bd_addr)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " search for MAS instances on remote device 
"
      end
    end

    class 4337591 "btpan_control_state_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15561015 "BTPAN_STATE_ENABLED"
	public type class_ref 4337591 // btpan_control_state_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15561143 "BTPAN_STATE_DISABLED"
	public type class_ref 4337591 // btpan_control_state_t
	init_value " 1
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4337719 "btpan_connection_state_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(btpan_connection_state_t state, bt_status_t error,
                                                const bt_bdaddr_t *bd_addr, int local_role, int remote_role);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Callback for pan connection state
"
    end

    class 4337847 "btpan_control_state_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(btpan_control_state_t state, int local_role,
                                            bt_status_t error, const char* ifname);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4337975 "btpan_callbacks_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8326199 // control_state_cb (<directional composition>)
	relation 8326199 *-->
	  a role_name "control_state_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8326199 // control_state_cb (<directional composition>)
	  b parent class_ref 4337847 // btpan_control_state_callback
      end

      classrelation 8326327 // connection_state_cb (<directional composition>)
	relation 8326327 *-->
	  a role_name "connection_state_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8326327 // connection_state_cb (<directional composition>)
	  b parent class_ref 4337719 // btpan_connection_state_callback
      end
    end

    class 4338103 "btpan_interface_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15561271 "init"
	public explicit_type "/** * Initialize the pan interface and register the btpan callbacks */ bt_status_t (*)(const btpan_callbacks_t* callbacks)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    /**
     * Initialize the pan interface and register the btpan callbacks
     */
    bt_status_t (*${name})(const btpan_callbacks_t* callbacks)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Initialize the pan interface and register the btpan callbacks

"
      end

      attribute 15561399 "enable"
	public explicit_type "/* * enable the pan service by specified role. The result state of * enabl will be returned by btpan_control_state_callback. when pan-nap is enabled, * the state of connecting panu device will be notified by btpan_connection_state_callback */ bt_status_t (*)(int local_role)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    /*
     * enable the pan service by specified role. The result state of
     * enabl will be returned by btpan_control_state_callback. when pan-nap is enabled,
     * the state of connecting panu device will be notified by btpan_connection_state_callback
     */
    bt_status_t (*${name})(int local_role)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "enable the pan service by specified role. The result state of
enabl will be returned by btpan_control_state_callback. when pan-nap is enabled,
the state of connecting panu device will be notified by btpan_connection_state_callback

"
      end

      attribute 15561527 "get_local_role"
	public explicit_type "/* * get current pan local role */ int (*)(void)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    /*
     * get current pan local role
     */
    int (*${name})(void)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "get current pan local role

"
      end

      attribute 15561655 "connect"
	public explicit_type "/** * start bluetooth pan connection to the remote device by specified pan role. The result state will be * returned by btpan_connection_state_callback */ bt_status_t (*)(const bt_bdaddr_t *bd_addr, int local_role, int remote_role)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    /**
     * start bluetooth pan connection to the remote device by specified pan role. The result state will be
     * returned by btpan_connection_state_callback
     */
    bt_status_t (*${name})(const bt_bdaddr_t *bd_addr, int local_role, int remote_role)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "start bluetooth pan connection to the remote device by specified pan role. The result state will be
returned by btpan_connection_state_callback

"
      end

      attribute 15561783 "disconnect"
	public explicit_type "/** * stop bluetooth pan connection. The result state will be returned by btpan_connection_state_callback */ bt_status_t (*)(const bt_bdaddr_t *bd_addr)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    /**
     * stop bluetooth pan connection. The result state will be returned by btpan_connection_state_callback
     */
    bt_status_t (*${name})(const bt_bdaddr_t *bd_addr)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "stop bluetooth pan connection. The result state will be returned by btpan_connection_state_callback

"
      end

      attribute 15561911 "cleanup"
	public explicit_type "/** * Cleanup the pan interface */ void (*)(void)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Cleanup the pan interface
     */
    void (*${name})(void)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Cleanup the pan interface

"
      end
    end

    class 4338231 "btrc_remote_features_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15562039 "BTRC_FEAT_NONE"
	public type class_ref 4338231 // btrc_remote_features_t
	init_value " 0x00"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15562167 "BTRC_FEAT_METADATA"
	public type class_ref 4338231 // btrc_remote_features_t
	init_value " 0x01"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15562295 "BTRC_FEAT_ABSOLUTE_VOLUME"
	public type class_ref 4338231 // btrc_remote_features_t
	init_value " 0x02"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15562423 "BTRC_FEAT_BROWSE"
	public type class_ref 4338231 // btrc_remote_features_t
	init_value " 0x04"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4338359 "btrc_play_status_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " AVRCP 1.0 
 AVRCP 1.3 
 Supports TG role and volume sync 
 AVRCP 1.4 and up, with Browsing support "
      attribute 15562551 "BTRC_PLAYSTATE_STOPPED"
	public type class_ref 4338359 // btrc_play_status_t
	init_value " 0x00"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15562679 "BTRC_PLAYSTATE_PLAYING"
	public type class_ref 4338359 // btrc_play_status_t
	init_value " 0x01"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15562807 "BTRC_PLAYSTATE_PAUSED"
	public type class_ref 4338359 // btrc_play_status_t
	init_value " 0x02"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15562935 "BTRC_PLAYSTATE_FWD_SEEK"
	public type class_ref 4338359 // btrc_play_status_t
	init_value " 0x03"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15563063 "BTRC_PLAYSTATE_REV_SEEK"
	public type class_ref 4338359 // btrc_play_status_t
	init_value " 0x04"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15563191 "BTRC_PLAYSTATE_ERROR"
	public type class_ref 4338359 // btrc_play_status_t
	init_value " 0xFF"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4338487 "btrc_event_id_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Stopped 
 Playing 
 Paused  
 Fwd Seek
 Rev Seek
 Error   "
      attribute 15563319 "BTRC_EVT_PLAY_STATUS_CHANGED"
	public type class_ref 4338487 // btrc_event_id_t
	init_value " 0x01"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15563447 "BTRC_EVT_TRACK_CHANGE"
	public type class_ref 4338487 // btrc_event_id_t
	init_value " 0x02"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15563575 "BTRC_EVT_TRACK_REACHED_END"
	public type class_ref 4338487 // btrc_event_id_t
	init_value " 0x03"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15563703 "BTRC_EVT_TRACK_REACHED_START"
	public type class_ref 4338487 // btrc_event_id_t
	init_value " 0x04"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15563831 "BTRC_EVT_PLAY_POS_CHANGED"
	public type class_ref 4338487 // btrc_event_id_t
	init_value " 0x05"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15563959 "BTRC_EVT_APP_SETTINGS_CHANGED"
	public type class_ref 4338487 // btrc_event_id_t
	init_value " 0x08"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4338615 "btrc_notification_type_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15564087 "BTRC_NOTIFICATION_TYPE_INTERIM"
	public type class_ref 4338615 // btrc_notification_type_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15564215 "BTRC_NOTIFICATION_TYPE_CHANGED"
	public type class_ref 4338615 // btrc_notification_type_t
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4338743 "btrc_player_attr_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15564343 "BTRC_PLAYER_ATTR_EQUALIZER"
	public type class_ref 4338743 // btrc_player_attr_t
	init_value " 0x01"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15564471 "BTRC_PLAYER_ATTR_REPEAT"
	public type class_ref 4338743 // btrc_player_attr_t
	init_value " 0x02"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15564599 "BTRC_PLAYER_ATTR_SHUFFLE"
	public type class_ref 4338743 // btrc_player_attr_t
	init_value " 0x03"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15564727 "BTRC_PLAYER_ATTR_SCAN"
	public type class_ref 4338743 // btrc_player_attr_t
	init_value " 0x04"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4338871 "btrc_media_attr_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15564855 "BTRC_MEDIA_ATTR_TITLE"
	public type class_ref 4338871 // btrc_media_attr_t
	init_value " 0x01"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15564983 "BTRC_MEDIA_ATTR_ARTIST"
	public type class_ref 4338871 // btrc_media_attr_t
	init_value " 0x02"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15565111 "BTRC_MEDIA_ATTR_ALBUM"
	public type class_ref 4338871 // btrc_media_attr_t
	init_value " 0x03"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15565239 "BTRC_MEDIA_ATTR_TRACK_NUM"
	public type class_ref 4338871 // btrc_media_attr_t
	init_value " 0x04"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15565367 "BTRC_MEDIA_ATTR_NUM_TRACKS"
	public type class_ref 4338871 // btrc_media_attr_t
	init_value " 0x05"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15565495 "BTRC_MEDIA_ATTR_GENRE"
	public type class_ref 4338871 // btrc_media_attr_t
	init_value " 0x06"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15565623 "BTRC_MEDIA_ATTR_PLAYING_TIME"
	public type class_ref 4338871 // btrc_media_attr_t
	init_value " 0x07"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4338999 "btrc_player_repeat_val_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15565751 "BTRC_PLAYER_VAL_OFF_REPEAT"
	public type class_ref 4338999 // btrc_player_repeat_val_t
	init_value " 0x01"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15565879 "BTRC_PLAYER_VAL_SINGLE_REPEAT"
	public type class_ref 4338999 // btrc_player_repeat_val_t
	init_value " 0x02"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15566007 "BTRC_PLAYER_VAL_ALL_REPEAT"
	public type class_ref 4338999 // btrc_player_repeat_val_t
	init_value " 0x03"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15566135 "BTRC_PLAYER_VAL_GROUP_REPEAT"
	public type class_ref 4338999 // btrc_player_repeat_val_t
	init_value " 0x04
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4339127 "btrc_player_shuffle_val_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15566263 "BTRC_PLAYER_VAL_OFF_SHUFFLE"
	public type class_ref 4339127 // btrc_player_shuffle_val_t
	init_value " 0x01"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15566391 "BTRC_PLAYER_VAL_ALL_SHUFFLE"
	public type class_ref 4339127 // btrc_player_shuffle_val_t
	init_value " 0x02"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15566519 "BTRC_PLAYER_VAL_GROUP_SHUFFLE"
	public type class_ref 4339127 // btrc_player_shuffle_val_t
	init_value " 0x03
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4339255 "btrc_status_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15566647 "BTRC_STS_BAD_CMD"
	public type class_ref 4339255 // btrc_status_t
	init_value " 0x00"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15566775 "BTRC_STS_BAD_PARAM"
	public type class_ref 4339255 // btrc_status_t
	init_value " 0x01"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15566903 "BTRC_STS_NOT_FOUND"
	public type class_ref 4339255 // btrc_status_t
	init_value " 0x02"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15567031 "BTRC_STS_INTERNAL_ERR"
	public type class_ref 4339255 // btrc_status_t
	init_value " 0x03"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15567159 "BTRC_STS_NO_ERROR"
	public type class_ref 4339255 // btrc_status_t
	init_value " 0x04  /* Operation Success */
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4339383 "btrc_player_settings_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Invalid command 
 Invalid parameter 
 Specified parameter is wrong or not found 
 Internal Error 
 Operation Success "
    end

    class 4339511 "btrc_player_app_ext_attr_val_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4339639 "btrc_player_app_ext_attr_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8328119 // ext_attr_val (<directional composition>)
	relation 8328119 *-->
	  a role_name "ext_attr_val" multiplicity "[BTRC_MAX_APP_ATTR_SIZE]" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8328119 // ext_attr_val (<directional composition>)
	  b parent class_ref 4339511 // btrc_player_app_ext_attr_val_t
      end
    end

    class 4339767 "btrc_player_app_attr_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4339895 "btrc_getfolderitem_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4340023 "btrc_register_notification_t"
      visibility package stereotype "union"
      cpp_decl "${comment}${template}union ${name} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8329271 // play_status (<directional composition>)
	relation 8329271 *-->
	  a role_name "play_status" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8329271 // play_status (<directional composition>)
	  b parent class_ref 4338359 // btrc_play_status_t
      end

      attribute 15567287 "track"
	public explicit_type "btrc_uid_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " queue position in NowPlaying "
      end

      classrelation 8329527 // player_setting (<directional composition>)
	relation 8329527 *-->
	  a role_name "player_setting" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8329527 // player_setting (<directional composition>)
	  b parent class_ref 4339383 // btrc_player_settings_t
      end
    end

    class 4340151 "btrc_player_setting_text_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4340279 "btrc_element_attr_val_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4340407 "btrc_remote_features_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bt_bdaddr_t *bd_addr,
                                                      btrc_remote_features_t features);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for the controller's supported feautres "
    end

    class 4340535 "btrc_get_play_status_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})();
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for play status request "
    end

    class 4340663 "btrc_list_player_app_attr_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})();
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for list player application attributes (Shuffle, Repeat,...) "
    end

    class 4340791 "btrc_list_player_app_values_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(btrc_player_attr_t attr_id);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for list player application attributes (Shuffle, Repeat,...) "
    end

    class 4340919 "btrc_get_player_app_value_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name}) (uint8_t num_attr, btrc_player_attr_t *p_attrs);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for getting the current player application settings value
*  num_attr: specifies the number of attribute ids contained in p_attrs
"
    end

    class 4341047 "btrc_get_player_app_attrs_text_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name}) (uint8_t num_attr, btrc_player_attr_t *p_attrs);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for getting the player application settings attributes' text
*  num_attr: specifies the number of attribute ids contained in p_attrs
"
    end

    class 4341175 "btrc_get_player_app_values_text_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name}) (uint8_t attr_id, uint8_t num_val, uint8_t *p_vals);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for getting the player application settings values' text
*  num_attr: specifies the number of value ids contained in p_vals
"
    end

    class 4341303 "btrc_set_player_app_value_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name}) (btrc_player_settings_t *p_vals);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for setting the player application settings values "
    end

    class 4341431 "btrc_get_element_attr_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name}) (uint8_t num_attr, btrc_media_attr_t *p_attrs);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback to fetch the get element attributes of the current song
*  num_attr: specifies the number of attributes requested in p_attrs
"
    end

    class 4341559 "btrc_register_notification_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name}) (btrc_event_id_t event_id, uint32_t param);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for register notification (Play state change/track change/...)
*  param: Is only valid if event_id is BTRC_EVT_PLAY_POS_CHANGED
"
    end

    class 4341687 "btrc_volume_change_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name}) (uint8_t volume, uint8_t ctype);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " AVRCP 1.4 Enhancements 
 Callback for volume change on CT
*  volume: Current volume setting on the CT (0-127)
"
    end

    class 4341815 "btrc_passthrough_cmd_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name}) (int id, int key_state);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for passthrough commands "
    end

    class 4341943 "btrc_callbacks_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " BT-RC Target callback structure. "
      classrelation 8330295 // remote_features_cb (<directional composition>)
	relation 8330295 *-->
	  a role_name "remote_features_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8330295 // remote_features_cb (<directional composition>)
	  b parent class_ref 4340407 // btrc_remote_features_callback
      end

      classrelation 8330423 // get_play_status_cb (<directional composition>)
	relation 8330423 *-->
	  a role_name "get_play_status_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8330423 // get_play_status_cb (<directional composition>)
	  b parent class_ref 4340535 // btrc_get_play_status_callback
      end

      classrelation 8330551 // list_player_app_attr_cb (<directional composition>)
	relation 8330551 *-->
	  a role_name "list_player_app_attr_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8330551 // list_player_app_attr_cb (<directional composition>)
	  b parent class_ref 4340663 // btrc_list_player_app_attr_callback
      end

      classrelation 8330679 // list_player_app_values_cb (<directional composition>)
	relation 8330679 *-->
	  a role_name "list_player_app_values_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8330679 // list_player_app_values_cb (<directional composition>)
	  b parent class_ref 4340791 // btrc_list_player_app_values_callback
      end

      classrelation 8330807 // get_player_app_value_cb (<directional composition>)
	relation 8330807 *-->
	  a role_name "get_player_app_value_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8330807 // get_player_app_value_cb (<directional composition>)
	  b parent class_ref 4340919 // btrc_get_player_app_value_callback
      end

      classrelation 8330935 // get_player_app_attrs_text_cb (<directional composition>)
	relation 8330935 *-->
	  a role_name "get_player_app_attrs_text_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8330935 // get_player_app_attrs_text_cb (<directional composition>)
	  b parent class_ref 4341047 // btrc_get_player_app_attrs_text_callback
      end

      classrelation 8331063 // get_player_app_values_text_cb (<directional composition>)
	relation 8331063 *-->
	  a role_name "get_player_app_values_text_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8331063 // get_player_app_values_text_cb (<directional composition>)
	  b parent class_ref 4341175 // btrc_get_player_app_values_text_callback
      end

      classrelation 8331191 // set_player_app_value_cb (<directional composition>)
	relation 8331191 *-->
	  a role_name "set_player_app_value_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8331191 // set_player_app_value_cb (<directional composition>)
	  b parent class_ref 4341303 // btrc_set_player_app_value_callback
      end

      classrelation 8331319 // get_element_attr_cb (<directional composition>)
	relation 8331319 *-->
	  a role_name "get_element_attr_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8331319 // get_element_attr_cb (<directional composition>)
	  b parent class_ref 4341431 // btrc_get_element_attr_callback
      end

      classrelation 8331447 // register_notification_cb (<directional composition>)
	relation 8331447 *-->
	  a role_name "register_notification_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8331447 // register_notification_cb (<directional composition>)
	  b parent class_ref 4341559 // btrc_register_notification_callback
      end

      classrelation 8331575 // volume_change_cb (<directional composition>)
	relation 8331575 *-->
	  a role_name "volume_change_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8331575 // volume_change_cb (<directional composition>)
	  b parent class_ref 4341687 // btrc_volume_change_callback
      end

      classrelation 8331703 // passthrough_cmd_cb (<directional composition>)
	relation 8331703 *-->
	  a role_name "passthrough_cmd_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8331703 // passthrough_cmd_cb (<directional composition>)
	  b parent class_ref 4341815 // btrc_passthrough_cmd_callback
      end
    end

    class 4342071 "btrc_interface_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Represents the standard BT-RC AVRCP Target interface. "
      attribute 15567415 "init"
	public explicit_type "/** * Register the BtRc callbacks */ bt_status_t (*)( btrc_callbacks_t* callbacks )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    /**
     * Register the BtRc callbacks
     */
    bt_status_t (*${name})( btrc_callbacks_t* callbacks )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Register the BtRc callbacks

"
      end

      attribute 15567543 "get_play_status_rsp"
	public explicit_type "/** Respose to GetPlayStatus request. Contains the current ** 1. Play status ** 2. Song duration/length ** 3. Song position */ bt_status_t (*)( btrc_play_status_t play_status, uint32_t song_len, uint32_t song_pos)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Respose to GetPlayStatus request. Contains the current
    **  1. Play status
    **  2. Song duration/length
    **  3. Song position
    */
    bt_status_t (*${name})( btrc_play_status_t play_status, uint32_t song_len, uint32_t song_pos)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Respose to GetPlayStatus request. Contains the current
*  1. Play status
*  2. Song duration/length
*  3. Song position

"
      end

      attribute 15567671 "list_player_app_attr_rsp"
	public explicit_type "/** Lists the support player application attributes (Shuffle/Repeat/...) ** num_attr: Specifies the number of attributes contained in the pointer p_attrs */ bt_status_t (*)( int num_attr, btrc_player_attr_t *p_attrs)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Lists the support player application attributes (Shuffle/Repeat/...)
    **  num_attr: Specifies the number of attributes contained in the pointer p_attrs
    */
    bt_status_t (*${name})( int num_attr, btrc_player_attr_t *p_attrs)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Lists the support player application attributes (Shuffle/Repeat/...)
*  num_attr: Specifies the number of attributes contained in the pointer p_attrs

"
      end

      attribute 15567799 "list_player_app_value_rsp"
	public explicit_type "/** Lists the support player application attributes (Shuffle Off/On/Group) ** num_val: Specifies the number of values contained in the pointer p_vals */ bt_status_t (*)( int num_val, uint8_t *p_vals)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Lists the support player application attributes (Shuffle Off/On/Group)
    **  num_val: Specifies the number of values contained in the pointer p_vals
    */
    bt_status_t (*${name})( int num_val, uint8_t *p_vals)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Lists the support player application attributes (Shuffle Off/On/Group)
*  num_val: Specifies the number of values contained in the pointer p_vals

"
      end

      attribute 15567927 "get_player_app_value_rsp"
	public explicit_type "/** Returns the current application attribute values for each of the specified attr_id */ bt_status_t (*)( btrc_player_settings_t *p_vals)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Returns the current application attribute values for each of the specified attr_id */
    bt_status_t (*${name})( btrc_player_settings_t *p_vals)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Returns the current application attribute values for each of the specified attr_id 
"
      end

      attribute 15568055 "get_player_app_attr_text_rsp"
	public explicit_type "/** Returns the application attributes text (\"Shuffle\"/\"Repeat\"/...) ** num_attr: Specifies the number of attributes' text contained in the pointer p_attrs */ bt_status_t (*)( int num_attr, btrc_player_setting_text_t *p_attrs)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Returns the application attributes text (\"Shuffle\"/\"Repeat\"/...)
    **  num_attr: Specifies the number of attributes' text contained in the pointer p_attrs
    */
    bt_status_t (*${name})( int num_attr, btrc_player_setting_text_t *p_attrs)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Returns the application attributes text (\"Shuffle\"/\"Repeat\"/...)
*  num_attr: Specifies the number of attributes' text contained in the pointer p_attrs

"
      end

      attribute 15568183 "get_player_app_value_text_rsp"
	public explicit_type "/** Returns the application attributes text (\"Shuffle\"/\"Repeat\"/...) ** num_attr: Specifies the number of attribute values' text contained in the pointer p_vals */ bt_status_t (*)( int num_val, btrc_player_setting_text_t *p_vals)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Returns the application attributes text (\"Shuffle\"/\"Repeat\"/...)
    **  num_attr: Specifies the number of attribute values' text contained in the pointer p_vals
    */
    bt_status_t (*${name})( int num_val, btrc_player_setting_text_t *p_vals)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Returns the application attributes text (\"Shuffle\"/\"Repeat\"/...)
*  num_attr: Specifies the number of attribute values' text contained in the pointer p_vals

"
      end

      attribute 15568311 "get_element_attr_rsp"
	public explicit_type "/** Returns the current songs' element attributes text (\"Title\"/\"Album\"/\"Artist\") ** num_attr: Specifies the number of attributes' text contained in the pointer p_attrs */ bt_status_t (*)( uint8_t num_attr, btrc_element_attr_val_t *p_attrs)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Returns the current songs' element attributes text (\"Title\"/\"Album\"/\"Artist\")
    **  num_attr: Specifies the number of attributes' text contained in the pointer p_attrs
    */
    bt_status_t (*${name})( uint8_t num_attr, btrc_element_attr_val_t *p_attrs)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Returns the current songs' element attributes text (\"Title\"/\"Album\"/\"Artist\")
*  num_attr: Specifies the number of attributes' text contained in the pointer p_attrs

"
      end

      attribute 15568439 "set_player_app_value_rsp"
	public explicit_type "/** Response to set player attribute request (\"Shuffle\"/\"Repeat\") ** rsp_status: Status of setting the player attributes for the current media player */ bt_status_t (*)(btrc_status_t rsp_status)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Response to set player attribute request (\"Shuffle\"/\"Repeat\")
    **  rsp_status: Status of setting the player attributes for the current media player
    */
    bt_status_t (*${name})(btrc_status_t rsp_status)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Response to set player attribute request (\"Shuffle\"/\"Repeat\")
*  rsp_status: Status of setting the player attributes for the current media player

"
      end

      attribute 15568567 "register_notification_rsp"
	public explicit_type "/* Response to the register notification request (Play state change/track change/...). ** event_id: Refers to the event_id this notification change corresponds too ** type: Response type - interim/changed ** p_params: Based on the event_id, this parameter should be populated */ bt_status_t (*)(btrc_event_id_t event_id, btrc_notification_type_t type, btrc_register_notification_t *p_param)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* Response to the register notification request (Play state change/track change/...).
    ** event_id: Refers to the event_id this notification change corresponds too
    ** type: Response type - interim/changed
    ** p_params: Based on the event_id, this parameter should be populated
    */
    bt_status_t (*${name})(btrc_event_id_t event_id,
                                             btrc_notification_type_t type,
                                             btrc_register_notification_t *p_param)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Response to the register notification request (Play state change/track change/...).
* event_id: Refers to the event_id this notification change corresponds too
* type: Response type - interim/changed
* p_params: Based on the event_id, this parameter should be populated

"
      end

      attribute 15568695 "set_volume"
	public explicit_type "/* AVRCP 1.4 enhancements */ /**Send current volume setting to remote side. Support limited to SetAbsoluteVolume ** This can be enhanced to support Relative Volume (AVRCP 1.0). ** With RelateVolume, we will send VOLUME_UP/VOLUME_DOWN opposed to absolute volume level ** volume: Should be in the range 0-127. bit7 is reseved and cannot be set */ bt_status_t (*)(uint8_t volume)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* AVRCP 1.4 enhancements */

    /**Send current volume setting to remote side. Support limited to SetAbsoluteVolume
    ** This can be enhanced to support Relative Volume (AVRCP 1.0).
    ** With RelateVolume, we will send VOLUME_UP/VOLUME_DOWN opposed to absolute volume level
    ** volume: Should be in the range 0-127. bit7 is reseved and cannot be set
    */
    bt_status_t (*${name})(uint8_t volume)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " AVRCP 1.4 enhancements 
Send current volume setting to remote side. Support limited to SetAbsoluteVolume
* This can be enhanced to support Relative Volume (AVRCP 1.0).
* With RelateVolume, we will send VOLUME_UP/VOLUME_DOWN opposed to absolute volume level
* volume: Should be in the range 0-127. bit7 is reseved and cannot be set

"
      end

      attribute 15568823 "cleanup"
	public explicit_type "/** Closes the interface. */ void (*)( void )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Closes the interface. */
    void  (*${name})( void )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Closes the interface. 
"
      end
    end

    class 4342199 "btrc_passthrough_rsp_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name}) (int id, int key_state);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4342327 "btrc_groupnavigation_rsp_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name}) (int id, int key_state);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4342455 "btrc_connection_state_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name}) (bool state, bt_bdaddr_t *bd_addr);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4342583 "btrc_ctrl_getrcfeatures_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name}) (bt_bdaddr_t *bd_addr, int features);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4342711 "btrc_ctrl_setabsvol_cmd_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name}) (bt_bdaddr_t *bd_addr, uint8_t abs_vol, uint8_t label);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4342839 "btrc_ctrl_registernotification_abs_vol_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name}) (bt_bdaddr_t *bd_addr, uint8_t label);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4342967 "btrc_ctrl_setplayerapplicationsetting_rsp_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name}) (bt_bdaddr_t *bd_addr,
                                                                          uint8_t accepted);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4343095 "btrc_ctrl_playerapplicationsetting_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bt_bdaddr_t *bd_addr,
                                                                 uint8_t num_attr,
                                                                 btrc_player_app_attr_t *app_attrs,
                                                                 uint8_t num_ext_attr,
                                                                 btrc_player_app_ext_attr_t *ext_attrs);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4343223 "btrc_ctrl_playerapplicationsetting_changed_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bt_bdaddr_t *bd_addr,
                                                                          btrc_player_settings_t *p_vals);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4343351 "btrc_ctrl_track_changed_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bt_bdaddr_t *bd_addr, uint8_t num_attr,
                                                     btrc_element_attr_val_t *p_attrs);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4343479 "btrc_ctrl_play_position_changed_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bt_bdaddr_t *bd_addr,
                                                              uint32_t song_len, uint32_t song_pos);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4343607 "btrc_ctrl_play_status_changed_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bt_bdaddr_t *bd_addr,
                                                            btrc_play_status_t play_status);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4343735 "btrc_ctrl_callbacks_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " BT-RC Controller callback structure. "
      classrelation 8332087 // passthrough_rsp_cb (<directional composition>)
	relation 8332087 *-->
	  a role_name "passthrough_rsp_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8332087 // passthrough_rsp_cb (<directional composition>)
	  b parent class_ref 4342199 // btrc_passthrough_rsp_callback
      end

      classrelation 8332215 // groupnavigation_rsp_cb (<directional composition>)
	relation 8332215 *-->
	  a role_name "groupnavigation_rsp_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8332215 // groupnavigation_rsp_cb (<directional composition>)
	  b parent class_ref 4342327 // btrc_groupnavigation_rsp_callback
      end

      classrelation 8332343 // connection_state_cb (<directional composition>)
	relation 8332343 *-->
	  a role_name "connection_state_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8332343 // connection_state_cb (<directional composition>)
	  b parent class_ref 4342455 // btrc_connection_state_callback
      end

      classrelation 8332471 // getrcfeatures_cb (<directional composition>)
	relation 8332471 *-->
	  a role_name "getrcfeatures_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8332471 // getrcfeatures_cb (<directional composition>)
	  b parent class_ref 4342583 // btrc_ctrl_getrcfeatures_callback
      end

      classrelation 8332599 // setplayerappsetting_rsp_cb (<directional composition>)
	relation 8332599 *-->
	  a role_name "setplayerappsetting_rsp_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8332599 // setplayerappsetting_rsp_cb (<directional composition>)
	  b parent class_ref 4342967 // btrc_ctrl_setplayerapplicationsetting_rsp_callback
      end

      classrelation 8332727 // playerapplicationsetting_cb (<directional composition>)
	relation 8332727 *-->
	  a role_name "playerapplicationsetting_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8332727 // playerapplicationsetting_cb (<directional composition>)
	  b parent class_ref 4343095 // btrc_ctrl_playerapplicationsetting_callback
      end

      classrelation 8332855 // playerapplicationsetting_changed_cb (<directional composition>)
	relation 8332855 *-->
	  a role_name "playerapplicationsetting_changed_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8332855 // playerapplicationsetting_changed_cb (<directional composition>)
	  b parent class_ref 4343223 // btrc_ctrl_playerapplicationsetting_changed_callback
      end

      classrelation 8332983 // setabsvol_cmd_cb (<directional composition>)
	relation 8332983 *-->
	  a role_name "setabsvol_cmd_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8332983 // setabsvol_cmd_cb (<directional composition>)
	  b parent class_ref 4342711 // btrc_ctrl_setabsvol_cmd_callback
      end

      classrelation 8333111 // registernotification_absvol_cb (<directional composition>)
	relation 8333111 *-->
	  a role_name "registernotification_absvol_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8333111 // registernotification_absvol_cb (<directional composition>)
	  b parent class_ref 4342839 // btrc_ctrl_registernotification_abs_vol_callback
      end

      classrelation 8333239 // track_changed_cb (<directional composition>)
	relation 8333239 *-->
	  a role_name "track_changed_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8333239 // track_changed_cb (<directional composition>)
	  b parent class_ref 4343351 // btrc_ctrl_track_changed_callback
      end

      classrelation 8333367 // play_position_changed_cb (<directional composition>)
	relation 8333367 *-->
	  a role_name "play_position_changed_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8333367 // play_position_changed_cb (<directional composition>)
	  b parent class_ref 4343479 // btrc_ctrl_play_position_changed_callback
      end

      classrelation 8333495 // play_status_changed_cb (<directional composition>)
	relation 8333495 *-->
	  a role_name "play_status_changed_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8333495 // play_status_changed_cb (<directional composition>)
	  b parent class_ref 4343607 // btrc_ctrl_play_status_changed_callback
      end
    end

    class 4343863 "btrc_ctrl_interface_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Represents the standard BT-RC AVRCP Controller interface. "
      attribute 15568951 "init"
	public explicit_type "/** * Register the BtRc callbacks */ bt_status_t (*)( btrc_ctrl_callbacks_t* callbacks )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    /**
     * Register the BtRc callbacks
     */
    bt_status_t (*${name})( btrc_ctrl_callbacks_t* callbacks )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Register the BtRc callbacks

"
      end

      attribute 15569079 "send_pass_through_cmd"
	public explicit_type "/** send pass through command to target */ bt_status_t (*) (bt_bdaddr_t *bd_addr, uint8_t key_code, uint8_t key_state )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** send pass through command to target */
    bt_status_t (*${name}) (bt_bdaddr_t *bd_addr, uint8_t key_code,
            uint8_t key_state )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " send pass through command to target 
"
      end

      attribute 15569207 "send_group_navigation_cmd"
	public explicit_type "/** send group navigation command to target */ bt_status_t (*) (bt_bdaddr_t *bd_addr, uint8_t key_code, uint8_t key_state )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** send group navigation command to target */
    bt_status_t (*${name}) (bt_bdaddr_t *bd_addr, uint8_t key_code,
            uint8_t key_state )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " send group navigation command to target 
"
      end

      attribute 15569335 "set_player_app_setting_cmd"
	public explicit_type "/** send command to set player applicaiton setting attributes to target */ bt_status_t (*) (bt_bdaddr_t *bd_addr, uint8_t num_attrib, uint8_t* attrib_ids, uint8_t* attrib_vals)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** send command to set player applicaiton setting attributes to target */
    bt_status_t (*${name}) (bt_bdaddr_t *bd_addr, uint8_t num_attrib,
            uint8_t* attrib_ids, uint8_t* attrib_vals)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " send command to set player applicaiton setting attributes to target 
"
      end

      attribute 15569463 "set_volume_rsp"
	public explicit_type "/** send rsp to set_abs_vol received from target */ bt_status_t (*) (bt_bdaddr_t *bd_addr, uint8_t abs_vol, uint8_t label)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** send rsp to set_abs_vol received from target */
    bt_status_t (*${name}) (bt_bdaddr_t *bd_addr, uint8_t abs_vol, uint8_t label)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " send rsp to set_abs_vol received from target 
"
      end

      attribute 15569591 "register_abs_vol_rsp"
	public explicit_type "/** send notificaiton rsp for abs vol to target */ bt_status_t (*) (bt_bdaddr_t *bd_addr, btrc_notification_type_t rsp_type, uint8_t abs_vol, uint8_t label)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** send notificaiton rsp for abs vol to target */
    bt_status_t (*${name}) (bt_bdaddr_t *bd_addr, btrc_notification_type_t rsp_type,
            uint8_t abs_vol, uint8_t label)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " send notificaiton rsp for abs vol to target 
"
      end

      attribute 15569719 "cleanup"
	public explicit_type "/** Closes the interface. */ void (*)( void )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Closes the interface. */
    void  (*${name})( void )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Closes the interface. 
"
      end
    end

    class 4343991 "_bluetooth_sdp_hdr"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "These events are handled by the state machine

 Used to carry raw SDP search data for unknown UUIDs
 Message Access Profile - Server
 Message Access Profile - Client (Notification Server)
 Phone Book Profile - Server
 Phone Book Profile - Client
 Object Push Profile
 SIM Access Profile"
      attribute 15569847 "type"
	public explicit_type "bluetooth_sdp_types"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 8333751 // uuid (<directional composition>)
	relation 8333751 *-->
	  a role_name "uuid" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8333751 // uuid (<directional composition>)
	  b parent class_ref 4311991 // bt_uuid_t
      end

      attribute 15569975 "service_name"
	public explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

    end

    class 4344119 "bluetooth_sdp_hdr"
      visibility package stereotype "typedef" base_type class_ref 4343991 // _bluetooth_sdp_hdr
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4344247 "_bluetooth_sdp_hdr_overlay"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Some signals need additional pointers, hence we introduce a
generic way to handle these pointers.
"
      attribute 15570103 "type"
	public explicit_type "bluetooth_sdp_types"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 8334391 // uuid (<directional composition>)
	relation 8334391 *-->
	  a role_name "uuid" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8334391 // uuid (<directional composition>)
	  b parent class_ref 4311991 // bt_uuid_t
      end

      attribute 15570231 "service_name"
	public explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15570359 "user1_ptr_len"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " User pointers, only used for some signals - see bluetooth_sdp_ops_record
"
      end

      attribute 15570487 "user2_ptr_len"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

    end

    class 4344375 "bluetooth_sdp_hdr_overlay"
      visibility package stereotype "typedef" base_type class_ref 4344247 // _bluetooth_sdp_hdr_overlay
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4344503 "_bluetooth_sdp_mas_record"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8335287 // hdr (<directional composition>)
	relation 8335287 *-->
	  a role_name "hdr" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8335287 // hdr (<directional composition>)
	  b parent class_ref 4344375 // bluetooth_sdp_hdr_overlay
      end

    end

    class 4344631 "bluetooth_sdp_mas_record"
      visibility package stereotype "typedef" base_type class_ref 4344503 // _bluetooth_sdp_mas_record
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4344759 "_bluetooth_sdp_mns_record"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8335799 // hdr (<directional composition>)
	relation 8335799 *-->
	  a role_name "hdr" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8335799 // hdr (<directional composition>)
	  b parent class_ref 4344375 // bluetooth_sdp_hdr_overlay
      end

    end

    class 4344887 "bluetooth_sdp_mns_record"
      visibility package stereotype "typedef" base_type class_ref 4344759 // _bluetooth_sdp_mns_record
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4345015 "_bluetooth_sdp_pse_record"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8336055 // hdr (<directional composition>)
	relation 8336055 *-->
	  a role_name "hdr" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8336055 // hdr (<directional composition>)
	  b parent class_ref 4344375 // bluetooth_sdp_hdr_overlay
      end

    end

    class 4345143 "bluetooth_sdp_pse_record"
      visibility package stereotype "typedef" base_type class_ref 4345015 // _bluetooth_sdp_pse_record
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4345271 "_bluetooth_sdp_pce_record"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8336439 // hdr (<directional composition>)
	relation 8336439 *-->
	  a role_name "hdr" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8336439 // hdr (<directional composition>)
	  b parent class_ref 4344375 // bluetooth_sdp_hdr_overlay
      end
    end

    class 4345399 "bluetooth_sdp_pce_record"
      visibility package stereotype "typedef" base_type class_ref 4345271 // _bluetooth_sdp_pce_record
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4345527 "_bluetooth_sdp_ops_record"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8336567 // hdr (<directional composition>)
	relation 8336567 *-->
	  a role_name "hdr" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8336567 // hdr (<directional composition>)
	  b parent class_ref 4344375 // bluetooth_sdp_hdr_overlay
      end

      attribute 15570615 "supported_formats_list_len"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

    end

    class 4345655 "bluetooth_sdp_ops_record"
      visibility package stereotype "typedef" base_type class_ref 4345527 // _bluetooth_sdp_ops_record
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4345783 "_bluetooth_sdp_sap_record"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8336823 // hdr (<directional composition>)
	relation 8336823 *-->
	  a role_name "hdr" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8336823 // hdr (<directional composition>)
	  b parent class_ref 4344375 // bluetooth_sdp_hdr_overlay
      end
    end

    class 4345911 "bluetooth_sdp_sap_record"
      visibility package stereotype "typedef" base_type class_ref 4345783 // _bluetooth_sdp_sap_record
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4346039 "bluetooth_sdp_record"
      visibility package stereotype "union"
      cpp_decl "${comment}${template}union ${name} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8336951 // hdr (<directional composition>)
	relation 8336951 *-->
	  a role_name "hdr" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8336951 // hdr (<directional composition>)
	  b parent class_ref 4344375 // bluetooth_sdp_hdr_overlay
      end

      classrelation 8337079 // mas (<directional composition>)
	relation 8337079 *-->
	  a role_name "mas" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8337079 // mas (<directional composition>)
	  b parent class_ref 4344631 // bluetooth_sdp_mas_record
      end

      classrelation 8337207 // mns (<directional composition>)
	relation 8337207 *-->
	  a role_name "mns" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8337207 // mns (<directional composition>)
	  b parent class_ref 4344887 // bluetooth_sdp_mns_record
      end

      classrelation 8337335 // pse (<directional composition>)
	relation 8337335 *-->
	  a role_name "pse" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8337335 // pse (<directional composition>)
	  b parent class_ref 4345143 // bluetooth_sdp_pse_record
      end

      classrelation 8337463 // pce (<directional composition>)
	relation 8337463 *-->
	  a role_name "pce" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8337463 // pce (<directional composition>)
	  b parent class_ref 4345399 // bluetooth_sdp_pce_record
      end

      classrelation 8337591 // ops (<directional composition>)
	relation 8337591 *-->
	  a role_name "ops" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8337591 // ops (<directional composition>)
	  b parent class_ref 4345655 // bluetooth_sdp_ops_record
      end

      classrelation 8337719 // sap (<directional composition>)
	relation 8337719 *-->
	  a role_name "sap" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8337719 // sap (<directional composition>)
	  b parent class_ref 4345911 // bluetooth_sdp_sap_record
      end
    end

    class 4346167 "btsdp_search_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(bt_status_t status, bt_bdaddr_t *bd_addr, uint8_t* uuid, int num_records, bluetooth_sdp_record *records);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for SDP search "
    end

    class 4346295 "btsdp_callbacks_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8337975 // sdp_search_cb (<directional composition>)
	relation 8337975 *-->
	  a role_name "sdp_search_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8337975 // sdp_search_cb (<directional composition>)
	  b parent class_ref 4346167 // btsdp_search_callback
      end
    end

    class 4346423 "btsdp_interface_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15570743 "init"
	public explicit_type "/** Register BT SDP search callbacks */ bt_status_t (*)(btsdp_callbacks_t *callbacks)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Register BT SDP search callbacks */
    bt_status_t (*${name})(btsdp_callbacks_t *callbacks)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Register BT SDP search callbacks 
"
      end

      attribute 15570871 "deinit"
	public explicit_type "/** Unregister BT SDP */ bt_status_t (*)()"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Unregister BT SDP */
    bt_status_t (*${name})()${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Unregister BT SDP 
"
      end

      attribute 15570999 "sdp_search"
	public explicit_type "/** Search for SDP records with specific uuid on remote device */ bt_status_t (*)(bt_bdaddr_t *bd_addr, const uint8_t* uuid)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Search for SDP records with specific uuid on remote device */
    bt_status_t (*${name})(bt_bdaddr_t *bd_addr,  const uint8_t* uuid)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Search for SDP records with specific uuid on remote device 
"
      end

      attribute 15571127 "create_sdp_record"
	public explicit_type "/** * Use listen in the socket interface to create rfcomm and/or l2cap PSM channels, * (without UUID and service_name and set the BTSOCK_FLAG_NO_SDP flag in flags). * Then use createSdpRecord to create the SDP record associated with the rfcomm/l2cap channels. * * Returns a handle to the SDP record, which can be parsed to remove_sdp_record. * * record (in) The SDP record to create * record_handle (out)The corresponding record handle will be written to this pointer. */ bt_status_t (*)(bluetooth_sdp_record *record, int* record_handle)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Use listen in the socket interface to create rfcomm and/or l2cap PSM channels,
     * (without UUID and service_name and set the BTSOCK_FLAG_NO_SDP flag in flags).
     * Then use createSdpRecord to create the SDP record associated with the rfcomm/l2cap channels.
     *
     * Returns a handle to the SDP record, which can be parsed to remove_sdp_record.
     *
     * record           (in) The SDP record to create
     * record_handle    (out)The corresponding record handle will be written to this pointer.
     */
    bt_status_t (*${name})(bluetooth_sdp_record *record, int* record_handle)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Use listen in the socket interface to create rfcomm and/or l2cap PSM channels,
(without UUID and service_name and set the BTSOCK_FLAG_NO_SDP flag in flags).
Then use createSdpRecord to create the SDP record associated with the rfcomm/l2cap channels.

Returns a handle to the SDP record, which can be parsed to remove_sdp_record.

record           (in) The SDP record to create
record_handle    (out)The corresponding record handle will be written to this pointer.

"
      end

      attribute 15571255 "remove_sdp_record"
	public explicit_type "/** Remove a SDP record created by createSdpRecord */ bt_status_t (*)(int sdp_handle)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Remove a SDP record created by createSdpRecord */
    bt_status_t (*${name})(int sdp_handle)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Remove a SDP record created by createSdpRecord 
"
      end
    end

    class 4346551 "btsock_interface_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15571383 "listen"
	public explicit_type "/** * Listen to a RFCOMM UUID or channel. It returns the socket fd from which * btsock_connect_signal can be read out when a remote device connected. * If neither a UUID nor a channel is provided, a channel will be allocated * and a service record can be created providing the channel number to * create_sdp_record(...) in bt_sdp. * The callingUid is the UID of the application which is requesting the socket. This is * used for traffic accounting purposes. */ bt_status_t (*)(btsock_type_t type, const char* service_name, const uint8_t* service_uuid, int channel, int* sock_fd, int flags, int callingUid)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Listen to a RFCOMM UUID or channel. It returns the socket fd from which
     * btsock_connect_signal can be read out when a remote device connected.
     * If neither a UUID nor a channel is provided, a channel will be allocated
     * and a service record can be created providing the channel number to
     * create_sdp_record(...) in bt_sdp.
     * The callingUid is the UID of the application which is requesting the socket. This is
     * used for traffic accounting purposes.
     */
    bt_status_t (*${name})(btsock_type_t type, const char* service_name,
            const uint8_t* service_uuid, int channel, int* sock_fd, int flags, int callingUid)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Listen to a RFCOMM UUID or channel. It returns the socket fd from which
btsock_connect_signal can be read out when a remote device connected.
If neither a UUID nor a channel is provided, a channel will be allocated
and a service record can be created providing the channel number to
create_sdp_record(...) in bt_sdp.
The callingUid is the UID of the application which is requesting the socket. This is
used for traffic accounting purposes.

"
      end

      attribute 15571511 "connect"
	public explicit_type "/** * Connect to a RFCOMM UUID channel of remote device, It returns the socket fd from which * the btsock_connect_signal and a new socket fd to be accepted can be read out when connected. * The callingUid is the UID of the application which is requesting the socket. This is * used for traffic accounting purposes. */ bt_status_t (*)(const bt_bdaddr_t *bd_addr, btsock_type_t type, const uint8_t* uuid, int channel, int* sock_fd, int flags, int callingUid)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Connect to a RFCOMM UUID channel of remote device, It returns the socket fd from which
     * the btsock_connect_signal and a new socket fd to be accepted can be read out when connected.
     * The callingUid is the UID of the application which is requesting the socket. This is
     * used for traffic accounting purposes.
     */
    bt_status_t (*${name})(const bt_bdaddr_t *bd_addr, btsock_type_t type, const uint8_t* uuid,
            int channel, int* sock_fd, int flags, int callingUid)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Connect to a RFCOMM UUID channel of remote device, It returns the socket fd from which
the btsock_connect_signal and a new socket fd to be accepted can be read out when connected.
The callingUid is the UID of the application which is requesting the socket. This is
used for traffic accounting purposes.

"
      end
    end

    class 4346679 "camera_release_memory"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(struct camera_memory *mem);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4346807 "camera_memory"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15571639 "data"
	public explicit_type "void"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15571767 "handle"
	public explicit_type "void"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 8338487 // release (<directional composition>)
	relation 8338487 *-->
	  a role_name "release" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8338487 // release (<directional composition>)
	  b parent class_ref 4346679 // camera_release_memory
      end
    end

    class 4346935 "camera_memory_t"
      visibility package stereotype "typedef" base_type class_ref 4346807 // camera_memory
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4347063 "camera_request_memory"
      visibility package stereotype "typedef" base_type class_ref 4346935 // camera_memory_t
      cpp_decl "${comment}typedef ${type}* (* ${name})(int fd, size_t buf_size, unsigned int num_bufs,
                                                  void *user);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8338615 // <dependency>
	relation 8338615 -_->
	  a public
	    cpp default "#include in source"
	    classrelation_ref 8338615 // <dependency>
	  b parent class_ref 4346935 // camera_memory_t
      end
    end

    class 4347191 "camera_notify_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int32_t msg_type,
        int32_t ext1,
        int32_t ext2,
        void *user);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4347319 "camera_data_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int32_t msg_type,
        const camera_memory_t *data, unsigned int index,
        camera_frame_metadata_t *metadata, void *user);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4347447 "camera_data_timestamp_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int64_t timestamp,
        int32_t msg_type,
        const camera_memory_t *data, unsigned int index,
        void *user);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4347575 "preview_stream_ops"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15571895 "dequeue_buffer"
	public explicit_type "int (*)(struct preview_stream_ops* w, buffer_handle_t** buffer, int *stride)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    int (*${name})(struct preview_stream_ops* w,
                          buffer_handle_t** buffer, int *stride)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15572023 "enqueue_buffer"
	public explicit_type "int (*)(struct preview_stream_ops* w, buffer_handle_t* buffer)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    int (*${name})(struct preview_stream_ops* w,
                buffer_handle_t* buffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15572151 "cancel_buffer"
	public explicit_type "int (*)(struct preview_stream_ops* w, buffer_handle_t* buffer)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    int (*${name})(struct preview_stream_ops* w,
                buffer_handle_t* buffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15572279 "set_buffer_count"
	public explicit_type "int (*)(struct preview_stream_ops* w, int count)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    int (*${name})(struct preview_stream_ops* w, int count)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15572407 "set_buffers_geometry"
	public explicit_type "int (*)(struct preview_stream_ops* pw, int w, int h, int format)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    int (*${name})(struct preview_stream_ops* pw,
                int w, int h, int format)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15572535 "set_crop"
	public explicit_type "int (*)(struct preview_stream_ops *w, int left, int top, int right, int bottom)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    int (*${name})(struct preview_stream_ops *w,
                int left, int top, int right, int bottom)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15572663 "set_usage"
	public explicit_type "int (*)(struct preview_stream_ops* w, int usage)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    int (*${name})(struct preview_stream_ops* w, int usage)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15572791 "set_swap_interval"
	public explicit_type "int (*)(struct preview_stream_ops *w, int interval)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    int (*${name})(struct preview_stream_ops *w, int interval)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15572919 "get_min_undequeued_buffer_count"
	public explicit_type "int (*)(const struct preview_stream_ops *w, int *count)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    int (*${name})(const struct preview_stream_ops *w,
                int *count)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15573047 "lock_buffer"
	public explicit_type "int (*)(struct preview_stream_ops* w, buffer_handle_t* buffer)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    int (*${name})(struct preview_stream_ops* w,
                buffer_handle_t* buffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15573175 "set_timestamp"
	public explicit_type "// Timestamps are measured in nanoseconds, and must be comparable // and monotonically increasing between two frames in the same // preview stream. They do not need to be comparable between // consecutive or parallel preview streams, cameras, or app runs. int (*)(struct preview_stream_ops *w, int64_t timestamp)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    // Timestamps are measured in nanoseconds, and must be comparable
    // and monotonically increasing between two frames in the same
    // preview stream. They do not need to be comparable between
    // consecutive or parallel preview streams, cameras, or app runs.
    int (*${name})(struct preview_stream_ops *w, int64_t timestamp)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Timestamps are measured in nanoseconds, and must be comparable
 and monotonically increasing between two frames in the same
 preview stream. They do not need to be comparable between
 consecutive or parallel preview streams, cameras, or app runs.
"
      end
    end

    class 4347703 "preview_stream_ops_t"
      visibility package stereotype "typedef" base_type class_ref 4347575 // preview_stream_ops
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4347831 "camera_device_ops"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15573303 "set_preview_window"
	public explicit_type "/** Set the ANativeWindow to which preview frames are sent */ int (*)(struct camera_device *, struct preview_stream_ops *window)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Set the ANativeWindow to which preview frames are sent */
    int (*${name})(struct camera_device *,
            struct preview_stream_ops *window)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Set the ANativeWindow to which preview frames are sent 
"
      end

      attribute 15573431 "set_callbacks"
	public explicit_type "/** Set the notification and data callbacks */ void (*)(struct camera_device *, camera_notify_callback notify_cb, camera_data_callback data_cb, camera_data_timestamp_callback data_cb_timestamp, camera_request_memory get_memory, void *user)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Set the notification and data callbacks */
    void (*${name})(struct camera_device *,
            camera_notify_callback notify_cb,
            camera_data_callback data_cb,
            camera_data_timestamp_callback data_cb_timestamp,
            camera_request_memory get_memory,
            void *user)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Set the notification and data callbacks 
"
      end

      attribute 15573559 "enable_msg_type"
	public explicit_type "/** * The following three functions all take a msg_type, which is a bitmask of * the messages defined in include/ui/Camera.h */ /** * Enable a message, or set of messages. */ void (*)(struct camera_device *, int32_t msg_type)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * The following three functions all take a msg_type, which is a bitmask of
     * the messages defined in include/ui/Camera.h
     */

    /**
     * Enable a message, or set of messages.
     */
    void (*${name})(struct camera_device *, int32_t msg_type)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The following three functions all take a msg_type, which is a bitmask of
the messages defined in include/ui/Camera.h


Enable a message, or set of messages.

"
      end

      attribute 15573687 "disable_msg_type"
	public explicit_type "/** * Disable a message, or a set of messages. * * Once received a call to disableMsgType(CAMERA_MSG_VIDEO_FRAME), camera * HAL should not rely on its client to call releaseRecordingFrame() to * release video recording frames sent out by the cameral HAL before and * after the disableMsgType(CAMERA_MSG_VIDEO_FRAME) call. Camera HAL * clients must not modify/access any video recording frame after calling * disableMsgType(CAMERA_MSG_VIDEO_FRAME). */ void (*)(struct camera_device *, int32_t msg_type)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Disable a message, or a set of messages.
     *
     * Once received a call to disableMsgType(CAMERA_MSG_VIDEO_FRAME), camera
     * HAL should not rely on its client to call releaseRecordingFrame() to
     * release video recording frames sent out by the cameral HAL before and
     * after the disableMsgType(CAMERA_MSG_VIDEO_FRAME) call. Camera HAL
     * clients must not modify/access any video recording frame after calling
     * disableMsgType(CAMERA_MSG_VIDEO_FRAME).
     */
    void (*${name})(struct camera_device *, int32_t msg_type)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Disable a message, or a set of messages.

Once received a call to disableMsgType(CAMERA_MSG_VIDEO_FRAME), camera
HAL should not rely on its client to call releaseRecordingFrame() to
release video recording frames sent out by the cameral HAL before and
after the disableMsgType(CAMERA_MSG_VIDEO_FRAME) call. Camera HAL
clients must not modify/access any video recording frame after calling
disableMsgType(CAMERA_MSG_VIDEO_FRAME).

"
      end

      attribute 15573815 "msg_type_enabled"
	public explicit_type "/** * Query whether a message, or a set of messages, is enabled. Note that * this is operates as an AND, if any of the messages queried are off, this * will return false. */ int (*)(struct camera_device *, int32_t msg_type)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Query whether a message, or a set of messages, is enabled.  Note that
     * this is operates as an AND, if any of the messages queried are off, this
     * will return false.
     */
    int (*${name})(struct camera_device *, int32_t msg_type)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Query whether a message, or a set of messages, is enabled.  Note that
this is operates as an AND, if any of the messages queried are off, this
will return false.

"
      end

      attribute 15573943 "start_preview"
	public explicit_type "/** * Start preview mode. */ int (*)(struct camera_device *)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Start preview mode.
     */
    int (*${name})(struct camera_device *)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Start preview mode.

"
      end

      attribute 15574071 "stop_preview"
	public explicit_type "/** * Stop a previously started preview. */ void (*)(struct camera_device *)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Stop a previously started preview.
     */
    void (*${name})(struct camera_device *)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Stop a previously started preview.

"
      end

      attribute 15574199 "preview_enabled"
	public explicit_type "/** * Returns true if preview is enabled. */ int (*)(struct camera_device *)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Returns true if preview is enabled.
     */
    int (*${name})(struct camera_device *)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Returns true if preview is enabled.

"
      end

      attribute 15574327 "store_meta_data_in_buffers"
	public explicit_type "/** * Request the camera HAL to store meta data or real YUV data in the video * buffers sent out via CAMERA_MSG_VIDEO_FRAME for a recording session. If * it is not called, the default camera HAL behavior is to store real YUV * data in the video buffers. * * This method should be called before startRecording() in order to be * effective. * * If meta data is stored in the video buffers, it is up to the receiver of * the video buffers to interpret the contents and to find the actual frame * data with the help of the meta data in the buffer. How this is done is * outside of the scope of this method. * * Some camera HALs may not support storing meta data in the video buffers, * but all camera HALs should support storing real YUV data in the video * buffers. If the camera HAL does not support storing the meta data in the * video buffers when it is requested to do do, INVALID_OPERATION must be * returned. It is very useful for the camera HAL to pass meta data rather * than the actual frame data directly to the video encoder, since the * amount of the uncompressed frame data can be very large if video size is * large. * * @param enable if true to instruct the camera HAL to store * meta data in the video buffers; false to instruct * the camera HAL to store real YUV data in the video * buffers. * * @return OK on success. */ int (*)(struct camera_device *, int enable)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Request the camera HAL to store meta data or real YUV data in the video
     * buffers sent out via CAMERA_MSG_VIDEO_FRAME for a recording session. If
     * it is not called, the default camera HAL behavior is to store real YUV
     * data in the video buffers.
     *
     * This method should be called before startRecording() in order to be
     * effective.
     *
     * If meta data is stored in the video buffers, it is up to the receiver of
     * the video buffers to interpret the contents and to find the actual frame
     * data with the help of the meta data in the buffer. How this is done is
     * outside of the scope of this method.
     *
     * Some camera HALs may not support storing meta data in the video buffers,
     * but all camera HALs should support storing real YUV data in the video
     * buffers. If the camera HAL does not support storing the meta data in the
     * video buffers when it is requested to do do, INVALID_OPERATION must be
     * returned. It is very useful for the camera HAL to pass meta data rather
     * than the actual frame data directly to the video encoder, since the
     * amount of the uncompressed frame data can be very large if video size is
     * large.
     *
     * @param enable if true to instruct the camera HAL to store
     *        meta data in the video buffers; false to instruct
     *        the camera HAL to store real YUV data in the video
     *        buffers.
     *
     * @return OK on success.
     */
    int (*${name})(struct camera_device *, int enable)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Request the camera HAL to store meta data or real YUV data in the video
buffers sent out via CAMERA_MSG_VIDEO_FRAME for a recording session. If
it is not called, the default camera HAL behavior is to store real YUV
data in the video buffers.

This method should be called before startRecording() in order to be
effective.

If meta data is stored in the video buffers, it is up to the receiver of
the video buffers to interpret the contents and to find the actual frame
data with the help of the meta data in the buffer. How this is done is
outside of the scope of this method.

Some camera HALs may not support storing meta data in the video buffers,
but all camera HALs should support storing real YUV data in the video
buffers. If the camera HAL does not support storing the meta data in the
video buffers when it is requested to do do, INVALID_OPERATION must be
returned. It is very useful for the camera HAL to pass meta data rather
than the actual frame data directly to the video encoder, since the
amount of the uncompressed frame data can be very large if video size is
large.

@param enable if true to instruct the camera HAL to store
       meta data in the video buffers; false to instruct
       the camera HAL to store real YUV data in the video
       buffers.

@return OK on success.

"
      end

      attribute 15574455 "start_recording"
	public explicit_type "/** * Start record mode. When a record image is available, a * CAMERA_MSG_VIDEO_FRAME message is sent with the corresponding * frame. Every record frame must be released by a camera HAL client via * releaseRecordingFrame() before the client calls * disableMsgType(CAMERA_MSG_VIDEO_FRAME). After the client calls * disableMsgType(CAMERA_MSG_VIDEO_FRAME), it is the camera HAL's * responsibility to manage the life-cycle of the video recording frames, * and the client must not modify/access any video recording frames. */ int (*)(struct camera_device *)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Start record mode. When a record image is available, a
     * CAMERA_MSG_VIDEO_FRAME message is sent with the corresponding
     * frame. Every record frame must be released by a camera HAL client via
     * releaseRecordingFrame() before the client calls
     * disableMsgType(CAMERA_MSG_VIDEO_FRAME). After the client calls
     * disableMsgType(CAMERA_MSG_VIDEO_FRAME), it is the camera HAL's
     * responsibility to manage the life-cycle of the video recording frames,
     * and the client must not modify/access any video recording frames.
     */
    int (*${name})(struct camera_device *)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Start record mode. When a record image is available, a
CAMERA_MSG_VIDEO_FRAME message is sent with the corresponding
frame. Every record frame must be released by a camera HAL client via
releaseRecordingFrame() before the client calls
disableMsgType(CAMERA_MSG_VIDEO_FRAME). After the client calls
disableMsgType(CAMERA_MSG_VIDEO_FRAME), it is the camera HAL's
responsibility to manage the life-cycle of the video recording frames,
and the client must not modify/access any video recording frames.

"
      end

      attribute 15574583 "stop_recording"
	public explicit_type "/** * Stop a previously started recording. */ void (*)(struct camera_device *)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Stop a previously started recording.
     */
    void (*${name})(struct camera_device *)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Stop a previously started recording.

"
      end

      attribute 15574711 "recording_enabled"
	public explicit_type "/** * Returns true if recording is enabled. */ int (*)(struct camera_device *)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Returns true if recording is enabled.
     */
    int (*${name})(struct camera_device *)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Returns true if recording is enabled.

"
      end

      attribute 15574839 "release_recording_frame"
	public explicit_type "/** * Release a record frame previously returned by CAMERA_MSG_VIDEO_FRAME. * * It is camera HAL client's responsibility to release video recording * frames sent out by the camera HAL before the camera HAL receives a call * to disableMsgType(CAMERA_MSG_VIDEO_FRAME). After it receives the call to * disableMsgType(CAMERA_MSG_VIDEO_FRAME), it is the camera HAL's * responsibility to manage the life-cycle of the video recording frames. */ void (*)(struct camera_device *, const void *opaque)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Release a record frame previously returned by CAMERA_MSG_VIDEO_FRAME.
     *
     * It is camera HAL client's responsibility to release video recording
     * frames sent out by the camera HAL before the camera HAL receives a call
     * to disableMsgType(CAMERA_MSG_VIDEO_FRAME). After it receives the call to
     * disableMsgType(CAMERA_MSG_VIDEO_FRAME), it is the camera HAL's
     * responsibility to manage the life-cycle of the video recording frames.
     */
    void (*${name})(struct camera_device *,
                    const void *opaque)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Release a record frame previously returned by CAMERA_MSG_VIDEO_FRAME.

It is camera HAL client's responsibility to release video recording
frames sent out by the camera HAL before the camera HAL receives a call
to disableMsgType(CAMERA_MSG_VIDEO_FRAME). After it receives the call to
disableMsgType(CAMERA_MSG_VIDEO_FRAME), it is the camera HAL's
responsibility to manage the life-cycle of the video recording frames.

"
      end

      attribute 15574967 "auto_focus"
	public explicit_type "/** * Start auto focus, the notification callback routine is called with * CAMERA_MSG_FOCUS once when focusing is complete. autoFocus() will be * called again if another auto focus is needed. */ int (*)(struct camera_device *)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Start auto focus, the notification callback routine is called with
     * CAMERA_MSG_FOCUS once when focusing is complete. autoFocus() will be
     * called again if another auto focus is needed.
     */
    int (*${name})(struct camera_device *)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Start auto focus, the notification callback routine is called with
CAMERA_MSG_FOCUS once when focusing is complete. autoFocus() will be
called again if another auto focus is needed.

"
      end

      attribute 15575095 "cancel_auto_focus"
	public explicit_type "/** * Cancels auto-focus function. If the auto-focus is still in progress, * this function will cancel it. Whether the auto-focus is in progress or * not, this function will return the focus position to the default. If * the camera does not support auto-focus, this is a no-op. */ int (*)(struct camera_device *)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Cancels auto-focus function. If the auto-focus is still in progress,
     * this function will cancel it. Whether the auto-focus is in progress or
     * not, this function will return the focus position to the default.  If
     * the camera does not support auto-focus, this is a no-op.
     */
    int (*${name})(struct camera_device *)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Cancels auto-focus function. If the auto-focus is still in progress,
this function will cancel it. Whether the auto-focus is in progress or
not, this function will return the focus position to the default.  If
the camera does not support auto-focus, this is a no-op.

"
      end

      attribute 15575223 "take_picture"
	public explicit_type "/** * Take a picture. */ int (*)(struct camera_device *)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Take a picture.
     */
    int (*${name})(struct camera_device *)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Take a picture.

"
      end

      attribute 15575351 "cancel_picture"
	public explicit_type "/** * Cancel a picture that was started with takePicture. Calling this method * when no picture is being taken is a no-op. */ int (*)(struct camera_device *)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Cancel a picture that was started with takePicture. Calling this method
     * when no picture is being taken is a no-op.
     */
    int (*${name})(struct camera_device *)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Cancel a picture that was started with takePicture. Calling this method
when no picture is being taken is a no-op.

"
      end

      attribute 15575479 "set_parameters"
	public explicit_type "/** * Set the camera parameters. This returns BAD_VALUE if any parameter is * invalid or not supported. */ int (*)(struct camera_device *, const char *parms)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Set the camera parameters. This returns BAD_VALUE if any parameter is
     * invalid or not supported.
     */
    int (*${name})(struct camera_device *, const char *parms)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Set the camera parameters. This returns BAD_VALUE if any parameter is
invalid or not supported.

"
      end

      attribute 15575607 "get_parameters"
	public explicit_type "/** Retrieve the camera parameters. The buffer returned by the camera HAL must be returned back to it with put_parameters, if put_parameters is not NULL. */ char *(*)(struct camera_device *)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Retrieve the camera parameters.  The buffer returned by the camera HAL
        must be returned back to it with put_parameters, if put_parameters
        is not NULL.
     */
    char *(*${name})(struct camera_device *)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Retrieve the camera parameters.  The buffer returned by the camera HAL
must be returned back to it with put_parameters, if put_parameters
is not NULL.

"
      end

      attribute 15575735 "put_parameters"
	public explicit_type "/** The camera HAL uses its own memory to pass us the parameters when we call get_parameters. Use this function to return the memory back to the camera HAL, if put_parameters is not NULL. If put_parameters is NULL, then you have to use free() to release the memory. */ void (*)(struct camera_device *, char *)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** The camera HAL uses its own memory to pass us the parameters when we
        call get_parameters.  Use this function to return the memory back to
        the camera HAL, if put_parameters is not NULL.  If put_parameters
        is NULL, then you have to use free() to release the memory.
    */
    void (*${name})(struct camera_device *, char *)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The camera HAL uses its own memory to pass us the parameters when we
call get_parameters.  Use this function to return the memory back to
the camera HAL, if put_parameters is not NULL.  If put_parameters
is NULL, then you have to use free() to release the memory.

"
      end

      attribute 15575863 "send_command"
	public explicit_type "/** * Send command to camera driver. */ int (*)(struct camera_device *, int32_t cmd, int32_t arg1, int32_t arg2)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Send command to camera driver.
     */
    int (*${name})(struct camera_device *,
                int32_t cmd, int32_t arg1, int32_t arg2)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Send command to camera driver.

"
      end

      attribute 15575991 "release"
	public explicit_type "/** * Release the hardware resources owned by this object. Note that this is * *not* done in the destructor. */ void (*)(struct camera_device *)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Release the hardware resources owned by this object.  Note that this is
     * *not* done in the destructor.
     */
    void (*${name})(struct camera_device *)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Release the hardware resources owned by this object.  Note that this is
*not* done in the destructor.

"
      end

      attribute 15576119 "dump"
	public explicit_type "/** * Dump state of the camera hardware */ int (*)(struct camera_device *, int fd)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Dump state of the camera hardware
     */
    int (*${name})(struct camera_device *, int fd)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Dump state of the camera hardware

"
      end
    end

    class 4347959 "camera_device_ops_t"
      visibility package stereotype "typedef" base_type class_ref 4347831 // camera_device_ops
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4348087 "camera_device"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8338743 // common (<directional composition>)
	relation 8338743 *-->
	  a role_name "common" public
	    comment "camera_device.common.version must be in the range
HARDWARE_DEVICE_API_VERSION(0,0)-(1,FF). CAMERA_DEVICE_API_VERSION_1_0 is
recommended.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8338743 // common (<directional composition>)
	  b parent class_ref 4305975 // hw_device_t
      end

      classrelation 8338871 // ops (<unidirectional association>)
	relation 8338871 --->
	  a role_name "ops" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8338871 // ops (<unidirectional association>)
	  b parent class_ref 4347959 // camera_device_ops_t
      end

      attribute 15576247 "priv"
	public explicit_type "void"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4348215 "camera_device_t"
      visibility package stereotype "typedef" base_type class_ref 4348087 // camera_device
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4348343 "camera2_stream_ops"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
Input/output stream buffer queue interface definitions



Output image stream queue interface. A set of these methods is provided to
the HAL device in allocate_stream(), and are used to interact with the
gralloc buffer queue for that stream. They may not be called until after
allocate_stream returns.
"
      attribute 15576375 "dequeue_buffer"
	public explicit_type "/** * Get a buffer to fill from the queue. The size and format of the buffer * are fixed for a given stream (defined in allocate_stream), and the stride * should be queried from the platform gralloc module. The gralloc buffer * will have been allocated based on the usage flags provided by * allocate_stream, and will be locked for use. */ int (*)(const struct camera2_stream_ops* w, buffer_handle_t** buffer)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Get a buffer to fill from the queue. The size and format of the buffer
     * are fixed for a given stream (defined in allocate_stream), and the stride
     * should be queried from the platform gralloc module. The gralloc buffer
     * will have been allocated based on the usage flags provided by
     * allocate_stream, and will be locked for use.
     */
    int (*${name})(const struct camera2_stream_ops* w,
            buffer_handle_t** buffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Get a buffer to fill from the queue. The size and format of the buffer
are fixed for a given stream (defined in allocate_stream), and the stride
should be queried from the platform gralloc module. The gralloc buffer
will have been allocated based on the usage flags provided by
allocate_stream, and will be locked for use.

"
      end

      attribute 15576503 "enqueue_buffer"
	public explicit_type "/** * Push a filled buffer to the stream to be used by the consumer. * * The timestamp represents the time at start of exposure of the first row * of the image; it must be from a monotonic clock, and is measured in * nanoseconds. The timestamps do not need to be comparable between * different cameras, or consecutive instances of the same camera. However, * they must be comparable between streams from the same camera. If one * capture produces buffers for multiple streams, each stream must have the * same timestamp for that buffer, and that timestamp must match the * timestamp in the output frame metadata. */ int (*)(const struct camera2_stream_ops* w, int64_t timestamp, buffer_handle_t* buffer)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Push a filled buffer to the stream to be used by the consumer.
     *
     * The timestamp represents the time at start of exposure of the first row
     * of the image; it must be from a monotonic clock, and is measured in
     * nanoseconds. The timestamps do not need to be comparable between
     * different cameras, or consecutive instances of the same camera. However,
     * they must be comparable between streams from the same camera. If one
     * capture produces buffers for multiple streams, each stream must have the
     * same timestamp for that buffer, and that timestamp must match the
     * timestamp in the output frame metadata.
     */
    int (*${name})(const struct camera2_stream_ops* w,
            int64_t timestamp,
            buffer_handle_t* buffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Push a filled buffer to the stream to be used by the consumer.

The timestamp represents the time at start of exposure of the first row
of the image; it must be from a monotonic clock, and is measured in
nanoseconds. The timestamps do not need to be comparable between
different cameras, or consecutive instances of the same camera. However,
they must be comparable between streams from the same camera. If one
capture produces buffers for multiple streams, each stream must have the
same timestamp for that buffer, and that timestamp must match the
timestamp in the output frame metadata.

"
      end

      attribute 15576631 "cancel_buffer"
	public explicit_type "/** * Return a buffer to the queue without marking it as filled. */ int (*)(const struct camera2_stream_ops* w, buffer_handle_t* buffer)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    /**
     * Return a buffer to the queue without marking it as filled.
     */
    int (*${name})(const struct camera2_stream_ops* w,
            buffer_handle_t* buffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Return a buffer to the queue without marking it as filled.

"
      end

      attribute 15576759 "set_crop"
	public explicit_type "/** * Set the crop window for subsequently enqueued buffers. The parameters are * measured in pixels relative to the buffer width and height. */ int (*)(const struct camera2_stream_ops *w, int left, int top, int right, int bottom)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    /**
     * Set the crop window for subsequently enqueued buffers. The parameters are
     * measured in pixels relative to the buffer width and height.
     */
    int (*${name})(const struct camera2_stream_ops *w,
            int left, int top, int right, int bottom)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Set the crop window for subsequently enqueued buffers. The parameters are
measured in pixels relative to the buffer width and height.

"
      end
    end

    class 4348471 "camera2_stream_ops_t"
      visibility package stereotype "typedef" base_type class_ref 4348343 // camera2_stream_ops
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4348599 "anonymous147"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Temporary definition during transition.

These formats will be removed and replaced with
HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED.  To maximize forward compatibility,
HAL implementations are strongly recommended to treat FORMAT_OPAQUE and
FORMAT_ZSL as equivalent to HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED, and
return HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED in the format_actual output
parameter of allocate_stream, allowing the gralloc module to select the
specific format based on the usage flags from the camera and the stream
consumer.
"
      attribute 15576887 "CAMERA2_HAL_PIXEL_FORMAT_OPAQUE"
	public type class_ref 4348599 // anonymous147
	init_value " HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15577015 "CAMERA2_HAL_PIXEL_FORMAT_ZSL"
	public type class_ref 4348599 // anonymous147
	init_value " -1
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4348727 "camera2_jpeg_blob"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Transport header for compressed JPEG buffers in output streams.

To capture JPEG images, a stream is created using the pixel format
HAL_PIXEL_FORMAT_BLOB, and the static metadata field android.jpeg.maxSize is
used as the buffer size. Since compressed JPEG images are of variable size,
the HAL needs to include the final size of the compressed image using this
structure inside the output stream buffer. The JPEG blob ID field must be set
to CAMERA2_JPEG_BLOB_ID.

Transport header should be at the end of the JPEG output stream buffer.  That
means the jpeg_blob_id must start at byte[android.jpeg.maxSize -
sizeof(camera2_jpeg_blob)].  Any HAL using this transport header must
account for it in android.jpeg.maxSize.  The JPEG data itself starts at
byte[0] and should be jpeg_size bytes long.
"
    end

    class 4348855 "anonymous148"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15577143 "CAMERA2_JPEG_BLOB_ID"
	public type class_ref 4348855 // anonymous148
	init_value " 0x00FF
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4348983 "camera2_stream_in_ops"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Input reprocess stream queue management. A set of these methods is provided
to the HAL device in allocate_reprocess_stream(); they are used to interact
with the reprocess stream's input gralloc buffer queue.
"
      attribute 15577271 "acquire_buffer"
	public explicit_type "/** * Get the next buffer of image data to reprocess. The width, height, and * format of the buffer is fixed in allocate_reprocess_stream(), and the * stride and other details should be queried from the platform gralloc * module as needed. The buffer will already be locked for use. */ int (*)(const struct camera2_stream_in_ops *w, buffer_handle_t** buffer)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Get the next buffer of image data to reprocess. The width, height, and
     * format of the buffer is fixed in allocate_reprocess_stream(), and the
     * stride and other details should be queried from the platform gralloc
     * module as needed. The buffer will already be locked for use.
     */
    int (*${name})(const struct camera2_stream_in_ops *w,
            buffer_handle_t** buffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Get the next buffer of image data to reprocess. The width, height, and
format of the buffer is fixed in allocate_reprocess_stream(), and the
stride and other details should be queried from the platform gralloc
module as needed. The buffer will already be locked for use.

"
      end

      attribute 15577399 "release_buffer"
	public explicit_type "/** * Return a used buffer to the buffer queue for reuse. */ int (*)(const struct camera2_stream_in_ops *w, buffer_handle_t* buffer)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    /**
     * Return a used buffer to the buffer queue for reuse.
     */
    int (*${name})(const struct camera2_stream_in_ops *w,
            buffer_handle_t* buffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Return a used buffer to the buffer queue for reuse.

"
      end
    end

    class 4349111 "camera2_stream_in_ops_t"
      visibility package stereotype "typedef" base_type class_ref 4348983 // camera2_stream_in_ops
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4349239 "anonymous149"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
Metadata queue management, used for requests sent to HAL module, and for
frames produced by the HAL.

"
      attribute 15577527 "CAMERA2_REQUEST_QUEUE_IS_BOTTOMLESS"
	public type class_ref 4349239 // anonymous149
	init_value " -1
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4349367 "camera2_request_queue_src_ops"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Request input queue protocol:

The framework holds the queue and its contents. At start, the queue is empty.

1. When the first metadata buffer is placed into the queue, the framework
   signals the device by calling notify_request_queue_not_empty().

2. After receiving notify_request_queue_not_empty, the device must call
   dequeue() once it's ready to handle the next buffer.

3. Once the device has processed a buffer, and is ready for the next buffer,
   it must call dequeue() again instead of waiting for a notification. If
   there are no more buffers available, dequeue() will return NULL. After
   this point, when a buffer becomes available, the framework must call
   notify_request_queue_not_empty() again. If the device receives a NULL
   return from dequeue, it does not need to query the queue again until a
   notify_request_queue_not_empty() call is received from the source.

4. If the device calls buffer_count() and receives 0, this does not mean that
   the framework will provide a notify_request_queue_not_empty() call. The
   framework will only provide such a notification after the device has
   received a NULL from dequeue, or on initial startup.

5. The dequeue() call in response to notify_request_queue_not_empty() may be
   on the same thread as the notify_request_queue_not_empty() call, and may
   be performed from within the notify call.

6. All dequeued request buffers must be returned to the framework by calling
   free_request, including when errors occur, a device flush is requested, or
   when the device is shutting down.
"
      attribute 15577655 "request_count"
	public explicit_type "/** * Get the count of request buffers pending in the queue. May return * CAMERA2_REQUEST_QUEUE_IS_BOTTOMLESS if a repeating request (stream * request) is currently configured. Calling this method has no effect on * whether the notify_request_queue_not_empty() method will be called by the * framework. */ int (*)(const struct camera2_request_queue_src_ops *q)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Get the count of request buffers pending in the queue. May return
     * CAMERA2_REQUEST_QUEUE_IS_BOTTOMLESS if a repeating request (stream
     * request) is currently configured. Calling this method has no effect on
     * whether the notify_request_queue_not_empty() method will be called by the
     * framework.
     */
    int (*${name})(const struct camera2_request_queue_src_ops *q)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Get the count of request buffers pending in the queue. May return
CAMERA2_REQUEST_QUEUE_IS_BOTTOMLESS if a repeating request (stream
request) is currently configured. Calling this method has no effect on
whether the notify_request_queue_not_empty() method will be called by the
framework.

"
      end

      attribute 15577783 "dequeue_request"
	public explicit_type "/** * Get a metadata buffer from the framework. Returns OK if there is no * error. If the queue is empty, returns NULL in buffer. In that case, the * device must wait for a notify_request_queue_not_empty() message before * attempting to dequeue again. Buffers obtained in this way must be * returned to the framework with free_request(). */ int (*)(const struct camera2_request_queue_src_ops *q, camera_metadata_t **buffer)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Get a metadata buffer from the framework. Returns OK if there is no
     * error. If the queue is empty, returns NULL in buffer. In that case, the
     * device must wait for a notify_request_queue_not_empty() message before
     * attempting to dequeue again. Buffers obtained in this way must be
     * returned to the framework with free_request().
     */
    int (*${name})(const struct camera2_request_queue_src_ops *q,
            camera_metadata_t **buffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Get a metadata buffer from the framework. Returns OK if there is no
error. If the queue is empty, returns NULL in buffer. In that case, the
device must wait for a notify_request_queue_not_empty() message before
attempting to dequeue again. Buffers obtained in this way must be
returned to the framework with free_request().

"
      end

      attribute 15577911 "free_request"
	public explicit_type "/** * Return a metadata buffer to the framework once it has been used, or if * an error or shutdown occurs. */ int (*)(const struct camera2_request_queue_src_ops *q, camera_metadata_t *old_buffer)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    /**
     * Return a metadata buffer to the framework once it has been used, or if
     * an error or shutdown occurs.
     */
    int (*${name})(const struct camera2_request_queue_src_ops *q,
            camera_metadata_t *old_buffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Return a metadata buffer to the framework once it has been used, or if
an error or shutdown occurs.

"
      end
    end

    class 4349495 "camera2_request_queue_src_ops_t"
      visibility package stereotype "typedef" base_type class_ref 4349367 // camera2_request_queue_src_ops
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4349623 "camera2_frame_queue_dst_ops"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Frame output queue protocol:

The framework holds the queue and its contents. At start, the queue is empty.

1. When the device is ready to fill an output metadata frame, it must dequeue
   a metadata buffer of the required size.

2. It should then fill the metadata buffer, and place it on the frame queue
   using enqueue_frame. The framework takes ownership of the frame.

3. In case of an error, a request to flush the pipeline, or shutdown, the
   device must return any affected dequeued frames to the framework by
   calling cancel_frame.
"
      attribute 15578039 "dequeue_frame"
	public explicit_type "/** * Get an empty metadata buffer to fill from the framework. The new metadata * buffer will have room for entries number of metadata entries, plus * data_bytes worth of extra storage. Frames dequeued here must be returned * to the framework with either cancel_frame or enqueue_frame. */ int (*)(const struct camera2_frame_queue_dst_ops *q, size_t entries, size_t data_bytes, camera_metadata_t **buffer)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Get an empty metadata buffer to fill from the framework. The new metadata
     * buffer will have room for entries number of metadata entries, plus
     * data_bytes worth of extra storage. Frames dequeued here must be returned
     * to the framework with either cancel_frame or enqueue_frame.
     */
    int (*${name})(const struct camera2_frame_queue_dst_ops *q,
            size_t entries, size_t data_bytes,
            camera_metadata_t **buffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Get an empty metadata buffer to fill from the framework. The new metadata
buffer will have room for entries number of metadata entries, plus
data_bytes worth of extra storage. Frames dequeued here must be returned
to the framework with either cancel_frame or enqueue_frame.

"
      end

      attribute 15578167 "cancel_frame"
	public explicit_type "/** * Return a dequeued metadata buffer to the framework for reuse; do not mark it as * filled. Use when encountering errors, or flushing the internal request queue. */ int (*)(const struct camera2_frame_queue_dst_ops *q, camera_metadata_t *buffer)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Return a dequeued metadata buffer to the framework for reuse; do not mark it as
     * filled. Use when encountering errors, or flushing the internal request queue.
     */
    int (*${name})(const struct camera2_frame_queue_dst_ops *q,
            camera_metadata_t *buffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Return a dequeued metadata buffer to the framework for reuse; do not mark it as
filled. Use when encountering errors, or flushing the internal request queue.

"
      end

      attribute 15578295 "enqueue_frame"
	public explicit_type "/** * Place a completed metadata frame on the frame output queue. */ int (*)(const struct camera2_frame_queue_dst_ops *q, camera_metadata_t *buffer)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Place a completed metadata frame on the frame output queue.
     */
    int (*${name})(const struct camera2_frame_queue_dst_ops *q,
            camera_metadata_t *buffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Place a completed metadata frame on the frame output queue.

"
      end
    end

    class 4349751 "camera2_frame_queue_dst_ops_t"
      visibility package stereotype "typedef" base_type class_ref 4349623 // camera2_frame_queue_dst_ops
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4349879 "camera2_notify_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int32_t msg_type,
        int32_t ext1,
        int32_t ext2,
        int32_t ext3,
        void *user);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
Notification callback and message definition, and trigger definitions



Asynchronous notification callback from the HAL, fired for various
reasons. Only for information independent of frame capture, or that require
specific timing. The user pointer must be the same one that was passed to the
device in set_notify_callback().
"
    end

    class 4350007 "anonymous150"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Possible message types for camera2_notify_callback
"
      attribute 15578423 "CAMERA2_MSG_ERROR"
	public type class_ref 4350007 // anonymous150
	init_value " 0x0001"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15578551 "CAMERA2_MSG_SHUTTER"
	public type class_ref 4350007 // anonymous150
	init_value " 0x0010"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15578679 "CAMERA2_MSG_AUTOFOCUS"
	public type class_ref 4350007 // anonymous150
	init_value " 0x0020"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15578807 "CAMERA2_MSG_AUTOEXPOSURE"
	public type class_ref 4350007 // anonymous150
	init_value " 0x0021"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15578935 "CAMERA2_MSG_AUTOWB"
	public type class_ref 4350007 // anonymous150
	init_value " 0x0022
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4350135 "anonymous151"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An error has occurred. Argument ext1 contains the error code, and
ext2 and ext3 contain any error-specific information.


The exposure of a given request has begun. Argument ext1 contains the
frame number, and ext2 and ext3 contain the low-order and high-order
bytes of the timestamp for when exposure began.
(timestamp = (ext3 << 32 | ext2))


The autofocus routine has changed state. Argument ext1 contains the new
state; the values are the same as those for the metadata field
android.control.afState. Ext2 contains the latest trigger ID passed to
trigger_action(CAMERA2_TRIGGER_AUTOFOCUS) or
trigger_action(CAMERA2_TRIGGER_CANCEL_AUTOFOCUS), or 0 if trigger has not
been called with either of those actions.


The autoexposure routine has changed state. Argument ext1 contains the
new state; the values are the same as those for the metadata field
android.control.aeState. Ext2 contains the latest trigger ID value passed to
trigger_action(CAMERA2_TRIGGER_PRECAPTURE_METERING), or 0 if that method
has not been called.


The auto-whitebalance routine has changed state. Argument ext1 contains
the new state; the values are the same as those for the metadata field
android.control.awbState. Ext2 contains the latest trigger ID passed to
trigger_action(CAMERA2_TRIGGER_PRECAPTURE_METERING), or 0 if that method
has not been called.


Error codes for CAMERA_MSG_ERROR
"
      attribute 15579063 "CAMERA2_MSG_ERROR_HARDWARE"
	public type class_ref 4350135 // anonymous151
	init_value " 0x0001"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15579191 "CAMERA2_MSG_ERROR_DEVICE"
	public type class_ref 4350135 // anonymous151
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15579319 "CAMERA2_MSG_ERROR_REQUEST"
	public type class_ref 4350135 // anonymous151
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15579447 "CAMERA2_MSG_ERROR_FRAME"
	public type class_ref 4350135 // anonymous151
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15579575 "CAMERA2_MSG_ERROR_STREAM"
	public type class_ref 4350135 // anonymous151
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15579703 "CAMERA2_MSG_NUM_ERRORS"
	public type class_ref 4350135 // anonymous151
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4350263 "anonymous152"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A serious failure occured. Camera device may not work without reboot, and
no further frames or buffer streams will be produced by the
device. Device should be treated as closed.


A serious failure occured. No further frames or buffer streams will be
produced by the device. Device should be treated as closed. The client
must reopen the device to use it again.


An error has occurred in processing a request. No output (metadata or
buffers) will be produced for this request. ext2 contains the frame
number of the request. Subsequent requests are unaffected, and the device
remains operational.


An error has occurred in producing an output frame metadata buffer for a
request, but image buffers for it will still be available. Subsequent
requests are unaffected, and the device remains operational. ext2
contains the frame number of the request.


An error has occurred in placing an output buffer into a stream for a
request. The frame metadata and other buffers may still be
available. Subsequent requests are unaffected, and the device remains
operational. ext2 contains the frame number of the request, and ext3
contains the stream id.


Number of error types


Possible trigger ids for trigger_action()
"
      attribute 15579831 "CAMERA2_TRIGGER_AUTOFOCUS"
	public type class_ref 4350263 // anonymous152
	init_value " 0x0001"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15579959 "CAMERA2_TRIGGER_CANCEL_AUTOFOCUS"
	public type class_ref 4350263 // anonymous152
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15580087 "CAMERA2_TRIGGER_PRECAPTURE_METERING"
	public type class_ref 4350263 // anonymous152
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4350391 "anonymous153"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Trigger an autofocus cycle. The effect of the trigger depends on the
autofocus mode in effect when the trigger is received, which is the mode
listed in the latest capture request to be dequeued by the HAL. If the
mode is OFF, EDOF, or FIXED, the trigger has no effect. In AUTO, MACRO,
or CONTINUOUS_* modes, see below for the expected behavior. The state of
the autofocus cycle can be tracked in android.control.afMode and the
corresponding notifications.

*
In AUTO or MACRO mode, the AF state transitions (and notifications)
when calling with trigger ID = N with the previous ID being K are:

Initial state       Transitions
INACTIVE (K)         -> ACTIVE_SCAN (N) -> AF_FOCUSED (N) or AF_NOT_FOCUSED (N)
AF_FOCUSED (K)       -> ACTIVE_SCAN (N) -> AF_FOCUSED (N) or AF_NOT_FOCUSED (N)
AF_NOT_FOCUSED (K)   -> ACTIVE_SCAN (N) -> AF_FOCUSED (N) or AF_NOT_FOCUSED (N)
ACTIVE_SCAN (K)      -> AF_FOCUSED(N) or AF_NOT_FOCUSED(N)
PASSIVE_SCAN (K)      Not used in AUTO/MACRO mode
PASSIVE_FOCUSED (K)   Not used in AUTO/MACRO mode

*
In CONTINUOUS_PICTURE mode, triggering AF must lock the AF to the current
lens position and transition the AF state to either AF_FOCUSED or
NOT_FOCUSED. If a passive scan is underway, that scan must complete and
then lock the lens position and change AF state. TRIGGER_CANCEL_AUTOFOCUS
will allow the AF to restart its operation.

Initial state      Transitions
INACTIVE (K)        -> immediate AF_FOCUSED (N) or AF_NOT_FOCUSED (N)
PASSIVE_FOCUSED (K) -> immediate AF_FOCUSED (N) or AF_NOT_FOCUSED (N)
PASSIVE_SCAN (K)    -> AF_FOCUSED (N) or AF_NOT_FOCUSED (N)
AF_FOCUSED (K)      no effect except to change next notification ID to N
AF_NOT_FOCUSED (K)  no effect except to change next notification ID to N

*
In CONTINUOUS_VIDEO mode, triggering AF must lock the AF to the current
lens position and transition the AF state to either AF_FOCUSED or
NOT_FOCUSED. If a passive scan is underway, it must immediately halt, in
contrast with CONTINUOUS_PICTURE mode. TRIGGER_CANCEL_AUTOFOCUS will
allow the AF to restart its operation.

Initial state      Transitions
INACTIVE (K)        -> immediate AF_FOCUSED (N) or AF_NOT_FOCUSED (N)
PASSIVE_FOCUSED (K) -> immediate AF_FOCUSED (N) or AF_NOT_FOCUSED (N)
PASSIVE_SCAN (K)    -> immediate AF_FOCUSED (N) or AF_NOT_FOCUSED (N)
AF_FOCUSED (K)      no effect except to change next notification ID to N
AF_NOT_FOCUSED (K)  no effect except to change next notification ID to N

Ext1 is an ID that must be returned in subsequent auto-focus state change
notifications through camera2_notify_callback() and stored in
android.control.afTriggerId.


Send a cancel message to the autofocus algorithm. The effect of the
cancellation depends on the autofocus mode in effect when the trigger is
received, which is the mode listed in the latest capture request to be
dequeued by the HAL. If the AF mode is OFF or EDOF, the cancel has no
effect.  For other modes, the lens should return to its default position,
any current autofocus scan must be canceled, and the AF state should be
set to INACTIVE.

The state of the autofocus cycle can be tracked in android.control.afMode
and the corresponding notification. Continuous autofocus modes may resume
focusing operations thereafter exactly as if the camera had just been set
to a continuous AF mode.

Ext1 is an ID that must be returned in subsequent auto-focus state change
notifications through camera2_notify_callback() and stored in
android.control.afTriggerId.


Trigger a pre-capture metering cycle, which may include firing the flash
to determine proper capture parameters. Typically, this trigger would be
fired for a half-depress of a camera shutter key, or before a snapshot
capture in general. The state of the metering cycle can be tracked in
android.control.aeMode and the corresponding notification.  If the
auto-exposure mode is OFF, the trigger does nothing.

Ext1 is an ID that must be returned in subsequent
auto-exposure/auto-white balance state change notifications through
camera2_notify_callback() and stored in android.control.aePrecaptureId.


Possible template types for construct_default_request()
"
      attribute 15580215 "CAMERA2_TEMPLATE_PREVIEW"
	public type class_ref 4350391 // anonymous153
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15580343 "CAMERA2_TEMPLATE_STILL_CAPTURE"
	public type class_ref 4350391 // anonymous153
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15580471 "CAMERA2_TEMPLATE_VIDEO_RECORD"
	public type class_ref 4350391 // anonymous153
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15580599 "CAMERA2_TEMPLATE_VIDEO_SNAPSHOT"
	public type class_ref 4350391 // anonymous153
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15580727 "CAMERA2_TEMPLATE_ZERO_SHUTTER_LAG"
	public type class_ref 4350391 // anonymous153
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15580855 "CAMERA2_TEMPLATE_COUNT"
	public type class_ref 4350391 // anonymous153
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4350519 "camera2_device_ops"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Standard camera preview operation with 3A on auto.


Standard camera high-quality still capture with 3A and flash on auto.


Standard video recording plus preview with 3A on auto, torch off.


High-quality still capture while recording video. Application will
include preview, video record, and full-resolution YUV or JPEG streams in
request. Must not cause stuttering on video stream. 3A on auto.


Zero-shutter-lag mode. Application will request preview and
full-resolution data for each frame, and reprocess it to JPEG when a
still image is requested by user. Settings should provide highest-quality
full-resolution images without compromising preview frame rate. 3A on
auto.

 Total number of templates 


Camera device operations

"
      attribute 15580983 "set_request_queue_src_ops"
	public explicit_type "/********************************************************************** * Request and frame queue setup and management methods */ /** * Pass in input request queue interface methods. */ int (*)(const struct camera2_device *, const camera2_request_queue_src_ops_t *request_src_ops)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}

    /**********************************************************************
     * Request and frame queue setup and management methods
     */

    /**
     * Pass in input request queue interface methods.
     */
    int (*${name})(const struct camera2_device *,
            const camera2_request_queue_src_ops_t *request_src_ops)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Request and frame queue setup and management methods


Pass in input request queue interface methods.

"
      end

      attribute 15581111 "notify_request_queue_not_empty"
	public explicit_type "/** * Notify device that the request queue is no longer empty. Must only be * called when the first buffer is added a new queue, or after the source * has returned NULL in response to a dequeue call. */ int (*)(const struct camera2_device *)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Notify device that the request queue is no longer empty. Must only be
     * called when the first buffer is added a new queue, or after the source
     * has returned NULL in response to a dequeue call.
     */
    int (*${name})(const struct camera2_device *)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Notify device that the request queue is no longer empty. Must only be
called when the first buffer is added a new queue, or after the source
has returned NULL in response to a dequeue call.

"
      end

      attribute 15581239 "set_frame_queue_dst_ops"
	public explicit_type "/** * Pass in output frame queue interface methods */ int (*)(const struct camera2_device *, const camera2_frame_queue_dst_ops_t *frame_dst_ops)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Pass in output frame queue interface methods
     */
    int (*${name})(const struct camera2_device *,
            const camera2_frame_queue_dst_ops_t *frame_dst_ops)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Pass in output frame queue interface methods

"
      end

      attribute 15581367 "get_in_progress_count"
	public explicit_type "/** * Number of camera requests being processed by the device at the moment * (captures/reprocesses that have had their request dequeued, but have not * yet been enqueued onto output pipeline(s) ). No streams may be released * by the framework until the in-progress count is 0. */ int (*)(const struct camera2_device *)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Number of camera requests being processed by the device at the moment
     * (captures/reprocesses that have had their request dequeued, but have not
     * yet been enqueued onto output pipeline(s) ). No streams may be released
     * by the framework until the in-progress count is 0.
     */
    int (*${name})(const struct camera2_device *)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Number of camera requests being processed by the device at the moment
(captures/reprocesses that have had their request dequeued, but have not
yet been enqueued onto output pipeline(s) ). No streams may be released
by the framework until the in-progress count is 0.

"
      end

      attribute 15581495 "flush_captures_in_progress"
	public explicit_type "/** * Flush all in-progress captures. This includes all dequeued requests * (regular or reprocessing) that have not yet placed any outputs into a * stream or the frame queue. Partially completed captures must be completed * normally. No new requests may be dequeued from the request queue until * the flush completes. */ int (*)(const struct camera2_device *)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Flush all in-progress captures. This includes all dequeued requests
     * (regular or reprocessing) that have not yet placed any outputs into a
     * stream or the frame queue. Partially completed captures must be completed
     * normally. No new requests may be dequeued from the request queue until
     * the flush completes.
     */
    int (*${name})(const struct camera2_device *)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Flush all in-progress captures. This includes all dequeued requests
(regular or reprocessing) that have not yet placed any outputs into a
stream or the frame queue. Partially completed captures must be completed
normally. No new requests may be dequeued from the request queue until
the flush completes.

"
      end

      attribute 15581623 "construct_default_request"
	public explicit_type "/** * Create a filled-in default request for standard camera use cases. * * The device must return a complete request that is configured to meet the * requested use case, which must be one of the CAMERA2_TEMPLATE_* * enums. All request control fields must be included, except for * android.request.outputStreams. * * The metadata buffer returned must be allocated with * allocate_camera_metadata. The framework takes ownership of the buffer. */ int (*)(const struct camera2_device *, int request_template, camera_metadata_t **request)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Create a filled-in default request for standard camera use cases.
     *
     * The device must return a complete request that is configured to meet the
     * requested use case, which must be one of the CAMERA2_TEMPLATE_*
     * enums. All request control fields must be included, except for
     * android.request.outputStreams.
     *
     * The metadata buffer returned must be allocated with
     * allocate_camera_metadata. The framework takes ownership of the buffer.
     */
    int (*${name})(const struct camera2_device *,
            int request_template,
            camera_metadata_t **request)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Create a filled-in default request for standard camera use cases.

The device must return a complete request that is configured to meet the
requested use case, which must be one of the CAMERA2_TEMPLATE_*
enums. All request control fields must be included, except for
android.request.outputStreams.

The metadata buffer returned must be allocated with
allocate_camera_metadata. The framework takes ownership of the buffer.

"
      end

      attribute 15581751 "allocate_stream"
	public explicit_type "/********************************************************************** * Stream management */ /** * allocate_stream: * * Allocate a new output stream for use, defined by the output buffer width, * height, target, and possibly the pixel format. Returns the new stream's * ID, gralloc usage flags, minimum queue buffer count, and possibly the * pixel format, on success. Error conditions: * * - Requesting a width/height/format combination not listed as * supported by the sensor's static characteristics * * - Asking for too many streams of a given format type (2 bayer raw * streams, for example). * * Input parameters: * * - width, height, format: Specification for the buffers to be sent through * this stream. Format is a value from the HAL_PIXEL_FORMAT_* list. If * HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED is used, then the platform * gralloc module will select a format based on the usage flags provided * by the camera HAL and the consumer of the stream. The camera HAL should * inspect the buffers handed to it in the register_stream_buffers call to * obtain the implementation-specific format if necessary. * * - stream_ops: A structure of function pointers for obtaining and queuing * up buffers for this stream. The underlying stream will be configured * based on the usage and max_buffers outputs. The methods in this * structure may not be called until after allocate_stream returns. * * Output parameters: * * - stream_id: An unsigned integer identifying this stream. This value is * used in incoming requests to identify the stream, and in releasing the * stream. * * - usage: The gralloc usage mask needed by the HAL device for producing * the requested type of data. This is used in allocating new gralloc * buffers for the stream buffer queue. * * - max_buffers: The maximum number of buffers the HAL device may need to * have dequeued at the same time. The device may not dequeue more buffers * than this value at the same time. * */ int (*)( const struct camera2_device *, // inputs uint32_t width, uint32_t height, int format, const camera2_stream_ops_t *stream_ops, // outputs uint32_t *stream_id, uint32_t *format_actual, // IGNORED, will be removed uint32_t *usage, uint32_t *max_buffers)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**********************************************************************
     * Stream management
     */

    /**
     * allocate_stream:
     *
     * Allocate a new output stream for use, defined by the output buffer width,
     * height, target, and possibly the pixel format.  Returns the new stream's
     * ID, gralloc usage flags, minimum queue buffer count, and possibly the
     * pixel format, on success. Error conditions:
     *
     *  - Requesting a width/height/format combination not listed as
     *    supported by the sensor's static characteristics
     *
     *  - Asking for too many streams of a given format type (2 bayer raw
     *    streams, for example).
     *
     * Input parameters:
     *
     * - width, height, format: Specification for the buffers to be sent through
     *   this stream. Format is a value from the HAL_PIXEL_FORMAT_* list. If
     *   HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED is used, then the platform
     *   gralloc module will select a format based on the usage flags provided
     *   by the camera HAL and the consumer of the stream. The camera HAL should
     *   inspect the buffers handed to it in the register_stream_buffers call to
     *   obtain the implementation-specific format if necessary.
     *
     * - stream_ops: A structure of function pointers for obtaining and queuing
     *   up buffers for this stream. The underlying stream will be configured
     *   based on the usage and max_buffers outputs. The methods in this
     *   structure may not be called until after allocate_stream returns.
     *
     * Output parameters:
     *
     * - stream_id: An unsigned integer identifying this stream. This value is
     *   used in incoming requests to identify the stream, and in releasing the
     *   stream.
     *
     * - usage: The gralloc usage mask needed by the HAL device for producing
     *   the requested type of data. This is used in allocating new gralloc
     *   buffers for the stream buffer queue.
     *
     * - max_buffers: The maximum number of buffers the HAL device may need to
     *   have dequeued at the same time. The device may not dequeue more buffers
     *   than this value at the same time.
     *
     */
    int (*${name})(
            const struct camera2_device *,
            // inputs
            uint32_t width,
            uint32_t height,
            int      format,
            const camera2_stream_ops_t *stream_ops,
            // outputs
            uint32_t *stream_id,
            uint32_t *format_actual, // IGNORED, will be removed
            uint32_t *usage,
            uint32_t *max_buffers)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Stream management


allocate_stream:

Allocate a new output stream for use, defined by the output buffer width,
height, target, and possibly the pixel format.  Returns the new stream's
ID, gralloc usage flags, minimum queue buffer count, and possibly the
pixel format, on success. Error conditions:

 - Requesting a width/height/format combination not listed as
   supported by the sensor's static characteristics

 - Asking for too many streams of a given format type (2 bayer raw
   streams, for example).

Input parameters:

- width, height, format: Specification for the buffers to be sent through
  this stream. Format is a value from the HAL_PIXEL_FORMAT_* list. If
  HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED is used, then the platform
  gralloc module will select a format based on the usage flags provided
  by the camera HAL and the consumer of the stream. The camera HAL should
  inspect the buffers handed to it in the register_stream_buffers call to
  obtain the implementation-specific format if necessary.

- stream_ops: A structure of function pointers for obtaining and queuing
  up buffers for this stream. The underlying stream will be configured
  based on the usage and max_buffers outputs. The methods in this
  structure may not be called until after allocate_stream returns.

Output parameters:

- stream_id: An unsigned integer identifying this stream. This value is
  used in incoming requests to identify the stream, and in releasing the
  stream.

- usage: The gralloc usage mask needed by the HAL device for producing
  the requested type of data. This is used in allocating new gralloc
  buffers for the stream buffer queue.

- max_buffers: The maximum number of buffers the HAL device may need to
  have dequeued at the same time. The device may not dequeue more buffers
  than this value at the same time.


"
      end

      attribute 15581879 "register_stream_buffers"
	public explicit_type "/** * Register buffers for a given stream. This is called after a successful * allocate_stream call, and before the first request referencing the stream * is enqueued. This method is intended to allow the HAL device to map or * otherwise prepare the buffers for later use. num_buffers is guaranteed to * be at least max_buffers (from allocate_stream), but may be larger. The * buffers will already be locked for use. At the end of the call, all the * buffers must be ready to be returned to the queue. If the stream format * was set to HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED, the camera HAL should * inspect the passed-in buffers here to determine any platform-private * pixel format information. */ int (*)( const struct camera2_device *, uint32_t stream_id, int num_buffers, buffer_handle_t *buffers)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Register buffers for a given stream. This is called after a successful
     * allocate_stream call, and before the first request referencing the stream
     * is enqueued. This method is intended to allow the HAL device to map or
     * otherwise prepare the buffers for later use. num_buffers is guaranteed to
     * be at least max_buffers (from allocate_stream), but may be larger. The
     * buffers will already be locked for use. At the end of the call, all the
     * buffers must be ready to be returned to the queue. If the stream format
     * was set to HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED, the camera HAL should
     * inspect the passed-in buffers here to determine any platform-private
     * pixel format information.
     */
    int (*${name})(
            const struct camera2_device *,
            uint32_t stream_id,
            int num_buffers,
            buffer_handle_t *buffers)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Register buffers for a given stream. This is called after a successful
allocate_stream call, and before the first request referencing the stream
is enqueued. This method is intended to allow the HAL device to map or
otherwise prepare the buffers for later use. num_buffers is guaranteed to
be at least max_buffers (from allocate_stream), but may be larger. The
buffers will already be locked for use. At the end of the call, all the
buffers must be ready to be returned to the queue. If the stream format
was set to HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED, the camera HAL should
inspect the passed-in buffers here to determine any platform-private
pixel format information.

"
      end

      attribute 15582007 "release_stream"
	public explicit_type "/** * Release a stream. Returns an error if called when get_in_progress_count * is non-zero, or if the stream id is invalid. */ int (*)( const struct camera2_device *, uint32_t stream_id)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Release a stream. Returns an error if called when get_in_progress_count
     * is non-zero, or if the stream id is invalid.
     */
    int (*${name})(
            const struct camera2_device *,
            uint32_t stream_id)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Release a stream. Returns an error if called when get_in_progress_count
is non-zero, or if the stream id is invalid.

"
      end

      attribute 15582135 "allocate_reprocess_stream"
	public explicit_type "/** * allocate_reprocess_stream: * * Allocate a new input stream for use, defined by the output buffer width, * height, and the pixel format. Returns the new stream's ID, gralloc usage * flags, and required simultaneously acquirable buffer count, on * success. Error conditions: * * - Requesting a width/height/format combination not listed as * supported by the sensor's static characteristics * * - Asking for too many reprocessing streams to be configured at once. * * Input parameters: * * - width, height, format: Specification for the buffers to be sent through * this stream. Format must be a value from the HAL_PIXEL_FORMAT_* list. * * - reprocess_stream_ops: A structure of function pointers for acquiring * and releasing buffers for this stream. The underlying stream will be * configured based on the usage and max_buffers outputs. * * Output parameters: * * - stream_id: An unsigned integer identifying this stream. This value is * used in incoming requests to identify the stream, and in releasing the * stream. These ids are numbered separately from the input stream ids. * * - consumer_usage: The gralloc usage mask needed by the HAL device for * consuming the requested type of data. This is used in allocating new * gralloc buffers for the stream buffer queue. * * - max_buffers: The maximum number of buffers the HAL device may need to * have acquired at the same time. The device may not have more buffers * acquired at the same time than this value. * */ int (*)(const struct camera2_device *, uint32_t width, uint32_t height, uint32_t format, const camera2_stream_in_ops_t *reprocess_stream_ops, // outputs uint32_t *stream_id, uint32_t *consumer_usage, uint32_t *max_buffers)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * allocate_reprocess_stream:
     *
     * Allocate a new input stream for use, defined by the output buffer width,
     * height, and the pixel format.  Returns the new stream's ID, gralloc usage
     * flags, and required simultaneously acquirable buffer count, on
     * success. Error conditions:
     *
     *  - Requesting a width/height/format combination not listed as
     *    supported by the sensor's static characteristics
     *
     *  - Asking for too many reprocessing streams to be configured at once.
     *
     * Input parameters:
     *
     * - width, height, format: Specification for the buffers to be sent through
     *   this stream. Format must be a value from the HAL_PIXEL_FORMAT_* list.
     *
     * - reprocess_stream_ops: A structure of function pointers for acquiring
     *   and releasing buffers for this stream. The underlying stream will be
     *   configured based on the usage and max_buffers outputs.
     *
     * Output parameters:
     *
     * - stream_id: An unsigned integer identifying this stream. This value is
     *   used in incoming requests to identify the stream, and in releasing the
     *   stream. These ids are numbered separately from the input stream ids.
     *
     * - consumer_usage: The gralloc usage mask needed by the HAL device for
     *   consuming the requested type of data. This is used in allocating new
     *   gralloc buffers for the stream buffer queue.
     *
     * - max_buffers: The maximum number of buffers the HAL device may need to
     *   have acquired at the same time. The device may not have more buffers
     *   acquired at the same time than this value.
     *
     */
    int (*${name})(const struct camera2_device *,
            uint32_t width,
            uint32_t height,
            uint32_t format,
            const camera2_stream_in_ops_t *reprocess_stream_ops,
            // outputs
            uint32_t *stream_id,
            uint32_t *consumer_usage,
            uint32_t *max_buffers)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "allocate_reprocess_stream:

Allocate a new input stream for use, defined by the output buffer width,
height, and the pixel format.  Returns the new stream's ID, gralloc usage
flags, and required simultaneously acquirable buffer count, on
success. Error conditions:

 - Requesting a width/height/format combination not listed as
   supported by the sensor's static characteristics

 - Asking for too many reprocessing streams to be configured at once.

Input parameters:

- width, height, format: Specification for the buffers to be sent through
  this stream. Format must be a value from the HAL_PIXEL_FORMAT_* list.

- reprocess_stream_ops: A structure of function pointers for acquiring
  and releasing buffers for this stream. The underlying stream will be
  configured based on the usage and max_buffers outputs.

Output parameters:

- stream_id: An unsigned integer identifying this stream. This value is
  used in incoming requests to identify the stream, and in releasing the
  stream. These ids are numbered separately from the input stream ids.

- consumer_usage: The gralloc usage mask needed by the HAL device for
  consuming the requested type of data. This is used in allocating new
  gralloc buffers for the stream buffer queue.

- max_buffers: The maximum number of buffers the HAL device may need to
  have acquired at the same time. The device may not have more buffers
  acquired at the same time than this value.


"
      end

      attribute 15582263 "allocate_reprocess_stream_from_stream"
	public explicit_type "/** * allocate_reprocess_stream_from_stream: * * Allocate a new input stream for use, which will use the buffers allocated * for an existing output stream. That is, after the HAL enqueues a buffer * onto the output stream, it may see that same buffer handed to it from * this input reprocessing stream. After the HAL releases the buffer back to * the reprocessing stream, it will be returned to the output queue for * reuse. * * Error conditions: * * - Using an output stream of unsuitable size/format for the basis of the * reprocessing stream. * * - Attempting to allocatee too many reprocessing streams at once. * * Input parameters: * * - output_stream_id: The ID of an existing output stream which has * a size and format suitable for reprocessing. * * - reprocess_stream_ops: A structure of function pointers for acquiring * and releasing buffers for this stream. The underlying stream will use * the same graphics buffer handles as the output stream uses. * * Output parameters: * * - stream_id: An unsigned integer identifying this stream. This value is * used in incoming requests to identify the stream, and in releasing the * stream. These ids are numbered separately from the input stream ids. * * The HAL client must always release the reprocessing stream before it * releases the output stream it is based on. * */ int (*)(const struct camera2_device *, uint32_t output_stream_id, const camera2_stream_in_ops_t *reprocess_stream_ops, // outputs uint32_t *stream_id)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * allocate_reprocess_stream_from_stream:
     *
     * Allocate a new input stream for use, which will use the buffers allocated
     * for an existing output stream. That is, after the HAL enqueues a buffer
     * onto the output stream, it may see that same buffer handed to it from
     * this input reprocessing stream. After the HAL releases the buffer back to
     * the reprocessing stream, it will be returned to the output queue for
     * reuse.
     *
     * Error conditions:
     *
     * - Using an output stream of unsuitable size/format for the basis of the
     *   reprocessing stream.
     *
     * - Attempting to allocatee too many reprocessing streams at once.
     *
     * Input parameters:
     *
     * - output_stream_id: The ID of an existing output stream which has
     *   a size and format suitable for reprocessing.
     *
     * - reprocess_stream_ops: A structure of function pointers for acquiring
     *   and releasing buffers for this stream. The underlying stream will use
     *   the same graphics buffer handles as the output stream uses.
     *
     * Output parameters:
     *
     * - stream_id: An unsigned integer identifying this stream. This value is
     *   used in incoming requests to identify the stream, and in releasing the
     *   stream. These ids are numbered separately from the input stream ids.
     *
     * The HAL client must always release the reprocessing stream before it
     * releases the output stream it is based on.
     *
     */
    int (*${name})(const struct camera2_device *,
            uint32_t output_stream_id,
            const camera2_stream_in_ops_t *reprocess_stream_ops,
            // outputs
            uint32_t *stream_id)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "allocate_reprocess_stream_from_stream:

Allocate a new input stream for use, which will use the buffers allocated
for an existing output stream. That is, after the HAL enqueues a buffer
onto the output stream, it may see that same buffer handed to it from
this input reprocessing stream. After the HAL releases the buffer back to
the reprocessing stream, it will be returned to the output queue for
reuse.

Error conditions:

- Using an output stream of unsuitable size/format for the basis of the
  reprocessing stream.

- Attempting to allocatee too many reprocessing streams at once.

Input parameters:

- output_stream_id: The ID of an existing output stream which has
  a size and format suitable for reprocessing.

- reprocess_stream_ops: A structure of function pointers for acquiring
  and releasing buffers for this stream. The underlying stream will use
  the same graphics buffer handles as the output stream uses.

Output parameters:

- stream_id: An unsigned integer identifying this stream. This value is
  used in incoming requests to identify the stream, and in releasing the
  stream. These ids are numbered separately from the input stream ids.

The HAL client must always release the reprocessing stream before it
releases the output stream it is based on.


"
      end

      attribute 15582391 "release_reprocess_stream"
	public explicit_type "/** * Release a reprocessing stream. Returns an error if called when * get_in_progress_count is non-zero, or if the stream id is not * valid. */ int (*)( const struct camera2_device *, uint32_t stream_id)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Release a reprocessing stream. Returns an error if called when
     * get_in_progress_count is non-zero, or if the stream id is not
     * valid.
     */
    int (*${name})(
            const struct camera2_device *,
            uint32_t stream_id)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Release a reprocessing stream. Returns an error if called when
get_in_progress_count is non-zero, or if the stream id is not
valid.

"
      end

      attribute 15582519 "trigger_action"
	public explicit_type "/********************************************************************** * Miscellaneous methods */ /** * Trigger asynchronous activity. This is used for triggering special * behaviors of the camera 3A routines when they are in use. See the * documentation for CAMERA2_TRIGGER_* above for details of the trigger ids * and their arguments. */ int (*)(const struct camera2_device *, uint32_t trigger_id, int32_t ext1, int32_t ext2)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**********************************************************************
     * Miscellaneous methods
     */

    /**
     * Trigger asynchronous activity. This is used for triggering special
     * behaviors of the camera 3A routines when they are in use. See the
     * documentation for CAMERA2_TRIGGER_* above for details of the trigger ids
     * and their arguments.
     */
    int (*${name})(const struct camera2_device *,
            uint32_t trigger_id,
            int32_t ext1,
            int32_t ext2)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Miscellaneous methods


Trigger asynchronous activity. This is used for triggering special
behaviors of the camera 3A routines when they are in use. See the
documentation for CAMERA2_TRIGGER_* above for details of the trigger ids
and their arguments.

"
      end

      attribute 15582647 "set_notify_callback"
	public explicit_type "/** * Notification callback setup */ int (*)(const struct camera2_device *, camera2_notify_callback notify_cb, void *user)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Notification callback setup
     */
    int (*${name})(const struct camera2_device *,
            camera2_notify_callback notify_cb,
            void *user)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Notification callback setup

"
      end

      attribute 15582775 "get_metadata_vendor_tag_ops"
	public explicit_type "/** * Get methods to query for vendor extension metadata tag infomation. May * set ops to NULL if no vendor extension tags are defined. */ int (*)(const struct camera2_device*, vendor_tag_query_ops_t **ops)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Get methods to query for vendor extension metadata tag infomation. May
     * set ops to NULL if no vendor extension tags are defined.
     */
    int (*${name})(const struct camera2_device*,
            vendor_tag_query_ops_t **ops)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Get methods to query for vendor extension metadata tag infomation. May
set ops to NULL if no vendor extension tags are defined.

"
      end

      attribute 15582903 "dump"
	public explicit_type "/** * Dump state of the camera hardware */ int (*)(const struct camera2_device *, int fd)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Dump state of the camera hardware
     */
    int (*${name})(const struct camera2_device *, int fd)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Dump state of the camera hardware

"
      end

      attribute 15583031 "get_instance_metadata"
	public explicit_type "/** * Get device-instance-specific metadata. This metadata must be constant for * a single instance of the camera device, but may be different between * open() calls. The returned camera_metadata pointer must be valid until * the device close() method is called. * * Version information: * * CAMERA_DEVICE_API_VERSION_2_0: * * Not available. Framework may not access this function pointer. * * CAMERA_DEVICE_API_VERSION_2_1: * * Valid. Can be called by the framework. * */ int (*)(const struct camera2_device *, camera_metadata **instance_metadata)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Get device-instance-specific metadata. This metadata must be constant for
     * a single instance of the camera device, but may be different between
     * open() calls. The returned camera_metadata pointer must be valid until
     * the device close() method is called.
     *
     * Version information:
     *
     * CAMERA_DEVICE_API_VERSION_2_0:
     *
     *   Not available. Framework may not access this function pointer.
     *
     * CAMERA_DEVICE_API_VERSION_2_1:
     *
     *   Valid. Can be called by the framework.
     *
     */
    int (*${name})(const struct camera2_device *,
            camera_metadata **instance_metadata)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Get device-instance-specific metadata. This metadata must be constant for
a single instance of the camera device, but may be different between
open() calls. The returned camera_metadata pointer must be valid until
the device close() method is called.

Version information:

CAMERA_DEVICE_API_VERSION_2_0:

  Not available. Framework may not access this function pointer.

CAMERA_DEVICE_API_VERSION_2_1:

  Valid. Can be called by the framework.


"
      end
    end

    class 4350647 "camera2_device_ops_t"
      visibility package stereotype "typedef" base_type class_ref 4350519 // camera2_device_ops
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4350775 "camera2_device"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
Camera device definition

"
      classrelation 8339255 // common (<directional composition>)
	relation 8339255 *-->
	  a role_name "common" public
	    comment "common.version must equal CAMERA_DEVICE_API_VERSION_2_0 to identify
this device as implementing version 2.0 of the camera device HAL.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8339255 // common (<directional composition>)
	  b parent class_ref 4305975 // hw_device_t
      end

      classrelation 8339383 // ops (<unidirectional association>)
	relation 8339383 --->
	  a role_name "ops" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8339383 // ops (<unidirectional association>)
	  b parent class_ref 4350647 // camera2_device_ops_t
      end

      attribute 15583159 "priv"
	public explicit_type "void"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4350903 "camera2_device_t"
      visibility package stereotype "typedef" base_type class_ref 4350775 // camera2_device
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4351031 "camera3_stream_type"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
Camera3 stream and stream buffer definitions.

These structs and enums define the handles and contents of the input and
output streams connecting the HAL to various framework and application buffer
consumers. Each stream is backed by a gralloc buffer queue.



camera3_stream_type_t:

The type of the camera stream, which defines whether the camera HAL device is
the producer or the consumer for that stream, and how the buffers of the
stream relate to the other streams.
"
      attribute 15583287 "CAMERA3_STREAM_OUTPUT"
	public type class_ref 4351031 // camera3_stream_type
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15583415 "CAMERA3_STREAM_INPUT"
	public type class_ref 4351031 // camera3_stream_type
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15583543 "CAMERA3_STREAM_BIDIRECTIONAL"
	public type class_ref 4351031 // camera3_stream_type
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15583671 "CAMERA3_NUM_STREAM_TYPES"
	public type class_ref 4351031 // camera3_stream_type
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4351159 "camera3_stream_type_t"
      visibility package stereotype "typedef" base_type class_ref 4351031 // camera3_stream_type
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4351287 "camera3_stream_rotation"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This stream is an output stream; the camera HAL device will be
responsible for filling buffers from this stream with newly captured or
reprocessed image data.


This stream is an input stream; the camera HAL device will be responsible
for reading buffers from this stream and sending them through the camera
processing pipeline, as if the buffer was a newly captured image from the
imager.

The pixel format for input stream can be any format reported by
android.scaler.availableInputOutputFormatsMap. The pixel format of the
output stream that is used to produce the reprocessing data may be any
format reported by android.scaler.availableStreamConfigurations. The
supported input/output stream combinations depends the camera device
capabilities, see android.scaler.availableInputOutputFormatsMap for
stream map details.

This kind of stream is generally used to reprocess data into higher
quality images (that otherwise would cause a frame rate performance
loss), or to do off-line reprocessing.

CAMERA_DEVICE_API_VERSION_3_3:
   The typical use cases are OPAQUE (typically ZSL) and YUV reprocessing,
   see S8.2, S8.3 and S10 for more details.


This stream can be used for input and output. Typically, the stream is
used as an output stream, but occasionally one already-filled buffer may
be sent back to the HAL device for reprocessing.

This kind of stream is meant generally for Zero Shutter Lag (ZSL)
features, where copying the captured image from the output buffer to the
reprocessing input buffer would be expensive. See S8.1 for more details.

Note that the HAL will always be reprocessing data it produced.



Total number of framework-defined stream types


camera3_stream_rotation_t:

The required counterclockwise rotation of camera stream.
"
      attribute 15583799 "CAMERA3_STREAM_ROTATION_0"
	public type class_ref 4351287 // camera3_stream_rotation
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15583927 "CAMERA3_STREAM_ROTATION_90"
	public type class_ref 4351287 // camera3_stream_rotation
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15584055 "CAMERA3_STREAM_ROTATION_180"
	public type class_ref 4351287 // camera3_stream_rotation
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15584183 "CAMERA3_STREAM_ROTATION_270"
	public type class_ref 4351287 // camera3_stream_rotation
	init_value " 3
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4351415 "camera3_stream_rotation_t"
      visibility package stereotype "typedef" base_type class_ref 4351287 // camera3_stream_rotation
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4351543 "camera3_stream_configuration_mode"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " No rotation 
 Rotate by 90 degree counterclockwise 
 Rotate by 180 degree counterclockwise 
 Rotate by 270 degree counterclockwise 

camera3_stream_configuration_mode_t:

This defines the general operation mode for the HAL (for a given stream configuration), where
modes besides NORMAL have different semantics, and usually limit the generality of the API in
exchange for higher performance in some particular area.
"
      attribute 15584311 "CAMERA3_STREAM_CONFIGURATION_NORMAL_MODE"
	public type class_ref 4351543 // camera3_stream_configuration_mode
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15584439 "CAMERA3_STREAM_CONFIGURATION_CONSTRAINED_HIGH_SPEED_MODE"
	public type class_ref 4351543 // camera3_stream_configuration_mode
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15584567 "CAMERA3_VENDOR_STREAM_CONFIGURATION_MODE_START"
	public type class_ref 4351543 // camera3_stream_configuration_mode
	init_value " 0x8000
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4351671 "camera3_stream_configuration_mode_t"
      visibility package stereotype "typedef" base_type class_ref 4351543 // camera3_stream_configuration_mode
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4351799 "camera3_stream"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Normal stream configuration operation mode. This is the default camera operation mode,
where all semantics of HAL APIs and metadata controls apply.


Special constrained high speed operation mode for devices that can not support high
speed output in NORMAL mode. All streams in this configuration are operating at high speed
mode and have different characteristics and limitations to achieve high speed output.
The NORMAL mode can still be used for high speed output if the HAL can support high speed
output while satisfying all the semantics of HAL APIs and metadata controls. It is
recommended for the HAL to support high speed output in NORMAL mode (by advertising the high
speed FPS ranges in android.control.aeAvailableTargetFpsRanges) if possible.

This mode has below limitations/requirements:

  1. The HAL must support up to 2 streams with sizes reported by
     android.control.availableHighSpeedVideoConfigurations.
  2. In this mode, the HAL is expected to output up to 120fps or higher. This mode must
     support the targeted FPS range and size configurations reported by
     android.control.availableHighSpeedVideoConfigurations.
  3. The HAL must support HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED output stream format.
  4. To achieve efficient high speed streaming, the HAL may have to aggregate
     multiple frames together and send to camera device for processing where the request
     controls are same for all the frames in this batch (batch mode). The HAL must support
     max batch size and the max batch size requirements defined by
     android.control.availableHighSpeedVideoConfigurations.
  5. In this mode, the HAL must override aeMode, awbMode, and afMode to ON, ON, and
     CONTINUOUS_VIDEO, respectively. All post-processing block mode controls must be
     overridden to be FAST. Therefore, no manual control of capture and post-processing
     parameters is possible. All other controls operate the same as when
     android.control.mode == AUTO. This means that all other android.control.* fields
     must continue to work, such as

     android.control.aeTargetFpsRange
     android.control.aeExposureCompensation
     android.control.aeLock
     android.control.awbLock
     android.control.effectMode
     android.control.aeRegions
     android.control.afRegions
     android.control.awbRegions
     android.control.afTrigger
     android.control.aePrecaptureTrigger

     Outside of android.control.*, the following controls must work:

     android.flash.mode (TORCH mode only, automatic flash for still capture will not work
     since aeMode is ON)
     android.lens.opticalStabilizationMode (if it is supported)
     android.scaler.cropRegion
     android.statistics.faceDetectMode (if it is supported)

For more details about high speed stream requirements, see
android.control.availableHighSpeedVideoConfigurations and CONSTRAINED_HIGH_SPEED_VIDEO
capability defined in android.request.availableCapabilities.

This mode only needs to be supported by HALs that include CONSTRAINED_HIGH_SPEED_VIDEO in
the android.request.availableCapabilities static metadata.


First value for vendor-defined stream configuration modes.


camera3_stream_t:

A handle to a single camera input or output stream. A stream is defined by
the framework by its buffer resolution and format, and additionally by the
HAL with the gralloc usage flags and the maximum in-flight buffer count.

The stream structures are owned by the framework, but pointers to a
camera3_stream passed into the HAL by configure_streams() are valid until the
end of the first subsequent configure_streams() call that _does not_ include
that camera3_stream as an argument, or until the end of the close() call.

All camera3_stream framework-controlled members are immutable once the
camera3_stream is passed into configure_streams().  The HAL may only change
the HAL-controlled parameters during a configure_streams() call, except for
the contents of the private pointer.

If a configure_streams() call returns a non-fatal error, all active streams
remain valid as if configure_streams() had not been called.

The endpoint of the stream is not visible to the camera HAL device.
In DEVICE_API_VERSION_3_1, this was changed to share consumer usage flags
on streams where the camera is a producer (OUTPUT and BIDIRECTIONAL stream
types) see the usage field below.
"
      attribute 15584695 "stream_type"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Set by framework before configure_streams()


The type of the stream, one of the camera3_stream_type_t values.

"
      end

      attribute 15584823 "format"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The pixel format for the buffers in this stream. Format is a value from
the HAL_PIXEL_FORMAT_* list in system/core/include/system/graphics.h, or
from device-specific headers.

If HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED is used, then the platform
gralloc module will select a format based on the usage flags provided by
the camera device and the other endpoint of the stream.

<= CAMERA_DEVICE_API_VERSION_3_1:

The camera HAL device must inspect the buffers handed to it in the
subsequent register_stream_buffers() call to obtain the
implementation-specific format details, if necessary.

>= CAMERA_DEVICE_API_VERSION_3_2:

register_stream_buffers() won't be called by the framework, so the HAL
should configure the ISP and sensor pipeline based purely on the sizes,
usage flags, and formats for the configured streams.

"
      end

      attribute 15584951 "priv"
	public explicit_type "void"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A handle to HAL-private information for the stream. Will not be inspected
by the framework code.

"
      end

      attribute 15585079 "data_space"
	public explicit_type "android_dataspace_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A field that describes the contents of the buffer. The format and buffer
dimensions define the memory layout and structure of the stream buffers,
while dataSpace defines the meaning of the data within the buffer.

For most formats, dataSpace defines the color space of the image data.
In addition, for some formats, dataSpace indicates whether image- or
depth-based data is requested.  See system/core/include/system/graphics.h
for details of formats and valid dataSpace values for each format.

Version information:

< CAMERA_DEVICE_API_VERSION_3_3:

  Not defined and should not be accessed. dataSpace should be assumed to
  be HAL_DATASPACE_UNKNOWN, and the appropriate color space, etc, should
  be determined from the usage flags and the format.

= CAMERA_DEVICE_API_VERSION_3_3:

  Always set by the camera service. HAL must use this dataSpace to
  configure the stream to the correct colorspace, or to select between
  color and depth outputs if supported. The dataspace values are the
  legacy definitions in graphics.h

>= CAMERA_DEVICE_API_VERSION_3_4:

  Always set by the camera service. HAL must use this dataSpace to
  configure the stream to the correct colorspace, or to select between
  color and depth outputs if supported. The dataspace values are set
  using the V0 dataspace definitions in graphics.h

"
      end

      attribute 15585207 "rotation"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The required output rotation of the stream, one of
the camera3_stream_rotation_t values. This must be inspected by HAL along
with stream width and height. For example, if the rotation is 90 degree
and the stream width and height is 720 and 1280 respectively, camera service
will supply buffers of size 720x1280, and HAL should capture a 1280x720 image
and rotate the image by 90 degree counterclockwise. The rotation field is
no-op when the stream type is input. Camera HAL must ignore the rotation
field for an input stream.

<= CAMERA_DEVICE_API_VERSION_3_2:

   Not defined and must not be accessed. HAL must not apply any rotation
   on output images.

>= CAMERA_DEVICE_API_VERSION_3_3:

   Always set by camera service. HAL must inspect this field during stream
   configuration and returns -EINVAL if HAL cannot perform such rotation.
   HAL must always support CAMERA3_STREAM_ROTATION_0, so a
   configure_streams() call must not fail for unsupported rotation if
   rotation field of all streams is CAMERA3_STREAM_ROTATION_0.


"
      end

      attribute 15585335 "reserved"
	public explicit_type "void"
	multiplicity "[7]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " reserved for future use 
"
      end
    end

    class 4351927 "camera3_stream_t"
      visibility package stereotype "typedef" base_type class_ref 4351799 // camera3_stream
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4352055 "camera3_stream_configuration"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "camera3_stream_configuration_t:

A structure of stream definitions, used by configure_streams(). This
structure defines all the output streams and the reprocessing input
stream for the current camera use case.
"
      attribute 15585463 "streams"
	public type class_ref 4351927 // camera3_stream_t
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "An array of camera stream pointers, defining the input/output
configuration for the camera HAL device.

At most one input-capable stream may be defined (INPUT or BIDIRECTIONAL)
in a single configuration.

At least one output-capable stream must be defined (OUTPUT or
BIDIRECTIONAL).

"
      end

    end

    class 4352183 "camera3_stream_configuration_t"
      visibility package stereotype "typedef" base_type class_ref 4352055 // camera3_stream_configuration
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4352311 "camera3_buffer_status"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "camera3_buffer_status_t:

The current status of a single stream buffer.
"
      attribute 15585591 "CAMERA3_BUFFER_STATUS_OK"
	public type class_ref 4352311 // camera3_buffer_status
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15585719 "CAMERA3_BUFFER_STATUS_ERROR"
	public type class_ref 4352311 // camera3_buffer_status
	init_value " 1

"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4352439 "camera3_buffer_status_t"
      visibility package stereotype "typedef" base_type class_ref 4352311 // camera3_buffer_status
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4352567 "camera3_stream_buffer"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The buffer is in a normal state, and can be used after waiting on its
sync fence.


The buffer does not contain valid data, and the data in it should not be
used. The sync fence must still be waited on before reusing the buffer.


camera3_stream_buffer_t:

A single buffer from a camera3 stream. It includes a handle to its parent
stream, the handle to the gralloc buffer itself, and sync fences

The buffer does not specify whether it is to be used for input or output;
that is determined by its parent stream type and how the buffer is passed to
the HAL device.
"
      classrelation 8340279 // stream (<unidirectional association>)
	relation 8340279 --->
	  a role_name "stream" public
	    comment "The handle of the stream this buffer is associated with

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8340279 // stream (<unidirectional association>)
	  b parent class_ref 4351927 // camera3_stream_t
      end

      attribute 15585847 "buffer"
	public explicit_type "buffer_handle_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The native handle to the buffer

"
      end

      attribute 15585975 "status"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Current state of the buffer, one of the camera3_buffer_status_t
values. The framework will not pass buffers to the HAL that are in an
error state. In case a buffer could not be filled by the HAL, it must
have its status set to CAMERA3_BUFFER_STATUS_ERROR when returned to the
framework with process_capture_result().

"
      end

      attribute 15586103 "acquire_fence"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The acquire sync fence for this buffer. The HAL must wait on this fence
fd before attempting to read from or write to this buffer.

The framework may be set to -1 to indicate that no waiting is necessary
for this buffer.

When the HAL returns an output buffer to the framework with
process_capture_result(), the acquire_fence must be set to -1. If the HAL
never waits on the acquire_fence due to an error in filling a buffer,
when calling process_capture_result() the HAL must set the release_fence
of the buffer to be the acquire_fence passed to it by the framework. This
will allow the framework to wait on the fence before reusing the buffer.

For input buffers, the HAL must not change the acquire_fence field during
the process_capture_request() call.

>= CAMERA_DEVICE_API_VERSION_3_2:

When the HAL returns an input buffer to the framework with
process_capture_result(), the acquire_fence must be set to -1. If the HAL
never waits on input buffer acquire fence due to an error, the sync
fences should be handled similarly to the way they are handled for output
buffers.

"
      end

      attribute 15586231 "release_fence"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The release sync fence for this buffer. The HAL must set this fence when
returning buffers to the framework, or write -1 to indicate that no
waiting is required for this buffer.

For the output buffers, the fences must be set in the output_buffers
array passed to process_capture_result().

<= CAMERA_DEVICE_API_VERSION_3_1:

For the input buffer, the release fence must be set by the
process_capture_request() call.

>= CAMERA_DEVICE_API_VERSION_3_2:

For the input buffer, the fences must be set in the input_buffer
passed to process_capture_result().

After signaling the release_fence for this buffer, the HAL
should not make any further attempts to access this buffer as the
ownership has been fully transferred back to the framework.

If a fence of -1 was specified then the ownership of this buffer
is transferred back immediately upon the call of process_capture_result.

"
      end
    end

    class 4352695 "camera3_stream_buffer_t"
      visibility package stereotype "typedef" base_type class_ref 4352567 // camera3_stream_buffer
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4352823 "camera3_stream_buffer_set"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "camera3_stream_buffer_set_t:

The complete set of gralloc buffers for a stream. This structure is given to
register_stream_buffers() to allow the camera HAL device to register/map/etc
newly allocated stream buffers.

>= CAMERA_DEVICE_API_VERSION_3_2:

Deprecated (and not used). In particular,
register_stream_buffers is also deprecated and will never be invoked.

"
      classrelation 8340407 // stream (<unidirectional association>)
	relation 8340407 --->
	  a role_name "stream" public
	    comment "The stream handle for the stream these buffers belong to

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8340407 // stream (<unidirectional association>)
	  b parent class_ref 4351927 // camera3_stream_t
      end

      attribute 15586359 "buffers"
	public explicit_type "buffer_handle_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The array of gralloc buffer handles for this stream. If the stream format
is set to HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED, the camera HAL device
should inspect the passed-in buffers to determine any platform-private
pixel format information.

"
      end
    end

    class 4352951 "camera3_stream_buffer_set_t"
      visibility package stereotype "typedef" base_type class_ref 4352823 // camera3_stream_buffer_set
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4353079 "camera3_jpeg_blob"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "camera3_jpeg_blob:

Transport header for compressed JPEG buffers in output streams.

To capture JPEG images, a stream is created using the pixel format
HAL_PIXEL_FORMAT_BLOB. The buffer size for the stream is calculated by the
framework, based on the static metadata field android.jpeg.maxSize. Since
compressed JPEG images are of variable size, the HAL needs to include the
final size of the compressed image using this structure inside the output
stream buffer. The JPEG blob ID field must be set to CAMERA3_JPEG_BLOB_ID.

Transport header should be at the end of the JPEG output stream buffer. That
means the jpeg_blob_id must start at byte[buffer_size -
sizeof(camera3_jpeg_blob)], where the buffer_size is the size of gralloc buffer.
Any HAL using this transport header must account for it in android.jpeg.maxSize
The JPEG data itself starts at the beginning of the buffer and should be
jpeg_size bytes long.
"
    end

    class 4353207 "camera3_jpeg_blob_t"
      visibility package stereotype "typedef" base_type class_ref 4353079 // camera3_jpeg_blob
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4353335 "anonymous154"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15586487 "CAMERA3_JPEG_BLOB_ID"
	public type class_ref 4353335 // anonymous154
	init_value " 0x00FF
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4353463 "camera3_msg_type"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
Message definitions for the HAL notify() callback.

These definitions are used for the HAL notify callback, to signal
asynchronous events from the HAL device to the Android framework.



camera3_msg_type:

Indicates the type of message sent, which specifies which member of the
message union is valid.

"
      attribute 15586615 "CAMERA3_MSG_ERROR"
	public type class_ref 4353463 // camera3_msg_type
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15586743 "CAMERA3_MSG_SHUTTER"
	public type class_ref 4353463 // camera3_msg_type
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15586871 "CAMERA3_NUM_MESSAGES"
	public type class_ref 4353463 // camera3_msg_type
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4353591 "camera3_msg_type_t"
      visibility package stereotype "typedef" base_type class_ref 4353463 // camera3_msg_type
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4353719 "camera3_error_msg_code"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An error has occurred. camera3_notify_msg.message.error contains the
error information.


The exposure of a given request or processing a reprocess request has
begun. camera3_notify_msg.message.shutter contains the information
the capture.


Number of framework message types


Defined error codes for CAMERA_MSG_ERROR
"
      attribute 15586999 "CAMERA3_MSG_ERROR_DEVICE"
	public type class_ref 4353719 // camera3_error_msg_code
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15587127 "CAMERA3_MSG_ERROR_REQUEST"
	public type class_ref 4353719 // camera3_error_msg_code
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15587255 "CAMERA3_MSG_ERROR_RESULT"
	public type class_ref 4353719 // camera3_error_msg_code
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15587383 "CAMERA3_MSG_ERROR_BUFFER"
	public type class_ref 4353719 // camera3_error_msg_code
	init_value " 4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15587511 "CAMERA3_MSG_NUM_ERRORS"
	public type class_ref 4353719 // camera3_error_msg_code
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4353847 "camera3_error_msg_code_t"
      visibility package stereotype "typedef" base_type class_ref 4353719 // camera3_error_msg_code
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4353975 "camera3_error_msg"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A serious failure occured. No further frames or buffer streams will
be produced by the device. Device should be treated as closed. The
client must reopen the device to use it again. The frame_number field
is unused.


An error has occurred in processing a request. No output (metadata or
buffers) will be produced for this request. The frame_number field
specifies which request has been dropped. Subsequent requests are
unaffected, and the device remains operational.


An error has occurred in producing an output result metadata buffer
for a request, but output stream buffers for it will still be
available. Subsequent requests are unaffected, and the device remains
operational.  The frame_number field specifies the request for which
result metadata won't be available.


An error has occurred in placing an output buffer into a stream for a
request. The frame metadata and other buffers may still be
available. Subsequent requests are unaffected, and the device remains
operational. The frame_number field specifies the request for which the
buffer was dropped, and error_stream contains a pointer to the stream
that dropped the frame.


Number of error types


camera3_error_msg_t:

Message contents for CAMERA3_MSG_ERROR
"
      classrelation 8341047 // error_stream (<unidirectional association>)
	relation 8341047 --->
	  a role_name "error_stream" public
	    comment "Pointer to the stream that had a failure. NULL if the stream isn't
applicable to the error.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8341047 // error_stream (<unidirectional association>)
	  b parent class_ref 4351927 // camera3_stream_t
      end

      attribute 15587639 "error_code"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The code for this error; one of the CAMERA_MSG_ERROR enum values.

"
      end
    end

    class 4354103 "camera3_error_msg_t"
      visibility package stereotype "typedef" base_type class_ref 4353975 // camera3_error_msg
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4354231 "camera3_shutter_msg"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "camera3_shutter_msg_t:

Message contents for CAMERA3_MSG_SHUTTER
"
    end

    class 4354359 "camera3_shutter_msg_t"
      visibility package stereotype "typedef" base_type class_ref 4354231 // camera3_shutter_msg
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4354487 "camera3_notify_msg"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "camera3_notify_msg_t:

The message structure sent to camera3_callback_ops_t.notify()
"
      attribute 15587767 "type"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The message type. One of camera3_notify_msg_type, or a private extension.

"
      end

      attribute 15587895 "message"
	public explicit_type "<complex type>"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}union  {
        /**
         * Error message contents. Valid if type is CAMERA3_MSG_ERROR
         */
        camera3_error_msg_t error;

        /**
         * Shutter message contents. Valid if type is CAMERA3_MSG_SHUTTER
         */
        camera3_shutter_msg_t shutter;

        /**
         * Generic message contents. Used to ensure a minimum size for custom
         * message types.
         */
        uint8_t generic[32];
    } ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4354615 "camera3_notify_msg_t"
      visibility package stereotype "typedef" base_type class_ref 4354487 // camera3_notify_msg
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4354743 "camera3_request_template"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
Capture request/result definitions for the HAL process_capture_request()
method, and the process_capture_result() callback.



camera3_request_template_t:

Available template types for
camera3_device_ops.construct_default_request_settings()
"
      attribute 15588023 "CAMERA3_TEMPLATE_PREVIEW"
	public type class_ref 4354743 // camera3_request_template
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15588151 "CAMERA3_TEMPLATE_STILL_CAPTURE"
	public type class_ref 4354743 // camera3_request_template
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15588279 "CAMERA3_TEMPLATE_VIDEO_RECORD"
	public type class_ref 4354743 // camera3_request_template
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15588407 "CAMERA3_TEMPLATE_VIDEO_SNAPSHOT"
	public type class_ref 4354743 // camera3_request_template
	init_value " 4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15588535 "CAMERA3_TEMPLATE_ZERO_SHUTTER_LAG"
	public type class_ref 4354743 // camera3_request_template
	init_value " 5"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15588663 "CAMERA3_TEMPLATE_MANUAL"
	public type class_ref 4354743 // camera3_request_template
	init_value " 6"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15588791 "CAMERA3_TEMPLATE_COUNT"
	public type class_ref 4354743 // camera3_request_template
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15588919 "CAMERA3_VENDOR_TEMPLATE_START"
	public type class_ref 4354743 // camera3_request_template
	init_value " 0x40000000

"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4354871 "camera3_request_template_t"
      visibility package stereotype "typedef" base_type class_ref 4354743 // camera3_request_template
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4354999 "camera3_capture_request"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Standard camera preview operation with 3A on auto.


Standard camera high-quality still capture with 3A and flash on auto.


Standard video recording plus preview with 3A on auto, torch off.


High-quality still capture while recording video. Application will
include preview, video record, and full-resolution YUV or JPEG streams in
request. Must not cause stuttering on video stream. 3A on auto.


Zero-shutter-lag mode. Application will request preview and
full-resolution data for each frame, and reprocess it to JPEG when a
still image is requested by user. Settings should provide highest-quality
full-resolution images without compromising preview frame rate. 3A on
auto.


A basic template for direct application control of capture
parameters. All automatic control is disabled (auto-exposure, auto-white
balance, auto-focus), and post-processing parameters are set to preview
quality. The manual capture parameters (exposure, sensitivity, etc.)
are set to reasonable defaults, but should be overridden by the
application depending on the intended use case.

 Total number of templates 

First value for vendor-defined request templates


camera3_capture_request_t:

A single request for image capture/buffer reprocessing, sent to the Camera
HAL device by the framework in process_capture_request().

The request contains the settings to be used for this capture, and the set of
output buffers to write the resulting image data in. It may optionally
contain an input buffer, in which case the request is for reprocessing that
input buffer instead of capturing a new image with the camera sensor. The
capture is identified by the frame_number.

In response, the camera HAL device must send a camera3_capture_result
structure asynchronously to the framework, using the process_capture_result()
callback.
"
      attribute 15589047 "settings"
	const_attribute public explicit_type "camera_metadata_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The settings buffer contains the capture and processing parameters for
the request. As a special case, a NULL settings buffer indicates that the
settings are identical to the most-recently submitted capture request. A
NULL buffer cannot be used as the first submitted request after a
configure_streams() call.

"
      end

      classrelation 8341559 // input_buffer (<unidirectional association>)
	relation 8341559 --->
	  a role_name "input_buffer" public
	    comment "The input stream buffer to use for this request, if any.

If input_buffer is NULL, then the request is for a new capture from the
imager. If input_buffer is valid, the request is for reprocessing the
image contained in input_buffer.

In the latter case, the HAL must set the release_fence of the
input_buffer to a valid sync fence, or to -1 if the HAL does not support
sync, before process_capture_request() returns.

The HAL is required to wait on the acquire sync fence of the input buffer
before accessing it.

<= CAMERA_DEVICE_API_VERSION_3_1:

Any input buffer included here will have been registered with the HAL
through register_stream_buffers() before its inclusion in a request.

>= CAMERA_DEVICE_API_VERSION_3_2:

The buffers will not have been pre-registered with the HAL.
Subsequent requests may reuse buffers, or provide entirely new buffers.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8341559 // input_buffer (<unidirectional association>)
	  b parent class_ref 4352695 // camera3_stream_buffer_t
      end

      classrelation 8341815 // output_buffers (<unidirectional association>)
	relation 8341815 --->
	  a role_name "output_buffers" const_relation public
	    comment "An array of num_output_buffers stream buffers, to be filled with image
data from this capture/reprocess. The HAL must wait on the acquire fences
of each stream buffer before writing to them.

The HAL takes ownership of the actual buffer_handle_t entries in
output_buffers; the framework does not access them until they are
returned in a camera3_capture_result_t.

<= CAMERA_DEVICE_API_VERSION_3_1:

All the buffers included  here will have been registered with the HAL
through register_stream_buffers() before their inclusion in a request.

>= CAMERA_DEVICE_API_VERSION_3_2:

Any or all of the buffers included here may be brand new in this
request (having never before seen by the HAL).

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8341815 // output_buffers (<unidirectional association>)
	  b parent class_ref 4352695 // camera3_stream_buffer_t
      end
    end

    class 4355127 "camera3_capture_request_t"
      visibility package stereotype "typedef" base_type class_ref 4354999 // camera3_capture_request
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4355255 "camera3_capture_result"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "camera3_capture_result_t:

The result of a single capture/reprocess by the camera HAL device. This is
sent to the framework asynchronously with process_capture_result(), in
response to a single capture request sent to the HAL with
process_capture_request(). Multiple process_capture_result() calls may be
performed by the HAL for each request.

Each call, all with the same frame
number, may contain some subset of the output buffers, and/or the result
metadata. The metadata may only be provided once for a given frame number;
all other calls must set the result metadata to NULL.

The result structure contains the output metadata from this capture, and the
set of output buffers that have been/will be filled for this capture. Each
output buffer may come with a release sync fence that the framework will wait
on before reading, in case the buffer has not yet been filled by the HAL.

>= CAMERA_DEVICE_API_VERSION_3_2:

The metadata may be provided multiple times for a single frame number. The
framework will accumulate together the final result set by combining each
partial result together into the total result set.

If an input buffer is given in a request, the HAL must return it in one of
the process_capture_result calls, and the call may be to just return the input
buffer, without metadata and output buffers; the sync fences must be handled
the same way they are done for output buffers.


Performance considerations:

Applications will also receive these partial results immediately, so sending
partial results is a highly recommended performance optimization to avoid
the total pipeline latency before sending the results for what is known very
early on in the pipeline.

A typical use case might be calculating the AF state halfway through the
pipeline; by sending the state back to the framework immediately, we get a
50% performance increase and perceived responsiveness of the auto-focus.

"
      attribute 15589175 "result"
	const_attribute public explicit_type "camera_metadata_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The result metadata for this capture. This contains information about the
final capture parameters, the state of the capture and post-processing
hardware, the state of the 3A algorithms, if enabled, and the output of
any enabled statistics units.

Only one call to process_capture_result() with a given frame_number may
include the result metadata. All other calls for the same frame_number
must set this to NULL.

If there was an error producing the result metadata, result must be an
empty metadata buffer, and notify() must be called with ERROR_RESULT.

>= CAMERA_DEVICE_API_VERSION_3_2:

Multiple calls to process_capture_result() with a given frame_number
may include the result metadata.

Partial metadata submitted should not include any metadata key returned
in a previous partial result for a given frame. Each new partial result
for that frame must also set a distinct partial_result value.

If notify has been called with ERROR_RESULT, all further partial
results for that frame are ignored by the framework.

"
      end

      classrelation 8342199 // output_buffers (<unidirectional association>)
	relation 8342199 --->
	  a role_name "output_buffers" const_relation public
	    comment "The handles for the output stream buffers for this capture. They may not
yet be filled at the time the HAL calls process_capture_result(); the
framework will wait on the release sync fences provided by the HAL before
reading the buffers.

The HAL must set the stream buffer's release sync fence to a valid sync
fd, or to -1 if the buffer has already been filled.

If the HAL encounters an error while processing the buffer, and the
buffer is not filled, the buffer's status field must be set to
CAMERA3_BUFFER_STATUS_ERROR. If the HAL did not wait on the acquire fence
before encountering the error, the acquire fence should be copied into
the release fence, to allow the framework to wait on the fence before
reusing the buffer.

The acquire fence must be set to -1 for all output buffers.  If
num_output_buffers is zero, this may be NULL. In that case, at least one
more process_capture_result call must be made by the HAL to provide the
output buffers.

When process_capture_result is called with a new buffer for a frame,
all previous frames' buffers for that corresponding stream must have been
already delivered (the fences need not have yet been signaled).

>= CAMERA_DEVICE_API_VERSION_3_2:

Gralloc buffers for a frame may be sent to framework before the
corresponding SHUTTER-notify.

Performance considerations:

Buffers delivered to the framework will not be dispatched to the
application layer until a start of exposure timestamp has been received
via a SHUTTER notify() call. It is highly recommended to
dispatch that call as early as possible.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8342199 // output_buffers (<unidirectional association>)
	  b parent class_ref 4352695 // camera3_stream_buffer_t
      end

      classrelation 8342327 // input_buffer (<unidirectional association>)
	relation 8342327 --->
	  a role_name "input_buffer" const_relation public
	    comment ">= CAMERA_DEVICE_API_VERSION_3_2:

The handle for the input stream buffer for this capture. It may not
yet be consumed at the time the HAL calls process_capture_result(); the
framework will wait on the release sync fences provided by the HAL before
reusing the buffer.

The HAL should handle the sync fences the same way they are done for
output_buffers.

Only one input buffer is allowed to be sent per request. Similarly to
output buffers, the ordering of returned input buffers must be
maintained by the HAL.

Performance considerations:

The input buffer should be returned as early as possible. If the HAL
supports sync fences, it can call process_capture_result to hand it back
with sync fences being set appropriately. If the sync fences are not
supported, the buffer can only be returned when it is consumed, which
may take long time; the HAL may choose to copy this input buffer to make
the buffer return sooner.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8342327 // input_buffer (<unidirectional association>)
	  b parent class_ref 4352695 // camera3_stream_buffer_t
      end

    end

    class 4355383 "camera3_capture_result_t"
      visibility package stereotype "typedef" base_type class_ref 4355255 // camera3_capture_result
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4355511 "camera3_callback_ops"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
Callback methods for the HAL to call into the framework.

These methods are used to return metadata and image buffers for a completed
or failed captures, and to notify the framework of asynchronous events such
as errors.

The framework will not call back into the HAL from within these callbacks,
and these calls will not block for extended periods.

"
      attribute 15589303 "process_capture_result"
	public explicit_type "/** * process_capture_result: * * Send results from a completed capture to the framework. * process_capture_result() may be invoked multiple times by the HAL in * response to a single capture request. This allows, for example, the * metadata and low-resolution buffers to be returned in one call, and * post-processed JPEG buffers in a later call, once it is available. Each * call must include the frame number of the request it is returning * metadata or buffers for. * * A component (buffer or metadata) of the complete result may only be * included in one process_capture_result call. A buffer for each stream, * and the result metadata, must be returned by the HAL for each request in * one of the process_capture_result calls, even in case of errors producing * some of the output. A call to process_capture_result() with neither * output buffers or result metadata is not allowed. * * The order of returning metadata and buffers for a single result does not * matter, but buffers for a given stream must be returned in FIFO order. So * the buffer for request 5 for stream A must always be returned before the * buffer for request 6 for stream A. This also applies to the result * metadata; the metadata for request 5 must be returned before the metadata * for request 6. * * However, different streams are independent of each other, so it is * acceptable and expected that the buffer for request 5 for stream A may be * returned after the buffer for request 6 for stream B is. And it is * acceptable that the result metadata for request 6 for stream B is * returned before the buffer for request 5 for stream A is. * * The HAL retains ownership of result structure, which only needs to be * valid to access during this call. The framework will copy whatever it * needs before this call returns. * * The output buffers do not need to be filled yet; the framework will wait * on the stream buffer release sync fence before reading the buffer * data. Therefore, this method should be called by the HAL as soon as * possible, even if some or all of the output buffers are still in * being filled. The HAL must include valid release sync fences into each * output_buffers stream buffer entry, or -1 if that stream buffer is * already filled. * * If the result buffer cannot be constructed for a request, the HAL should * return an empty metadata buffer, but still provide the output buffers and * their sync fences. In addition, notify() must be called with an * ERROR_RESULT message. * * If an output buffer cannot be filled, its status field must be set to * STATUS_ERROR. In addition, notify() must be called with a ERROR_BUFFER * message. * * If the entire capture has failed, then this method still needs to be * called to return the output buffers to the framework. All the buffer * statuses should be STATUS_ERROR, and the result metadata should be an * empty buffer. In addition, notify() must be called with a ERROR_REQUEST * message. In this case, individual ERROR_RESULT/ERROR_BUFFER messages * should not be sent. * * Performance requirements: * * This is a non-blocking call. The framework will return this call in 5ms. * * The pipeline latency (see S7 for definition) should be less than or equal to * 4 frame intervals, and must be less than or equal to 8 frame intervals. * */ void (*)(const struct camera3_callback_ops *, const camera3_capture_result_t *result)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}

    /**
     * process_capture_result:
     *
     * Send results from a completed capture to the framework.
     * process_capture_result() may be invoked multiple times by the HAL in
     * response to a single capture request. This allows, for example, the
     * metadata and low-resolution buffers to be returned in one call, and
     * post-processed JPEG buffers in a later call, once it is available. Each
     * call must include the frame number of the request it is returning
     * metadata or buffers for.
     *
     * A component (buffer or metadata) of the complete result may only be
     * included in one process_capture_result call. A buffer for each stream,
     * and the result metadata, must be returned by the HAL for each request in
     * one of the process_capture_result calls, even in case of errors producing
     * some of the output. A call to process_capture_result() with neither
     * output buffers or result metadata is not allowed.
     *
     * The order of returning metadata and buffers for a single result does not
     * matter, but buffers for a given stream must be returned in FIFO order. So
     * the buffer for request 5 for stream A must always be returned before the
     * buffer for request 6 for stream A. This also applies to the result
     * metadata; the metadata for request 5 must be returned before the metadata
     * for request 6.
     *
     * However, different streams are independent of each other, so it is
     * acceptable and expected that the buffer for request 5 for stream A may be
     * returned after the buffer for request 6 for stream B is. And it is
     * acceptable that the result metadata for request 6 for stream B is
     * returned before the buffer for request 5 for stream A is.
     *
     * The HAL retains ownership of result structure, which only needs to be
     * valid to access during this call. The framework will copy whatever it
     * needs before this call returns.
     *
     * The output buffers do not need to be filled yet; the framework will wait
     * on the stream buffer release sync fence before reading the buffer
     * data. Therefore, this method should be called by the HAL as soon as
     * possible, even if some or all of the output buffers are still in
     * being filled. The HAL must include valid release sync fences into each
     * output_buffers stream buffer entry, or -1 if that stream buffer is
     * already filled.
     *
     * If the result buffer cannot be constructed for a request, the HAL should
     * return an empty metadata buffer, but still provide the output buffers and
     * their sync fences. In addition, notify() must be called with an
     * ERROR_RESULT message.
     *
     * If an output buffer cannot be filled, its status field must be set to
     * STATUS_ERROR. In addition, notify() must be called with a ERROR_BUFFER
     * message.
     *
     * If the entire capture has failed, then this method still needs to be
     * called to return the output buffers to the framework. All the buffer
     * statuses should be STATUS_ERROR, and the result metadata should be an
     * empty buffer. In addition, notify() must be called with a ERROR_REQUEST
     * message. In this case, individual ERROR_RESULT/ERROR_BUFFER messages
     * should not be sent.
     *
     * Performance requirements:
     *
     * This is a non-blocking call. The framework will return this call in 5ms.
     *
     * The pipeline latency (see S7 for definition) should be less than or equal to
     * 4 frame intervals, and must be less than or equal to 8 frame intervals.
     *
     */
    void (*${name})(const struct camera3_callback_ops *,
            const camera3_capture_result_t *result)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "process_capture_result:

Send results from a completed capture to the framework.
process_capture_result() may be invoked multiple times by the HAL in
response to a single capture request. This allows, for example, the
metadata and low-resolution buffers to be returned in one call, and
post-processed JPEG buffers in a later call, once it is available. Each
call must include the frame number of the request it is returning
metadata or buffers for.

A component (buffer or metadata) of the complete result may only be
included in one process_capture_result call. A buffer for each stream,
and the result metadata, must be returned by the HAL for each request in
one of the process_capture_result calls, even in case of errors producing
some of the output. A call to process_capture_result() with neither
output buffers or result metadata is not allowed.

The order of returning metadata and buffers for a single result does not
matter, but buffers for a given stream must be returned in FIFO order. So
the buffer for request 5 for stream A must always be returned before the
buffer for request 6 for stream A. This also applies to the result
metadata; the metadata for request 5 must be returned before the metadata
for request 6.

However, different streams are independent of each other, so it is
acceptable and expected that the buffer for request 5 for stream A may be
returned after the buffer for request 6 for stream B is. And it is
acceptable that the result metadata for request 6 for stream B is
returned before the buffer for request 5 for stream A is.

The HAL retains ownership of result structure, which only needs to be
valid to access during this call. The framework will copy whatever it
needs before this call returns.

The output buffers do not need to be filled yet; the framework will wait
on the stream buffer release sync fence before reading the buffer
data. Therefore, this method should be called by the HAL as soon as
possible, even if some or all of the output buffers are still in
being filled. The HAL must include valid release sync fences into each
output_buffers stream buffer entry, or -1 if that stream buffer is
already filled.

If the result buffer cannot be constructed for a request, the HAL should
return an empty metadata buffer, but still provide the output buffers and
their sync fences. In addition, notify() must be called with an
ERROR_RESULT message.

If an output buffer cannot be filled, its status field must be set to
STATUS_ERROR. In addition, notify() must be called with a ERROR_BUFFER
message.

If the entire capture has failed, then this method still needs to be
called to return the output buffers to the framework. All the buffer
statuses should be STATUS_ERROR, and the result metadata should be an
empty buffer. In addition, notify() must be called with a ERROR_REQUEST
message. In this case, individual ERROR_RESULT/ERROR_BUFFER messages
should not be sent.

Performance requirements:

This is a non-blocking call. The framework will return this call in 5ms.

The pipeline latency (see S7 for definition) should be less than or equal to
4 frame intervals, and must be less than or equal to 8 frame intervals.


"
      end

      attribute 15589431 "notify"
	public explicit_type "/** * notify: * * Asynchronous notification callback from the HAL, fired for various * reasons. Only for information independent of frame capture, or that * require specific timing. The ownership of the message structure remains * with the HAL, and the msg only needs to be valid for the duration of this * call. * * Multiple threads may call notify() simultaneously. * * <= CAMERA_DEVICE_API_VERSION_3_1: * * The notification for the start of exposure for a given request must be * sent by the HAL before the first call to process_capture_result() for * that request is made. * * >= CAMERA_DEVICE_API_VERSION_3_2: * * Buffers delivered to the framework will not be dispatched to the * application layer until a start of exposure timestamp (or input image's * start of exposure timestamp for a reprocess request) has been received * via a SHUTTER notify() call. It is highly recommended to dispatch this * call as early as possible. * * ------------------------------------------------------------------------ * Performance requirements: * * This is a non-blocking call. The framework will return this call in 5ms. */ void (*)(const struct camera3_callback_ops *, const camera3_notify_msg_t *msg)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * notify:
     *
     * Asynchronous notification callback from the HAL, fired for various
     * reasons. Only for information independent of frame capture, or that
     * require specific timing. The ownership of the message structure remains
     * with the HAL, and the msg only needs to be valid for the duration of this
     * call.
     *
     * Multiple threads may call notify() simultaneously.
     *
     * <= CAMERA_DEVICE_API_VERSION_3_1:
     *
     * The notification for the start of exposure for a given request must be
     * sent by the HAL before the first call to process_capture_result() for
     * that request is made.
     *
     * >= CAMERA_DEVICE_API_VERSION_3_2:
     *
     * Buffers delivered to the framework will not be dispatched to the
     * application layer until a start of exposure timestamp (or input image's
     * start of exposure timestamp for a reprocess request) has been received
     * via a SHUTTER notify() call. It is highly recommended to dispatch this
     * call as early as possible.
     *
     * ------------------------------------------------------------------------
     * Performance requirements:
     *
     * This is a non-blocking call. The framework will return this call in 5ms.
     */
    void (*${name})(const struct camera3_callback_ops *,
            const camera3_notify_msg_t *msg)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "notify:

Asynchronous notification callback from the HAL, fired for various
reasons. Only for information independent of frame capture, or that
require specific timing. The ownership of the message structure remains
with the HAL, and the msg only needs to be valid for the duration of this
call.

Multiple threads may call notify() simultaneously.

<= CAMERA_DEVICE_API_VERSION_3_1:

The notification for the start of exposure for a given request must be
sent by the HAL before the first call to process_capture_result() for
that request is made.

>= CAMERA_DEVICE_API_VERSION_3_2:

Buffers delivered to the framework will not be dispatched to the
application layer until a start of exposure timestamp (or input image's
start of exposure timestamp for a reprocess request) has been received
via a SHUTTER notify() call. It is highly recommended to dispatch this
call as early as possible.

------------------------------------------------------------------------
Performance requirements:

This is a non-blocking call. The framework will return this call in 5ms.

"
      end
    end

    class 4355639 "camera3_callback_ops_t"
      visibility package stereotype "typedef" base_type class_ref 4355511 // camera3_callback_ops
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4355767 "camera3_device_ops"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
Camera device operations

"
      attribute 15589559 "initialize"
	public explicit_type "/** * initialize: * * One-time initialization to pass framework callback function pointers to * the HAL. Will be called once after a successful open() call, before any * other functions are called on the camera3_device_ops structure. * * Performance requirements: * * This should be a non-blocking call. The HAL should return from this call * in 5ms, and must return from this call in 10ms. * * Return values: * * 0: On successful initialization * * -ENODEV: If initialization fails. Only close() can be called successfully * by the framework after this. */ int (*)(const struct camera3_device *, const camera3_callback_ops_t *callback_ops)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}

    /**
     * initialize:
     *
     * One-time initialization to pass framework callback function pointers to
     * the HAL. Will be called once after a successful open() call, before any
     * other functions are called on the camera3_device_ops structure.
     *
     * Performance requirements:
     *
     * This should be a non-blocking call. The HAL should return from this call
     * in 5ms, and must return from this call in 10ms.
     *
     * Return values:
     *
     *  0:     On successful initialization
     *
     * -ENODEV: If initialization fails. Only close() can be called successfully
     *          by the framework after this.
     */
    int (*${name})(const struct camera3_device *,
            const camera3_callback_ops_t *callback_ops)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "initialize:

One-time initialization to pass framework callback function pointers to
the HAL. Will be called once after a successful open() call, before any
other functions are called on the camera3_device_ops structure.

Performance requirements:

This should be a non-blocking call. The HAL should return from this call
in 5ms, and must return from this call in 10ms.

Return values:

 0:     On successful initialization

-ENODEV: If initialization fails. Only close() can be called successfully
         by the framework after this.

"
      end

      attribute 15589687 "configure_streams"
	public explicit_type "/********************************************************************** * Stream management */ /** * configure_streams: * * CAMERA_DEVICE_API_VERSION_3_0 only: * * Reset the HAL camera device processing pipeline and set up new input and * output streams. This call replaces any existing stream configuration with * the streams defined in the stream_list. This method will be called at * least once after initialize() before a request is submitted with * process_capture_request(). * * The stream_list must contain at least one output-capable stream, and may * not contain more than one input-capable stream. * * The stream_list may contain streams that are also in the currently-active * set of streams (from the previous call to configure_stream()). These * streams will already have valid values for usage, max_buffers, and the * private pointer. * * If such a stream has already had its buffers registered, * register_stream_buffers() will not be called again for the stream, and * buffers from the stream can be immediately included in input requests. * * If the HAL needs to change the stream configuration for an existing * stream due to the new configuration, it may rewrite the values of usage * and/or max_buffers during the configure call. * * The framework will detect such a change, and will then reallocate the * stream buffers, and call register_stream_buffers() again before using * buffers from that stream in a request. * * If a currently-active stream is not included in stream_list, the HAL may * safely remove any references to that stream. It will not be reused in a * later configure() call by the framework, and all the gralloc buffers for * it will be freed after the configure_streams() call returns. * * The stream_list structure is owned by the framework, and may not be * accessed once this call completes. The address of an individual * camera3_stream_t structure will remain valid for access by the HAL until * the end of the first configure_stream() call which no longer includes * that camera3_stream_t in the stream_list argument. The HAL may not change * values in the stream structure outside of the private pointer, except for * the usage and max_buffers members during the configure_streams() call * itself. * * If the stream is new, the usage, max_buffer, and private pointer fields * of the stream structure will all be set to 0. The HAL device must set * these fields before the configure_streams() call returns. These fields * are then used by the framework and the platform gralloc module to * allocate the gralloc buffers for each stream. * * Before such a new stream can have its buffers included in a capture * request, the framework will call register_stream_buffers() with that * stream. However, the framework is not required to register buffers for * _all_ streams before submitting a request. This allows for quick startup * of (for example) a preview stream, with allocation for other streams * happening later or concurrently. * * ------------------------------------------------------------------------ * CAMERA_DEVICE_API_VERSION_3_1 only: * * Reset the HAL camera device processing pipeline and set up new input and * output streams. This call replaces any existing stream configuration with * the streams defined in the stream_list. This method will be called at * least once after initialize() before a request is submitted with * process_capture_request(). * * The stream_list must contain at least one output-capable stream, and may * not contain more than one input-capable stream. * * The stream_list may contain streams that are also in the currently-active * set of streams (from the previous call to configure_stream()). These * streams will already have valid values for usage, max_buffers, and the * private pointer. * * If such a stream has already had its buffers registered, * register_stream_buffers() will not be called again for the stream, and * buffers from the stream can be immediately included in input requests. * * If the HAL needs to change the stream configuration for an existing * stream due to the new configuration, it may rewrite the values of usage * and/or max_buffers during the configure call. * * The framework will detect such a change, and will then reallocate the * stream buffers, and call register_stream_buffers() again before using * buffers from that stream in a request. * * If a currently-active stream is not included in stream_list, the HAL may * safely remove any references to that stream. It will not be reused in a * later configure() call by the framework, and all the gralloc buffers for * it will be freed after the configure_streams() call returns. * * The stream_list structure is owned by the framework, and may not be * accessed once this call completes. The address of an individual * camera3_stream_t structure will remain valid for access by the HAL until * the end of the first configure_stream() call which no longer includes * that camera3_stream_t in the stream_list argument. The HAL may not change * values in the stream structure outside of the private pointer, except for * the usage and max_buffers members during the configure_streams() call * itself. * * If the stream is new, max_buffer, and private pointer fields of the * stream structure will all be set to 0. The usage will be set to the * consumer usage flags. The HAL device must set these fields before the * configure_streams() call returns. These fields are then used by the * framework and the platform gralloc module to allocate the gralloc * buffers for each stream. * * Before such a new stream can have its buffers included in a capture * request, the framework will call register_stream_buffers() with that * stream. However, the framework is not required to register buffers for * _all_ streams before submitting a request. This allows for quick startup * of (for example) a preview stream, with allocation for other streams * happening later or concurrently. * * ------------------------------------------------------------------------ * >= CAMERA_DEVICE_API_VERSION_3_2: * * Reset the HAL camera device processing pipeline and set up new input and * output streams. This call replaces any existing stream configuration with * the streams defined in the stream_list. This method will be called at * least once after initialize() before a request is submitted with * process_capture_request(). * * The stream_list must contain at least one output-capable stream, and may * not contain more than one input-capable stream. * * The stream_list may contain streams that are also in the currently-active * set of streams (from the previous call to configure_stream()). These * streams will already have valid values for usage, max_buffers, and the * private pointer. * * If the HAL needs to change the stream configuration for an existing * stream due to the new configuration, it may rewrite the values of usage * and/or max_buffers during the configure call. * * The framework will detect such a change, and may then reallocate the * stream buffers before using buffers from that stream in a request. * * If a currently-active stream is not included in stream_list, the HAL may * safely remove any references to that stream. It will not be reused in a * later configure() call by the framework, and all the gralloc buffers for * it will be freed after the configure_streams() call returns. * * The stream_list structure is owned by the framework, and may not be * accessed once this call completes. The address of an individual * camera3_stream_t structure will remain valid for access by the HAL until * the end of the first configure_stream() call which no longer includes * that camera3_stream_t in the stream_list argument. The HAL may not change * values in the stream structure outside of the private pointer, except for * the usage and max_buffers members during the configure_streams() call * itself. * * If the stream is new, max_buffer, and private pointer fields of the * stream structure will all be set to 0. The usage will be set to the * consumer usage flags. The HAL device must set these fields before the * configure_streams() call returns. These fields are then used by the * framework and the platform gralloc module to allocate the gralloc * buffers for each stream. * * Newly allocated buffers may be included in a capture request at any time * by the framework. Once a gralloc buffer is returned to the framework * with process_capture_result (and its respective release_fence has been * signaled) the framework may free or reuse it at any time. * * ------------------------------------------------------------------------ * * Preconditions: * * The framework will only call this method when no captures are being * processed. That is, all results have been returned to the framework, and * all in-flight input and output buffers have been returned and their * release sync fences have been signaled by the HAL. The framework will not * submit new requests for capture while the configure_streams() call is * underway. * * Postconditions: * * The HAL device must configure itself to provide maximum possible output * frame rate given the sizes and formats of the output streams, as * documented in the camera device's static metadata. * * Performance requirements: * * This call is expected to be heavyweight and possibly take several hundred * milliseconds to complete, since it may require resetting and * reconfiguring the image sensor and the camera processing pipeline. * Nevertheless, the HAL device should attempt to minimize the * reconfiguration delay to minimize the user-visible pauses during * application operational mode changes (such as switching from still * capture to video recording). * * The HAL should return from this call in 500ms, and must return from this * call in 1000ms. * * Return values: * * 0: On successful stream configuration * * -EINVAL: If the requested stream configuration is invalid. Some examples * of invalid stream configurations include: * * - Including more than 1 input-capable stream (INPUT or * BIDIRECTIONAL) * * - Not including any output-capable streams (OUTPUT or * BIDIRECTIONAL) * * - Including streams with unsupported formats, or an unsupported * size for that format. * * - Including too many output streams of a certain format. * * - Unsupported rotation configuration (only applies to * devices with version >= CAMERA_DEVICE_API_VERSION_3_3) * * - Stream sizes/formats don't satisfy the * camera3_stream_configuration_t->operation_mode requirements for non-NORMAL mode, * or the requested operation_mode is not supported by the HAL. * (only applies to devices with version >= CAMERA_DEVICE_API_VERSION_3_3) * * Note that the framework submitting an invalid stream * configuration is not normal operation, since stream * configurations are checked before configure. An invalid * configuration means that a bug exists in the framework code, or * there is a mismatch between the HAL's static metadata and the * requirements on streams. * * -ENODEV: If there has been a fatal error and the device is no longer * operational. Only close() can be called successfully by the * framework after this error is returned. */ int (*)(const struct camera3_device *, camera3_stream_configuration_t *stream_list)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**********************************************************************
     * Stream management
     */

    /**
     * configure_streams:
     *
     * CAMERA_DEVICE_API_VERSION_3_0 only:
     *
     * Reset the HAL camera device processing pipeline and set up new input and
     * output streams. This call replaces any existing stream configuration with
     * the streams defined in the stream_list. This method will be called at
     * least once after initialize() before a request is submitted with
     * process_capture_request().
     *
     * The stream_list must contain at least one output-capable stream, and may
     * not contain more than one input-capable stream.
     *
     * The stream_list may contain streams that are also in the currently-active
     * set of streams (from the previous call to configure_stream()). These
     * streams will already have valid values for usage, max_buffers, and the
     * private pointer.
     *
     * If such a stream has already had its buffers registered,
     * register_stream_buffers() will not be called again for the stream, and
     * buffers from the stream can be immediately included in input requests.
     *
     * If the HAL needs to change the stream configuration for an existing
     * stream due to the new configuration, it may rewrite the values of usage
     * and/or max_buffers during the configure call.
     *
     * The framework will detect such a change, and will then reallocate the
     * stream buffers, and call register_stream_buffers() again before using
     * buffers from that stream in a request.
     *
     * If a currently-active stream is not included in stream_list, the HAL may
     * safely remove any references to that stream. It will not be reused in a
     * later configure() call by the framework, and all the gralloc buffers for
     * it will be freed after the configure_streams() call returns.
     *
     * The stream_list structure is owned by the framework, and may not be
     * accessed once this call completes. The address of an individual
     * camera3_stream_t structure will remain valid for access by the HAL until
     * the end of the first configure_stream() call which no longer includes
     * that camera3_stream_t in the stream_list argument. The HAL may not change
     * values in the stream structure outside of the private pointer, except for
     * the usage and max_buffers members during the configure_streams() call
     * itself.
     *
     * If the stream is new, the usage, max_buffer, and private pointer fields
     * of the stream structure will all be set to 0. The HAL device must set
     * these fields before the configure_streams() call returns. These fields
     * are then used by the framework and the platform gralloc module to
     * allocate the gralloc buffers for each stream.
     *
     * Before such a new stream can have its buffers included in a capture
     * request, the framework will call register_stream_buffers() with that
     * stream. However, the framework is not required to register buffers for
     * _all_ streams before submitting a request. This allows for quick startup
     * of (for example) a preview stream, with allocation for other streams
     * happening later or concurrently.
     *
     * ------------------------------------------------------------------------
     * CAMERA_DEVICE_API_VERSION_3_1 only:
     *
     * Reset the HAL camera device processing pipeline and set up new input and
     * output streams. This call replaces any existing stream configuration with
     * the streams defined in the stream_list. This method will be called at
     * least once after initialize() before a request is submitted with
     * process_capture_request().
     *
     * The stream_list must contain at least one output-capable stream, and may
     * not contain more than one input-capable stream.
     *
     * The stream_list may contain streams that are also in the currently-active
     * set of streams (from the previous call to configure_stream()). These
     * streams will already have valid values for usage, max_buffers, and the
     * private pointer.
     *
     * If such a stream has already had its buffers registered,
     * register_stream_buffers() will not be called again for the stream, and
     * buffers from the stream can be immediately included in input requests.
     *
     * If the HAL needs to change the stream configuration for an existing
     * stream due to the new configuration, it may rewrite the values of usage
     * and/or max_buffers during the configure call.
     *
     * The framework will detect such a change, and will then reallocate the
     * stream buffers, and call register_stream_buffers() again before using
     * buffers from that stream in a request.
     *
     * If a currently-active stream is not included in stream_list, the HAL may
     * safely remove any references to that stream. It will not be reused in a
     * later configure() call by the framework, and all the gralloc buffers for
     * it will be freed after the configure_streams() call returns.
     *
     * The stream_list structure is owned by the framework, and may not be
     * accessed once this call completes. The address of an individual
     * camera3_stream_t structure will remain valid for access by the HAL until
     * the end of the first configure_stream() call which no longer includes
     * that camera3_stream_t in the stream_list argument. The HAL may not change
     * values in the stream structure outside of the private pointer, except for
     * the usage and max_buffers members during the configure_streams() call
     * itself.
     *
     * If the stream is new, max_buffer, and private pointer fields of the
     * stream structure will all be set to 0. The usage will be set to the
     * consumer usage flags. The HAL device must set these fields before the
     * configure_streams() call returns. These fields are then used by the
     * framework and the platform gralloc module to allocate the gralloc
     * buffers for each stream.
     *
     * Before such a new stream can have its buffers included in a capture
     * request, the framework will call register_stream_buffers() with that
     * stream. However, the framework is not required to register buffers for
     * _all_ streams before submitting a request. This allows for quick startup
     * of (for example) a preview stream, with allocation for other streams
     * happening later or concurrently.
     *
     * ------------------------------------------------------------------------
     * >= CAMERA_DEVICE_API_VERSION_3_2:
     *
     * Reset the HAL camera device processing pipeline and set up new input and
     * output streams. This call replaces any existing stream configuration with
     * the streams defined in the stream_list. This method will be called at
     * least once after initialize() before a request is submitted with
     * process_capture_request().
     *
     * The stream_list must contain at least one output-capable stream, and may
     * not contain more than one input-capable stream.
     *
     * The stream_list may contain streams that are also in the currently-active
     * set of streams (from the previous call to configure_stream()). These
     * streams will already have valid values for usage, max_buffers, and the
     * private pointer.
     *
     * If the HAL needs to change the stream configuration for an existing
     * stream due to the new configuration, it may rewrite the values of usage
     * and/or max_buffers during the configure call.
     *
     * The framework will detect such a change, and may then reallocate the
     * stream buffers before using buffers from that stream in a request.
     *
     * If a currently-active stream is not included in stream_list, the HAL may
     * safely remove any references to that stream. It will not be reused in a
     * later configure() call by the framework, and all the gralloc buffers for
     * it will be freed after the configure_streams() call returns.
     *
     * The stream_list structure is owned by the framework, and may not be
     * accessed once this call completes. The address of an individual
     * camera3_stream_t structure will remain valid for access by the HAL until
     * the end of the first configure_stream() call which no longer includes
     * that camera3_stream_t in the stream_list argument. The HAL may not change
     * values in the stream structure outside of the private pointer, except for
     * the usage and max_buffers members during the configure_streams() call
     * itself.
     *
     * If the stream is new, max_buffer, and private pointer fields of the
     * stream structure will all be set to 0. The usage will be set to the
     * consumer usage flags. The HAL device must set these fields before the
     * configure_streams() call returns. These fields are then used by the
     * framework and the platform gralloc module to allocate the gralloc
     * buffers for each stream.
     *
     * Newly allocated buffers may be included in a capture request at any time
     * by the framework. Once a gralloc buffer is returned to the framework
     * with process_capture_result (and its respective release_fence has been
     * signaled) the framework may free or reuse it at any time.
     *
     * ------------------------------------------------------------------------
     *
     * Preconditions:
     *
     * The framework will only call this method when no captures are being
     * processed. That is, all results have been returned to the framework, and
     * all in-flight input and output buffers have been returned and their
     * release sync fences have been signaled by the HAL. The framework will not
     * submit new requests for capture while the configure_streams() call is
     * underway.
     *
     * Postconditions:
     *
     * The HAL device must configure itself to provide maximum possible output
     * frame rate given the sizes and formats of the output streams, as
     * documented in the camera device's static metadata.
     *
     * Performance requirements:
     *
     * This call is expected to be heavyweight and possibly take several hundred
     * milliseconds to complete, since it may require resetting and
     * reconfiguring the image sensor and the camera processing pipeline.
     * Nevertheless, the HAL device should attempt to minimize the
     * reconfiguration delay to minimize the user-visible pauses during
     * application operational mode changes (such as switching from still
     * capture to video recording).
     *
     * The HAL should return from this call in 500ms, and must return from this
     * call in 1000ms.
     *
     * Return values:
     *
     *  0:      On successful stream configuration
     *
     * -EINVAL: If the requested stream configuration is invalid. Some examples
     *          of invalid stream configurations include:
     *
     *          - Including more than 1 input-capable stream (INPUT or
     *            BIDIRECTIONAL)
     *
     *          - Not including any output-capable streams (OUTPUT or
     *            BIDIRECTIONAL)
     *
     *          - Including streams with unsupported formats, or an unsupported
     *            size for that format.
     *
     *          - Including too many output streams of a certain format.
     *
     *          - Unsupported rotation configuration (only applies to
     *            devices with version >= CAMERA_DEVICE_API_VERSION_3_3)
     *
     *          - Stream sizes/formats don't satisfy the
     *            camera3_stream_configuration_t->operation_mode requirements for non-NORMAL mode,
     *            or the requested operation_mode is not supported by the HAL.
     *            (only applies to devices with version >= CAMERA_DEVICE_API_VERSION_3_3)
     *
     *          Note that the framework submitting an invalid stream
     *          configuration is not normal operation, since stream
     *          configurations are checked before configure. An invalid
     *          configuration means that a bug exists in the framework code, or
     *          there is a mismatch between the HAL's static metadata and the
     *          requirements on streams.
     *
     * -ENODEV: If there has been a fatal error and the device is no longer
     *          operational. Only close() can be called successfully by the
     *          framework after this error is returned.
     */
    int (*${name})(const struct camera3_device *,
            camera3_stream_configuration_t *stream_list)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Stream management


configure_streams:

CAMERA_DEVICE_API_VERSION_3_0 only:

Reset the HAL camera device processing pipeline and set up new input and
output streams. This call replaces any existing stream configuration with
the streams defined in the stream_list. This method will be called at
least once after initialize() before a request is submitted with
process_capture_request().

The stream_list must contain at least one output-capable stream, and may
not contain more than one input-capable stream.

The stream_list may contain streams that are also in the currently-active
set of streams (from the previous call to configure_stream()). These
streams will already have valid values for usage, max_buffers, and the
private pointer.

If such a stream has already had its buffers registered,
register_stream_buffers() will not be called again for the stream, and
buffers from the stream can be immediately included in input requests.

If the HAL needs to change the stream configuration for an existing
stream due to the new configuration, it may rewrite the values of usage
and/or max_buffers during the configure call.

The framework will detect such a change, and will then reallocate the
stream buffers, and call register_stream_buffers() again before using
buffers from that stream in a request.

If a currently-active stream is not included in stream_list, the HAL may
safely remove any references to that stream. It will not be reused in a
later configure() call by the framework, and all the gralloc buffers for
it will be freed after the configure_streams() call returns.

The stream_list structure is owned by the framework, and may not be
accessed once this call completes. The address of an individual
camera3_stream_t structure will remain valid for access by the HAL until
the end of the first configure_stream() call which no longer includes
that camera3_stream_t in the stream_list argument. The HAL may not change
values in the stream structure outside of the private pointer, except for
the usage and max_buffers members during the configure_streams() call
itself.

If the stream is new, the usage, max_buffer, and private pointer fields
of the stream structure will all be set to 0. The HAL device must set
these fields before the configure_streams() call returns. These fields
are then used by the framework and the platform gralloc module to
allocate the gralloc buffers for each stream.

Before such a new stream can have its buffers included in a capture
request, the framework will call register_stream_buffers() with that
stream. However, the framework is not required to register buffers for
_all_ streams before submitting a request. This allows for quick startup
of (for example) a preview stream, with allocation for other streams
happening later or concurrently.

------------------------------------------------------------------------
CAMERA_DEVICE_API_VERSION_3_1 only:

Reset the HAL camera device processing pipeline and set up new input and
output streams. This call replaces any existing stream configuration with
the streams defined in the stream_list. This method will be called at
least once after initialize() before a request is submitted with
process_capture_request().

The stream_list must contain at least one output-capable stream, and may
not contain more than one input-capable stream.

The stream_list may contain streams that are also in the currently-active
set of streams (from the previous call to configure_stream()). These
streams will already have valid values for usage, max_buffers, and the
private pointer.

If such a stream has already had its buffers registered,
register_stream_buffers() will not be called again for the stream, and
buffers from the stream can be immediately included in input requests.

If the HAL needs to change the stream configuration for an existing
stream due to the new configuration, it may rewrite the values of usage
and/or max_buffers during the configure call.

The framework will detect such a change, and will then reallocate the
stream buffers, and call register_stream_buffers() again before using
buffers from that stream in a request.

If a currently-active stream is not included in stream_list, the HAL may
safely remove any references to that stream. It will not be reused in a
later configure() call by the framework, and all the gralloc buffers for
it will be freed after the configure_streams() call returns.

The stream_list structure is owned by the framework, and may not be
accessed once this call completes. The address of an individual
camera3_stream_t structure will remain valid for access by the HAL until
the end of the first configure_stream() call which no longer includes
that camera3_stream_t in the stream_list argument. The HAL may not change
values in the stream structure outside of the private pointer, except for
the usage and max_buffers members during the configure_streams() call
itself.

If the stream is new, max_buffer, and private pointer fields of the
stream structure will all be set to 0. The usage will be set to the
consumer usage flags. The HAL device must set these fields before the
configure_streams() call returns. These fields are then used by the
framework and the platform gralloc module to allocate the gralloc
buffers for each stream.

Before such a new stream can have its buffers included in a capture
request, the framework will call register_stream_buffers() with that
stream. However, the framework is not required to register buffers for
_all_ streams before submitting a request. This allows for quick startup
of (for example) a preview stream, with allocation for other streams
happening later or concurrently.

------------------------------------------------------------------------
>= CAMERA_DEVICE_API_VERSION_3_2:

Reset the HAL camera device processing pipeline and set up new input and
output streams. This call replaces any existing stream configuration with
the streams defined in the stream_list. This method will be called at
least once after initialize() before a request is submitted with
process_capture_request().

The stream_list must contain at least one output-capable stream, and may
not contain more than one input-capable stream.

The stream_list may contain streams that are also in the currently-active
set of streams (from the previous call to configure_stream()). These
streams will already have valid values for usage, max_buffers, and the
private pointer.

If the HAL needs to change the stream configuration for an existing
stream due to the new configuration, it may rewrite the values of usage
and/or max_buffers during the configure call.

The framework will detect such a change, and may then reallocate the
stream buffers before using buffers from that stream in a request.

If a currently-active stream is not included in stream_list, the HAL may
safely remove any references to that stream. It will not be reused in a
later configure() call by the framework, and all the gralloc buffers for
it will be freed after the configure_streams() call returns.

The stream_list structure is owned by the framework, and may not be
accessed once this call completes. The address of an individual
camera3_stream_t structure will remain valid for access by the HAL until
the end of the first configure_stream() call which no longer includes
that camera3_stream_t in the stream_list argument. The HAL may not change
values in the stream structure outside of the private pointer, except for
the usage and max_buffers members during the configure_streams() call
itself.

If the stream is new, max_buffer, and private pointer fields of the
stream structure will all be set to 0. The usage will be set to the
consumer usage flags. The HAL device must set these fields before the
configure_streams() call returns. These fields are then used by the
framework and the platform gralloc module to allocate the gralloc
buffers for each stream.

Newly allocated buffers may be included in a capture request at any time
by the framework. Once a gralloc buffer is returned to the framework
with process_capture_result (and its respective release_fence has been
signaled) the framework may free or reuse it at any time.

------------------------------------------------------------------------

Preconditions:

The framework will only call this method when no captures are being
processed. That is, all results have been returned to the framework, and
all in-flight input and output buffers have been returned and their
release sync fences have been signaled by the HAL. The framework will not
submit new requests for capture while the configure_streams() call is
underway.

Postconditions:

The HAL device must configure itself to provide maximum possible output
frame rate given the sizes and formats of the output streams, as
documented in the camera device's static metadata.

Performance requirements:

This call is expected to be heavyweight and possibly take several hundred
milliseconds to complete, since it may require resetting and
reconfiguring the image sensor and the camera processing pipeline.
Nevertheless, the HAL device should attempt to minimize the
reconfiguration delay to minimize the user-visible pauses during
application operational mode changes (such as switching from still
capture to video recording).

The HAL should return from this call in 500ms, and must return from this
call in 1000ms.

Return values:

 0:      On successful stream configuration

-EINVAL: If the requested stream configuration is invalid. Some examples
         of invalid stream configurations include:

         - Including more than 1 input-capable stream (INPUT or
           BIDIRECTIONAL)

         - Not including any output-capable streams (OUTPUT or
           BIDIRECTIONAL)

         - Including streams with unsupported formats, or an unsupported
           size for that format.

         - Including too many output streams of a certain format.

         - Unsupported rotation configuration (only applies to
           devices with version >= CAMERA_DEVICE_API_VERSION_3_3)

         - Stream sizes/formats don't satisfy the
           camera3_stream_configuration_t->operation_mode requirements for non-NORMAL mode,
           or the requested operation_mode is not supported by the HAL.
           (only applies to devices with version >= CAMERA_DEVICE_API_VERSION_3_3)

         Note that the framework submitting an invalid stream
         configuration is not normal operation, since stream
         configurations are checked before configure. An invalid
         configuration means that a bug exists in the framework code, or
         there is a mismatch between the HAL's static metadata and the
         requirements on streams.

-ENODEV: If there has been a fatal error and the device is no longer
         operational. Only close() can be called successfully by the
         framework after this error is returned.

"
      end

      attribute 15589815 "register_stream_buffers"
	public explicit_type "/** * register_stream_buffers: * * >= CAMERA_DEVICE_API_VERSION_3_2: * * DEPRECATED. This will not be called and must be set to NULL. * * <= CAMERA_DEVICE_API_VERSION_3_1: * * Register buffers for a given stream with the HAL device. This method is * called by the framework after a new stream is defined by * configure_streams, and before buffers from that stream are included in a * capture request. If the same stream is listed in a subsequent * configure_streams() call, register_stream_buffers will _not_ be called * again for that stream. * * The framework does not need to register buffers for all configured * streams before it submits the first capture request. This allows quick * startup for preview (or similar use cases) while other streams are still * being allocated. * * This method is intended to allow the HAL device to map or otherwise * prepare the buffers for later use. The buffers passed in will already be * locked for use. At the end of the call, all the buffers must be ready to * be returned to the stream. The buffer_set argument is only valid for the * duration of this call. * * If the stream format was set to HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED, * the camera HAL should inspect the passed-in buffers here to determine any * platform-private pixel format information. * * Performance requirements: * * This should be a non-blocking call. The HAL should return from this call * in 1ms, and must return from this call in 5ms. * * Return values: * * 0: On successful registration of the new stream buffers * * -EINVAL: If the stream_buffer_set does not refer to a valid active * stream, or if the buffers array is invalid. * * -ENOMEM: If there was a failure in registering the buffers. The framework * must consider all the stream buffers to be unregistered, and can * try to register again later. * * -ENODEV: If there is a fatal error, and the device is no longer * operational. Only close() can be called successfully by the * framework after this error is returned. */ int (*)(const struct camera3_device *, const camera3_stream_buffer_set_t *buffer_set)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * register_stream_buffers:
     *
     * >= CAMERA_DEVICE_API_VERSION_3_2:
     *
     * DEPRECATED. This will not be called and must be set to NULL.
     *
     * <= CAMERA_DEVICE_API_VERSION_3_1:
     *
     * Register buffers for a given stream with the HAL device. This method is
     * called by the framework after a new stream is defined by
     * configure_streams, and before buffers from that stream are included in a
     * capture request. If the same stream is listed in a subsequent
     * configure_streams() call, register_stream_buffers will _not_ be called
     * again for that stream.
     *
     * The framework does not need to register buffers for all configured
     * streams before it submits the first capture request. This allows quick
     * startup for preview (or similar use cases) while other streams are still
     * being allocated.
     *
     * This method is intended to allow the HAL device to map or otherwise
     * prepare the buffers for later use. The buffers passed in will already be
     * locked for use. At the end of the call, all the buffers must be ready to
     * be returned to the stream.  The buffer_set argument is only valid for the
     * duration of this call.
     *
     * If the stream format was set to HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED,
     * the camera HAL should inspect the passed-in buffers here to determine any
     * platform-private pixel format information.
     *
     * Performance requirements:
     *
     * This should be a non-blocking call. The HAL should return from this call
     * in 1ms, and must return from this call in 5ms.
     *
     * Return values:
     *
     *  0:      On successful registration of the new stream buffers
     *
     * -EINVAL: If the stream_buffer_set does not refer to a valid active
     *          stream, or if the buffers array is invalid.
     *
     * -ENOMEM: If there was a failure in registering the buffers. The framework
     *          must consider all the stream buffers to be unregistered, and can
     *          try to register again later.
     *
     * -ENODEV: If there is a fatal error, and the device is no longer
     *          operational. Only close() can be called successfully by the
     *          framework after this error is returned.
     */
    int (*${name})(const struct camera3_device *,
            const camera3_stream_buffer_set_t *buffer_set)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "register_stream_buffers:

>= CAMERA_DEVICE_API_VERSION_3_2:

DEPRECATED. This will not be called and must be set to NULL.

<= CAMERA_DEVICE_API_VERSION_3_1:

Register buffers for a given stream with the HAL device. This method is
called by the framework after a new stream is defined by
configure_streams, and before buffers from that stream are included in a
capture request. If the same stream is listed in a subsequent
configure_streams() call, register_stream_buffers will _not_ be called
again for that stream.

The framework does not need to register buffers for all configured
streams before it submits the first capture request. This allows quick
startup for preview (or similar use cases) while other streams are still
being allocated.

This method is intended to allow the HAL device to map or otherwise
prepare the buffers for later use. The buffers passed in will already be
locked for use. At the end of the call, all the buffers must be ready to
be returned to the stream.  The buffer_set argument is only valid for the
duration of this call.

If the stream format was set to HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED,
the camera HAL should inspect the passed-in buffers here to determine any
platform-private pixel format information.

Performance requirements:

This should be a non-blocking call. The HAL should return from this call
in 1ms, and must return from this call in 5ms.

Return values:

 0:      On successful registration of the new stream buffers

-EINVAL: If the stream_buffer_set does not refer to a valid active
         stream, or if the buffers array is invalid.

-ENOMEM: If there was a failure in registering the buffers. The framework
         must consider all the stream buffers to be unregistered, and can
         try to register again later.

-ENODEV: If there is a fatal error, and the device is no longer
         operational. Only close() can be called successfully by the
         framework after this error is returned.

"
      end

      attribute 15589943 "construct_default_request_settings"
	const_attribute public explicit_type "camera_metadata_t* (*)( const struct camera3_device *, int type)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const} camera_metadata_t* (*${name})(
            const struct camera3_device *,
            int type)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Request creation and submission


construct_default_request_settings:

Create capture settings for standard camera use cases.

The device must return a settings buffer that is configured to meet the
requested use case, which must be one of the CAMERA3_TEMPLATE_*
enums. All request control fields must be included.

The HAL retains ownership of this structure, but the pointer to the
structure must be valid until the device is closed. The framework and the
HAL may not modify the buffer once it is returned by this call. The same
buffer may be returned for subsequent calls for the same template, or for
other templates.

Performance requirements:

This should be a non-blocking call. The HAL should return from this call
in 1ms, and must return from this call in 5ms.

Return values:

  Valid metadata: On successful creation of a default settings
                  buffer.

  NULL:           In case of a fatal error. After this is returned, only
                  the close() method can be called successfully by the
                  framework.

"
      end

      attribute 15590071 "process_capture_request"
	public explicit_type "/** * process_capture_request: * * Send a new capture request to the HAL. The HAL should not return from * this call until it is ready to accept the next request to process. Only * one call to process_capture_request() will be made at a time by the * framework, and the calls will all be from the same thread. The next call * to process_capture_request() will be made as soon as a new request and * its associated buffers are available. In a normal preview scenario, this * means the function will be called again by the framework almost * instantly. * * The actual request processing is asynchronous, with the results of * capture being returned by the HAL through the process_capture_result() * call. This call requires the result metadata to be available, but output * buffers may simply provide sync fences to wait on. Multiple requests are * expected to be in flight at once, to maintain full output frame rate. * * The framework retains ownership of the request structure. It is only * guaranteed to be valid during this call. The HAL device must make copies * of the information it needs to retain for the capture processing. The HAL * is responsible for waiting on and closing the buffers' fences and * returning the buffer handles to the framework. * * The HAL must write the file descriptor for the input buffer's release * sync fence into input_buffer->release_fence, if input_buffer is not * NULL. If the HAL returns -1 for the input buffer release sync fence, the * framework is free to immediately reuse the input buffer. Otherwise, the * framework will wait on the sync fence before refilling and reusing the * input buffer. * * >= CAMERA_DEVICE_API_VERSION_3_2: * * The input/output buffers provided by the framework in each request * may be brand new (having never before seen by the HAL). * * ------------------------------------------------------------------------ * Performance considerations: * * Handling a new buffer should be extremely lightweight and there should be * no frame rate degradation or frame jitter introduced. * * This call must return fast enough to ensure that the requested frame * rate can be sustained, especially for streaming cases (post-processing * quality settings set to FAST). The HAL should return this call in 1 * frame interval, and must return from this call in 4 frame intervals. * * Return values: * * 0: On a successful start to processing the capture request * * -EINVAL: If the input is malformed (the settings are NULL when not * allowed, there are 0 output buffers, etc) and capture processing * cannot start. Failures during request processing should be * handled by calling camera3_callback_ops_t.notify(). In case of * this error, the framework will retain responsibility for the * stream buffers' fences and the buffer handles; the HAL should * not close the fences or return these buffers with * process_capture_result. * * -ENODEV: If the camera device has encountered a serious error. After this * error is returned, only the close() method can be successfully * called by the framework. * */ int (*)(const struct camera3_device *, camera3_capture_request_t *request)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * process_capture_request:
     *
     * Send a new capture request to the HAL. The HAL should not return from
     * this call until it is ready to accept the next request to process. Only
     * one call to process_capture_request() will be made at a time by the
     * framework, and the calls will all be from the same thread. The next call
     * to process_capture_request() will be made as soon as a new request and
     * its associated buffers are available. In a normal preview scenario, this
     * means the function will be called again by the framework almost
     * instantly.
     *
     * The actual request processing is asynchronous, with the results of
     * capture being returned by the HAL through the process_capture_result()
     * call. This call requires the result metadata to be available, but output
     * buffers may simply provide sync fences to wait on. Multiple requests are
     * expected to be in flight at once, to maintain full output frame rate.
     *
     * The framework retains ownership of the request structure. It is only
     * guaranteed to be valid during this call. The HAL device must make copies
     * of the information it needs to retain for the capture processing. The HAL
     * is responsible for waiting on and closing the buffers' fences and
     * returning the buffer handles to the framework.
     *
     * The HAL must write the file descriptor for the input buffer's release
     * sync fence into input_buffer->release_fence, if input_buffer is not
     * NULL. If the HAL returns -1 for the input buffer release sync fence, the
     * framework is free to immediately reuse the input buffer. Otherwise, the
     * framework will wait on the sync fence before refilling and reusing the
     * input buffer.
     *
     * >= CAMERA_DEVICE_API_VERSION_3_2:
     *
     * The input/output buffers provided by the framework in each request
     * may be brand new (having never before seen by the HAL).
     *
     * ------------------------------------------------------------------------
     * Performance considerations:
     *
     * Handling a new buffer should be extremely lightweight and there should be
     * no frame rate degradation or frame jitter introduced.
     *
     * This call must return fast enough to ensure that the requested frame
     * rate can be sustained, especially for streaming cases (post-processing
     * quality settings set to FAST). The HAL should return this call in 1
     * frame interval, and must return from this call in 4 frame intervals.
     *
     * Return values:
     *
     *  0:      On a successful start to processing the capture request
     *
     * -EINVAL: If the input is malformed (the settings are NULL when not
     *          allowed, there are 0 output buffers, etc) and capture processing
     *          cannot start. Failures during request processing should be
     *          handled by calling camera3_callback_ops_t.notify(). In case of
     *          this error, the framework will retain responsibility for the
     *          stream buffers' fences and the buffer handles; the HAL should
     *          not close the fences or return these buffers with
     *          process_capture_result.
     *
     * -ENODEV: If the camera device has encountered a serious error. After this
     *          error is returned, only the close() method can be successfully
     *          called by the framework.
     *
     */
    int (*${name})(const struct camera3_device *,
            camera3_capture_request_t *request)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "process_capture_request:

Send a new capture request to the HAL. The HAL should not return from
this call until it is ready to accept the next request to process. Only
one call to process_capture_request() will be made at a time by the
framework, and the calls will all be from the same thread. The next call
to process_capture_request() will be made as soon as a new request and
its associated buffers are available. In a normal preview scenario, this
means the function will be called again by the framework almost
instantly.

The actual request processing is asynchronous, with the results of
capture being returned by the HAL through the process_capture_result()
call. This call requires the result metadata to be available, but output
buffers may simply provide sync fences to wait on. Multiple requests are
expected to be in flight at once, to maintain full output frame rate.

The framework retains ownership of the request structure. It is only
guaranteed to be valid during this call. The HAL device must make copies
of the information it needs to retain for the capture processing. The HAL
is responsible for waiting on and closing the buffers' fences and
returning the buffer handles to the framework.

The HAL must write the file descriptor for the input buffer's release
sync fence into input_buffer->release_fence, if input_buffer is not
NULL. If the HAL returns -1 for the input buffer release sync fence, the
framework is free to immediately reuse the input buffer. Otherwise, the
framework will wait on the sync fence before refilling and reusing the
input buffer.

>= CAMERA_DEVICE_API_VERSION_3_2:

The input/output buffers provided by the framework in each request
may be brand new (having never before seen by the HAL).

------------------------------------------------------------------------
Performance considerations:

Handling a new buffer should be extremely lightweight and there should be
no frame rate degradation or frame jitter introduced.

This call must return fast enough to ensure that the requested frame
rate can be sustained, especially for streaming cases (post-processing
quality settings set to FAST). The HAL should return this call in 1
frame interval, and must return from this call in 4 frame intervals.

Return values:

 0:      On a successful start to processing the capture request

-EINVAL: If the input is malformed (the settings are NULL when not
         allowed, there are 0 output buffers, etc) and capture processing
         cannot start. Failures during request processing should be
         handled by calling camera3_callback_ops_t.notify(). In case of
         this error, the framework will retain responsibility for the
         stream buffers' fences and the buffer handles; the HAL should
         not close the fences or return these buffers with
         process_capture_result.

-ENODEV: If the camera device has encountered a serious error. After this
         error is returned, only the close() method can be successfully
         called by the framework.


"
      end

      attribute 15590199 "get_metadata_vendor_tag_ops"
	public explicit_type "/********************************************************************** * Miscellaneous methods */ /** * get_metadata_vendor_tag_ops: * * Get methods to query for vendor extension metadata tag information. The * HAL should fill in all the vendor tag operation methods, or leave ops * unchanged if no vendor tags are defined. * * The definition of vendor_tag_query_ops_t can be found in * system/media/camera/include/system/camera_metadata.h. * * >= CAMERA_DEVICE_API_VERSION_3_2: * DEPRECATED. This function has been deprecated and should be set to * NULL by the HAL. Please implement get_vendor_tag_ops in camera_common.h * instead. */ void (*)(const struct camera3_device*, vendor_tag_query_ops_t* ops)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**********************************************************************
     * Miscellaneous methods
     */

    /**
     * get_metadata_vendor_tag_ops:
     *
     * Get methods to query for vendor extension metadata tag information. The
     * HAL should fill in all the vendor tag operation methods, or leave ops
     * unchanged if no vendor tags are defined.
     *
     * The definition of vendor_tag_query_ops_t can be found in
     * system/media/camera/include/system/camera_metadata.h.
     *
     * >= CAMERA_DEVICE_API_VERSION_3_2:
     *    DEPRECATED. This function has been deprecated and should be set to
     *    NULL by the HAL.  Please implement get_vendor_tag_ops in camera_common.h
     *    instead.
     */
    void (*${name})(const struct camera3_device*,
            vendor_tag_query_ops_t* ops)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Miscellaneous methods


get_metadata_vendor_tag_ops:

Get methods to query for vendor extension metadata tag information. The
HAL should fill in all the vendor tag operation methods, or leave ops
unchanged if no vendor tags are defined.

The definition of vendor_tag_query_ops_t can be found in
system/media/camera/include/system/camera_metadata.h.

>= CAMERA_DEVICE_API_VERSION_3_2:
   DEPRECATED. This function has been deprecated and should be set to
   NULL by the HAL.  Please implement get_vendor_tag_ops in camera_common.h
   instead.

"
      end

      attribute 15590327 "dump"
	public explicit_type "/** * dump: * * Print out debugging state for the camera device. This will be called by * the framework when the camera service is asked for a debug dump, which * happens when using the dumpsys tool, or when capturing a bugreport. * * The passed-in file descriptor can be used to write debugging text using * dprintf() or write(). The text should be in ASCII encoding only. * * Performance requirements: * * This must be a non-blocking call. The HAL should return from this call * in 1ms, must return from this call in 10ms. This call must avoid * deadlocks, as it may be called at any point during camera operation. * Any synchronization primitives used (such as mutex locks or semaphores) * should be acquired with a timeout. */ void (*)(const struct camera3_device *, int fd)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * dump:
     *
     * Print out debugging state for the camera device. This will be called by
     * the framework when the camera service is asked for a debug dump, which
     * happens when using the dumpsys tool, or when capturing a bugreport.
     *
     * The passed-in file descriptor can be used to write debugging text using
     * dprintf() or write(). The text should be in ASCII encoding only.
     *
     * Performance requirements:
     *
     * This must be a non-blocking call. The HAL should return from this call
     * in 1ms, must return from this call in 10ms. This call must avoid
     * deadlocks, as it may be called at any point during camera operation.
     * Any synchronization primitives used (such as mutex locks or semaphores)
     * should be acquired with a timeout.
     */
    void (*${name})(const struct camera3_device *, int fd)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "dump:

Print out debugging state for the camera device. This will be called by
the framework when the camera service is asked for a debug dump, which
happens when using the dumpsys tool, or when capturing a bugreport.

The passed-in file descriptor can be used to write debugging text using
dprintf() or write(). The text should be in ASCII encoding only.

Performance requirements:

This must be a non-blocking call. The HAL should return from this call
in 1ms, must return from this call in 10ms. This call must avoid
deadlocks, as it may be called at any point during camera operation.
Any synchronization primitives used (such as mutex locks or semaphores)
should be acquired with a timeout.

"
      end

      attribute 15590455 "flush"
	public explicit_type "/** * flush: * * Flush all currently in-process captures and all buffers in the pipeline * on the given device. The framework will use this to dump all state as * quickly as possible in order to prepare for a configure_streams() call. * * No buffers are required to be successfully returned, so every buffer * held at the time of flush() (whether successfully filled or not) may be * returned with CAMERA3_BUFFER_STATUS_ERROR. Note the HAL is still allowed * to return valid (CAMERA3_BUFFER_STATUS_OK) buffers during this call, * provided they are successfully filled. * * All requests currently in the HAL are expected to be returned as soon as * possible. Not-in-process requests should return errors immediately. Any * interruptible hardware blocks should be stopped, and any uninterruptible * blocks should be waited on. * * flush() may be called concurrently to process_capture_request(), with the expectation that * process_capture_request will return quickly and the request submitted in that * process_capture_request call is treated like all other in-flight requests. Due to * concurrency issues, it is possible that from the HAL's point of view, a * process_capture_request() call may be started after flush has been invoked but has not * returned yet. If such a call happens before flush() returns, the HAL should treat the new * capture request like other in-flight pending requests (see #4 below). * * More specifically, the HAL must follow below requirements for various cases: * * 1. For captures that are too late for the HAL to cancel/stop, and will be * completed normally by the HAL; i.e. the HAL can send shutter/notify and * process_capture_result and buffers as normal. * * 2. For pending requests that have not done any processing, the HAL must call notify * CAMERA3_MSG_ERROR_REQUEST, and return all the output buffers with * process_capture_result in the error state (CAMERA3_BUFFER_STATUS_ERROR). * The HAL must not place the release fence into an error state, instead, * the release fences must be set to the acquire fences passed by the framework, * or -1 if they have been waited on by the HAL already. This is also the path * to follow for any captures for which the HAL already called notify() with * CAMERA3_MSG_SHUTTER but won't be producing any metadata/valid buffers for. * After CAMERA3_MSG_ERROR_REQUEST, for a given frame, only process_capture_results with * buffers in CAMERA3_BUFFER_STATUS_ERROR are allowed. No further notifys or * process_capture_result with non-null metadata is allowed. * * 3. For partially completed pending requests that will not have all the output * buffers or perhaps missing metadata, the HAL should follow below: * * 3.1. Call notify with CAMERA3_MSG_ERROR_RESULT if some of the expected result * metadata (i.e. one or more partial metadata) won't be available for the capture. * * 3.2. Call notify with CAMERA3_MSG_ERROR_BUFFER for every buffer that won't * be produced for the capture. * * 3.3 Call notify with CAMERA3_MSG_SHUTTER with the capture timestamp before * any buffers/metadata are returned with process_capture_result. * * 3.4 For captures that will produce some results, the HAL must not call * CAMERA3_MSG_ERROR_REQUEST, since that indicates complete failure. * * 3.5. Valid buffers/metadata should be passed to the framework as normal. * * 3.6. Failed buffers should be returned to the framework as described for case 2. * But failed buffers do not have to follow the strict ordering valid buffers do, * and may be out-of-order with respect to valid buffers. For example, if buffers * A, B, C, D, E are sent, D and E are failed, then A, E, B, D, C is an acceptable * return order. * * 3.7. For fully-missing metadata, calling CAMERA3_MSG_ERROR_RESULT is sufficient, no * need to call process_capture_result with NULL metadata or equivalent. * * 4. If a flush() is invoked while a process_capture_request() invocation is active, that * process call should return as soon as possible. In addition, if a process_capture_request() * call is made after flush() has been invoked but before flush() has returned, the * capture request provided by the late process_capture_request call should be treated like * a pending request in case #2 above. * * flush() should only return when there are no more outstanding buffers or * requests left in the HAL. The framework may call configure_streams (as * the HAL state is now quiesced) or may issue new requests. * * Note that it's sufficient to only support fully-succeeded and fully-failed result cases. * However, it is highly desirable to support the partial failure cases as well, as it * could help improve the flush call overall performance. * * Performance requirements: * * The HAL should return from this call in 100ms, and must return from this * call in 1000ms. And this call must not be blocked longer than pipeline * latency (see S7 for definition). * * Version information: * * only available if device version >= CAMERA_DEVICE_API_VERSION_3_1. * * Return values: * * 0: On a successful flush of the camera HAL. * * -EINVAL: If the input is malformed (the device is not valid). * * -ENODEV: If the camera device has encountered a serious error. After this * error is returned, only the close() method can be successfully * called by the framework. */ int (*)(const struct camera3_device *)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * flush:
     *
     * Flush all currently in-process captures and all buffers in the pipeline
     * on the given device. The framework will use this to dump all state as
     * quickly as possible in order to prepare for a configure_streams() call.
     *
     * No buffers are required to be successfully returned, so every buffer
     * held at the time of flush() (whether successfully filled or not) may be
     * returned with CAMERA3_BUFFER_STATUS_ERROR. Note the HAL is still allowed
     * to return valid (CAMERA3_BUFFER_STATUS_OK) buffers during this call,
     * provided they are successfully filled.
     *
     * All requests currently in the HAL are expected to be returned as soon as
     * possible.  Not-in-process requests should return errors immediately. Any
     * interruptible hardware blocks should be stopped, and any uninterruptible
     * blocks should be waited on.
     *
     * flush() may be called concurrently to process_capture_request(), with the expectation that
     * process_capture_request will return quickly and the request submitted in that
     * process_capture_request call is treated like all other in-flight requests.  Due to
     * concurrency issues, it is possible that from the HAL's point of view, a
     * process_capture_request() call may be started after flush has been invoked but has not
     * returned yet. If such a call happens before flush() returns, the HAL should treat the new
     * capture request like other in-flight pending requests (see #4 below).
     *
     * More specifically, the HAL must follow below requirements for various cases:
     *
     * 1. For captures that are too late for the HAL to cancel/stop, and will be
     *    completed normally by the HAL; i.e. the HAL can send shutter/notify and
     *    process_capture_result and buffers as normal.
     *
     * 2. For pending requests that have not done any processing, the HAL must call notify
     *    CAMERA3_MSG_ERROR_REQUEST, and return all the output buffers with
     *    process_capture_result in the error state (CAMERA3_BUFFER_STATUS_ERROR).
     *    The HAL must not place the release fence into an error state, instead,
     *    the release fences must be set to the acquire fences passed by the framework,
     *    or -1 if they have been waited on by the HAL already. This is also the path
     *    to follow for any captures for which the HAL already called notify() with
     *    CAMERA3_MSG_SHUTTER but won't be producing any metadata/valid buffers for.
     *    After CAMERA3_MSG_ERROR_REQUEST, for a given frame, only process_capture_results with
     *    buffers in CAMERA3_BUFFER_STATUS_ERROR are allowed. No further notifys or
     *    process_capture_result with non-null metadata is allowed.
     *
     * 3. For partially completed pending requests that will not have all the output
     *    buffers or perhaps missing metadata, the HAL should follow below:
     *
     *    3.1. Call notify with CAMERA3_MSG_ERROR_RESULT if some of the expected result
     *    metadata (i.e. one or more partial metadata) won't be available for the capture.
     *
     *    3.2. Call notify with CAMERA3_MSG_ERROR_BUFFER for every buffer that won't
     *         be produced for the capture.
     *
     *    3.3  Call notify with CAMERA3_MSG_SHUTTER with the capture timestamp before
     *         any buffers/metadata are returned with process_capture_result.
     *
     *    3.4 For captures that will produce some results, the HAL must not call
     *        CAMERA3_MSG_ERROR_REQUEST, since that indicates complete failure.
     *
     *    3.5. Valid buffers/metadata should be passed to the framework as normal.
     *
     *    3.6. Failed buffers should be returned to the framework as described for case 2.
     *         But failed buffers do not have to follow the strict ordering valid buffers do,
     *         and may be out-of-order with respect to valid buffers. For example, if buffers
     *         A, B, C, D, E are sent, D and E are failed, then A, E, B, D, C is an acceptable
     *         return order.
     *
     *    3.7. For fully-missing metadata, calling CAMERA3_MSG_ERROR_RESULT is sufficient, no
     *         need to call process_capture_result with NULL metadata or equivalent.
     *
     * 4. If a flush() is invoked while a process_capture_request() invocation is active, that
     *    process call should return as soon as possible. In addition, if a process_capture_request()
     *    call is made after flush() has been invoked but before flush() has returned, the
     *    capture request provided by the late process_capture_request call should be treated like
     *    a pending request in case #2 above.
     *
     * flush() should only return when there are no more outstanding buffers or
     * requests left in the HAL. The framework may call configure_streams (as
     * the HAL state is now quiesced) or may issue new requests.
     *
     * Note that it's sufficient to only support fully-succeeded and fully-failed result cases.
     * However, it is highly desirable to support the partial failure cases as well, as it
     * could help improve the flush call overall performance.
     *
     * Performance requirements:
     *
     * The HAL should return from this call in 100ms, and must return from this
     * call in 1000ms. And this call must not be blocked longer than pipeline
     * latency (see S7 for definition).
     *
     * Version information:
     *
     *   only available if device version >= CAMERA_DEVICE_API_VERSION_3_1.
     *
     * Return values:
     *
     *  0:      On a successful flush of the camera HAL.
     *
     * -EINVAL: If the input is malformed (the device is not valid).
     *
     * -ENODEV: If the camera device has encountered a serious error. After this
     *          error is returned, only the close() method can be successfully
     *          called by the framework.
     */
    int (*${name})(const struct camera3_device *)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "flush:

Flush all currently in-process captures and all buffers in the pipeline
on the given device. The framework will use this to dump all state as
quickly as possible in order to prepare for a configure_streams() call.

No buffers are required to be successfully returned, so every buffer
held at the time of flush() (whether successfully filled or not) may be
returned with CAMERA3_BUFFER_STATUS_ERROR. Note the HAL is still allowed
to return valid (CAMERA3_BUFFER_STATUS_OK) buffers during this call,
provided they are successfully filled.

All requests currently in the HAL are expected to be returned as soon as
possible.  Not-in-process requests should return errors immediately. Any
interruptible hardware blocks should be stopped, and any uninterruptible
blocks should be waited on.

flush() may be called concurrently to process_capture_request(), with the expectation that
process_capture_request will return quickly and the request submitted in that
process_capture_request call is treated like all other in-flight requests.  Due to
concurrency issues, it is possible that from the HAL's point of view, a
process_capture_request() call may be started after flush has been invoked but has not
returned yet. If such a call happens before flush() returns, the HAL should treat the new
capture request like other in-flight pending requests (see #4 below).

More specifically, the HAL must follow below requirements for various cases:

1. For captures that are too late for the HAL to cancel/stop, and will be
   completed normally by the HAL; i.e. the HAL can send shutter/notify and
   process_capture_result and buffers as normal.

2. For pending requests that have not done any processing, the HAL must call notify
   CAMERA3_MSG_ERROR_REQUEST, and return all the output buffers with
   process_capture_result in the error state (CAMERA3_BUFFER_STATUS_ERROR).
   The HAL must not place the release fence into an error state, instead,
   the release fences must be set to the acquire fences passed by the framework,
   or -1 if they have been waited on by the HAL already. This is also the path
   to follow for any captures for which the HAL already called notify() with
   CAMERA3_MSG_SHUTTER but won't be producing any metadata/valid buffers for.
   After CAMERA3_MSG_ERROR_REQUEST, for a given frame, only process_capture_results with
   buffers in CAMERA3_BUFFER_STATUS_ERROR are allowed. No further notifys or
   process_capture_result with non-null metadata is allowed.

3. For partially completed pending requests that will not have all the output
   buffers or perhaps missing metadata, the HAL should follow below:

   3.1. Call notify with CAMERA3_MSG_ERROR_RESULT if some of the expected result
   metadata (i.e. one or more partial metadata) won't be available for the capture.

   3.2. Call notify with CAMERA3_MSG_ERROR_BUFFER for every buffer that won't
        be produced for the capture.

   3.3  Call notify with CAMERA3_MSG_SHUTTER with the capture timestamp before
        any buffers/metadata are returned with process_capture_result.

   3.4 For captures that will produce some results, the HAL must not call
       CAMERA3_MSG_ERROR_REQUEST, since that indicates complete failure.

   3.5. Valid buffers/metadata should be passed to the framework as normal.

   3.6. Failed buffers should be returned to the framework as described for case 2.
        But failed buffers do not have to follow the strict ordering valid buffers do,
        and may be out-of-order with respect to valid buffers. For example, if buffers
        A, B, C, D, E are sent, D and E are failed, then A, E, B, D, C is an acceptable
        return order.

   3.7. For fully-missing metadata, calling CAMERA3_MSG_ERROR_RESULT is sufficient, no
        need to call process_capture_result with NULL metadata or equivalent.

4. If a flush() is invoked while a process_capture_request() invocation is active, that
   process call should return as soon as possible. In addition, if a process_capture_request()
   call is made after flush() has been invoked but before flush() has returned, the
   capture request provided by the late process_capture_request call should be treated like
   a pending request in case #2 above.

flush() should only return when there are no more outstanding buffers or
requests left in the HAL. The framework may call configure_streams (as
the HAL state is now quiesced) or may issue new requests.

Note that it's sufficient to only support fully-succeeded and fully-failed result cases.
However, it is highly desirable to support the partial failure cases as well, as it
could help improve the flush call overall performance.

Performance requirements:

The HAL should return from this call in 100ms, and must return from this
call in 1000ms. And this call must not be blocked longer than pipeline
latency (see S7 for definition).

Version information:

  only available if device version >= CAMERA_DEVICE_API_VERSION_3_1.

Return values:

 0:      On a successful flush of the camera HAL.

-EINVAL: If the input is malformed (the device is not valid).

-ENODEV: If the camera device has encountered a serious error. After this
         error is returned, only the close() method can be successfully
         called by the framework.

"
      end

      attribute 15590583 "reserved"
	public explicit_type "void"
	multiplicity "[8]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " reserved for future use 
"
      end
    end

    class 4355895 "camera3_device_ops_t"
      visibility package stereotype "typedef" base_type class_ref 4355767 // camera3_device_ops
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4356023 "camera3_device"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
Camera device definition

"
      classrelation 8342583 // common (<directional composition>)
	relation 8342583 *-->
	  a role_name "common" public
	    comment "common.version must equal CAMERA_DEVICE_API_VERSION_3_0 to identify this
device as implementing version 3.0 of the camera device HAL.

Performance requirements:

Camera open (common.module->common.methods->open) should return in 200ms, and must return
in 500ms.
Camera close (common.close) should return in 200ms, and must return in 500ms.


"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8342583 // common (<directional composition>)
	  b parent class_ref 4305975 // hw_device_t
      end

      classrelation 8342711 // ops (<unidirectional association>)
	relation 8342711 --->
	  a role_name "ops" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8342711 // ops (<unidirectional association>)
	  b parent class_ref 4355895 // camera3_device_ops_t
      end

      attribute 15590711 "priv"
	public explicit_type "void"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4356151 "camera3_device_t"
      visibility package stereotype "typedef" base_type class_ref 4356023 // camera3_device
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4356279 "camera_info"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15590839 "facing"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The direction that the camera faces to. See system/core/include/system/camera.h
for camera facing definitions.

Version information (based on camera_module_t.common.module_api_version):

CAMERA_MODULE_API_VERSION_2_3 or lower:

  It should be CAMERA_FACING_BACK or CAMERA_FACING_FRONT.

CAMERA_MODULE_API_VERSION_2_4 or higher:

  It should be CAMERA_FACING_BACK, CAMERA_FACING_FRONT or
  CAMERA_FACING_EXTERNAL.

"
      end

      attribute 15590967 "orientation"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The orientation of the camera image. The value is the angle that the
camera image needs to be rotated clockwise so it shows correctly on the
display in its natural orientation. It should be 0, 90, 180, or 270.

For example, suppose a device has a naturally tall screen. The
back-facing camera sensor is mounted in landscape. You are looking at the
screen. If the top side of the camera sensor is aligned with the right
edge of the screen in natural orientation, the value should be 90. If the
top side of a front-facing camera sensor is aligned with the right of the
screen, the value should be 270.

Version information (based on camera_module_t.common.module_api_version):

CAMERA_MODULE_API_VERSION_2_3 or lower:

  Valid in all camera_module versions.

CAMERA_MODULE_API_VERSION_2_4 or higher:

  Valid if camera facing is CAMERA_FACING_BACK or CAMERA_FACING_FRONT,
  not valid if camera facing is CAMERA_FACING_EXTERNAL.

"
      end

      attribute 15591095 "static_camera_characteristics"
	const_attribute public explicit_type "camera_metadata_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The camera's fixed characteristics, which include all static camera metadata
specified in system/media/camera/docs/docs.html. This should be a sorted metadata
buffer, and may not be modified or freed by the caller. The pointer should remain
valid for the lifetime of the camera module, and values in it may not
change after it is returned by get_camera_info().

Version information (based on camera_module_t.common.module_api_version):

 CAMERA_MODULE_API_VERSION_1_0:

   Not valid. Extra characteristics are not available. Do not read this
   field.

 CAMERA_MODULE_API_VERSION_2_0 or higher:

   Valid if device_version >= CAMERA_DEVICE_API_VERSION_2_0. Do not read
   otherwise.


"
      end

      attribute 15591223 "resource_cost"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The total resource \"cost\" of using this camera, represented as an integer
value in the range [0, 100] where 100 represents total usage of the shared
resource that is the limiting bottleneck of the camera subsystem.  This may
be a very rough estimate, and is used as a hint to the camera service to
determine when to disallow multiple applications from simultaneously
opening different cameras advertised by the camera service.

The camera service must be able to simultaneously open and use any
combination of camera devices exposed by the HAL where the sum of
the resource costs of these cameras is <= 100.  For determining cost,
each camera device must be assumed to be configured and operating at
the maximally resource-consuming framerate and stream size settings
available in the configuration settings exposed for that device through
the camera metadata.

The camera service may still attempt to simultaneously open combinations
of camera devices with a total resource cost > 100.  This may succeed or
fail.  If this succeeds, combinations of configurations that are not
supported due to resource constraints from having multiple open devices
should fail during the configure calls.  If the total resource cost is
<= 100, open and configure should never fail for any stream configuration
settings or other device capabilities that would normally succeed for a
device when it is the only open camera device.

This field will be used to determine whether background applications are
allowed to use this camera device while other applications are using other
camera devices.  Note: multiple applications will never be allowed by the
camera service to simultaneously open the same camera device.

Example use cases:

Ex. 1: Camera Device 0 = Back Camera
       Camera Device 1 = Front Camera
  - Using both camera devices causes a large framerate slowdown due to
    limited ISP bandwidth.

  Configuration:

  Camera Device 0 - resource_cost = 51
                    conflicting_devices = null
  Camera Device 1 - resource_cost = 51
                    conflicting_devices = null

  Result:

  Since the sum of the resource costs is > 100, if a higher-priority
  application has either device open, no lower-priority applications will be
  allowed by the camera service to open either device.  If a lower-priority
  application is using a device that a higher-priority subsequently attempts
  to open, the lower-priority application will be forced to disconnect the
  the device.

  If the highest-priority application chooses, it may still attempt to open
  both devices (since these devices are not listed as conflicting in the
  conflicting_devices fields), but usage of these devices may fail in the
  open or configure calls.

Ex. 2: Camera Device 0 = Left Back Camera
       Camera Device 1 = Right Back Camera
       Camera Device 2 = Combined stereo camera using both right and left
                         back camera sensors used by devices 0, and 1
       Camera Device 3 = Front Camera
  - Due to do hardware constraints, up to two cameras may be open at once. The
    combined stereo camera may never be used at the same time as either of the
    two back camera devices (device 0, 1), and typically requires too much
    bandwidth to use at the same time as the front camera (device 3).

  Configuration:

  Camera Device 0 - resource_cost = 50
                    conflicting_devices = { 2 }
  Camera Device 1 - resource_cost = 50
                    conflicting_devices = { 2 }
  Camera Device 2 - resource_cost = 100
                    conflicting_devices = { 0, 1 }
  Camera Device 3 - resource_cost = 50
                    conflicting_devices = null

  Result:

  Based on the conflicting_devices fields, the camera service guarantees that
  the following sets of open devices will never be allowed: { 1, 2 }, { 0, 2 }.

  Based on the resource_cost fields, if a high-priority foreground application
  is using camera device 0, a background application would be allowed to open
  camera device 1 or 3 (but would be forced to disconnect it again if the
  foreground application opened another device).

  The highest priority application may still attempt to simultaneously open
  devices 0, 2, and 3, but the HAL may fail in open or configure calls for
  this combination.

Ex. 3: Camera Device 0 = Back Camera
       Camera Device 1 = Front Camera
       Camera Device 2 = Low-power Front Camera that uses the same
                         sensor as device 1, but only exposes image stream
                         resolutions that can be used in low-power mode
 - Using both front cameras (device 1, 2) at the same time is impossible due
   a shared physical sensor.  Using the back and \"high-power\" front camera
   (device 1) may be impossible for some stream configurations due to hardware
   limitations, but the \"low-power\" front camera option may always be used as
   it has special dedicated hardware.

  Configuration:

  Camera Device 0 - resource_cost = 100
                    conflicting_devices = null
  Camera Device 1 - resource_cost = 100
                    conflicting_devices = { 2 }
  Camera Device 2 - resource_cost = 0
                    conflicting_devices = { 1 }
  Result:

  Based on the conflicting_devices fields, the camera service guarantees that
  the following sets of open devices will never be allowed: { 1, 2 }.

  Based on the resource_cost fields, only the highest priority application
  may attempt to open both device 0 and 1 at the same time. If a higher-priority
  application is not using device 1 or 2, a low-priority background application
  may open device 2 (but will be forced to disconnect it if a higher-priority
  application subsequently opens device 1 or 2).

Version information (based on camera_module_t.common.module_api_version):

 CAMERA_MODULE_API_VERSION_2_3 or lower:

   Not valid.  Can be assumed to be 100.  Do not read this field.

 CAMERA_MODULE_API_VERSION_2_4 or higher:

   Always valid.

"
      end

      attribute 15591351 "conflicting_devices"
	public explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "An array of camera device IDs represented as NULL-terminated strings
indicating other devices that cannot be simultaneously opened while this
camera device is in use.

This field is intended to be used to indicate that this camera device
is a composite of several other camera devices, or otherwise has
hardware dependencies that prohibit simultaneous usage. If there are no
dependencies, a NULL may be returned in this field to indicate this.

The camera service will never simultaneously open any of the devices
in this list while this camera device is open.

The strings pointed to in this field will not be cleaned up by the camera
service, and must remain while this device is plugged in.

Version information (based on camera_module_t.common.module_api_version):

 CAMERA_MODULE_API_VERSION_2_3 or lower:

   Not valid.  Can be assumed to be NULL.  Do not read this field.

 CAMERA_MODULE_API_VERSION_2_4 or higher:

   Always valid.

"
      end

    end

    class 4356407 "camera_info_t"
      visibility package stereotype "typedef" base_type class_ref 4356279 // camera_info
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4356535 "camera_device_status"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "camera_device_status_t:

The current status of the camera device, as provided by the HAL through the
camera_module_callbacks.camera_device_status_change() call.

At module load time, the framework will assume all camera devices are in the
CAMERA_DEVICE_STATUS_PRESENT state. The HAL should invoke
camera_module_callbacks::camera_device_status_change to inform the framework
of any initially NOT_PRESENT devices.

Allowed transitions:
     PRESENT            -> NOT_PRESENT
     NOT_PRESENT        -> ENUMERATING
     NOT_PRESENT        -> PRESENT
     ENUMERATING        -> PRESENT
     ENUMERATING        -> NOT_PRESENT
"
      attribute 15591479 "CAMERA_DEVICE_STATUS_NOT_PRESENT"
	public type class_ref 4356535 // camera_device_status
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15591607 "CAMERA_DEVICE_STATUS_PRESENT"
	public type class_ref 4356535 // camera_device_status
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15591735 "CAMERA_DEVICE_STATUS_ENUMERATING"
	public type class_ref 4356535 // camera_device_status
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4356663 "camera_device_status_t"
      visibility package stereotype "typedef" base_type class_ref 4356535 // camera_device_status
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4356791 "torch_mode_status"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The camera device is not currently connected, and opening it will return
failure.

Version information (based on camera_module_t.common.module_api_version):

CAMERA_MODULE_API_VERSION_2_3 or lower:

  Calls to get_camera_info must still succeed, and provide the same information
  it would if the camera were connected.

CAMERA_MODULE_API_VERSION_2_4:

  The camera device at this status must return -EINVAL for get_camera_info call,
  as the device is not connected.


The camera device is connected, and opening it will succeed.

CAMERA_MODULE_API_VERSION_2_3 or lower:

  The information returned by get_camera_info cannot change due to this status
  change. By default, the framework will assume all devices are in this state.

CAMERA_MODULE_API_VERSION_2_4:

  The information returned by get_camera_info will become valid after a device's
  status changes to this. By default, the framework will assume all devices are in
  this state.


The camera device is connected, but it is undergoing an enumeration and
so opening the device will return -EBUSY.

CAMERA_MODULE_API_VERSION_2_3 or lower:

  Calls to get_camera_info must still succeed, as if the camera was in the
  PRESENT status.

CAMERA_MODULE_API_VERSION_2_4:

  The camera device at this status must return -EINVAL for get_camera_info for call,
  as the device is not ready.


torch_mode_status_t:

The current status of the torch mode, as provided by the HAL through the
camera_module_callbacks.torch_mode_status_change() call.

The torch mode status of a camera device is applicable only when the camera
device is present. The framework will not call set_torch_mode() to turn on
torch mode of a camera device if the camera device is not present. At module
load time, the framework will assume torch modes are in the
TORCH_MODE_STATUS_AVAILABLE_OFF state if the camera device is present and
android.flash.info.available is reported as true via get_camera_info() call.

The behaviors of the camera HAL module that the framework expects in the
following situations when a camera device's status changes:
 1. A previously-disconnected camera device becomes connected.
     After camera_module_callbacks::camera_device_status_change() is invoked
     to inform the framework that the camera device is present, the framework
     will assume the camera device's torch mode is in
     TORCH_MODE_STATUS_AVAILABLE_OFF state. The camera HAL module does not need
     to invoke camera_module_callbacks::torch_mode_status_change() unless the
     flash unit is unavailable to use by set_torch_mode().

 2. A previously-connected camera becomes disconnected.
     After camera_module_callbacks::camera_device_status_change() is invoked
     to inform the framework that the camera device is not present, the
     framework will not call set_torch_mode() for the disconnected camera
     device until its flash unit becomes available again. The camera HAL
     module does not need to invoke
     camera_module_callbacks::torch_mode_status_change() separately to inform
     that the flash unit has become unavailable.

 3. open() is called to open a camera device.
     The camera HAL module must invoke
     camera_module_callbacks::torch_mode_status_change() for all flash units
     that have entered TORCH_MODE_STATUS_NOT_AVAILABLE state and can not be
     turned on by calling set_torch_mode() anymore due to this open() call.
     open() must not trigger TORCH_MODE_STATUS_AVAILABLE_OFF before
     TORCH_MODE_STATUS_NOT_AVAILABLE for all flash units that have become
     unavailable.

 4. close() is called to close a camera device.
     The camera HAL module must invoke
     camera_module_callbacks::torch_mode_status_change() for all flash units
     that have entered TORCH_MODE_STATUS_AVAILABLE_OFF state and can be turned
     on by calling set_torch_mode() again because of enough resources freed
     up by this close() call.

 Note that the framework calling set_torch_mode() successfully must trigger
 TORCH_MODE_STATUS_AVAILABLE_OFF or TORCH_MODE_STATUS_AVAILABLE_ON callback
 for the given camera device. Additionally it must trigger
 TORCH_MODE_STATUS_AVAILABLE_OFF callbacks for other previously-on torch
 modes if HAL cannot keep multiple torch modes on simultaneously.
"
      attribute 15591863 "TORCH_MODE_STATUS_NOT_AVAILABLE"
	public type class_ref 4356791 // torch_mode_status
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15591991 "TORCH_MODE_STATUS_AVAILABLE_OFF"
	public type class_ref 4356791 // torch_mode_status
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15592119 "TORCH_MODE_STATUS_AVAILABLE_ON"
	public type class_ref 4356791 // torch_mode_status
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4356919 "torch_mode_status_t"
      visibility package stereotype "typedef" base_type class_ref 4356791 // torch_mode_status
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4357047 "camera_module_callbacks"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The flash unit is no longer available and the torch mode can not be
turned on by calling set_torch_mode(). If the torch mode is on, it
will be turned off by HAL before HAL calls torch_mode_status_change().


A torch mode has become off and available to be turned on via
set_torch_mode(). This may happen in the following
cases:
  1. After the resources to turn on the torch mode have become available.
  2. After set_torch_mode() is called to turn off the torch mode.
  3. After the framework turned on the torch mode of some other camera
     device and HAL had to turn off the torch modes of any camera devices
     that were previously on.


A torch mode has become on and available to be turned off via
set_torch_mode(). This can happen only after set_torch_mode() is called
to turn on the torch mode.


Callback functions for the camera HAL module to use to inform the framework
of changes to the camera subsystem.

Version information (based on camera_module_t.common.module_api_version):

Each callback is called only by HAL modules implementing the indicated
version or higher of the HAL module API interface.

 CAMERA_MODULE_API_VERSION_2_1:
   camera_device_status_change()

 CAMERA_MODULE_API_VERSION_2_4:
   torch_mode_status_change()

"
      attribute 15592247 "camera_device_status_change"
	public explicit_type "/** * camera_device_status_change: * * Callback to the framework to indicate that the state of a specific camera * device has changed. At module load time, the framework will assume all * camera devices are in the CAMERA_DEVICE_STATUS_PRESENT state. The HAL * must call this method to inform the framework of any initially * NOT_PRESENT devices. * * This callback is added for CAMERA_MODULE_API_VERSION_2_1. * * camera_module_callbacks: The instance of camera_module_callbacks_t passed * to the module with set_callbacks. * * camera_id: The ID of the camera device that has a new status. * * new_status: The new status code, one of the camera_device_status_t enums, * or a platform-specific status. * */ void (*)(const struct camera_module_callbacks*, int camera_id, int new_status)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}

    /**
     * camera_device_status_change:
     *
     * Callback to the framework to indicate that the state of a specific camera
     * device has changed. At module load time, the framework will assume all
     * camera devices are in the CAMERA_DEVICE_STATUS_PRESENT state. The HAL
     * must call this method to inform the framework of any initially
     * NOT_PRESENT devices.
     *
     * This callback is added for CAMERA_MODULE_API_VERSION_2_1.
     *
     * camera_module_callbacks: The instance of camera_module_callbacks_t passed
     *   to the module with set_callbacks.
     *
     * camera_id: The ID of the camera device that has a new status.
     *
     * new_status: The new status code, one of the camera_device_status_t enums,
     *   or a platform-specific status.
     *
     */
    void (*${name})(const struct camera_module_callbacks*,
            int camera_id,
            int new_status)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "camera_device_status_change:

Callback to the framework to indicate that the state of a specific camera
device has changed. At module load time, the framework will assume all
camera devices are in the CAMERA_DEVICE_STATUS_PRESENT state. The HAL
must call this method to inform the framework of any initially
NOT_PRESENT devices.

This callback is added for CAMERA_MODULE_API_VERSION_2_1.

camera_module_callbacks: The instance of camera_module_callbacks_t passed
  to the module with set_callbacks.

camera_id: The ID of the camera device that has a new status.

new_status: The new status code, one of the camera_device_status_t enums,
  or a platform-specific status.


"
      end

      attribute 15592375 "torch_mode_status_change"
	public explicit_type "/** * torch_mode_status_change: * * Callback to the framework to indicate that the state of the torch mode * of the flash unit associated with a specific camera device has changed. * At module load time, the framework will assume the torch modes are in * the TORCH_MODE_STATUS_AVAILABLE_OFF state if android.flash.info.available * is reported as true via get_camera_info() call. * * This callback is added for CAMERA_MODULE_API_VERSION_2_4. * * camera_module_callbacks: The instance of camera_module_callbacks_t * passed to the module with set_callbacks. * * camera_id: The ID of camera device whose flash unit has a new torch mode * status. * * new_status: The new status code, one of the torch_mode_status_t enums. */ void (*)(const struct camera_module_callbacks*, const char* camera_id, int new_status)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * torch_mode_status_change:
     *
     * Callback to the framework to indicate that the state of the torch mode
     * of the flash unit associated with a specific camera device has changed.
     * At module load time, the framework will assume the torch modes are in
     * the TORCH_MODE_STATUS_AVAILABLE_OFF state if android.flash.info.available
     * is reported as true via get_camera_info() call.
     *
     * This callback is added for CAMERA_MODULE_API_VERSION_2_4.
     *
     * camera_module_callbacks: The instance of camera_module_callbacks_t
     *   passed to the module with set_callbacks.
     *
     * camera_id: The ID of camera device whose flash unit has a new torch mode
     *   status.
     *
     * new_status: The new status code, one of the torch_mode_status_t enums.
     */
    void (*${name})(const struct camera_module_callbacks*,
            const char* camera_id,
            int new_status)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "torch_mode_status_change:

Callback to the framework to indicate that the state of the torch mode
of the flash unit associated with a specific camera device has changed.
At module load time, the framework will assume the torch modes are in
the TORCH_MODE_STATUS_AVAILABLE_OFF state if android.flash.info.available
is reported as true via get_camera_info() call.

This callback is added for CAMERA_MODULE_API_VERSION_2_4.

camera_module_callbacks: The instance of camera_module_callbacks_t
  passed to the module with set_callbacks.

camera_id: The ID of camera device whose flash unit has a new torch mode
  status.

new_status: The new status code, one of the torch_mode_status_t enums.

"
      end
    end

    class 4357175 "camera_module_callbacks_t"
      visibility package stereotype "typedef" base_type class_ref 4357047 // camera_module_callbacks
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4357303 "camera_module"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8343095 // common (<directional composition>)
	relation 8343095 *-->
	  a role_name "common" public
	    comment "Common methods of the camera module.  This *must* be the first member of
camera_module as users of this structure will cast a hw_module_t to
camera_module pointer in contexts where it's known the hw_module_t
references a camera_module.

The return values for common.methods->open for camera_module are:

0:           On a successful open of the camera device.

-ENODEV:     The camera device cannot be opened due to an internal
             error.

-EINVAL:     The input arguments are invalid, i.e. the id is invalid,
             and/or the module is invalid.

-EBUSY:      The camera device was already opened for this camera id
             (by using this method or open_legacy),
             regardless of the device HAL version it was opened as.

-EUSERS:     The maximal number of camera devices that can be
             opened concurrently were opened already, either by
             this method or the open_legacy method.

All other return values from common.methods->open will be treated as
-ENODEV.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8343095 // common (<directional composition>)
	  b parent class_ref 4305335 // hw_module_t
      end

      attribute 15592503 "get_number_of_cameras"
	public explicit_type "/** * get_number_of_cameras: * * Returns the number of camera devices accessible through the camera * module. The camera devices are numbered 0 through N-1, where N is the * value returned by this call. The name of the camera device for open() is * simply the number converted to a string. That is, \"0\" for camera ID 0, * \"1\" for camera ID 1. * * Version information (based on camera_module_t.common.module_api_version): * * CAMERA_MODULE_API_VERSION_2_3 or lower: * * The value here must be static, and cannot change after the first call * to this method. * * CAMERA_MODULE_API_VERSION_2_4 or higher: * * The value here must be static, and must count only built-in cameras, * which have CAMERA_FACING_BACK or CAMERA_FACING_FRONT camera facing values * (camera_info.facing). The HAL must not include the external cameras * (camera_info.facing == CAMERA_FACING_EXTERNAL) into the return value * of this call. Frameworks will use camera_device_status_change callback * to manage number of external cameras. */ int (*)(void)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * get_number_of_cameras:
     *
     * Returns the number of camera devices accessible through the camera
     * module.  The camera devices are numbered 0 through N-1, where N is the
     * value returned by this call. The name of the camera device for open() is
     * simply the number converted to a string. That is, \"0\" for camera ID 0,
     * \"1\" for camera ID 1.
     *
     * Version information (based on camera_module_t.common.module_api_version):
     *
     * CAMERA_MODULE_API_VERSION_2_3 or lower:
     *
     *   The value here must be static, and cannot change after the first call
     *   to this method.
     *
     * CAMERA_MODULE_API_VERSION_2_4 or higher:
     *
     *   The value here must be static, and must count only built-in cameras,
     *   which have CAMERA_FACING_BACK or CAMERA_FACING_FRONT camera facing values
     *   (camera_info.facing). The HAL must not include the external cameras
     *   (camera_info.facing == CAMERA_FACING_EXTERNAL) into the return value
     *   of this call. Frameworks will use camera_device_status_change callback
     *   to manage number of external cameras.
     */
    int (*${name})(void)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "get_number_of_cameras:

Returns the number of camera devices accessible through the camera
module.  The camera devices are numbered 0 through N-1, where N is the
value returned by this call. The name of the camera device for open() is
simply the number converted to a string. That is, \"0\" for camera ID 0,
\"1\" for camera ID 1.

Version information (based on camera_module_t.common.module_api_version):

CAMERA_MODULE_API_VERSION_2_3 or lower:

  The value here must be static, and cannot change after the first call
  to this method.

CAMERA_MODULE_API_VERSION_2_4 or higher:

  The value here must be static, and must count only built-in cameras,
  which have CAMERA_FACING_BACK or CAMERA_FACING_FRONT camera facing values
  (camera_info.facing). The HAL must not include the external cameras
  (camera_info.facing == CAMERA_FACING_EXTERNAL) into the return value
  of this call. Frameworks will use camera_device_status_change callback
  to manage number of external cameras.

"
      end

      attribute 15592631 "get_camera_info"
	public explicit_type "/** * get_camera_info: * * Return the static camera information for a given camera device. This * information may not change for a camera device. * * Return values: * * 0: On a successful operation * * -ENODEV: The information cannot be provided due to an internal * error. * * -EINVAL: The input arguments are invalid, i.e. the id is invalid, * and/or the module is invalid. * * Version information (based on camera_module_t.common.module_api_version): * * CAMERA_MODULE_API_VERSION_2_4 or higher: * * When a camera is disconnected, its camera id becomes invalid. Calling this * this method with this invalid camera id will get -EINVAL and NULL camera * static metadata (camera_info.static_camera_characteristics). */ int (*)(int camera_id, struct camera_info *info)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * get_camera_info:
     *
     * Return the static camera information for a given camera device. This
     * information may not change for a camera device.
     *
     * Return values:
     *
     * 0:           On a successful operation
     *
     * -ENODEV:     The information cannot be provided due to an internal
     *              error.
     *
     * -EINVAL:     The input arguments are invalid, i.e. the id is invalid,
     *              and/or the module is invalid.
     *
     * Version information (based on camera_module_t.common.module_api_version):
     *
     * CAMERA_MODULE_API_VERSION_2_4 or higher:
     *
     *   When a camera is disconnected, its camera id becomes invalid. Calling this
     *   this method with this invalid camera id will get -EINVAL and NULL camera
     *   static metadata (camera_info.static_camera_characteristics).
     */
    int (*${name})(int camera_id, struct camera_info *info)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "get_camera_info:

Return the static camera information for a given camera device. This
information may not change for a camera device.

Return values:

0:           On a successful operation

-ENODEV:     The information cannot be provided due to an internal
             error.

-EINVAL:     The input arguments are invalid, i.e. the id is invalid,
             and/or the module is invalid.

Version information (based on camera_module_t.common.module_api_version):

CAMERA_MODULE_API_VERSION_2_4 or higher:

  When a camera is disconnected, its camera id becomes invalid. Calling this
  this method with this invalid camera id will get -EINVAL and NULL camera
  static metadata (camera_info.static_camera_characteristics).

"
      end

      attribute 15592759 "set_callbacks"
	public explicit_type "/** * set_callbacks: * * Provide callback function pointers to the HAL module to inform framework * of asynchronous camera module events. The framework will call this * function once after initial camera HAL module load, after the * get_number_of_cameras() method is called for the first time, and before * any other calls to the module. * * Version information (based on camera_module_t.common.module_api_version): * * CAMERA_MODULE_API_VERSION_1_0, CAMERA_MODULE_API_VERSION_2_0: * * Not provided by HAL module. Framework may not call this function. * * CAMERA_MODULE_API_VERSION_2_1: * * Valid to be called by the framework. * * Return values: * * 0: On a successful operation * * -ENODEV: The operation cannot be completed due to an internal * error. * * -EINVAL: The input arguments are invalid, i.e. the callbacks are * null */ int (*)(const camera_module_callbacks_t *callbacks)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * set_callbacks:
     *
     * Provide callback function pointers to the HAL module to inform framework
     * of asynchronous camera module events. The framework will call this
     * function once after initial camera HAL module load, after the
     * get_number_of_cameras() method is called for the first time, and before
     * any other calls to the module.
     *
     * Version information (based on camera_module_t.common.module_api_version):
     *
     *  CAMERA_MODULE_API_VERSION_1_0, CAMERA_MODULE_API_VERSION_2_0:
     *
     *    Not provided by HAL module. Framework may not call this function.
     *
     *  CAMERA_MODULE_API_VERSION_2_1:
     *
     *    Valid to be called by the framework.
     *
     * Return values:
     *
     * 0:           On a successful operation
     *
     * -ENODEV:     The operation cannot be completed due to an internal
     *              error.
     *
     * -EINVAL:     The input arguments are invalid, i.e. the callbacks are
     *              null
     */
    int (*${name})(const camera_module_callbacks_t *callbacks)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "set_callbacks:

Provide callback function pointers to the HAL module to inform framework
of asynchronous camera module events. The framework will call this
function once after initial camera HAL module load, after the
get_number_of_cameras() method is called for the first time, and before
any other calls to the module.

Version information (based on camera_module_t.common.module_api_version):

 CAMERA_MODULE_API_VERSION_1_0, CAMERA_MODULE_API_VERSION_2_0:

   Not provided by HAL module. Framework may not call this function.

 CAMERA_MODULE_API_VERSION_2_1:

   Valid to be called by the framework.

Return values:

0:           On a successful operation

-ENODEV:     The operation cannot be completed due to an internal
             error.

-EINVAL:     The input arguments are invalid, i.e. the callbacks are
             null

"
      end

      attribute 15592887 "get_vendor_tag_ops"
	public explicit_type "/** * get_vendor_tag_ops: * * Get methods to query for vendor extension metadata tag information. The * HAL should fill in all the vendor tag operation methods, or leave ops * unchanged if no vendor tags are defined. * * The vendor_tag_ops structure used here is defined in: * system/media/camera/include/system/vendor_tags.h * * Version information (based on camera_module_t.common.module_api_version): * * CAMERA_MODULE_API_VERSION_1_x/2_0/2_1: * Not provided by HAL module. Framework may not call this function. * * CAMERA_MODULE_API_VERSION_2_2: * Valid to be called by the framework. */ void (*)(vendor_tag_ops_t* ops)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * get_vendor_tag_ops:
     *
     * Get methods to query for vendor extension metadata tag information. The
     * HAL should fill in all the vendor tag operation methods, or leave ops
     * unchanged if no vendor tags are defined.
     *
     * The vendor_tag_ops structure used here is defined in:
     * system/media/camera/include/system/vendor_tags.h
     *
     * Version information (based on camera_module_t.common.module_api_version):
     *
     *  CAMERA_MODULE_API_VERSION_1_x/2_0/2_1:
     *    Not provided by HAL module. Framework may not call this function.
     *
     *  CAMERA_MODULE_API_VERSION_2_2:
     *    Valid to be called by the framework.
     */
    void (*${name})(vendor_tag_ops_t* ops)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "get_vendor_tag_ops:

Get methods to query for vendor extension metadata tag information. The
HAL should fill in all the vendor tag operation methods, or leave ops
unchanged if no vendor tags are defined.

The vendor_tag_ops structure used here is defined in:
system/media/camera/include/system/vendor_tags.h

Version information (based on camera_module_t.common.module_api_version):

 CAMERA_MODULE_API_VERSION_1_x/2_0/2_1:
   Not provided by HAL module. Framework may not call this function.

 CAMERA_MODULE_API_VERSION_2_2:
   Valid to be called by the framework.

"
      end

      attribute 15593015 "open_legacy"
	public explicit_type "/** * open_legacy: * * Open a specific legacy camera HAL device if multiple device HAL API * versions are supported by this camera HAL module. For example, if the * camera module supports both CAMERA_DEVICE_API_VERSION_1_0 and * CAMERA_DEVICE_API_VERSION_3_2 device API for the same camera id, * framework can call this function to open the camera device as * CAMERA_DEVICE_API_VERSION_1_0 device. * * This is an optional method. A Camera HAL module does not need to support * more than one device HAL version per device, and such modules may return * -ENOSYS for all calls to this method. For all older HAL device API * versions that are not supported, it may return -EOPNOTSUPP. When above * cases occur, The normal open() method (common.methods->open) will be * used by the framework instead. * * Version information (based on camera_module_t.common.module_api_version): * * CAMERA_MODULE_API_VERSION_1_x/2_0/2_1/2_2: * Not provided by HAL module. Framework will not call this function. * * CAMERA_MODULE_API_VERSION_2_3: * Valid to be called by the framework. * * Return values: * * 0: On a successful open of the camera device. * * -ENOSYS This method is not supported. * * -EOPNOTSUPP: The requested HAL version is not supported by this method. * * -EINVAL: The input arguments are invalid, i.e. the id is invalid, * and/or the module is invalid. * * -EBUSY: The camera device was already opened for this camera id * (by using this method or common.methods->open method), * regardless of the device HAL version it was opened as. * * -EUSERS: The maximal number of camera devices that can be * opened concurrently were opened already, either by * this method or common.methods->open method. */ int (*)(const struct hw_module_t* module, const char* id, uint32_t halVersion, struct hw_device_t** device)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * open_legacy:
     *
     * Open a specific legacy camera HAL device if multiple device HAL API
     * versions are supported by this camera HAL module. For example, if the
     * camera module supports both CAMERA_DEVICE_API_VERSION_1_0 and
     * CAMERA_DEVICE_API_VERSION_3_2 device API for the same camera id,
     * framework can call this function to open the camera device as
     * CAMERA_DEVICE_API_VERSION_1_0 device.
     *
     * This is an optional method. A Camera HAL module does not need to support
     * more than one device HAL version per device, and such modules may return
     * -ENOSYS for all calls to this method. For all older HAL device API
     * versions that are not supported, it may return -EOPNOTSUPP. When above
     * cases occur, The normal open() method (common.methods->open) will be
     * used by the framework instead.
     *
     * Version information (based on camera_module_t.common.module_api_version):
     *
     *  CAMERA_MODULE_API_VERSION_1_x/2_0/2_1/2_2:
     *    Not provided by HAL module. Framework will not call this function.
     *
     *  CAMERA_MODULE_API_VERSION_2_3:
     *    Valid to be called by the framework.
     *
     * Return values:
     *
     * 0:           On a successful open of the camera device.
     *
     * -ENOSYS      This method is not supported.
     *
     * -EOPNOTSUPP: The requested HAL version is not supported by this method.
     *
     * -EINVAL:     The input arguments are invalid, i.e. the id is invalid,
     *              and/or the module is invalid.
     *
     * -EBUSY:      The camera device was already opened for this camera id
     *              (by using this method or common.methods->open method),
     *              regardless of the device HAL version it was opened as.
     *
     * -EUSERS:     The maximal number of camera devices that can be
     *              opened concurrently were opened already, either by
     *              this method or common.methods->open method.
     */
    int (*${name})(const struct hw_module_t* module, const char* id,
            uint32_t halVersion, struct hw_device_t** device)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "open_legacy:

Open a specific legacy camera HAL device if multiple device HAL API
versions are supported by this camera HAL module. For example, if the
camera module supports both CAMERA_DEVICE_API_VERSION_1_0 and
CAMERA_DEVICE_API_VERSION_3_2 device API for the same camera id,
framework can call this function to open the camera device as
CAMERA_DEVICE_API_VERSION_1_0 device.

This is an optional method. A Camera HAL module does not need to support
more than one device HAL version per device, and such modules may return
-ENOSYS for all calls to this method. For all older HAL device API
versions that are not supported, it may return -EOPNOTSUPP. When above
cases occur, The normal open() method (common.methods->open) will be
used by the framework instead.

Version information (based on camera_module_t.common.module_api_version):

 CAMERA_MODULE_API_VERSION_1_x/2_0/2_1/2_2:
   Not provided by HAL module. Framework will not call this function.

 CAMERA_MODULE_API_VERSION_2_3:
   Valid to be called by the framework.

Return values:

0:           On a successful open of the camera device.

-ENOSYS      This method is not supported.

-EOPNOTSUPP: The requested HAL version is not supported by this method.

-EINVAL:     The input arguments are invalid, i.e. the id is invalid,
             and/or the module is invalid.

-EBUSY:      The camera device was already opened for this camera id
             (by using this method or common.methods->open method),
             regardless of the device HAL version it was opened as.

-EUSERS:     The maximal number of camera devices that can be
             opened concurrently were opened already, either by
             this method or common.methods->open method.

"
      end

      attribute 15593143 "set_torch_mode"
	public explicit_type "/** * set_torch_mode: * * Turn on or off the torch mode of the flash unit associated with a given * camera ID. If the operation is successful, HAL must notify the framework * torch state by invoking * camera_module_callbacks.torch_mode_status_change() with the new state. * * The camera device has a higher priority accessing the flash unit. When * there are any resource conflicts, such as open() is called to open a * camera device, HAL module must notify the framework through * camera_module_callbacks.torch_mode_status_change() that the * torch mode has been turned off and the torch mode state has become * TORCH_MODE_STATUS_NOT_AVAILABLE. When resources to turn on torch mode * become available again, HAL module must notify the framework through * camera_module_callbacks.torch_mode_status_change() that the torch mode * state has become TORCH_MODE_STATUS_AVAILABLE_OFF for set_torch_mode() to * be called. * * When the framework calls set_torch_mode() to turn on the torch mode of a * flash unit, if HAL cannot keep multiple torch modes on simultaneously, * HAL should turn off the torch mode that was turned on by * a previous set_torch_mode() call and notify the framework that the torch * mode state of that flash unit has become TORCH_MODE_STATUS_AVAILABLE_OFF. * * Version information (based on camera_module_t.common.module_api_version): * * CAMERA_MODULE_API_VERSION_1_x/2_0/2_1/2_2/2_3: * Not provided by HAL module. Framework will not call this function. * * CAMERA_MODULE_API_VERSION_2_4: * Valid to be called by the framework. * * Return values: * * 0: On a successful operation. * * -ENOSYS: The camera device does not support this operation. It is * returned if and only if android.flash.info.available is * false. * * -EBUSY: The camera device is already in use. * * -EUSERS: The resources needed to turn on the torch mode are not * available, typically because other camera devices are * holding the resources to make using the flash unit not * possible. * * -EINVAL: camera_id is invalid. * */ int (*)(const char* camera_id, bool enabled)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * set_torch_mode:
     *
     * Turn on or off the torch mode of the flash unit associated with a given
     * camera ID. If the operation is successful, HAL must notify the framework
     * torch state by invoking
     * camera_module_callbacks.torch_mode_status_change() with the new state.
     *
     * The camera device has a higher priority accessing the flash unit. When
     * there are any resource conflicts, such as open() is called to open a
     * camera device, HAL module must notify the framework through
     * camera_module_callbacks.torch_mode_status_change() that the
     * torch mode has been turned off and the torch mode state has become
     * TORCH_MODE_STATUS_NOT_AVAILABLE. When resources to turn on torch mode
     * become available again, HAL module must notify the framework through
     * camera_module_callbacks.torch_mode_status_change() that the torch mode
     * state has become TORCH_MODE_STATUS_AVAILABLE_OFF for set_torch_mode() to
     * be called.
     *
     * When the framework calls set_torch_mode() to turn on the torch mode of a
     * flash unit, if HAL cannot keep multiple torch modes on simultaneously,
     * HAL should turn off the torch mode that was turned on by
     * a previous set_torch_mode() call and notify the framework that the torch
     * mode state of that flash unit has become TORCH_MODE_STATUS_AVAILABLE_OFF.
     *
     * Version information (based on camera_module_t.common.module_api_version):
     *
     * CAMERA_MODULE_API_VERSION_1_x/2_0/2_1/2_2/2_3:
     *   Not provided by HAL module. Framework will not call this function.
     *
     * CAMERA_MODULE_API_VERSION_2_4:
     *   Valid to be called by the framework.
     *
     * Return values:
     *
     * 0:           On a successful operation.
     *
     * -ENOSYS:     The camera device does not support this operation. It is
     *              returned if and only if android.flash.info.available is
     *              false.
     *
     * -EBUSY:      The camera device is already in use.
     *
     * -EUSERS:     The resources needed to turn on the torch mode are not
     *              available, typically because other camera devices are
     *              holding the resources to make using the flash unit not
     *              possible.
     *
     * -EINVAL:     camera_id is invalid.
     *
     */
    int (*${name})(const char* camera_id, bool enabled)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "set_torch_mode:

Turn on or off the torch mode of the flash unit associated with a given
camera ID. If the operation is successful, HAL must notify the framework
torch state by invoking
camera_module_callbacks.torch_mode_status_change() with the new state.

The camera device has a higher priority accessing the flash unit. When
there are any resource conflicts, such as open() is called to open a
camera device, HAL module must notify the framework through
camera_module_callbacks.torch_mode_status_change() that the
torch mode has been turned off and the torch mode state has become
TORCH_MODE_STATUS_NOT_AVAILABLE. When resources to turn on torch mode
become available again, HAL module must notify the framework through
camera_module_callbacks.torch_mode_status_change() that the torch mode
state has become TORCH_MODE_STATUS_AVAILABLE_OFF for set_torch_mode() to
be called.

When the framework calls set_torch_mode() to turn on the torch mode of a
flash unit, if HAL cannot keep multiple torch modes on simultaneously,
HAL should turn off the torch mode that was turned on by
a previous set_torch_mode() call and notify the framework that the torch
mode state of that flash unit has become TORCH_MODE_STATUS_AVAILABLE_OFF.

Version information (based on camera_module_t.common.module_api_version):

CAMERA_MODULE_API_VERSION_1_x/2_0/2_1/2_2/2_3:
  Not provided by HAL module. Framework will not call this function.

CAMERA_MODULE_API_VERSION_2_4:
  Valid to be called by the framework.

Return values:

0:           On a successful operation.

-ENOSYS:     The camera device does not support this operation. It is
             returned if and only if android.flash.info.available is
             false.

-EBUSY:      The camera device is already in use.

-EUSERS:     The resources needed to turn on the torch mode are not
             available, typically because other camera devices are
             holding the resources to make using the flash unit not
             possible.

-EINVAL:     camera_id is invalid.


"
      end

      attribute 15593271 "init"
	public explicit_type "/** * init: * * This method is called by the camera service before any other methods * are invoked, right after the camera HAL library has been successfully * loaded. It may be left as NULL by the HAL module, if no initialization * in needed. * * It can be used by HAL implementations to perform initialization and * other one-time operations. * * Version information (based on camera_module_t.common.module_api_version): * * CAMERA_MODULE_API_VERSION_1_x/2_0/2_1/2_2/2_3: * Not provided by HAL module. Framework will not call this function. * * CAMERA_MODULE_API_VERSION_2_4: * If not NULL, will always be called by the framework once after the HAL * module is loaded, before any other HAL module method is called. * * Return values: * * 0: On a successful operation. * * -ENODEV: Initialization cannot be completed due to an internal * error. The HAL must be assumed to be in a nonfunctional * state. * */ int (*)()"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * init:
     *
     * This method is called by the camera service before any other methods
     * are invoked, right after the camera HAL library has been successfully
     * loaded. It may be left as NULL by the HAL module, if no initialization
     * in needed.
     *
     * It can be used by HAL implementations to perform initialization and
     * other one-time operations.
     *
     * Version information (based on camera_module_t.common.module_api_version):
     *
     * CAMERA_MODULE_API_VERSION_1_x/2_0/2_1/2_2/2_3:
     *   Not provided by HAL module. Framework will not call this function.
     *
     * CAMERA_MODULE_API_VERSION_2_4:
     *   If not NULL, will always be called by the framework once after the HAL
     *   module is loaded, before any other HAL module method is called.
     *
     * Return values:
     *
     * 0:           On a successful operation.
     *
     * -ENODEV:     Initialization cannot be completed due to an internal
     *              error. The HAL must be assumed to be in a nonfunctional
     *              state.
     *
     */
    int (*${name})()${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "init:

This method is called by the camera service before any other methods
are invoked, right after the camera HAL library has been successfully
loaded. It may be left as NULL by the HAL module, if no initialization
in needed.

It can be used by HAL implementations to perform initialization and
other one-time operations.

Version information (based on camera_module_t.common.module_api_version):

CAMERA_MODULE_API_VERSION_1_x/2_0/2_1/2_2/2_3:
  Not provided by HAL module. Framework will not call this function.

CAMERA_MODULE_API_VERSION_2_4:
  If not NULL, will always be called by the framework once after the HAL
  module is loaded, before any other HAL module method is called.

Return values:

0:           On a successful operation.

-ENODEV:     Initialization cannot be completed due to an internal
             error. The HAL must be assumed to be in a nonfunctional
             state.


"
      end

      attribute 15593399 "reserved"
	public explicit_type "void"
	multiplicity "[5]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " reserved for future use 
"
      end
    end

    class 4357431 "camera_module_t"
      visibility package stereotype "typedef" base_type class_ref 4357303 // camera_module
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4357559 "consumerir_freq_range"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15593527 "min"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15593655 "max"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4357687 "consumerir_freq_range_t"
      visibility package stereotype "typedef" base_type class_ref 4357559 // consumerir_freq_range
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4357815 "consumerir_module"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8343223 // common (<directional composition>)
	relation 8343223 *-->
	  a role_name "common" public
	    comment "Common methods of the consumer IR module.  This *must* be the first member of
consumerir_module as users of this structure will cast a hw_module_t to
consumerir_module pointer in contexts where it's known the hw_module_t references a
consumerir_module.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8343223 // common (<directional composition>)
	  b parent class_ref 4305335 // hw_module_t
      end
    end

    class 4357943 "consumerir_module_t"
      visibility package stereotype "typedef" base_type class_ref 4357815 // consumerir_module
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4358071 "consumerir_device"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8343351 // common (<directional composition>)
	relation 8343351 *-->
	  a role_name "common" public
	    comment "Common methods of the consumer IR device.  This *must* be the first member of
consumerir_device as users of this structure will cast a hw_device_t to
consumerir_device pointer in contexts where it's known the hw_device_t references a
consumerir_device.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8343351 // common (<directional composition>)
	  b parent class_ref 4305975 // hw_device_t
      end

      attribute 15593783 "transmit"
	public explicit_type "/* * (*transmit)() is called to by the ConsumerIrService to send an IR pattern * at a given carrier_freq. * * The pattern is alternating series of carrier on and off periods measured in * microseconds. The carrier should be turned off at the end of a transmit * even if there are and odd number of entries in the pattern array. * * This call should return when the transmit is complete or encounters an error. * * returns: 0 on success. A negative error code on error. */ int (*)(struct consumerir_device *dev, int carrier_freq, const int pattern[], int pattern_len)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * (*transmit)() is called to by the ConsumerIrService to send an IR pattern
     * at a given carrier_freq.
     *
     * The pattern is alternating series of carrier on and off periods measured in
     * microseconds.  The carrier should be turned off at the end of a transmit
     * even if there are and odd number of entries in the pattern array.
     *
     * This call should return when the transmit is complete or encounters an error.
     *
     * returns: 0 on success. A negative error code on error.
     */
    int (*${name})(struct consumerir_device *dev, int carrier_freq,
            const int pattern[], int pattern_len)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*transmit)() is called to by the ConsumerIrService to send an IR pattern
at a given carrier_freq.

The pattern is alternating series of carrier on and off periods measured in
microseconds.  The carrier should be turned off at the end of a transmit
even if there are and odd number of entries in the pattern array.

This call should return when the transmit is complete or encounters an error.

returns: 0 on success. A negative error code on error.

"
      end

      attribute 15593911 "get_num_carrier_freqs"
	public explicit_type "/* * (*get_num_carrier_freqs)() is called by the ConsumerIrService to get the * number of carrier freqs to allocate space for, which is then filled by * a subsequent call to (*get_carrier_freqs)(). * * returns: the number of ranges on success. A negative error code on error. */ int (*)(struct consumerir_device *dev)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * (*get_num_carrier_freqs)() is called by the ConsumerIrService to get the
     * number of carrier freqs to allocate space for, which is then filled by
     * a subsequent call to (*get_carrier_freqs)().
     *
     * returns: the number of ranges on success. A negative error code on error.
     */
    int (*${name})(struct consumerir_device *dev)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*get_num_carrier_freqs)() is called by the ConsumerIrService to get the
number of carrier freqs to allocate space for, which is then filled by
a subsequent call to (*get_carrier_freqs)().

returns: the number of ranges on success. A negative error code on error.

"
      end

      attribute 15594039 "get_carrier_freqs"
	public explicit_type "/* * (*get_carrier_freqs)() is called by the ConsumerIrService to enumerate * which frequencies the IR transmitter supports. The HAL implementation * should fill an array of consumerir_freq_range structs with the * appropriate values for the transmitter, up to len elements. * * returns: the number of ranges on success. A negative error code on error. */ int (*)(struct consumerir_device *dev, size_t len, consumerir_freq_range_t *ranges)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * (*get_carrier_freqs)() is called by the ConsumerIrService to enumerate
     * which frequencies the IR transmitter supports.  The HAL implementation
     * should fill an array of consumerir_freq_range structs with the
     * appropriate values for the transmitter, up to len elements.
     *
     * returns: the number of ranges on success. A negative error code on error.
     */
    int (*${name})(struct consumerir_device *dev,
            size_t len, consumerir_freq_range_t *ranges)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*get_carrier_freqs)() is called by the ConsumerIrService to enumerate
which frequencies the IR transmitter supports.  The HAL implementation
should fill an array of consumerir_freq_range structs with the
appropriate values for the transmitter, up to len elements.

returns: the number of ranges on success. A negative error code on error.

"
      end

      attribute 15594167 "reserved"
	public explicit_type "void"
	multiplicity "[8 - 3]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Reserved for future use. Must be NULL. 
"
      end
    end

    class 4358199 "consumerir_device_t"
      visibility package stereotype "typedef" base_type class_ref 4358071 // consumerir_device
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4358327 "mem_range_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The following structure defines each memory block in detail
"
    end

    class 4358455 "nano_app_binary_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The binary format below is in little endian format"
      attribute 15594295 "app_id"
	public explicit_type "hub_app_name_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " App Id contains vendor id"
      end

    end

    class 4358583 "hub_app_info"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15594423 "app_name"
	public explicit_type "hub_app_name_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 8345143 // mem_usage (<directional composition>)
	relation 8345143 *-->
	  a role_name "mem_usage" multiplicity "[2]" public
	    comment " Apps could only have RAM and SHARED_DATA"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${multiplicity}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8345143 // mem_usage (<directional composition>)
	  b parent class_ref 4358327 // mem_range_t
      end
    end

    class 4358711 "context_sensor_e"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Following enum defines the types of sensors that a hub may declare support
for. Declaration for support would mean that the hub can access and process
data from that particular sensor type.
"
      attribute 15594551 "CONTEXT_SENSOR_RESERVED"
	public type class_ref 4358711 // context_sensor_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15594679 "CONTEXT_SENSOR_ACCELEROMETER"
	public type class_ref 4358711 // context_sensor_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15594807 "CONTEXT_SENSOR_GYROSCOPE"
	public type class_ref 4358711 // context_sensor_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15594935 "CONTEXT_SENSOR_MAGNETOMETER"
	public type class_ref 4358711 // context_sensor_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15595063 "CONTEXT_SENSOR_BAROMETER"
	public type class_ref 4358711 // context_sensor_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15595191 "CONTEXT_SENSOR_PROXIMITY_SENSOR"
	public type class_ref 4358711 // context_sensor_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15595319 "CONTEXT_SENSOR_AMBIENT_LIGHT_SENSOR"
	public type class_ref 4358711 // context_sensor_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15595447 "CONTEXT_SENSOR_GPS"
	public type class_ref 4358711 // context_sensor_e
	init_value " 0x100"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15595575 "CONTEXT_SENSOR_WIFI"
	public type class_ref 4358711 // context_sensor_e
	init_value " 0x200"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15595703 "CONTEXT_SENSOR_AUDIO"
	public type class_ref 4358711 // context_sensor_e
	init_value " 0x300"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15595831 "CONTEXT_SENSOR_CAMERA"
	public type class_ref 4358711 // context_sensor_e
	init_value " 0x400"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15595959 "CONTEXT_SENSOR_BLE"
	public type class_ref 4358711 // context_sensor_e
	init_value " 0x500"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15596087 "CONTEXT_SENSOR_MAX"
	public type class_ref 4358711 // context_sensor_e
	init_value " 0xffffffff"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4358839 "physical_sensor_description_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The following structure describes a sensor
"
      attribute 15596215 "type_string"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Type as a string. eg: \"GPS\""
      end

      attribute 15596343 "name"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Identifier eg: \"Bosch BMI160\""
      end

      attribute 15596471 "vendor"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Vendor : eg \"STM\""
      end

      attribute 15596599 "peak_power_mw"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " sampling frequency
 At max frequency & no batching, power"
      end
    end

    class 4358967 "connected_sensor_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " in milliwatts"
      classrelation 8346167 // physical_sensor (<directional composition>)
	relation 8346167 *-->
	  a role_name "physical_sensor" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8346167 // physical_sensor (<directional composition>)
	  b parent class_ref 4358839 // physical_sensor_description_t
      end
    end

    class 4359095 "hub_message_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15596727 "app_name"
	public explicit_type "hub_app_name_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " To/From this nanoapp "
      end

      attribute 15596855 "message"
	const_attribute public explicit_type "void"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4359223 "context_hub_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Definition of a context hub. A device may contain more than one low
power domain. In that case, please add an entry for each hub. However,
it is perfectly OK for a device to declare one context hub and manage
them internally as several
"
      attribute 15596983 "name"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " descriptive name eg: \"Awesome Hub #1\""
      end

      attribute 15597111 "vendor"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " hub hardware vendor eg: \"Qualcomm\""
      end

      attribute 15597239 "toolchain"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " toolchain to make binaries eg:\"gcc ARM\""
      end

      attribute 15597367 "peak_mips"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Peak MIPS platform can deliver"
      end

      attribute 15597495 "stopped_power_draw_mw"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " if stopped, retention power, milliwatts"
      end

      attribute 15597623 "sleep_power_draw_mw"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " if sleeping, retention power, milliwatts"
      end

      attribute 15597751 "peak_power_draw_mw"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " for a busy CPUm power in milliwatts"
      end

      classrelation 8346935 // connected_sensors (<unidirectional association>)
	relation 8346935 --->
	  a role_name "connected_sensors" const_relation public
	    comment " array of connected sensors"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8346935 // connected_sensors (<unidirectional association>)
	  b parent class_ref 4358967 // connected_sensor_t
      end

      attribute 15597879 "os_app_name"
	const_attribute public explicit_type "hub_app_name_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " send msgs here for OS functions "
      end

    end

    class 4359351 "status_response_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " be sent to the hub in one chunk (in bytes)

Definitions of message payloads, see hub_messages_e
"
    end

    class 4359479 "apps_enable_request_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15598007 "app_name"
	public explicit_type "hub_app_name_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4359607 "apps_disable_request_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15598135 "app_name"
	public explicit_type "hub_app_name_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4359735 "load_app_request_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8347447 // app_binary (<directional composition>)
	relation 8347447 *-->
	  a role_name "app_binary" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8347447 // app_binary (<directional composition>)
	  b parent class_ref 4358455 // nano_app_binary_t
      end
    end

    class 4359863 "unload_app_request_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15598263 "app_name"
	public explicit_type "hub_app_name_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4359991 "query_apps_request_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15598391 "app_name"
	public explicit_type "hub_app_name_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4360119 "hub_messages_e"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "CONTEXT_HUB_APPS_ENABLE
Enables the specified nano-app(s)

Payload : apps_enable_request_t

Response : status_response_t
           On receipt of a successful response, it is
              expected that

              i) the app is executing and able to receive
                 any messages.

             ii) the system should be able to respond to an
                 CONTEXT_HUB_QUERY_APPS request.



CONTEXT_HUB_APPS_DISABLE
Stops the specified nano-app(s)

Payload : apps_disable_request_t

Response : status_response_t
           On receipt of a successful response,
              i) No further events are delivered to the
                 nanoapp.

             ii) The app should not show up in a
                 CONTEXT_HUB_QUERY_APPS request.


CONTEXT_HUB_LOAD_APP
Loads a nanoApp. Upon loading the nanoApp's init method is
called.


Payload : load_app_request_t

Response : status_response_t On receipt of a successful
              response, it is expected that
              i) the app is executing and able to receive
                 messages.

             ii) the system should be able to respond to a
                 CONTEXT_HUB_QUERY_APPS.


CONTEXT_HUB_UNLOAD_APP
Unloads a nanoApp. Before the unload, the app's deinit method
is called.

Payload : unload_app_request_t.

Response : status_response_t On receipt of a
           successful response, it is expected that
              i) No further events are delivered to the
                 nanoapp.

             ii) the system does not list the app in a
                 response to a CONTEXT_HUB_QUERY_APPS.

            iii) Any resources used by the app should be
                 freed up and available to the system.


CONTEXT_HUB_QUERY_APPS Queries for status of apps

Payload : query_apps_request_t

Response : struct hub_app_info[]


CONTEXT_HUB_QUERY_MEMORY Queries for memory regions on the
hub

Payload : NULL

Response : struct mem_range_t[]


All communication between the context hubs and the Context Hub Service is in
the form of messages. Some message types are distinguished and their
Semantics shall be well defined.
Custom message types should be defined starting above
CONTEXT_HUB_PRIVATE_MSG_BASE
"
      attribute 15598519 "CONTEXT_HUB_APPS_ENABLE"
	public type class_ref 4360119 // hub_messages_e
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15598647 "CONTEXT_HUB_APPS_DISABLE"
	public type class_ref 4360119 // hub_messages_e
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15598775 "CONTEXT_HUB_LOAD_APP"
	public type class_ref 4360119 // hub_messages_e
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15598903 "CONTEXT_HUB_UNLOAD_APP"
	public type class_ref 4360119 // hub_messages_e
	init_value " 4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15599031 "CONTEXT_HUB_QUERY_APPS"
	public type class_ref 4360119 // hub_messages_e
	init_value " 5"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15599159 "CONTEXT_HUB_QUERY_MEMORY"
	public type class_ref 4360119 // hub_messages_e
	init_value " 6"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4360247 "context_hub_callback"
      visibility package stereotype "typedef" explicit_base_type "int"
      cpp_decl "${comment}typedef ${type} ${name}(uint32_t hub_id, const struct hub_message_t *rxed_msg, void *cookie);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A callback registers with the context hub service to pass messages
coming from the hub to the service/clients.
"
    end

    class 4360375 "context_hub_module_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Every hardware module must have a data structure named HAL_MODULE_INFO_SYM
and the fields of this data structure must begin with hw_module_t
followed by module specific information.
"
      classrelation 8347575 // common (<directional composition>)
	relation 8347575 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8347575 // common (<directional composition>)
	  b parent class_ref 4305335 // hw_module_t
      end

      attribute 15599287 "get_hubs"
	public explicit_type "/** * Enumerate all available hubs.The list is returned in \"list\". * @return result : number of hubs in list or error (negative) * * This method shall be called at device bootup. */ int (*)(struct context_hub_module_t* module, const struct context_hub_t ** list)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Enumerate all available hubs.The list is returned in \"list\".
     * @return result : number of hubs in list or error  (negative)
     *
     * This method shall be called at device bootup.
     */
    int (*${name})(struct context_hub_module_t* module, const struct context_hub_t ** list)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Enumerate all available hubs.The list is returned in \"list\".
@return result : number of hubs in list or error  (negative)

This method shall be called at device bootup.

"
      end

      attribute 15599415 "subscribe_messages"
	public explicit_type "/** * Registers a callback for the HAL implementation to communicate * with the context hub service. * @return result : 0 if successful, error code otherwise */ int (*)(uint32_t hub_id, context_hub_callback cbk, void *cookie)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Registers a callback for the HAL implementation to communicate
     * with the context hub service.
     * @return result : 0 if successful, error code otherwise
     */
    int (*${name})(uint32_t hub_id, context_hub_callback cbk, void *cookie)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Registers a callback for the HAL implementation to communicate
with the context hub service.
@return result : 0 if successful, error code otherwise

"
      end

      attribute 15599543 "send_message"
	public explicit_type "/** * Send a message to a hub * @return result : 0 if successful, error code otherwise */ int (*)(uint32_t hub_id, const struct hub_message_t *msg)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Send a message to a hub
     * @return result : 0 if successful, error code otherwise
     */
    int (*${name})(uint32_t hub_id, const struct hub_message_t *msg)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Send a message to a hub
@return result : 0 if successful, error code otherwise

"
      end
    end

    class 4360503 "fingerprint_msg_type"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15599671 "FINGERPRINT_ERROR"
	public type class_ref 4360503 // fingerprint_msg_type
	init_value " -1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15599799 "FINGERPRINT_ACQUIRED"
	public type class_ref 4360503 // fingerprint_msg_type
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15599927 "FINGERPRINT_TEMPLATE_ENROLLING"
	public type class_ref 4360503 // fingerprint_msg_type
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15600055 "FINGERPRINT_TEMPLATE_REMOVED"
	public type class_ref 4360503 // fingerprint_msg_type
	init_value " 4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15600183 "FINGERPRINT_AUTHENTICATED"
	public type class_ref 4360503 // fingerprint_msg_type
	init_value " 5"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15600311 "FINGERPRINT_TEMPLATE_ENUMERATING"
	public type class_ref 4360503 // fingerprint_msg_type
	init_value " 6"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4360631 "fingerprint_msg_type_t"
      visibility package stereotype "typedef" base_type class_ref 4360503 // fingerprint_msg_type
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4360759 "fingerprint_error"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Fingerprint errors are meant to tell the framework to terminate the current operation and ask
for the user to correct the situation. These will almost always result in messaging and user
interaction to correct the problem.

For example, FINGERPRINT_ERROR_CANCELED should follow any acquisition message that results in
a situation where the current operation can't continue without user interaction. For example,
if the sensor is dirty during enrollment and no further enrollment progress can be made,
send FINGERPRINT_ACQUIRED_IMAGER_DIRTY followed by FINGERPRINT_ERROR_CANCELED.
"
      attribute 15600439 "FINGERPRINT_ERROR_HW_UNAVAILABLE"
	public type class_ref 4360759 // fingerprint_error
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15600567 "FINGERPRINT_ERROR_UNABLE_TO_PROCESS"
	public type class_ref 4360759 // fingerprint_error
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15600695 "FINGERPRINT_ERROR_TIMEOUT"
	public type class_ref 4360759 // fingerprint_error
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15600823 "FINGERPRINT_ERROR_NO_SPACE"
	public type class_ref 4360759 // fingerprint_error
	init_value " 4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15600951 "FINGERPRINT_ERROR_CANCELED"
	public type class_ref 4360759 // fingerprint_error
	init_value " 5"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15601079 "FINGERPRINT_ERROR_UNABLE_TO_REMOVE"
	public type class_ref 4360759 // fingerprint_error
	init_value " 6"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15601207 "FINGERPRINT_ERROR_VENDOR_BASE"
	public type class_ref 4360759 // fingerprint_error
	init_value " 1000 /* vendor-specific error messages start here */
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4360887 "fingerprint_error_t"
      visibility package stereotype "typedef" base_type class_ref 4360759 // fingerprint_error
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4361015 "fingerprint_acquired_info"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The hardware has an error that can't be resolved. 
 Bad data; operation can't continue 
 The operation has timed out waiting for user input. 
 No space available to store a template 
 The current operation can't proceed. See above. 
 fingerprint with given id can't be removed 
 vendor-specific error messages start here 

Fingerprint acquisition info is meant as feedback for the current operation.  Anything but
FINGERPRINT_ACQUIRED_GOOD will be shown to the user as feedback on how to take action on the
current operation. For example, FINGERPRINT_ACQUIRED_IMAGER_DIRTY can be used to tell the user
to clean the sensor.  If this will cause the current operation to fail, an additional
FINGERPRINT_ERROR_CANCELED can be sent to stop the operation in progress (e.g. enrollment).
In general, these messages will result in a \"Try again\" message.
"
      attribute 15601335 "FINGERPRINT_ACQUIRED_GOOD"
	public type class_ref 4361015 // fingerprint_acquired_info
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15601463 "FINGERPRINT_ACQUIRED_PARTIAL"
	public type class_ref 4361015 // fingerprint_acquired_info
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15601591 "FINGERPRINT_ACQUIRED_INSUFFICIENT"
	public type class_ref 4361015 // fingerprint_acquired_info
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15601719 "FINGERPRINT_ACQUIRED_IMAGER_DIRTY"
	public type class_ref 4361015 // fingerprint_acquired_info
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15601847 "FINGERPRINT_ACQUIRED_TOO_SLOW"
	public type class_ref 4361015 // fingerprint_acquired_info
	init_value " 4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15601975 "FINGERPRINT_ACQUIRED_TOO_FAST"
	public type class_ref 4361015 // fingerprint_acquired_info
	init_value " 5"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15602103 "FINGERPRINT_ACQUIRED_VENDOR_BASE"
	public type class_ref 4361015 // fingerprint_acquired_info
	init_value " 1000 /* vendor-specific acquisition messages start here */
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4361143 "fingerprint_acquired_info_t"
      visibility package stereotype "typedef" base_type class_ref 4361015 // fingerprint_acquired_info
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4361271 "fingerprint_finger_id"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " sensor needs more data, i.e. longer swipe. 
 image doesn't contain enough detail for recognition
 sensor needs to be cleaned 
 mostly swipe-type sensors; not enough data collected 
 for swipe and area sensors; tell user to slow down
 vendor-specific acquisition messages start here "
    end

    class 4361399 "fingerprint_finger_id_t"
      visibility package stereotype "typedef" base_type class_ref 4361271 // fingerprint_finger_id
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4361527 "fingerprint_enroll"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8347959 // finger (<directional composition>)
	relation 8347959 *-->
	  a role_name "finger" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8347959 // finger (<directional composition>)
	  b parent class_ref 4361399 // fingerprint_finger_id_t
      end

    end

    class 4361655 "fingerprint_enroll_t"
      visibility package stereotype "typedef" base_type class_ref 4361527 // fingerprint_enroll
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4361783 "fingerprint_enumerated"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8348343 // finger (<directional composition>)
	relation 8348343 *-->
	  a role_name "finger" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8348343 // finger (<directional composition>)
	  b parent class_ref 4361399 // fingerprint_finger_id_t
      end

    end

    class 4361911 "fingerprint_enumerated_t"
      visibility package stereotype "typedef" base_type class_ref 4361783 // fingerprint_enumerated
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4362039 "fingerprint_removed"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8348599 // finger (<directional composition>)
	relation 8348599 *-->
	  a role_name "finger" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8348599 // finger (<directional composition>)
	  b parent class_ref 4361399 // fingerprint_finger_id_t
      end
    end

    class 4362167 "fingerprint_removed_t"
      visibility package stereotype "typedef" base_type class_ref 4362039 // fingerprint_removed
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4362295 "fingerprint_acquired"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8348727 // acquired_info (<directional composition>)
	relation 8348727 *-->
	  a role_name "acquired_info" public
	    comment " information about the image "
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8348727 // acquired_info (<directional composition>)
	  b parent class_ref 4361143 // fingerprint_acquired_info_t
      end
    end

    class 4362423 "fingerprint_acquired_t"
      visibility package stereotype "typedef" base_type class_ref 4362295 // fingerprint_acquired
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4362551 "fingerprint_authenticated"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8348855 // finger (<directional composition>)
	relation 8348855 *-->
	  a role_name "finger" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8348855 // finger (<directional composition>)
	  b parent class_ref 4361399 // fingerprint_finger_id_t
      end

      attribute 15602231 "hat"
	public explicit_type "hw_auth_token_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4362679 "fingerprint_authenticated_t"
      visibility package stereotype "typedef" base_type class_ref 4362551 // fingerprint_authenticated
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4362807 "fingerprint_msg"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8348983 // type (<directional composition>)
	relation 8348983 *-->
	  a role_name "type" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8348983 // type (<directional composition>)
	  b parent class_ref 4360631 // fingerprint_msg_type_t
      end

      attribute 15602359 "data"
	public explicit_type "<complex type>"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}union  {
        fingerprint_error_t error;
        fingerprint_enroll_t enroll;
        fingerprint_enumerated_t enumerated;
        fingerprint_removed_t removed;
        fingerprint_acquired_t acquired;
        fingerprint_authenticated_t authenticated;
    } ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4362935 "fingerprint_msg_t"
      visibility package stereotype "typedef" base_type class_ref 4362807 // fingerprint_msg
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4363063 "fingerprint_notify_t"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(const fingerprint_msg_t *msg);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback function type "
    end

    class 4363191 "fingerprint_device"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Synchronous operation "
      classrelation 8349111 // common (<directional composition>)
	relation 8349111 *-->
	  a role_name "common" public
	    comment "Common methods of the fingerprint device. This *must* be the first member
of fingerprint_device as users of this structure will cast a hw_device_t
to fingerprint_device pointer in contexts where it's known
the hw_device_t references a fingerprint_device.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8349111 // common (<directional composition>)
	  b parent class_ref 4305975 // hw_device_t
      end

      classrelation 8349239 // notify (<directional composition>)
	relation 8349239 *-->
	  a role_name "notify" public
	    comment "Client provided callback function to receive notifications.
Do not set by hand, use the function above instead.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8349239 // notify (<directional composition>)
	  b parent class_ref 4363063 // fingerprint_notify_t
      end

      attribute 15602487 "set_notify"
	public explicit_type "/* * Set notification callback: * Registers a user function that would receive notifications from the HAL * The call will block if the HAL state machine is in busy state until HAL * leaves the busy state. * * Function return: 0 if callback function is successfuly registered * or a negative number in case of error, generally from the errno.h set. */ int (*)(struct fingerprint_device *dev, fingerprint_notify_t notify)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * Set notification callback:
     * Registers a user function that would receive notifications from the HAL
     * The call will block if the HAL state machine is in busy state until HAL
     * leaves the busy state.
     *
     * Function return: 0 if callback function is successfuly registered
     *                  or a negative number in case of error, generally from the errno.h set.
     */
    int (*${name})(struct fingerprint_device *dev, fingerprint_notify_t notify)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Set notification callback:
Registers a user function that would receive notifications from the HAL
The call will block if the HAL state machine is in busy state until HAL
leaves the busy state.

Function return: 0 if callback function is successfuly registered
                 or a negative number in case of error, generally from the errno.h set.

"
      end

      attribute 15602615 "pre_enroll"
	public explicit_type "/* * Fingerprint pre-enroll enroll request: * Generates a unique token to upper layers to indicate the start of an enrollment transaction. * This token will be wrapped by security for verification and passed to enroll() for * verification before enrollment will be allowed. This is to ensure adding a new fingerprint * template was preceded by some kind of credential confirmation (e.g. device password). * * Function return: 0 if function failed * otherwise, a uint64_t of token */ uint64_t (*)(struct fingerprint_device *dev)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * Fingerprint pre-enroll enroll request:
     * Generates a unique token to upper layers to indicate the start of an enrollment transaction.
     * This token will be wrapped by security for verification and passed to enroll() for
     * verification before enrollment will be allowed. This is to ensure adding a new fingerprint
     * template was preceded by some kind of credential confirmation (e.g. device password).
     *
     * Function return: 0 if function failed
     *                  otherwise, a uint64_t of token
     */
    uint64_t (*${name})(struct fingerprint_device *dev)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Fingerprint pre-enroll enroll request:
Generates a unique token to upper layers to indicate the start of an enrollment transaction.
This token will be wrapped by security for verification and passed to enroll() for
verification before enrollment will be allowed. This is to ensure adding a new fingerprint
template was preceded by some kind of credential confirmation (e.g. device password).

Function return: 0 if function failed
                 otherwise, a uint64_t of token

"
      end

      attribute 15602743 "enroll"
	public explicit_type "/* * Fingerprint enroll request: * Switches the HAL state machine to collect and store a new fingerprint * template. Switches back as soon as enroll is complete * (fingerprint_msg.type == FINGERPRINT_TEMPLATE_ENROLLING && * fingerprint_msg.data.enroll.samples_remaining == 0) * or after timeout_sec seconds. * The fingerprint template will be assigned to the group gid. User has a choice * to supply the gid or set it to 0 in which case a unique group id will be generated. * * Function return: 0 if enrollment process can be successfully started * or a negative number in case of error, generally from the errno.h set. * A notify() function may be called indicating the error condition. */ int (*)(struct fingerprint_device *dev, const hw_auth_token_t *hat, uint32_t gid, uint32_t timeout_sec)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * Fingerprint enroll request:
     * Switches the HAL state machine to collect and store a new fingerprint
     * template. Switches back as soon as enroll is complete
     * (fingerprint_msg.type == FINGERPRINT_TEMPLATE_ENROLLING &&
     *  fingerprint_msg.data.enroll.samples_remaining == 0)
     * or after timeout_sec seconds.
     * The fingerprint template will be assigned to the group gid. User has a choice
     * to supply the gid or set it to 0 in which case a unique group id will be generated.
     *
     * Function return: 0 if enrollment process can be successfully started
     *                  or a negative number in case of error, generally from the errno.h set.
     *                  A notify() function may be called indicating the error condition.
     */
    int (*${name})(struct fingerprint_device *dev, const hw_auth_token_t *hat,
                    uint32_t gid, uint32_t timeout_sec)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Fingerprint enroll request:
Switches the HAL state machine to collect and store a new fingerprint
template. Switches back as soon as enroll is complete
(fingerprint_msg.type == FINGERPRINT_TEMPLATE_ENROLLING &&
 fingerprint_msg.data.enroll.samples_remaining == 0)
or after timeout_sec seconds.
The fingerprint template will be assigned to the group gid. User has a choice
to supply the gid or set it to 0 in which case a unique group id will be generated.

Function return: 0 if enrollment process can be successfully started
                 or a negative number in case of error, generally from the errno.h set.
                 A notify() function may be called indicating the error condition.

"
      end

      attribute 15602871 "post_enroll"
	public explicit_type "/* * Finishes the enroll operation and invalidates the pre_enroll() generated challenge. * This will be called at the end of a multi-finger enrollment session to indicate * that no more fingers will be added. * * Function return: 0 if the request is accepted * or a negative number in case of error, generally from the errno.h set. */ int (*)(struct fingerprint_device *dev)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * Finishes the enroll operation and invalidates the pre_enroll() generated challenge.
     * This will be called at the end of a multi-finger enrollment session to indicate
     * that no more fingers will be added.
     *
     * Function return: 0 if the request is accepted
     *                  or a negative number in case of error, generally from the errno.h set.
     */
    int (*${name})(struct fingerprint_device *dev)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Finishes the enroll operation and invalidates the pre_enroll() generated challenge.
This will be called at the end of a multi-finger enrollment session to indicate
that no more fingers will be added.

Function return: 0 if the request is accepted
                 or a negative number in case of error, generally from the errno.h set.

"
      end

      attribute 15602999 "get_authenticator_id"
	public explicit_type "/* * get_authenticator_id: * Returns a token associated with the current fingerprint set. This value will * change whenever a new fingerprint is enrolled, thus creating a new fingerprint * set. * * Function return: current authenticator id or 0 if function failed. */ uint64_t (*)(struct fingerprint_device *dev)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * get_authenticator_id:
     * Returns a token associated with the current fingerprint set. This value will
     * change whenever a new fingerprint is enrolled, thus creating a new fingerprint
     * set.
     *
     * Function return: current authenticator id or 0 if function failed.
     */
    uint64_t (*${name})(struct fingerprint_device *dev)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "get_authenticator_id:
Returns a token associated with the current fingerprint set. This value will
change whenever a new fingerprint is enrolled, thus creating a new fingerprint
set.

Function return: current authenticator id or 0 if function failed.

"
      end

      attribute 15603127 "cancel"
	public explicit_type "/* * Cancel pending enroll or authenticate, sending FINGERPRINT_ERROR_CANCELED * to all running clients. Switches the HAL state machine back to the idle state. * Unlike enroll_done() doesn't invalidate the pre_enroll() challenge. * * Function return: 0 if cancel request is accepted * or a negative number in case of error, generally from the errno.h set. */ int (*)(struct fingerprint_device *dev)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * Cancel pending enroll or authenticate, sending FINGERPRINT_ERROR_CANCELED
     * to all running clients. Switches the HAL state machine back to the idle state.
     * Unlike enroll_done() doesn't invalidate the pre_enroll() challenge.
     *
     * Function return: 0 if cancel request is accepted
     *                  or a negative number in case of error, generally from the errno.h set.
     */
    int (*${name})(struct fingerprint_device *dev)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Cancel pending enroll or authenticate, sending FINGERPRINT_ERROR_CANCELED
to all running clients. Switches the HAL state machine back to the idle state.
Unlike enroll_done() doesn't invalidate the pre_enroll() challenge.

Function return: 0 if cancel request is accepted
                 or a negative number in case of error, generally from the errno.h set.

"
      end

      attribute 15603255 "enumerate"
	public explicit_type "/* * Enumerate all the fingerprint templates found in the directory set by * set_active_group() * For each template found notify() will be called with: * fingerprint_msg.type == FINGERPRINT_TEMPLATE_ENUMERATED * fingerprint_msg.data.enumerated.finger indicating a template id * fingerprint_msg.data.enumerated.remaining_templates indicating how many more * enumeration messages to expect. * * Function return: 0 if enumerate request is accepted * or a negative number in case of error, generally from the errno.h set. */ int (*)(struct fingerprint_device *dev)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * Enumerate all the fingerprint templates found in the directory set by
     * set_active_group()
     * For each template found notify() will be called with:
     * fingerprint_msg.type == FINGERPRINT_TEMPLATE_ENUMERATED
     * fingerprint_msg.data.enumerated.finger indicating a template id
     * fingerprint_msg.data.enumerated.remaining_templates indicating how many more
     * enumeration messages to expect.
     *
     * Function return: 0 if enumerate request is accepted
     *                  or a negative number in case of error, generally from the errno.h set.
     */
    int (*${name})(struct fingerprint_device *dev)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Enumerate all the fingerprint templates found in the directory set by
set_active_group()
For each template found notify() will be called with:
fingerprint_msg.type == FINGERPRINT_TEMPLATE_ENUMERATED
fingerprint_msg.data.enumerated.finger indicating a template id
fingerprint_msg.data.enumerated.remaining_templates indicating how many more
enumeration messages to expect.

Function return: 0 if enumerate request is accepted
                 or a negative number in case of error, generally from the errno.h set.

"
      end

      attribute 15603383 "remove"
	public explicit_type "/* * Fingerprint remove request: * Deletes a fingerprint template. * Works only within the path set by set_active_group(). * notify() will be called with details on the template deleted. * fingerprint_msg.type == FINGERPRINT_TEMPLATE_REMOVED and * fingerprint_msg.data.removed.finger indicating the template id removed. * * Function return: 0 if fingerprint template(s) can be successfully deleted * or a negative number in case of error, generally from the errno.h set. */ int (*)(struct fingerprint_device *dev, uint32_t gid, uint32_t fid)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * Fingerprint remove request:
     * Deletes a fingerprint template.
     * Works only within the path set by set_active_group().
     * notify() will be called with details on the template deleted.
     * fingerprint_msg.type == FINGERPRINT_TEMPLATE_REMOVED and
     * fingerprint_msg.data.removed.finger indicating the template id removed.
     *
     * Function return: 0 if fingerprint template(s) can be successfully deleted
     *                  or a negative number in case of error, generally from the errno.h set.
     */
    int (*${name})(struct fingerprint_device *dev, uint32_t gid, uint32_t fid)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Fingerprint remove request:
Deletes a fingerprint template.
Works only within the path set by set_active_group().
notify() will be called with details on the template deleted.
fingerprint_msg.type == FINGERPRINT_TEMPLATE_REMOVED and
fingerprint_msg.data.removed.finger indicating the template id removed.

Function return: 0 if fingerprint template(s) can be successfully deleted
                 or a negative number in case of error, generally from the errno.h set.

"
      end

      attribute 15603511 "set_active_group"
	public explicit_type "/* * Restricts the HAL operation to a set of fingerprints belonging to a * group provided. * The caller must provide a path to a storage location within the user's * data directory. * * Function return: 0 on success * or a negative number in case of error, generally from the errno.h set. */ int (*)(struct fingerprint_device *dev, uint32_t gid, const char *store_path)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * Restricts the HAL operation to a set of fingerprints belonging to a
     * group provided.
     * The caller must provide a path to a storage location within the user's
     * data directory.
     *
     * Function return: 0 on success
     *                  or a negative number in case of error, generally from the errno.h set.
     */
    int (*${name})(struct fingerprint_device *dev, uint32_t gid,
                            const char *store_path)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Restricts the HAL operation to a set of fingerprints belonging to a
group provided.
The caller must provide a path to a storage location within the user's
data directory.

Function return: 0 on success
                 or a negative number in case of error, generally from the errno.h set.

"
      end

      attribute 15603639 "authenticate"
	public explicit_type "/* * Authenticates an operation identifed by operation_id * * Function return: 0 on success * or a negative number in case of error, generally from the errno.h set. */ int (*)(struct fingerprint_device *dev, uint64_t operation_id, uint32_t gid)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * Authenticates an operation identifed by operation_id
     *
     * Function return: 0 on success
     *                  or a negative number in case of error, generally from the errno.h set.
     */
    int (*${name})(struct fingerprint_device *dev, uint64_t operation_id, uint32_t gid)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Authenticates an operation identifed by operation_id

Function return: 0 on success
                 or a negative number in case of error, generally from the errno.h set.

"
      end

      attribute 15603767 "reserved"
	public explicit_type "void"
	multiplicity "[4]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Reserved for backward binary compatibility 
"
      end
    end

    class 4363319 "fingerprint_device_t"
      visibility package stereotype "typedef" base_type class_ref 4363191 // fingerprint_device
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4363447 "fingerprint_module"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8349367 // common (<directional composition>)
	relation 8349367 *-->
	  a role_name "common" public
	    comment "Common methods of the fingerprint module. This *must* be the first member
of fingerprint_module as users of this structure will cast a hw_module_t
to fingerprint_module pointer in contexts where it's known
the hw_module_t references a fingerprint_module.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8349367 // common (<directional composition>)
	  b parent class_ref 4305335 // hw_module_t
      end
    end

    class 4363575 "fingerprint_module_t"
      visibility package stereotype "typedef" base_type class_ref 4363447 // fingerprint_module
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4363703 "FlpUtcTime"
      visibility package stereotype "typedef" explicit_base_type "int64_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4363831 "FlpLocation"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Represents a location. "
      attribute 15603895 "flags"
	public explicit_type "FlpLocationFlags"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Flags associated with the location object. 
"
      end

      attribute 15604023 "latitude"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Represents latitude in degrees. 
"
      end

      attribute 15604151 "longitude"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Represents longitude in degrees. 
"
      end

      attribute 15604279 "altitude"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Represents altitude in meters above the WGS 84 reference
ellipsoid. 
"
      end

      attribute 15604407 "speed"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Represents speed in meters per second. 
"
      end

      attribute 15604535 "bearing"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Represents heading in degrees. 
"
      end

      attribute 15604663 "accuracy"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Represents expected accuracy in meters. 
"
      end

      classrelation 8349751 // timestamp (<directional composition>)
	relation 8349751 *-->
	  a role_name "timestamp" public
	    comment " Timestamp for the location fix. 
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8349751 // timestamp (<directional composition>)
	  b parent class_ref 4363703 // FlpUtcTime
      end

    end

    class 4363959 "ThreadEvent"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15604791 "ASSOCIATE_JVM"
	public type class_ref 4363959 // ThreadEvent
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15604919 "DISASSOCIATE_JVM"
	public type class_ref 4363959 // ThreadEvent
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4364087 "flp_location_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int32_t num_locations, FlpLocation** location);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback with location information.
 Can only be called from a thread associated to JVM using set_thread_event_cb.
 Parameters:
    num_locations is the number of batched locations available.
    location is the pointer to an array of pointers to location objects.
"
    end

    class 4364215 "flp_acquire_wakelock"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})();
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Callback utility for acquiring a wakelock.
This can be used to prevent the CPU from suspending while handling FLP events.
"
    end

    class 4364343 "flp_release_wakelock"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})();
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Callback utility for releasing the FLP wakelock.
"
    end

    class 4364471 "flp_set_thread_event"
      visibility package stereotype "typedef" explicit_base_type "int"
      cpp_decl "${comment}typedef ${type}(* ${name})(ThreadEvent event);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Callback for associating a thread that can call into the Java framework code.
This must be used to initialize any threads that report events up to the framework.
Return value:
     FLP_RESULT_SUCCESS on success.
     FLP_RESULT_ERROR if the association failed in the current thread.
"
    end

    class 4364599 "flp_capabilities_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int capabilities);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Callback for technologies supported by this implementation.

Parameters: capabilities is a bitmask of FLP_CAPABILITY_* values describing
which features your implementation supports.  You should support
CAPABILITY_GNSS at a minimum for your implementation to be utilized.  You can
return 0 in FlpGeofenceCallbacks to indicate you don't support geofencing,
or 0 in FlpCallbacks to indicate you don't support location batching.
"
    end

    class 4364727 "flp_status_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int32_t status);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Callback with status information on the ability to compute location.
To avoid waking up the application processor you should only send
changes in status (you shouldn't call this method twice in a row
with the same status value).  As a guideline you should not call this
more frequently then the requested batch period set with period_ns
in FlpBatchOptions.  For example if period_ns is set to 5 minutes and
the status changes many times in that interval, you should only report
one status change every 5 minutes.

Parameters:
    status is one of FLP_STATUS_LOCATION_AVAILABLE
    or FLP_STATUS_LOCATION_UNAVAILABLE.
"
    end

    class 4364855 "FlpCallbacks"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " FLP callback structure. "
      classrelation 8350135 // location_cb (<directional composition>)
	relation 8350135 *-->
	  a role_name "location_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8350135 // location_cb (<directional composition>)
	  b parent class_ref 4364087 // flp_location_callback
      end

      classrelation 8350263 // acquire_wakelock_cb (<directional composition>)
	relation 8350263 *-->
	  a role_name "acquire_wakelock_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8350263 // acquire_wakelock_cb (<directional composition>)
	  b parent class_ref 4364215 // flp_acquire_wakelock
      end

      classrelation 8350391 // release_wakelock_cb (<directional composition>)
	relation 8350391 *-->
	  a role_name "release_wakelock_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8350391 // release_wakelock_cb (<directional composition>)
	  b parent class_ref 4364343 // flp_release_wakelock
      end

      classrelation 8350519 // set_thread_event_cb (<directional composition>)
	relation 8350519 *-->
	  a role_name "set_thread_event_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8350519 // set_thread_event_cb (<directional composition>)
	  b parent class_ref 4364471 // flp_set_thread_event
      end

      classrelation 8350647 // flp_capabilities_cb (<directional composition>)
	relation 8350647 *-->
	  a role_name "flp_capabilities_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8350647 // flp_capabilities_cb (<directional composition>)
	  b parent class_ref 4364599 // flp_capabilities_callback
      end

      classrelation 8350775 // flp_status_cb (<directional composition>)
	relation 8350775 *-->
	  a role_name "flp_status_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8350775 // flp_status_cb (<directional composition>)
	  b parent class_ref 4364727 // flp_status_callback
      end
    end

    class 4364983 "FlpBatchOptions"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Options with the batching FLP APIs "
      attribute 15605047 "max_power_allocation_mW"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Maximum power in mW that the underlying implementation
can use for this batching call.
If max_power_allocation_mW is 0, only fixes that are generated
at no additional cost of power shall be reported.

"
      end

      attribute 15605175 "smallest_displacement_meters"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The smallest displacement between reported locations in meters.

If set to 0, then you should report locations at the requested
interval even if the device is stationary.  If positive, you
can use this parameter as a hint to save power (e.g. throttling
location period if the user hasn't traveled close to the displacement
threshold).  Even small positive values can be interpreted to mean
that you don't have to compute location when the device is stationary.

There is no need to filter location delivery based on this parameter.
Locations can be delivered even if they have a displacement smaller than
requested. This parameter can safely be ignored at the cost of potential
power savings.

"
      end
    end

    class 4365111 "FlpLocationInterface"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents the standard FLP interface.
"
      attribute 15605303 "init"
	public explicit_type "/** * Opens the interface and provides the callback routines * to the implementation of this interface. Once called you should respond * by calling the flp_capabilities_callback in FlpCallbacks to * specify the capabilities that your implementation supports. */ int (*)(FlpCallbacks* callbacks )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Opens the interface and provides the callback routines
     * to the implementation of this interface.  Once called you should respond
     * by calling the flp_capabilities_callback in FlpCallbacks to
     * specify the capabilities that your implementation supports.
     */
    int (*${name})(FlpCallbacks* callbacks )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Opens the interface and provides the callback routines
to the implementation of this interface.  Once called you should respond
by calling the flp_capabilities_callback in FlpCallbacks to
specify the capabilities that your implementation supports.

"
      end

      attribute 15605431 "get_batch_size"
	public explicit_type "/** * Return the batch size (in number of FlpLocation objects) * available in the hardware. Note, different HW implementations * may have different sample sizes. This shall return number * of samples defined in the format of FlpLocation. * This will be used by the upper layer, to decide on the batching * interval and whether the AP should be woken up or not. */ int (*)()"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Return the batch size (in number of FlpLocation objects)
     * available in the hardware.  Note, different HW implementations
     * may have different sample sizes.  This shall return number
     * of samples defined in the format of FlpLocation.
     * This will be used by the upper layer, to decide on the batching
     * interval and whether the AP should be woken up or not.
     */
    int (*${name})()${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Return the batch size (in number of FlpLocation objects)
available in the hardware.  Note, different HW implementations
may have different sample sizes.  This shall return number
of samples defined in the format of FlpLocation.
This will be used by the upper layer, to decide on the batching
interval and whether the AP should be woken up or not.

"
      end

      attribute 15605559 "start_batching"
	public explicit_type "/** * Start batching locations. This API is primarily used when the AP is * asleep and the device can batch locations in the hardware. * flp_location_callback is used to return the locations. When the buffer * is full and FLP_BATCH_WAKEUP_ON_FIFO_FULL is used, the AP is woken up. * When the buffer is full and FLP_BATCH_WAKEUP_ON_FIFO_FULL is not set, * the oldest location object is dropped. In this case the AP will not be * woken up. The upper layer will use get_batched_location * API to explicitly ask for the location. * If FLP_BATCH_CALLBACK_ON_LOCATION_FIX is set, the implementation * will call the flp_location_callback every single time there is a location * fix. This overrides FLP_BATCH_WAKEUP_ON_FIFO_FULL flag setting. * It's the responsibility of the upper layers (caller) to switch * it off, if it knows that the AP might go to sleep. This is useful * for nagivational applications when the system is in high power mode. * Parameters: * id - Id for the request. * options - See FlpBatchOptions struct definition. * Return value: * FLP_RESULT_SUCCESS on success, FLP_RESULT_INSUFFICIENT_MEMORY, * FLP_RESULT_ID_EXISTS, FLP_RESULT_ERROR on failure. */ int (*)(int id, FlpBatchOptions* options)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Start batching locations. This API is primarily used when the AP is
     * asleep and the device can batch locations in the hardware.
     *   flp_location_callback is used to return the locations. When the buffer
     * is full and FLP_BATCH_WAKEUP_ON_FIFO_FULL is used, the AP is woken up.
     * When the buffer is full and FLP_BATCH_WAKEUP_ON_FIFO_FULL is not set,
     * the oldest location object is dropped. In this case the  AP will not be
     * woken up. The upper layer will use get_batched_location
     * API to explicitly ask for the location.
     *   If FLP_BATCH_CALLBACK_ON_LOCATION_FIX is set, the implementation
     * will call the flp_location_callback every single time there is a location
     * fix. This overrides FLP_BATCH_WAKEUP_ON_FIFO_FULL flag setting.
     * It's the responsibility of the upper layers (caller) to switch
     * it off, if it knows that the AP might go to sleep. This is useful
     * for nagivational applications when the system is in high power mode.
     * Parameters:
     *    id - Id for the request.
     *    options - See FlpBatchOptions struct definition.
     * Return value:
     *    FLP_RESULT_SUCCESS on success, FLP_RESULT_INSUFFICIENT_MEMORY,
     *    FLP_RESULT_ID_EXISTS, FLP_RESULT_ERROR on failure.
     */
    int (*${name})(int id, FlpBatchOptions* options)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Start batching locations. This API is primarily used when the AP is
asleep and the device can batch locations in the hardware.
  flp_location_callback is used to return the locations. When the buffer
is full and FLP_BATCH_WAKEUP_ON_FIFO_FULL is used, the AP is woken up.
When the buffer is full and FLP_BATCH_WAKEUP_ON_FIFO_FULL is not set,
the oldest location object is dropped. In this case the  AP will not be
woken up. The upper layer will use get_batched_location
API to explicitly ask for the location.
  If FLP_BATCH_CALLBACK_ON_LOCATION_FIX is set, the implementation
will call the flp_location_callback every single time there is a location
fix. This overrides FLP_BATCH_WAKEUP_ON_FIFO_FULL flag setting.
It's the responsibility of the upper layers (caller) to switch
it off, if it knows that the AP might go to sleep. This is useful
for nagivational applications when the system is in high power mode.
Parameters:
   id - Id for the request.
   options - See FlpBatchOptions struct definition.
Return value:
   FLP_RESULT_SUCCESS on success, FLP_RESULT_INSUFFICIENT_MEMORY,
   FLP_RESULT_ID_EXISTS, FLP_RESULT_ERROR on failure.

"
      end

      attribute 15605687 "update_batching_options"
	public explicit_type "/** * Update FlpBatchOptions associated with a batching request. * When a batching operation is in progress and a batching option * such as FLP_BATCH_WAKEUP_ON_FIFO_FULL needs to be updated, this API * will be used. For instance, this can happen when the AP is awake and * the maps application is being used. * Parameters: * id - Id of an existing batch request. * new_options - Updated FlpBatchOptions * Return value: * FLP_RESULT_SUCCESS on success, FLP_RESULT_ID_UNKNOWN, * FLP_RESULT_ERROR on error. */ int (*)(int id, FlpBatchOptions* new_options)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Update FlpBatchOptions associated with a batching request.
     * When a batching operation is in progress and a batching option
     * such as FLP_BATCH_WAKEUP_ON_FIFO_FULL needs to be updated, this API
     * will be used. For instance, this can happen when the AP is awake and
     * the maps application is being used.
     * Parameters:
     *    id - Id of an existing batch request.
     *    new_options - Updated FlpBatchOptions
     * Return value:
     *    FLP_RESULT_SUCCESS on success, FLP_RESULT_ID_UNKNOWN,
     *    FLP_RESULT_ERROR on error.
     */
    int (*${name})(int id, FlpBatchOptions* new_options)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Update FlpBatchOptions associated with a batching request.
When a batching operation is in progress and a batching option
such as FLP_BATCH_WAKEUP_ON_FIFO_FULL needs to be updated, this API
will be used. For instance, this can happen when the AP is awake and
the maps application is being used.
Parameters:
   id - Id of an existing batch request.
   new_options - Updated FlpBatchOptions
Return value:
   FLP_RESULT_SUCCESS on success, FLP_RESULT_ID_UNKNOWN,
   FLP_RESULT_ERROR on error.

"
      end

      attribute 15605815 "stop_batching"
	public explicit_type "/** * Stop batching. * Parameters: * id - Id for the request. * Return Value: * FLP_RESULT_SUCCESS on success, FLP_RESULT_ID_UNKNOWN or * FLP_RESULT_ERROR on failure. */ int (*)(int id)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Stop batching.
     * Parameters:
     *    id - Id for the request.
     * Return Value:
     *    FLP_RESULT_SUCCESS on success, FLP_RESULT_ID_UNKNOWN or
     *    FLP_RESULT_ERROR on failure.
     */
    int (*${name})(int id)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Stop batching.
Parameters:
   id - Id for the request.
Return Value:
   FLP_RESULT_SUCCESS on success, FLP_RESULT_ID_UNKNOWN or
   FLP_RESULT_ERROR on failure.

"
      end

      attribute 15605943 "cleanup"
	public explicit_type "/** * Closes the interface. If any batch operations are in progress, * they should be stopped. */ void (*)()"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Closes the interface. If any batch operations are in progress,
     * they should be stopped.
     */
    void (*${name})()${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Closes the interface. If any batch operations are in progress,
they should be stopped.

"
      end

      attribute 15606071 "get_batched_location"
	public explicit_type "/** * Get the fused location that was batched. * flp_location_callback is used to return the location. The location object * is dropped from the buffer only when the buffer is full. Do not remove it * from the buffer just because it has been returned using the callback. * In other words, when there is no new location object, two calls to * get_batched_location(1) should return the same location object. * Parameters: * last_n_locations - Number of locations to get. This can be one or many. * If the last_n_locations is 1, you get the latest location known to the * hardware. */ void (*)(int last_n_locations)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Get the fused location that was batched.
     *   flp_location_callback is used to return the location. The location object
     * is dropped from the buffer only when the buffer is full. Do not remove it
     * from the buffer just because it has been returned using the callback.
     * In other words, when there is no new location object, two calls to
     * get_batched_location(1) should return the same location object.
     * Parameters:
     *      last_n_locations - Number of locations to get. This can be one or many.
     *      If the last_n_locations is 1, you get the latest location known to the
     *      hardware.
     */
    void (*${name})(int last_n_locations)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Get the fused location that was batched.
  flp_location_callback is used to return the location. The location object
is dropped from the buffer only when the buffer is full. Do not remove it
from the buffer just because it has been returned using the callback.
In other words, when there is no new location object, two calls to
get_batched_location(1) should return the same location object.
Parameters:
     last_n_locations - Number of locations to get. This can be one or many.
     If the last_n_locations is 1, you get the latest location known to the
     hardware.

"
      end

      attribute 15606199 "inject_location"
	public explicit_type "/** * Injects current location from another location provider * latitude and longitude are measured in degrees * expected accuracy is measured in meters * Parameters: * location - The location object being injected. * Return value: FLP_RESULT_SUCCESS or FLP_RESULT_ERROR. */ int (*)(FlpLocation* location)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Injects current location from another location provider
     * latitude and longitude are measured in degrees
     * expected accuracy is measured in meters
     * Parameters:
     *      location - The location object being injected.
     * Return value: FLP_RESULT_SUCCESS or FLP_RESULT_ERROR.
     */
    int  (*${name})(FlpLocation* location)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Injects current location from another location provider
latitude and longitude are measured in degrees
expected accuracy is measured in meters
Parameters:
     location - The location object being injected.
Return value: FLP_RESULT_SUCCESS or FLP_RESULT_ERROR.

"
      end

      attribute 15606327 "get_extension"
	const_attribute public explicit_type "void* (*)(const char* name)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const} void* (*${name})(const char* name)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Get a pointer to extension information.

"
      end

      attribute 15606455 "flush_batched_locations"
	public explicit_type "/** * Retrieve all batched locations currently stored and clear the buffer. * flp_location_callback MUST be called in response, even if there are * no locations to flush (in which case num_locations should be 0). * Subsequent calls to get_batched_location or flush_batched_locations * should not return any of the locations returned in this call. */ void (*)()"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Retrieve all batched locations currently stored and clear the buffer.
     * flp_location_callback MUST be called in response, even if there are
     * no locations to flush (in which case num_locations should be 0).
     * Subsequent calls to get_batched_location or flush_batched_locations
     * should not return any of the locations returned in this call.
     */
    void (*${name})()${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Retrieve all batched locations currently stored and clear the buffer.
flp_location_callback MUST be called in response, even if there are
no locations to flush (in which case num_locations should be 0).
Subsequent calls to get_batched_location or flush_batched_locations
should not return any of the locations returned in this call.

"
      end
    end

    class 4365239 "flp_device_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8351415 // common (<directional composition>)
	relation 8351415 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8351415 // common (<directional composition>)
	  b parent class_ref 4305975 // hw_device_t
      end

      attribute 15606583 "get_flp_interface"
	const_attribute public explicit_type "FlpLocationInterface* (*)(struct flp_device_t* dev)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const} FlpLocationInterface* (*${name})(struct flp_device_t* dev)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Get a handle to the FLP Interface.

"
      end
    end

    class 4365367 "report_data"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(char* data, int length);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Callback for reports diagnostic data into the Java framework code.
"
    end

    class 4365495 "FlpDiagnosticCallbacks"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "FLP diagnostic callback structure.
Currently, not used - but this for future extension.
"
      classrelation 8351671 // set_thread_event_cb (<directional composition>)
	relation 8351671 *-->
	  a role_name "set_thread_event_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8351671 // set_thread_event_cb (<directional composition>)
	  b parent class_ref 4364471 // flp_set_thread_event
      end

      classrelation 8351799 // data_cb (<directional composition>)
	relation 8351799 *-->
	  a role_name "data_cb" public
	    comment " reports diagnostic data into the Java framework code 
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8351799 // data_cb (<directional composition>)
	  b parent class_ref 4365367 // report_data
      end
    end

    class 4365623 "FlpDiagnosticInterface"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Extended interface for diagnostic support. "
      attribute 15606711 "init"
	public explicit_type "/** * Opens the diagnostic interface and provides the callback routines * to the implemenation of this interface. */ void (*)(FlpDiagnosticCallbacks* callbacks)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Opens the diagnostic interface and provides the callback routines
     * to the implemenation of this interface.
     */
    void  (*${name})(FlpDiagnosticCallbacks* callbacks)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Opens the diagnostic interface and provides the callback routines
to the implemenation of this interface.

"
      end

      attribute 15606839 "inject_data"
	public explicit_type "/** * Injects diagnostic data into the FLP subsystem. * Return 0 on success, -1 on error. **/ int (*)(char* data, int length )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Injects diagnostic data into the FLP subsystem.
     * Return 0 on success, -1 on error.
     **/
    int  (*${name})(char* data, int length )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Injects diagnostic data into the FLP subsystem.
Return 0 on success, -1 on error.

"
      end
    end

    class 4365751 "FlpDeviceContextInterface"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Extended interface for device context support. "
      attribute 15606967 "inject_device_context"
	public explicit_type "/** * Injects debug data into the FLP subsystem. * Return 0 on success, -1 on error. **/ int (*)(uint32_t enabledMask)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Injects debug data into the FLP subsystem.
     * Return 0 on success, -1 on error.
     **/
    int  (*${name})(uint32_t enabledMask)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Injects debug data into the FLP subsystem.
Return 0 on success, -1 on error.

"
      end
    end

    class 4365879 "flp_geofence_transition_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name}) (int32_t geofence_id,  FlpLocation* location,
        int32_t transition, FlpUtcTime timestamp, uint32_t sources_used);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The callback associated with the geofence.
Parameters:
     geofence_id - The id associated with the add_geofence_area.
     location    - The current location as determined by the FLP subsystem.
     transition  - Can be one of FLP_GEOFENCE_TRANSITION_ENTERED, FLP_GEOFENCE_TRANSITION_EXITED,
                   FLP_GEOFENCE_TRANSITION_UNCERTAIN.
     timestamp   - Timestamp when the transition was detected; -1 if not available.
     sources_used - Bitwise OR of FLP_TECH_MASK flags indicating which
                    subsystems were used.

The callback should only be called when the caller is interested in that
particular transition. For instance, if the caller is interested only in
ENTERED transition, then the callback should NOT be called with the EXITED
transition.

IMPORTANT: If a transition is triggered resulting in this callback, the
subsystem will wake up the application processor, if its in suspend state.
"
    end

    class 4366007 "flp_geofence_monitor_status_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name}) (int32_t status, uint32_t source,
                                                      FlpLocation* last_location);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The callback associated with the availablity of one the sources used for geofence
monitoring by the FLP sub-system For example, if the GPS system determines that it cannot
monitor geofences because of lack of reliability or unavailability of the GPS signals,
it will call this callback with FLP_GEOFENCE_MONITOR_STATUS_UNAVAILABLE parameter and the
source set to FLP_TECH_MASK_GNSS.

Parameters:
 status - FLP_GEOFENCE_MONITOR_STATUS_UNAVAILABLE or FLP_GEOFENCE_MONITOR_STATUS_AVAILABLE.
 source - One of the FLP_TECH_MASKS
 last_location - Last known location.
"
    end

    class 4366135 "flp_geofence_add_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name}) (int32_t geofence_id, int32_t result);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The callback associated with the add_geofence call.

Parameter:
geofence_id - Id of the geofence.
result - FLP_RESULT_SUCCESS
         FLP_RESULT_ERROR_TOO_MANY_GEOFENCES  - geofence limit has been reached.
         FLP_RESULT_ID_EXISTS  - geofence with id already exists
         FLP_RESULT_INVALID_GEOFENCE_TRANSITION - the monitorTransition contains an
             invalid transition
         FLP_RESULT_ERROR - for other errors.
"
    end

    class 4366263 "flp_geofence_remove_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name}) (int32_t geofence_id, int32_t result);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The callback associated with the remove_geofence call.

Parameter:
geofence_id - Id of the geofence.
result - FLP_RESULT_SUCCESS
         FLP_RESULT_ID_UNKNOWN - for invalid id
         FLP_RESULT_ERROR for others.
"
    end

    class 4366391 "flp_geofence_pause_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name}) (int32_t geofence_id, int32_t result);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The callback associated with the pause_geofence call.

Parameter:
geofence_id - Id of the geofence.
result - FLP_RESULT_SUCCESS
         FLP_RESULT__ID_UNKNOWN - for invalid id
         FLP_RESULT_INVALID_TRANSITION -
                   when monitor_transitions is invalid
         FLP_RESULT_ERROR for others.
"
    end

    class 4366519 "flp_geofence_resume_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name}) (int32_t geofence_id, int32_t result);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The callback associated with the resume_geofence call.

Parameter:
geofence_id - Id of the geofence.
result - FLP_RESULT_SUCCESS
         FLP_RESULT_ID_UNKNOWN - for invalid id
         FLP_RESULT_ERROR for others.
"
    end

    class 4366647 "FlpGeofenceCallbacks"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8352311 // geofence_transition_callback (<directional composition>)
	relation 8352311 *-->
	  a role_name "geofence_transition_callback" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8352311 // geofence_transition_callback (<directional composition>)
	  b parent class_ref 4365879 // flp_geofence_transition_callback
      end

      classrelation 8352439 // geofence_status_callback (<directional composition>)
	relation 8352439 *-->
	  a role_name "geofence_status_callback" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8352439 // geofence_status_callback (<directional composition>)
	  b parent class_ref 4366007 // flp_geofence_monitor_status_callback
      end

      classrelation 8352567 // geofence_add_callback (<directional composition>)
	relation 8352567 *-->
	  a role_name "geofence_add_callback" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8352567 // geofence_add_callback (<directional composition>)
	  b parent class_ref 4366135 // flp_geofence_add_callback
      end

      classrelation 8352695 // geofence_remove_callback (<directional composition>)
	relation 8352695 *-->
	  a role_name "geofence_remove_callback" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8352695 // geofence_remove_callback (<directional composition>)
	  b parent class_ref 4366263 // flp_geofence_remove_callback
      end

      classrelation 8352823 // geofence_pause_callback (<directional composition>)
	relation 8352823 *-->
	  a role_name "geofence_pause_callback" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8352823 // geofence_pause_callback (<directional composition>)
	  b parent class_ref 4366391 // flp_geofence_pause_callback
      end

      classrelation 8352951 // geofence_resume_callback (<directional composition>)
	relation 8352951 *-->
	  a role_name "geofence_resume_callback" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8352951 // geofence_resume_callback (<directional composition>)
	  b parent class_ref 4366519 // flp_geofence_resume_callback
      end

      classrelation 8353079 // set_thread_event_cb (<directional composition>)
	relation 8353079 *-->
	  a role_name "set_thread_event_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8353079 // set_thread_event_cb (<directional composition>)
	  b parent class_ref 4364471 // flp_set_thread_event
      end

      classrelation 8353207 // flp_capabilities_cb (<directional composition>)
	relation 8353207 *-->
	  a role_name "flp_capabilities_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8353207 // flp_capabilities_cb (<directional composition>)
	  b parent class_ref 4364599 // flp_capabilities_callback
      end
    end

    class 4366775 "GeofenceType"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Type of geofence "
      attribute 15607095 "TYPE_CIRCLE"
	public type class_ref 4366775 // GeofenceType
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4366903 "GeofenceCircle"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Circular geofence is represented by lat / long / radius "
      attribute 15607223 "latitude"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15607351 "longitude"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15607479 "radius_m"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4367031 "GeofenceData"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Represents the type of geofence and data "
      classrelation 8353335 // type (<directional composition>)
	relation 8353335 *-->
	  a role_name "type" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8353335 // type (<directional composition>)
	  b parent class_ref 4366775 // GeofenceType
      end

      attribute 15607607 "geofence"
	public explicit_type "<complex type>"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}union  {
        GeofenceCircle circle;
    } ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4367159 "GeofenceOptions"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Geofence Options "
      attribute 15607735 "last_transition"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The current state of the geofence. For example, if
the system already knows that the user is inside the geofence,
this will be set to FLP_GEOFENCE_TRANSITION_ENTERED. In most cases, it
will be FLP_GEOFENCE_TRANSITION_UNCERTAIN. 
"
      end

      attribute 15607863 "monitor_transitions"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Transitions to monitor. Bitwise OR of
FLP_GEOFENCE_TRANSITION_ENTERED, FLP_GEOFENCE_TRANSITION_EXITED and
FLP_GEOFENCE_TRANSITION_UNCERTAIN.

"
      end

      attribute 15607991 "notification_responsivenes_ms"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Defines the best-effort description
of how soon should the callback be called when the transition
associated with the Geofence is triggered. For instance, if set
to 1000 millseconds with FLP_GEOFENCE_TRANSITION_ENTERED, the callback
should be called 1000 milliseconds within entering the geofence.
This parameter is defined in milliseconds.
NOTE: This is not to be confused with the rate that the GPS is
polled at. It is acceptable to dynamically vary the rate of
sampling the GPS for power-saving reasons; thus the rate of
sampling may be faster or slower than this.

"
      end

      attribute 15608119 "unknown_timer_ms"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The time limit after which the UNCERTAIN transition
should be triggered. This paramter is defined in milliseconds.

"
      end

    end

    class 4367287 "Geofence"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Geofence struct "
      classrelation 8353719 // data (<unidirectional association>)
	relation 8353719 --->
	  a role_name "data" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8353719 // data (<unidirectional association>)
	  b parent class_ref 4367031 // GeofenceData
      end

      classrelation 8353847 // options (<unidirectional association>)
	relation 8353847 --->
	  a role_name "options" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8353847 // options (<unidirectional association>)
	  b parent class_ref 4367159 // GeofenceOptions
      end
    end

    class 4367415 "FlpGeofencingInterface"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Extended interface for FLP_Geofencing support "
      attribute 15608247 "init"
	public explicit_type "/** * Opens the geofence interface and provides the callback routines * to the implemenation of this interface. Once called you should respond * by calling the flp_capabilities_callback in FlpGeofenceCallbacks to * specify the capabilities that your implementation supports. */ void (*)( FlpGeofenceCallbacks* callbacks )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
   /**
    * Opens the geofence interface and provides the callback routines
    * to the implemenation of this interface.  Once called you should respond
    * by calling the flp_capabilities_callback in FlpGeofenceCallbacks to
    * specify the capabilities that your implementation supports.
    */
   void  (*${name})( FlpGeofenceCallbacks* callbacks )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Opens the geofence interface and provides the callback routines
to the implemenation of this interface.  Once called you should respond
by calling the flp_capabilities_callback in FlpGeofenceCallbacks to
specify the capabilities that your implementation supports.

"
      end

      attribute 15608375 "add_geofences"
	public explicit_type "/** * Add a list of geofences. * Parameters: * number_of_geofences - The number of geofences that needed to be added. * geofences - Pointer to array of pointers to Geofence structure. */ void (*) (int32_t number_of_geofences, Geofence** geofences)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
   /**
    * Add a list of geofences.
    * Parameters:
    *     number_of_geofences - The number of geofences that needed to be added.
    *     geofences - Pointer to array of pointers to Geofence structure.
    */
   void (*${name}) (int32_t number_of_geofences, Geofence** geofences)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Add a list of geofences.
Parameters:
    number_of_geofences - The number of geofences that needed to be added.
    geofences - Pointer to array of pointers to Geofence structure.

"
      end

      attribute 15608503 "pause_geofence"
	public explicit_type "/** * Pause monitoring a particular geofence. * Parameters: * geofence_id - The id for the geofence. */ void (*) (int32_t geofence_id)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
   /**
    * Pause monitoring a particular geofence.
    * Parameters:
    *   geofence_id - The id for the geofence.
    */
   void (*${name}) (int32_t geofence_id)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Pause monitoring a particular geofence.
Parameters:
  geofence_id - The id for the geofence.

"
      end

      attribute 15608631 "resume_geofence"
	public explicit_type "/** * Resume monitoring a particular geofence. * Parameters: * geofence_id - The id for the geofence. * monitor_transitions - Which transitions to monitor. Bitwise OR of * FLP_GEOFENCE_TRANSITION_ENTERED, FLP_GEOFENCE_TRANSITION_EXITED and * FLP_GEOFENCE_TRANSITION_UNCERTAIN. * This supersedes the value associated provided in the * add_geofence_area call. */ void (*) (int32_t geofence_id, int monitor_transitions)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
   /**
    * Resume monitoring a particular geofence.
    * Parameters:
    *   geofence_id - The id for the geofence.
    *   monitor_transitions - Which transitions to monitor. Bitwise OR of
    *       FLP_GEOFENCE_TRANSITION_ENTERED, FLP_GEOFENCE_TRANSITION_EXITED and
    *       FLP_GEOFENCE_TRANSITION_UNCERTAIN.
    *       This supersedes the value associated provided in the
    *       add_geofence_area call.
    */
   void (*${name}) (int32_t geofence_id, int monitor_transitions)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Resume monitoring a particular geofence.
Parameters:
  geofence_id - The id for the geofence.
  monitor_transitions - Which transitions to monitor. Bitwise OR of
      FLP_GEOFENCE_TRANSITION_ENTERED, FLP_GEOFENCE_TRANSITION_EXITED and
      FLP_GEOFENCE_TRANSITION_UNCERTAIN.
      This supersedes the value associated provided in the
      add_geofence_area call.

"
      end

      attribute 15608759 "modify_geofence_option"
	public explicit_type "/** * Modify a particular geofence option. * Parameters: * geofence_id - The id for the geofence. * options - Various options associated with the geofence. See * GeofenceOptions structure for details. */ void (*) (int32_t geofence_id, GeofenceOptions* options)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
   /**
    * Modify a particular geofence option.
    * Parameters:
    *    geofence_id - The id for the geofence.
    *    options - Various options associated with the geofence. See
    *        GeofenceOptions structure for details.
    */
   void (*${name}) (int32_t geofence_id, GeofenceOptions* options)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Modify a particular geofence option.
Parameters:
   geofence_id - The id for the geofence.
   options - Various options associated with the geofence. See
       GeofenceOptions structure for details.

"
      end

      attribute 15608887 "remove_geofences"
	public explicit_type "/** * Remove a list of geofences. After the function returns, no notifications * should be sent. * Parameter: * number_of_geofences - The number of geofences that needed to be added. * geofence_id - Pointer to array of geofence_ids to be removed. */ void (*) (int32_t number_of_geofences, int32_t* geofence_id)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
   /**
    * Remove a list of geofences. After the function returns, no notifications
    * should be sent.
    * Parameter:
    *     number_of_geofences - The number of geofences that needed to be added.
    *     geofence_id - Pointer to array of geofence_ids to be removed.
    */
   void (*${name}) (int32_t number_of_geofences, int32_t* geofence_id)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Remove a list of geofences. After the function returns, no notifications
should be sent.
Parameter:
    number_of_geofences - The number of geofences that needed to be added.
    geofence_id - Pointer to array of geofence_ids to be removed.

"
      end
    end

    class 4367543 "gatekeeper_device"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8354103 // common (<directional composition>)
	relation 8354103 *-->
	  a role_name "common" public
	    comment "Common methods of the gatekeeper device. As above, this must be the first
member of keymaster_device.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8354103 // common (<directional composition>)
	  b parent class_ref 4305975 // hw_device_t
      end

      attribute 15609015 "delete_user"
	public explicit_type "/* * Deletes the enrolled_password_handle associated wth the uid. Once deleted * the user cannot be verified anymore. * This function is optional and should be set to NULL if it is not implemented. * * Parameters * - dev: pointer to gatekeeper_device acquired via calls to gatekeeper_open * - uid: the Android user identifier * * Returns: * - 0 on success * - An error code < 0 on failure */ int (*)(const struct gatekeeper_device *dev, uint32_t uid)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * Deletes the enrolled_password_handle associated wth the uid. Once deleted
     * the user cannot be verified anymore.
     * This function is optional and should be set to NULL if it is not implemented.
     *
     * Parameters
     * - dev: pointer to gatekeeper_device acquired via calls to gatekeeper_open
     * - uid: the Android user identifier
     *
     * Returns:
     * - 0 on success
     * - An error code < 0 on failure
     */
    int (*${name})(const struct gatekeeper_device *dev,  uint32_t uid)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Deletes the enrolled_password_handle associated wth the uid. Once deleted
the user cannot be verified anymore.
This function is optional and should be set to NULL if it is not implemented.

Parameters
- dev: pointer to gatekeeper_device acquired via calls to gatekeeper_open
- uid: the Android user identifier

Returns:
- 0 on success
- An error code < 0 on failure

"
      end

      attribute 15609143 "delete_all_users"
	public explicit_type "/* * Deletes all the enrolled_password_handles for all uid's. Once called, * no users will be enrolled on the device. * This function is optional and should be set to NULL if it is not implemented. * * Parameters * - dev: pointer to gatekeeper_device acquired via calls to gatekeeper_open * * Returns: * - 0 on success * - An error code < 0 on failure */ int (*)(const struct gatekeeper_device *dev)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * Deletes all the enrolled_password_handles for all uid's. Once called,
     * no users will be enrolled on the device.
     * This function is optional and should be set to NULL if it is not implemented.
     *
     * Parameters
     * - dev: pointer to gatekeeper_device acquired via calls to gatekeeper_open
     *
     * Returns:
     * - 0 on success
     * - An error code < 0 on failure
     */
    int (*${name})(const struct gatekeeper_device *dev)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Deletes all the enrolled_password_handles for all uid's. Once called,
no users will be enrolled on the device.
This function is optional and should be set to NULL if it is not implemented.

Parameters
- dev: pointer to gatekeeper_device acquired via calls to gatekeeper_open

Returns:
- 0 on success
- An error code < 0 on failure

"
      end
    end

    class 4367671 "gatekeeper_device_t"
      visibility package stereotype "typedef" base_type class_ref 4367543 // gatekeeper_device
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8354487 // <dependency>
	relation 8354487 -_->
	  a public
	    cpp default "#include in source"
	    classrelation_ref 8354487 // <dependency>
	  b parent class_ref 4367543 // gatekeeper_device
      end
    end

    class 4367799 "GpsPositionMode"
      visibility package stereotype "typedef" explicit_base_type "uint32_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Requested operational mode for GPS operation. "
    end

    class 4367927 "GpsPositionRecurrence"
      visibility package stereotype "typedef" explicit_base_type "uint32_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Requested recurrence mode for GPS operation. "
    end

    class 4368055 "GpsStatusValue"
      visibility package stereotype "typedef" explicit_base_type "uint16_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " GPS status event values. "
    end

    class 4368183 "GpsLocationFlags"
      visibility package stereotype "typedef" explicit_base_type "uint16_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Flags to indicate which values are valid in a GpsLocation. "
    end

    class 4368311 "GpsAidingData"
      visibility package stereotype "typedef" explicit_base_type "uint16_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Flags used to specify which aiding data to delete when calling
delete_aiding_data().
"
    end

    class 4368439 "AGpsType"
      visibility package stereotype "typedef" explicit_base_type "uint16_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " AGPS type "
    end

    class 4368567 "AGpsSetIDType"
      visibility package stereotype "typedef" explicit_base_type "uint16_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4368695 "ApnIpType"
      visibility package stereotype "typedef" explicit_base_type "uint16_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4368823 "GpsNiType"
      visibility package stereotype "typedef" explicit_base_type "uint32_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "GpsNiType constants
"
    end

    class 4368951 "GpsNiNotifyFlags"
      visibility package stereotype "typedef" explicit_base_type "uint32_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "GpsNiNotifyFlags constants
"
    end

    class 4369079 "GpsUserResponseType"
      visibility package stereotype "typedef" explicit_base_type "int"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "GPS NI responses, used to define the response in
NI structures
"
    end

    class 4369207 "GpsNiEncodingType"
      visibility package stereotype "typedef" explicit_base_type "int"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "NI data encoding scheme
"
    end

    class 4369335 "AGpsStatusValue"
      visibility package stereotype "typedef" explicit_base_type "uint16_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " AGPS status event values. "
    end

    class 4369463 "AGpsRefLocationType"
      visibility package stereotype "typedef" explicit_base_type "uint16_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4369591 "GpsClockFlags"
      visibility package stereotype "typedef" explicit_base_type "uint16_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The following typedef together with its constants below are deprecated, and
will be removed in the next release. "
    end

    class 4369719 "GnssClockFlags"
      visibility package stereotype "typedef" explicit_base_type "uint16_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Flags to indicate what fields in GnssClock are valid.
"
    end

    class 4369847 "GpsClockType"
      visibility package stereotype "typedef" explicit_base_type "uint8_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The following typedef together with its constants below are deprecated, and
will be removed in the next release. "
    end

    class 4369975 "GpsMeasurementFlags"
      visibility package stereotype "typedef" explicit_base_type "uint32_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The following typedef together with its constants below are deprecated, and
will be removed in the next release. "
    end

    class 4370103 "GnssMeasurementFlags"
      visibility package stereotype "typedef" explicit_base_type "uint32_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Flags to indicate what fields in GnssMeasurement are valid.
"
    end

    class 4370231 "GpsLossOfLock"
      visibility package stereotype "typedef" explicit_base_type "uint8_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The following typedef together with its constants below are deprecated, and
will be removed in the next release. "
    end

    class 4370359 "GpsMultipathIndicator"
      visibility package stereotype "typedef" explicit_base_type "uint8_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The following typedef together with its constants below are deprecated, and
will be removed in the next release. Use GnssMultipathIndicator instead.
"
    end

    class 4370487 "GnssMultipathIndicator"
      visibility package stereotype "typedef" explicit_base_type "uint8_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Enumeration of available values for the GNSS Measurement's multipath
indicator.
"
    end

    class 4370615 "GpsMeasurementState"
      visibility package stereotype "typedef" explicit_base_type "uint16_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The following typedef together with its constants below are deprecated, and
will be removed in the next release. "
    end

    class 4370743 "GnssMeasurementState"
      visibility package stereotype "typedef" explicit_base_type "uint32_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Flags indicating the GNSS measurement state.

The expected behavior here is for GPS HAL to set all the flags that applies.
For example, if the state for a satellite is only C/A code locked and bit
synchronized, and there is still millisecond ambiguity, the state should be
set as:

GNSS_MEASUREMENT_STATE_CODE_LOCK | GNSS_MEASUREMENT_STATE_BIT_SYNC |
        GNSS_MEASUREMENT_STATE_MSEC_AMBIGUOUS

If GNSS is still searching for a satellite, the corresponding state should be
set to GNSS_MEASUREMENT_STATE_UNKNOWN(0).
"
    end

    class 4370871 "GpsAccumulatedDeltaRangeState"
      visibility package stereotype "typedef" explicit_base_type "uint16_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The following typedef together with its constants below are deprecated, and
will be removed in the next release. "
    end

    class 4370999 "GnssAccumulatedDeltaRangeState"
      visibility package stereotype "typedef" explicit_base_type "uint16_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Flags indicating the Accumulated Delta Range's states.
"
    end

    class 4371127 "GpsNavigationMessageType"
      visibility package stereotype "typedef" explicit_base_type "uint8_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The following typedef together with its constants below are deprecated, and
will be removed in the next release. "
    end

    class 4371255 "GnssNavigationMessageType"
      visibility package stereotype "typedef" explicit_base_type "int16_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Enumeration of available values to indicate the GNSS Navigation message
types.

For convenience, first byte is the GnssConstellationType on which that signal
is typically transmitted
"
    end

    class 4371383 "NavigationMessageStatus"
      visibility package stereotype "typedef" explicit_base_type "uint16_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Status of Navigation Message
When a message is received properly without any parity error in its navigation words, the
status should be set to NAV_MESSAGE_STATUS_PARITY_PASSED. But if a message is received
with words that failed parity check, but GPS is able to correct those words, the status
should be set to NAV_MESSAGE_STATUS_PARITY_REBUILT.
No need to send any navigation message that contains words with parity error and cannot be
corrected.
"
    end

    class 4371511 "GnssSvFlags"
      visibility package stereotype "typedef" explicit_base_type "uint8_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Flags that indicate information about the satellite
"
    end

    class 4371639 "GnssConstellationType"
      visibility package stereotype "typedef" explicit_base_type "uint8_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Constellation type of GnssSvInfo
"
    end

    class 4371767 "GpsLocation"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Represents a location. "
      attribute 15609271 "latitude"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Represents latitude in degrees. 
"
      end

      attribute 15609399 "longitude"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Represents longitude in degrees. 
"
      end

      attribute 15609527 "altitude"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Represents altitude in meters above the WGS 84 reference ellipsoid.

"
      end

      attribute 15609655 "speed"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Represents speed in meters per second. 
"
      end

      attribute 15609783 "bearing"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Represents heading in degrees. 
"
      end

      attribute 15609911 "accuracy"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Represents expected accuracy in meters. 
"
      end

      attribute 15610039 "timestamp"
	public explicit_type "GpsUtcTime"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Timestamp for the location fix. 
"
      end
    end

    class 4371895 "GpsStatus"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Represents the status. "
      classrelation 8358711 // status (<directional composition>)
	relation 8358711 *-->
	  a role_name "status" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8358711 // status (<directional composition>)
	  b parent class_ref 4368055 // GpsStatusValue
      end
    end

    class 4372023 "GpsSvInfo"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Legacy struct to represents SV information.
Deprecated, to be removed in the next Android release.
Use GnssSvInfo instead.
"
      attribute 15610167 "prn"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Pseudo-random number for the SV. 
"
      end

      attribute 15610295 "snr"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Signal to noise ratio. 
"
      end

      attribute 15610423 "elevation"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Elevation of SV in degrees. 
"
      end

      attribute 15610551 "azimuth"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Azimuth of SV in degrees. 
"
      end
    end

    class 4372151 "GnssSvInfo"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8359223 // constellation (<directional composition>)
	relation 8359223 *-->
	  a role_name "constellation" public
	    comment "Defines the constellation of the given SV. Value should be one of those
GNSS_CONSTELLATION_* constants

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8359223 // constellation (<directional composition>)
	  b parent class_ref 4371639 // GnssConstellationType
      end

      attribute 15610679 "c_n0_dbhz"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Carrier-to-noise density in dB-Hz, typically in the range [0, 63].
It contains the measured C/N0 value for the signal at the antenna port.

This is a mandatory value.

"
      end

      attribute 15610807 "elevation"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Elevation of SV in degrees. 
"
      end

      attribute 15610935 "azimuth"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Azimuth of SV in degrees. 
"
      end

      classrelation 8359351 // flags (<directional composition>)
	relation 8359351 *-->
	  a role_name "flags" public
	    comment "Contains additional data about the given SV. Value should be one of those
GNSS_SV_FLAGS_* constants

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8359351 // flags (<directional composition>)
	  b parent class_ref 4371511 // GnssSvFlags
      end
    end

    class 4372279 "GpsSvStatus"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Legacy struct to represents SV status.
Deprecated, to be removed in the next Android release.
Use GnssSvStatus instead.
"
      attribute 15611063 "num_svs"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 8359607 // sv_list (<directional composition>)
	relation 8359607 *-->
	  a role_name "sv_list" multiplicity "[GPS_MAX_SVS]" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8359607 // sv_list (<directional composition>)
	  b parent class_ref 4372023 // GpsSvInfo
      end

    end

    class 4372407 "GnssSvStatus"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents SV status.
"
      attribute 15611191 "num_svs"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Number of GPS SVs currently visible, refers to the SVs stored in sv_list 
"
      end

      classrelation 8360247 // gnss_sv_list (<directional composition>)
	relation 8360247 *-->
	  a role_name "gnss_sv_list" multiplicity "[GNSS_MAX_SVS]" public
	    comment "Pointer to an array of SVs information for all GNSS constellations,
except GPS, which is reported using sv_list

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8360247 // gnss_sv_list (<directional composition>)
	  b parent class_ref 4372151 // GnssSvInfo
      end
    end

    class 4372535 "AGpsRefLocationCellID"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " CellID for 2G, 3G and LTE, used in AGPS. "
      classrelation 8360375 // type (<directional composition>)
	relation 8360375 *-->
	  a role_name "type" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8360375 // type (<directional composition>)
	  b parent class_ref 4369463 // AGpsRefLocationType
      end

    end

    class 4372663 "AGpsRefLocationMac"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4372791 "AGpsRefLocation"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Represents ref locations "
      classrelation 8361399 // type (<directional composition>)
	relation 8361399 *-->
	  a role_name "type" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8361399 // type (<directional composition>)
	  b parent class_ref 4369463 // AGpsRefLocationType
      end

      attribute 15611319 "u"
	public explicit_type "<complex type>"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}union  {
        AGpsRefLocationCellID   cellID;
        AGpsRefLocationMac      mac;
    } ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4372919 "gps_location_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(GpsLocation* location);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Callback with location information. Can only be called from a thread created
by create_thread_cb.
"
    end

    class 4373047 "gps_status_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(GpsStatus* status);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Callback with status information. Can only be called from a thread created by
create_thread_cb.
"
    end

    class 4373175 "gps_sv_status_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(GpsSvStatus* sv_info);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Legacy callback with SV status information.
Can only be called from a thread created by create_thread_cb.

This callback is deprecated, and will be removed in the next release. Use
gnss_sv_status_callback() instead.
"
    end

    class 4373303 "gnss_sv_status_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(GnssSvStatus* sv_info);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Callback with SV status information.
Can only be called from a thread created by create_thread_cb.
"
    end

    class 4373431 "gps_nmea_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(GpsUtcTime timestamp, const char* nmea, int length);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Callback for reporting NMEA sentences. Can only be called from a thread
created by create_thread_cb.
"
    end

    class 4373559 "gps_set_capabilities"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(uint32_t capabilities);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Callback to inform framework of the GPS engine's capabilities. Capability
parameter is a bit field of GPS_CAPABILITY_* flags.
"
    end

    class 4373687 "gps_acquire_wakelock"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})();
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Callback utility for acquiring the GPS wakelock. This can be used to prevent
the CPU from suspending while handling GPS events.
"
    end

    class 4373815 "gps_release_wakelock"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})();
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback utility for releasing the GPS wakelock. "
    end

    class 4373943 "gps_request_utc_time"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})();
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback for requesting NTP time "
    end

    class 4374071 "gps_create_thread"
      visibility package stereotype "typedef" explicit_base_type "pthread_t"
      cpp_decl "${comment}typedef ${type}(*  ${name})(const char* name, void (*start)(void *), void* arg);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Callback for creating a thread that can call into the Java framework code.
This must be used to create any threads that report events up to the
framework.
"
    end

    class 4374199 "GnssSystemInfo"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Provides information about how new the underlying GPS/GNSS hardware and
software is.

This information will be available for Android Test Applications. If a GPS
HAL does not provide this information, it will be considered \"2015 or
earlier\".

If a GPS HAL does provide this information, then newer years will need to
meet newer CTS standards. E.g. if the date are 2016 or above, then N+ level
GpsMeasurement support will be verified.
"
    end

    class 4374327 "gnss_set_system_info"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(const GnssSystemInfo* info);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Callback to inform framework of the engine's hardware version information.
"
    end

    class 4374455 "GpsCallbacks"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " New GPS callback structure. "
      classrelation 8362039 // location_cb (<directional composition>)
	relation 8362039 *-->
	  a role_name "location_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8362039 // location_cb (<directional composition>)
	  b parent class_ref 4372919 // gps_location_callback
      end

      classrelation 8362167 // status_cb (<directional composition>)
	relation 8362167 *-->
	  a role_name "status_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8362167 // status_cb (<directional composition>)
	  b parent class_ref 4373047 // gps_status_callback
      end

      classrelation 8362295 // sv_status_cb (<directional composition>)
	relation 8362295 *-->
	  a role_name "sv_status_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8362295 // sv_status_cb (<directional composition>)
	  b parent class_ref 4373175 // gps_sv_status_callback
      end

      classrelation 8362423 // nmea_cb (<directional composition>)
	relation 8362423 *-->
	  a role_name "nmea_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8362423 // nmea_cb (<directional composition>)
	  b parent class_ref 4373431 // gps_nmea_callback
      end

      classrelation 8362551 // set_capabilities_cb (<directional composition>)
	relation 8362551 *-->
	  a role_name "set_capabilities_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8362551 // set_capabilities_cb (<directional composition>)
	  b parent class_ref 4373559 // gps_set_capabilities
      end

      classrelation 8362679 // acquire_wakelock_cb (<directional composition>)
	relation 8362679 *-->
	  a role_name "acquire_wakelock_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8362679 // acquire_wakelock_cb (<directional composition>)
	  b parent class_ref 4373687 // gps_acquire_wakelock
      end

      classrelation 8362807 // release_wakelock_cb (<directional composition>)
	relation 8362807 *-->
	  a role_name "release_wakelock_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8362807 // release_wakelock_cb (<directional composition>)
	  b parent class_ref 4373815 // gps_release_wakelock
      end

      classrelation 8362935 // create_thread_cb (<directional composition>)
	relation 8362935 *-->
	  a role_name "create_thread_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8362935 // create_thread_cb (<directional composition>)
	  b parent class_ref 4374071 // gps_create_thread
      end

      classrelation 8363063 // request_utc_time_cb (<directional composition>)
	relation 8363063 *-->
	  a role_name "request_utc_time_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8363063 // request_utc_time_cb (<directional composition>)
	  b parent class_ref 4373943 // gps_request_utc_time
      end

      classrelation 8363191 // set_system_info_cb (<directional composition>)
	relation 8363191 *-->
	  a role_name "set_system_info_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8363191 // set_system_info_cb (<directional composition>)
	  b parent class_ref 4374327 // gnss_set_system_info
      end

      classrelation 8363319 // gnss_sv_status_cb (<directional composition>)
	relation 8363319 *-->
	  a role_name "gnss_sv_status_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8363319 // gnss_sv_status_cb (<directional composition>)
	  b parent class_ref 4373303 // gnss_sv_status_callback
      end
    end

    class 4374583 "GpsInterface"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Represents the standard GPS interface. "
      attribute 15611447 "init"
	public explicit_type "/** * Opens the interface and provides the callback routines * to the implementation of this interface. */ int (*)( GpsCallbacks* callbacks )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    /**
     * Opens the interface and provides the callback routines
     * to the implementation of this interface.
     */
    int   (*${name})( GpsCallbacks* callbacks )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Opens the interface and provides the callback routines
to the implementation of this interface.

"
      end

      attribute 15611575 "start"
	public explicit_type "/** Starts navigating. */ int (*)( void )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Starts navigating. */
    int   (*${name})( void )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Starts navigating. 
"
      end

      attribute 15611703 "stop"
	public explicit_type "/** Stops navigating. */ int (*)( void )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Stops navigating. */
    int   (*${name})( void )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Stops navigating. 
"
      end

      attribute 15611831 "cleanup"
	public explicit_type "/** Closes the interface. */ void (*)( void )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Closes the interface. */
    void  (*${name})( void )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Closes the interface. 
"
      end

      attribute 15611959 "inject_time"
	public explicit_type "/** Injects the current time. */ int (*)(GpsUtcTime time, int64_t timeReference, int uncertainty)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Injects the current time. */
    int   (*${name})(GpsUtcTime time, int64_t timeReference,
                         int uncertainty)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Injects the current time. 
"
      end

      attribute 15612087 "inject_location"
	public explicit_type "/** * Injects current location from another location provider (typically cell * ID). Latitude and longitude are measured in degrees expected accuracy is * measured in meters */ int (*)(double latitude, double longitude, float accuracy)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Injects current location from another location provider (typically cell
     * ID). Latitude and longitude are measured in degrees expected accuracy is
     * measured in meters
     */
    int  (*${name})(double latitude, double longitude, float accuracy)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Injects current location from another location provider (typically cell
ID). Latitude and longitude are measured in degrees expected accuracy is
measured in meters

"
      end

      attribute 15612215 "delete_aiding_data"
	public explicit_type "/** * Specifies that the next call to start will not use the * information defined in the flags. GPS_DELETE_ALL is passed for * a cold start. */ void (*)(GpsAidingData flags)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Specifies that the next call to start will not use the
     * information defined in the flags. GPS_DELETE_ALL is passed for
     * a cold start.
     */
    void  (*${name})(GpsAidingData flags)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Specifies that the next call to start will not use the
information defined in the flags. GPS_DELETE_ALL is passed for
a cold start.

"
      end

      attribute 15612343 "set_position_mode"
	public explicit_type "/** * min_interval represents the time between fixes in milliseconds. * preferred_accuracy represents the requested fix accuracy in meters. * preferred_time represents the requested time to first fix in milliseconds. * * 'mode' parameter should be one of GPS_POSITION_MODE_MS_BASED * or GPS_POSITION_MODE_STANDALONE. * It is allowed by the platform (and it is recommended) to fallback to * GPS_POSITION_MODE_MS_BASED if GPS_POSITION_MODE_MS_ASSISTED is passed in, and * GPS_POSITION_MODE_MS_BASED is supported. */ int (*)(GpsPositionMode mode, GpsPositionRecurrence recurrence, uint32_t min_interval, uint32_t preferred_accuracy, uint32_t preferred_time)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * min_interval represents the time between fixes in milliseconds.
     * preferred_accuracy represents the requested fix accuracy in meters.
     * preferred_time represents the requested time to first fix in milliseconds.
     *
     * 'mode' parameter should be one of GPS_POSITION_MODE_MS_BASED
     * or GPS_POSITION_MODE_STANDALONE.
     * It is allowed by the platform (and it is recommended) to fallback to
     * GPS_POSITION_MODE_MS_BASED if GPS_POSITION_MODE_MS_ASSISTED is passed in, and
     * GPS_POSITION_MODE_MS_BASED is supported.
     */
    int   (*${name})(GpsPositionMode mode, GpsPositionRecurrence recurrence,
            uint32_t min_interval, uint32_t preferred_accuracy, uint32_t preferred_time)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "min_interval represents the time between fixes in milliseconds.
preferred_accuracy represents the requested fix accuracy in meters.
preferred_time represents the requested time to first fix in milliseconds.

'mode' parameter should be one of GPS_POSITION_MODE_MS_BASED
or GPS_POSITION_MODE_STANDALONE.
It is allowed by the platform (and it is recommended) to fallback to
GPS_POSITION_MODE_MS_BASED if GPS_POSITION_MODE_MS_ASSISTED is passed in, and
GPS_POSITION_MODE_MS_BASED is supported.

"
      end

      attribute 15612471 "get_extension"
	const_attribute public explicit_type "void* (*)(const char* name)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const} void* (*${name})(const char* name)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Get a pointer to extension information. 
"
      end
    end

    class 4374711 "gps_xtra_download_request"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})();
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Callback to request the client to download XTRA data. The client should
download XTRA data and inject it by calling inject_xtra_data(). Can only be
called from a thread created by create_thread_cb.
"
    end

    class 4374839 "GpsXtraCallbacks"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback structure for the XTRA interface. "
      classrelation 8363575 // download_request_cb (<directional composition>)
	relation 8363575 *-->
	  a role_name "download_request_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8363575 // download_request_cb (<directional composition>)
	  b parent class_ref 4374711 // gps_xtra_download_request
      end

      classrelation 8363703 // create_thread_cb (<directional composition>)
	relation 8363703 *-->
	  a role_name "create_thread_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8363703 // create_thread_cb (<directional composition>)
	  b parent class_ref 4374071 // gps_create_thread
      end
    end

    class 4374967 "GpsXtraInterface"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Extended interface for XTRA support. "
      attribute 15612599 "init"
	public explicit_type "/** * Opens the XTRA interface and provides the callback routines * to the implementation of this interface. */ int (*)( GpsXtraCallbacks* callbacks )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    /**
     * Opens the XTRA interface and provides the callback routines
     * to the implementation of this interface.
     */
    int  (*${name})( GpsXtraCallbacks* callbacks )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Opens the XTRA interface and provides the callback routines
to the implementation of this interface.

"
      end

      attribute 15612727 "inject_xtra_data"
	public explicit_type "/** Injects XTRA data into the GPS. */ int (*)( char* data, int length )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    /** Injects XTRA data into the GPS. */
    int  (*${name})( char* data, int length )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Injects XTRA data into the GPS. 
"
      end
    end

    class 4375095 "GpsDebugInterface"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Extended interface for DEBUG support. "
      attribute 15612855 "get_internal_state"
	public explicit_type "/** * This function should return any information that the native * implementation wishes to include in a bugreport. */ size_t (*)(char* buffer, size_t bufferSize)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * This function should return any information that the native
     * implementation wishes to include in a bugreport.
     */
    size_t (*${name})(char* buffer, size_t bufferSize)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This function should return any information that the native
implementation wishes to include in a bugreport.

"
      end
    end

    class 4375223 "AGpsStatus"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents the status of AGPS augmented to support IPv4 and IPv6.
"
      classrelation 8364215 // type (<directional composition>)
	relation 8364215 *-->
	  a role_name "type" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8364215 // type (<directional composition>)
	  b parent class_ref 4368439 // AGpsType
      end

      classrelation 8364343 // status (<directional composition>)
	relation 8364343 *-->
	  a role_name "status" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8364343 // status (<directional composition>)
	  b parent class_ref 4369335 // AGpsStatusValue
      end

      attribute 15612983 "addr"
	public explicit_type "sockaddr_storage"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Must contain the IPv4 (AF_INET) or IPv6 (AF_INET6) address to report.
Any other value of addr.ss_family will be rejected.

"
      end
    end

    class 4375351 "agps_status_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(AGpsStatus* status);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Callback with AGPS status information. Can only be called from a thread
created by create_thread_cb.
"
    end

    class 4375479 "AGpsCallbacks"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Callback structure for the AGPS interface. "
      classrelation 8364599 // status_cb (<directional composition>)
	relation 8364599 *-->
	  a role_name "status_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8364599 // status_cb (<directional composition>)
	  b parent class_ref 4375351 // agps_status_callback
      end

      classrelation 8364727 // create_thread_cb (<directional composition>)
	relation 8364727 *-->
	  a role_name "create_thread_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8364727 // create_thread_cb (<directional composition>)
	  b parent class_ref 4374071 // gps_create_thread
      end
    end

    class 4375607 "AGpsInterface"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Extended interface for AGPS support, it is augmented to enable to pass
extra APN data.
"
      attribute 15613111 "init"
	public explicit_type "/** * Opens the AGPS interface and provides the callback routines to the * implementation of this interface. */ void (*)(AGpsCallbacks* callbacks)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Opens the AGPS interface and provides the callback routines to the
     * implementation of this interface.
     */
    void (*${name})(AGpsCallbacks* callbacks)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Opens the AGPS interface and provides the callback routines to the
implementation of this interface.

"
      end

      attribute 15613239 "data_conn_open"
	public explicit_type "/** * Deprecated. * If the HAL supports AGpsInterface_v2 this API will not be used, see * data_conn_open_with_apn_ip_type for more information. */ int (*)(const char* apn)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    /**
     * Deprecated.
     * If the HAL supports AGpsInterface_v2 this API will not be used, see
     * data_conn_open_with_apn_ip_type for more information.
     */
    int (*${name})(const char* apn)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Deprecated.
If the HAL supports AGpsInterface_v2 this API will not be used, see
data_conn_open_with_apn_ip_type for more information.

"
      end

      attribute 15613367 "data_conn_closed"
	public explicit_type "/** * Notifies that the AGPS data connection has been closed. */ int (*)()"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    /**
     * Notifies that the AGPS data connection has been closed.
     */
    int (*${name})()${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Notifies that the AGPS data connection has been closed.

"
      end

      attribute 15613495 "data_conn_failed"
	public explicit_type "/** * Notifies that a data connection is not available for AGPS. */ int (*)()"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    /**
     * Notifies that a data connection is not available for AGPS.
     */
    int (*${name})()${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Notifies that a data connection is not available for AGPS.

"
      end

      attribute 15613623 "set_server"
	public explicit_type "/** * Sets the hostname and port for the AGPS server. */ int (*)(AGpsType type, const char* hostname, int port)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    /**
     * Sets the hostname and port for the AGPS server.
     */
    int (*${name})(AGpsType type, const char* hostname, int port)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Sets the hostname and port for the AGPS server.

"
      end

      attribute 15613751 "data_conn_open_with_apn_ip_type"
	public explicit_type "/** * Notifies that a data connection is available and sets the name of the * APN, and its IP type, to be used for SUPL connections. */ int (*)( const char* apn, ApnIpType apnIpType)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Notifies that a data connection is available and sets the name of the
     * APN, and its IP type, to be used for SUPL connections.
     */
    int (*${name})(
            const char* apn,
            ApnIpType apnIpType)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Notifies that a data connection is available and sets the name of the
APN, and its IP type, to be used for SUPL connections.

"
      end
    end

    class 4375735 "DerEncodedCertificate"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " A data structure that represents an X.509 certificate using DER encoding "
      attribute 15613879 "data"
	public explicit_type "u_char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4375863 "Sha1CertificateFingerprint"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A type definition for SHA1 Fingerprints used to identify X.509 Certificates
The Fingerprint is a digest of the DER Certificate that uniquely identifies it.
"
      attribute 15614007 "data"
	public explicit_type "u_char"
	multiplicity "[20]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4375991 "SuplCertificateInterface"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " AGPS Interface to handle SUPL certificate operations "
      attribute 15614135 "install_certificates"
	public explicit_type "/** * Installs a set of Certificates used for SUPL connections to the AGPS server. * If needed the HAL should find out internally any certificates that need to be removed to * accommodate the certificates to install. * The certificates installed represent a full set of valid certificates needed to connect to * AGPS SUPL servers. * The list of certificates is required, and all must be available at the same time, when trying * to establish a connection with the AGPS Server. * * Parameters: * certificates - A pointer to an array of DER encoded certificates that are need to be * installed in the HAL. * length - The number of certificates to install. * Returns: * AGPS_CERTIFICATE_OPERATION_SUCCESS if the operation is completed successfully * AGPS_CERTIFICATE_ERROR_TOO_MANY_CERTIFICATES if the HAL cannot store the number of * certificates attempted to be installed, the state of the certificates stored should * remain the same as before on this error case. * * IMPORTANT: * If needed the HAL should find out internally the set of certificates that need to be * removed to accommodate the certificates to install. */ int (*) ( const DerEncodedCertificate* certificates, size_t length )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Installs a set of Certificates used for SUPL connections to the AGPS server.
     * If needed the HAL should find out internally any certificates that need to be removed to
     * accommodate the certificates to install.
     * The certificates installed represent a full set of valid certificates needed to connect to
     * AGPS SUPL servers.
     * The list of certificates is required, and all must be available at the same time, when trying
     * to establish a connection with the AGPS Server.
     *
     * Parameters:
     *      certificates - A pointer to an array of DER encoded certificates that are need to be
     *                     installed in the HAL.
     *      length - The number of certificates to install.
     * Returns:
     *      AGPS_CERTIFICATE_OPERATION_SUCCESS if the operation is completed successfully
     *      AGPS_CERTIFICATE_ERROR_TOO_MANY_CERTIFICATES if the HAL cannot store the number of
     *          certificates attempted to be installed, the state of the certificates stored should
     *          remain the same as before on this error case.
     *
     * IMPORTANT:
     *      If needed the HAL should find out internally the set of certificates that need to be
     *      removed to accommodate the certificates to install.
     */
    int  (*${name}) ( const DerEncodedCertificate* certificates, size_t length )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Installs a set of Certificates used for SUPL connections to the AGPS server.
If needed the HAL should find out internally any certificates that need to be removed to
accommodate the certificates to install.
The certificates installed represent a full set of valid certificates needed to connect to
AGPS SUPL servers.
The list of certificates is required, and all must be available at the same time, when trying
to establish a connection with the AGPS Server.

Parameters:
     certificates - A pointer to an array of DER encoded certificates that are need to be
                    installed in the HAL.
     length - The number of certificates to install.
Returns:
     AGPS_CERTIFICATE_OPERATION_SUCCESS if the operation is completed successfully
     AGPS_CERTIFICATE_ERROR_TOO_MANY_CERTIFICATES if the HAL cannot store the number of
         certificates attempted to be installed, the state of the certificates stored should
         remain the same as before on this error case.

IMPORTANT:
     If needed the HAL should find out internally the set of certificates that need to be
     removed to accommodate the certificates to install.

"
      end

      attribute 15614263 "revoke_certificates"
	public explicit_type "/** * Notifies the HAL that a list of certificates used for SUPL connections are revoked. It is * expected that the given set of certificates is removed from the internal store of the HAL. * * Parameters: * fingerprints - A pointer to an array of SHA1 Fingerprints to identify the set of * certificates to revoke. * length - The number of fingerprints provided. * Returns: * AGPS_CERTIFICATE_OPERATION_SUCCESS if the operation is completed successfully. * * IMPORTANT: * If any of the certificates provided (through its fingerprint) is not known by the HAL, * it should be ignored and continue revoking/deleting the rest of them. */ int (*) ( const Sha1CertificateFingerprint* fingerprints, size_t length )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Notifies the HAL that a list of certificates used for SUPL connections are revoked. It is
     * expected that the given set of certificates is removed from the internal store of the HAL.
     *
     * Parameters:
     *      fingerprints - A pointer to an array of SHA1 Fingerprints to identify the set of
     *                     certificates to revoke.
     *      length - The number of fingerprints provided.
     * Returns:
     *      AGPS_CERTIFICATE_OPERATION_SUCCESS if the operation is completed successfully.
     *
     * IMPORTANT:
     *      If any of the certificates provided (through its fingerprint) is not known by the HAL,
     *      it should be ignored and continue revoking/deleting the rest of them.
     */
    int  (*${name}) ( const Sha1CertificateFingerprint* fingerprints, size_t length )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Notifies the HAL that a list of certificates used for SUPL connections are revoked. It is
expected that the given set of certificates is removed from the internal store of the HAL.

Parameters:
     fingerprints - A pointer to an array of SHA1 Fingerprints to identify the set of
                    certificates to revoke.
     length - The number of fingerprints provided.
Returns:
     AGPS_CERTIFICATE_OPERATION_SUCCESS if the operation is completed successfully.

IMPORTANT:
     If any of the certificates provided (through its fingerprint) is not known by the HAL,
     it should be ignored and continue revoking/deleting the rest of them.

"
      end
    end

    class 4376119 "GpsNiNotification"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Represents an NI request "
      attribute 15614391 "notification_id"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "An ID generated by HAL to associate NI notifications and UI
responses

"
      end

      classrelation 8365367 // ni_type (<directional composition>)
	relation 8365367 *-->
	  a role_name "ni_type" public
	    comment "An NI type used to distinguish different categories of NI
events, such as GPS_NI_TYPE_VOICE, GPS_NI_TYPE_UMTS_SUPL, ...

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8365367 // ni_type (<directional composition>)
	  b parent class_ref 4368823 // GpsNiType
      end

      classrelation 8365495 // notify_flags (<directional composition>)
	relation 8365495 *-->
	  a role_name "notify_flags" public
	    comment "Notification/verification options, combinations of GpsNiNotifyFlags constants

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8365495 // notify_flags (<directional composition>)
	  b parent class_ref 4368951 // GpsNiNotifyFlags
      end

      attribute 15614519 "timeout"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Timeout period to wait for user response.
Set to 0 for no time out limit.

"
      end

      classrelation 8365623 // default_response (<directional composition>)
	relation 8365623 *-->
	  a role_name "default_response" public
	    comment "Default response when time out.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8365623 // default_response (<directional composition>)
	  b parent class_ref 4369079 // GpsUserResponseType
      end

      attribute 15614647 "requestor_id"
	public explicit_type "char"
	multiplicity "[GPS_NI_SHORT_STRING_MAXLEN]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Requestor ID

"
      end

      attribute 15614775 "text"
	public explicit_type "char"
	multiplicity "[GPS_NI_LONG_STRING_MAXLEN]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Notification message. It can also be used to store client_id in some cases

"
      end

      classrelation 8365751 // requestor_id_encoding (<directional composition>)
	relation 8365751 *-->
	  a role_name "requestor_id_encoding" public
	    comment "Client name decoding scheme

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8365751 // requestor_id_encoding (<directional composition>)
	  b parent class_ref 4369207 // GpsNiEncodingType
      end

      classrelation 8365879 // text_encoding (<directional composition>)
	relation 8365879 *-->
	  a role_name "text_encoding" public
	    comment "Client name decoding scheme

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8365879 // text_encoding (<directional composition>)
	  b parent class_ref 4369207 // GpsNiEncodingType
      end

      attribute 15614903 "extras"
	public explicit_type "char"
	multiplicity "[GPS_NI_LONG_STRING_MAXLEN]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A pointer to extra data. Format:
key_1 = value_1
key_2 = value_2

"
      end
    end

    class 4376247 "gps_ni_notify_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(GpsNiNotification *notification);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Callback with NI notification. Can only be called from a thread created by
create_thread_cb.
"
    end

    class 4376375 "GpsNiCallbacks"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " GPS NI callback structure. "
      classrelation 8366007 // notify_cb (<directional composition>)
	relation 8366007 *-->
	  a role_name "notify_cb" public
	    comment "Sends the notification request from HAL to GPSLocationProvider.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8366007 // notify_cb (<directional composition>)
	  b parent class_ref 4376247 // gps_ni_notify_callback
      end

      classrelation 8366135 // create_thread_cb (<directional composition>)
	relation 8366135 *-->
	  a role_name "create_thread_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8366135 // create_thread_cb (<directional composition>)
	  b parent class_ref 4374071 // gps_create_thread
      end
    end

    class 4376503 "GpsNiInterface"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Extended interface for Network-initiated (NI) support.
"
      attribute 15615031 "init"
	public explicit_type "/** Registers the callbacks for HAL to use. */ void (*) (GpsNiCallbacks *callbacks)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
   /** Registers the callbacks for HAL to use. */
   void (*${name}) (GpsNiCallbacks *callbacks)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Registers the callbacks for HAL to use. 
"
      end

      attribute 15615159 "respond"
	public explicit_type "/** Sends a response to HAL. */ void (*) (int notif_id, GpsUserResponseType user_response)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
   /** Sends a response to HAL. */
   void (*${name}) (int notif_id, GpsUserResponseType user_response)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Sends a response to HAL. 
"
      end
    end

    class 4376631 "gps_device_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8366391 // common (<directional composition>)
	relation 8366391 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8366391 // common (<directional composition>)
	  b parent class_ref 4305975 // hw_device_t
      end

      attribute 15615287 "get_gps_interface"
	const_attribute public explicit_type "GpsInterface* (*)(struct gps_device_t* dev)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const} GpsInterface* (*${name})(struct gps_device_t* dev)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Set the provided lights to the provided values.

Returns: 0 on succes, error code on failure.

"
      end
    end

    class 4376759 "agps_ril_request_set_id"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(uint32_t flags);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4376887 "agps_ril_request_ref_loc"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(uint32_t flags);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4377015 "AGpsRilCallbacks"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8366519 // request_setid (<directional composition>)
	relation 8366519 *-->
	  a role_name "request_setid" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8366519 // request_setid (<directional composition>)
	  b parent class_ref 4376759 // agps_ril_request_set_id
      end

      classrelation 8366647 // request_refloc (<directional composition>)
	relation 8366647 *-->
	  a role_name "request_refloc" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8366647 // request_refloc (<directional composition>)
	  b parent class_ref 4376887 // agps_ril_request_ref_loc
      end

      classrelation 8366775 // create_thread_cb (<directional composition>)
	relation 8366775 *-->
	  a role_name "create_thread_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8366775 // create_thread_cb (<directional composition>)
	  b parent class_ref 4374071 // gps_create_thread
      end
    end

    class 4377143 "AGpsRilInterface"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Extended interface for AGPS_RIL support. "
      attribute 15615415 "init"
	public explicit_type "/** * Opens the AGPS interface and provides the callback routines * to the implementation of this interface. */ void (*)( AGpsRilCallbacks* callbacks )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    /**
     * Opens the AGPS interface and provides the callback routines
     * to the implementation of this interface.
     */
    void  (*${name})( AGpsRilCallbacks* callbacks )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Opens the AGPS interface and provides the callback routines
to the implementation of this interface.

"
      end

      attribute 15615543 "set_ref_location"
	public explicit_type "/** * Sets the reference location. */ void (*) (const AGpsRefLocation *agps_reflocation, size_t sz_struct)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Sets the reference location.
     */
    void (*${name}) (const AGpsRefLocation *agps_reflocation, size_t sz_struct)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Sets the reference location.

"
      end

      attribute 15615671 "set_set_id"
	public explicit_type "/** * Sets the set ID. */ void (*) (AGpsSetIDType type, const char* setid)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    /**
     * Sets the set ID.
     */
    void (*${name}) (AGpsSetIDType type, const char* setid)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Sets the set ID.

"
      end

      attribute 15615799 "ni_message"
	public explicit_type "/** * Send network initiated message. */ void (*) (uint8_t *msg, size_t len)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Send network initiated message.
     */
    void (*${name}) (uint8_t *msg, size_t len)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Send network initiated message.

"
      end

      attribute 15615927 "update_network_state"
	public explicit_type "/** * Notify GPS of network status changes. * These parameters match values in the android.net.NetworkInfo class. */ void (*) (int connected, int type, int roaming, const char* extra_info)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Notify GPS of network status changes.
     * These parameters match values in the android.net.NetworkInfo class.
     */
    void (*${name}) (int connected, int type, int roaming, const char* extra_info)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Notify GPS of network status changes.
These parameters match values in the android.net.NetworkInfo class.

"
      end

      attribute 15616055 "update_network_availability"
	public explicit_type "/** * Notify GPS of network status changes. * These parameters match values in the android.net.NetworkInfo class. */ void (*) (int avaiable, const char* apn)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Notify GPS of network status changes.
     * These parameters match values in the android.net.NetworkInfo class.
     */
    void (*${name}) (int avaiable, const char* apn)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Notify GPS of network status changes.
These parameters match values in the android.net.NetworkInfo class.

"
      end
    end

    class 4377271 "gps_geofence_transition_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name}) (int32_t geofence_id,  GpsLocation* location,
        int32_t transition, GpsUtcTime timestamp);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The callback associated with the geofence.
Parameters:
     geofence_id - The id associated with the add_geofence_area.
     location    - The current GPS location.
     transition  - Can be one of GPS_GEOFENCE_ENTERED, GPS_GEOFENCE_EXITED,
                   GPS_GEOFENCE_UNCERTAIN.
     timestamp   - Timestamp when the transition was detected.

The callback should only be called when the caller is interested in that
particular transition. For instance, if the caller is interested only in
ENTERED transition, then the callback should NOT be called with the EXITED
transition.

IMPORTANT: If a transition is triggered resulting in this callback, the GPS
subsystem will wake up the application processor, if its in suspend state.
"
    end

    class 4377399 "gps_geofence_status_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name}) (int32_t status, GpsLocation* last_location);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The callback associated with the availability of the GPS system for geofencing
monitoring. If the GPS system determines that it cannot monitor geofences
because of lack of reliability or unavailability of the GPS signals, it will
call this callback with GPS_GEOFENCE_UNAVAILABLE parameter.

Parameters:
 status - GPS_GEOFENCE_UNAVAILABLE or GPS_GEOFENCE_AVAILABLE.
 last_location - Last known location.
"
    end

    class 4377527 "gps_geofence_add_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name}) (int32_t geofence_id, int32_t status);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The callback associated with the add_geofence call.

Parameter:
geofence_id - Id of the geofence.
status - GPS_GEOFENCE_OPERATION_SUCCESS
         GPS_GEOFENCE_ERROR_TOO_MANY_GEOFENCES  - geofence limit has been reached.
         GPS_GEOFENCE_ERROR_ID_EXISTS  - geofence with id already exists
         GPS_GEOFENCE_ERROR_INVALID_TRANSITION - the monitorTransition contains an
             invalid transition
         GPS_GEOFENCE_ERROR_GENERIC - for other errors.
"
    end

    class 4377655 "gps_geofence_remove_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name}) (int32_t geofence_id, int32_t status);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The callback associated with the remove_geofence call.

Parameter:
geofence_id - Id of the geofence.
status - GPS_GEOFENCE_OPERATION_SUCCESS
         GPS_GEOFENCE_ERROR_ID_UNKNOWN - for invalid id
         GPS_GEOFENCE_ERROR_GENERIC for others.
"
    end

    class 4377783 "gps_geofence_pause_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name}) (int32_t geofence_id, int32_t status);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The callback associated with the pause_geofence call.

Parameter:
geofence_id - Id of the geofence.
status - GPS_GEOFENCE_OPERATION_SUCCESS
         GPS_GEOFENCE_ERROR_ID_UNKNOWN - for invalid id
         GPS_GEOFENCE_ERROR_INVALID_TRANSITION -
                   when monitor_transitions is invalid
         GPS_GEOFENCE_ERROR_GENERIC for others.
"
    end

    class 4377911 "gps_geofence_resume_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name}) (int32_t geofence_id, int32_t status);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The callback associated with the resume_geofence call.

Parameter:
geofence_id - Id of the geofence.
status - GPS_GEOFENCE_OPERATION_SUCCESS
         GPS_GEOFENCE_ERROR_ID_UNKNOWN - for invalid id
         GPS_GEOFENCE_ERROR_GENERIC for others.
"
    end

    class 4378039 "GpsGeofenceCallbacks"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8367031 // geofence_transition_callback (<directional composition>)
	relation 8367031 *-->
	  a role_name "geofence_transition_callback" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8367031 // geofence_transition_callback (<directional composition>)
	  b parent class_ref 4377271 // gps_geofence_transition_callback
      end

      classrelation 8367159 // geofence_status_callback (<directional composition>)
	relation 8367159 *-->
	  a role_name "geofence_status_callback" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8367159 // geofence_status_callback (<directional composition>)
	  b parent class_ref 4377399 // gps_geofence_status_callback
      end

      classrelation 8367287 // geofence_add_callback (<directional composition>)
	relation 8367287 *-->
	  a role_name "geofence_add_callback" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8367287 // geofence_add_callback (<directional composition>)
	  b parent class_ref 4377527 // gps_geofence_add_callback
      end

      classrelation 8367415 // geofence_remove_callback (<directional composition>)
	relation 8367415 *-->
	  a role_name "geofence_remove_callback" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8367415 // geofence_remove_callback (<directional composition>)
	  b parent class_ref 4377655 // gps_geofence_remove_callback
      end

      classrelation 8367543 // geofence_pause_callback (<directional composition>)
	relation 8367543 *-->
	  a role_name "geofence_pause_callback" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8367543 // geofence_pause_callback (<directional composition>)
	  b parent class_ref 4377783 // gps_geofence_pause_callback
      end

      classrelation 8367671 // geofence_resume_callback (<directional composition>)
	relation 8367671 *-->
	  a role_name "geofence_resume_callback" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8367671 // geofence_resume_callback (<directional composition>)
	  b parent class_ref 4377911 // gps_geofence_resume_callback
      end

      classrelation 8367799 // create_thread_cb (<directional composition>)
	relation 8367799 *-->
	  a role_name "create_thread_cb" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8367799 // create_thread_cb (<directional composition>)
	  b parent class_ref 4374071 // gps_create_thread
      end
    end

    class 4378167 "GpsGeofencingInterface"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Extended interface for GPS_Geofencing support "
      attribute 15616183 "init"
	public explicit_type "/** * Opens the geofence interface and provides the callback routines * to the implementation of this interface. */ void (*)( GpsGeofenceCallbacks* callbacks )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
   /**
    * Opens the geofence interface and provides the callback routines
    * to the implementation of this interface.
    */
   void  (*${name})( GpsGeofenceCallbacks* callbacks )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Opens the geofence interface and provides the callback routines
to the implementation of this interface.

"
      end

      attribute 15616311 "add_geofence_area"
	public explicit_type "/** * Add a geofence area. This api currently supports circular geofences. * Parameters: * geofence_id - The id for the geofence. If a geofence with this id * already exists, an error value (GPS_GEOFENCE_ERROR_ID_EXISTS) * should be returned. * latitude, longtitude, radius_meters - The lat, long and radius * (in meters) for the geofence * last_transition - The current state of the geofence. For example, if * the system already knows that the user is inside the geofence, * this will be set to GPS_GEOFENCE_ENTERED. In most cases, it * will be GPS_GEOFENCE_UNCERTAIN. * monitor_transition - Which transitions to monitor. Bitwise OR of * GPS_GEOFENCE_ENTERED, GPS_GEOFENCE_EXITED and * GPS_GEOFENCE_UNCERTAIN. * notification_responsiveness_ms - Defines the best-effort description * of how soon should the callback be called when the transition * associated with the Geofence is triggered. For instance, if set * to 1000 millseconds with GPS_GEOFENCE_ENTERED, the callback * should be called 1000 milliseconds within entering the geofence. * This parameter is defined in milliseconds. * NOTE: This is not to be confused with the rate that the GPS is * polled at. It is acceptable to dynamically vary the rate of * sampling the GPS for power-saving reasons; thus the rate of * sampling may be faster or slower than this. * unknown_timer_ms - The time limit after which the UNCERTAIN transition * should be triggered. This parameter is defined in milliseconds. * See above for a detailed explanation. */ void (*) (int32_t geofence_id, double latitude, double longitude, double radius_meters, int last_transition, int monitor_transitions, int notification_responsiveness_ms, int unknown_timer_ms)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
   /**
    * Add a geofence area. This api currently supports circular geofences.
    * Parameters:
    *    geofence_id - The id for the geofence. If a geofence with this id
    *       already exists, an error value (GPS_GEOFENCE_ERROR_ID_EXISTS)
    *       should be returned.
    *    latitude, longtitude, radius_meters - The lat, long and radius
    *       (in meters) for the geofence
    *    last_transition - The current state of the geofence. For example, if
    *       the system already knows that the user is inside the geofence,
    *       this will be set to GPS_GEOFENCE_ENTERED. In most cases, it
    *       will be GPS_GEOFENCE_UNCERTAIN.
    *    monitor_transition - Which transitions to monitor. Bitwise OR of
    *       GPS_GEOFENCE_ENTERED, GPS_GEOFENCE_EXITED and
    *       GPS_GEOFENCE_UNCERTAIN.
    *    notification_responsiveness_ms - Defines the best-effort description
    *       of how soon should the callback be called when the transition
    *       associated with the Geofence is triggered. For instance, if set
    *       to 1000 millseconds with GPS_GEOFENCE_ENTERED, the callback
    *       should be called 1000 milliseconds within entering the geofence.
    *       This parameter is defined in milliseconds.
    *       NOTE: This is not to be confused with the rate that the GPS is
    *       polled at. It is acceptable to dynamically vary the rate of
    *       sampling the GPS for power-saving reasons; thus the rate of
    *       sampling may be faster or slower than this.
    *    unknown_timer_ms - The time limit after which the UNCERTAIN transition
    *       should be triggered. This parameter is defined in milliseconds.
    *       See above for a detailed explanation.
    */
   void (*${name}) (int32_t geofence_id, double latitude, double longitude,
       double radius_meters, int last_transition, int monitor_transitions,
       int notification_responsiveness_ms, int unknown_timer_ms)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Add a geofence area. This api currently supports circular geofences.
Parameters:
   geofence_id - The id for the geofence. If a geofence with this id
      already exists, an error value (GPS_GEOFENCE_ERROR_ID_EXISTS)
      should be returned.
   latitude, longtitude, radius_meters - The lat, long and radius
      (in meters) for the geofence
   last_transition - The current state of the geofence. For example, if
      the system already knows that the user is inside the geofence,
      this will be set to GPS_GEOFENCE_ENTERED. In most cases, it
      will be GPS_GEOFENCE_UNCERTAIN.
   monitor_transition - Which transitions to monitor. Bitwise OR of
      GPS_GEOFENCE_ENTERED, GPS_GEOFENCE_EXITED and
      GPS_GEOFENCE_UNCERTAIN.
   notification_responsiveness_ms - Defines the best-effort description
      of how soon should the callback be called when the transition
      associated with the Geofence is triggered. For instance, if set
      to 1000 millseconds with GPS_GEOFENCE_ENTERED, the callback
      should be called 1000 milliseconds within entering the geofence.
      This parameter is defined in milliseconds.
      NOTE: This is not to be confused with the rate that the GPS is
      polled at. It is acceptable to dynamically vary the rate of
      sampling the GPS for power-saving reasons; thus the rate of
      sampling may be faster or slower than this.
   unknown_timer_ms - The time limit after which the UNCERTAIN transition
      should be triggered. This parameter is defined in milliseconds.
      See above for a detailed explanation.

"
      end

      attribute 15616439 "pause_geofence"
	public explicit_type "/** * Pause monitoring a particular geofence. * Parameters: * geofence_id - The id for the geofence. */ void (*) (int32_t geofence_id)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
   /**
    * Pause monitoring a particular geofence.
    * Parameters:
    *   geofence_id - The id for the geofence.
    */
   void (*${name}) (int32_t geofence_id)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Pause monitoring a particular geofence.
Parameters:
  geofence_id - The id for the geofence.

"
      end

      attribute 15616567 "resume_geofence"
	public explicit_type "/** * Resume monitoring a particular geofence. * Parameters: * geofence_id - The id for the geofence. * monitor_transitions - Which transitions to monitor. Bitwise OR of * GPS_GEOFENCE_ENTERED, GPS_GEOFENCE_EXITED and * GPS_GEOFENCE_UNCERTAIN. * This supersedes the value associated provided in the * add_geofence_area call. */ void (*) (int32_t geofence_id, int monitor_transitions)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
   /**
    * Resume monitoring a particular geofence.
    * Parameters:
    *   geofence_id - The id for the geofence.
    *   monitor_transitions - Which transitions to monitor. Bitwise OR of
    *       GPS_GEOFENCE_ENTERED, GPS_GEOFENCE_EXITED and
    *       GPS_GEOFENCE_UNCERTAIN.
    *       This supersedes the value associated provided in the
    *       add_geofence_area call.
    */
   void (*${name}) (int32_t geofence_id, int monitor_transitions)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Resume monitoring a particular geofence.
Parameters:
  geofence_id - The id for the geofence.
  monitor_transitions - Which transitions to monitor. Bitwise OR of
      GPS_GEOFENCE_ENTERED, GPS_GEOFENCE_EXITED and
      GPS_GEOFENCE_UNCERTAIN.
      This supersedes the value associated provided in the
      add_geofence_area call.

"
      end

      attribute 15616695 "remove_geofence_area"
	public explicit_type "/** * Remove a geofence area. After the function returns, no notifications * should be sent. * Parameter: * geofence_id - The id for the geofence. */ void (*) (int32_t geofence_id)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
   /**
    * Remove a geofence area. After the function returns, no notifications
    * should be sent.
    * Parameter:
    *   geofence_id - The id for the geofence.
    */
   void (*${name}) (int32_t geofence_id)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Remove a geofence area. After the function returns, no notifications
should be sent.
Parameter:
  geofence_id - The id for the geofence.

"
      end
    end

    class 4378295 "GpsClock"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Legacy struct to represent an estimate of the GPS clock time.
Deprecated, to be removed in the next Android release.
Use GnssClock instead.
"
      classrelation 8368183 // flags (<directional composition>)
	relation 8368183 *-->
	  a role_name "flags" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8368183 // flags (<directional composition>)
	  b parent class_ref 4369591 // GpsClockFlags
      end

      classrelation 8368439 // type (<directional composition>)
	relation 8368439 *-->
	  a role_name "type" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8368439 // type (<directional composition>)
	  b parent class_ref 4369847 // GpsClockType
      end

      attribute 15616823 "time_uncertainty_ns"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15616951 "bias_ns"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15617079 "bias_uncertainty_ns"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15617207 "drift_nsps"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15617335 "drift_uncertainty_nsps"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4378423 "GnssClock"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents an estimate of the GPS clock time.
"
      classrelation 8368951 // flags (<directional composition>)
	relation 8368951 *-->
	  a role_name "flags" public
	    comment "A set of flags indicating the validity of the fields in this data
structure.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8368951 // flags (<directional composition>)
	  b parent class_ref 4369719 // GnssClockFlags
      end

      attribute 15617463 "time_uncertainty_ns"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "1-Sigma uncertainty associated with the clock's time in nanoseconds.
The uncertainty is represented as an absolute (single sided) value.

If the data is available, 'flags' must contain
GNSS_CLOCK_HAS_TIME_UNCERTAINTY. This value is effectively zero (it is
the reference local clock, by which all other times and time
uncertainties are measured.)  (And thus this field can be not provided,
per GNSS_CLOCK_HAS_TIME_UNCERTAINTY flag, or provided & set to 0.)

"
      end

      attribute 15617591 "bias_ns"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Sub-nanosecond bias.
The error estimate for the sum of this and the full_bias_ns is the
bias_uncertainty_ns

If the data is available 'flags' must contain GNSS_CLOCK_HAS_BIAS. If GPS
has computed a position fix. This value is mandatory if the receiver has
estimated GPS time.

"
      end

      attribute 15617719 "bias_uncertainty_ns"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "1-Sigma uncertainty associated with the local estimate of GPS time (clock
bias) in nanoseconds. The uncertainty is represented as an absolute
(single sided) value.

If the data is available 'flags' must contain
GNSS_CLOCK_HAS_BIAS_UNCERTAINTY. This value is mandatory if the receiver
has estimated GPS time.

"
      end

      attribute 15617847 "drift_nsps"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The clock's drift in nanoseconds (per second).

A positive value means that the frequency is higher than the nominal
frequency, and that the (full_bias_ns + bias_ns) is growing more positive
over time.

The value contains the 'drift uncertainty' in it.
If the data is available 'flags' must contain GNSS_CLOCK_HAS_DRIFT.

This value is mandatory if the receiver has estimated GNSS time

"
      end

      attribute 15617975 "drift_uncertainty_nsps"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "1-Sigma uncertainty associated with the clock's drift in nanoseconds (per second).
The uncertainty is represented as an absolute (single sided) value.

If the data is available 'flags' must contain
GNSS_CLOCK_HAS_DRIFT_UNCERTAINTY. If GPS has computed a position fix this
field is mandatory and must be populated.

"
      end

    end

    class 4378551 "GpsMeasurement"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Legacy struct to represent a GPS Measurement, it contains raw and computed
information.
Deprecated, to be removed in the next Android release.
Use GnssMeasurement instead.
"
      classrelation 8369719 // flags (<directional composition>)
	relation 8369719 *-->
	  a role_name "flags" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8369719 // flags (<directional composition>)
	  b parent class_ref 4369975 // GpsMeasurementFlags
      end

      attribute 15618103 "time_offset_ns"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 8369975 // state (<directional composition>)
	relation 8369975 *-->
	  a role_name "state" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8369975 // state (<directional composition>)
	  b parent class_ref 4370615 // GpsMeasurementState
      end

      attribute 15618231 "c_n0_dbhz"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15618359 "pseudorange_rate_mps"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15618487 "pseudorange_rate_uncertainty_mps"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 8370359 // accumulated_delta_range_state (<directional composition>)
	relation 8370359 *-->
	  a role_name "accumulated_delta_range_state" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8370359 // accumulated_delta_range_state (<directional composition>)
	  b parent class_ref 4370871 // GpsAccumulatedDeltaRangeState
      end

      attribute 15618615 "accumulated_delta_range_m"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15618743 "accumulated_delta_range_uncertainty_m"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15618871 "pseudorange_m"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15618999 "pseudorange_uncertainty_m"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15619127 "code_phase_chips"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15619255 "code_phase_uncertainty_chips"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15619383 "carrier_frequency_hz"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15619511 "carrier_phase"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15619639 "carrier_phase_uncertainty"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 8370615 // loss_of_lock (<directional composition>)
	relation 8370615 *-->
	  a role_name "loss_of_lock" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8370615 // loss_of_lock (<directional composition>)
	  b parent class_ref 4370231 // GpsLossOfLock
      end

      attribute 15619767 "doppler_shift_hz"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15619895 "doppler_shift_uncertainty_hz"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 8370999 // multipath_indicator (<directional composition>)
	relation 8370999 *-->
	  a role_name "multipath_indicator" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8370999 // multipath_indicator (<directional composition>)
	  b parent class_ref 4370359 // GpsMultipathIndicator
      end

      attribute 15620023 "snr_db"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15620151 "elevation_deg"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15620279 "elevation_uncertainty_deg"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15620407 "azimuth_deg"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15620535 "azimuth_uncertainty_deg"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15620663 "used_in_fix"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4378679 "GnssMeasurement"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a GNSS Measurement, it contains raw and computed information.

Independence - All signal measurement information (e.g. sv_time,
pseudorange_rate, multipath_indicator) reported in this struct should be
based on GNSS signal measurements only. You may not synthesize measurements
by calculating or reporting expected measurements based on known or estimated
position, velocity, or time.
"
      classrelation 8371255 // flags (<directional composition>)
	relation 8371255 *-->
	  a role_name "flags" public
	    comment " A set of flags indicating the validity of the fields in this data structure. 
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8371255 // flags (<directional composition>)
	  b parent class_ref 4370103 // GnssMeasurementFlags
      end

      classrelation 8371511 // constellation (<directional composition>)
	relation 8371511 *-->
	  a role_name "constellation" public
	    comment "Defines the constellation of the given SV. Value should be one of those
GNSS_CONSTELLATION_* constants

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8371511 // constellation (<directional composition>)
	  b parent class_ref 4371639 // GnssConstellationType
      end

      attribute 15620791 "time_offset_ns"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Time offset at which the measurement was taken in nanoseconds.
The reference receiver's time is specified by GpsData::clock::time_ns and should be
interpreted in the same way as indicated by GpsClock::type.

The sign of time_offset_ns is given by the following equation:
     measurement time = GpsClock::time_ns + time_offset_ns

It provides an individual time-stamp for the measurement, and allows sub-nanosecond accuracy.
This is a mandatory value.

"
      end

      classrelation 8371639 // state (<directional composition>)
	relation 8371639 *-->
	  a role_name "state" public
	    comment "Per satellite sync state. It represents the current sync state for the associated satellite.
Based on the sync state, the 'received GPS tow' field should be interpreted accordingly.

This is a mandatory value.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8371639 // state (<directional composition>)
	  b parent class_ref 4370743 // GnssMeasurementState
      end

      attribute 15620919 "c_n0_dbhz"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Carrier-to-noise density in dB-Hz, typically in the range [0, 63].
It contains the measured C/N0 value for the signal at the antenna port.

This is a mandatory value.

"
      end

      attribute 15621047 "pseudorange_rate_mps"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Pseudorange rate at the timestamp in m/s. The correction of a given
Pseudorange Rate value includes corrections for receiver and satellite
clock frequency errors. Ensure that this field is independent (see
comment at top of GnssMeasurement struct.)

It is mandatory to provide the 'uncorrected' 'pseudorange rate', and provide GpsClock's
'drift' field as well (When providing the uncorrected pseudorange rate, do not apply the
corrections described above.)

The value includes the 'pseudorange rate uncertainty' in it.
A positive 'uncorrected' value indicates that the SV is moving away from the receiver.

The sign of the 'uncorrected' 'pseudorange rate' and its relation to the sign of 'doppler
shift' is given by the equation:
     pseudorange rate = -k * doppler shift   (where k is a constant)

This should be the most accurate pseudorange rate available, based on
fresh signal measurements from this channel.

It is mandatory that this value be provided at typical carrier phase PRR
quality (few cm/sec per second of uncertainty, or better) - when signals
are sufficiently strong & stable, e.g. signals from a GPS simulator at >=
35 dB-Hz.

"
      end

      attribute 15621175 "pseudorange_rate_uncertainty_mps"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "1-Sigma uncertainty of the pseudorange_rate_mps.
The uncertainty is represented as an absolute (single sided) value.

This is a mandatory value.

"
      end

      classrelation 8372023 // accumulated_delta_range_state (<directional composition>)
	relation 8372023 *-->
	  a role_name "accumulated_delta_range_state" public
	    comment "Accumulated delta range's state. It indicates whether ADR is reset or there is a cycle slip
(indicating loss of lock).

This is a mandatory value.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8372023 // accumulated_delta_range_state (<directional composition>)
	  b parent class_ref 4370999 // GnssAccumulatedDeltaRangeState
      end

      attribute 15621303 "accumulated_delta_range_m"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Accumulated delta range since the last channel reset in meters.
A positive value indicates that the SV is moving away from the receiver.

The sign of the 'accumulated delta range' and its relation to the sign of 'carrier phase'
is given by the equation:
         accumulated delta range = -k * carrier phase    (where k is a constant)

This value must be populated if 'accumulated delta range state' != GPS_ADR_STATE_UNKNOWN.
However, it is expected that the data is only accurate when:
     'accumulated delta range state' == GPS_ADR_STATE_VALID.

"
      end

      attribute 15621431 "accumulated_delta_range_uncertainty_m"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "1-Sigma uncertainty of the accumulated delta range in meters.
This value must be populated if 'accumulated delta range state' != GPS_ADR_STATE_UNKNOWN.

"
      end

      attribute 15621559 "carrier_frequency_hz"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Carrier frequency at which codes and messages are modulated, it can be L1 or L2.
If the field is not set, the carrier frequency is assumed to be L1.

If the data is available, 'flags' must contain
GNSS_MEASUREMENT_HAS_CARRIER_FREQUENCY.

"
      end

      attribute 15621687 "carrier_phase"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The RF phase detected by the receiver, in the range [0.0, 1.0].
This is usually the fractional part of the complete carrier phase measurement.

The reference frequency is given by the field 'carrier_frequency_hz'.
The value contains the 'carrier-phase uncertainty' in it.

If the data is available, 'flags' must contain
GNSS_MEASUREMENT_HAS_CARRIER_PHASE.

"
      end

      attribute 15621815 "carrier_phase_uncertainty"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "1-Sigma uncertainty of the carrier-phase.
If the data is available, 'flags' must contain
GNSS_MEASUREMENT_HAS_CARRIER_PHASE_UNCERTAINTY.

"
      end

      classrelation 8372279 // multipath_indicator (<directional composition>)
	relation 8372279 *-->
	  a role_name "multipath_indicator" public
	    comment "An enumeration that indicates the 'multipath' state of the event.

The multipath Indicator is intended to report the presence of overlapping
signals that manifest as distorted correlation peaks.

- if there is a distorted correlation peak shape, report that multipath
  is GNSS_MULTIPATH_INDICATOR_PRESENT.
- if there is not a distorted correlation peak shape, report
  GNSS_MULTIPATH_INDICATOR_NOT_PRESENT
- if signals are too weak to discern this information, report
  GNSS_MULTIPATH_INDICATOR_UNKNOWN

Example: when doing the standardized overlapping Multipath Performance
test (3GPP TS 34.171) the Multipath indicator should report
GNSS_MULTIPATH_INDICATOR_PRESENT for those signals that are tracked, and
contain multipath, and GNSS_MULTIPATH_INDICATOR_NOT_PRESENT for those
signals that are tracked and do not contain multipath.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8372279 // multipath_indicator (<directional composition>)
	  b parent class_ref 4370487 // GnssMultipathIndicator
      end

      attribute 15621943 "snr_db"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Signal-to-noise ratio at correlator output in dB.
If the data is available, 'flags' must contain GNSS_MEASUREMENT_HAS_SNR.
This is the power ratio of the \"correlation peak height above the
observed noise floor\" to \"the noise RMS\".

"
      end
    end

    class 4378807 "GpsData"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Legacy struct to represents a reading of GPS measurements.
Deprecated, to be removed in the next Android release.
Use GnssData instead.
"
      classrelation 8372663 // measurements (<directional composition>)
	relation 8372663 *-->
	  a role_name "measurements" multiplicity "[GPS_MAX_MEASUREMENT]" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8372663 // measurements (<directional composition>)
	  b parent class_ref 4378551 // GpsMeasurement
      end

      classrelation 8372791 // clock (<directional composition>)
	relation 8372791 *-->
	  a role_name "clock" public
	    comment " The GPS clock time reading. 
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8372791 // clock (<directional composition>)
	  b parent class_ref 4378295 // GpsClock
      end
    end

    class 4378935 "GnssData"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a reading of GNSS measurements. For devices where GnssSystemInfo's
year_of_hw is set to 2016+, it is mandatory that these be provided, on
request, when the GNSS receiver is searching/tracking signals.

- Reporting of GPS constellation measurements is mandatory.
- Reporting of all tracked constellations are encouraged.
"
      classrelation 8373175 // measurements (<directional composition>)
	relation 8373175 *-->
	  a role_name "measurements" multiplicity "[GNSS_MAX_MEASUREMENT]" public
	    comment " The array of measurements. 
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8373175 // measurements (<directional composition>)
	  b parent class_ref 4378679 // GnssMeasurement
      end

      classrelation 8373303 // clock (<directional composition>)
	relation 8373303 *-->
	  a role_name "clock" public
	    comment " The GPS clock time reading. 
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8373303 // clock (<directional composition>)
	  b parent class_ref 4378423 // GnssClock
      end
    end

    class 4379063 "gps_measurement_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name}) (GpsData* data);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The legacy callback for to report measurements from the HAL.

This callback is deprecated, and will be removed in the next release. Use
gnss_measurement_callback() instead.

Parameters:
   data - A data structure containing the measurements.
"
    end

    class 4379191 "gnss_measurement_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name}) (GnssData* data);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The callback for to report measurements from the HAL.

Parameters:
   data - A data structure containing the measurements.
"
    end

    class 4379319 "GpsMeasurementCallbacks"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8373559 // measurement_callback (<directional composition>)
	relation 8373559 *-->
	  a role_name "measurement_callback" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8373559 // measurement_callback (<directional composition>)
	  b parent class_ref 4379063 // gps_measurement_callback
      end

      classrelation 8373687 // gnss_measurement_callback (<directional composition>)
	relation 8373687 *-->
	  a role_name "gnss_measurement_callback" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8373687 // gnss_measurement_callback (<directional composition>)
	  b parent class_ref 4379191 // gnss_measurement_callback
      end
    end

    class 4379447 "GpsMeasurementInterface"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Extended interface for GPS Measurements support.
"
      attribute 15622071 "init"
	public explicit_type "/** * Initializes the interface and registers the callback routines with the HAL. * After a successful call to 'init' the HAL must begin to provide updates at its own phase. * * Status: * GPS_MEASUREMENT_OPERATION_SUCCESS * GPS_MEASUREMENT_ERROR_ALREADY_INIT - if a callback has already been registered without a * corresponding call to 'close' * GPS_MEASUREMENT_ERROR_GENERIC - if any other error occurred, it is expected that the HAL * will not generate any updates upon returning this error code. */ int (*) (GpsMeasurementCallbacks* callbacks)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Initializes the interface and registers the callback routines with the HAL.
     * After a successful call to 'init' the HAL must begin to provide updates at its own phase.
     *
     * Status:
     *    GPS_MEASUREMENT_OPERATION_SUCCESS
     *    GPS_MEASUREMENT_ERROR_ALREADY_INIT - if a callback has already been registered without a
     *              corresponding call to 'close'
     *    GPS_MEASUREMENT_ERROR_GENERIC - if any other error occurred, it is expected that the HAL
     *              will not generate any updates upon returning this error code.
     */
    int (*${name}) (GpsMeasurementCallbacks* callbacks)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Initializes the interface and registers the callback routines with the HAL.
After a successful call to 'init' the HAL must begin to provide updates at its own phase.

Status:
   GPS_MEASUREMENT_OPERATION_SUCCESS
   GPS_MEASUREMENT_ERROR_ALREADY_INIT - if a callback has already been registered without a
             corresponding call to 'close'
   GPS_MEASUREMENT_ERROR_GENERIC - if any other error occurred, it is expected that the HAL
             will not generate any updates upon returning this error code.

"
      end

      attribute 15622199 "close"
	public explicit_type "/** * Stops updates from the HAL, and unregisters the callback routines. * After a call to stop, the previously registered callbacks must be considered invalid by the * HAL. * If stop is invoked without a previous 'init', this function should perform no work. */ void (*) ()"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Stops updates from the HAL, and unregisters the callback routines.
     * After a call to stop, the previously registered callbacks must be considered invalid by the
     * HAL.
     * If stop is invoked without a previous 'init', this function should perform no work.
     */
    void (*${name}) ()${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Stops updates from the HAL, and unregisters the callback routines.
After a call to stop, the previously registered callbacks must be considered invalid by the
HAL.
If stop is invoked without a previous 'init', this function should perform no work.

"
      end
    end

    class 4379575 "GpsNavigationMessage"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Legacy struct to represents a GPS navigation message (or a fragment of it).
Deprecated, to be removed in the next Android release.
Use GnssNavigationMessage instead.
"
      classrelation 8374199 // type (<directional composition>)
	relation 8374199 *-->
	  a role_name "type" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8374199 // type (<directional composition>)
	  b parent class_ref 4371127 // GpsNavigationMessageType
      end

      classrelation 8374327 // status (<directional composition>)
	relation 8374327 *-->
	  a role_name "status" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8374327 // status (<directional composition>)
	  b parent class_ref 4371383 // NavigationMessageStatus
      end

    end

    class 4379703 "GnssNavigationMessage"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Represents a GPS navigation message (or a fragment of it). "
      classrelation 8375223 // type (<directional composition>)
	relation 8375223 *-->
	  a role_name "type" public
	    comment "The type of message contained in the structure.
This is a mandatory value.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8375223 // type (<directional composition>)
	  b parent class_ref 4371255 // GnssNavigationMessageType
      end

      classrelation 8375351 // status (<directional composition>)
	relation 8375351 *-->
	  a role_name "status" public
	    comment "The status of the received navigation message.
No need to send any navigation message that contains words with parity error and cannot be
corrected.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8375351 // status (<directional composition>)
	  b parent class_ref 4371383 // NavigationMessageStatus
      end

    end

    class 4379831 "gps_navigation_message_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name}) (GpsNavigationMessage* message);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The legacy callback to report an available fragment of a GPS navigation
messages from the HAL.

This callback is deprecated, and will be removed in the next release. Use
gnss_navigation_message_callback() instead.

Parameters:
     message - The GPS navigation submessage/subframe representation.
"
    end

    class 4379959 "gnss_navigation_message_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name}) (GnssNavigationMessage* message);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The callback to report an available fragment of a GPS navigation messages from the HAL.

Parameters:
     message - The GPS navigation submessage/subframe representation.
"
    end

    class 4380087 "GpsNavigationMessageCallbacks"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8376119 // navigation_message_callback (<directional composition>)
	relation 8376119 *-->
	  a role_name "navigation_message_callback" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8376119 // navigation_message_callback (<directional composition>)
	  b parent class_ref 4379831 // gps_navigation_message_callback
      end

      classrelation 8376247 // gnss_navigation_message_callback (<directional composition>)
	relation 8376247 *-->
	  a role_name "gnss_navigation_message_callback" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8376247 // gnss_navigation_message_callback (<directional composition>)
	  b parent class_ref 4379959 // gnss_navigation_message_callback
      end
    end

    class 4380215 "GpsNavigationMessageInterface"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Extended interface for GPS navigation message reporting support.
"
      attribute 15622327 "init"
	public explicit_type "/** * Initializes the interface and registers the callback routines with the HAL. * After a successful call to 'init' the HAL must begin to provide updates as they become * available. * * Status: * GPS_NAVIGATION_MESSAGE_OPERATION_SUCCESS * GPS_NAVIGATION_MESSAGE_ERROR_ALREADY_INIT - if a callback has already been registered * without a corresponding call to 'close'. * GPS_NAVIGATION_MESSAGE_ERROR_GENERIC - if any other error occurred, it is expected that * the HAL will not generate any updates upon returning this error code. */ int (*) (GpsNavigationMessageCallbacks* callbacks)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Initializes the interface and registers the callback routines with the HAL.
     * After a successful call to 'init' the HAL must begin to provide updates as they become
     * available.
     *
     * Status:
     *      GPS_NAVIGATION_MESSAGE_OPERATION_SUCCESS
     *      GPS_NAVIGATION_MESSAGE_ERROR_ALREADY_INIT - if a callback has already been registered
     *              without a corresponding call to 'close'.
     *      GPS_NAVIGATION_MESSAGE_ERROR_GENERIC - if any other error occurred, it is expected that
     *              the HAL will not generate any updates upon returning this error code.
     */
    int (*${name}) (GpsNavigationMessageCallbacks* callbacks)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Initializes the interface and registers the callback routines with the HAL.
After a successful call to 'init' the HAL must begin to provide updates as they become
available.

Status:
     GPS_NAVIGATION_MESSAGE_OPERATION_SUCCESS
     GPS_NAVIGATION_MESSAGE_ERROR_ALREADY_INIT - if a callback has already been registered
             without a corresponding call to 'close'.
     GPS_NAVIGATION_MESSAGE_ERROR_GENERIC - if any other error occurred, it is expected that
             the HAL will not generate any updates upon returning this error code.

"
      end

      attribute 15622455 "close"
	public explicit_type "/** * Stops updates from the HAL, and unregisters the callback routines. * After a call to stop, the previously registered callbacks must be considered invalid by the * HAL. * If stop is invoked without a previous 'init', this function should perform no work. */ void (*) ()"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Stops updates from the HAL, and unregisters the callback routines.
     * After a call to stop, the previously registered callbacks must be considered invalid by the
     * HAL.
     * If stop is invoked without a previous 'init', this function should perform no work.
     */
    void (*${name}) ()${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Stops updates from the HAL, and unregisters the callback routines.
After a call to stop, the previously registered callbacks must be considered invalid by the
HAL.
If stop is invoked without a previous 'init', this function should perform no work.

"
      end
    end

    class 4380343 "GnssConfigurationInterface"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Interface for passing GNSS configuration contents from platform to HAL.
"
      attribute 15622583 "configuration_update"
	public explicit_type "/** * Deliver GNSS configuration contents to HAL. * Parameters: * config_data - a pointer to a char array which holds what usually is expected from file(/etc/gps.conf), i.e., a sequence of UTF8 strings separated by '\\n'. * length - total number of UTF8 characters in configuraiton data. * * IMPORTANT: * GPS HAL should expect this function can be called multiple times. And it may be * called even when GpsLocationProvider is already constructed and enabled. GPS HAL * should maintain the existing requests for various callback regardless the change * in configuration data. */ void (*) (const char* config_data, int32_t length)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Deliver GNSS configuration contents to HAL.
     * Parameters:
     *     config_data - a pointer to a char array which holds what usually is expected from
                         file(/etc/gps.conf), i.e., a sequence of UTF8 strings separated by '\\n'.
     *     length - total number of UTF8 characters in configuraiton data.
     *
     * IMPORTANT:
     *      GPS HAL should expect this function can be called multiple times. And it may be
     *      called even when GpsLocationProvider is already constructed and enabled. GPS HAL
     *      should maintain the existing requests for various callback regardless the change
     *      in configuration data.
     */
    void (*${name}) (const char* config_data, int32_t length)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Deliver GNSS configuration contents to HAL.
Parameters:
    config_data - a pointer to a char array which holds what usually is expected from
file(/etc/gps.conf), i.e., a sequence of UTF8 strings separated by '\\n'.
    length - total number of UTF8 characters in configuraiton data.

IMPORTANT:
     GPS HAL should expect this function can be called multiple times. And it may be
     called even when GpsLocationProvider is already constructed and enabled. GPS HAL
     should maintain the existing requests for various callback regardless the change
     in configuration data.

"
      end
    end

    class 4380471 "AGpsStatus_v1"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " We need to keep the alignment of this data structure to 4-bytes, to ensure that in 64-bit
 environments the size of this legacy definition does not collide with _v2. Implementations should
 be using _v2 and _v3, so it's OK to pay the 'unaligned' penalty in 64-bit if an old
 implementation is still in use.

Legacy struct to represent the status of AGPS.
"
      classrelation 8376759 // type (<directional composition>)
	relation 8376759 *-->
	  a role_name "type" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8376759 // type (<directional composition>)
	  b parent class_ref 4368439 // AGpsType
      end

      classrelation 8376887 // status (<directional composition>)
	relation 8376887 *-->
	  a role_name "status" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8376887 // status (<directional composition>)
	  b parent class_ref 4369335 // AGpsStatusValue
      end
    end

    class 4380599 "AGpsStatus_v2"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Legacy struct to represent the status of AGPS augmented with a IPv4 address
field.
"
      classrelation 8377143 // type (<directional composition>)
	relation 8377143 *-->
	  a role_name "type" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8377143 // type (<directional composition>)
	  b parent class_ref 4368439 // AGpsType
      end

      classrelation 8377271 // status (<directional composition>)
	relation 8377271 *-->
	  a role_name "status" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8377271 // status (<directional composition>)
	  b parent class_ref 4369335 // AGpsStatusValue
      end

    end

    class 4380727 "AGpsInterface_v1"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Legacy extended interface for AGPS support.
See AGpsInterface_v2 for more information.
"
      attribute 15622711 "init"
	public explicit_type "void (*)( AGpsCallbacks* callbacks )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    void  (*${name})( AGpsCallbacks* callbacks )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15622839 "data_conn_open"
	public explicit_type "int (*)( const char* apn )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    int  (*${name})( const char* apn )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15622967 "data_conn_closed"
	public explicit_type "int (*)()"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    int  (*${name})()${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15623095 "data_conn_failed"
	public explicit_type "int (*)()"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    int  (*${name})()${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15623223 "set_server"
	public explicit_type "int (*)( AGpsType type, const char* hostname, int port )"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    int  (*${name})( AGpsType type, const char* hostname, int port )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4380855 "hw_module_methods_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15625655 "open"
	public explicit_type "/** Open a specific device */ int (*)(const struct hw_module_t* module, const char* id, struct hw_device_t** device)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Open a specific device */
    int (*${name})(const struct hw_module_t* module, const char* id,
            struct hw_device_t** device)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Open a specific device 
"
      end
    end

    class 4380983 "cec_logical_address"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15625911 "CEC_ADDR_TV"
	public type class_ref 4380983 // cec_logical_address
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15626039 "CEC_ADDR_RECORDER_1"
	public type class_ref 4380983 // cec_logical_address
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15626167 "CEC_ADDR_RECORDER_2"
	public type class_ref 4380983 // cec_logical_address
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15626295 "CEC_ADDR_TUNER_1"
	public type class_ref 4380983 // cec_logical_address
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15626423 "CEC_ADDR_PLAYBACK_1"
	public type class_ref 4380983 // cec_logical_address
	init_value " 4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15626551 "CEC_ADDR_AUDIO_SYSTEM"
	public type class_ref 4380983 // cec_logical_address
	init_value " 5"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15626679 "CEC_ADDR_TUNER_2"
	public type class_ref 4380983 // cec_logical_address
	init_value " 6"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15626807 "CEC_ADDR_TUNER_3"
	public type class_ref 4380983 // cec_logical_address
	init_value " 7"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15626935 "CEC_ADDR_PLAYBACK_2"
	public type class_ref 4380983 // cec_logical_address
	init_value " 8"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15627063 "CEC_ADDR_RECORDER_3"
	public type class_ref 4380983 // cec_logical_address
	init_value " 9"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15627191 "CEC_ADDR_TUNER_4"
	public type class_ref 4380983 // cec_logical_address
	init_value " 10"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15627319 "CEC_ADDR_PLAYBACK_3"
	public type class_ref 4380983 // cec_logical_address
	init_value " 11"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15627447 "CEC_ADDR_RESERVED_1"
	public type class_ref 4380983 // cec_logical_address
	init_value " 12"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15627575 "CEC_ADDR_RESERVED_2"
	public type class_ref 4380983 // cec_logical_address
	init_value " 13"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15627703 "CEC_ADDR_FREE_USE"
	public type class_ref 4380983 // cec_logical_address
	init_value " 14"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15627831 "CEC_ADDR_UNREGISTERED"
	public type class_ref 4380983 // cec_logical_address
	init_value " 15"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15627959 "CEC_ADDR_BROADCAST"
	public type class_ref 4380983 // cec_logical_address
	init_value " 15
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4381111 "cec_logical_address_t"
      visibility package stereotype "typedef" base_type class_ref 4380983 // cec_logical_address
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4381239 "cec_message_type"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "HDMI CEC messages
"
      attribute 15628087 "CEC_MESSAGE_FEATURE_ABORT"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x00"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15628215 "CEC_MESSAGE_IMAGE_VIEW_ON"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x04"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15628343 "CEC_MESSAGE_TUNER_STEP_INCREMENT"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x05"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15628471 "CEC_MESSAGE_TUNER_STEP_DECREMENT"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x06"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15628599 "CEC_MESSAGE_TUNER_DEVICE_STATUS"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x07"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15628727 "CEC_MESSAGE_GIVE_TUNER_DEVICE_STATUS"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x08"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15628855 "CEC_MESSAGE_RECORD_ON"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x09"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15628983 "CEC_MESSAGE_RECORD_STATUS"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x0A"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15629111 "CEC_MESSAGE_RECORD_OFF"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x0B"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15629239 "CEC_MESSAGE_TEXT_VIEW_ON"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x0D"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15629367 "CEC_MESSAGE_RECORD_TV_SCREEN"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x0F"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15629495 "CEC_MESSAGE_GIVE_DECK_STATUS"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x1A"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15629623 "CEC_MESSAGE_DECK_STATUS"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x1B"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15629751 "CEC_MESSAGE_SET_MENU_LANGUAGE"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x32"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15629879 "CEC_MESSAGE_CLEAR_ANALOG_TIMER"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x33"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15630007 "CEC_MESSAGE_SET_ANALOG_TIMER"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x34"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15630135 "CEC_MESSAGE_TIMER_STATUS"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x35"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15630263 "CEC_MESSAGE_STANDBY"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x36"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15630391 "CEC_MESSAGE_PLAY"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x41"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15630519 "CEC_MESSAGE_DECK_CONTROL"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x42"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15630647 "CEC_MESSAGE_TIMER_CLEARED_STATUS"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x043"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15630775 "CEC_MESSAGE_USER_CONTROL_PRESSED"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x44"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15630903 "CEC_MESSAGE_USER_CONTROL_RELEASED"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x45"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15631031 "CEC_MESSAGE_GIVE_OSD_NAME"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x46"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15631159 "CEC_MESSAGE_SET_OSD_NAME"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x47"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15631287 "CEC_MESSAGE_SET_OSD_STRING"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x64"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15631415 "CEC_MESSAGE_SET_TIMER_PROGRAM_TITLE"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x67"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15631543 "CEC_MESSAGE_SYSTEM_AUDIO_MODE_REQUEST"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x70"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15631671 "CEC_MESSAGE_GIVE_AUDIO_STATUS"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x71"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15631799 "CEC_MESSAGE_SET_SYSTEM_AUDIO_MODE"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x72"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15631927 "CEC_MESSAGE_REPORT_AUDIO_STATUS"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x7A"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15632055 "CEC_MESSAGE_GIVE_SYSTEM_AUDIO_MODE_STATUS"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x7D"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15632183 "CEC_MESSAGE_SYSTEM_AUDIO_MODE_STATUS"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x7E"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15632311 "CEC_MESSAGE_ROUTING_CHANGE"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x80"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15632439 "CEC_MESSAGE_ROUTING_INFORMATION"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x81"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15632567 "CEC_MESSAGE_ACTIVE_SOURCE"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x82"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15632695 "CEC_MESSAGE_GIVE_PHYSICAL_ADDRESS"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x83"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15632823 "CEC_MESSAGE_REPORT_PHYSICAL_ADDRESS"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x84"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15632951 "CEC_MESSAGE_REQUEST_ACTIVE_SOURCE"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x85"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15633079 "CEC_MESSAGE_SET_STREAM_PATH"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x86"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15633207 "CEC_MESSAGE_DEVICE_VENDOR_ID"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x87"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15633335 "CEC_MESSAGE_VENDOR_COMMAND"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x89"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15633463 "CEC_MESSAGE_VENDOR_REMOTE_BUTTON_DOWN"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x8A"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15633591 "CEC_MESSAGE_VENDOR_REMOTE_BUTTON_UP"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x8B"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15633719 "CEC_MESSAGE_GIVE_DEVICE_VENDOR_ID"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x8C"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15633847 "CEC_MESSAGE_MENU_REQUEST"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x8D"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15633975 "CEC_MESSAGE_MENU_STATUS"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x8E"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15634103 "CEC_MESSAGE_GIVE_DEVICE_POWER_STATUS"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x8F"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15634231 "CEC_MESSAGE_REPORT_POWER_STATUS"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x90"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15634359 "CEC_MESSAGE_GET_MENU_LANGUAGE"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x91"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15634487 "CEC_MESSAGE_SELECT_ANALOG_SERVICE"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x92"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15634615 "CEC_MESSAGE_SELECT_DIGITAL_SERVICE"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x93"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15634743 "CEC_MESSAGE_SET_DIGITAL_TIMER"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x97"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15634871 "CEC_MESSAGE_CLEAR_DIGITAL_TIMER"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x99"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15634999 "CEC_MESSAGE_SET_AUDIO_RATE"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x9A"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15635127 "CEC_MESSAGE_INACTIVE_SOURCE"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x9D"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15635255 "CEC_MESSAGE_CEC_VERSION"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x9E"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15635383 "CEC_MESSAGE_GET_CEC_VERSION"
	public type class_ref 4381239 // cec_message_type
	init_value " 0x9F"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15635511 "CEC_MESSAGE_VENDOR_COMMAND_WITH_ID"
	public type class_ref 4381239 // cec_message_type
	init_value " 0xA0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15635639 "CEC_MESSAGE_CLEAR_EXTERNAL_TIMER"
	public type class_ref 4381239 // cec_message_type
	init_value " 0xA1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15635767 "CEC_MESSAGE_SET_EXTERNAL_TIMER"
	public type class_ref 4381239 // cec_message_type
	init_value " 0xA2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15635895 "CEC_MESSAGE_INITIATE_ARC"
	public type class_ref 4381239 // cec_message_type
	init_value " 0xC0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15636023 "CEC_MESSAGE_REPORT_ARC_INITIATED"
	public type class_ref 4381239 // cec_message_type
	init_value " 0xC1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15636151 "CEC_MESSAGE_REPORT_ARC_TERMINATED"
	public type class_ref 4381239 // cec_message_type
	init_value " 0xC2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15636279 "CEC_MESSAGE_REQUEST_ARC_INITIATION"
	public type class_ref 4381239 // cec_message_type
	init_value " 0xC3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15636407 "CEC_MESSAGE_REQUEST_ARC_TERMINATION"
	public type class_ref 4381239 // cec_message_type
	init_value " 0xC4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15636535 "CEC_MESSAGE_TERMINATE_ARC"
	public type class_ref 4381239 // cec_message_type
	init_value " 0xC5"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15636663 "CEC_MESSAGE_ABORT"
	public type class_ref 4381239 // cec_message_type
	init_value " 0xFF
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4381367 "abort_reason"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Operand description [Abort Reason]
"
      attribute 15636791 "ABORT_UNRECOGNIZED_MODE"
	public type class_ref 4381367 // abort_reason
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15636919 "ABORT_NOT_IN_CORRECT_MODE"
	public type class_ref 4381367 // abort_reason
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15637047 "ABORT_CANNOT_PROVIDE_SOURCE"
	public type class_ref 4381367 // abort_reason
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15637175 "ABORT_INVALID_OPERAND"
	public type class_ref 4381367 // abort_reason
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15637303 "ABORT_REFUSED"
	public type class_ref 4381367 // abort_reason
	init_value " 4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15637431 "ABORT_UNABLE_TO_DETERMINE"
	public type class_ref 4381367 // abort_reason
	init_value " 5
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4381495 "anonymous155"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "HDMI event type. used for hdmi_event_t.
"
      attribute 15637559 "HDMI_EVENT_CEC_MESSAGE"
	public type class_ref 4381495 // anonymous155
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15637687 "HDMI_EVENT_HOT_PLUG"
	public type class_ref 4381495 // anonymous155
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4381623 "anonymous156"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "HDMI hotplug event type. Used when the event
type is HDMI_EVENT_HOT_PLUG.
"
      attribute 15637815 "HDMI_NOT_CONNECTED"
	public type class_ref 4381623 // anonymous156
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15637943 "HDMI_CONNECTED"
	public type class_ref 4381623 // anonymous156
	init_value " 1
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4381751 "anonymous157"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "error code used for send_message.
"
      attribute 15638071 "HDMI_RESULT_SUCCESS"
	public type class_ref 4381751 // anonymous157
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15638199 "HDMI_RESULT_NACK"
	public type class_ref 4381751 // anonymous157
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15638327 "HDMI_RESULT_BUSY"
	public type class_ref 4381751 // anonymous157
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15638455 "HDMI_RESULT_FAIL"
	public type class_ref 4381751 // anonymous157
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4381879 "hdmi_port_type"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " not acknowledged 
 bus is busy 

HDMI port type.
"
      attribute 15638583 "HDMI_INPUT"
	public type class_ref 4381879 // hdmi_port_type
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15638711 "HDMI_OUTPUT"
	public type class_ref 4381879 // hdmi_port_type
	init_value " 1
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4382007 "hdmi_port_type_t"
      visibility package stereotype "typedef" base_type class_ref 4381879 // hdmi_port_type
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4382135 "anonymous158"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Flags used for set_option()
"
      attribute 15638839 "HDMI_OPTION_WAKEUP"
	public type class_ref 4382135 // anonymous158
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15638967 "HDMI_OPTION_ENABLE_CEC"
	public type class_ref 4382135 // anonymous158
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15639095 "HDMI_OPTION_SYSTEM_CEC_CONTROL"
	public type class_ref 4382135 // anonymous158
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15639223 "HDMI_OPTION_SET_LANG"
	public type class_ref 4382135 // anonymous158
	init_value " 5"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4382263 "cec_message"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8379319 // initiator (<directional composition>)
	relation 8379319 *-->
	  a role_name "initiator" public
	    comment " logical address of sender 
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8379319 // initiator (<directional composition>)
	  b parent class_ref 4381111 // cec_logical_address_t
      end

      classrelation 8379447 // destination (<directional composition>)
	relation 8379447 *-->
	  a role_name "destination" public
	    comment " logical address of receiver 
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8379447 // destination (<directional composition>)
	  b parent class_ref 4381111 // cec_logical_address_t
      end

      attribute 15639351 "body"
	public explicit_type "byte"
	multiplicity "[CEC_MESSAGE_BODY_MAX_LENGTH]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4382391 "cec_message_t"
      visibility package stereotype "typedef" base_type class_ref 4382263 // cec_message
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4382519 "hotplug_event"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15639479 "connected"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "true if the cable is connected; otherwise false.

"
      end

      attribute 15639607 "port_id"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4382647 "hotplug_event_t"
      visibility package stereotype "typedef" base_type class_ref 4382519 // hotplug_event
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4382775 "tx_status_event"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15639735 "status"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15639863 "opcode"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " CEC opcode "
      end
    end

    class 4382903 "tx_status_event_t"
      visibility package stereotype "typedef" base_type class_ref 4382775 // tx_status_event
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4383031 "hdmi_event"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "HDMI event generated from HAL.
"
      attribute 15639991 "type"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 8379703 // dev (<unidirectional association>)
	relation 8379703 --->
	  a role_name "dev" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8379703 // dev (<unidirectional association>)
	  b parent class_ref 4383159 // hdmi_cec_device
      end

      classrelation 8379831 // cec (<directional composition>)
	relation 8379831 *-->
	  a role_name "cec" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8379831 // cec (<directional composition>)
	  b parent class_ref 4382391 // cec_message_t
      end

      classrelation 8379959 // hotplug (<directional composition>)
	relation 8379959 *-->
	  a role_name "hotplug" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8379959 // hotplug (<directional composition>)
	  b parent class_ref 4382647 // hotplug_event_t
      end
    end

    class 4383159 "hdmi_cec_device"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "HDMI-CEC HAL interface definition.
"
      classrelation 8380471 // common (<directional composition>)
	relation 8380471 *-->
	  a role_name "common" public
	    comment "Common methods of the HDMI CEC device.  This *must* be the first member of
hdmi_cec_device as users of this structure will cast a hw_device_t to hdmi_cec_device
pointer in contexts where it's known the hw_device_t references a hdmi_cec_device.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8380471 // common (<directional composition>)
	  b parent class_ref 4305975 // hw_device_t
      end

      attribute 15640503 "add_logical_address"
	public explicit_type "/* * (*add_logical_address)() passes the logical address that will be used * in this system. * * HAL may use it to configure the hardware so that the CEC commands addressed * the given logical address can be filtered in. This method can be called * as many times as necessary in order to support multiple logical devices. * addr should be in the range of valid logical addresses for the call * to succeed. * * Returns 0 on success or -errno on error. */ int (*)(const struct hdmi_cec_device* dev, cec_logical_address_t addr)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * (*add_logical_address)() passes the logical address that will be used
     * in this system.
     *
     * HAL may use it to configure the hardware so that the CEC commands addressed
     * the given logical address can be filtered in. This method can be called
     * as many times as necessary in order to support multiple logical devices.
     * addr should be in the range of valid logical addresses for the call
     * to succeed.
     *
     * Returns 0 on success or -errno on error.
     */
    int (*${name})(const struct hdmi_cec_device* dev, cec_logical_address_t addr)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*add_logical_address)() passes the logical address that will be used
in this system.

HAL may use it to configure the hardware so that the CEC commands addressed
the given logical address can be filtered in. This method can be called
as many times as necessary in order to support multiple logical devices.
addr should be in the range of valid logical addresses for the call
to succeed.

Returns 0 on success or -errno on error.

"
      end

      attribute 15640631 "clear_logical_address"
	public explicit_type "/* * (*clear_logical_address)() tells HAL to reset all the logical addresses. * * It is used when the system doesn't need to process CEC command any more, * hence to tell HAL to stop receiving commands from the CEC bus, and change * the state back to the beginning. */ void (*)(const struct hdmi_cec_device* dev)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * (*clear_logical_address)() tells HAL to reset all the logical addresses.
     *
     * It is used when the system doesn't need to process CEC command any more,
     * hence to tell HAL to stop receiving commands from the CEC bus, and change
     * the state back to the beginning.
     */
    void (*${name})(const struct hdmi_cec_device* dev)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*clear_logical_address)() tells HAL to reset all the logical addresses.

It is used when the system doesn't need to process CEC command any more,
hence to tell HAL to stop receiving commands from the CEC bus, and change
the state back to the beginning.

"
      end

      attribute 15640759 "get_physical_address"
	public explicit_type "/* * (*get_physical_address)() returns the CEC physical address. The * address is written to addr. * * The physical address depends on the topology of the network formed * by connected HDMI devices. It is therefore likely to change if the cable * is plugged off and on again. It is advised to call get_physical_address * to get the updated address when hot plug event takes place. * * Returns 0 on success or -errno on error. */ int (*)(const struct hdmi_cec_device* dev, uint16_t* addr)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * (*get_physical_address)() returns the CEC physical address. The
     * address is written to addr.
     *
     * The physical address depends on the topology of the network formed
     * by connected HDMI devices. It is therefore likely to change if the cable
     * is plugged off and on again. It is advised to call get_physical_address
     * to get the updated address when hot plug event takes place.
     *
     * Returns 0 on success or -errno on error.
     */
    int (*${name})(const struct hdmi_cec_device* dev, uint16_t* addr)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*get_physical_address)() returns the CEC physical address. The
address is written to addr.

The physical address depends on the topology of the network formed
by connected HDMI devices. It is therefore likely to change if the cable
is plugged off and on again. It is advised to call get_physical_address
to get the updated address when hot plug event takes place.

Returns 0 on success or -errno on error.

"
      end

      attribute 15640887 "send_message"
	public explicit_type "/* * (*send_message)() transmits HDMI-CEC message to other HDMI device. * * The method should be designed to return in a certain amount of time not * hanging forever, which can happen if CEC signal line is pulled low for * some reason. HAL implementation should take the situation into account * so as not to wait forever for the message to get sent out. * * It should try retransmission at least once as specified in the standard. * * Returns error code. See HDMI_RESULT_SUCCESS, HDMI_RESULT_NACK, and * HDMI_RESULT_BUSY. */ int (*)(const struct hdmi_cec_device* dev, const cec_message_t*)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * (*send_message)() transmits HDMI-CEC message to other HDMI device.
     *
     * The method should be designed to return in a certain amount of time not
     * hanging forever, which can happen if CEC signal line is pulled low for
     * some reason. HAL implementation should take the situation into account
     * so as not to wait forever for the message to get sent out.
     *
     * It should try retransmission at least once as specified in the standard.
     *
     * Returns error code. See HDMI_RESULT_SUCCESS, HDMI_RESULT_NACK, and
     * HDMI_RESULT_BUSY.
     */
    int (*${name})(const struct hdmi_cec_device* dev, const cec_message_t*)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*send_message)() transmits HDMI-CEC message to other HDMI device.

The method should be designed to return in a certain amount of time not
hanging forever, which can happen if CEC signal line is pulled low for
some reason. HAL implementation should take the situation into account
so as not to wait forever for the message to get sent out.

It should try retransmission at least once as specified in the standard.

Returns error code. See HDMI_RESULT_SUCCESS, HDMI_RESULT_NACK, and
HDMI_RESULT_BUSY.

"
      end

      attribute 15641015 "register_event_callback"
	public explicit_type "/* * (*register_event_callback)() registers a callback that HDMI-CEC HAL * can later use for incoming CEC messages or internal HDMI events. * When calling from C++, use the argument arg to pass the calling object. * It will be passed back when the callback is invoked so that the context * can be retrieved. */ void (*)(const struct hdmi_cec_device* dev, event_callback_t callback, void* arg)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * (*register_event_callback)() registers a callback that HDMI-CEC HAL
     * can later use for incoming CEC messages or internal HDMI events.
     * When calling from C++, use the argument arg to pass the calling object.
     * It will be passed back when the callback is invoked so that the context
     * can be retrieved.
     */
    void (*${name})(const struct hdmi_cec_device* dev,
            event_callback_t callback, void* arg)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*register_event_callback)() registers a callback that HDMI-CEC HAL
can later use for incoming CEC messages or internal HDMI events.
When calling from C++, use the argument arg to pass the calling object.
It will be passed back when the callback is invoked so that the context
can be retrieved.

"
      end

      attribute 15641143 "get_version"
	public explicit_type "/* * (*get_version)() returns the CEC version supported by underlying hardware. */ void (*)(const struct hdmi_cec_device* dev, int* version)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * (*get_version)() returns the CEC version supported by underlying hardware.
     */
    void (*${name})(const struct hdmi_cec_device* dev, int* version)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*get_version)() returns the CEC version supported by underlying hardware.

"
      end

      attribute 15641271 "get_vendor_id"
	public explicit_type "/* * (*get_vendor_id)() returns the identifier of the vendor. It is * the 24-bit unique company ID obtained from the IEEE Registration * Authority Committee (RAC). */ void (*)(const struct hdmi_cec_device* dev, uint32_t* vendor_id)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * (*get_vendor_id)() returns the identifier of the vendor. It is
     * the 24-bit unique company ID obtained from the IEEE Registration
     * Authority Committee (RAC).
     */
    void (*${name})(const struct hdmi_cec_device* dev, uint32_t* vendor_id)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*get_vendor_id)() returns the identifier of the vendor. It is
the 24-bit unique company ID obtained from the IEEE Registration
Authority Committee (RAC).

"
      end

      attribute 15641399 "get_port_info"
	public explicit_type "/* * (*get_port_info)() returns the hdmi port information of underlying hardware. * info is the list of HDMI port information, and 'total' is the number of * HDMI ports in the system. */ void (*)(const struct hdmi_cec_device* dev, struct hdmi_port_info* list[], int* total)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * (*get_port_info)() returns the hdmi port information of underlying hardware.
     * info is the list of HDMI port information, and 'total' is the number of
     * HDMI ports in the system.
     */
    void (*${name})(const struct hdmi_cec_device* dev,
            struct hdmi_port_info* list[], int* total)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*get_port_info)() returns the hdmi port information of underlying hardware.
info is the list of HDMI port information, and 'total' is the number of
HDMI ports in the system.

"
      end

      attribute 15641527 "set_option"
	public explicit_type "/* * (*set_option)() passes flags controlling the way HDMI-CEC service works down * to HAL implementation. Those flags will be used in case the feature needs * update in HAL itself, firmware or microcontroller. */ void (*)(const struct hdmi_cec_device* dev, int flag, int value)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * (*set_option)() passes flags controlling the way HDMI-CEC service works down
     * to HAL implementation. Those flags will be used in case the feature needs
     * update in HAL itself, firmware or microcontroller.
     */
    void (*${name})(const struct hdmi_cec_device* dev, int flag, int value)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*set_option)() passes flags controlling the way HDMI-CEC service works down
to HAL implementation. Those flags will be used in case the feature needs
update in HAL itself, firmware or microcontroller.

"
      end

      attribute 15641655 "set_audio_return_channel"
	public explicit_type "/* * (*set_audio_return_channel)() configures ARC circuit in the hardware logic * to start or stop the feature. Flag can be either 1 to start the feature * or 0 to stop it. * * Returns 0 on success or -errno on error. */ void (*)(const struct hdmi_cec_device* dev, int port_id, int flag)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * (*set_audio_return_channel)() configures ARC circuit in the hardware logic
     * to start or stop the feature. Flag can be either 1 to start the feature
     * or 0 to stop it.
     *
     * Returns 0 on success or -errno on error.
     */
    void (*${name})(const struct hdmi_cec_device* dev, int port_id, int flag)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*set_audio_return_channel)() configures ARC circuit in the hardware logic
to start or stop the feature. Flag can be either 1 to start the feature
or 0 to stop it.

Returns 0 on success or -errno on error.

"
      end

      attribute 15641783 "is_connected"
	public explicit_type "/* * (*is_connected)() returns the connection status of the specified port. * Returns HDMI_CONNECTED if a device is connected, otherwise HDMI_NOT_CONNECTED. * The HAL should watch for +5V power signal to determine the status. */ int (*)(const struct hdmi_cec_device* dev, int port_id)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * (*is_connected)() returns the connection status of the specified port.
     * Returns HDMI_CONNECTED if a device is connected, otherwise HDMI_NOT_CONNECTED.
     * The HAL should watch for +5V power signal to determine the status.
     */
    int (*${name})(const struct hdmi_cec_device* dev, int port_id)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*is_connected)() returns the connection status of the specified port.
Returns HDMI_CONNECTED if a device is connected, otherwise HDMI_NOT_CONNECTED.
The HAL should watch for +5V power signal to determine the status.

"
      end

      attribute 15641911 "reserved"
	public explicit_type "void"
	multiplicity "[16 - 11]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Reserved for future use to maximum 16 functions. Must be NULL. 
"
      end
    end

    class 4383287 "hdmi_event_t"
      visibility package stereotype "typedef" explicit_base_type ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4383415 "hdmi_port_info"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "HDMI port descriptor
"
      classrelation 8380087 // type (<directional composition>)
	relation 8380087 *-->
	  a role_name "type" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8380087 // type (<directional composition>)
	  b parent class_ref 4382007 // hdmi_port_type_t
      end

      attribute 15640119 "port_id"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Port ID should start from 1 which corresponds to HDMI \"port 1\".
"
      end

      attribute 15640247 "cec_supported"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15640375 "arc_supported"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

    end

    class 4383543 "hdmi_port_info_t"
      visibility package stereotype "typedef" base_type class_ref 4383415 // hdmi_port_info
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4383671 "event_callback_t"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(const hdmi_event_t* event, void* arg);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Callback function type that will be called by HAL implementation.
Services can not close/open the device in the callback.
"
    end

    class 4383799 "hdmi_cec_module"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8380343 // common (<directional composition>)
	relation 8380343 *-->
	  a role_name "common" public
	    comment "Common methods of the HDMI CEC module.  This *must* be the first member of
hdmi_cec_module as users of this structure will cast a hw_module_t to hdmi_cec_module
pointer in contexts where it's known the hw_module_t references a hdmi_cec_module.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8380343 // common (<directional composition>)
	  b parent class_ref 4305335 // hw_module_t
      end
    end

    class 4383927 "hdmi_module_t"
      visibility package stereotype "typedef" base_type class_ref 4383799 // hdmi_cec_module
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4384055 "hdmi_cec_device_t"
      visibility package stereotype "typedef" base_type class_ref 4383159 // hdmi_cec_device
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4384183 "hw_authenticator_type_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15642039 "HW_AUTH_NONE"
	public type class_ref 4384183 // hw_authenticator_type_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15642167 "HW_AUTH_PASSWORD"
	public type class_ref 4384183 // hw_authenticator_type_t
	init_value " 1 << 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15642295 "HW_AUTH_FINGERPRINT"
	public type class_ref 4384183 // hw_authenticator_type_t
	init_value " 1 << 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15642423 "HW_AUTH_ANY"
	public type class_ref 4384183 // hw_authenticator_type_t
	init_value " UINT32_MAX"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4384311 "hwc_display_t"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}*  ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " This represents a display, typically an EGLDisplay object "
    end

    class 4384439 "hwc_surface_t"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}*  ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " This represents a surface, typically an EGLSurface object  "
    end

    class 4384567 "anonymous159"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "hwc_display_contents_1_t::flags values
"
      attribute 15642551 "HWC_GEOMETRY_CHANGED"
	public type class_ref 4384567 // anonymous159
	init_value " 0x00000001"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4384695 "hwc_display_contents_1"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "HWC_GEOMETRY_CHANGED is set by SurfaceFlinger to indicate that the list
passed to (*prepare)() has changed by more than just the buffer handles
and acquire fences.


Description of the contents to output on a display.

This is the top-level structure passed to the prepare and set calls to
negotiate and commit the composition of a display image.
"
      attribute 15642679 "retireFenceFd"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " File descriptor referring to a Sync HAL fence object which will signal
when this composition is retired. For a physical display, a composition
is retired when it has been replaced on-screen by a subsequent set. For
a virtual display, the composition is retired when the writes to
outputBuffer are complete and can be read. The fence object is created
and returned by the set call; this field will be -1 on entry to prepare
and set. SurfaceFlinger will close the returned file descriptor.

"
      end

      classrelation 8380599 // dpy (<directional composition>)
	relation 8380599 *-->
	  a role_name "dpy" public
	    comment " (dpy, sur) is the target of SurfaceFlinger's OpenGL ES
composition for HWC_DEVICE_VERSION_1_0. They aren't relevant to
prepare. The set call should commit this surface atomically to
the display along with any overlay layers.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8380599 // dpy (<directional composition>)
	  b parent class_ref 4384311 // hwc_display_t
      end

      classrelation 8380727 // sur (<directional composition>)
	relation 8380727 *-->
	  a role_name "sur" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8380727 // sur (<directional composition>)
	  b parent class_ref 4384439 // hwc_surface_t
      end
    end

    class 4384823 "hwc_procs"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " see hwc_composer_device::registerProcs()
All of the callbacks are required and non-NULL unless otherwise noted.
"
      attribute 15642807 "invalidate"
	public explicit_type "/* * (*invalidate)() triggers a screen refresh, in particular prepare and set * will be called shortly after this call is made. Note that there is * NO GUARANTEE that the screen refresh will happen after invalidate() * returns (in particular, it could happen before). * invalidate() is GUARANTEED TO NOT CALL BACK into the h/w composer HAL and * it is safe to call invalidate() from any of hwc_composer_device * hooks, unless noted otherwise. */ void (*)(const struct hwc_procs* procs)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * (*invalidate)() triggers a screen refresh, in particular prepare and set
     * will be called shortly after this call is made. Note that there is
     * NO GUARANTEE that the screen refresh will happen after invalidate()
     * returns (in particular, it could happen before).
     * invalidate() is GUARANTEED TO NOT CALL BACK into the h/w composer HAL and
     * it is safe to call invalidate() from any of hwc_composer_device
     * hooks, unless noted otherwise.
     */
    void (*${name})(const struct hwc_procs* procs)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*invalidate)() triggers a screen refresh, in particular prepare and set
will be called shortly after this call is made. Note that there is
NO GUARANTEE that the screen refresh will happen after invalidate()
returns (in particular, it could happen before).
invalidate() is GUARANTEED TO NOT CALL BACK into the h/w composer HAL and
it is safe to call invalidate() from any of hwc_composer_device
hooks, unless noted otherwise.

"
      end

      attribute 15642935 "vsync"
	public explicit_type "/* * (*vsync)() is called by the h/w composer HAL when a vsync event is * received and HWC_EVENT_VSYNC is enabled on a display * (see: hwc_event_control). * * the \"disp\" parameter indicates which display the vsync event is for. * the \"timestamp\" parameter is the system monotonic clock timestamp in * nanosecond of when the vsync event happened. * * vsync() is GUARANTEED TO NOT CALL BACK into the h/w composer HAL. * * It is expected that vsync() is called from a thread of at least * HAL_PRIORITY_URGENT_DISPLAY with as little latency as possible, * typically less than 0.5 ms. * * It is a (silent) error to have HWC_EVENT_VSYNC enabled when calling * hwc_composer_device.set(..., 0, 0, 0) (screen off). The implementation * can either stop or continue to process VSYNC events, but must not * crash or cause other problems. */ void (*)(const struct hwc_procs* procs, int disp, int64_t timestamp)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * (*vsync)() is called by the h/w composer HAL when a vsync event is
     * received and HWC_EVENT_VSYNC is enabled on a display
     * (see: hwc_event_control).
     *
     * the \"disp\" parameter indicates which display the vsync event is for.
     * the \"timestamp\" parameter is the system monotonic clock timestamp in
     *   nanosecond of when the vsync event happened.
     *
     * vsync() is GUARANTEED TO NOT CALL BACK into the h/w composer HAL.
     *
     * It is expected that vsync() is called from a thread of at least
     * HAL_PRIORITY_URGENT_DISPLAY with as little latency as possible,
     * typically less than 0.5 ms.
     *
     * It is a (silent) error to have HWC_EVENT_VSYNC enabled when calling
     * hwc_composer_device.set(..., 0, 0, 0) (screen off). The implementation
     * can either stop or continue to process VSYNC events, but must not
     * crash or cause other problems.
     */
    void (*${name})(const struct hwc_procs* procs, int disp, int64_t timestamp)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*vsync)() is called by the h/w composer HAL when a vsync event is
received and HWC_EVENT_VSYNC is enabled on a display
(see: hwc_event_control).

the \"disp\" parameter indicates which display the vsync event is for.
the \"timestamp\" parameter is the system monotonic clock timestamp in
  nanosecond of when the vsync event happened.

vsync() is GUARANTEED TO NOT CALL BACK into the h/w composer HAL.

It is expected that vsync() is called from a thread of at least
HAL_PRIORITY_URGENT_DISPLAY with as little latency as possible,
typically less than 0.5 ms.

It is a (silent) error to have HWC_EVENT_VSYNC enabled when calling
hwc_composer_device.set(..., 0, 0, 0) (screen off). The implementation
can either stop or continue to process VSYNC events, but must not
crash or cause other problems.

"
      end

      attribute 15643063 "hotplug"
	public explicit_type "/* * (*hotplug)() is called by the h/w composer HAL when a display is * connected or disconnected. The PRIMARY display is always connected and * the hotplug callback should not be called for it. * * The disp parameter indicates which display type this event is for. * The connected parameter indicates whether the display has just been * connected (1) or disconnected (0). * * The hotplug() callback may call back into the h/w composer on the same * thread to query refresh rate and dpi for the display. Additionally, * other threads may be calling into the h/w composer while the callback * is in progress. * * The h/w composer must serialize calls to the hotplug callback; only * one thread may call it at a time. * * This callback will be NULL if the h/w composer is using * HWC_DEVICE_API_VERSION_1_0. */ void (*)(const struct hwc_procs* procs, int disp, int connected)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * (*hotplug)() is called by the h/w composer HAL when a display is
     * connected or disconnected. The PRIMARY display is always connected and
     * the hotplug callback should not be called for it.
     *
     * The disp parameter indicates which display type this event is for.
     * The connected parameter indicates whether the display has just been
     *   connected (1) or disconnected (0).
     *
     * The hotplug() callback may call back into the h/w composer on the same
     * thread to query refresh rate and dpi for the display. Additionally,
     * other threads may be calling into the h/w composer while the callback
     * is in progress.
     *
     * The h/w composer must serialize calls to the hotplug callback; only
     * one thread may call it at a time.
     *
     * This callback will be NULL if the h/w composer is using
     * HWC_DEVICE_API_VERSION_1_0.
     */
    void (*${name})(const struct hwc_procs* procs, int disp, int connected)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*hotplug)() is called by the h/w composer HAL when a display is
connected or disconnected. The PRIMARY display is always connected and
the hotplug callback should not be called for it.

The disp parameter indicates which display type this event is for.
The connected parameter indicates whether the display has just been
  connected (1) or disconnected (0).

The hotplug() callback may call back into the h/w composer on the same
thread to query refresh rate and dpi for the display. Additionally,
other threads may be calling into the h/w composer while the callback
is in progress.

The h/w composer must serialize calls to the hotplug callback; only
one thread may call it at a time.

This callback will be NULL if the h/w composer is using
HWC_DEVICE_API_VERSION_1_0.

"
      end
    end

    class 4384951 "hwc_module"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8380855 // common (<directional composition>)
	relation 8380855 *-->
	  a role_name "common" public
	    comment "Common methods of the hardware composer module.  This *must* be the first member of
hwc_module as users of this structure will cast a hw_module_t to
hwc_module pointer in contexts where it's known the hw_module_t references a
hwc_module.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8380855 // common (<directional composition>)
	  b parent class_ref 4305335 // hw_module_t
      end
    end

    class 4385079 "hwc_module_t"
      visibility package stereotype "typedef" base_type class_ref 4384951 // hwc_module
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4385207 "hwc_composer_device_1"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8380983 // common (<directional composition>)
	relation 8380983 *-->
	  a role_name "common" public
	    comment "Common methods of the hardware composer device.  This *must* be the first member of
hwc_composer_device_1 as users of this structure will cast a hw_device_t to
hwc_composer_device_1 pointer in contexts where it's known the hw_device_t references a
hwc_composer_device_1.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8380983 // common (<directional composition>)
	  b parent class_ref 4305975 // hw_device_t
      end

      attribute 15643191 "prepare"
	public explicit_type "/* * (*prepare)() is called for each frame before composition and is used by * SurfaceFlinger to determine what composition steps the HWC can handle. * * (*prepare)() can be called more than once, the last call prevails. * * The HWC responds by setting the compositionType field in each layer to * either HWC_FRAMEBUFFER, HWC_OVERLAY, or HWC_CURSOR_OVERLAY. For the * HWC_FRAMEBUFFER type, composition for the layer is handled by * SurfaceFlinger with OpenGL ES. For the latter two overlay types, * the HWC will have to handle the layer's composition. compositionType * and hints are preserved between (*prepare)() calles unless the * HWC_GEOMETRY_CHANGED flag is set. * * (*prepare)() is called with HWC_GEOMETRY_CHANGED to indicate that the * list's geometry has changed, that is, when more than just the buffer's * handles have been updated. Typically this happens (but is not limited to) * when a window is added, removed, resized or moved. In this case * compositionType and hints are reset to their default value. * * For HWC 1.0, numDisplays will always be one, and displays[0] will be * non-NULL. * * For HWC 1.1, numDisplays will always be HWC_NUM_PHYSICAL_DISPLAY_TYPES. * Entries for unsupported or disabled/disconnected display types will be * NULL. * * In HWC 1.3, numDisplays may be up to HWC_NUM_DISPLAY_TYPES. The extra * entries correspond to enabled virtual displays, and will be non-NULL. * * returns: 0 on success. An negative error code on error. If an error is * returned, SurfaceFlinger will assume that none of the layer will be * handled by the HWC. */ int (*)(struct hwc_composer_device_1 *dev, size_t numDisplays, hwc_display_contents_1_t** displays)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * (*prepare)() is called for each frame before composition and is used by
     * SurfaceFlinger to determine what composition steps the HWC can handle.
     *
     * (*prepare)() can be called more than once, the last call prevails.
     *
     * The HWC responds by setting the compositionType field in each layer to
     * either HWC_FRAMEBUFFER, HWC_OVERLAY, or HWC_CURSOR_OVERLAY. For the
     * HWC_FRAMEBUFFER type, composition for the layer is handled by
     * SurfaceFlinger with OpenGL ES. For the latter two overlay types,
     * the HWC will have to handle the layer's composition. compositionType
     * and hints are preserved between (*prepare)() calles unless the
     * HWC_GEOMETRY_CHANGED flag is set.
     *
     * (*prepare)() is called with HWC_GEOMETRY_CHANGED to indicate that the
     * list's geometry has changed, that is, when more than just the buffer's
     * handles have been updated. Typically this happens (but is not limited to)
     * when a window is added, removed, resized or moved. In this case
     * compositionType and hints are reset to their default value.
     *
     * For HWC 1.0, numDisplays will always be one, and displays[0] will be
     * non-NULL.
     *
     * For HWC 1.1, numDisplays will always be HWC_NUM_PHYSICAL_DISPLAY_TYPES.
     * Entries for unsupported or disabled/disconnected display types will be
     * NULL.
     *
     * In HWC 1.3, numDisplays may be up to HWC_NUM_DISPLAY_TYPES. The extra
     * entries correspond to enabled virtual displays, and will be non-NULL.
     *
     * returns: 0 on success. An negative error code on error. If an error is
     * returned, SurfaceFlinger will assume that none of the layer will be
     * handled by the HWC.
     */
    int (*${name})(struct hwc_composer_device_1 *dev,
                    size_t numDisplays, hwc_display_contents_1_t** displays)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*prepare)() is called for each frame before composition and is used by
SurfaceFlinger to determine what composition steps the HWC can handle.

(*prepare)() can be called more than once, the last call prevails.

The HWC responds by setting the compositionType field in each layer to
either HWC_FRAMEBUFFER, HWC_OVERLAY, or HWC_CURSOR_OVERLAY. For the
HWC_FRAMEBUFFER type, composition for the layer is handled by
SurfaceFlinger with OpenGL ES. For the latter two overlay types,
the HWC will have to handle the layer's composition. compositionType
and hints are preserved between (*prepare)() calles unless the
HWC_GEOMETRY_CHANGED flag is set.

(*prepare)() is called with HWC_GEOMETRY_CHANGED to indicate that the
list's geometry has changed, that is, when more than just the buffer's
handles have been updated. Typically this happens (but is not limited to)
when a window is added, removed, resized or moved. In this case
compositionType and hints are reset to their default value.

For HWC 1.0, numDisplays will always be one, and displays[0] will be
non-NULL.

For HWC 1.1, numDisplays will always be HWC_NUM_PHYSICAL_DISPLAY_TYPES.
Entries for unsupported or disabled/disconnected display types will be
NULL.

In HWC 1.3, numDisplays may be up to HWC_NUM_DISPLAY_TYPES. The extra
entries correspond to enabled virtual displays, and will be non-NULL.

returns: 0 on success. An negative error code on error. If an error is
returned, SurfaceFlinger will assume that none of the layer will be
handled by the HWC.

"
      end

      attribute 15643319 "set"
	public explicit_type "/* * (*set)() is used in place of eglSwapBuffers(), and assumes the same * functionality, except it also commits the work list atomically with * the actual eglSwapBuffers(). * * The layer lists are guaranteed to be the same as the ones returned from * the last call to (*prepare)(). * * When this call returns the caller assumes that the displays will be * updated in the near future with the content of their work lists, without * artifacts during the transition from the previous frame. * * A display with zero layers indicates that the entire composition has * been handled by SurfaceFlinger with OpenGL ES. In this case, (*set)() * behaves just like eglSwapBuffers(). * * For HWC 1.0, numDisplays will always be one, and displays[0] will be * non-NULL. * * For HWC 1.1, numDisplays will always be HWC_NUM_PHYSICAL_DISPLAY_TYPES. * Entries for unsupported or disabled/disconnected display types will be * NULL. * * In HWC 1.3, numDisplays may be up to HWC_NUM_DISPLAY_TYPES. The extra * entries correspond to enabled virtual displays, and will be non-NULL. * * IMPORTANT NOTE: There is an implicit layer containing opaque black * pixels behind all the layers in the list. It is the responsibility of * the hwcomposer module to make sure black pixels are output (or blended * from). * * IMPORTANT NOTE: In the event of an error this call *MUST* still cause * any fences returned in the previous call to set to eventually become * signaled. The caller may have already issued wait commands on these * fences, and having set return without causing those fences to signal * will likely result in a deadlock. * * returns: 0 on success. A negative error code on error: * HWC_EGL_ERROR: eglGetError() will provide the proper error code (only * allowed prior to HWComposer 1.1) * Another code for non EGL errors. */ int (*)(struct hwc_composer_device_1 *dev, size_t numDisplays, hwc_display_contents_1_t** displays)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * (*set)() is used in place of eglSwapBuffers(), and assumes the same
     * functionality, except it also commits the work list atomically with
     * the actual eglSwapBuffers().
     *
     * The layer lists are guaranteed to be the same as the ones returned from
     * the last call to (*prepare)().
     *
     * When this call returns the caller assumes that the displays will be
     * updated in the near future with the content of their work lists, without
     * artifacts during the transition from the previous frame.
     *
     * A display with zero layers indicates that the entire composition has
     * been handled by SurfaceFlinger with OpenGL ES. In this case, (*set)()
     * behaves just like eglSwapBuffers().
     *
     * For HWC 1.0, numDisplays will always be one, and displays[0] will be
     * non-NULL.
     *
     * For HWC 1.1, numDisplays will always be HWC_NUM_PHYSICAL_DISPLAY_TYPES.
     * Entries for unsupported or disabled/disconnected display types will be
     * NULL.
     *
     * In HWC 1.3, numDisplays may be up to HWC_NUM_DISPLAY_TYPES. The extra
     * entries correspond to enabled virtual displays, and will be non-NULL.
     *
     * IMPORTANT NOTE: There is an implicit layer containing opaque black
     * pixels behind all the layers in the list. It is the responsibility of
     * the hwcomposer module to make sure black pixels are output (or blended
     * from).
     *
     * IMPORTANT NOTE: In the event of an error this call *MUST* still cause
     * any fences returned in the previous call to set to eventually become
     * signaled.  The caller may have already issued wait commands on these
     * fences, and having set return without causing those fences to signal
     * will likely result in a deadlock.
     *
     * returns: 0 on success. A negative error code on error:
     *    HWC_EGL_ERROR: eglGetError() will provide the proper error code (only
     *        allowed prior to HWComposer 1.1)
     *    Another code for non EGL errors.
     */
    int (*${name})(struct hwc_composer_device_1 *dev,
                size_t numDisplays, hwc_display_contents_1_t** displays)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*set)() is used in place of eglSwapBuffers(), and assumes the same
functionality, except it also commits the work list atomically with
the actual eglSwapBuffers().

The layer lists are guaranteed to be the same as the ones returned from
the last call to (*prepare)().

When this call returns the caller assumes that the displays will be
updated in the near future with the content of their work lists, without
artifacts during the transition from the previous frame.

A display with zero layers indicates that the entire composition has
been handled by SurfaceFlinger with OpenGL ES. In this case, (*set)()
behaves just like eglSwapBuffers().

For HWC 1.0, numDisplays will always be one, and displays[0] will be
non-NULL.

For HWC 1.1, numDisplays will always be HWC_NUM_PHYSICAL_DISPLAY_TYPES.
Entries for unsupported or disabled/disconnected display types will be
NULL.

In HWC 1.3, numDisplays may be up to HWC_NUM_DISPLAY_TYPES. The extra
entries correspond to enabled virtual displays, and will be non-NULL.

IMPORTANT NOTE: There is an implicit layer containing opaque black
pixels behind all the layers in the list. It is the responsibility of
the hwcomposer module to make sure black pixels are output (or blended
from).

IMPORTANT NOTE: In the event of an error this call *MUST* still cause
any fences returned in the previous call to set to eventually become
signaled.  The caller may have already issued wait commands on these
fences, and having set return without causing those fences to signal
will likely result in a deadlock.

returns: 0 on success. A negative error code on error:
   HWC_EGL_ERROR: eglGetError() will provide the proper error code (only
       allowed prior to HWComposer 1.1)
   Another code for non EGL errors.

"
      end

      attribute 15643447 "eventControl"
	public explicit_type "/* * eventControl(..., event, enabled) * Enables or disables h/w composer events for a display. * * eventControl can be called from any thread and takes effect * immediately. * * Supported events are: * HWC_EVENT_VSYNC * * returns -EINVAL if the \"event\" parameter is not one of the value above * or if the \"enabled\" parameter is not 0 or 1. */ int (*)(struct hwc_composer_device_1* dev, int disp, int event, int enabled)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * eventControl(..., event, enabled)
     * Enables or disables h/w composer events for a display.
     *
     * eventControl can be called from any thread and takes effect
     * immediately.
     *
     *  Supported events are:
     *      HWC_EVENT_VSYNC
     *
     * returns -EINVAL if the \"event\" parameter is not one of the value above
     * or if the \"enabled\" parameter is not 0 or 1.
     */
    int (*${name})(struct hwc_composer_device_1* dev, int disp,
            int event, int enabled)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "eventControl(..., event, enabled)
Enables or disables h/w composer events for a display.

eventControl can be called from any thread and takes effect
immediately.

 Supported events are:
     HWC_EVENT_VSYNC

returns -EINVAL if the \"event\" parameter is not one of the value above
or if the \"enabled\" parameter is not 0 or 1.

"
      end

      attribute 15643575 "blank"
	public explicit_type "int (*)(struct hwc_composer_device_1* dev, int disp, int blank)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}int (*${name})(struct hwc_composer_device_1* dev, int disp, int blank)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "For HWC 1.3 and earlier, the blank() interface is used.

blank(..., blank)
Blanks or unblanks a display's screen.

Turns the screen off when blank is nonzero, on when blank is zero.
Multiple sequential calls with the same blank value must be
supported.
The screen state transition must be be complete when the function
returns.

returns 0 on success, negative on error.

"
      end

      attribute 15643703 "setPowerMode"
	public explicit_type "/* * For HWC 1.4 and above, setPowerMode() will be used in place of * blank(). * * setPowerMode(..., mode) * Sets the display screen's power state. * * Refer to the documentation of the HWC_POWER_MODE_* constants * for information about each power mode. * * The functionality is similar to the blank() command in previous * versions of HWC, but with support for more power states. * * The display driver is expected to retain and restore the low power * state of the display while entering and exiting from suspend. * * Multiple sequential calls with the same mode value must be supported. * * The screen state transition must be be complete when the function * returns. * * returns 0 on success, negative on error. */ int (*)(struct hwc_composer_device_1* dev, int disp, int mode)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
        /*
         * For HWC 1.4 and above, setPowerMode() will be used in place of
         * blank().
         *
         * setPowerMode(..., mode)
         * Sets the display screen's power state.
         *
         * Refer to the documentation of the HWC_POWER_MODE_* constants
         * for information about each power mode.
         *
         * The functionality is similar to the blank() command in previous
         * versions of HWC, but with support for more power states.
         *
         * The display driver is expected to retain and restore the low power
         * state of the display while entering and exiting from suspend.
         *
         * Multiple sequential calls with the same mode value must be supported.
         *
         * The screen state transition must be be complete when the function
         * returns.
         *
         * returns 0 on success, negative on error.
         */
        int (*${name})(struct hwc_composer_device_1* dev, int disp,
                int mode)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "For HWC 1.4 and above, setPowerMode() will be used in place of
blank().

setPowerMode(..., mode)
Sets the display screen's power state.

Refer to the documentation of the HWC_POWER_MODE_* constants
for information about each power mode.

The functionality is similar to the blank() command in previous
versions of HWC, but with support for more power states.

The display driver is expected to retain and restore the low power
state of the display while entering and exiting from suspend.

Multiple sequential calls with the same mode value must be supported.

The screen state transition must be be complete when the function
returns.

returns 0 on success, negative on error.

"
      end
    end

    class 4385335 "hwc2_blend_mode_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Enums

For most of these enums, there is an invalid value defined to be 0. This is
an attempt to catch uninitialized fields, and these values should not be
used.

 Display attributes queryable through getDisplayAttribute 
 Dimensions in pixels 
 Vsync period in nanoseconds 
 Dots per thousand inches (DPI * 1000). Scaling by 1000 allows these
numbers to be stored in an int32_t without losing too much precision. If
the DPI for a configuration is unavailable or is considered unreliable,
the device may return -1 instead 
 Blend modes, settable per layer "
      attribute 15643831 "HWC2_BLEND_MODE_INVALID"
	public type class_ref 4385335 // hwc2_blend_mode_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15643959 "HWC2_BLEND_MODE_NONE"
	public type class_ref 4385335 // hwc2_blend_mode_t
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15644087 "HWC2_BLEND_MODE_PREMULTIPLIED"
	public type class_ref 4385335 // hwc2_blend_mode_t
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15644215 "HWC2_BLEND_MODE_COVERAGE"
	public type class_ref 4385335 // hwc2_blend_mode_t
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4385463 "hwc2_callback_descriptor_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " colorOut = colorSrc 
 colorOut = colorSrc + colorDst * (1 - alphaSrc) 
 colorOut = colorSrc * alphaSrc + colorDst * (1 - alphaSrc) 
 See the 'Callbacks' section for more detailed descriptions of what these
functions do "
      attribute 15644343 "HWC2_CALLBACK_INVALID"
	public type class_ref 4385463 // hwc2_callback_descriptor_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15644471 "HWC2_CALLBACK_HOTPLUG"
	public type class_ref 4385463 // hwc2_callback_descriptor_t
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15644599 "HWC2_CALLBACK_REFRESH"
	public type class_ref 4385463 // hwc2_callback_descriptor_t
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15644727 "HWC2_CALLBACK_VSYNC"
	public type class_ref 4385463 // hwc2_callback_descriptor_t
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4385591 "hwc2_capability_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Optional capabilities which may be supported by some devices. The particular
set of supported capabilities for a given device may be retrieved using
getCapabilities. "
      attribute 15644855 "HWC2_CAPABILITY_INVALID"
	public type class_ref 4385591 // hwc2_capability_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15644983 "HWC2_CAPABILITY_SIDEBAND_STREAM"
	public type class_ref 4385591 // hwc2_capability_t
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4385719 "hwc2_composition_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Specifies that the device supports sideband stream layers, for which
buffer content updates and other synchronization will not be provided
through the usual validate/present cycle and must be handled by an
external implementation-defined mechanism. Only changes to layer state
(such as position, size, etc.) need to be performed through the
validate/present cycle. 
 Possible composition types for a given layer "
      attribute 15645111 "HWC2_COMPOSITION_INVALID"
	public type class_ref 4385719 // hwc2_composition_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15645239 "HWC2_COMPOSITION_CLIENT"
	public type class_ref 4385719 // hwc2_composition_t
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15645367 "HWC2_COMPOSITION_DEVICE"
	public type class_ref 4385719 // hwc2_composition_t
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15645495 "HWC2_COMPOSITION_SOLID_COLOR"
	public type class_ref 4385719 // hwc2_composition_t
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15645623 "HWC2_COMPOSITION_CURSOR"
	public type class_ref 4385719 // hwc2_composition_t
	init_value " 4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15645751 "HWC2_COMPOSITION_SIDEBAND"
	public type class_ref 4385719 // hwc2_composition_t
	init_value " 5"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4385847 "hwc2_connection_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The client will composite this layer into the client target buffer
(provided to the device through setClientTarget).

The device must not request any composition type changes for layers of
this type. 
 The device will handle the composition of this layer through a hardware
overlay or other similar means.

Upon validateDisplay, the device may request a change from this type to
HWC2_COMPOSITION_CLIENT. 
 The device will render this layer using the color set through
setLayerColor. If this functionality is not supported on a layer that the
client sets to HWC2_COMPOSITION_SOLID_COLOR, the device must request that
the composition type of that layer is changed to HWC2_COMPOSITION_CLIENT
upon the next call to validateDisplay.

Upon validateDisplay, the device may request a change from this type to
HWC2_COMPOSITION_CLIENT. 
 Similar to DEVICE, but the position of this layer may also be set
asynchronously through setCursorPosition. If this functionality is not
supported on a layer that the client sets to HWC2_COMPOSITION_CURSOR, the
device must request that the composition type of that layer is changed to
HWC2_COMPOSITION_CLIENT upon the next call to validateDisplay.

Upon validateDisplay, the device may request a change from this type to
either HWC2_COMPOSITION_DEVICE or HWC2_COMPOSITION_CLIENT. Changing to
HWC2_COMPOSITION_DEVICE will prevent the use of setCursorPosition but
still permit the device to composite the layer. 
 The device will handle the composition of this layer, as well as its
buffer updates and content synchronization. Only supported on devices
which provide HWC2_CAPABILITY_SIDEBAND_STREAM.

Upon validateDisplay, the device may request a change from this type to
either HWC2_COMPOSITION_DEVICE or HWC2_COMPOSITION_CLIENT, but it is
unlikely that content will display correctly in these cases. 
 Possible connection options from the hotplug callback "
      attribute 15645879 "HWC2_CONNECTION_INVALID"
	public type class_ref 4385847 // hwc2_connection_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15646007 "HWC2_CONNECTION_CONNECTED"
	public type class_ref 4385847 // hwc2_connection_t
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15646135 "HWC2_CONNECTION_DISCONNECTED"
	public type class_ref 4385847 // hwc2_connection_t
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4385975 "hwc2_display_request_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The display has been connected 
 The display has been disconnected 
 Display requests returned by getDisplayRequests "
      attribute 15646263 "HWC2_DISPLAY_REQUEST_FLIP_CLIENT_TARGET"
	public type class_ref 4385975 // hwc2_display_request_t
	init_value " 1 << 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15646391 "HWC2_DISPLAY_REQUEST_WRITE_CLIENT_TARGET_TO_OUTPUT"
	public type class_ref 4385975 // hwc2_display_request_t
	init_value " 1 << 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4386103 "hwc2_display_type_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Instructs the client to provide a new client target buffer, even if no
layers are marked for client composition. 
 Instructs the client to write the result of client composition directly
into the virtual display output buffer. If any of the layers are not
marked as HWC2_COMPOSITION_CLIENT or the given display is not a virtual
display, this request has no effect. 
 Display types returned by getDisplayType "
      attribute 15646519 "HWC2_DISPLAY_TYPE_INVALID"
	public type class_ref 4386103 // hwc2_display_type_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15646647 "HWC2_DISPLAY_TYPE_PHYSICAL"
	public type class_ref 4386103 // hwc2_display_type_t
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15646775 "HWC2_DISPLAY_TYPE_VIRTUAL"
	public type class_ref 4386103 // hwc2_display_type_t
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4386231 "hwc2_error_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " All physical displays, including both internal displays and hotpluggable
external displays 
 Virtual displays created by createVirtualDisplay 
 Return codes from all functions "
      attribute 15646903 "HWC2_ERROR_NONE"
	public type class_ref 4386231 // hwc2_error_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15647031 "HWC2_ERROR_BAD_CONFIG"
	public type class_ref 4386231 // hwc2_error_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15647159 "HWC2_ERROR_BAD_DISPLAY"
	public type class_ref 4386231 // hwc2_error_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15647287 "HWC2_ERROR_BAD_LAYER"
	public type class_ref 4386231 // hwc2_error_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15647415 "HWC2_ERROR_BAD_PARAMETER"
	public type class_ref 4386231 // hwc2_error_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15647543 "HWC2_ERROR_HAS_CHANGES"
	public type class_ref 4386231 // hwc2_error_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15647671 "HWC2_ERROR_NO_RESOURCES"
	public type class_ref 4386231 // hwc2_error_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15647799 "HWC2_ERROR_NOT_VALIDATED"
	public type class_ref 4386231 // hwc2_error_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15647927 "HWC2_ERROR_UNSUPPORTED"
	public type class_ref 4386231 // hwc2_error_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4386359 "hwc2_function_descriptor_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Function descriptors for use with getFunction "
      attribute 15648055 "HWC2_FUNCTION_INVALID"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15648183 "HWC2_FUNCTION_ACCEPT_DISPLAY_CHANGES"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15648311 "HWC2_FUNCTION_CREATE_LAYER"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15648439 "HWC2_FUNCTION_CREATE_VIRTUAL_DISPLAY"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15648567 "HWC2_FUNCTION_DESTROY_LAYER"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15648695 "HWC2_FUNCTION_DESTROY_VIRTUAL_DISPLAY"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15648823 "HWC2_FUNCTION_DUMP"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15648951 "HWC2_FUNCTION_GET_ACTIVE_CONFIG"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15649079 "HWC2_FUNCTION_GET_CHANGED_COMPOSITION_TYPES"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15649207 "HWC2_FUNCTION_GET_CLIENT_TARGET_SUPPORT"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15649335 "HWC2_FUNCTION_GET_COLOR_MODES"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15649463 "HWC2_FUNCTION_GET_DISPLAY_ATTRIBUTE"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15649591 "HWC2_FUNCTION_GET_DISPLAY_CONFIGS"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15649719 "HWC2_FUNCTION_GET_DISPLAY_NAME"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15649847 "HWC2_FUNCTION_GET_DISPLAY_REQUESTS"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15649975 "HWC2_FUNCTION_GET_DISPLAY_TYPE"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15650103 "HWC2_FUNCTION_GET_DOZE_SUPPORT"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15650231 "HWC2_FUNCTION_GET_HDR_CAPABILITIES"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15650359 "HWC2_FUNCTION_GET_MAX_VIRTUAL_DISPLAY_COUNT"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15650487 "HWC2_FUNCTION_GET_RELEASE_FENCES"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15650615 "HWC2_FUNCTION_PRESENT_DISPLAY"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15650743 "HWC2_FUNCTION_REGISTER_CALLBACK"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15650871 "HWC2_FUNCTION_SET_ACTIVE_CONFIG"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15650999 "HWC2_FUNCTION_SET_CLIENT_TARGET"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15651127 "HWC2_FUNCTION_SET_COLOR_MODE"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15651255 "HWC2_FUNCTION_SET_COLOR_TRANSFORM"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15651383 "HWC2_FUNCTION_SET_CURSOR_POSITION"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15651511 "HWC2_FUNCTION_SET_LAYER_BLEND_MODE"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15651639 "HWC2_FUNCTION_SET_LAYER_BUFFER"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15651767 "HWC2_FUNCTION_SET_LAYER_COLOR"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15651895 "HWC2_FUNCTION_SET_LAYER_COMPOSITION_TYPE"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15652023 "HWC2_FUNCTION_SET_LAYER_DATASPACE"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15652151 "HWC2_FUNCTION_SET_LAYER_DISPLAY_FRAME"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15652279 "HWC2_FUNCTION_SET_LAYER_PLANE_ALPHA"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15652407 "HWC2_FUNCTION_SET_LAYER_SIDEBAND_STREAM"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15652535 "HWC2_FUNCTION_SET_LAYER_SOURCE_CROP"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15652663 "HWC2_FUNCTION_SET_LAYER_SURFACE_DAMAGE"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15652791 "HWC2_FUNCTION_SET_LAYER_TRANSFORM"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15652919 "HWC2_FUNCTION_SET_LAYER_VISIBLE_REGION"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15653047 "HWC2_FUNCTION_SET_LAYER_Z_ORDER"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15653175 "HWC2_FUNCTION_SET_OUTPUT_BUFFER"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15653303 "HWC2_FUNCTION_SET_POWER_MODE"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15653431 "HWC2_FUNCTION_SET_VSYNC_ENABLED"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15653559 "HWC2_FUNCTION_VALIDATE_DISPLAY"
	public type class_ref 4386359 // hwc2_function_descriptor_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4386487 "hwc2_layer_request_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Layer requests returned from getDisplayRequests "
      attribute 15653687 "HWC2_LAYER_REQUEST_CLEAR_CLIENT_TARGET"
	public type class_ref 4386487 // hwc2_layer_request_t
	init_value " 1 << 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4386615 "hwc2_power_mode_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The client should clear its target with transparent pixels where this
layer would be. The client may ignore this request if the layer must be
blended. 
 Power modes for use with setPowerMode "
      attribute 15653815 "HWC2_POWER_MODE_OFF"
	public type class_ref 4386615 // hwc2_power_mode_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15653943 "HWC2_POWER_MODE_DOZE"
	public type class_ref 4386615 // hwc2_power_mode_t
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15654071 "HWC2_POWER_MODE_DOZE_SUSPEND"
	public type class_ref 4386615 // hwc2_power_mode_t
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15654199 "HWC2_POWER_MODE_ON"
	public type class_ref 4386615 // hwc2_power_mode_t
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4386743 "hwc2_vsync_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The display is fully off (blanked) 
 These are optional low power modes. getDozeSupport may be called to
determine whether a given display supports these modes. 
 The display is turned on and configured in a low power state that is
suitable for presenting ambient information to the user, possibly with
lower fidelity than HWC2_POWER_MODE_ON, but with greater efficiency. 
 The display is configured as in HWC2_POWER_MODE_DOZE but may stop
applying display updates from the client. This is effectively a hint to
the device that drawing to the display has been suspended and that the
the device should remain on in a low power state and continue displaying
its current contents indefinitely until the power mode changes.

This mode may also be used as a signal to enable hardware-based doze
functionality. In this case, the device is free to take over the display
and manage it autonomously to implement a low power always-on display. 
 The display is fully on 
 Vsync values passed to setVsyncEnabled "
      attribute 15654327 "HWC2_VSYNC_INVALID"
	public type class_ref 4386743 // hwc2_vsync_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15654455 "HWC2_VSYNC_ENABLE"
	public type class_ref 4386743 // hwc2_vsync_t
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15654583 "HWC2_VSYNC_DISABLE"
	public type class_ref 4386743 // hwc2_vsync_t
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4386871 "hwc2_callback_data_t"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}*  ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4386999 "hwc2_config_t"
      visibility package stereotype "typedef" explicit_base_type "uint32_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4387127 "hwc2_display_t"
      visibility package stereotype "typedef" explicit_base_type "uint64_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4387255 "hwc2_layer_t"
      visibility package stereotype "typedef" explicit_base_type "uint64_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4387383 "hwc2_device"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Device Struct
"
      classrelation 8381495 // common (<directional composition>)
	relation 8381495 *-->
	  a role_name "common" public
	    comment " Must be the first member of this struct, since a pointer to this struct
will be generated by casting from a hw_device_t* 
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8381495 // common (<directional composition>)
	  b parent class_ref 4305975 // hw_device_t
      end

      attribute 15654711 "getCapabilities"
	public explicit_type "/* getCapabilities(..., outCount, outCapabilities) * * Provides a list of capabilities (described in the definition of * hwc2_capability_t above) supported by this device. This list must * not change after the device has been loaded. * * Parameters: * outCount - if outCapabilities was NULL, the number of capabilities * which would have been returned; if outCapabilities was not NULL, * the number of capabilities returned, which must not exceed the * value stored in outCount prior to the call * outCapabilities - a list of capabilities supported by this device; may * be NULL, in which case this function must write into outCount the * number of capabilities which would have been written into * outCapabilities */ void (*)(struct hwc2_device* device, uint32_t* outCount, int32_t* /*hwc2_capability_t*/ outCapabilities)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* getCapabilities(..., outCount, outCapabilities)
     *
     * Provides a list of capabilities (described in the definition of
     * hwc2_capability_t above) supported by this device. This list must
     * not change after the device has been loaded.
     *
     * Parameters:
     *   outCount - if outCapabilities was NULL, the number of capabilities
     *       which would have been returned; if outCapabilities was not NULL,
     *       the number of capabilities returned, which must not exceed the
     *       value stored in outCount prior to the call
     *   outCapabilities - a list of capabilities supported by this device; may
     *       be NULL, in which case this function must write into outCount the
     *       number of capabilities which would have been written into
     *       outCapabilities
     */
    void (*${name})(struct hwc2_device* device, uint32_t* outCount,
            int32_t* /*hwc2_capability_t*/ outCapabilities)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " getCapabilities(..., outCount, outCapabilities)

Provides a list of capabilities (described in the definition of
hwc2_capability_t above) supported by this device. This list must
not change after the device has been loaded.

Parameters:
  outCount - if outCapabilities was NULL, the number of capabilities
      which would have been returned; if outCapabilities was not NULL,
      the number of capabilities returned, which must not exceed the
      value stored in outCount prior to the call
  outCapabilities - a list of capabilities supported by this device; may
      be NULL, in which case this function must write into outCount the
      number of capabilities which would have been written into
      outCapabilities

"
      end

      attribute 15654839 "getFunction"
	public explicit_type "/* getFunction(..., descriptor) * * Returns a function pointer which implements the requested description. * * Parameters: * descriptor - the function to return * * Returns either a function pointer implementing the requested descriptor * or NULL if the described function is not supported by this device. */ hwc2_function_pointer_t (*)(struct hwc2_device* device, int32_t /*hwc2_function_descriptor_t*/ descriptor)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* getFunction(..., descriptor)
     *
     * Returns a function pointer which implements the requested description.
     *
     * Parameters:
     *   descriptor - the function to return
     *
     * Returns either a function pointer implementing the requested descriptor
     *   or NULL if the described function is not supported by this device.
     */
    hwc2_function_pointer_t (*${name})(struct hwc2_device* device,
            int32_t /*hwc2_function_descriptor_t*/ descriptor)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " getFunction(..., descriptor)

Returns a function pointer which implements the requested description.

Parameters:
  descriptor - the function to return

Returns either a function pointer implementing the requested descriptor
  or NULL if the described function is not supported by this device.

"
      end
    end

    class 4387511 "hwc2_device_t"
      visibility package stereotype "typedef" base_type class_ref 4387383 // hwc2_device
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4387639 "HWC2_PFN_HOTPLUG"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(hwc2_callback_data_t callbackData,
        hwc2_display_t display, int32_t /*hwc2_connection_t*/ connected);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Callbacks

All of these callbacks take as their first parameter the callbackData which
was provided at the time of callback registration, so this parameter is
omitted from the described parameter lists.

 hotplug(..., display, connected)
Descriptor: HWC2_CALLBACK_HOTPLUG
Will be provided to all HWC2 devices

Notifies the client that the given display has either been connected or
disconnected. Every active display (even a built-in physical display) must
trigger at least one hotplug notification, even if it only occurs immediately
after callback registration.

The client may call back into the device on the same thread to query display
properties (such as width, height, and vsync period), and other threads may
call into the device while the callback is in progress. The device must
serialize calls to this callback such that only one thread is calling it at a
time.

Displays which have been connected are assumed to be in HWC2_POWER_MODE_OFF,
and the vsync callback should not be called for a display until vsync has
been enabled with setVsyncEnabled.

Parameters:
  display - the display which has been hotplugged
  connected - whether the display has been connected or disconnected
"
    end

    class 4387767 "HWC2_PFN_REFRESH"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(hwc2_callback_data_t callbackData,
        hwc2_display_t display);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " refresh(..., display)
Descriptor: HWC2_CALLBACK_REFRESH
Will be provided to all HWC2 devices

Notifies the client to trigger a screen refresh. This forces all layer state
for this display to be resent, and the display to be validated and presented,
even if there have been no changes.

This refresh will occur some time after the callback is initiated, but not
necessarily before it returns. This thread, however, is guaranteed not to
call back into the device, thus it is safe to trigger this callback from
other functions which call into the device.

Parameters:
  display - the display to refresh
"
    end

    class 4387895 "HWC2_PFN_VSYNC"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(hwc2_callback_data_t callbackData,
        hwc2_display_t display, int64_t timestamp);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " vsync(..., display, timestamp)
Descriptor: HWC2_CALLBACK_VSYNC
Will be provided to all HWC2 devices

Notifies the client that a vsync event has occurred. This callback must
only be triggered when vsync is enabled for this display (through
setVsyncEnabled).

This callback should be triggered from a thread of at least
HAL_PRIORITY_URGENT_DISPLAY with as little latency as possible, typically
less than 0.5 ms. This thread is guaranteed not to call back into the device.

Parameters:
  display - the display which has received a vsync event
  timestamp - the CLOCK_MONOTONIC time at which the vsync event occurred, in
      nanoseconds
"
    end

    class 4388023 "HWC2_PFN_CREATE_VIRTUAL_DISPLAY"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, uint32_t width, uint32_t height,
        int32_t* /*android_pixel_format_t*/ format, hwc2_display_t* outDisplay);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Device Functions

All of these functions take as their first parameter a device pointer, so
this parameter is omitted from the described parameter lists.

 createVirtualDisplay(..., width, height, format, outDisplay)
Descriptor: HWC2_FUNCTION_CREATE_VIRTUAL_DISPLAY
Must be provided by all HWC2 devices

Creates a new virtual display with the given width and height. The format
passed into this function is the default format requested by the consumer of
the virtual display output buffers. If a different format will be returned by
the device, it should be returned in this parameter so it can be set properly
when handing the buffers to the consumer.

The display will be assumed to be on from the time the first frame is
presented until the display is destroyed.

Parameters:
  width - width in pixels
  height - height in pixels
  format - prior to the call, the default output buffer format selected by
      the consumer; after the call, the format the device will produce
  outDisplay - the newly-created virtual display; pointer will be non-NULL

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_UNSUPPORTED - the width or height is too large for the device to
      be able to create a virtual display
  HWC2_ERROR_NO_RESOURCES - the device is unable to create a new virtual
      display at this time
"
    end

    class 4388151 "HWC2_PFN_DESTROY_VIRTUAL_DISPLAY"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " destroyVirtualDisplay(..., display)
Descriptor: HWC2_FUNCTION_DESTROY_VIRTUAL_DISPLAY
Must be provided by all HWC2 devices

Destroys a virtual display. After this call all resources consumed by this
display may be freed by the device and any operations performed on this
display should fail.

Parameters:
  display - the virtual display to destroy

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_DISPLAY - an invalid display handle was passed in
  HWC2_ERROR_BAD_PARAMETER - the display handle which was passed in does not
      refer to a virtual display
"
    end

    class 4388279 "HWC2_PFN_DUMP"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(hwc2_device_t* device, uint32_t* outSize,
        char* outBuffer);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " dump(..., outSize, outBuffer)
Descriptor: HWC2_FUNCTION_DUMP
Must be provided by all HWC2 devices

Retrieves implementation-defined debug information, which will be displayed
during, for example, `dumpsys SurfaceFlinger`.

If called with outBuffer == NULL, the device should store a copy of the
desired output and return its length in bytes in outSize. If the device
already has a stored copy, that copy should be purged and replaced with a
fresh copy.

If called with outBuffer != NULL, the device should copy its stored version
of the output into outBuffer and store how many bytes of data it copied into
outSize. Prior to this call, the client will have populated outSize with the
maximum number of bytes outBuffer can hold. The device must not write more
than this amount into outBuffer. If the device does not currently have a
stored copy, then it should return 0 in outSize.

Any data written into outBuffer need not be null-terminated.

Parameters:
  outSize - if outBuffer was NULL, the number of bytes needed to copy the
      device's stored output; if outBuffer was not NULL, the number of bytes
      written into it, which must not exceed the value stored in outSize
      prior to the call; pointer will be non-NULL
  outBuffer - the buffer to write the dump output into; may be NULL as
      described above; data written into this buffer need not be
      null-terminated
"
    end

    class 4388407 "HWC2_PFN_GET_MAX_VIRTUAL_DISPLAY_COUNT"
      visibility package stereotype "typedef" explicit_base_type "uint32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " getMaxVirtualDisplayCount(...)
Descriptor: HWC2_FUNCTION_GET_MAX_VIRTUAL_DISPLAY_COUNT
Must be provided by all HWC2 devices

Returns the maximum number of virtual displays supported by this device
(which may be 0). The client will not attempt to create more than this many
virtual displays on this device. This number must not change for the lifetime
of the device.
"
    end

    class 4388535 "HWC2_PFN_REGISTER_CALLBACK"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device,
        int32_t /*hwc2_callback_descriptor_t*/ descriptor,
        hwc2_callback_data_t callbackData, hwc2_function_pointer_t pointer);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " registerCallback(..., descriptor, callbackData, pointer)
Descriptor: HWC2_FUNCTION_REGISTER_CALLBACK
Must be provided by all HWC2 devices

Provides a callback for the device to call. All callbacks take a callbackData
item as the first parameter, so this value should be stored with the callback
for later use. The callbackData may differ from one callback to another. If
this function is called multiple times with the same descriptor, later
callbacks replace earlier ones.

Parameters:
  descriptor - which callback should be set
  callBackdata - opaque data which must be passed back through the callback
  pointer - a non-NULL function pointer corresponding to the descriptor

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_PARAMETER - descriptor was invalid
"
    end

    class 4388663 "HWC2_PFN_ACCEPT_DISPLAY_CHANGES"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Display Functions

All of these functions take as their first two parameters a device pointer
and a display handle, so these parameters are omitted from the described
parameter lists.

 acceptDisplayChanges(...)
Descriptor: HWC2_FUNCTION_ACCEPT_DISPLAY_CHANGES
Must be provided by all HWC2 devices

Accepts the changes required by the device from the previous validateDisplay
call (which may be queried using getChangedCompositionTypes) and revalidates
the display. This function is equivalent to requesting the changed types from
getChangedCompositionTypes, setting those types on the corresponding layers,
and then calling validateDisplay again.

After this call it must be valid to present this display. Calling this after
validateDisplay returns 0 changes must succeed with HWC2_ERROR_NONE, but
should have no other effect.

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_DISPLAY - an invalid display handle was passed in
  HWC2_ERROR_NOT_VALIDATED - validateDisplay has not been called
"
    end

    class 4388791 "HWC2_PFN_CREATE_LAYER"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(hwc2_device_t* device,
        hwc2_display_t display, hwc2_layer_t* outLayer);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " createLayer(..., outLayer)
Descriptor: HWC2_FUNCTION_CREATE_LAYER
Must be provided by all HWC2 devices

Creates a new layer on the given display.

Parameters:
  outLayer - the handle of the new layer; pointer will be non-NULL

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_DISPLAY - an invalid display handle was passed in
  HWC2_ERROR_NO_RESOURCES - the device was unable to create this layer
"
    end

    class 4388919 "HWC2_PFN_DESTROY_LAYER"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display, hwc2_layer_t layer);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " destroyLayer(..., layer)
Descriptor: HWC2_FUNCTION_DESTROY_LAYER
Must be provided by all HWC2 devices

Destroys the given layer.

Parameters:
  layer - the handle of the layer to destroy

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_DISPLAY - an invalid display handle was passed in
  HWC2_ERROR_BAD_LAYER - an invalid layer handle was passed in
"
    end

    class 4389047 "HWC2_PFN_GET_ACTIVE_CONFIG"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display,
        hwc2_config_t* outConfig);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " getActiveConfig(..., outConfig)
Descriptor: HWC2_FUNCTION_GET_ACTIVE_CONFIG
Must be provided by all HWC2 devices

Retrieves which display configuration is currently active.

If no display configuration is currently active, this function must return
HWC2_ERROR_BAD_CONFIG and place no configuration handle in outConfig. It is
the responsibility of the client to call setActiveConfig with a valid
configuration before attempting to present anything on the display.

Parameters:
  outConfig - the currently active display configuration; pointer will be
      non-NULL

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_DISPLAY - an invalid display handle was passed in
  HWC2_ERROR_BAD_CONFIG - no configuration is currently active
"
    end

    class 4389175 "HWC2_PFN_GET_CHANGED_COMPOSITION_TYPES"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display,
        uint32_t* outNumElements, hwc2_layer_t* outLayers,
        int32_t* /*hwc2_composition_t*/ outTypes);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " getChangedCompositionTypes(..., outNumElements, outLayers, outTypes)
Descriptor: HWC2_FUNCTION_GET_CHANGED_COMPOSITION_TYPES
Must be provided by all HWC2 devices

Retrieves the layers for which the device requires a different composition
type than had been set prior to the last call to validateDisplay. The client
will either update its state with these types and call acceptDisplayChanges,
or will set new types and attempt to validate the display again.

outLayers and outTypes may be NULL to retrieve the number of elements which
will be returned. The number of elements returned must be the same as the
value returned in outNumTypes from the last call to validateDisplay.

Parameters:
  outNumElements - if outLayers or outTypes were NULL, the number of layers
      and types which would have been returned; if both were non-NULL, the
      number of elements returned in outLayers and outTypes, which must not
      exceed the value stored in outNumElements prior to the call; pointer
      will be non-NULL
  outLayers - an array of layer handles
  outTypes - an array of composition types, each corresponding to an element
      of outLayers

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_DISPLAY - an invalid display handle was passed in
  HWC2_ERROR_NOT_VALIDATED - validateDisplay has not been called for this
      display
"
    end

    class 4389303 "HWC2_PFN_GET_CLIENT_TARGET_SUPPORT"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display, uint32_t width,
        uint32_t height, int32_t /*android_pixel_format_t*/ format,
        int32_t /*android_dataspace_t*/ dataspace);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " getClientTargetSupport(..., width, height, format, dataspace)
Descriptor: HWC2_FUNCTION_GET_CLIENT_TARGET_SUPPORT
Must be provided by all HWC2 devices

Returns whether a client target with the given properties can be handled by
the device.

The valid formats can be found in android_pixel_format_t in
<system/graphics.h>.

For more about dataspaces, see setLayerDataspace.

This function must return true for a client target with width and height
equal to the active display configuration dimensions,
HAL_PIXEL_FORMAT_RGBA_8888, and HAL_DATASPACE_UNKNOWN. It is not required to
return true for any other configuration.

Parameters:
  width - client target width in pixels
  height - client target height in pixels
  format - client target format
  dataspace - client target dataspace, as described in setLayerDataspace

Returns HWC2_ERROR_NONE if the given configuration is supported or one of the
following errors:
  HWC2_ERROR_BAD_DISPLAY - an invalid display handle was passed in
  HWC2_ERROR_UNSUPPORTED - the given configuration is not supported
"
    end

    class 4389431 "HWC2_PFN_GET_COLOR_MODES"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display, uint32_t* outNumModes,
        int32_t* /*android_color_mode_t*/ outModes);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " getColorModes(..., outNumModes, outModes)
Descriptor: HWC2_FUNCTION_GET_COLOR_MODES
Must be provided by all HWC2 devices

Returns the color modes supported on this display.

The valid color modes can be found in android_color_mode_t in
<system/graphics.h>. All HWC2 devices must support at least
HAL_COLOR_MODE_NATIVE.

outNumModes may be NULL to retrieve the number of modes which will be
returned.

Parameters:
  outNumModes - if outModes was NULL, the number of modes which would have
      been returned; if outModes was not NULL, the number of modes returned,
      which must not exceed the value stored in outNumModes prior to the
      call; pointer will be non-NULL
  outModes - an array of color modes

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_DISPLAY - an invalid display handle was passed in
"
    end

    class 4389559 "HWC2_PFN_GET_DISPLAY_ATTRIBUTE"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display, hwc2_config_t config,
        int32_t /*hwc2_attribute_t*/ attribute, int32_t* outValue);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " getDisplayAttribute(..., config, attribute, outValue)
Descriptor: HWC2_FUNCTION_GET_DISPLAY_ATTRIBUTE
Must be provided by all HWC2 devices

Returns a display attribute value for a particular display configuration.

Any attribute which is not supported or for which the value is unknown by the
device must return a value of -1.

Parameters:
  config - the display configuration for which to return attribute values
  attribute - the attribute to query
  outValue - the value of the attribute; the pointer will be non-NULL

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_DISPLAY - an invalid display handle was passed in
  HWC2_ERROR_BAD_CONFIG - config does not name a valid configuration for this
      display
"
    end

    class 4389687 "HWC2_PFN_GET_DISPLAY_CONFIGS"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display, uint32_t* outNumConfigs,
        hwc2_config_t* outConfigs);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " getDisplayConfigs(..., outNumConfigs, outConfigs)
Descriptor: HWC2_FUNCTION_GET_DISPLAY_CONFIGS
Must be provided by all HWC2 devices

Returns handles for all of the valid display configurations on this display.

outConfigs may be NULL to retrieve the number of elements which will be
returned.

Parameters:
  outNumConfigs - if outConfigs was NULL, the number of configurations which
      would have been returned; if outConfigs was not NULL, the number of
      configurations returned, which must not exceed the value stored in
      outNumConfigs prior to the call; pointer will be non-NULL
  outConfigs - an array of configuration handles

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_DISPLAY - an invalid display handle was passed in
"
    end

    class 4389815 "HWC2_PFN_GET_DISPLAY_NAME"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display, uint32_t* outSize,
        char* outName);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " getDisplayName(..., outSize, outName)
Descriptor: HWC2_FUNCTION_GET_DISPLAY_NAME
Must be provided by all HWC2 devices

Returns a human-readable version of the display's name.

outName may be NULL to retrieve the length of the name.

Parameters:
  outSize - if outName was NULL, the number of bytes needed to return the
      name if outName was not NULL, the number of bytes written into it,
      which must not exceed the value stored in outSize prior to the call;
      pointer will be non-NULL
  outName - the display's name

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_DISPLAY - an invalid display handle was passed in
"
    end

    class 4389943 "HWC2_PFN_GET_DISPLAY_REQUESTS"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display,
        int32_t* /*hwc2_display_request_t*/ outDisplayRequests,
        uint32_t* outNumElements, hwc2_layer_t* outLayers,
        int32_t* /*hwc2_layer_request_t*/ outLayerRequests);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " getDisplayRequests(..., outDisplayRequests, outNumElements, outLayers,
    outLayerRequests)
Descriptor: HWC2_FUNCTION_GET_DISPLAY_REQUESTS
Must be provided by all HWC2 devices

Returns the display requests and the layer requests required for the last
validated configuration.

Display requests provide information about how the client should handle the
client target. Layer requests provide information about how the client
should handle an individual layer.

If outLayers or outLayerRequests is NULL, the required number of layers and
requests must be returned in outNumElements, but this number may also be
obtained from validateDisplay as outNumRequests (outNumElements must be equal
to the value returned in outNumRequests from the last call to
validateDisplay).

Parameters:
  outDisplayRequests - the display requests for the current validated state
  outNumElements - if outLayers or outLayerRequests were NULL, the number of
      elements which would have been returned, which must be equal to the
      value returned in outNumRequests from the last validateDisplay call on
      this display; if both were not NULL, the number of elements in
      outLayers and outLayerRequests, which must not exceed the value stored
      in outNumElements prior to the call; pointer will be non-NULL
  outLayers - an array of layers which all have at least one request
  outLayerRequests - the requests corresponding to each element of outLayers

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_DISPLAY - an invalid display handle was passed in
  HWC2_ERROR_NOT_VALIDATED - validateDisplay has not been called for this
      display
"
    end

    class 4390071 "HWC2_PFN_GET_DISPLAY_TYPE"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display,
        int32_t* /*hwc2_display_type_t*/ outType);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " getDisplayType(..., outType)
Descriptor: HWC2_FUNCTION_GET_DISPLAY_TYPE
Must be provided by all HWC2 devices

Returns whether the given display is a physical or virtual display.

Parameters:
  outType - the type of the display; pointer will be non-NULL

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_DISPLAY - an invalid display handle was passed in
"
    end

    class 4390199 "HWC2_PFN_GET_DOZE_SUPPORT"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display, int32_t* outSupport);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " getDozeSupport(..., outSupport)
Descriptor: HWC2_FUNCTION_GET_DOZE_SUPPORT
Must be provided by all HWC2 devices

Returns whether the given display supports HWC2_POWER_MODE_DOZE and
HWC2_POWER_MODE_DOZE_SUSPEND. DOZE_SUSPEND may not provide any benefit over
DOZE (see the definition of hwc2_power_mode_t for more information), but if
both DOZE and DOZE_SUSPEND are no different from HWC2_POWER_MODE_ON, the
device should not claim support.

Parameters:
  outSupport - whether the display supports doze modes (1 for yes, 0 for no);
      pointer will be non-NULL

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_DISPLAY - an invalid display handle was passed in
"
    end

    class 4390327 "HWC2_PFN_GET_HDR_CAPABILITIES"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display, uint32_t* outNumTypes,
        int32_t* /*android_hdr_t*/ outTypes, float* outMaxLuminance,
        float* outMaxAverageLuminance, float* outMinLuminance);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " getHdrCapabilities(..., outNumTypes, outTypes, outMaxLuminance,
    outMaxAverageLuminance, outMinLuminance)
Descriptor: HWC2_FUNCTION_GET_HDR_CAPABILITIES
Must be provided by all HWC2 devices

Returns the high dynamic range (HDR) capabilities of the given display, which
are invariant with regard to the active configuration.

Displays which are not HDR-capable must return no types in outTypes and set
outNumTypes to 0.

If outTypes is NULL, the required number of HDR types must be returned in
outNumTypes.

Parameters:
  outNumTypes - if outTypes was NULL, the number of types which would have
      been returned; if it was not NULL, the number of types stored in
      outTypes, which must not exceed the value stored in outNumTypes prior
      to the call; pointer will be non-NULL
  outTypes - an array of HDR types, may have 0 elements if the display is not
      HDR-capable
  outMaxLuminance - the desired content maximum luminance for this display in
      cd/m^2; pointer will be non-NULL
  outMaxAverageLuminance - the desired content maximum frame-average
      luminance for this display in cd/m^2; pointer will be non-NULL
  outMinLuminance - the desired content minimum luminance for this display in
      cd/m^2; pointer will be non-NULL

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_DISPLAY - an invalid display handle was passed in
"
    end

    class 4390455 "HWC2_PFN_GET_RELEASE_FENCES"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display, uint32_t* outNumElements,
        hwc2_layer_t* outLayers, int32_t* outFences);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " getReleaseFences(..., outNumElements, outLayers, outFences)
Descriptor: HWC2_FUNCTION_GET_RELEASE_FENCES
Must be provided by all HWC2 devices

Retrieves the release fences for device layers on this display which will
receive new buffer contents this frame.

A release fence is a file descriptor referring to a sync fence object which
will be signaled after the device has finished reading from the buffer
presented in the prior frame. This indicates that it is safe to start writing
to the buffer again. If a given layer's fence is not returned from this
function, it will be assumed that the buffer presented on the previous frame
is ready to be written.

The fences returned by this function should be unique for each layer (even if
they point to the same underlying sync object), and ownership of the fences
is transferred to the client, which is responsible for closing them.

If outLayers or outFences is NULL, the required number of layers and fences
must be returned in outNumElements.

Parameters:
  outNumElements - if outLayers or outFences were NULL, the number of
      elements which would have been returned; if both were not NULL, the
      number of elements in outLayers and outFences, which must not exceed
      the value stored in outNumElements prior to the call; pointer will be
      non-NULL
  outLayers - an array of layer handles
  outFences - an array of sync fence file descriptors as described above,
      each corresponding to an element of outLayers

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_DISPLAY - an invalid display handle was passed in
"
    end

    class 4390583 "HWC2_PFN_PRESENT_DISPLAY"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display, int32_t* outRetireFence);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " presentDisplay(..., outRetireFence)
Descriptor: HWC2_FUNCTION_PRESENT_DISPLAY
Must be provided by all HWC2 devices

Presents the current display contents on the screen (or in the case of
virtual displays, into the output buffer).

Prior to calling this function, the display must be successfully validated
with validateDisplay. Note that setLayerBuffer and setLayerSurfaceDamage
specifically do not count as layer state, so if there are no other changes
to the layer state (or to the buffer's properties as described in
setLayerBuffer), then it is safe to call this function without first
validating the display.

If this call succeeds, outRetireFence will be populated with a file
descriptor referring to a retire sync fence object. For physical displays,
this fence will be signaled when the result of composition of the prior frame
is no longer necessary (because it has been copied or replaced by this
frame). For virtual displays, this fence will be signaled when writes to the
output buffer have completed and it is safe to read from it.

Parameters:
  outRetireFence - a sync fence file descriptor as described above; pointer
      will be non-NULL

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_DISPLAY - an invalid display handle was passed in
  HWC2_ERROR_NO_RESOURCES - no valid output buffer has been set for a virtual
      display
  HWC2_ERROR_NOT_VALIDATED - validateDisplay has not successfully been called
      for this display
"
    end

    class 4390711 "HWC2_PFN_SET_ACTIVE_CONFIG"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display, hwc2_config_t config);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " setActiveConfig(..., config)
Descriptor: HWC2_FUNCTION_SET_ACTIVE_CONFIG
Must be provided by all HWC2 devices

Sets the active configuration for this display. Upon returning, the given
display configuration should be active and remain so until either this
function is called again or the display is disconnected.

Parameters:
  config - the new display configuration

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_DISPLAY - an invalid display handle was passed in
  HWC2_ERROR_BAD_CONFIG - the configuration handle passed in is not valid for
      this display
"
    end

    class 4390839 "HWC2_PFN_SET_CLIENT_TARGET"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display, buffer_handle_t target,
        int32_t acquireFence, int32_t /*android_dataspace_t*/ dataspace,
        hwc_region_t damage);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " setClientTarget(..., target, acquireFence, dataspace, damage)
Descriptor: HWC2_FUNCTION_SET_CLIENT_TARGET
Must be provided by all HWC2 devices

Sets the buffer handle which will receive the output of client composition.
Layers marked as HWC2_COMPOSITION_CLIENT will be composited into this buffer
prior to the call to presentDisplay, and layers not marked as
HWC2_COMPOSITION_CLIENT should be composited with this buffer by the device.

The buffer handle provided may be null if no layers are being composited by
the client. This must not result in an error (unless an invalid display
handle is also provided).

Also provides a file descriptor referring to an acquire sync fence object,
which will be signaled when it is safe to read from the client target buffer.
If it is already safe to read from this buffer, -1 may be passed instead.
The device must ensure that it is safe for the client to close this file
descriptor at any point after this function is called.

For more about dataspaces, see setLayerDataspace.

The damage parameter describes a surface damage region as defined in the
description of setLayerSurfaceDamage.

Will be called before presentDisplay if any of the layers are marked as
HWC2_COMPOSITION_CLIENT. If no layers are so marked, then it is not
necessary to call this function. It is not necessary to call validateDisplay
after changing the target through this function.

Parameters:
  target - the new target buffer
  acquireFence - a sync fence file descriptor as described above
  dataspace - the dataspace of the buffer, as described in setLayerDataspace
  damage - the surface damage region

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_DISPLAY - an invalid display handle was passed in
  HWC2_ERROR_BAD_PARAMETER - the new target handle was invalid
"
    end

    class 4390967 "HWC2_PFN_SET_COLOR_MODE"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display,
        int32_t /*android_color_mode_t*/ mode);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " setColorMode(..., mode)
Descriptor: HWC2_FUNCTION_SET_COLOR_MODE
Must be provided by all HWC2 devices

Sets the color mode of the given display.

Upon returning from this function, the color mode change must have fully
taken effect.

The valid color modes can be found in android_color_mode_t in
<system/graphics.h>. All HWC2 devices must support at least
HAL_COLOR_MODE_NATIVE, and displays are assumed to be in this mode upon
hotplug.

Parameters:
  mode - the mode to set

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_DISPLAY - an invalid display handle was passed in
  HWC2_ERROR_BAD_PARAMETER - mode is not a valid color mode
  HWC2_ERROR_UNSUPPORTED - mode is not supported on this display
"
    end

    class 4391095 "HWC2_PFN_SET_COLOR_TRANSFORM"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display, const float* matrix,
        int32_t /*android_color_transform_t*/ hint);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " setColorTransform(..., matrix, hint)
Descriptor: HWC2_FUNCTION_SET_COLOR_TRANSFORM
Must be provided by all HWC2 devices

Sets a color transform which will be applied after composition.

If hint is not HAL_COLOR_TRANSFORM_ARBITRARY, then the device may use the
hint to apply the desired color transform instead of using the color matrix
directly.

If the device is not capable of either using the hint or the matrix to apply
the desired color transform, it should force all layers to client composition
during validateDisplay.

The matrix provided is an affine color transformation of the following form:

|r.r r.g r.b 0|
|g.r g.g g.b 0|
|b.r b.g b.b 0|
|Tr  Tg  Tb  1|

This matrix will be provided in row-major form: {r.r, r.g, r.b, 0, g.r, ...}.

Given a matrix of this form and an input color [R_in, G_in, B_in], the output
color [R_out, G_out, B_out] will be:

R_out = R_in * r.r + G_in * g.r + B_in * b.r + Tr
G_out = R_in * r.g + G_in * g.g + B_in * b.g + Tg
B_out = R_in * r.b + G_in * g.b + B_in * b.b + Tb

Parameters:
  matrix - a 4x4 transform matrix (16 floats) as described above
  hint - a hint value which may be used instead of the given matrix unless it
      is HAL_COLOR_TRANSFORM_ARBITRARY

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_DISPLAY - an invalid display handle was passed in
  HWC2_ERROR_BAD_PARAMETER - hint is not a valid color transform hint
"
    end

    class 4391223 "HWC2_PFN_SET_OUTPUT_BUFFER"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display, buffer_handle_t buffer,
        int32_t releaseFence);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " setOutputBuffer(..., buffer, releaseFence)
Descriptor: HWC2_FUNCTION_SET_OUTPUT_BUFFER
Must be provided by all HWC2 devices

Sets the output buffer for a virtual display. That is, the buffer to which
the composition result will be written.

Also provides a file descriptor referring to a release sync fence object,
which will be signaled when it is safe to write to the output buffer. If it
is already safe to write to the output buffer, -1 may be passed instead. The
device must ensure that it is safe for the client to close this file
descriptor at any point after this function is called.

Must be called at least once before presentDisplay, but does not have any
interaction with layer state or display validation.

Parameters:
  buffer - the new output buffer
  releaseFence - a sync fence file descriptor as described above

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_DISPLAY - an invalid display handle was passed in
  HWC2_ERROR_BAD_PARAMETER - the new output buffer handle was invalid
  HWC2_ERROR_UNSUPPORTED - display does not refer to a virtual display
"
    end

    class 4391351 "HWC2_PFN_SET_POWER_MODE"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display,
        int32_t /*hwc2_power_mode_t*/ mode);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " setPowerMode(..., mode)
Descriptor: HWC2_FUNCTION_SET_POWER_MODE
Must be provided by all HWC2 devices

Sets the power mode of the given display. The transition must be complete
when this function returns. It is valid to call this function multiple times
with the same power mode.

All displays must support HWC2_POWER_MODE_ON and HWC2_POWER_MODE_OFF. Whether
a display supports HWC2_POWER_MODE_DOZE or HWC2_POWER_MODE_DOZE_SUSPEND may
be queried using getDozeSupport.

Parameters:
  mode - the new power mode

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_DISPLAY - an invalid display handle was passed in
  HWC2_ERROR_BAD_PARAMETER - mode was not a valid power mode
  HWC2_ERROR_UNSUPPORTED - mode was a valid power mode, but is not supported
      on this display
"
    end

    class 4391479 "HWC2_PFN_SET_VSYNC_ENABLED"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display,
        int32_t /*hwc2_vsync_t*/ enabled);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " setVsyncEnabled(..., enabled)
Descriptor: HWC2_FUNCTION_SET_VSYNC_ENABLED
Must be provided by all HWC2 devices

Enables or disables the vsync signal for the given display. Virtual displays
never generate vsync callbacks, and any attempt to enable vsync for a virtual
display though this function must return HWC2_ERROR_NONE and have no other
effect.

Parameters:
  enabled - whether to enable or disable vsync

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_DISPLAY - an invalid display handle was passed in
  HWC2_ERROR_BAD_PARAMETER - enabled was an invalid value
"
    end

    class 4391607 "HWC2_PFN_VALIDATE_DISPLAY"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display,
        uint32_t* outNumTypes, uint32_t* outNumRequests);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " validateDisplay(..., outNumTypes, outNumRequests)
Descriptor: HWC2_FUNCTION_VALIDATE_DISPLAY
Must be provided by all HWC2 devices

Instructs the device to inspect all of the layer state and determine if
there are any composition type changes necessary before presenting the
display. Permitted changes are described in the definition of
hwc2_composition_t above.

Also returns the number of layer requests required
by the given layer configuration.

Parameters:
  outNumTypes - the number of composition type changes required by the
      device; if greater than 0, the client must either set and validate new
      types, or call acceptDisplayChanges to accept the changes returned by
      getChangedCompositionTypes; must be the same as the number of changes
      returned by getChangedCompositionTypes (see the declaration of that
      function for more information); pointer will be non-NULL
  outNumRequests - the number of layer requests required by this layer
      configuration; must be equal to the number of layer requests returned
      by getDisplayRequests (see the declaration of that function for
      more information); pointer will be non-NULL

Returns HWC2_ERROR_NONE if no changes are necessary and it is safe to present
the display using the current layer state. Otherwise returns one of the
following errors:
  HWC2_ERROR_BAD_DISPLAY - an invalid display handle was passed in
  HWC2_ERROR_HAS_CHANGES - outNumTypes was greater than 0 (see parameter list
      for more information)
"
    end

    class 4391735 "HWC2_PFN_SET_CURSOR_POSITION"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display, hwc2_layer_t layer,
        int32_t x, int32_t y);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Layer Functions

These are functions which operate on layers, but which do not modify state
that must be validated before use. See also 'Layer State Functions' below.

All of these functions take as their first three parameters a device pointer,
a display handle for the display which contains the layer, and a layer
handle, so these parameters are omitted from the described parameter lists.

 setCursorPosition(..., x, y)
Descriptor: HWC2_FUNCTION_SET_CURSOR_POSITION
Must be provided by all HWC2 devices

Asynchonously sets the position of a cursor layer.

Prior to validateDisplay, a layer may be marked as HWC2_COMPOSITION_CURSOR.
If validation succeeds (i.e., the device does not request a composition
change for that layer), then once a buffer has been set for the layer and it
has been presented, its position may be set by this function at any time
between presentDisplay and any subsequent validateDisplay calls for this
display.

Once validateDisplay is called, this function will not be called again until
the validate/present sequence is completed.

May be called from any thread so long as it is not interleaved with the
validate/present sequence as described above.

Parameters:
  x - the new x coordinate (in pixels from the left of the screen)
  y - the new y coordinate (in pixels from the top of the screen)

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_DISPLAY - an invalid display handle was passed in
  HWC2_ERROR_BAD_LAYER - the layer is invalid or is not currently marked as
      HWC2_COMPOSITION_CURSOR
  HWC2_ERROR_NOT_VALIDATED - the device is currently in the middle of the
      validate/present sequence
"
    end

    class 4391863 "HWC2_PFN_SET_LAYER_BUFFER"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display, hwc2_layer_t layer,
        buffer_handle_t buffer, int32_t acquireFence);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " setLayerBuffer(..., buffer, acquireFence)
Descriptor: HWC2_FUNCTION_SET_LAYER_BUFFER
Must be provided by all HWC2 devices

Sets the buffer handle to be displayed for this layer. If the buffer
properties set at allocation time (width, height, format, and usage) have not
changed since the previous frame, it is not necessary to call validateDisplay
before calling presentDisplay unless new state needs to be validated in the
interim.

Also provides a file descriptor referring to an acquire sync fence object,
which will be signaled when it is safe to read from the given buffer. If it
is already safe to read from the buffer, -1 may be passed instead. The
device must ensure that it is safe for the client to close this file
descriptor at any point after this function is called.

This function must return HWC2_ERROR_NONE and have no other effect if called
for a layer with a composition type of HWC2_COMPOSITION_SOLID_COLOR (because
it has no buffer) or HWC2_COMPOSITION_SIDEBAND or HWC2_COMPOSITION_CLIENT
(because synchronization and buffer updates for these layers are handled
elsewhere).

Parameters:
  buffer - the buffer handle to set
  acquireFence - a sync fence file descriptor as described above

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_LAYER - an invalid layer handle was passed in
  HWC2_ERROR_BAD_PARAMETER - the buffer handle passed in was invalid
"
    end

    class 4391991 "HWC2_PFN_SET_LAYER_SURFACE_DAMAGE"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display, hwc2_layer_t layer,
        hwc_region_t damage);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " setLayerSurfaceDamage(..., damage)
Descriptor: HWC2_FUNCTION_SET_LAYER_SURFACE_DAMAGE
Must be provided by all HWC2 devices

Provides the region of the source buffer which has been modified since the
last frame. This region does not need to be validated before calling
presentDisplay.

Once set through this function, the damage region remains the same until a
subsequent call to this function.

If damage.numRects > 0, then it may be assumed that any portion of the source
buffer not covered by one of the rects has not been modified this frame. If
damage.numRects == 0, then the whole source buffer must be treated as if it
has been modified.

If the layer's contents are not modified relative to the prior frame, damage
will contain exactly one empty rect([0, 0, 0, 0]).

The damage rects are relative to the pre-transformed buffer, and their origin
is the top-left corner. They will not exceed the dimensions of the latched
buffer.

Parameters:
  damage - the new surface damage region

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_LAYER - an invalid layer handle was passed in
"
    end

    class 4392119 "HWC2_PFN_SET_LAYER_BLEND_MODE"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display, hwc2_layer_t layer,
        int32_t /*hwc2_blend_mode_t*/ mode);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Layer State Functions

These functions modify the state of a given layer. They do not take effect
until the display configuration is successfully validated with
validateDisplay and the display contents are presented with presentDisplay.

All of these functions take as their first three parameters a device pointer,
a display handle for the display which contains the layer, and a layer
handle, so these parameters are omitted from the described parameter lists.

 setLayerBlendMode(..., mode)
Descriptor: HWC2_FUNCTION_SET_LAYER_BLEND_MODE
Must be provided by all HWC2 devices

Sets the blend mode of the given layer.

Parameters:
  mode - the new blend mode

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_LAYER - an invalid layer handle was passed in
  HWC2_ERROR_BAD_PARAMETER - an invalid blend mode was passed in
"
    end

    class 4392247 "HWC2_PFN_SET_LAYER_COLOR"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display, hwc2_layer_t layer,
        hwc_color_t color);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " setLayerColor(..., color)
Descriptor: HWC2_FUNCTION_SET_LAYER_COLOR
Must be provided by all HWC2 devices

Sets the color of the given layer. If the composition type of the layer is
not HWC2_COMPOSITION_SOLID_COLOR, this call must return HWC2_ERROR_NONE and
have no other effect.

Parameters:
  color - the new color

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_LAYER - an invalid layer handle was passed in
"
    end

    class 4392375 "HWC2_PFN_SET_LAYER_COMPOSITION_TYPE"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display, hwc2_layer_t layer,
        int32_t /*hwc2_composition_t*/ type);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " setLayerCompositionType(..., type)
Descriptor: HWC2_FUNCTION_SET_LAYER_COMPOSITION_TYPE
Must be provided by all HWC2 devices

Sets the desired composition type of the given layer. During validateDisplay,
the device may request changes to the composition types of any of the layers
as described in the definition of hwc2_composition_t above.

Parameters:
  type - the new composition type

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_LAYER - an invalid layer handle was passed in
  HWC2_ERROR_BAD_PARAMETER - an invalid composition type was passed in
  HWC2_ERROR_UNSUPPORTED - a valid composition type was passed in, but it is
      not supported by this device
"
    end

    class 4392503 "HWC2_PFN_SET_LAYER_DATASPACE"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display, hwc2_layer_t layer,
        int32_t /*android_dataspace_t*/ dataspace);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " setLayerDataspace(..., dataspace)
Descriptor: HWC2_FUNCTION_SET_LAYER_DATASPACE
Must be provided by all HWC2 devices

Sets the dataspace that the current buffer on this layer is in.

The dataspace provides more information about how to interpret the buffer
contents, such as the encoding standard and color transform.

See the values of android_dataspace_t in <system/graphics.h> for more
information.

Parameters:
  dataspace - the new dataspace

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_LAYER - an invalid layer handle was passed in
"
    end

    class 4392631 "HWC2_PFN_SET_LAYER_DISPLAY_FRAME"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display, hwc2_layer_t layer,
        hwc_rect_t frame);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " setLayerDisplayFrame(..., frame)
Descriptor: HWC2_FUNCTION_SET_LAYER_DISPLAY_FRAME
Must be provided by all HWC2 devices

Sets the display frame (the portion of the display covered by a layer) of the
given layer. This frame will not exceed the display dimensions.

Parameters:
  frame - the new display frame

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_LAYER - an invalid layer handle was passed in
"
    end

    class 4392759 "HWC2_PFN_SET_LAYER_PLANE_ALPHA"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display, hwc2_layer_t layer,
        float alpha);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " setLayerPlaneAlpha(..., alpha)
Descriptor: HWC2_FUNCTION_SET_LAYER_PLANE_ALPHA
Must be provided by all HWC2 devices

Sets an alpha value (a floating point value in the range [0.0, 1.0]) which
will be applied to the whole layer. It can be conceptualized as a
preprocessing step which applies the following function:
  if (blendMode == HWC2_BLEND_MODE_PREMULTIPLIED)
      out.rgb = in.rgb * planeAlpha
  out.a = in.a * planeAlpha

If the device does not support this operation on a layer which is marked
HWC2_COMPOSITION_DEVICE, it must request a composition type change to
HWC2_COMPOSITION_CLIENT upon the next validateDisplay call.

Parameters:
  alpha - the plane alpha value to apply

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_LAYER - an invalid layer handle was passed in
"
    end

    class 4392887 "HWC2_PFN_SET_LAYER_SIDEBAND_STREAM"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display, hwc2_layer_t layer,
        const native_handle_t* stream);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " setLayerSidebandStream(..., stream)
Descriptor: HWC2_FUNCTION_SET_LAYER_SIDEBAND_STREAM
Provided by HWC2 devices which support HWC2_CAPABILITY_SIDEBAND_STREAM

Sets the sideband stream for this layer. If the composition type of the given
layer is not HWC2_COMPOSITION_SIDEBAND, this call must return HWC2_ERROR_NONE
and have no other effect.

Parameters:
  stream - the new sideband stream

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_LAYER - an invalid layer handle was passed in
  HWC2_ERROR_BAD_PARAMETER - an invalid sideband stream was passed in
"
    end

    class 4393015 "HWC2_PFN_SET_LAYER_SOURCE_CROP"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display, hwc2_layer_t layer,
        hwc_frect_t crop);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " setLayerSourceCrop(..., crop)
Descriptor: HWC2_FUNCTION_SET_LAYER_SOURCE_CROP
Must be provided by all HWC2 devices

Sets the source crop (the portion of the source buffer which will fill the
display frame) of the given layer. This crop rectangle will not exceed the
dimensions of the latched buffer.

If the device is not capable of supporting a true float source crop (i.e., it
will truncate or round the floats to integers), it should set this layer to
HWC2_COMPOSITION_CLIENT when crop is non-integral for the most accurate
rendering.

If the device cannot support float source crops, but still wants to handle
the layer, it should use the following code (or similar) to convert to
an integer crop:
  intCrop.left = (int) ceilf(crop.left);
  intCrop.top = (int) ceilf(crop.top);
  intCrop.right = (int) floorf(crop.right);
  intCrop.bottom = (int) floorf(crop.bottom);

Parameters:
  crop - the new source crop

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_LAYER - an invalid layer handle was passed in
"
    end

    class 4393143 "HWC2_PFN_SET_LAYER_TRANSFORM"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display, hwc2_layer_t layer,
        int32_t /*hwc_transform_t*/ transform);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " setLayerTransform(..., transform)
Descriptor: HWC2_FUNCTION_SET_LAYER_TRANSFORM
Must be provided by all HWC2 devices

Sets the transform (rotation/flip) of the given layer.

Parameters:
  transform - the new transform

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_LAYER - an invalid layer handle was passed in
  HWC2_ERROR_BAD_PARAMETER - an invalid transform was passed in
"
    end

    class 4393271 "HWC2_PFN_SET_LAYER_VISIBLE_REGION"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display, hwc2_layer_t layer,
        hwc_region_t visible);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " setLayerVisibleRegion(..., visible)
Descriptor: HWC2_FUNCTION_SET_LAYER_VISIBLE_REGION
Must be provided by all HWC2 devices

Specifies the portion of the layer that is visible, including portions under
translucent areas of other layers. The region is in screen space, and will
not exceed the dimensions of the screen.

Parameters:
  visible - the new visible region, in screen space

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_LAYER - an invalid layer handle was passed in
"
    end

    class 4393399 "HWC2_PFN_SET_LAYER_Z_ORDER"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(
        hwc2_device_t* device, hwc2_display_t display, hwc2_layer_t layer,
        uint32_t z);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " setLayerZOrder(..., z)
Descriptor: HWC2_FUNCTION_SET_LAYER_Z_ORDER
Must be provided by all HWC2 devices

Sets the desired Z order (height) of the given layer. A layer with a greater
Z value occludes a layer with a lesser Z value.

Parameters:
  z - the new Z order

Returns HWC2_ERROR_NONE or one of the following errors:
  HWC2_ERROR_BAD_LAYER - an invalid layer handle was passed in
"
    end

    class 4393527 "hwc_frect"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15654967 "left"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15655095 "top"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15655223 "right"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15655351 "bottom"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4393655 "hwc_rect"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15655479 "left"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15655607 "top"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15655735 "right"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15655863 "bottom"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4393783 "hwc_region"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8387127 // rects (<unidirectional association>)
	relation 8387127 --->
	  a role_name "rects" const_relation public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8387127 // rects (<unidirectional association>)
	  b parent class_ref 4216631 // hwc_rect_t
      end
    end

    class 4393911 "hwc_region_t"
      visibility package stereotype "typedef" base_type class_ref 4393783 // hwc_region
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4394039 "hwc_transform_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "hwc_layer_t::transform values
"
      attribute 15655991 "HWC_TRANSFORM_FLIP_H"
	public type class_ref 4394039 // hwc_transform_t
	init_value " HAL_TRANSFORM_FLIP_H"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15656119 "HWC_TRANSFORM_FLIP_V"
	public type class_ref 4394039 // hwc_transform_t
	init_value " HAL_TRANSFORM_FLIP_V"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15656247 "HWC_TRANSFORM_ROT_90"
	public type class_ref 4394039 // hwc_transform_t
	init_value " HAL_TRANSFORM_ROT_90"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15656375 "HWC_TRANSFORM_ROT_180"
	public type class_ref 4394039 // hwc_transform_t
	init_value " HAL_TRANSFORM_ROT_180"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15656503 "HWC_TRANSFORM_ROT_270"
	public type class_ref 4394039 // hwc_transform_t
	init_value " HAL_TRANSFORM_ROT_270"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15656631 "HWC_TRANSFORM_FLIP_H_ROT_90"
	public type class_ref 4394039 // hwc_transform_t
	init_value " HAL_TRANSFORM_FLIP_H | HAL_TRANSFORM_ROT_90"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15656759 "HWC_TRANSFORM_FLIP_V_ROT_90"
	public type class_ref 4394039 // hwc_transform_t
	init_value " HAL_TRANSFORM_FLIP_V | HAL_TRANSFORM_ROT_90"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4394167 "anonymous160"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " flip source image horizontally 
 flip source image vertically 
 rotate source image 90 degrees clock-wise 
 rotate source image 180 degrees 
 rotate source image 270 degrees clock-wise 
 flip source image horizontally, the rotate 90 degrees clock-wise 
 flip source image vertically, the rotate 90 degrees clock-wise 

Beyond this point are things only used by HWC1, which should be ignored when
implementing a HWC2 device
****************************************************************************"
      attribute 15656887 "HWC_EGL_ERROR"
	public type class_ref 4394167 // anonymous160
	init_value " -1
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4394295 "anonymous161"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " hwc_composer_device_t::set failed in EGL 

hwc_layer_t::hints values
Hints are set by the HAL and read by SurfaceFlinger
"
      attribute 15657015 "HWC_HINT_TRIPLE_BUFFER"
	public type class_ref 4394295 // anonymous161
	init_value " 0x00000001"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15657143 "HWC_HINT_CLEAR_FB"
	public type class_ref 4394295 // anonymous161
	init_value " 0x00000002
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4394423 "anonymous162"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "HWC can set the HWC_HINT_TRIPLE_BUFFER hint to indicate to SurfaceFlinger
that it should triple buffer this layer. Typically HWC does this when
the layer will be unavailable for use for an extended period of time,
e.g. if the display will be fetching data directly from the layer and
the layer can not be modified until after the next set().


HWC sets HWC_HINT_CLEAR_FB to tell SurfaceFlinger that it should clear the
framebuffer with transparent pixels where this layer would be.
SurfaceFlinger will only honor this flag when the layer has no blending



hwc_layer_t::flags values
Flags are set by SurfaceFlinger and read by the HAL
"
      attribute 15657271 "HWC_SKIP_LAYER"
	public type class_ref 4394423 // anonymous162
	init_value " 0x00000001"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15657399 "HWC_IS_CURSOR_LAYER"
	public type class_ref 4394423 // anonymous162
	init_value " 0x00000002
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4394551 "anonymous163"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "HWC_SKIP_LAYER is set by SurfaceFlnger to indicate that the HAL
shall not consider this layer for composition as it will be handled
by SurfaceFlinger (just as if compositionType was set to HWC_OVERLAY).


HWC_IS_CURSOR_LAYER is set by surfaceflinger to indicate that this
layer is being used as a cursor on this particular display, and that
surfaceflinger can potentially perform asynchronous position updates for
this layer. If a call to prepare() returns HWC_CURSOR_OVERLAY for the
composition type of this layer, then the hwcomposer will allow async
position updates to this layer via setCursorPositionAsync().


hwc_layer_t::compositionType values
"
      attribute 15657527 "HWC_FRAMEBUFFER"
	public type class_ref 4394551 // anonymous163
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15657655 "HWC_OVERLAY"
	public type class_ref 4394551 // anonymous163
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15657783 "HWC_BACKGROUND"
	public type class_ref 4394551 // anonymous163
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15657911 "HWC_FRAMEBUFFER_TARGET"
	public type class_ref 4394551 // anonymous163
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15658039 "HWC_SIDEBAND"
	public type class_ref 4394551 // anonymous163
	init_value " 4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15658167 "HWC_CURSOR_OVERLAY"
	public type class_ref 4394551 // anonymous163
	init_value "  5
 "
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4394679 "anonymous164"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " this layer is to be drawn into the framebuffer by SurfaceFlinger 
 this layer will be handled in the HWC 
 this is the background layer. it's used to set the background color.
there is only a single background layer 
 this layer holds the result of compositing the HWC_FRAMEBUFFER layers.
Added in HWC_DEVICE_API_VERSION_1_1. 
 this layer's contents are taken from a sideband buffer stream.
Added in HWC_DEVICE_API_VERSION_1_4. 
 this layer's composition will be handled by hwcomposer by dedicated
cursor overlay hardware. hwcomposer will also all async position updates
of this layer outside of the normal prepare()/set() loop. Added in
HWC_DEVICE_API_VERSION_1_4. 

hwc_layer_t::blending values
"
      attribute 15658295 "HWC_BLENDING_NONE"
	public type class_ref 4394679 // anonymous164
	init_value " 0x0100"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15658423 "HWC_BLENDING_PREMULT"
	public type class_ref 4394679 // anonymous164
	init_value " 0x0105"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15658551 "HWC_BLENDING_COVERAGE"
	public type class_ref 4394679 // anonymous164
	init_value " 0x0405
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4394807 "anonymous165"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " no blending 
 ONE / ONE_MINUS_SRC_ALPHA 
 SRC_ALPHA / ONE_MINUS_SRC_ALPHA 
 attributes queriable with query() "
      attribute 15658679 "HWC_BACKGROUND_LAYER_SUPPORTED"
	public type class_ref 4394807 // anonymous165
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15658807 "HWC_VSYNC_PERIOD"
	public type class_ref 4394807 // anonymous165
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15658935 "HWC_DISPLAY_TYPES_SUPPORTED"
	public type class_ref 4394807 // anonymous165
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4394935 "anonymous166"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Must return 1 if the background layer is supported, 0 otherwise.


Returns the vsync period in nanoseconds.

This query is not used for HWC_DEVICE_API_VERSION_1_1 and later.
Instead, the per-display attribute HWC_DISPLAY_VSYNC_PERIOD is used.


Availability: HWC_DEVICE_API_VERSION_1_1
Returns a mask of supported display types.

 display attributes returned by getDisplayAttributes() "
      attribute 15659063 "HWC_DISPLAY_NO_ATTRIBUTE"
	public type class_ref 4394935 // anonymous166
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15659191 "HWC_DISPLAY_VSYNC_PERIOD"
	public type class_ref 4394935 // anonymous166
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15659319 "HWC_DISPLAY_WIDTH"
	public type class_ref 4394935 // anonymous166
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15659447 "HWC_DISPLAY_HEIGHT"
	public type class_ref 4394935 // anonymous166
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15659575 "HWC_DISPLAY_DPI_X"
	public type class_ref 4394935 // anonymous166
	init_value " 4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15659703 "HWC_DISPLAY_DPI_Y"
	public type class_ref 4394935 // anonymous166
	init_value " 5"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15659831 "HWC_DISPLAY_COLOR_TRANSFORM"
	public type class_ref 4394935 // anonymous166
	init_value " 6"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4395063 "anonymous167"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Indicates the end of an attribute list 
 The vsync period in nanoseconds 
 The number of pixels in the horizontal and vertical directions. 
 The number of pixels per thousand inches of this configuration.

Scaling DPI by 1000 allows it to be stored in an int without losing
too much precision.

If the DPI for a configuration is unavailable or the HWC implementation
considers it unreliable, it should set these attributes to zero.

 Indicates which of the vendor-defined color transforms is provided by
this configuration. 
 Allowed events for hwc_methods::eventControl() "
      attribute 15659959 "HWC_EVENT_VSYNC"
	public type class_ref 4395063 // anonymous167
	init_value " 0
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4395191 "anonymous168"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Display types and associated mask bits. "
      attribute 15660087 "HWC_DISPLAY_PRIMARY"
	public type class_ref 4395191 // anonymous168
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15660215 "HWC_DISPLAY_EXTERNAL"
	public type class_ref 4395191 // anonymous168
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15660343 "HWC_DISPLAY_VIRTUAL"
	public type class_ref 4395191 // anonymous168
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15660471 "HWC_NUM_PHYSICAL_DISPLAY_TYPES"
	public type class_ref 4395191 // anonymous168
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15660599 "HWC_NUM_DISPLAY_TYPES"
	public type class_ref 4395191 // anonymous168
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4395319 "anonymous169"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " HDMI, DP, etc."
      attribute 15660727 "HWC_DISPLAY_PRIMARY_BIT"
	public type class_ref 4395319 // anonymous169
	init_value " 1 << HWC_DISPLAY_PRIMARY"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15660855 "HWC_DISPLAY_EXTERNAL_BIT"
	public type class_ref 4395319 // anonymous169
	init_value " 1 << HWC_DISPLAY_EXTERNAL"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15660983 "HWC_DISPLAY_VIRTUAL_BIT"
	public type class_ref 4395319 // anonymous169
	init_value " 1 << HWC_DISPLAY_VIRTUAL"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4395447 "anonymous170"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Display power modes "
      attribute 15661111 "HWC_POWER_MODE_OFF"
	public type class_ref 4395447 // anonymous170
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15661239 "HWC_POWER_MODE_DOZE"
	public type class_ref 4395447 // anonymous170
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15661367 "HWC_POWER_MODE_NORMAL"
	public type class_ref 4395447 // anonymous170
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15661495 "HWC_POWER_MODE_DOZE_SUSPEND"
	public type class_ref 4395447 // anonymous170
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4395575 "input_host_t"
      visibility package stereotype "typedef" explicit_base_type "input_host"
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4395703 "input_device_handle_t"
      visibility package stereotype "typedef" explicit_base_type "input_device_handle"
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4395831 "input_device_identifier_t"
      visibility package stereotype "typedef" explicit_base_type "input_device_identifier"
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4395959 "input_device_definition_t"
      visibility package stereotype "typedef" explicit_base_type "input_device_definition"
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4396087 "input_report_definition_t"
      visibility package stereotype "typedef" explicit_base_type "input_report_definition"
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4396215 "input_report_t"
      visibility package stereotype "typedef" explicit_base_type "input_report"
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4396343 "input_collection_t"
      visibility package stereotype "typedef" explicit_base_type "input_collection"
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4396471 "input_property_map_t"
      visibility package stereotype "typedef" explicit_base_type "input_property_map"
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4396599 "input_property_t"
      visibility package stereotype "typedef" explicit_base_type "input_property"
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4396727 "input_usage_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15661623 "INPUT_USAGE_KEYCODE_UNKNOWN"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15661751 "INPUT_USAGE_KEYCODE_SOFT_LEFT"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15661879 "INPUT_USAGE_KEYCODE_SOFT_RIGHT"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15662007 "INPUT_USAGE_KEYCODE_HOME"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15662135 "INPUT_USAGE_KEYCODE_BACK"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15662263 "INPUT_USAGE_KEYCODE_CALL"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15662391 "INPUT_USAGE_KEYCODE_ENDCALL"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15662519 "INPUT_USAGE_KEYCODE_0"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15662647 "INPUT_USAGE_KEYCODE_1"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15662775 "INPUT_USAGE_KEYCODE_2"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15662903 "INPUT_USAGE_KEYCODE_3"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15663031 "INPUT_USAGE_KEYCODE_4"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15663159 "INPUT_USAGE_KEYCODE_5"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15663287 "INPUT_USAGE_KEYCODE_6"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15663415 "INPUT_USAGE_KEYCODE_7"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15663543 "INPUT_USAGE_KEYCODE_8"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15663671 "INPUT_USAGE_KEYCODE_9"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15663799 "INPUT_USAGE_KEYCODE_STAR"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15663927 "INPUT_USAGE_KEYCODE_POUND"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15664055 "INPUT_USAGE_KEYCODE_DPAD_UP"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15664183 "INPUT_USAGE_KEYCODE_DPAD_DOWN"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15664311 "INPUT_USAGE_KEYCODE_DPAD_LEFT"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15664439 "INPUT_USAGE_KEYCODE_DPAD_RIGHT"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15664567 "INPUT_USAGE_KEYCODE_DPAD_CENTER"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15664695 "INPUT_USAGE_KEYCODE_VOLUME_UP"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15664823 "INPUT_USAGE_KEYCODE_VOLUME_DOWN"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15664951 "INPUT_USAGE_KEYCODE_POWER"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15665079 "INPUT_USAGE_KEYCODE_CAMERA"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15665207 "INPUT_USAGE_KEYCODE_CLEAR"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15665335 "INPUT_USAGE_KEYCODE_A"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15665463 "INPUT_USAGE_KEYCODE_B"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15665591 "INPUT_USAGE_KEYCODE_C"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15665719 "INPUT_USAGE_KEYCODE_D"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15665847 "INPUT_USAGE_KEYCODE_E"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15665975 "INPUT_USAGE_KEYCODE_F"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15666103 "INPUT_USAGE_KEYCODE_G"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15666231 "INPUT_USAGE_KEYCODE_H"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15666359 "INPUT_USAGE_KEYCODE_I"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15666487 "INPUT_USAGE_KEYCODE_J"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15666615 "INPUT_USAGE_KEYCODE_K"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15666743 "INPUT_USAGE_KEYCODE_L"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15666871 "INPUT_USAGE_KEYCODE_M"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15666999 "INPUT_USAGE_KEYCODE_N"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15667127 "INPUT_USAGE_KEYCODE_O"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15667255 "INPUT_USAGE_KEYCODE_P"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15667383 "INPUT_USAGE_KEYCODE_Q"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15667511 "INPUT_USAGE_KEYCODE_R"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15667639 "INPUT_USAGE_KEYCODE_S"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15667767 "INPUT_USAGE_KEYCODE_T"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15667895 "INPUT_USAGE_KEYCODE_U"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15668023 "INPUT_USAGE_KEYCODE_V"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15668151 "INPUT_USAGE_KEYCODE_W"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15668279 "INPUT_USAGE_KEYCODE_X"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15668407 "INPUT_USAGE_KEYCODE_Y"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15668535 "INPUT_USAGE_KEYCODE_Z"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15668663 "INPUT_USAGE_KEYCODE_COMMA"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15668791 "INPUT_USAGE_KEYCODE_PERIOD"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15668919 "INPUT_USAGE_KEYCODE_ALT_LEFT"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15669047 "INPUT_USAGE_KEYCODE_ALT_RIGHT"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15669175 "INPUT_USAGE_KEYCODE_SHIFT_LEFT"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15669303 "INPUT_USAGE_KEYCODE_SHIFT_RIGHT"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15669431 "INPUT_USAGE_KEYCODE_TAB"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15669559 "INPUT_USAGE_KEYCODE_SPACE"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15669687 "INPUT_USAGE_KEYCODE_SYM"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15669815 "INPUT_USAGE_KEYCODE_EXPLORER"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15669943 "INPUT_USAGE_KEYCODE_ENVELOPE"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15670071 "INPUT_USAGE_KEYCODE_ENTER"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15670199 "INPUT_USAGE_KEYCODE_DEL"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15670327 "INPUT_USAGE_KEYCODE_GRAVE"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15670455 "INPUT_USAGE_KEYCODE_MINUS"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15670583 "INPUT_USAGE_KEYCODE_EQUALS"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15670711 "INPUT_USAGE_KEYCODE_LEFT_BRACKET"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15670839 "INPUT_USAGE_KEYCODE_RIGHT_BRACKET"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15670967 "INPUT_USAGE_KEYCODE_BACKSLASH"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15671095 "INPUT_USAGE_KEYCODE_SEMICOLON"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15671223 "INPUT_USAGE_KEYCODE_APOSTROPHE"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15671351 "INPUT_USAGE_KEYCODE_SLASH"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15671479 "INPUT_USAGE_KEYCODE_AT"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15671607 "INPUT_USAGE_KEYCODE_NUM"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15671735 "INPUT_USAGE_KEYCODE_HEADSETHOOK"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15671863 "INPUT_USAGE_KEYCODE_FOCUS"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15671991 "INPUT_USAGE_KEYCODE_PLUS"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15672119 "INPUT_USAGE_KEYCODE_MENU"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15672247 "INPUT_USAGE_KEYCODE_NOTIFICATION"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15672375 "INPUT_USAGE_KEYCODE_SEARCH"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15672503 "INPUT_USAGE_KEYCODE_MEDIA_PLAY_PAUSE"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15672631 "INPUT_USAGE_KEYCODE_MEDIA_STOP"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15672759 "INPUT_USAGE_KEYCODE_MEDIA_NEXT"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15672887 "INPUT_USAGE_KEYCODE_MEDIA_PREVIOUS"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15673015 "INPUT_USAGE_KEYCODE_MEDIA_REWIND"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15673143 "INPUT_USAGE_KEYCODE_MEDIA_FAST_FORWARD"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15673271 "INPUT_USAGE_KEYCODE_MUTE"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15673399 "INPUT_USAGE_KEYCODE_PAGE_UP"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15673527 "INPUT_USAGE_KEYCODE_PAGE_DOWN"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15673655 "INPUT_USAGE_KEYCODE_PICTSYMBOLS"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15673783 "INPUT_USAGE_KEYCODE_SWITCH_CHARSET"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15673911 "INPUT_USAGE_KEYCODE_BUTTON_A"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15674039 "INPUT_USAGE_KEYCODE_BUTTON_B"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15674167 "INPUT_USAGE_KEYCODE_BUTTON_C"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15674295 "INPUT_USAGE_KEYCODE_BUTTON_X"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15674423 "INPUT_USAGE_KEYCODE_BUTTON_Y"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15674551 "INPUT_USAGE_KEYCODE_BUTTON_Z"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15674679 "INPUT_USAGE_KEYCODE_BUTTON_L1"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15674807 "INPUT_USAGE_KEYCODE_BUTTON_R1"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15674935 "INPUT_USAGE_KEYCODE_BUTTON_L2"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15675063 "INPUT_USAGE_KEYCODE_BUTTON_R2"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15675191 "INPUT_USAGE_KEYCODE_BUTTON_THUMBL"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15675319 "INPUT_USAGE_KEYCODE_BUTTON_THUMBR"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15675447 "INPUT_USAGE_KEYCODE_BUTTON_START"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15675575 "INPUT_USAGE_KEYCODE_BUTTON_SELECT"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15675703 "INPUT_USAGE_KEYCODE_BUTTON_MODE"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15675831 "INPUT_USAGE_KEYCODE_ESCAPE"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15675959 "INPUT_USAGE_KEYCODE_FORWARD_DEL"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15676087 "INPUT_USAGE_KEYCODE_CTRL_LEFT"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15676215 "INPUT_USAGE_KEYCODE_CTRL_RIGHT"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15676343 "INPUT_USAGE_KEYCODE_CAPS_LOCK"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15676471 "INPUT_USAGE_KEYCODE_SCROLL_LOCK"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15676599 "INPUT_USAGE_KEYCODE_META_LEFT"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15676727 "INPUT_USAGE_KEYCODE_META_RIGHT"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15676855 "INPUT_USAGE_KEYCODE_FUNCTION"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15676983 "INPUT_USAGE_KEYCODE_SYSRQ"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15677111 "INPUT_USAGE_KEYCODE_BREAK"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15677239 "INPUT_USAGE_KEYCODE_MOVE_HOME"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15677367 "INPUT_USAGE_KEYCODE_MOVE_END"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15677495 "INPUT_USAGE_KEYCODE_INSERT"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15677623 "INPUT_USAGE_KEYCODE_FORWARD"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15677751 "INPUT_USAGE_KEYCODE_MEDIA_PLAY"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15677879 "INPUT_USAGE_KEYCODE_MEDIA_PAUSE"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15678007 "INPUT_USAGE_KEYCODE_MEDIA_CLOSE"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15678135 "INPUT_USAGE_KEYCODE_MEDIA_EJECT"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15678263 "INPUT_USAGE_KEYCODE_MEDIA_RECORD"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15678391 "INPUT_USAGE_KEYCODE_F1"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15678519 "INPUT_USAGE_KEYCODE_F2"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15678647 "INPUT_USAGE_KEYCODE_F3"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15678775 "INPUT_USAGE_KEYCODE_F4"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15678903 "INPUT_USAGE_KEYCODE_F5"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15679031 "INPUT_USAGE_KEYCODE_F6"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15679159 "INPUT_USAGE_KEYCODE_F7"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15679287 "INPUT_USAGE_KEYCODE_F8"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15679415 "INPUT_USAGE_KEYCODE_F9"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15679543 "INPUT_USAGE_KEYCODE_F10"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15679671 "INPUT_USAGE_KEYCODE_F11"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15679799 "INPUT_USAGE_KEYCODE_F12"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15679927 "INPUT_USAGE_KEYCODE_NUM_LOCK"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15680055 "INPUT_USAGE_KEYCODE_NUMPAD_0"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15680183 "INPUT_USAGE_KEYCODE_NUMPAD_1"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15680311 "INPUT_USAGE_KEYCODE_NUMPAD_2"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15680439 "INPUT_USAGE_KEYCODE_NUMPAD_3"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15680567 "INPUT_USAGE_KEYCODE_NUMPAD_4"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15680695 "INPUT_USAGE_KEYCODE_NUMPAD_5"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15680823 "INPUT_USAGE_KEYCODE_NUMPAD_6"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15680951 "INPUT_USAGE_KEYCODE_NUMPAD_7"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15681079 "INPUT_USAGE_KEYCODE_NUMPAD_8"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15681207 "INPUT_USAGE_KEYCODE_NUMPAD_9"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15681335 "INPUT_USAGE_KEYCODE_NUMPAD_DIVIDE"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15681463 "INPUT_USAGE_KEYCODE_NUMPAD_MULTIPLY"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15681591 "INPUT_USAGE_KEYCODE_NUMPAD_SUBTRACT"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15681719 "INPUT_USAGE_KEYCODE_NUMPAD_ADD"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15681847 "INPUT_USAGE_KEYCODE_NUMPAD_DOT"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15681975 "INPUT_USAGE_KEYCODE_NUMPAD_COMMA"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15682103 "INPUT_USAGE_KEYCODE_NUMPAD_ENTER"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15682231 "INPUT_USAGE_KEYCODE_NUMPAD_EQUALS"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15682359 "INPUT_USAGE_KEYCODE_NUMPAD_LEFT_PAREN"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15682487 "INPUT_USAGE_KEYCODE_NUMPAD_RIGHT_PAREN"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15682615 "INPUT_USAGE_KEYCODE_VOLUME_MUTE"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15682743 "INPUT_USAGE_KEYCODE_INFO"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15682871 "INPUT_USAGE_KEYCODE_CHANNEL_UP"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15682999 "INPUT_USAGE_KEYCODE_CHANNEL_DOWN"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15683127 "INPUT_USAGE_KEYCODE_ZOOM_IN"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15683255 "INPUT_USAGE_KEYCODE_ZOOM_OUT"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15683383 "INPUT_USAGE_KEYCODE_TV"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15683511 "INPUT_USAGE_KEYCODE_WINDOW"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15683639 "INPUT_USAGE_KEYCODE_GUIDE"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15683767 "INPUT_USAGE_KEYCODE_DVR"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15683895 "INPUT_USAGE_KEYCODE_BOOKMARK"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15684023 "INPUT_USAGE_KEYCODE_CAPTIONS"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15684151 "INPUT_USAGE_KEYCODE_SETTINGS"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15684279 "INPUT_USAGE_KEYCODE_TV_POWER"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15684407 "INPUT_USAGE_KEYCODE_TV_INPUT"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15684535 "INPUT_USAGE_KEYCODE_STB_POWER"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15684663 "INPUT_USAGE_KEYCODE_STB_INPUT"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15684791 "INPUT_USAGE_KEYCODE_AVR_POWER"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15684919 "INPUT_USAGE_KEYCODE_AVR_INPUT"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15685047 "INPUT_USAGE_KEYCODE_PROG_RED"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15685175 "INPUT_USAGE_KEYCODE_PROG_GREEN"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15685303 "INPUT_USAGE_KEYCODE_PROG_YELLOW"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15685431 "INPUT_USAGE_KEYCODE_PROG_BLUE"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15685559 "INPUT_USAGE_KEYCODE_APP_SWITCH"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15685687 "INPUT_USAGE_KEYCODE_BUTTON_1"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15685815 "INPUT_USAGE_KEYCODE_BUTTON_2"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15685943 "INPUT_USAGE_KEYCODE_BUTTON_3"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15686071 "INPUT_USAGE_KEYCODE_BUTTON_4"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15686199 "INPUT_USAGE_KEYCODE_BUTTON_5"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15686327 "INPUT_USAGE_KEYCODE_BUTTON_6"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15686455 "INPUT_USAGE_KEYCODE_BUTTON_7"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15686583 "INPUT_USAGE_KEYCODE_BUTTON_8"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15686711 "INPUT_USAGE_KEYCODE_BUTTON_9"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15686839 "INPUT_USAGE_KEYCODE_BUTTON_10"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15686967 "INPUT_USAGE_KEYCODE_BUTTON_11"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15687095 "INPUT_USAGE_KEYCODE_BUTTON_12"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15687223 "INPUT_USAGE_KEYCODE_BUTTON_13"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15687351 "INPUT_USAGE_KEYCODE_BUTTON_14"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15687479 "INPUT_USAGE_KEYCODE_BUTTON_15"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15687607 "INPUT_USAGE_KEYCODE_BUTTON_16"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15687735 "INPUT_USAGE_KEYCODE_LANGUAGE_SWITCH"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15687863 "INPUT_USAGE_KEYCODE_MANNER_MODE"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15687991 "INPUT_USAGE_KEYCODE_3D_MODE"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15688119 "INPUT_USAGE_KEYCODE_CONTACTS"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15688247 "INPUT_USAGE_KEYCODE_CALENDAR"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15688375 "INPUT_USAGE_KEYCODE_MUSIC"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15688503 "INPUT_USAGE_KEYCODE_CALCULATOR"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15688631 "INPUT_USAGE_KEYCODE_ZENKAKU_HANKAKU"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15688759 "INPUT_USAGE_KEYCODE_EISU"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15688887 "INPUT_USAGE_KEYCODE_MUHENKAN"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15689015 "INPUT_USAGE_KEYCODE_HENKAN"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15689143 "INPUT_USAGE_KEYCODE_KATAKANA_HIRAGANA"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15689271 "INPUT_USAGE_KEYCODE_YEN"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15689399 "INPUT_USAGE_KEYCODE_RO"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15689527 "INPUT_USAGE_KEYCODE_KANA"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15689655 "INPUT_USAGE_KEYCODE_ASSIST"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15689783 "INPUT_USAGE_KEYCODE_BRIGHTNESS_DOWN"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15689911 "INPUT_USAGE_KEYCODE_BRIGHTNESS_UP"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15690039 "INPUT_USAGE_KEYCODE_MEDIA_AUDIO_TRACK"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15690167 "INPUT_USAGE_KEYCODE_SLEEP"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15690295 "INPUT_USAGE_KEYCODE_WAKEUP"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15690423 "INPUT_USAGE_KEYCODE_PAIRING"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15690551 "INPUT_USAGE_KEYCODE_MEDIA_TOP_MENU"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15690679 "INPUT_USAGE_KEYCODE_11"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15690807 "INPUT_USAGE_KEYCODE_12"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15690935 "INPUT_USAGE_KEYCODE_LAST_CHANNEL"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15691063 "INPUT_USAGE_KEYCODE_TV_DATA_SERVICE"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15691191 "INPUT_USAGE_KEYCODE_VOICE_ASSIST"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15691319 "INPUT_USAGE_KEYCODE_TV_RADIO_SERVICE"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15691447 "INPUT_USAGE_KEYCODE_TV_TELETEXT"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15691575 "INPUT_USAGE_KEYCODE_TV_NUMBER_ENTRY"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15691703 "INPUT_USAGE_KEYCODE_TV_TERRESTRIAL_ANALOG"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15691831 "INPUT_USAGE_KEYCODE_TV_TERRESTRIAL_DIGITAL"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15691959 "INPUT_USAGE_KEYCODE_TV_SATELLITE"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15692087 "INPUT_USAGE_KEYCODE_TV_SATELLITE_BS"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15692215 "INPUT_USAGE_KEYCODE_TV_SATELLITE_CS"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15692343 "INPUT_USAGE_KEYCODE_TV_SATELLITE_SERVICE"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15692471 "INPUT_USAGE_KEYCODE_TV_NETWORK"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15692599 "INPUT_USAGE_KEYCODE_TV_ANTENNA_CABLE"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15692727 "INPUT_USAGE_KEYCODE_TV_INPUT_HDMI_1"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15692855 "INPUT_USAGE_KEYCODE_TV_INPUT_HDMI_2"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15692983 "INPUT_USAGE_KEYCODE_TV_INPUT_HDMI_3"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15693111 "INPUT_USAGE_KEYCODE_TV_INPUT_HDMI_4"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15693239 "INPUT_USAGE_KEYCODE_TV_INPUT_COMPOSITE_1"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15693367 "INPUT_USAGE_KEYCODE_TV_INPUT_COMPOSITE_2"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15693495 "INPUT_USAGE_KEYCODE_TV_INPUT_COMPONENT_1"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15693623 "INPUT_USAGE_KEYCODE_TV_INPUT_COMPONENT_2"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15693751 "INPUT_USAGE_KEYCODE_TV_INPUT_VGA_1"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15693879 "INPUT_USAGE_KEYCODE_TV_AUDIO_DESCRIPTION"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15694007 "INPUT_USAGE_KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15694135 "INPUT_USAGE_KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15694263 "INPUT_USAGE_KEYCODE_TV_ZOOM_MODE"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15694391 "INPUT_USAGE_KEYCODE_TV_CONTENTS_MENU"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15694519 "INPUT_USAGE_KEYCODE_TV_MEDIA_CONTEXT_MENU"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15694647 "INPUT_USAGE_KEYCODE_TV_TIMER_PROGRAMMING"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15694775 "INPUT_USAGE_KEYCODE_HELP"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15694903 "INPUT_USAGE_AXIS_X"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15695031 "INPUT_USAGE_AXIS_Y"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15695159 "INPUT_USAGE_AXIS_Z"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15695287 "INPUT_USAGE_AXIS_RX"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15695415 "INPUT_USAGE_AXIS_RY"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15695543 "INPUT_USAGE_AXIS_RZ"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15695671 "INPUT_USAGE_AXIS_HAT_X"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15695799 "INPUT_USAGE_AXIS_HAT_Y"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15695927 "INPUT_USAGE_AXIS_PRESSURE"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15696055 "INPUT_USAGE_AXIS_SIZE"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15696183 "INPUT_USAGE_AXIS_TOUCH_MAJOR"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15696311 "INPUT_USAGE_AXIS_TOUCH_MINOR"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15696439 "INPUT_USAGE_AXIS_TOOL_MAJOR"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15696567 "INPUT_USAGE_AXIS_TOOL_MINOR"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15696695 "INPUT_USAGE_AXIS_ORIENTATION"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15696823 "INPUT_USAGE_AXIS_VSCROLL"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15696951 "INPUT_USAGE_AXIS_HSCROLL"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15697079 "INPUT_USAGE_AXIS_LTRIGGER"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15697207 "INPUT_USAGE_AXIS_RTRIGGER"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15697335 "INPUT_USAGE_AXIS_THROTTLE"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15697463 "INPUT_USAGE_AXIS_RUDDER"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15697591 "INPUT_USAGE_AXIS_WHEEL"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15697719 "INPUT_USAGE_AXIS_GAS"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15697847 "INPUT_USAGE_AXIS_BRAKE"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15697975 "INPUT_USAGE_AXIS_DISTANCE"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15698103 "INPUT_USAGE_AXIS_TILT"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15698231 "INPUT_USAGE_AXIS_GENERIC_1"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15698359 "INPUT_USAGE_AXIS_GENERIC_2"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15698487 "INPUT_USAGE_AXIS_GENERIC_3"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15698615 "INPUT_USAGE_AXIS_GENERIC_4"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15698743 "INPUT_USAGE_AXIS_GENERIC_5"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15698871 "INPUT_USAGE_AXIS_GENERIC_6"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15698999 "INPUT_USAGE_AXIS_GENERIC_7"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15699127 "INPUT_USAGE_AXIS_GENERIC_8"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15699255 "INPUT_USAGE_AXIS_GENERIC_9"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15699383 "INPUT_USAGE_AXIS_GENERIC_10"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15699511 "INPUT_USAGE_AXIS_GENERIC_11"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15699639 "INPUT_USAGE_AXIS_GENERIC_12"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15699767 "INPUT_USAGE_AXIS_GENERIC_13"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15699895 "INPUT_USAGE_AXIS_GENERIC_14"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15700023 "INPUT_USAGE_AXIS_GENERIC_15"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15700151 "INPUT_USAGE_AXIS_GENERIC_16"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15700279 "INPUT_USAGE_LED_NUM_LOCK"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15700407 "INPUT_USAGE_LED_CAPS_LOCK"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15700535 "INPUT_USAGE_LED_SCROLL_LOCK"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15700663 "INPUT_USAGE_LED_COMPOSE"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15700791 "INPUT_USAGE_LED_KANA"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15700919 "INPUT_USAGE_LED_SLEEP"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15701047 "INPUT_USAGE_LED_SUSPEND"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15701175 "INPUT_USAGE_LED_MUTE"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15701303 "INPUT_USAGE_LED_MISC"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15701431 "INPUT_USAGE_LED_MAIL"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15701559 "INPUT_USAGE_LED_CHARGING"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15701687 "INPUT_USAGE_LED_CONTROLLER_1"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15701815 "INPUT_USAGE_LED_CONTROLLER_2"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15701943 "INPUT_USAGE_LED_CONTROLLER_3"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15702071 "INPUT_USAGE_LED_CONTROLLER_4"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15702199 "INPUT_USAGE_SWITCH_UNKNOWN"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15702327 "INPUT_USAGE_SWITCH_LID"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15702455 "INPUT_USAGE_SWITCH_KEYPAD_SLIDE"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15702583 "INPUT_USAGE_SWITCH_HEADPHONE_INSERT"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15702711 "INPUT_USAGE_SWITCH_MICROPHONE_INSERT"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15702839 "INPUT_USAGE_SWITCH_LINEOUT_INSERT"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15702967 "INPUT_USAGE_SWITCH_CAMERA_LENS_COVER"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15703095 "INPUT_USAGE_BUTTON_UNKNOWN"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15703223 "INPUT_USAGE_BUTTON_PRIMARY"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15703351 "INPUT_USAGE_BUTTON_SECONDARY"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15703479 "INPUT_USAGE_BUTTON_TERTIARY"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15703607 "INPUT_USAGE_BUTTON_FORWARD"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15703735 "INPUT_USAGE_BUTTON_BACK"
	public type class_ref 4396727 // input_usage_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4396855 "input_collection_id"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " keycodes
 *Camera* focus
 axes
 leds
 switches
 mouse buttons
 (see android.view.MotionEvent)
 left
 right
 middle"
      attribute 15703863 "INPUT_COLLECTION_ID_TOUCH"
	public type class_ref 4396855 // input_collection_id
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15703991 "INPUT_COLLECTION_ID_KEYBOARD"
	public type class_ref 4396855 // input_collection_id
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15704119 "INPUT_COLLECTION_ID_MOUSE"
	public type class_ref 4396855 // input_collection_id
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15704247 "INPUT_COLLECTION_ID_TOUCHPAD"
	public type class_ref 4396855 // input_collection_id
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15704375 "INPUT_COLLECTION_ID_SWITCH"
	public type class_ref 4396855 // input_collection_id
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4396983 "input_collection_id_t"
      visibility package stereotype "typedef" base_type class_ref 4396855 // input_collection_id
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4397111 "input_message_t"
      visibility package stereotype "typedef" explicit_base_type "input_message"
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " etc"
    end

    class 4397239 "input_host_callbacks"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15704503 "create_device_identifier"
	public explicit_type "/** * Creates a device identifier with the given properties. * The unique ID should be a string that precisely identifies a given piece of hardware. For * example, an input device connected via Bluetooth could use its MAC address as its unique ID. */ input_device_identifier_t* (*)(input_host_t* host, const char* name, int32_t product_id, int32_t vendor_id, input_bus_t bus, const char* unique_id)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}

    /**
     * Creates a device identifier with the given properties.
     * The unique ID should be a string that precisely identifies a given piece of hardware. For
     * example, an input device connected via Bluetooth could use its MAC address as its unique ID.
     */
    input_device_identifier_t* (*${name})(input_host_t* host,
            const char* name, int32_t product_id, int32_t vendor_id,
            input_bus_t bus, const char* unique_id)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Creates a device identifier with the given properties.
The unique ID should be a string that precisely identifies a given piece of hardware. For
example, an input device connected via Bluetooth could use its MAC address as its unique ID.

"
      end

      attribute 15704631 "create_device_definition"
	public explicit_type "/** * Allocates the device definition which will describe the input capabilities of a device. A * device definition may be used to register as many devices as desired. */ input_device_definition_t* (*)(input_host_t* host)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Allocates the device definition which will describe the input capabilities of a device. A
     * device definition may be used to register as many devices as desired.
     */
    input_device_definition_t* (*${name})(input_host_t* host)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Allocates the device definition which will describe the input capabilities of a device. A
device definition may be used to register as many devices as desired.

"
      end

      attribute 15704759 "create_input_report_definition"
	public explicit_type "/** * Allocate either an input report, which the HAL will use to tell the host of incoming input * events, or an output report, which the host will use to tell the HAL of desired state * changes (e.g. setting an LED). */ input_report_definition_t* (*)(input_host_t* host)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Allocate either an input report, which the HAL will use to tell the host of incoming input
     * events, or an output report, which the host will use to tell the HAL of desired state
     * changes (e.g. setting an LED).
     */
    input_report_definition_t* (*${name})(input_host_t* host)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Allocate either an input report, which the HAL will use to tell the host of incoming input
events, or an output report, which the host will use to tell the HAL of desired state
changes (e.g. setting an LED).

"
      end

      attribute 15704887 "create_output_report_definition"
	public explicit_type "input_report_definition_t* (*)(input_host_t* host)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    input_report_definition_t* (*${name})(input_host_t* host)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15705015 "free_report_definition"
	public explicit_type "/** * Frees the report definition. */ void (*)(input_host_t* host, input_report_definition_t* report_def)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Frees the report definition.
     */
    void (*${name})(input_host_t* host, input_report_definition_t* report_def)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Frees the report definition.

"
      end

      attribute 15705143 "input_device_definition_add_report"
	public explicit_type "/** * Append the report to the given input device. */ void (*)(input_host_t* host, input_device_definition_t* d, input_report_definition_t* r)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Append the report to the given input device.
     */
    void (*${name})(input_host_t* host,
            input_device_definition_t* d, input_report_definition_t* r)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Append the report to the given input device.

"
      end

      attribute 15705271 "input_report_definition_add_collection"
	public explicit_type "/** * Add a collection with the given arity and ID. A collection describes a set * of logically grouped properties such as the X and Y coordinates of a single finger touch or * the set of keys on a keyboard. The arity declares how many repeated instances of this * collection will appear in whatever report it is attached to. The ID describes the type of * grouping being represented by the collection. For example, a touchscreen capable of * reporting up to 2 fingers simultaneously might have a collection with the X and Y * coordinates, an arity of 2, and an ID of INPUT_COLLECTION_USAGE_TOUCHSCREEN. Any given ID * may only be present once for a given report. */ void (*)(input_host_t* host, input_report_definition_t* report, input_collection_id_t id, int32_t arity)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Add a collection with the given arity and ID. A collection describes a set
     * of logically grouped properties such as the X and Y coordinates of a single finger touch or
     * the set of keys on a keyboard. The arity declares how many repeated instances of this
     * collection will appear in whatever report it is attached to. The ID describes the type of
     * grouping being represented by the collection. For example, a touchscreen capable of
     * reporting up to 2 fingers simultaneously might have a collection with the X and Y
     * coordinates, an arity of 2, and an ID of INPUT_COLLECTION_USAGE_TOUCHSCREEN. Any given ID
     * may only be present once for a given report.
     */
    void (*${name})(input_host_t* host,
            input_report_definition_t* report, input_collection_id_t id, int32_t arity)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Add a collection with the given arity and ID. A collection describes a set
of logically grouped properties such as the X and Y coordinates of a single finger touch or
the set of keys on a keyboard. The arity declares how many repeated instances of this
collection will appear in whatever report it is attached to. The ID describes the type of
grouping being represented by the collection. For example, a touchscreen capable of
reporting up to 2 fingers simultaneously might have a collection with the X and Y
coordinates, an arity of 2, and an ID of INPUT_COLLECTION_USAGE_TOUCHSCREEN. Any given ID
may only be present once for a given report.

"
      end

      attribute 15705399 "input_report_definition_declare_usage_int"
	public explicit_type "/** * Declare an int usage with the given properties. The report and collection defines where the * usage is being declared. */ void (*)(input_host_t* host, input_report_definition_t* report, input_collection_id_t id, input_usage_t usage, int32_t min, int32_t max, float resolution)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Declare an int usage with the given properties. The report and collection defines where the
     * usage is being declared.
     */
    void (*${name})(input_host_t* host,
            input_report_definition_t* report, input_collection_id_t id,
            input_usage_t usage, int32_t min, int32_t max, float resolution)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Declare an int usage with the given properties. The report and collection defines where the
usage is being declared.

"
      end

      attribute 15705527 "input_report_definition_declare_usages_bool"
	public explicit_type "/** * Declare a set of boolean usages with the given properties. The report and collection * defines where the usages are being declared. */ void (*)(input_host_t* host, input_report_definition_t* report, input_collection_id_t id, input_usage_t* usage, size_t usage_count)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Declare a set of boolean usages with the given properties.  The report and collection
     * defines where the usages are being declared.
     */
    void (*${name})(input_host_t* host,
            input_report_definition_t* report, input_collection_id_t id,
            input_usage_t* usage, size_t usage_count)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Declare a set of boolean usages with the given properties.  The report and collection
defines where the usages are being declared.

"
      end

      attribute 15705655 "register_device"
	public explicit_type "/** * Register a given input device definition. This notifies the host that an input device has * been connected and gives a description of all its capabilities. */ input_device_handle_t* (*)(input_host_t* host, input_device_identifier_t* id, input_device_definition_t* d)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}

    /**
     * Register a given input device definition. This notifies the host that an input device has
     * been connected and gives a description of all its capabilities.
     */
    input_device_handle_t* (*${name})(input_host_t* host,
            input_device_identifier_t* id, input_device_definition_t* d)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Register a given input device definition. This notifies the host that an input device has
been connected and gives a description of all its capabilities.

"
      end

      attribute 15705783 "unregister_device"
	public explicit_type "/** Unregister the given device */ void (*)(input_host_t* host, input_device_handle_t* handle)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Unregister the given device */
    void (*${name})(input_host_t* host, input_device_handle_t* handle)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Unregister the given device 
"
      end

      attribute 15705911 "input_allocate_report"
	public explicit_type "/** * Allocate a report that will contain all of the state as described by the given report. */ input_report_t* (*)(input_host_t* host, input_report_definition_t* r)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Allocate a report that will contain all of the state as described by the given report.
     */
    input_report_t* (*${name})(input_host_t* host, input_report_definition_t* r)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Allocate a report that will contain all of the state as described by the given report.

"
      end

      attribute 15706039 "input_report_set_usage_int"
	public explicit_type "/** * Add an int usage value to a report. */ void (*)(input_host_t* host, input_report_t* r, input_collection_id_t id, input_usage_t usage, int32_t value, int32_t arity_index)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Add an int usage value to a report.
     */
    void (*${name})(input_host_t* host, input_report_t* r,
            input_collection_id_t id, input_usage_t usage, int32_t value, int32_t arity_index)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Add an int usage value to a report.

"
      end

      attribute 15706167 "input_report_set_usage_bool"
	public explicit_type "/** * Add a boolean usage value to a report. */ void (*)(input_host_t* host, input_report_t* r, input_collection_id_t id, input_usage_t usage, bool value, int32_t arity_index)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Add a boolean usage value to a report.
     */
    void (*${name})(input_host_t* host, input_report_t* r,
            input_collection_id_t id, input_usage_t usage, bool value, int32_t arity_index)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Add a boolean usage value to a report.

"
      end

      attribute 15706295 "report_event"
	public explicit_type "void (*)(input_host_t* host, input_device_handle_t* d, input_report_t* report)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    void (*${name})(input_host_t* host, input_device_handle_t* d, input_report_t* report)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15706423 "input_get_device_property_map"
	public explicit_type "/** * Retrieve the set of properties for the device. The returned * input_property_map_t* may be used to query specific properties via the * input_get_device_property callback. */ input_property_map_t* (*)(input_host_t* host, input_device_identifier_t* id)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Retrieve the set of properties for the device. The returned
     * input_property_map_t* may be used to query specific properties via the
     * input_get_device_property callback.
     */
    input_property_map_t* (*${name})(input_host_t* host,
            input_device_identifier_t* id)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Retrieve the set of properties for the device. The returned
input_property_map_t* may be used to query specific properties via the
input_get_device_property callback.

"
      end

      attribute 15706551 "input_get_device_property"
	public explicit_type "/** * Retrieve a property for the device with the given key. Returns NULL if * the key does not exist, or an input_property_t* that must be freed using * input_free_device_property(). Using an input_property_t after the * corresponding input_property_map_t is freed is undefined. */ input_property_t* (*)(input_host_t* host, input_property_map_t* map, const char* key)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    /**
     * Retrieve a property for the device with the given key. Returns NULL if
     * the key does not exist, or an input_property_t* that must be freed using
     * input_free_device_property(). Using an input_property_t after the
     * corresponding input_property_map_t is freed is undefined.
     */
    input_property_t* (*${name})(input_host_t* host,
            input_property_map_t* map, const char* key)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Retrieve a property for the device with the given key. Returns NULL if
the key does not exist, or an input_property_t* that must be freed using
input_free_device_property(). Using an input_property_t after the
corresponding input_property_map_t is freed is undefined.

"
      end

      attribute 15706679 "input_get_property_key"
	const_attribute public explicit_type "char* (*)(input_host_t* host, input_property_t* property)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const} char* (*${name})(input_host_t* host, input_property_t* property)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Get the key for the input property. Returns NULL if the property is NULL.
The returned const char* is owned by the input_property_t.

"
      end

      attribute 15706807 "input_get_property_value"
	const_attribute public explicit_type "char* (*)(input_host_t* host, input_property_t* property)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const} char* (*${name})(input_host_t* host, input_property_t* property)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Get the value for the input property. Returns NULL if the property is
NULL. The returned const char* is owned by the input_property_t.

"
      end

      attribute 15706935 "input_free_device_property"
	public explicit_type "/** * Frees the input_property_t*. */ void (*)(input_host_t* host, input_property_t* property)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Frees the input_property_t*.
     */
    void (*${name})(input_host_t* host, input_property_t* property)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Frees the input_property_t*.

"
      end

      attribute 15707063 "input_free_device_property_map"
	public explicit_type "/** * Frees the input_property_map_t*. */ void (*)(input_host_t* host, input_property_map_t* map)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Frees the input_property_map_t*.
     */
    void (*${name})(input_host_t* host, input_property_map_t* map)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Frees the input_property_map_t*.

"
      end
    end

    class 4397367 "input_host_callbacks_t"
      visibility package stereotype "typedef" base_type class_ref 4397239 // input_host_callbacks
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4397495 "input_module"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8387383 // common (<directional composition>)
	relation 8387383 *-->
	  a role_name "common" public
	    comment "Common methods of the input module. This *must* be the first member
of input_module as users of this structure will cast a hw_module_t
to input_module pointer in contexts where it's known
the hw_module_t references a input_module.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8387383 // common (<directional composition>)
	  b parent class_ref 4305335 // hw_module_t
      end

      attribute 15707191 "init"
	public explicit_type "/** * Initialize the module with host callbacks. At this point the HAL should start up whatever * infrastructure it needs to in order to process input events. */ void (*)(const input_module_t* module, input_host_t* host, input_host_callbacks_t cb)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Initialize the module with host callbacks. At this point the HAL should start up whatever
     * infrastructure it needs to in order to process input events.
     */
    void (*${name})(const input_module_t* module, input_host_t* host, input_host_callbacks_t cb)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Initialize the module with host callbacks. At this point the HAL should start up whatever
infrastructure it needs to in order to process input events.

"
      end

      attribute 15707319 "notify_report"
	public explicit_type "/** * Sends an output report with a new set of state the host would like the given device to * assume. */ void (*)(const input_module_t* module, input_report_t* report)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Sends an output report with a new set of state the host would like the given device to
     * assume.
     */
    void (*${name})(const input_module_t* module, input_report_t* report)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Sends an output report with a new set of state the host would like the given device to
assume.

"
      end
    end

    class 4397623 "input_module_t"
      visibility package stereotype "typedef" base_type class_ref 4397495 // input_module
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8387255 // <dependency>
	relation 8387255 -_->
	  a public
	    cpp default "#include in source"
	    classrelation_ref 8387255 // <dependency>
	  b parent class_ref 4397495 // input_module
      end
    end

    class 4397751 "keymaster0_device_t"
      visibility package stereotype "typedef" explicit_base_type "keymaster0_device"
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4397879 "keymaster1_device_t"
      visibility package stereotype "typedef" explicit_base_type "keymaster1_device"
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4398007 "keymaster2_device_t"
      visibility package stereotype "typedef" explicit_base_type "keymaster2_device"
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4398135 "anonymous171"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Flags for keymaster0_device::flags
"
      attribute 15707447 "KEYMASTER_SOFTWARE_ONLY"
	public type class_ref 4398135 // anonymous171
	init_value " 1 << 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15707575 "KEYMASTER_BLOBS_ARE_STANDALONE"
	public type class_ref 4398135 // anonymous171
	init_value " 1 << 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15707703 "KEYMASTER_SUPPORTS_DSA"
	public type class_ref 4398135 // anonymous171
	init_value " 1 << 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15707831 "KEYMASTER_SUPPORTS_EC"
	public type class_ref 4398135 // anonymous171
	init_value " 1 << 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4398263 "keymaster_keypair_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Indicates this keymaster implementation does not have hardware that
keeps private keys out of user space.

This should not be implemented on anything other than the default
implementation.


This indicates that the key blobs returned via all the primitives
are sufficient to operate on their own without the trusted OS
querying userspace to retrieve some other data. Key blobs of
this type are normally returned encrypted with a
Key Encryption Key (KEK).

This is currently used by \"vold\" to know whether the whole disk
encryption secret can be unwrapped without having some external
service started up beforehand since the \"/data\" partition will
be unavailable at that point.


Indicates that the keymaster module supports DSA keys.


Indicates that the keymaster module supports EC keys.


Asymmetric key pair types.
"
      attribute 15707959 "TYPE_RSA"
	public type class_ref 4398263 // keymaster_keypair_t
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15708087 "TYPE_DSA"
	public type class_ref 4398263 // keymaster_keypair_t
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15708215 "TYPE_EC"
	public type class_ref 4398263 // keymaster_keypair_t
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4398391 "keymaster_rsa_keygen_params_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Parameters needed to generate an RSA key.
"
    end

    class 4398519 "keymaster_dsa_keygen_params_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Parameters needed to generate a DSA key.
"
    end

    class 4398647 "keymaster_ec_keygen_params_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Parameters needed to generate an EC key.

Field size is the only parameter in version 2. The sizes correspond to these required curves:

192 = NIST P-192
224 = NIST P-224
256 = NIST P-256
384 = NIST P-384
521 = NIST P-521

The parameters for these curves are available at: http://www.nsa.gov/ia/_files/nist-routines.pdf
in Chapter 4.
"
    end

    class 4398775 "keymaster_digest_algorithm_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Digest type.
"
      attribute 15708343 "DIGEST_NONE"
	public type class_ref 4398775 // keymaster_digest_algorithm_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4398903 "keymaster_rsa_padding_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Type of padding used for RSA operations.
"
      attribute 15708471 "PADDING_NONE"
	public type class_ref 4398903 // keymaster_rsa_padding_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4399031 "keymaster_dsa_sign_params_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8388791 // digest_type (<directional composition>)
	relation 8388791 *-->
	  a role_name "digest_type" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8388791 // digest_type (<directional composition>)
	  b parent class_ref 4398775 // keymaster_digest_algorithm_t
      end
    end

    class 4399159 "keymaster_ec_sign_params_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8388919 // digest_type (<directional composition>)
	relation 8388919 *-->
	  a role_name "digest_type" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8388919 // digest_type (<directional composition>)
	  b parent class_ref 4398775 // keymaster_digest_algorithm_t
      end
    end

    class 4399287 "keymaster_rsa_sign_params_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8389047 // digest_type (<directional composition>)
	relation 8389047 *-->
	  a role_name "digest_type" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8389047 // digest_type (<directional composition>)
	  b parent class_ref 4398775 // keymaster_digest_algorithm_t
      end

      classrelation 8389175 // padding_type (<directional composition>)
	relation 8389175 *-->
	  a role_name "padding_type" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8389175 // padding_type (<directional composition>)
	  b parent class_ref 4398903 // keymaster_rsa_padding_t
      end
    end

    class 4399415 "keymaster_tag_type_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Authorization tags each have an associated type.  This enumeration facilitates tagging each with
a type, by using the high four bits (of an implied 32-bit unsigned enum value) to specify up to
16 data types.  These values are ORed with tag IDs to generate the final tag ID values.
"
      attribute 15708599 "KM_INVALID"
	public type class_ref 4399415 // keymaster_tag_type_t
	init_value " 0 << 28"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15708727 "KM_ENUM"
	public type class_ref 4399415 // keymaster_tag_type_t
	init_value " 1 << 28"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15708855 "KM_ENUM_REP"
	public type class_ref 4399415 // keymaster_tag_type_t
	init_value " 2 << 28"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15708983 "KM_UINT"
	public type class_ref 4399415 // keymaster_tag_type_t
	init_value " 3 << 28"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15709111 "KM_UINT_REP"
	public type class_ref 4399415 // keymaster_tag_type_t
	init_value " 4 << 28"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15709239 "KM_ULONG"
	public type class_ref 4399415 // keymaster_tag_type_t
	init_value " 5 << 28"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15709367 "KM_DATE"
	public type class_ref 4399415 // keymaster_tag_type_t
	init_value " 6 << 28"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15709495 "KM_BOOL"
	public type class_ref 4399415 // keymaster_tag_type_t
	init_value " 7 << 28"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15709623 "KM_BIGNUM"
	public type class_ref 4399415 // keymaster_tag_type_t
	init_value " 8 << 28"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15709751 "KM_BYTES"
	public type class_ref 4399415 // keymaster_tag_type_t
	init_value " 9 << 28"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15709879 "KM_ULONG_REP"
	public type class_ref 4399415 // keymaster_tag_type_t
	init_value " 10 << 28"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4399543 "keymaster_tag_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Invalid type, used to designate a tag as uninitialized 
 Repeatable enumeration value. 
 Repeatable integer value 
 Repeatable long value "
      attribute 15710007 "KM_TAG_INVALID"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_INVALID | 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15710135 "KM_TAG_PURPOSE"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_ENUM_REP | 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15710263 "KM_TAG_ALGORITHM"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_ENUM | 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15710391 "KM_TAG_KEY_SIZE"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_UINT | 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15710519 "KM_TAG_BLOCK_MODE"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_ENUM_REP | 4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15710647 "KM_TAG_DIGEST"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_ENUM_REP | 5"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15710775 "KM_TAG_PADDING"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_ENUM_REP | 6"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15710903 "KM_TAG_CALLER_NONCE"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_BOOL | 7"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15711031 "KM_TAG_MIN_MAC_LENGTH"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_UINT | 8"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15711159 "KM_TAG_KDF"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_ENUM_REP | 9"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15711287 "KM_TAG_EC_CURVE"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_ENUM | 10"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15711415 "KM_TAG_RSA_PUBLIC_EXPONENT"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_ULONG | 200"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15711543 "KM_TAG_ECIES_SINGLE_HASH_MODE"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_BOOL | 201"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15711671 "KM_TAG_INCLUDE_UNIQUE_ID"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_BOOL | 202"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15711799 "KM_TAG_BLOB_USAGE_REQUIREMENTS"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_ENUM | 301"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15711927 "KM_TAG_BOOTLOADER_ONLY"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_BOOL | 302"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15712055 "KM_TAG_ACTIVE_DATETIME"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_DATE | 400"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15712183 "KM_TAG_ORIGINATION_EXPIRE_DATETIME"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_DATE | 401"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15712311 "KM_TAG_USAGE_EXPIRE_DATETIME"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_DATE | 402"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15712439 "KM_TAG_MIN_SECONDS_BETWEEN_OPS"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_UINT | 403"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15712567 "KM_TAG_MAX_USES_PER_BOOT"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_UINT | 404"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15712695 "KM_TAG_ALL_USERS"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_BOOL | 500"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15712823 "KM_TAG_USER_ID"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_UINT | 501"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15712951 "KM_TAG_USER_SECURE_ID"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_ULONG_REP | 502"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15713079 "KM_TAG_NO_AUTH_REQUIRED"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_BOOL | 503"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15713207 "KM_TAG_USER_AUTH_TYPE"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_ENUM | 504"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15713335 "KM_TAG_AUTH_TIMEOUT"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_UINT | 505"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15713463 "KM_TAG_ALLOW_WHILE_ON_BODY"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_BOOL | 506"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15713591 "KM_TAG_ALL_APPLICATIONS"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_BOOL | 600"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15713719 "KM_TAG_APPLICATION_ID"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_BYTES | 601"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15713847 "KM_TAG_EXPORTABLE"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_BOOL | 602"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15713975 "KM_TAG_APPLICATION_DATA"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_BYTES | 700"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15714103 "KM_TAG_CREATION_DATETIME"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_DATE | 701"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15714231 "KM_TAG_ORIGIN"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_ENUM | 702"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15714359 "KM_TAG_ROLLBACK_RESISTANT"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_BOOL | 703"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15714487 "KM_TAG_ROOT_OF_TRUST"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_BYTES | 704"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15714615 "KM_TAG_OS_VERSION"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_UINT | 705"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15714743 "KM_TAG_OS_PATCHLEVEL"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_UINT | 706"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15714871 "KM_TAG_UNIQUE_ID"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_BYTES | 707"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15714999 "KM_TAG_ATTESTATION_CHALLENGE"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_BYTES | 708"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15715127 "KM_TAG_ASSOCIATED_DATA"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_BYTES | 1000"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15715255 "KM_TAG_NONCE"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_BYTES | 1001"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15715383 "KM_TAG_AUTH_TOKEN"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_BYTES | 1002"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15715511 "KM_TAG_MAC_LENGTH"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_UINT | 1003"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15715639 "KM_TAG_RESET_SINCE_ID_ROTATION"
	public type class_ref 4399543 // keymaster_tag_t
	init_value " KM_BOOL | 1004"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4399671 "keymaster_algorithm_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Tags that must be semantically enforced by hardware and software implementations.

 Crypto parameters 
 keymaster_purpose_t. 
 keymaster_algorithm_t. 
 Key size in bits. 
 keymaster_block_mode_t. 
 keymaster_digest_t. 
 keymaster_padding_t. 
 Allow caller to specify nonce or IV. 
 Minimum length of MAC or AEAD authentication tag in
bits. 
 keymaster_kdf_t (keymaster2) 
 keymaster_ec_curve_t (keymaster2) 
 Algorithm-specific. 
 Whether the ephemeral public key is fed into
the KDF 
 If true, attestation certificates for this key
will contain an application-scoped and
time-bounded device-unique ID. (keymaster2) 
 Other hardware-enforced. 
 keymaster_key_blob_usage_requirements_t 
 Usable only by bootloader 

Tags that should be semantically enforced by hardware if possible and will otherwise be
enforced by software (keystore).

 Key validity period 
 Start of validity 
 Date when new \"messages\" should no
longer be created. 
 Date when existing \"messages\" should no
longer be trusted. 
 Minimum elapsed time between
cryptographic operations with the key. 
 Number of times the key can be used per
boot. 
 User authentication 
 Reserved for future use -- ignore 
 Reserved for future use -- ignore 
 Secure ID of authorized user or authenticator(s).
Disallowed if KM_TAG_ALL_USERS or
KM_TAG_NO_AUTH_REQUIRED is present. 
 If key is usable without authentication. 
 Bitmask of authenticator types allowed when
KM_TAG_USER_SECURE_ID contains a secure user ID,
rather than a secure authenticator ID.  Defined in
hw_authenticator_type_t in hw_auth_token.h. 
 Required freshness of user authentication for
private/secret key operations, in seconds.
Public key operations require no authentication.
If absent, authentication is required for every
use.  Authentication state is lost when the
device is powered off. 
 Allow key to be used after authentication timeout
if device is still on-body (requires secure
on-body sensor. 
 Application access control 
 Specified to indicate key is usable by all
applications. 
 Byte string identifying the authorized
application. 
 If true, private/secret key can be exported, but
only if all access control requirements for use are
met. (keymaster2) 

Semantically unenforceable tags, either because they have no specific meaning or because
they're informational only.

 Data provided by authorized application. 
 Key creation time 
 keymaster_key_origin_t. 
 Whether key is rollback-resistant. 
 Root of trust ID. 
 Version of system (keymaster2) 
 Patch level of system (keymaster2) 
 Used to provide unique ID in attestation 
 Used to provide challenge in attestation 
 Tags used only to provide data to or receive data from operations 
 Used to provide associated data for AEAD modes. 
 Nonce or Initialization Vector 
 Authentication token that proves secure user
authentication has been performed.  Structure
defined in hw_auth_token_t in hw_auth_token.h. 
 MAC or AEAD authentication tag length in
bits. 
 Whether the device has beeen factory reset
since the last unique ID rotation.  Used for
key attestation. 

Algorithms that may be provided by keymaster implementations.  Those that must be provided by all
implementations are tagged as \"required\".
"
      attribute 15715767 "KM_ALGORITHM_RSA"
	public type class_ref 4399671 // keymaster_algorithm_t
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15715895 "KM_ALGORITHM_EC"
	public type class_ref 4399671 // keymaster_algorithm_t
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15716023 "KM_ALGORITHM_AES"
	public type class_ref 4399671 // keymaster_algorithm_t
	init_value " 32"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15716151 "KM_ALGORITHM_HMAC"
	public type class_ref 4399671 // keymaster_algorithm_t
	init_value " 128"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4399799 "keymaster_block_mode_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Asymmetric algorithms. 
 KM_ALGORITHM_DSA = 2, -- Removed, do not re-use value 2.
 Block ciphers algorithms 
 MAC algorithms 

Symmetric block cipher modes provided by keymaster implementations.
"
      attribute 15716279 "KM_MODE_ECB"
	public type class_ref 4399799 // keymaster_block_mode_t
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15716407 "KM_MODE_CBC"
	public type class_ref 4399799 // keymaster_block_mode_t
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15716535 "KM_MODE_CTR"
	public type class_ref 4399799 // keymaster_block_mode_t
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15716663 "KM_MODE_GCM"
	public type class_ref 4399799 // keymaster_block_mode_t
	init_value " 32"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4399927 "keymaster_padding_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Unauthenticated modes, usable only for encryption/decryption and not generally recommended
except for compatibility with existing other protocols. 
 Authenticated modes, usable for encryption/decryption and signing/verification.  Recommended
over unauthenticated modes for all purposes. 

Padding modes that may be applied to plaintext for encryption operations.  This list includes
padding modes for both symmetric and asymmetric algorithms.  Note that implementations should not
provide all possible combinations of algorithm and padding, only the
cryptographically-appropriate pairs.
"
      attribute 15716791 "KM_PAD_NONE"
	public type class_ref 4399927 // keymaster_padding_t
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15716919 "KM_PAD_RSA_OAEP"
	public type class_ref 4399927 // keymaster_padding_t
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15717047 "KM_PAD_RSA_PSS"
	public type class_ref 4399927 // keymaster_padding_t
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15717175 "KM_PAD_RSA_PKCS1_1_5_ENCRYPT"
	public type class_ref 4399927 // keymaster_padding_t
	init_value " 4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15717303 "KM_PAD_RSA_PKCS1_1_5_SIGN"
	public type class_ref 4399927 // keymaster_padding_t
	init_value " 5"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15717431 "KM_PAD_PKCS7"
	public type class_ref 4399927 // keymaster_padding_t
	init_value " 64"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4400055 "keymaster_digest_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " deprecated 

Digests provided by keymaster implementations.
"
      attribute 15717559 "KM_DIGEST_NONE"
	public type class_ref 4400055 // keymaster_digest_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15717687 "KM_DIGEST_MD5"
	public type class_ref 4400055 // keymaster_digest_t
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15717815 "KM_DIGEST_SHA1"
	public type class_ref 4400055 // keymaster_digest_t
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15717943 "KM_DIGEST_SHA_2_224"
	public type class_ref 4400055 // keymaster_digest_t
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15718071 "KM_DIGEST_SHA_2_256"
	public type class_ref 4400055 // keymaster_digest_t
	init_value " 4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15718199 "KM_DIGEST_SHA_2_384"
	public type class_ref 4400055 // keymaster_digest_t
	init_value " 5"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15718327 "KM_DIGEST_SHA_2_512"
	public type class_ref 4400055 // keymaster_digest_t
	init_value " 6"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4400183 "keymaster_kdf_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Optional, may not be implemented in hardware, will be handled in software
if needed. 

Key derivation functions, mostly used in ECIES.
"
      attribute 15718455 "KM_KDF_NONE"
	public type class_ref 4400183 // keymaster_kdf_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15718583 "KM_KDF_RFC5869_SHA256"
	public type class_ref 4400183 // keymaster_kdf_t
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15718711 "KM_KDF_ISO18033_2_KDF1_SHA1"
	public type class_ref 4400183 // keymaster_kdf_t
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15718839 "KM_KDF_ISO18033_2_KDF1_SHA256"
	public type class_ref 4400183 // keymaster_kdf_t
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15718967 "KM_KDF_ISO18033_2_KDF2_SHA1"
	public type class_ref 4400183 // keymaster_kdf_t
	init_value " 4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15719095 "KM_KDF_ISO18033_2_KDF2_SHA256"
	public type class_ref 4400183 // keymaster_kdf_t
	init_value " 5"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4400311 "keymaster_ec_curve_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Do not apply a key derivation function; use the raw agreed key 
 HKDF defined in RFC 5869 with SHA256 
 KDF1 defined in ISO 18033-2 with SHA1 
 KDF1 defined in ISO 18033-2 with SHA256 
 KDF2 defined in ISO 18033-2 with SHA1 
 KDF2 defined in ISO 18033-2 with SHA256 

Supported EC curves, used in ECDSA/ECIES.
"
      attribute 15719223 "KM_EC_CURVE_P_224"
	public type class_ref 4400311 // keymaster_ec_curve_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15719351 "KM_EC_CURVE_P_256"
	public type class_ref 4400311 // keymaster_ec_curve_t
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15719479 "KM_EC_CURVE_P_384"
	public type class_ref 4400311 // keymaster_ec_curve_t
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15719607 "KM_EC_CURVE_P_521"
	public type class_ref 4400311 // keymaster_ec_curve_t
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4400439 "keymaster_key_origin_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The origin of a key (or pair), i.e. where it was generated.  Note that KM_TAG_ORIGIN can be found
in either the hardware-enforced or software-enforced list for a key, indicating whether the key
is hardware or software-based.  Specifically, a key with KM_ORIGIN_GENERATED in the
hardware-enforced list is guaranteed never to have existed outide the secure hardware.
"
      attribute 15719735 "KM_ORIGIN_GENERATED"
	public type class_ref 4400439 // keymaster_key_origin_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15719863 "KM_ORIGIN_DERIVED"
	public type class_ref 4400439 // keymaster_key_origin_t
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15719991 "KM_ORIGIN_IMPORTED"
	public type class_ref 4400439 // keymaster_key_origin_t
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15720119 "KM_ORIGIN_UNKNOWN"
	public type class_ref 4400439 // keymaster_key_origin_t
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4400567 "keymaster_key_blob_usage_requirements_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Generated in keymaster.  Should not exist outside the TEE. 
 Derived inside keymaster.  Likely exists off-device. 
 Imported into keymaster.  Existed as cleartext in Android. 
 Keymaster did not record origin.  This value can only be seen on
keys in a keymaster0 implementation.  The keymaster0 adapter uses
this value to document the fact that it is unkown whether the key
was generated inside or imported into keymaster. 

Usability requirements of key blobs.  This defines what system functionality must be available
for the key to function.  For example, key \"blobs\" which are actually handles referencing
encrypted key material stored in the file system cannot be used until the file system is
available, and should have BLOB_REQUIRES_FILE_SYSTEM.  Other requirements entries will be added
as needed for implementations.
"
      attribute 15720247 "KM_BLOB_STANDALONE"
	public type class_ref 4400567 // keymaster_key_blob_usage_requirements_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15720375 "KM_BLOB_REQUIRES_FILE_SYSTEM"
	public type class_ref 4400567 // keymaster_key_blob_usage_requirements_t
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4400695 "keymaster_purpose_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Possible purposes of a key (or pair).
"
      attribute 15720503 "KM_PURPOSE_ENCRYPT"
	public type class_ref 4400695 // keymaster_purpose_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15720631 "KM_PURPOSE_DECRYPT"
	public type class_ref 4400695 // keymaster_purpose_t
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15720759 "KM_PURPOSE_SIGN"
	public type class_ref 4400695 // keymaster_purpose_t
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15720887 "KM_PURPOSE_VERIFY"
	public type class_ref 4400695 // keymaster_purpose_t
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15721015 "KM_PURPOSE_DERIVE_KEY"
	public type class_ref 4400695 // keymaster_purpose_t
	init_value " 4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4400823 "keymaster_blob_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Usable with RSA, EC and AES keys. 
 Usable with RSA, EC and AES keys. 
 Usable with RSA, EC and HMAC keys. 
 Usable with RSA, EC and HMAC keys. 
 Usable with EC keys. "
    end

    class 4400951 "keymaster_key_param_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8389559 // tag (<directional composition>)
	relation 8389559 *-->
	  a role_name "tag" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8389559 // tag (<directional composition>)
	  b parent class_ref 4399543 // keymaster_tag_t
      end

      attribute 15721143 "boolean"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " KM_BOOL "
      end

      classrelation 8390199 // blob (<directional composition>)
	relation 8390199 *-->
	  a role_name "blob" public
	    comment " KM_BIGNUM and KM_BYTES"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8390199 // blob (<directional composition>)
	  b parent class_ref 4400823 // keymaster_blob_t
      end
    end

    class 4401079 "keymaster_key_param_set_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8390327 // params (<unidirectional association>)
	relation 8390327 --->
	  a role_name "params" public
	    comment " may be NULL if length == 0 "
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8390327 // params (<unidirectional association>)
	  b parent class_ref 4400951 // keymaster_key_param_t
      end

    end

    class 4401207 "keymaster_key_characteristics_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Parameters that define a key's characteristics, including authorized modes of usage and access
control restrictions.  The parameters are divided into two categories, those that are enforced by
secure hardware, and those that are not.  For a software-only keymaster implementation the
enforced array must NULL.  Hardware implementations must enforce everything in the enforced
array.
"
      classrelation 8390583 // hw_enforced (<directional composition>)
	relation 8390583 *-->
	  a role_name "hw_enforced" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8390583 // hw_enforced (<directional composition>)
	  b parent class_ref 4401079 // keymaster_key_param_set_t
      end

      classrelation 8390711 // sw_enforced (<directional composition>)
	relation 8390711 *-->
	  a role_name "sw_enforced" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8390711 // sw_enforced (<directional composition>)
	  b parent class_ref 4401079 // keymaster_key_param_set_t
      end
    end

    class 4401335 "keymaster_key_blob_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4401463 "keymaster_cert_chain_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8391095 // entries (<unidirectional association>)
	relation 8391095 --->
	  a role_name "entries" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8391095 // entries (<unidirectional association>)
	  b parent class_ref 4400823 // keymaster_blob_t
      end

    end

    class 4401591 "keymaster_verified_boot_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15721271 "KM_VERIFIED_BOOT_VERIFIED"
	public type class_ref 4401591 // keymaster_verified_boot_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15721399 "KM_VERIFIED_BOOT_SELF_SIGNED"
	public type class_ref 4401591 // keymaster_verified_boot_t
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15721527 "KM_VERIFIED_BOOT_UNVERIFIED"
	public type class_ref 4401591 // keymaster_verified_boot_t
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15721655 "KM_VERIFIED_BOOT_FAILED"
	public type class_ref 4401591 // keymaster_verified_boot_t
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4401719 "keymaster_security_level_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Full chain of trust extending from the bootloader to
verified partitions, including the bootloader, boot
partition, and all verified partitions
 The boot partition has been verified using the embedded
certificate, and the signature is valid. The bootloader
displays a warning and the fingerprint of the public
key before allowing the boot process to continue.
 The device may be freely modified. Device integrity is left
to the user to verify out-of-band. The bootloader
displays a warning to the user before allowing the boot
process to continue 
 The device failed verification. The bootloader displays a
warning and stops the boot process, so no keymaster
implementation should ever actually return this value,
since it should not run.  Included here only for
completeness. "
      attribute 15721783 "KM_SECURITY_LEVEL_SOFTWARE"
	public type class_ref 4401719 // keymaster_security_level_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15721911 "KM_SECURITY_LEVEL_TRUSTED_ENVIRONMENT"
	public type class_ref 4401719 // keymaster_security_level_t
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4401847 "keymaster_key_format_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Formats for key import and export.
"
      attribute 15722039 "KM_KEY_FORMAT_X509"
	public type class_ref 4401847 // keymaster_key_format_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15722167 "KM_KEY_FORMAT_PKCS8"
	public type class_ref 4401847 // keymaster_key_format_t
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15722295 "KM_KEY_FORMAT_RAW"
	public type class_ref 4401847 // keymaster_key_format_t
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4401975 "keymaster_operation_handle_t"
      visibility package stereotype "typedef" explicit_base_type "uint64_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " for public key export 
 for asymmetric key pair import 
 for symmetric key import and export

The keymaster operation API consists of begin, update, finish and abort. This is the type of the
handle used to tie the sequence of calls together.  A 64-bit value is used because it's important
that handles not be predictable.  Implementations must use strong random numbers for handle
values.
"
    end

    class 4402103 "keymaster_error_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15722423 "KM_ERROR_OK"
	public type class_ref 4402103 // keymaster_error_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15722551 "KM_ERROR_ROOT_OF_TRUST_ALREADY_SET"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15722679 "KM_ERROR_UNSUPPORTED_PURPOSE"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15722807 "KM_ERROR_INCOMPATIBLE_PURPOSE"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15722935 "KM_ERROR_UNSUPPORTED_ALGORITHM"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15723063 "KM_ERROR_INCOMPATIBLE_ALGORITHM"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -5"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15723191 "KM_ERROR_UNSUPPORTED_KEY_SIZE"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -6"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15723319 "KM_ERROR_UNSUPPORTED_BLOCK_MODE"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -7"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15723447 "KM_ERROR_INCOMPATIBLE_BLOCK_MODE"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -8"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15723575 "KM_ERROR_UNSUPPORTED_MAC_LENGTH"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -9"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15723703 "KM_ERROR_UNSUPPORTED_PADDING_MODE"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -10"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15723831 "KM_ERROR_INCOMPATIBLE_PADDING_MODE"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -11"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15723959 "KM_ERROR_UNSUPPORTED_DIGEST"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -12"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15724087 "KM_ERROR_INCOMPATIBLE_DIGEST"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -13"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15724215 "KM_ERROR_INVALID_EXPIRATION_TIME"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -14"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15724343 "KM_ERROR_INVALID_USER_ID"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -15"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15724471 "KM_ERROR_INVALID_AUTHORIZATION_TIMEOUT"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -16"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15724599 "KM_ERROR_UNSUPPORTED_KEY_FORMAT"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -17"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15724727 "KM_ERROR_INCOMPATIBLE_KEY_FORMAT"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -18"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15724855 "KM_ERROR_UNSUPPORTED_KEY_ENCRYPTION_ALGORITHM"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -19"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15724983 "KM_ERROR_UNSUPPORTED_KEY_VERIFICATION_ALGORITHM"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -20"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15725111 "KM_ERROR_INVALID_INPUT_LENGTH"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -21"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15725239 "KM_ERROR_KEY_EXPORT_OPTIONS_INVALID"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -22"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15725367 "KM_ERROR_DELEGATION_NOT_ALLOWED"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -23"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15725495 "KM_ERROR_KEY_NOT_YET_VALID"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -24"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15725623 "KM_ERROR_KEY_EXPIRED"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -25"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15725751 "KM_ERROR_KEY_USER_NOT_AUTHENTICATED"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -26"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15725879 "KM_ERROR_OUTPUT_PARAMETER_NULL"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -27"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15726007 "KM_ERROR_INVALID_OPERATION_HANDLE"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -28"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15726135 "KM_ERROR_INSUFFICIENT_BUFFER_SPACE"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -29"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15726263 "KM_ERROR_VERIFICATION_FAILED"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -30"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15726391 "KM_ERROR_TOO_MANY_OPERATIONS"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -31"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15726519 "KM_ERROR_UNEXPECTED_NULL_POINTER"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -32"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15726647 "KM_ERROR_INVALID_KEY_BLOB"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -33"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15726775 "KM_ERROR_IMPORTED_KEY_NOT_ENCRYPTED"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -34"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15726903 "KM_ERROR_IMPORTED_KEY_DECRYPTION_FAILED"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -35"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15727031 "KM_ERROR_IMPORTED_KEY_NOT_SIGNED"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -36"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15727159 "KM_ERROR_IMPORTED_KEY_VERIFICATION_FAILED"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -37"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15727287 "KM_ERROR_INVALID_ARGUMENT"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -38"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15727415 "KM_ERROR_UNSUPPORTED_TAG"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -39"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15727543 "KM_ERROR_INVALID_TAG"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -40"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15727671 "KM_ERROR_MEMORY_ALLOCATION_FAILED"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -41"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15727799 "KM_ERROR_IMPORT_PARAMETER_MISMATCH"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -44"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15727927 "KM_ERROR_SECURE_HW_ACCESS_DENIED"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -45"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15728055 "KM_ERROR_OPERATION_CANCELLED"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -46"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15728183 "KM_ERROR_CONCURRENT_ACCESS_CONFLICT"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -47"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15728311 "KM_ERROR_SECURE_HW_BUSY"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -48"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15728439 "KM_ERROR_SECURE_HW_COMMUNICATION_FAILED"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -49"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15728567 "KM_ERROR_UNSUPPORTED_EC_FIELD"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -50"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15728695 "KM_ERROR_MISSING_NONCE"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -51"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15728823 "KM_ERROR_INVALID_NONCE"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -52"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15728951 "KM_ERROR_MISSING_MAC_LENGTH"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -53"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15729079 "KM_ERROR_KEY_RATE_LIMIT_EXCEEDED"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -54"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15729207 "KM_ERROR_CALLER_NONCE_PROHIBITED"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -55"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15729335 "KM_ERROR_KEY_MAX_OPS_EXCEEDED"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -56"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15729463 "KM_ERROR_INVALID_MAC_LENGTH"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -57"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15729591 "KM_ERROR_MISSING_MIN_MAC_LENGTH"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -58"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15729719 "KM_ERROR_UNSUPPORTED_MIN_MAC_LENGTH"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -59"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15729847 "KM_ERROR_UNSUPPORTED_KDF"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -60"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15729975 "KM_ERROR_UNSUPPORTED_EC_CURVE"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -61"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15730103 "KM_ERROR_KEY_REQUIRES_UPGRADE"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -62"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15730231 "KM_ERROR_ATTESTATION_CHALLENGE_MISSING"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -63"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15730359 "KM_ERROR_KEYMASTER_NOT_CONFIGURED"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -64"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15730487 "KM_ERROR_UNIMPLEMENTED"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -100"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15730615 "KM_ERROR_VERSION_MISMATCH"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -101"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15730743 "KM_ERROR_UNKNOWN_ERROR"
	public type class_ref 4402103 // keymaster_error_t
	init_value " -1000"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4402231 "light_device_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8391479 // common (<directional composition>)
	relation 8391479 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8391479 // common (<directional composition>)
	  b parent class_ref 4305975 // hw_device_t
      end

      attribute 15730871 "set_light"
	public explicit_type "/** * Set the provided lights to the provided values. * * Returns: 0 on succes, error code on failure. */ int (*)(struct light_device_t* dev, struct light_state_t const* state)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Set the provided lights to the provided values.
     *
     * Returns: 0 on succes, error code on failure.
     */
    int (*${name})(struct light_device_t* dev,
            struct light_state_t const* state)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Set the provided lights to the provided values.

Returns: 0 on succes, error code on failure.

"
      end
    end

    class 4402359 "local_time_module"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Every hardware module must have a data structure named HAL_MODULE_INFO_SYM
and the fields of this data structure must begin with hw_module_t
followed by module specific information.
"
      classrelation 8391607 // common (<directional composition>)
	relation 8391607 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8391607 // common (<directional composition>)
	  b parent class_ref 4305335 // hw_module_t
      end
    end

    class 4402487 "local_time_hw_device"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8391735 // common (<directional composition>)
	relation 8391735 *-->
	  a role_name "common" public
	    comment "Common methods of the local time hardware device.  This *must* be the first member of
local_time_hw_device as users of this structure will cast a hw_device_t to
local_time_hw_device pointer in contexts where it's known the hw_device_t references a
local_time_hw_device.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8391735 // common (<directional composition>)
	  b parent class_ref 4305975 // hw_device_t
      end

      attribute 15730999 "get_local_time"
	public explicit_type "/** * * Returns the current value of the system wide local time counter */ int64_t (*)(struct local_time_hw_device* dev)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     *
     * Returns the current value of the system wide local time counter
     */
    int64_t (*${name})(struct local_time_hw_device* dev)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Returns the current value of the system wide local time counter

"
      end

      attribute 15731127 "get_local_freq"
	public explicit_type "/** * * Returns the nominal frequency (in hertz) of the system wide local time * counter */ uint64_t (*)(struct local_time_hw_device* dev)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     *
     * Returns the nominal frequency (in hertz) of the system wide local time
     * counter
     */
    uint64_t (*${name})(struct local_time_hw_device* dev)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Returns the nominal frequency (in hertz) of the system wide local time
counter

"
      end

      attribute 15731255 "set_local_slew"
	public explicit_type "/** * * Sets the HW slew rate of oscillator which drives the system wide local * time counter. On success, platforms should return 0. Platforms which * do not support HW slew should leave this method set to NULL. * * Valid values for rate range from MIN_INT16 to MAX_INT16. Platform * implementations should attempt map this range linearly to the min/max * slew rate of their hardware. */ int (*)(struct local_time_hw_device* dev, int16_t rate)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     *
     * Sets the HW slew rate of oscillator which drives the system wide local
     * time counter.  On success, platforms should return 0.  Platforms which
     * do not support HW slew should leave this method set to NULL.
     *
     * Valid values for rate range from MIN_INT16 to MAX_INT16.  Platform
     * implementations should attempt map this range linearly to the min/max
     * slew rate of their hardware.
     */
    int (*${name})(struct local_time_hw_device* dev, int16_t rate)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Sets the HW slew rate of oscillator which drives the system wide local
time counter.  On success, platforms should return 0.  Platforms which
do not support HW slew should leave this method set to NULL.

Valid values for rate range from MIN_INT16 to MAX_INT16.  Platform
implementations should attempt map this range linearly to the min/max
slew rate of their hardware.

"
      end

      attribute 15731383 "get_debug_log"
	public explicit_type "/** * * A method used to collect low level sync data in a lab environments. * Most HAL implementations will simply set this member to NULL, or return * -EINVAL to indicate that this functionality is not supported. * Production HALs should never support this method. */ int (*)(struct local_time_hw_device* dev, struct local_time_debug_event* records, int max_records)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     *
     * A method used to collect low level sync data in a lab environments.
     * Most HAL implementations will simply set this member to NULL, or return
     * -EINVAL to indicate that this functionality is not supported.
     * Production HALs should never support this method.
     */
    int (*${name})(struct local_time_hw_device* dev,
                         struct local_time_debug_event* records,
                         int max_records)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
A method used to collect low level sync data in a lab environments.
Most HAL implementations will simply set this member to NULL, or return
-EINVAL to indicate that this functionality is not supported.
Production HALs should never support this method.

"
      end
    end

    class 4402615 "local_time_hw_device_t"
      visibility package stereotype "typedef" base_type class_ref 4402487 // local_time_hw_device
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8391863 // <dependency>
	relation 8391863 -_->
	  a public
	    cpp default "#include in source"
	    classrelation_ref 8391863 // <dependency>
	  b parent class_ref 4402487 // local_time_hw_device
      end
    end

    class 4402743 "memtrack_record"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The Memory Tracker HAL is designed to return information about device-specific
memory usage.  The primary goal is to be able to track memory that is not
trackable in any other way, for example texture memory that is allocated by
a process, but not mapped in to that process' address space.
A secondary goal is to be able to categorize memory used by a process into
GL, graphics, etc.  All memory sizes should be in real memory usage,
accounting for stride, bit depth, rounding up to page size, etc.

A process collecting memory statistics will call getMemory for each
combination of pid and memory type.  For each memory type that it recognizes
the HAL should fill out an array of memtrack_record structures breaking
down the statistics of that memory type as much as possible.  For example,
getMemory(<pid>, MEMTRACK_TYPE_GL) might return:
{ { 4096,  ACCOUNTED | PRIVATE | SYSTEM },
  { 40960, UNACCOUNTED | PRIVATE | SYSTEM },
  { 8192,  ACCOUNTED | PRIVATE | DEDICATED },
  { 8192,  UNACCOUNTED | PRIVATE | DEDICATED } }
If the HAL could not differentiate between SYSTEM and DEDICATED memory, it
could return:
{ { 12288,  ACCOUNTED | PRIVATE },
  { 49152,  UNACCOUNTED | PRIVATE } }

Memory should not overlap between types.  For example, a graphics buffer
that has been mapped into the GPU as a surface should show up when
MEMTRACK_TYPE_GRAPHICS is requested, and not when MEMTRACK_TYPE_GL
is requested.
"
      attribute 15731511 "flags"
	public explicit_type "uint"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4402871 "memtrack_module"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Every hardware module must have a data structure named HAL_MODULE_INFO_SYM
and the fields of this data structure must begin with hw_module_t
followed by module specific information.
"
      classrelation 8392119 // common (<directional composition>)
	relation 8392119 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8392119 // common (<directional composition>)
	  b parent class_ref 4305335 // hw_module_t
      end

      attribute 15731639 "init"
	public explicit_type "/** * (*init)() performs memtrack management setup actions and is called * once before any calls to getMemory(). * Returns 0 on success, -errno on error. */ int (*)(const struct memtrack_module *module)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * (*init)() performs memtrack management setup actions and is called
     * once before any calls to getMemory().
     * Returns 0 on success, -errno on error.
     */
    int (*${name})(const struct memtrack_module *module)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*init)() performs memtrack management setup actions and is called
once before any calls to getMemory().
Returns 0 on success, -errno on error.

"
      end

      attribute 15731767 "getMemory"
	public explicit_type "/** * (*getMemory)() expects an array of record objects and populates up to * *num_record structures with the sizes of memory plus associated flags for * that memory. It also updates *num_records with the total number of * records it could return if *num_records was large enough when passed in. * Returning records with size 0 is expected, the number of records should * not vary between calls to getMemory for the same memory type, even * for different pids. * * The caller will often call getMemory for a type and pid with * *num_records == 0 to determine how many records to allocate room for, * this case should be a fast-path in the HAL, returning a constant and * not querying any kernel files. If *num_records passed in is 0, * then records may be NULL. * * This function must be thread-safe, it may get called from multiple * threads at the same time. * * Returns 0 on success, -ENODEV if the type is not supported, -errno * on other errors. */ int (*)(const struct memtrack_module *module, pid_t pid, int type, struct memtrack_record *records, size_t *num_records)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * (*getMemory)() expects an array of record objects and populates up to
     * *num_record structures with the sizes of memory plus associated flags for
     * that memory.  It also updates *num_records with the total number of
     * records it could return if *num_records was large enough when passed in.
     * Returning records with size 0 is expected, the number of records should
     * not vary between calls to getMemory for the same memory type, even
     * for different pids.
     *
     * The caller will often call getMemory for a type and pid with
     * *num_records == 0 to determine how many records to allocate room for,
     * this case should be a fast-path in the HAL, returning a constant and
     * not querying any kernel files.  If *num_records passed in is 0,
     * then records may be NULL.
     *
     * This function must be thread-safe, it may get called from multiple
     * threads at the same time.
     *
     * Returns 0 on success, -ENODEV if the type is not supported, -errno
     * on other errors.
     */
    int (*${name})(const struct memtrack_module *module,
                     pid_t pid,
                     int type,
                     struct memtrack_record *records,
                     size_t *num_records)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*getMemory)() expects an array of record objects and populates up to
*num_record structures with the sizes of memory plus associated flags for
that memory.  It also updates *num_records with the total number of
records it could return if *num_records was large enough when passed in.
Returning records with size 0 is expected, the number of records should
not vary between calls to getMemory for the same memory type, even
for different pids.

The caller will often call getMemory for a type and pid with
*num_records == 0 to determine how many records to allocate room for,
this case should be a fast-path in the HAL, returning a constant and
not querying any kernel files.  If *num_records passed in is 0,
then records may be NULL.

This function must be thread-safe, it may get called from multiple
threads at the same time.

Returns 0 on success, -ENODEV if the type is not supported, -errno
on other errors.

"
      end
    end

    class 4402999 "memtrack_module_t"
      visibility package stereotype "typedef" base_type class_ref 4402871 // memtrack_module
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4403127 "nfc_event_t"
      visibility package stereotype "typedef" explicit_base_type "uint8_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "HAL events that can be passed back to the stack
"
    end

    class 4403255 "anonymous172"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15731895 "HAL_NFC_OPEN_CPLT_EVT"
	public type class_ref 4403255 // anonymous172
	init_value " 0x00"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15732023 "HAL_NFC_CLOSE_CPLT_EVT"
	public type class_ref 4403255 // anonymous172
	init_value " 0x01"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15732151 "HAL_NFC_POST_INIT_CPLT_EVT"
	public type class_ref 4403255 // anonymous172
	init_value " 0x02"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15732279 "HAL_NFC_PRE_DISCOVER_CPLT_EVT"
	public type class_ref 4403255 // anonymous172
	init_value " 0x03"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15732407 "HAL_NFC_REQUEST_CONTROL_EVT"
	public type class_ref 4403255 // anonymous172
	init_value " 0x04"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15732535 "HAL_NFC_RELEASE_CONTROL_EVT"
	public type class_ref 4403255 // anonymous172
	init_value " 0x05"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15732663 "HAL_NFC_ERROR_EVT"
	public type class_ref 4403255 // anonymous172
	init_value " 0x06
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4403383 "nfc_status_t"
      visibility package stereotype "typedef" explicit_base_type "uint8_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Allowed status return values for each of the HAL methods
"
    end

    class 4403511 "anonymous173"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15732791 "HAL_NFC_STATUS_OK"
	public type class_ref 4403511 // anonymous173
	init_value " 0x00"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15732919 "HAL_NFC_STATUS_FAILED"
	public type class_ref 4403511 // anonymous173
	init_value " 0x01"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15733047 "HAL_NFC_STATUS_ERR_TRANSPORT"
	public type class_ref 4403511 // anonymous173
	init_value " 0x02"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15733175 "HAL_NFC_STATUS_ERR_CMD_TIMEOUT"
	public type class_ref 4403511 // anonymous173
	init_value " 0x03"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15733303 "HAL_NFC_STATUS_REFUSED"
	public type class_ref 4403511 // anonymous173
	init_value " 0x04
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4403639 "nfc_stack_callback_t"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}( ${name}) (nfc_event_t event, nfc_status_t event_status);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The callback passed in from the NFC stack that the HAL
can use to pass events back to the stack.
"
    end

    class 4403767 "nfc_stack_data_callback_t"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}( ${name}) (uint16_t data_len, uint8_t* p_data);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The callback passed in from the NFC stack that the HAL
can use to pass incomming data to the stack.
"
    end

    class 4403895 "nfc_nci_device"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " nfc_nci_device_t starts with a hw_device_t struct,
followed by device-specific methods and members.

All methods in the NCI HAL are asynchronous.
"
      classrelation 8392503 // common (<directional composition>)
	relation 8392503 *-->
	  a role_name "common" public
	    comment "Common methods of the NFC NCI device.  This *must* be the first member of
nfc_nci_device_t as users of this structure will cast a hw_device_t to
nfc_nci_device_t pointer in contexts where it's known the hw_device_t references a
nfc_nci_device_t.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8392503 // common (<directional composition>)
	  b parent class_ref 4305975 // hw_device_t
      end

      attribute 15733431 "open"
	public explicit_type "/* * (*open)() Opens the NFC controller device and performs initialization. * This may include patch download and other vendor-specific initialization. * * If open completes successfully, the controller should be ready to perform * NCI initialization - ie accept CORE_RESET and subsequent commands through * the write() call. * * If open() returns 0, the NCI stack will wait for a HAL_NFC_OPEN_CPLT_EVT * before continuing. * * If open() returns any other value, the NCI stack will stop. * */ int (*)(const struct nfc_nci_device *p_dev, nfc_stack_callback_t *p_cback, nfc_stack_data_callback_t *p_data_cback)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    /*
     * (*open)() Opens the NFC controller device and performs initialization.
     * This may include patch download and other vendor-specific initialization.
     *
     * If open completes successfully, the controller should be ready to perform
     * NCI initialization - ie accept CORE_RESET and subsequent commands through
     * the write() call.
     *
     * If open() returns 0, the NCI stack will wait for a HAL_NFC_OPEN_CPLT_EVT
     * before continuing.
     *
     * If open() returns any other value, the NCI stack will stop.
     *
     */
    int (*${name})(const struct nfc_nci_device *p_dev, nfc_stack_callback_t *p_cback,
            nfc_stack_data_callback_t *p_data_cback)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*open)() Opens the NFC controller device and performs initialization.
This may include patch download and other vendor-specific initialization.

If open completes successfully, the controller should be ready to perform
NCI initialization - ie accept CORE_RESET and subsequent commands through
the write() call.

If open() returns 0, the NCI stack will wait for a HAL_NFC_OPEN_CPLT_EVT
before continuing.

If open() returns any other value, the NCI stack will stop.


"
      end

      attribute 15733559 "write"
	public explicit_type "/* * (*write)() Performs an NCI write. * * This method may queue writes and return immediately. The only * requirement is that the writes are executed in order. */ int (*)(const struct nfc_nci_device *p_dev, uint16_t data_len, const uint8_t *p_data)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * (*write)() Performs an NCI write.
     *
     * This method may queue writes and return immediately. The only
     * requirement is that the writes are executed in order.
     */
    int (*${name})(const struct nfc_nci_device *p_dev, uint16_t data_len, const uint8_t *p_data)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*write)() Performs an NCI write.

This method may queue writes and return immediately. The only
requirement is that the writes are executed in order.

"
      end

      attribute 15733687 "core_initialized"
	public explicit_type "/* * (*core_initialized)() is called after the CORE_INIT_RSP is received from the NFCC. * At this time, the HAL can do any chip-specific configuration. * * If core_initialized() returns 0, the NCI stack will wait for a HAL_NFC_POST_INIT_CPLT_EVT * before continuing. * * If core_initialized() returns any other value, the NCI stack will continue * immediately. */ int (*)(const struct nfc_nci_device *p_dev, uint8_t* p_core_init_rsp_params)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * (*core_initialized)() is called after the CORE_INIT_RSP is received from the NFCC.
     * At this time, the HAL can do any chip-specific configuration.
     *
     * If core_initialized() returns 0, the NCI stack will wait for a HAL_NFC_POST_INIT_CPLT_EVT
     * before continuing.
     *
     * If core_initialized() returns any other value, the NCI stack will continue
     * immediately.
     */
    int (*${name})(const struct nfc_nci_device *p_dev, uint8_t* p_core_init_rsp_params)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*core_initialized)() is called after the CORE_INIT_RSP is received from the NFCC.
At this time, the HAL can do any chip-specific configuration.

If core_initialized() returns 0, the NCI stack will wait for a HAL_NFC_POST_INIT_CPLT_EVT
before continuing.

If core_initialized() returns any other value, the NCI stack will continue
immediately.

"
      end

      attribute 15733815 "pre_discover"
	public explicit_type "/* * (*pre_discover)() Is called every time before starting RF discovery. * It is a good place to do vendor-specific configuration that must be * performed every time RF discovery is about to be started. * * If pre_discover() returns 0, the NCI stack will wait for a HAL_NFC_PRE_DISCOVER_CPLT_EVT * before continuing. * * If pre_discover() returns any other value, the NCI stack will start * RF discovery immediately. */ int (*)(const struct nfc_nci_device *p_dev)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * (*pre_discover)() Is called every time before starting RF discovery.
     * It is a good place to do vendor-specific configuration that must be
     * performed every time RF discovery is about to be started.
     *
     * If pre_discover() returns 0, the NCI stack will wait for a HAL_NFC_PRE_DISCOVER_CPLT_EVT
     * before continuing.
     *
     * If pre_discover() returns any other value, the NCI stack will start
     * RF discovery immediately.
     */
    int (*${name})(const struct nfc_nci_device *p_dev)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*pre_discover)() Is called every time before starting RF discovery.
It is a good place to do vendor-specific configuration that must be
performed every time RF discovery is about to be started.

If pre_discover() returns 0, the NCI stack will wait for a HAL_NFC_PRE_DISCOVER_CPLT_EVT
before continuing.

If pre_discover() returns any other value, the NCI stack will start
RF discovery immediately.

"
      end

      attribute 15733943 "close"
	public explicit_type "/* * (*close)() Closed the NFC controller. Should free all resources. */ int (*)(const struct nfc_nci_device *p_dev)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * (*close)() Closed the NFC controller. Should free all resources.
     */
    int (*${name})(const struct nfc_nci_device *p_dev)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*close)() Closed the NFC controller. Should free all resources.

"
      end

      attribute 15734071 "control_granted"
	public explicit_type "/* * (*control_granted)() Grant HAL the exclusive control to send NCI commands. * Called in response to HAL_REQUEST_CONTROL_EVT. * Must only be called when there are no NCI commands pending. * HAL_RELEASE_CONTROL_EVT will notify when HAL no longer needs exclusive control. */ int (*)(const struct nfc_nci_device *p_dev)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * (*control_granted)() Grant HAL the exclusive control to send NCI commands.
     * Called in response to HAL_REQUEST_CONTROL_EVT.
     * Must only be called when there are no NCI commands pending.
     * HAL_RELEASE_CONTROL_EVT will notify when HAL no longer needs exclusive control.
     */
    int (*${name})(const struct nfc_nci_device *p_dev)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*control_granted)() Grant HAL the exclusive control to send NCI commands.
Called in response to HAL_REQUEST_CONTROL_EVT.
Must only be called when there are no NCI commands pending.
HAL_RELEASE_CONTROL_EVT will notify when HAL no longer needs exclusive control.

"
      end

      attribute 15734199 "power_cycle"
	public explicit_type "/* * (*power_cycle)() Restart controller by power cyle; * HAL_OPEN_CPLT_EVT will notify when operation is complete. */ int (*)(const struct nfc_nci_device *p_dev)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * (*power_cycle)() Restart controller by power cyle;
     * HAL_OPEN_CPLT_EVT will notify when operation is complete.
     */
    int (*${name})(const struct nfc_nci_device *p_dev)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*power_cycle)() Restart controller by power cyle;
HAL_OPEN_CPLT_EVT will notify when operation is complete.

"
      end
    end

    class 4404023 "nfc_nci_device_t"
      visibility package stereotype "typedef" base_type class_ref 4403895 // nfc_nci_device
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4404151 "nfc_module_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8392631 // common (<directional composition>)
	relation 8392631 *-->
	  a role_name "common" public
	    comment "Common methods of the NFC NXP PN544 module.  This *must* be the first member of
nfc_module_t as users of this structure will cast a hw_module_t to
nfc_module_t pointer in contexts where it's known the hw_module_t references a
nfc_module_t.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8392631 // common (<directional composition>)
	  b parent class_ref 4305335 // hw_module_t
      end
    end

    class 4404279 "nfc_pn544_linktype"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "PN544 linktypes.
UART
I2C
USB (uses UART DAL)
"
      attribute 15734327 "PN544_LINK_TYPE_UART"
	public type class_ref 4404279 // nfc_pn544_linktype
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15734455 "PN544_LINK_TYPE_I2C"
	public type class_ref 4404279 // nfc_pn544_linktype
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15734583 "PN544_LINK_TYPE_USB"
	public type class_ref 4404279 // nfc_pn544_linktype
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15734711 "PN544_LINK_TYPE_INVALID"
	public type class_ref 4404279 // nfc_pn544_linktype
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4404407 "nfc_pn544_device_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8392759 // common (<directional composition>)
	relation 8392759 *-->
	  a role_name "common" public
	    comment "Common methods of the NFC NXP PN544 device.  This *must* be the first member of
nfc_pn544_device_t as users of this structure will cast a hw_device_t to
nfc_pn544_device_t pointer in contexts where it's known the hw_device_t references a
nfc_pn544_device_t.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8392759 // common (<directional composition>)
	  b parent class_ref 4305975 // hw_device_t
      end

      classrelation 8393143 // linktype (<directional composition>)
	relation 8393143 *-->
	  a role_name "linktype" public
	    comment " The link type to which the PN544 is connected 
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8393143 // linktype (<directional composition>)
	  b parent class_ref 4404279 // nfc_pn544_linktype
      end

      attribute 15734839 "device_node"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The device node to which the PN544 is connected 
"
      end

    end

    class 4404535 "nfc_tag_device"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8393527 // common (<directional composition>)
	relation 8393527 *-->
	  a role_name "common" public
	    comment "Common methods of the NFC tag device.  This *must* be the first member of
nfc_tag_device_t as users of this structure will cast a hw_device_t to
nfc_tag_device_t pointer in contexts where it's known the hw_device_t references a
nfc_tag_device_t.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8393527 // common (<directional composition>)
	  b parent class_ref 4305975 // hw_device_t
      end

      attribute 15734967 "init"
	public explicit_type "/** * Initialize the NFC tag. * * The driver must: * * Set the static lock bytes to read only * * Configure the Capability Container to disable write acess * eg: 0xE1 0x10 <size> 0x0F * * This function is called once before any calls to setContent(). * * Return 0 on success or -errno on error. */ int (*)(const struct nfc_tag_device *dev)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Initialize the NFC tag.
     *
     * The driver must:
     *   * Set the static lock bytes to read only
     *   * Configure the Capability Container to disable write acess
     *         eg: 0xE1 0x10 <size> 0x0F
     *
     * This function is called once before any calls to setContent().
     *
     * Return 0 on success or -errno on error.
     */
    int (*${name})(const struct nfc_tag_device *dev)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Initialize the NFC tag.

The driver must:
  * Set the static lock bytes to read only
  * Configure the Capability Container to disable write acess
        eg: 0xE1 0x10 <size> 0x0F

This function is called once before any calls to setContent().

Return 0 on success or -errno on error.

"
      end

      attribute 15735095 "setContent"
	public explicit_type "/** * Set the NFC tag content. * * The driver must write <data> in the data area of the tag starting at * byte 0 of block 4 and zero the rest of the data area. * * Returns 0 on success or -errno on error. */ int (*)(const struct nfc_tag_device *dev, const uint8_t *data, size_t len)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Set the NFC tag content.
     *
     * The driver must write <data> in the data area of the tag starting at
     * byte 0 of block 4 and zero the rest of the data area.
     *
     * Returns 0 on success or -errno on error.
     */
    int (*${name})(const struct nfc_tag_device *dev, const uint8_t *data, size_t len)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Set the NFC tag content.

The driver must write <data> in the data area of the tag starting at
byte 0 of block 4 and zero the rest of the data area.

Returns 0 on success or -errno on error.

"
      end

      attribute 15735223 "getMemorySize"
	public explicit_type "/** * Returns the memory size of the data area. */ int (*)(const struct nfc_tag_device *dev)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Returns the memory size of the data area.
     */
    int (*${name})(const struct nfc_tag_device *dev)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Returns the memory size of the data area.

"
      end
    end

    class 4404663 "nfc_tag_device_t"
      visibility package stereotype "typedef" base_type class_ref 4404535 // nfc_tag_device
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4404791 "nvram_control_t"
      visibility package stereotype "typedef" explicit_base_type "uint32_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Values describing available access controls. "
    end

    class 4404919 "nvram_module"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8393783 // common (<directional composition>)
	relation 8393783 *-->
	  a role_name "common" public
	    comment "Common methods of the nvram_module. This *must* be the first member of
nvram_module as users of this structure will cast a hw_module_t to
nvram_module pointer in contexts where it's known the hw_module_t
references a nvram_module.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8393783 // common (<directional composition>)
	  b parent class_ref 4305335 // hw_module_t
      end
    end

    class 4405047 "nvram_device"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " There are no module methods other than the common ones. "
      classrelation 8393911 // common (<directional composition>)
	relation 8393911 *-->
	  a role_name "common" public
	    comment "Common methods of the nvram_device.  This *must* be the first member of
nvram_device as users of this structure will cast a hw_device_t to
nvram_device pointer in contexts where it's known the hw_device_t
references a nvram_device.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8393911 // common (<directional composition>)
	  b parent class_ref 4305975 // hw_device_t
      end

      attribute 15735351 "get_total_size_in_bytes"
	public explicit_type "/** * Outputs the total number of bytes available in NVRAM. This will * always be at least 2048. If an implementation does not know the * total size it may provide an estimate or 2048. * * device - The nvram_device instance. * total_size - Receives the output. Cannot be NULL. */ nvram_result_t (*)(const struct nvram_device* device, uint64_t* total_size)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Outputs the total number of bytes available in NVRAM. This will
     * always be at least 2048. If an implementation does not know the
     * total size it may provide an estimate or 2048.
     *
     *   device - The nvram_device instance.
     *   total_size - Receives the output. Cannot be NULL.
     */
    nvram_result_t (*${name})(const struct nvram_device* device,
                                              uint64_t* total_size)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Outputs the total number of bytes available in NVRAM. This will
always be at least 2048. If an implementation does not know the
total size it may provide an estimate or 2048.

  device - The nvram_device instance.
  total_size - Receives the output. Cannot be NULL.

"
      end

      attribute 15735479 "get_available_size_in_bytes"
	public explicit_type "/** * Outputs the unallocated number of bytes available in NVRAM. If an * implementation does not know the available size it may provide an * estimate or the total size. * * device - The nvram_device instance. * available_size - Receives the output. Cannot be NULL. */ nvram_result_t (*)( const struct nvram_device* device, uint64_t* available_size)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Outputs the unallocated number of bytes available in NVRAM. If an
     * implementation does not know the available size it may provide an
     * estimate or the total size.
     *
     *   device - The nvram_device instance.
     *   available_size - Receives the output. Cannot be NULL.
     */
    nvram_result_t (*${name})(
        const struct nvram_device* device, uint64_t* available_size)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Outputs the unallocated number of bytes available in NVRAM. If an
implementation does not know the available size it may provide an
estimate or the total size.

  device - The nvram_device instance.
  available_size - Receives the output. Cannot be NULL.

"
      end

      attribute 15735607 "get_max_spaces"
	public explicit_type "/** * Outputs the maximum total number of spaces that may be allocated. * This will always be at least 8. Outputs NV_UNLIMITED_SPACES if any * number of spaces are supported (limited only to available NVRAM * bytes). * * device - The nvram_device instance. * num_spaces - Receives the output. Cannot be NULL. */ nvram_result_t (*)(const struct nvram_device* device, uint32_t* num_spaces)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Outputs the maximum total number of spaces that may be allocated.
     * This will always be at least 8. Outputs NV_UNLIMITED_SPACES if any
     * number of spaces are supported (limited only to available NVRAM
     * bytes).
     *
     *   device - The nvram_device instance.
     *   num_spaces - Receives the output. Cannot be NULL.
     */
    nvram_result_t (*${name})(const struct nvram_device* device,
                                     uint32_t* num_spaces)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Outputs the maximum total number of spaces that may be allocated.
This will always be at least 8. Outputs NV_UNLIMITED_SPACES if any
number of spaces are supported (limited only to available NVRAM
bytes).

  device - The nvram_device instance.
  num_spaces - Receives the output. Cannot be NULL.

"
      end

      attribute 15735735 "get_space_list"
	public explicit_type "/** * Outputs a list of created space indices. If |max_list_size| is * 0, only |list_size| is populated. * * device - The nvram_device instance. * max_list_size - The number of items in the |space_index_list| * array. * space_index_list - Receives the list of created spaces up to the * given |max_list_size|. May be NULL if * |max_list_size| is 0. * list_size - Receives the number of items populated in * |space_index_list|, or the number of items available * if |space_index_list| is NULL. */ nvram_result_t (*)(const struct nvram_device* device, uint32_t max_list_size, uint32_t* space_index_list, uint32_t* list_size)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Outputs a list of created space indices. If |max_list_size| is
     * 0, only |list_size| is populated.
     *
     *   device - The nvram_device instance.
     *   max_list_size - The number of items in the |space_index_list|
     *                   array.
     *   space_index_list - Receives the list of created spaces up to the
     *                      given |max_list_size|. May be NULL if
     *                      |max_list_size| is 0.
     *   list_size - Receives the number of items populated in
     *               |space_index_list|, or the number of items available
     *               if |space_index_list| is NULL.
     */
    nvram_result_t (*${name})(const struct nvram_device* device,
                                     uint32_t max_list_size,
                                     uint32_t* space_index_list,
                                     uint32_t* list_size)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Outputs a list of created space indices. If |max_list_size| is
0, only |list_size| is populated.

  device - The nvram_device instance.
  max_list_size - The number of items in the |space_index_list|
                  array.
  space_index_list - Receives the list of created spaces up to the
                     given |max_list_size|. May be NULL if
                     |max_list_size| is 0.
  list_size - Receives the number of items populated in
              |space_index_list|, or the number of items available
              if |space_index_list| is NULL.

"
      end

      attribute 15735863 "get_space_size"
	public explicit_type "/** * Outputs the size, in bytes, of a given space. * * device - The nvram_device instance. * index - The space index. * size - Receives the output. Cannot be NULL. */ nvram_result_t (*)(const struct nvram_device* device, uint32_t index, uint64_t* size)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Outputs the size, in bytes, of a given space.
     *
     *   device - The nvram_device instance.
     *   index - The space index.
     *   size - Receives the output. Cannot be NULL.
     */
    nvram_result_t (*${name})(const struct nvram_device* device,
                                     uint32_t index, uint64_t* size)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Outputs the size, in bytes, of a given space.

  device - The nvram_device instance.
  index - The space index.
  size - Receives the output. Cannot be NULL.

"
      end

      attribute 15735991 "get_space_controls"
	public explicit_type "/** * Outputs the list of controls associated with a given space. * * device - The nvram_device instance. * index - The space index. * max_list_size - The number of items in the |control_list| array. * control_list - Receives the list of controls up to the given * |max_list_size|. May be NULL if |max_list_size| * is 0. * list_size - Receives the number of items populated in * |control_list|, or the number of items available if * |control_list| is NULL. */ nvram_result_t (*)(const struct nvram_device* device, uint32_t index, uint32_t max_list_size, nvram_control_t* control_list, uint32_t* list_size)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Outputs the list of controls associated with a given space.
     *
     *   device - The nvram_device instance.
     *   index - The space index.
     *   max_list_size - The number of items in the |control_list| array.
     *   control_list - Receives the list of controls up to the given
     *                  |max_list_size|. May be NULL if |max_list_size|
     *                  is 0.
     *   list_size - Receives the number of items populated in
     *               |control_list|, or the number of items available if
     *               |control_list| is NULL.
     */
    nvram_result_t (*${name})(const struct nvram_device* device,
                                         uint32_t index, uint32_t max_list_size,
                                         nvram_control_t* control_list,
                                         uint32_t* list_size)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Outputs the list of controls associated with a given space.

  device - The nvram_device instance.
  index - The space index.
  max_list_size - The number of items in the |control_list| array.
  control_list - Receives the list of controls up to the given
                 |max_list_size|. May be NULL if |max_list_size|
                 is 0.
  list_size - Receives the number of items populated in
              |control_list|, or the number of items available if
              |control_list| is NULL.

"
      end

      attribute 15736119 "is_space_locked"
	public explicit_type "/** * Outputs whether locks are enabled for the given space. When a lock * is enabled, the operation is disabled and any attempt to perform that * operation will result in NV_RESULT_OPERATION_DISABLED. * * device - The nvram_device instance. * index - The space index. * write_lock_enabled - Will be set to non-zero iff write * operations are currently disabled. * read_lock_enabled - Will be set to non-zero iff read operations * are currently disabled. */ nvram_result_t (*)(const struct nvram_device* device, uint32_t index, int* write_lock_enabled, int* read_lock_enabled)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Outputs whether locks are enabled for the given space. When a lock
     * is enabled, the operation is disabled and any attempt to perform that
     * operation will result in NV_RESULT_OPERATION_DISABLED.
     *
     *   device - The nvram_device instance.
     *   index - The space index.
     *   write_lock_enabled - Will be set to non-zero iff write
     *                        operations are currently disabled.
     *   read_lock_enabled - Will be set to non-zero iff read operations
     *                       are currently disabled.
     */
    nvram_result_t (*${name})(const struct nvram_device* device,
                                      uint32_t index, int* write_lock_enabled,
                                      int* read_lock_enabled)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Outputs whether locks are enabled for the given space. When a lock
is enabled, the operation is disabled and any attempt to perform that
operation will result in NV_RESULT_OPERATION_DISABLED.

  device - The nvram_device instance.
  index - The space index.
  write_lock_enabled - Will be set to non-zero iff write
                       operations are currently disabled.
  read_lock_enabled - Will be set to non-zero iff read operations
                      are currently disabled.

"
      end

      attribute 15736247 "create_space"
	public explicit_type "/** * Creates a new space with the given index, size, controls, and * authorization value. * * device - The nvram_device instance. * index - An index for the new space. The index can be any 32-bit * value but must not already be assigned to an existing * space. * size_in_bytes - The number of bytes to allocate for the space. * control_list - An array of controls to enforce for the space. * list_size - The number of items in |control_list|. * authorization_value - If |control_list| contains * NV_CONTROL_READ_AUTHORIZATION and / or * NV_CONTROL_WRITE_AUTHORIZATION, then this * parameter provides the authorization value * for these policies (if both controls are * set then this value applies to both). * Otherwise, this value is ignored and may * be NULL. * authorization_value_size - The number of bytes in * |authorization_value|. */ nvram_result_t (*)(const struct nvram_device* device, uint32_t index, uint64_t size_in_bytes, const nvram_control_t* control_list, uint32_t list_size, const uint8_t* authorization_value, uint32_t authorization_value_size)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Creates a new space with the given index, size, controls, and
     * authorization value.
     *
     *   device - The nvram_device instance.
     *   index - An index for the new space. The index can be any 32-bit
     *           value but must not already be assigned to an existing
     *           space.
     *   size_in_bytes - The number of bytes to allocate for the space.
     *   control_list - An array of controls to enforce for the space.
     *   list_size - The number of items in |control_list|.
     *   authorization_value - If |control_list| contains
     *                         NV_CONTROL_READ_AUTHORIZATION and / or
     *                         NV_CONTROL_WRITE_AUTHORIZATION, then this
     *                         parameter provides the authorization value
     *                         for these policies (if both controls are
     *                         set then this value applies to both).
     *                         Otherwise, this value is ignored and may
     *                         be NULL.
     *   authorization_value_size - The number of bytes in
     *                              |authorization_value|.
     */
    nvram_result_t (*${name})(const struct nvram_device* device,
                                   uint32_t index, uint64_t size_in_bytes,
                                   const nvram_control_t* control_list,
                                   uint32_t list_size,
                                   const uint8_t* authorization_value,
                                   uint32_t authorization_value_size)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Creates a new space with the given index, size, controls, and
authorization value.

  device - The nvram_device instance.
  index - An index for the new space. The index can be any 32-bit
          value but must not already be assigned to an existing
          space.
  size_in_bytes - The number of bytes to allocate for the space.
  control_list - An array of controls to enforce for the space.
  list_size - The number of items in |control_list|.
  authorization_value - If |control_list| contains
                        NV_CONTROL_READ_AUTHORIZATION and / or
                        NV_CONTROL_WRITE_AUTHORIZATION, then this
                        parameter provides the authorization value
                        for these policies (if both controls are
                        set then this value applies to both).
                        Otherwise, this value is ignored and may
                        be NULL.
  authorization_value_size - The number of bytes in
                             |authorization_value|.

"
      end

      attribute 15736375 "delete_space"
	public explicit_type "/** * Deletes a space. * * device - The nvram_device instance. * index - The space index. * authorization_value - If the space has the * NV_CONTROL_WRITE_AUTHORIZATION policy, * then this parameter provides the * authorization value. Otherwise, this value * is ignored and may be NULL. * authorization_value_size - The number of bytes in * |authorization_value|. */ nvram_result_t (*)(const struct nvram_device* device, uint32_t index, const uint8_t* authorization_value, uint32_t authorization_value_size)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Deletes a space.
     *
     *   device - The nvram_device instance.
     *   index - The space index.
     *   authorization_value - If the space has the
     *                         NV_CONTROL_WRITE_AUTHORIZATION policy,
     *                         then this parameter provides the
     *                         authorization value. Otherwise, this value
     *                         is ignored and may be NULL.
     *   authorization_value_size - The number of bytes in
     *                              |authorization_value|.
     */
    nvram_result_t (*${name})(const struct nvram_device* device,
                                   uint32_t index,
                                   const uint8_t* authorization_value,
                                   uint32_t authorization_value_size)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Deletes a space.

  device - The nvram_device instance.
  index - The space index.
  authorization_value - If the space has the
                        NV_CONTROL_WRITE_AUTHORIZATION policy,
                        then this parameter provides the
                        authorization value. Otherwise, this value
                        is ignored and may be NULL.
  authorization_value_size - The number of bytes in
                             |authorization_value|.

"
      end

      attribute 15736503 "disable_create"
	public explicit_type "/** * Disables any further creation of spaces until the next full device * reset (as in factory reset, not reboot). Subsequent calls to * NV_CreateSpace should return NV_RESULT_OPERATION_DISABLED. * * device - The nvram_device instance. */ nvram_result_t (*)(const struct nvram_device* device)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Disables any further creation of spaces until the next full device
     * reset (as in factory reset, not reboot). Subsequent calls to
     * NV_CreateSpace should return NV_RESULT_OPERATION_DISABLED.
     *
     *   device - The nvram_device instance.
     */
    nvram_result_t (*${name})(const struct nvram_device* device)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Disables any further creation of spaces until the next full device
reset (as in factory reset, not reboot). Subsequent calls to
NV_CreateSpace should return NV_RESULT_OPERATION_DISABLED.

  device - The nvram_device instance.

"
      end

      attribute 15736631 "write_space"
	public explicit_type "/** * Writes the contents of a space. If the space is configured with * NV_CONTROL_WRITE_EXTEND then the input data is used to extend the * current data. * * device - The nvram_device instance. * index - The space index. * buffer - The data to write. * buffer_size - The number of bytes in |buffer|. If this is less * than the size of the space, the remaining bytes * will be set to 0x00. If this is more than the size * of the space, returns NV_RESULT_INVALID_PARAMETER. * authorization_value - If the space has the * NV_CONTROL_WRITE_AUTHORIZATION policy, * then this parameter provides the * authorization value. Otherwise, this value * is ignored and may be NULL. * authorization_value_size - The number of bytes in * |authorization_value|. */ nvram_result_t (*)(const struct nvram_device* device, uint32_t index, const uint8_t* buffer, uint64_t buffer_size, const uint8_t* authorization_value, uint32_t authorization_value_size)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Writes the contents of a space. If the space is configured with
     * NV_CONTROL_WRITE_EXTEND then the input data is used to extend the
     * current data.
     *
     *   device - The nvram_device instance.
     *   index - The space index.
     *   buffer - The data to write.
     *   buffer_size - The number of bytes in |buffer|. If this is less
     *                 than the size of the space, the remaining bytes
     *                 will be set to 0x00. If this is more than the size
     *                 of the space, returns NV_RESULT_INVALID_PARAMETER.
     *   authorization_value - If the space has the
     *                         NV_CONTROL_WRITE_AUTHORIZATION policy,
     *                         then this parameter provides the
     *                         authorization value. Otherwise, this value
     *                         is ignored and may be NULL.
     *   authorization_value_size - The number of bytes in
     *                              |authorization_value|.
     */
    nvram_result_t (*${name})(const struct nvram_device* device,
                                  uint32_t index, const uint8_t* buffer,
                                  uint64_t buffer_size,
                                  const uint8_t* authorization_value,
                                  uint32_t authorization_value_size)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Writes the contents of a space. If the space is configured with
NV_CONTROL_WRITE_EXTEND then the input data is used to extend the
current data.

  device - The nvram_device instance.
  index - The space index.
  buffer - The data to write.
  buffer_size - The number of bytes in |buffer|. If this is less
                than the size of the space, the remaining bytes
                will be set to 0x00. If this is more than the size
                of the space, returns NV_RESULT_INVALID_PARAMETER.
  authorization_value - If the space has the
                        NV_CONTROL_WRITE_AUTHORIZATION policy,
                        then this parameter provides the
                        authorization value. Otherwise, this value
                        is ignored and may be NULL.
  authorization_value_size - The number of bytes in
                             |authorization_value|.

"
      end

      attribute 15736759 "read_space"
	public explicit_type "/** * Reads the contents of a space. If the space has never been * written, all bytes read will be 0x00. * * device - The nvram_device instance. * index - The space index. * num_bytes_to_read - The number of bytes to read; |buffer| must * be large enough to hold this many bytes. If * this is more than the size of the space, the * entire space is read. If this is less than * the size of the space, the first bytes in * the space are read. * authorization_value - If the space has the * NV_CONTROL_READ_AUTHORIZATION policy, then * this parameter provides the authorization * value. Otherwise, this value is ignored * and may be NULL. * authorization_value_size - The number of bytes in * |authorization_value|. * buffer - Receives the data read from the space. Must be at least * |num_bytes_to_read| bytes in size. * bytes_read - The number of bytes read. If NV_RESULT_SUCCESS is * returned this will be set to the smaller of * |num_bytes_to_read| or the size of the space. */ nvram_result_t (*)(const struct nvram_device* device, uint32_t index, uint64_t num_bytes_to_read, const uint8_t* authorization_value, uint32_t authorization_value_size, uint8_t* buffer, uint64_t* bytes_read)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Reads the contents of a space. If the space has never been
     * written, all bytes read will be 0x00.
     *
     *   device - The nvram_device instance.
     *   index - The space index.
     *   num_bytes_to_read - The number of bytes to read; |buffer| must
     *                       be large enough to hold this many bytes. If
     *                       this is more than the size of the space, the
     *                       entire space is read. If this is less than
     *                       the size of the space, the first bytes in
     *                       the space are read.
     *   authorization_value - If the space has the
     *                         NV_CONTROL_READ_AUTHORIZATION policy, then
     *                         this parameter provides the authorization
     *                         value. Otherwise, this value is ignored
     *                         and may be NULL.
     *   authorization_value_size - The number of bytes in
     *                              |authorization_value|.
     *   buffer - Receives the data read from the space. Must be at least
     *            |num_bytes_to_read| bytes in size.
     *   bytes_read - The number of bytes read. If NV_RESULT_SUCCESS is
     *                returned this will be set to the smaller of
     *                |num_bytes_to_read| or the size of the space.
     */
    nvram_result_t (*${name})(const struct nvram_device* device,
                                 uint32_t index, uint64_t num_bytes_to_read,
                                 const uint8_t* authorization_value,
                                 uint32_t authorization_value_size,
                                 uint8_t* buffer, uint64_t* bytes_read)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Reads the contents of a space. If the space has never been
written, all bytes read will be 0x00.

  device - The nvram_device instance.
  index - The space index.
  num_bytes_to_read - The number of bytes to read; |buffer| must
                      be large enough to hold this many bytes. If
                      this is more than the size of the space, the
                      entire space is read. If this is less than
                      the size of the space, the first bytes in
                      the space are read.
  authorization_value - If the space has the
                        NV_CONTROL_READ_AUTHORIZATION policy, then
                        this parameter provides the authorization
                        value. Otherwise, this value is ignored
                        and may be NULL.
  authorization_value_size - The number of bytes in
                             |authorization_value|.
  buffer - Receives the data read from the space. Must be at least
           |num_bytes_to_read| bytes in size.
  bytes_read - The number of bytes read. If NV_RESULT_SUCCESS is
               returned this will be set to the smaller of
               |num_bytes_to_read| or the size of the space.

"
      end

      attribute 15736887 "enable_write_lock"
	public explicit_type "/** * Enables a write lock for the given space according to its policy. * If the space does not have NV_CONTROL_PERSISTENT_WRITE_LOCK or * NV_CONTROL_BOOT_WRITE_LOCK set then this function has no effect * and may return an error. * * device - The nvram_device instance. * index - The space index. * authorization_value - If the space has the * NV_CONTROL_WRITE_AUTHORIZATION policy, * then this parameter provides the * authorization value. Otherwise, this value * is ignored and may be NULL. * authorization_value_size - The number of bytes in * |authorization_value|. */ nvram_result_t (*)(const struct nvram_device* device, uint32_t index, const uint8_t* authorization_value, uint32_t authorization_value_size)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Enables a write lock for the given space according to its policy.
     * If the space does not have NV_CONTROL_PERSISTENT_WRITE_LOCK or
     * NV_CONTROL_BOOT_WRITE_LOCK set then this function has no effect
     * and may return an error.
     *
     *   device - The nvram_device instance.
     *   index - The space index.
     *   authorization_value - If the space has the
     *                         NV_CONTROL_WRITE_AUTHORIZATION policy,
     *                         then this parameter provides the
     *                         authorization value. Otherwise, this value
     *                         is ignored and may be NULL.
     *   authorization_value_size - The number of bytes in
     *                              |authorization_value|.
     */
    nvram_result_t (*${name})(const struct nvram_device* device,
                                        uint32_t index,
                                        const uint8_t* authorization_value,
                                        uint32_t authorization_value_size)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Enables a write lock for the given space according to its policy.
If the space does not have NV_CONTROL_PERSISTENT_WRITE_LOCK or
NV_CONTROL_BOOT_WRITE_LOCK set then this function has no effect
and may return an error.

  device - The nvram_device instance.
  index - The space index.
  authorization_value - If the space has the
                        NV_CONTROL_WRITE_AUTHORIZATION policy,
                        then this parameter provides the
                        authorization value. Otherwise, this value
                        is ignored and may be NULL.
  authorization_value_size - The number of bytes in
                             |authorization_value|.

"
      end

      attribute 15737015 "enable_read_lock"
	public explicit_type "/** * Enables a read lock for the given space according to its policy. * If the space does not have NV_CONTROL_BOOT_READ_LOCK set then this * function has no effect and may return an error. * * device - The nvram_device instance. * index - The space index. * authorization_value - If the space has the * NV_CONTROL_READ_AUTHORIZATION policy, then * this parameter provides the authorization * value. (Note that there is no requirement * for write access in order to lock for * reading. A read lock is always volatile.) * Otherwise, this value is ignored and may * be NULL. * authorization_value_size - The number of bytes in * |authorization_value|. */ nvram_result_t (*)(const struct nvram_device* device, uint32_t index, const uint8_t* authorization_value, uint32_t authorization_value_size)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Enables a read lock for the given space according to its policy.
     * If the space does not have NV_CONTROL_BOOT_READ_LOCK set then this
     * function has no effect and may return an error.
     *
     *   device - The nvram_device instance.
     *   index - The space index.
     *   authorization_value - If the space has the
     *                         NV_CONTROL_READ_AUTHORIZATION policy, then
     *                         this parameter provides the authorization
     *                         value. (Note that there is no requirement
     *                         for write access in order to lock for
     *                         reading. A read lock is always volatile.)
     *                         Otherwise, this value is ignored and may
     *                         be NULL.
     *   authorization_value_size - The number of bytes in
     *                              |authorization_value|.
     */
    nvram_result_t (*${name})(const struct nvram_device* device,
                                       uint32_t index,
                                       const uint8_t* authorization_value,
                                       uint32_t authorization_value_size)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Enables a read lock for the given space according to its policy.
If the space does not have NV_CONTROL_BOOT_READ_LOCK set then this
function has no effect and may return an error.

  device - The nvram_device instance.
  index - The space index.
  authorization_value - If the space has the
                        NV_CONTROL_READ_AUTHORIZATION policy, then
                        this parameter provides the authorization
                        value. (Note that there is no requirement
                        for write access in order to lock for
                        reading. A read lock is always volatile.)
                        Otherwise, this value is ignored and may
                        be NULL.
  authorization_value_size - The number of bytes in
                             |authorization_value|.

"
      end
    end

    class 4405175 "nvram_device_t"
      visibility package stereotype "typedef" base_type class_ref 4405047 // nvram_device
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8394039 // <dependency>
	relation 8394039 -_->
	  a public
	    cpp default "#include in source"
	    classrelation_ref 8394039 // <dependency>
	  b parent class_ref 4405047 // nvram_device
      end
    end

    class 4405303 "feature_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Power hint identifiers passed to (*powerHint)

 DO NOT USE POWER_HINT_VIDEO_ENCODE/_DECODE!  They will be removed in
KLP.
"
      attribute 15737143 "POWER_FEATURE_DOUBLE_TAP_TO_WAKE"
	public type class_ref 4405303 // feature_t
	init_value " 0x00000001
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4405431 "power_state_voter_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Platform-level sleep state stats:
power_state_voter_t struct is useful for describing the individual voters when a
Platform-level sleep state is chosen by aggregation of votes from multiple
clients/system conditions.

This helps in attirbuting what in the device is blocking the device from
entering the lowest Platform-level sleep state.
"
      attribute 15737271 "name"
	public explicit_type "char"
	multiplicity "[POWER_STATE_VOTER_NAME_MAX_LENGTH]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Name of the voter.

"
      end

    end

    class 4405559 "power_state_platform_sleep_state_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Platform-level sleep state stats:
power_state_platform_sleep_state_t represents the Platform-level sleep state the
device is capable of getting into.

SoCs usually have more than one Platform-level sleep state.

The caller calls the get_number_of_platform_modes function to figure out the size
of power_state_platform_sleep_state_t array where each array element represents
a specific Platform-level sleep state.

Higher the index deeper the state is i.e. lesser steady-state power is consumed
by the platform to be resident in that state.

Caller allocates power_state_voter_t *voters for each Platform-level sleep state by
calling get_voter_list.
"
      attribute 15737399 "name"
	public explicit_type "char"
	multiplicity "[POWER_STATE_NAME_MAX_LENGTH]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Platform-level Sleep state name.

"
      end

      attribute 15737527 "supported_only_in_suspend"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This platform-level sleep state can only be reached during system suspend.

"
      end

      classrelation 8394807 // voters (<unidirectional association>)
	relation 8394807 --->
	  a role_name "voters" public
	    comment "Voter list - Has to be allocated by the caller.

Caller allocates power_state_voter_t *voters for each Platform-level sleep state
by calling get_voter_list.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8394807 // voters (<unidirectional association>)
	  b parent class_ref 4405431 // power_state_voter_t
      end
    end

    class 4405687 "power_module"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Every hardware module must have a data structure named HAL_MODULE_INFO_SYM
and the fields of this data structure must begin with hw_module_t
followed by module specific information.
"
      classrelation 8394935 // common (<directional composition>)
	relation 8394935 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8394935 // common (<directional composition>)
	  b parent class_ref 4305335 // hw_module_t
      end

      attribute 15737655 "init"
	public explicit_type "/* * (*init)() performs power management setup actions at runtime * startup, such as to set default cpufreq parameters. This is * called only by the Power HAL instance loaded by * PowerManagerService. * * Platform-level sleep state stats: * Can Also be used to initiate device specific Platform-level * Sleep state nodes from version 0.5 onwards. */ void (*)(struct power_module *module)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * (*init)() performs power management setup actions at runtime
     * startup, such as to set default cpufreq parameters.  This is
     * called only by the Power HAL instance loaded by
     * PowerManagerService.
     *
     * Platform-level sleep state stats:
     * Can Also be used to initiate device specific Platform-level
     * Sleep state nodes from version 0.5 onwards.
     */
    void (*${name})(struct power_module *module)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*init)() performs power management setup actions at runtime
startup, such as to set default cpufreq parameters.  This is
called only by the Power HAL instance loaded by
PowerManagerService.

Platform-level sleep state stats:
Can Also be used to initiate device specific Platform-level
Sleep state nodes from version 0.5 onwards.

"
      end

      attribute 15737783 "setInteractive"
	public explicit_type "/* * (*setInteractive)() performs power management actions upon the * system entering interactive state (that is, the system is awake * and ready for interaction, often with UI devices such as * display and touchscreen enabled) or non-interactive state (the * system appears asleep, display usually turned off). The * non-interactive state is usually entered after a period of * inactivity, in order to conserve battery power during * such inactive periods. * * Typical actions are to turn on or off devices and adjust * cpufreq parameters. This function may also call the * appropriate interfaces to allow the kernel to suspend the * system to low-power sleep state when entering non-interactive * state, and to disallow low-power suspend when the system is in * interactive state. When low-power suspend state is allowed, the * kernel may suspend the system whenever no wakelocks are held. * * on is non-zero when the system is transitioning to an * interactive / awake state, and zero when transitioning to a * non-interactive / asleep state. * * This function is called to enter non-interactive state after * turning off the screen (if present), and called to enter * interactive state prior to turning on the screen. */ void (*)(struct power_module *module, int on)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * (*setInteractive)() performs power management actions upon the
     * system entering interactive state (that is, the system is awake
     * and ready for interaction, often with UI devices such as
     * display and touchscreen enabled) or non-interactive state (the
     * system appears asleep, display usually turned off).  The
     * non-interactive state is usually entered after a period of
     * inactivity, in order to conserve battery power during
     * such inactive periods.
     *
     * Typical actions are to turn on or off devices and adjust
     * cpufreq parameters.  This function may also call the
     * appropriate interfaces to allow the kernel to suspend the
     * system to low-power sleep state when entering non-interactive
     * state, and to disallow low-power suspend when the system is in
     * interactive state.  When low-power suspend state is allowed, the
     * kernel may suspend the system whenever no wakelocks are held.
     *
     * on is non-zero when the system is transitioning to an
     * interactive / awake state, and zero when transitioning to a
     * non-interactive / asleep state.
     *
     * This function is called to enter non-interactive state after
     * turning off the screen (if present), and called to enter
     * interactive state prior to turning on the screen.
     */
    void (*${name})(struct power_module *module, int on)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*setInteractive)() performs power management actions upon the
system entering interactive state (that is, the system is awake
and ready for interaction, often with UI devices such as
display and touchscreen enabled) or non-interactive state (the
system appears asleep, display usually turned off).  The
non-interactive state is usually entered after a period of
inactivity, in order to conserve battery power during
such inactive periods.

Typical actions are to turn on or off devices and adjust
cpufreq parameters.  This function may also call the
appropriate interfaces to allow the kernel to suspend the
system to low-power sleep state when entering non-interactive
state, and to disallow low-power suspend when the system is in
interactive state.  When low-power suspend state is allowed, the
kernel may suspend the system whenever no wakelocks are held.

on is non-zero when the system is transitioning to an
interactive / awake state, and zero when transitioning to a
non-interactive / asleep state.

This function is called to enter non-interactive state after
turning off the screen (if present), and called to enter
interactive state prior to turning on the screen.

"
      end

      attribute 15737911 "powerHint"
	public explicit_type "/* * (*powerHint) is called to pass hints on power requirements, which * may result in adjustment of power/performance parameters of the * cpufreq governor and other controls. The possible hints are: * * POWER_HINT_VSYNC * * Foreground app has started or stopped requesting a VSYNC pulse * from SurfaceFlinger. If the app has started requesting VSYNC * then CPU and GPU load is expected soon, and it may be appropriate * to raise speeds of CPU, memory bus, etc. The data parameter is * non-zero to indicate VSYNC pulse is now requested, or zero for * VSYNC pulse no longer requested. * * POWER_HINT_INTERACTION * * User is interacting with the device, for example, touchscreen * events are incoming. CPU and GPU load may be expected soon, * and it may be appropriate to raise speeds of CPU, memory bus, * etc. The data parameter is the estimated length of the interaction * in milliseconds, or 0 if unknown. * * POWER_HINT_LOW_POWER * * Low power mode is activated or deactivated. Low power mode * is intended to save battery at the cost of performance. The data * parameter is non-zero when low power mode is activated, and zero * when deactivated. * * POWER_HINT_SUSTAINED_PERFORMANCE * * Sustained Performance mode is actived or deactivated. Sustained * performance mode is intended to provide a consistent level of * performance for a prolonged amount of time. The data parameter is * non-zero when sustained performance mode is activated, and zero * when deactivated. * * POWER_HINT_VR_MODE * * VR Mode is activated or deactivated. VR mode is intended to * provide minimum guarantee for performance for the amount of time the * device can sustain it. The data parameter is non-zero when the mode * is activated and zero when deactivated. * * A particular platform may choose to ignore any hint. * * availability: version 0.2 * */ void (*)(struct power_module *module, power_hint_t hint, void *data)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * (*powerHint) is called to pass hints on power requirements, which
     * may result in adjustment of power/performance parameters of the
     * cpufreq governor and other controls.  The possible hints are:
     *
     * POWER_HINT_VSYNC
     *
     *     Foreground app has started or stopped requesting a VSYNC pulse
     *     from SurfaceFlinger.  If the app has started requesting VSYNC
     *     then CPU and GPU load is expected soon, and it may be appropriate
     *     to raise speeds of CPU, memory bus, etc.  The data parameter is
     *     non-zero to indicate VSYNC pulse is now requested, or zero for
     *     VSYNC pulse no longer requested.
     *
     * POWER_HINT_INTERACTION
     *
     *     User is interacting with the device, for example, touchscreen
     *     events are incoming.  CPU and GPU load may be expected soon,
     *     and it may be appropriate to raise speeds of CPU, memory bus,
     *     etc.  The data parameter is the estimated length of the interaction
     *     in milliseconds, or 0 if unknown.
     *
     * POWER_HINT_LOW_POWER
     *
     *     Low power mode is activated or deactivated. Low power mode
     *     is intended to save battery at the cost of performance. The data
     *     parameter is non-zero when low power mode is activated, and zero
     *     when deactivated.
     *
     * POWER_HINT_SUSTAINED_PERFORMANCE
     *
     *     Sustained Performance mode is actived or deactivated. Sustained
     *     performance mode is intended to provide a consistent level of
     *     performance for a prolonged amount of time. The data parameter is
     *     non-zero when sustained performance mode is activated, and zero
     *     when deactivated.
     *
     * POWER_HINT_VR_MODE
     *
     *     VR Mode is activated or deactivated. VR mode is intended to
     *     provide minimum guarantee for performance for the amount of time the
     *     device can sustain it. The data parameter is non-zero when the mode
     *     is activated and zero when deactivated.
     *
     * A particular platform may choose to ignore any hint.
     *
     * availability: version 0.2
     *
     */
    void (*${name})(struct power_module *module, power_hint_t hint,
                      void *data)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*powerHint) is called to pass hints on power requirements, which
may result in adjustment of power/performance parameters of the
cpufreq governor and other controls.  The possible hints are:

POWER_HINT_VSYNC

    Foreground app has started or stopped requesting a VSYNC pulse
    from SurfaceFlinger.  If the app has started requesting VSYNC
    then CPU and GPU load is expected soon, and it may be appropriate
    to raise speeds of CPU, memory bus, etc.  The data parameter is
    non-zero to indicate VSYNC pulse is now requested, or zero for
    VSYNC pulse no longer requested.

POWER_HINT_INTERACTION

    User is interacting with the device, for example, touchscreen
    events are incoming.  CPU and GPU load may be expected soon,
    and it may be appropriate to raise speeds of CPU, memory bus,
    etc.  The data parameter is the estimated length of the interaction
    in milliseconds, or 0 if unknown.

POWER_HINT_LOW_POWER

    Low power mode is activated or deactivated. Low power mode
    is intended to save battery at the cost of performance. The data
    parameter is non-zero when low power mode is activated, and zero
    when deactivated.

POWER_HINT_SUSTAINED_PERFORMANCE

    Sustained Performance mode is actived or deactivated. Sustained
    performance mode is intended to provide a consistent level of
    performance for a prolonged amount of time. The data parameter is
    non-zero when sustained performance mode is activated, and zero
    when deactivated.

POWER_HINT_VR_MODE

    VR Mode is activated or deactivated. VR mode is intended to
    provide minimum guarantee for performance for the amount of time the
    device can sustain it. The data parameter is non-zero when the mode
    is activated and zero when deactivated.

A particular platform may choose to ignore any hint.

availability: version 0.2


"
      end

      attribute 15738039 "setFeature"
	public explicit_type "/* * (*setFeature) is called to turn on or off a particular feature * depending on the state parameter. The possible features are: * * FEATURE_DOUBLE_TAP_TO_WAKE * * Enabling/Disabling this feature will allow/disallow the system * to wake up by tapping the screen twice. * * availability: version 0.3 * */ void (*)(struct power_module *module, feature_t feature, int state)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * (*setFeature) is called to turn on or off a particular feature
     * depending on the state parameter. The possible features are:
     *
     * FEATURE_DOUBLE_TAP_TO_WAKE
     *
     *    Enabling/Disabling this feature will allow/disallow the system
     *    to wake up by tapping the screen twice.
     *
     * availability: version 0.3
     *
     */
    void (*${name})(struct power_module *module, feature_t feature, int state)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*setFeature) is called to turn on or off a particular feature
depending on the state parameter. The possible features are:

FEATURE_DOUBLE_TAP_TO_WAKE

   Enabling/Disabling this feature will allow/disallow the system
   to wake up by tapping the screen twice.

availability: version 0.3


"
      end

      attribute 15738167 "get_platform_low_power_stats"
	public explicit_type "/* * Platform-level sleep state stats: * Report cumulative info on the statistics on platform-level sleep states since boot. * * Caller of the function queries the get_number_of_sleep_states and allocates the * memory for the power_state_platform_sleep_state_t *list before calling this function. * * power_stats module is responsible to assign values to all the fields as * necessary. * * Higher the index deeper the state is i.e. lesser steady-state power is consumed * by the platform to be resident in that state. * * The function returns 0 on success or negative value -errno on error. * EINVAL - *list is NULL. * EIO - filesystem nodes access error. * * availability: version 0.5 */ int (*)(struct power_module *module, power_state_platform_sleep_state_t *list)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * Platform-level sleep state stats:
     * Report cumulative info on the statistics on platform-level sleep states since boot.
     *
     * Caller of the function queries the get_number_of_sleep_states and allocates the
     * memory for the power_state_platform_sleep_state_t *list before calling this function.
     *
     * power_stats module is responsible to assign values to all the fields as
     * necessary.
     *
     * Higher the index deeper the state is i.e. lesser steady-state power is consumed
     * by the platform to be resident in that state.
     *
     * The function returns 0 on success or negative value -errno on error.
     * EINVAL - *list is NULL.
     * EIO - filesystem nodes access error.
     *
     * availability: version 0.5
     */
    int (*${name})(struct power_module *module,
        power_state_platform_sleep_state_t *list)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Platform-level sleep state stats:
Report cumulative info on the statistics on platform-level sleep states since boot.

Caller of the function queries the get_number_of_sleep_states and allocates the
memory for the power_state_platform_sleep_state_t *list before calling this function.

power_stats module is responsible to assign values to all the fields as
necessary.

Higher the index deeper the state is i.e. lesser steady-state power is consumed
by the platform to be resident in that state.

The function returns 0 on success or negative value -errno on error.
EINVAL - *list is NULL.
EIO - filesystem nodes access error.

availability: version 0.5

"
      end

      attribute 15738295 "get_number_of_platform_modes"
	public explicit_type "/* * Platform-level sleep state stats: * This function is called to determine the number of platform-level sleep states * for get_platform_low_power_stats. * * The value returned by this function is used to allocate memory for * power_state_platform_sleep_state_t *list for get_platform_low_power_stats. * * The number of parameters must not change for successive calls. * * Return number of parameters on success or negative value -errno on error. * EIO - filesystem nodes access error. * * availability: version 0.5 */ ssize_t (*)(struct power_module *module)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * Platform-level sleep state stats:
     * This function is called to determine the number of platform-level sleep states
     * for get_platform_low_power_stats.
     *
     * The value returned by this function is used to allocate memory for
     * power_state_platform_sleep_state_t *list for get_platform_low_power_stats.
     *
     * The number of parameters must not change for successive calls.
     *
     * Return number of parameters on success or negative value -errno on error.
     * EIO - filesystem nodes access error.
     *
     * availability: version 0.5
     */
    ssize_t (*${name})(struct power_module *module)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Platform-level sleep state stats:
This function is called to determine the number of platform-level sleep states
for get_platform_low_power_stats.

The value returned by this function is used to allocate memory for
power_state_platform_sleep_state_t *list for get_platform_low_power_stats.

The number of parameters must not change for successive calls.

Return number of parameters on success or negative value -errno on error.
EIO - filesystem nodes access error.

availability: version 0.5

"
      end

      attribute 15738423 "get_voter_list"
	public explicit_type "/* * Platform-level sleep state stats: * Provides the number of voters for each of the Platform-level sleep state. * * Caller uses this function to allocate memory for the power_state_voter_t list. * * Caller has to allocate the space for the *voter array which is * get_number_of_platform_modes() long. * * Return 0 on success or negative value -errno on error. * EINVAL - *voter is NULL. * EIO - filesystem nodes access error. * * availability: version 0.5 */ int (*)(struct power_module *module, size_t *voter)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * Platform-level sleep state stats:
     * Provides the number of voters for each of the Platform-level sleep state.
     *
     * Caller uses this function to allocate memory for the power_state_voter_t list.
     *
     * Caller has to allocate the space for the *voter array which is
     * get_number_of_platform_modes() long.
     *
     * Return 0 on success or negative value -errno on error.
     * EINVAL - *voter is NULL.
     * EIO - filesystem nodes access error.
     *
     * availability: version 0.5
     */
    int (*${name})(struct power_module *module, size_t *voter)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Platform-level sleep state stats:
Provides the number of voters for each of the Platform-level sleep state.

Caller uses this function to allocate memory for the power_state_voter_t list.

Caller has to allocate the space for the *voter array which is
get_number_of_platform_modes() long.

Return 0 on success or negative value -errno on error.
EINVAL - *voter is NULL.
EIO - filesystem nodes access error.

availability: version 0.5

"
      end
    end

    class 4405815 "power_module_t"
      visibility package stereotype "typedef" base_type class_ref 4405687 // power_module
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4405943 "radio_callback_t"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(radio_hal_event_t *event, void *cookie);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Callback function called by the HAL when one of the following occurs:
- event RADIO_EVENT_HW_FAILURE: radio chip of driver failure requiring
closing and reopening of the tuner interface.
- event RADIO_EVENT_CONFIG: new configuration applied in response to open_tuner(),
or set_configuration(). The event status is 0 (no error) if the configuration has been applied,
-EINVAL is not or -ETIMEDOUT in case of time out.
- event RADIO_EVENT_TUNED: tune locked on new station/frequency following scan(),
step(), tune() or auto AF switching. The event status is 0 (no error) if in tune,
-EINVAL is not tuned and data in radio_program_info is not valid or -ETIMEDOUT if scan()
timed out.
- event RADIO_EVENT_TA: at the beginning and end of traffic announcement if current
configuration enables TA.
- event RADIO_EVENT_AF: after automatic switching to alternate frequency if current
configuration enables AF switching.
- event RADIO_EVENT_ANTENNA: when the antenna is connected or disconnected.
- event RADIO_EVENT_METADATA: when new meta data are received from the tuned station.
The callback MUST NOT be called synchronously while executing a HAL function but from
a separate thread.
"
    end

    class 4406071 "radio_tuner"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " control interface for a radio tuner "
      attribute 15738551 "set_configuration"
	public explicit_type "/* * Apply current radio band configuration (band, range, channel spacing ...). * * arguments: * - config: the band configuration to apply * * returns: * 0 if configuration could be applied * -EINVAL if configuration requested is invalid * * Automatically cancels pending scan, step or tune. * * Callback function with event RADIO_EVENT_CONFIG MUST be called once the * configuration is applied or a failure occurs or after a time out. */ int (*)(const struct radio_tuner *tuner, const radio_hal_band_config_t *config)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * Apply current radio band configuration (band, range, channel spacing ...).
     *
     * arguments:
     * - config: the band configuration to apply
     *
     * returns:
     *  0 if configuration could be applied
     *  -EINVAL if configuration requested is invalid
     *
     * Automatically cancels pending scan, step or tune.
     *
     * Callback function with event RADIO_EVENT_CONFIG MUST be called once the
     * configuration is applied or a failure occurs or after a time out.
     */
    int (*${name})(const struct radio_tuner *tuner,
                             const radio_hal_band_config_t *config)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Apply current radio band configuration (band, range, channel spacing ...).

arguments:
- config: the band configuration to apply

returns:
 0 if configuration could be applied
 -EINVAL if configuration requested is invalid

Automatically cancels pending scan, step or tune.

Callback function with event RADIO_EVENT_CONFIG MUST be called once the
configuration is applied or a failure occurs or after a time out.

"
      end

      attribute 15738679 "get_configuration"
	public explicit_type "/* * Retrieve current radio band configuration. * * arguments: * - config: where to return the band configuration * * returns: * 0 if valid configuration is returned * -EINVAL if invalid arguments are passed */ int (*)(const struct radio_tuner *tuner, radio_hal_band_config_t *config)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * Retrieve current radio band configuration.
     *
     * arguments:
     * - config: where to return the band configuration
     *
     * returns:
     *  0 if valid configuration is returned
     *  -EINVAL if invalid arguments are passed
     */
    int (*${name})(const struct radio_tuner *tuner,
                             radio_hal_band_config_t *config)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Retrieve current radio band configuration.

arguments:
- config: where to return the band configuration

returns:
 0 if valid configuration is returned
 -EINVAL if invalid arguments are passed

"
      end

      attribute 15738807 "scan"
	public explicit_type "/* * Start scanning up to next valid station. * Must be called when a valid configuration has been applied. * * arguments: * - direction: RADIO_DIRECTION_UP or RADIO_DIRECTION_DOWN * - skip_sub_channel: valid for HD radio or digital radios only: ignore sub channels * (e.g SPS for HD radio). * * returns: * 0 if scan successfully started * -ENOSYS if called out of sequence * -ENODEV if another error occurs * * Automatically cancels pending scan, step or tune. * * Callback function with event RADIO_EVENT_TUNED MUST be called once * locked on a station or after a time out or full frequency scan if * no station found. The event status should indicate if a valid station * is tuned or not. */ int (*)(const struct radio_tuner *tuner, radio_direction_t direction, bool skip_sub_channel)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * Start scanning up to next valid station.
     * Must be called when a valid configuration has been applied.
     *
     * arguments:
     * - direction: RADIO_DIRECTION_UP or RADIO_DIRECTION_DOWN
     * - skip_sub_channel: valid for HD radio or digital radios only: ignore sub channels
     *  (e.g SPS for HD radio).
     *
     * returns:
     *  0 if scan successfully started
     *  -ENOSYS if called out of sequence
     *  -ENODEV if another error occurs
     *
     * Automatically cancels pending scan, step or tune.
     *
     *  Callback function with event RADIO_EVENT_TUNED MUST be called once
     *  locked on a station or after a time out or full frequency scan if
     *  no station found. The event status should indicate if a valid station
     *  is tuned or not.
     */
    int (*${name})(const struct radio_tuner *tuner,
                radio_direction_t direction, bool skip_sub_channel)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Start scanning up to next valid station.
Must be called when a valid configuration has been applied.

arguments:
- direction: RADIO_DIRECTION_UP or RADIO_DIRECTION_DOWN
- skip_sub_channel: valid for HD radio or digital radios only: ignore sub channels
 (e.g SPS for HD radio).

returns:
 0 if scan successfully started
 -ENOSYS if called out of sequence
 -ENODEV if another error occurs

Automatically cancels pending scan, step or tune.

 Callback function with event RADIO_EVENT_TUNED MUST be called once
 locked on a station or after a time out or full frequency scan if
 no station found. The event status should indicate if a valid station
 is tuned or not.

"
      end

      attribute 15738935 "step"
	public explicit_type "/* * Move one channel spacing up or down. * Must be called when a valid configuration has been applied. * * arguments: * - direction: RADIO_DIRECTION_UP or RADIO_DIRECTION_DOWN * - skip_sub_channel: valid for HD radio or digital radios only: ignore sub channels * (e.g SPS for HD radio). * * returns: * 0 if step successfully started * -ENOSYS if called out of sequence * -ENODEV if another error occurs * * Automatically cancels pending scan, step or tune. * * Callback function with event RADIO_EVENT_TUNED MUST be called once * step completed or after a time out. The event status should indicate * if a valid station is tuned or not. */ int (*)(const struct radio_tuner *tuner, radio_direction_t direction, bool skip_sub_channel)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * Move one channel spacing up or down.
     * Must be called when a valid configuration has been applied.
     *
     * arguments:
     * - direction: RADIO_DIRECTION_UP or RADIO_DIRECTION_DOWN
     * - skip_sub_channel: valid for HD radio or digital radios only: ignore sub channels
     *  (e.g SPS for HD radio).
     *
     * returns:
     *  0 if step successfully started
     *  -ENOSYS if called out of sequence
     *  -ENODEV if another error occurs
     *
     * Automatically cancels pending scan, step or tune.
     *
     * Callback function with event RADIO_EVENT_TUNED MUST be called once
     * step completed or after a time out. The event status should indicate
     * if a valid station is tuned or not.
     */
    int (*${name})(const struct radio_tuner *tuner,
                radio_direction_t direction, bool skip_sub_channel)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Move one channel spacing up or down.
Must be called when a valid configuration has been applied.

arguments:
- direction: RADIO_DIRECTION_UP or RADIO_DIRECTION_DOWN
- skip_sub_channel: valid for HD radio or digital radios only: ignore sub channels
 (e.g SPS for HD radio).

returns:
 0 if step successfully started
 -ENOSYS if called out of sequence
 -ENODEV if another error occurs

Automatically cancels pending scan, step or tune.

Callback function with event RADIO_EVENT_TUNED MUST be called once
step completed or after a time out. The event status should indicate
if a valid station is tuned or not.

"
      end

      attribute 15739063 "tune"
	public explicit_type "/* * Tune to specified frequency. * Must be called when a valid configuration has been applied. * * arguments: * - channel: channel to tune to. A frequency in kHz for AM/FM/HD Radio bands. * - sub_channel: valid for HD radio or digital radios only: (e.g SPS number for HD radio). * * returns: * 0 if tune successfully started * -ENOSYS if called out of sequence * -EINVAL if invalid arguments are passed * -ENODEV if another error occurs * * Automatically cancels pending scan, step or tune. * * Callback function with event RADIO_EVENT_TUNED MUST be called once * tuned or after a time out. The event status should indicate * if a valid station is tuned or not. */ int (*)(const struct radio_tuner *tuner, unsigned int channel, unsigned int sub_channel)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * Tune to specified frequency.
     * Must be called when a valid configuration has been applied.
     *
     * arguments:
     * - channel: channel to tune to. A frequency in kHz for AM/FM/HD Radio bands.
     * - sub_channel: valid for HD radio or digital radios only: (e.g SPS number for HD radio).
     *
     * returns:
     *  0 if tune successfully started
     *  -ENOSYS if called out of sequence
     *  -EINVAL if invalid arguments are passed
     *  -ENODEV if another error occurs
     *
     * Automatically cancels pending scan, step or tune.
     *
     * Callback function with event RADIO_EVENT_TUNED MUST be called once
     * tuned or after a time out. The event status should indicate
     * if a valid station is tuned or not.
     */
    int (*${name})(const struct radio_tuner *tuner,
                unsigned int channel, unsigned int sub_channel)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Tune to specified frequency.
Must be called when a valid configuration has been applied.

arguments:
- channel: channel to tune to. A frequency in kHz for AM/FM/HD Radio bands.
- sub_channel: valid for HD radio or digital radios only: (e.g SPS number for HD radio).

returns:
 0 if tune successfully started
 -ENOSYS if called out of sequence
 -EINVAL if invalid arguments are passed
 -ENODEV if another error occurs

Automatically cancels pending scan, step or tune.

Callback function with event RADIO_EVENT_TUNED MUST be called once
tuned or after a time out. The event status should indicate
if a valid station is tuned or not.

"
      end

      attribute 15739191 "cancel"
	public explicit_type "/* * Cancel a scan, step or tune operation. * Must be called while a scan, step or tune operation is pending * (callback not yet sent). * * returns: * 0 if successful * -ENOSYS if called out of sequence * -ENODEV if another error occurs * * The callback is not sent. */ int (*)(const struct radio_tuner *tuner)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * Cancel a scan, step or tune operation.
     * Must be called while a scan, step or tune operation is pending
     * (callback not yet sent).
     *
     * returns:
     *  0 if successful
     *  -ENOSYS if called out of sequence
     *  -ENODEV if another error occurs
     *
     * The callback is not sent.
     */
    int (*${name})(const struct radio_tuner *tuner)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Cancel a scan, step or tune operation.
Must be called while a scan, step or tune operation is pending
(callback not yet sent).

returns:
 0 if successful
 -ENOSYS if called out of sequence
 -ENODEV if another error occurs

The callback is not sent.

"
      end

      attribute 15739319 "get_program_information"
	public explicit_type "/* * Retrieve current station information. * * arguments: * - info: where to return the program info. * If info->metadata is NULL. no meta data should be returned. * If meta data must be returned, they should be added to or cloned to * info->metadata, not passed from a newly created meta data buffer. * * returns: * 0 if tuned and information available * -EINVAL if invalid arguments are passed * -ENODEV if another error occurs */ int (*)(const struct radio_tuner *tuner, radio_program_info_t *info)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * Retrieve current station information.
     *
     * arguments:
     * - info: where to return the program info.
     * If info->metadata is NULL. no meta data should be returned.
     * If meta data must be returned, they should be added to or cloned to
     * info->metadata, not passed from a newly created meta data buffer.
     *
     * returns:
     *  0 if tuned and information available
     *  -EINVAL if invalid arguments are passed
     *  -ENODEV if another error occurs
     */
    int (*${name})(const struct radio_tuner *tuner,
                                   radio_program_info_t *info)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Retrieve current station information.

arguments:
- info: where to return the program info.
If info->metadata is NULL. no meta data should be returned.
If meta data must be returned, they should be added to or cloned to
info->metadata, not passed from a newly created meta data buffer.

returns:
 0 if tuned and information available
 -EINVAL if invalid arguments are passed
 -ENODEV if another error occurs

"
      end
    end

    class 4406199 "radio_hw_device"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8395063 // common (<directional composition>)
	relation 8395063 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8395063 // common (<directional composition>)
	  b parent class_ref 4305975 // hw_device_t
      end

      attribute 15739447 "get_properties"
	public explicit_type "/* * Retrieve implementation properties. * * arguments: * - properties: where to return the module properties * * returns: * 0 if no error * -EINVAL if invalid arguments are passed */ int (*)(const struct radio_hw_device *dev, radio_hal_properties_t *properties)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * Retrieve implementation properties.
     *
     * arguments:
     * - properties: where to return the module properties
     *
     * returns:
     *  0 if no error
     *  -EINVAL if invalid arguments are passed
     */
    int (*${name})(const struct radio_hw_device *dev,
                          radio_hal_properties_t *properties)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Retrieve implementation properties.

arguments:
- properties: where to return the module properties

returns:
 0 if no error
 -EINVAL if invalid arguments are passed

"
      end

      attribute 15739575 "open_tuner"
	public explicit_type "/* * Open a tuner interface for the requested configuration. * If no other tuner is opened, this will activate the radio module. * * arguments: * - config: the band configuration to apply * - audio: this tuner will be used for live radio listening and should be connected to * the radio audio source. * - callback: the event callback * - cookie: the cookie to pass when calling the callback * - tuner: where to return the tuner interface * * returns: * 0 if HW was powered up and configuration could be applied * -EINVAL if configuration requested is invalid * -ENOSYS if called out of sequence * * Callback function with event RADIO_EVENT_CONFIG MUST be called once the * configuration is applied or a failure occurs or after a time out. */ int (*)(const struct radio_hw_device *dev, const radio_hal_band_config_t *config, bool audio, radio_callback_t callback, void *cookie, const struct radio_tuner **tuner)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * Open a tuner interface for the requested configuration.
     * If no other tuner is opened, this will activate the radio module.
     *
     * arguments:
     * - config: the band configuration to apply
     * - audio: this tuner will be used for live radio listening and should be connected to
     * the radio audio source.
     * - callback: the event callback
     * - cookie: the cookie to pass when calling the callback
     * - tuner: where to return the tuner interface
     *
     * returns:
     *  0 if HW was powered up and configuration could be applied
     *  -EINVAL if configuration requested is invalid
     *  -ENOSYS if called out of sequence
     *
     * Callback function with event RADIO_EVENT_CONFIG MUST be called once the
     * configuration is applied or a failure occurs or after a time out.
     */
    int (*${name})(const struct radio_hw_device *dev,
                    const radio_hal_band_config_t *config,
                    bool audio,
                    radio_callback_t callback,
                    void *cookie,
                    const struct radio_tuner **tuner)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Open a tuner interface for the requested configuration.
If no other tuner is opened, this will activate the radio module.

arguments:
- config: the band configuration to apply
- audio: this tuner will be used for live radio listening and should be connected to
the radio audio source.
- callback: the event callback
- cookie: the cookie to pass when calling the callback
- tuner: where to return the tuner interface

returns:
 0 if HW was powered up and configuration could be applied
 -EINVAL if configuration requested is invalid
 -ENOSYS if called out of sequence

Callback function with event RADIO_EVENT_CONFIG MUST be called once the
configuration is applied or a failure occurs or after a time out.

"
      end

      attribute 15739703 "close_tuner"
	public explicit_type "/* * Close a tuner interface. * If the last tuner is closed, the radio module is deactivated. * * arguments: * - tuner: the tuner interface to close * * returns: * 0 if powered down successfully. * -EINVAL if an invalid argument is passed * -ENOSYS if called out of sequence */ int (*)(const struct radio_hw_device *dev, const struct radio_tuner *tuner)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * Close a tuner interface.
     * If the last tuner is closed, the radio module is deactivated.
     *
     * arguments:
     * - tuner: the tuner interface to close
     *
     * returns:
     *  0 if powered down successfully.
     *  -EINVAL if an invalid argument is passed
     *  -ENOSYS if called out of sequence
     */
    int (*${name})(const struct radio_hw_device *dev, const struct radio_tuner *tuner)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Close a tuner interface.
If the last tuner is closed, the radio module is deactivated.

arguments:
- tuner: the tuner interface to close

returns:
 0 if powered down successfully.
 -EINVAL if an invalid argument is passed
 -ENOSYS if called out of sequence

"
      end
    end

    class 4406327 "radio_hw_device_t"
      visibility package stereotype "typedef" base_type class_ref 4406199 // radio_hw_device
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8395191 // <dependency>
	relation 8395191 -_->
	  a public
	    cpp default "#include in source"
	    classrelation_ref 8395191 // <dependency>
	  b parent class_ref 4406199 // radio_hw_device
      end
    end

    class 4406455 "anonymous174"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "**** Deprecated *****
flags for (*batch)()
Availability: SENSORS_DEVICE_API_VERSION_1_0
see (*batch)() documentation for details.
Deprecated as of  SENSORS_DEVICE_API_VERSION_1_3.
WAKE_UP_* sensors replace WAKE_UPON_FIFO_FULL concept.


what field for meta_data_event_t
"
      attribute 15739831 "META_DATA_FLUSH_COMPLETE"
	public type class_ref 4406455 // anonymous174
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15739959 "META_DATA_VERSION"
	public type class_ref 4406455 // anonymous174
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4406583 "anonymous175"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Availability: SENSORS_DEVICE_API_VERSION_1_4
Sensor HAL modes used in set_operation_mode method
"
      attribute 15740087 "SENSOR_HAL_NORMAL_MODE"
	public type class_ref 4406583 // anonymous175
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15740215 "SENSOR_HAL_DATA_INJECTION_MODE"
	public type class_ref 4406583 // anonymous175
	init_value " 0x1
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4406711 "anonymous176"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Availability: SENSORS_DEVICE_API_VERSION_1_3
Sensor flags used in sensor_t.flags.
"
      attribute 15740343 "SENSOR_FLAG_WAKE_UP"
	public type class_ref 4406711 // anonymous176
	init_value " 1U << 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15740471 "SENSOR_FLAG_CONTINUOUS_MODE"
	public type class_ref 4406711 // anonymous176
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15740599 "SENSOR_FLAG_ON_CHANGE_MODE"
	public type class_ref 4406711 // anonymous176
	init_value " 0x2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15740727 "SENSOR_FLAG_ONE_SHOT_MODE"
	public type class_ref 4406711 // anonymous176
	init_value " 0x4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15740855 "SENSOR_FLAG_SPECIAL_REPORTING_MODE"
	public type class_ref 4406711 // anonymous176
	init_value " 0x6"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15740983 "SENSOR_FLAG_SUPPORTS_DATA_INJECTION"
	public type class_ref 4406711 // anonymous176
	init_value " DATA_INJECTION_MASK"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15741111 "SENSOR_FLAG_DYNAMIC_SENSOR"
	public type class_ref 4406711 // anonymous176
	init_value " DYNAMIC_SENSOR_MASK"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15741239 "SENSOR_FLAG_ADDITIONAL_INFO"
	public type class_ref 4406711 // anonymous176
	init_value " ADDITIONAL_INFO_MASK
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4406839 "sensors_vec_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "sensor event data
"
      attribute 15741367 "v"
	public explicit_type "float"
	multiplicity "[3]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15741495 "x"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15741623 "y"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15741751 "z"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4406967 "uncalibrated_event_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "uncalibrated gyroscope and magnetometer event data
"
      attribute 15741879 "uncalib"
	public explicit_type "float"
	multiplicity "[3]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15742007 "x_uncalib"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15742135 "y_uncalib"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15742263 "z_uncalib"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4407095 "meta_data_event"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Meta data event data
"
    end

    class 4407223 "meta_data_event_t"
      visibility package stereotype "typedef" base_type class_ref 4407095 // meta_data_event
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4407351 "dynamic_sensor_meta_event"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Dynamic sensor meta event. See the description of SENSOR_TYPE_DYNAMIC_SENSOR_META type for
details.
"
      classrelation 8395831 // sensor (<unidirectional association>)
	relation 8395831 --->
	  a role_name "sensor" const_relation public
	    comment " should be NULL if connected == false"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8395831 // sensor (<unidirectional association>)
	  b parent class_ref 4300215 // sensor_t
      end

    end

    class 4407479 "dynamic_sensor_meta_event_t"
      visibility package stereotype "typedef" base_type class_ref 4407351 // dynamic_sensor_meta_event
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4407607 "heart_rate_event_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " For UUID 12345678-90AB-CDEF-1122-334455667788 the uuid field
 should be initialized as:
 {0x12, 0x34, 0x56, 0x78, 0x90, 0xAB, 0xCD, 0xEF, 0x11, ...}

Heart rate event data
"
      attribute 15742391 "bpm"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Heart rate in beats per minute.
 Set to 0 when status is SENSOR_STATUS_UNRELIABLE or ..._NO_CONTACT
"
      end

    end

    class 4407735 "additional_info_event_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15742519 "data_float"
	public explicit_type "float"
	multiplicity "[14]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4407863 "additional_info_type"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15742647 "AINFO_BEGIN"
	public type class_ref 4407863 // additional_info_type
	init_value " 0x0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15742775 "AINFO_END"
	public type class_ref 4407863 // additional_info_type
	init_value " 0x1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15742903 "AINFO_UNTRACKED_DELAY"
	public type class_ref 4407863 // additional_info_type
	init_value "  0x10000"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15743031 "AINFO_INTERNAL_TEMPERATURE"
	public type class_ref 4407863 // additional_info_type
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15743159 "AINFO_VEC3_CALIBRATION"
	public type class_ref 4407863 // additional_info_type
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15743287 "AINFO_SENSOR_PLACEMENT"
	public type class_ref 4407863 // additional_info_type
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15743415 "AINFO_SAMPLING"
	public type class_ref 4407863 // additional_info_type
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15743543 "AINFO_CHANNEL_NOISE"
	public type class_ref 4407863 // additional_info_type
	init_value " 0x20000"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15743671 "AINFO_CHANNEL_SAMPLER"
	public type class_ref 4407863 // additional_info_type
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15743799 "AINFO_CHANNEL_FILTER"
	public type class_ref 4407863 // additional_info_type
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15743927 "AINFO_CHANNEL_LINEAR_TRANSFORM"
	public type class_ref 4407863 // additional_info_type
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15744055 "AINFO_CHANNEL_NONLINEAR_MAP"
	public type class_ref 4407863 // additional_info_type
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15744183 "AINFO_CHANNEL_RESAMPLER"
	public type class_ref 4407863 // additional_info_type
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15744311 "AINFO_CUSTOM_START"
	public type class_ref 4407863 // additional_info_type
	init_value "    0x10000000"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15744439 "AINFO_DEBUGGING_START"
	public type class_ref 4407863 // additional_info_type
	init_value " 0x40000000"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4407991 "additional_info_type_t"
      visibility package stereotype "typedef" base_type class_ref 4407863 // additional_info_type
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4408119 "sensors_meta_data_event_t"
      visibility package stereotype "typedef" base_type class_ref 3803447 // sensors_event_t
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " see SENSOR_TYPE_META_DATA "
      classrelation 8398519 // <dependency>
	relation 8398519 -_->
	  a public
	    cpp default "#include in source"
	    classrelation_ref 8398519 // <dependency>
	  b parent class_ref 3803447 // sensors_event_t
      end
    end

    class 4408247 "sensors_module_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Every hardware module must have a data structure named HAL_MODULE_INFO_SYM
and the fields of this data structure must begin with hw_module_t
followed by module specific information.
"
      classrelation 8398647 // common (<directional composition>)
	relation 8398647 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8398647 // common (<directional composition>)
	  b parent class_ref 4305335 // hw_module_t
      end

      attribute 15745335 "get_sensors_list"
	public explicit_type "/** * Enumerate all available sensors. The list is returned in \"list\". * @return number of sensors in the list */ int (*)(struct sensors_module_t* module, struct sensor_t const** list)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Enumerate all available sensors. The list is returned in \"list\".
     * @return number of sensors in the list
     */
    int (*${name})(struct sensors_module_t* module,
            struct sensor_t const** list)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Enumerate all available sensors. The list is returned in \"list\".
@return number of sensors in the list

"
      end

      attribute 15745463 "set_operation_mode"
	public explicit_type "/** * Place the module in a specific mode. The following modes are defined * * 0 - Normal operation. Default state of the module. * 1 - Loopback mode. Data is injected for the supported * sensors by the sensor service in this mode. * @return 0 on success * -EINVAL if requested mode is not supported * -EPERM if operation is not allowed */ int (*)(unsigned int mode)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     *  Place the module in a specific mode. The following modes are defined
     *
     *  0 - Normal operation. Default state of the module.
     *  1 - Loopback mode. Data is injected for the supported
     *      sensors by the sensor service in this mode.
     * @return 0 on success
     *         -EINVAL if requested mode is not supported
     *         -EPERM if operation is not allowed
     */
    int (*${name})(unsigned int mode)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Place the module in a specific mode. The following modes are defined

 0 - Normal operation. Default state of the module.
 1 - Loopback mode. Data is injected for the supported
     sensors by the sensor service in this mode.
@return 0 on success
        -EINVAL if requested mode is not supported
        -EPERM if operation is not allowed

"
      end
    end

    class 4408375 "sensors_poll_device_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "sensors_poll_device_t is used with SENSORS_DEVICE_API_VERSION_0_1
and is present for backward binary and source compatibility.
See the Sensors HAL interface section for complete descriptions of the
following functions:
http://source.android.com/devices/sensors/index.html#hal
"
      classrelation 8399671 // common (<directional composition>)
	relation 8399671 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8399671 // common (<directional composition>)
	  b parent class_ref 4305975 // hw_device_t
      end

      attribute 15746999 "activate"
	public explicit_type "int (*)(struct sensors_poll_device_t *dev, int sensor_handle, int enabled)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    int (*${name})(struct sensors_poll_device_t *dev,
            int sensor_handle, int enabled)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15747127 "setDelay"
	public explicit_type "int (*)(struct sensors_poll_device_t *dev, int sensor_handle, int64_t sampling_period_ns)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    int (*${name})(struct sensors_poll_device_t *dev,
            int sensor_handle, int64_t sampling_period_ns)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15747255 "poll"
	public explicit_type "int (*)(struct sensors_poll_device_t *dev, sensors_event_t* data, int count)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    int (*${name})(struct sensors_poll_device_t *dev,
            sensors_event_t* data, int count)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4408503 "sensors_poll_device_1"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "struct sensors_poll_device_1 is used in HAL versions >= SENSORS_DEVICE_API_VERSION_1_0
"
      classrelation 8399799 // v0 (<directional composition>)
	relation 8399799 *-->
	  a role_name "v0" public
	    comment " sensors_poll_device_1 is compatible with sensors_poll_device_t,
and can be down-cast to it

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8399799 // v0 (<directional composition>)
	  b parent class_ref 4408375 // sensors_poll_device_t
      end

      classrelation 8399927 // common (<directional composition>)
	relation 8399927 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8399927 // common (<directional composition>)
	  b parent class_ref 4305975 // hw_device_t
      end

      attribute 15747383 "activate"
	public explicit_type "/* Activate/de-activate one sensor. Return 0 on success, negative * * sensor_handle is the handle of the sensor to change. * enabled set to 1 to enable, or 0 to disable the sensor. * * Return 0 on success, negative errno code otherwise. */ int (*)(struct sensors_poll_device_t *dev, int sensor_handle, int enabled)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
            /* Activate/de-activate one sensor. Return 0 on success, negative
             *
             * sensor_handle is the handle of the sensor to change.
             * enabled set to 1 to enable, or 0 to disable the sensor.
             *
             * Return 0 on success, negative errno code otherwise.
             */
            int (*${name})(struct sensors_poll_device_t *dev,
                    int sensor_handle, int enabled)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Activate/de-activate one sensor. Return 0 on success, negative

sensor_handle is the handle of the sensor to change.
enabled set to 1 to enable, or 0 to disable the sensor.

Return 0 on success, negative errno code otherwise.

"
      end

      attribute 15747511 "setDelay"
	public explicit_type "/** * Set the events's period in nanoseconds for a given sensor. * If sampling_period_ns > max_delay it will be truncated to * max_delay and if sampling_period_ns < min_delay it will be * replaced by min_delay. */ int (*)(struct sensors_poll_device_t *dev, int sensor_handle, int64_t sampling_period_ns)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
            /**
             * Set the events's period in nanoseconds for a given sensor.
             * If sampling_period_ns > max_delay it will be truncated to
             * max_delay and if sampling_period_ns < min_delay it will be
             * replaced by min_delay.
             */
            int (*${name})(struct sensors_poll_device_t *dev,
                    int sensor_handle, int64_t sampling_period_ns)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Set the events's period in nanoseconds for a given sensor.
If sampling_period_ns > max_delay it will be truncated to
max_delay and if sampling_period_ns < min_delay it will be
replaced by min_delay.

"
      end

      attribute 15747639 "poll"
	public explicit_type "/** * Returns an array of sensor data. */ int (*)(struct sensors_poll_device_t *dev, sensors_event_t* data, int count)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
            /**
             * Returns an array of sensor data.
             */
            int (*${name})(struct sensors_poll_device_t *dev,
                    sensors_event_t* data, int count)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Returns an array of sensor data.

"
      end
    end

    class 4408631 "sensors_poll_device_1_t"
      visibility package stereotype "typedef" explicit_base_type ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4408759 "recognition_callback_t"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(struct sound_trigger_recognition_event *event, void *cookie);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4408887 "sound_model_callback_t"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(struct sound_trigger_model_event *event, void *cookie);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4409015 "sound_trigger_hw_device"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8400055 // common (<directional composition>)
	relation 8400055 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8400055 // common (<directional composition>)
	  b parent class_ref 4305975 // hw_device_t
      end

      attribute 15747767 "get_properties"
	public explicit_type "/* * Retrieve implementation properties. */ int (*)(const struct sound_trigger_hw_device *dev, struct sound_trigger_properties *properties)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * Retrieve implementation properties.
     */
    int (*${name})(const struct sound_trigger_hw_device *dev,
                          struct sound_trigger_properties *properties)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Retrieve implementation properties.

"
      end

      attribute 15747895 "load_sound_model"
	public explicit_type "/* * Load a sound model. Once loaded, recognition of this model can be started and stopped. * Only one active recognition per model at a time. The SoundTrigger service will handle * concurrent recognition requests by different users/applications on the same model. * The implementation returns a unique handle used by other functions (unload_sound_model(), * start_recognition(), etc... */ int (*)(const struct sound_trigger_hw_device *dev, struct sound_trigger_sound_model *sound_model, sound_model_callback_t callback, void *cookie, sound_model_handle_t *handle)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * Load a sound model. Once loaded, recognition of this model can be started and stopped.
     * Only one active recognition per model at a time. The SoundTrigger service will handle
     * concurrent recognition requests by different users/applications on the same model.
     * The implementation returns a unique handle used by other functions (unload_sound_model(),
     * start_recognition(), etc...
     */
    int (*${name})(const struct sound_trigger_hw_device *dev,
                            struct sound_trigger_sound_model *sound_model,
                            sound_model_callback_t callback,
                            void *cookie,
                            sound_model_handle_t *handle)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Load a sound model. Once loaded, recognition of this model can be started and stopped.
Only one active recognition per model at a time. The SoundTrigger service will handle
concurrent recognition requests by different users/applications on the same model.
The implementation returns a unique handle used by other functions (unload_sound_model(),
start_recognition(), etc...

"
      end

      attribute 15748023 "unload_sound_model"
	public explicit_type "/* * Unload a sound model. A sound model can be unloaded to make room for a new one to overcome * implementation limitations. */ int (*)(const struct sound_trigger_hw_device *dev, sound_model_handle_t handle)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * Unload a sound model. A sound model can be unloaded to make room for a new one to overcome
     * implementation limitations.
     */
    int (*${name})(const struct sound_trigger_hw_device *dev,
                              sound_model_handle_t handle)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Unload a sound model. A sound model can be unloaded to make room for a new one to overcome
implementation limitations.

"
      end

      attribute 15748151 "start_recognition"
	public explicit_type "/* Start recognition on a given model. Only one recognition active at a time per model. * Once recognition succeeds of fails, the callback is called. * TODO: group recognition configuration parameters into one struct and add key phrase options. */ int (*)(const struct sound_trigger_hw_device *dev, sound_model_handle_t sound_model_handle, const struct sound_trigger_recognition_config *config, recognition_callback_t callback, void *cookie)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* Start recognition on a given model. Only one recognition active at a time per model.
     * Once recognition succeeds of fails, the callback is called.
     * TODO: group recognition configuration parameters into one struct and add key phrase options.
     */
    int (*${name})(const struct sound_trigger_hw_device *dev,
                             sound_model_handle_t sound_model_handle,
                             const struct sound_trigger_recognition_config *config,
                             recognition_callback_t callback,
                             void *cookie)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Start recognition on a given model. Only one recognition active at a time per model.
Once recognition succeeds of fails, the callback is called.
TODO: group recognition configuration parameters into one struct and add key phrase options.

"
      end

      attribute 15748279 "stop_recognition"
	public explicit_type "/* Stop recognition on a given model. * The implementation does not have to call the callback when stopped via this method. */ int (*)(const struct sound_trigger_hw_device *dev, sound_model_handle_t sound_model_handle)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* Stop recognition on a given model.
     * The implementation does not have to call the callback when stopped via this method.
     */
    int (*${name})(const struct sound_trigger_hw_device *dev,
                            sound_model_handle_t sound_model_handle)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Stop recognition on a given model.
The implementation does not have to call the callback when stopped via this method.

"
      end

      attribute 15748407 "stop_all_recognitions"
	public explicit_type "/* Stop recognition on all models. * Only supported for device api versions SOUND_TRIGGER_DEVICE_API_VERSION_1_1 or above. * If no implementation is provided, stop_recognition will be called for each running model. */ int (*)(const struct sound_trigger_hw_device* dev)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /* Stop recognition on all models.
     * Only supported for device api versions SOUND_TRIGGER_DEVICE_API_VERSION_1_1 or above.
     * If no implementation is provided, stop_recognition will be called for each running model.
     */
    int (*${name})(const struct sound_trigger_hw_device* dev)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Stop recognition on all models.
Only supported for device api versions SOUND_TRIGGER_DEVICE_API_VERSION_1_1 or above.
If no implementation is provided, stop_recognition will be called for each running model.

"
      end
    end

    class 4409143 "sound_trigger_hw_device_t"
      visibility package stereotype "typedef" base_type class_ref 4409015 // sound_trigger_hw_device
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8400183 // <dependency>
	relation 8400183 -_->
	  a public
	    cpp default "#include in source"
	    classrelation_ref 8400183 // <dependency>
	  b parent class_ref 4409015 // sound_trigger_hw_device
      end
    end

    class 4409271 "cooling_type"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Device temperature types. Must be kept in sync with
framework/base/core/java/android/os/HardwarePropertiesManager.java
"
      attribute 15748535 "FAN_RPM"
	public type class_ref 4409271 // cooling_type
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4409399 "temperature_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Fan cooling device speed in RPM. "
      attribute 15748663 "type"
	public explicit_type "temperature_type"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}enum ${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This temperature's type.

"
      end

      attribute 15748791 "name"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Name of this temperature.
All temperatures of the same \"type\" must have a different \"name\".

"
      end

      attribute 15748919 "current_value"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Current temperature in Celsius. If not available set by HAL to
UNKNOWN_TEMPERATURE.
Current temperature can be in any units if
type=DEVICE_TEMPERATURE_UNKNOWN.

"
      end

      attribute 15749047 "throttling_threshold"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Throttling temperature constant for this temperature.
If not available, set by HAL to UNKNOWN_TEMPERATURE.

"
      end

      attribute 15749175 "shutdown_threshold"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Shutdown temperature constant for this temperature.
If not available, set by HAL to UNKNOWN_TEMPERATURE.

"
      end

      attribute 15749303 "vr_throttling_threshold"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Threshold temperature above which the VR mode clockrate minimums cannot
be maintained for this device.
If not available, set by HAL to UNKNOWN_TEMPERATURE.

"
      end
    end

    class 4409527 "cooling_device_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8400311 // type (<directional composition>)
	relation 8400311 *-->
	  a role_name "type" public
	    comment "This cooling device type.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}enum ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8400311 // type (<directional composition>)
	  b parent class_ref 4409271 // cooling_type
      end

      attribute 15749431 "name"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Name of this cooling device.
All cooling devices of the same \"type\" must have a different \"name\".

"
      end

      attribute 15749559 "current_value"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Current cooling device value. Units depend on cooling device \"type\".

"
      end
    end

    class 4409655 "cpu_usage_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15749687 "name"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Name of this CPU.
All CPUs must have a different \"name\".

"
      end

      attribute 15749815 "is_online"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Is set to true when a core is online.
If the core is offline, all other members except |name| should be ignored.

"
      end
    end

    class 4409783 "thermal_module"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8400695 // common (<directional composition>)
	relation 8400695 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8400695 // common (<directional composition>)
	  b parent class_ref 4305335 // hw_module_t
      end

      attribute 15749943 "getTemperatures"
	public explicit_type "/* * (*getTemperatures) is called to get temperatures in Celsius. * * @param list If NULL, this method only returns number of temperatures * and caller should allocate a temperature_t array with that number * of elements. * Caller is responsible for allocating temperature_t array |list| of * large enough size (not less than returned number of temperatures). * If |list| is not NULL and this method returns non-negative value, * it's filled with the current temperatures. If the resulting * temperature list is longer than |size| elements, the remaining * temperatures are discarded and not stored, but counted for the value * returned by this method. * The order of temperatures of built-in devices (such as CPUs, GPUs and * etc.) in the |list| is kept the same regardless the number of calls * to this method even if they go offline, if these devices exist on * boot. The method always returns and never removes such temperatures. * @param size The capacity of |list|, in elements, if |list| is not NULL. * * @return number of temperatures or negative value -errno on error. * */ ssize_t (*)(struct thermal_module *module, temperature_t *list, size_t size)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * (*getTemperatures) is called to get temperatures in Celsius.
     *
     * @param list If NULL, this method only returns number of temperatures
     *     and caller should allocate a temperature_t array with that number
     *     of elements.
     *     Caller is responsible for allocating temperature_t array |list| of
     *     large enough size (not less than returned number of temperatures).
     *     If |list| is not NULL and this method returns non-negative value,
     *     it's filled with the current temperatures. If the resulting
     *     temperature list is longer than |size| elements, the remaining
     *     temperatures are discarded and not stored, but counted for the value
     *     returned by this method.
     *     The order of temperatures of built-in devices (such as CPUs, GPUs and
     *     etc.) in the |list| is kept the same regardless the number of calls
     *     to this method even if they go offline, if these devices exist on
     *     boot. The method always returns and never removes such temperatures.
     * @param size The capacity of |list|, in elements, if |list| is not NULL.
     *
     * @return number of temperatures or negative value -errno on error.
     *
     */
    ssize_t (*${name})(struct thermal_module *module, temperature_t *list, size_t size)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*getTemperatures) is called to get temperatures in Celsius.

@param list If NULL, this method only returns number of temperatures
    and caller should allocate a temperature_t array with that number
    of elements.
    Caller is responsible for allocating temperature_t array |list| of
    large enough size (not less than returned number of temperatures).
    If |list| is not NULL and this method returns non-negative value,
    it's filled with the current temperatures. If the resulting
    temperature list is longer than |size| elements, the remaining
    temperatures are discarded and not stored, but counted for the value
    returned by this method.
    The order of temperatures of built-in devices (such as CPUs, GPUs and
    etc.) in the |list| is kept the same regardless the number of calls
    to this method even if they go offline, if these devices exist on
    boot. The method always returns and never removes such temperatures.
@param size The capacity of |list|, in elements, if |list| is not NULL.

@return number of temperatures or negative value -errno on error.


"
      end

      attribute 15750071 "getCpuUsages"
	public explicit_type "/* * (*getCpuUsages) is called to get CPU usage information of each core: * active and total times in ms since first boot. * * @param list If NULL, this method only returns number of cores and caller * should allocate a cpu_usage_t array with that number of elements. * Caller is responsible for allocating cpu_usage_t array |list| of * large enough size (not less than returned number of CPUs). * If |list| is not NULL and this method returns non-negative value, * it's filled with the current CPU usages. * The order of CPUs in the |list| is kept the same regardless the * number of calls to this method. * * @return constant number of CPUs or negative value -errno on error. * */ ssize_t (*)(struct thermal_module *module, cpu_usage_t *list)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * (*getCpuUsages) is called to get CPU usage information of each core:
     *     active and total times in ms since first boot.
     *
     * @param list If NULL, this method only returns number of cores and caller
     *     should allocate a cpu_usage_t array with that number of elements.
     *     Caller is responsible for allocating cpu_usage_t array |list| of
     *     large enough size (not less than returned number of CPUs).
     *     If |list| is not NULL and this method returns non-negative value,
     *     it's filled with the current CPU usages.
     *     The order of CPUs in the |list| is kept the same regardless the
     *     number of calls to this method.
     *
     * @return constant number of CPUs or negative value -errno on error.
     *
     */
    ssize_t (*${name})(struct thermal_module *module, cpu_usage_t *list)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*getCpuUsages) is called to get CPU usage information of each core:
    active and total times in ms since first boot.

@param list If NULL, this method only returns number of cores and caller
    should allocate a cpu_usage_t array with that number of elements.
    Caller is responsible for allocating cpu_usage_t array |list| of
    large enough size (not less than returned number of CPUs).
    If |list| is not NULL and this method returns non-negative value,
    it's filled with the current CPU usages.
    The order of CPUs in the |list| is kept the same regardless the
    number of calls to this method.

@return constant number of CPUs or negative value -errno on error.


"
      end

      attribute 15750199 "getCoolingDevices"
	public explicit_type "/* * (*getCoolingDevices) is called to get the cooling devices information. * * @param list If NULL, this method only returns number of cooling devices * and caller should allocate a cooling_device_t array with that number * of elements. * Caller is responsible for allocating cooling_device_t array |list| of * large enough size (not less than returned number of cooling devices). * If |list| is not NULL and this method returns non-negative value, * it's filled with the current cooling device information. If the * resulting cooling device list is longer than |size| elements, the * remaining cooling device informations are discarded and not stored, * but counted for the value returned by this method. * The order of built-in coolling devices in the |list| is kept the same * regardless the number of calls to this method even if they go * offline, if these devices exist on boot. The method always returns * and never removes from the list such coolling devices. * @param size The capacity of |list|, in elements, if |list| is not NULL. * * @return number of cooling devices or negative value -errno on error. * */ ssize_t (*)(struct thermal_module *module, cooling_device_t *list, size_t size)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * (*getCoolingDevices) is called to get the cooling devices information.
     *
     * @param list If NULL, this method only returns number of cooling devices
     *     and caller should allocate a cooling_device_t array with that number
     *     of elements.
     *     Caller is responsible for allocating cooling_device_t array |list| of
     *     large enough size (not less than returned number of cooling devices).
     *     If |list| is not NULL and this method returns non-negative value,
     *     it's filled with the current cooling device information. If the
     *     resulting cooling device list is longer than |size| elements, the
     *     remaining cooling device informations are discarded and not stored,
     *     but counted for the value returned by this method.
     *     The order of built-in coolling devices in the |list| is kept the same
     *     regardless the number of calls to this method even if they go
     *     offline, if these devices exist on boot. The method always returns
     *     and never removes from the list such coolling devices.
     * @param size The capacity of |list|, in elements, if |list| is not NULL.
     *
     * @return number of cooling devices or negative value -errno on error.
     *
     */
    ssize_t (*${name})(struct thermal_module *module, cooling_device_t *list,
                                 size_t size)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "(*getCoolingDevices) is called to get the cooling devices information.

@param list If NULL, this method only returns number of cooling devices
    and caller should allocate a cooling_device_t array with that number
    of elements.
    Caller is responsible for allocating cooling_device_t array |list| of
    large enough size (not less than returned number of cooling devices).
    If |list| is not NULL and this method returns non-negative value,
    it's filled with the current cooling device information. If the
    resulting cooling device list is longer than |size| elements, the
    remaining cooling device informations are discarded and not stored,
    but counted for the value returned by this method.
    The order of built-in coolling devices in the |list| is kept the same
    regardless the number of calls to this method even if they go
    offline, if these devices exist on boot. The method always returns
    and never removes from the list such coolling devices.
@param size The capacity of |list|, in elements, if |list| is not NULL.

@return number of cooling devices or negative value -errno on error.


"
      end
    end

    class 4409911 "thermal_module_t"
      visibility package stereotype "typedef" base_type class_ref 4409783 // thermal_module
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4410039 "anonymous177"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15750327 "TV_INPUT_TYPE_OTHER_HARDWARE"
	public type class_ref 4410039 // anonymous177
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15750455 "TV_INPUT_TYPE_TUNER"
	public type class_ref 4410039 // anonymous177
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15750583 "TV_INPUT_TYPE_COMPOSITE"
	public type class_ref 4410039 // anonymous177
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15750711 "TV_INPUT_TYPE_SVIDEO"
	public type class_ref 4410039 // anonymous177
	init_value " 4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15750839 "TV_INPUT_TYPE_SCART"
	public type class_ref 4410039 // anonymous177
	init_value " 5"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15750967 "TV_INPUT_TYPE_COMPONENT"
	public type class_ref 4410039 // anonymous177
	init_value " 6"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15751095 "TV_INPUT_TYPE_VGA"
	public type class_ref 4410039 // anonymous177
	init_value " 7"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15751223 "TV_INPUT_TYPE_DVI"
	public type class_ref 4410039 // anonymous177
	init_value " 8"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15751351 "TV_INPUT_TYPE_HDMI"
	public type class_ref 4410039 // anonymous177
	init_value " 9"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15751479 "TV_INPUT_TYPE_DISPLAY_PORT"
	public type class_ref 4410039 // anonymous177
	init_value " 10"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4410167 "tv_input_type_t"
      visibility package stereotype "typedef" explicit_base_type "uint32_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Generic hardware. 
 Tuner. (e.g. built-in terrestrial tuner) 
 Physical HDMI port. (e.g. HDMI 1) "
    end

    class 4410295 "tv_input_device_info"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15751607 "device_id"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Device ID 
"
      end

      classrelation 8400951 // type (<directional composition>)
	relation 8400951 *-->
	  a role_name "type" public
	    comment " Type of physical TV input. 
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8400951 // type (<directional composition>)
	  b parent class_ref 4410167 // tv_input_type_t
      end

      attribute 15751735 "hdmi"
	public explicit_type "<complex type>"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct  {
            /* HDMI port ID number */
            uint32_t port_id;
        } ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

    end

    class 4410423 "tv_input_device_info_t"
      visibility package stereotype "typedef" explicit_base_type ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4410551 "anonymous178"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " See tv_input_event_t for more details. "
      attribute 15751863 "TV_INPUT_EVENT_DEVICE_AVAILABLE"
	public type class_ref 4410551 // anonymous178
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15751991 "TV_INPUT_EVENT_DEVICE_UNAVAILABLE"
	public type class_ref 4410551 // anonymous178
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15752119 "TV_INPUT_EVENT_STREAM_CONFIGURATIONS_CHANGED"
	public type class_ref 4410551 // anonymous178
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15752247 "TV_INPUT_EVENT_CAPTURE_SUCCEEDED"
	public type class_ref 4410551 // anonymous178
	init_value " 4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15752375 "TV_INPUT_EVENT_CAPTURE_FAILED"
	public type class_ref 4410551 // anonymous178
	init_value " 5"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4410679 "tv_input_event_type_t"
      visibility package stereotype "typedef" explicit_base_type "uint32_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Hardware notifies the framework that a device is available.

Note that DEVICE_AVAILABLE and DEVICE_UNAVAILABLE events do not represent
hotplug events (i.e. plugging cable into or out of the physical port).
These events notify the framework whether the port is available or not.
For a concrete example, when a user plugs in or pulls out the HDMI cable
from a HDMI port, it does not generate DEVICE_AVAILABLE and/or
DEVICE_UNAVAILABLE events. However, if a user inserts a pluggable USB
tuner into the Android device, it will generate a DEVICE_AVAILABLE event
and when the port is removed, it should generate a DEVICE_UNAVAILABLE
event.

For hotplug events, please see STREAM_CONFIGURATION_CHANGED for more
details.

HAL implementation should register devices by using this event when the
device boots up. The framework will recognize device reported via this
event only. In addition, the implementation could use this event to
notify the framework that a removable TV input device (such as USB tuner
as stated in the example above) is attached.


Hardware notifies the framework that a device is unavailable.

HAL implementation should generate this event when a device registered
by TV_INPUT_EVENT_DEVICE_AVAILABLE is no longer available. For example,
the event can indicate that a USB tuner is plugged out from the Android
device.

Note that this event is not for indicating cable plugged out of the port;
for that purpose, the implementation should use
STREAM_CONFIGURATION_CHANGED event. This event represents the port itself
being no longer available.


Stream configurations are changed. Client should regard all open streams
at the specific device are closed, and should call
get_stream_configurations() again, opening some of them if necessary.

HAL implementation should generate this event when the available stream
configurations change for any reason. A typical use case of this event
would be to notify the framework that the input signal has changed
resolution, or that the cable is plugged out so that the number of
available streams is 0.

The implementation may use this event to indicate hotplug status of the
port. the framework regards input devices with no available streams as
disconnected, so the implementation can generate this event with no
available streams to indicate that this device is disconnected, and vice
versa.


Hardware is done with capture request with the buffer. Client can assume
ownership of the buffer again.

HAL implementation should generate this event after request_capture() if
it succeeded. The event shall have the buffer with the captured image.


Hardware met a failure while processing a capture request or client
canceled the request. Client can assume ownership of the buffer again.

The event is similar to TV_INPUT_EVENT_CAPTURE_SUCCEEDED, but HAL
implementation generates this event upon a failure to process
request_capture(), or a request cancellation.
"
    end

    class 4410807 "tv_input_capture_result"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15752503 "device_id"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Device ID 
"
      end

      attribute 15752631 "stream_id"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Stream ID 
"
      end

      attribute 15752759 "buffer"
	public explicit_type "buffer_handle_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The buffer passed to hardware in request_capture(). The content of
buffer is undefined (although buffer itself is valid) for
TV_INPUT_CAPTURE_FAILED event.

"
      end

      attribute 15752887 "error_code"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Error code for the request. -ECANCELED if request is cancelled; other
error codes are unknown errors.

"
      end
    end

    class 4410935 "tv_input_capture_result_t"
      visibility package stereotype "typedef" base_type class_ref 4410807 // tv_input_capture_result
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4411063 "tv_input_event"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8401463 // type (<directional composition>)
	relation 8401463 *-->
	  a role_name "type" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8401463 // type (<directional composition>)
	  b parent class_ref 4410679 // tv_input_event_type_t
      end

      classrelation 8401591 // device_info (<directional composition>)
	relation 8401591 *-->
	  a role_name "device_info" public
	    comment "TV_INPUT_EVENT_DEVICE_AVAILABLE: all fields are relevant
TV_INPUT_EVENT_DEVICE_UNAVAILABLE: only device_id is relevant
TV_INPUT_EVENT_STREAM_CONFIGURATIONS_CHANGED: only device_id is
   relevant

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8401591 // device_info (<directional composition>)
	  b parent class_ref 4410423 // tv_input_device_info_t
      end

      classrelation 8401719 // capture_result (<directional composition>)
	relation 8401719 *-->
	  a role_name "capture_result" public
	    comment "TV_INPUT_EVENT_CAPTURE_SUCCEEDED: error_code is not relevant
TV_INPUT_EVENT_CAPTURE_FAILED: all fields are relevant

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8401719 // capture_result (<directional composition>)
	  b parent class_ref 4410935 // tv_input_capture_result_t
      end
    end

    class 4411191 "tv_input_event_t"
      visibility package stereotype "typedef" explicit_base_type ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4411319 "tv_input_callback_ops"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15753015 "notify"
	public explicit_type "/* * event contains the type of the event and additional data if necessary. * The event object is guaranteed to be valid only for the duration of the * call. * * data is an object supplied at device initialization, opaque to the * hardware.     */ void (*)(struct tv_input_device* dev, tv_input_event_t* event, void* data)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * event contains the type of the event and additional data if necessary.
     * The event object is guaranteed to be valid only for the duration of the
     * call.
     *
     * data is an object supplied at device initialization, opaque to the
     * hardware.
     */
    void (*${name})(struct tv_input_device* dev,
            tv_input_event_t* event, void* data)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "event contains the type of the event and additional data if necessary.
The event object is guaranteed to be valid only for the duration of the
call.

data is an object supplied at device initialization, opaque to the
hardware.
    
"
      end
    end

    class 4411447 "tv_input_callback_ops_t"
      visibility package stereotype "typedef" base_type class_ref 4411319 // tv_input_callback_ops
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4411575 "anonymous179"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15753143 "TV_STREAM_TYPE_INDEPENDENT_VIDEO_SOURCE"
	public type class_ref 4411575 // anonymous179
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15753271 "TV_STREAM_TYPE_BUFFER_PRODUCER"
	public type class_ref 4411575 // anonymous179
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4411703 "tv_stream_type_t"
      visibility package stereotype "typedef" explicit_base_type "uint32_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4411831 "tv_stream_config"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15753399 "stream_id"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "ID number of the stream. This value is used to identify the whole stream
configuration.

"
      end

      classrelation 8401975 // type (<directional composition>)
	relation 8401975 *-->
	  a role_name "type" public
	    comment " Type of the stream 
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8401975 // type (<directional composition>)
	  b parent class_ref 4411703 // tv_stream_type_t
      end

    end

    class 4411959 "tv_stream_config_t"
      visibility package stereotype "typedef" base_type class_ref 4411831 // tv_stream_config
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4412087 "buffer_producer_stream"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4412215 "buffer_producer_stream_t"
      visibility package stereotype "typedef" base_type class_ref 4412087 // buffer_producer_stream
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4412343 "tv_stream"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15753527 "stream_id"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IN: ID in the stream configuration 
"
      end

      classrelation 8402871 // type (<directional composition>)
	relation 8402871 *-->
	  a role_name "type" public
	    comment " OUT: Type of the stream (for convenience) 
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8402871 // type (<directional composition>)
	  b parent class_ref 4411703 // tv_stream_type_t
      end

      attribute 15753655 "sideband_stream_source_handle"
	public explicit_type "native_handle_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " OUT: A native handle describing the sideband stream source 
"
      end

      classrelation 8402999 // buffer_producer (<directional composition>)
	relation 8402999 *-->
	  a role_name "buffer_producer" public
	    comment " IN/OUT: Details are in buffer_producer_stream_t 
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8402999 // buffer_producer (<directional composition>)
	  b parent class_ref 4412215 // buffer_producer_stream_t
      end
    end

    class 4412471 "tv_stream_t"
      visibility package stereotype "typedef" explicit_base_type ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4412599 "tv_input_device"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Every device data structure must begin with hw_device_t
followed by module specific public methods and attributes.
"
      classrelation 8403127 // common (<directional composition>)
	relation 8403127 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8403127 // common (<directional composition>)
	  b parent class_ref 4305975 // hw_device_t
      end

      attribute 15753783 "initialize"
	public explicit_type "/* * initialize: * * Provide callbacks to the device and start operation. At first, no device * is available and after initialize() completes, currently available * devices including static devices should notify via callback. * * Framework owns callbacks object. * * data is a framework-owned object which would be sent back to the * framework for each callback notifications. * * Return 0 on success. */ int (*)(struct tv_input_device* dev, const tv_input_callback_ops_t* callback, void* data)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * initialize:
     *
     * Provide callbacks to the device and start operation. At first, no device
     * is available and after initialize() completes, currently available
     * devices including static devices should notify via callback.
     *
     * Framework owns callbacks object.
     *
     * data is a framework-owned object which would be sent back to the
     * framework for each callback notifications.
     *
     * Return 0 on success.
     */
    int (*${name})(struct tv_input_device* dev,
            const tv_input_callback_ops_t* callback, void* data)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "initialize:

Provide callbacks to the device and start operation. At first, no device
is available and after initialize() completes, currently available
devices including static devices should notify via callback.

Framework owns callbacks object.

data is a framework-owned object which would be sent back to the
framework for each callback notifications.

Return 0 on success.

"
      end

      attribute 15753911 "get_stream_configurations"
	public explicit_type "/* * get_stream_configurations: * * Get stream configurations for a specific device. An input device may have * multiple configurations. * * The configs object is guaranteed to be valid only until the next call to * get_stream_configurations() or STREAM_CONFIGURATIONS_CHANGED event. * * Return 0 on success. */ int (*)(const struct tv_input_device* dev, int device_id, int* num_configurations, const tv_stream_config_t** configs)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * get_stream_configurations:
     *
     * Get stream configurations for a specific device. An input device may have
     * multiple configurations.
     *
     * The configs object is guaranteed to be valid only until the next call to
     * get_stream_configurations() or STREAM_CONFIGURATIONS_CHANGED event.
     *
     * Return 0 on success.
     */
    int (*${name})(const struct tv_input_device* dev,
            int device_id, int* num_configurations,
            const tv_stream_config_t** configs)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "get_stream_configurations:

Get stream configurations for a specific device. An input device may have
multiple configurations.

The configs object is guaranteed to be valid only until the next call to
get_stream_configurations() or STREAM_CONFIGURATIONS_CHANGED event.

Return 0 on success.

"
      end

      attribute 15754039 "open_stream"
	public explicit_type "/* * open_stream: * * Open a stream with given stream ID. Caller owns stream object, and the * populated data is only valid until the stream is closed. * * Return 0 on success; -EBUSY if the client should close other streams to * open the stream; -EEXIST if the stream with the given ID is already open; * -EINVAL if device_id and/or stream_id are invalid; other non-zero value * denotes unknown error. */ int (*)(struct tv_input_device* dev, int device_id, tv_stream_t* stream)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * open_stream:
     *
     * Open a stream with given stream ID. Caller owns stream object, and the
     * populated data is only valid until the stream is closed.
     *
     * Return 0 on success; -EBUSY if the client should close other streams to
     * open the stream; -EEXIST if the stream with the given ID is already open;
     * -EINVAL if device_id and/or stream_id are invalid; other non-zero value
     * denotes unknown error.
     */
    int (*${name})(struct tv_input_device* dev, int device_id,
            tv_stream_t* stream)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "open_stream:

Open a stream with given stream ID. Caller owns stream object, and the
populated data is only valid until the stream is closed.

Return 0 on success; -EBUSY if the client should close other streams to
open the stream; -EEXIST if the stream with the given ID is already open;
-EINVAL if device_id and/or stream_id are invalid; other non-zero value
denotes unknown error.

"
      end

      attribute 15754167 "close_stream"
	public explicit_type "/* * close_stream: * * Close a stream to a device. data in tv_stream_t* object associated with * the stream_id is obsolete once this call finishes. * * Return 0 on success; -ENOENT if the stream is not open; -EINVAL if * device_id and/or stream_id are invalid. */ int (*)(struct tv_input_device* dev, int device_id, int stream_id)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * close_stream:
     *
     * Close a stream to a device. data in tv_stream_t* object associated with
     * the stream_id is obsolete once this call finishes.
     *
     * Return 0 on success; -ENOENT if the stream is not open; -EINVAL if
     * device_id and/or stream_id are invalid.
     */
    int (*${name})(struct tv_input_device* dev, int device_id,
            int stream_id)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "close_stream:

Close a stream to a device. data in tv_stream_t* object associated with
the stream_id is obsolete once this call finishes.

Return 0 on success; -ENOENT if the stream is not open; -EINVAL if
device_id and/or stream_id are invalid.

"
      end

      attribute 15754295 "request_capture"
	public explicit_type "/* * request_capture: * * Request buffer capture for a stream. This is only valid for buffer * producer streams. The buffer should be created with size, format and * usage specified in the stream. Framework provides seq in an * increasing sequence per each stream. Hardware should provide the picture * in a chronological order according to seq. For example, if two * requests are being processed at the same time, the request with the * smaller seq should get an earlier frame. * * The framework releases the ownership of the buffer upon calling this * function. When the buffer is filled, hardware notifies the framework * via TV_INPUT_EVENT_CAPTURE_FINISHED callback, and the ownership is * transferred back to framework at that time. * * Return 0 on success; -ENOENT if the stream is not open; -EINVAL if * device_id and/or stream_id are invalid; -EWOULDBLOCK if HAL cannot take * additional requests until it releases a buffer. */ int (*)(struct tv_input_device* dev, int device_id, int stream_id, buffer_handle_t buffer, uint32_t seq)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * request_capture:
     *
     * Request buffer capture for a stream. This is only valid for buffer
     * producer streams. The buffer should be created with size, format and
     * usage specified in the stream. Framework provides seq in an
     * increasing sequence per each stream. Hardware should provide the picture
     * in a chronological order according to seq. For example, if two
     * requests are being processed at the same time, the request with the
     * smaller seq should get an earlier frame.
     *
     * The framework releases the ownership of the buffer upon calling this
     * function. When the buffer is filled, hardware notifies the framework
     * via TV_INPUT_EVENT_CAPTURE_FINISHED callback, and the ownership is
     * transferred back to framework at that time.
     *
     * Return 0 on success; -ENOENT if the stream is not open; -EINVAL if
     * device_id and/or stream_id are invalid; -EWOULDBLOCK if HAL cannot take
     * additional requests until it releases a buffer.
     */
    int (*${name})(struct tv_input_device* dev, int device_id,
            int stream_id, buffer_handle_t buffer, uint32_t seq)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "request_capture:

Request buffer capture for a stream. This is only valid for buffer
producer streams. The buffer should be created with size, format and
usage specified in the stream. Framework provides seq in an
increasing sequence per each stream. Hardware should provide the picture
in a chronological order according to seq. For example, if two
requests are being processed at the same time, the request with the
smaller seq should get an earlier frame.

The framework releases the ownership of the buffer upon calling this
function. When the buffer is filled, hardware notifies the framework
via TV_INPUT_EVENT_CAPTURE_FINISHED callback, and the ownership is
transferred back to framework at that time.

Return 0 on success; -ENOENT if the stream is not open; -EINVAL if
device_id and/or stream_id are invalid; -EWOULDBLOCK if HAL cannot take
additional requests until it releases a buffer.

"
      end

      attribute 15754423 "cancel_capture"
	public explicit_type "/* * cancel_capture: * * Cancel an ongoing capture. Hardware should release the buffer as soon as * possible via TV_INPUT_EVENT_CAPTURE_FAILED callback. * * Return 0 on success; -ENOENT if the stream is not open; -EINVAL if * device_id, stream_id, and/or seq are invalid. */ int (*)(struct tv_input_device* dev, int device_id, int stream_id, uint32_t seq)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /*
     * cancel_capture:
     *
     * Cancel an ongoing capture. Hardware should release the buffer as soon as
     * possible via TV_INPUT_EVENT_CAPTURE_FAILED callback.
     *
     * Return 0 on success; -ENOENT if the stream is not open; -EINVAL if
     * device_id, stream_id, and/or seq are invalid.
     */
    int (*${name})(struct tv_input_device* dev, int device_id,
            int stream_id, uint32_t seq)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "cancel_capture:

Cancel an ongoing capture. Hardware should release the buffer as soon as
possible via TV_INPUT_EVENT_CAPTURE_FAILED callback.

Return 0 on success; -ENOENT if the stream is not open; -EINVAL if
device_id, stream_id, and/or seq are invalid.

"
      end

      attribute 15754551 "reserved"
	public explicit_type "void"
	multiplicity "[16]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4412727 "tv_input_device_t"
      visibility package stereotype "typedef" base_type class_ref 4412599 // tv_input_device
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4412855 "vehicle_radio_consts"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Constants relevant to radio.
"
      attribute 15754679 "VEHICLE_RADIO_PRESET_MIN_VALUE"
	public type class_ref 4412855 // vehicle_radio_consts
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4412983 "vehicle_audio_focus_request"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15754807 "VEHICLE_AUDIO_FOCUS_REQUEST_GAIN"
	public type class_ref 4412983 // vehicle_audio_focus_request
	init_value " 0x1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15754935 "VEHICLE_AUDIO_FOCUS_REQUEST_GAIN_TRANSIENT"
	public type class_ref 4412983 // vehicle_audio_focus_request
	init_value " 0x2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15755063 "VEHICLE_AUDIO_FOCUS_REQUEST_GAIN_TRANSIENT_MAY_DUCK"
	public type class_ref 4412983 // vehicle_audio_focus_request
	init_value " 0x3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15755191 "VEHICLE_AUDIO_FOCUS_REQUEST_GAIN_TRANSIENT_NO_DUCK"
	public type class_ref 4412983 // vehicle_audio_focus_request
	init_value " 0x4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15755319 "VEHICLE_AUDIO_FOCUS_REQUEST_RELEASE"
	public type class_ref 4412983 // vehicle_audio_focus_request
	init_value " 0x5"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4413111 "vehicle_audio_focus_state"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This is for the case where android side plays sound like UI feedback
and car side does not need to duck existing playback as long as
requested stream is available.
"
      attribute 15755447 "VEHICLE_AUDIO_FOCUS_STATE_GAIN"
	public type class_ref 4413111 // vehicle_audio_focus_state
	init_value " 0x1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15755575 "VEHICLE_AUDIO_FOCUS_STATE_GAIN_TRANSIENT"
	public type class_ref 4413111 // vehicle_audio_focus_state
	init_value " 0x2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15755703 "VEHICLE_AUDIO_FOCUS_STATE_LOSS_TRANSIENT_CAN_DUCK"
	public type class_ref 4413111 // vehicle_audio_focus_state
	init_value " 0x3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15755831 "VEHICLE_AUDIO_FOCUS_STATE_LOSS_TRANSIENT"
	public type class_ref 4413111 // vehicle_audio_focus_state
	init_value " 0x4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15755959 "VEHICLE_AUDIO_FOCUS_STATE_LOSS"
	public type class_ref 4413111 // vehicle_audio_focus_state
	init_value " 0x5"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15756087 "VEHICLE_AUDIO_FOCUS_STATE_LOSS_TRANSIENT_EXLCUSIVE"
	public type class_ref 4413111 // vehicle_audio_focus_state
	init_value " 0x6"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4413239 "vehicle_audio_stream_flag"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Android side has permanent focus and can play allowed streams.


Android side has transient focus and can play allowed streams.


Car audio module is playing guidance kind of sound outside Android. Android side can
still play through allowed streams with ducking.


Car audio module is playing transient sound outside Android. Android side should stop
playing any sounds.


Android side has lost focus and cannot play any sound.


car audio module is playing safety critical sound, and Android side cannot request focus
until the current state is finished. car audio module should restore it to the previous
state when it can allow Android to play.


Flags to represent multiple streams by combining these.
"
      attribute 15756215 "VEHICLE_AUDIO_STREAM_STREAM0_FLAG"
	public type class_ref 4413239 // vehicle_audio_stream_flag
	init_value " (0x1<<0)"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15756343 "VEHICLE_AUDIO_STREAM_STREAM1_FLAG"
	public type class_ref 4413239 // vehicle_audio_stream_flag
	init_value " (0x1<<1)"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15756471 "VEHICLE_AUDIO_STREAM_STREAM2_FLAG"
	public type class_ref 4413239 // vehicle_audio_stream_flag
	init_value " (0x1<<2)"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4413367 "vehicle_audio_stream"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents stream number (always 0 to N -1 where N is max number of streams).
Can be used for audio related property expecting one stream.
"
      attribute 15756599 "VEHICLE_AUDIO_STREAM0"
	public type class_ref 4413367 // vehicle_audio_stream
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15756727 "VEHICLE_AUDIO_STREAM1"
	public type class_ref 4413367 // vehicle_audio_stream
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4413495 "vehicle_audio_ext_focus_flag"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Flag to represent external focus state (outside Android).
"
      attribute 15756855 "VEHICLE_AUDIO_EXT_FOCUS_NONE_FLAG"
	public type class_ref 4413495 // vehicle_audio_ext_focus_flag
	init_value " 0x0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15756983 "VEHICLE_AUDIO_EXT_FOCUS_CAR_PERMANENT_FLAG"
	public type class_ref 4413495 // vehicle_audio_ext_focus_flag
	init_value " 0x1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15757111 "VEHICLE_AUDIO_EXT_FOCUS_CAR_TRANSIENT_FLAG"
	public type class_ref 4413495 // vehicle_audio_ext_focus_flag
	init_value " 0x2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15757239 "VEHICLE_AUDIO_EXT_FOCUS_CAR_PLAY_ONLY_FLAG"
	public type class_ref 4413495 // vehicle_audio_ext_focus_flag
	init_value " 0x4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15757367 "VEHICLE_AUDIO_EXT_FOCUS_CAR_MUTE_MEDIA_FLAG"
	public type class_ref 4413495 // vehicle_audio_ext_focus_flag
	init_value " 0x8"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4413623 "vehicle_audio_focus_index"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "No external focus holder.


Car side (outside Android) has component holding GAIN kind of focus state.


Car side (outside Android) has component holding GAIN_TRANSIENT kind of focus state.


Car side is expected to play something while focus is held by Android side. One example
can be radio attached in car side. But Android's radio app still should have focus,
and Android side should be in GAIN state, but media stream will not be allocated to Android
side and car side can play radio any time while this flag is active.


Car side should mute any media including radio. This can be used with any focus request
including GAIN* and RELEASE.


Index in int32_array for VEHICLE_PROPERTY_AUDIO_FOCUS property.
"
      attribute 15757495 "VEHICLE_AUDIO_FOCUS_INDEX_FOCUS"
	public type class_ref 4413623 // vehicle_audio_focus_index
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15757623 "VEHICLE_AUDIO_FOCUS_INDEX_STREAMS"
	public type class_ref 4413623 // vehicle_audio_focus_index
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15757751 "VEHICLE_AUDIO_FOCUS_INDEX_EXTERNAL_FOCUS_STATE"
	public type class_ref 4413623 // vehicle_audio_focus_index
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15757879 "VEHICLE_AUDIO_FOCUS_INDEX_AUDIO_CONTEXTS"
	public type class_ref 4413623 // vehicle_audio_focus_index
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4413751 "vehicle_audio_context_flag"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Flags to tell the current audio context.
"
      attribute 15758007 "VEHICLE_AUDIO_CONTEXT_MUSIC_FLAG"
	public type class_ref 4413751 // vehicle_audio_context_flag
	init_value " 0x1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15758135 "VEHICLE_AUDIO_CONTEXT_NAVIGATION_FLAG"
	public type class_ref 4413751 // vehicle_audio_context_flag
	init_value " 0x2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15758263 "VEHICLE_AUDIO_CONTEXT_VOICE_COMMAND_FLAG"
	public type class_ref 4413751 // vehicle_audio_context_flag
	init_value " 0x4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15758391 "VEHICLE_AUDIO_CONTEXT_CALL_FLAG"
	public type class_ref 4413751 // vehicle_audio_context_flag
	init_value " 0x8"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15758519 "VEHICLE_AUDIO_CONTEXT_ALARM_FLAG"
	public type class_ref 4413751 // vehicle_audio_context_flag
	init_value " 0x10"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15758647 "VEHICLE_AUDIO_CONTEXT_NOTIFICATION_FLAG"
	public type class_ref 4413751 // vehicle_audio_context_flag
	init_value " 0x20"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15758775 "VEHICLE_AUDIO_CONTEXT_UNKNOWN_FLAG"
	public type class_ref 4413751 // vehicle_audio_context_flag
	init_value " 0x40"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15758903 "VEHICLE_AUDIO_CONTEXT_SAFETY_ALERT_FLAG"
	public type class_ref 4413751 // vehicle_audio_context_flag
	init_value " 0x80"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15759031 "VEHICLE_AUDIO_CONTEXT_CD_ROM_FLAG"
	public type class_ref 4413751 // vehicle_audio_context_flag
	init_value " 0x100"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15759159 "VEHICLE_AUDIO_CONTEXT_AUX_AUDIO_FLAG"
	public type class_ref 4413751 // vehicle_audio_context_flag
	init_value " 0x200"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15759287 "VEHICLE_AUDIO_CONTEXT_SYSTEM_SOUND_FLAG"
	public type class_ref 4413751 // vehicle_audio_context_flag
	init_value " 0x400"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15759415 "VEHICLE_AUDIO_CONTEXT_RADIO_FLAG"
	public type class_ref 4413751 // vehicle_audio_context_flag
	init_value " 0x800"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4413879 "vehicle_audio_volume_state"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "enum to represent audio volume state.
"
      attribute 15759543 "VEHICLE_AUDIO_VOLUME_STATE_OK"
	public type class_ref 4413879 // vehicle_audio_volume_state
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15759671 "VEHICLE_AUDIO_VOLUME_STATE_LIMIT_REACHED"
	public type class_ref 4413879 // vehicle_audio_volume_state
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4414007 "vehicle_audio_volume_index"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Audio volume has reached volume limit set in VEHICLE_PROPERTY_AUDIO_VOLUME_LIMIT
and user's request to increase volume further is not allowed.


Index in int32_array for VEHICLE_PROPERTY_AUDIO_VOLUME property.
"
      attribute 15759799 "VEHICLE_AUDIO_VOLUME_INDEX_STREAM"
	public type class_ref 4414007 // vehicle_audio_volume_index
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15759927 "VEHICLE_AUDIO_VOLUME_INDEX_VOLUME"
	public type class_ref 4414007 // vehicle_audio_volume_index
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15760055 "VEHICLE_AUDIO_VOLUME_INDEX_STATE"
	public type class_ref 4414007 // vehicle_audio_volume_index
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4414135 "vehicle_audio_volume_limit_index"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Index in int32_array for VEHICLE_PROPERTY_AUDIO_VOLUME_LIMIT property.
"
      attribute 15760183 "VEHICLE_AUDIO_VOLUME_LIMIT_INDEX_STREAM"
	public type class_ref 4414135 // vehicle_audio_volume_limit_index
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15760311 "VEHICLE_AUDIO_VOLUME_LIMIT_INDEX_MAX_VOLUME"
	public type class_ref 4414135 // vehicle_audio_volume_limit_index
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4414263 "vehicle_audio_routing_policy_index"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Index in int32_array for VEHICLE_PROPERTY_AUDIO_ROUTING_POLICY property.
"
      attribute 15760439 "VEHICLE_AUDIO_ROUTING_POLICY_INDEX_STREAM"
	public type class_ref 4414263 // vehicle_audio_routing_policy_index
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15760567 "VEHICLE_AUDIO_ROUTING_POLICY_INDEX_CONTEXTS"
	public type class_ref 4414263 // vehicle_audio_routing_policy_index
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4414391 "vehicle_audio_hw_variant_config_flag"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Flag to be used in vehicle_prop_config.config_flags for VEHICLE_PROPERTY_AUDIO_HW_VARIANT.
"
      attribute 15760695 "VEHICLE_AUDIO_HW_VARIANT_FLAG_INTERNAL_RADIO_FLAG"
	public type class_ref 4414391 // vehicle_audio_hw_variant_config_flag
	init_value " 0x1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4414519 "vehicle_ap_power_state_config_flag"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15760823 "VEHICLE_AP_POWER_STATE_CONFIG_ENABLE_DEEP_SLEEP_FLAG"
	public type class_ref 4414519 // vehicle_ap_power_state_config_flag
	init_value " 0x1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15760951 "VEHICLE_AP_POWER_STATE_CONFIG_SUPPORT_TIMER_POWER_ON_FLAG"
	public type class_ref 4414519 // vehicle_ap_power_state_config_flag
	init_value " 0x2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4414647 "vehicle_ap_power_state"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "AP can enter deep sleep state. If not set, AP will always shutdown from
VEHICLE_AP_POWER_STATE_SHUTDOWN_PREPARE power state.


The power controller can power on AP from off state after timeout specified in
VEHICLE_AP_POWER_SET_SHUTDOWN_READY message.
"
      attribute 15761079 "VEHICLE_AP_POWER_STATE_OFF"
	public type class_ref 4414647 // vehicle_ap_power_state
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15761207 "VEHICLE_AP_POWER_STATE_DEEP_SLEEP"
	public type class_ref 4414647 // vehicle_ap_power_state
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15761335 "VEHICLE_AP_POWER_STATE_ON_DISP_OFF"
	public type class_ref 4414647 // vehicle_ap_power_state
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15761463 "VEHICLE_AP_POWER_STATE_ON_FULL"
	public type class_ref 4414647 // vehicle_ap_power_state
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15761591 "VEHICLE_AP_POWER_STATE_SHUTDOWN_PREPARE"
	public type class_ref 4414647 // vehicle_ap_power_state
	init_value " 4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4414775 "vehicle_ap_power_state_shutdown_param"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " vehicle HAL will never publish this state to AP 
 vehicle HAL will never publish this state to AP 
 AP is on but display should be off. 
 AP is on with display on. This state allows full user interaction. 

The power controller has requested AP to shutdown. AP can either enter sleep state or start
full shutdown. AP can also request postponing shutdown by sending
VEHICLE_AP_POWER_SET_SHUTDOWN_POSTPONE message. The power controller should change power
state to this state to shutdown system.

int32_array[1] : one of enum_vehicle_ap_power_state_shutdown_param_type
"
      attribute 15761719 "VEHICLE_AP_POWER_SHUTDOWN_PARAM_SHUTDOWN_IMMEDIATELY"
	public type class_ref 4414775 // vehicle_ap_power_state_shutdown_param
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15761847 "VEHICLE_AP_POWER_SHUTDOWN_PARAM_CAN_SLEEP"
	public type class_ref 4414775 // vehicle_ap_power_state_shutdown_param
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15761975 "VEHICLE_AP_POWER_SHUTDOWN_PARAM_SHUTDOWN_ONLY"
	public type class_ref 4414775 // vehicle_ap_power_state_shutdown_param
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4414903 "vehicle_ap_power_set_state"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " AP should shutdown immediately. Postponing is not allowed. 
 AP can enter deep sleep instead of shutting down completely. 
 AP can only shutdown with postponing allowed. "
      attribute 15762103 "VEHICLE_AP_POWER_SET_BOOT_COMPLETE"
	public type class_ref 4414903 // vehicle_ap_power_set_state
	init_value " 0x1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15762231 "VEHICLE_AP_POWER_SET_DEEP_SLEEP_ENTRY"
	public type class_ref 4414903 // vehicle_ap_power_set_state
	init_value " 0x2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15762359 "VEHICLE_AP_POWER_SET_DEEP_SLEEP_EXIT"
	public type class_ref 4414903 // vehicle_ap_power_set_state
	init_value " 0x3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15762487 "VEHICLE_AP_POWER_SET_SHUTDOWN_POSTPONE"
	public type class_ref 4414903 // vehicle_ap_power_set_state
	init_value " 0x4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15762615 "VEHICLE_AP_POWER_SET_SHUTDOWN_START"
	public type class_ref 4414903 // vehicle_ap_power_set_state
	init_value " 0x5"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15762743 "VEHICLE_AP_POWER_SET_DISPLAY_OFF"
	public type class_ref 4414903 // vehicle_ap_power_set_state
	init_value " 0x6"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15762871 "VEHICLE_AP_POWER_SET_DISPLAY_ON"
	public type class_ref 4414903 // vehicle_ap_power_set_state
	init_value " 0x7"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4415031 "vehicle_ap_power_state_index"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Index in int32_array for VEHICLE_PROPERTY_AP_POWER_STATE property.
"
      attribute 15762999 "VEHICLE_AP_POWER_STATE_INDEX_STATE"
	public type class_ref 4415031 // vehicle_ap_power_state_index
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15763127 "VEHICLE_AP_POWER_STATE_INDEX_ADDITIONAL"
	public type class_ref 4415031 // vehicle_ap_power_state_index
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4415159 "vehicle_ap_power_bootup_reason"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Enum to represent bootup reason.
"
      attribute 15763255 "VEHICLE_AP_POWER_BOOTUP_REASON_USER_POWER_ON"
	public type class_ref 4415159 // vehicle_ap_power_bootup_reason
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15763383 "VEHICLE_AP_POWER_BOOTUP_REASON_USER_UNLOCK"
	public type class_ref 4415159 // vehicle_ap_power_bootup_reason
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15763511 "VEHICLE_AP_POWER_BOOTUP_REASON_TIMER"
	public type class_ref 4415159 // vehicle_ap_power_bootup_reason
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4415287 "vehicle_hw_key_input_action"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15763639 "VEHICLE_HW_KEY_INPUT_ACTION_DOWN"
	public type class_ref 4415287 // vehicle_hw_key_input_action
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15763767 "VEHICLE_HW_KEY_INPUT_ACTION_UP"
	public type class_ref 4415287 // vehicle_hw_key_input_action
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4415415 "vehicle_display"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Key down 
 Key up "
      attribute 15763895 "VEHICLE_DISPLAY_MAIN"
	public type class_ref 4415415 // vehicle_display
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15764023 "VEHICLE_DISPLAY_INSTRUMENT_CLUSTER"
	public type class_ref 4415415 // vehicle_display
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4415543 "vehicle_instument_cluster_type"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents instrument cluster type available in system
"
      attribute 15764151 "VEHICLE_INSTRUMENT_CLUSTER_TYPE_NONE"
	public type class_ref 4415543 // vehicle_instument_cluster_type
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15764279 "VEHICLE_INSTRUMENT_CLUSTER_TYPE_HAL_INTERFACE"
	public type class_ref 4415543 // vehicle_instument_cluster_type
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15764407 "VEHICLE_INSTRUMENT_CLUSTER_TYPE_EXTERNAL_DISPLAY"
	public type class_ref 4415543 // vehicle_instument_cluster_type
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4415671 "vehicle_value_type"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Value types for various properties.
"
      attribute 15764535 "VEHICLE_VALUE_TYPE_SHOUD_NOT_USE"
	public type class_ref 4415671 // vehicle_value_type
	init_value " 0x00"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15764663 "VEHICLE_VALUE_TYPE_STRING"
	public type class_ref 4415671 // vehicle_value_type
	init_value " 0x01"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15764791 "VEHICLE_VALUE_TYPE_BYTES"
	public type class_ref 4415671 // vehicle_value_type
	init_value " 0x02"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15764919 "VEHICLE_VALUE_TYPE_BOOLEAN"
	public type class_ref 4415671 // vehicle_value_type
	init_value " 0x03"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15765047 "VEHICLE_VALUE_TYPE_ZONED_BOOLEAN"
	public type class_ref 4415671 // vehicle_value_type
	init_value " 0x04"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15765175 "VEHICLE_VALUE_TYPE_INT64"
	public type class_ref 4415671 // vehicle_value_type
	init_value " 0x05"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15765303 "VEHICLE_VALUE_TYPE_FLOAT"
	public type class_ref 4415671 // vehicle_value_type
	init_value " 0x10"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15765431 "VEHICLE_VALUE_TYPE_FLOAT_VEC2"
	public type class_ref 4415671 // vehicle_value_type
	init_value " 0x11"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15765559 "VEHICLE_VALUE_TYPE_FLOAT_VEC3"
	public type class_ref 4415671 // vehicle_value_type
	init_value " 0x12"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15765687 "VEHICLE_VALUE_TYPE_FLOAT_VEC4"
	public type class_ref 4415671 // vehicle_value_type
	init_value " 0x13"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15765815 "VEHICLE_VALUE_TYPE_INT32"
	public type class_ref 4415671 // vehicle_value_type
	init_value " 0x20"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15765943 "VEHICLE_VALUE_TYPE_INT32_VEC2"
	public type class_ref 4415671 // vehicle_value_type
	init_value " 0x21"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15766071 "VEHICLE_VALUE_TYPE_INT32_VEC3"
	public type class_ref 4415671 // vehicle_value_type
	init_value " 0x22"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15766199 "VEHICLE_VALUE_TYPE_INT32_VEC4"
	public type class_ref 4415671 // vehicle_value_type
	init_value " 0x23"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15766327 "VEHICLE_VALUE_TYPE_ZONED_FLOAT"
	public type class_ref 4415671 // vehicle_value_type
	init_value " 0x30"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15766455 "VEHICLE_VALUE_TYPE_ZONED_FLOAT_VEC2"
	public type class_ref 4415671 // vehicle_value_type
	init_value " 0x31"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15766583 "VEHICLE_VALUE_TYPE_ZONED_FLOAT_VEC3"
	public type class_ref 4415671 // vehicle_value_type
	init_value " 0x32"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15766711 "VEHICLE_VALUE_TYPE_ZONED_FLOAT_VEC4"
	public type class_ref 4415671 // vehicle_value_type
	init_value " 0x33"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15766839 "VEHICLE_VALUE_TYPE_ZONED_INT32"
	public type class_ref 4415671 // vehicle_value_type
	init_value " 0x40"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15766967 "VEHICLE_VALUE_TYPE_ZONED_INT32_VEC2"
	public type class_ref 4415671 // vehicle_value_type
	init_value " 0x41"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15767095 "VEHICLE_VALUE_TYPE_ZONED_INT32_VEC3"
	public type class_ref 4415671 // vehicle_value_type
	init_value " 0x42"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15767223 "VEHICLE_VALUE_TYPE_ZONED_INT32_VEC4"
	public type class_ref 4415671 // vehicle_value_type
	init_value " 0x43"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4415799 "vehicle_unit_type"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " value_type should never set to 0.

Units used for int or float type with no attached enum types.
"
      attribute 15767351 "VEHICLE_UNIT_TYPE_SHOULD_NOT_USE"
	public type class_ref 4415799 // vehicle_unit_type
	init_value " 0x00000000"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15767479 "VEHICLE_UNIT_TYPE_METER_PER_SEC"
	public type class_ref 4415799 // vehicle_unit_type
	init_value " 0x00000001"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15767607 "VEHICLE_UNIT_TYPE_RPM"
	public type class_ref 4415799 // vehicle_unit_type
	init_value " 0x00000002"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15767735 "VEHICLE_UNIT_TYPE_HZ"
	public type class_ref 4415799 // vehicle_unit_type
	init_value " 0x00000003"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15767863 "VEHICLE_UNIT_TYPE_PERCENTILE"
	public type class_ref 4415799 // vehicle_unit_type
	init_value " 0x00000010"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15767991 "VEHICLE_UNIT_TYPE_MILLIMETER"
	public type class_ref 4415799 // vehicle_unit_type
	init_value " 0x00000020"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15768119 "VEHICLE_UNIT_TYPE_METER"
	public type class_ref 4415799 // vehicle_unit_type
	init_value " 0x00000021"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15768247 "VEHICLE_UNIT_TYPE_KILOMETER"
	public type class_ref 4415799 // vehicle_unit_type
	init_value " 0x00000023"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15768375 "VEHICLE_UNIT_TYPE_CELCIUS"
	public type class_ref 4415799 // vehicle_unit_type
	init_value " 0x00000030"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15768503 "VEHICLE_UNIT_TYPE_MILLILITER"
	public type class_ref 4415799 // vehicle_unit_type
	init_value " 0x00000040"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15768631 "VEHICLE_UNIT_TYPE_NANO_SECS"
	public type class_ref 4415799 // vehicle_unit_type
	init_value " 0x00000050"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15768759 "VEHICLE_UNOT_TYPE_SECS"
	public type class_ref 4415799 // vehicle_unit_type
	init_value " 0x00000053"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15768887 "VEHICLE_UNIT_TYPE_YEAR"
	public type class_ref 4415799 // vehicle_unit_type
	init_value " 0x00000059"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4415927 "vehicle_prop_change_mode"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " speed related items
 kind of ratio
 length
 temperature
 volume
 time

This describes how value of property can change.
"
      attribute 15769015 "VEHICLE_PROP_CHANGE_MODE_STATIC"
	public type class_ref 4415927 // vehicle_prop_change_mode
	init_value " 0x00"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15769143 "VEHICLE_PROP_CHANGE_MODE_ON_CHANGE"
	public type class_ref 4415927 // vehicle_prop_change_mode
	init_value " 0x01"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15769271 "VEHICLE_PROP_CHANGE_MODE_CONTINUOUS"
	public type class_ref 4415927 // vehicle_prop_change_mode
	init_value " 0x02"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4416055 "vehicle_prop_access"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Property of this type will *never* change. This property will not support subscription, but
will support get


Property of this type will be reported when there is a change. get should return the
current value.


Property of this type change continuously and requires fixed rate of sampling to retrieve
the data.


Property config defines the capabilities of it. User of the API
should first get the property config to understand the output from get()
commands and also to ensure that set() or events commands are in sync with
the expected output.
"
      attribute 15769399 "VEHICLE_PROP_ACCESS_READ"
	public type class_ref 4416055 // vehicle_prop_access
	init_value " 0x01"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15769527 "VEHICLE_PROP_ACCESS_WRITE"
	public type class_ref 4416055 // vehicle_prop_access
	init_value " 0x02"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15769655 "VEHICLE_PROP_ACCESS_READ_WRITE"
	public type class_ref 4416055 // vehicle_prop_access
	init_value " 0x03
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4416183 "vehicle_permission_model"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "These permissions define how the OEMs want to distribute their information and security they
want to apply. On top of these restrictions, android will have additional
'app-level' permissions that the apps will need to ask the user before the apps have the
information.
This information should be kept in vehicle_prop_config.permission_model.
"
      attribute 15769783 "VEHICLE_PERMISSION_NO_RESTRICTION"
	public type class_ref 4416183 // vehicle_permission_model
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15769911 "VEHICLE_PERMISSION_OEM_ONLY"
	public type class_ref 4416183 // vehicle_permission_model
	init_value " 0x1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15770039 "VEHICLE_PERMISSION_SYSTEM_APP_ONLY"
	public type class_ref 4416183 // vehicle_permission_model
	init_value " 0x2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15770167 "VEHICLE_PERMISSION_OEM_OR_SYSTEM_APP"
	public type class_ref 4416183 // vehicle_permission_model
	init_value " 0x3
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4416311 "vehicle_driving_status"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Car states.

The driving states determine what features of the UI will be accessible.
"
      attribute 15770295 "VEHICLE_DRIVING_STATUS_UNRESTRICTED"
	public type class_ref 4416311 // vehicle_driving_status
	init_value " 0x00"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15770423 "VEHICLE_DRIVING_STATUS_NO_VIDEO"
	public type class_ref 4416311 // vehicle_driving_status
	init_value " 0x01"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15770551 "VEHICLE_DRIVING_STATUS_NO_KEYBOARD_INPUT"
	public type class_ref 4416311 // vehicle_driving_status
	init_value " 0x02"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15770679 "VEHICLE_DRIVING_STATUS_NO_VOICE_INPUT"
	public type class_ref 4416311 // vehicle_driving_status
	init_value " 0x04"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15770807 "VEHICLE_DRIVING_STATUS_NO_CONFIG"
	public type class_ref 4416311 // vehicle_driving_status
	init_value " 0x08"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15770935 "VEHICLE_DRIVING_STATUS_LIMIT_MESSAGE_LEN"
	public type class_ref 4416311 // vehicle_driving_status
	init_value " 0x10
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4416439 "vehicle_gear"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Various gears which can be selected by user and chosen in system.
"
      attribute 15771063 "VEHICLE_GEAR_NEUTRAL"
	public type class_ref 4416439 // vehicle_gear
	init_value " 0x0001"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15771191 "VEHICLE_GEAR_REVERSE"
	public type class_ref 4416439 // vehicle_gear
	init_value " 0x0002"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15771319 "VEHICLE_GEAR_PARK"
	public type class_ref 4416439 // vehicle_gear
	init_value " 0x0004"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15771447 "VEHICLE_GEAR_DRIVE"
	public type class_ref 4416439 // vehicle_gear
	init_value " 0x0008"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15771575 "VEHICLE_GEAR_LOW"
	public type class_ref 4416439 // vehicle_gear
	init_value " 0x0010"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15771703 "VEHICLE_GEAR_1"
	public type class_ref 4416439 // vehicle_gear
	init_value " 0x0010"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15771831 "VEHICLE_GEAR_2"
	public type class_ref 4416439 // vehicle_gear
	init_value " 0x0020"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15771959 "VEHICLE_GEAR_3"
	public type class_ref 4416439 // vehicle_gear
	init_value " 0x0040"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15772087 "VEHICLE_GEAR_4"
	public type class_ref 4416439 // vehicle_gear
	init_value " 0x0080"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15772215 "VEHICLE_GEAR_5"
	public type class_ref 4416439 // vehicle_gear
	init_value " 0x0100"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15772343 "VEHICLE_GEAR_6"
	public type class_ref 4416439 // vehicle_gear
	init_value " 0x0200"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15772471 "VEHICLE_GEAR_7"
	public type class_ref 4416439 // vehicle_gear
	init_value " 0x0400"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15772599 "VEHICLE_GEAR_8"
	public type class_ref 4416439 // vehicle_gear
	init_value " 0x0800"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15772727 "VEHICLE_GEAR_9"
	public type class_ref 4416439 // vehicle_gear
	init_value " 0x1000
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4416567 "vehicle_zone"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Gear selections present in both automatic and manual cars.
 Gear selections (mostly) present only in automatic cars.
 Other possible gear selections (maybe present in manual or automatic
 cars).

Various zones in the car.

Zones are used for Air Conditioning purposes and divide the car into physical
area zones.
"
      attribute 15772855 "VEHICLE_ZONE_ROW_1_LEFT"
	public type class_ref 4416567 // vehicle_zone
	init_value " 0x00000001"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15772983 "VEHICLE_ZONE_ROW_1_CENTER"
	public type class_ref 4416567 // vehicle_zone
	init_value " 0x00000002"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15773111 "VEHICLE_ZONE_ROW_1_RIGHT"
	public type class_ref 4416567 // vehicle_zone
	init_value " 0x00000004"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15773239 "VEHICLE_ZONE_ROW_1_ALL"
	public type class_ref 4416567 // vehicle_zone
	init_value " 0x00000008"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15773367 "VEHICLE_ZONE_ROW_2_LEFT"
	public type class_ref 4416567 // vehicle_zone
	init_value " 0x00000010"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15773495 "VEHICLE_ZONE_ROW_2_CENTER"
	public type class_ref 4416567 // vehicle_zone
	init_value " 0x00000020"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15773623 "VEHICLE_ZONE_ROW_2_RIGHT"
	public type class_ref 4416567 // vehicle_zone
	init_value " 0x00000040"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15773751 "VEHICLE_ZONE_ROW_2_ALL"
	public type class_ref 4416567 // vehicle_zone
	init_value " 0x00000080"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15773879 "VEHICLE_ZONE_ROW_3_LEFT"
	public type class_ref 4416567 // vehicle_zone
	init_value " 0x00000100"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15774007 "VEHICLE_ZONE_ROW_3_CENTER"
	public type class_ref 4416567 // vehicle_zone
	init_value " 0x00000200"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15774135 "VEHICLE_ZONE_ROW_3_RIGHT"
	public type class_ref 4416567 // vehicle_zone
	init_value " 0x00000400"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15774263 "VEHICLE_ZONE_ROW_3_ALL"
	public type class_ref 4416567 // vehicle_zone
	init_value " 0x00000800"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15774391 "VEHICLE_ZONE_ROW_4_LEFT"
	public type class_ref 4416567 // vehicle_zone
	init_value " 0x00001000"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15774519 "VEHICLE_ZONE_ROW_4_CENTER"
	public type class_ref 4416567 // vehicle_zone
	init_value " 0x00002000"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15774647 "VEHICLE_ZONE_ROW_4_RIGHT"
	public type class_ref 4416567 // vehicle_zone
	init_value " 0x00004000"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15774775 "VEHICLE_ZONE_ROW_4_ALL"
	public type class_ref 4416567 // vehicle_zone
	init_value " 0x00008000"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15774903 "VEHICLE_ZONE_ALL"
	public type class_ref 4416567 // vehicle_zone
	init_value " 0x80000000"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4416695 "vehicle_seat"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Various Seats in the car.
"
      attribute 15775031 "VEHICLE_SEAT_DRIVER_LHD"
	public type class_ref 4416695 // vehicle_seat
	init_value " 0x0001"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15775159 "VEHICLE_SEAT_DRIVER_RHD"
	public type class_ref 4416695 // vehicle_seat
	init_value " 0x0002"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15775287 "VEHICLE_SEAT_ROW_1_PASSENGER_LEFT"
	public type class_ref 4416695 // vehicle_seat
	init_value " 0x0010"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15775415 "VEHICLE_SEAT_ROW_1_PASSENGER_CENTER"
	public type class_ref 4416695 // vehicle_seat
	init_value " 0x0020"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15775543 "VEHICLE_SEAT_ROW_1_PASSENGER_RIGHT"
	public type class_ref 4416695 // vehicle_seat
	init_value " 0x0040"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15775671 "VEHICLE_SEAT_ROW_2_PASSENGER_LEFT"
	public type class_ref 4416695 // vehicle_seat
	init_value " 0x0100"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15775799 "VEHICLE_SEAT_ROW_2_PASSENGER_CENTER"
	public type class_ref 4416695 // vehicle_seat
	init_value " 0x0200"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15775927 "VEHICLE_SEAT_ROW_2_PASSENGER_RIGHT"
	public type class_ref 4416695 // vehicle_seat
	init_value " 0x0400"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15776055 "VEHICLE_SEAT_ROW_3_PASSENGER_LEFT"
	public type class_ref 4416695 // vehicle_seat
	init_value " 0x1000"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15776183 "VEHICLE_SEAT_ROW_3_PASSENGER_CENTER"
	public type class_ref 4416695 // vehicle_seat
	init_value " 0x2000"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15776311 "VEHICLE_SEAT_ROW_3_PASSENGER_RIGHT"
	public type class_ref 4416695 // vehicle_seat
	init_value " 0x4000
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4416823 "vehicle_window"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Various windshields/windows in the car.
"
      attribute 15776439 "VEHICLE_WINDOW_FRONT_WINDSHIELD"
	public type class_ref 4416823 // vehicle_window
	init_value " 0x0001"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15776567 "VEHICLE_WINDOW_REAR_WINDSHIELD"
	public type class_ref 4416823 // vehicle_window
	init_value " 0x0002"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15776695 "VEHICLE_WINDOW_ROOF_TOP"
	public type class_ref 4416823 // vehicle_window
	init_value " 0x0004"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15776823 "VEHICLE_WINDOW_ROW_1_LEFT"
	public type class_ref 4416823 // vehicle_window
	init_value " 0x0010"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15776951 "VEHICLE_WINDOW_ROW_1_RIGHT"
	public type class_ref 4416823 // vehicle_window
	init_value " 0x0020"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15777079 "VEHICLE_WINDOW_ROW_2_LEFT"
	public type class_ref 4416823 // vehicle_window
	init_value " 0x0100"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15777207 "VEHICLE_WINDOW_ROW_2_RIGHT"
	public type class_ref 4416823 // vehicle_window
	init_value " 0x0200"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15777335 "VEHICLE_WINDOW_ROW_3_LEFT"
	public type class_ref 4416823 // vehicle_window
	init_value " 0x1000"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15777463 "VEHICLE_WINDOW_ROW_3_RIGHT"
	public type class_ref 4416823 // vehicle_window
	init_value " 0x2000"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4416951 "vehicle_door"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15777591 "VEHICLE_DOOR_ROW_1_LEFT"
	public type class_ref 4416951 // vehicle_door
	init_value " 0x00000001"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15777719 "VEHICLE_DOOR_ROW_1_RIGHT"
	public type class_ref 4416951 // vehicle_door
	init_value " 0x00000004"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15777847 "VEHICLE_DOOR_ROW_2_LEFT"
	public type class_ref 4416951 // vehicle_door
	init_value " 0x00000010"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15777975 "VEHICLE_DOOR_ROW_2_RIGHT"
	public type class_ref 4416951 // vehicle_door
	init_value " 0x00000040"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15778103 "VEHICLE_DOOR_ROW_3_LEFT"
	public type class_ref 4416951 // vehicle_door
	init_value " 0x00000100"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15778231 "VEHICLE_DOOR_ROW_3_RIGHT"
	public type class_ref 4416951 // vehicle_door
	init_value " 0x00000400"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15778359 "VEHICLE_DOOR_HOOD"
	public type class_ref 4416951 // vehicle_door
	init_value " 0x10000000"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15778487 "VEHICLE_DOOR_REAR"
	public type class_ref 4416951 // vehicle_door
	init_value " 0x20000000"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4417079 "vehicle_mirror"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15778615 "VEHICLE_MIRROR_DRIVER_LEFT"
	public type class_ref 4417079 // vehicle_mirror
	init_value " 0x00000001"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15778743 "VEHICLE_MIRROR_DRIVER_RIGHT"
	public type class_ref 4417079 // vehicle_mirror
	init_value " 0x00000002"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15778871 "VEHICLE_MIRROR_DRIVER_CENTER"
	public type class_ref 4417079 // vehicle_mirror
	init_value " 0x00000004"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4417207 "vehicle_turn_signal"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 15778999 "VEHICLE_SIGNAL_NONE"
	public type class_ref 4417207 // vehicle_turn_signal
	init_value " 0x00"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15779127 "VEHICLE_SIGNAL_RIGHT"
	public type class_ref 4417207 // vehicle_turn_signal
	init_value " 0x01"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15779255 "VEHICLE_SIGNAL_LEFT"
	public type class_ref 4417207 // vehicle_turn_signal
	init_value " 0x02"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15779383 "VEHICLE_SIGNAL_EMERGENCY"
	public type class_ref 4417207 // vehicle_turn_signal
	init_value " 0x04
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4417335 "vehicle_boolean"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Boolean type.
"
      attribute 15779511 "VEHICLE_FALSE"
	public type class_ref 4417335 // vehicle_boolean
	init_value " 0x00"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15779639 "VEHICLE_TRUE"
	public type class_ref 4417335 // vehicle_boolean
	init_value " 0x01
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4417463 "vehicle_boolean_t"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4417591 "vehicle_str"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Vehicle string.

Defines a UTF8 encoded sequence of bytes that should be used for string
representation throughout.
"
    end

    class 4417719 "vehicle_str_t"
      visibility package stereotype "typedef" base_type class_ref 4417591 // vehicle_str
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4417847 "vehicle_bytes_t"
      visibility package stereotype "typedef" base_type class_ref 4417719 // vehicle_str_t
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Vehicle byte array.
This is for passing generic raw data.
"
      classrelation 8403639 // <dependency>
	relation 8403639 -_->
	  a public
	    cpp default "#include in source"
	    classrelation_ref 8403639 // <dependency>
	  b parent class_ref 4417719 // vehicle_str_t
      end
    end

    class 4417975 "vehicle_prop_config"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4418103 "vehicle_prop_config_t"
      visibility package stereotype "typedef" explicit_base_type ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4418231 "vehicle_hvac"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "HVAC property fields.

Defines various HVAC properties which are packed into vehicle_hvac_t (see
below). We define these properties outside in global scope so that HAL
implementation and HAL users (JNI) can typecast vehicle_hvac correctly.
"
      classrelation 8405047 // ac_on (<directional composition>)
	relation 8405047 *-->
	  a role_name "ac_on" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8405047 // ac_on (<directional composition>)
	  b parent class_ref 4417463 // vehicle_boolean_t
      end

      classrelation 8405175 // max_ac_on (<directional composition>)
	relation 8405175 *-->
	  a role_name "max_ac_on" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8405175 // max_ac_on (<directional composition>)
	  b parent class_ref 4417463 // vehicle_boolean_t
      end

      classrelation 8405303 // max_defrost_on (<directional composition>)
	relation 8405303 *-->
	  a role_name "max_defrost_on" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8405303 // max_defrost_on (<directional composition>)
	  b parent class_ref 4417463 // vehicle_boolean_t
      end

      classrelation 8405431 // recirc_on (<directional composition>)
	relation 8405431 *-->
	  a role_name "recirc_on" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8405431 // recirc_on (<directional composition>)
	  b parent class_ref 4417463 // vehicle_boolean_t
      end

      classrelation 8405559 // dual_on (<directional composition>)
	relation 8405559 *-->
	  a role_name "dual_on" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8405559 // dual_on (<directional composition>)
	  b parent class_ref 4417463 // vehicle_boolean_t
      end

      classrelation 8405687 // power_on (<directional composition>)
	relation 8405687 *-->
	  a role_name "power_on" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8405687 // power_on (<directional composition>)
	  b parent class_ref 4417463 // vehicle_boolean_t
      end

      attribute 15779767 "temperature_current"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15779895 "temperature_set"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 8405815 // defrost_on (<directional composition>)
	relation 8405815 *-->
	  a role_name "defrost_on" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8405815 // defrost_on (<directional composition>)
	  b parent class_ref 4417463 // vehicle_boolean_t
      end
    end

    class 4418359 "vehicle_hvac_t"
      visibility package stereotype "typedef" explicit_base_type ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4418487 "vehicle_value"
      visibility package stereotype "union"
      cpp_decl "${comment}${template}union ${name} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Defines how the values for various properties are represented.

There are two ways to populate and access the fields:
a) Using the individual fields. Use this mechanism (see
info_manufacture_date, fuel_capacity fields etc).
b) Using the union accessors (see uint32_value, float_value etc).

To add a new field make sure that it does not exceed the total union size
(defined in int_array) and it is one of the vehicle_value_type. Then add the
field name with its unit to union. If the field type is not yet defined (as
of this draft, we don't use int64_t) then add that type to vehicle_value_type
and have an accessor (so for int64_t it will be int64_t int64_value).
"
      attribute 15780023 "float_array"
	public explicit_type "float"
	multiplicity "[4]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15780151 "float_value"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 8406327 // str_value (<directional composition>)
	relation 8406327 *-->
	  a role_name "str_value" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8406327 // str_value (<directional composition>)
	  b parent class_ref 4417719 // vehicle_str_t
      end

      classrelation 8406455 // bytes_value (<directional composition>)
	relation 8406455 *-->
	  a role_name "bytes_value" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8406455 // bytes_value (<directional composition>)
	  b parent class_ref 4417847 // vehicle_bytes_t
      end

      classrelation 8406583 // boolean_value (<directional composition>)
	relation 8406583 *-->
	  a role_name "boolean_value" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8406583 // boolean_value (<directional composition>)
	  b parent class_ref 4417463 // vehicle_boolean_t
      end

      classrelation 8406711 // info_vin (<directional composition>)
	relation 8406711 *-->
	  a role_name "info_vin" public
	    comment " Vehicle Information.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8406711 // info_vin (<directional composition>)
	  b parent class_ref 4417719 // vehicle_str_t
      end

      classrelation 8406839 // info_make (<directional composition>)
	relation 8406839 *-->
	  a role_name "info_make" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8406839 // info_make (<directional composition>)
	  b parent class_ref 4417719 // vehicle_str_t
      end

      classrelation 8406967 // info_model (<directional composition>)
	relation 8406967 *-->
	  a role_name "info_model" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8406967 // info_model (<directional composition>)
	  b parent class_ref 4417719 // vehicle_str_t
      end

      attribute 15780279 "info_fuel_capacity"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Represented in milliliters.
"
      end

      attribute 15780407 "vehicle_speed"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15780535 "odometer"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15780663 "engine_coolant_temperature"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Engine sensors.
 Represented in milliliters.
float engine_coolant_level;
 Represented in celcius.
"
      end

      attribute 15780791 "engine_oil_temperature"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Represented in a percentage value.
float engine_oil_level;
 Represented in celcius.
"
      end

      attribute 15780919 "engine_rpm"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 8408119 // hvac (<directional composition>)
	relation 8408119 *-->
	  a role_name "hvac" public
	    comment " Value should be one of enum vehicle_boolean.
int32_t engine_on;
 HVAC properties.
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8408119 // hvac (<directional composition>)
	  b parent class_ref 4418359 // vehicle_hvac_t
      end

      attribute 15781047 "outside_temperature"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15781175 "cabin_temperature"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4418615 "vehicle_value_t"
      visibility package stereotype "typedef" base_type class_ref 4418487 // vehicle_value
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4418743 "vehicle_prop_value"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Encapsulates the property name and the associated value. It
is used across various API calls to set values, get values or to register for
events.
"
    end

    class 4418871 "vehicle_prop_value_t"
      visibility package stereotype "typedef" explicit_base_type ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4418999 "vehicle_event_callback_fn"
      visibility package stereotype "typedef" explicit_base_type "int"
      cpp_decl "${comment}typedef ${type}(* ${name})(const vehicle_prop_value_t *event_data);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Event callback happens whenever a variable that the API user has subscribed
to needs to be reported. This may be based purely on threshold and frequency
(a regular subscription, see subscribe call's arguments) or when the set()
command is executed and the actual change needs to be reported.

event_data is OWNED by the HAL and should be copied before the callback
finishes.
"
    end

    class 4419127 "vehicle_property_operation"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represent the operation where the current error has happened.
"
      attribute 15781303 "VEHICLE_OPERATION_GENERIC"
	public type class_ref 4419127 // vehicle_property_operation
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15781431 "VEHICLE_OPERATION_SET"
	public type class_ref 4419127 // vehicle_property_operation
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15781559 "VEHICLE_OPERATION_GET"
	public type class_ref 4419127 // vehicle_property_operation
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15781687 "VEHICLE_OPERATION_SUBSCRIBE"
	public type class_ref 4419127 // vehicle_property_operation
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4419255 "vehicle_error_callback_fn"
      visibility package stereotype "typedef" explicit_base_type "int"
      cpp_decl "${comment}typedef ${type}(* ${name})(int32_t error_code, int32_t property, int32_t operation);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Generic error to this property which is not tied to any operation. 
 Error happened while handling property set. 
 Error happened while handling property get. 
 Error happened while handling property subscription. 

Suggests that an error condition has occurred.

@param error_code Error code. error_code should be standard error code with
               negative value like -EINVAL.
@parm property Note a property where error has happened. If this is generic error, property
               should be VEHICLE_PROPERTY_INVALID.
@param operation Represent the operation where the error has happened. Should be one of
                 vehicle_property_operation.
"
    end

    class 4419383 "vehicle_module"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Every hardware module must have a data structure named HAL_MODULE_INFO_SYM
and the fields of this data structure must begin with hw_module_t
followed by module specific information.
"
      classrelation 8409015 // common (<directional composition>)
	relation 8409015 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8409015 // common (<directional composition>)
	  b parent class_ref 4305335 // hw_module_t
      end
    end

    class 4419511 "vehicle_module_t"
      visibility package stereotype "typedef" base_type class_ref 4419383 // vehicle_module
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4419639 "vehicle_hw_device"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8409143 // common (<directional composition>)
	relation 8409143 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8409143 // common (<directional composition>)
	  b parent class_ref 4305975 // hw_device_t
      end

      attribute 15781815 "init"
	public explicit_type "/** * After calling open on device the user should register callbacks for event and error * functions. */ int (*)(struct vehicle_hw_device* device, vehicle_event_callback_fn event_fn, vehicle_error_callback_fn err_fn)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * After calling open on device the user should register callbacks for event and error
     * functions.
     */
    int (*${name})(struct vehicle_hw_device* device,
                vehicle_event_callback_fn event_fn, vehicle_error_callback_fn err_fn)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "After calling open on device the user should register callbacks for event and error
functions.

"
      end

      attribute 15781943 "release"
	public explicit_type "/** * Before calling close the user should destroy the registered callback * functions. * In case the unsubscribe() call is not called on all properties before * release() then release() will unsubscribe the properties itself. */ int (*)(struct vehicle_hw_device* device)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}    /**
     * Before calling close the user should destroy the registered callback
     * functions.
     * In case the unsubscribe() call is not called on all properties before
     * release() then release() will unsubscribe the properties itself.
     */
    int (*${name})(struct vehicle_hw_device* device)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Before calling close the user should destroy the registered callback
functions.
In case the unsubscribe() call is not called on all properties before
release() then release() will unsubscribe the properties itself.

"
      end

      attribute 15782071 "list_properties"
	const_attribute public explicit_type "*(*)(struct vehicle_hw_device* device, int* num_properties)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const} *(*${name})(struct vehicle_hw_device* device,
            int* num_properties)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Enumerate all available properties. The list is returned in \"list\".
@param num_properties number of properties contained in the retuned array.
@return array of property configs supported by this car. Note that returned data is const
        and caller cannot modify it. HAL implementation should keep this memory until HAL
        is released to avoid copying this again.

"
      end

      attribute 15782199 "get"
	public explicit_type "/** * Get a vehicle property value immediately. data should be allocated * properly. * The caller of the API OWNS the data field. * Caller will set data->prop, data->value_type, and optionally zone value for zoned property. * But HAL implementation needs to fill all entries properly when returning. * For pointer type, HAL implementation should allocate necessary memory and caller is * responsible for calling release_memory_from_get, which allows HAL to release allocated * memory. * For VEHICLE_PROP_CHANGE_MODE_STATIC type of property, get should return the same value * always. * For VEHICLE_PROP_CHANGE_MODE_ON_CHANGE type of property, it should return the latest value. * If there is no data available yet, which can happen during initial stage, this call should * return immediately with error code of -EAGAIN. */ int (*)(struct vehicle_hw_device* device, vehicle_prop_value_t *data)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Get a vehicle property value immediately. data should be allocated
     * properly.
     * The caller of the API OWNS the data field.
     * Caller will set data->prop, data->value_type, and optionally zone value for zoned property.
     * But HAL implementation needs to fill all entries properly when returning.
     * For pointer type, HAL implementation should allocate necessary memory and caller is
     * responsible for calling release_memory_from_get, which allows HAL to release allocated
     * memory.
     * For VEHICLE_PROP_CHANGE_MODE_STATIC type of property, get should return the same value
     * always.
     * For VEHICLE_PROP_CHANGE_MODE_ON_CHANGE type of property, it should return the latest value.
     * If there is no data available yet, which can happen during initial stage, this call should
     * return immediately with error code of -EAGAIN.
     */
    int (*${name})(struct vehicle_hw_device* device, vehicle_prop_value_t *data)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Get a vehicle property value immediately. data should be allocated
properly.
The caller of the API OWNS the data field.
Caller will set data->prop, data->value_type, and optionally zone value for zoned property.
But HAL implementation needs to fill all entries properly when returning.
For pointer type, HAL implementation should allocate necessary memory and caller is
responsible for calling release_memory_from_get, which allows HAL to release allocated
memory.
For VEHICLE_PROP_CHANGE_MODE_STATIC type of property, get should return the same value
always.
For VEHICLE_PROP_CHANGE_MODE_ON_CHANGE type of property, it should return the latest value.
If there is no data available yet, which can happen during initial stage, this call should
return immediately with error code of -EAGAIN.

"
      end

      attribute 15782327 "release_memory_from_get"
	public explicit_type "/** * Release memory allocated to data in previous get call. get call for byte or string involves * allocating necessary memory from vehicle hal. * To be safe, memory allocated by vehicle hal should be released by vehicle hal and vehicle * network service will call this when data from vehicle hal is no longer necessary. * vehicle hal implementation should only release member of vehicle_prop_value_t like * data->str_value.data or data->bytes_value.data but not data itself as data itself is * allocated from vehicle network service. Once memory is freed, corresponding pointer should * be set to NULL bu vehicle hal. */ void (*)(struct vehicle_hw_device* device, vehicle_prop_value_t *data)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Release memory allocated to data in previous get call. get call for byte or string involves
     * allocating necessary memory from vehicle hal.
     * To be safe, memory allocated by vehicle hal should be released by vehicle hal and vehicle
     * network service will call this when data from vehicle hal is no longer necessary.
     * vehicle hal implementation should only release member of vehicle_prop_value_t like
     * data->str_value.data or data->bytes_value.data but not data itself as data itself is
     * allocated from vehicle network service. Once memory is freed, corresponding pointer should
     * be set to NULL bu vehicle hal.
     */
    void (*${name})(struct vehicle_hw_device* device, vehicle_prop_value_t *data)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Release memory allocated to data in previous get call. get call for byte or string involves
allocating necessary memory from vehicle hal.
To be safe, memory allocated by vehicle hal should be released by vehicle hal and vehicle
network service will call this when data from vehicle hal is no longer necessary.
vehicle hal implementation should only release member of vehicle_prop_value_t like
data->str_value.data or data->bytes_value.data but not data itself as data itself is
allocated from vehicle network service. Once memory is freed, corresponding pointer should
be set to NULL bu vehicle hal.

"
      end

      attribute 15782455 "set"
	public explicit_type "/** * Set a vehicle property value. data should be allocated properly and not * NULL. * The caller of the API OWNS the data field. * timestamp of data will be ignored for set operation. * Setting some properties require having initial state available. Depending on the vehicle hal, * such initial data may not be available for short time after init. In such case, set call * can return -EAGAIN like get call. * For a property with separate power control, set can fail if the property is not powered on. * In such case, hal should return -ESHUTDOWN error. */ int (*)(struct vehicle_hw_device* device, const vehicle_prop_value_t *data)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Set a vehicle property value.  data should be allocated properly and not
     * NULL.
     * The caller of the API OWNS the data field.
     * timestamp of data will be ignored for set operation.
     * Setting some properties require having initial state available. Depending on the vehicle hal,
     * such initial data may not be available for short time after init. In such case, set call
     * can return -EAGAIN like get call.
     * For a property with separate power control, set can fail if the property is not powered on.
     * In such case, hal should return -ESHUTDOWN error.
     */
    int (*${name})(struct vehicle_hw_device* device, const vehicle_prop_value_t *data)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Set a vehicle property value.  data should be allocated properly and not
NULL.
The caller of the API OWNS the data field.
timestamp of data will be ignored for set operation.
Setting some properties require having initial state available. Depending on the vehicle hal,
such initial data may not be available for short time after init. In such case, set call
can return -EAGAIN like get call.
For a property with separate power control, set can fail if the property is not powered on.
In such case, hal should return -ESHUTDOWN error.

"
      end

      attribute 15782583 "subscribe"
	public explicit_type "/** * Subscribe to events. * Depending on output of list_properties if the property is: * a) on-change: sample_rate should be set to 0. * b) supports frequency: sample_rate should be set from min_sample_rate to * max_sample_rate. * For on-change type of properties, vehicle network service will make another get call to check * the initial state. Due to this, vehicle hal implementation does not need to send initial * state for on-change type of properties. * @param device * @param prop * @param sample_rate * @param zones All subscribed zones for zoned property. can be ignored for non-zoned property. * 0 means all zones supported instead of no zone. */ int (*)(struct vehicle_hw_device* device, int32_t prop, float sample_rate, int32_t zones)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Subscribe to events.
     * Depending on output of list_properties if the property is:
     * a) on-change: sample_rate should be set to 0.
     * b) supports frequency: sample_rate should be set from min_sample_rate to
     * max_sample_rate.
     * For on-change type of properties, vehicle network service will make another get call to check
     * the initial state. Due to this, vehicle hal implementation does not need to send initial
     * state for on-change type of properties.
     * @param device
     * @param prop
     * @param sample_rate
     * @param zones All subscribed zones for zoned property. can be ignored for non-zoned property.
     *              0 means all zones supported instead of no zone.
     */
    int (*${name})(struct vehicle_hw_device* device, int32_t prop, float sample_rate,
            int32_t zones)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Subscribe to events.
Depending on output of list_properties if the property is:
a) on-change: sample_rate should be set to 0.
b) supports frequency: sample_rate should be set from min_sample_rate to
max_sample_rate.
For on-change type of properties, vehicle network service will make another get call to check
the initial state. Due to this, vehicle hal implementation does not need to send initial
state for on-change type of properties.
@param device
@param prop
@param sample_rate
@param zones All subscribed zones for zoned property. can be ignored for non-zoned property.
             0 means all zones supported instead of no zone.

"
      end

      attribute 15782711 "unsubscribe"
	public explicit_type "/** Cancel subscription on a property. */ int (*)(struct vehicle_hw_device* device, int32_t prop)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Cancel subscription on a property. */
    int (*${name})(struct vehicle_hw_device* device, int32_t prop)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Cancel subscription on a property. 
"
      end

      attribute 15782839 "dump"
	public explicit_type "/** * Print out debugging state for the vehicle hal. This will be called by * the vehicle network service and will be included into the service' dump. * * The passed-in file descriptor can be used to write debugging text using * dprintf() or write(). The text should be in ASCII encoding only. * * Performance requirements: * * This must be a non-blocking call. The HAL should return from this call * in 1ms, must return from this call in 10ms. This call must avoid * deadlocks, as it may be called at any point of operation. * Any synchronization primitives used (such as mutex locks or semaphores) * should be acquired with a timeout. */ int (*)(struct vehicle_hw_device* device, int fd)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Print out debugging state for the vehicle hal. This will be called by
     * the vehicle network service and will be included into the service' dump.
     *
     * The passed-in file descriptor can be used to write debugging text using
     * dprintf() or write(). The text should be in ASCII encoding only.
     *
     * Performance requirements:
     *
     * This must be a non-blocking call. The HAL should return from this call
     * in 1ms, must return from this call in 10ms. This call must avoid
     * deadlocks, as it may be called at any point of operation.
     * Any synchronization primitives used (such as mutex locks or semaphores)
     * should be acquired with a timeout.
     */
    int (*${name})(struct vehicle_hw_device* device, int fd)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Print out debugging state for the vehicle hal. This will be called by
the vehicle network service and will be included into the service' dump.

The passed-in file descriptor can be used to write debugging text using
dprintf() or write(). The text should be in ASCII encoding only.

Performance requirements:

This must be a non-blocking call. The HAL should return from this call
in 1ms, must return from this call in 10ms. This call must avoid
deadlocks, as it may be called at any point of operation.
Any synchronization primitives used (such as mutex locks or semaphores)
should be acquired with a timeout.

"
      end
    end

    class 4419767 "vehicle_hw_device_t"
      visibility package stereotype "typedef" base_type class_ref 4419639 // vehicle_hw_device
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4419895 "vehicle_camera_state_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Each camera on the car shall be enumerated


Describes the current state of camera device
"
    end

    class 4420023 "anonymous180"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Bitmask of features supported by a camera module
"
      attribute 15782967 "VEHICLE_CAMERA_CONFIG_FLAG_ANDROID_OVERLAY_SUPPORT"
	public type class_ref 4420023 // anonymous180
	init_value " 0x1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15783095 "VEHICLE_CAMERA_CONFIG_FLAG_CAMERA_CROP_SUPPORT"
	public type class_ref 4420023 // anonymous180
	init_value " 0x2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 15783223 "VEHICLE_CAMERA_CONFIG_FLAG_CAMERA_POSITIONING_SUPPORT"
	public type class_ref 4420023 // anonymous180
	init_value " 0x4
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 4420151 "vehicle_camera_cap_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 4420279 "vehicle_camera_module_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Every hardware module must have a data structure named HAL_MODULE_INFO_SYM
and the fields of this data structure must begin with hw_module_t
followed by module specific information.
"
      classrelation 8410167 // common (<directional composition>)
	relation 8410167 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8410167 // common (<directional composition>)
	  b parent class_ref 4305335 // hw_module_t
      end

      attribute 15783351 "get_camera_device_list"
	const_attribute public explicit_type "uint32_t * (*)(uint32_t *num_cameras)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const} uint32_t * (*${name})(uint32_t *num_cameras)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Queries the HW for the cameras installed on the vehicle
@param num_cameras - number of camera devices available.  If
                   0 is returned, an error has occurred and
                   the return pointer shall be NULL.
@return pointer to an array of vehicle_camera_type_t to
        denote which cameras are installed.  This pointer is
        only valid while the vehicle hal is loaded.  If the
        pointer is NULL, then an error has occurred and
        num_cameras shall be 0.

"
      end
    end

    class 4420407 "vehicle_camera_device_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8410295 // common (<directional composition>)
	relation 8410295 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8410295 // common (<directional composition>)
	  b parent class_ref 4305975 // hw_device_t
      end

      attribute 15783479 "get_capabilities"
	public explicit_type "/** * Returns the capabilities of this camera. * @param device - device handle * @param cap - pointer to capabilities flags being returned * @return 0 on success * -EPERM if device is invalid or not initialized */ int (*)(struct vehicle_camera_device_t *device, vehicle_camera_cap_t *cap)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Returns the capabilities of this camera.
     * @param device - device handle
     * @param cap - pointer to capabilities flags being returned
     * @return 0 on success
     *          -EPERM if device is invalid or not initialized
     */
    int (*${name})(struct vehicle_camera_device_t *device, vehicle_camera_cap_t *cap)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Returns the capabilities of this camera.
@param device - device handle
@param cap - pointer to capabilities flags being returned
@return 0 on success
         -EPERM if device is invalid or not initialized

"
      end

      attribute 15783607 "get_camera_crop"
	public explicit_type "/** * Gets the current camera crop settings. * @param device - device handle * @param rect - current camera crop settings * @return 0 on success * -EPERM if device is not initialized * -errno on error */ int (*)(struct vehicle_camera_device_t *device, android_native_rect_t *rect)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Gets the current camera crop settings.
     * @param device - device handle
     * @param rect - current camera crop settings
     * @return 0 on success
     *          -EPERM if device is not initialized
     *          -errno on error
     */
    int (*${name})(struct vehicle_camera_device_t *device, android_native_rect_t *rect)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Gets the current camera crop settings.
@param device - device handle
@param rect - current camera crop settings
@return 0 on success
         -EPERM if device is not initialized
         -errno on error

"
      end

      attribute 15783735 "set_camera_crop"
	public explicit_type "/** * Sets the camera crop. * @param device - device handle * @param rect - area of camera input to crop. Must fit within * camera width and height from camera capabilities. * @return 0 on success * -EPERM if device is not initialized * -errno on error */ int (*)(struct vehicle_camera_device_t *device, const android_native_rect_t *rect)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Sets the camera crop.
     * @param device - device handle
     * @param rect - area of camera input to crop.  Must fit within
     *             camera width and height from camera capabilities.
     * @return 0 on success
     *          -EPERM if device is not initialized
     *          -errno on error
     */
    int (*${name})(struct vehicle_camera_device_t *device, const android_native_rect_t *rect)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Sets the camera crop.
@param device - device handle
@param rect - area of camera input to crop.  Must fit within
            camera width and height from camera capabilities.
@return 0 on success
         -EPERM if device is not initialized
         -errno on error

"
      end

      attribute 15783863 "get_camera_position"
	public explicit_type "/** * Gets position of the camera on the display. * @param device - device handle * @param rect - area of display the camera will appear when on * @return 0 on success * -EPERM if device is not initialized * -errno on error */ int (*)(struct vehicle_camera_device_t *device, android_native_rect_t *rect)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Gets position of the camera on the display.
     * @param device - device handle
     * @param rect - area of display the camera will appear when on
     * @return 0 on success
     *          -EPERM if device is not initialized
     *          -errno on error
     */
    int (*${name})(struct vehicle_camera_device_t *device, android_native_rect_t *rect)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Gets position of the camera on the display.
@param device - device handle
@param rect - area of display the camera will appear when on
@return 0 on success
         -EPERM if device is not initialized
         -errno on error

"
      end

      attribute 15783991 "set_camera_position"
	public explicit_type "/** * Sets position of the camera on the display. * @param device - device handle * @param rect - area of display the camera will appear when on. * Must fit within display width and height from * camera capabilities. * @return 0 on success * -EPERM if device is not initialized * -errno on error */ int (*)(struct vehicle_camera_device_t *device, const android_native_rect_t *rect)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Sets position of the camera on the display.
     * @param device - device handle
     * @param rect - area of display the camera will appear when on.
     *             Must fit within display width and height from
     *             camera capabilities.
     * @return 0 on success
     *          -EPERM if device is not initialized
     *          -errno on error
     */
    int (*${name})(struct vehicle_camera_device_t *device, const android_native_rect_t *rect)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Sets position of the camera on the display.
@param device - device handle
@param rect - area of display the camera will appear when on.
            Must fit within display width and height from
            camera capabilities.
@return 0 on success
         -EPERM if device is not initialized
         -errno on error

"
      end

      attribute 15784119 "get_camera_state"
	public explicit_type "/** * Gets the current camera state. * @param device - device handle * @param state - last setting for the camera * @return 0 on success * -EPERM if device is not initialized */ int (*)(struct vehicle_camera_device_t *device, vehicle_camera_state_t *state)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Gets the current camera state.
     * @param device - device handle
     * @param state - last setting for the camera
     * @return 0 on success
     *          -EPERM if device is not initialized
     */
    int (*${name})(struct vehicle_camera_device_t *device, vehicle_camera_state_t *state)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Gets the current camera state.
@param device - device handle
@param state - last setting for the camera
@return 0 on success
         -EPERM if device is not initialized

"
      end

      attribute 15784247 "set_camera_state"
	public explicit_type "/** * Sets the camera state. * @param device - device handle * @param state - desired setting for the camera * @return 0 on success * -EPERM if device is not initialized * -errno on error */ int (*)(struct vehicle_camera_device_t *device, const vehicle_camera_state_t *state)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /**
     * Sets the camera state.
     * @param device - device handle
     * @param state - desired setting for the camera
     * @return 0 on success
     *          -EPERM if device is not initialized
     *          -errno on error
     */
    int (*${name})(struct vehicle_camera_device_t *device, const vehicle_camera_state_t *state)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Sets the camera state.
@param device - device handle
@param state - desired setting for the camera
@return 0 on success
         -EPERM if device is not initialized
         -errno on error

"
      end
    end

    class 4420535 "vibrator_device"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 8410551 // common (<directional composition>)
	relation 8410551 *-->
	  a role_name "common" public
	    comment "Common methods of the vibrator device.  This *must* be the first member of
vibrator_device as users of this structure will cast a hw_device_t to
vibrator_device pointer in contexts where it's known the hw_device_t references a
vibrator_device.

"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 8410551 // common (<directional composition>)
	  b parent class_ref 4305975 // hw_device_t
      end

      attribute 15784375 "vibrator_on"
	public explicit_type "/** Turn on vibrator * * This function must only be called after the previous timeout has expired or * was canceled (through vibrator_off()). * * @param timeout_ms number of milliseconds to vibrate * * @return 0 in case of success, negative errno code else */ int (*)(struct vibrator_device* vibradev, unsigned int timeout_ms)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Turn on vibrator
     *
     * This function must only be called after the previous timeout has expired or
     * was canceled (through vibrator_off()).
     *
     * @param timeout_ms number of milliseconds to vibrate
     *
     * @return 0 in case of success, negative errno code else
     */
    int (*${name})(struct vibrator_device* vibradev, unsigned int timeout_ms)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Turn on vibrator

This function must only be called after the previous timeout has expired or
was canceled (through vibrator_off()).

@param timeout_ms number of milliseconds to vibrate

@return 0 in case of success, negative errno code else

"
      end

      attribute 15784503 "vibrator_off"
	public explicit_type "/** Turn off vibrator * * Cancel a previously-started vibration, if any. * * @return 0 in case of success, negative errno code else */ int (*)(struct vibrator_device* vibradev)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}
    /** Turn off vibrator
     *
     * Cancel a previously-started vibration, if any.
     *
     * @return 0 in case of success, negative errno code else
     */
    int (*${name})(struct vibrator_device* vibradev)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Turn off vibrator

Cancel a previously-started vibration, if any.

@return 0 in case of success, negative errno code else

"
      end
    end

    class 4420663 "vibrator_device_t"
      visibility package stereotype "typedef" base_type class_ref 4420535 // vibrator_device
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end
  end

  deploymentview 345143 "hardware"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 1840439 "activity_recognition"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4304951 // activity_event
	class_ref 4305079 // activity_event_t
	class_ref 4305207 // activity_recognition_module
	class_ref 4305463 // activity_recognition_module_t
	class_ref 4305591 // activity_recognition_callback_procs
	class_ref 4305719 // activity_recognition_callback_procs_t
	class_ref 4305847 // activity_recognition_device
	class_ref 4306103 // activity_recognition_device_t
      end
    end

    artifact 1840567 "audio"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4306231 // audio_stream_t
	class_ref 4306359 // stream_callback_event_t
	class_ref 4306487 // stream_callback_t
	class_ref 4306615 // audio_drain_type_t
	class_ref 4306743 // audio_stream_out
	class_ref 4306871 // audio_stream_out_t
	class_ref 4306999 // audio_stream_in
	class_ref 4307127 // audio_stream_in_t
	class_ref 4307255 // audio_module
	class_ref 4307383 // audio_hw_device
	class_ref 4307511 // audio_hw_device_t
      end
    end

    artifact 1840695 "audio_effect"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4307639 // effect_descriptor_s
	class_ref 4307767 // effect_descriptor_t
	class_ref 4308023 // effect_handle_t
	class_ref 4308279 // audio_buffer_t
	class_ref 4307895 // effect_interface_s
	class_ref 4308407 // effect_command_e
	class_ref 4308151 // audio_buffer_s
	class_ref 4308535 // buffer_function_t
	class_ref 4308663 // buffer_provider_s
	class_ref 4308791 // buffer_provider_t
	class_ref 4308919 // buffer_config_s
	class_ref 4309047 // buffer_config_t
	class_ref 4309175 // effect_buffer_access_e
	class_ref 4309303 // effect_feature_e
	class_ref 4309431 // channel_config_s
	class_ref 4309559 // channel_config_t
	class_ref 4309687 // effect_config_s
	class_ref 4309815 // effect_config_t
	class_ref 4309943 // effect_param_s
	class_ref 4310071 // effect_param_t
	class_ref 4310199 // effect_offload_param_s
	class_ref 4310327 // effect_offload_param_t
	class_ref 4310455 // audio_effect_library_s
	class_ref 4310583 // audio_effect_library_t
      end
    end

    artifact 1840823 "audio_policy"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4310711 // audio_policy
	class_ref 4310839 // audio_policy_service_ops
	class_ref 4310967 // audio_policy_module
	class_ref 4311095 // audio_policy_module_t
	class_ref 4311223 // audio_policy_device
      end
    end

    artifact 1840951 "bluetooth"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4311351 // bt_scan_mode_t
	class_ref 4311479 // bt_state_t
	class_ref 4311607 // bt_status_t
	class_ref 4311735 // bt_discovery_state_t
	class_ref 4311863 // bt_acl_state_t
	class_ref 4311991 // bt_uuid_t
	class_ref 4312119 // bt_service_record_t
	class_ref 4312247 // bt_remote_version_t
	class_ref 4312375 // bt_local_le_features_t
	class_ref 4312503 // bt_property_type_t
	class_ref 4312631 // bt_property_t
	class_ref 4312759 // bt_out_of_band_data_t
	class_ref 4312887 // bt_device_type_t
	class_ref 4313015 // bt_bond_state_t
	class_ref 4313143 // bt_ssp_variant_t
	class_ref 4313271 // adapter_state_changed_callback
	class_ref 4313399 // adapter_properties_callback
	class_ref 4313527 // remote_device_properties_callback
	class_ref 4313655 // device_found_callback
	class_ref 4313783 // discovery_state_changed_callback
	class_ref 4313911 // pin_request_callback
	class_ref 4314039 // ssp_request_callback
	class_ref 4314167 // bond_state_changed_callback
	class_ref 4314295 // acl_state_changed_callback
	class_ref 4314423 // bt_cb_thread_evt
	class_ref 4314551 // callback_thread_event
	class_ref 4314679 // dut_mode_recv_callback
	class_ref 4314807 // le_test_mode_callback
	class_ref 4314935 // energy_info_callback
	class_ref 4315063 // bt_callbacks_t
	class_ref 4315191 // alarm_cb
	class_ref 4315319 // set_wake_alarm_callout
	class_ref 4315447 // acquire_wake_lock_callout
	class_ref 4315575 // release_wake_lock_callout
	class_ref 4315703 // bt_os_callouts_t
	class_ref 4315831 // bt_interface_t
	class_ref 4315959 // bluetooth_device_t
	class_ref 4316087 // bluetooth_module_t
      end
    end

    artifact 1841079 "bt_av"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4316215 // btav_audio_state_t
	class_ref 4316343 // btav_connection_state_callback
	class_ref 4316471 // btav_audio_state_callback
	class_ref 4316599 // btav_audio_config_callback
	class_ref 4316727 // btav_callbacks_t
	class_ref 4316855 // btav_interface_t
      end
    end

    artifact 1841207 "bt_common_types"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4316983 // btgatt_track_adv_info_t
	class_ref 4317111 // bt_gatt_db_attribute_type_t
	class_ref 4317239 // btgatt_db_element_t
      end
    end

    artifact 1841335 "bt_gatt"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4317367 // btgatt_interface_t
      end
    end

    artifact 1841463 "bt_gatt_client"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4317751 // btgatt_read_params_t
	class_ref 4317879 // btgatt_write_params_t
	class_ref 4318135 // btgatt_notify_params_t
	class_ref 4318263 // btgatt_filt_param_setup_t
	class_ref 4318391 // btgatt_test_params_t
	class_ref 4318519 // btgattc_error_t
	class_ref 4318647 // register_client_callback
	class_ref 4318775 // scan_result_callback
	class_ref 4318903 // connect_callback
	class_ref 4319031 // disconnect_callback
	class_ref 4319159 // search_complete_callback
	class_ref 4319287 // register_for_notification_callback
	class_ref 4319415 // notify_callback
	class_ref 4319543 // read_characteristic_callback
	class_ref 4319671 // write_characteristic_callback
	class_ref 4319799 // execute_write_callback
	class_ref 4319927 // read_descriptor_callback
	class_ref 4320055 // write_descriptor_callback
	class_ref 4320183 // read_remote_rssi_callback
	class_ref 4320311 // listen_callback
	class_ref 4320439 // configure_mtu_callback
	class_ref 4320567 // scan_filter_cfg_callback
	class_ref 4320695 // scan_filter_param_callback
	class_ref 4320823 // scan_filter_status_callback
	class_ref 4320951 // multi_adv_enable_callback
	class_ref 4321079 // multi_adv_update_callback
	class_ref 4321207 // multi_adv_data_callback
	class_ref 4321335 // multi_adv_disable_callback
	class_ref 4321463 // congestion_callback
	class_ref 4321591 // batchscan_cfg_storage_callback
	class_ref 4321719 // batchscan_enable_disable_callback
	class_ref 4321847 // batchscan_reports_callback
	class_ref 4321975 // batchscan_threshold_callback
	class_ref 4322103 // track_adv_event_callback
	class_ref 4322231 // scan_parameter_setup_completed_callback
	class_ref 4322359 // get_gatt_db_callback
	class_ref 4322487 // services_removed_callback
	class_ref 4322615 // services_added_callback
	class_ref 4322743 // btgatt_client_callbacks_t
	class_ref 4317495 // btgatt_client_interface_t
      end
    end

    artifact 1841591 "bt_gatt_server"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4322871 // btgatt_response_t
	class_ref 4322999 // register_server_callback
	class_ref 4323127 // connection_callback
	class_ref 4323255 // service_added_callback
	class_ref 4323383 // included_service_added_callback
	class_ref 4323511 // characteristic_added_callback
	class_ref 4323639 // descriptor_added_callback
	class_ref 4323767 // service_started_callback
	class_ref 4323895 // service_stopped_callback
	class_ref 4324023 // service_deleted_callback
	class_ref 4324151 // request_read_callback
	class_ref 4324279 // request_write_callback
	class_ref 4324407 // request_exec_write_callback
	class_ref 4324535 // response_confirmation_callback
	class_ref 4324663 // indication_sent_callback
	class_ref 4324791 // mtu_changed_callback
	class_ref 4324919 // btgatt_server_callbacks_t
	class_ref 4317623 // btgatt_server_interface_t
      end
    end

    artifact 1841719 "bt_gatt_types"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4318007 // btgatt_srvc_id_t
	class_ref 4325047 // btgatt_transport_t
      end
    end

    artifact 1841847 "bt_hf"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4325175 // bthf_connection_state_t
	class_ref 4325303 // bthf_audio_state_t
	class_ref 4325431 // bthf_vr_state_t
	class_ref 4325559 // bthf_volume_type_t
	class_ref 4325687 // bthf_nrec_t
	class_ref 4325815 // bthf_wbs_config_t
	class_ref 4325943 // bthf_chld_type_t
	class_ref 4326071 // bthf_connection_state_callback
	class_ref 4326199 // bthf_audio_state_callback
	class_ref 4326327 // bthf_vr_cmd_callback
	class_ref 4326455 // bthf_answer_call_cmd_callback
	class_ref 4326583 // bthf_hangup_call_cmd_callback
	class_ref 4326711 // bthf_volume_cmd_callback
	class_ref 4326839 // bthf_dial_call_cmd_callback
	class_ref 4326967 // bthf_dtmf_cmd_callback
	class_ref 4327095 // bthf_nrec_cmd_callback
	class_ref 4327223 // bthf_wbs_callback
	class_ref 4327351 // bthf_chld_cmd_callback
	class_ref 4327479 // bthf_cnum_cmd_callback
	class_ref 4327607 // bthf_cind_cmd_callback
	class_ref 4327735 // bthf_cops_cmd_callback
	class_ref 4327863 // bthf_clcc_cmd_callback
	class_ref 4327991 // bthf_unknown_at_cmd_callback
	class_ref 4328119 // bthf_key_pressed_cmd_callback
	class_ref 4328247 // bthf_callbacks_t
	class_ref 4328375 // bthf_network_state_t
	class_ref 4328503 // bthf_service_type_t
	class_ref 4328631 // bthf_call_state_t
	class_ref 4328759 // bthf_call_direction_t
	class_ref 4328887 // bthf_call_mode_t
	class_ref 4329015 // bthf_call_mpty_type_t
	class_ref 4329143 // bthf_call_addrtype_t
	class_ref 4329271 // bthf_interface_t
      end
    end

    artifact 1841975 "bt_hf_client"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4329399 // bthf_client_audio_state_t
	class_ref 4329527 // bthf_client_vr_state_t
	class_ref 4329655 // bthf_client_volume_type_t
	class_ref 4329783 // bthf_client_network_state_t
	class_ref 4329911 // bthf_client_service_type_t
	class_ref 4330039 // bthf_client_call_state_t
	class_ref 4330167 // bthf_client_call_t
	class_ref 4330295 // bthf_client_callsetup_t
	class_ref 4330423 // bthf_client_callheld_t
	class_ref 4330551 // bthf_client_resp_and_hold_t
	class_ref 4330679 // bthf_client_call_direction_t
	class_ref 4330807 // bthf_client_call_mpty_type_t
	class_ref 4330935 // bthf_client_cmd_complete_t
	class_ref 4331063 // bthf_client_call_action_t
	class_ref 4331191 // bthf_client_subscriber_service_type_t
	class_ref 4331319 // bthf_client_in_band_ring_state_t
	class_ref 4331447 // bthf_client_connection_state_callback
	class_ref 4331575 // bthf_client_audio_state_callback
	class_ref 4331703 // bthf_client_vr_cmd_callback
	class_ref 4331831 // bthf_client_network_state_callback
	class_ref 4331959 // bthf_client_network_roaming_callback
	class_ref 4332087 // bthf_client_network_signal_callback
	class_ref 4332215 // bthf_client_battery_level_callback
	class_ref 4332343 // bthf_client_current_operator_callback
	class_ref 4332471 // bthf_client_call_callback
	class_ref 4332599 // bthf_client_callsetup_callback
	class_ref 4332727 // bthf_client_callheld_callback
	class_ref 4332855 // bthf_client_resp_and_hold_callback
	class_ref 4332983 // bthf_client_clip_callback
	class_ref 4333111 // bthf_client_call_waiting_callback
	class_ref 4333239 // bthf_client_current_calls
	class_ref 4333367 // bthf_client_volume_change_callback
	class_ref 4333495 // bthf_client_cmd_complete_callback
	class_ref 4333623 // bthf_client_subscriber_info_callback
	class_ref 4333751 // bthf_client_in_band_ring_tone_callback
	class_ref 4333879 // bthf_client_last_voice_tag_number_callback
	class_ref 4334007 // bthf_client_ring_indication_callback
	class_ref 4334135 // bthf_client_callbacks_t
	class_ref 4334263 // bthf_client_interface_t
      end
    end

    artifact 1842103 "bt_hh"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4334391 // bthh_status_t
	class_ref 4334519 // bthh_protocol_mode_t
	class_ref 4334647 // bthh_report_type_t
	class_ref 4334775 // bthh_hid_info_t
	class_ref 4334903 // bthh_connection_state_callback
	class_ref 4335031 // bthh_virtual_unplug_callback
	class_ref 4335159 // bthh_hid_info_callback
	class_ref 4335287 // bthh_protocol_mode_callback
	class_ref 4335415 // bthh_idle_time_callback
	class_ref 4335543 // bthh_get_report_callback
	class_ref 4335671 // bthh_handshake_callback
	class_ref 4335799 // bthh_callbacks_t
	class_ref 4335927 // bthh_interface_t
      end
    end

    artifact 1842231 "bt_hl"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4336055 // bthl_app_reg_state_t
	class_ref 4336183 // bthl_channel_type_t
	class_ref 4336311 // bthl_channel_state_t
	class_ref 4336439 // bthl_mdep_cfg_t
	class_ref 4336567 // bthl_reg_param_t
	class_ref 4336695 // bthl_app_reg_state_callback
	class_ref 4336823 // bthl_channel_state_callback
	class_ref 4336951 // bthl_callbacks_t
	class_ref 4337079 // bthl_interface_t
      end
    end

    artifact 1842359 "bt_mce"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4337207 // btmce_remote_mas_instances_callback
	class_ref 4337335 // btmce_callbacks_t
	class_ref 4337463 // btmce_interface_t
      end
    end

    artifact 1842487 "bt_pan"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4337591 // btpan_control_state_t
	class_ref 4337719 // btpan_connection_state_callback
	class_ref 4337847 // btpan_control_state_callback
	class_ref 4337975 // btpan_callbacks_t
	class_ref 4338103 // btpan_interface_t
      end
    end

    artifact 1842615 "bt_rc"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4338231 // btrc_remote_features_t
	class_ref 4338359 // btrc_play_status_t
	class_ref 4338487 // btrc_event_id_t
	class_ref 4338615 // btrc_notification_type_t
	class_ref 4338743 // btrc_player_attr_t
	class_ref 4338871 // btrc_media_attr_t
	class_ref 4338999 // btrc_player_repeat_val_t
	class_ref 4339127 // btrc_player_shuffle_val_t
	class_ref 4339255 // btrc_status_t
	class_ref 4339383 // btrc_player_settings_t
	class_ref 4339511 // btrc_player_app_ext_attr_val_t
	class_ref 4339639 // btrc_player_app_ext_attr_t
	class_ref 4339767 // btrc_player_app_attr_t
	class_ref 4339895 // btrc_getfolderitem_t
	class_ref 4340023 // btrc_register_notification_t
	class_ref 4340151 // btrc_player_setting_text_t
	class_ref 4340279 // btrc_element_attr_val_t
	class_ref 4340407 // btrc_remote_features_callback
	class_ref 4340535 // btrc_get_play_status_callback
	class_ref 4340663 // btrc_list_player_app_attr_callback
	class_ref 4340791 // btrc_list_player_app_values_callback
	class_ref 4340919 // btrc_get_player_app_value_callback
	class_ref 4341047 // btrc_get_player_app_attrs_text_callback
	class_ref 4341175 // btrc_get_player_app_values_text_callback
	class_ref 4341303 // btrc_set_player_app_value_callback
	class_ref 4341431 // btrc_get_element_attr_callback
	class_ref 4341559 // btrc_register_notification_callback
	class_ref 4341687 // btrc_volume_change_callback
	class_ref 4341815 // btrc_passthrough_cmd_callback
	class_ref 4341943 // btrc_callbacks_t
	class_ref 4342071 // btrc_interface_t
	class_ref 4342199 // btrc_passthrough_rsp_callback
	class_ref 4342327 // btrc_groupnavigation_rsp_callback
	class_ref 4342455 // btrc_connection_state_callback
	class_ref 4342583 // btrc_ctrl_getrcfeatures_callback
	class_ref 4342711 // btrc_ctrl_setabsvol_cmd_callback
	class_ref 4342839 // btrc_ctrl_registernotification_abs_vol_callback
	class_ref 4342967 // btrc_ctrl_setplayerapplicationsetting_rsp_callback
	class_ref 4343095 // btrc_ctrl_playerapplicationsetting_callback
	class_ref 4343223 // btrc_ctrl_playerapplicationsetting_changed_callback
	class_ref 4343351 // btrc_ctrl_track_changed_callback
	class_ref 4343479 // btrc_ctrl_play_position_changed_callback
	class_ref 4343607 // btrc_ctrl_play_status_changed_callback
	class_ref 4343735 // btrc_ctrl_callbacks_t
	class_ref 4343863 // btrc_ctrl_interface_t
      end
    end

    artifact 1842743 "bt_sdp"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4343991 // _bluetooth_sdp_hdr
	class_ref 4344119 // bluetooth_sdp_hdr
	class_ref 4344247 // _bluetooth_sdp_hdr_overlay
	class_ref 4344375 // bluetooth_sdp_hdr_overlay
	class_ref 4344503 // _bluetooth_sdp_mas_record
	class_ref 4344631 // bluetooth_sdp_mas_record
	class_ref 4344759 // _bluetooth_sdp_mns_record
	class_ref 4344887 // bluetooth_sdp_mns_record
	class_ref 4345015 // _bluetooth_sdp_pse_record
	class_ref 4345143 // bluetooth_sdp_pse_record
	class_ref 4345271 // _bluetooth_sdp_pce_record
	class_ref 4345399 // bluetooth_sdp_pce_record
	class_ref 4345527 // _bluetooth_sdp_ops_record
	class_ref 4345655 // bluetooth_sdp_ops_record
	class_ref 4345783 // _bluetooth_sdp_sap_record
	class_ref 4345911 // bluetooth_sdp_sap_record
	class_ref 4346039 // bluetooth_sdp_record
	class_ref 4346167 // btsdp_search_callback
	class_ref 4346295 // btsdp_callbacks_t
	class_ref 4346423 // btsdp_interface_t
      end
    end

    artifact 1842871 "bt_sock"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4346551 // btsock_interface_t
      end
    end

    artifact 1842999 "camera"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4346679 // camera_release_memory
	class_ref 4346807 // camera_memory
	class_ref 4346935 // camera_memory_t
	class_ref 4347063 // camera_request_memory
	class_ref 4347191 // camera_notify_callback
	class_ref 4347319 // camera_data_callback
	class_ref 4347447 // camera_data_timestamp_callback
	class_ref 4347575 // preview_stream_ops
	class_ref 4347703 // preview_stream_ops_t
	class_ref 4347831 // camera_device_ops
	class_ref 4347959 // camera_device_ops_t
	class_ref 4348087 // camera_device
	class_ref 4348215 // camera_device_t
      end
    end

    artifact 1843127 "camera2"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4348343 // camera2_stream_ops
	class_ref 4348471 // camera2_stream_ops_t
	class_ref 4348599 // anonymous147
	class_ref 4348727 // camera2_jpeg_blob
	class_ref 4348855 // anonymous148
	class_ref 4348983 // camera2_stream_in_ops
	class_ref 4349111 // camera2_stream_in_ops_t
	class_ref 4349239 // anonymous149
	class_ref 4349367 // camera2_request_queue_src_ops
	class_ref 4349495 // camera2_request_queue_src_ops_t
	class_ref 4349623 // camera2_frame_queue_dst_ops
	class_ref 4349751 // camera2_frame_queue_dst_ops_t
	class_ref 4349879 // camera2_notify_callback
	class_ref 4350007 // anonymous150
	class_ref 4350135 // anonymous151
	class_ref 4350263 // anonymous152
	class_ref 4350391 // anonymous153
	class_ref 4350519 // camera2_device_ops
	class_ref 4350647 // camera2_device_ops_t
	class_ref 4350775 // camera2_device
	class_ref 4350903 // camera2_device_t
      end
    end

    artifact 1843255 "camera3"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4351031 // camera3_stream_type
	class_ref 4351159 // camera3_stream_type_t
	class_ref 4351287 // camera3_stream_rotation
	class_ref 4351415 // camera3_stream_rotation_t
	class_ref 4351543 // camera3_stream_configuration_mode
	class_ref 4351671 // camera3_stream_configuration_mode_t
	class_ref 4351799 // camera3_stream
	class_ref 4351927 // camera3_stream_t
	class_ref 4352055 // camera3_stream_configuration
	class_ref 4352183 // camera3_stream_configuration_t
	class_ref 4352311 // camera3_buffer_status
	class_ref 4352439 // camera3_buffer_status_t
	class_ref 4352567 // camera3_stream_buffer
	class_ref 4352695 // camera3_stream_buffer_t
	class_ref 4352823 // camera3_stream_buffer_set
	class_ref 4352951 // camera3_stream_buffer_set_t
	class_ref 4353079 // camera3_jpeg_blob
	class_ref 4353207 // camera3_jpeg_blob_t
	class_ref 4353335 // anonymous154
	class_ref 4353463 // camera3_msg_type
	class_ref 4353591 // camera3_msg_type_t
	class_ref 4353719 // camera3_error_msg_code
	class_ref 4353847 // camera3_error_msg_code_t
	class_ref 4353975 // camera3_error_msg
	class_ref 4354103 // camera3_error_msg_t
	class_ref 4354231 // camera3_shutter_msg
	class_ref 4354359 // camera3_shutter_msg_t
	class_ref 4354487 // camera3_notify_msg
	class_ref 4354615 // camera3_notify_msg_t
	class_ref 4354743 // camera3_request_template
	class_ref 4354871 // camera3_request_template_t
	class_ref 4354999 // camera3_capture_request
	class_ref 4355127 // camera3_capture_request_t
	class_ref 4355255 // camera3_capture_result
	class_ref 4355383 // camera3_capture_result_t
	class_ref 4355511 // camera3_callback_ops
	class_ref 4355639 // camera3_callback_ops_t
	class_ref 4355767 // camera3_device_ops
	class_ref 4355895 // camera3_device_ops_t
	class_ref 4356023 // camera3_device
	class_ref 4356151 // camera3_device_t
      end
    end

    artifact 1843383 "camera_common"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4356279 // camera_info
	class_ref 4356407 // camera_info_t
	class_ref 4356535 // camera_device_status
	class_ref 4356663 // camera_device_status_t
	class_ref 4356791 // torch_mode_status
	class_ref 4356919 // torch_mode_status_t
	class_ref 4357047 // camera_module_callbacks
	class_ref 4357175 // camera_module_callbacks_t
	class_ref 4357303 // camera_module
	class_ref 4357431 // camera_module_t
      end
    end

    artifact 1843511 "consumerir"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4357559 // consumerir_freq_range
	class_ref 4357687 // consumerir_freq_range_t
	class_ref 4357815 // consumerir_module
	class_ref 4357943 // consumerir_module_t
	class_ref 4358071 // consumerir_device
	class_ref 4358199 // consumerir_device_t
      end
    end

    artifact 1843639 "context_hub"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4358327 // mem_range_t
	class_ref 4358455 // nano_app_binary_t
	class_ref 4358583 // hub_app_info
	class_ref 4358711 // context_sensor_e
	class_ref 4358839 // physical_sensor_description_t
	class_ref 4358967 // connected_sensor_t
	class_ref 4359095 // hub_message_t
	class_ref 4359223 // context_hub_t
	class_ref 4359351 // status_response_t
	class_ref 4359479 // apps_enable_request_t
	class_ref 4359607 // apps_disable_request_t
	class_ref 4359735 // load_app_request_t
	class_ref 4359863 // unload_app_request_t
	class_ref 4359991 // query_apps_request_t
	class_ref 4360119 // hub_messages_e
	class_ref 4360247 // context_hub_callback
	class_ref 4360375 // context_hub_module_t
      end
    end

    artifact 1843767 "fingerprint"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4360503 // fingerprint_msg_type
	class_ref 4360631 // fingerprint_msg_type_t
	class_ref 4360759 // fingerprint_error
	class_ref 4360887 // fingerprint_error_t
	class_ref 4361015 // fingerprint_acquired_info
	class_ref 4361143 // fingerprint_acquired_info_t
	class_ref 4361271 // fingerprint_finger_id
	class_ref 4361399 // fingerprint_finger_id_t
	class_ref 4361527 // fingerprint_enroll
	class_ref 4361655 // fingerprint_enroll_t
	class_ref 4361783 // fingerprint_enumerated
	class_ref 4361911 // fingerprint_enumerated_t
	class_ref 4362039 // fingerprint_removed
	class_ref 4362167 // fingerprint_removed_t
	class_ref 4362295 // fingerprint_acquired
	class_ref 4362423 // fingerprint_acquired_t
	class_ref 4362551 // fingerprint_authenticated
	class_ref 4362679 // fingerprint_authenticated_t
	class_ref 4362807 // fingerprint_msg
	class_ref 4362935 // fingerprint_msg_t
	class_ref 4363063 // fingerprint_notify_t
	class_ref 4363191 // fingerprint_device
	class_ref 4363319 // fingerprint_device_t
	class_ref 4363447 // fingerprint_module
	class_ref 4363575 // fingerprint_module_t
      end
    end

    artifact 1843895 "fused_location"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4363703 // FlpUtcTime
	class_ref 4363831 // FlpLocation
	class_ref 4363959 // ThreadEvent
	class_ref 4364087 // flp_location_callback
	class_ref 4364215 // flp_acquire_wakelock
	class_ref 4364343 // flp_release_wakelock
	class_ref 4364471 // flp_set_thread_event
	class_ref 4364599 // flp_capabilities_callback
	class_ref 4364727 // flp_status_callback
	class_ref 4364855 // FlpCallbacks
	class_ref 4364983 // FlpBatchOptions
	class_ref 4365111 // FlpLocationInterface
	class_ref 4365239 // flp_device_t
	class_ref 4365367 // report_data
	class_ref 4365495 // FlpDiagnosticCallbacks
	class_ref 4365623 // FlpDiagnosticInterface
	class_ref 4365751 // FlpDeviceContextInterface
	class_ref 4365879 // flp_geofence_transition_callback
	class_ref 4366007 // flp_geofence_monitor_status_callback
	class_ref 4366135 // flp_geofence_add_callback
	class_ref 4366263 // flp_geofence_remove_callback
	class_ref 4366391 // flp_geofence_pause_callback
	class_ref 4366519 // flp_geofence_resume_callback
	class_ref 4366647 // FlpGeofenceCallbacks
	class_ref 4366775 // GeofenceType
	class_ref 4366903 // GeofenceCircle
	class_ref 4367031 // GeofenceData
	class_ref 4367159 // GeofenceOptions
	class_ref 4367287 // Geofence
	class_ref 4367415 // FlpGeofencingInterface
      end
    end

    artifact 1844023 "gatekeeper"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4367543 // gatekeeper_device
	class_ref 4367671 // gatekeeper_device_t
      end
    end

    artifact 1844151 "gps"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4367799 // GpsPositionMode
	class_ref 4367927 // GpsPositionRecurrence
	class_ref 4368055 // GpsStatusValue
	class_ref 4368183 // GpsLocationFlags
	class_ref 4368311 // GpsAidingData
	class_ref 4368439 // AGpsType
	class_ref 4368567 // AGpsSetIDType
	class_ref 4368695 // ApnIpType
	class_ref 4368823 // GpsNiType
	class_ref 4368951 // GpsNiNotifyFlags
	class_ref 4369079 // GpsUserResponseType
	class_ref 4369207 // GpsNiEncodingType
	class_ref 4369335 // AGpsStatusValue
	class_ref 4369463 // AGpsRefLocationType
	class_ref 4369591 // GpsClockFlags
	class_ref 4369719 // GnssClockFlags
	class_ref 4369847 // GpsClockType
	class_ref 4369975 // GpsMeasurementFlags
	class_ref 4370103 // GnssMeasurementFlags
	class_ref 4370231 // GpsLossOfLock
	class_ref 4370359 // GpsMultipathIndicator
	class_ref 4370487 // GnssMultipathIndicator
	class_ref 4370615 // GpsMeasurementState
	class_ref 4370743 // GnssMeasurementState
	class_ref 4370871 // GpsAccumulatedDeltaRangeState
	class_ref 4370999 // GnssAccumulatedDeltaRangeState
	class_ref 4371127 // GpsNavigationMessageType
	class_ref 4371255 // GnssNavigationMessageType
	class_ref 4371383 // NavigationMessageStatus
	class_ref 4371511 // GnssSvFlags
	class_ref 4371639 // GnssConstellationType
	class_ref 4371767 // GpsLocation
	class_ref 4371895 // GpsStatus
	class_ref 4372023 // GpsSvInfo
	class_ref 4372151 // GnssSvInfo
	class_ref 4372279 // GpsSvStatus
	class_ref 4372407 // GnssSvStatus
	class_ref 4372535 // AGpsRefLocationCellID
	class_ref 4372663 // AGpsRefLocationMac
	class_ref 4372791 // AGpsRefLocation
	class_ref 4372919 // gps_location_callback
	class_ref 4373047 // gps_status_callback
	class_ref 4373175 // gps_sv_status_callback
	class_ref 4373303 // gnss_sv_status_callback
	class_ref 4373431 // gps_nmea_callback
	class_ref 4373559 // gps_set_capabilities
	class_ref 4373687 // gps_acquire_wakelock
	class_ref 4373815 // gps_release_wakelock
	class_ref 4373943 // gps_request_utc_time
	class_ref 4374071 // gps_create_thread
	class_ref 4374199 // GnssSystemInfo
	class_ref 4374327 // gnss_set_system_info
	class_ref 4374455 // GpsCallbacks
	class_ref 4374583 // GpsInterface
	class_ref 4374711 // gps_xtra_download_request
	class_ref 4374839 // GpsXtraCallbacks
	class_ref 4374967 // GpsXtraInterface
	class_ref 4375095 // GpsDebugInterface
	class_ref 4375223 // AGpsStatus
	class_ref 4375351 // agps_status_callback
	class_ref 4375479 // AGpsCallbacks
	class_ref 4375607 // AGpsInterface
	class_ref 4375735 // DerEncodedCertificate
	class_ref 4375863 // Sha1CertificateFingerprint
	class_ref 4375991 // SuplCertificateInterface
	class_ref 4376119 // GpsNiNotification
	class_ref 4376247 // gps_ni_notify_callback
	class_ref 4376375 // GpsNiCallbacks
	class_ref 4376503 // GpsNiInterface
	class_ref 4376631 // gps_device_t
	class_ref 4376759 // agps_ril_request_set_id
	class_ref 4376887 // agps_ril_request_ref_loc
	class_ref 4377015 // AGpsRilCallbacks
	class_ref 4377143 // AGpsRilInterface
	class_ref 4377271 // gps_geofence_transition_callback
	class_ref 4377399 // gps_geofence_status_callback
	class_ref 4377527 // gps_geofence_add_callback
	class_ref 4377655 // gps_geofence_remove_callback
	class_ref 4377783 // gps_geofence_pause_callback
	class_ref 4377911 // gps_geofence_resume_callback
	class_ref 4378039 // GpsGeofenceCallbacks
	class_ref 4378167 // GpsGeofencingInterface
	class_ref 4378295 // GpsClock
	class_ref 4378423 // GnssClock
	class_ref 4378551 // GpsMeasurement
	class_ref 4378679 // GnssMeasurement
	class_ref 4378807 // GpsData
	class_ref 4378935 // GnssData
	class_ref 4379063 // gps_measurement_callback
	class_ref 4379191 // gnss_measurement_callback
	class_ref 4379319 // GpsMeasurementCallbacks
	class_ref 4379447 // GpsMeasurementInterface
	class_ref 4379575 // GpsNavigationMessage
	class_ref 4379703 // GnssNavigationMessage
	class_ref 4379831 // gps_navigation_message_callback
	class_ref 4379959 // gnss_navigation_message_callback
	class_ref 4380087 // GpsNavigationMessageCallbacks
	class_ref 4380215 // GpsNavigationMessageInterface
	class_ref 4380343 // GnssConfigurationInterface
      end
    end

    artifact 1844279 "gps_internal"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4380471 // AGpsStatus_v1
	class_ref 4380599 // AGpsStatus_v2
	class_ref 4380727 // AGpsInterface_v1
      end
    end

    artifact 1844407 "gralloc"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4199095 // gralloc_module_t
	class_ref 4220087 // alloc_device_t
      end
    end

    artifact 1844535 "hardware"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4305335 // hw_module_t
	class_ref 4380855 // hw_module_methods_t
	class_ref 4305975 // hw_device_t
      end
    end

    artifact 1844663 "hdmi_cec"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4380983 // cec_logical_address
	class_ref 4381111 // cec_logical_address_t
	class_ref 4381239 // cec_message_type
	class_ref 4381367 // abort_reason
	class_ref 4381495 // anonymous155
	class_ref 4381623 // anonymous156
	class_ref 4381751 // anonymous157
	class_ref 4381879 // hdmi_port_type
	class_ref 4382007 // hdmi_port_type_t
	class_ref 4382135 // anonymous158
	class_ref 4382263 // cec_message
	class_ref 4382391 // cec_message_t
	class_ref 4382519 // hotplug_event
	class_ref 4382647 // hotplug_event_t
	class_ref 4382775 // tx_status_event
	class_ref 4382903 // tx_status_event_t
	class_ref 4383031 // hdmi_event
	class_ref 4383415 // hdmi_port_info
	class_ref 4383543 // hdmi_port_info_t
	class_ref 4383671 // event_callback_t
	class_ref 4383799 // hdmi_cec_module
	class_ref 4383927 // hdmi_module_t
	class_ref 4383159 // hdmi_cec_device
	class_ref 4384055 // hdmi_cec_device_t
      end
    end

    artifact 1844791 "hw_auth_token"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4384183 // hw_authenticator_type_t
      end
    end

    artifact 1844919 "hwcomposer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4384311 // hwc_display_t
	class_ref 4384439 // hwc_surface_t
	class_ref 4384567 // anonymous159
	class_ref 4384695 // hwc_display_contents_1
	class_ref 4384823 // hwc_procs
	class_ref 4222647 // hwc_procs_t
	class_ref 4384951 // hwc_module
	class_ref 4385079 // hwc_module_t
	class_ref 4385207 // hwc_composer_device_1
      end
    end

    artifact 1845047 "hwcomposer2"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4385335 // hwc2_blend_mode_t
	class_ref 4385463 // hwc2_callback_descriptor_t
	class_ref 4385591 // hwc2_capability_t
	class_ref 4385719 // hwc2_composition_t
	class_ref 4385847 // hwc2_connection_t
	class_ref 4385975 // hwc2_display_request_t
	class_ref 4386103 // hwc2_display_type_t
	class_ref 4386231 // hwc2_error_t
	class_ref 4386359 // hwc2_function_descriptor_t
	class_ref 4386487 // hwc2_layer_request_t
	class_ref 4386615 // hwc2_power_mode_t
	class_ref 4386743 // hwc2_vsync_t
	class_ref 4386871 // hwc2_callback_data_t
	class_ref 4386999 // hwc2_config_t
	class_ref 4387127 // hwc2_display_t
	class_ref 4387255 // hwc2_layer_t
	class_ref 4387383 // hwc2_device
	class_ref 4387511 // hwc2_device_t
	class_ref 4387639 // HWC2_PFN_HOTPLUG
	class_ref 4387767 // HWC2_PFN_REFRESH
	class_ref 4387895 // HWC2_PFN_VSYNC
	class_ref 4388023 // HWC2_PFN_CREATE_VIRTUAL_DISPLAY
	class_ref 4388151 // HWC2_PFN_DESTROY_VIRTUAL_DISPLAY
	class_ref 4388279 // HWC2_PFN_DUMP
	class_ref 4388407 // HWC2_PFN_GET_MAX_VIRTUAL_DISPLAY_COUNT
	class_ref 4388535 // HWC2_PFN_REGISTER_CALLBACK
	class_ref 4388663 // HWC2_PFN_ACCEPT_DISPLAY_CHANGES
	class_ref 4388791 // HWC2_PFN_CREATE_LAYER
	class_ref 4388919 // HWC2_PFN_DESTROY_LAYER
	class_ref 4389047 // HWC2_PFN_GET_ACTIVE_CONFIG
	class_ref 4389175 // HWC2_PFN_GET_CHANGED_COMPOSITION_TYPES
	class_ref 4389303 // HWC2_PFN_GET_CLIENT_TARGET_SUPPORT
	class_ref 4389431 // HWC2_PFN_GET_COLOR_MODES
	class_ref 4389559 // HWC2_PFN_GET_DISPLAY_ATTRIBUTE
	class_ref 4389687 // HWC2_PFN_GET_DISPLAY_CONFIGS
	class_ref 4389815 // HWC2_PFN_GET_DISPLAY_NAME
	class_ref 4389943 // HWC2_PFN_GET_DISPLAY_REQUESTS
	class_ref 4390071 // HWC2_PFN_GET_DISPLAY_TYPE
	class_ref 4390199 // HWC2_PFN_GET_DOZE_SUPPORT
	class_ref 4390327 // HWC2_PFN_GET_HDR_CAPABILITIES
	class_ref 4390455 // HWC2_PFN_GET_RELEASE_FENCES
	class_ref 4390583 // HWC2_PFN_PRESENT_DISPLAY
	class_ref 4390711 // HWC2_PFN_SET_ACTIVE_CONFIG
	class_ref 4390839 // HWC2_PFN_SET_CLIENT_TARGET
	class_ref 4390967 // HWC2_PFN_SET_COLOR_MODE
	class_ref 4391095 // HWC2_PFN_SET_COLOR_TRANSFORM
	class_ref 4391223 // HWC2_PFN_SET_OUTPUT_BUFFER
	class_ref 4391351 // HWC2_PFN_SET_POWER_MODE
	class_ref 4391479 // HWC2_PFN_SET_VSYNC_ENABLED
	class_ref 4391607 // HWC2_PFN_VALIDATE_DISPLAY
	class_ref 4391735 // HWC2_PFN_SET_CURSOR_POSITION
	class_ref 4391863 // HWC2_PFN_SET_LAYER_BUFFER
	class_ref 4391991 // HWC2_PFN_SET_LAYER_SURFACE_DAMAGE
	class_ref 4392119 // HWC2_PFN_SET_LAYER_BLEND_MODE
	class_ref 4392247 // HWC2_PFN_SET_LAYER_COLOR
	class_ref 4392375 // HWC2_PFN_SET_LAYER_COMPOSITION_TYPE
	class_ref 4392503 // HWC2_PFN_SET_LAYER_DATASPACE
	class_ref 4392631 // HWC2_PFN_SET_LAYER_DISPLAY_FRAME
	class_ref 4392759 // HWC2_PFN_SET_LAYER_PLANE_ALPHA
	class_ref 4392887 // HWC2_PFN_SET_LAYER_SIDEBAND_STREAM
	class_ref 4393015 // HWC2_PFN_SET_LAYER_SOURCE_CROP
	class_ref 4393143 // HWC2_PFN_SET_LAYER_TRANSFORM
	class_ref 4393271 // HWC2_PFN_SET_LAYER_VISIBLE_REGION
	class_ref 4393399 // HWC2_PFN_SET_LAYER_Z_ORDER
      end
    end

    artifact 1845175 "hwcomposer_defs"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4393527 // hwc_frect
	class_ref 4216503 // hwc_frect_t
	class_ref 4393655 // hwc_rect
	class_ref 4216631 // hwc_rect_t
	class_ref 4393783 // hwc_region
	class_ref 4393911 // hwc_region_t
	class_ref 4394039 // hwc_transform_t
	class_ref 4394167 // anonymous160
	class_ref 4394295 // anonymous161
	class_ref 4394423 // anonymous162
	class_ref 4394551 // anonymous163
	class_ref 4394679 // anonymous164
	class_ref 4394807 // anonymous165
	class_ref 4394935 // anonymous166
	class_ref 4395063 // anonymous167
	class_ref 4395191 // anonymous168
	class_ref 4395319 // anonymous169
	class_ref 4395447 // anonymous170
      end
    end

    artifact 1845303 "input"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4395575 // input_host_t
	class_ref 4395703 // input_device_handle_t
	class_ref 4395831 // input_device_identifier_t
	class_ref 4395959 // input_device_definition_t
	class_ref 4396087 // input_report_definition_t
	class_ref 4396215 // input_report_t
	class_ref 4396343 // input_collection_t
	class_ref 4396471 // input_property_map_t
	class_ref 4396599 // input_property_t
	class_ref 4396727 // input_usage_t
	class_ref 4396855 // input_collection_id
	class_ref 4396983 // input_collection_id_t
	class_ref 4397111 // input_message_t
	class_ref 4397239 // input_host_callbacks
	class_ref 4397367 // input_host_callbacks_t
	class_ref 4397623 // input_module_t
	class_ref 4397495 // input_module
      end
    end

    artifact 1845431 "keymaster0"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4397751 // keymaster0_device_t
      end
    end

    artifact 1845559 "keymaster1"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4397879 // keymaster1_device_t
      end
    end

    artifact 1845687 "keymaster2"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4398007 // keymaster2_device_t
      end
    end

    artifact 1845815 "keymaster_common"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4398135 // anonymous171
	class_ref 4398263 // keymaster_keypair_t
	class_ref 4398391 // keymaster_rsa_keygen_params_t
	class_ref 4398519 // keymaster_dsa_keygen_params_t
	class_ref 4398647 // keymaster_ec_keygen_params_t
	class_ref 4398775 // keymaster_digest_algorithm_t
	class_ref 4398903 // keymaster_rsa_padding_t
	class_ref 4399031 // keymaster_dsa_sign_params_t
	class_ref 4399159 // keymaster_ec_sign_params_t
	class_ref 4399287 // keymaster_rsa_sign_params_t
      end
    end

    artifact 1845943 "keymaster_defs"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4399415 // keymaster_tag_type_t
	class_ref 4399543 // keymaster_tag_t
	class_ref 4399671 // keymaster_algorithm_t
	class_ref 4399799 // keymaster_block_mode_t
	class_ref 4399927 // keymaster_padding_t
	class_ref 4400055 // keymaster_digest_t
	class_ref 4400183 // keymaster_kdf_t
	class_ref 4400311 // keymaster_ec_curve_t
	class_ref 4400439 // keymaster_key_origin_t
	class_ref 4400567 // keymaster_key_blob_usage_requirements_t
	class_ref 4400695 // keymaster_purpose_t
	class_ref 4400823 // keymaster_blob_t
	class_ref 4400951 // keymaster_key_param_t
	class_ref 4401079 // keymaster_key_param_set_t
	class_ref 4401207 // keymaster_key_characteristics_t
	class_ref 4401335 // keymaster_key_blob_t
	class_ref 4401463 // keymaster_cert_chain_t
	class_ref 4401591 // keymaster_verified_boot_t
	class_ref 4401719 // keymaster_security_level_t
	class_ref 4401847 // keymaster_key_format_t
	class_ref 4401975 // keymaster_operation_handle_t
	class_ref 4402103 // keymaster_error_t
      end
    end

    artifact 1846071 "lights"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4402231 // light_device_t
      end
    end

    artifact 1846199 "local_time_hal"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4402359 // local_time_module
	class_ref 4402487 // local_time_hw_device
	class_ref 4402615 // local_time_hw_device_t
      end
    end

    artifact 1846327 "memtrack"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4402743 // memtrack_record
	class_ref 4402871 // memtrack_module
	class_ref 4402999 // memtrack_module_t
      end
    end

    artifact 1846455 "nfc"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4403127 // nfc_event_t
	class_ref 4403255 // anonymous172
	class_ref 4403383 // nfc_status_t
	class_ref 4403511 // anonymous173
	class_ref 4403639 // nfc_stack_callback_t
	class_ref 4403767 // nfc_stack_data_callback_t
	class_ref 4403895 // nfc_nci_device
	class_ref 4404023 // nfc_nci_device_t
	class_ref 4404151 // nfc_module_t
	class_ref 4404279 // nfc_pn544_linktype
	class_ref 4404407 // nfc_pn544_device_t
      end
    end

    artifact 1846583 "nfc_tag"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4404535 // nfc_tag_device
	class_ref 4404663 // nfc_tag_device_t
      end
    end

    artifact 1846711 "nvram"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4404791 // nvram_control_t
	class_ref 4404919 // nvram_module
	class_ref 4405047 // nvram_device
	class_ref 4405175 // nvram_device_t
      end
    end

    artifact 1846839 "power"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4405303 // feature_t
	class_ref 4405431 // power_state_voter_t
	class_ref 4405559 // power_state_platform_sleep_state_t
	class_ref 4405687 // power_module
	class_ref 4405815 // power_module_t
      end
    end

    artifact 1846967 "radio"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4405943 // radio_callback_t
	class_ref 4406071 // radio_tuner
	class_ref 4406199 // radio_hw_device
	class_ref 4406327 // radio_hw_device_t
      end
    end

    artifact 1847095 "sensors"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4406455 // anonymous174
	class_ref 4406583 // anonymous175
	class_ref 4406711 // anonymous176
	class_ref 4406839 // sensors_vec_t
	class_ref 4406967 // uncalibrated_event_t
	class_ref 4407095 // meta_data_event
	class_ref 4407223 // meta_data_event_t
	class_ref 4407351 // dynamic_sensor_meta_event
	class_ref 4407479 // dynamic_sensor_meta_event_t
	class_ref 4407607 // heart_rate_event_t
	class_ref 4407735 // additional_info_event_t
	class_ref 4407863 // additional_info_type
	class_ref 4407991 // additional_info_type_t
	class_ref 3803447 // sensors_event_t
	class_ref 4408119 // sensors_meta_data_event_t
	class_ref 4408247 // sensors_module_t
	class_ref 4300215 // sensor_t
	class_ref 4408375 // sensors_poll_device_t
	class_ref 4408503 // sensors_poll_device_1
      end
    end

    artifact 1847223 "sound_trigger"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4408759 // recognition_callback_t
	class_ref 4408887 // sound_model_callback_t
	class_ref 4409015 // sound_trigger_hw_device
	class_ref 4409143 // sound_trigger_hw_device_t
      end
    end

    artifact 1847351 "thermal"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4409271 // cooling_type
	class_ref 4409399 // temperature_t
	class_ref 4409527 // cooling_device_t
	class_ref 4409655 // cpu_usage_t
	class_ref 4409783 // thermal_module
	class_ref 4409911 // thermal_module_t
      end
    end

    artifact 1847479 "tv_input"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4410039 // anonymous177
	class_ref 4410167 // tv_input_type_t
	class_ref 4410295 // tv_input_device_info
	class_ref 4410551 // anonymous178
	class_ref 4410679 // tv_input_event_type_t
	class_ref 4410807 // tv_input_capture_result
	class_ref 4410935 // tv_input_capture_result_t
	class_ref 4411063 // tv_input_event
	class_ref 4411319 // tv_input_callback_ops
	class_ref 4411447 // tv_input_callback_ops_t
	class_ref 4411575 // anonymous179
	class_ref 4411703 // tv_stream_type_t
	class_ref 4411831 // tv_stream_config
	class_ref 4411959 // tv_stream_config_t
	class_ref 4412087 // buffer_producer_stream
	class_ref 4412215 // buffer_producer_stream_t
	class_ref 4412343 // tv_stream
	class_ref 4412599 // tv_input_device
	class_ref 4412727 // tv_input_device_t
      end
    end

    artifact 1847607 "vehicle"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4412855 // vehicle_radio_consts
	class_ref 4412983 // vehicle_audio_focus_request
	class_ref 4413111 // vehicle_audio_focus_state
	class_ref 4413239 // vehicle_audio_stream_flag
	class_ref 4413367 // vehicle_audio_stream
	class_ref 4413495 // vehicle_audio_ext_focus_flag
	class_ref 4413623 // vehicle_audio_focus_index
	class_ref 4413751 // vehicle_audio_context_flag
	class_ref 4413879 // vehicle_audio_volume_state
	class_ref 4414007 // vehicle_audio_volume_index
	class_ref 4414135 // vehicle_audio_volume_limit_index
	class_ref 4414263 // vehicle_audio_routing_policy_index
	class_ref 4414391 // vehicle_audio_hw_variant_config_flag
	class_ref 4414519 // vehicle_ap_power_state_config_flag
	class_ref 4414647 // vehicle_ap_power_state
	class_ref 4414775 // vehicle_ap_power_state_shutdown_param
	class_ref 4414903 // vehicle_ap_power_set_state
	class_ref 4415031 // vehicle_ap_power_state_index
	class_ref 4415159 // vehicle_ap_power_bootup_reason
	class_ref 4415287 // vehicle_hw_key_input_action
	class_ref 4415415 // vehicle_display
	class_ref 4415543 // vehicle_instument_cluster_type
	class_ref 4415671 // vehicle_value_type
	class_ref 4415799 // vehicle_unit_type
	class_ref 4415927 // vehicle_prop_change_mode
	class_ref 4416055 // vehicle_prop_access
	class_ref 4416183 // vehicle_permission_model
	class_ref 4416311 // vehicle_driving_status
	class_ref 4416439 // vehicle_gear
	class_ref 4416567 // vehicle_zone
	class_ref 4416695 // vehicle_seat
	class_ref 4416823 // vehicle_window
	class_ref 4416951 // vehicle_door
	class_ref 4417079 // vehicle_mirror
	class_ref 4417207 // vehicle_turn_signal
	class_ref 4417335 // vehicle_boolean
	class_ref 4417463 // vehicle_boolean_t
	class_ref 4417591 // vehicle_str
	class_ref 4417719 // vehicle_str_t
	class_ref 4417847 // vehicle_bytes_t
	class_ref 4417975 // vehicle_prop_config
	class_ref 4418231 // vehicle_hvac
	class_ref 4418487 // vehicle_value
	class_ref 4418615 // vehicle_value_t
	class_ref 4418743 // vehicle_prop_value
	class_ref 4418999 // vehicle_event_callback_fn
	class_ref 4419127 // vehicle_property_operation
	class_ref 4419255 // vehicle_error_callback_fn
	class_ref 4419383 // vehicle_module
	class_ref 4419511 // vehicle_module_t
	class_ref 4419639 // vehicle_hw_device
	class_ref 4419767 // vehicle_hw_device_t
      end
    end

    artifact 1847735 "vehicle_camera"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4419895 // vehicle_camera_state_t
	class_ref 4420023 // anonymous180
	class_ref 4420151 // vehicle_camera_cap_t
	class_ref 4420279 // vehicle_camera_module_t
	class_ref 4420407 // vehicle_camera_device_t
      end
    end

    artifact 1847863 "vibrator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4420535 // vibrator_device
	class_ref 4420663 // vibrator_device_t
      end
    end
  end
end
