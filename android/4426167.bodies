class SensorEventQueue
!!!45001143.cpp!!!	SensorEventQueue(in capacity : int)
    mCapacity = capacity;

    mStart = 0;
    mSize = 0;
    mData = new sensors_event_t[mCapacity];
    pthread_cond_init(&mSpaceAvailableCondition, NULL);
!!!45001271.cpp!!!	~SensorEventQueue()
    delete[] mData;
    mData = NULL;
    pthread_cond_destroy(&mSpaceAvailableCondition);
!!!45001399.cpp!!!	getWritableRegion(in requestedLength : int, inout out : sensors_event_t) : int
    if (mSize == mCapacity || requestedLength <= 0) {
        *out = NULL;
        return 0;
    }
    // Start writing after the last readable record.
    int firstWritable = (mStart + mSize) % mCapacity;

    int lastWritable = firstWritable + requestedLength - 1;

    // Don't go past the end of the data array.
    if (lastWritable > mCapacity - 1) {
        lastWritable = mCapacity - 1;
    }
    // Don't go into the readable region.
    if (firstWritable < mStart && lastWritable >= mStart) {
        lastWritable = mStart - 1;
    }
    *out = &mData[firstWritable];
    return lastWritable - firstWritable + 1;
!!!45001527.cpp!!!	markAsWritten(in count : int) : void
    mSize += count;
!!!45001655.cpp!!!	getSize() : int
    return mSize;
!!!45001783.cpp!!!	peek() : sensors_event_t
    if (mSize == 0) return NULL;
    return &mData[mStart];
!!!45001911.cpp!!!	dequeue() : void
    if (mSize == 0) return;
    if (mSize == mCapacity) {
        pthread_cond_broadcast(&mSpaceAvailableCondition);
    }
    mSize--;
    mStart = (mStart + 1) % mCapacity;
!!!45002039.cpp!!!	waitForSpace(inout mutex : pthread_mutex_t) : bool
    bool waited = false;
    while (mSize == mCapacity) {
        waited = true;
        pthread_cond_wait(&mSpaceAvailableCondition, mutex);
    }
    return waited;
