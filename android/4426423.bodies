class Metadata
!!!45007287.cpp!!!	~Metadata()
    replace(NULL);
!!!45007415.cpp!!!	init(in metadata : camera_metadata_t) : int
    camera_metadata_t* tmp;

    if (!validate_camera_metadata_structure(metadata, NULL))
        return -EINVAL;

    tmp = clone_camera_metadata(metadata);
    if (tmp == NULL)
        return -EINVAL;

    replace(tmp);
    return 0;
!!!45007543.cpp!!!	addUInt8(in tag : uint32_t, in count : int, in data : uint8_t) : int
    if (!validate(tag, TYPE_BYTE, count)) return -EINVAL;
    return add(tag, count, data);
!!!45007671.cpp!!!	add1UInt8(in tag : uint32_t, in data : uint8_t) : int
    return addUInt8(tag, 1, &data);
!!!45007799.cpp!!!	addInt32(in tag : uint32_t, in count : int, in data : int32_t) : int
    if (!validate(tag, TYPE_INT32, count)) return -EINVAL;
    return add(tag, count, data);
!!!45007927.cpp!!!	addFloat(in tag : uint32_t, in count : int, in data : float) : int
    if (!validate(tag, TYPE_FLOAT, count)) return -EINVAL;
    return add(tag, count, data);
!!!45008055.cpp!!!	addInt64(in tag : uint32_t, in count : int, in data : int64_t) : int
    if (!validate(tag, TYPE_INT64, count)) return -EINVAL;
    return add(tag, count, data);
!!!45008183.cpp!!!	addDouble(in tag : uint32_t, in count : int, in data : double) : int
    if (!validate(tag, TYPE_DOUBLE, count)) return -EINVAL;
    return add(tag, count, data);
!!!45008311.cpp!!!	addRational(in tag : uint32_t, in count : int, in data : camera_metadata_rational_t) : int
    if (!validate(tag, TYPE_RATIONAL, count)) return -EINVAL;
    return add(tag, count, data);
!!!45008439.cpp!!!	get() : camera_metadata_t
    return mData;
!!!45008567.cpp!!!	replace(inout m : camera_metadata_t) : void
    if (m == mData) {
        return;
    }
    if (mData)
        free_camera_metadata(mData);
    mData = m;
!!!45008695.cpp!!!	validate(in tag : uint32_t, in tag_type : int, in count : int) : bool
    if (get_camera_metadata_tag_type(tag) < 0) {
        ALOGE("%s: Invalid metadata entry tag: %d", __func__, tag);
        return false;
    }
    if (tag_type < 0 || tag_type >= NUM_TYPES) {
        ALOGE("%s: Invalid metadata entry tag type: %d", __func__, tag_type);
        return false;
    }
    if (tag_type != get_camera_metadata_tag_type(tag)) {
        ALOGE("%s: Tag %d called with incorrect type: %s(%d)", __func__, tag,
                camera_metadata_type_names[tag_type], tag_type);
        return false;
    }
    if (count < 1) {
        ALOGE("%s: Invalid metadata entry count: %d", __func__, count);
        return false;
    }
    return true;
!!!45008823.cpp!!!	add(in tag : uint32_t, in count : int, in tag_data : void) : int
    // Opportunistically attempt to add if metadata has room for it
    if (!add_camera_metadata_entry(mData, tag, tag_data, count)) {
        return 0;
    }

    int res;
    camera_metadata_t* tmp;
    int tag_type = get_camera_metadata_tag_type(tag);
    size_t size = calculate_camera_metadata_entry_data_size(tag_type, count);
    size_t entry_capacity = get_camera_metadata_entry_count(mData) + 1;
    size_t data_capacity = get_camera_metadata_data_count(mData) + size;

    // Double new dimensions to minimize future reallocations
    tmp = allocate_camera_metadata(entry_capacity * 2, data_capacity * 2);
    if (tmp == NULL) {
        ALOGE("%s: Failed to allocate new metadata with %zu entries, %zu data",
                __func__, entry_capacity, data_capacity);
        return -ENOMEM;
    }
    // Append the current metadata to the new (empty) metadata
    res = append_camera_metadata(tmp, mData);
    if (res) {
        ALOGE("%s: Failed to append old metadata %p to new %p",
                __func__, mData, tmp);
        return res;
    }
    // Add the remaining new item
    res = add_camera_metadata_entry(tmp, tag, tag_data, count);
    if (res) {
        ALOGE("%s: Failed to add new entry (%d, %p, %d) to metadata %p",
                __func__, tag, tag_data, count, tmp);
        return res;
    }

    replace(tmp);
    return 0;
