class CameraHAL
!!!45005751.cpp!!!	CameraHAL()
    // Should not allocate the camera devices for now, as it is unclear if the device is plugged.

    // Start hotplug thread
    mHotplugThread = new HotplugThread(this);
    mHotplugThread->run("usb-camera-hotplug");
!!!45005879.cpp!!!	~CameraHAL()
    // Stop hotplug thread
    {
        android::Mutex::Autolock al(mModuleLock);
        if (mHotplugThread != NULL) {
            mHotplugThread->requestExit();
        }

        // Delete camera device from mCameras
    }

    // Joining done without holding mLock, otherwise deadlocks may ensue
    // as the threads try to access parent states.
    if (mHotplugThread != NULL) {
        mHotplugThread->join();
    }

    delete mHotplugThread;
!!!45006007.cpp!!!	getNumberOfCameras() : int
    android::Mutex::Autolock al(mModuleLock);
    ALOGV("%s: %d", __func__, mCameras.size());
    return static_cast<int>(mCameras.size());
!!!45006135.cpp!!!	getCameraInfo(in id : int, inout info : camera_info) : int
    android::Mutex::Autolock al(mModuleLock);
    ALOGV("%s: camera id %d: info=%p", __func__, id, info);
    if (id < 0 || id >= static_cast<int>(mCameras.size())) {
        ALOGE("%s: Invalid camera id %d", __func__, id);
        return -ENODEV;
    }

    return mCameras[id]->getInfo(info);
!!!45006263.cpp!!!	setCallbacks(in callbacks : camera_module_callbacks_t) : int
    ALOGV("%s : callbacks=%p", __func__, callbacks);
    mCallbacks = callbacks;
    return 0;
!!!45006519.cpp!!!	open(in mod : hw_module_t, in name : char, inout dev : hw_device_t) : int
    int id;
    char *nameEnd;

    android::Mutex::Autolock al(mModuleLock);
    ALOGV("%s: module=%p, name=%s, device=%p", __func__, mod, name, dev);
    if (*name == '\0') {
        ALOGE("%s: Invalid camera id name is NULL", __func__);
        return -EINVAL;
    }
    id = strtol(name, &nameEnd, 10);
    if (*nameEnd != '\0') {
        ALOGE("%s: Invalid camera id name %s", __func__, name);
        return -EINVAL;
    } else if (id < 0 || id >= static_cast<int>(mCameras.size())) {
        ALOGE("%s: Invalid camera id %d", __func__, id);
        return -ENODEV;
    }
    return mCameras[id]->open(mod, dev);
