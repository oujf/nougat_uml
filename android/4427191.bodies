class MetadataQueue
!!!45012279.cpp!!!	MetadataQueue()
    camera2_request_queue_src_ops::dequeue_request = consumer_dequeue;
    camera2_request_queue_src_ops::request_count = consumer_buffer_count;
    camera2_request_queue_src_ops::free_request = consumer_free;

    camera2_frame_queue_dst_ops::dequeue_frame = producer_dequeue;
    camera2_frame_queue_dst_ops::cancel_frame = producer_cancel;
    camera2_frame_queue_dst_ops::enqueue_frame = producer_enqueue;
!!!45012407.cpp!!!	~MetadataQueue()
    freeBuffers(mEntries.begin(), mEntries.end());
    freeBuffers(mStreamSlot.begin(), mStreamSlot.end());
!!!45012535.cpp!!!	getToConsumerInterface() : camera2_request_queue_src_ops_t
    return static_cast<camera2_request_queue_src_ops_t*>(this);
!!!45012663.cpp!!!	setFromConsumerInterface(inout d : camera2_device_t) : void
    mDevice = d;
!!!45012791.cpp!!!	getToProducerInterface() : camera2_frame_queue_dst_ops_t
    return static_cast<camera2_frame_queue_dst_ops_t*>(this);
!!!45012919.cpp!!!	enqueue(inout buf : camera_metadata_t) : status_t
    Mutex::Autolock l(mMutex);

    mCount++;
    mEntries.push_back(buf);
    notEmpty.signal();

    if (mSignalConsumer && mDevice != NULL) {
        mSignalConsumer = false;

        mMutex.unlock();
        ALOGV("%s: Signaling consumer", __FUNCTION__);
        mDevice->ops->notify_request_queue_not_empty(mDevice);
        mMutex.lock();
    }
    return OK;
!!!45013047.cpp!!!	dequeue(inout buf : camera_metadata_t, in incrementCount : bool = true) : status_t
    Mutex::Autolock l(mMutex);

    if (mCount == 0) {
        if (mStreamSlotCount == 0) {
            ALOGV("%s: Empty", __FUNCTION__);
            *buf = NULL;
            mSignalConsumer = true;
            return OK;
        }
        ALOGV("%s: Streaming %d frames to queue", __FUNCTION__,
              mStreamSlotCount);

        for (List<camera_metadata_t*>::iterator slotEntry = mStreamSlot.begin();
                slotEntry != mStreamSlot.end();
                slotEntry++ ) {
            size_t entries = get_camera_metadata_entry_count(*slotEntry);
            size_t dataBytes = get_camera_metadata_data_count(*slotEntry);

            camera_metadata_t *copy = allocate_camera_metadata(entries, dataBytes);
            append_camera_metadata(copy, *slotEntry);
            mEntries.push_back(copy);
        }
        mCount = mStreamSlotCount;
    }
    ALOGV("MetadataQueue: deque (%d buffers)", mCount);
    camera_metadata_t *b = *(mEntries.begin());
    mEntries.erase(mEntries.begin());

    if (incrementCount) {
        add_camera_metadata_entry(b,
                ANDROID_REQUEST_FRAME_COUNT,
                (void**)&mFrameCount, 1);
        mFrameCount++;
    }

    *buf = b;
    mCount--;

    return OK;
!!!45013175.cpp!!!	getBufferCount() : int
    Mutex::Autolock l(mMutex);
    if (mStreamSlotCount > 0) {
        return CAMERA2_REQUEST_QUEUE_IS_BOTTOMLESS;
    }
    return mCount;
!!!45013303.cpp!!!	waitForBuffer(in timeout : nsecs_t) : status_t
    Mutex::Autolock l(mMutex);
    status_t res;
    while (mCount == 0) {
        res = notEmpty.waitRelative(mMutex,timeout);
        if (res != OK) return res;
    }
    return OK;
!!!45013431.cpp!!!	setStreamSlot(inout buf : camera_metadata_t) : status_t
    if (buf == NULL) {
        freeBuffers(mStreamSlot.begin(), mStreamSlot.end());
        mStreamSlotCount = 0;
        return OK;
    }
    if (mStreamSlotCount > 1) {
        List<camera_metadata_t*>::iterator deleter = ++mStreamSlot.begin();
        freeBuffers(++mStreamSlot.begin(), mStreamSlot.end());
        mStreamSlotCount = 1;
    }
    if (mStreamSlotCount == 1) {
        free_camera_metadata( *(mStreamSlot.begin()) );
        *(mStreamSlot.begin()) = buf;
    } else {
        mStreamSlot.push_front(buf);
        mStreamSlotCount = 1;
    }
    return OK;
!!!45013559.cpp!!!	setStreamSlot(in bufs : List<camera_metadata_t*>) : status_t
    if (mStreamSlotCount > 0) {
        freeBuffers(mStreamSlot.begin(), mStreamSlot.end());
    }
    mStreamSlot = bufs;
    mStreamSlotCount = mStreamSlot.size();

    return OK;
!!!45013687.cpp!!!	freeBuffers(in start : List<camera_metadata_t*>::iterator, in end : List<camera_metadata_t*>::iterator) : status_t
    while (start != end) {
        free_camera_metadata(*start);
        start = mStreamSlot.erase(start);
    }
    return OK;
!!!45013815.cpp!!!	getInstance(in q : camera2_frame_queue_dst_ops_t) : MetadataQueue
    const MetadataQueue* cmq = static_cast<const MetadataQueue*>(q);
    return const_cast<MetadataQueue*>(cmq);
!!!45013943.cpp!!!	getInstance(in q : camera2_request_queue_src_ops_t) : MetadataQueue
    const MetadataQueue* cmq = static_cast<const MetadataQueue*>(q);
    return const_cast<MetadataQueue*>(cmq);
!!!45014071.cpp!!!	consumer_buffer_count(in q : camera2_request_queue_src_ops_t) : int
    MetadataQueue *queue = getInstance(q);
    return queue->getBufferCount();
!!!45014199.cpp!!!	consumer_dequeue(in q : camera2_request_queue_src_ops_t, inout buffer : camera_metadata_t) : int
    MetadataQueue *queue = getInstance(q);
    return queue->dequeue(buffer, true);
!!!45014327.cpp!!!	consumer_free(in q : camera2_request_queue_src_ops_t, inout old_buffer : camera_metadata_t) : int
    free_camera_metadata(old_buffer);
    return OK;
!!!45014455.cpp!!!	producer_dequeue(in q : camera2_frame_queue_dst_ops_t, in entries : size_t, in bytes : size_t, inout buffer : camera_metadata_t) : int
    camera_metadata_t *new_buffer =
            allocate_camera_metadata(entries, bytes);
    if (new_buffer == NULL) return NO_MEMORY;
    *buffer = new_buffer;
        return OK;
!!!45014583.cpp!!!	producer_cancel(in q : camera2_frame_queue_dst_ops_t, inout old_buffer : camera_metadata_t) : int
    free_camera_metadata(old_buffer);
    return OK;
!!!45014711.cpp!!!	producer_enqueue(in q : camera2_frame_queue_dst_ops_t, inout filled_buffer : camera_metadata_t) : int
    MetadataQueue *queue = getInstance(q);
    return queue->enqueue(filled_buffer);
