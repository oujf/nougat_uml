class TestForkerEventListener
!!!45021111.cpp!!!	TestForkerEventListener()
    mIsForked = false;
    mHasSucceeded = true;
    mTermSignal = 0;
!!!45021239.cpp!!!	OnTestStart(in test_info : ::testing::TestInfo) : void

    if (!TEST_EXTENSION_FORKING_ENABLED) {
        return;
    }

    pid_t childPid = fork();
    if (childPid != 0) {
        int status;
        waitpid(childPid, &status, /*options*/0);

        // terminated normally?
        mHasSucceeded = WIFEXITED(status);
        // terminate with return code 0 = test passed, 1 = test failed
        if (mHasSucceeded) {
          mHasSucceeded = WEXITSTATUS(status) == RETURN_CODE_PASSED;
        } else if (WIFSIGNALED(status)) {
          mTermSignal = WTERMSIG(status);
        }

        /* the test is then skipped by inserting the various
        TEST_EXTENSION_ macros in TestExtensions.h */

    } else {
        mIsForked = true;
    }
!!!45021367.cpp!!!	OnTestPartResult(in test_part_result : ::testing::TestPartResult) : void

    if (DEBUG_TEST_FORKER_EVENT_LISTENER) {
        printf("%s in %s:%d\n%s\n",
             test_part_result.failed() ? "*** Failure" : "Success",
             test_part_result.file_name(),
             test_part_result.line_number(),
             test_part_result.summary());
    }
!!!45021495.cpp!!!	OnTestEnd(in test_info : ::testing::TestInfo) : void

    if (!TEST_EXTENSION_FORKING_ENABLED) {
        return;
    }

    if (mIsForked) {
        exit(test_info.result()->Passed()
            ? RETURN_CODE_PASSED : RETURN_CODE_FAILED);
    } else if (!mHasSucceeded && mTermSignal != 0) {

      printf("*** Test %s.%s crashed with signal = %s\n",
             test_info.test_case_name(), test_info.name(),
             strsignal(mTermSignal));
    }

    //TODO: overload the default event listener to suppress this message
    // dynamically (e.g. by skipping OnTestPartResult after OnTestEnd )

    // trigger a test failure if the child has failed
    if (!mHasSucceeded) {
        ADD_FAILURE();
    }
    mTermSignal = 0;
