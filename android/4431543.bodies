class A2dpAudioInterface
!!!45033527.cpp!!!	~A2dpAudioInterface()
    closeOutputStream((AudioStreamOut *)mOutput);
    delete mHardwareInterface;
!!!45033655.cpp!!!	initCheck() : status_t
    if (mHardwareInterface == 0) return NO_INIT;
    return mHardwareInterface->initCheck();
!!!45033783.cpp!!!	setVoiceVolume(in v : float) : status_t
    return mHardwareInterface->setVoiceVolume(v);
!!!45033911.cpp!!!	setMasterVolume(in v : float) : status_t
    return mHardwareInterface->setMasterVolume(v);
!!!45034039.cpp!!!	setMode(in mode : int) : status_t
    return mHardwareInterface->setMode(mode);
!!!45034167.cpp!!!	setMicMute(in state : bool) : status_t
    return mHardwareInterface->setMicMute(state);
!!!45034295.cpp!!!	getMicMute(inout state : bool) : status_t
    return mHardwareInterface->getMicMute(state);
!!!45034423.cpp!!!	setParameters(in keyValuePairs : String8) : status_t
    AudioParameter param = AudioParameter(keyValuePairs);
    String8 value;
    String8 key;
    status_t status = NO_ERROR;

    ALOGV("setParameters() %s", keyValuePairs.string());

    key = "bluetooth_enabled";
    if (param.get(key, value) == NO_ERROR) {
        mBluetoothEnabled = (value == "true");
        if (mOutput) {
            mOutput->setBluetoothEnabled(mBluetoothEnabled);
        }
        param.remove(key);
    }
    key = String8("A2dpSuspended");
    if (param.get(key, value) == NO_ERROR) {
        mSuspended = (value == "true");
        if (mOutput) {
            mOutput->setSuspended(mSuspended);
        }
        param.remove(key);
    }

    if (param.size()) {
        status_t hwStatus = mHardwareInterface->setParameters(param.toString());
        if (status == NO_ERROR) {
            status = hwStatus;
        }
    }

    return status;
!!!45034551.cpp!!!	getParameters(in keys : String8) : String8
    AudioParameter param = AudioParameter(keys);
    AudioParameter a2dpParam = AudioParameter();
    String8 value;
    String8 key;

    key = "bluetooth_enabled";
    if (param.get(key, value) == NO_ERROR) {
        value = mBluetoothEnabled ? "true" : "false";
        a2dpParam.add(key, value);
        param.remove(key);
    }
    key = "A2dpSuspended";
    if (param.get(key, value) == NO_ERROR) {
        value = mSuspended ? "true" : "false";
        a2dpParam.add(key, value);
        param.remove(key);
    }

    String8 keyValuePairs  = a2dpParam.toString();

    if (param.size()) {
        if (keyValuePairs != "") {
            keyValuePairs += ";";
        }
        keyValuePairs += mHardwareInterface->getParameters(param.toString());
    }

    ALOGV("getParameters() %s", keyValuePairs.string());
    return keyValuePairs;
!!!45034679.cpp!!!	getInputBufferSize(in sampleRate : uint32_t, in format : int, in channelCount : int) : size_t
    return mHardwareInterface->getInputBufferSize(sampleRate, format, channelCount);
!!!45034807.cpp!!!	openOutputStream(in devices : uint32_t, inout format : int = 0, inout channels : uint32_t = 0, inout sampleRate : uint32_t = 0, inout status : status_t = 0) : AudioStreamOut
    if (!audio_is_a2dp_out_device(devices)) {
        ALOGV("A2dpAudioInterface::openOutputStream() open HW device: %x", devices);
        return mHardwareInterface->openOutputStream(devices, format, channels, sampleRate, status);
    }

    status_t err = 0;

    // only one output stream allowed
    if (mOutput) {
        if (status)
            *status = -1;
        return NULL;
    }

    // create new output stream
    A2dpAudioStreamOut* out = new A2dpAudioStreamOut();
    if ((err = out->set(devices, format, channels, sampleRate)) == NO_ERROR) {
        mOutput = out;
        mOutput->setBluetoothEnabled(mBluetoothEnabled);
        mOutput->setSuspended(mSuspended);
    } else {
        delete out;
    }

    if (status)
        *status = err;
    return mOutput;
!!!45034935.cpp!!!	closeOutputStream(inout out : AudioStreamOut) : void
    if (mOutput == 0 || mOutput != out) {
        mHardwareInterface->closeOutputStream(out);
    }
    else {
        delete mOutput;
        mOutput = 0;
    }
!!!45035063.cpp!!!	openInputStream(in devices : uint32_t, inout format : int, inout channels : uint32_t, inout sampleRate : uint32_t, inout status : status_t, in acoustics : AudioSystem::audio_in_acoustics) : AudioStreamIn
    return mHardwareInterface->openInputStream(devices, format, channels, sampleRate, status, acoustics);
!!!45035191.cpp!!!	closeInputStream(inout in : AudioStreamIn) : void
    return mHardwareInterface->closeInputStream(in);
!!!45035319.cpp!!!	dump(in fd : int, in args : Vector<String16>) : status_t
    return mHardwareInterface->dumpState(fd, args);
