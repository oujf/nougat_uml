class AudioDumpInterface
!!!45042615.cpp!!!	AudioDumpInterface(inout hw : AudioHardwareInterface)
    if(hw == 0) {
        ALOGE("Dump construct hw = 0");
    }
    mFinalInterface = hw;
    ALOGV("Constructor %p, mFinalInterface %p", this, mFinalInterface);
!!!45042743.cpp!!!	openOutputStream(in devices : uint32_t, inout format : int = 0, inout channels : uint32_t = 0, inout sampleRate : uint32_t = 0, inout status : status_t = 0) : AudioStreamOut
    AudioStreamOut* outFinal = NULL;
    int lFormat = AudioSystem::PCM_16_BIT;
    uint32_t lChannels = AudioSystem::CHANNEL_OUT_STEREO;
    uint32_t lRate = 44100;


    outFinal = mFinalInterface->openOutputStream(devices, format, channels, sampleRate, status);
    if (outFinal != 0) {
        lFormat = outFinal->format();
        lChannels = outFinal->channels();
        lRate = outFinal->sampleRate();
    } else {
        if (format != 0) {
            if (*format != 0) {
                lFormat = *format;
            } else {
                *format = lFormat;
            }
        }
        if (channels != 0) {
            if (*channels != 0) {
                lChannels = *channels;
            } else {
                *channels = lChannels;
            }
        }
        if (sampleRate != 0) {
            if (*sampleRate != 0) {
                lRate = *sampleRate;
            } else {
                *sampleRate = lRate;
            }
        }
        if (status) *status = NO_ERROR;
    }
    ALOGV("openOutputStream(), outFinal %p", outFinal);

    AudioStreamOutDump *dumOutput = new AudioStreamOutDump(this, mOutputs.size(), outFinal,
            devices, lFormat, lChannels, lRate);
    mOutputs.add(dumOutput);

    return dumOutput;
!!!45042871.cpp!!!	closeOutputStream(inout out : AudioStreamOut) : void
    AudioStreamOutDump *dumpOut = (AudioStreamOutDump *)out;

    if (mOutputs.indexOf(dumpOut) < 0) {
        ALOGW("Attempt to close invalid output stream");
        return;
    }

    ALOGV("closeOutputStream() output %p", out);

    dumpOut->standby();
    if (dumpOut->finalStream() != NULL) {
        mFinalInterface->closeOutputStream(dumpOut->finalStream());
    }

    mOutputs.remove(dumpOut);
    delete dumpOut;
!!!45042999.cpp!!!	~AudioDumpInterface()
    for (size_t i = 0; i < mOutputs.size(); i++) {
        closeOutputStream((AudioStreamOut *)mOutputs[i]);
    }

    for (size_t i = 0; i < mInputs.size(); i++) {
        closeInputStream((AudioStreamIn *)mInputs[i]);
    }

    if(mFinalInterface) delete mFinalInterface;
!!!45043511.cpp!!!	setMode(in mode : int) : status_t
    return mFinalInterface->setMode(mode);
!!!45043895.cpp!!!	setParameters(in keyValuePairs : String8) : status_t
    AudioParameter param = AudioParameter(keyValuePairs);
    String8 value;
    int valueInt;
    ALOGV("setParameters %s", keyValuePairs.string());

    if (param.get(String8("test_cmd_file_name"), value) == NO_ERROR) {
        mFileName = value;
        param.remove(String8("test_cmd_file_name"));
    }
    if (param.get(String8("test_cmd_policy"), value) == NO_ERROR) {
        Mutex::Autolock _l(mLock);
        param.remove(String8("test_cmd_policy"));
        mPolicyCommands = param.toString();
        ALOGV("test_cmd_policy command %s written", mPolicyCommands.string());
        return NO_ERROR;
    }

    if (mFinalInterface != 0 ) return mFinalInterface->setParameters(keyValuePairs);
    return NO_ERROR;
!!!45044023.cpp!!!	getParameters(in keys : String8) : String8
    AudioParameter param = AudioParameter(keys);
    AudioParameter response;
    String8 value;

//    ALOGV("getParameters %s", keys.string());
    if (param.get(String8("test_cmd_policy"), value) == NO_ERROR) {
        Mutex::Autolock _l(mLock);
        if (mPolicyCommands.length() != 0) {
            response = AudioParameter(mPolicyCommands);
            response.addInt(String8("test_cmd_policy"), 1);
        } else {
            response.addInt(String8("test_cmd_policy"), 0);
        }
        param.remove(String8("test_cmd_policy"));
//        ALOGV("test_cmd_policy command %s read", mPolicyCommands.string());
    }

    if (param.get(String8("test_cmd_file_name"), value) == NO_ERROR) {
        response.add(String8("test_cmd_file_name"), mFileName);
        param.remove(String8("test_cmd_file_name"));
    }

    String8 keyValuePairs = response.toString();

    if (param.size() && mFinalInterface != 0 ) {
        keyValuePairs += ";";
        keyValuePairs += mFinalInterface->getParameters(param.toString());
    }

    return keyValuePairs;
!!!45044151.cpp!!!	getInputBufferSize(in sampleRate : uint32_t, in format : int, in channelCount : int) : size_t
    return mFinalInterface->getInputBufferSize(sampleRate, format, channelCount);
!!!45044279.cpp!!!	openInputStream(in devices : uint32_t, inout format : int, inout channels : uint32_t, inout sampleRate : uint32_t, inout status : status_t, in acoustics : AudioSystem::audio_in_acoustics) : AudioStreamIn
    AudioStreamIn* inFinal = NULL;
    int lFormat = AudioSystem::PCM_16_BIT;
    uint32_t lChannels = AudioSystem::CHANNEL_IN_MONO;
    uint32_t lRate = 8000;

    inFinal = mFinalInterface->openInputStream(devices, format, channels, sampleRate, status, acoustics);
    if (inFinal != 0) {
        lFormat = inFinal->format();
        lChannels = inFinal->channels();
        lRate = inFinal->sampleRate();
    } else {
        if (format != 0) {
            if (*format != 0) {
                lFormat = *format;
            } else {
                *format = lFormat;
            }
        }
        if (channels != 0) {
            if (*channels != 0) {
                lChannels = *channels;
            } else {
                *channels = lChannels;
            }
        }
        if (sampleRate != 0) {
            if (*sampleRate != 0) {
                lRate = *sampleRate;
            } else {
                *sampleRate = lRate;
            }
        }
        if (status) *status = NO_ERROR;
    }
    ALOGV("openInputStream(), inFinal %p", inFinal);

    AudioStreamInDump *dumInput = new AudioStreamInDump(this, mInputs.size(), inFinal,
            devices, lFormat, lChannels, lRate);
    mInputs.add(dumInput);

    return dumInput;
!!!45044407.cpp!!!	closeInputStream(inout in : AudioStreamIn) : void
    AudioStreamInDump *dumpIn = (AudioStreamInDump *)in;

    if (mInputs.indexOf(dumpIn) < 0) {
        ALOGW("Attempt to close invalid input stream");
        return;
    }
    dumpIn->standby();
    if (dumpIn->finalStream() != NULL) {
        mFinalInterface->closeInputStream(dumpIn->finalStream());
    }

    mInputs.remove(dumpIn);
    delete dumpIn;
