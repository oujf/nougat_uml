class AudioStreamInDump
!!!45040567.cpp!!!	AudioStreamInDump(inout interface : AudioDumpInterface, in id : int, inout finalStream : AudioStreamIn, in devices : uint32_t, in format : int, in channels : uint32_t, in sampleRate : uint32_t)
    ALOGV("AudioStreamInDump Constructor %p, mInterface %p, mFinalStream %p", this, mInterface, mFinalStream);
!!!45040695.cpp!!!	~AudioStreamInDump()
    Close();
!!!45040823.cpp!!!	sampleRate() : uint32_t
    if (mFinalStream != 0 ) return mFinalStream->sampleRate();
    return mSampleRate;
!!!45040951.cpp!!!	bufferSize() : size_t
    if (mFinalStream != 0 ) return mFinalStream->bufferSize();
    return mBufferSize;
!!!45041079.cpp!!!	channels() : uint32_t
    if (mFinalStream != 0 ) return mFinalStream->channels();
    return mChannels;
!!!45041207.cpp!!!	format() : int
    if (mFinalStream != 0 ) return mFinalStream->format();
    return mFormat;
!!!45041335.cpp!!!	setGain(in gain : float) : status_t
    if (mFinalStream != 0 ) return mFinalStream->setGain(gain);
    return NO_ERROR;
!!!45041463.cpp!!!	read(inout buffer : void, in bytes : ssize_t) : ssize_t
    ssize_t ret;

    if (mFinalStream) {
        ret = mFinalStream->read(buffer, bytes);
        if(!mFile) {
            if (mInterface->fileName() != "") {
                char name[255];
                sprintf(name, "%s_in_%d_%d.pcm", mInterface->fileName().string(), mId, ++mFileCount);
                mFile = fopen(name, "wb");
                ALOGV("Opening input dump file %s, fh %p", name, mFile);
            }
        }
        if (mFile) {
            fwrite(buffer, bytes, 1, mFile);
        }
    } else {
        usleep((((bytes * 1000) / frameSize()) / sampleRate()) * 1000);
        ret = bytes;
        if(!mFile) {
            char name[255];
            strcpy(name, "/sdcard/music/sine440");
            if (channels() == AudioSystem::CHANNEL_IN_MONO) {
                strcat(name, "_mo");
            } else {
                strcat(name, "_st");
            }
            if (format() == AudioSystem::PCM_16_BIT) {
                strcat(name, "_16b");
            } else {
                strcat(name, "_8b");
            }
            if (sampleRate() < 16000) {
                strcat(name, "_8k");
            } else if (sampleRate() < 32000) {
                strcat(name, "_22k");
            } else if (sampleRate() < 48000) {
                strcat(name, "_44k");
            } else {
                strcat(name, "_48k");
            }
            strcat(name, ".wav");
            mFile = fopen(name, "rb");
            ALOGV("Opening input read file %s, fh %p", name, mFile);
            if (mFile) {
                fseek(mFile, AUDIO_DUMP_WAVE_HDR_SIZE, SEEK_SET);
            }
        }
        if (mFile) {
            ssize_t bytesRead = fread(buffer, bytes, 1, mFile);
            if (bytesRead >=0 && bytesRead < bytes) {
                fseek(mFile, AUDIO_DUMP_WAVE_HDR_SIZE, SEEK_SET);
                fread((uint8_t *)buffer+bytesRead, bytes-bytesRead, 1, mFile);
            }
        }
    }

    return ret;
!!!45041591.cpp!!!	standby() : status_t
    ALOGV("AudioStreamInDump standby(), mFile %p, mFinalStream %p", mFile, mFinalStream);

    Close();
    if (mFinalStream != 0 ) return mFinalStream->standby();
    return NO_ERROR;
!!!45041719.cpp!!!	setParameters(in keyValuePairs : String8) : status_t
    ALOGV("AudioStreamInDump::setParameters()");
    if (mFinalStream != 0 ) return mFinalStream->setParameters(keyValuePairs);
    return NO_ERROR;
!!!45041847.cpp!!!	getParameters(in keys : String8) : String8
    if (mFinalStream != 0 ) return mFinalStream->getParameters(keys);

    AudioParameter param = AudioParameter(keys);
    return param.toString();
!!!45041975.cpp!!!	getInputFramesLost() : uint
    if (mFinalStream != 0 ) return mFinalStream->getInputFramesLost();
    return 0;
!!!45042103.cpp!!!	dump(in fd : int, in args : Vector<String16>) : status_t
    if (mFinalStream != 0 ) return mFinalStream->dump(fd, args);
    return NO_ERROR;
