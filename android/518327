format 213
"cpp" // android::frameworks::rs::cpp
  revision 2
  modified_by 55 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "D:\\Workspace\\AndroidSourceCode\\nougat_src\\frameworks\\rs\\cpp/"
  cpp_src_dir "D:\\Workspace\\AndroidSourceCode\\nougat_src\\frameworks\\rs\\cpp/"
  cpp_namespace "android::RSC"
  classview 436151 "cpp"
    
    classdiagramsettings member_max_width 0 end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 5409847 "ErrorHandlerFunc_t"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(uint32_t errorNum, const char *errorText);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 5409975 "MessageHandlerFunc_t"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(uint32_t msgNum, const void *msgData, size_t msgLen);
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 5410103 "RSError"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Possible error codes used by RenderScript. Once a status other than RS_SUCCESS
is returned, the RenderScript context is considered dead and cannot perform any
additional work.
"
      attribute 19196983 "RS_SUCCESS"
	public type class_ref 5410103 // RSError
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19197111 "RS_ERROR_INVALID_PARAMETER"
	public type class_ref 5410103 // RSError
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19197239 "RS_ERROR_RUNTIME_ERROR"
	public type class_ref 5410103 // RSError
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19197367 "RS_ERROR_INVALID_ELEMENT"
	public type class_ref 5410103 // RSError
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19197495 "RS_ERROR_MAX"
	public type class_ref 5410103 // RSError
	init_value " 9999

 "
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 5410231 "RSInitFlags"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "/< No error
/< An invalid parameter was passed to a function
/< The RenderScript driver returned an error; this is
/< often indicative of a kernel that crashed
/< An invalid Element was passed to a function

Flags that can control RenderScript behavior on a per-context level.
"
      attribute 19197623 "RS_INIT_SYNCHRONOUS"
	public type class_ref 5410231 // RSInitFlags
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19197751 "RS_INIT_LOW_LATENCY"
	public type class_ref 5410231 // RSInitFlags
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19197879 "RS_INIT_WAIT_FOR_ATTACH"
	public type class_ref 5410231 // RSInitFlags
	init_value " 8"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19198007 "RS_INIT_MAX"
	public type class_ref 5410231 // RSInitFlags
	init_value " 16
 "
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 5410359 "Byte2"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "/< All RenderScript calls will be synchronous. May reduce latency.
/< Prefer low latency devices over potentially higher throughput devices.
 Bitflag 4 is reserved for the context flag low power
/< Kernel execution will hold to give time for a debugger to be attached"
      attribute 19198135 "x"
	public explicit_type "int8_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19198263 "y"
	public explicit_type "int8_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46462903 "Byte2"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "initX" explicit_type "int8_t"
	  param in name "initY" explicit_type "int8_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} : x(initX), y(initY) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46463031 "Byte2"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : x(0), y(0) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 5410487 "Byte3"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 19198391 "x"
	public explicit_type "int8_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19198519 "y"
	public explicit_type "int8_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19198647 "z"
	public explicit_type "int8_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46463159 "Byte3"
	cpp_inline public explicit_return_type ""
	nparams 3
	  param in name "initX" explicit_type "int8_t"
	  param in name "initY" explicit_type "int8_t"
	  param in name "initZ" explicit_type "int8_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw}${abstract} : x(initX), y(initY), z(initZ) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46463287 "Byte3"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : x(0), y(0), z(0) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 5410615 "Byte4"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 19198775 "x"
	public explicit_type "int8_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19198903 "y"
	public explicit_type "int8_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19199031 "z"
	public explicit_type "int8_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19199159 "w"
	public explicit_type "int8_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46463415 "Byte4"
	cpp_inline public explicit_return_type ""
	nparams 4
	  param in name "initX" explicit_type "int8_t"
	  param in name "initY" explicit_type "int8_t"
	  param in name "initZ" explicit_type "int8_t"
	  param in name "initW" explicit_type "int8_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw}${abstract} : x(initX), y(initY), z(initZ), w(initW) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46463543 "Byte4"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : x(0), y(0), z(0), w(0) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 5410743 "UByte2"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 19199287 "x"
	public explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19199415 "y"
	public explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46463671 "UByte2"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "initX" explicit_type "uint8_t"
	  param in name "initY" explicit_type "uint8_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} : x(initX), y(initY) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46463799 "UByte2"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : x(0), y(0) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 5410871 "UByte3"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 19199543 "x"
	public explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19199671 "y"
	public explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19199799 "z"
	public explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46463927 "UByte3"
	cpp_inline public explicit_return_type ""
	nparams 3
	  param in name "initX" explicit_type "uint8_t"
	  param in name "initY" explicit_type "uint8_t"
	  param in name "initZ" explicit_type "uint8_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw}${abstract} : x(initX), y(initY), z(initZ) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46464055 "UByte3"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : x(0), y(0), z(0) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 5410999 "UByte4"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 19199927 "x"
	public explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19200055 "y"
	public explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19200183 "z"
	public explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19200311 "w"
	public explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46464183 "UByte4"
	cpp_inline public explicit_return_type ""
	nparams 4
	  param in name "initX" explicit_type "uint8_t"
	  param in name "initY" explicit_type "uint8_t"
	  param in name "initZ" explicit_type "uint8_t"
	  param in name "initW" explicit_type "uint8_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw}${abstract} : x(initX), y(initY), z(initZ), w(initW) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46464311 "UByte4"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : x(0), y(0), z(0), w(0) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 5411127 "Short2"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 19200439 "x"
	public explicit_type "short"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19200567 "y"
	public explicit_type "short"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46464439 "Short2"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "initX" explicit_type "short"
	  param in name "initY" explicit_type "short"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} : x(initX), y(initY) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46464567 "Short2"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : x(0), y(0) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 5411255 "Short3"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 19200695 "x"
	public explicit_type "short"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19200823 "y"
	public explicit_type "short"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19200951 "z"
	public explicit_type "short"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46464695 "Short3"
	cpp_inline public explicit_return_type ""
	nparams 3
	  param in name "initX" explicit_type "short"
	  param in name "initY" explicit_type "short"
	  param in name "initZ" explicit_type "short"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw}${abstract} : x(initX), y(initY), z(initZ) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46464823 "Short3"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : x(0), y(0), z(0) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 5411383 "Short4"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 19201079 "x"
	public explicit_type "short"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19201207 "y"
	public explicit_type "short"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19201335 "z"
	public explicit_type "short"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19201463 "w"
	public explicit_type "short"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46464951 "Short4"
	cpp_inline public explicit_return_type ""
	nparams 4
	  param in name "initX" explicit_type "short"
	  param in name "initY" explicit_type "short"
	  param in name "initZ" explicit_type "short"
	  param in name "initW" explicit_type "short"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw}${abstract} : x(initX), y(initY), z(initZ), w(initW) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46465079 "Short4"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : x(0), y(0), z(0), w(0) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 5411511 "UShort2"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 19201591 "x"
	public explicit_type "uint16_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19201719 "y"
	public explicit_type "uint16_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46465207 "UShort2"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "initX" explicit_type "uint16_t"
	  param in name "initY" explicit_type "uint16_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} : x(initX), y(initY) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46465335 "UShort2"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : x(0), y(0) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 5411639 "UShort3"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 19201847 "x"
	public explicit_type "uint16_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19201975 "y"
	public explicit_type "uint16_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19202103 "z"
	public explicit_type "uint16_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46465463 "UShort3"
	cpp_inline public explicit_return_type ""
	nparams 3
	  param in name "initX" explicit_type "uint16_t"
	  param in name "initY" explicit_type "uint16_t"
	  param in name "initZ" explicit_type "uint16_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw}${abstract} : x(initX), y(initY), z(initZ) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46465591 "UShort3"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : x(0), y(0), z(0) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 5411767 "UShort4"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 19202231 "x"
	public explicit_type "uint16_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19202359 "y"
	public explicit_type "uint16_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19202487 "z"
	public explicit_type "uint16_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19202615 "w"
	public explicit_type "uint16_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46465719 "UShort4"
	cpp_inline public explicit_return_type ""
	nparams 4
	  param in name "initX" explicit_type "uint16_t"
	  param in name "initY" explicit_type "uint16_t"
	  param in name "initZ" explicit_type "uint16_t"
	  param in name "initW" explicit_type "uint16_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw}${abstract} : x(initX), y(initY), z(initZ), w(initW) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46465847 "UShort4"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : x(0), y(0), z(0), w(0) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 5411895 "Int2"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 19202743 "x"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19202871 "y"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46465975 "Int2"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "initX" explicit_type "int"
	  param in name "initY" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} : x(initX), y(initY) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46466103 "Int2"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : x(0), y(0) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 5412023 "Int3"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 19202999 "x"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19203127 "y"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19203255 "z"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46466231 "Int3"
	cpp_inline public explicit_return_type ""
	nparams 3
	  param in name "initX" explicit_type "int"
	  param in name "initY" explicit_type "int"
	  param in name "initZ" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw}${abstract} : x(initX), y(initY), z(initZ) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46466359 "Int3"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : x(0), y(0), z(0) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 5412151 "Int4"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 19203383 "x"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19203511 "y"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19203639 "z"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19203767 "w"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46466487 "Int4"
	cpp_inline public explicit_return_type ""
	nparams 4
	  param in name "initX" explicit_type "int"
	  param in name "initY" explicit_type "int"
	  param in name "initZ" explicit_type "int"
	  param in name "initW" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw}${abstract} : x(initX), y(initY), z(initZ), w(initW) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46466615 "Int4"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : x(0), y(0), z(0), w(0) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 5412279 "UInt2"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 19203895 "x"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19204023 "y"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46466743 "UInt2"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "initX" explicit_type "uint32_t"
	  param in name "initY" explicit_type "uint32_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} : x(initX), y(initY) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46466871 "UInt2"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : x(0), y(0) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 5412407 "UInt3"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 19204151 "x"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19204279 "y"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19204407 "z"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46466999 "UInt3"
	cpp_inline public explicit_return_type ""
	nparams 3
	  param in name "initX" explicit_type "uint32_t"
	  param in name "initY" explicit_type "uint32_t"
	  param in name "initZ" explicit_type "uint32_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw}${abstract} : x(initX), y(initY), z(initZ) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46467127 "UInt3"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : x(0), y(0), z(0) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 5412535 "UInt4"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 19204535 "x"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19204663 "y"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19204791 "z"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19204919 "w"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46467255 "UInt4"
	cpp_inline public explicit_return_type ""
	nparams 4
	  param in name "initX" explicit_type "uint32_t"
	  param in name "initY" explicit_type "uint32_t"
	  param in name "initZ" explicit_type "uint32_t"
	  param in name "initW" explicit_type "uint32_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw}${abstract} : x(initX), y(initY), z(initZ), w(initW) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46467383 "UInt4"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : x(0), y(0), z(0), w(0) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 5412663 "Long2"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 19205047 "x"
	public explicit_type "int64_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19205175 "y"
	public explicit_type "int64_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46467511 "Long2"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "initX" explicit_type "int64_t"
	  param in name "initY" explicit_type "int64_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} : x(initX), y(initY) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46467639 "Long2"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : x(0), y(0) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 5412791 "Long3"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 19205303 "x"
	public explicit_type "int64_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19205431 "y"
	public explicit_type "int64_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19205559 "z"
	public explicit_type "int64_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46467767 "Long3"
	cpp_inline public explicit_return_type ""
	nparams 3
	  param in name "initX" explicit_type "int64_t"
	  param in name "initY" explicit_type "int64_t"
	  param in name "initZ" explicit_type "int64_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw}${abstract} : x(initX), y(initY), z(initZ) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46467895 "Long3"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : x(0), y(0), z(0) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 5412919 "Long4"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 19205687 "x"
	public explicit_type "int64_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19205815 "y"
	public explicit_type "int64_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19205943 "z"
	public explicit_type "int64_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19206071 "w"
	public explicit_type "int64_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46468023 "Long4"
	cpp_inline public explicit_return_type ""
	nparams 4
	  param in name "initX" explicit_type "int64_t"
	  param in name "initY" explicit_type "int64_t"
	  param in name "initZ" explicit_type "int64_t"
	  param in name "initW" explicit_type "int64_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw}${abstract} : x(initX), y(initY), z(initZ), w(initW) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46468151 "Long4"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : x(0), y(0), z(0), w(0) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 5413047 "ULong2"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 19206199 "x"
	public explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19206327 "y"
	public explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46468279 "ULong2"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "initX" explicit_type "uint64_t"
	  param in name "initY" explicit_type "uint64_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} : x(initX), y(initY) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46468407 "ULong2"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : x(0), y(0) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 5413175 "ULong3"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 19206455 "x"
	public explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19206583 "y"
	public explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19206711 "z"
	public explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46468535 "ULong3"
	cpp_inline public explicit_return_type ""
	nparams 3
	  param in name "initX" explicit_type "uint64_t"
	  param in name "initY" explicit_type "uint64_t"
	  param in name "initZ" explicit_type "uint64_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw}${abstract} : x(initX), y(initY), z(initZ) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46468663 "ULong3"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : x(0), y(0), z(0) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 5413303 "ULong4"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 19206839 "x"
	public explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19206967 "y"
	public explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19207095 "z"
	public explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19207223 "w"
	public explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46468791 "ULong4"
	cpp_inline public explicit_return_type ""
	nparams 4
	  param in name "initX" explicit_type "uint64_t"
	  param in name "initY" explicit_type "uint64_t"
	  param in name "initZ" explicit_type "uint64_t"
	  param in name "initW" explicit_type "uint64_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw}${abstract} : x(initX), y(initY), z(initZ), w(initW) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46468919 "ULong4"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : x(0), y(0), z(0), w(0) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 5413431 "Float2"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 19207351 "x"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19207479 "y"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46469047 "Float2"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "initX" explicit_type "float"
	  param in name "initY" explicit_type "float"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} : x(initX), y(initY) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46469175 "Float2"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : x(0), y(0) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 5413559 "Float3"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 19207607 "x"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19207735 "y"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19207863 "z"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46469303 "Float3"
	cpp_inline public explicit_return_type ""
	nparams 3
	  param in name "initX" explicit_type "float"
	  param in name "initY" explicit_type "float"
	  param in name "initZ" explicit_type "float"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw}${abstract} : x(initX), y(initY), z(initZ) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46469431 "Float3"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : x(0.f), y(0.f), z(0.f) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 5413687 "Float4"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 19207991 "x"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19208119 "y"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19208247 "z"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19208375 "w"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46469559 "Float4"
	cpp_inline public explicit_return_type ""
	nparams 4
	  param in name "initX" explicit_type "float"
	  param in name "initY" explicit_type "float"
	  param in name "initZ" explicit_type "float"
	  param in name "initW" explicit_type "float"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw}${abstract} : x(initX), y(initY), z(initZ), w(initW) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46469687 "Float4"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : x(0.f), y(0.f), z(0.f), w(0.f) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 5413815 "Double2"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 19208503 "x"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19208631 "y"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46469815 "Double2"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "initX" explicit_type "double"
	  param in name "initY" explicit_type "double"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} : x(initX), y(initY) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46469943 "Double2"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : x(0), y(0) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 5413943 "Double3"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 19208759 "x"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19208887 "y"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19209015 "z"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46470071 "Double3"
	cpp_inline public explicit_return_type ""
	nparams 3
	  param in name "initX" explicit_type "double"
	  param in name "initY" explicit_type "double"
	  param in name "initZ" explicit_type "double"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw}${abstract} : x(initX), y(initY), z(initZ) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46470199 "Double3"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : x(0), y(0), z(0) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 5414071 "Double4"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 19209143 "x"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19209271 "y"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19209399 "z"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19209527 "w"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46470327 "Double4"
	cpp_inline public explicit_return_type ""
	nparams 4
	  param in name "initX" explicit_type "double"
	  param in name "initY" explicit_type "double"
	  param in name "initZ" explicit_type "double"
	  param in name "initW" explicit_type "double"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw}${abstract} : x(initX), y(initY), z(initZ), w(initW) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46470455 "Double4"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : x(0), y(0), z(0), w(0) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 5414199 "RS"
      visibility package 
      nactuals 1
      actual class class_ref 5414327 // LightRefBase
        rank 0 value class_ref 5414199 // RS
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The RenderScript context. This class controls initialization, resource management, and teardown.
"
      classrelation 10850999 // <realization>
	relation 10850999 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 10850999 // <realization>
	  b parent class_ref 5414327 // LightRefBase
      end

      operation 46470583 "RS"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46470711 "~RS"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 46470839 "init"
	public explicit_return_type "bool"
	nparams 2
	  param in name "name" explicit_type "char"
	  param in name "flags" explicit_type "uint32_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a RenderScript context. A context must be initialized before it can be used.
@param[in] name Directory name to be used by this context. This should be equivalent to
Context.getCacheDir().
@param[in] flags Optional flags for this context.
@return true on success
"
      end

      operation 46470967 "init"
	public explicit_return_type "bool"
	nparams 3
	  param in name "name" explicit_type "char"
	  param in name "flags" explicit_type "uint32_t"
	  param in name "targetApi" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a RenderScript context. A context must be initialized before it can be used.
@param[in] name Directory name to be used by this context. This should be equivalent to
Context.getCacheDir().
@param[in] flags Flags for this context.
@param[in] targetApi Target RS API level.
@return true on success
"
      end

      operation 46471095 "setErrorHandler"
	public explicit_return_type "void"
	nparams 1
	  param in name "func" type class_ref 5409847 // ErrorHandlerFunc_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the error handler function for this context. This error handler is
called whenever an error is set.

@param[in] func Error handler function
"
      end

      operation 46471223 "getErrorHandler"
	cpp_inline public return_type class_ref 5409847 // ErrorHandlerFunc_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mErrorFunc; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current error handler function for this context.

@return pointer to current error handler function or NULL if not set
"
      end

      operation 46471351 "setMessageHandler"
	public explicit_return_type "void"
	nparams 1
	  param in name "func" type class_ref 5409975 // MessageHandlerFunc_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the message handler function for this context. This message handler
is called whenever a message is sent from a RenderScript kernel.

 @param[in] func Message handler function
"
      end

      operation 46471479 "getMessageHandler"
	cpp_inline public return_type class_ref 5409975 // MessageHandlerFunc_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mMessageFunc; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current message handler function for this context.

@return pointer to current message handler function or NULL if not set
"
      end

      operation 46471607 "getError"
	public return_type class_ref 5410103 // RSError
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns current status for the context.

@return current error
"
      end

      operation 46471735 "finish"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Waits for any currently running asynchronous operations to finish. This
should only be used for performance testing and timing.
"
      end

      operation 46471863 "getContext"
	cpp_inline public explicit_return_type "RsContext"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mContext; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46471991 "throwError"
	public explicit_return_type "void"
	nparams 2
	  param in name "error" type class_ref 5410103 // RSError
	  param in name "errMsg" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 10851127 // dispatch (<unidirectional association>)
	relation 10851127 --->
	  a role_name "dispatch" class_relation public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 10851127 // dispatch (<unidirectional association>)
	  b parent class_ref 5414455 // dispatchTable
      end

      attribute 19209655 "usingNative"
	class_attribute private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46472119 "initDispatch"
	class_operation private explicit_return_type "bool"
	nparams 1
	  param in name "targetApi" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46472247 "threadProc"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 19209783 "gInitialized"
	class_attribute private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19209911 "gInitMutex"
	class_attribute private explicit_type "pthread_mutex_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19210039 "mMessageThreadId"
	private explicit_type "pthread_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19210167 "mNativeMessageThreadId"
	private explicit_type "pid_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19210295 "mMessageRun"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19210423 "mContext"
	private explicit_type "RsContext"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 10851255 // mCurrentError (<directional composition>)
	relation 10851255 *-->
	  a role_name "mCurrentError" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 10851255 // mCurrentError (<directional composition>)
	  b parent class_ref 5410103 // RSError
      end

      classrelation 10851383 // mErrorFunc (<directional composition>)
	relation 10851383 *-->
	  a role_name "mErrorFunc" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 10851383 // mErrorFunc (<directional composition>)
	  b parent class_ref 5409847 // ErrorHandlerFunc_t
      end

      classrelation 10851511 // mMessageFunc (<directional composition>)
	relation 10851511 *-->
	  a role_name "mMessageFunc" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 10851511 // mMessageFunc (<directional composition>)
	  b parent class_ref 5409975 // MessageHandlerFunc_t
      end

      attribute 19210551 "mInit"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19210679 "mCacheDir"
	private explicit_type "char"
	multiplicity "[PATH_MAX+1]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19210807 "mCacheDirLen"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19210935 "mElements"
	private explicit_type "<complex type>"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct  {
        sp<const Element> U8;
        sp<const Element> U8_2;
        sp<const Element> U8_3;
        sp<const Element> U8_4;
        sp<const Element> I8;
        sp<const Element> I8_2;
        sp<const Element> I8_3;
        sp<const Element> I8_4;
        sp<const Element> U16;
        sp<const Element> U16_2;
        sp<const Element> U16_3;
        sp<const Element> U16_4;
        sp<const Element> I16;
        sp<const Element> I16_2;
        sp<const Element> I16_3;
        sp<const Element> I16_4;
        sp<const Element> U32;
        sp<const Element> U32_2;
        sp<const Element> U32_3;
        sp<const Element> U32_4;
        sp<const Element> I32;
        sp<const Element> I32_2;
        sp<const Element> I32_3;
        sp<const Element> I32_4;
        sp<const Element> U64;
        sp<const Element> U64_2;
        sp<const Element> U64_3;
        sp<const Element> U64_4;
        sp<const Element> I64;
        sp<const Element> I64_2;
        sp<const Element> I64_3;
        sp<const Element> I64_4;
        sp<const Element> F16;
        sp<const Element> F16_2;
        sp<const Element> F16_3;
        sp<const Element> F16_4;
        sp<const Element> F32;
        sp<const Element> F32_2;
        sp<const Element> F32_3;
        sp<const Element> F32_4;
        sp<const Element> F64;
        sp<const Element> F64_2;
        sp<const Element> F64_3;
        sp<const Element> F64_4;
        sp<const Element> BOOLEAN;

        sp<const Element> ELEMENT;
        sp<const Element> TYPE;
        sp<const Element> ALLOCATION;
        sp<const Element> SAMPLER;
        sp<const Element> SCRIPT;
        sp<const Element> MESH;
        sp<const Element> PROGRAM_FRAGMENT;
        sp<const Element> PROGRAM_VERTEX;
        sp<const Element> PROGRAM_RASTER;
        sp<const Element> PROGRAM_STORE;

        sp<const Element> A_8;
        sp<const Element> RGB_565;
        sp<const Element> RGB_888;
        sp<const Element> RGBA_5551;
        sp<const Element> RGBA_4444;
        sp<const Element> RGBA_8888;

        sp<const Element> YUV;

        sp<const Element> MATRIX_4X4;
        sp<const Element> MATRIX_3X3;
        sp<const Element> MATRIX_2X2;
    } ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19211063 "mSamplers"
	private explicit_type "<complex type>"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}struct  {
        sp<const Sampler> CLAMP_NEAREST;
        sp<const Sampler> CLAMP_LINEAR;
        sp<const Sampler> CLAMP_LINEAR_MIP_LINEAR;
        sp<const Sampler> WRAP_NEAREST;
        sp<const Sampler> WRAP_LINEAR;
        sp<const Sampler> WRAP_LINEAR_MIP_LINEAR;
        sp<const Sampler> MIRRORED_REPEAT_NEAREST;
        sp<const Sampler> MIRRORED_REPEAT_LINEAR;
        sp<const Sampler> MIRRORED_REPEAT_LINEAR_MIP_LINEAR;
    } ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 10851639 // <dependency>
	relation 10851639 -_->
	  stereotype "friend"
	  a public
	    cpp default "${type}"
	    classrelation_ref 10851639 // <dependency>
	  b parent class_ref 5414583 // Sampler
      end

      classrelation 10851767 // <dependency>
	relation 10851767 -_->
	  stereotype "friend"
	  a public
	    cpp default "${type}"
	    classrelation_ref 10851767 // <dependency>
	  b parent class_ref 5414711 // Element
      end

      classrelation 10851895 // <dependency>
	relation 10851895 -_->
	  stereotype "friend"
	  a public
	    cpp default "${type}"
	    classrelation_ref 10851895 // <dependency>
	  b parent class_ref 5414839 // ScriptC
      end
    end

    class 5414583 "Sampler"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Sampler object that defines how Allocations can be read as textures
within a kernel. Samplers are used in conjunction with the rsSample
runtime function to return values from normalized coordinates.

Any Allocation used with a Sampler must have been created with
RS_ALLOCATION_USAGE_GRAPHICS_TEXTURE; using a Sampler on an
Allocation that was not created with
RS_ALLOCATION_USAGE_GRAPHICS_TEXTURE is undefined.
"
      classrelation 10856247 // <generalisation>
	relation 10856247 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 10856247 // <generalisation>
	  b parent class_ref 5414967 // BaseObj
      end

      operation 46517431 "Sampler"
	private explicit_return_type ""
	nparams 2
	  param in name "rs" explicit_type "sp<RS>"
	  param inout name "id" explicit_type "void"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46517559 "Sampler"
	private explicit_return_type ""
	nparams 7
	  param in name "rs" explicit_type "sp<RS>"
	  param inout name "id" explicit_type "void"
	  param in name "min" explicit_type "RsSamplerValue"
	  param in name "mag" explicit_type "RsSamplerValue"
	  param in name "wrapS" explicit_type "RsSamplerValue"
	  param in name "wrapT" explicit_type "RsSamplerValue"
	  param in name "anisotropy" explicit_type "float"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      attribute 19218359 "mMin"
	private explicit_type "RsSamplerValue"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19218487 "mMag"
	private explicit_type "RsSamplerValue"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19218615 "mWrapS"
	private explicit_type "RsSamplerValue"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19218743 "mWrapT"
	private explicit_type "RsSamplerValue"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19218871 "mAniso"
	private explicit_type "float"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46517687 "create"
	class_operation public explicit_return_type "sp<Sampler>"
	nparams 6
	  param in name "rs" explicit_type "sp<RS>"
	  param in name "min" explicit_type "RsSamplerValue"
	  param in name "mag" explicit_type "RsSamplerValue"
	  param in name "wrapS" explicit_type "RsSamplerValue"
	  param in name "wrapT" explicit_type "RsSamplerValue"
	  param in name "anisotropy" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a non-standard Sampler.
@param[in] rs RenderScript context
@param[in] min minification
@param[in] mag magnification
@param[in] wrapS S wrapping mode
@param[in] wrapT T wrapping mode
@param[in] anisotropy anisotropy setting
"
      end

      operation 46517815 "getMinification"
	public explicit_return_type "RsSamplerValue"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return minification setting for the sampler
"
      end

      operation 46517943 "getMagnification"
	public explicit_return_type "RsSamplerValue"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return magnification setting for the sampler
"
      end

      operation 46518071 "getWrapS"
	public explicit_return_type "RsSamplerValue"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return S wrapping mode for the sampler
"
      end

      operation 46518199 "getWrapT"
	public explicit_return_type "RsSamplerValue"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return T wrapping mode for the sampler
"
      end

      operation 46518327 "getAnisotropy"
	public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return anisotropy setting for the sampler
"
      end

      operation 46518455 "CLAMP_NEAREST"
	class_operation public explicit_return_type "sp<const Sampler>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve a sampler with min and mag set to nearest and wrap modes set to
clamp.

@param rs Context to which the sampler will belong.

@return Sampler
"
      end

      operation 46518583 "CLAMP_LINEAR"
	class_operation public explicit_return_type "sp<const Sampler>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve a sampler with min and mag set to linear and wrap modes set to
clamp.

@param rs Context to which the sampler will belong.

@return Sampler
"
      end

      operation 46518711 "CLAMP_LINEAR_MIP_LINEAR"
	class_operation public explicit_return_type "sp<const Sampler>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve a sampler with mag set to linear, min linear mipmap linear, and
wrap modes set to clamp.

@param rs Context to which the sampler will belong.

@return Sampler
"
      end

      operation 46518839 "WRAP_NEAREST"
	class_operation public explicit_return_type "sp<const Sampler>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve a sampler with min and mag set to nearest and wrap modes set to
wrap.

@param rs Context to which the sampler will belong.

@return Sampler
"
      end

      operation 46518967 "WRAP_LINEAR"
	class_operation public explicit_return_type "sp<const Sampler>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve a sampler with min and mag set to linear and wrap modes set to
wrap.

@param rs Context to which the sampler will belong.

@return Sampler
"
      end

      operation 46519095 "WRAP_LINEAR_MIP_LINEAR"
	class_operation public explicit_return_type "sp<const Sampler>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve a sampler with mag set to linear, min linear mipmap linear, and
wrap modes set to wrap.

@param rs Context to which the sampler will belong.

@return Sampler
"
      end

      operation 46519223 "MIRRORED_REPEAT_NEAREST"
	class_operation public explicit_return_type "sp<const Sampler>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve a sampler with min and mag set to nearest and wrap modes set to
mirrored repeat.

@param rs Context to which the sampler will belong.

@return Sampler
"
      end

      operation 46519351 "MIRRORED_REPEAT_LINEAR"
	class_operation public explicit_return_type "sp<const Sampler>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve a sampler with min and mag set to linear and wrap modes set to
mirrored repeat.

@param rs Context to which the sampler will belong.

@return Sampler
"
      end

      operation 46519479 "MIRRORED_REPEAT_LINEAR_MIP_LINEAR"
	class_operation public explicit_return_type "sp<const Sampler>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve a sampler with min and mag set to linear and wrap modes set to
mirrored repeat.

@param rs Context to which the sampler will belong.

@return Sampler
"
      end
    end

    class 5414711 "Element"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An Element represents one item within an Allocation. An Element is roughly
equivalent to a C type in a RenderScript kernel. Elements may be basic
or complex. Some basic elements are:

- A single float value (equivalent to a float in a kernel)
- A four-element float vector (equivalent to a float4 in a kernel)
- An unsigned 32-bit integer (equivalent to an unsigned int in a kernel)
- A single signed 8-bit integer (equivalent to a char in a kernel)

Basic Elements are comprised of a Element.DataType and a
Element.DataKind. The DataType encodes C type information of an Element,
while the DataKind encodes how that Element should be interpreted by a
Sampler. Note that Allocation objects with DataKind USER cannot be used as
input for a Sampler. In general, Allocation objects that are intended for
use with a Sampler should use bitmap-derived Elements such as
Element::RGBA_8888.
"
      classrelation 10852663 // <generalisation>
	relation 10852663 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 10852663 // <generalisation>
	  b parent class_ref 5414967 // BaseObj
      end

      operation 46478647 "isComplex"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46478775 "getSubElementCount"
	cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mVisibleElementMapSize;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Elements could be simple, such as an int or a float, or a structure with
multiple sub-elements, such as a collection of floats, float2,
float4. This function returns zero for simple elements or the number of
sub-elements otherwise.
@return number of sub-elements
"
      end

      operation 46478903 "getSubElement"
	public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "index" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "For complex Elements, this returns the sub-element at a given index.
@param[in] index index of sub-element
@return sub-element
"
      end

      operation 46479031 "getSubElementName"
	public explicit_return_type "char"
	nparams 1
	  param in name "index" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "For complex Elements, this returns the name of the sub-element at a given
index.
@param[in] index index of sub-element
@return name of sub-element
"
      end

      operation 46479159 "getSubElementArraySize"
	public explicit_return_type "size_t"
	nparams 1
	  param in name "index" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "For complex Elements, this returns the size of the sub-element at a given
index.
@param[in] index index of sub-element
@return size of sub-element
"
      end

      operation 46479287 "getSubElementOffsetBytes"
	public explicit_return_type "uint32_t"
	nparams 1
	  param in name "index" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the location of a sub-element within a complex Element.
@param[in] index index of sub-element
@return offset in bytes
"
      end

      operation 46479415 "getDataType"
	const cpp_inline public explicit_return_type "RsDataType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mType;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the data type used for the Element.
@return data type
"
      end

      operation 46479543 "getDataKind"
	const cpp_inline public explicit_return_type "RsDataKind"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mKind;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the data kind used for the Element.
@return data kind
"
      end

      operation 46479671 "getSizeBytes"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mSizeBytes;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the size in bytes of the Element.
@return size in bytes
"
      end

      operation 46479799 "getVectorSize"
	const cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mVectorSize;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of vector components for this Element.
@return number of vector components
"
      end

      operation 46479927 "BOOLEAN"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a single bool.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46480055 "U8"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a single unsigned char.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46480183 "I8"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a single signed char.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46480311 "U16"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a single unsigned short.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46480439 "I16"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a single signed short.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46480567 "U32"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a single unsigned int.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46480695 "I32"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a single signed int.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46480823 "U64"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a single unsigned long long.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46480951 "I64"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a single signed long long.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46481079 "F16"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a single half.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46481207 "F32"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a single float.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46481335 "F64"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a single double.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46481463 "ELEMENT"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a single Element.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46481591 "TYPE"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a single Type.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46481719 "ALLOCATION"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a single Allocation.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46481847 "SAMPLER"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a single Sampler.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46481975 "SCRIPT"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a single Script.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46482103 "A_8"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing an ALPHA_8 pixel.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46482231 "RGB_565"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing an RGB_565 pixel.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46482359 "RGB_888"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing an RGB_888 pixel.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46482487 "RGBA_5551"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing an RGBA_5551 pixel.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46482615 "RGBA_4444"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing an RGBA_4444 pixel.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46482743 "RGBA_8888"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing an RGBA_8888 pixel.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46482871 "F16_2"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a half2.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46482999 "F16_3"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a half3.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46483127 "F16_4"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a half4.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46483255 "F32_2"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a float2.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46483383 "F32_3"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a float3.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46483511 "F32_4"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a float4.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46483639 "F64_2"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a double2.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46483767 "F64_3"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a double3.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46483895 "F64_4"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a double4.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46484023 "U8_2"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a uchar2.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46484151 "U8_3"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a uchar3.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46484279 "U8_4"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a uchar4.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46484407 "I8_2"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a char2.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46484535 "I8_3"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a char3.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46484663 "I8_4"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a char4.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46484791 "U16_2"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a ushort2.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46484919 "U16_3"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a ushort3.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46485047 "U16_4"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a ushort4.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46485175 "I16_2"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a short2.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46485303 "I16_3"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a short3.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46485431 "I16_4"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a short4.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46485559 "U32_2"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a uint2.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46485687 "U32_3"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a uint3.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46485815 "U32_4"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a uint4.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46485943 "I32_2"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing an int2.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46486071 "I32_3"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing an int3.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46486199 "I32_4"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing an int4.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46486327 "U64_2"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a ulong2.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46486455 "U64_3"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a ulong3.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46486583 "U64_4"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a ulong4.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46486711 "I64_2"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a long2.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46486839 "I64_3"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a long3.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46486967 "I64_4"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a long4.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46487095 "YUV"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing a YUV pixel.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46487223 "MATRIX_4X4"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing an rs_matrix_4x4.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46487351 "MATRIX_3X3"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing an rs_matrix_3x3.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46487479 "MATRIX_2X2"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function for returning an Element containing an rs_matrix_2x2.
@param[in] rs RenderScript context
@return Element
"
      end

      operation 46487607 "updateFromNative"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46487735 "createUser"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 2
	  param in name "rs" explicit_type "sp<RS>"
	  param in name "dt" explicit_type "RsDataType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an Element with a given DataType.
@param[in] rs RenderScript context
@param[in] dt data type
@return Element
"
      end

      operation 46487863 "createVector"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 3
	  param in name "rs" explicit_type "sp<RS>"
	  param in name "dt" explicit_type "RsDataType"
	  param in name "size" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a vector Element with the given DataType
@param[in] rs RenderScript
@param[in] dt DataType
@param[in] size vector size
@return Element
"
      end

      operation 46487991 "createPixel"
	class_operation public explicit_return_type "sp<const Element>"
	nparams 3
	  param in name "rs" explicit_type "sp<RS>"
	  param in name "dt" explicit_type "RsDataType"
	  param in name "dk" explicit_type "RsDataKind"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an Element with a given DataType and DataKind.
@param[in] rs RenderScript context
@param[in] dt DataType
@param[in] dk DataKind
@return Element
"
      end

      operation 46488119 "isCompatible"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "e" explicit_type "sp<const Element>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the Element can interoperate with this Element.
@param[in] e Element to compare
@return true if Elements can interoperate
"
      end

      class 5415479 "Builder"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 10852791 // mRS (<unidirectional association>)
	  relation 10852791 --->
	    a role_name "mRS" private
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 10852791 // mRS (<unidirectional association>)
	    b parent class_ref 5414199 // RS
	end

	attribute 19213495 "mElementsCount"
	  private explicit_type "size_t"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 19213623 "mElementsVecSize"
	  private explicit_type "size_t"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 19213751 "mElements"
	  private explicit_type "const Element"
	  stereotype "sp"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> * ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 19213879 "mElementNames"
	  private explicit_type "char"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * * ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 19214007 "mElementNameLengths"
	  private explicit_type "size_t"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 19214135 "mArraySizes"
	  private explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 19214263 "mSkipPadding"
	  private explicit_type "bool"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 46488247 "Builder"
	  public explicit_return_type ""
	  nparams 1
	    param in name "rs" explicit_type "sp<RS>"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}${throw}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 46488375 "~Builder"
	  public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 46488503 "add"
	  public explicit_return_type "void"
	  nparams 3
	    param in name "e" explicit_type "sp<const Element>"
	    param in name "name" explicit_type "char"
	    param in name "arraySize" explicit_type "uint32_t"
	      defaultvalue "1"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 46488631 "create"
	  public explicit_return_type "sp<const Element>"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 10852919 // <dependency>
	relation 10852919 -_->
	  stereotype "friend"
	  a public
	    cpp default "${type}"
	    classrelation_ref 10852919 // <dependency>
	  b parent class_ref 5415351 // Type
      end

      operation 46488759 "Element"
	protected explicit_return_type ""
	nparams 7
	  param inout name "id" explicit_type "void"
	  param in name "rs" explicit_type "sp<RS>"
	  param inout name "elements" explicit_type "sp<const Element>"
	  param in name "elementCount" explicit_type "size_t"
	  param in name "elementNames" explicit_type "char"
	  param inout name "elementNameLengths" explicit_type "size_t"
	  param inout name "arraySizes" explicit_type "uint32_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, const ${t4} * * ${p4}${v4}, ${t5} * ${p5}${v5}, ${t6} * ${p6}${v6}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}, ${t2} * ${p2}, ${t3} ${p3}, const ${t4} * * ${p4}, ${t5} * ${p5}, ${t6} * ${p6}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46488887 "Element"
	protected explicit_return_type ""
	nparams 6
	  param inout name "id" explicit_type "void"
	  param in name "rs" explicit_type "sp<RS>"
	  param in name "dt" explicit_type "RsDataType"
	  param in name "dk" explicit_type "RsDataKind"
	  param in name "norm" explicit_type "bool"
	  param in name "size" explicit_type "uint32_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46489015 "Element"
	protected explicit_return_type ""
	nparams 2
	  param inout name "id" explicit_type "void"
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46489143 "Element"
	protected explicit_return_type ""
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46489271 "~Element"
	cpp_virtual protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 46489399 "updateVisibleSubElements"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 19214391 "mElementsCount"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19214519 "mVisibleElementMapSize"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19214647 "mElements"
	private explicit_type "const Element"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19214775 "mElementNames"
	private explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19214903 "mElementNameLengths"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19215031 "mArraySizes"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19215159 "mVisibleElementMap"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19215287 "mOffsetInBytes"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19215415 "mType"
	private explicit_type "RsDataType"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19215543 "mKind"
	private explicit_type "RsDataKind"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19215671 "mNormalized"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19215799 "mSizeBytes"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19215927 "mVectorSize"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 5414839 "ScriptC"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "void updateAllocation();

The parent class for all user-defined scripts. This is intended to be used by auto-generated code only.
"
      classrelation 10854071 // <generalisation>
	relation 10854071 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 10854071 // <generalisation>
	  b parent class_ref 5415863 // Script
      end

      operation 46495671 "ScriptC"
	protected explicit_return_type ""
	nparams 7
	  param in name "rs" explicit_type "sp<RS>"
	  param in name "codeTxt" explicit_type "void"
	  param in name "codeLength" explicit_type "size_t"
	  param in name "cachedName" explicit_type "char"
	  param in name "cachedNameLength" explicit_type "size_t"
	  param in name "cacheDir" explicit_type "char"
	  param in name "cacheDirLength" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, const ${t3} * ${p3}${v3}, ${t4} ${p4}${v4}, const ${t5} * ${p5}${v5}, ${t6} ${p6}${v6}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}, ${t2} ${p2}, const ${t3} * ${p3}, ${t4} ${p4}, const ${t5} * ${p5}, ${t6} ${p6}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 5414967 "BaseObj"
      visibility package 
      nactuals 1
      actual class class_ref 5414327 // LightRefBase
        rank 0 value class_ref 5414967 // BaseObj
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Base class for all RenderScript objects. Not for direct use by developers.
"
      classrelation 10852023 // <realization>
	relation 10852023 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 10852023 // <realization>
	  b parent class_ref 5414327 // LightRefBase
      end

      operation 46472375 "getID"
	const public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46472503 "~BaseObj"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 46472631 "updateFromNative"
	cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46472759 "equals"
	cpp_virtual public explicit_return_type "bool"
	nparams 1
	  param in name "obj" explicit_type "sp<const BaseObj>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 19211191 "mID"
	protected explicit_type "void"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 10852151 // mRS (<unidirectional association>)
	relation 10852151 --->
	  a role_name "mRS" protected
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 10852151 // mRS (<unidirectional association>)
	  b parent class_ref 5414199 // RS
      end

      attribute 19211319 "mName"
	const_attribute protected explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46472887 "BaseObj"
	protected explicit_return_type ""
	nparams 2
	  param inout name "id" explicit_type "void"
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46473015 "checkValid"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46473143 "getObjID"
	class_operation protected explicit_return_type "void"
	nparams 1
	  param in name "o" explicit_type "sp<const BaseObj>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 5415223 "Allocation"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class provides the primary method through which data is passed to and
from RenderScript kernels. An Allocation provides the backing store for a
given Type.

An Allocation also contains a set of usage flags that denote how the
Allocation could be used. For example, an Allocation may have usage flags
specifying that it can be used from a script as well as input to a
Sampler. A developer must synchronize across these different usages using
syncAll(int) in order to ensure that different users of the Allocation have
a consistent view of memory. For example, in the case where an Allocation is
used as the output of one kernel and as Sampler input in a later kernel, a
developer must call syncAll(RS_ALLOCATION_USAGE_SCRIPT) prior to launching the
second kernel to ensure correctness.
"
      classrelation 10852279 // <generalisation>
	relation 10852279 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 10852279 // <generalisation>
	  b parent class_ref 5414967 // BaseObj
      end

      classrelation 10852407 // mType (<directional composition>)
	relation 10852407 *-->
	  stereotype "sp"
	  a role_name "mType" protected
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<const ${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 10852407 // mType (<directional composition>)
	  b parent class_ref 5415351 // Type
      end

      attribute 19211447 "mUsage"
	protected explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 10852535 // mAdaptedAllocation (<directional composition>)
	relation 10852535 *-->
	  stereotype "sp"
	  a role_name "mAdaptedAllocation" protected
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 10852535 // mAdaptedAllocation (<directional composition>)
	  b parent class_ref 5415223 // Allocation
      end

      attribute 19211575 "mConstrainedLOD"
	protected explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19211703 "mConstrainedFace"
	protected explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19211831 "mConstrainedY"
	protected explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19211959 "mConstrainedZ"
	protected explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19212087 "mReadAllowed"
	protected explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19212215 "mWriteAllowed"
	protected explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19212343 "mAutoPadding"
	protected explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19212471 "mSelectedY"
	protected explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19212599 "mSelectedZ"
	protected explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19212727 "mSelectedLOD"
	protected explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19212855 "mSelectedFace"
	protected explicit_type "RsAllocationCubemapFace"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19212983 "mCurrentDimX"
	protected explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19213111 "mCurrentDimY"
	protected explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19213239 "mCurrentDimZ"
	protected explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19213367 "mCurrentCount"
	protected explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46473271 "getIDSafe"
	const protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46473399 "updateCacheInfo"
	protected explicit_return_type "void"
	nparams 1
	  param in name "t" explicit_type "sp<const Type>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46473527 "Allocation"
	protected explicit_return_type ""
	nparams 4
	  param inout name "id" explicit_type "void"
	  param in name "rs" explicit_type "sp<RS>"
	  param in name "t" explicit_type "sp<const Type>"
	  param in name "usage" explicit_type "uint32_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46473655 "validateIsInt64"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46473783 "validateIsInt32"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46473911 "validateIsInt16"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46474039 "validateIsInt8"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46474167 "validateIsFloat32"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46474295 "validateIsFloat64"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46474423 "validateIsObject"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46474551 "updateFromNative"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46474679 "validate2DRange"
	protected explicit_return_type "void"
	nparams 4
	  param in name "xoff" explicit_type "uint32_t"
	  param in name "yoff" explicit_type "uint32_t"
	  param in name "w" explicit_type "uint32_t"
	  param in name "h" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46474807 "validate3DRange"
	protected explicit_return_type "void"
	nparams 6
	  param in name "xoff" explicit_type "uint32_t"
	  param in name "yoff" explicit_type "uint32_t"
	  param in name "zoff" explicit_type "uint32_t"
	  param in name "w" explicit_type "uint32_t"
	  param in name "h" explicit_type "uint32_t"
	  param in name "d" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46474935 "getType"
	const cpp_inline public explicit_return_type "sp<const Type>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mType;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return Type for the allocation.
@return pointer to underlying Type
"
      end

      operation 46475063 "setAutoPadding"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "useAutoPadding" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        mAutoPadding = useAutoPadding;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enable/Disable AutoPadding for Vec3 elements.

@param useAutoPadding True: enable AutoPadding; flase: disable AutoPadding

"
      end

      operation 46475191 "syncAll"
	public explicit_return_type "void"
	nparams 1
	  param in name "srcLocation" explicit_type "RsAllocationUsageType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Propagate changes from one usage of the Allocation to other usages of the Allocation.
@param[in] srcLocation source location with changes to propagate elsewhere
"
      end

      operation 46475319 "ioSendOutput"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Send a buffer to the output stream.  The contents of the Allocation will
be undefined after this operation. This operation is only valid if
USAGE_IO_OUTPUT is set on the Allocation.
"
      end

      operation 46475447 "ioGetInput"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Receive the latest input into the Allocation. This operation
is only valid if USAGE_IO_INPUT is set on the Allocation.
"
      end

      operation 46475575 "getSurface"
	public explicit_return_type "sp<Surface>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the handle to a raw buffer that is being managed by the screen
compositor. This operation is only valid for Allocations with USAGE_IO_INPUT.
@return Surface associated with allocation
"
      end

      operation 46475703 "setSurface"
	public explicit_return_type "void"
	nparams 1
	  param in name "s" explicit_type "sp<Surface>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Associate a Surface with this Allocation. This
operation is only valid for Allocations with USAGE_IO_OUTPUT.
@param[in] s Surface to associate with allocation
"
      end

      operation 46475831 "generateMipmaps"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generate a mipmap chain. This is only valid if the Type of the Allocation
includes mipmaps. This function will generate a complete set of mipmaps
from the top level LOD and place them into the script memory space. If
the Allocation is also using other memory spaces, a call to
syncAll(Allocation.USAGE_SCRIPT) is required.
"
      end

      operation 46475959 "copy1DRangeFrom"
	public explicit_return_type "void"
	nparams 3
	  param in name "off" explicit_type "uint32_t"
	  param in name "count" explicit_type "size_t"
	  param in name "data" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, const ${t2} * ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copy an array into part of this Allocation.
@param[in] off offset of first Element to be overwritten
@param[in] count number of Elements to copy
@param[in] data array from which to copy
"
      end

      operation 46476087 "copy1DRangeFrom"
	public explicit_return_type "void"
	nparams 4
	  param in name "off" explicit_type "uint32_t"
	  param in name "count" explicit_type "size_t"
	  param in name "data" explicit_type "sp<const Allocation>"
	  param in name "dataOff" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copy part of an Allocation into part of this Allocation.
@param[in] off offset of first Element to be overwritten
@param[in] count number of Elements to copy
@param[in] data Allocation from which to copy
@param[in] dataOff offset of first Element in data to copy
"
      end

      operation 46476215 "copy1DRangeTo"
	public explicit_return_type "void"
	nparams 3
	  param in name "off" explicit_type "uint32_t"
	  param in name "count" explicit_type "size_t"
	  param inout name "data" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} * ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copy an array into part of this Allocation.
@param[in] off offset of first Element to be overwritten
@param[in] count number of Elements to copy
@param[in] data array from which to copy
"
      end

      operation 46476343 "copy1DFrom"
	public explicit_return_type "void"
	nparams 1
	  param in name "data" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copy entire array to an Allocation.
@param[in] data array from which to copy
"
      end

      operation 46476471 "copy1DTo"
	public explicit_return_type "void"
	nparams 1
	  param inout name "data" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copy entire Allocation to an array.
@param[in] data destination array
"
      end

      operation 46476599 "copy2DRangeFrom"
	public explicit_return_type "void"
	nparams 5
	  param in name "xoff" explicit_type "uint32_t"
	  param in name "yoff" explicit_type "uint32_t"
	  param in name "w" explicit_type "uint32_t"
	  param in name "h" explicit_type "uint32_t"
	  param in name "data" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, const ${t4} * ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, const ${t4} * ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copy from an array into a rectangular region in this Allocation. The
array is assumed to be tightly packed.
@param[in] xoff X offset of region to update in this Allocation
@param[in] yoff Y offset of region to update in this Allocation
@param[in] w Width of region to update
@param[in] h Height of region to update
@param[in] data Array from which to copy
"
      end

      operation 46476727 "copy2DRangeTo"
	public explicit_return_type "void"
	nparams 5
	  param in name "xoff" explicit_type "uint32_t"
	  param in name "yoff" explicit_type "uint32_t"
	  param in name "w" explicit_type "uint32_t"
	  param in name "h" explicit_type "uint32_t"
	  param inout name "data" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} * ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} * ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copy from this Allocation into a rectangular region in an array. The
array is assumed to be tightly packed.
@param[in] xoff X offset of region to copy from this Allocation
@param[in] yoff Y offset of region to copy from this Allocation
@param[in] w Width of region to update
@param[in] h Height of region to update
@param[in] data destination array
"
      end

      operation 46476855 "copy2DRangeFrom"
	public explicit_return_type "void"
	nparams 7
	  param in name "xoff" explicit_type "uint32_t"
	  param in name "yoff" explicit_type "uint32_t"
	  param in name "w" explicit_type "uint32_t"
	  param in name "h" explicit_type "uint32_t"
	  param in name "data" explicit_type "sp<const Allocation>"
	  param in name "dataXoff" explicit_type "uint32_t"
	  param in name "dataYoff" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copy from an Allocation into a rectangular region in this Allocation.
@param[in] xoff X offset of region to update in this Allocation
@param[in] yoff Y offset of region to update in this Allocation
@param[in] w Width of region to update
@param[in] h Height of region to update
@param[in] data Allocation from which to copy
@param[in] dataXoff X offset of region to copy from in data
@param[in] dataYoff Y offset of region to copy from in data
"
      end

      operation 46476983 "copy2DStridedFrom"
	public explicit_return_type "void"
	nparams 6
	  param in name "xoff" explicit_type "uint32_t"
	  param in name "yoff" explicit_type "uint32_t"
	  param in name "w" explicit_type "uint32_t"
	  param in name "h" explicit_type "uint32_t"
	  param in name "data" explicit_type "void"
	  param in name "stride" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, const ${t4} * ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, const ${t4} * ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copy from a strided array into a rectangular region in this Allocation.
@param[in] xoff X offset of region to update in this Allocation
@param[in] yoff Y offset of region to update in this Allocation
@param[in] w Width of region to update
@param[in] h Height of region to update
@param[in] data array from which to copy
@param[in] stride stride of data in bytes
"
      end

      operation 46477111 "copy2DStridedFrom"
	public explicit_return_type "void"
	nparams 2
	  param in name "data" explicit_type "void"
	  param in name "stride" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copy from a strided array into this Allocation.
@param[in] data array from which to copy
@param[in] stride stride of data in bytes
"
      end

      operation 46477239 "copy2DStridedTo"
	public explicit_return_type "void"
	nparams 6
	  param in name "xoff" explicit_type "uint32_t"
	  param in name "yoff" explicit_type "uint32_t"
	  param in name "w" explicit_type "uint32_t"
	  param in name "h" explicit_type "uint32_t"
	  param inout name "data" explicit_type "void"
	  param in name "stride" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} * ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} * ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copy from a rectangular region in this Allocation into a strided array.
@param[in] xoff X offset of region to update in this Allocation
@param[in] yoff Y offset of region to update in this Allocation
@param[in] w Width of region to update
@param[in] h Height of region to update
@param[in] data destination array
@param[in] stride stride of data in bytes
"
      end

      operation 46477367 "copy2DStridedTo"
	public explicit_return_type "void"
	nparams 2
	  param inout name "data" explicit_type "void"
	  param in name "stride" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copy this Allocation into a strided array.
@param[in] data destination array
@param[in] stride stride of data in bytes
"
      end

      operation 46477495 "copy3DRangeFrom"
	public explicit_return_type "void"
	nparams 7
	  param in name "xoff" explicit_type "uint32_t"
	  param in name "yoff" explicit_type "uint32_t"
	  param in name "zoff" explicit_type "uint32_t"
	  param in name "w" explicit_type "uint32_t"
	  param in name "h" explicit_type "uint32_t"
	  param in name "d" explicit_type "uint32_t"
	  param in name "data" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, const ${t6} * ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, const ${t6} * ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copy from an array into a 3D region in this Allocation. The
array is assumed to be tightly packed.
@param[in] xoff X offset of region to update in this Allocation
@param[in] yoff Y offset of region to update in this Allocation
@param[in] zoff Z offset of region to update in this Allocation
@param[in] w Width of region to update
@param[in] h Height of region to update
@param[in] d Depth of region to update
@param[in] data Array from which to copy
"
      end

      operation 46477623 "copy3DRangeFrom"
	public explicit_return_type "void"
	nparams 10
	  param in name "xoff" explicit_type "uint32_t"
	  param in name "yoff" explicit_type "uint32_t"
	  param in name "zoff" explicit_type "uint32_t"
	  param in name "w" explicit_type "uint32_t"
	  param in name "h" explicit_type "uint32_t"
	  param in name "d" explicit_type "uint32_t"
	  param in name "data" explicit_type "sp<const Allocation>"
	  param in name "dataXoff" explicit_type "uint32_t"
	  param in name "dataYoff" explicit_type "uint32_t"
	  param in name "dataZoff" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}, ${t9} ${p9}${v9}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copy from an Allocation into a 3D region in this Allocation.
@param[in] xoff X offset of region to update in this Allocation
@param[in] yoff Y offset of region to update in this Allocation
@param[in] zoff Z offset of region to update in this Allocation
@param[in] w Width of region to update
@param[in] h Height of region to update
@param[in] d Depth of region to update
@param[in] data Allocation from which to copy
@param[in] dataXoff X offset of region in data to copy from
@param[in] dataYoff Y offset of region in data to copy from
@param[in] dataZoff Z offset of region in data to copy from
"
      end

      operation 46477751 "copy3DRangeTo"
	public explicit_return_type "void"
	nparams 7
	  param in name "xoff" explicit_type "uint32_t"
	  param in name "yoff" explicit_type "uint32_t"
	  param in name "zoff" explicit_type "uint32_t"
	  param in name "w" explicit_type "uint32_t"
	  param in name "h" explicit_type "uint32_t"
	  param in name "d" explicit_type "uint32_t"
	  param inout name "data" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} * ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} * ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copy a 3D region in this Allocation into an array. The
array is assumed to be tightly packed.
@param[in] xoff X offset of region to update in this Allocation
@param[in] yoff Y offset of region to update in this Allocation
@param[in] zoff Z offset of region to update in this Allocation
@param[in] w Width of region to update
@param[in] h Height of region to update
@param[in] d Depth of region to update
@param[in] data Array from which to copy
"
      end

      operation 46477879 "createTyped"
	class_operation public explicit_return_type "sp<Allocation>"
	nparams 4
	  param in name "rs" explicit_type "sp<RS>"
	  param in name "type" explicit_type "sp<const Type>"
	  param in name "mipmaps" explicit_type "RsAllocationMipmapControl"
	  param in name "usage" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an Allocation for use by scripts with a given Type.
@param[in] rs Context to which the Allocation will belong
@param[in] type Type of the Allocation
@param[in] mipmaps desired mipmap behavior for the Allocation
@param[in] usage usage for the Allocation
@return new Allocation
"
      end

      operation 46478007 "createTyped"
	class_operation public explicit_return_type "sp<Allocation>"
	nparams 5
	  param in name "rs" explicit_type "sp<RS>"
	  param in name "type" explicit_type "sp<const Type>"
	  param in name "mipmaps" explicit_type "RsAllocationMipmapControl"
	  param in name "usage" explicit_type "uint32_t"
	  param inout name "pointer" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} * ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} * ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an Allocation for use by scripts with a given Type and a backing pointer. For use
with RS_ALLOCATION_USAGE_SHARED.
@param[in] rs Context to which the Allocation will belong
@param[in] type Type of the Allocation
@param[in] mipmaps desired mipmap behavior for the Allocation
@param[in] usage usage for the Allocation
@param[in] pointer existing backing store to use for this Allocation if possible
@return new Allocation
"
      end

      operation 46478135 "createTyped"
	class_operation public explicit_return_type "sp<Allocation>"
	nparams 3
	  param in name "rs" explicit_type "sp<RS>"
	  param in name "type" explicit_type "sp<const Type>"
	  param in name "usage" explicit_type "uint32_t"
	    defaultvalue "RS_ALLOCATION_USAGE_SCRIPT"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an Allocation for use by scripts with a given Type with no mipmaps.
@param[in] rs Context to which the Allocation will belong
@param[in] type Type of the Allocation
@param[in] usage usage for the Allocation
@return new Allocation
"
      end

      operation 46478263 "createSized"
	class_operation public explicit_return_type "sp<Allocation>"
	nparams 4
	  param in name "rs" explicit_type "sp<RS>"
	  param in name "e" explicit_type "sp<const Element>"
	  param in name "count" explicit_type "size_t"
	  param in name "usage" explicit_type "uint32_t"
	    defaultvalue "RS_ALLOCATION_USAGE_SCRIPT"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an Allocation with a specified number of given elements.
@param[in] rs Context to which the Allocation will belong
@param[in] e Element used in the Allocation
@param[in] count Number of elements of the Allocation
@param[in] usage usage for the Allocation
@return new Allocation
"
      end

      operation 46478391 "createSized2D"
	class_operation public explicit_return_type "sp<Allocation>"
	nparams 5
	  param in name "rs" explicit_type "sp<RS>"
	  param in name "e" explicit_type "sp<const Element>"
	  param in name "x" explicit_type "size_t"
	  param in name "y" explicit_type "size_t"
	  param in name "usage" explicit_type "uint32_t"
	    defaultvalue "RS_ALLOCATION_USAGE_SCRIPT"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a 2D Allocation with a specified number of given elements.
@param[in] rs Context to which the Allocation will belong
@param[in] e Element used in the Allocation
@param[in] x Width in Elements of the Allocation
@param[in] y Height of the Allocation
@param[in] usage usage for the Allocation
@return new Allocation
"
      end

      operation 46478519 "getPointer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "stride" explicit_type "size_t"
	    defaultvalue "NULL"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the backing pointer for a USAGE_SHARED allocation.
@param[in] stride optional parameter. when non-NULL, will contain
  stride in bytes of a 2D Allocation
@return pointer to data
"
      end
    end

    class 5415351 "Type"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A Type describes the Element and dimensions used for an Allocation or a
parallel operation.

A Type always includes an Element and an X dimension. A Type may be
multidimensional, up to three dimensions. A nonzero value in the Y or Z
dimensions indicates that the dimension is present. Note that a Type with
only a given X dimension and a Type with the same X dimension but Y = 1 are
not equivalent.

A Type also supports inclusion of level of detail (LOD) or cube map
faces. LOD and cube map faces are booleans to indicate present or not
present.

A Type also supports YUV format information to support an Allocation in a YUV
format. The YUV formats supported are RS_YUV_YV12 and RS_YUV_NV21.
"
      classrelation 10853047 // <generalisation>
	relation 10853047 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 10853047 // <generalisation>
	  b parent class_ref 5414967 // BaseObj
      end

      classrelation 10853175 // <dependency>
	relation 10853175 -_->
	  stereotype "friend"
	  a public
	    cpp default "${type}"
	    classrelation_ref 10853175 // <dependency>
	  b parent class_ref 5415223 // Allocation
      end

      attribute 19216439 "mDimX"
	protected explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19216567 "mDimY"
	protected explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19216695 "mDimZ"
	protected explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19216823 "mYuvFormat"
	protected explicit_type "RsYuvFormat"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19216951 "mDimMipmaps"
	protected explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19217079 "mDimFaces"
	protected explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19217207 "mElementCount"
	protected explicit_type "size_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 10853303 // mElement (<directional composition>)
	relation 10853303 *-->
	  stereotype "sp"
	  a role_name "mElement" protected
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<const ${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 10853303 // mElement (<directional composition>)
	  b parent class_ref 5414711 // Element
      end

      operation 46490807 "Type"
	protected explicit_return_type ""
	nparams 2
	  param inout name "id" explicit_type "void"
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46490935 "calcElementCount"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46491063 "updateFromNative"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46491191 "getYuvFormat"
	const cpp_inline public explicit_return_type "RsYuvFormat"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mYuvFormat;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the YUV format.
@return YUV format of the Allocation
"
      end

      operation 46491319 "getElement"
	const cpp_inline public explicit_return_type "sp<const Element>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mElement;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Element of the Allocation.
@return YUV format of the Allocation
"
      end

      operation 46491447 "getX"
	const cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mDimX;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the X dimension of the Allocation.
@return X dimension of the allocation
"
      end

      operation 46491575 "getY"
	const cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mDimY;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Y dimension of the Allocation.
@return Y dimension of the allocation
"
      end

      operation 46491703 "getZ"
	const cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mDimZ;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Z dimension of the Allocation.
@return Z dimension of the allocation
"
      end

      operation 46491831 "hasMipmaps"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mDimMipmaps;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the Allocation has mipmaps.
@return true if the Allocation has mipmaps
"
      end

      operation 46491959 "hasFaces"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mDimFaces;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the Allocation is a cube map
@return true if the Allocation is a cube map
"
      end

      operation 46492087 "getCount"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mElementCount;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns number of accessible Elements in the Allocation
@return number of accessible Elements in the Allocation
"
      end

      operation 46492215 "getSizeBytes"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mElementCount * mElement->getSizeBytes();
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns size in bytes of all Elements in the Allocation
@return size in bytes of all Elements in the Allocation
"
      end

      operation 46492343 "create"
	class_operation public explicit_return_type "sp<const Type>"
	nparams 5
	  param in name "rs" explicit_type "sp<RS>"
	  param in name "e" explicit_type "sp<const Element>"
	  param in name "dimX" explicit_type "uint32_t"
	  param in name "dimY" explicit_type "uint32_t"
	  param in name "dimZ" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new Type with the given Element and dimensions.
@param[in] rs RenderScript context
@param[in] e Element
@param[in] dimX X dimension
@param[in] dimY Y dimension
@param[in] dimZ Z dimension
@return new Type
"
      end

      class 5415735 "Builder"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 10853431 // mRS (<unidirectional association>)
	  relation 10853431 --->
	    a role_name "mRS" protected
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 10853431 // mRS (<unidirectional association>)
	    b parent class_ref 5414199 // RS
	end

	attribute 19217335 "mDimX"
	  protected explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 19217463 "mDimY"
	  protected explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 19217591 "mDimZ"
	  protected explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 19217719 "mYuvFormat"
	  protected explicit_type "RsYuvFormat"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 19217847 "mDimMipmaps"
	  protected explicit_type "bool"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 19217975 "mDimFaces"
	  protected explicit_type "bool"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 10853559 // mElement (<directional composition>)
	  relation 10853559 *-->
	    stereotype "sp"
	    a role_name "mElement" protected
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<const ${type}> ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 10853559 // mElement (<directional composition>)
	    b parent class_ref 5414711 // Element
	end

	operation 46492471 "Builder"
	  public explicit_return_type ""
	  nparams 2
	    param in name "rs" explicit_type "sp<RS>"
	    param in name "e" explicit_type "sp<const Element>"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throw}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 46492599 "setX"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "value" explicit_type "uint32_t"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 46492727 "setY"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "value" explicit_type "uint32_t"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 46492855 "setZ"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "value" explicit_type "uint32_t"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 46492983 "setYuvFormat"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "format" explicit_type "RsYuvFormat"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 46493111 "setMipmaps"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "value" explicit_type "bool"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 46493239 "setFaces"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "value" explicit_type "bool"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 46493367 "create"
	  public explicit_return_type "sp<const Type>"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 5415607 "FieldPacker"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 19216055 "mData"
	protected explicit_type "byte"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19216183 "mPos"
	protected explicit_type "size_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19216311 "mLen"
	protected explicit_type "size_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46489527 "FieldPacker"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "len" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract} : mPos(0), mLen(len) {
            mData = new unsigned char[len];
        };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46489655 "~FieldPacker"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
        delete [] mData;
    };
"
	
	
	
	
      end

      operation 46489783 "align"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "v" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if ((v & (v - 1)) != 0) {
            //            ALOGE(\"Non-power-of-two alignment: %zu\", v);
            return;
        }

        while ((mPos & (v - 1)) != 0) {
            mData[mPos++] = 0;
        }
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46489911 "reset"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        mPos = 0;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46490039 "reset"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if (i >= mLen) {
            //            ALOGE(\"Out of bounds: i (%zu) >= len (%zu)\", i, mLen);
            return;
        }
        mPos = i;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46490167 "skip"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        size_t res = mPos + i;
        if (res > mLen) {
            //            ALOGE(\"Exceeded buffer length: i (%zu) > len (%zu)\", i, mLen);
            return;
        }
        mPos = res;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46490295 "getData"
	const cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mData;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46490423 "getLength"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mLen;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46490551 "add"
	stereotype "template"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "t" explicit_type "T"
	cpp_decl "    ${comment}template<typename T>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        align(sizeof(t));
        if (mPos + sizeof(t) <= mLen) {
            memcpy(&mData[mPos], &t, sizeof(t));
            mPos += sizeof(t);
        }
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46490679 "add"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "obj" explicit_type "sp<BaseObj>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if (obj != NULL) {
            add((uint32_t) (uintptr_t) obj->getID());
        } else {
            add((uint32_t) 0);
        }
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "void add(rs_matrix4x4 m) {
for (size_t i = 0; i < 16; i++) {
add(m.m[i]);
}
}

void add(rs_matrix3x3 m) {
for (size_t i = 0; i < 9; i++) {
add(m.m[i]);
}
}

void add(rs_matrix2x2 m) {
for (size_t i = 0; i < 4; i++) {
add(m.m[i]);
}
}
"
      end
    end

    class 5415863 "Script"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The parent class for all executable Scripts. This should not be used by applications.
"
      classrelation 10853687 // <generalisation>
	relation 10853687 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 10853687 // <generalisation>
	  b parent class_ref 5414967 // BaseObj
      end

      operation 46493495 "Script"
	protected explicit_return_type ""
	nparams 2
	  param inout name "id" explicit_type "void"
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46493623 "forEach"
	const protected explicit_return_type "void"
	nparams 5
	  param in name "slot" explicit_type "uint32_t"
	  param in name "in" explicit_type "sp<const Allocation>"
	  param in name "out" explicit_type "sp<const Allocation>"
	  param in name "v" explicit_type "void"
	  param in name "" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, const ${t3} * ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} * ${p3}, ${t4} ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46493751 "bindAllocation"
	const protected explicit_return_type "void"
	nparams 2
	  param in name "va" explicit_type "sp<Allocation>"
	  param in name "slot" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46493879 "setVar"
	const protected explicit_return_type "void"
	nparams 3
	  param in name "index" explicit_type "uint32_t"
	  param in name "" explicit_type "void"
	  param in name "len" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46494007 "setVar"
	const protected explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "uint32_t"
	  param in name "o" explicit_type "sp<const BaseObj>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46494135 "invoke"
	const protected explicit_return_type "void"
	nparams 3
	  param in name "slot" explicit_type "uint32_t"
	  param in name "v" explicit_type "void"
	  param in name "len" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46494263 "invoke"
	const cpp_inline protected explicit_return_type "void"
	nparams 1
	  param in name "slot" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        invoke(slot, NULL, 0);
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46494391 "setVar"
	const cpp_inline protected explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "uint32_t"
	  param in name "v" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        setVar(index, &v, sizeof(v));
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46494519 "setVar"
	const cpp_inline protected explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "uint32_t"
	  param in name "v" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        setVar(index, &v, sizeof(v));
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46494647 "setVar"
	const cpp_inline protected explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "uint32_t"
	  param in name "v" explicit_type "int32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        setVar(index, &v, sizeof(v));
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46494775 "setVar"
	const cpp_inline protected explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "uint32_t"
	  param in name "v" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        setVar(index, &v, sizeof(v));
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46494903 "setVar"
	const cpp_inline protected explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "uint32_t"
	  param in name "v" explicit_type "int64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        setVar(index, &v, sizeof(v));
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46495031 "setVar"
	const cpp_inline protected explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "uint32_t"
	  param in name "v" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        setVar(index, &v, sizeof(v));
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 5415991 "FieldBase"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 10853815 // mElement (<directional composition>)
	  relation 10853815 *-->
	    stereotype "sp"
	    a role_name "mElement" protected
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<const ${type}> ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 10853815 // mElement (<directional composition>)
	    b parent class_ref 5414711 // Element
	end

	classrelation 10853943 // mAllocation (<directional composition>)
	  relation 10853943 *-->
	    stereotype "sp"
	    a role_name "mAllocation" protected
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 10853943 // mAllocation (<directional composition>)
	    b parent class_ref 5415223 // Allocation
	end

	operation 46495159 "init"
	  protected explicit_return_type "void"
	  nparams 3
	    param in name "rs" explicit_type "sp<RS>"
	    param in name "dimx" explicit_type "uint32_t"
	    param in name "usages" explicit_type "uint32_t"
	      defaultvalue "0"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 46495287 "getElement"
	  cpp_inline public explicit_return_type "sp<const Element>"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            return mElement;
        };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 46495415 "getType"
	  cpp_inline public explicit_return_type "sp<const Type>"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            return mAllocation->getType();
        };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 46495543 "getAllocation"
	  cpp_inline public explicit_return_type "sp<const Allocation>"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            return mAllocation;
        };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 5416119 "ScriptIntrinsic"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The parent class for all script intrinsics. Intrinsics provide highly optimized implementations of
basic functions. This is not intended to be used directly.
"
      classrelation 10854199 // <generalisation>
	relation 10854199 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 10854199 // <generalisation>
	  b parent class_ref 5415863 // Script
      end

      classrelation 10854327 // mElement (<directional composition>)
	relation 10854327 *-->
	  stereotype "sp"
	  a role_name "mElement" protected
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<const ${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 10854327 // mElement (<directional composition>)
	  b parent class_ref 5414711 // Element
      end

      operation 46495799 "ScriptIntrinsic"
	protected explicit_return_type ""
	nparams 3
	  param in name "rs" explicit_type "sp<RS>"
	  param in name "id" explicit_type "int"
	  param in name "e" explicit_type "sp<const Element>"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46495927 "~ScriptIntrinsic"
	cpp_virtual protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end
    end

    class 5416247 "ScriptIntrinsic3DLUT"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Intrinsic for converting RGB to RGBA by using a 3D lookup table. The incoming
r,g,b values are use as normalized x,y,z coordinates into a 3D
allocation. The 8 nearest values are sampled and linearly interpolated. The
result is placed in the output.
"
      classrelation 10854455 // <generalisation>
	relation 10854455 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 10854455 // <generalisation>
	  b parent class_ref 5416119 // ScriptIntrinsic
      end

      operation 46496055 "ScriptIntrinsic3DLUT"
	private explicit_return_type ""
	nparams 2
	  param in name "rs" explicit_type "sp<RS>"
	  param in name "e" explicit_type "sp<const Element>"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46496183 "create"
	class_operation public explicit_return_type "sp<ScriptIntrinsic3DLUT>"
	nparams 2
	  param in name "rs" explicit_type "sp<RS>"
	  param in name "e" explicit_type "sp<const Element>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Supported Element types are U8_4. Default lookup table is identity.
@param[in] rs RenderScript context
@param[in] e Element
@return new ScriptIntrinsic
"
      end

      operation 46496311 "forEach"
	public explicit_return_type "void"
	nparams 2
	  param in name "ain" explicit_type "sp<Allocation>"
	  param in name "aout" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Launch the intrinsic.
@param[in] ain input Allocation
@param[in] aout output Allocation
"
      end

      operation 46496439 "setLUT"
	public explicit_return_type "void"
	nparams 1
	  param in name "lut" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the lookup table. The lookup table must use the same Element as the
intrinsic.
@param[in] lut new lookup table
"
      end
    end

    class 5416375 "ScriptIntrinsicBLAS"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Intrinsic kernel provides high performance RenderScript APIs to BLAS.

The BLAS (Basic Linear Algebra Subprograms) are routines that provide standard
building blocks for performing basic vector and matrix operations.

For detailed description of BLAS, please refer to http://www.netlib.org/blas/

"
      classrelation 10854583 // <generalisation>
	relation 10854583 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 10854583 // <generalisation>
	  b parent class_ref 5416119 // ScriptIntrinsic
      end

      operation 46496567 "ScriptIntrinsicBLAS"
	private explicit_return_type ""
	nparams 2
	  param in name "rs" explicit_type "sp<RS>"
	  param in name "e" explicit_type "sp<const Element>"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46496695 "create"
	class_operation public explicit_return_type "sp<ScriptIntrinsicBLAS>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an intrinsic to access BLAS subroutines.

@param rs The RenderScript context
@return ScriptIntrinsicBLAS
"
      end

      operation 46496823 "SGEMV"
	public explicit_return_type "void"
	nparams 8
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "alpha" explicit_type "float"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "beta" explicit_type "float"
	  param in name "Y" explicit_type "sp<Allocation>"
	  param in name "incY" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "SGEMV performs one of the matrix-vector operations
y := alpha*A*x + beta*y   or   y := alpha*A**T*x + beta*y

Details: http://www.netlib.org/lapack/explore-html/db/d58/sgemv_8f.html

@param TransA The type of transpose applied to matrix A.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F32}.
@param X The input allocation contains vector x, supported elements type: {Element#F32}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param beta The scalar beta.
@param Y The input allocation contains vector y, supported elements type: {Element#F32}.
@param incY The increment for the elements of vector y, must be larger than zero.
"
      end

      operation 46496951 "DGEMV"
	public explicit_return_type "void"
	nparams 8
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "alpha" explicit_type "double"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "beta" explicit_type "double"
	  param in name "Y" explicit_type "sp<Allocation>"
	  param in name "incY" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "DGEMV performs one of the matrix-vector operations
y := alpha*A*x + beta*y   or   y := alpha*A**T*x + beta*y

Details: http://www.netlib.org/lapack/explore-html/dc/da8/dgemv_8f.html

@param TransA The type of transpose applied to matrix A.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F64}.
@param X The input allocation contains vector x, supported elements type: {Element#F64}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param beta The scalar beta.
@param Y The input allocation contains vector y, supported elements type: {Element#F64}.
@param incY The increment for the elements of vector y, must be larger than zero.
"
      end

      operation 46497079 "CGEMV"
	public explicit_return_type "void"
	nparams 8
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "alpha" type class_ref 5413431 // Float2
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "beta" type class_ref 5413431 // Float2
	  param in name "Y" explicit_type "sp<Allocation>"
	  param in name "incY" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "CGEMV performs one of the matrix-vector operations
y := alpha*A*x + beta*y   or   y := alpha*A**T*x + beta*y   or   y := alpha*A**H*x + beta*y

Details: http://www.netlib.org/lapack/explore-html/d4/d8a/cgemv_8f.html

@param TransA The type of transpose applied to matrix A.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F32_2}.
@param X The input allocation contains vector x, supported elements type: {Element#F32_2}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param beta The scalar beta.
@param Y The input allocation contains vector y, supported elements type: {Element#F32_2}.
@param incY The increment for the elements of vector y, must be larger than zero.
"
      end

      operation 46497207 "ZGEMV"
	public explicit_return_type "void"
	nparams 8
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "alpha" type class_ref 5413815 // Double2
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "beta" type class_ref 5413815 // Double2
	  param in name "Y" explicit_type "sp<Allocation>"
	  param in name "incY" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "ZGEMV performs one of the matrix-vector operations
y := alpha*A*x + beta*y   or   y := alpha*A**T*x + beta*y   or   y := alpha*A**H*x + beta*y

Details: http://www.netlib.org/lapack/explore-html/db/d40/zgemv_8f.html

@param TransA The type of transpose applied to matrix A.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F64_2}.
@param X The input allocation contains vector x, supported elements type: {Element#F64_2}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param beta The scalar beta.
@param Y The input allocation contains vector y, supported elements type: {Element#F64_2}.
@param incY The increment for the elements of vector y, must be larger than zero.
"
      end

      operation 46497335 "SGBMV"
	public explicit_return_type "void"
	nparams 10
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "KL" explicit_type "int"
	  param in name "KU" explicit_type "int"
	  param in name "alpha" explicit_type "float"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "beta" explicit_type "float"
	  param in name "Y" explicit_type "sp<Allocation>"
	  param in name "incY" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}, ${t9} ${p9}${v9}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "SGBMV performs one of the matrix-vector operations
y := alpha*A*x + beta*y   or   y := alpha*A**T*x + beta*y

Details: http://www.netlib.org/lapack/explore-html/d6/d46/sgbmv_8f.html

Note: For a M*N matrix, the input Allocation should also be of size M*N (dimY = M, dimX = N),
      but only the region M*(KL+KU+1) will be referenced. The following subroutine can is an
      example showing how to convert the original matrix 'a' to row-based band matrix 'b'.
          for i in range(0, m):
             for j in range(max(0, i-kl), min(i+ku+1, n)):
                 b[i, j-i+kl] = a[i, j]

@param TransA The type of transpose applied to matrix A.
@param KL The number of sub-diagonals of the matrix A.
@param KU The number of super-diagonals of the matrix A.
@param alpha The scalar alpha.
@param A The input allocation contains the band matrix A, supported elements type: {Element#F32}.
@param X The input allocation contains vector x, supported elements type: {Element#F32}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param beta The scalar beta.
@param Y The input allocation contains vector y, supported elements type: {Element#F32}.
@param incY The increment for the elements of vector y, must be larger than zero.
"
      end

      operation 46497463 "DGBMV"
	public explicit_return_type "void"
	nparams 10
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "KL" explicit_type "int"
	  param in name "KU" explicit_type "int"
	  param in name "alpha" explicit_type "double"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "beta" explicit_type "double"
	  param in name "Y" explicit_type "sp<Allocation>"
	  param in name "incY" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}, ${t9} ${p9}${v9}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "DGBMV performs one of the matrix-vector operations
y := alpha*A*x + beta*y   or   y := alpha*A**T*x + beta*y

Details: http://www.netlib.org/lapack/explore-html/d2/d3f/dgbmv_8f.html

Note: For a M*N matrix, the input Allocation should also be of size M*N (dimY = M, dimX = N),
      but only the region M*(KL+KU+1) will be referenced. The following subroutine can is an
      example showing how to convert the original matrix 'a' to row-based band matrix 'b'.
          for i in range(0, m):
             for j in range(max(0, i-kl), min(i+ku+1, n)):
                 b[i, j-i+kl] = a[i, j]

@param TransA The type of transpose applied to matrix A.
@param KL The number of sub-diagonals of the matrix A.
@param KU The number of super-diagonals of the matrix A.
@param alpha The scalar alpha.
@param A The input allocation contains the band matrix A, supported elements type: {Element#F64}.
@param X The input allocation contains vector x, supported elements type: {Element#F64}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param beta The scalar beta.
@param Y The input allocation contains vector y, supported elements type: {Element#F64}.
@param incY The increment for the elements of vector y, must be larger than zero.
"
      end

      operation 46497591 "CGBMV"
	public explicit_return_type "void"
	nparams 10
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "KL" explicit_type "int"
	  param in name "KU" explicit_type "int"
	  param in name "alpha" type class_ref 5413431 // Float2
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "beta" type class_ref 5413431 // Float2
	  param in name "Y" explicit_type "sp<Allocation>"
	  param in name "incY" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}, ${t9} ${p9}${v9}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "CGBMV performs one of the matrix-vector operations
y := alpha*A*x + beta*y   or   y := alpha*A**T*x + beta*y   or   y := alpha*A**H*x + beta*y

Details: http://www.netlib.org/lapack/explore-html/d0/d75/cgbmv_8f.html

Note: For a M*N matrix, the input Allocation should also be of size M*N (dimY = M, dimX = N),
      but only the region M*(KL+KU+1) will be referenced. The following subroutine can is an
      example showing how to convert the original matrix 'a' to row-based band matrix 'b'.
          for i in range(0, m):
             for j in range(max(0, i-kl), min(i+ku+1, n)):
                 b[i, j-i+kl] = a[i, j]

@param TransA The type of transpose applied to matrix A.
@param KL The number of sub-diagonals of the matrix A.
@param KU The number of super-diagonals of the matrix A.
@param alpha The scalar alpha.
@param A The input allocation contains the band matrix A, supported elements type: {Element#F32_2}.
@param X The input allocation contains vector x, supported elements type: {Element#F32_2}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param beta The scalar beta.
@param Y The input allocation contains vector y, supported elements type: {Element#F32_2}.
@param incY The increment for the elements of vector y, must be larger than zero.
"
      end

      operation 46497719 "ZGBMV"
	public explicit_return_type "void"
	nparams 10
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "KL" explicit_type "int"
	  param in name "KU" explicit_type "int"
	  param in name "alpha" type class_ref 5413815 // Double2
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "beta" type class_ref 5413815 // Double2
	  param in name "Y" explicit_type "sp<Allocation>"
	  param in name "incY" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}, ${t9} ${p9}${v9}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "ZGBMV performs one of the matrix-vector operations
y := alpha*A*x + beta*y   or   y := alpha*A**T*x + beta*y   or   y := alpha*A**H*x + beta*y

Details: http://www.netlib.org/lapack/explore-html/d9/d46/zgbmv_8f.html

Note: For a M*N matrix, the input Allocation should also be of size M*N (dimY = M, dimX = N),
      but only the region M*(KL+KU+1) will be referenced. The following subroutine can is an
      example showing how to convert the original matrix 'a' to row-based band matrix 'b'.
          for i in range(0, m):
             for j in range(max(0, i-kl), min(i+ku+1, n)):
                 b[i, j-i+kl] = a[i, j]

@param TransA The type of transpose applied to matrix A.
@param KL The number of sub-diagonals of the matrix A.
@param KU The number of super-diagonals of the matrix A.
@param alpha The scalar alpha.
@param A The input allocation contains the band matrix A, supported elements type: {Element#F64_2}.
@param X The input allocation contains vector x, supported elements type: {Element#F64_2}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param beta The scalar beta.
@param Y The input allocation contains vector y, supported elements type: {Element#F64_2}.
@param incY The increment for the elements of vector y, must be larger than zero.
"
      end

      operation 46497847 "STRMV"
	public explicit_return_type "void"
	nparams 6
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "Diag" explicit_type "RsBlasDiag"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "STRMV performs one of the matrix-vector operations
x := A*x   or   x := A**T*x

Details: http://www.netlib.org/lapack/explore-html/de/d45/strmv_8f.html

@param Uplo Specifies whether the matrix is an upper or lower triangular matrix.
@param TransA The type of transpose applied to matrix A.
@param Diag Specifies whether or not A is unit triangular.
@param A The input allocation contains matrix A, supported elements type: {Element#F32}.
@param X The input allocation contains vector x, supported elements type: {Element#F32}.
@param incX The increment for the elements of vector x, must be larger than zero.
"
      end

      operation 46497975 "DTRMV"
	public explicit_return_type "void"
	nparams 6
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "Diag" explicit_type "RsBlasDiag"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "DTRMV performs one of the matrix-vector operations
x := A*x   or   x := A**T*x

Details: http://www.netlib.org/lapack/explore-html/dc/d7e/dtrmv_8f.html

@param Uplo Specifies whether the matrix is an upper or lower triangular matrix.
@param TransA The type of transpose applied to matrix A.
@param Diag Specifies whether or not A is unit triangular.
@param A The input allocation contains matrix A, supported elements type: {Element#F64}.
@param X The input allocation contains vector x, supported elements type: {Element#F64}.
@param incX The increment for the elements of vector x, must be larger than zero.
"
      end

      operation 46498103 "CTRMV"
	public explicit_return_type "void"
	nparams 6
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "Diag" explicit_type "RsBlasDiag"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "CTRMV performs one of the matrix-vector operations
x := A*x   or   x := A**T*x   or   x := A**H*x

Details: http://www.netlib.org/lapack/explore-html/df/d78/ctrmv_8f.html

@param Uplo Specifies whether the matrix is an upper or lower triangular matrix.
@param TransA The type of transpose applied to matrix A.
@param Diag Specifies whether or not A is unit triangular.
@param A The input allocation contains matrix A, supported elements type: {Element#F32_2}.
@param X The input allocation contains vector x, supported elements type: {Element#F32_2}.
@param incX The increment for the elements of vector x, must be larger than zero.
"
      end

      operation 46498231 "ZTRMV"
	public explicit_return_type "void"
	nparams 6
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "Diag" explicit_type "RsBlasDiag"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "ZTRMV performs one of the matrix-vector operations
x := A*x   or   x := A**T*x   or   x := A**H*x

Details: http://www.netlib.org/lapack/explore-html/d0/dd1/ztrmv_8f.html

@param Uplo Specifies whether the matrix is an upper or lower triangular matrix.
@param TransA The type of transpose applied to matrix A.
@param Diag Specifies whether or not A is unit triangular.
@param A The input allocation contains matrix A, supported elements type: {Element#F64_2}.
@param X The input allocation contains vector x, supported elements type: {Element#F64_2}.
@param incX The increment for the elements of vector x, must be larger than zero.
"
      end

      operation 46498359 "STBMV"
	public explicit_return_type "void"
	nparams 7
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "Diag" explicit_type "RsBlasDiag"
	  param in name "K" explicit_type "int"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "STBMV performs one of the matrix-vector operations
x := A*x   or   x := A**T*x

Details: http://www.netlib.org/lapack/explore-html/d6/d7d/stbmv_8f.html

Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N),
      but only the region N*(K+1) will be referenced. The following subroutine can is an
      example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'.
          for i in range(0, n):
             for j in range(i, min(i+k+1, n)):
                 b[i, j-i] = a[i, j]

@param Uplo Specifies whether the matrix is an upper or lower triangular matrix.
@param TransA The type of transpose applied to matrix A.
@param Diag Specifies whether or not A is unit triangular.
@param K The number of off-diagonals of the matrix A
@param A The input allocation contains matrix A, supported elements type: {Element#F32}.
@param X The input allocation contains vector x, supported elements type: {Element#F32}.
@param incX The increment for the elements of vector x, must be larger than zero.
"
      end

      operation 46498487 "DTBMV"
	public explicit_return_type "void"
	nparams 7
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "Diag" explicit_type "RsBlasDiag"
	  param in name "K" explicit_type "int"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "DTBMV performs one of the matrix-vector operations
x := A*x   or   x := A**T*x

Details: http://www.netlib.org/lapack/explore-html/df/d29/dtbmv_8f.html

Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N),
      but only the region N*(K+1) will be referenced. The following subroutine can is an
      example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'.
          for i in range(0, n):
             for j in range(i, min(i+k+1, n)):
                 b[i, j-i] = a[i, j]

@param Uplo Specifies whether the matrix is an upper or lower triangular matrix.
@param TransA The type of transpose applied to matrix A.
@param Diag Specifies whether or not A is unit triangular.
@param K The number of off-diagonals of the matrix A
@param A The input allocation contains matrix A, supported elements type: {Element#F64}.
@param X The input allocation contains vector x, supported elements type: {Element#F64}.
@param incX The increment for the elements of vector x, must be larger than zero.
"
      end

      operation 46498615 "CTBMV"
	public explicit_return_type "void"
	nparams 7
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "Diag" explicit_type "RsBlasDiag"
	  param in name "K" explicit_type "int"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "CTBMV performs one of the matrix-vector operations
x := A*x   or   x := A**T*x   or   x := A**H*x

Details: http://www.netlib.org/lapack/explore-html/d3/dcd/ctbmv_8f.html

Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N),
      but only the region N*(K+1) will be referenced. The following subroutine can is an
      example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'.
          for i in range(0, n):
             for j in range(i, min(i+k+1, n)):
                 b[i, j-i] = a[i, j]

@param Uplo Specifies whether the matrix is an upper or lower triangular matrix.
@param TransA The type of transpose applied to matrix A.
@param Diag Specifies whether or not A is unit triangular.
@param K The number of off-diagonals of the matrix A
@param A The input allocation contains matrix A, supported elements type: {Element#F32_2}.
@param X The input allocation contains vector x, supported elements type: {Element#F32_2}.
@param incX The increment for the elements of vector x, must be larger than zero.
"
      end

      operation 46498743 "ZTBMV"
	public explicit_return_type "void"
	nparams 7
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "Diag" explicit_type "RsBlasDiag"
	  param in name "K" explicit_type "int"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "ZTBMV performs one of the matrix-vector operations
x := A*x   or   x := A**T*x   or   x := A**H*x

Details: http://www.netlib.org/lapack/explore-html/d3/d39/ztbmv_8f.html

Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N),
      but only the region N*(K+1) will be referenced. The following subroutine can is an
      example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'.
          for i in range(0, n):
             for j in range(i, min(i+k+1, n)):
                 b[i, j-i] = a[i, j]

@param Uplo Specifies whether the matrix is an upper or lower triangular matrix.
@param TransA The type of transpose applied to matrix A.
@param Diag Specifies whether or not A is unit triangular.
@param K The number of off-diagonals of the matrix A
@param A The input allocation contains matrix A, supported elements type: {Element#F64_2}.
@param X The input allocation contains vector x, supported elements type: {Element#F64_2}.
@param incX The increment for the elements of vector x, must be larger than zero.
"
      end

      operation 46498871 "STPMV"
	public explicit_return_type "void"
	nparams 6
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "Diag" explicit_type "RsBlasDiag"
	  param in name "Ap" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "STPMV performs one of the matrix-vector operations
x := A*x   or   x := A**T*x

Details: http://www.netlib.org/lapack/explore-html/db/db1/stpmv_8f.html

Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2,
      The following subroutine can is an example showing how to convert a UPPER trianglar matrix
      'a' to packed matrix 'b'.
          k = 0
          for i in range(0, n):
             for j in range(i, n):
                 b[k++] = a[i, j]

@param Uplo Specifies whether the matrix is an upper or lower triangular matrix.
@param TransA The type of transpose applied to matrix A.
@param Diag Specifies whether or not A is unit triangular.
@param Ap The input allocation contains packed matrix A, supported elements type: {Element#F32}.
@param X The input allocation contains vector x, supported elements type: {Element#F32}.
@param incX The increment for the elements of vector x, must be larger than zero.
"
      end

      operation 46498999 "DTPMV"
	public explicit_return_type "void"
	nparams 6
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "Diag" explicit_type "RsBlasDiag"
	  param in name "Ap" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "DTPMV performs one of the matrix-vector operations
x := A*x   or   x := A**T*x

Details: http://www.netlib.org/lapack/explore-html/dc/dcd/dtpmv_8f.html

Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2,
      The following subroutine can is an example showing how to convert a UPPER trianglar matrix
      'a' to packed matrix 'b'.
          k = 0
          for i in range(0, n):
             for j in range(i, n):
                 b[k++] = a[i, j]

@param Uplo Specifies whether the matrix is an upper or lower triangular matrix.
@param TransA The type of transpose applied to matrix A.
@param Diag Specifies whether or not A is unit triangular.
@param Ap The input allocation contains packed matrix A, supported elements type: {Element#F64}.
@param X The input allocation contains vector x, supported elements type: {Element#F64}.
@param incX The increment for the elements of vector x, must be larger than zero.
"
      end

      operation 46499127 "CTPMV"
	public explicit_return_type "void"
	nparams 6
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "Diag" explicit_type "RsBlasDiag"
	  param in name "Ap" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "CTPMV performs one of the matrix-vector operations
x := A*x   or   x := A**T*x   or   x := A**H*x

Details: http://www.netlib.org/lapack/explore-html/d4/dbb/ctpmv_8f.html

Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2,
      The following subroutine can is an example showing how to convert a UPPER trianglar matrix
      'a' to packed matrix 'b'.
          k = 0
          for i in range(0, n):
             for j in range(i, n):
                 b[k++] = a[i, j]

@param Uplo Specifies whether the matrix is an upper or lower triangular matrix.
@param TransA The type of transpose applied to matrix A.
@param Diag Specifies whether or not A is unit triangular.
@param Ap The input allocation contains packed matrix A, supported elements type: {Element#F32_2}.
@param X The input allocation contains vector x, supported elements type: {Element#F32_2}.
@param incX The increment for the elements of vector x, must be larger than zero.
"
      end

      operation 46499255 "ZTPMV"
	public explicit_return_type "void"
	nparams 6
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "Diag" explicit_type "RsBlasDiag"
	  param in name "Ap" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "ZTPMV performs one of the matrix-vector operations
x := A*x   or   x := A**T*x   or   x := A**H*x

Details: http://www.netlib.org/lapack/explore-html/d2/d9e/ztpmv_8f.html

Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2,
      The following subroutine can is an example showing how to convert a UPPER trianglar matrix
      'a' to packed matrix 'b'.
          k = 0
          for i in range(0, n):
             for j in range(i, n):
                 b[k++] = a[i, j]

@param Uplo Specifies whether the matrix is an upper or lower triangular matrix.
@param TransA The type of transpose applied to matrix A.
@param Diag Specifies whether or not A is unit triangular.
@param Ap The input allocation contains packed matrix A, supported elements type: {Element#F64_2}.
@param X The input allocation contains vector x, supported elements type: {Element#F64_2}.
@param incX The increment for the elements of vector x, must be larger than zero.
"
      end

      operation 46499383 "STRSV"
	public explicit_return_type "void"
	nparams 6
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "Diag" explicit_type "RsBlasDiag"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "STRSV solves one of the systems of equations
A*x = b   or   A**T*x = b

Details: http://www.netlib.org/lapack/explore-html/d0/d2a/strsv_8f.html

@param Uplo Specifies whether the matrix is an upper or lower triangular matrix.
@param TransA The type of transpose applied to matrix A.
@param Diag Specifies whether or not A is unit triangular.
@param A The input allocation contains matrix A, supported elements type: {Element#F32}.
@param X The input allocation contains vector x, supported elements type: {Element#F32}.
@param incX The increment for the elements of vector x, must be larger than zero.
"
      end

      operation 46499511 "DTRSV"
	public explicit_return_type "void"
	nparams 6
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "Diag" explicit_type "RsBlasDiag"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "DTRSV solves one of the systems of equations
A*x = b   or   A**T*x = b

Details: http://www.netlib.org/lapack/explore-html/d6/d96/dtrsv_8f.html

@param Uplo Specifies whether the matrix is an upper or lower triangular matrix.
@param TransA The type of transpose applied to matrix A.
@param Diag Specifies whether or not A is unit triangular.
@param A The input allocation contains matrix A, supported elements type: {Element#F64}.
@param X The input allocation contains vector x, supported elements type: {Element#F64}.
@param incX The increment for the elements of vector x, must be larger than zero.
"
      end

      operation 46499639 "CTRSV"
	public explicit_return_type "void"
	nparams 6
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "Diag" explicit_type "RsBlasDiag"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "CTRSV solves one of the systems of equations
A*x = b   or   A**T*x = b   or   A**H*x = b

Details: http://www.netlib.org/lapack/explore-html/d4/dc8/ctrsv_8f.html

@param Uplo Specifies whether the matrix is an upper or lower triangular matrix.
@param TransA The type of transpose applied to matrix A.
@param Diag Specifies whether or not A is unit triangular.
@param A The input allocation contains matrix A, supported elements type: {Element#F32_2}.
@param X The input allocation contains vector x, supported elements type: {Element#F32_2}.
@param incX The increment for the elements of vector x, must be larger than zero.
"
      end

      operation 46499767 "ZTRSV"
	public explicit_return_type "void"
	nparams 6
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "Diag" explicit_type "RsBlasDiag"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "ZTRSV solves one of the systems of equations
A*x = b   or   A**T*x = b   or   A**H*x = b

Details: http://www.netlib.org/lapack/explore-html/d1/d2f/ztrsv_8f.html

@param Uplo Specifies whether the matrix is an upper or lower triangular matrix.
@param TransA The type of transpose applied to matrix A.
@param Diag Specifies whether or not A is unit triangular.
@param A The input allocation contains matrix A, supported elements type: {Element#F64_2}.
@param X The input allocation contains vector x, supported elements type: {Element#F64_2}.
@param incX The increment for the elements of vector x, must be larger than zero.
"
      end

      operation 46499895 "STBSV"
	public explicit_return_type "void"
	nparams 7
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "Diag" explicit_type "RsBlasDiag"
	  param in name "K" explicit_type "int"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "STBSV solves one of the systems of equations
A*x = b   or   A**T*x = b

Details: http://www.netlib.org/lapack/explore-html/d0/d1f/stbsv_8f.html

Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N),
      but only the region N*(K+1) will be referenced. The following subroutine can is an
      example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'.
          for i in range(0, n):
             for j in range(i, min(i+k+1, n)):
                 b[i, j-i] = a[i, j]

@param Uplo Specifies whether the matrix is an upper or lower triangular matrix.
@param TransA The type of transpose applied to matrix A.
@param Diag Specifies whether or not A is unit triangular.
@param K The number of off-diagonals of the matrix A
@param A The input allocation contains matrix A, supported elements type: {Element#F32}.
@param X The input allocation contains vector x, supported elements type: {Element#F32}.
@param incX The increment for the elements of vector x, must be larger than zero.
"
      end

      operation 46500023 "DTBSV"
	public explicit_return_type "void"
	nparams 7
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "Diag" explicit_type "RsBlasDiag"
	  param in name "K" explicit_type "int"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "DTBSV solves one of the systems of equations
A*x = b   or   A**T*x = b

Details: http://www.netlib.org/lapack/explore-html/d4/dcf/dtbsv_8f.html

Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N),
      but only the region N*(K+1) will be referenced. The following subroutine can is an
      example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'.
          for i in range(0, n):
             for j in range(i, min(i+k+1, n)):
                 b[i, j-i] = a[i, j]

@param Uplo Specifies whether the matrix is an upper or lower triangular matrix.
@param TransA The type of transpose applied to matrix A.
@param Diag Specifies whether or not A is unit triangular.
@param K The number of off-diagonals of the matrix A
@param A The input allocation contains matrix A, supported elements type: {Element#F64}.
@param X The input allocation contains vector x, supported elements type: {Element#F64}.
@param incX The increment for the elements of vector x, must be larger than zero.
"
      end

      operation 46500151 "CTBSV"
	public explicit_return_type "void"
	nparams 7
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "Diag" explicit_type "RsBlasDiag"
	  param in name "K" explicit_type "int"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "CTBSV solves one of the systems of equations
A*x = b   or   A**T*x = b   or   A**H*x = b

Details: http://www.netlib.org/lapack/explore-html/d9/d5f/ctbsv_8f.html

Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N),
      but only the region N*(K+1) will be referenced. The following subroutine can is an
      example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'.
          for i in range(0, n):
             for j in range(i, min(i+k+1, n)):
                 b[i, j-i] = a[i, j]

@param Uplo Specifies whether the matrix is an upper or lower triangular matrix.
@param TransA The type of transpose applied to matrix A.
@param Diag Specifies whether or not A is unit triangular.
@param K The number of off-diagonals of the matrix A
@param A The input allocation contains matrix A, supported elements type: {Element#F32_2}.
@param X The input allocation contains vector x, supported elements type: {Element#F32_2}.
@param incX The increment for the elements of vector x, must be larger than zero.
"
      end

      operation 46500279 "ZTBSV"
	public explicit_return_type "void"
	nparams 7
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "Diag" explicit_type "RsBlasDiag"
	  param in name "K" explicit_type "int"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "ZTBSV solves one of the systems of equations
A*x = b   or   A**T*x = b   or   A**H*x = b

Details: http://www.netlib.org/lapack/explore-html/d4/d5a/ztbsv_8f.html

Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N),
      but only the region N*(K+1) will be referenced. The following subroutine can is an
      example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'.
          for i in range(0, n):
             for j in range(i, min(i+k+1, n)):
                 b[i, j-i] = a[i, j]

@param Uplo Specifies whether the matrix is an upper or lower triangular matrix.
@param TransA The type of transpose applied to matrix A.
@param Diag Specifies whether or not A is unit triangular.
@param K The number of off-diagonals of the matrix A
@param A The input allocation contains matrix A, supported elements type: {Element#F64_2}.
@param X The input allocation contains vector x, supported elements type: {Element#F64_2}.
@param incX The increment for the elements of vector x, must be larger than zero.
"
      end

      operation 46500407 "STPSV"
	public explicit_return_type "void"
	nparams 6
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "Diag" explicit_type "RsBlasDiag"
	  param in name "Ap" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "STPSV solves one of the systems of equations
A*x = b   or   A**T*x = b

Details: http://www.netlib.org/lapack/explore-html/d0/d7c/stpsv_8f.html

Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2,
      The following subroutine can is an example showing how to convert a UPPER trianglar matrix
      'a' to packed matrix 'b'.
          k = 0
          for i in range(0, n):
             for j in range(i, n):
                 b[k++] = a[i, j]

@param Uplo Specifies whether the matrix is an upper or lower triangular matrix.
@param TransA The type of transpose applied to matrix A.
@param Diag Specifies whether or not A is unit triangular.
@param Ap The input allocation contains packed matrix A, supported elements type: {Element#F32}.
@param X The input allocation contains vector x, supported elements type: {Element#F32}.
@param incX The increment for the elements of vector x, must be larger than zero.
"
      end

      operation 46500535 "DTPSV"
	public explicit_return_type "void"
	nparams 6
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "Diag" explicit_type "RsBlasDiag"
	  param in name "Ap" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "DTPSV solves one of the systems of equations
A*x = b   or   A**T*x = b

Details: http://www.netlib.org/lapack/explore-html/d9/d84/dtpsv_8f.html

Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2,
      The following subroutine can is an example showing how to convert a UPPER trianglar matrix
      'a' to packed matrix 'b'.
          k = 0
          for i in range(0, n):
             for j in range(i, n):
                 b[k++] = a[i, j]

@param Uplo Specifies whether the matrix is an upper or lower triangular matrix.
@param TransA The type of transpose applied to matrix A.
@param Diag Specifies whether or not A is unit triangular.
@param Ap The input allocation contains packed matrix A, supported elements type: {Element#F64}.
@param X The input allocation contains vector x, supported elements type: {Element#F64}.
@param incX The increment for the elements of vector x, must be larger than zero.
"
      end

      operation 46500663 "CTPSV"
	public explicit_return_type "void"
	nparams 6
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "Diag" explicit_type "RsBlasDiag"
	  param in name "Ap" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "CTPSV solves one of the systems of equations
A*x = b   or   A**T*x = b   or   A**H*x = b

Details: http://www.netlib.org/lapack/explore-html/d8/d56/ctpsv_8f.html

Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2,
      The following subroutine can is an example showing how to convert a UPPER trianglar matrix
      'a' to packed matrix 'b'.
          k = 0
          for i in range(0, n):
             for j in range(i, n):
                 b[k++] = a[i, j]

@param Uplo Specifies whether the matrix is an upper or lower triangular matrix.
@param TransA The type of transpose applied to matrix A.
@param Diag Specifies whether or not A is unit triangular.
@param Ap The input allocation contains packed matrix A, supported elements type: {Element#F32_2}.
@param X The input allocation contains vector x, supported elements type: {Element#F32_2}.
@param incX The increment for the elements of vector x, must be larger than zero.
"
      end

      operation 46500791 "ZTPSV"
	public explicit_return_type "void"
	nparams 6
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "Diag" explicit_type "RsBlasDiag"
	  param in name "Ap" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "ZTPSV solves one of the systems of equations
A*x = b   or   A**T*x = b   or   A**H*x = b

Details: http://www.netlib.org/lapack/explore-html/da/d57/ztpsv_8f.html

Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2,
      The following subroutine can is an example showing how to convert a UPPER trianglar matrix
      'a' to packed matrix 'b'.
          k = 0
          for i in range(0, n):
             for j in range(i, n):
                 b[k++] = a[i, j]

@param Uplo Specifies whether the matrix is an upper or lower triangular matrix.
@param TransA The type of transpose applied to matrix A.
@param Diag Specifies whether or not A is unit triangular.
@param Ap The input allocation contains packed matrix A, supported elements type: {Element#F64_2}.
@param X The input allocation contains vector x, supported elements type: {Element#F64_2}.
@param incX The increment for the elements of vector x, must be larger than zero.
"
      end

      operation 46500919 "SSYMV"
	public explicit_return_type "void"
	nparams 8
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "alpha" explicit_type "float"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "beta" explicit_type "float"
	  param in name "Y" explicit_type "sp<Allocation>"
	  param in name "incY" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "SSYMV performs the matrix-vector operation
y := alpha*A*x + beta*y

Details: http://www.netlib.org/lapack/explore-html/d2/d94/ssymv_8f.html

@param Uplo Specifies whether the upper or lower triangular part is to be referenced.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F32}.
@param X The input allocation contains vector x, supported elements type: {Element#F32}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param beta The scalar beta.
@param Y The input allocation contains vector y, supported elements type: {Element#F32}.
@param incY The increment for the elements of vector y, must be larger than zero.
"
      end

      operation 46501047 "SSBMV"
	public explicit_return_type "void"
	nparams 9
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "K" explicit_type "int"
	  param in name "alpha" explicit_type "float"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "beta" explicit_type "float"
	  param in name "Y" explicit_type "sp<Allocation>"
	  param in name "incY" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "SSBMV performs the matrix-vector operation
y := alpha*A*x + beta*y

Details: http://www.netlib.org/lapack/explore-html/d3/da1/ssbmv_8f.html

Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N),
      but only the region N*(K+1) will be referenced. The following subroutine can is an
      example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'.
          for i in range(0, n):
             for j in range(i, min(i+k+1, n)):
                 b[i, j-i] = a[i, j]

@param Uplo Specifies whether the upper or lower triangular part of the band matrix A is being supplied.
@param K The number of off-diagonals of the matrix A
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F32}.
@param X The input allocation contains vector x, supported elements type: {Element#F32}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param beta The scalar beta.
@param Y The input allocation contains vector y, supported elements type: {Element#F32}.
@param incY The increment for the elements of vector y, must be larger than zero.
"
      end

      operation 46501175 "SSPMV"
	public explicit_return_type "void"
	nparams 8
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "alpha" explicit_type "float"
	  param in name "Ap" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "beta" explicit_type "float"
	  param in name "Y" explicit_type "sp<Allocation>"
	  param in name "incY" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "SSPMV performs the matrix-vector operation
y := alpha*A*x + beta*y

Details: http://www.netlib.org/lapack/explore-html/d8/d68/sspmv_8f.html

Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2,
      The following subroutine can is an example showing how to convert a UPPER trianglar matrix
      'a' to packed matrix 'b'.
          k = 0
          for i in range(0, n):
             for j in range(i, n):
                 b[k++] = a[i, j]

@param Uplo Specifies whether the upper or lower triangular part of the matrix A is supplied in packed form.
@param alpha The scalar alpha.
@param Ap The input allocation contains matrix A, supported elements type: {Element#F32}.
@param X The input allocation contains vector x, supported elements type: {Element#F32}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param beta The scalar beta.
@param Y The input allocation contains vector y, supported elements type: {Element#F32}.
@param incY The increment for the elements of vector y, must be larger than zero.
"
      end

      operation 46501303 "SGER"
	public explicit_return_type "void"
	nparams 6
	  param in name "alpha" explicit_type "float"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "Y" explicit_type "sp<Allocation>"
	  param in name "incY" explicit_type "int"
	  param in name "A" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "SGER performs the rank 1 operation
A := alpha*x*y**T + A

Details: http://www.netlib.org/lapack/explore-html/db/d5c/sger_8f.html

@param alpha The scalar alpha.
@param X The input allocation contains vector x, supported elements type: {Element#F32}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param Y The input allocation contains vector y, supported elements type: {Element#F32}.
@param incY The increment for the elements of vector y, must be larger than zero.
@param A The input allocation contains matrix A, supported elements type: {Element#F32}.
"
      end

      operation 46501431 "SSYR"
	public explicit_return_type "void"
	nparams 5
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "alpha" explicit_type "float"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "A" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "SSYR performs the rank 1 operation
A := alpha*x*x**T + A

Details: http://www.netlib.org/lapack/explore-html/d6/dac/ssyr_8f.html

@param Uplo Specifies whether the upper or lower triangular part is to be referenced.
@param alpha The scalar alpha.
@param X The input allocation contains vector x, supported elements type: {Element#F32}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param A The input allocation contains matrix A, supported elements type: {Element#F32}.
"
      end

      operation 46501559 "SSPR"
	public explicit_return_type "void"
	nparams 5
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "alpha" explicit_type "float"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "Ap" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "SSPR performs the rank 1 operation
A := alpha*x*x**T + A

Details: http://www.netlib.org/lapack/explore-html/d2/d9b/sspr_8f.html

Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2,
      The following subroutine can is an example showing how to convert a UPPER trianglar matrix
      'a' to packed matrix 'b'.
          k = 0
          for i in range(0, n):
             for j in range(i, n):
                 b[k++] = a[i, j]

@param Uplo Specifies whether the upper or lower triangular part is to be supplied in the packed form.
@param alpha The scalar alpha.
@param X The input allocation contains vector x, supported elements type: {Element#F32}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param Ap The input allocation contains matrix A, supported elements type: {Element#F32}.
"
      end

      operation 46501687 "SSYR2"
	public explicit_return_type "void"
	nparams 7
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "alpha" explicit_type "float"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "Y" explicit_type "sp<Allocation>"
	  param in name "incY" explicit_type "int"
	  param in name "A" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "SSYR2 performs the symmetric rank 2 operation
A := alpha*x*y**T + alpha*y*x**T + A

Details: http://www.netlib.org/lapack/explore-html/db/d99/ssyr2_8f.html

@param Uplo Specifies whether the upper or lower triangular part is to be referenced.
@param alpha The scalar alpha.
@param X The input allocation contains vector x, supported elements type: {Element#F32}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param Y The input allocation contains vector y, supported elements type: {Element#F32}.
@param incY The increment for the elements of vector y, must be larger than zero.
@param A The input allocation contains matrix A, supported elements type: {Element#F32}.
"
      end

      operation 46501815 "SSPR2"
	public explicit_return_type "void"
	nparams 7
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "alpha" explicit_type "float"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "Y" explicit_type "sp<Allocation>"
	  param in name "incY" explicit_type "int"
	  param in name "Ap" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "SSPR2 performs the symmetric rank 2 operation
A := alpha*x*y**T + alpha*y*x**T + A

Details: http://www.netlib.org/lapack/explore-html/db/d3e/sspr2_8f.html

Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2,
      The following subroutine can is an example showing how to convert a UPPER trianglar matrix
      'a' to packed matrix 'b'.
          k = 0
          for i in range(0, n):
             for j in range(i, n):
                 b[k++] = a[i, j]

@param Uplo Specifies whether the upper or lower triangular part is to be supplied in the packed form.
@param alpha The scalar alpha.
@param X The input allocation contains vector x, supported elements type: {Element#F32}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param Y The input allocation contains vector y, supported elements type: {Element#F32}.
@param incY The increment for the elements of vector y, must be larger than zero.
@param Ap The input allocation contains matrix A, supported elements type: {Element#F32}.
"
      end

      operation 46501943 "DSYMV"
	public explicit_return_type "void"
	nparams 8
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "alpha" explicit_type "double"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "beta" explicit_type "double"
	  param in name "Y" explicit_type "sp<Allocation>"
	  param in name "incY" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "DSYMV performs the matrix-vector operation
y := alpha*A*x + beta*y

Details: http://www.netlib.org/lapack/explore-html/d8/dbe/dsymv_8f.html

@param Uplo Specifies whether the upper or lower triangular part is to be referenced.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F64}.
@param X The input allocation contains vector x, supported elements type: {Element#F64}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param beta The scalar beta.
@param Y The input allocation contains vector y, supported elements type: {Element#F64}.
@param incY The increment for the elements of vector y, must be larger than zero.
"
      end

      operation 46502071 "DSBMV"
	public explicit_return_type "void"
	nparams 9
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "K" explicit_type "int"
	  param in name "alpha" explicit_type "double"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "beta" explicit_type "double"
	  param in name "Y" explicit_type "sp<Allocation>"
	  param in name "incY" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "DSBMV performs the matrix-vector operation
y := alpha*A*x + beta*y

Details: http://www.netlib.org/lapack/explore-html/d8/d1e/dsbmv_8f.html

Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N),
      but only the region N*(K+1) will be referenced. The following subroutine can is an
      example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'.
          for i in range(0, n):
             for j in range(i, min(i+k+1, n)):
                 b[i, j-i] = a[i, j]

@param Uplo Specifies whether the upper or lower triangular part of the band matrix A is being supplied.
@param K The number of off-diagonals of the matrix A
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F64}.
@param X The input allocation contains vector x, supported elements type: {Element#F64}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param beta The scalar beta.
@param Y The input allocation contains vector y, supported elements type: {Element#F64}.
@param incY The increment for the elements of vector y, must be larger than zero.
"
      end

      operation 46502199 "DSPMV"
	public explicit_return_type "void"
	nparams 8
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "alpha" explicit_type "double"
	  param in name "Ap" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "beta" explicit_type "double"
	  param in name "Y" explicit_type "sp<Allocation>"
	  param in name "incY" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "DSPMV performs the matrix-vector operation
y := alpha*A*x + beta*y

Details: http://www.netlib.org/lapack/explore-html/d4/d85/dspmv_8f.html

Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2,
      The following subroutine can is an example showing how to convert a UPPER trianglar matrix
      'a' to packed matrix 'b'.
          k = 0
          for i in range(0, n):
             for j in range(i, n):
                 b[k++] = a[i, j]

@param Uplo Specifies whether the upper or lower triangular part of the matrix A is supplied in packed form.
@param alpha The scalar alpha.
@param Ap The input allocation contains matrix A, supported elements type: {Element#F64}.
@param X The input allocation contains vector x, supported elements type: {Element#F64}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param beta The scalar beta.
@param Y The input allocation contains vector y, supported elements type: {Element#F64}.
@param incY The increment for the elements of vector y, must be larger than zero.
"
      end

      operation 46502327 "DGER"
	public explicit_return_type "void"
	nparams 6
	  param in name "alpha" explicit_type "double"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "Y" explicit_type "sp<Allocation>"
	  param in name "incY" explicit_type "int"
	  param in name "A" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "DGER performs the rank 1 operation
A := alpha*x*y**T + A

Details: http://www.netlib.org/lapack/explore-html/dc/da8/dger_8f.html

@param alpha The scalar alpha.
@param X The input allocation contains vector x, supported elements type: {Element#F64}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param Y The input allocation contains vector y, supported elements type: {Element#F64}.
@param incY The increment for the elements of vector y, must be larger than zero.
@param A The input allocation contains matrix A, supported elements type: {Element#F64}.
"
      end

      operation 46502455 "DSYR"
	public explicit_return_type "void"
	nparams 5
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "alpha" explicit_type "double"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "A" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "DSYR performs the rank 1 operation
A := alpha*x*x**T + A

Details: http://www.netlib.org/lapack/explore-html/d3/d60/dsyr_8f.html

@param Uplo Specifies whether the upper or lower triangular part is to be referenced.
@param alpha The scalar alpha.
@param X The input allocation contains vector x, supported elements type: {Element#F64}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param A The input allocation contains matrix A, supported elements type: {Element#F64}.
"
      end

      operation 46502583 "DSPR"
	public explicit_return_type "void"
	nparams 5
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "alpha" explicit_type "double"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "Ap" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "DSPR performs the rank 1 operation
A := alpha*x*x**T + A

Details: http://www.netlib.org/lapack/explore-html/dd/dba/dspr_8f.html

Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2,
      The following subroutine can is an example showing how to convert a UPPER trianglar matrix
      'a' to packed matrix 'b'.
          k = 0
          for i in range(0, n):
             for j in range(i, n):
                 b[k++] = a[i, j]

@param Uplo Specifies whether the upper or lower triangular part is to be supplied in the packed form.
@param alpha The scalar alpha.
@param X The input allocation contains vector x, supported elements type: {Element#F64}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param Ap The input allocation contains matrix A, supported elements type: {Element#F64}.
"
      end

      operation 46502711 "DSYR2"
	public explicit_return_type "void"
	nparams 7
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "alpha" explicit_type "double"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "Y" explicit_type "sp<Allocation>"
	  param in name "incY" explicit_type "int"
	  param in name "A" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "DSYR2 performs the symmetric rank 2 operation
A := alpha*x*y**T + alpha*y*x**T + A

Details: http://www.netlib.org/lapack/explore-html/de/d41/dsyr2_8f.html

@param Uplo Specifies whether the upper or lower triangular part is to be referenced.
@param alpha The scalar alpha.
@param X The input allocation contains vector x, supported elements type: {Element#F64}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param Y The input allocation contains vector y, supported elements type: {Element#F64}.
@param incY The increment for the elements of vector y, must be larger than zero.
@param A The input allocation contains matrix A, supported elements type: {Element#F64}.
"
      end

      operation 46502839 "DSPR2"
	public explicit_return_type "void"
	nparams 7
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "alpha" explicit_type "double"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "Y" explicit_type "sp<Allocation>"
	  param in name "incY" explicit_type "int"
	  param in name "Ap" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "DSPR2 performs the symmetric rank 2 operation
A := alpha*x*y**T + alpha*y*x**T + A

Details: http://www.netlib.org/lapack/explore-html/dd/d9e/dspr2_8f.html

Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2,
      The following subroutine can is an example showing how to convert a UPPER trianglar matrix
      'a' to packed matrix 'b'.
          k = 0
          for i in range(0, n):
             for j in range(i, n):
                 b[k++] = a[i, j]

@param Uplo Specifies whether the upper or lower triangular part is to be supplied in the packed form.
@param alpha The scalar alpha.
@param X The input allocation contains vector x, supported elements type: {Element#F64}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param Y The input allocation contains vector y, supported elements type: {Element#F64}.
@param incY The increment for the elements of vector y, must be larger than zero.
@param Ap The input allocation contains matrix A, supported elements type: {Element#F64}.
"
      end

      operation 46502967 "CHEMV"
	public explicit_return_type "void"
	nparams 8
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "alpha" type class_ref 5413431 // Float2
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "beta" type class_ref 5413431 // Float2
	  param in name "Y" explicit_type "sp<Allocation>"
	  param in name "incY" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "CHEMV performs the matrix-vector operation
y := alpha*A*x + beta*y

Details: http://www.netlib.org/lapack/explore-html/d7/d51/chemv_8f.html

@param Uplo Specifies whether the upper or lower triangular part is to be referenced.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F32_2}.
@param X The input allocation contains vector x, supported elements type: {Element#F32_2}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param beta The scalar beta.
@param Y The input allocation contains vector y, supported elements type: {Element#F32_2}.
@param incY The increment for the elements of vector y, must be larger than zero.
"
      end

      operation 46503095 "CHBMV"
	public explicit_return_type "void"
	nparams 9
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "K" explicit_type "int"
	  param in name "alpha" type class_ref 5413431 // Float2
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "beta" type class_ref 5413431 // Float2
	  param in name "Y" explicit_type "sp<Allocation>"
	  param in name "incY" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "CHBMV performs the matrix-vector operation
y := alpha*A*x + beta*y

Details: http://www.netlib.org/lapack/explore-html/db/dc2/chbmv_8f.html

Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N),
      but only the region N*(K+1) will be referenced. The following subroutine can is an
      example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'.
          for i in range(0, n):
             for j in range(i, min(i+k+1, n)):
                 b[i, j-i] = a[i, j]

@param Uplo Specifies whether the upper or lower triangular part of the band matrix A is being supplied.
@param K The number of off-diagonals of the matrix A
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F32_2}.
@param X The input allocation contains vector x, supported elements type: {Element#F32_2}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param beta The scalar beta.
@param Y The input allocation contains vector y, supported elements type: {Element#F32_2}.
@param incY The increment for the elements of vector y, must be larger than zero.
"
      end

      operation 46503223 "CHPMV"
	public explicit_return_type "void"
	nparams 8
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "alpha" type class_ref 5413431 // Float2
	  param in name "Ap" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "beta" type class_ref 5413431 // Float2
	  param in name "Y" explicit_type "sp<Allocation>"
	  param in name "incY" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "CHPMV performs the matrix-vector operation
y := alpha*A*x + beta*y

Details: http://www.netlib.org/lapack/explore-html/d2/d06/chpmv_8f.html

Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2,
      The following subroutine can is an example showing how to convert a UPPER trianglar matrix
      'a' to packed matrix 'b'.
          k = 0
          for i in range(0, n):
             for j in range(i, n):
                 b[k++] = a[i, j]

@param Uplo Specifies whether the upper or lower triangular part of the matrix A is supplied in packed form.
@param alpha The scalar alpha.
@param Ap The input allocation contains matrix A, supported elements type: {Element#F32_2}.
@param X The input allocation contains vector x, supported elements type: {Element#F32_2}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param beta The scalar beta.
@param Y The input allocation contains vector y, supported elements type: {Element#F32_2}.
@param incY The increment for the elements of vector y, must be larger than zero.
"
      end

      operation 46503351 "CGERU"
	public explicit_return_type "void"
	nparams 6
	  param in name "alpha" type class_ref 5413431 // Float2
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "Y" explicit_type "sp<Allocation>"
	  param in name "incY" explicit_type "int"
	  param in name "A" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "CGERU performs the rank 1 operation
A := alpha*x*y**T + A

Details: http://www.netlib.org/lapack/explore-html/db/d5f/cgeru_8f.html

@param alpha The scalar alpha.
@param X The input allocation contains vector x, supported elements type: {Element#F32_2}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param Y The input allocation contains vector y, supported elements type: {Element#F32_2}.
@param incY The increment for the elements of vector y, must be larger than zero.
@param A The input allocation contains matrix A, supported elements type: {Element#F32_2}.
"
      end

      operation 46503479 "CGERC"
	public explicit_return_type "void"
	nparams 6
	  param in name "alpha" type class_ref 5413431 // Float2
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "Y" explicit_type "sp<Allocation>"
	  param in name "incY" explicit_type "int"
	  param in name "A" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "CGERC performs the rank 1 operation
A := alpha*x*y**H + A

Details: http://www.netlib.org/lapack/explore-html/dd/d84/cgerc_8f.html

@param alpha The scalar alpha.
@param X The input allocation contains vector x, supported elements type: {Element#F32_2}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param Y The input allocation contains vector y, supported elements type: {Element#F32_2}.
@param incY The increment for the elements of vector y, must be larger than zero.
@param A The input allocation contains matrix A, supported elements type: {Element#F32_2}.
"
      end

      operation 46503607 "CHER"
	public explicit_return_type "void"
	nparams 5
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "alpha" explicit_type "float"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "A" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "CHER performs the rank 1 operation
A := alpha*x*x**H + A

Details: http://www.netlib.org/lapack/explore-html/d3/d6d/cher_8f.html

@param Uplo Specifies whether the upper or lower triangular part is to be referenced.
@param alpha The scalar alpha.
@param X The input allocation contains vector x, supported elements type: {Element#F32_2}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param A The input allocation contains matrix A, supported elements type: {Element#F32_2}.
"
      end

      operation 46503735 "CHPR"
	public explicit_return_type "void"
	nparams 5
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "alpha" explicit_type "float"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "Ap" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "CHPR performs the rank 1 operation
A := alpha*x*x**H + A

Details: http://www.netlib.org/lapack/explore-html/db/dcd/chpr_8f.html

Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2,
      The following subroutine can is an example showing how to convert a UPPER trianglar matrix
      'a' to packed matrix 'b'.
          k = 0
          for i in range(0, n):
             for j in range(i, n):
                 b[k++] = a[i, j]

@param Uplo Specifies whether the upper or lower triangular part is to be supplied in the packed form.
@param alpha The scalar alpha.
@param X The input allocation contains vector x, supported elements type: {Element#F32_2}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param Ap The input allocation contains matrix A, supported elements type: {Element#F32_2}.
"
      end

      operation 46503863 "CHER2"
	public explicit_return_type "void"
	nparams 7
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "alpha" type class_ref 5413431 // Float2
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "Y" explicit_type "sp<Allocation>"
	  param in name "incY" explicit_type "int"
	  param in name "A" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "CHER2 performs the symmetric rank 2 operation
A := alpha*x*y**H + alpha*y*x**H + A

Details: http://www.netlib.org/lapack/explore-html/db/d87/cher2_8f.html

@param Uplo Specifies whether the upper or lower triangular part is to be referenced.
@param alpha The scalar alpha.
@param X The input allocation contains vector x, supported elements type: {Element#F32_2}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param Y The input allocation contains vector y, supported elements type: {Element#F32_2}.
@param incY The increment for the elements of vector y, must be larger than zero.
@param A The input allocation contains matrix A, supported elements type: {Element#F32_2}.
"
      end

      operation 46503991 "CHPR2"
	public explicit_return_type "void"
	nparams 7
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "alpha" type class_ref 5413431 // Float2
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "Y" explicit_type "sp<Allocation>"
	  param in name "incY" explicit_type "int"
	  param in name "Ap" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "CHPR2 performs the symmetric rank 2 operation
A := alpha*x*y**H + alpha*y*x**H + A

Details: http://www.netlib.org/lapack/explore-html/d6/d44/chpr2_8f.html

Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2,
      The following subroutine can is an example showing how to convert a UPPER trianglar matrix
      'a' to packed matrix 'b'.
          k = 0
          for i in range(0, n):
             for j in range(i, n):
                 b[k++] = a[i, j]

@param Uplo Specifies whether the upper or lower triangular part is to be supplied in the packed form.
@param alpha The scalar alpha.
@param X The input allocation contains vector x, supported elements type: {Element#F32_2}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param Y The input allocation contains vector y, supported elements type: {Element#F32_2}.
@param incY The increment for the elements of vector y, must be larger than zero.
@param Ap The input allocation contains matrix A, supported elements type: {Element#F32_2}.
"
      end

      operation 46504119 "ZHEMV"
	public explicit_return_type "void"
	nparams 8
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "alpha" type class_ref 5413815 // Double2
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "beta" type class_ref 5413815 // Double2
	  param in name "Y" explicit_type "sp<Allocation>"
	  param in name "incY" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "ZHEMV performs the matrix-vector operation
y := alpha*A*x + beta*y

Details: http://www.netlib.org/lapack/explore-html/d0/ddd/zhemv_8f.html

@param Uplo Specifies whether the upper or lower triangular part is to be referenced.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F64_2}.
@param X The input allocation contains vector x, supported elements type: {Element#F64_2}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param beta The scalar beta.
@param Y The input allocation contains vector y, supported elements type: {Element#F64_2}.
@param incY The increment for the elements of vector y, must be larger than zero.
"
      end

      operation 46504247 "ZHBMV"
	public explicit_return_type "void"
	nparams 9
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "K" explicit_type "int"
	  param in name "alpha" type class_ref 5413815 // Double2
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "beta" type class_ref 5413815 // Double2
	  param in name "Y" explicit_type "sp<Allocation>"
	  param in name "incY" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "ZHBMV performs the matrix-vector operation
y := alpha*A*x + beta*y

Details: http://www.netlib.org/lapack/explore-html/d3/d1a/zhbmv_8f.html

Note: For a N*N matrix, the input Allocation should also be of size N*N (dimY = N, dimX = N),
      but only the region N*(K+1) will be referenced. The following subroutine can is an
      example showing how to convert a UPPER trianglar matrix 'a' to row-based band matrix 'b'.
          for i in range(0, n):
             for j in range(i, min(i+k+1, n)):
                 b[i, j-i] = a[i, j]

@param Uplo Specifies whether the upper or lower triangular part of the band matrix A is being supplied.
@param K The number of off-diagonals of the matrix A
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F64_2}.
@param X The input allocation contains vector x, supported elements type: {Element#F64_2}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param beta The scalar beta.
@param Y The input allocation contains vector y, supported elements type: {Element#F64_2}.
@param incY The increment for the elements of vector y, must be larger than zero.
"
      end

      operation 46504375 "ZHPMV"
	public explicit_return_type "void"
	nparams 8
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "alpha" type class_ref 5413815 // Double2
	  param in name "Ap" explicit_type "sp<Allocation>"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "beta" type class_ref 5413815 // Double2
	  param in name "Y" explicit_type "sp<Allocation>"
	  param in name "incY" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "ZHPMV performs the matrix-vector operation
y := alpha*A*x + beta*y

Details: http://www.netlib.org/lapack/explore-html/d0/d60/zhpmv_8f.html

Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2,
      The following subroutine can is an example showing how to convert a UPPER trianglar matrix
      'a' to packed matrix 'b'.
          k = 0
          for i in range(0, n):
             for j in range(i, n):
                 b[k++] = a[i, j]

@param Uplo Specifies whether the upper or lower triangular part of the matrix A is supplied in packed form.
@param alpha The scalar alpha.
@param Ap The input allocation contains matrix A, supported elements type: {Element#F64_2}.
@param X The input allocation contains vector x, supported elements type: {Element#F64_2}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param beta The scalar beta.
@param Y The input allocation contains vector y, supported elements type: {Element#F64_2}.
@param incY The increment for the elements of vector y, must be larger than zero.
"
      end

      operation 46504503 "ZGERU"
	public explicit_return_type "void"
	nparams 6
	  param in name "alpha" type class_ref 5413815 // Double2
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "Y" explicit_type "sp<Allocation>"
	  param in name "incY" explicit_type "int"
	  param in name "A" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "ZGERU performs the rank 1 operation
A := alpha*x*y**T + A

Details: http://www.netlib.org/lapack/explore-html/d7/d12/zgeru_8f.html

@param alpha The scalar alpha.
@param X The input allocation contains vector x, supported elements type: {Element#F64_2}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param Y The input allocation contains vector y, supported elements type: {Element#F64_2}.
@param incY The increment for the elements of vector y, must be larger than zero.
@param A The input allocation contains matrix A, supported elements type: {Element#F64_2}.
"
      end

      operation 46504631 "ZGERC"
	public explicit_return_type "void"
	nparams 6
	  param in name "alpha" type class_ref 5413815 // Double2
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "Y" explicit_type "sp<Allocation>"
	  param in name "incY" explicit_type "int"
	  param in name "A" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "ZGERC performs the rank 1 operation
A := alpha*x*y**H + A

Details: http://www.netlib.org/lapack/explore-html/d3/dad/zgerc_8f.html

@param alpha The scalar alpha.
@param X The input allocation contains vector x, supported elements type: {Element#F64_2}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param Y The input allocation contains vector y, supported elements type: {Element#F64_2}.
@param incY The increment for the elements of vector y, must be larger than zero.
@param A The input allocation contains matrix A, supported elements type: {Element#F64_2}.
"
      end

      operation 46504759 "ZHER"
	public explicit_return_type "void"
	nparams 5
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "alpha" explicit_type "double"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "A" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "ZHER performs the rank 1 operation
A := alpha*x*x**H + A

Details: http://www.netlib.org/lapack/explore-html/de/d0e/zher_8f.html

@param Uplo Specifies whether the upper or lower triangular part is to be referenced.
@param alpha The scalar alpha.
@param X The input allocation contains vector x, supported elements type: {Element#F64_2}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param A The input allocation contains matrix A, supported elements type: {Element#F64_2}.
"
      end

      operation 46504887 "ZHPR"
	public explicit_return_type "void"
	nparams 5
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "alpha" explicit_type "double"
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "Ap" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "ZHPR performs the rank 1 operation
A := alpha*x*x**H + A

Details: http://www.netlib.org/lapack/explore-html/de/de1/zhpr_8f.html

Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2,
      The following subroutine can is an example showing how to convert a UPPER trianglar matrix
      'a' to packed matrix 'b'.
          k = 0
          for i in range(0, n):
             for j in range(i, n):
                 b[k++] = a[i, j]

@param Uplo Specifies whether the upper or lower triangular part is to be supplied in the packed form.
@param alpha The scalar alpha.
@param X The input allocation contains vector x, supported elements type: {Element#F64_2}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param Ap The input allocation contains matrix A, supported elements type: {Element#F64_2}.
"
      end

      operation 46505015 "ZHER2"
	public explicit_return_type "void"
	nparams 7
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "alpha" type class_ref 5413815 // Double2
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "Y" explicit_type "sp<Allocation>"
	  param in name "incY" explicit_type "int"
	  param in name "A" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "ZHER2 performs the symmetric rank 2 operation
A := alpha*x*y**H + alpha*y*x**H + A

Details: http://www.netlib.org/lapack/explore-html/da/d8a/zher2_8f.html

@param Uplo Specifies whether the upper or lower triangular part is to be referenced.
@param alpha The scalar alpha.
@param X The input allocation contains vector x, supported elements type: {Element#F64_2}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param Y The input allocation contains vector y, supported elements type: {Element#F64_2}.
@param incY The increment for the elements of vector y, must be larger than zero.
@param A The input allocation contains matrix A, supported elements type: {Element#F64_2}.
"
      end

      operation 46505143 "ZHPR2"
	public explicit_return_type "void"
	nparams 7
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "alpha" type class_ref 5413815 // Double2
	  param in name "X" explicit_type "sp<Allocation>"
	  param in name "incX" explicit_type "int"
	  param in name "Y" explicit_type "sp<Allocation>"
	  param in name "incY" explicit_type "int"
	  param in name "Ap" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "ZHPR2 performs the symmetric rank 2 operation
A := alpha*x*y**H + alpha*y*x**H + A

Details: http://www.netlib.org/lapack/explore-html/d5/d52/zhpr2_8f.html

Note: For a N*N matrix, the input Allocation should be a 1D allocation of size dimX = N*(N+1)/2,
      The following subroutine can is an example showing how to convert a UPPER trianglar matrix
      'a' to packed matrix 'b'.
          k = 0
          for i in range(0, n):
             for j in range(i, n):
                 b[k++] = a[i, j]

@param Uplo Specifies whether the upper or lower triangular part is to be supplied in the packed form.
@param alpha The scalar alpha.
@param X The input allocation contains vector x, supported elements type: {Element#F64_2}.
@param incX The increment for the elements of vector x, must be larger than zero.
@param Y The input allocation contains vector y, supported elements type: {Element#F64_2}.
@param incY The increment for the elements of vector y, must be larger than zero.
@param Ap The input allocation contains matrix A, supported elements type: {Element#F64_2}.
"
      end

      operation 46505271 "SGEMM"
	public explicit_return_type "void"
	nparams 7
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "TransB" explicit_type "RsBlasTranspose"
	  param in name "alpha" explicit_type "float"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "B" explicit_type "sp<Allocation>"
	  param in name "beta" explicit_type "float"
	  param in name "C" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "SGEMM performs one of the matrix-matrix operations
C := alpha*op(A)*op(B) + beta*C   where op(X) is one of op(X) = X  or  op(X) = X**T

Details: http://www.netlib.org/lapack/explore-html/d4/de2/sgemm_8f.html

@param TransA The type of transpose applied to matrix A.
@param TransB The type of transpose applied to matrix B.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F32}.
@param B The input allocation contains matrix B, supported elements type: {Element#F32}.
@param beta The scalar beta.
@param C The input allocation contains matrix C, supported elements type: {Element#F32}.
"
      end

      operation 46505399 "DGEMM"
	public explicit_return_type "void"
	nparams 7
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "TransB" explicit_type "RsBlasTranspose"
	  param in name "alpha" explicit_type "double"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "B" explicit_type "sp<Allocation>"
	  param in name "beta" explicit_type "double"
	  param in name "C" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "DGEMM performs one of the matrix-matrix operations
C := alpha*op(A)*op(B) + beta*C   where op(X) is one of op(X) = X  or  op(X) = X**T

Details: http://www.netlib.org/lapack/explore-html/d7/d2b/dgemm_8f.html

@param TransA The type of transpose applied to matrix A.
@param TransB The type of transpose applied to matrix B.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F64}.
@param B The input allocation contains matrix B, supported elements type: {Element#F64}.
@param beta The scalar beta.
@param C The input allocation contains matrix C, supported elements type: {Element#F64}.
"
      end

      operation 46505527 "CGEMM"
	public explicit_return_type "void"
	nparams 7
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "TransB" explicit_type "RsBlasTranspose"
	  param in name "alpha" type class_ref 5413431 // Float2
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "B" explicit_type "sp<Allocation>"
	  param in name "beta" type class_ref 5413431 // Float2
	  param in name "C" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "CGEMM performs one of the matrix-matrix operations
C := alpha*op(A)*op(B) + beta*C   where op(X) is one of op(X) = X  or  op(X) = X**T  or  op(X) = X**H

Details: http://www.netlib.org/lapack/explore-html/d6/d5b/cgemm_8f.html

@param TransA The type of transpose applied to matrix A.
@param TransB The type of transpose applied to matrix B.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F32_2}.
@param B The input allocation contains matrix B, supported elements type: {Element#F32_2}.
@param beta The scalar beta.
@param C The input allocation contains matrix C, supported elements type: {Element#F32_2}.
"
      end

      operation 46505655 "ZGEMM"
	public explicit_return_type "void"
	nparams 7
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "TransB" explicit_type "RsBlasTranspose"
	  param in name "alpha" type class_ref 5413815 // Double2
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "B" explicit_type "sp<Allocation>"
	  param in name "beta" type class_ref 5413815 // Double2
	  param in name "C" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "ZGEMM performs one of the matrix-matrix operations
C := alpha*op(A)*op(B) + beta*C   where op(X) is one of op(X) = X  or  op(X) = X**T  or  op(X) = X**H

Details: http://www.netlib.org/lapack/explore-html/d7/d76/zgemm_8f.html

@param TransA The type of transpose applied to matrix A.
@param TransB The type of transpose applied to matrix B.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F64_2
@param B The input allocation contains matrix B, supported elements type: {Element#F64_2
@param beta The scalar beta.
@param C The input allocation contains matrix C, supported elements type: {Element#F64_2
"
      end

      operation 46505783 "SSYMM"
	public explicit_return_type "void"
	nparams 7
	  param in name "Side" explicit_type "RsBlasSide"
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "alpha" explicit_type "float"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "B" explicit_type "sp<Allocation>"
	  param in name "beta" explicit_type "float"
	  param in name "C" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "SSYMM performs one of the matrix-matrix operations
C := alpha*A*B + beta*C   or   C := alpha*B*A + beta*C

Details: http://www.netlib.org/lapack/explore-html/d7/d42/ssymm_8f.html

@param Side Specifies whether the symmetric matrix A appears on the left or right.
@param Uplo Specifies whether the upper or lower triangular part is to be referenced.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F32}.
@param B The input allocation contains matrix B, supported elements type: {Element#F32}.
@param beta The scalar beta.
@param C The input allocation contains matrix C, supported elements type: {Element#F32}.
"
      end

      operation 46505911 "DSYMM"
	public explicit_return_type "void"
	nparams 7
	  param in name "Side" explicit_type "RsBlasSide"
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "alpha" explicit_type "double"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "B" explicit_type "sp<Allocation>"
	  param in name "beta" explicit_type "double"
	  param in name "C" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "DSYMM performs one of the matrix-matrix operations
C := alpha*A*B + beta*C   or   C := alpha*B*A + beta*C

Details: http://www.netlib.org/lapack/explore-html/d8/db0/dsymm_8f.html

@param Side Specifies whether the symmetric matrix A appears on the left or right.
@param Uplo Specifies whether the upper or lower triangular part is to be referenced.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F64}.
@param B The input allocation contains matrix B, supported elements type: {Element#F64}.
@param beta The scalar beta.
@param C The input allocation contains matrix C, supported elements type: {Element#F64}.
"
      end

      operation 46506039 "CSYMM"
	public explicit_return_type "void"
	nparams 7
	  param in name "Side" explicit_type "RsBlasSide"
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "alpha" type class_ref 5413431 // Float2
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "B" explicit_type "sp<Allocation>"
	  param in name "beta" type class_ref 5413431 // Float2
	  param in name "C" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "CSYMM performs one of the matrix-matrix operations
C := alpha*A*B + beta*C   or   C := alpha*B*A + beta*C

Details: http://www.netlib.org/lapack/explore-html/db/d59/csymm_8f.html

@param Side Specifies whether the symmetric matrix A appears on the left or right.
@param Uplo Specifies whether the upper or lower triangular part is to be referenced.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F32_2}.
@param B The input allocation contains matrix B, supported elements type: {Element#F32_2}.
@param beta The scalar beta.
@param C The input allocation contains matrix C, supported elements type: {Element#F32_2}.
"
      end

      operation 46506167 "ZSYMM"
	public explicit_return_type "void"
	nparams 7
	  param in name "Side" explicit_type "RsBlasSide"
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "alpha" type class_ref 5413815 // Double2
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "B" explicit_type "sp<Allocation>"
	  param in name "beta" type class_ref 5413815 // Double2
	  param in name "C" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "ZSYMM performs one of the matrix-matrix operations
C := alpha*A*B + beta*C   or   C := alpha*B*A + beta*C

Details: http://www.netlib.org/lapack/explore-html/df/d51/zsymm_8f.html

@param Side Specifies whether the symmetric matrix A appears on the left or right.
@param Uplo Specifies whether the upper or lower triangular part is to be referenced.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F64_2}.
@param B The input allocation contains matrix B, supported elements type: {Element#F64_2}.
@param beta The scalar beta.
@param C The input allocation contains matrix C, supported elements type: {Element#F64_2}.
"
      end

      operation 46506295 "SSYRK"
	public explicit_return_type "void"
	nparams 6
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "Trans" explicit_type "RsBlasTranspose"
	  param in name "alpha" explicit_type "float"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "beta" explicit_type "float"
	  param in name "C" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "SSYRK performs one of the symmetric rank k operations
C := alpha*A*A**T + beta*C   or   C := alpha*A**T*A + beta*C

Details: http://www.netlib.org/lapack/explore-html/d0/d40/ssyrk_8f.html

@param Uplo Specifies whether the upper or lower triangular part of C is to be referenced.
@param Trans The type of transpose applied to the operation.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F32}.
@param beta The scalar beta.
@param C The input allocation contains matrix C, supported elements type: {Element#F32}.
"
      end

      operation 46506423 "DSYRK"
	public explicit_return_type "void"
	nparams 6
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "Trans" explicit_type "RsBlasTranspose"
	  param in name "alpha" explicit_type "double"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "beta" explicit_type "double"
	  param in name "C" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "DSYRK performs one of the symmetric rank k operations
C := alpha*A*A**T + beta*C   or   C := alpha*A**T*A + beta*C

Details: http://www.netlib.org/lapack/explore-html/dc/d05/dsyrk_8f.html

@param Uplo Specifies whether the upper or lower triangular part of C is to be referenced.
@param Trans The type of transpose applied to the operation.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F64}.
@param beta The scalar beta.
@param C The input allocation contains matrix C, supported elements type: {Element#F64}.
"
      end

      operation 46506551 "CSYRK"
	public explicit_return_type "void"
	nparams 6
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "Trans" explicit_type "RsBlasTranspose"
	  param in name "alpha" type class_ref 5413431 // Float2
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "beta" type class_ref 5413431 // Float2
	  param in name "C" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "CSYRK performs one of the symmetric rank k operations
C := alpha*A*A**T + beta*C   or   C := alpha*A**T*A + beta*C

Details: http://www.netlib.org/lapack/explore-html/d3/d6a/csyrk_8f.html

@param Uplo Specifies whether the upper or lower triangular part of C is to be referenced.
@param Trans The type of transpose applied to the operation.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F32_2}.
@param beta The scalar beta.
@param C The input allocation contains matrix C, supported elements type: {Element#F32_2}.
"
      end

      operation 46506679 "ZSYRK"
	public explicit_return_type "void"
	nparams 6
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "Trans" explicit_type "RsBlasTranspose"
	  param in name "alpha" type class_ref 5413815 // Double2
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "beta" type class_ref 5413815 // Double2
	  param in name "C" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "ZSYRK performs one of the symmetric rank k operations
C := alpha*A*A**T + beta*C   or   C := alpha*A**T*A + beta*C

Details: http://www.netlib.org/lapack/explore-html/de/d54/zsyrk_8f.html

@param Uplo Specifies whether the upper or lower triangular part of C is to be referenced.
@param Trans The type of transpose applied to the operation.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F64_2}.
@param beta The scalar beta.
@param C The input allocation contains matrix C, supported elements type: {Element#F64_2}.
"
      end

      operation 46506807 "SSYR2K"
	public explicit_return_type "void"
	nparams 7
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "Trans" explicit_type "RsBlasTranspose"
	  param in name "alpha" explicit_type "float"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "B" explicit_type "sp<Allocation>"
	  param in name "beta" explicit_type "float"
	  param in name "C" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "SSYR2K performs one of the symmetric rank 2k operations
C := alpha*A*B**T + alpha*B*A**T + beta*C   or   C := alpha*A**T*B + alpha*B**T*A + beta*C

Details: http://www.netlib.org/lapack/explore-html/df/d3d/ssyr2k_8f.html

@param Uplo Specifies whether the upper or lower triangular part of C is to be referenced.
@param Trans The type of transpose applied to the operation.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F32}.
@param B The input allocation contains matrix B, supported elements type: {Element#F32}.
@param beta The scalar beta.
@param C The input allocation contains matrix C, supported elements type: {Element#F32}.
"
      end

      operation 46506935 "DSYR2K"
	public explicit_return_type "void"
	nparams 7
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "Trans" explicit_type "RsBlasTranspose"
	  param in name "alpha" explicit_type "double"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "B" explicit_type "sp<Allocation>"
	  param in name "beta" explicit_type "double"
	  param in name "C" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "DSYR2K performs one of the symmetric rank 2k operations
C := alpha*A*B**T + alpha*B*A**T + beta*C   or   C := alpha*A**T*B + alpha*B**T*A + beta*C

Details: http://www.netlib.org/lapack/explore-html/d1/dec/dsyr2k_8f.html

@param Uplo Specifies whether the upper or lower triangular part of C is to be referenced.
@param Trans The type of transpose applied to the operation.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F64}.
@param B The input allocation contains matrix B, supported elements type: {Element#F64}.
@param beta The scalar beta.
@param C The input allocation contains matrix C, supported elements type: {Element#F64}.
"
      end

      operation 46507063 "CSYR2K"
	public explicit_return_type "void"
	nparams 7
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "Trans" explicit_type "RsBlasTranspose"
	  param in name "alpha" type class_ref 5413431 // Float2
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "B" explicit_type "sp<Allocation>"
	  param in name "beta" type class_ref 5413431 // Float2
	  param in name "C" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "CSYR2K performs one of the symmetric rank 2k operations
C := alpha*A*B**T + alpha*B*A**T + beta*C   or   C := alpha*A**T*B + alpha*B**T*A + beta*C

Details: http://www.netlib.org/lapack/explore-html/de/d7e/csyr2k_8f.html

@param Uplo Specifies whether the upper or lower triangular part of C is to be referenced.
@param Trans The type of transpose applied to the operation.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F32_2}.
@param B The input allocation contains matrix B, supported elements type: {Element#F32_2}.
@param beta The scalar beta.
@param C The input allocation contains matrix C, supported elements type: {Element#F32_2}.
"
      end

      operation 46507191 "ZSYR2K"
	public explicit_return_type "void"
	nparams 7
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "Trans" explicit_type "RsBlasTranspose"
	  param in name "alpha" type class_ref 5413815 // Double2
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "B" explicit_type "sp<Allocation>"
	  param in name "beta" type class_ref 5413815 // Double2
	  param in name "C" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "ZSYR2K performs one of the symmetric rank 2k operations
C := alpha*A*B**T + alpha*B*A**T + beta*C   or   C := alpha*A**T*B + alpha*B**T*A + beta*C

Details: http://www.netlib.org/lapack/explore-html/df/d20/zsyr2k_8f.html

@param Uplo Specifies whether the upper or lower triangular part of C is to be referenced.
@param Trans The type of transpose applied to the operation.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F64_2}.
@param B The input allocation contains matrix B, supported elements type: {Element#F64_2}.
@param beta The scalar beta.
@param C The input allocation contains matrix C, supported elements type: {Element#F64_2}.
"
      end

      operation 46507319 "STRMM"
	public explicit_return_type "void"
	nparams 7
	  param in name "Side" explicit_type "RsBlasSide"
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "Diag" explicit_type "RsBlasDiag"
	  param in name "alpha" explicit_type "float"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "B" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "STRMM performs one of the matrix-matrix operations
B := alpha*op(A)*B   or   B := alpha*B*op(A)
op(A) is one of  op(A) = A  or  op(A) = A**T

Details: http://www.netlib.org/lapack/explore-html/df/d01/strmm_8f.html

@param Side Specifies whether the symmetric matrix A appears on the left or right.
@param Uplo Specifies whether matrix A is upper or lower triangular.
@param TransA The type of transpose applied to matrix A.
@param Diag Specifies whether or not A is unit triangular.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F32}.
@param B The input allocation contains matrix B, supported elements type: {Element#F32}.
"
      end

      operation 46507447 "DTRMM"
	public explicit_return_type "void"
	nparams 7
	  param in name "Side" explicit_type "RsBlasSide"
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "Diag" explicit_type "RsBlasDiag"
	  param in name "alpha" explicit_type "double"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "B" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "DTRMM performs one of the matrix-matrix operations
B := alpha*op(A)*B   or   B := alpha*B*op(A)
op(A) is one of  op(A) = A  or  op(A) = A**T

Details: http://www.netlib.org/lapack/explore-html/dd/d19/dtrmm_8f.html

@param Side Specifies whether the symmetric matrix A appears on the left or right.
@param Uplo Specifies whether matrix A is upper or lower triangular.
@param TransA The type of transpose applied to matrix A.
@param Diag Specifies whether or not A is unit triangular.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F64}.
@param B The input allocation contains matrix B, supported elements type: {Element#F64}.
"
      end

      operation 46507575 "CTRMM"
	public explicit_return_type "void"
	nparams 7
	  param in name "Side" explicit_type "RsBlasSide"
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "Diag" explicit_type "RsBlasDiag"
	  param in name "alpha" type class_ref 5413431 // Float2
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "B" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "CTRMM performs one of the matrix-matrix operations
B := alpha*op(A)*B   or   B := alpha*B*op(A)
op(A) is one of  op(A) = A  or  op(A) = A**T  or  op(A) = A**H

Details: http://www.netlib.org/lapack/explore-html/d4/d9b/ctrmm_8f.html

@param Side Specifies whether the symmetric matrix A appears on the left or right.
@param Uplo Specifies whether matrix A is upper or lower triangular.
@param TransA The type of transpose applied to matrix A.
@param Diag Specifies whether or not A is unit triangular.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F32_2}.
@param B The input allocation contains matrix B, supported elements type: {Element#F32_2}.
"
      end

      operation 46507703 "ZTRMM"
	public explicit_return_type "void"
	nparams 7
	  param in name "Side" explicit_type "RsBlasSide"
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "Diag" explicit_type "RsBlasDiag"
	  param in name "alpha" type class_ref 5413815 // Double2
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "B" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "ZTRMM performs one of the matrix-matrix operations
B := alpha*op(A)*B   or   B := alpha*B*op(A)
op(A) is one of  op(A) = A  or  op(A) = A**T  or  op(A) = A**H

Details: http://www.netlib.org/lapack/explore-html/d8/de1/ztrmm_8f.html

@param Side Specifies whether the symmetric matrix A appears on the left or right.
@param Uplo Specifies whether matrix A is upper or lower triangular.
@param TransA The type of transpose applied to matrix A.
@param Diag Specifies whether or not A is unit triangular.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F64_2}.
@param B The input allocation contains matrix B, supported elements type: {Element#F64_2}.
"
      end

      operation 46507831 "STRSM"
	public explicit_return_type "void"
	nparams 7
	  param in name "Side" explicit_type "RsBlasSide"
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "Diag" explicit_type "RsBlasDiag"
	  param in name "alpha" explicit_type "float"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "B" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "STRSM solves one of the matrix equations
op(A)*X := alpha*B   or   X*op(A) := alpha*B
op(A) is one of  op(A) = A  or  op(A) = A**T

Details: http://www.netlib.org/lapack/explore-html/d2/d8b/strsm_8f.html

@param Side Specifies whether the symmetric matrix A appears on the left or right.
@param Uplo Specifies whether matrix A is upper or lower triangular.
@param TransA The type of transpose applied to matrix A.
@param Diag Specifies whether or not A is unit triangular.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F32}.
@param B The input allocation contains matrix B, supported elements type: {Element#F32}.
"
      end

      operation 46507959 "DTRSM"
	public explicit_return_type "void"
	nparams 7
	  param in name "Side" explicit_type "RsBlasSide"
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "Diag" explicit_type "RsBlasDiag"
	  param in name "alpha" explicit_type "double"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "B" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "DTRSM solves one of the matrix equations
op(A)*X := alpha*B   or   X*op(A) := alpha*B
op(A) is one of  op(A) = A  or  op(A) = A**T

Details: http://www.netlib.org/lapack/explore-html/de/da7/dtrsm_8f.html

@param Side Specifies whether the symmetric matrix A appears on the left or right.
@param Uplo Specifies whether matrix A is upper or lower triangular.
@param TransA The type of transpose applied to matrix A.
@param Diag Specifies whether or not A is unit triangular.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F64}.
@param B The input allocation contains matrix B, supported elements type: {Element#F64}.
"
      end

      operation 46508087 "CTRSM"
	public explicit_return_type "void"
	nparams 7
	  param in name "Side" explicit_type "RsBlasSide"
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "Diag" explicit_type "RsBlasDiag"
	  param in name "alpha" type class_ref 5413431 // Float2
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "B" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "CTRSM solves one of the matrix equations
op(A)*X := alpha*B   or   X*op(A) := alpha*B
op(A) is one of  op(A) = A  or  op(A) = A**T  or  op(A) = A**H

Details: http://www.netlib.org/lapack/explore-html/de/d30/ctrsm_8f.html

@param Side Specifies whether the symmetric matrix A appears on the left or right.
@param Uplo Specifies whether matrix A is upper or lower triangular.
@param TransA The type of transpose applied to matrix A.
@param Diag Specifies whether or not A is unit triangular.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F32_2}.
@param B The input allocation contains matrix B, supported elements type: {Element#F32_2}.
"
      end

      operation 46508215 "ZTRSM"
	public explicit_return_type "void"
	nparams 7
	  param in name "Side" explicit_type "RsBlasSide"
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "TransA" explicit_type "RsBlasTranspose"
	  param in name "Diag" explicit_type "RsBlasDiag"
	  param in name "alpha" type class_ref 5413815 // Double2
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "B" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "ZTRSM solves one of the matrix equations
op(A)*X := alpha*B   or   X*op(A) := alpha*B
op(A) is one of  op(A) = A  or  op(A) = A**T  or  op(A) = A**H

Details: http://www.netlib.org/lapack/explore-html/d1/d39/ztrsm_8f.html

@param Side Specifies whether the symmetric matrix A appears on the left or right.
@param Uplo Specifies whether matrix A is upper or lower triangular.
@param TransA The type of transpose applied to matrix A.
@param Diag Specifies whether or not A is unit triangular.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F64_2}.
@param B The input allocation contains matrix B, supported elements type: {Element#F64_2}.
"
      end

      operation 46508343 "CHEMM"
	public explicit_return_type "void"
	nparams 7
	  param in name "Side" explicit_type "RsBlasSide"
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "alpha" type class_ref 5413431 // Float2
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "B" explicit_type "sp<Allocation>"
	  param in name "beta" type class_ref 5413431 // Float2
	  param in name "C" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "CHEMM performs one of the matrix-matrix operations
C := alpha*A*B + beta*C   or   C := alpha*B*A + beta*C

Details: http://www.netlib.org/lapack/explore-html/d3/d66/chemm_8f.html

@param Side Specifies whether the symmetric matrix A appears on the left or right.
@param Uplo Specifies whether the upper or lower triangular part is to be referenced.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F32_2}.
@param B The input allocation contains matrix B, supported elements type: {Element#F32_2}.
@param beta The scalar beta.
@param C The input allocation contains matrix C, supported elements type: {Element#F32_2}.
"
      end

      operation 46508471 "ZHEMM"
	public explicit_return_type "void"
	nparams 7
	  param in name "Side" explicit_type "RsBlasSide"
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "alpha" type class_ref 5413815 // Double2
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "B" explicit_type "sp<Allocation>"
	  param in name "beta" type class_ref 5413815 // Double2
	  param in name "C" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "ZHEMM performs one of the matrix-matrix operations
C := alpha*A*B + beta*C   or   C := alpha*B*A + beta*C

Details: http://www.netlib.org/lapack/explore-html/d6/d3e/zhemm_8f.html

@param Side Specifies whether the symmetric matrix A appears on the left or right.
@param Uplo Specifies whether the upper or lower triangular part is to be referenced.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F64_2}.
@param B The input allocation contains matrix B, supported elements type: {Element#F64_2}.
@param beta The scalar beta.
@param C The input allocation contains matrix C, supported elements type: {Element#F64_2}.
"
      end

      operation 46508599 "CHERK"
	public explicit_return_type "void"
	nparams 6
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "Trans" explicit_type "RsBlasTranspose"
	  param in name "alpha" explicit_type "float"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "beta" explicit_type "float"
	  param in name "C" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "CHERK performs one of the hermitian rank k operations
C := alpha*A*A**H + beta*C   or   C := alpha*A**H*A + beta*C

Details: http://www.netlib.org/lapack/explore-html/d8/d52/cherk_8f.html

@param Uplo Specifies whether the upper or lower triangular part of C is to be referenced.
@param Trans The type of transpose applied to the operation.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F32_2}.
@param beta The scalar beta.
@param C The input allocation contains matrix C, supported elements type: {Element#F32_2}.
"
      end

      operation 46508727 "ZHERK"
	public explicit_return_type "void"
	nparams 6
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "Trans" explicit_type "RsBlasTranspose"
	  param in name "alpha" explicit_type "double"
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "beta" explicit_type "double"
	  param in name "C" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "ZHERK performs one of the hermitian rank k operations
C := alpha*A*A**H + beta*C   or   C := alpha*A**H*A + beta*C

Details: http://www.netlib.org/lapack/explore-html/d1/db1/zherk_8f.html

@param Uplo Specifies whether the upper or lower triangular part of C is to be referenced.
@param Trans The type of transpose applied to the operation.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F64_2}.
@param beta The scalar beta.
@param C The input allocation contains matrix C, supported elements type: {Element#F64_2}.
"
      end

      operation 46508855 "CHER2K"
	public explicit_return_type "void"
	nparams 7
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "Trans" explicit_type "RsBlasTranspose"
	  param in name "alpha" type class_ref 5413431 // Float2
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "B" explicit_type "sp<Allocation>"
	  param in name "beta" explicit_type "float"
	  param in name "C" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "CHER2K performs one of the hermitian rank 2k operations
C := alpha*A*B**H + conjg( alpha )*B*A**H + beta*C   or   C := alpha*A**H*B + conjg( alpha )*B**H*A + beta*C

Details: http://www.netlib.org/lapack/explore-html/d1/d82/cher2k_8f.html

@param Uplo Specifies whether the upper or lower triangular part of C is to be referenced.
@param Trans The type of transpose applied to the operation.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F32_2}.
@param B The input allocation contains matrix B, supported elements type: {Element#F32_2}.
@param beta The scalar beta.
@param C The input allocation contains matrix C, supported elements type: {Element#F32_2}.
"
      end

      operation 46508983 "ZHER2K"
	public explicit_return_type "void"
	nparams 7
	  param in name "Uplo" explicit_type "RsBlasUplo"
	  param in name "Trans" explicit_type "RsBlasTranspose"
	  param in name "alpha" type class_ref 5413815 // Double2
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "B" explicit_type "sp<Allocation>"
	  param in name "beta" explicit_type "double"
	  param in name "C" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "ZHER2K performs one of the hermitian rank 2k operations
C := alpha*A*B**H + conjg( alpha )*B*A**H + beta*C   or   C := alpha*A**H*B + conjg( alpha )*B**H*A + beta*C

Details: http://www.netlib.org/lapack/explore-html/d7/dfa/zher2k_8f.html

@param Uplo Specifies whether the upper or lower triangular part of C is to be referenced.
@param Trans The type of transpose applied to the operation.
@param alpha The scalar alpha.
@param A The input allocation contains matrix A, supported elements type: {Element#F64_2}.
@param B The input allocation contains matrix B, supported elements type: {Element#F64_2}.
@param beta The scalar beta.
@param C The input allocation contains matrix C, supported elements type: {Element#F64_2}.
"
      end

      operation 46509111 "BNNM"
	public explicit_return_type "void"
	nparams 7
	  param in name "A" explicit_type "sp<Allocation>"
	  param in name "a_offset" explicit_type "int"
	  param in name "B" explicit_type "sp<Allocation>"
	  param in name "b_offset" explicit_type "int"
	  param in name "C" explicit_type "sp<Allocation>"
	  param in name "c_offset" explicit_type "int"
	  param in name "c_mult" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "8-bit GEMM-like operation for neural networks: C = A * Transpose(B)
Calculations are done in 1.10.21 fixed-point format for the final output,
just before there's a shift down to drop the fractional parts. The output
values are gated to 0 to 255 to fit in a byte, but the 10-bit format
gives some headroom to avoid wrapping around on small overflows.

@param A The input allocation contains matrix A, supported elements type: {Element#U8}.
@param a_offset The offset for all values in matrix A, e.g A[i,j] = A[i,j] - a_offset. Value should be from 0 to 255.
@param B The input allocation contains matrix B, supported elements type: {Element#U8}.
@param b_offset The offset for all values in matrix B, e.g B[i,j] = B[i,j] - b_offset. Value should be from 0 to 255.
@param C The input allocation contains matrix C, supported elements type: {Element#U8}.
@param c_offset The offset for all values in matrix C.
@param c_mult The multiplier for all values in matrix C, e.g C[i,j] = (C[i,j] + c_offset) * c_mult.
"
      end
    end

    class 5416503 "ScriptIntrinsicBlend"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Intrinsic kernel for blending two Allocations.
"
      classrelation 10854711 // <generalisation>
	relation 10854711 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 10854711 // <generalisation>
	  b parent class_ref 5416119 // ScriptIntrinsic
      end

      operation 46509239 "ScriptIntrinsicBlend"
	private explicit_return_type ""
	nparams 2
	  param in name "rs" explicit_type "sp<RS>"
	  param in name "e" explicit_type "sp<const Element>"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46509367 "create"
	class_operation public explicit_return_type "sp<ScriptIntrinsicBlend>"
	nparams 2
	  param in name "rs" explicit_type "sp<RS>"
	  param in name "e" explicit_type "sp<const Element>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Supported Element types are U8_4.
@param[in] rs RenderScript context
@param[in] e Element
@return new ScriptIntrinsicBlend
"
      end

      operation 46509495 "forEachClear"
	public explicit_return_type "void"
	nparams 2
	  param in name "in" explicit_type "sp<Allocation>"
	  param in name "out" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "sets dst = {0, 0, 0, 0}
@param[in] in input Allocation
@param[in] out output Allocation
"
      end

      operation 46509623 "forEachSrc"
	public explicit_return_type "void"
	nparams 2
	  param in name "in" explicit_type "sp<Allocation>"
	  param in name "out" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets dst = src
@param[in] in input Allocation
@param[in] out output Allocation
"
      end

      operation 46509751 "forEachDst"
	public explicit_return_type "void"
	nparams 2
	  param in name "in" explicit_type "sp<Allocation>"
	  param in name "out" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets dst = dst (NOP)
@param[in] in input Allocation
@param[in] out output Allocation
"
      end

      operation 46509879 "forEachSrcOver"
	public explicit_return_type "void"
	nparams 2
	  param in name "in" explicit_type "sp<Allocation>"
	  param in name "out" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets dst = src + dst * (1.0 - src.a)
@param[in] in input Allocation
@param[in] out output Allocation
"
      end

      operation 46510007 "forEachDstOver"
	public explicit_return_type "void"
	nparams 2
	  param in name "in" explicit_type "sp<Allocation>"
	  param in name "out" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets dst = dst + src * (1.0 - dst.a)
@param[in] in input Allocation
@param[in] out output Allocation
"
      end

      operation 46510135 "forEachSrcIn"
	public explicit_return_type "void"
	nparams 2
	  param in name "in" explicit_type "sp<Allocation>"
	  param in name "out" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets dst = src * dst.a
@param[in] in input Allocation
@param[in] out output Allocation
"
      end

      operation 46510263 "forEachDstIn"
	public explicit_return_type "void"
	nparams 2
	  param in name "in" explicit_type "sp<Allocation>"
	  param in name "out" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets dst = dst * src.a
@param[in] in input Allocation
@param[in] out output Allocation
"
      end

      operation 46510391 "forEachSrcOut"
	public explicit_return_type "void"
	nparams 2
	  param in name "in" explicit_type "sp<Allocation>"
	  param in name "out" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets dst = src * (1.0 - dst.a)
@param[in] in input Allocation
@param[in] out output Allocation
"
      end

      operation 46510519 "forEachDstOut"
	public explicit_return_type "void"
	nparams 2
	  param in name "in" explicit_type "sp<Allocation>"
	  param in name "out" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets dst = dst * (1.0 - src.a)
@param[in] in input Allocation
@param[in] out output Allocation
"
      end

      operation 46510647 "forEachSrcAtop"
	public explicit_return_type "void"
	nparams 2
	  param in name "in" explicit_type "sp<Allocation>"
	  param in name "out" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets dst.rgb = src.rgb * dst.a + (1.0 - src.a) * dst.rgb
@param[in] in input Allocation
@param[in] out output Allocation
"
      end

      operation 46510775 "forEachDstAtop"
	public explicit_return_type "void"
	nparams 2
	  param in name "in" explicit_type "sp<Allocation>"
	  param in name "out" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets dst.rgb = dst.rgb * src.a + (1.0 - dst.a) * src.rgb
@param[in] in input Allocation
@param[in] out output Allocation
"
      end

      operation 46510903 "forEachXor"
	public explicit_return_type "void"
	nparams 2
	  param in name "in" explicit_type "sp<Allocation>"
	  param in name "out" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets dst = {src.r ^ dst.r, src.g ^ dst.g, src.b ^ dst.b, src.a ^ dst.a}
@param[in] in input Allocation
@param[in] out output Allocation
"
      end

      operation 46511031 "forEachMultiply"
	public explicit_return_type "void"
	nparams 2
	  param in name "in" explicit_type "sp<Allocation>"
	  param in name "out" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets dst = src * dst
@param[in] in input Allocation
@param[in] out output Allocation
"
      end

      operation 46511159 "forEachAdd"
	public explicit_return_type "void"
	nparams 2
	  param in name "in" explicit_type "sp<Allocation>"
	  param in name "out" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets dst = min(src + dst, 1.0)
@param[in] in input Allocation
@param[in] out output Allocation
"
      end

      operation 46511287 "forEachSubtract"
	public explicit_return_type "void"
	nparams 2
	  param in name "in" explicit_type "sp<Allocation>"
	  param in name "out" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets dst = max(dst - src, 0.0)
@param[in] in input Allocation
@param[in] out output Allocation
"
      end
    end

    class 5416631 "ScriptIntrinsicBlur"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Intrinsic Gausian blur filter. Applies a Gaussian blur of the specified
radius to all elements of an Allocation.
"
      classrelation 10854839 // <generalisation>
	relation 10854839 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 10854839 // <generalisation>
	  b parent class_ref 5416119 // ScriptIntrinsic
      end

      operation 46511415 "ScriptIntrinsicBlur"
	private explicit_return_type ""
	nparams 2
	  param in name "rs" explicit_type "sp<RS>"
	  param in name "e" explicit_type "sp<const Element>"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46511543 "create"
	class_operation public explicit_return_type "sp<ScriptIntrinsicBlur>"
	nparams 2
	  param in name "rs" explicit_type "sp<RS>"
	  param in name "e" explicit_type "sp<const Element>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Supported Element types are U8 and U8_4.
@param[in] rs RenderScript context
@param[in] e Element
@return new ScriptIntrinsicBlur
"
      end

      operation 46511671 "setInput"
	public explicit_return_type "void"
	nparams 1
	  param in name "in" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the input of the blur.
@param[in] in input Allocation
"
      end

      operation 46511799 "forEach"
	public explicit_return_type "void"
	nparams 1
	  param in name "out" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Runs the intrinsic.
@param[in] output Allocation
"
      end

      operation 46511927 "setRadius"
	public explicit_return_type "void"
	nparams 1
	  param in name "radius" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the radius of the blur. The supported range is 0 < radius <= 25.
@param[in] radius radius of the blur
"
      end
    end

    class 5416759 "ScriptIntrinsicColorMatrix"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Intrinsic for applying a color matrix to allocations. This has the
same effect as loading each element and converting it to a
F32_N, multiplying the result by the 4x4 color matrix
as performed by rsMatrixMultiply() and writing it to the output
after conversion back to U8_N or F32_N.
"
      classrelation 10854967 // <generalisation>
	relation 10854967 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 10854967 // <generalisation>
	  b parent class_ref 5416119 // ScriptIntrinsic
      end

      operation 46512055 "ScriptIntrinsicColorMatrix"
	private explicit_return_type ""
	nparams 2
	  param in name "rs" explicit_type "sp<RS>"
	  param in name "e" explicit_type "sp<const Element>"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46512183 "create"
	class_operation public explicit_return_type "sp<ScriptIntrinsicColorMatrix>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new intrinsic.
@param[in] rs RenderScript context
@return new ScriptIntrinsicColorMatrix
"
      end

      operation 46512311 "forEach"
	public explicit_return_type "void"
	nparams 2
	  param in name "in" explicit_type "sp<Allocation>"
	  param in name "out" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies the color matrix. Supported types are U8 and F32 with
vector lengths between 1 and 4.
@param[in] in input Allocation
@param[out] out output Allocation
"
      end

      operation 46512439 "setAdd"
	public explicit_return_type "void"
	nparams 1
	  param inout name "add" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the value to be added after the color matrix has been
applied. The default value is {0, 0, 0, 0}.
@param[in] add float[4] of values
"
      end

      operation 46512567 "setColorMatrix3"
	public explicit_return_type "void"
	nparams 1
	  param inout name "m" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the color matrix which will be applied to each cell of the
image. The alpha channel will be copied.

@param[in] m float[9] of values
"
      end

      operation 46512695 "setColorMatrix4"
	public explicit_return_type "void"
	nparams 1
	  param inout name "m" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the color matrix which will be applied to each cell of the
image.

@param[in] m float[16] of values
"
      end

      operation 46512823 "setGreyscale"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a color matrix to convert from RGB to luminance. The alpha
channel will be a copy.
"
      end

      operation 46512951 "setRGBtoYUV"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the matrix to convert from RGB to YUV with a direct copy of
the 4th channel.
"
      end

      operation 46513079 "setYUVtoRGB"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the matrix to convert from YUV to RGB with a direct copy of
the 4th channel.
"
      end
    end

    class 5416887 "ScriptIntrinsicConvolve3x3"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Intrinsic for applying a 3x3 convolve to an allocation.
"
      classrelation 10855095 // <generalisation>
	relation 10855095 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 10855095 // <generalisation>
	  b parent class_ref 5416119 // ScriptIntrinsic
      end

      operation 46513207 "ScriptIntrinsicConvolve3x3"
	private explicit_return_type ""
	nparams 2
	  param in name "rs" explicit_type "sp<RS>"
	  param in name "e" explicit_type "sp<const Element>"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46513335 "create"
	class_operation public explicit_return_type "sp<ScriptIntrinsicConvolve3x3>"
	nparams 2
	  param in name "rs" explicit_type "sp<RS>"
	  param in name "e" explicit_type "sp<const Element>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Supported types U8 and F32 with vector lengths between 1 and
4. The default convolution kernel is the identity.
@param[in] rs RenderScript context
@param[in] e Element
@return new ScriptIntrinsicConvolve3x3
"
      end

      operation 46513463 "setInput"
	public explicit_return_type "void"
	nparams 1
	  param in name "in" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets input for intrinsic.
@param[in] in input Allocation
"
      end

      operation 46513591 "forEach"
	public explicit_return_type "void"
	nparams 1
	  param in name "out" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Launches the intrinsic.
@param[in] out output Allocation
"
      end

      operation 46513719 "setCoefficients"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets convolution kernel.
@param[in] v float[9] of values
"
      end
    end

    class 5417015 "ScriptIntrinsicConvolve5x5"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Intrinsic for applying a 5x5 convolve to an allocation.
"
      classrelation 10855223 // <generalisation>
	relation 10855223 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 10855223 // <generalisation>
	  b parent class_ref 5416119 // ScriptIntrinsic
      end

      operation 46513847 "ScriptIntrinsicConvolve5x5"
	private explicit_return_type ""
	nparams 2
	  param in name "rs" explicit_type "sp<RS>"
	  param in name "e" explicit_type "sp<const Element>"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46513975 "create"
	class_operation public explicit_return_type "sp<ScriptIntrinsicConvolve5x5>"
	nparams 2
	  param in name "rs" explicit_type "sp<RS>"
	  param in name "e" explicit_type "sp<const Element>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Supported types U8 and F32 with vector lengths between 1 and
4. The default convolution kernel is the identity.
@param[in] rs RenderScript context
@param[in] e Element
@return new ScriptIntrinsicConvolve5x5
"
      end

      operation 46514103 "setInput"
	public explicit_return_type "void"
	nparams 1
	  param in name "in" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets input for intrinsic.
@param[in] in input Allocation
"
      end

      operation 46514231 "forEach"
	public explicit_return_type "void"
	nparams 1
	  param in name "out" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Launches the intrinsic.
@param[in] out output Allocation
"
      end

      operation 46514359 "setCoefficients"
	public explicit_return_type "void"
	nparams 1
	  param inout name "v" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets convolution kernel.
@param[in] v float[25] of values
"
      end
    end

    class 5417143 "ScriptIntrinsicHistogram"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Intrinsic for computing a histogram.
"
      classrelation 10855351 // <generalisation>
	relation 10855351 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 10855351 // <generalisation>
	  b parent class_ref 5416119 // ScriptIntrinsic
      end

      operation 46514487 "ScriptIntrinsicHistogram"
	private explicit_return_type ""
	nparams 2
	  param in name "rs" explicit_type "sp<RS>"
	  param in name "e" explicit_type "sp<const Element>"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      classrelation 10855479 // mOut (<directional composition>)
	relation 10855479 *-->
	  stereotype "sp"
	  a role_name "mOut" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 10855479 // mOut (<directional composition>)
	  b parent class_ref 5415223 // Allocation
      end

      operation 46514615 "create"
	class_operation public explicit_return_type "sp<ScriptIntrinsicHistogram>"
	nparams 2
	  param in name "rs" explicit_type "sp<RS>"
	  param in name "e" explicit_type "sp<const Element>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an intrinsic for calculating the histogram of an uchar
or uchar4 image.

Supported elements types are U8_4, U8_3, U8_2, and U8.

@param[in] rs The RenderScript context
@param[in] e Element type for inputs

@return ScriptIntrinsicHistogram
"
      end

      operation 46514743 "setOutput"
	public explicit_return_type "void"
	nparams 1
	  param in name "aout" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the output of the histogram.  32 bit integer types are
supported.

@param[in] aout The output allocation
"
      end

      operation 46514871 "setDotCoefficients"
	public explicit_return_type "void"
	nparams 4
	  param in name "r" explicit_type "float"
	  param in name "g" explicit_type "float"
	  param in name "b" explicit_type "float"
	  param in name "a" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the coefficients used for the dot product calculation. The
default is {0.299f, 0.587f, 0.114f, 0.f}.

Coefficients must be >= 0 and sum to 1.0 or less.

@param[in] r Red coefficient
@param[in] g Green coefficient
@param[in] b Blue coefficient
@param[in] a Alpha coefficient
"
      end

      operation 46514999 "forEach"
	public explicit_return_type "void"
	nparams 1
	  param in name "ain" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Process an input buffer and place the histogram into the output
allocation. The output allocation may be a narrower vector size
than the input. In this case the vector size of the output is
used to determine how many of the input channels are used in
the computation. This is useful if you have an RGBA input
buffer but only want the histogram for RGB.

1D and 2D input allocations are supported.

@param[in] ain The input image
"
      end

      operation 46515127 "forEach_dot"
	public explicit_return_type "void"
	nparams 1
	  param in name "ain" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Process an input buffer and place the histogram into the output
allocation. The dot product of the input channel and the
coefficients from 'setDotCoefficients' are used to calculate
the output values.

1D and 2D input allocations are supported.

@param ain The input image
"
      end
    end

    class 5417271 "ScriptIntrinsicLUT"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Intrinsic for applying a per-channel lookup table. Each channel of
the input has an independant lookup table. The tables are 256
entries in size and can cover the full value range of U8_4.
"
      classrelation 10855607 // <generalisation>
	relation 10855607 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 10855607 // <generalisation>
	  b parent class_ref 5416119 // ScriptIntrinsic
      end

      classrelation 10855735 // LUT (<directional composition>)
	relation 10855735 *-->
	  stereotype "sp"
	  a role_name "LUT" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 10855735 // LUT (<directional composition>)
	  b parent class_ref 5415223 // Allocation
      end

      attribute 19218103 "mDirty"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 19218231 "mCache"
	private explicit_type "byte"
	multiplicity "[1024]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 46515255 "setTable"
	private explicit_return_type "void"
	nparams 4
	  param in name "offset" explicit_type "uint"
	  param in name "base" explicit_type "byte"
	  param in name "length" explicit_type "uint"
	  param inout name "lutValues" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} * ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46515383 "ScriptIntrinsicLUT"
	private explicit_return_type ""
	nparams 2
	  param in name "rs" explicit_type "sp<RS>"
	  param in name "e" explicit_type "sp<const Element>"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46515511 "create"
	class_operation public explicit_return_type "sp<ScriptIntrinsicLUT>"
	nparams 2
	  param in name "rs" explicit_type "sp<RS>"
	  param in name "e" explicit_type "sp<const Element>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Supported elements types are U8_4.

The defaults tables are identity.

@param[in] rs The RenderScript context
@param[in] e Element type for intputs and outputs

@return ScriptIntrinsicLUT
"
      end

      operation 46515639 "forEach"
	public explicit_return_type "void"
	nparams 2
	  param in name "ain" explicit_type "sp<Allocation>"
	  param in name "aout" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoke the kernel and apply the lookup to each cell of ain and
copy to aout.

@param[in] ain Input allocation
@param[in] aout Output allocation
"
      end

      operation 46515767 "setRed"
	public explicit_return_type "void"
	nparams 3
	  param in name "base" explicit_type "byte"
	  param in name "length" explicit_type "uint"
	  param inout name "lutValues" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} * ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets entries in LUT for the red channel.
@param[in] base base of region to update
@param[in] length length of region to update
@param[in] lutValues LUT values to use
"
      end

      operation 46515895 "setGreen"
	public explicit_return_type "void"
	nparams 3
	  param in name "base" explicit_type "byte"
	  param in name "length" explicit_type "uint"
	  param inout name "lutValues" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} * ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets entries in LUT for the green channel.
@param[in] base base of region to update
@param[in] length length of region to update
@param[in] lutValues LUT values to use
"
      end

      operation 46516023 "setBlue"
	public explicit_return_type "void"
	nparams 3
	  param in name "base" explicit_type "byte"
	  param in name "length" explicit_type "uint"
	  param inout name "lutValues" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} * ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets entries in LUT for the blue channel.
@param[in] base base of region to update
@param[in] length length of region to update
@param[in] lutValues LUT values to use
"
      end

      operation 46516151 "setAlpha"
	public explicit_return_type "void"
	nparams 3
	  param in name "base" explicit_type "byte"
	  param in name "length" explicit_type "uint"
	  param inout name "lutValues" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} * ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets entries in LUT for the alpha channel.
@param[in] base base of region to update
@param[in] length length of region to update
@param[in] lutValues LUT values to use
"
      end

      operation 46516279 "~ScriptIntrinsicLUT"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end
    end

    class 5417399 "ScriptIntrinsicResize"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Intrinsic for performing a resize of a 2D allocation.
"
      classrelation 10855863 // <generalisation>
	relation 10855863 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 10855863 // <generalisation>
	  b parent class_ref 5416119 // ScriptIntrinsic
      end

      classrelation 10855991 // mInput (<directional composition>)
	relation 10855991 *-->
	  stereotype "sp"
	  a role_name "mInput" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 10855991 // mInput (<directional composition>)
	  b parent class_ref 5415223 // Allocation
      end

      operation 46516407 "ScriptIntrinsicResize"
	private explicit_return_type ""
	nparams 2
	  param in name "rs" explicit_type "sp<RS>"
	  param in name "e" explicit_type "sp<const Element>"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46516535 "create"
	class_operation public explicit_return_type "sp<ScriptIntrinsicResize>"
	nparams 1
	  param in name "rs" explicit_type "sp<RS>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Supported Element types are U8_4. Default lookup table is identity.
@param[in] rs RenderScript context
@param[in] e Element
@return new ScriptIntrinsic
"
      end

      operation 46516663 "forEach_bicubic"
	public explicit_return_type "void"
	nparams 1
	  param in name "aout" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resize copy the input allocation to the output specified. The
Allocation is rescaled if necessary using bi-cubic
interpolation.
@param[in] ain input Allocation
@param[in] aout output Allocation
"
      end

      operation 46516791 "setInput"
	public explicit_return_type "void"
	nparams 1
	  param in name "ain" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the input of the resize.
@param[in] lut new lookup table
"
      end
    end

    class 5417527 "ScriptIntrinsicYuvToRGB"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Intrinsic for converting an Android YUV buffer to RGB.

The input allocation should be supplied in a supported YUV format
as a YUV element Allocation. The output is RGBA; the alpha channel
will be set to 255.
"
      classrelation 10856119 // <generalisation>
	relation 10856119 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 10856119 // <generalisation>
	  b parent class_ref 5416119 // ScriptIntrinsic
      end

      operation 46516919 "ScriptIntrinsicYuvToRGB"
	private explicit_return_type ""
	nparams 2
	  param in name "rs" explicit_type "sp<RS>"
	  param in name "e" explicit_type "sp<const Element>"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 46517047 "create"
	class_operation public explicit_return_type "sp<ScriptIntrinsicYuvToRGB>"
	nparams 2
	  param in name "rs" explicit_type "sp<RS>"
	  param in name "e" explicit_type "sp<const Element>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an intrinsic for converting YUV to RGB.

Supported elements types are U8_4.

@param[in] rs The RenderScript context
@param[in] e Element type for output

@return ScriptIntrinsicYuvToRGB
"
      end

      operation 46517175 "setInput"
	public explicit_return_type "void"
	nparams 1
	  param in name "in" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the input YUV allocation.

@param[in] ain The input allocation.
"
      end

      operation 46517303 "forEach"
	public explicit_return_type "void"
	nparams 1
	  param in name "out" explicit_type "sp<Allocation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert the image to RGB.

@param[in] aout Output allocation. Must match creation element
                type.
"
      end
    end
  end

  deploymentview 401719 "cpp"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 2047415 "rsCppStructs"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 5409847 // ErrorHandlerFunc_t
	class_ref 5409975 // MessageHandlerFunc_t
	class_ref 5410103 // RSError
	class_ref 5410231 // RSInitFlags
	class_ref 5410359 // Byte2
	class_ref 5410487 // Byte3
	class_ref 5410615 // Byte4
	class_ref 5410743 // UByte2
	class_ref 5410871 // UByte3
	class_ref 5410999 // UByte4
	class_ref 5411127 // Short2
	class_ref 5411255 // Short3
	class_ref 5411383 // Short4
	class_ref 5411511 // UShort2
	class_ref 5411639 // UShort3
	class_ref 5411767 // UShort4
	class_ref 5411895 // Int2
	class_ref 5412023 // Int3
	class_ref 5412151 // Int4
	class_ref 5412279 // UInt2
	class_ref 5412407 // UInt3
	class_ref 5412535 // UInt4
	class_ref 5412663 // Long2
	class_ref 5412791 // Long3
	class_ref 5412919 // Long4
	class_ref 5413047 // ULong2
	class_ref 5413175 // ULong3
	class_ref 5413303 // ULong4
	class_ref 5413431 // Float2
	class_ref 5413559 // Float3
	class_ref 5413687 // Float4
	class_ref 5413815 // Double2
	class_ref 5413943 // Double3
	class_ref 5414071 // Double4
	class_ref 5414199 // RS
	class_ref 5414967 // BaseObj
	class_ref 5415223 // Allocation
	class_ref 5414711 // Element
	class_ref 5415607 // FieldPacker
	class_ref 5415351 // Type
	class_ref 5415863 // Script
	class_ref 5414839 // ScriptC
	class_ref 5416119 // ScriptIntrinsic
	class_ref 5416247 // ScriptIntrinsic3DLUT
	class_ref 5416375 // ScriptIntrinsicBLAS
	class_ref 5416503 // ScriptIntrinsicBlend
	class_ref 5416631 // ScriptIntrinsicBlur
	class_ref 5416759 // ScriptIntrinsicColorMatrix
	class_ref 5416887 // ScriptIntrinsicConvolve3x3
	class_ref 5417015 // ScriptIntrinsicConvolve5x5
	class_ref 5417143 // ScriptIntrinsicHistogram
	class_ref 5417271 // ScriptIntrinsicLUT
	class_ref 5417399 // ScriptIntrinsicResize
	class_ref 5417527 // ScriptIntrinsicYuvToRGB
	class_ref 5414583 // Sampler
      end
    end
  end

  package_ref 518455 // util

  package_ref 518583 // cpp
end
