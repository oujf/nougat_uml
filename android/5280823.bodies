class EvdevModule
!!!46007223.cpp!!!	init() : void
    ALOGV("%s", __func__);

    mInputHub->registerDevicePath(kDevInput);
    mPollThread = std::thread(&EvdevModule::loop, this);
!!!46007351.cpp!!!	notifyReport(inout r : input_report_t) : void
    ALOGV("%s", __func__);

    // notifyReport() will be called from an arbitrary thread within the input
    // host. Since InputHub is not threadsafe, this is how I expect this to
    // work:
    //   * notifyReport() will queue up the output report in the EvdevModule and
    //     call wake() on the InputHub.
    //   * In the main loop thread, after returning from poll(), the queue will
    //     be processed with any pending work.
!!!46007479.cpp!!!	loop() : void
    ALOGV("%s", __func__);
    for (;;) {
        mInputHub->poll();

        // TODO: process any pending work, like notify reports
    }
