format 213
"cppstrided" // android::frameworks::rs::tests::cppstrided
  revision 1
  modified_by 55 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "D:/Workspace/AndroidSourceCode/nougat_src/frameworks/rs/tests/cppstrided/"
  cpp_src_dir "D:/Workspace/AndroidSourceCode/nougat_src/frameworks/rs/tests/cppstrided/"
  deploymentview 417847 "cppstrided"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 2090423 "main"
      stereotype "source"
      cpp_src "int main(int argc, char** argv)
{

    uint32_t numElems = 1024;
    uint32_t stride = 1025;

    if (argc >= 2) {
        int tempStride = atoi(argv[1]);
        if (tempStride < 1024) {
            printf(\"stride must be greater than or equal to 1024\\n\");
            return 1;
        }
        stride = (uint32_t) tempStride;
    }

    sp<RS> rs = new RS();

    bool r = rs->init(\"/system/bin\");

    sp<const Element> e = Element::U32(rs);

    Type::Builder tb(rs, e);
    tb.setX(numElems);
    tb.setY(numElems);
    sp<const Type> t = tb.create();

    sp<Allocation> ain = Allocation::createTyped(rs, t);
    sp<Allocation> aout = Allocation::createTyped(rs, t);

    sp<ScriptC_multiply> sc = new ScriptC_multiply(rs);

    uint32_t* buf = (uint32_t*) malloc(stride * numElems * sizeof(uint32_t));
    if (!buf) {
        printf(\"malloc failed\\n\");
        return 1;
    }

    for (uint32_t i = 0; i < numElems; i++) {
        for (uint32_t ct=0; ct < numElems; ct++) {
            *(buf+(stride*i)+ct) = (uint32_t)ct + (i * numElems);
        }
    }

    ain->copy2DStridedFrom(buf, stride * sizeof(uint32_t));

    sc->forEach_multiply(ain, aout);

    aout->copy2DStridedTo(buf, stride * sizeof(uint32_t));

    for (uint32_t i = 0; i < numElems; i++) {
        for (uint32_t ct=0; ct < numElems; ct++) {
            if (*(buf+(stride*i)+ct) != (uint32_t)(ct + (i * numElems)) * 2) {
                printf(\"Mismatch at location %d, %d: %u\\n\", i, ct, *(buf+(stride*i)+ct));
                return 1;
            }
        }
    }

    printf(\"Test successful with %u stride!\\n\", stride);

    sc.clear();
    t.clear();
    e.clear();
    ain.clear();
    aout.clear();
}
"
      associated_classes
      end
    end
  end
end
