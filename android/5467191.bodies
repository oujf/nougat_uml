class Parcel
!!!46716983.cpp!!!	writeParcelableVector(in val : std::unique_ptr<std::vector<std::unique_ptr<T>>>) : status_t
    if (val.get() == nullptr) {
        return this->writeInt32(-1);
    }

    return unsafeWriteTypedVector(*val, &Parcel::writeParcelable);
!!!46717111.cpp!!!	writeParcelableVector(in val : std::vector<T>) : status_t
    return unsafeWriteTypedVector<T,const Parcelable&>(val, &Parcel::writeParcelable);
!!!46717239.cpp!!!	writeNullableParcelable(in parcelable : std::unique_ptr<T>) : status_t
    return writeRawNullableParcelable(parcelable.get());
!!!46717495.cpp!!!	write(in val : Flattenable<T>) : status_t
    const FlattenableHelper<T> helper(val);
    return write(helper);
!!!46717623.cpp!!!	write(in val : LightFlattenable<T>) : status_t
    size_t size(val.getFlattenedSize());
    if (!val.isFixedSize()) {
        status_t err = writeInt32(size);
        if (err != NO_ERROR) {
            return err;
        }
    }
    if (size) {
        void* buffer = writeInplace(size);
        if (buffer == NULL)
            return NO_MEMORY;
        return val.flatten(buffer, size);
    }
    return NO_ERROR;
!!!46723383.cpp!!!	readParcelableVector(inout val : std::unique_ptr<std::vector<std::unique_ptr<T>>>) : status_t
    const int32_t start = dataPosition();
    int32_t size;
    status_t status = readInt32(&size);
    val->reset();

    if (status != OK || size < 0) {
        return status;
    }

    setDataPosition(start);
    val->reset(new std::vector<std::unique_ptr<T>>());

    status = unsafeReadTypedVector(val->get(), &Parcel::readParcelable<T>);

    if (status != OK) {
        val->reset();
    }

    return status;
!!!46723511.cpp!!!	readParcelableVector(inout val : std::vector<T>) : status_t
    return unsafeReadTypedVector<T, Parcelable>(val, &Parcel::readParcelable);
!!!46723767.cpp!!!	readParcelable(inout parcelable : std::unique_ptr<T>) : status_t
    const int32_t start = dataPosition();
    int32_t present;
    status_t status = readInt32(&present);
    parcelable->reset();

    if (status != OK || !present) {
        return status;
    }

    setDataPosition(start);
    parcelable->reset(new T());

    status = readParcelable(parcelable->get());

    if (status != OK) {
        parcelable->reset();
    }

    return status;
!!!46723895.cpp!!!	readStrongBinder(inout val : sp<T>) : status_t
    sp<IBinder> tmp;
    status_t ret = readStrongBinder(&tmp);

    if (ret == OK) {
        *val = interface_cast<T>(tmp);

        if (val->get() == nullptr) {
            return UNKNOWN_ERROR;
        }
    }

    return ret;
!!!46726839.cpp!!!	read(inout val : Flattenable<T>) : status_t
    FlattenableHelper<T> helper(val);
    return read(helper);
!!!46726967.cpp!!!	read(inout val : LightFlattenable<T>) : status_t
    size_t size;
    if (val.isFixedSize()) {
        size = val.getFlattenedSize();
    } else {
        int32_t s;
        status_t err = readInt32(&s);
        if (err != NO_ERROR) {
            return err;
        }
        size = s;
    }
    if (size) {
        void const* buffer = readInplace(size);
        return buffer == NULL ? NO_MEMORY :
                val.unflatten(buffer, size);
    }
    return NO_ERROR;
!!!46731575.cpp!!!	unsafeReadTypedVector(inout val : std::vector<T>, in read_func : status_t(Parcel::*)(U*)) : status_t
    int32_t size;
    status_t status = this->readInt32(&size);

    if (status != OK) {
        return status;
    }

    if (size < 0) {
        return UNEXPECTED_NULL;
    }

    val->resize(size);

    for (auto& v: *val) {
        status = (this->*read_func)(&v);

        if (status != OK) {
            return status;
        }
    }

    return OK;
!!!46731703.cpp!!!	readNullableTypedVector(inout val : std::unique_ptr<std::vector<T>>, in read_func : status_t(Parcel::*)(T*)) : status_t
    const int32_t start = dataPosition();
    int32_t size;
    status_t status = readInt32(&size);
    val->reset();

    if (status != OK || size < 0) {
        return status;
    }

    setDataPosition(start);
    val->reset(new std::vector<T>());

    status = unsafeReadTypedVector(val->get(), read_func);

    if (status != OK) {
        val->reset();
    }

    return status;
!!!46731831.cpp!!!	readTypedVector(inout val : std::vector<T>, in read_func : status_t(Parcel::*)(T*)) : status_t
    return unsafeReadTypedVector(val, read_func);
!!!46731959.cpp!!!	unsafeWriteTypedVector(in val : std::vector<T>, in write_func : status_t(Parcel::*)(U)) : status_t
    if (val.size() > std::numeric_limits<int32_t>::max()) {
        return BAD_VALUE;
    }

    status_t status = this->writeInt32(val.size());

    if (status != OK) {
        return status;
    }

    for (const auto& item : val) {
        status = (this->*write_func)(item);

        if (status != OK) {
            return status;
        }
    }

    return OK;
!!!46732087.cpp!!!	writeNullableTypedVector(in val : std::unique_ptr<std::vector<T>>, in write_func : status_t(Parcel::*)(const T&)) : status_t
    if (val.get() == nullptr) {
        return this->writeInt32(-1);
    }

    return unsafeWriteTypedVector(*val, write_func);
!!!46732215.cpp!!!	writeNullableTypedVector(in val : std::unique_ptr<std::vector<T>>, in write_func : status_t(Parcel::*)(T)) : status_t
    if (val.get() == nullptr) {
        return this->writeInt32(-1);
    }

    return unsafeWriteTypedVector(*val, write_func);
!!!46732343.cpp!!!	writeTypedVector(in val : std::vector<T>, in write_func : status_t(Parcel::*)(const T&)) : status_t
    return unsafeWriteTypedVector(val, write_func);
!!!46732471.cpp!!!	writeTypedVector(in val : std::vector<T>, in write_func : status_t(Parcel::*)(T)) : status_t
    return unsafeWriteTypedVector(val, write_func);
