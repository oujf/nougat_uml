class Closure
!!!46762295.cpp!!!	Closure(inout context : Context, in kernelID : ScriptKernelID, inout returnValue : Allocation, in numValues : int, in fieldIDs : ScriptFieldID, in values : int64_t, in sizes : int, in depClosures : Closure, in depFieldIDs : ScriptFieldID)
    size_t i;

    for (i = 0; i < (size_t)numValues && fieldIDs[i] == nullptr; i++);

    mNumArg = i;
    mArgs = new const void*[mNumArg];
    for (size_t j = 0; j < mNumArg; j++) {
        mArgs[j] = (const void*)values[j];
    }

    for (; i < (size_t)numValues; i++) {
        rsAssert(fieldIDs[i] != nullptr);
        mGlobals[fieldIDs[i]] = make_pair(values[i], sizes[i]);
    }

    for (i = 0; i < mNumArg; i++) {
        const Closure* dep = depClosures[i];
        if (dep != nullptr) {
            auto mapping = mArgDeps[dep];
            if (mapping == nullptr) {
                mapping = new Map<int, ObjectBaseRef<ScriptFieldID>>();
                mArgDeps[dep] = mapping;
            }
            (*mapping)[i].set(const_cast<ScriptFieldID*>(depFieldIDs[i]));
        }
    }

    for (; i < (size_t)numValues; i++) {
        const Closure* dep = depClosures[i];
        if (dep != nullptr) {
            auto mapping = mGlobalDeps[dep];
            if (mapping == nullptr) {
                mapping = new Map<const ScriptFieldID*,
                                  ObjectBaseRef<ScriptFieldID>>();
                mGlobalDeps[dep] = mapping;
            }
            fieldIDs[i]->incSysRef();
            (*mapping)[fieldIDs[i]].set(const_cast<ScriptFieldID*>(depFieldIDs[i]));
        }
    }
!!!46762423.cpp!!!	Closure(inout context : Context, in invokeID : ScriptInvokeID, in params : void, in paramLength : size_t, in numValues : size_t, in fieldIDs : ScriptFieldID, in values : int64_t, in sizes : int)
    mParams = new uint8_t[mParamLength];
    memcpy(mParams, params, mParamLength);
    for (size_t i = 0; i < numValues; i++) {
        mGlobals[fieldIDs[i]] = make_pair(values[i], sizes[i]);
    }
!!!46762551.cpp!!!	~Closure()
    for (const auto& p : mArgDeps) {
        auto map = p.second;
        delete p.second;
    }

    for (const auto& p : mGlobalDeps) {
        auto map = p.second;
        for (const auto& p1 : *map) {
            p1.first->decSysRef();
        }
        delete p.second;
    }

    delete[] mArgs;
    delete[] mParams;
!!!46762935.cpp!!!	setArg(in index : uint32_t, in value : void, in size : int) : void
    mArgs[index] = value;
!!!46763063.cpp!!!	setGlobal(in fieldID : ScriptFieldID, in value : int64_t, in size : int) : void
    mGlobals[fieldID] = make_pair(value, size);
