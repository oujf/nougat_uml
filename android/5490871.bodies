class ProgramFragment
!!!46813495.cpp!!!	ProgramFragment(inout rsc : Context, in shaderText : char, in shaderLength : size_t, in textureNames : char, in textureNamesCount : size_t, in textureNamesLength : size_t, in params : uintptr_t, in paramLength : size_t)
    mConstantColor[0] = 1.f;
    mConstantColor[1] = 1.f;
    mConstantColor[2] = 1.f;
    mConstantColor[3] = 1.f;

    mRSC->mHal.funcs.fragment.init(mRSC, this, mUserShader, mUserShaderLen,
                                   textureNames, textureNamesCount, textureNamesLength);
!!!46813623.cpp!!!	~ProgramFragment()
    mRSC->mHal.funcs.fragment.destroy(mRSC, this);
!!!46813751.cpp!!!	setup(inout rsc : Context, inout state : ProgramFragmentState) : void
    if ((state->mLast.get() == this) && !mDirty) {
        return;
    }
    state->mLast.set(this);

    for (uint32_t ct=0; ct < mHal.state.texturesCount; ct++) {
        if (!mHal.state.textures[ct]) {
            ALOGE("No texture bound for shader id %" PRIuPTR ", texture unit %u", (uintptr_t)this, ct);
            rsc->setError(RS_ERROR_BAD_SHADER, "No texture bound");
            continue;
        }
    }

    rsc->mHal.funcs.fragment.setActive(rsc, this);
!!!46814135.cpp!!!	createFromStream(inout rsc : Context, inout stream : IStream) : ProgramFragment
    return nullptr;
!!!46814263.cpp!!!	setConstantColor(inout rsc : Context, in r : float, in g : float, in b : float, in a : float) : void
    if (isUserProgram()) {
        ALOGE("Attempting to set fixed function emulation color on user program");
        rsc->setError(RS_ERROR_BAD_SHADER, "Cannot  set fixed function emulation color on user program");
        return;
    }
    if (mHal.state.constants[0] == nullptr) {
        ALOGE("Unable to set fixed function emulation color because allocation is missing");
        rsc->setError(RS_ERROR_BAD_SHADER, "Unable to set fixed function emulation color because allocation is missing");
        return;
    }
    mConstantColor[0] = r;
    mConstantColor[1] = g;
    mConstantColor[2] = b;
    mConstantColor[3] = a;
    void *p = rsc->mHal.funcs.allocation.lock1D(rsc, mHal.state.constants[0]);
    memcpy(p, mConstantColor, 4*sizeof(float));
    mDirty = true;
    rsc->mHal.funcs.allocation.unlock1D(rsc, mHal.state.constants[0]);
