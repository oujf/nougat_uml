class ProgramVertex
!!!46818103.cpp!!!	ProgramVertex(inout rsc : Context, in shaderText : char, in shaderLength : size_t, in textureNames : char, in textureNamesCount : size_t, in textureNamesLength : size_t, in params : uintptr_t, in paramLength : size_t)
    mRSC->mHal.funcs.vertex.init(mRSC, this, mUserShader, mUserShaderLen,
                                 textureNames, textureNamesCount, textureNamesLength);
!!!46818231.cpp!!!	~ProgramVertex()
    mRSC->mHal.funcs.vertex.destroy(mRSC, this);
!!!46818359.cpp!!!	setup(inout rsc : Context, inout state : ProgramVertexState) : void
    if ((state->mLast.get() == this) && !mDirty) {
        return;
    }

    if (!isUserProgram()) {
        if (mHal.state.constants[0] == nullptr) {
            rsc->setError(RS_ERROR_FATAL_UNKNOWN,
                          "Unable to set fixed function emulation matrices because allocation is missing");
            return;
        }
        float *f = static_cast<float *>(rsc->mHal.funcs.allocation.lock1D(
                rsc, mHal.state.constants[0]));
        Matrix4x4 mvp;
        mvp.load(&f[RS_PROGRAM_VERTEX_PROJECTION_OFFSET]);
        Matrix4x4 t;
        t.load(&f[RS_PROGRAM_VERTEX_MODELVIEW_OFFSET]);
        mvp.multiply(&t);
        for (uint32_t i = 0; i < 16; i ++) {
            f[RS_PROGRAM_VERTEX_MVP_OFFSET + i] = mvp.m[i];
        }
        rsc->mHal.funcs.allocation.unlock1D(rsc, mHal.state.constants[0]);
    }

    state->mLast.set(this);

    rsc->mHal.funcs.vertex.setActive(rsc, this);
!!!46818487.cpp!!!	setProjectionMatrix(inout rsc : Context, in m : rsc_Matrix) : void
    if (isUserProgram()) {
        rsc->setError(RS_ERROR_FATAL_UNKNOWN,
                      "Attempting to set fixed function emulation matrix projection on user program");
        return;
    }
    if (mHal.state.constants[0] == nullptr) {
        rsc->setError(RS_ERROR_FATAL_UNKNOWN,
                      "Unable to set fixed function emulation matrix projection because allocation is missing");
        return;
    }
    float *f = static_cast<float *>(rsc->mHal.funcs.allocation.lock1D(
                rsc, mHal.state.constants[0]));
    memcpy(&f[RS_PROGRAM_VERTEX_PROJECTION_OFFSET], m, sizeof(rsc_Matrix));
    mDirty = true;
    rsc->mHal.funcs.allocation.unlock1D(rsc, mHal.state.constants[0]);
!!!46818615.cpp!!!	getProjectionMatrix(inout rsc : Context, inout m : rsc_Matrix) : void
    if (isUserProgram()) {
        rsc->setError(RS_ERROR_FATAL_UNKNOWN,
                      "Attempting to get fixed function emulation matrix projection on user program");
        return;
    }
    if (mHal.state.constants[0] == nullptr) {
        rsc->setError(RS_ERROR_FATAL_UNKNOWN,
                      "Unable to get fixed function emulation matrix projection because allocation is missing");
        return;
    }
    float *f = static_cast<float *>(
            rsc->mHal.funcs.allocation.lock1D(rsc, mHal.state.constants[0]));
    memcpy(m, &f[RS_PROGRAM_VERTEX_PROJECTION_OFFSET], sizeof(rsc_Matrix));
    rsc->mHal.funcs.allocation.unlock1D(rsc, mHal.state.constants[0]);
!!!46818743.cpp!!!	setModelviewMatrix(inout rsc : Context, in m : rsc_Matrix) : void
    if (isUserProgram()) {
        rsc->setError(RS_ERROR_FATAL_UNKNOWN,
                      "Attempting to set fixed function emulation matrix modelview on user program");
        return;
    }
    if (mHal.state.constants[0] == nullptr) {
        rsc->setError(RS_ERROR_FATAL_UNKNOWN,
                      "Unable to set fixed function emulation matrix modelview because allocation is missing");
        return;
    }
    float *f = static_cast<float *>(rsc->mHal.funcs.allocation.lock1D(
                rsc, mHal.state.constants[0]));
    memcpy(&f[RS_PROGRAM_VERTEX_MODELVIEW_OFFSET], m, sizeof(rsc_Matrix));
    mDirty = true;
    rsc->mHal.funcs.allocation.unlock1D(rsc, mHal.state.constants[0]);
!!!46818871.cpp!!!	setTextureMatrix(inout rsc : Context, in m : rsc_Matrix) : void
    if (isUserProgram()) {
        rsc->setError(RS_ERROR_FATAL_UNKNOWN,
                      "Attempting to set fixed function emulation matrix texture on user program");
        return;
    }
    if (mHal.state.constants[0] == nullptr) {
        rsc->setError(RS_ERROR_FATAL_UNKNOWN,
                      "Unable to set fixed function emulation matrix texture because allocation is missing");
        return;
    }
    float *f = static_cast<float *>(rsc->mHal.funcs.allocation.lock1D(
            rsc, mHal.state.constants[0]));
    memcpy(&f[RS_PROGRAM_VERTEX_TEXTURE_OFFSET], m, sizeof(rsc_Matrix));
    mDirty = true;
    rsc->mHal.funcs.allocation.unlock1D(rsc, mHal.state.constants[0]);
!!!46818999.cpp!!!	transformToScreen(inout rsc : Context, inout v4out : float, in v3in : float) : void
    if (isUserProgram()) {
        return;
    }
    float *f = static_cast<float *>(
            rsc->mHal.funcs.allocation.lock1D(rsc, mHal.state.constants[0]));
    Matrix4x4 mvp;
    mvp.loadMultiply((Matrix4x4 *)&f[RS_PROGRAM_VERTEX_MODELVIEW_OFFSET],
                     (Matrix4x4 *)&f[RS_PROGRAM_VERTEX_PROJECTION_OFFSET]);
    mvp.vectorMultiply(v4out, v3in);
    rsc->mHal.funcs.allocation.unlock1D(rsc, mHal.state.constants[0]);
!!!46819383.cpp!!!	createFromStream(inout rsc : Context, inout stream : IStream) : ProgramVertex
    return nullptr;
