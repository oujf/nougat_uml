class FBOCache
!!!46783543.cpp!!!	FBOCache()
    mDirty = true;
    mHal.state.colorTargetsCount = 1;
    mHal.state.colorTargets = new Allocation*[mHal.state.colorTargetsCount];
    mColorTargets = new ObjectBaseRef<Allocation>[mHal.state.colorTargetsCount];
    resetAll(nullptr);
!!!46783671.cpp!!!	~FBOCache()
    delete[] mHal.state.colorTargets;
    delete[] mColorTargets;
!!!46783799.cpp!!!	init(inout rsc : Context) : void
    rsc->mHal.funcs.framebuffer.init(rsc, this);
!!!46783927.cpp!!!	deinit(inout rsc : Context) : void
    rsc->mHal.funcs.framebuffer.destroy(rsc, this);
!!!46784055.cpp!!!	bindColorTarget(inout rsc : Context, inout a : Allocation, in slot : uint32_t) : void
    if (slot >= mHal.state.colorTargetsCount) {
        ALOGE("Invalid render target index");
        return;
    }
    if (a != nullptr) {
        if (!(a->getIsTexture() || (a->mHal.state.usageFlags & RS_ALLOCATION_USAGE_IO_OUTPUT))) {
            ALOGE("Invalid Color Target");
            return;
        }
    }
    mColorTargets[slot].set(a);
    mHal.state.colorTargets[slot] = a;
    mDirty = true;
!!!46784183.cpp!!!	bindDepthTarget(inout rsc : Context, inout a : Allocation) : void
    if (a != nullptr) {
        if (!a->getIsRenderTarget()) {
            ALOGE("Invalid Depth Target");
            return;
        }
    }
    mDepthTarget.set(a);
    mHal.state.depthTarget = a;
    mDirty = true;
!!!46784311.cpp!!!	resetAll(inout  : Context) : void
    for (uint32_t i = 0; i < mHal.state.colorTargetsCount; i ++) {
        mColorTargets[i].set(nullptr);
        mHal.state.colorTargets[i] = nullptr;
    }
    mDepthTarget.set(nullptr);
    mHal.state.depthTarget = nullptr;
    mDirty = true;
!!!46784439.cpp!!!	setup(inout rsc : Context) : void
    if (!mDirty) {
        return;
    }

    rsc->mHal.funcs.framebuffer.setActive(rsc, this);

    mDirty = false;
