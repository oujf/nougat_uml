class Script
!!!46823479.cpp!!!	Script(inout rsc : Context)
    memset(&mEnviroment, 0, sizeof(mEnviroment));
    memset(&mHal, 0, sizeof(mHal));

    mSlots = nullptr;
    mTypes = nullptr;
    mInitialized = false;
    mHasObjectSlots = false;
    mApiLevel = 0;
!!!46823607.cpp!!!	~Script()
    if (mSlots) {
        delete [] mSlots;
        mSlots = nullptr;
    }
    if (mTypes) {
        delete [] mTypes;
        mTypes = nullptr;
    }
!!!46823735.cpp!!!	setSlot(in slot : uint32_t, inout a : Allocation) : void
    //ALOGE("setSlot %i %p", slot, a);
    if (slot >= mHal.info.exportedVariableCount) {
        ALOGE("Script::setSlot unable to set allocation, invalid slot index");
        return;
    }

    if (mRSC->hadFatalError()) return;

    mSlots[slot].set(a);
    mHasObjectSlots = true;
    mRSC->mHal.funcs.script.setGlobalBind(mRSC, this, slot, a);
!!!46823863.cpp!!!	setVar(in slot : uint32_t, in val : void, in len : size_t) : void
    //ALOGE("setVar %i %p %i", slot, val, len);
    if (slot >= mHal.info.exportedVariableCount) {
        ALOGE("Script::setVar unable to set allocation, invalid slot index");
        return;
    }
    if (mRSC->hadFatalError()) return;

    mRSC->mHal.funcs.script.setGlobalVar(mRSC, this, slot, (void *)val, len);
!!!46823991.cpp!!!	getVar(in slot : uint32_t, in val : void, in len : size_t) : void
    //ALOGE("getVar %i %p %i", slot, val, len);
    if (slot >= mHal.info.exportedVariableCount) {
        ALOGE("Script::getVar unable to set allocation, invalid slot index: "
              "%u >= %zu", slot, mHal.info.exportedVariableCount);
        return;
    }
    if (mRSC->hadFatalError()) return;

    mRSC->mHal.funcs.script.getGlobalVar(mRSC, this, slot, (void *)val, len);
!!!46824119.cpp!!!	setVar(in slot : uint32_t, in val : void, in len : size_t, inout e : Element, in dims : uint32_t, in dimLen : size_t) : void
    if (slot >= mHal.info.exportedVariableCount) {
        ALOGE("Script::setVar unable to set allocation, invalid slot index: "
              "%u >= %zu", slot, mHal.info.exportedVariableCount);
        return;
    }
    if (mRSC->hadFatalError()) return;

    mRSC->mHal.funcs.script.setGlobalVarWithElemDims(mRSC, this, slot,
            (void *)val, len, e, dims, dimLen);
!!!46824247.cpp!!!	setVarObj(in slot : uint32_t, inout val : ObjectBase) : void
    //ALOGE("setVarObj %i %p", slot, val);
    if (slot >= mHal.info.exportedVariableCount) {
        ALOGE("Script::setVarObj unable to set allocation, invalid slot index: "
              "%u >= %zu", slot, mHal.info.exportedVariableCount);
        return;
    }
    if (mRSC->hadFatalError()) return;

    mHasObjectSlots = true;
    mRSC->mHal.funcs.script.setGlobalObj(mRSC, this, slot, val);
!!!46824375.cpp!!!	freeChildren() : bool
    incSysRef();
    mRSC->mHal.funcs.script.invokeFreeChildren(mRSC, this);
    return decSysRef();
!!!46825399.cpp!!!	callUpdateCacheObject(in rsc : Context, inout dstObj : void) : void
    if (rsc->mHal.funcs.script.updateCachedObject != nullptr) {
        rsc->mHal.funcs.script.updateCachedObject(rsc, this, (rs_script *)dstObj);
    } else {
        *((const void **)dstObj) = this;
    }
