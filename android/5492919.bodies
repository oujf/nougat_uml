class ThreadIO
!!!46836535.cpp!!!	ThreadIO()
    mRunning = true;
    mMaxInlineSize = 1024;
!!!46836791.cpp!!!	init() : void
    mToClient.init();
    mToCore.init();
!!!46836919.cpp!!!	shutdown() : void
    mRunning = false;
    mToCore.shutdown();
!!!46837175.cpp!!!	playCoreCommands(inout con : Context, in waitFd : int) : bool
    bool ret = false;

    uint8_t buf[2 * 1024];
    const CoreCmdHeader *cmd = (const CoreCmdHeader *)&buf[0];
    const void * data = (const void *)&buf[sizeof(CoreCmdHeader)];

    struct pollfd p[2];
    p[0].fd = mToCore.getReadFd();
    p[0].events = POLLIN;
    p[0].revents = 0;
    p[1].fd = waitFd;
    p[1].events = POLLIN;
    p[1].revents = 0;
    int pollCount = 1;
    if (waitFd >= 0) {
        pollCount = 2;
    }

    if (con->props.mLogTimes) {
        con->timerSet(Context::RS_TIMER_IDLE);
    }

    int waitTime = -1;
    while (mRunning) {
        int pr = poll(p, pollCount, waitTime);
        if (pr <= 0) {
            break;
        }

        if (p[0].revents) {
            size_t r = 0;
            r = mToCore.read(&buf[0], sizeof(CoreCmdHeader));
            mToCore.read(&buf[sizeof(CoreCmdHeader)], cmd->bytes);
            if (r != sizeof(CoreCmdHeader)) {
              // exception or timeout occurred.
              break;
            }

            ret = true;
            if (con->props.mLogTimes) {
                con->timerSet(Context::RS_TIMER_INTERNAL);
            }
            //ALOGV("playCoreCommands 3 %i %i", cmd->cmdID, cmd->bytes);

            if (cmd->cmdID >= (sizeof(gPlaybackFuncs) / sizeof(void *))) {
                rsAssert(cmd->cmdID < (sizeof(gPlaybackFuncs) / sizeof(void *)));
                ALOGE("playCoreCommands error con %p, cmd %i", con, cmd->cmdID);
            }

            gPlaybackFuncs[cmd->cmdID](con, data, cmd->bytes);

            if (con->props.mLogTimes) {
                con->timerSet(Context::RS_TIMER_IDLE);
            }

            if (waitFd < 0) {
                // If we don't have a secondary wait object we should stop blocking now
                // that at least one command has been processed.
                waitTime = 0;
            }
        }

        if (p[1].revents && !p[0].revents) {
            // We want to finish processing fifo events before processing the vsync.
            // Otherwise we can end up falling behind and having tremendous lag.
            break;
        }
    }
    return ret;
!!!46837303.cpp!!!	setTimeoutCallback(in cb : void (*)(void *), inout dat : void, in timeout : uint64_t) : void
    //mToCore.setTimeoutCallback(cb, dat, timeout);
!!!46837431.cpp!!!	coreHeader(in cmdID : uint32_t, in dataLen : size_t) : void
    //ALOGE("coreHeader %i %i", cmdID, dataLen);
    CoreCmdHeader *hdr = (CoreCmdHeader *)&mSendBuffer[0];
    hdr->bytes = dataLen;
    hdr->cmdID = cmdID;
    mSendLen = dataLen + sizeof(CoreCmdHeader);
    //mToCoreSocket.writeAsync(&hdr, sizeof(hdr));
    //ALOGE("coreHeader ret ");
    return &mSendBuffer[sizeof(CoreCmdHeader)];
!!!46837559.cpp!!!	coreCommit() : void
    mToCore.writeAsync(&mSendBuffer, mSendLen);
!!!46837687.cpp!!!	coreSetReturn(in data : void, in dataLen : size_t) : void
    uint32_t buf;
    if (data == nullptr) {
        data = &buf;
        dataLen = sizeof(buf);
    }

    mToCore.readReturn(data, dataLen);
!!!46837815.cpp!!!	coreGetReturn(inout data : void, in dataLen : size_t) : void
    uint32_t buf;
    if (data == nullptr) {
        data = &buf;
        dataLen = sizeof(buf);
    }

    mToCore.writeWaitReturn(data, dataLen);
!!!46837943.cpp!!!	coreWrite(in data : void, in len : size_t) : void
    //ALOGV("core write %p %i", data, (int)len);
    mToCore.writeAsync(data, len, true);
!!!46838071.cpp!!!	coreRead(inout data : void, in len : size_t) : void
    //ALOGV("core read %p %i", data, (int)len);
    mToCore.read(data, len);
!!!46838711.cpp!!!	getClientHeader(inout receiveLen : size_t, inout usrID : uint32_t) : RsMessageToClientType
    //ALOGE("getClientHeader");
    mToClient.read(&mLastClientHeader, sizeof(mLastClientHeader));

    receiveLen[0] = mLastClientHeader.bytes;
    usrID[0] = mLastClientHeader.userID;
    //ALOGE("getClientHeader %i %i %i", mLastClientHeader.cmdID, usrID[0], receiveLen[0]);
    return (RsMessageToClientType)mLastClientHeader.cmdID;
!!!46838839.cpp!!!	getClientPayload(inout data : void, inout receiveLen : size_t, inout usrID : uint32_t, in bufferLen : size_t) : RsMessageToClientType
    //ALOGE("getClientPayload");
    receiveLen[0] = mLastClientHeader.bytes;
    usrID[0] = mLastClientHeader.userID;
    if (bufferLen < mLastClientHeader.bytes) {
        return RS_MESSAGE_TO_CLIENT_RESIZE;
    }
    if (receiveLen[0]) {
        mToClient.read(data, receiveLen[0]);
    }
    //ALOGE("getClientPayload x");
    return (RsMessageToClientType)mLastClientHeader.cmdID;
!!!46838967.cpp!!!	sendToClient(in cmdID : RsMessageToClientType, in usrID : uint32_t, in data : void, in dataLen : size_t, in waitForSpace : bool) : bool

    //ALOGE("sendToClient %i %i %i", cmdID, usrID, (int)dataLen);
    ClientCmdHeader hdr;
    hdr.bytes = (uint32_t)dataLen;
    hdr.cmdID = cmdID;
    hdr.userID = usrID;

    mToClient.writeAsync(&hdr, sizeof(hdr));
    if (dataLen) {
        mToClient.writeAsync(data, dataLen);
    }

    //ALOGE("sendToClient x");
    return true;
!!!46839095.cpp!!!	clientShutdown() : void
    mToClient.shutdown();
