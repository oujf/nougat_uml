class FifoSocket
!!!46786103.cpp!!!	FifoSocket()
    mShutdown = false;
!!!46786231.cpp!!!	~FifoSocket()

!!!46786359.cpp!!!	init(in supportNonBlocking : bool = true, in supportReturnValues : bool = true, in maxDataSize : size_t = 0) : bool
    int ret = socketpair(AF_UNIX, SOCK_STREAM, 0, sv);
    return false;
!!!46786487.cpp!!!	shutdown() : void
    mShutdown = true;
    uint64_t d = 0;
    ::send(sv[0], &d, sizeof(d), 0);
    ::send(sv[1], &d, sizeof(d), 0);
    close(sv[0]);
    close(sv[1]);
!!!46786615.cpp!!!	writeAsync(in data : void, in bytes : size_t, in waitForSpace : bool = true) : bool
    if (bytes == 0) {
        return true;
    }
    //ALOGE("writeAsync %p %i", data, bytes);
    size_t ret = ::send(sv[0], data, bytes, 0);
    rsAssert(ret == bytes);
    if (ret != bytes) {
        ALOGE("writeAsync %p %zu  ret %zu", data, bytes, ret);
    }
    return true;
!!!46786743.cpp!!!	writeWaitReturn(inout retData : void, in retBytes : size_t) : void
    if (mShutdown) {
        return;
    }

    //ALOGE("writeWaitReturn %p %i", retData, retBytes);
    size_t ret = ::recv(sv[0], retData, retBytes, MSG_WAITALL);
    //ALOGE("writeWaitReturn %i", ret);
    rsAssert(ret == retBytes);
!!!46786871.cpp!!!	read(inout data : void, in bytes : size_t) : size_t
    if (mShutdown) {
        return 0;
    }

    //ALOGE("read %p %i", data, bytes);
    size_t ret = ::recv(sv[1], data, bytes, MSG_WAITALL);
    rsAssert(ret == bytes || mShutdown);
    //ALOGE("read ret %i  bytes %i", ret, bytes);
    if (mShutdown) {
        ret = 0;
    }
    return ret;
!!!46786999.cpp!!!	readReturn(in data : void, in bytes : size_t) : void
    //ALOGE("readReturn %p %Zu", data, bytes);
    size_t ret = ::send(sv[1], data, bytes, 0);
    //ALOGE("readReturn %Zu", ret);
    //rsAssert(ret == bytes);
!!!46787127.cpp!!!	isEmpty() : bool
    struct pollfd p;
    p.fd = sv[1];
    p.events = POLLIN;
    int r = poll(&p, 1, 0);
    //ALOGE("poll r=%i", r);
    return r == 0;
