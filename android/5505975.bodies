class Matrix2x2
!!!46800055.cpp!!!	loadIdentity() : void
    m[0] = 1.f;
    m[1] = 0.f;
    m[2] = 0.f;
    m[3] = 1.f;
!!!46800183.cpp!!!	load(in v : float) : void
    memcpy(m, v, sizeof(m));
!!!46800311.cpp!!!	load(in v : rs_matrix2x2) : void
    memcpy(m, v->m, sizeof(m));
!!!46800439.cpp!!!	loadMultiply(in lhs : rs_matrix2x2, in rhs : rs_matrix2x2) : void
    // Use a temporary variable to support the case where one of the inputs
    // is also the destination, e.g. left.loadMultiply(left, right);
    Matrix2x2 temp;
    for (int i=0 ; i<2 ; i++) {
        float ri0 = 0;
        float ri1 = 0;
        for (int j=0 ; j<2 ; j++) {
            const float rhs_ij = ((const Matrix2x2 *)rhs)->get(i, j);
            ri0 += ((const Matrix2x2 *)lhs)->get(j, 0) * rhs_ij;
            ri1 += ((const Matrix2x2 *)lhs)->get(j, 1) * rhs_ij;
        }
        temp.set(i, 0, ri0);
        temp.set(i, 1, ri1);
    }
    load(&temp);
!!!46800567.cpp!!!	transpose() : void
    float temp = m[1];
    m[1] = m[2];
    m[2] = temp;
