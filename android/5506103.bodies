class Matrix3x3
!!!46801079.cpp!!!	loadIdentity() : void
    m[0] = 1.f;
    m[1] = 0.f;
    m[2] = 0.f;
    m[3] = 0.f;
    m[4] = 1.f;
    m[5] = 0.f;
    m[6] = 0.f;
    m[7] = 0.f;
    m[8] = 1.f;
!!!46801207.cpp!!!	load(in v : float) : void
    memcpy(m, v, sizeof(m));
!!!46801335.cpp!!!	load(in v : rs_matrix3x3) : void
    memcpy(m, v->m, sizeof(m));
!!!46801463.cpp!!!	loadMultiply(in lhs : rs_matrix3x3, in rhs : rs_matrix3x3) : void
    // Use a temporary variable to support the case where one of the inputs
    // is also the destination, e.g. left.loadMultiply(left, right);
    Matrix3x3 temp;
    for (int i=0 ; i<3 ; i++) {
        float ri0 = 0;
        float ri1 = 0;
        float ri2 = 0;
        for (int j=0 ; j<3 ; j++) {
            const float rhs_ij = ((const Matrix3x3 *)rhs)->get(i, j);
            ri0 += ((const Matrix3x3 *)lhs)->get(j, 0) * rhs_ij;
            ri1 += ((const Matrix3x3 *)lhs)->get(j, 1) * rhs_ij;
            ri2 += ((const Matrix3x3 *)lhs)->get(j, 2) * rhs_ij;
        }
        temp.set(i, 0, ri0);
        temp.set(i, 1, ri1);
        temp.set(i, 2, ri2);
    }
    load(&temp);
!!!46801591.cpp!!!	transpose() : void
    int i, j;
    float temp;
    for (i = 0; i < 2; ++i) {
        for (j = i + 1; j < 3; ++j) {
            temp = get(i, j);
            set(i, j, get(j, i));
            set(j, i, temp);
        }
    }
