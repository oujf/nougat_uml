class Scanner
!!!46844215.cpp!!!	getChar() : int
    int c = fgetc(mFile);
    if (c == '\n') {
        mLineNumber++;
    }
    return c;
!!!46844599.cpp!!!	getNextEntry() : bool
    mTag.clear();
    mValue.clear();
    for (;;) {
        int c = getChar();
        if (c == EOF) {
            return false;
        }
        if (c == '#') {
            // Skip the comment
            string comment;
            readRestOfLine(&comment);
            continue;
        }
        if (c == ' ') {
            readRestOfLine(&mValue);
            break;
        } else if (c == '\n') {
            break;
        } else {
            mTag = c;
            readUpTo(':', &mTag);
            readRestOfLine(&mValue);
            trimSpaces(&mValue);
            break;
        }
    }
    return true;
!!!46844855.cpp!!!	atEnd() : bool
    return (mTagConsumed && feof(mFile)) || mErrorCount > MAX_ERRORS;
!!!46845239.cpp!!!	skipBlankEntries() : void
    while (findOptionalTag("")) {
        if (!mValue.empty()) {
            error() << "Unexpected: \" " << mValue << "\".\n";
        }
    }
!!!46845367.cpp!!!	findTag(in tag : char) : bool
    bool found = findOptionalTag(tag);
    if (!found) {
        error() << "Found \"" << mTag << "\" while looking for \"" << tag << "\".\n";
    }
    mTagConsumed = true;
    return found;
!!!46845495.cpp!!!	findOptionalTag(in tag : char) : bool
    if (mTagConsumed) {
        if (!getNextEntry()) {
            return false;
        }
    }
    mTagConsumed = (mTag == tag);
    return mTagConsumed;
!!!46845623.cpp!!!	skipUntilTag(in tag : char) : void
    while(!findOptionalTag(tag)) {
        mTagConsumed = true;
    }
!!!46845751.cpp!!!	checkNoValue() : void
    if (!mValue.empty()) {
        error() << "Did not expect \"" << mValue << "\" after \"" << mTag << "\".\n";
    }
!!!46845879.cpp!!!	error() : std::ostream
    return error(mLineNumber);
!!!46846007.cpp!!!	error(in lineNumber : int) : std::ostream
    if (++mErrorCount <= MAX_ERRORS) {
        cerr << mFileName << ":" << lineNumber << ": error: ";
    }
    return cerr;
!!!46846263.cpp!!!	parseArgString(in isReturn : bool) : ParameterEntry
    string s = mValue;
    ParameterEntry* p = new ParameterEntry();
    parseDocumentation(&s, &p->documentation);

    size_t optionStart = s.find(", ");
    if (optionStart != string::npos) {
        p->testOption = s.substr(optionStart + 2);
        s.erase(optionStart);
    }

    trimSpaces(&s);
    if (!isReturn) {
        size_t nameStart = s.rfind(' ');
        if (nameStart == string::npos) {
            if (s == "...") {
                p->name = s;
                p->type = s;
                p->lineNumber = mLineNumber;
                return p;
            } else {
                error() << "Missing variable name\n";
            }
        } else {
            p->name = s.substr(nameStart + 1);
            s.erase(nameStart);
            if (p->name.find('*') != string::npos) {
                error() << "The '*' should be attached to the type\n";
            }
        }
    }

    if (s == "void" && !isReturn) {
        error() << "void is only allowed for ret:\n";
    }
    p->type = s;
    p->lineNumber = mLineNumber;
    return p;
