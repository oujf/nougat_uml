class Allocation
!!!46862903.cpp!!!	getIDSafe() : void
    return getID();
!!!46863031.cpp!!!	updateCacheInfo(in t : sp<const Type>) : void
    mCurrentDimX = t->getX();
    mCurrentDimY = t->getY();
    mCurrentDimZ = t->getZ();
    mCurrentCount = mCurrentDimX;
    if (mCurrentDimY > 1) {
        mCurrentCount *= mCurrentDimY;
    }
    if (mCurrentDimZ > 1) {
        mCurrentCount *= mCurrentDimZ;
    }
!!!46863159.cpp!!!	Allocation(inout id : void, in rs : sp<RS>, in t : sp<const Type>, in usage : uint32_t)

    if ((usage & ~(RS_ALLOCATION_USAGE_SCRIPT |
                   RS_ALLOCATION_USAGE_GRAPHICS_TEXTURE |
                   RS_ALLOCATION_USAGE_GRAPHICS_VERTEX |
                   RS_ALLOCATION_USAGE_GRAPHICS_CONSTANTS |
                   RS_ALLOCATION_USAGE_GRAPHICS_RENDER_TARGET |
                   RS_ALLOCATION_USAGE_IO_INPUT |
                   RS_ALLOCATION_USAGE_IO_OUTPUT |
                   RS_ALLOCATION_USAGE_OEM |
                   RS_ALLOCATION_USAGE_SHARED)) != 0) {
        ALOGE("Unknown usage specified.");
    }

    if ((usage & RS_ALLOCATION_USAGE_IO_INPUT) != 0) {
        mWriteAllowed = false;
        if ((usage & ~(RS_ALLOCATION_USAGE_IO_INPUT |
                       RS_ALLOCATION_USAGE_GRAPHICS_TEXTURE |
                       RS_ALLOCATION_USAGE_SCRIPT)) != 0) {
            ALOGE("Invalid usage combination.");
        }
    }

    mType = t;
    mUsage = usage;
    mAutoPadding = false;
    if (t != nullptr) {
        updateCacheInfo(t);
    }

!!!46863287.cpp!!!	validateIsInt64() : void
    RsDataType dt = mType->getElement()->getDataType();
    if ((dt == RS_TYPE_SIGNED_64) || (dt == RS_TYPE_UNSIGNED_64)) {
        return;
    }
    ALOGE("64 bit integer source does not match allocation type %i", dt);
!!!46863415.cpp!!!	validateIsInt32() : void
    RsDataType dt = mType->getElement()->getDataType();
    if ((dt == RS_TYPE_SIGNED_32) || (dt == RS_TYPE_UNSIGNED_32)) {
        return;
    }
    ALOGE("32 bit integer source does not match allocation type %i", dt);
!!!46863543.cpp!!!	validateIsInt16() : void
    RsDataType dt = mType->getElement()->getDataType();
    if ((dt == RS_TYPE_SIGNED_16) || (dt == RS_TYPE_UNSIGNED_16)) {
        return;
    }
    ALOGE("16 bit integer source does not match allocation type %i", dt);
!!!46863671.cpp!!!	validateIsInt8() : void
    RsDataType dt = mType->getElement()->getDataType();
    if ((dt == RS_TYPE_SIGNED_8) || (dt == RS_TYPE_UNSIGNED_8)) {
        return;
    }
    ALOGE("8 bit integer source does not match allocation type %i", dt);
!!!46863799.cpp!!!	validateIsFloat32() : void
    RsDataType dt = mType->getElement()->getDataType();
    if (dt == RS_TYPE_FLOAT_32) {
        return;
    }
    ALOGE("32 bit float source does not match allocation type %i", dt);
!!!46863927.cpp!!!	validateIsFloat64() : void
    RsDataType dt = mType->getElement()->getDataType();
    if (dt == RS_TYPE_FLOAT_64) {
        return;
    }
    ALOGE("64 bit float source does not match allocation type %i", dt);
!!!46864055.cpp!!!	validateIsObject() : void
    RsDataType dt = mType->getElement()->getDataType();
    if ((dt == RS_TYPE_ELEMENT) ||
        (dt == RS_TYPE_TYPE) ||
        (dt == RS_TYPE_ALLOCATION) ||
        (dt == RS_TYPE_SAMPLER) ||
        (dt == RS_TYPE_SCRIPT) ||
        (dt == RS_TYPE_MESH) ||
        (dt == RS_TYPE_PROGRAM_FRAGMENT) ||
        (dt == RS_TYPE_PROGRAM_VERTEX) ||
        (dt == RS_TYPE_PROGRAM_RASTER) ||
        (dt == RS_TYPE_PROGRAM_STORE)) {
        return;
    }
    ALOGE("Object source does not match allocation type %i", dt);
!!!46864183.cpp!!!	updateFromNative() : void
    BaseObj::updateFromNative();

    const void *typeID = RS::dispatch->AllocationGetType(mRS->getContext(), getID());
    if(typeID != nullptr) {
        sp<Type> t = new Type((void *)typeID, mRS);
        t->updateFromNative();
        updateCacheInfo(t);
        mType = t;
    }
!!!46864311.cpp!!!	validate2DRange(in xoff : uint32_t, in yoff : uint32_t, in w : uint32_t, in h : uint32_t) : void
    if (mAdaptedAllocation != nullptr) {

    } else {
        if (((xoff + w) > mCurrentDimX) || ((yoff + h) > mCurrentDimY)) {
            mRS->throwError(RS_ERROR_INVALID_PARAMETER, "Updated region larger than allocation.");
        }
    }
!!!46864439.cpp!!!	validate3DRange(in xoff : uint32_t, in yoff : uint32_t, in zoff : uint32_t, in w : uint32_t, in h : uint32_t, in d : uint32_t) : void
    if (mAdaptedAllocation != nullptr) {

    } else {
        if (((xoff + w) > mCurrentDimX) || ((yoff + h) > mCurrentDimY) || ((zoff + d) > mCurrentDimZ)) {
            mRS->throwError(RS_ERROR_INVALID_PARAMETER, "Updated region larger than allocation.");
        }
    }
!!!46864823.cpp!!!	syncAll(in srcLocation : RsAllocationUsageType) : void
    switch (srcLocation) {
    case RS_ALLOCATION_USAGE_SCRIPT:
    case RS_ALLOCATION_USAGE_GRAPHICS_CONSTANTS:
    case RS_ALLOCATION_USAGE_GRAPHICS_TEXTURE:
    case RS_ALLOCATION_USAGE_GRAPHICS_VERTEX:
    case RS_ALLOCATION_USAGE_SHARED:
        break;
    default:
        mRS->throwError(RS_ERROR_INVALID_PARAMETER, "Source must be exactly one usage type.");
        return;
    }
    tryDispatch(mRS, RS::dispatch->AllocationSyncAll(mRS->getContext(), getIDSafe(), srcLocation));
!!!46864951.cpp!!!	ioSendOutput() : void
#ifndef RS_COMPATIBILITY_LIB
    if ((mUsage & RS_ALLOCATION_USAGE_IO_OUTPUT) == 0) {
        mRS->throwError(RS_ERROR_INVALID_PARAMETER, "Can only send buffer if IO_OUTPUT usage specified.");
        return;
    }
    tryDispatch(mRS, RS::dispatch->AllocationIoSend(mRS->getContext(), getID()));
#endif
!!!46865079.cpp!!!	ioGetInput() : void
#ifndef RS_COMPATIBILITY_LIB
    if ((mUsage & RS_ALLOCATION_USAGE_IO_INPUT) == 0) {
        mRS->throwError(RS_ERROR_INVALID_PARAMETER, "Can only get buffer if IO_INPUT usage specified.");
        return;
    }
    tryDispatch(mRS, RS::dispatch->AllocationIoReceive(mRS->getContext(), getID()));
#endif
!!!46865207.cpp!!!	getSurface() : sp<Surface>
    if ((mUsage & RS_ALLOCATION_USAGE_IO_INPUT) == 0) {
        mRS->throwError(RS_ERROR_INVALID_PARAMETER, "Can only get Surface if IO_INPUT usage specified.");
        return nullptr;
    }
    IGraphicBufferProducer *v = (IGraphicBufferProducer *)RS::dispatch->AllocationGetSurface(mRS->getContext(),
                                                                                             getID());
    android::sp<IGraphicBufferProducer> bp = v;
    v->decStrong(nullptr);

    return new Surface(bp, true);;
!!!46865591.cpp!!!	copy1DRangeFrom(in off : uint32_t, in count : size_t, in data : void) : void

    if(count < 1) {
        mRS->throwError(RS_ERROR_INVALID_PARAMETER, "Count must be >= 1.");
        return;
    }
    if((off + count) > mCurrentCount) {
        ALOGE("Overflow, Available count %u, got %zu at offset %u.", mCurrentCount, count, off);
        mRS->throwError(RS_ERROR_INVALID_PARAMETER, "Invalid copy specified");
        return;
    }
    if (mAutoPadding && (mType->getElement()->getVectorSize() == 3)) {
        size_t eSize = mType->getElement()->getSizeBytes();
        void *ptr = malloc(eSize * count);
        copyWithPadding(ptr, data, eSize / 4, count);
        tryDispatch(mRS, RS::dispatch->Allocation1DData(mRS->getContext(), getIDSafe(), off, mSelectedLOD,
                                                        count, ptr, count * mType->getElement()->getSizeBytes()));
        free(ptr);
    } else {
        tryDispatch(mRS, RS::dispatch->Allocation1DData(mRS->getContext(), getIDSafe(), off, mSelectedLOD,
                                                        count, data, count * mType->getElement()->getSizeBytes()));
    }
!!!46865719.cpp!!!	copy1DRangeFrom(in off : uint32_t, in count : size_t, in data : sp<const Allocation>, in dataOff : uint32_t) : void

    tryDispatch(mRS, RS::dispatch->AllocationCopy2DRange(mRS->getContext(), getIDSafe(), off, 0,
                                                         mSelectedLOD, mSelectedFace,
                                                         count, 1, data->getIDSafe(), dataOff, 0,
                                                         data->mSelectedLOD, data->mSelectedFace));
!!!46865847.cpp!!!	copy1DRangeTo(in off : uint32_t, in count : size_t, inout data : void) : void
    if(count < 1) {
        mRS->throwError(RS_ERROR_INVALID_PARAMETER, "Count must be >= 1.");
        return;
    }
    if((off + count) > mCurrentCount) {
        ALOGE("Overflow, Available count %u, got %zu at offset %u.", mCurrentCount, count, off);
        mRS->throwError(RS_ERROR_INVALID_PARAMETER, "Invalid copy specified");
        return;
    }
    if (mAutoPadding && (mType->getElement()->getVectorSize() == 3)) {
        size_t eSize = mType->getElement()->getSizeBytes();
        void *ptr = malloc(eSize * count);
        tryDispatch(mRS, RS::dispatch->Allocation1DRead(mRS->getContext(), getIDSafe(), off, mSelectedLOD,
                                                        count, ptr, count * mType->getElement()->getSizeBytes()));
        copyWithUnPadding(data, ptr, eSize / 4, count);
        free(ptr);
    } else {
        tryDispatch(mRS, RS::dispatch->Allocation1DRead(mRS->getContext(), getIDSafe(), off, mSelectedLOD,
                                                        count, data, count * mType->getElement()->getSizeBytes()));
    }
!!!46865975.cpp!!!	copy1DFrom(in data : void) : void
    copy1DRangeFrom(0, mCurrentCount, data);
!!!46866103.cpp!!!	copy1DTo(inout data : void) : void
    copy1DRangeTo(0, mCurrentCount, data);
!!!46866231.cpp!!!	copy2DRangeFrom(in xoff : uint32_t, in yoff : uint32_t, in w : uint32_t, in h : uint32_t, in data : void) : void
    validate2DRange(xoff, yoff, w, h);
    if (mAutoPadding && (mType->getElement()->getVectorSize() == 3)) {
        size_t eSize = mType->getElement()->getSizeBytes();
        void *ptr = malloc(eSize * w * h);
        copyWithPadding(ptr, data, eSize / 4, w * h);
        tryDispatch(mRS, RS::dispatch->Allocation2DData(mRS->getContext(), getIDSafe(), xoff,
                                                        yoff, mSelectedLOD, mSelectedFace,
                                                        w, h, ptr, w * h * mType->getElement()->getSizeBytes(),
                                                        w * mType->getElement()->getSizeBytes()));
        free(ptr);
    } else {
        tryDispatch(mRS, RS::dispatch->Allocation2DData(mRS->getContext(), getIDSafe(), xoff,
                                                        yoff, mSelectedLOD, mSelectedFace,
                                                        w, h, data, w * h * mType->getElement()->getSizeBytes(),
                                                        w * mType->getElement()->getSizeBytes()));
    }
!!!46866359.cpp!!!	copy2DRangeTo(in xoff : uint32_t, in yoff : uint32_t, in w : uint32_t, in h : uint32_t, inout data : void) : void
    validate2DRange(xoff, yoff, w, h);
    if (mAutoPadding && (mType->getElement()->getVectorSize() == 3)) {
        size_t eSize = mType->getElement()->getSizeBytes();
        void *ptr = malloc(eSize * w * h);
        tryDispatch(mRS, RS::dispatch->Allocation2DRead(mRS->getContext(), getIDSafe(), xoff, yoff,
                                                        mSelectedLOD, mSelectedFace, w, h, ptr,
                                                        w * h * mType->getElement()->getSizeBytes(),
                                                        w * mType->getElement()->getSizeBytes()));
        copyWithUnPadding(data, ptr, eSize / 4, w * h);
        free(ptr);
    } else {
        tryDispatch(mRS, RS::dispatch->Allocation2DRead(mRS->getContext(), getIDSafe(), xoff, yoff,
                                                        mSelectedLOD, mSelectedFace, w, h, data,
                                                        w * h * mType->getElement()->getSizeBytes(),
                                                        w * mType->getElement()->getSizeBytes()));
    }
!!!46866487.cpp!!!	copy2DRangeFrom(in xoff : uint32_t, in yoff : uint32_t, in w : uint32_t, in h : uint32_t, in data : sp<const Allocation>, in dataXoff : uint32_t, in dataYoff : uint32_t) : void
    validate2DRange(xoff, yoff, w, h);
    tryDispatch(mRS, RS::dispatch->AllocationCopy2DRange(mRS->getContext(), getIDSafe(), xoff, yoff,
                                                         mSelectedLOD, mSelectedFace,
                                                         w, h, data->getIDSafe(), dataXoff, dataYoff,
                                                         data->mSelectedLOD, data->mSelectedFace));
!!!46866615.cpp!!!	copy2DStridedFrom(in xoff : uint32_t, in yoff : uint32_t, in w : uint32_t, in h : uint32_t, in data : void, in stride : size_t) : void
    validate2DRange(xoff, yoff, w, h);
    tryDispatch(mRS, RS::dispatch->Allocation2DData(mRS->getContext(), getIDSafe(), xoff, yoff,
                                                    mSelectedLOD, mSelectedFace, w, h, data,
                                                    w * h * mType->getElement()->getSizeBytes(), stride));
!!!46866743.cpp!!!	copy2DStridedFrom(in data : void, in stride : size_t) : void
    copy2DStridedFrom(0, 0, mCurrentDimX, mCurrentDimY, data, stride);
!!!46866871.cpp!!!	copy2DStridedTo(in xoff : uint32_t, in yoff : uint32_t, in w : uint32_t, in h : uint32_t, inout data : void, in stride : size_t) : void
    validate2DRange(xoff, yoff, w, h);
    tryDispatch(mRS, RS::dispatch->Allocation2DRead(mRS->getContext(), getIDSafe(), xoff, yoff,
                                                    mSelectedLOD, mSelectedFace, w, h, data,
                                                    w * h * mType->getElement()->getSizeBytes(), stride));
!!!46866999.cpp!!!	copy2DStridedTo(inout data : void, in stride : size_t) : void
    copy2DStridedTo(0, 0, mCurrentDimX, mCurrentDimY, data, stride);
!!!46867127.cpp!!!	copy3DRangeFrom(in xoff : uint32_t, in yoff : uint32_t, in zoff : uint32_t, in w : uint32_t, in h : uint32_t, in d : uint32_t, in data : void) : void
    validate3DRange(xoff, yoff, zoff, w, h, d);
    if (mAutoPadding && (mType->getElement()->getVectorSize() == 3)) {
        size_t eSize = mType->getElement()->getSizeBytes();
        void *ptr = malloc(eSize * w * h * d);
        copyWithPadding(ptr, data, eSize / 4, w * h * d);
        tryDispatch(mRS, RS::dispatch->Allocation3DData(mRS->getContext(), getIDSafe(), xoff, yoff, zoff,
                                                        mSelectedLOD, w, h, d, ptr,
                                                        w * h * d * mType->getElement()->getSizeBytes(),
                                                        w * mType->getElement()->getSizeBytes()));
        free(ptr);
    } else {
        tryDispatch(mRS, RS::dispatch->Allocation3DData(mRS->getContext(), getIDSafe(), xoff, yoff, zoff,
                                                        mSelectedLOD, w, h, d, data,
                                                        w * h * d * mType->getElement()->getSizeBytes(),
                                                        w * mType->getElement()->getSizeBytes()));
    }
!!!46867255.cpp!!!	copy3DRangeFrom(in xoff : uint32_t, in yoff : uint32_t, in zoff : uint32_t, in w : uint32_t, in h : uint32_t, in d : uint32_t, in data : sp<const Allocation>, in dataXoff : uint32_t, in dataYoff : uint32_t, in dataZoff : uint32_t) : void
    validate3DRange(xoff, yoff, zoff, w, h, d);
    tryDispatch(mRS, RS::dispatch->AllocationCopy3DRange(mRS->getContext(), getIDSafe(), xoff, yoff, zoff,
                                                         mSelectedLOD, w, h, d, data->getIDSafe(),
                                                         dataXoff, dataYoff, dataZoff, data->mSelectedLOD));
!!!46867383.cpp!!!	copy3DRangeTo(in xoff : uint32_t, in yoff : uint32_t, in zoff : uint32_t, in w : uint32_t, in h : uint32_t, in d : uint32_t, inout data : void) : void
    validate3DRange(xoff, yoff, zoff, w, h, d);
    if (mAutoPadding && (mType->getElement()->getVectorSize() == 3)) {
        size_t eSize = mType->getElement()->getSizeBytes();
        void *ptr = malloc(eSize * w * h * d);
        tryDispatch(mRS, RS::dispatch->Allocation3DRead(mRS->getContext(), getIDSafe(), xoff, yoff, zoff,
                                                        mSelectedLOD, w, h, d, ptr,
                                                        w * h * d * mType->getElement()->getSizeBytes(),
                                                        w * mType->getElement()->getSizeBytes()));
        copyWithUnPadding(data, ptr, eSize / 4, w * h * d);
        free(ptr);
    } else {
        tryDispatch(mRS, RS::dispatch->Allocation3DRead(mRS->getContext(), getIDSafe(), xoff, yoff, zoff,
                                                        mSelectedLOD, w, h, d, data,
                                                        w * h * d * mType->getElement()->getSizeBytes(),
                                                        w * mType->getElement()->getSizeBytes()));
    }
!!!46867511.cpp!!!	createTyped(in rs : sp<RS>, in type : sp<const Type>, in mipmaps : RsAllocationMipmapControl, in usage : uint32_t) : sp<Allocation>
    void *id = 0;
    if (rs->getError() == RS_SUCCESS) {
        id = RS::dispatch->AllocationCreateTyped(rs->getContext(), type->getID(), mipmaps, usage, 0);
    }
    if (id == 0) {
        rs->throwError(RS_ERROR_RUNTIME_ERROR, "Allocation creation failed");
        return nullptr;
    }
    return new Allocation(id, rs, type, usage);
!!!46867639.cpp!!!	createTyped(in rs : sp<RS>, in type : sp<const Type>, in mipmaps : RsAllocationMipmapControl, in usage : uint32_t, inout pointer : void) : sp<Allocation>
    void *id = 0;
    if (rs->getError() == RS_SUCCESS) {
        id = RS::dispatch->AllocationCreateTyped(rs->getContext(), type->getID(), mipmaps, usage,
                                                 (uintptr_t)pointer);
    }
    if (id == 0) {
        rs->throwError(RS_ERROR_RUNTIME_ERROR, "Allocation creation failed");
        return nullptr;
    }
    return new Allocation(id, rs, type, usage);
!!!46867767.cpp!!!	createTyped(in rs : sp<RS>, in type : sp<const Type>, in usage : uint32_t = RS_ALLOCATION_USAGE_SCRIPT) : sp<Allocation>
    return createTyped(rs, type, RS_ALLOCATION_MIPMAP_NONE, usage);
!!!46867895.cpp!!!	createSized(in rs : sp<RS>, in e : sp<const Element>, in count : size_t, in usage : uint32_t = RS_ALLOCATION_USAGE_SCRIPT) : sp<Allocation>
    Type::Builder b(rs, e);
    b.setX(count);
    sp<const Type> t = b.create();

    return createTyped(rs, t, usage);
!!!46868023.cpp!!!	createSized2D(in rs : sp<RS>, in e : sp<const Element>, in x : size_t, in y : size_t, in usage : uint32_t = RS_ALLOCATION_USAGE_SCRIPT) : sp<Allocation>
    Type::Builder b(rs, e);
    b.setX(x);
    b.setY(y);
    sp<const Type> t = b.create();

    return createTyped(rs, t, usage);
!!!46868151.cpp!!!	getPointer(inout stride : size_t = NULL) : void
    void *p = nullptr;
    if (!(mUsage & RS_ALLOCATION_USAGE_SHARED)) {
        mRS->throwError(RS_ERROR_INVALID_PARAMETER, "Allocation does not support USAGE_SHARED.");
        return nullptr;
    }

    // FIXME: decide if lack of getPointer should cause compat mode
    if (RS::dispatch->AllocationGetPointer == nullptr) {
        mRS->throwError(RS_ERROR_RUNTIME_ERROR, "Can't use getPointer on older APIs");
        return nullptr;
    }

    p = RS::dispatch->AllocationGetPointer(mRS->getContext(), getIDSafe(), 0,
                                           RS_ALLOCATION_CUBEMAP_FACE_POSITIVE_X, 0, 0, stride, sizeof(size_t));
    if (mRS->getError() != RS_SUCCESS) {
        mRS->throwError(RS_ERROR_RUNTIME_ERROR, "Allocation lock failed");
        p = nullptr;
    }
    return p;
