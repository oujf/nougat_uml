class RsdCpuScriptIntrinsicConvolve5x5
!!!46933943.cpp!!!	populateScript(inout s : Script) : void
    s->mHal.info.exportedVariableCount = 2;
!!!46934071.cpp!!!	invokeFreeChildren() : void
    alloc.clear();
!!!46934199.cpp!!!	setGlobalVar(in slot : uint32_t, in data : void, in dataLength : size_t) : void
    rsAssert(slot == 0);
    memcpy (&mFp, data, dataLength);
    for(int ct=0; ct < 25; ct++) {
        if (mFp[ct] >= 0) {
            mIp[ct] = (short)(mFp[ct] * 256.f + 0.5f);
        } else {
            mIp[ct] = (short)(mFp[ct] * 256.f - 0.5f);
        }
    }
!!!46934327.cpp!!!	setGlobalObj(in slot : uint32_t, inout data : ObjectBase) : void
    rsAssert(slot == 1);
    alloc.set(static_cast<Allocation *>(data));
!!!46934583.cpp!!!	RsdCpuScriptIntrinsicConvolve5x5(inout ctx : RsdCpuReferenceImpl, in s : Script, in e : Element)

    if (e->getType() == RS_TYPE_FLOAT_32) {
        switch(e->getVectorSize()) {
        case 1:
            mRootPtr = &kernelF1;
            break;
        case 2:
            mRootPtr = &kernelF2;
            break;
        case 3:
        case 4:
            mRootPtr = &kernelF4;
            break;
        }
    } else {
        switch(e->getVectorSize()) {
        case 1:
            mRootPtr = &kernelU1;
            break;
        case 2:
            mRootPtr = &kernelU2;
            break;
        case 3:
        case 4:
            mRootPtr = &kernelU4;
            break;
        }
    }
    for(int ct=0; ct < 25; ct++) {
        mFp[ct] = 1.f / 25.f;
        mIp[ct] = (short)(mFp[ct] * 256.f);
    }
!!!46934711.cpp!!!	kernelU1(in info : RsExpandKernelDriverInfo, in xstart : uint32_t, in xend : uint32_t, in outstep : uint32_t) : void
    RsdCpuScriptIntrinsicConvolve5x5 *cp = (RsdCpuScriptIntrinsicConvolve5x5 *)info->usr;
    if (!cp->alloc.get()) {
        ALOGE("Convolve5x5 executed without input, skipping");
        return;
    }
    const uchar *pin = (const uchar *)cp->alloc->mHal.drvState.lod[0].mallocPtr;
    const size_t stride = cp->alloc->mHal.drvState.lod[0].stride;

    uint32_t y0 = rsMax((int32_t)info->current.y-2, 0);
    uint32_t y1 = rsMax((int32_t)info->current.y-1, 0);
    uint32_t y2 = info->current.y;
    uint32_t y3 = rsMin((int32_t)info->current.y+1, (int32_t)(info->dim.y-1));
    uint32_t y4 = rsMin((int32_t)info->current.y+2, (int32_t)(info->dim.y-1));

    const uchar *py0 = (const uchar *)(pin + stride * y0);
    const uchar *py1 = (const uchar *)(pin + stride * y1);
    const uchar *py2 = (const uchar *)(pin + stride * y2);
    const uchar *py3 = (const uchar *)(pin + stride * y3);
    const uchar *py4 = (const uchar *)(pin + stride * y4);

    uchar *out = (uchar *)info->outPtr[0];
    uint32_t x1 = xstart;
    uint32_t x2 = xend;

    while((x1 < x2) && (x1 < 2)) {
        OneU1(info, x1, out, py0, py1, py2, py3, py4, cp->mFp);
        out++;
        x1++;
    }

#if 0//defined(ARCH_ARM_HAVE_NEON)
    if((x1 + 3) < x2) {
        uint32_t len = (x2 - x1 - 3) >> 1;
        rsdIntrinsicConvolve5x5_K(out, py0, py1, py2, py3, py4, cp->ip, len);
        out += len << 1;
        x1 += len << 1;
    }
#endif

    while(x1 < x2) {
        OneU1(info, x1, out, py0, py1, py2, py3, py4, cp->mFp);
        out++;
        x1++;
    }
!!!46934839.cpp!!!	kernelU2(in info : RsExpandKernelDriverInfo, in xstart : uint32_t, in xend : uint32_t, in outstep : uint32_t) : void
    RsdCpuScriptIntrinsicConvolve5x5 *cp = (RsdCpuScriptIntrinsicConvolve5x5 *)info->usr;
    if (!cp->alloc.get()) {
        ALOGE("Convolve5x5 executed without input, skipping");
        return;
    }
    const uchar *pin = (const uchar *)cp->alloc->mHal.drvState.lod[0].mallocPtr;
    const size_t stride = cp->alloc->mHal.drvState.lod[0].stride;

    uint32_t y0 = rsMax((int32_t)info->current.y-2, 0);
    uint32_t y1 = rsMax((int32_t)info->current.y-1, 0);
    uint32_t y2 = info->current.y;
    uint32_t y3 = rsMin((int32_t)info->current.y+1, (int32_t)(info->dim.y-1));
    uint32_t y4 = rsMin((int32_t)info->current.y+2, (int32_t)(info->dim.y-1));

    const uchar2 *py0 = (const uchar2 *)(pin + stride * y0);
    const uchar2 *py1 = (const uchar2 *)(pin + stride * y1);
    const uchar2 *py2 = (const uchar2 *)(pin + stride * y2);
    const uchar2 *py3 = (const uchar2 *)(pin + stride * y3);
    const uchar2 *py4 = (const uchar2 *)(pin + stride * y4);

    uchar2 *out = (uchar2 *)info->outPtr[0];
    uint32_t x1 = xstart;
    uint32_t x2 = xend;

    while((x1 < x2) && (x1 < 2)) {
        OneU2(info, x1, out, py0, py1, py2, py3, py4, cp->mFp);
        out++;
        x1++;
    }

#if 0//defined(ARCH_ARM_HAVE_NEON)
    if((x1 + 3) < x2) {
        uint32_t len = (x2 - x1 - 3) >> 1;
        rsdIntrinsicConvolve5x5_K(out, py0, py1, py2, py3, py4, cp->ip, len);
        out += len << 1;
        x1 += len << 1;
    }
#endif

    while(x1 < x2) {
        OneU2(info, x1, out, py0, py1, py2, py3, py4, cp->mFp);
        out++;
        x1++;
    }
!!!46934967.cpp!!!	kernelU4(in info : RsExpandKernelDriverInfo, in xstart : uint32_t, in xend : uint32_t, in outstep : uint32_t) : void
    RsdCpuScriptIntrinsicConvolve5x5 *cp = (RsdCpuScriptIntrinsicConvolve5x5 *)info->usr;
    if (!cp->alloc.get()) {
        ALOGE("Convolve5x5 executed without input, skipping");
        return;
    }
    const uchar *pin = (const uchar *)cp->alloc->mHal.drvState.lod[0].mallocPtr;
    const size_t stride = cp->alloc->mHal.drvState.lod[0].stride;

    uint32_t y0 = rsMax((int32_t)info->current.y-2, 0);
    uint32_t y1 = rsMax((int32_t)info->current.y-1, 0);
    uint32_t y2 = info->current.y;
    uint32_t y3 = rsMin((int32_t)info->current.y+1, (int32_t)(info->dim.y-1));
    uint32_t y4 = rsMin((int32_t)info->current.y+2, (int32_t)(info->dim.y-1));

    const uchar4 *py0 = (const uchar4 *)(pin + stride * y0);
    const uchar4 *py1 = (const uchar4 *)(pin + stride * y1);
    const uchar4 *py2 = (const uchar4 *)(pin + stride * y2);
    const uchar4 *py3 = (const uchar4 *)(pin + stride * y3);
    const uchar4 *py4 = (const uchar4 *)(pin + stride * y4);

    uchar4 *out = (uchar4 *)info->outPtr[0];
    uint32_t x1 = xstart;
    uint32_t x2 = xend;

    while((x1 < x2) && (x1 < 2)) {
        OneU4(info, x1, out, py0, py1, py2, py3, py4, cp->mFp);
        out++;
        x1++;
    }
#if defined(ARCH_X86_HAVE_SSSE3)
    // for x86 SIMD, require minimum of 7 elements (4 for SIMD,
    // 3 for end boundary where x may hit the end boundary)
    if (gArchUseSIMD &&((x1 + 6) < x2)) {
        // subtract 3 for end boundary
        uint32_t len = (x2 - x1 - 3) >> 2;
        rsdIntrinsicConvolve5x5_K(out, py0 + x1 - 2, py1 + x1 - 2, py2 + x1 - 2, py3 + x1 - 2, py4 + x1 - 2, cp->mIp, len);
        out += len << 2;
        x1 += len << 2;
    }
#endif

#if defined(ARCH_ARM_USE_INTRINSICS)
    if(gArchUseSIMD && ((x1 + 3) < x2)) {
        uint32_t len = (x2 - x1 - 3) >> 1;
        rsdIntrinsicConvolve5x5_K(out, py0 + x1 - 2, py1 + x1 - 2, py2 + x1 - 2, py3 + x1 - 2, py4 + x1 - 2, cp->mIp, len);
        out += len << 1;
        x1 += len << 1;
    }
#endif

    while(x1 < x2) {
        OneU4(info, x1, out, py0, py1, py2, py3, py4, cp->mFp);
        out++;
        x1++;
    }
!!!46935095.cpp!!!	kernelF1(in info : RsExpandKernelDriverInfo, in xstart : uint32_t, in xend : uint32_t, in outstep : uint32_t) : void
    RsdCpuScriptIntrinsicConvolve5x5 *cp = (RsdCpuScriptIntrinsicConvolve5x5 *)info->usr;
    if (!cp->alloc.get()) {
        ALOGE("Convolve5x5 executed without input, skipping");
        return;
    }
    const uchar *pin = (const uchar *)cp->alloc->mHal.drvState.lod[0].mallocPtr;
    const size_t stride = cp->alloc->mHal.drvState.lod[0].stride;

    uint32_t y0 = rsMax((int32_t)info->current.y-2, 0);
    uint32_t y1 = rsMax((int32_t)info->current.y-1, 0);
    uint32_t y2 = info->current.y;
    uint32_t y3 = rsMin((int32_t)info->current.y+1, (int32_t)(info->dim.y-1));
    uint32_t y4 = rsMin((int32_t)info->current.y+2, (int32_t)(info->dim.y-1));

    const float *py0 = (const float *)(pin + stride * y0);
    const float *py1 = (const float *)(pin + stride * y1);
    const float *py2 = (const float *)(pin + stride * y2);
    const float *py3 = (const float *)(pin + stride * y3);
    const float *py4 = (const float *)(pin + stride * y4);

    float *out = (float *)info->outPtr[0];
    uint32_t x1 = xstart;
    uint32_t x2 = xend;

    while((x1 < x2) && (x1 < 2)) {
        OneF1(info, x1, out, py0, py1, py2, py3, py4, cp->mFp);
        out++;
        x1++;
    }

#if 0//defined(ARCH_ARM_HAVE_NEON)
    if((x1 + 3) < x2) {
        uint32_t len = (x2 - x1 - 3) >> 1;
        rsdIntrinsicConvolve5x5_K(out, py0, py1, py2, py3, py4, cp->ip, len);
        out += len << 1;
        x1 += len << 1;
    }
#endif

    while(x1 < x2) {
        OneF1(info, x1, out, py0, py1, py2, py3, py4, cp->mFp);
        out++;
        x1++;
    }
!!!46935223.cpp!!!	kernelF2(in info : RsExpandKernelDriverInfo, in xstart : uint32_t, in xend : uint32_t, in outstep : uint32_t) : void
    RsdCpuScriptIntrinsicConvolve5x5 *cp = (RsdCpuScriptIntrinsicConvolve5x5 *)info->usr;
    if (!cp->alloc.get()) {
        ALOGE("Convolve5x5 executed without input, skipping");
        return;
    }
    const uchar *pin = (const uchar *)cp->alloc->mHal.drvState.lod[0].mallocPtr;
    const size_t stride = cp->alloc->mHal.drvState.lod[0].stride;

    uint32_t y0 = rsMax((int32_t)info->current.y-2, 0);
    uint32_t y1 = rsMax((int32_t)info->current.y-1, 0);
    uint32_t y2 = info->current.y;
    uint32_t y3 = rsMin((int32_t)info->current.y+1, (int32_t)(info->dim.y-1));
    uint32_t y4 = rsMin((int32_t)info->current.y+2, (int32_t)(info->dim.y-1));

    const float2 *py0 = (const float2 *)(pin + stride * y0);
    const float2 *py1 = (const float2 *)(pin + stride * y1);
    const float2 *py2 = (const float2 *)(pin + stride * y2);
    const float2 *py3 = (const float2 *)(pin + stride * y3);
    const float2 *py4 = (const float2 *)(pin + stride * y4);

    float2 *out = (float2 *)info->outPtr[0];
    uint32_t x1 = xstart;
    uint32_t x2 = xend;

    while((x1 < x2) && (x1 < 2)) {
        OneF2(info, x1, out, py0, py1, py2, py3, py4, cp->mFp);
        out++;
        x1++;
    }

#if 0//defined(ARCH_ARM_HAVE_NEON)
    if((x1 + 3) < x2) {
        uint32_t len = (x2 - x1 - 3) >> 1;
        rsdIntrinsicConvolve5x5_K(out, py0, py1, py2, py3, py4, cp->ip, len);
        out += len << 1;
        x1 += len << 1;
    }
#endif

    while(x1 < x2) {
        OneF2(info, x1, out, py0, py1, py2, py3, py4, cp->mFp);
        out++;
        x1++;
    }
!!!46935351.cpp!!!	kernelF4(in info : RsExpandKernelDriverInfo, in xstart : uint32_t, in xend : uint32_t, in outstep : uint32_t) : void
    RsdCpuScriptIntrinsicConvolve5x5 *cp = (RsdCpuScriptIntrinsicConvolve5x5 *)info->usr;
    if (!cp->alloc.get()) {
        ALOGE("Convolve5x5 executed without input, skipping");
        return;
    }
    const uchar *pin = (const uchar *)cp->alloc->mHal.drvState.lod[0].mallocPtr;
    const size_t stride = cp->alloc->mHal.drvState.lod[0].stride;

    uint32_t y0 = rsMax((int32_t)info->current.y-2, 0);
    uint32_t y1 = rsMax((int32_t)info->current.y-1, 0);
    uint32_t y2 = info->current.y;
    uint32_t y3 = rsMin((int32_t)info->current.y+1, (int32_t)(info->dim.y-1));
    uint32_t y4 = rsMin((int32_t)info->current.y+2, (int32_t)(info->dim.y-1));

    const float4 *py0 = (const float4 *)(pin + stride * y0);
    const float4 *py1 = (const float4 *)(pin + stride * y1);
    const float4 *py2 = (const float4 *)(pin + stride * y2);
    const float4 *py3 = (const float4 *)(pin + stride * y3);
    const float4 *py4 = (const float4 *)(pin + stride * y4);

    float4 *out = (float4 *)info->outPtr[0];
    uint32_t x1 = xstart;
    uint32_t x2 = xend;

    while((x1 < x2) && (x1 < 2)) {
        OneF4(info, x1, out, py0, py1, py2, py3, py4, cp->mFp);
        out++;
        x1++;
    }

#if 0//defined(ARCH_ARM_HAVE_NEON)
    if((x1 + 3) < x2) {
        uint32_t len = (x2 - x1 - 3) >> 1;
        rsdIntrinsicConvolve5x5_K(out, py0, py1, py2, py3, py4, cp->ip, len);
        out += len << 1;
        x1 += len << 1;
    }
#endif

    while(x1 < x2) {
        OneF4(info, x1, out, py0, py1, py2, py3, py4, cp->mFp);
        out++;
        x1++;
    }
