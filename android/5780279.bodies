class UiAutomatorBridge
!!!47006775.java!!!	UiAutomatorBridge(inout uiAutomation : UiAutomation)
        mUiAutomation = uiAutomation;
        mInteractionController = new InteractionController(this);
        mQueryController = new QueryController(this);
!!!47006903.java!!!	getInteractionController() : InteractionController
        return mInteractionController;
!!!47007031.java!!!	getQueryController() : QueryController
        return mQueryController;
!!!47007159.java!!!	setOnAccessibilityEventListener(inout listener : UiAutomation::OnAccessibilityEventListener) : void
        mUiAutomation.setOnAccessibilityEventListener(listener);
!!!47007287.java!!!	getRootInActiveWindow() : AccessibilityNodeInfo
        return mUiAutomation.getRootInActiveWindow();
!!!47007415.java!!!	injectInputEvent(inout event : InputEvent, inout sync : boolean) : boolean
        return mUiAutomation.injectInputEvent(event, sync);
!!!47007543.java!!!	setRotation(in rotation : int) : boolean
        return mUiAutomation.setRotation(rotation);
!!!47007671.java!!!	setCompressedLayoutHierarchy(inout compressed : boolean) : void
        AccessibilityServiceInfo info = mUiAutomation.getServiceInfo();
        if (compressed)
            info.flags &= ~AccessibilityServiceInfo.FLAG_INCLUDE_NOT_IMPORTANT_VIEWS;
        else
            info.flags |= AccessibilityServiceInfo.FLAG_INCLUDE_NOT_IMPORTANT_VIEWS;
        mUiAutomation.setServiceInfo(info);
!!!47008055.java!!!	waitForIdle() : void
        waitForIdle(TOTAL_TIME_TO_WAIT_FOR_IDLE_STATE);
!!!47008183.java!!!	waitForIdle(in timeout : long) : void
        try {
            mUiAutomation.waitForIdle(QUIET_TIME_TO_BE_CONSIDERD_IDLE_STATE, timeout);
        } catch (TimeoutException te) {
            Log.w(LOG_TAG, "Could not detect idle state.", te);
        }
!!!47008311.java!!!	executeCommandAndWaitForAccessibilityEvent(inout command : Runnable, inout filter : UiAutomation::AccessibilityEventFilter, in timeoutMillis : long) : AccessibilityEvent
        return mUiAutomation.executeAndWaitForEvent(command,
                filter, timeoutMillis);
!!!47008439.java!!!	takeScreenshot(inout storePath : File, in quality : int) : boolean
        Bitmap screenshot = mUiAutomation.takeScreenshot();
        if (screenshot == null) {
            return false;
        }
        BufferedOutputStream bos = null;
        try {
            bos = new BufferedOutputStream(new FileOutputStream(storePath));
            if (bos != null) {
                screenshot.compress(Bitmap.CompressFormat.PNG, quality, bos);
                bos.flush();
            }
        } catch (IOException ioe) {
            Log.e(LOG_TAG, "failed to save screen shot to file", ioe);
            return false;
        } finally {
            if (bos != null) {
                try {
                    bos.close();
                } catch (IOException ioe) {
                    /* ignore */
                }
            }
            screenshot.recycle();
        }
        return true;
!!!47008567.java!!!	performGlobalAction(in action : int) : boolean
        return mUiAutomation.performGlobalAction(action);
