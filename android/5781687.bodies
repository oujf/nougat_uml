class TestMethod
!!!75626551.java!!!	TestMethod(inout method : Method, inout enclosingClass : Class)
        this(method.getName(), enclosingClass);
!!!75626679.java!!!	TestMethod(inout methodName : String, inout enclosingClass : Class)
        this.enclosingClass = enclosingClass;
        this.enclosingClassname = enclosingClass.getName();
        this.testMethodName = methodName;
!!!75626807.java!!!	TestMethod(inout testCase : TestCase)
        this(testCase.getName(), testCase.getClass());
!!!75626935.java!!!	getName() : String
        return testMethodName;
!!!75627063.java!!!	getEnclosingClassname() : String
        return enclosingClassname;
!!!75627191.java!!!	getAnnotation(inout annotationClass : Class) : T
        try {
            return getEnclosingClass().getMethod(getName()).getAnnotation(annotationClass);
        } catch (NoSuchMethodException e) {
            return null;
        }
!!!75627319.java!!!	getEnclosingClass() : Class
        return enclosingClass;
!!!75627447.java!!!	createTest() : TestCase
        return instantiateTest(enclosingClass, testMethodName);
!!!75627575.java!!!	instantiateTest(inout testCaseClass : Class, inout testName : String) : TestCase
        Constructor[] constructors = testCaseClass.getConstructors();

        if (constructors.length == 0) {
            return instantiateTest(testCaseClass.getSuperclass(), testName);
        } else {
            for (Constructor constructor : constructors) {
                Class[] params = constructor.getParameterTypes();
                if (noargsConstructor(params)) {
                    TestCase test = ((Constructor<? extends TestCase>) constructor).newInstance();
                    // JUnit will run just the one test if you call
                    // {@link TestCase#setName(String)}
                    test.setName(testName);
                    return test;
                } else if (singleStringConstructor(params)) {
                    return ((Constructor<? extends TestCase>) constructor)
                            .newInstance(testName);
                }
            }
        }
        throw new RuntimeException("Unable to locate a constructor for "
                + testCaseClass.getName());
!!!75627703.java!!!	singleStringConstructor(inout params : Class [[]]) : boolean
        return (params.length == 1) && (params[0].equals(String.class));
!!!75627831.java!!!	noargsConstructor(inout params : Class [[]]) : boolean
        return params.length == 0;
!!!75627959.java!!!	equals(inout o : Object) : boolean
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        TestMethod that = (TestMethod) o;

        if (enclosingClassname != null
                ? !enclosingClassname.equals(that.enclosingClassname)
                : that.enclosingClassname != null) {
            return false;
        }
        if (testMethodName != null
                ? !testMethodName.equals(that.testMethodName)
                : that.testMethodName != null) {
            return false;
        }
        return true;
!!!75628087.java!!!	hashCode() : int
        int result;
        result = (enclosingClassname != null ? enclosingClassname.hashCode() : 0);
        result = 31 * result + (testMethodName != null ? testMethodName.hashCode() : 0);
        return result;
!!!75628215.java!!!	toString() : String
        return enclosingClassname + "." + testMethodName;
