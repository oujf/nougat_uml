class UiAutomatorTestCase
!!!47015479.java!!!	getUiDevice() : UiDevice
        return UiDevice.getInstance();
!!!47015607.java!!!	getParams() : Bundle
        return mParams;
!!!47015735.java!!!	setAutomationSupport(inout automationSupport : IAutomationSupport) : void
        mAutomationSupport = automationSupport;
!!!47015863.java!!!	getAutomationSupport() : IAutomationSupport
        if (mAutomationSupport == null) {
            mAutomationSupport = new InstrumentationAutomationSupport(getInstrumentation());
        }
        return mAutomationSupport;
!!!47015991.java!!!	initialize(inout params : Bundle) : void
        mParams = params;

        // check if this is a monkey test mode
        String monkeyVal = mParams.getString("monkey");
        if (monkeyVal != null) {
            // only if the monkey key is specified, we alter the state of monkey
            // else we should leave things as they are.
            getInstrumentation().getUiAutomation().setRunAsMonkey(Boolean.valueOf(monkeyVal));
        }

        UiDevice.getInstance().initialize(new InstrumentationUiAutomatorBridge(
                getInstrumentation().getContext(),
                getInstrumentation().getUiAutomation()));
!!!47016119.java!!!	sleep(in ms : long) : void
        SystemClock.sleep(ms);
!!!47057335.java!!!	setUp() : void
        super.setUp();
        mShouldDisableIme = "true".equals(mParams.getString(DISABLE_IME));
        if (mShouldDisableIme) {
            setDummyIme();
        }
!!!47057463.java!!!	tearDown() : void
        if (mShouldDisableIme) {
            restoreActiveIme();
        }
        super.tearDown();
!!!47057591.java!!!	getUiDevice() : UiDevice
        return mUiDevice;
!!!47057719.java!!!	getParams() : Bundle
        return mParams;
!!!47057847.java!!!	getAutomationSupport() : IAutomationSupport
        return mAutomationSupport;
!!!47057975.java!!!	setUiDevice(inout uiDevice : UiDevice) : void
        mUiDevice = uiDevice;
!!!47058103.java!!!	setParams(inout params : Bundle) : void
        mParams = params;
!!!47058231.java!!!	setAutomationSupport(inout automationSupport : IAutomationSupport) : void
        mAutomationSupport = automationSupport;
!!!47058359.java!!!	sleep(in ms : long) : void
        SystemClock.sleep(ms);
!!!47058487.java!!!	setDummyIme() : void
        IInputMethodManager im = IInputMethodManager.Stub.asInterface(ServiceManager
                .getService(Context.INPUT_METHOD_SERVICE));
        List<InputMethodInfo> infos = im.getInputMethodList();
        String id = null;
        for (InputMethodInfo info : infos) {
            if (DUMMY_IME_PACKAGE.equals(info.getComponent().getPackageName())) {
                id = info.getId();
            }
        }
        if (id == null) {
            throw new RuntimeException(String.format(
                    "Required testing fixture missing: IME package (%s)", DUMMY_IME_PACKAGE));
        }
        im.setInputMethod(null, id);
!!!47058615.java!!!	restoreActiveIme() : void
        // TODO: figure out a way to restore active IME
        // Currently retrieving active IME requires querying secure settings provider, which is hard
        // to do without a Context; so the caveat here is that to make the post test device usable,
        // the active IME needs to be manually switched.
