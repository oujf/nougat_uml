class UiScrollable
!!!47042999.java!!!	UiScrollable(inout container : UiSelector)
        // wrap the container selector with container so that QueryController can handle
        // this type of enumeration search accordingly
        super(container);
!!!47043127.java!!!	setAsVerticalList() : UiScrollable
        Tracer.trace();
        mIsVerticalList = true;
        return this;
!!!47043255.java!!!	setAsHorizontalList() : UiScrollable
        Tracer.trace();
        mIsVerticalList = false;
        return this;
!!!47043383.java!!!	exists(inout selector : UiSelector) : boolean
        if(getQueryController().findAccessibilityNodeInfo(selector) != null) {
            return true;
        }
        return false;
!!!47043511.java!!!	getChildByDescription(inout childPattern : UiSelector, inout text : String) : UiObject
        Tracer.trace(childPattern, text);
        return getChildByDescription(childPattern, text, true);
!!!47043639.java!!!	getChildByDescription(inout childPattern : UiSelector, inout text : String, inout allowScrollSearch : boolean) : UiObject
        Tracer.trace(childPattern, text, allowScrollSearch);
        if (text != null) {
            if (allowScrollSearch) {
                scrollIntoView(new UiSelector().descriptionContains(text));
            }
            return super.getChildByDescription(childPattern, text);
        }
        throw new UiObjectNotFoundException("for description= \"" + text + "\"");
!!!47043767.java!!!	getChildByInstance(inout childPattern : UiSelector, in instance : int) : UiObject
        Tracer.trace(childPattern, instance);
        UiSelector patternSelector = UiSelector.patternBuilder(getSelector(),
                UiSelector.patternBuilder(childPattern).instance(instance));
        return new UiObject(patternSelector);
!!!47043895.java!!!	getChildByText(inout childPattern : UiSelector, inout text : String) : UiObject
        Tracer.trace(childPattern, text);
        return getChildByText(childPattern, text, true);
!!!47044023.java!!!	getChildByText(inout childPattern : UiSelector, inout text : String, inout allowScrollSearch : boolean) : UiObject
        Tracer.trace(childPattern, text, allowScrollSearch);
        if (text != null) {
            if (allowScrollSearch) {
                scrollIntoView(new UiSelector().text(text));
            }
            return super.getChildByText(childPattern, text);
        }
        throw new UiObjectNotFoundException("for text= \"" + text + "\"");
!!!47044151.java!!!	scrollDescriptionIntoView(inout text : String) : boolean
        Tracer.trace(text);
        return scrollIntoView(new UiSelector().description(text));
!!!47044279.java!!!	scrollIntoView(inout obj : UiObject) : boolean
        Tracer.trace(obj.getSelector());
        return scrollIntoView(obj.getSelector());
!!!47044407.java!!!	scrollIntoView(inout selector : UiSelector) : boolean
        Tracer.trace(selector);
        // if we happen to be on top of the text we want then return here
        UiSelector childSelector = getSelector().childSelector(selector);
        if (exists(childSelector)) {
            return (true);
        } else {
            // we will need to reset the search from the beginning to start search
            scrollToBeginning(mMaxSearchSwipes);
            if (exists(childSelector)) {
                return (true);
            }
            for (int x = 0; x < mMaxSearchSwipes; x++) {
                boolean scrolled = scrollForward();
                if(exists(childSelector)) {
                    return true;
                }
                if (!scrolled) {
                    return false;
                }
            }
        }
        return false;
!!!47044535.java!!!	ensureFullyVisible(inout childObject : UiObject) : boolean
        Rect actual = childObject.getBounds();
        Rect visible = childObject.getVisibleBounds();
        if (visible.width() * visible.height() == actual.width() * actual.height()) {
            // area match, item fully visible
            return true;
        }
        boolean shouldSwipeForward = false;
        if (mIsVerticalList) {
            // if list is vertical, matching top edge implies obscured bottom edge
            // so we need to scroll list forward
            shouldSwipeForward = actual.top == visible.top;
        } else {
            // if list is horizontal, matching left edge implies obscured right edge,
            // so we need to scroll list forward
            shouldSwipeForward = actual.left == visible.left;
        }
        if (mIsVerticalList) {
            if (shouldSwipeForward) {
                return swipeUp(10);
            } else {
                return swipeDown(10);
            }
        } else {
            if (shouldSwipeForward) {
                return swipeLeft(10);
            } else {
                return swipeRight(10);
            }
        }
!!!47044663.java!!!	scrollTextIntoView(inout text : String) : boolean
        Tracer.trace(text);
        return scrollIntoView(new UiSelector().text(text));
!!!47044791.java!!!	setMaxSearchSwipes(in swipes : int) : UiScrollable
        Tracer.trace(swipes);
        mMaxSearchSwipes = swipes;
        return this;
!!!47044919.java!!!	getMaxSearchSwipes() : int
        Tracer.trace();
        return mMaxSearchSwipes;
!!!47045047.java!!!	flingForward() : boolean
        Tracer.trace();
        return scrollForward(FLING_STEPS);
!!!47045175.java!!!	scrollForward() : boolean
        Tracer.trace();
        return scrollForward(SCROLL_STEPS);
!!!47045303.java!!!	scrollForward(in steps : int) : boolean
        Tracer.trace(steps);
        Log.d(LOG_TAG, "scrollForward() on selector = " + getSelector());
        AccessibilityNodeInfo node = findAccessibilityNodeInfo(WAIT_FOR_SELECTOR_TIMEOUT);
        if(node == null) {
            throw new UiObjectNotFoundException(getSelector().toString());
        }
        Rect rect = new Rect();
        node.getBoundsInScreen(rect);

        int downX = 0;
        int downY = 0;
        int upX = 0;
        int upY = 0;

        // scrolling is by default assumed vertically unless the object is explicitly
        // set otherwise by setAsHorizontalContainer()
        if(mIsVerticalList) {
            int swipeAreaAdjust = (int)(rect.height() * getSwipeDeadZonePercentage());
            // scroll vertically: swipe down -> up
            downX = rect.centerX();
            downY = rect.bottom - swipeAreaAdjust;
            upX = rect.centerX();
            upY = rect.top + swipeAreaAdjust;
        } else {
            int swipeAreaAdjust = (int)(rect.width() * getSwipeDeadZonePercentage());
            // scroll horizontally: swipe right -> left
            // TODO: Assuming device is not in right to left language
            downX = rect.right - swipeAreaAdjust;
            downY = rect.centerY();
            upX = rect.left + swipeAreaAdjust;
            upY = rect.centerY();
        }
        return getInteractionController().scrollSwipe(downX, downY, upX, upY, steps);
!!!47045431.java!!!	flingBackward() : boolean
        Tracer.trace();
        return scrollBackward(FLING_STEPS);
!!!47045559.java!!!	scrollBackward() : boolean
        Tracer.trace();
        return scrollBackward(SCROLL_STEPS);
!!!47045687.java!!!	scrollBackward(in steps : int) : boolean
        Tracer.trace(steps);
        Log.d(LOG_TAG, "scrollBackward() on selector = " + getSelector());
        AccessibilityNodeInfo node = findAccessibilityNodeInfo(WAIT_FOR_SELECTOR_TIMEOUT);
        if (node == null) {
            throw new UiObjectNotFoundException(getSelector().toString());
        }
        Rect rect = new Rect();
        node.getBoundsInScreen(rect);

        int downX = 0;
        int downY = 0;
        int upX = 0;
        int upY = 0;

        // scrolling is by default assumed vertically unless the object is explicitly
        // set otherwise by setAsHorizontalContainer()
        if(mIsVerticalList) {
            int swipeAreaAdjust = (int)(rect.height() * getSwipeDeadZonePercentage());
            Log.d(LOG_TAG, "scrollToBegining() using vertical scroll");
            // scroll vertically: swipe up -> down
            downX = rect.centerX();
            downY = rect.top + swipeAreaAdjust;
            upX = rect.centerX();
            upY = rect.bottom - swipeAreaAdjust;
        } else {
            int swipeAreaAdjust = (int)(rect.width() * getSwipeDeadZonePercentage());
            Log.d(LOG_TAG, "scrollToBegining() using hotizontal scroll");
            // scroll horizontally: swipe left -> right
            // TODO: Assuming device is not in right to left language
            downX = rect.left + swipeAreaAdjust;
            downY = rect.centerY();
            upX = rect.right - swipeAreaAdjust;
            upY = rect.centerY();
        }
        return getInteractionController().scrollSwipe(downX, downY, upX, upY, steps);
!!!47045815.java!!!	scrollToBeginning(in maxSwipes : int, in steps : int) : boolean
        Tracer.trace(maxSwipes, steps);
        Log.d(LOG_TAG, "scrollToBeginning() on selector = " + getSelector());
        // protect against potential hanging and return after preset attempts
        for(int x = 0; x < maxSwipes; x++) {
            if(!scrollBackward(steps)) {
                break;
            }
        }
        return true;
!!!47045943.java!!!	scrollToBeginning(in maxSwipes : int) : boolean
        Tracer.trace(maxSwipes);
        return scrollToBeginning(maxSwipes, SCROLL_STEPS);
!!!47046071.java!!!	flingToBeginning(in maxSwipes : int) : boolean
        Tracer.trace(maxSwipes);
        return scrollToBeginning(maxSwipes, FLING_STEPS);
!!!47046199.java!!!	scrollToEnd(in maxSwipes : int, in steps : int) : boolean
        Tracer.trace(maxSwipes, steps);
        // protect against potential hanging and return after preset attempts
        for(int x = 0; x < maxSwipes; x++) {
            if(!scrollForward(steps)) {
                break;
            }
        }
        return true;
!!!47046327.java!!!	scrollToEnd(in maxSwipes : int) : boolean
        Tracer.trace(maxSwipes);
        return scrollToEnd(maxSwipes, SCROLL_STEPS);
!!!47046455.java!!!	flingToEnd(in maxSwipes : int) : boolean
        Tracer.trace(maxSwipes);
        return scrollToEnd(maxSwipes, FLING_STEPS);
!!!47046583.java!!!	getSwipeDeadZonePercentage() : double
        Tracer.trace();
        return mSwipeDeadZonePercentage;
!!!47046711.java!!!	setSwipeDeadZonePercentage(in swipeDeadZonePercentage : double) : UiScrollable
        Tracer.trace(swipeDeadZonePercentage);
        mSwipeDeadZonePercentage = swipeDeadZonePercentage;
        return this;
