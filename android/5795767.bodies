class UserRouteInfo
!!!47132215.java!!!	UserRouteInfo(inout category : MediaRouter::RouteCategory)
            super(category);
            mSupportedTypes = ROUTE_TYPE_USER;
            mPlaybackType = PLAYBACK_TYPE_REMOTE;
            mVolumeHandling = PLAYBACK_VOLUME_FIXED;
!!!47132343.java!!!	setName(inout name : CharSequence) : void
            mName = name;
            routeUpdated();
!!!47132471.java!!!	setName(in resId : int) : void
            mNameResId = resId;
            mName = null;
            routeUpdated();
!!!47132599.java!!!	setDescription(inout description : CharSequence) : void
            mDescription = description;
            routeUpdated();
!!!47132727.java!!!	setStatus(inout status : CharSequence) : void
            setStatusInt(status);
!!!47132855.java!!!	setRemoteControlClient(inout rcc : RemoteControlClient) : void
            mRcc = rcc;
            updatePlaybackInfoOnRcc();
!!!47132983.java!!!	getRemoteControlClient() : RemoteControlClient
            return mRcc;
!!!47133111.java!!!	setIconDrawable(inout icon : Drawable) : void
            mIcon = icon;
!!!47133239.java!!!	setIconResource(in resId : int) : void
            setIconDrawable(sStatic.mResources.getDrawable(resId));
!!!47133367.java!!!	setVolumeCallback(inout vcb : MediaRouter::VolumeCallback) : void
            mVcb = new VolumeCallbackInfo(vcb, this);
!!!47133495.java!!!	setPlaybackType(in type : int) : void
            if (mPlaybackType != type) {
                mPlaybackType = type;
                configureSessionVolume();
            }
!!!47133623.java!!!	setVolumeHandling(in volumeHandling : int) : void
            if (mVolumeHandling != volumeHandling) {
                mVolumeHandling = volumeHandling;
                configureSessionVolume();
            }
!!!47133751.java!!!	setVolume(in volume : int) : void
            volume = Math.max(0, Math.min(volume, getVolumeMax()));
            if (mVolume != volume) {
                mVolume = volume;
                if (mSvp != null) {
                    mSvp.setCurrentVolume(mVolume);
                }
                dispatchRouteVolumeChanged(this);
                if (mGroup != null) {
                    mGroup.memberVolumeChanged(this);
                }
            }
!!!47133879.java!!!	requestSetVolume(in volume : int) : void
            if (mVolumeHandling == PLAYBACK_VOLUME_VARIABLE) {
                if (mVcb == null) {
                    Log.e(TAG, "Cannot requestSetVolume on user route - no volume callback set");
                    return;
                }
                mVcb.vcb.onVolumeSetRequest(this, volume);
            }
!!!47134007.java!!!	requestUpdateVolume(in direction : int) : void
            if (mVolumeHandling == PLAYBACK_VOLUME_VARIABLE) {
                if (mVcb == null) {
                    Log.e(TAG, "Cannot requestChangeVolume on user route - no volumec callback set");
                    return;
                }
                mVcb.vcb.onVolumeUpdateRequest(this, direction);
            }
!!!47134135.java!!!	setVolumeMax(in volumeMax : int) : void
            if (mVolumeMax != volumeMax) {
                mVolumeMax = volumeMax;
                configureSessionVolume();
            }
!!!47134263.java!!!	setPlaybackStream(in stream : int) : void
            if (mPlaybackStream != stream) {
                mPlaybackStream = stream;
                configureSessionVolume();
            }
!!!47134391.java!!!	updatePlaybackInfoOnRcc() : void
            configureSessionVolume();
!!!47134519.java!!!	configureSessionVolume() : void
            if (mRcc == null) {
                if (DEBUG) {
                    Log.d(TAG, "No Rcc to configure volume for route " + mName);
                }
                return;
            }
            MediaSession session = mRcc.getMediaSession();
            if (session == null) {
                if (DEBUG) {
                    Log.d(TAG, "Rcc has no session to configure volume");
                }
                return;
            }
            if (mPlaybackType == RemoteControlClient.PLAYBACK_TYPE_REMOTE) {
                @VolumeProvider.ControlType int volumeControl =
                        VolumeProvider.VOLUME_CONTROL_FIXED;
                switch (mVolumeHandling) {
                    case RemoteControlClient.PLAYBACK_VOLUME_VARIABLE:
                        volumeControl = VolumeProvider.VOLUME_CONTROL_ABSOLUTE;
                        break;
                    case RemoteControlClient.PLAYBACK_VOLUME_FIXED:
                    default:
                        break;
                }
                // Only register a new listener if necessary
                if (mSvp == null || mSvp.getVolumeControl() != volumeControl
                        || mSvp.getMaxVolume() != mVolumeMax) {
                    mSvp = new SessionVolumeProvider(volumeControl, mVolumeMax, mVolume);
                    session.setPlaybackToRemote(mSvp);
                }
            } else {
                // We only know how to handle local and remote, fall back to local if not remote.
                AudioAttributes.Builder bob = new AudioAttributes.Builder();
                bob.setLegacyStreamType(mPlaybackStream);
                session.setPlaybackToLocal(bob.build());
                mSvp = null;
            }
