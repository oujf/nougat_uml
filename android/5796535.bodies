class RemoteControlClient
!!!69765303.java!!!	RemoteControlClient(inout mediaButtonIntent : PendingIntent)
        mRcMediaIntent = mediaButtonIntent;
!!!69765431.java!!!	RemoteControlClient(inout mediaButtonIntent : PendingIntent, inout looper : Looper)
        mRcMediaIntent = mediaButtonIntent;
!!!69765559.java!!!	registerWithSession(inout helper : MediaSessionLegacyHelper) : void
        helper.addRccListener(mRcMediaIntent, mTransportListener);
        mSession = helper.getSession(mRcMediaIntent);
        setTransportControlFlags(mTransportControlFlags);
!!!69765687.java!!!	unregisterWithSession(inout helper : MediaSessionLegacyHelper) : void
        helper.removeRccListener(mRcMediaIntent);
        mSession = null;
!!!69765815.java!!!	getMediaSession() : MediaSession
        return mSession;
!!!69766967.java!!!	editMetadata(inout startEmpty : boolean) : RemoteControlClient::MetadataEditor
        MetadataEditor editor = new MetadataEditor();
        if (startEmpty) {
            editor.mEditorMetadata = new Bundle();
            editor.mEditorArtwork = null;
            editor.mMetadataChanged = true;
            editor.mArtworkChanged = true;
            editor.mEditableKeys = 0;
        } else {
            editor.mEditorMetadata = new Bundle(mMetadata);
            editor.mEditorArtwork = mOriginalArtwork;
            editor.mMetadataChanged = false;
            editor.mArtworkChanged = false;
        }
        // USE_SESSIONS
        if (startEmpty || mMediaMetadata == null) {
            editor.mMetadataBuilder = new MediaMetadata.Builder();
        } else {
            editor.mMetadataBuilder = new MediaMetadata.Builder(mMediaMetadata);
        }
        return editor;
!!!69767095.java!!!	setPlaybackState(in state : int) : void
        setPlaybackStateInt(state, PLAYBACK_POSITION_ALWAYS_UNKNOWN, PLAYBACK_SPEED_1X,
                false /* legacy API, converting to method with position and speed */);
!!!69767223.java!!!	setPlaybackState(in state : int, in timeInMs : long, in playbackSpeed : float) : void
        setPlaybackStateInt(state, timeInMs, playbackSpeed, true);
!!!69767351.java!!!	setPlaybackStateInt(in state : int, in timeInMs : long, in playbackSpeed : float, inout hasPosition : boolean) : void
        synchronized(mCacheLock) {
            if ((mPlaybackState != state) || (mPlaybackPositionMs != timeInMs)
                    || (mPlaybackSpeed != playbackSpeed)) {
                // store locally
                mPlaybackState = state;
                // distinguish between an application not knowing the current playback position
                // at the moment and an application using the API where only the playback state
                // is passed, not the playback position.
                if (hasPosition) {
                    if (timeInMs < 0) {
                        mPlaybackPositionMs = PLAYBACK_POSITION_INVALID;
                    } else {
                        mPlaybackPositionMs = timeInMs;
                    }
                } else {
                    mPlaybackPositionMs = PLAYBACK_POSITION_ALWAYS_UNKNOWN;
                }
                mPlaybackSpeed = playbackSpeed;
                // keep track of when the state change occurred
                mPlaybackStateChangeTimeMs = SystemClock.elapsedRealtime();

                // USE_SESSIONS
                if (mSession != null) {
                    int pbState = PlaybackState.getStateFromRccState(state);
                    long position = hasPosition ? mPlaybackPositionMs
                            : PlaybackState.PLAYBACK_POSITION_UNKNOWN;

                    PlaybackState.Builder bob = new PlaybackState.Builder(mSessionPlaybackState);
                    bob.setState(pbState, position, playbackSpeed, SystemClock.elapsedRealtime());
                    bob.setErrorMessage(null);
                    mSessionPlaybackState = bob.build();
                    mSession.setPlaybackState(mSessionPlaybackState);
                }
            }
        }
!!!69767479.java!!!	setTransportControlFlags(in transportControlFlags : int) : void
        synchronized(mCacheLock) {
            // store locally
            mTransportControlFlags = transportControlFlags;

            // USE_SESSIONS
            if (mSession != null) {
                PlaybackState.Builder bob = new PlaybackState.Builder(mSessionPlaybackState);
                bob.setActions(
                        PlaybackState.getActionsFromRccControlFlags(transportControlFlags));
                mSessionPlaybackState = bob.build();
                mSession.setPlaybackState(mSessionPlaybackState);
            }
        }
!!!69767735.java!!!	setMetadataUpdateListener(inout l : RemoteControlClient::OnMetadataUpdateListener) : void
        synchronized(mCacheLock) {
            mMetadataUpdateListener = l;
        }
!!!69768119.java!!!	setPlaybackPositionUpdateListener(inout l : RemoteControlClient::OnPlaybackPositionUpdateListener) : void
        synchronized(mCacheLock) {
            mPositionUpdateListener = l;
        }
!!!69768247.java!!!	setOnGetPlaybackPositionListener(inout l : RemoteControlClient::OnGetPlaybackPositionListener) : void
        synchronized(mCacheLock) {
            mPositionProvider = l;
        }
!!!69768375.java!!!	getRcMediaIntent() : PendingIntent
        return mRcMediaIntent;
!!!69768503.java!!!	onSeekTo(in generationId : int, in timeMs : long) : void
        synchronized (mCacheLock) {
            if ((mCurrentClientGenId == generationId) && (mPositionUpdateListener != null)) {
                mPositionUpdateListener.onPlaybackPositionUpdate(timeMs);
            }
        }
!!!69768631.java!!!	onUpdateMetadata(in generationId : int, in key : int, inout value : Object) : void
        synchronized (mCacheLock) {
            if ((mCurrentClientGenId == generationId) && (mMetadataUpdateListener != null)) {
                mMetadataUpdateListener.onMetadataUpdate(key, value);
            }
        }
!!!69768759.java!!!	playbackPositionShouldMove(in playstate : int) : boolean
        switch(playstate) {
            case PLAYSTATE_STOPPED:
            case PLAYSTATE_PAUSED:
            case PLAYSTATE_BUFFERING:
            case PLAYSTATE_ERROR:
            case PLAYSTATE_SKIPPING_FORWARDS:
            case PLAYSTATE_SKIPPING_BACKWARDS:
                return false;
            case PLAYSTATE_PLAYING:
            case PLAYSTATE_FAST_FORWARDING:
            case PLAYSTATE_REWINDING:
            default:
                return true;
        }
!!!69768887.java!!!	getCheckPeriodFromSpeed(in speed : float) : long
        if (Math.abs(speed) <= 1.0f) {
            return POSITION_REFRESH_PERIOD_PLAYING_MS;
        } else {
            return Math.max((long)(POSITION_REFRESH_PERIOD_PLAYING_MS / Math.abs(speed)),
                    POSITION_REFRESH_PERIOD_MIN_MS);
        }
