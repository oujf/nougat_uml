class WindowDecorActionBar
!!!47180471.java!!!	WindowDecorActionBar(inout activity : Activity)
        mActivity = activity;
        Window window = activity.getWindow();
        View decor = window.getDecorView();
        boolean overlayMode = mActivity.getWindow().hasFeature(Window.FEATURE_ACTION_BAR_OVERLAY);
        init(decor);
        if (!overlayMode) {
            mContentView = decor.findViewById(android.R.id.content);
        }
!!!47180599.java!!!	WindowDecorActionBar(inout dialog : Dialog)
        mDialog = dialog;
        init(dialog.getWindow().getDecorView());
!!!47180727.java!!!	WindowDecorActionBar(inout layout : View)
        assert layout.isInEditMode();
        init(layout);
!!!47180855.java!!!	init(inout decor : View) : void
        mOverlayLayout = (ActionBarOverlayLayout) decor.findViewById(
                com.android.internal.R.id.decor_content_parent);
        if (mOverlayLayout != null) {
            mOverlayLayout.setActionBarVisibilityCallback(this);
        }
        mDecorToolbar = getDecorToolbar(decor.findViewById(com.android.internal.R.id.action_bar));
        mContextView = (ActionBarContextView) decor.findViewById(
                com.android.internal.R.id.action_context_bar);
        mContainerView = (ActionBarContainer) decor.findViewById(
                com.android.internal.R.id.action_bar_container);
        mSplitView = (ActionBarContainer) decor.findViewById(
                com.android.internal.R.id.split_action_bar);

        if (mDecorToolbar == null || mContextView == null || mContainerView == null) {
            throw new IllegalStateException(getClass().getSimpleName() + " can only be used " +
                    "with a compatible window decor layout");
        }

        mContext = mDecorToolbar.getContext();
        mContextDisplayMode = mDecorToolbar.isSplit() ?
                CONTEXT_DISPLAY_SPLIT : CONTEXT_DISPLAY_NORMAL;

        // This was initially read from the action bar style
        final int current = mDecorToolbar.getDisplayOptions();
        final boolean homeAsUp = (current & DISPLAY_HOME_AS_UP) != 0;
        if (homeAsUp) {
            mDisplayHomeAsUpSet = true;
        }

        ActionBarPolicy abp = ActionBarPolicy.get(mContext);
        setHomeButtonEnabled(abp.enableHomeButtonByDefault() || homeAsUp);
        setHasEmbeddedTabs(abp.hasEmbeddedTabs());

        final TypedArray a = mContext.obtainStyledAttributes(null,
                com.android.internal.R.styleable.ActionBar,
                com.android.internal.R.attr.actionBarStyle, 0);
        if (a.getBoolean(R.styleable.ActionBar_hideOnContentScroll, false)) {
            setHideOnContentScrollEnabled(true);
        }
        final int elevation = a.getDimensionPixelSize(R.styleable.ActionBar_elevation, 0);
        if (elevation != 0) {
            setElevation(elevation);
        }
        a.recycle();
!!!47180983.java!!!	getDecorToolbar(inout view : View) : DecorToolbar
        if (view instanceof DecorToolbar) {
            return (DecorToolbar) view;
        } else if (view instanceof Toolbar) {
            return ((Toolbar) view).getWrapper();
        } else {
            throw new IllegalStateException("Can't make a decor toolbar out of " +
                    view.getClass().getSimpleName());
        }
!!!47181111.java!!!	setElevation(in elevation : float) : void
        mContainerView.setElevation(elevation);
        if (mSplitView != null) {
            mSplitView.setElevation(elevation);
        }
!!!47181239.java!!!	getElevation() : float
        return mContainerView.getElevation();
!!!47181367.java!!!	onConfigurationChanged(inout newConfig : Configuration) : void
        setHasEmbeddedTabs(ActionBarPolicy.get(mContext).hasEmbeddedTabs());
!!!47181495.java!!!	setHasEmbeddedTabs(inout hasEmbeddedTabs : boolean) : void
        mHasEmbeddedTabs = hasEmbeddedTabs;
        // Switch tab layout configuration if needed
        if (!mHasEmbeddedTabs) {
            mDecorToolbar.setEmbeddedTabView(null);
            mContainerView.setTabContainer(mTabScrollView);
        } else {
            mContainerView.setTabContainer(null);
            mDecorToolbar.setEmbeddedTabView(mTabScrollView);
        }
        final boolean isInTabMode = getNavigationMode() == NAVIGATION_MODE_TABS;
        if (mTabScrollView != null) {
            if (isInTabMode) {
                mTabScrollView.setVisibility(View.VISIBLE);
                if (mOverlayLayout != null) {
                    mOverlayLayout.requestApplyInsets();
                }
            } else {
                mTabScrollView.setVisibility(View.GONE);
            }
        }
        mDecorToolbar.setCollapsible(!mHasEmbeddedTabs && isInTabMode);
        mOverlayLayout.setHasNonEmbeddedTabs(!mHasEmbeddedTabs && isInTabMode);
!!!47181623.java!!!	ensureTabsExist() : void
        if (mTabScrollView != null) {
            return;
        }

        ScrollingTabContainerView tabScroller = new ScrollingTabContainerView(mContext);

        if (mHasEmbeddedTabs) {
            tabScroller.setVisibility(View.VISIBLE);
            mDecorToolbar.setEmbeddedTabView(tabScroller);
        } else {
            if (getNavigationMode() == NAVIGATION_MODE_TABS) {
                tabScroller.setVisibility(View.VISIBLE);
                if (mOverlayLayout != null) {
                    mOverlayLayout.requestApplyInsets();
                }
            } else {
                tabScroller.setVisibility(View.GONE);
            }
            mContainerView.setTabContainer(tabScroller);
        }
        mTabScrollView = tabScroller;
!!!47181751.java!!!	completeDeferredDestroyActionMode() : void
        if (mDeferredModeDestroyCallback != null) {
            mDeferredModeDestroyCallback.onDestroyActionMode(mDeferredDestroyActionMode);
            mDeferredDestroyActionMode = null;
            mDeferredModeDestroyCallback = null;
        }
!!!47181879.java!!!	onWindowVisibilityChanged(in visibility : int) : void
        mCurWindowVisibility = visibility;
!!!47182007.java!!!	setShowHideAnimationEnabled(inout enabled : boolean) : void
        mShowHideAnimationEnabled = enabled;
        if (!enabled && mCurrentShowAnim != null) {
            mCurrentShowAnim.end();
        }
!!!47182135.java!!!	addOnMenuVisibilityListener(inout listener : ActionBar::OnMenuVisibilityListener) : void
        mMenuVisibilityListeners.add(listener);
!!!47182263.java!!!	removeOnMenuVisibilityListener(inout listener : ActionBar::OnMenuVisibilityListener) : void
        mMenuVisibilityListeners.remove(listener);
!!!47182391.java!!!	dispatchMenuVisibilityChanged(inout isVisible : boolean) : void
        if (isVisible == mLastMenuVisibility) {
            return;
        }
        mLastMenuVisibility = isVisible;

        final int count = mMenuVisibilityListeners.size();
        for (int i = 0; i < count; i++) {
            mMenuVisibilityListeners.get(i).onMenuVisibilityChanged(isVisible);
        }
!!!47182519.java!!!	setCustomView(in resId : int) : void
        setCustomView(LayoutInflater.from(getThemedContext()).inflate(resId,
                mDecorToolbar.getViewGroup(), false));
!!!47182647.java!!!	setDisplayUseLogoEnabled(inout useLogo : boolean) : void
        setDisplayOptions(useLogo ? DISPLAY_USE_LOGO : 0, DISPLAY_USE_LOGO);
!!!47182775.java!!!	setDisplayShowHomeEnabled(inout showHome : boolean) : void
        setDisplayOptions(showHome ? DISPLAY_SHOW_HOME : 0, DISPLAY_SHOW_HOME);
!!!47182903.java!!!	setDisplayHomeAsUpEnabled(inout showHomeAsUp : boolean) : void
        setDisplayOptions(showHomeAsUp ? DISPLAY_HOME_AS_UP : 0, DISPLAY_HOME_AS_UP);
!!!47183031.java!!!	setDisplayShowTitleEnabled(inout showTitle : boolean) : void
        setDisplayOptions(showTitle ? DISPLAY_SHOW_TITLE : 0, DISPLAY_SHOW_TITLE);
!!!47183159.java!!!	setDisplayShowCustomEnabled(inout showCustom : boolean) : void
        setDisplayOptions(showCustom ? DISPLAY_SHOW_CUSTOM : 0, DISPLAY_SHOW_CUSTOM);
!!!47183287.java!!!	setHomeButtonEnabled(inout enable : boolean) : void
        mDecorToolbar.setHomeButtonEnabled(enable);
!!!47183415.java!!!	setTitle(in resId : int) : void
        setTitle(mContext.getString(resId));
!!!47183543.java!!!	setSubtitle(in resId : int) : void
        setSubtitle(mContext.getString(resId));
!!!47183671.java!!!	setSelectedNavigationItem(in position : int) : void
        switch (mDecorToolbar.getNavigationMode()) {
        case NAVIGATION_MODE_TABS:
            selectTab(mTabs.get(position));
            break;
        case NAVIGATION_MODE_LIST:
            mDecorToolbar.setDropdownSelectedPosition(position);
            break;
        default:
            throw new IllegalStateException(
                    "setSelectedNavigationIndex not valid for current navigation mode");
        }
!!!47183799.java!!!	removeAllTabs() : void
        cleanupTabs();
!!!47183927.java!!!	cleanupTabs() : void
        if (mSelectedTab != null) {
            selectTab(null);
        }
        mTabs.clear();
        if (mTabScrollView != null) {
            mTabScrollView.removeAllTabs();
        }
        mSavedTabPosition = INVALID_POSITION;
!!!47184055.java!!!	setTitle(inout title : CharSequence) : void
        mDecorToolbar.setTitle(title);
!!!47184183.java!!!	setWindowTitle(inout title : CharSequence) : void
        mDecorToolbar.setWindowTitle(title);
!!!47184311.java!!!	setSubtitle(inout subtitle : CharSequence) : void
        mDecorToolbar.setSubtitle(subtitle);
!!!47184439.java!!!	setDisplayOptions(in options : int) : void
        if ((options & DISPLAY_HOME_AS_UP) != 0) {
            mDisplayHomeAsUpSet = true;
        }
        mDecorToolbar.setDisplayOptions(options);
!!!47184567.java!!!	setDisplayOptions(in options : int, in mask : int) : void
        final int current = mDecorToolbar.getDisplayOptions();
        if ((mask & DISPLAY_HOME_AS_UP) != 0) {
            mDisplayHomeAsUpSet = true;
        }
        mDecorToolbar.setDisplayOptions((options & mask) | (current & ~mask));
!!!47184695.java!!!	setBackgroundDrawable(inout d : Drawable) : void
        mContainerView.setPrimaryBackground(d);
!!!47184823.java!!!	setStackedBackgroundDrawable(inout d : Drawable) : void
        mContainerView.setStackedBackground(d);
!!!47184951.java!!!	setSplitBackgroundDrawable(inout d : Drawable) : void
        if (mSplitView != null) {
            mSplitView.setSplitBackground(d);
        }
!!!47185079.java!!!	getCustomView() : View
        return mDecorToolbar.getCustomView();
!!!47185207.java!!!	getTitle() : CharSequence
        return mDecorToolbar.getTitle();
!!!47185335.java!!!	getSubtitle() : CharSequence
        return mDecorToolbar.getSubtitle();
!!!47185463.java!!!	getNavigationMode() : int
        return mDecorToolbar.getNavigationMode();
!!!47185591.java!!!	getDisplayOptions() : int
        return mDecorToolbar.getDisplayOptions();
!!!47185719.java!!!	startActionMode(inout callback : ActionMode::Callback) : ActionMode
        if (mActionMode != null) {
            mActionMode.finish();
        }

        mOverlayLayout.setHideOnContentScrollEnabled(false);
        mContextView.killMode();
        ActionModeImpl mode = new ActionModeImpl(mContextView.getContext(), callback);
        if (mode.dispatchOnCreate()) {
            // This needs to be set before invalidate() so that it calls
            // onPrepareActionMode()
            mActionMode = mode;
            mode.invalidate();
            mContextView.initForMode(mode);
            animateToMode(true);
            if (mSplitView != null && mContextDisplayMode == CONTEXT_DISPLAY_SPLIT) {
                // TODO animate this
                if (mSplitView.getVisibility() != View.VISIBLE) {
                    mSplitView.setVisibility(View.VISIBLE);
                    if (mOverlayLayout != null) {
                        mOverlayLayout.requestApplyInsets();
                    }
                }
            }
            mContextView.sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED);
            return mode;
        }
        return null;
!!!47185847.java!!!	configureTab(inout tab : ActionBar::Tab, in position : int) : void
        final TabImpl tabi = (TabImpl) tab;
        final ActionBar.TabListener callback = tabi.getCallback();

        if (callback == null) {
            throw new IllegalStateException("Action Bar Tab must have a Callback");
        }

        tabi.setPosition(position);
        mTabs.add(position, tabi);

        final int count = mTabs.size();
        for (int i = position + 1; i < count; i++) {
            mTabs.get(i).setPosition(i);
        }
!!!47185975.java!!!	addTab(inout tab : ActionBar::Tab) : void
        addTab(tab, mTabs.isEmpty());
!!!47186103.java!!!	addTab(inout tab : ActionBar::Tab, in position : int) : void
        addTab(tab, position, mTabs.isEmpty());
!!!47186231.java!!!	addTab(inout tab : ActionBar::Tab, inout setSelected : boolean) : void
        ensureTabsExist();
        mTabScrollView.addTab(tab, setSelected);
        configureTab(tab, mTabs.size());
        if (setSelected) {
            selectTab(tab);
        }
!!!47186359.java!!!	addTab(inout tab : ActionBar::Tab, in position : int, inout setSelected : boolean) : void
        ensureTabsExist();
        mTabScrollView.addTab(tab, position, setSelected);
        configureTab(tab, position);
        if (setSelected) {
            selectTab(tab);
        }
!!!47186487.java!!!	newTab() : ActionBar::Tab
        return new TabImpl();
!!!47186615.java!!!	removeTab(inout tab : ActionBar::Tab) : void
        removeTabAt(tab.getPosition());
!!!47186743.java!!!	removeTabAt(in position : int) : void
        if (mTabScrollView == null) {
            // No tabs around to remove
            return;
        }

        int selectedTabPosition = mSelectedTab != null
                ? mSelectedTab.getPosition() : mSavedTabPosition;
        mTabScrollView.removeTabAt(position);
        TabImpl removedTab = mTabs.remove(position);
        if (removedTab != null) {
            removedTab.setPosition(-1);
        }

        final int newTabCount = mTabs.size();
        for (int i = position; i < newTabCount; i++) {
            mTabs.get(i).setPosition(i);
        }

        if (selectedTabPosition == position) {
            selectTab(mTabs.isEmpty() ? null : mTabs.get(Math.max(0, position - 1)));
        }
!!!47186871.java!!!	selectTab(inout tab : ActionBar::Tab) : void
        if (getNavigationMode() != NAVIGATION_MODE_TABS) {
            mSavedTabPosition = tab != null ? tab.getPosition() : INVALID_POSITION;
            return;
        }

        final FragmentTransaction trans = mDecorToolbar.getViewGroup().isInEditMode() ? null :
                mActivity.getFragmentManager().beginTransaction().disallowAddToBackStack();

        if (mSelectedTab == tab) {
            if (mSelectedTab != null) {
                mSelectedTab.getCallback().onTabReselected(mSelectedTab, trans);
                mTabScrollView.animateToTab(tab.getPosition());
            }
        } else {
            mTabScrollView.setTabSelected(tab != null ? tab.getPosition() : Tab.INVALID_POSITION);
            if (mSelectedTab != null) {
                mSelectedTab.getCallback().onTabUnselected(mSelectedTab, trans);
            }
            mSelectedTab = (TabImpl) tab;
            if (mSelectedTab != null) {
                mSelectedTab.getCallback().onTabSelected(mSelectedTab, trans);
            }
        }

        if (trans != null && !trans.isEmpty()) {
            trans.commit();
        }
!!!47186999.java!!!	getSelectedTab() : ActionBar::Tab
        return mSelectedTab;
!!!47187127.java!!!	getHeight() : int
        return mContainerView.getHeight();
!!!47187255.java!!!	enableContentAnimations(inout enabled : boolean) : void
        mContentAnimations = enabled;
!!!47187383.java!!!	show() : void
        if (mHiddenByApp) {
            mHiddenByApp = false;
            updateVisibility(false);
        }
!!!47187511.java!!!	showForActionMode() : void
        if (!mShowingForMode) {
            mShowingForMode = true;
            if (mOverlayLayout != null) {
                mOverlayLayout.setShowingForActionMode(true);
            }
            updateVisibility(false);
        }
!!!47187639.java!!!	showForSystem() : void
        if (mHiddenBySystem) {
            mHiddenBySystem = false;
            updateVisibility(true);
        }
!!!47187767.java!!!	hide() : void
        if (!mHiddenByApp) {
            mHiddenByApp = true;
            updateVisibility(false);
        }
!!!47187895.java!!!	hideForActionMode() : void
        if (mShowingForMode) {
            mShowingForMode = false;
            if (mOverlayLayout != null) {
                mOverlayLayout.setShowingForActionMode(false);
            }
            updateVisibility(false);
        }
!!!47188023.java!!!	hideForSystem() : void
        if (!mHiddenBySystem) {
            mHiddenBySystem = true;
            updateVisibility(true);
        }
!!!47188151.java!!!	setHideOnContentScrollEnabled(inout hideOnContentScroll : boolean) : void
        if (hideOnContentScroll && !mOverlayLayout.isInOverlayMode()) {
            throw new IllegalStateException("Action bar must be in overlay mode " +
                    "(Window.FEATURE_OVERLAY_ACTION_BAR) to enable hide on content scroll");
        }
        mHideOnContentScroll = hideOnContentScroll;
        mOverlayLayout.setHideOnContentScrollEnabled(hideOnContentScroll);
!!!47188279.java!!!	isHideOnContentScrollEnabled() : boolean
        return mOverlayLayout.isHideOnContentScrollEnabled();
!!!47188407.java!!!	getHideOffset() : int
        return mOverlayLayout.getActionBarHideOffset();
!!!47188535.java!!!	setHideOffset(in offset : int) : void
        if (offset != 0 && !mOverlayLayout.isInOverlayMode()) {
            throw new IllegalStateException("Action bar must be in overlay mode " +
                    "(Window.FEATURE_OVERLAY_ACTION_BAR) to set a non-zero hide offset");
        }
        mOverlayLayout.setActionBarHideOffset(offset);
!!!47188663.java!!!	checkShowingFlags(inout hiddenByApp : boolean, inout hiddenBySystem : boolean, inout showingForMode : boolean) : boolean
        if (showingForMode) {
            return true;
        } else if (hiddenByApp || hiddenBySystem) {
            return false;
        } else {
            return true;
        }
!!!47188791.java!!!	updateVisibility(inout fromSystem : boolean) : void
        // Based on the current state, should we be hidden or shown?
        final boolean shown = checkShowingFlags(mHiddenByApp, mHiddenBySystem,
                mShowingForMode);

        if (shown) {
            if (!mNowShowing) {
                mNowShowing = true;
                doShow(fromSystem);
            }
        } else {
            if (mNowShowing) {
                mNowShowing = false;
                doHide(fromSystem);
            }
        }
!!!47188919.java!!!	doShow(inout fromSystem : boolean) : void
        if (mCurrentShowAnim != null) {
            mCurrentShowAnim.end();
        }
        mContainerView.setVisibility(View.VISIBLE);

        if (mCurWindowVisibility == View.VISIBLE && (mShowHideAnimationEnabled
                || fromSystem)) {
            mContainerView.setTranslationY(0); // because we're about to ask its window loc
            float startingY = -mContainerView.getHeight();
            if (fromSystem) {
                int topLeft[] = {0, 0};
                mContainerView.getLocationInWindow(topLeft);
                startingY -= topLeft[1];
            }
            mContainerView.setTranslationY(startingY);
            AnimatorSet anim = new AnimatorSet();
            ObjectAnimator a = ObjectAnimator.ofFloat(mContainerView, View.TRANSLATION_Y, 0);
            a.addUpdateListener(mUpdateListener);
            AnimatorSet.Builder b = anim.play(a);
            if (mContentAnimations && mContentView != null) {
                b.with(ObjectAnimator.ofFloat(mContentView, View.TRANSLATION_Y,
                        startingY, 0));
            }
            if (mSplitView != null && mContextDisplayMode == CONTEXT_DISPLAY_SPLIT) {
                mSplitView.setTranslationY(mSplitView.getHeight());
                mSplitView.setVisibility(View.VISIBLE);
                b.with(ObjectAnimator.ofFloat(mSplitView, View.TRANSLATION_Y, 0));
            }
            anim.setInterpolator(AnimationUtils.loadInterpolator(mContext,
                    com.android.internal.R.interpolator.decelerate_cubic));
            anim.setDuration(250);
            // If this is being shown from the system, add a small delay.
            // This is because we will also be animating in the status bar,
            // and these two elements can't be done in lock-step.  So we give
            // a little time for the status bar to start its animation before
            // the action bar animates.  (This corresponds to the corresponding
            // case when hiding, where the status bar has a small delay before
            // starting.)
            anim.addListener(mShowListener);
            mCurrentShowAnim = anim;
            anim.start();
        } else {
            mContainerView.setAlpha(1);
            mContainerView.setTranslationY(0);
            if (mContentAnimations && mContentView != null) {
                mContentView.setTranslationY(0);
            }
            if (mSplitView != null && mContextDisplayMode == CONTEXT_DISPLAY_SPLIT) {
                mSplitView.setAlpha(1);
                mSplitView.setTranslationY(0);
                mSplitView.setVisibility(View.VISIBLE);
            }
            mShowListener.onAnimationEnd(null);
        }
        if (mOverlayLayout != null) {
            mOverlayLayout.requestApplyInsets();
        }
!!!47189047.java!!!	doHide(inout fromSystem : boolean) : void
        if (mCurrentShowAnim != null) {
            mCurrentShowAnim.end();
        }

        if (mCurWindowVisibility == View.VISIBLE && (mShowHideAnimationEnabled
                || fromSystem)) {
            mContainerView.setAlpha(1);
            mContainerView.setTransitioning(true);
            AnimatorSet anim = new AnimatorSet();
            float endingY = -mContainerView.getHeight();
            if (fromSystem) {
                int topLeft[] = {0, 0};
                mContainerView.getLocationInWindow(topLeft);
                endingY -= topLeft[1];
            }
            ObjectAnimator a = ObjectAnimator.ofFloat(mContainerView, View.TRANSLATION_Y, endingY);
            a.addUpdateListener(mUpdateListener);
            AnimatorSet.Builder b = anim.play(a);
            if (mContentAnimations && mContentView != null) {
                b.with(ObjectAnimator.ofFloat(mContentView, View.TRANSLATION_Y,
                        0, endingY));
            }
            if (mSplitView != null && mSplitView.getVisibility() == View.VISIBLE) {
                mSplitView.setAlpha(1);
                b.with(ObjectAnimator.ofFloat(mSplitView, View.TRANSLATION_Y,
                        mSplitView.getHeight()));
            }
            anim.setInterpolator(AnimationUtils.loadInterpolator(mContext,
                    com.android.internal.R.interpolator.accelerate_cubic));
            anim.setDuration(250);
            anim.addListener(mHideListener);
            mCurrentShowAnim = anim;
            anim.start();
        } else {
            mHideListener.onAnimationEnd(null);
        }
!!!47189175.java!!!	isShowing() : boolean
        final int height = getHeight();
        // Take into account the case where the bar has a 0 height due to not being measured yet.
        return mNowShowing && (height == 0 || getHideOffset() < height);
!!!47189303.java!!!	animateToMode(inout toActionMode : boolean) : void
        if (toActionMode) {
            showForActionMode();
        } else {
            hideForActionMode();
        }

        if (shouldAnimateContextView()) {
            Animator fadeIn, fadeOut;
            if (toActionMode) {
                fadeOut = mDecorToolbar.setupAnimatorToVisibility(View.GONE,
                        FADE_OUT_DURATION_MS);
                fadeIn = mContextView.setupAnimatorToVisibility(View.VISIBLE,
                        FADE_IN_DURATION_MS);
            } else {
                fadeIn = mDecorToolbar.setupAnimatorToVisibility(View.VISIBLE,
                        FADE_IN_DURATION_MS);
                fadeOut = mContextView.setupAnimatorToVisibility(View.GONE,
                        FADE_OUT_DURATION_MS);
            }
            AnimatorSet set = new AnimatorSet();
            set.playSequentially(fadeOut, fadeIn);
            set.start();
        } else {
            if (toActionMode) {
                mDecorToolbar.setVisibility(View.GONE);
                mContextView.setVisibility(View.VISIBLE);
            } else {
                mDecorToolbar.setVisibility(View.VISIBLE);
                mContextView.setVisibility(View.GONE);
            }
        }
        // mTabScrollView's visibility is not affected by action mode.
!!!47189431.java!!!	shouldAnimateContextView() : boolean
        // We only to animate the action mode in if the container view has already been laid out.
        // If it hasn't been laid out, it hasn't been drawn to screen yet.
        return mContainerView.isLaidOut();
!!!47189559.java!!!	getThemedContext() : Context
        if (mThemedContext == null) {
            TypedValue outValue = new TypedValue();
            Resources.Theme currentTheme = mContext.getTheme();
            currentTheme.resolveAttribute(com.android.internal.R.attr.actionBarWidgetTheme,
                    outValue, true);
            final int targetThemeRes = outValue.resourceId;

            if (targetThemeRes != 0 && mContext.getThemeResId() != targetThemeRes) {
                mThemedContext = new ContextThemeWrapper(mContext, targetThemeRes);
            } else {
                mThemedContext = mContext;
            }
        }
        return mThemedContext;
!!!47189687.java!!!	isTitleTruncated() : boolean
        return mDecorToolbar != null && mDecorToolbar.isTitleTruncated();
!!!47189815.java!!!	setHomeAsUpIndicator(inout indicator : Drawable) : void
        mDecorToolbar.setNavigationIcon(indicator);
!!!47189943.java!!!	setHomeAsUpIndicator(in resId : int) : void
        mDecorToolbar.setNavigationIcon(resId);
!!!47190071.java!!!	setHomeActionContentDescription(inout description : CharSequence) : void
        mDecorToolbar.setNavigationContentDescription(description);
!!!47190199.java!!!	setHomeActionContentDescription(in resId : int) : void
        mDecorToolbar.setNavigationContentDescription(resId);
!!!47190327.java!!!	onContentScrollStarted() : void
        if (mCurrentShowAnim != null) {
            mCurrentShowAnim.cancel();
            mCurrentShowAnim = null;
        }
!!!47190583.java!!!	collapseActionView() : boolean
        if (mDecorToolbar != null && mDecorToolbar.hasExpandedActionView()) {
            mDecorToolbar.collapseActionView();
            return true;
        }
        return false;
!!!47190711.java!!!	requestFocus() : boolean
        return requestFocus(mDecorToolbar.getViewGroup());
!!!47195959.java!!!	setCustomView(inout view : View) : void
        mDecorToolbar.setCustomView(view);
!!!47196087.java!!!	setCustomView(inout view : View, inout layoutParams : ViewGroup::LayoutParams) : void
        view.setLayoutParams(layoutParams);
        mDecorToolbar.setCustomView(view);
!!!47196215.java!!!	setListNavigationCallbacks(inout adapter : SpinnerAdapter, inout callback : ActionBar::OnNavigationListener) : void
        mDecorToolbar.setDropdownParams(adapter, new NavItemSelectedListener(callback));
!!!47196343.java!!!	getSelectedNavigationIndex() : int
        switch (mDecorToolbar.getNavigationMode()) {
            case NAVIGATION_MODE_TABS:
                return mSelectedTab != null ? mSelectedTab.getPosition() : -1;
            case NAVIGATION_MODE_LIST:
                return mDecorToolbar.getDropdownSelectedPosition();
            default:
                return -1;
        }
!!!47196471.java!!!	getNavigationItemCount() : int
        switch (mDecorToolbar.getNavigationMode()) {
            case NAVIGATION_MODE_TABS:
                return mTabs.size();
            case NAVIGATION_MODE_LIST:
                return mDecorToolbar.getDropdownItemCount();
            default:
                return 0;
        }
!!!47196599.java!!!	getTabCount() : int
        return mTabs.size();
!!!47196727.java!!!	setNavigationMode(in mode : int) : void
        final int oldMode = mDecorToolbar.getNavigationMode();
        switch (oldMode) {
            case NAVIGATION_MODE_TABS:
                mSavedTabPosition = getSelectedNavigationIndex();
                selectTab(null);
                mTabScrollView.setVisibility(View.GONE);
                break;
        }
        if (oldMode != mode && !mHasEmbeddedTabs) {
            if (mOverlayLayout != null) {
                mOverlayLayout.requestFitSystemWindows();
            }
        }
        mDecorToolbar.setNavigationMode(mode);
        switch (mode) {
            case NAVIGATION_MODE_TABS:
                ensureTabsExist();
                mTabScrollView.setVisibility(View.VISIBLE);
                if (mSavedTabPosition != INVALID_POSITION) {
                    setSelectedNavigationItem(mSavedTabPosition);
                    mSavedTabPosition = INVALID_POSITION;
                }
                break;
        }
        mDecorToolbar.setCollapsible(mode == NAVIGATION_MODE_TABS && !mHasEmbeddedTabs);
        mOverlayLayout.setHasNonEmbeddedTabs(mode == NAVIGATION_MODE_TABS && !mHasEmbeddedTabs);
!!!47196855.java!!!	getTabAt(in index : int) : ActionBar::Tab
        return mTabs.get(index);
!!!47196983.java!!!	setIcon(in resId : int) : void
        mDecorToolbar.setIcon(resId);
!!!47197111.java!!!	setIcon(inout icon : Drawable) : void
        mDecorToolbar.setIcon(icon);
!!!47197239.java!!!	hasIcon() : boolean
        return mDecorToolbar.hasIcon();
!!!47197367.java!!!	setLogo(in resId : int) : void
        mDecorToolbar.setLogo(resId);
!!!47197495.java!!!	setLogo(inout logo : Drawable) : void
        mDecorToolbar.setLogo(logo);
!!!47197623.java!!!	hasLogo() : boolean
        return mDecorToolbar.hasLogo();
!!!47197751.java!!!	setDefaultDisplayHomeAsUpEnabled(inout enable : boolean) : void
        if (!mDisplayHomeAsUpSet) {
            setDisplayHomeAsUpEnabled(enable);
        }
