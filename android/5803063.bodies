class PssTable
!!!47217207.java!!!	PssTable(inout tableData : SparseMappingTable)
        super(tableData);
!!!47217335.java!!!	mergeStats(inout that : PssTable) : void
        final int N = that.getKeyCount();
        for (int i=0; i<N; i++) {
            final int key = that.getKeyAt(i);
            final int state = SparseMappingTable.getIdFromKey(key);
            mergeStats(state, (int)that.getValue(key, PSS_SAMPLE_COUNT),
                    that.getValue(key, PSS_MINIMUM),
                    that.getValue(key, PSS_AVERAGE),
                    that.getValue(key, PSS_MAXIMUM),
                    that.getValue(key, PSS_USS_MINIMUM),
                    that.getValue(key, PSS_USS_AVERAGE),
                    that.getValue(key, PSS_USS_MAXIMUM));
        }
!!!47217463.java!!!	mergeStats(in state : int, in inCount : int, in minPss : long, in avgPss : long, in maxPss : long, in minUss : long, in avgUss : long, in maxUss : long) : void
        final int key = getOrAddKey((byte)state, PSS_COUNT);
        final long count = getValue(key, PSS_SAMPLE_COUNT);
        if (count == 0) {
            setValue(key, PSS_SAMPLE_COUNT, inCount);
            setValue(key, PSS_MINIMUM, minPss);
            setValue(key, PSS_AVERAGE, avgPss);
            setValue(key, PSS_MAXIMUM, maxPss);
            setValue(key, PSS_USS_MINIMUM, minUss);
            setValue(key, PSS_USS_AVERAGE, avgUss);
            setValue(key, PSS_USS_MAXIMUM, maxUss);
        } else {
            setValue(key, PSS_SAMPLE_COUNT, count + inCount);

            long val;

            val = getValue(key, PSS_MINIMUM);
            if (val > minPss) {
                setValue(key, PSS_MINIMUM, minPss);
            }

            val = getValue(key, PSS_AVERAGE);
            setValue(key, PSS_AVERAGE,
                    (long)(((val*(double)count)+(avgPss*(double)inCount)) / (count+inCount)));

            val = getValue(key, PSS_MAXIMUM);
            if (val < maxPss) {
                setValue(key, PSS_MAXIMUM, maxPss);
            }

            val = getValue(key, PSS_USS_MINIMUM);
            if (val > minUss) {
                setValue(key, PSS_USS_MINIMUM, minUss);
            }

            val = getValue(key, PSS_USS_AVERAGE);
            setValue(key, PSS_AVERAGE,
                    (long)(((val*(double)count)+(avgUss*(double)inCount)) / (count+inCount)));

            val = getValue(key, PSS_USS_MAXIMUM);
            if (val < maxUss) {
                setValue(key, PSS_USS_MAXIMUM, maxUss);
            }
        }
