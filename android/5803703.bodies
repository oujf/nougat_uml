class ServiceState
!!!47217591.java!!!	ServiceState(inout processStats : ProcessStats, inout pkg : String, inout name : String, inout processName : String, inout proc : ProcessState)
        mPackage = pkg;
        mName = name;
        mProcessName = processName;
        mProc = proc;
        mDurations = new DurationsTable(processStats.mTableData);
!!!47217719.java!!!	getPackage() : String
        return mPackage;
!!!47217847.java!!!	getProcessName() : String
        return mProcessName;
!!!47217975.java!!!	getName() : String
        return mName;
!!!47218103.java!!!	getProcess() : ProcessState
        return mProc;
!!!47218231.java!!!	setProcess(inout proc : ProcessState) : void
        mProc = proc;
!!!47218359.java!!!	setMemFactor(in memFactor : int, in now : long) : void
        if (isRestarting()) {
            setRestarting(true, memFactor, now);
        } else if (isInUse()) {
            if (mStartedState != ProcessStats.STATE_NOTHING) {
                setStarted(true, memFactor, now);
            }
            if (mBoundState != ProcessStats.STATE_NOTHING) {
                setBound(true, memFactor, now);
            }
            if (mExecState != ProcessStats.STATE_NOTHING) {
                setExecuting(true, memFactor, now);
            }
        }
!!!47218487.java!!!	applyNewOwner(inout newOwner : Object) : void
        if (mOwner != newOwner) {
            if (mOwner == null) {
                mOwner = newOwner;
                mProc.incActiveServices(mName);
            } else {
                // There was already an old owner, reset this object for its
                // new owner.
                mOwner = newOwner;
                if (mStarted || mBoundState != STATE_NOTHING || mExecState != STATE_NOTHING) {
                    long now = SystemClock.uptimeMillis();
                    if (mStarted) {
                        if (DEBUG) Slog.d(TAG, "Service has new owner " + newOwner
                                + " from " + mOwner + " while started: pkg="
                                + mPackage + " service=" + mName + " proc=" + mProc);
                        setStarted(false, 0, now);
                    }
                    if (mBoundState != STATE_NOTHING) {
                        if (DEBUG) Slog.d(TAG, "Service has new owner " + newOwner
                                + " from " + mOwner + " while bound: pkg="
                                + mPackage + " service=" + mName + " proc=" + mProc);
                        setBound(false, 0, now);
                    }
                    if (mExecState != STATE_NOTHING) {
                        if (DEBUG) Slog.d(TAG, "Service has new owner " + newOwner
                                + " from " + mOwner + " while executing: pkg="
                                + mPackage + " service=" + mName + " proc=" + mProc);
                        setExecuting(false, 0, now);
                    }
                }
            }
        }
!!!47218615.java!!!	clearCurrentOwner(inout owner : Object, inout silently : boolean) : void
        if (mOwner == owner) {
            mProc.decActiveServices(mName);
            if (mStarted || mBoundState != STATE_NOTHING || mExecState != STATE_NOTHING) {
                long now = SystemClock.uptimeMillis();
                if (mStarted) {
                    if (!silently) {
                        Slog.wtfStack(TAG, "Service owner " + owner
                                + " cleared while started: pkg=" + mPackage + " service="
                                + mName + " proc=" + mProc);
                    }
                    setStarted(false, 0, now);
                }
                if (mBoundState != STATE_NOTHING) {
                    if (!silently) {
                        Slog.wtfStack(TAG, "Service owner " + owner
                                + " cleared while bound: pkg=" + mPackage + " service="
                                + mName + " proc=" + mProc);
                    }
                    setBound(false, 0, now);
                }
                if (mExecState != STATE_NOTHING) {
                    if (!silently) {
                        Slog.wtfStack(TAG, "Service owner " + owner
                                + " cleared while exec: pkg=" + mPackage + " service="
                                + mName + " proc=" + mProc);
                    }
                    setExecuting(false, 0, now);
                }
            }
            mOwner = null;
        }
!!!47218743.java!!!	isInUse() : boolean
        return mOwner != null || mRestarting;
!!!47218871.java!!!	isRestarting() : boolean
        return mRestarting;
!!!47218999.java!!!	add(inout other : ServiceState) : void
        mDurations.addDurations(other.mDurations);
        mRunCount += other.mRunCount;
        mStartedCount += other.mStartedCount;
        mBoundCount += other.mBoundCount;
        mExecCount += other.mExecCount;
!!!47219127.java!!!	resetSafely(in now : long) : void
        mDurations.resetTable();
        mRunCount = mRunState != STATE_NOTHING ? 1 : 0;
        mStartedCount = mStartedState != STATE_NOTHING ? 1 : 0;
        mBoundCount = mBoundState != STATE_NOTHING ? 1 : 0;
        mExecCount = mExecState != STATE_NOTHING ? 1 : 0;
        mRunStartTime = mStartedStartTime = mBoundStartTime = mExecStartTime = now;
!!!47219255.java!!!	writeToParcel(inout out : Parcel, in now : long) : void
        mDurations.writeToParcel(out);
        out.writeInt(mRunCount);
        out.writeInt(mStartedCount);
        out.writeInt(mBoundCount);
        out.writeInt(mExecCount);
!!!47219383.java!!!	readFromParcel(inout in : Parcel) : boolean
        if (!mDurations.readFromParcel(in)) {
            return false;
        }
        mRunCount = in.readInt();
        mStartedCount = in.readInt();
        mBoundCount = in.readInt();
        mExecCount = in.readInt();
        return true;
!!!47219511.java!!!	commitStateTime(in now : long) : void
        if (mRunState != STATE_NOTHING) {
            mDurations.addDuration(SERVICE_RUN + (mRunState*SERVICE_COUNT),
                    now - mRunStartTime);
            mRunStartTime = now;
        }
        if (mStartedState != STATE_NOTHING) {
            mDurations.addDuration(SERVICE_STARTED + (mStartedState*SERVICE_COUNT),
                    now - mStartedStartTime);
            mStartedStartTime = now;
        }
        if (mBoundState != STATE_NOTHING) {
            mDurations.addDuration(SERVICE_BOUND + (mBoundState*SERVICE_COUNT),
                    now - mBoundStartTime);
            mBoundStartTime = now;
        }
        if (mExecState != STATE_NOTHING) {
            mDurations.addDuration(SERVICE_EXEC + (mExecState*SERVICE_COUNT),
                    now - mExecStartTime);
            mExecStartTime = now;
        }
!!!47219639.java!!!	updateRunning(in memFactor : int, in now : long) : void
        final int state = (mStartedState != STATE_NOTHING || mBoundState != STATE_NOTHING
                || mExecState != STATE_NOTHING) ? memFactor : STATE_NOTHING;
        if (mRunState != state) {
            if (mRunState != STATE_NOTHING) {
                mDurations.addDuration(SERVICE_RUN + (mRunState*SERVICE_COUNT),
                        now - mRunStartTime);
            } else if (state != STATE_NOTHING) {
                mRunCount++;
            }
            mRunState = state;
            mRunStartTime = now;
        }
!!!47219767.java!!!	setStarted(inout started : boolean, in memFactor : int, in now : long) : void
        if (mOwner == null) {
            Slog.wtf(TAG, "Starting service " + this + " without owner");
        }
        mStarted = started;
        updateStartedState(memFactor, now);
!!!47219895.java!!!	setRestarting(inout restarting : boolean, in memFactor : int, in now : long) : void
        mRestarting = restarting;
        updateStartedState(memFactor, now);
!!!47220023.java!!!	updateStartedState(in memFactor : int, in now : long) : void
        final boolean wasStarted = mStartedState != STATE_NOTHING;
        final boolean started = mStarted || mRestarting;
        final int state = started ? memFactor : STATE_NOTHING;
        if (mStartedState != state) {
            if (mStartedState != STATE_NOTHING) {
                mDurations.addDuration(SERVICE_STARTED + (mStartedState*SERVICE_COUNT),
                        now - mStartedStartTime);
            } else if (started) {
                mStartedCount++;
            }
            mStartedState = state;
            mStartedStartTime = now;
            mProc = mProc.pullFixedProc(mPackage);
            if (wasStarted != started) {
                if (started) {
                    mProc.incStartedServices(memFactor, now, mName);
                } else {
                    mProc.decStartedServices(memFactor, now, mName);
                }
            }
            updateRunning(memFactor, now);
        }
!!!47220151.java!!!	setBound(inout bound : boolean, in memFactor : int, in now : long) : void
        if (mOwner == null) {
            Slog.wtf(TAG, "Binding service " + this + " without owner");
        }
        final int state = bound ? memFactor : STATE_NOTHING;
        if (mBoundState != state) {
            if (mBoundState != STATE_NOTHING) {
                mDurations.addDuration(SERVICE_BOUND + (mBoundState*SERVICE_COUNT),
                        now - mBoundStartTime);
            } else if (bound) {
                mBoundCount++;
            }
            mBoundState = state;
            mBoundStartTime = now;
            updateRunning(memFactor, now);
        }
!!!47220279.java!!!	setExecuting(inout executing : boolean, in memFactor : int, in now : long) : void
        if (mOwner == null) {
            Slog.wtf(TAG, "Executing service " + this + " without owner");
        }
        final int state = executing ? memFactor : STATE_NOTHING;
        if (mExecState != state) {
            if (mExecState != STATE_NOTHING) {
                mDurations.addDuration(SERVICE_EXEC + (mExecState*SERVICE_COUNT),
                        now - mExecStartTime);
            } else if (executing) {
                mExecCount++;
            }
            mExecState = state;
            mExecStartTime = now;
            updateRunning(memFactor, now);
        }
!!!47220407.java!!!	getDuration(in opType : int, in curState : int, in startTime : long, in memFactor : int, in now : long) : long
        int state = opType + (memFactor*SERVICE_COUNT);
        long time = mDurations.getValueForId((byte)state);
        if (curState == memFactor) {
            time += now - startTime;
        }
        return time;
!!!47220535.java!!!	dumpStats(inout pw : PrintWriter, inout prefix : String, inout prefixInner : String, inout headerPrefix : String, in now : long, in totalTime : long, inout dumpSummary : boolean, inout dumpAll : boolean) : void
        dumpStats(pw, prefix, prefixInner, headerPrefix, "Running",
                mRunCount, ServiceState.SERVICE_RUN, mRunState,
                mRunStartTime, now, totalTime, !dumpSummary || dumpAll);
        dumpStats(pw, prefix, prefixInner, headerPrefix, "Started",
                mStartedCount, ServiceState.SERVICE_STARTED, mStartedState,
                mStartedStartTime, now, totalTime, !dumpSummary || dumpAll);
        dumpStats(pw, prefix, prefixInner, headerPrefix, "Bound",
                mBoundCount, ServiceState.SERVICE_BOUND, mBoundState,
                mBoundStartTime, now, totalTime, !dumpSummary || dumpAll);
        dumpStats(pw, prefix, prefixInner, headerPrefix, "Executing",
                mExecCount, ServiceState.SERVICE_EXEC, mExecState,
                mExecStartTime, now, totalTime, !dumpSummary || dumpAll);
        if (dumpAll) {
            if (mOwner != null) {
                pw.print("        mOwner="); pw.println(mOwner);
            }
            if (mStarted || mRestarting) {
                pw.print("        mStarted="); pw.print(mStarted);
                pw.print(" mRestarting="); pw.println(mRestarting);
            }
        }
!!!47220663.java!!!	dumpStats(inout pw : PrintWriter, inout prefix : String, inout prefixInner : String, inout headerPrefix : String, inout header : String, in count : int, in serviceType : int, in state : int, in startTime : long, in now : long, in totalTime : long, inout dumpAll : boolean) : void
        if (count != 0) {
            if (dumpAll) {
                pw.print(prefix); pw.print(header);
                pw.print(" op count "); pw.print(count); pw.println(":");
                dumpTime(pw, prefixInner, serviceType, state, startTime, now);
            } else {
                long myTime = dumpTime(null, null, serviceType, state, startTime, now);
                pw.print(prefix); pw.print(headerPrefix); pw.print(header);
                pw.print(" count "); pw.print(count);
                pw.print(" / time ");
                DumpUtils.printPercent(pw, (double)myTime/(double)totalTime);
                pw.println();
            }
        }
!!!47220791.java!!!	dumpTime(inout pw : PrintWriter, inout prefix : String, in serviceType : int, in curState : int, in curStartTime : long, in now : long) : long
        long totalTime = 0;
        int printedScreen = -1;
        for (int iscreen=0; iscreen<ProcessStats.ADJ_COUNT; iscreen+=ProcessStats.ADJ_SCREEN_MOD) {
            int printedMem = -1;
            for (int imem=0; imem<ProcessStats.ADJ_MEM_FACTOR_COUNT; imem++) {
                int state = imem+iscreen;
                long time = getDuration(serviceType, curState, curStartTime, state, now);
                String running = "";
                if (curState == state && pw != null) {
                    running = " (running)";
                }
                if (time != 0) {
                    if (pw != null) {
                        pw.print(prefix);
                        DumpUtils.printScreenLabel(pw, printedScreen != iscreen
                                ? iscreen : STATE_NOTHING);
                        printedScreen = iscreen;
                        DumpUtils.printMemLabel(pw, printedMem != imem ? imem : STATE_NOTHING,
                                (char)0);
                        printedMem = imem;
                        pw.print(": ");
                        TimeUtils.formatDuration(time, pw); pw.println(running);
                    }
                    totalTime += time;
                }
            }
        }
        if (totalTime != 0 && pw != null) {
            pw.print(prefix);
            pw.print("    TOTAL: ");
            TimeUtils.formatDuration(totalTime, pw);
            pw.println();
        }
        return totalTime;
!!!47220919.java!!!	dumpTimesCheckin(inout pw : PrintWriter, inout pkgName : String, in uid : int, in vers : int, inout serviceName : String, in now : long) : void
        dumpTimeCheckin(pw, "pkgsvc-run", pkgName, uid, vers, serviceName,
                ServiceState.SERVICE_RUN, mRunCount, mRunState, mRunStartTime, now);
        dumpTimeCheckin(pw, "pkgsvc-start", pkgName, uid, vers, serviceName,
                ServiceState.SERVICE_STARTED, mStartedCount, mStartedState, mStartedStartTime, now);
        dumpTimeCheckin(pw, "pkgsvc-bound", pkgName, uid, vers, serviceName,
                ServiceState.SERVICE_BOUND, mBoundCount, mBoundState, mBoundStartTime, now);
        dumpTimeCheckin(pw, "pkgsvc-exec", pkgName, uid, vers, serviceName,
                ServiceState.SERVICE_EXEC, mExecCount, mExecState, mExecStartTime, now);
!!!47221047.java!!!	dumpTimeCheckin(inout pw : PrintWriter, inout label : String, inout packageName : String, in uid : int, in vers : int, inout serviceName : String, in serviceType : int, in opCount : int, in curState : int, in curStartTime : long, in now : long) : void
        if (opCount <= 0) {
            return;
        }
        pw.print(label);
        pw.print(",");
        pw.print(packageName);
        pw.print(",");
        pw.print(uid);
        pw.print(",");
        pw.print(vers);
        pw.print(",");
        pw.print(serviceName);
        pw.print(",");
        pw.print(opCount);
        boolean didCurState = false;
        final int N = mDurations.getKeyCount();
        for (int i=0; i<N; i++) {
            final int key = mDurations.getKeyAt(i);
            long time = mDurations.getValue(key);
            int type = SparseMappingTable.getIdFromKey(key);
            int memFactor = type / ServiceState.SERVICE_COUNT;
            type %= ServiceState.SERVICE_COUNT;
            if (type != serviceType) {
                continue;
            }
            if (curState == memFactor) {
                didCurState = true;
                time += now - curStartTime;
            }
            DumpUtils.printAdjTagAndValue(pw, memFactor, time);
        }
        if (!didCurState && curState != STATE_NOTHING) {
            DumpUtils.printAdjTagAndValue(pw, curState, now - curStartTime);
        }
        pw.println();
!!!47221175.java!!!	toString() : String
        return "ServiceState{" + Integer.toHexString(System.identityHashCode(this))
                + " " + mName + " pkg=" + mPackage + " proc="
                + Integer.toHexString(System.identityHashCode(this)) + "}";
