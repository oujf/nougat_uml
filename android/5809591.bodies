class LoggingPrintStream
!!!47269431.java!!!	LoggingPrintStream()
        super(new OutputStream() {
            public void write(int oneByte) throws IOException {
                throw new AssertionError();
            }
        });
!!!47269687.java!!!	flush() : void
        flush(true);
!!!47269815.java!!!	flush(inout completely : boolean) : void
        int length = builder.length();

        int start = 0;
        int nextBreak;

        // Log one line for each line break.
        while (start < length
                && (nextBreak = builder.indexOf("\n", start)) != -1) {
            log(builder.substring(start, nextBreak));
            start = nextBreak + 1;
        }

        if (completely) {
            // Log the remainder of the buffer.
            if (start < length) {
                log(builder.substring(start));
            }
            builder.setLength(0);
        } else {
            // Delete characters leading up to the next starting point.
            builder.delete(0, start);
        }
!!!47269943.java!!!	write(in oneByte : int) : void
        write(new byte[] { (byte) oneByte }, 0, 1);
!!!47270071.java!!!	write(inout buffer : byte [[]]) : void
        write(buffer, 0, buffer.length);
!!!47270199.java!!!	write(inout bytes : byte [[]], in start : int, in count : int) : void
        if (decoder == null) {
            encodedBytes = ByteBuffer.allocate(80);
            decodedChars = CharBuffer.allocate(80);
            decoder = Charset.defaultCharset().newDecoder()
                    .onMalformedInput(CodingErrorAction.REPLACE)
                    .onUnmappableCharacter(CodingErrorAction.REPLACE);
        }

        int end = start + count;
        while (start < end) {
            // copy some bytes from the array to the long-lived buffer. This
            // way, if we end with a partial character we don't lose it.
            int numBytes = Math.min(encodedBytes.remaining(), end - start);
            encodedBytes.put(bytes, start, numBytes);
            start += numBytes;

            encodedBytes.flip();
            CoderResult coderResult;
            do {
                // decode bytes from the byte buffer into the char buffer
                coderResult = decoder.decode(encodedBytes, decodedChars, false);

                // copy chars from the char buffer into our string builder
                decodedChars.flip();
                builder.append(decodedChars);
                decodedChars.clear();
            } while (coderResult.isOverflow());
            encodedBytes.compact();
        }
        flush(false);
!!!47270327.java!!!	checkError() : boolean
        return false;
!!!47270455.java!!!	setError() : void
 /* ignored */
!!!47270583.java!!!	close() : void
 /* ignored */
!!!47270711.java!!!	format(inout format : String, inout  : Object...args) : PrintStream
        return format(Locale.getDefault(), format, args);
!!!47270839.java!!!	printf(inout format : String, inout  : Object...args) : PrintStream
        return format(format, args);
!!!47270967.java!!!	printf(inout l : Locale, inout format : String, inout  : Object...args) : PrintStream
        return format(l, format, args);
!!!47271095.java!!!	format(inout l : Locale, inout format : String, inout  : Object...args) : PrintStream
        if (format == null) {
            throw new NullPointerException("format");
        }

        formatter.format(l, format, args);
        flush(false);
        return this;
!!!47271223.java!!!	print(inout charArray : char [[]]) : void
        builder.append(charArray);
        flush(false);
!!!47271351.java!!!	print(in ch : char) : void
        builder.append(ch);
        if (ch == '\n') {
            flush(false);
        }
!!!47271479.java!!!	print(in dnum : double) : void
        builder.append(dnum);
!!!47271607.java!!!	print(in fnum : float) : void
        builder.append(fnum);
!!!47271735.java!!!	print(in inum : int) : void
        builder.append(inum);
!!!47271863.java!!!	print(in lnum : long) : void
        builder.append(lnum);
!!!47271991.java!!!	print(inout obj : Object) : void
        builder.append(obj);
        flush(false);
!!!47272119.java!!!	print(inout str : String) : void
        builder.append(str);
        flush(false);
!!!47272247.java!!!	print(inout bool : boolean) : void
        builder.append(bool);
!!!47272375.java!!!	println() : void
        flush(true);
!!!47272503.java!!!	println(inout charArray : char [[]]) : void
        builder.append(charArray);
        flush(true);
!!!47272631.java!!!	println(in ch : char) : void
        builder.append(ch);
        flush(true);
!!!47272759.java!!!	println(in dnum : double) : void
        builder.append(dnum);
        flush(true);
!!!47272887.java!!!	println(in fnum : float) : void
        builder.append(fnum);
        flush(true);
!!!47273015.java!!!	println(in inum : int) : void
        builder.append(inum);
        flush(true);
!!!47273143.java!!!	println(in lnum : long) : void
        builder.append(lnum);
        flush(true);
!!!47273271.java!!!	println(inout obj : Object) : void
        builder.append(obj);
        flush(true);
!!!47273399.java!!!	println(inout s : String) : void
        if (builder.length() == 0 && s != null) {
            // Optimization for a simple println.
            int length = s.length();

            int start = 0;
            int nextBreak;

            // Log one line for each line break.
            while (start < length
                    && (nextBreak = s.indexOf('\n', start)) != -1) {
                log(s.substring(start, nextBreak));
                start = nextBreak + 1;
            }

            if (start < length) {
                log(s.substring(start));
            }
        } else {
            builder.append(s);
            flush(true);
        }
!!!47273527.java!!!	println(inout bool : boolean) : void
        builder.append(bool);
        flush(true);
!!!47273655.java!!!	append(in c : char) : PrintStream
        print(c);
        return this;
!!!47273783.java!!!	append(inout csq : CharSequence) : PrintStream
        builder.append(csq);
        flush(false);
        return this;
!!!47273911.java!!!	append(inout csq : CharSequence, in start : int, in end : int) : PrintStream
        builder.append(csq, start, end);
        flush(false);
        return this;
