class ColorDrawable
!!!69153847.java!!!	ColorDrawable()
        mColorState = new ColorState();
!!!69153975.java!!!	ColorDrawable(in color : int)
        mColorState = new ColorState();

        setColor(color);
!!!69154103.java!!!	getChangingConfigurations() : int
        return super.getChangingConfigurations() | mColorState.getChangingConfigurations();
!!!69154231.java!!!	mutate() : Drawable
        if (!mMutated && super.mutate() == this) {
            mColorState = new ColorState(mColorState);
            mMutated = true;
        }
        return this;
!!!69154359.java!!!	clearMutated() : void
        super.clearMutated();
        mMutated = false;
!!!69154487.java!!!	draw(inout canvas : Canvas) : void
        final ColorFilter colorFilter = mPaint.getColorFilter();
        if ((mColorState.mUseColor >>> 24) != 0 || colorFilter != null || mTintFilter != null) {
            if (colorFilter == null) {
                mPaint.setColorFilter(mTintFilter);
            }

            mPaint.setColor(mColorState.mUseColor);
            canvas.drawRect(getBounds(), mPaint);

            // Restore original color filter.
            mPaint.setColorFilter(colorFilter);
        }
!!!69154615.java!!!	getColor() : int
        return mColorState.mUseColor;
!!!69154743.java!!!	setColor(in color : int) : void
        if (mColorState.mBaseColor != color || mColorState.mUseColor != color) {
            mColorState.mBaseColor = mColorState.mUseColor = color;
            invalidateSelf();
        }
!!!69154871.java!!!	getAlpha() : int
        return mColorState.mUseColor >>> 24;
!!!69154999.java!!!	setAlpha(in alpha : int) : void
        alpha += alpha >> 7;   // make it 0..256
        final int baseAlpha = mColorState.mBaseColor >>> 24;
        final int useAlpha = baseAlpha * alpha >> 8;
        final int useColor = (mColorState.mBaseColor << 8 >>> 8) | (useAlpha << 24);
        if (mColorState.mUseColor != useColor) {
            mColorState.mUseColor = useColor;
            invalidateSelf();
        }
!!!69155127.java!!!	setColorFilter(inout colorFilter : ColorFilter) : void
        mPaint.setColorFilter(colorFilter);
!!!69155255.java!!!	setTintList(inout tint : ColorStateList) : void
        mColorState.mTint = tint;
        mTintFilter = updateTintFilter(mTintFilter, tint, mColorState.mTintMode);
        invalidateSelf();
!!!69155383.java!!!	setTintMode(inout tintMode : PorterDuff::Mode) : void
        mColorState.mTintMode = tintMode;
        mTintFilter = updateTintFilter(mTintFilter, mColorState.mTint, tintMode);
        invalidateSelf();
!!!69155511.java!!!	onStateChange(inout stateSet : int [[]]) : boolean
        final ColorState state = mColorState;
        if (state.mTint != null && state.mTintMode != null) {
            mTintFilter = updateTintFilter(mTintFilter, state.mTint, state.mTintMode);
            return true;
        }
        return false;
!!!69155639.java!!!	isStateful() : boolean
        return mColorState.mTint != null && mColorState.mTint.isStateful();
!!!69155767.java!!!	getOpacity() : int
        if (mTintFilter != null || mPaint.getColorFilter() != null) {
            return PixelFormat.TRANSLUCENT;
        }

        switch (mColorState.mUseColor >>> 24) {
            case 255:
                return PixelFormat.OPAQUE;
            case 0:
                return PixelFormat.TRANSPARENT;
        }
        return PixelFormat.TRANSLUCENT;
!!!69155895.java!!!	getOutline(inout outline : Outline) : void
        outline.setRect(getBounds());
        outline.setAlpha(getAlpha() / 255.0f);
!!!69156023.java!!!	inflate(inout r : Resources, inout parser : XmlPullParser, inout attrs : AttributeSet, inout theme : Resources::Theme) : void
        super.inflate(r, parser, attrs, theme);

        final TypedArray a = obtainAttributes(r, theme, attrs, R.styleable.ColorDrawable);
        updateStateFromTypedArray(a);
        a.recycle();

        updateLocalState(r);
!!!69156151.java!!!	updateStateFromTypedArray(inout a : TypedArray) : void
        final ColorState state = mColorState;

        // Account for any configuration changes.
        state.mChangingConfigurations |= a.getChangingConfigurations();

        // Extract the theme attributes, if any.
        state.mThemeAttrs = a.extractThemeAttrs();

        state.mBaseColor = a.getColor(R.styleable.ColorDrawable_color, state.mBaseColor);
        state.mUseColor = state.mBaseColor;
!!!69156279.java!!!	canApplyTheme() : boolean
        return mColorState.canApplyTheme() || super.canApplyTheme();
!!!69156407.java!!!	applyTheme(inout t : Resources::Theme) : void
        super.applyTheme(t);

        final ColorState state = mColorState;
        if (state == null) {
            return;
        }

        if (state.mThemeAttrs != null) {
            final TypedArray a = t.resolveAttributes(state.mThemeAttrs, R.styleable.ColorDrawable);
            updateStateFromTypedArray(a);
            a.recycle();
        }

        if (state.mTint != null && state.mTint.canApplyTheme()) {
            state.mTint = state.mTint.obtainForTheme(t);
        }

        updateLocalState(t.getResources());
!!!69156535.java!!!	getConstantState() : Drawable::ConstantState
        return mColorState;
!!!69157431.java!!!	ColorDrawable(inout state : ColorDrawable::ColorState, inout res : Resources)
        mColorState = state;

        updateLocalState(res);
!!!69157559.java!!!	updateLocalState(inout r : Resources) : void
        mTintFilter = updateTintFilter(mTintFilter, mColorState.mTint, mColorState.mTintMode);
