class MediaController
!!!69771447.java!!!	MediaController(inout context : Context, inout sessionBinder : ISessionController)
        if (sessionBinder == null) {
            throw new IllegalArgumentException("Session token cannot be null");
        }
        if (context == null) {
            throw new IllegalArgumentException("Context cannot be null");
        }
        mSessionBinder = sessionBinder;
        mTransportControls = new TransportControls();
        mToken = new MediaSession.Token(sessionBinder);
        mContext = context;
!!!69771575.java!!!	MediaController(inout context : Context, inout token : MediaSession::Token)
        this(context, token.getBinder());
!!!69771703.java!!!	getTransportControls() : MediaController::TransportControls
        return mTransportControls;
!!!69771831.java!!!	dispatchMediaButtonEvent(inout keyEvent : KeyEvent) : boolean
        if (keyEvent == null) {
            throw new IllegalArgumentException("KeyEvent may not be null");
        }
        if (!KeyEvent.isMediaKey(keyEvent.getKeyCode())) {
            return false;
        }
        try {
            return mSessionBinder.sendMediaButton(keyEvent);
        } catch (RemoteException e) {
            // System is dead. =(
        }
        return false;
!!!69771959.java!!!	getPlaybackState() : PlaybackState
        try {
            return mSessionBinder.getPlaybackState();
        } catch (RemoteException e) {
            Log.wtf(TAG, "Error calling getPlaybackState.", e);
            return null;
        }
!!!69772087.java!!!	getMetadata() : MediaMetadata
        try {
            return mSessionBinder.getMetadata();
        } catch (RemoteException e) {
            Log.wtf(TAG, "Error calling getMetadata.", e);
            return null;
        }
!!!69772215.java!!!	getQueue() : MediaSession::QueueItem
        try {
            ParceledListSlice queue = mSessionBinder.getQueue();
            if (queue != null) {
                return queue.getList();
            }
        } catch (RemoteException e) {
            Log.wtf(TAG, "Error calling getQueue.", e);
        }
        return null;
!!!69772343.java!!!	getQueueTitle() : CharSequence
        try {
            return mSessionBinder.getQueueTitle();
        } catch (RemoteException e) {
            Log.wtf(TAG, "Error calling getQueueTitle", e);
        }
        return null;
!!!69772471.java!!!	getExtras() : Bundle
        try {
            return mSessionBinder.getExtras();
        } catch (RemoteException e) {
            Log.wtf(TAG, "Error calling getExtras", e);
        }
        return null;
!!!69772599.java!!!	getRatingType() : int
        try {
            return mSessionBinder.getRatingType();
        } catch (RemoteException e) {
            Log.wtf(TAG, "Error calling getRatingType.", e);
            return Rating.RATING_NONE;
        }
!!!69772727.java!!!	getFlags() : long
        try {
            return mSessionBinder.getFlags();
        } catch (RemoteException e) {
            Log.wtf(TAG, "Error calling getFlags.", e);
        }
        return 0;
!!!69772855.java!!!	getPlaybackInfo() : MediaController::PlaybackInfo
        try {
            ParcelableVolumeInfo result = mSessionBinder.getVolumeAttributes();
            return new PlaybackInfo(result.volumeType, result.audioAttrs, result.controlType,
                    result.maxVolume, result.currentVolume);

        } catch (RemoteException e) {
            Log.wtf(TAG, "Error calling getAudioInfo.", e);
        }
        return null;
!!!69772983.java!!!	getSessionActivity() : PendingIntent
        try {
            return mSessionBinder.getLaunchPendingIntent();
        } catch (RemoteException e) {
            Log.wtf(TAG, "Error calling getPendingIntent.", e);
        }
        return null;
!!!69773111.java!!!	getSessionToken() : MediaSession::Token
        return mToken;
!!!69773239.java!!!	setVolumeTo(in value : int, in flags : int) : void
        try {
            mSessionBinder.setVolumeTo(value, flags, mContext.getPackageName());
        } catch (RemoteException e) {
            Log.wtf(TAG, "Error calling setVolumeTo.", e);
        }
!!!69773367.java!!!	adjustVolume(in direction : int, in flags : int) : void
        try {
            mSessionBinder.adjustVolume(direction, flags, mContext.getPackageName());
        } catch (RemoteException e) {
            Log.wtf(TAG, "Error calling adjustVolumeBy.", e);
        }
!!!69773495.java!!!	registerCallback(inout callback : MediaController::Callback) : void
        registerCallback(callback, null);
!!!69773623.java!!!	registerCallback(inout callback : MediaController::Callback, inout handler : Handler) : void
        if (callback == null) {
            throw new IllegalArgumentException("callback must not be null");
        }
        if (handler == null) {
            handler = new Handler();
        }
        synchronized (mLock) {
            addCallbackLocked(callback, handler);
        }
!!!69773751.java!!!	unregisterCallback(inout callback : MediaController::Callback) : void
        if (callback == null) {
            throw new IllegalArgumentException("callback must not be null");
        }
        synchronized (mLock) {
            removeCallbackLocked(callback);
        }
!!!69773879.java!!!	sendCommand(inout command : String, inout args : Bundle, inout cb : ResultReceiver) : void
        if (TextUtils.isEmpty(command)) {
            throw new IllegalArgumentException("command cannot be null or empty");
        }
        try {
            mSessionBinder.sendCommand(command, args, cb);
        } catch (RemoteException e) {
            Log.d(TAG, "Dead object in sendCommand.", e);
        }
!!!69774007.java!!!	getPackageName() : String
        if (mPackageName == null) {
            try {
                mPackageName = mSessionBinder.getPackageName();
            } catch (RemoteException e) {
                Log.d(TAG, "Dead object in getPackageName.", e);
            }
        }
        return mPackageName;
!!!69774135.java!!!	getTag() : String
        if (mTag == null) {
            try {
                mTag = mSessionBinder.getTag();
            } catch (RemoteException e) {
                Log.d(TAG, "Dead object in getTag.", e);
            }
        }
        return mTag;
!!!69774263.java!!!	getSessionBinder() : ISessionController
        return mSessionBinder;
!!!69774391.java!!!	controlsSameSession(inout other : MediaController) : boolean
        if (other == null) return false;
        return mSessionBinder.asBinder() == other.getSessionBinder().asBinder();
!!!69774519.java!!!	addCallbackLocked(inout cb : MediaController::Callback, inout handler : Handler) : void
        if (getHandlerForCallbackLocked(cb) != null) {
            Log.w(TAG, "Callback is already added, ignoring");
            return;
        }
        MessageHandler holder = new MessageHandler(handler.getLooper(), cb);
        mCallbacks.add(holder);
        holder.mRegistered = true;

        if (!mCbRegistered) {
            try {
                mSessionBinder.registerCallbackListener(mCbStub);
                mCbRegistered = true;
            } catch (RemoteException e) {
                Log.e(TAG, "Dead object in registerCallback", e);
            }
        }
!!!69774647.java!!!	removeCallbackLocked(inout cb : MediaController::Callback) : boolean
        boolean success = false;
        for (int i = mCallbacks.size() - 1; i >= 0; i--) {
            MessageHandler handler = mCallbacks.get(i);
            if (cb == handler.mCallback) {
                mCallbacks.remove(i);
                success = true;
                handler.mRegistered = false;
            }
        }
        if (mCbRegistered && mCallbacks.size() == 0) {
            try {
                mSessionBinder.unregisterCallbackListener(mCbStub);
            } catch (RemoteException e) {
                Log.e(TAG, "Dead object in removeCallbackLocked");
            }
            mCbRegistered = false;
        }
        return success;
!!!69774775.java!!!	getHandlerForCallbackLocked(inout cb : MediaController::Callback) : MediaController::MessageHandler
        if (cb == null) {
            throw new IllegalArgumentException("Callback cannot be null");
        }
        for (int i = mCallbacks.size() - 1; i >= 0; i--) {
            MessageHandler handler = mCallbacks.get(i);
            if (cb == handler.mCallback) {
                return handler;
            }
        }
        return null;
!!!69774903.java!!!	postMessage(in what : int, inout obj : Object, inout data : Bundle) : void
        synchronized (mLock) {
            for (int i = mCallbacks.size() - 1; i >= 0; i--) {
                mCallbacks.get(i).post(what, obj, data);
            }
        }
