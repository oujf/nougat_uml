class ListMenuPresenter
!!!47513655.java!!!	ListMenuPresenter(inout context : Context, in itemLayoutRes : int)
        this(itemLayoutRes, 0);
        mContext = context;
        mInflater = LayoutInflater.from(mContext);
!!!47513783.java!!!	ListMenuPresenter(in itemLayoutRes : int, in themeRes : int)
        mItemLayoutRes = itemLayoutRes;
        mThemeRes = themeRes;
!!!47513911.java!!!	initForMenu(inout context : Context, inout menu : MenuBuilder) : void
        if (mThemeRes != 0) {
            mContext = new ContextThemeWrapper(context, mThemeRes);
            mInflater = LayoutInflater.from(mContext);
        } else if (mContext != null) {
            mContext = context;
            if (mInflater == null) {
                mInflater = LayoutInflater.from(mContext);
            }
        }
        mMenu = menu;
        if (mAdapter != null) {
            mAdapter.notifyDataSetChanged();
        }
!!!47514039.java!!!	getMenuView(inout root : ViewGroup) : MenuView
        if (mMenuView == null) {
            mMenuView = (ExpandedMenuView) mInflater.inflate(
                    com.android.internal.R.layout.expanded_menu_layout, root, false);
            if (mAdapter == null) {
                mAdapter = new MenuAdapter();
            }
            mMenuView.setAdapter(mAdapter);
            mMenuView.setOnItemClickListener(this);
        }
        return mMenuView;
!!!47514167.java!!!	getAdapter() : ListAdapter
        if (mAdapter == null) {
            mAdapter = new MenuAdapter();
        }
        return mAdapter;
!!!47514295.java!!!	updateMenuView(inout cleared : boolean) : void
        if (mAdapter != null) mAdapter.notifyDataSetChanged();
!!!47514423.java!!!	setCallback(inout cb : MenuPresenter::Callback) : void
        mCallback = cb;
!!!47514551.java!!!	onSubMenuSelected(inout subMenu : SubMenuBuilder) : boolean
        if (!subMenu.hasVisibleItems()) return false;

        // The window manager will give us a token.
        new MenuDialogHelper(subMenu).show(null);
        if (mCallback != null) {
            mCallback.onOpenSubMenu(subMenu);
        }
        return true;
!!!47514679.java!!!	onCloseMenu(inout menu : MenuBuilder, inout allMenusAreClosing : boolean) : void
        if (mCallback != null) {
            mCallback.onCloseMenu(menu, allMenusAreClosing);
        }
!!!47514807.java!!!	getItemIndexOffset() : int
        return mItemIndexOffset;
!!!47514935.java!!!	setItemIndexOffset(in offset : int) : void
        mItemIndexOffset = offset;
        if (mMenuView != null) {
            updateMenuView(false);
        }
!!!47515063.java!!!	onItemClick(inout parent : AdapterView, inout view : View, in position : int, in id : long) : void
        mMenu.performItemAction(mAdapter.getItem(position), this, 0);
!!!47515191.java!!!	flagActionItems() : boolean
        return false;
!!!47515319.java!!!	expandItemActionView(inout menu : MenuBuilder, inout item : MenuItemImpl) : boolean
        return false;
!!!47515447.java!!!	collapseItemActionView(inout menu : MenuBuilder, inout item : MenuItemImpl) : boolean
        return false;
!!!47515575.java!!!	saveHierarchyState(inout outState : Bundle) : void
        SparseArray<Parcelable> viewStates = new SparseArray<Parcelable>();
        if (mMenuView != null) {
            ((View) mMenuView).saveHierarchyState(viewStates);
        }
        outState.putSparseParcelableArray(VIEWS_TAG, viewStates);
!!!47515703.java!!!	restoreHierarchyState(inout inState : Bundle) : void
        SparseArray<Parcelable> viewStates = inState.getSparseParcelableArray(VIEWS_TAG);
        if (viewStates != null) {
            ((View) mMenuView).restoreHierarchyState(viewStates);
        }
!!!47515831.java!!!	setId(in id : int) : void
        mId = id;
!!!47515959.java!!!	getId() : int
        return mId;
!!!47516087.java!!!	onSaveInstanceState() : Parcelable
        if (mMenuView == null) {
            return null;
        }

        Bundle state = new Bundle();
        saveHierarchyState(state);
        return state;
!!!47516215.java!!!	onRestoreInstanceState(inout state : Parcelable) : void
        restoreHierarchyState((Bundle) state);
