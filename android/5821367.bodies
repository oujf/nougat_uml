class AsyncChannel
!!!47374647.java!!!	cmdToString(in cmd : int) : String
        cmd -= BASE;
        if ((cmd >= 0) && (cmd < sCmdToString.length)) {
            return sCmdToString[cmd];
        } else {
            return null;
        }
!!!47374903.java!!!	connectSrcHandlerToPackageSync(inout srcContext : Context, inout srcHandler : Handler, inout dstPackageName : String, inout dstClassName : String) : int
        if (DBG) log("connect srcHandler to dst Package & class E");

        mConnection = new AsyncChannelConnection();

        /* Initialize the source information */
        mSrcContext = srcContext;
        mSrcHandler = srcHandler;
        mSrcMessenger = new Messenger(srcHandler);

        /*
         * Initialize destination information to null they will
         * be initialized when the AsyncChannelConnection#onServiceConnected
         * is called
         */
        mDstMessenger = null;

        /* Send intent to create the connection */
        Intent intent = new Intent(Intent.ACTION_MAIN);
        intent.setClassName(dstPackageName, dstClassName);
        boolean result = srcContext.bindService(intent, mConnection, Context.BIND_AUTO_CREATE);
        if (DBG) log("connect srcHandler to dst Package & class X result=" + result);
        return result ? STATUS_SUCCESSFUL : STATUS_BINDING_UNSUCCESSFUL;
!!!47375031.java!!!	connectSync(inout srcContext : Context, inout srcHandler : Handler, inout dstMessenger : Messenger) : int
        if (DBG) log("halfConnectSync srcHandler to the dstMessenger  E");

        // We are connected
        connected(srcContext, srcHandler, dstMessenger);

        if (DBG) log("halfConnectSync srcHandler to the dstMessenger X");
        return STATUS_SUCCESSFUL;
!!!47375159.java!!!	connectSync(inout srcContext : Context, inout srcHandler : Handler, inout dstHandler : Handler) : int
        return connectSync(srcContext, srcHandler, new Messenger(dstHandler));
!!!47375287.java!!!	fullyConnectSync(inout srcContext : Context, inout srcHandler : Handler, inout dstHandler : Handler) : int
        int status = connectSync(srcContext, srcHandler, dstHandler);
        if (status == STATUS_SUCCESSFUL) {
            Message response = sendMessageSynchronously(CMD_CHANNEL_FULL_CONNECTION);
            status = response.arg1;
        }
        return status;
!!!47375415.java!!!	connect(inout srcContext : Context, inout srcHandler : Handler, inout dstPackageName : String, inout dstClassName : String) : void
        if (DBG) log("connect srcHandler to dst Package & class E");

        final class ConnectAsync implements Runnable {
            Context mSrcCtx;
            Handler mSrcHdlr;
            String mDstPackageName;
            String mDstClassName;

            ConnectAsync(Context srcContext, Handler srcHandler, String dstPackageName,
                    String dstClassName) {
                mSrcCtx = srcContext;
                mSrcHdlr = srcHandler;
                mDstPackageName = dstPackageName;
                mDstClassName = dstClassName;
            }

            @Override
            public void run() {
                int result = connectSrcHandlerToPackageSync(mSrcCtx, mSrcHdlr, mDstPackageName,
                        mDstClassName);
                replyHalfConnected(result);
            }
        }

        ConnectAsync ca = new ConnectAsync(srcContext, srcHandler, dstPackageName, dstClassName);
        new Thread(ca).start();

        if (DBG) log("connect srcHandler to dst Package & class X");
!!!47375543.java!!!	connect(inout srcContext : Context, inout srcHandler : Handler, inout klass : Class) : void
        connect(srcContext, srcHandler, klass.getPackage().getName(), klass.getName());
!!!47375671.java!!!	connect(inout srcContext : Context, inout srcHandler : Handler, inout dstMessenger : Messenger) : void
        if (DBG) log("connect srcHandler to the dstMessenger  E");

        // We are connected
        connected(srcContext, srcHandler, dstMessenger);

        // Tell source we are half connected
        replyHalfConnected(STATUS_SUCCESSFUL);

        if (DBG) log("connect srcHandler to the dstMessenger X");
!!!47375799.java!!!	connected(inout srcContext : Context, inout srcHandler : Handler, inout dstMessenger : Messenger) : void
        if (DBG) log("connected srcHandler to the dstMessenger  E");

        // Initialize source fields
        mSrcContext = srcContext;
        mSrcHandler = srcHandler;
        mSrcMessenger = new Messenger(mSrcHandler);

        // Initialize destination fields
        mDstMessenger = dstMessenger;
        linkToDeathMonitor();
        if (DBG) log("connected srcHandler to the dstMessenger X");
!!!47375927.java!!!	connect(inout srcContext : Context, inout srcHandler : Handler, inout dstHandler : Handler) : void
        connect(srcContext, srcHandler, new Messenger(dstHandler));
!!!47376055.java!!!	connect(inout srcAsyncService : AsyncService, inout dstMessenger : Messenger) : void
        connect(srcAsyncService, srcAsyncService.getHandler(), dstMessenger);
!!!47376183.java!!!	disconnected() : void
        mSrcContext = null;
        mSrcHandler = null;
        mSrcMessenger = null;
        mDstMessenger = null;
        mDeathMonitor = null;
        mConnection = null;
!!!47376311.java!!!	disconnect() : void
        if ((mConnection != null) && (mSrcContext != null)) {
            mSrcContext.unbindService(mConnection);
            mConnection = null;
        }
        try {
            // Send the DISCONNECTED, although it may not be received
            // but its the best we can do.
            Message msg = Message.obtain();
            msg.what = CMD_CHANNEL_DISCONNECTED;
            msg.replyTo = mSrcMessenger;
            mDstMessenger.send(msg);
        } catch(Exception e) {
        }
        // Tell source we're disconnected.
        replyDisconnected(STATUS_SUCCESSFUL);
        mSrcHandler = null;
        // Unlink only when bindService isn't used
        if (mConnection == null && mDstMessenger != null && mDeathMonitor!= null) {
            mDstMessenger.getBinder().unlinkToDeath(mDeathMonitor, 0);
            mDeathMonitor = null;
        }
!!!47376439.java!!!	sendMessage(inout msg : Message) : void
        msg.replyTo = mSrcMessenger;
        try {
            mDstMessenger.send(msg);
        } catch (RemoteException e) {
            replyDisconnected(STATUS_SEND_UNSUCCESSFUL);
        }
!!!47376567.java!!!	sendMessage(in what : int) : void
        Message msg = Message.obtain();
        msg.what = what;
        sendMessage(msg);
!!!47376695.java!!!	sendMessage(in what : int, in arg1 : int) : void
        Message msg = Message.obtain();
        msg.what = what;
        msg.arg1 = arg1;
        sendMessage(msg);
!!!47376823.java!!!	sendMessage(in what : int, in arg1 : int, in arg2 : int) : void
        Message msg = Message.obtain();
        msg.what = what;
        msg.arg1 = arg1;
        msg.arg2 = arg2;
        sendMessage(msg);
!!!47376951.java!!!	sendMessage(in what : int, in arg1 : int, in arg2 : int, inout obj : Object) : void
        Message msg = Message.obtain();
        msg.what = what;
        msg.arg1 = arg1;
        msg.arg2 = arg2;
        msg.obj = obj;
        sendMessage(msg);
!!!47377079.java!!!	sendMessage(in what : int, inout obj : Object) : void
        Message msg = Message.obtain();
        msg.what = what;
        msg.obj = obj;
        sendMessage(msg);
!!!47377207.java!!!	replyToMessage(inout srcMsg : Message, inout dstMsg : Message) : void
        try {
            dstMsg.replyTo = mSrcMessenger;
            srcMsg.replyTo.send(dstMsg);
        } catch (RemoteException e) {
            log("TODO: handle replyToMessage RemoteException" + e);
            e.printStackTrace();
        }
!!!47377335.java!!!	replyToMessage(inout srcMsg : Message, in what : int) : void
        Message msg = Message.obtain();
        msg.what = what;
        replyToMessage(srcMsg, msg);
!!!47377463.java!!!	replyToMessage(inout srcMsg : Message, in what : int, in arg1 : int) : void
        Message msg = Message.obtain();
        msg.what = what;
        msg.arg1 = arg1;
        replyToMessage(srcMsg, msg);
!!!47377591.java!!!	replyToMessage(inout srcMsg : Message, in what : int, in arg1 : int, in arg2 : int) : void
        Message msg = Message.obtain();
        msg.what = what;
        msg.arg1 = arg1;
        msg.arg2 = arg2;
        replyToMessage(srcMsg, msg);
!!!47377719.java!!!	replyToMessage(inout srcMsg : Message, in what : int, in arg1 : int, in arg2 : int, inout obj : Object) : void
        Message msg = Message.obtain();
        msg.what = what;
        msg.arg1 = arg1;
        msg.arg2 = arg2;
        msg.obj = obj;
        replyToMessage(srcMsg, msg);
!!!47377847.java!!!	replyToMessage(inout srcMsg : Message, in what : int, inout obj : Object) : void
        Message msg = Message.obtain();
        msg.what = what;
        msg.obj = obj;
        replyToMessage(srcMsg, msg);
!!!47377975.java!!!	sendMessageSynchronously(inout msg : Message) : Message
        Message resultMsg = SyncMessenger.sendMessageSynchronously(mDstMessenger, msg);
        return resultMsg;
!!!47378103.java!!!	sendMessageSynchronously(in what : int) : Message
        Message msg = Message.obtain();
        msg.what = what;
        Message resultMsg = sendMessageSynchronously(msg);
        return resultMsg;
!!!47378231.java!!!	sendMessageSynchronously(in what : int, in arg1 : int) : Message
        Message msg = Message.obtain();
        msg.what = what;
        msg.arg1 = arg1;
        Message resultMsg = sendMessageSynchronously(msg);
        return resultMsg;
!!!47378359.java!!!	sendMessageSynchronously(in what : int, in arg1 : int, in arg2 : int) : Message
        Message msg = Message.obtain();
        msg.what = what;
        msg.arg1 = arg1;
        msg.arg2 = arg2;
        Message resultMsg = sendMessageSynchronously(msg);
        return resultMsg;
!!!47378487.java!!!	sendMessageSynchronously(in what : int, in arg1 : int, in arg2 : int, inout obj : Object) : Message
        Message msg = Message.obtain();
        msg.what = what;
        msg.arg1 = arg1;
        msg.arg2 = arg2;
        msg.obj = obj;
        Message resultMsg = sendMessageSynchronously(msg);
        return resultMsg;
!!!47378615.java!!!	sendMessageSynchronously(in what : int, inout obj : Object) : Message
        Message msg = Message.obtain();
        msg.what = what;
        msg.obj = obj;
        Message resultMsg = sendMessageSynchronously(msg);
        return resultMsg;
!!!47379511.java!!!	replyHalfConnected(in status : int) : void
        Message msg = mSrcHandler.obtainMessage(CMD_CHANNEL_HALF_CONNECTED);
        msg.arg1 = status;
        msg.obj = this;
        msg.replyTo = mDstMessenger;
        if (!linkToDeathMonitor()) {
            // Override status to indicate failure
            msg.arg1 = STATUS_BINDING_UNSUCCESSFUL;
        }

        mSrcHandler.sendMessage(msg);
!!!47379639.java!!!	linkToDeathMonitor() : boolean
        // Link to death only when bindService isn't used and not already linked.
        if (mConnection == null && mDeathMonitor == null) {
            mDeathMonitor = new DeathMonitor();
            try {
                mDstMessenger.getBinder().linkToDeath(mDeathMonitor, 0);
            } catch (RemoteException e) {
                mDeathMonitor = null;
                return false;
            }
        }
        return true;
!!!47379767.java!!!	replyDisconnected(in status : int) : void
        // Can't reply if already disconnected. Avoid NullPointerException.
        if (mSrcHandler == null) return;
        Message msg = mSrcHandler.obtainMessage(CMD_CHANNEL_DISCONNECTED);
        msg.arg1 = status;
        msg.obj = this;
        msg.replyTo = mDstMessenger;
        mSrcHandler.sendMessage(msg);
!!!47380279.java!!!	log(inout s : String) : void
        Slog.d(TAG, s);
