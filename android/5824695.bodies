class HexDump
!!!47399479.java!!!	dumpHexString(inout array : byte [[]]) : String
        return dumpHexString(array, 0, array.length);
!!!47399607.java!!!	dumpHexString(inout array : byte [[]], in offset : int, in length : int) : String
        StringBuilder result = new StringBuilder();

        byte[] line = new byte[16];
        int lineIndex = 0;

        result.append("\n0x");
        result.append(toHexString(offset));

        for (int i = offset ; i < offset + length ; i++)
        {
            if (lineIndex == 16)
            {
                result.append(" ");

                for (int j = 0 ; j < 16 ; j++)
                {
                    if (line[j] > ' ' && line[j] < '~')
                    {
                        result.append(new String(line, j, 1));
                    }
                    else
                    {
                        result.append(".");
                    }
                }

                result.append("\n0x");
                result.append(toHexString(i));
                lineIndex = 0;
            }

            byte b = array[i];
            result.append(" ");
            result.append(HEX_DIGITS[(b >>> 4) & 0x0F]);
            result.append(HEX_DIGITS[b & 0x0F]);

            line[lineIndex++] = b;
        }

        if (lineIndex != 16)
        {
            int count = (16 - lineIndex) * 3;
            count++;
            for (int i = 0 ; i < count ; i++)
            {
                result.append(" ");
            }

            for (int i = 0 ; i < lineIndex ; i++)
            {
                if (line[i] > ' ' && line[i] < '~')
                {
                    result.append(new String(line, i, 1));
                }
                else
                {
                    result.append(".");
                }
            }
        }

        return result.toString();
!!!47399735.java!!!	toHexString(in b : byte) : String
        return toHexString(toByteArray(b));
!!!47399863.java!!!	toHexString(inout array : byte [[]]) : String
        return toHexString(array, 0, array.length, true);
!!!47399991.java!!!	toHexString(inout array : byte [[]], inout upperCase : boolean) : String
        return toHexString(array, 0, array.length, upperCase);
!!!47400119.java!!!	toHexString(inout array : byte [[]], in offset : int, in length : int) : String
        return toHexString(array, offset, length, true);
!!!47400247.java!!!	toHexString(inout array : byte [[]], in offset : int, in length : int, inout upperCase : boolean) : String
        char[] digits = upperCase ? HEX_DIGITS : HEX_LOWER_CASE_DIGITS;
        char[] buf = new char[length * 2];

        int bufIndex = 0;
        for (int i = offset ; i < offset + length; i++)
        {
            byte b = array[i];
            buf[bufIndex++] = digits[(b >>> 4) & 0x0F];
            buf[bufIndex++] = digits[b & 0x0F];
        }

        return new String(buf);
!!!47400375.java!!!	toHexString(in i : int) : String
        return toHexString(toByteArray(i));
!!!47400503.java!!!	toByteArray(in b : byte) : byte
        byte[] array = new byte[1];
        array[0] = b;
        return array;
!!!47400631.java!!!	toByteArray(in i : int) : byte
        byte[] array = new byte[4];

        array[3] = (byte)(i & 0xFF);
        array[2] = (byte)((i >> 8) & 0xFF);
        array[1] = (byte)((i >> 16) & 0xFF);
        array[0] = (byte)((i >> 24) & 0xFF);

        return array;
!!!47400759.java!!!	toByte(in c : char) : int
        if (c >= '0' && c <= '9') return (c - '0');
        if (c >= 'A' && c <= 'F') return (c - 'A' + 10);
        if (c >= 'a' && c <= 'f') return (c - 'a' + 10);

        throw new RuntimeException ("Invalid hex char '" + c + "'");
!!!47400887.java!!!	hexStringToByteArray(inout hexString : String) : byte
        int length = hexString.length();
        byte[] buffer = new byte[length / 2];

        for (int i = 0 ; i < length ; i += 2)
        {
            buffer[i / 2] = (byte)((toByte(hexString.charAt(i)) << 4) | toByte(hexString.charAt(i+1)));
        }

        return buffer;
!!!47401015.java!!!	appendByteAsHex(inout sb : StringBuilder, in b : byte, inout upperCase : boolean) : StringBuilder
        char[] digits = upperCase ? HEX_DIGITS : HEX_LOWER_CASE_DIGITS;
        sb.append(digits[(b >> 4) & 0xf]);
        sb.append(digits[b & 0xf]);
        return sb;
