class AbsActionBarView
!!!47536439.java!!!	AbsActionBarView(inout context : Context)
        this(context, null);
!!!47536567.java!!!	AbsActionBarView(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, 0);
!!!47536695.java!!!	AbsActionBarView(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int)
        this(context, attrs, defStyleAttr, 0);
!!!47536823.java!!!	AbsActionBarView(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int, in defStyleRes : int)
        super(context, attrs, defStyleAttr, defStyleRes);

        final TypedValue tv = new TypedValue();
        if (context.getTheme().resolveAttribute(R.attr.actionBarPopupTheme, tv, true)
                && tv.resourceId != 0) {
            mPopupContext = new ContextThemeWrapper(context, tv.resourceId);
        } else {
            mPopupContext = context;
        }
!!!47536951.java!!!	onConfigurationChanged(inout newConfig : Configuration) : void
        super.onConfigurationChanged(newConfig);

        // Action bar can change size on configuration changes.
        // Reread the desired height from the theme-specified style.
        TypedArray a = getContext().obtainStyledAttributes(null, R.styleable.ActionBar,
                com.android.internal.R.attr.actionBarStyle, 0);
        setContentHeight(a.getLayoutDimension(R.styleable.ActionBar_height, 0));
        a.recycle();
        if (mSplitWhenNarrow) {
            setSplitToolbar(getContext().getResources().getBoolean(
                    com.android.internal.R.bool.split_action_bar_is_narrow));
        }
        if (mActionMenuPresenter != null) {
            mActionMenuPresenter.onConfigurationChanged(newConfig);
        }
!!!47537079.java!!!	onTouchEvent(inout ev : MotionEvent) : boolean
        // ActionBarViews always eat touch events, but should still respect the touch event dispatch
        // contract. If the normal View implementation doesn't want the events, we'll just silently
        // eat the rest of the gesture without reporting the events to the default implementation
        // since that's what it expects.

        final int action = ev.getActionMasked();
        if (action == MotionEvent.ACTION_DOWN) {
            mEatingTouch = false;
        }

        if (!mEatingTouch) {
            final boolean handled = super.onTouchEvent(ev);
            if (action == MotionEvent.ACTION_DOWN && !handled) {
                mEatingTouch = true;
            }
        }

        if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL) {
            mEatingTouch = false;
        }

        return true;
!!!47537207.java!!!	onHoverEvent(inout ev : MotionEvent) : boolean
        // Same deal as onTouchEvent() above. Eat all hover events, but still
        // respect the touch event dispatch contract.

        final int action = ev.getActionMasked();
        if (action == MotionEvent.ACTION_HOVER_ENTER) {
            mEatingHover = false;
        }

        if (!mEatingHover) {
            final boolean handled = super.onHoverEvent(ev);
            if (action == MotionEvent.ACTION_HOVER_ENTER && !handled) {
                mEatingHover = true;
            }
        }

        if (action == MotionEvent.ACTION_HOVER_EXIT
                || action == MotionEvent.ACTION_CANCEL) {
            mEatingHover = false;
        }

        return true;
!!!47537335.java!!!	setSplitToolbar(inout split : boolean) : void
        mSplitActionBar = split;
!!!47537463.java!!!	setSplitWhenNarrow(inout splitWhenNarrow : boolean) : void
        mSplitWhenNarrow = splitWhenNarrow;
!!!47537591.java!!!	setContentHeight(in height : int) : void
        mContentHeight = height;
        requestLayout();
!!!47537719.java!!!	getContentHeight() : int
        return mContentHeight;
!!!47537847.java!!!	setSplitView(inout splitView : ViewGroup) : void
        mSplitView = splitView;
!!!47537975.java!!!	getAnimatedVisibility() : int
        if (mVisibilityAnim != null) {
            return mVisAnimListener.mFinalVisibility;
        }
        return getVisibility();
!!!47538103.java!!!	setupAnimatorToVisibility(in visibility : int, in duration : long) : Animator
        if (mVisibilityAnim != null) {
            mVisibilityAnim.cancel();
        }

        if (visibility == VISIBLE) {
            if (getVisibility() != VISIBLE) {
                setAlpha(0);
                if (mSplitView != null && mMenuView != null) {
                    mMenuView.setAlpha(0);
                }
            }
            ObjectAnimator anim = ObjectAnimator.ofFloat(this, View.ALPHA, 1);
            anim.setDuration(duration);
            anim.setInterpolator(sAlphaInterpolator);
            if (mSplitView != null && mMenuView != null) {
                AnimatorSet set = new AnimatorSet();
                ObjectAnimator splitAnim = ObjectAnimator.ofFloat(mMenuView, View.ALPHA, 1);
                splitAnim.setDuration(duration);
                set.addListener(mVisAnimListener.withFinalVisibility(visibility));
                set.play(anim).with(splitAnim);
                return set;
            } else {
                anim.addListener(mVisAnimListener.withFinalVisibility(visibility));
                return anim;
            }
        } else {
            ObjectAnimator anim = ObjectAnimator.ofFloat(this, View.ALPHA, 0);
            anim.setDuration(duration);
            anim.setInterpolator(sAlphaInterpolator);
            if (mSplitView != null && mMenuView != null) {
                AnimatorSet set = new AnimatorSet();
                ObjectAnimator splitAnim = ObjectAnimator.ofFloat(mMenuView, View.ALPHA, 0);
                splitAnim.setDuration(duration);
                set.addListener(mVisAnimListener.withFinalVisibility(visibility));
                set.play(anim).with(splitAnim);
                return set;
            } else {
                anim.addListener(mVisAnimListener.withFinalVisibility(visibility));
                return anim;
            }
        }
!!!47538231.java!!!	animateToVisibility(in visibility : int) : void
        Animator anim = setupAnimatorToVisibility(visibility, FADE_DURATION);
        anim.start();
!!!47538359.java!!!	setVisibility(in visibility : int) : void
        if (visibility != getVisibility()) {
            if (mVisibilityAnim != null) {
                mVisibilityAnim.end();
            }
            super.setVisibility(visibility);
        }
!!!47538487.java!!!	showOverflowMenu() : boolean
        if (mActionMenuPresenter != null) {
            return mActionMenuPresenter.showOverflowMenu();
        }
        return false;
!!!47538615.java!!!	postShowOverflowMenu() : void
        post(new Runnable() {
            public void run() {
                showOverflowMenu();
            }
        });
!!!47538743.java!!!	hideOverflowMenu() : boolean
        if (mActionMenuPresenter != null) {
            return mActionMenuPresenter.hideOverflowMenu();
        }
        return false;
!!!47538871.java!!!	isOverflowMenuShowing() : boolean
        if (mActionMenuPresenter != null) {
            return mActionMenuPresenter.isOverflowMenuShowing();
        }
        return false;
!!!47538999.java!!!	isOverflowMenuShowPending() : boolean
        if (mActionMenuPresenter != null) {
            return mActionMenuPresenter.isOverflowMenuShowPending();
        }
        return false;
!!!47539127.java!!!	isOverflowReserved() : boolean
        return mActionMenuPresenter != null && mActionMenuPresenter.isOverflowReserved();
!!!47539255.java!!!	canShowOverflowMenu() : boolean
        return isOverflowReserved() && getVisibility() == VISIBLE;
!!!47539383.java!!!	dismissPopupMenus() : void
        if (mActionMenuPresenter != null) {
            mActionMenuPresenter.dismissPopupMenus();
        }
!!!47539511.java!!!	measureChildView(inout child : View, in availableWidth : int, in childSpecHeight : int, in spacing : int) : int
        child.measure(MeasureSpec.makeMeasureSpec(availableWidth, MeasureSpec.AT_MOST),
                childSpecHeight);

        availableWidth -= child.getMeasuredWidth();
        availableWidth -= spacing;

        return Math.max(0, availableWidth);
!!!47539639.java!!!	next(in x : int, in val : int, inout isRtl : boolean) : int
        return isRtl ? x - val : x + val;
!!!47539767.java!!!	positionChild(inout child : View, in x : int, in y : int, in contentHeight : int, inout reverse : boolean) : int
        int childWidth = child.getMeasuredWidth();
        int childHeight = child.getMeasuredHeight();
        int childTop = y + (contentHeight - childHeight) / 2;

        if (reverse) {
            child.layout(x - childWidth, childTop, x, childTop + childHeight);
        } else {
            child.layout(x, childTop, x + childWidth, childTop + childHeight);
        }

        return  (reverse ? -childWidth : childWidth);
