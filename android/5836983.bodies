class Outline
!!!69010231.java!!!	Outline(inout src : Outline)
        set(src);
!!!69010359.java!!!	setEmpty() : void
        mMode = MODE_EMPTY;
        mPath.rewind();
        mRect.setEmpty();
        mRadius = RADIUS_UNDEFINED;
!!!69010487.java!!!	isEmpty() : boolean
        return mMode == MODE_EMPTY;
!!!69010615.java!!!	canClip() : boolean
        return mMode != MODE_CONVEX_PATH;
!!!69010743.java!!!	setAlpha(in alpha : float) : void
        mAlpha = alpha;
!!!69010871.java!!!	getAlpha() : float
        return mAlpha;
!!!69010999.java!!!	set(inout src : Outline) : void
        mMode = src.mMode;
        mPath.set(src.mPath);
        mRect.set(src.mRect);
        mRadius = src.mRadius;
        mAlpha = src.mAlpha;
!!!69011127.java!!!	setRect(in left : int, in top : int, in right : int, in bottom : int) : void
        setRoundRect(left, top, right, bottom, 0.0f);
!!!69011255.java!!!	setRect(inout rect : Rect) : void
        setRect(rect.left, rect.top, rect.right, rect.bottom);
!!!69011383.java!!!	setRoundRect(in left : int, in top : int, in right : int, in bottom : int, in radius : float) : void
        if (left >= right || top >= bottom) {
            setEmpty();
            return;
        }

        mMode = MODE_ROUND_RECT;
        mRect.set(left, top, right, bottom);
        mRadius = radius;
        mPath.rewind();
!!!69011511.java!!!	setRoundRect(inout rect : Rect, in radius : float) : void
        setRoundRect(rect.left, rect.top, rect.right, rect.bottom, radius);
!!!69011639.java!!!	getRect(inout outRect : Rect) : boolean
        if (mMode != MODE_ROUND_RECT) {
            return false;
        }
        outRect.set(mRect);
        return true;
!!!69011767.java!!!	getRadius() : float
        return mRadius;
!!!69011895.java!!!	setOval(in left : int, in top : int, in right : int, in bottom : int) : void
        if (left >= right || top >= bottom) {
            setEmpty();
            return;
        }

        if ((bottom - top) == (right - left)) {
            // represent circle as round rect, for efficiency, and to enable clipping
            setRoundRect(left, top, right, bottom, (bottom - top) / 2.0f);
            return;
        }

        mMode = MODE_CONVEX_PATH;
        mPath.rewind();
        mPath.addOval(left, top, right, bottom, Path.Direction.CW);
        mRect.setEmpty();
        mRadius = RADIUS_UNDEFINED;
!!!69012023.java!!!	setOval(inout rect : Rect) : void
        setOval(rect.left, rect.top, rect.right, rect.bottom);
!!!69012151.java!!!	setConvexPath(inout convexPath : Path) : void
        if (convexPath.isEmpty()) {
            setEmpty();
            return;
        }

        if (!convexPath.isConvex()) {
            throw new IllegalArgumentException("path must be convex");
        }

        mMode = MODE_CONVEX_PATH;
        mPath.set(convexPath);
        mRect.setEmpty();
        mRadius = RADIUS_UNDEFINED;
!!!69012279.java!!!	offset(in dx : int, in dy : int) : void
        if (mMode == MODE_ROUND_RECT) {
            mRect.offset(dx, dy);
        } else if (mMode == MODE_CONVEX_PATH) {
            mPath.offset(dx, dy);
        }
