class ToolbarWidgetWrapper
!!!47684535.java!!!	ToolbarWidgetWrapper(inout toolbar : Toolbar, inout style : boolean)
        this(toolbar, style, R.string.action_bar_up_description);
!!!47684663.java!!!	ToolbarWidgetWrapper(inout toolbar : Toolbar, inout style : boolean, in defaultNavigationContentDescription : int)
        mToolbar = toolbar;

        mTitle = toolbar.getTitle();
        mSubtitle = toolbar.getSubtitle();
        mTitleSet = mTitle != null;
        mNavIcon = mToolbar.getNavigationIcon();
        final TypedArray a = toolbar.getContext().obtainStyledAttributes(null,
                R.styleable.ActionBar, R.attr.actionBarStyle, 0);
        mDefaultNavigationIcon = a.getDrawable(R.styleable.ActionBar_homeAsUpIndicator);
        if (style) {
            final CharSequence title = a.getText(R.styleable.ActionBar_title);
            if (!TextUtils.isEmpty(title)) {
                setTitle(title);
            }

            final CharSequence subtitle = a.getText(R.styleable.ActionBar_subtitle);
            if (!TextUtils.isEmpty(subtitle)) {
                setSubtitle(subtitle);
            }

            final Drawable logo = a.getDrawable(R.styleable.ActionBar_logo);
            if (logo != null) {
                setLogo(logo);
            }

            final Drawable icon = a.getDrawable(R.styleable.ActionBar_icon);
            if (icon != null) {
                setIcon(icon);
            }
            if (mNavIcon == null && mDefaultNavigationIcon != null) {
                setNavigationIcon(mDefaultNavigationIcon);
            }
            setDisplayOptions(a.getInt(R.styleable.ActionBar_displayOptions, 0));

            final int customNavId = a.getResourceId(
                    R.styleable.ActionBar_customNavigationLayout, 0);
            if (customNavId != 0) {
                setCustomView(LayoutInflater.from(mToolbar.getContext()).inflate(customNavId,
                        mToolbar, false));
                setDisplayOptions(mDisplayOpts | ActionBar.DISPLAY_SHOW_CUSTOM);
            }

            final int height = a.getLayoutDimension(R.styleable.ActionBar_height, 0);
            if (height > 0) {
                final ViewGroup.LayoutParams lp = mToolbar.getLayoutParams();
                lp.height = height;
                mToolbar.setLayoutParams(lp);
            }

            final int contentInsetStart = a.getDimensionPixelOffset(
                    R.styleable.ActionBar_contentInsetStart, -1);
            final int contentInsetEnd = a.getDimensionPixelOffset(
                    R.styleable.ActionBar_contentInsetEnd, -1);
            if (contentInsetStart >= 0 || contentInsetEnd >= 0) {
                mToolbar.setContentInsetsRelative(Math.max(contentInsetStart, 0),
                        Math.max(contentInsetEnd, 0));
            }

            final int titleTextStyle = a.getResourceId(R.styleable.ActionBar_titleTextStyle, 0);
            if (titleTextStyle != 0) {
                mToolbar.setTitleTextAppearance(mToolbar.getContext(), titleTextStyle);
            }

            final int subtitleTextStyle = a.getResourceId(
                    R.styleable.ActionBar_subtitleTextStyle, 0);
            if (subtitleTextStyle != 0) {
                mToolbar.setSubtitleTextAppearance(mToolbar.getContext(), subtitleTextStyle);
            }

            final int popupTheme = a.getResourceId(R.styleable.ActionBar_popupTheme, 0);
            if (popupTheme != 0) {
                mToolbar.setPopupTheme(popupTheme);
            }
        } else {
            mDisplayOpts = detectDisplayOptions();
        }
        a.recycle();

        setDefaultNavigationContentDescription(defaultNavigationContentDescription);
        mHomeDescription = mToolbar.getNavigationContentDescription();

        mToolbar.setNavigationOnClickListener(new View.OnClickListener() {
            final ActionMenuItem mNavItem = new ActionMenuItem(mToolbar.getContext(),
                    0, android.R.id.home, 0, 0, mTitle);
            @Override
            public void onClick(View v) {
                if (mWindowCallback != null && mMenuPrepared) {
                    mWindowCallback.onMenuItemSelected(Window.FEATURE_OPTIONS_PANEL, mNavItem);
                }
            }
        });
!!!47684791.java!!!	setDefaultNavigationContentDescription(in defaultNavigationContentDescription : int) : void
        if (defaultNavigationContentDescription == mDefaultNavigationContentDescription) {
            return;
        }
        mDefaultNavigationContentDescription = defaultNavigationContentDescription;
        if (TextUtils.isEmpty(mToolbar.getNavigationContentDescription())) {
            setNavigationContentDescription(mDefaultNavigationContentDescription);
        }
!!!47684919.java!!!	detectDisplayOptions() : int
        int opts = ActionBar.DISPLAY_SHOW_TITLE | ActionBar.DISPLAY_SHOW_HOME |
                ActionBar.DISPLAY_USE_LOGO;
        if (mToolbar.getNavigationIcon() != null) {
            opts |= ActionBar.DISPLAY_HOME_AS_UP;
            mDefaultNavigationIcon = mToolbar.getNavigationIcon();
        }
        return opts;
!!!47685047.java!!!	getViewGroup() : ViewGroup
        return mToolbar;
!!!47685175.java!!!	getContext() : Context
        return mToolbar.getContext();
!!!47685303.java!!!	isSplit() : boolean
        return false;
!!!47685431.java!!!	hasExpandedActionView() : boolean
        return mToolbar.hasExpandedActionView();
!!!47685559.java!!!	collapseActionView() : void
        mToolbar.collapseActionView();
!!!47685687.java!!!	setWindowCallback(inout cb : Window::Callback) : void
        mWindowCallback = cb;
!!!47685815.java!!!	setWindowTitle(inout title : CharSequence) : void
        // "Real" title always trumps window title.
        if (!mTitleSet) {
            setTitleInt(title);
        }
!!!47685943.java!!!	getTitle() : CharSequence
        return mToolbar.getTitle();
!!!47686071.java!!!	setTitle(inout title : CharSequence) : void
        mTitleSet = true;
        setTitleInt(title);
!!!47686199.java!!!	setTitleInt(inout title : CharSequence) : void
        mTitle = title;
        if ((mDisplayOpts & ActionBar.DISPLAY_SHOW_TITLE) != 0) {
            mToolbar.setTitle(title);
        }
!!!47686327.java!!!	getSubtitle() : CharSequence
        return mToolbar.getSubtitle();
!!!47686455.java!!!	setSubtitle(inout subtitle : CharSequence) : void
        mSubtitle = subtitle;
        if ((mDisplayOpts & ActionBar.DISPLAY_SHOW_TITLE) != 0) {
            mToolbar.setSubtitle(subtitle);
        }
!!!47686583.java!!!	initProgress() : void
        Log.i(TAG, "Progress display unsupported");
!!!47686711.java!!!	initIndeterminateProgress() : void
        Log.i(TAG, "Progress display unsupported");
!!!47686839.java!!!	canSplit() : boolean
        return false;
!!!47687095.java!!!	setSplitToolbar(inout split : boolean) : void
        if (split) {
            throw new UnsupportedOperationException("Cannot split an android.widget.Toolbar");
        }
!!!47687223.java!!!	setSplitWhenNarrow(inout splitWhenNarrow : boolean) : void
        // Ignore.
!!!47687351.java!!!	hasIcon() : boolean
        return mIcon != null;
!!!47687479.java!!!	hasLogo() : boolean
        return mLogo != null;
!!!47687607.java!!!	setIcon(in resId : int) : void
        setIcon(resId != 0 ? getContext().getDrawable(resId) : null);
!!!47687735.java!!!	setIcon(inout d : Drawable) : void
        mIcon = d;
        updateToolbarLogo();
!!!47687863.java!!!	setLogo(in resId : int) : void
        setLogo(resId != 0 ? getContext().getDrawable(resId) : null);
!!!47687991.java!!!	setLogo(inout d : Drawable) : void
        mLogo = d;
        updateToolbarLogo();
!!!47688119.java!!!	updateToolbarLogo() : void
        Drawable logo = null;
        if ((mDisplayOpts & ActionBar.DISPLAY_SHOW_HOME) != 0) {
            if ((mDisplayOpts & ActionBar.DISPLAY_USE_LOGO) != 0) {
                logo = mLogo != null ? mLogo : mIcon;
            } else {
                logo = mIcon;
            }
        }
        mToolbar.setLogo(logo);
!!!47688247.java!!!	canShowOverflowMenu() : boolean
        return mToolbar.canShowOverflowMenu();
!!!47688375.java!!!	isOverflowMenuShowing() : boolean
        return mToolbar.isOverflowMenuShowing();
!!!47688503.java!!!	isOverflowMenuShowPending() : boolean
        return mToolbar.isOverflowMenuShowPending();
!!!47688631.java!!!	showOverflowMenu() : boolean
        return mToolbar.showOverflowMenu();
!!!47688759.java!!!	hideOverflowMenu() : boolean
        return mToolbar.hideOverflowMenu();
!!!47688887.java!!!	setMenuPrepared() : void
        mMenuPrepared = true;
!!!47689015.java!!!	setMenu(inout menu : Menu, inout cb : MenuPresenter::Callback) : void
        if (mActionMenuPresenter == null) {
            mActionMenuPresenter = new ActionMenuPresenter(mToolbar.getContext());
            mActionMenuPresenter.setId(com.android.internal.R.id.action_menu_presenter);
        }
        mActionMenuPresenter.setCallback(cb);
        mToolbar.setMenu((MenuBuilder) menu, mActionMenuPresenter);
!!!47689143.java!!!	dismissPopupMenus() : void
        mToolbar.dismissPopupMenus();
!!!47689271.java!!!	getDisplayOptions() : int
        return mDisplayOpts;
!!!47689399.java!!!	setDisplayOptions(in newOpts : int) : void
        final int oldOpts = mDisplayOpts;
        final int changed = oldOpts ^ newOpts;
        mDisplayOpts = newOpts;
        if (changed != 0) {
            if ((changed & ActionBar.DISPLAY_HOME_AS_UP) != 0) {
                if ((newOpts & ActionBar.DISPLAY_HOME_AS_UP) != 0) {
                    updateHomeAccessibility();
                }
                updateNavigationIcon();
            }

            if ((changed & AFFECTS_LOGO_MASK) != 0) {
                updateToolbarLogo();
            }

            if ((changed & ActionBar.DISPLAY_SHOW_TITLE) != 0) {
                if ((newOpts & ActionBar.DISPLAY_SHOW_TITLE) != 0) {
                    mToolbar.setTitle(mTitle);
                    mToolbar.setSubtitle(mSubtitle);
                } else {
                    mToolbar.setTitle(null);
                    mToolbar.setSubtitle(null);
                }
            }

            if ((changed & ActionBar.DISPLAY_SHOW_CUSTOM) != 0 && mCustomView != null) {
                if ((newOpts & ActionBar.DISPLAY_SHOW_CUSTOM) != 0) {
                    mToolbar.addView(mCustomView);
                } else {
                    mToolbar.removeView(mCustomView);
                }
            }
        }
!!!47689527.java!!!	setEmbeddedTabView(inout tabView : ScrollingTabContainerView) : void
        if (mTabView != null && mTabView.getParent() == mToolbar) {
            mToolbar.removeView(mTabView);
        }
        mTabView = tabView;
        if (tabView != null && mNavigationMode == ActionBar.NAVIGATION_MODE_TABS) {
            mToolbar.addView(mTabView, 0);
            Toolbar.LayoutParams lp = (Toolbar.LayoutParams) mTabView.getLayoutParams();
            lp.width = ViewGroup.LayoutParams.WRAP_CONTENT;
            lp.height = ViewGroup.LayoutParams.WRAP_CONTENT;
            lp.gravity = Gravity.START | Gravity.BOTTOM;
            tabView.setAllowCollapse(true);
        }
!!!47689655.java!!!	hasEmbeddedTabs() : boolean
        return mTabView != null;
!!!47689783.java!!!	isTitleTruncated() : boolean
        return mToolbar.isTitleTruncated();
!!!47689911.java!!!	setCollapsible(inout collapsible : boolean) : void
        mToolbar.setCollapsible(collapsible);
!!!47690039.java!!!	setHomeButtonEnabled(inout enable : boolean) : void
        // Ignore
!!!47690167.java!!!	getNavigationMode() : int
        return mNavigationMode;
!!!47690295.java!!!	setNavigationMode(in mode : int) : void
        final int oldMode = mNavigationMode;
        if (mode != oldMode) {
            switch (oldMode) {
                case ActionBar.NAVIGATION_MODE_LIST:
                    if (mSpinner != null && mSpinner.getParent() == mToolbar) {
                        mToolbar.removeView(mSpinner);
                    }
                    break;
                case ActionBar.NAVIGATION_MODE_TABS:
                    if (mTabView != null && mTabView.getParent() == mToolbar) {
                        mToolbar.removeView(mTabView);
                    }
                    break;
            }

            mNavigationMode = mode;

            switch (mode) {
                case ActionBar.NAVIGATION_MODE_STANDARD:
                    break;
                case ActionBar.NAVIGATION_MODE_LIST:
                    ensureSpinner();
                    mToolbar.addView(mSpinner, 0);
                    break;
                case ActionBar.NAVIGATION_MODE_TABS:
                    if (mTabView != null) {
                        mToolbar.addView(mTabView, 0);
                        Toolbar.LayoutParams lp = (Toolbar.LayoutParams) mTabView.getLayoutParams();
                        lp.width = ViewGroup.LayoutParams.WRAP_CONTENT;
                        lp.height = ViewGroup.LayoutParams.WRAP_CONTENT;
                        lp.gravity = Gravity.START | Gravity.BOTTOM;
                    }
                    break;
                default:
                    throw new IllegalArgumentException("Invalid navigation mode " + mode);
            }
        }
!!!47690423.java!!!	ensureSpinner() : void
        if (mSpinner == null) {
            mSpinner = new Spinner(getContext(), null, R.attr.actionDropDownStyle);
            Toolbar.LayoutParams lp = new Toolbar.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,
                    ViewGroup.LayoutParams.WRAP_CONTENT, Gravity.START | Gravity.CENTER_VERTICAL);
            mSpinner.setLayoutParams(lp);
        }
!!!47690551.java!!!	setDropdownParams(inout adapter : SpinnerAdapter, inout listener : AdapterView::OnItemSelectedListener) : void
        ensureSpinner();
        mSpinner.setAdapter(adapter);
        mSpinner.setOnItemSelectedListener(listener);
!!!47690679.java!!!	setDropdownSelectedPosition(in position : int) : void
        if (mSpinner == null) {
            throw new IllegalStateException(
                    "Can't set dropdown selected position without an adapter");
        }
        mSpinner.setSelection(position);
!!!47690807.java!!!	getDropdownSelectedPosition() : int
        return mSpinner != null ? mSpinner.getSelectedItemPosition() : 0;
!!!47690935.java!!!	getDropdownItemCount() : int
        return mSpinner != null ? mSpinner.getCount() : 0;
!!!47691063.java!!!	setCustomView(inout view : View) : void
        if (mCustomView != null && (mDisplayOpts & ActionBar.DISPLAY_SHOW_CUSTOM) != 0) {
            mToolbar.removeView(mCustomView);
        }
        mCustomView = view;
        if (view != null && (mDisplayOpts & ActionBar.DISPLAY_SHOW_CUSTOM) != 0) {
            mToolbar.addView(mCustomView);
        }
!!!47691191.java!!!	getCustomView() : View
        return mCustomView;
!!!47691319.java!!!	animateToVisibility(in visibility : int) : void
        Animator anim = setupAnimatorToVisibility(visibility, DEFAULT_FADE_DURATION_MS);
        if (anim != null) {
            anim.start();
        }
!!!47691447.java!!!	setupAnimatorToVisibility(in visibility : int, in duration : long) : Animator

        if (visibility == View.GONE) {
            ObjectAnimator anim = ObjectAnimator.ofFloat(mToolbar, View.ALPHA, 1, 0);
            anim.setDuration(duration);
            anim.addListener(new AnimatorListenerAdapter() {
                        private boolean mCanceled = false;
                        @Override
                        public void onAnimationEnd(Animator animation) {
                            if (!mCanceled) {
                                mToolbar.setVisibility(View.GONE);
                            }
                        }

                        @Override
                        public void onAnimationCancel(Animator animation) {
                            mCanceled = true;
                        }
                    });
            return anim;
        } else if (visibility == View.VISIBLE) {
            ObjectAnimator anim = ObjectAnimator.ofFloat(mToolbar, View.ALPHA, 0, 1);
            anim.setDuration(duration);
            anim.addListener(new AnimatorListenerAdapter() {
                        @Override
                        public void onAnimationStart(Animator animation) {
                            mToolbar.setVisibility(View.VISIBLE);
                        }
                    });
            return anim;
        }
        return null;
!!!47691575.java!!!	setNavigationIcon(inout icon : Drawable) : void
        mNavIcon = icon;
        updateNavigationIcon();
!!!47691703.java!!!	setNavigationIcon(in resId : int) : void
        setNavigationIcon(resId != 0 ? mToolbar.getContext().getDrawable(resId) : null);
!!!47691831.java!!!	setDefaultNavigationIcon(inout defaultNavigationIcon : Drawable) : void
        if (mDefaultNavigationIcon != defaultNavigationIcon) {
            mDefaultNavigationIcon = defaultNavigationIcon;
            updateNavigationIcon();
        }
!!!47691959.java!!!	updateNavigationIcon() : void
        if ((mDisplayOpts & ActionBar.DISPLAY_HOME_AS_UP) != 0) {
            mToolbar.setNavigationIcon(mNavIcon != null ? mNavIcon : mDefaultNavigationIcon);
        } else {
            mToolbar.setNavigationIcon(null);
        }
!!!47692087.java!!!	setNavigationContentDescription(inout description : CharSequence) : void
        mHomeDescription = description;
        updateHomeAccessibility();
!!!47692215.java!!!	setNavigationContentDescription(in resId : int) : void
        setNavigationContentDescription(resId == 0 ? null : getContext().getString(resId));
!!!47692343.java!!!	updateHomeAccessibility() : void
        if ((mDisplayOpts & ActionBar.DISPLAY_HOME_AS_UP) != 0) {
            if (TextUtils.isEmpty(mHomeDescription)) {
                mToolbar.setNavigationContentDescription(mDefaultNavigationContentDescription);
            } else {
                mToolbar.setNavigationContentDescription(mHomeDescription);
            }
        }
!!!47692471.java!!!	saveHierarchyState(inout toolbarStates : SparseArray) : void
        mToolbar.saveHierarchyState(toolbarStates);
!!!47692599.java!!!	restoreHierarchyState(inout toolbarStates : SparseArray) : void
        mToolbar.restoreHierarchyState(toolbarStates);
!!!47692727.java!!!	setBackgroundDrawable(inout d : Drawable) : void
        //noinspection deprecation
        mToolbar.setBackgroundDrawable(d);
!!!47692855.java!!!	getHeight() : int
        return mToolbar.getHeight();
!!!47692983.java!!!	setVisibility(in visible : int) : void
        mToolbar.setVisibility(visible);
!!!47693111.java!!!	getVisibility() : int
        return mToolbar.getVisibility();
!!!47693239.java!!!	setMenuCallbacks(inout presenterCallback : MenuPresenter::Callback, inout menuBuilderCallback : MenuBuilder::Callback) : void
        mToolbar.setMenuCallbacks(presenterCallback, menuBuilderCallback);
!!!47693367.java!!!	getMenu() : Menu
        return mToolbar.getMenu();
