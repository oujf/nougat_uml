class NetworkPinner
!!!47711799.java!!!	maybeInitConnectivityManager(inout context : Context) : void
        // TODO: what happens if an app calls a WifiManager API before ConnectivityManager is
        // registered? Can we fix this by starting ConnectivityService before WifiService?
        if (sCM == null) {
            // Getting a ConnectivityManager does not leak the calling context, because it stores
            // the application context and not the calling context.
            sCM = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
            if (sCM == null) {
                throw new IllegalStateException("Bad luck, ConnectivityService not started.");
            }
        }
!!!47712183.java!!!	pin(inout context : Context, inout request : NetworkRequest) : void
        synchronized (sLock) {
            if (sCallback == null) {
                maybeInitConnectivityManager(context);
                sCallback = new Callback();
                try {
                    sCM.registerNetworkCallback(request, sCallback);
                } catch (SecurityException e) {
                    Log.d(TAG, "Failed to register network callback", e);
                    sCallback = null;
                }
            }
        }
!!!47712311.java!!!	unpin() : void
        synchronized (sLock) {
            if (sCallback != null) {
                try {
                    sCM.bindProcessToNetwork(null);
                    sCM.unregisterNetworkCallback(sCallback);
                } catch (SecurityException e) {
                    Log.d(TAG, "Failed to unregister network callback", e);
                }
                sCallback = null;
                sNetwork = null;
            }
        }
