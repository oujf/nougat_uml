class LaunchpadActivity
!!!47819575.java!!!	setCallingTest(inout ct : LaunchpadActivity::CallingTest) : void
        sCallingTest = ct;
!!!47819703.java!!!	LaunchpadActivity()
        mStartTime = System.currentTimeMillis();
!!!47819831.java!!!	onCreate(inout icicle : Bundle) : void
        super.onCreate(icicle);
        String action = getIntent().getAction();
        if (ActivityTests.DEBUG_LIFECYCLE) Log.v("test", "CREATE lauchpad "
                + Integer.toHexString(System.identityHashCode(this)) + ": " + getIntent());
        if (LIFECYCLE_BASIC.equals(action)) {
            setExpectedLifecycle(new String[]{ON_START, ON_RESUME,
                    DO_FINISH, ON_PAUSE, ON_STOP, ON_DESTROY});
        } else if (LIFECYCLE_SCREEN.equals(action)) {
            setExpectedLifecycle(new String[]{ON_START, ON_RESUME,
                    DO_LOCAL_SCREEN, ON_FREEZE, ON_PAUSE, ON_STOP,
                    ON_RESTART, ON_START, ON_RESUME,
                    DO_FINISH, ON_PAUSE, ON_STOP, ON_DESTROY});
        } else if (LIFECYCLE_DIALOG.equals(action)) {
            setExpectedLifecycle(new String[]{ON_START, ON_RESUME,
                    DO_LOCAL_DIALOG, ON_FREEZE, ON_PAUSE, ON_RESUME,
                    DO_FINISH, ON_PAUSE, ON_STOP, ON_DESTROY});
        } else if (LIFECYCLE_FINISH_CREATE.equals(action)) {
            // This one behaves a little differently when running in a group.
            if (getParent() == null) {
                setExpectedLifecycle(new String[]{ON_DESTROY});
            } else {
                setExpectedLifecycle(new String[]{ON_START, ON_STOP, ON_DESTROY});
            }
            finish();
        } else if (LIFECYCLE_FINISH_START.equals(action)) {
            setExpectedLifecycle(new String[]{ON_START, DO_FINISH,
                    ON_STOP, ON_DESTROY});
        }
!!!47819959.java!!!	onStart() : void
        super.onStart();
        if (ActivityTests.DEBUG_LIFECYCLE) Log.v("test", "START lauchpad "
                + Integer.toHexString(System.identityHashCode(this)) + ": " + getIntent());
        checkLifecycle(ON_START);
!!!47820087.java!!!	onRestart() : void
        super.onStart();
        checkLifecycle(ON_RESTART);
!!!47820215.java!!!	onResume() : void
        super.onResume();

        if (ActivityTests.DEBUG_LIFECYCLE) Log.v("test", "RESUME lauchpad "
                + Integer.toHexString(System.identityHashCode(this)) + ": " + getIntent());
        checkLifecycle(ON_RESUME);

        if (!mStarted) {
            mStarted = true;

            mHandler.postDelayed(mTimeout, 5 * 1000);

            String action = getIntent().getAction();

            sCallingTest.startTiming(true);

            if (LAUNCH.equals(action)) {
                Intent intent = getIntent();
                intent.setFlags(0);
                intent.setComponent((ComponentName)
                        intent.getParcelableExtra("component"));
                //System.out.println("*** Launchpad is starting: comp=" + intent.component);
                startActivityForResult(intent, LAUNCHED_RESULT);
            } else if (FORWARD_RESULT.equals(action)) {
                Intent intent = getIntent();
                intent.setFlags(0);
                intent.setClass(this, LocalScreen.class);
                startActivityForResult(intent, FORWARDED_RESULT);
            } else if (BAD_PARCELABLE.equals(action)) {
                mBadParcelable = true;
                Intent intent = getIntent();
                intent.setFlags(0);
                intent.setClass(this, LocalScreen.class);
                startActivityForResult(intent, LAUNCHED_RESULT);
            } else if (BROADCAST_REGISTERED.equals(action)) {
                setExpectedReceivers(new String[]{RECEIVER_REG});
                registerMyReceiver(new IntentFilter(BROADCAST_REGISTERED));
                sCallingTest.addIntermediate("after-register");
                sendBroadcast(makeBroadcastIntent(BROADCAST_REGISTERED));
            } else if (BROADCAST_LOCAL.equals(action)) {
                setExpectedReceivers(new String[]{RECEIVER_LOCAL});
                sendBroadcast(makeBroadcastIntent(BROADCAST_LOCAL));
            } else if (BROADCAST_REMOTE.equals(action)) {
                setExpectedReceivers(new String[]{RECEIVER_REMOTE});
                sendBroadcast(makeBroadcastIntent(BROADCAST_REMOTE));
            } else if (BROADCAST_ALL.equals(action)) {
                setExpectedReceivers(new String[]{
                        RECEIVER_REMOTE, RECEIVER_REG, RECEIVER_LOCAL});
                registerMyReceiver(new IntentFilter(BROADCAST_ALL));
                sCallingTest.addIntermediate("after-register");
                sendOrderedBroadcast(makeBroadcastIntent(BROADCAST_ALL), null);
            } else if (BROADCAST_MULTI.equals(action)) {
                setExpectedReceivers(new String[]{
                        RECEIVER_REMOTE, RECEIVER_REG, RECEIVER_LOCAL,
                        RECEIVER_REMOTE, RECEIVER_REG, RECEIVER_LOCAL,
                        RECEIVER_REMOTE, RECEIVER_REG, RECEIVER_LOCAL,
                        RECEIVER_LOCAL, RECEIVER_REMOTE,
                        RECEIVER_LOCAL, RECEIVER_REMOTE,
                        RECEIVER_REMOTE, RECEIVER_REG, RECEIVER_LOCAL,
                        RECEIVER_REMOTE, RECEIVER_REG, RECEIVER_LOCAL,
                        RECEIVER_REMOTE, RECEIVER_REG, RECEIVER_LOCAL,
                        RECEIVER_REMOTE, RECEIVER_LOCAL,
                        RECEIVER_REMOTE, RECEIVER_LOCAL});
                registerMyReceiver(new IntentFilter(BROADCAST_ALL));
                sCallingTest.addIntermediate("after-register");
                sendOrderedBroadcast(makeBroadcastIntent(BROADCAST_ALL), null);
                sendOrderedBroadcast(makeBroadcastIntent(BROADCAST_ALL), null);
                sendOrderedBroadcast(makeBroadcastIntent(BROADCAST_ALL), null);
                sendOrderedBroadcast(makeBroadcastIntent(BROADCAST_LOCAL), null);
                sendOrderedBroadcast(makeBroadcastIntent(BROADCAST_REMOTE), null);
                sendOrderedBroadcast(makeBroadcastIntent(BROADCAST_LOCAL), null);
                sendOrderedBroadcast(makeBroadcastIntent(BROADCAST_REMOTE), null);
                sendOrderedBroadcast(makeBroadcastIntent(BROADCAST_ALL), null);
                sendOrderedBroadcast(makeBroadcastIntent(BROADCAST_ALL), null);
                sendOrderedBroadcast(makeBroadcastIntent(BROADCAST_ALL), null);
                sendOrderedBroadcast(makeBroadcastIntent(BROADCAST_REPEAT), null);
            } else if (BROADCAST_ABORT.equals(action)) {
                setExpectedReceivers(new String[]{
                        RECEIVER_REMOTE, RECEIVER_ABORT});
                registerMyReceiver(new IntentFilter(BROADCAST_ABORT));
                sCallingTest.addIntermediate("after-register");
                sendOrderedBroadcast(makeBroadcastIntent(BROADCAST_ABORT), null);
            } else if (BROADCAST_STICKY1.equals(action)) {
                setExpectedReceivers(new String[]{RECEIVER_REG});
                setExpectedData(new String[]{DATA_1});
                registerMyReceiver(new IntentFilter(BROADCAST_STICKY1));
                sCallingTest.addIntermediate("after-register");
            } else if (BROADCAST_STICKY2.equals(action)) {
                setExpectedReceivers(new String[]{RECEIVER_REG, RECEIVER_REG});
                setExpectedData(new String[]{DATA_1, DATA_2});
                IntentFilter filter = new IntentFilter(BROADCAST_STICKY1);
                filter.addAction(BROADCAST_STICKY2);
                registerMyReceiver(filter);
                sCallingTest.addIntermediate("after-register");
            }
        }
!!!47820343.java!!!	onSaveInstanceState(inout icicle : Bundle) : void
        super.onSaveInstanceState(icicle);
        checkLifecycle(ON_FREEZE);
        if (mBadParcelable) {
            icicle.putParcelable("baddy", new MyBadParcelable());
        }
!!!47820471.java!!!	onPause() : void
        super.onPause();
        if (ActivityTests.DEBUG_LIFECYCLE) Log.v("test", "PAUSE lauchpad "
                + Integer.toHexString(System.identityHashCode(this)) + ": " + getIntent());
        checkLifecycle(ON_PAUSE);
!!!47820599.java!!!	onStop() : void
        super.onStop();
        if (ActivityTests.DEBUG_LIFECYCLE) Log.v("test", "STOP lauchpad "
                + Integer.toHexString(System.identityHashCode(this)) + ": " + getIntent());
        checkLifecycle(ON_STOP);
!!!47820727.java!!!	onActivityResult(in requestCode : int, in resultCode : int, inout data : Intent) : void
        switch (requestCode) {
            case LAUNCHED_RESULT:
                sCallingTest.finishTiming(true);
                finishWithResult(resultCode, data);
                break;
            case FORWARDED_RESULT:
                sCallingTest.finishTiming(true);
                if (RETURNED_RESULT.equals(data.getAction())) {
                    finishWithResult(resultCode, data);
                } else {
                    finishWithResult(RESULT_CANCELED, (new Intent()).setAction(
                            "Bad data returned: " + data));
                }
                break;
            default:
                sCallingTest.finishTiming(true);
                finishWithResult(RESULT_CANCELED, (new Intent()).setAction(
                        "Unexpected request code: " + requestCode));
                break;
        }
!!!47820855.java!!!	onDestroy() : void
        super.onDestroy();
        if (ActivityTests.DEBUG_LIFECYCLE) Log.v("test", "DESTROY lauchpad "
                + Integer.toHexString(System.identityHashCode(this)) + ": " + getIntent());
        checkLifecycle(ON_DESTROY);
        sCallingTest.activityFinished(mResultCode, mData, mResultStack);
!!!47820983.java!!!	setExpectedLifecycle(inout lifecycle : String [[]]) : void
        mExpectedLifecycle = lifecycle;
        mNextLifecycle = 0;
!!!47821111.java!!!	checkLifecycle(inout where : String) : void
        if (mExpectedLifecycle == null) return;

        if (mNextLifecycle >= mExpectedLifecycle.length) {
            finishBad("Activity lifecycle incorrect: received " + where
                    + " but don't expect any more calls");
            mExpectedLifecycle = null;
            return;
        }
        if (!mExpectedLifecycle[mNextLifecycle].equals(where)) {
            finishBad("Activity lifecycle incorrect: received " + where
                    + " but expected " + mExpectedLifecycle[mNextLifecycle]
                    + " at " + mNextLifecycle);
            mExpectedLifecycle = null;
            return;
        }

        mNextLifecycle++;

        if (mNextLifecycle >= mExpectedLifecycle.length) {
            setTestResult(RESULT_OK, null);
            return;
        }

        String next = mExpectedLifecycle[mNextLifecycle];
        if (where.equals(ON_DESTROY)) {
            finishBad("Activity lifecycle incorrect: received " + where
                    + " but expected more actions (next is " + next + ")");
            mExpectedLifecycle = null;
            return;
        } else if (next.equals(DO_FINISH)) {
            mNextLifecycle++;
            if (mNextLifecycle >= mExpectedLifecycle.length) {
                setTestResult(RESULT_OK, null);
            }
            if (!isFinishing()) {
                finish();
            }
        } else if (next.equals(DO_LOCAL_SCREEN)) {
            mNextLifecycle++;
            Intent intent = new Intent(TestedScreen.WAIT_BEFORE_FINISH);
            intent.setClass(this, LocalScreen.class);
            startActivity(intent);
        } else if (next.equals(DO_LOCAL_DIALOG)) {
            mNextLifecycle++;
            Intent intent = new Intent(TestedScreen.WAIT_BEFORE_FINISH);
            intent.setClass(this, LocalDialog.class);
            startActivity(intent);
        }
!!!47821239.java!!!	setExpectedReceivers(inout receivers : String [[]]) : void
        mExpectedReceivers = receivers;
        mNextReceiver = 0;
!!!47821367.java!!!	setExpectedData(inout data : String [[]]) : void
        mExpectedData = data;
        mReceivedData = new boolean[data.length];
!!!47821495.java!!!	makeBroadcastIntent(inout action : String) : Intent
        Intent intent = new Intent(action, null);
        intent.putExtra("caller", mCallTarget);
        return intent;
!!!47821623.java!!!	finishGood() : void
        finishWithResult(RESULT_OK, null);
!!!47821751.java!!!	finishBad(inout error : String) : void
        finishWithResult(RESULT_CANCELED, (new Intent()).setAction(error));
!!!47821879.java!!!	finishWithResult(in resultCode : int, inout data : Intent) : void
        setTestResult(resultCode, data);
        finish();
!!!47822007.java!!!	setTestResult(in resultCode : int, inout data : Intent) : void
        mHandler.removeCallbacks(mTimeout);
        unregisterMyReceiver();
        mResultCode = resultCode;
        mData = data;
        mResultStack = new RuntimeException("Original error was here");
        mResultStack.fillInStackTrace();
!!!47822135.java!!!	registerMyReceiver(inout filter : IntentFilter) : void
        mReceiverRegistered = true;
        //System.out.println("Registering: " + mReceiver);
        registerReceiver(mReceiver, filter);
!!!47822263.java!!!	unregisterMyReceiver() : void
        if (mReceiverRegistered) {
            mReceiverRegistered = false;
            //System.out.println("Unregistering: " + mReceiver);
            unregisterReceiver(mReceiver);
        }
!!!47822391.java!!!	gotReceive(inout name : String, inout intent : Intent) : void
        synchronized (this) {

            //System.out.println("Got receive: " + name);
            //System.out.println(mNextReceiver + " in " + mExpectedReceivers);
            //new RuntimeException("stack").printStackTrace();

            sCallingTest.addIntermediate(mNextReceiver + "-" + name);

            if (mExpectedData != null) {
                int n = mExpectedData.length;
                int i;
                boolean prev = false;
                for (i = 0; i < n; i++) {
                    if (mExpectedData[i].equals(intent.getStringExtra("test"))) {
                        if (mReceivedData[i]) {
                            prev = true;
                            continue;
                        }
                        mReceivedData[i] = true;
                        break;
                    }
                }
                if (i >= n) {
                    if (prev) {
                        finishBad("Receive got data too many times: "
                                + intent.getStringExtra("test"));
                    } else {
                        finishBad("Receive got unexpected data: "
                                + intent.getStringExtra("test"));
                    }
                    return;
                }
            }

            if (mNextReceiver >= mExpectedReceivers.length) {
                finishBad("Got too many onReceiveIntent() calls!");
//                System.out.println("Too many intents received: now at "
//                                   + mNextReceiver + ", expect list: "
//                                   + Arrays.toString(mExpectedReceivers));
            } else if (!mExpectedReceivers[mNextReceiver].equals(name)) {
                finishBad("Receive out of order: got " + name + " but expected "
                        + mExpectedReceivers[mNextReceiver] + " at "
                        + mNextReceiver);
            } else {
                mNextReceiver++;
                if (mNextReceiver == mExpectedReceivers.length) {
                    mHandler.post(mUnregister);
                }
            }

        }
