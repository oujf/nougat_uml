format 213
"signer" // android::frameworks::base::cmds::am::src::com::android::mediadrm::signer
  revision 1
  modified_by 55 "Jeff"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "D:\\Workspace\\AndroidSourceCode\\nougat_src\\frameworks\\base\\media/lib/signer/java/com/android/mediadrm/signer/"
  java_package "com.android.mediadrm.signer"
  classview 496695 "signer"
    
    classdiagramsettings member_max_width 0 end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 7630519 "MediaDrmSigner"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Provides certificate request generation, response handling and
signing APIs
"
      operation 83723959 "MediaDrmSigner"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 26679863 "CERTIFICATE_TYPE_X509"
	class_attribute const_attribute public explicit_type "int"
	init_value " MediaDrm.CERTIFICATE_TYPE_X509"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Specify X.509 certificate type

"
      end

      class 7630647 "CertificateRequest"
	visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 17178807 // mCertRequest (<unidirectional association>)
	  relation 17178807 --->
	    a role_name "mCertRequest" const_relation private
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 17178807 // mCertRequest (<unidirectional association>)
	    b parent class_ref 6089783 // CertificateRequest
	end

	operation 83724087 "CertificateRequest"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "certRequest" type class_ref 6089783 // CertificateRequest
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 83724215 "getData"
	  public explicit_return_type "byte"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the opaque message data
"
	end

	operation 83724343 "getDefaultUrl"
	  public return_type class_ref 2590391 // String
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the default URL to use when sending the certificate request
message to a server, if known. The app may prefer to use a different
certificate server URL obtained from other sources.
"
	end
      end

      class 7630775 "Certificate"
	visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 17178935 // mCertificate (<unidirectional association>)
	  relation 17178935 --->
	    a role_name "mCertificate" const_relation private
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 17178935 // mCertificate (<unidirectional association>)
	    b parent class_ref 6089271 // Certificate
	end

	operation 83724471 "Certificate"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "certificate" type class_ref 6089271 // Certificate
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 83724599 "getWrappedPrivateKey"
	  public explicit_return_type "byte"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the wrapped private key data
"
	end

	operation 83724727 "getContent"
	  public explicit_return_type "byte"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the PEM-encoded public certificate chain
"
	end
      end

      operation 83724855 "getCertificateRequest"
	class_operation public return_type class_ref 7630647 // CertificateRequest
	nparams 3
	  param inout name "drm" type class_ref 6087095 // MediaDrm
	  param in name "certType" explicit_type "int"
	  param inout name "certAuthority" type class_ref 2590391 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generate a certificate request, specifying the certificate type
and authority. The response received should be passed to
provideCertificateResponse.

@param drm the MediaDrm object
@param certType Specifies the certificate type.
@param certAuthority is passed to the certificate server to specify
the chain of authority.
"
      end

      operation 83724983 "provideCertificateResponse"
	class_operation public return_type class_ref 7630775 // Certificate
	nparams 2
	  param inout name "drm" type class_ref 6087095 // MediaDrm
	  param inout name "response" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 6079287 // DeniedByServerException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Process a response from the provisioning server.  The response
is obtained from an HTTP Post to the url provided by getCertificateRequest.

The public X509 certificate chain and wrapped private key are returned
in the returned Certificate objec.  The certificate chain is in BIO serialized
PEM format.  The wrapped private key should be stored in application private
storage, and used when invoking the signRSA method.

@param drm the MediaDrm object
@param response the opaque certificate response byte array to provide to the
DRM engine plugin.
@throws android.media.DeniedByServerException if the response indicates that the
server rejected the request
"
      end

      operation 83725111 "signRSA"
	class_operation public explicit_return_type "byte"
	nparams 5
	  param inout name "drm" type class_ref 6087095 // MediaDrm
	  param inout name "sessionId" explicit_type "byte"
	multiplicity "[]"
	  param inout name "algorithm" type class_ref 2590391 // String
	  param inout name "wrappedKey" explicit_type "byte"
	multiplicity "[]"
	  param inout name "message" explicit_type "byte"
	multiplicity "[]"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4}[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sign data using an RSA key

@param drm the MediaDrm object
@param sessionId a sessionId obtained from openSession on the MediaDrm object
@param algorithm the signing algorithm to use, e.g. \"PKCS1-BlockType1\"
@param wrappedKey - the wrapped (encrypted) RSA private key obtained
from provideCertificateResponse
@param message the data for which a signature is to be computed
"
      end
    end
  end

  deploymentview 434231 "signer"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 3074999 "MediaDrmSigner"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.media.MediaDrm;
import android.media.DeniedByServerException;
${definition}"
      associated_classes
	class_ref 7630519 // MediaDrmSigner
      end
      comment "Copyright (C) 2013 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"
    end
  end
end
