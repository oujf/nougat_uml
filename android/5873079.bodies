class LocalProvider
!!!47838135.java!!!	onCreate() : boolean
        mOpenHelper = new DatabaseHelper(getContext());
        return true;
!!!47838263.java!!!	query(inout url : Uri, inout projectionIn : String [[]], inout selection : String, inout selectionArgs : String [[]], inout sort : String) : Cursor
        SQLiteQueryBuilder qb = new SQLiteQueryBuilder();

        // Generate the body of the query
        int match = sURLMatcher.match(url);
        switch (match) {
            case DATA:
                qb.setTables("data");
                break;
            case DATA_ID:
                qb.setTables("data");
                qb.appendWhere("_id=");
                qb.appendWhere(url.getPathSegments().get(1));
                break;
            default:
                throw new IllegalArgumentException("Unknown URL " + url);
        }

        SQLiteDatabase db = mOpenHelper.getReadableDatabase();
        Cursor ret = qb.query(db, projectionIn, selection, selectionArgs,
                              null, null, sort);

        if (ret == null) {
            if (false) Log.d(TAG, "Alarms.query: failed");
        } else {
            ret.setNotificationUri(getContext().getContentResolver(), url);
        }

        return ret;
!!!47838391.java!!!	getType(inout url : Uri) : String
        int match = sURLMatcher.match(url);
        switch (match) {
            case DATA:
                return "vnd.android.cursor.dir/vnd.google.unit_tests.local";
            case DATA_ID:
                return "vnd.android.cursor.item/vnd.google.unit_tests.local";
            default:
                throw new IllegalArgumentException("Unknown URL");
        }
!!!47838519.java!!!	update(inout url : Uri, inout values : ContentValues, inout where : String, inout whereArgs : String [[]]) : int
        int count;
        long rowId = 0;
        int match = sURLMatcher.match(url);
        SQLiteDatabase db = mOpenHelper.getWritableDatabase();
        switch (match) {
            case DATA_ID: {
                String segment = url.getPathSegments().get(1);
                rowId = Long.parseLong(segment);
                count = db.update("data", values, "_id=" + rowId, null);
                break;
            }
            default: {
                throw new UnsupportedOperationException(
                        "Cannot update URL: " + url);
            }
        }
        if (false) Log.d(TAG, "*** notifyChange() rowId: " + rowId);
        getContext().getContentResolver().notifyChange(url, null);
        return count;
!!!47838647.java!!!	insert(inout url : Uri, inout initialValues : ContentValues) : Uri
        return null;
!!!47838775.java!!!	delete(inout url : Uri, inout where : String, inout whereArgs : String [[]]) : int
        throw new UnsupportedOperationException("delete not supported");
