class ContentQueryMapTest
!!!47855927.java!!!	testContentQueryMap() : void
        LooperThread thread = new LooperThread() {
            void go() {
                ContentResolver r = getContext().getContentResolver();
                Settings.System.putString(r, "test", "Value");
                Cursor cursor = r.query(
                        Settings.System.CONTENT_URI,
                        new String[] {
                            Settings.System.NAME,
                            Settings.System.VALUE,
                        }, null, null, null);

                final ContentQueryMap cqm = new ContentQueryMap(
                        cursor, Settings.System.NAME, true, null);
                // Get the current state of the CQM. This forces a requery and means that the
                // call to getValues() below won't do a requery().
                cqm.getRows();
                
                // The cache won't notice changes until the loop runs.
                Settings.System.putString(r, "test", "New Value");
                ContentValues v = cqm.getValues("test");
                String value = v.getAsString(Settings.System.VALUE);
                assertEquals("Value", value);

                // Use an Observer to find out when the cache does update.
                cqm.addObserver(new Observer() {
                    public void update(Observable o, Object arg) {
                        // Should have the new values by now.
                        ContentValues v = cqm.getValues("test");
                        String value = v.getAsString(Settings.System.VALUE);
                        assertEquals("New Value", value);
                        Looper.myLooper().quit();
                        cqm.close();
                        mSuccess = true;
                    }
                });

                // Give up after a few seconds, if it doesn't.
                new Handler().postDelayed(new Runnable() {
                    public void run() {
                        fail("Timed out");
                    }
                }, 5000);
            }
        };

        thread.start();
        thread.join();
        if (thread.mError != null) throw thread.mError;
        assertTrue(thread.mSuccess);
