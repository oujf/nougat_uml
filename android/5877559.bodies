class AppsQueryHelperTests
!!!47863991.java!!!	setUp() : void
        super.setUp();
        mAppsQueryHelper = new AppsQueryHelperTestable();
!!!47864119.java!!!	testQueryAppsSystemAppsOnly() : void
        List<String> apps = mAppsQueryHelper.queryApps(0, true, UserHandle.SYSTEM);
        assertEqualsIgnoreOrder(Arrays.asList("sys_app1", "sys_app2", "sys_app3"), apps);

        apps = mAppsQueryHelper.queryApps(0, false, UserHandle.SYSTEM);
        assertEqualsIgnoreOrder(Arrays.asList("sys_app1", "sys_app2", "sys_app3", "app4"), apps);
!!!47864247.java!!!	testQueryAppsNonLaunchable() : void
        List<String> apps = mAppsQueryHelper.queryApps(AppsQueryHelper.GET_NON_LAUNCHABLE_APPS,
                true, UserHandle.SYSTEM);
        assertEqualsIgnoreOrder(Arrays.asList("sys_app1", "sys_app3"), apps);

        apps = mAppsQueryHelper.queryApps(AppsQueryHelper.GET_NON_LAUNCHABLE_APPS,
                false, UserHandle.SYSTEM);
        assertEqualsIgnoreOrder(Arrays.asList("sys_app1", "sys_app3"), apps);
!!!47864375.java!!!	testQueryAppsInteractAcrossUser() : void
        List<String> apps = mAppsQueryHelper.queryApps(
                AppsQueryHelper.GET_APPS_WITH_INTERACT_ACROSS_USERS_PERM, true, UserHandle.SYSTEM);
        assertEqualsIgnoreOrder(Arrays.asList("sys_app1"), apps);

        apps = mAppsQueryHelper.queryApps(
                AppsQueryHelper.GET_APPS_WITH_INTERACT_ACROSS_USERS_PERM, false, UserHandle.SYSTEM);
        assertEqualsIgnoreOrder(Arrays.asList("sys_app1"), apps);
!!!47864503.java!!!	testQueryApps() : void
        List<String> apps = mAppsQueryHelper.queryApps(
                AppsQueryHelper.GET_NON_LAUNCHABLE_APPS
                        |AppsQueryHelper.GET_APPS_WITH_INTERACT_ACROSS_USERS_PERM,
                true, UserHandle.SYSTEM);
        assertEqualsIgnoreOrder(Arrays.asList("sys_app1", "sys_app3"), apps);

        apps = mAppsQueryHelper.queryApps(
                AppsQueryHelper.GET_NON_LAUNCHABLE_APPS
                        |AppsQueryHelper.GET_APPS_WITH_INTERACT_ACROSS_USERS_PERM,
                false, UserHandle.SYSTEM);
        assertEqualsIgnoreOrder(Arrays.asList("sys_app1", "sys_app3"), apps);
!!!47864631.java!!!	testQueryAppsImes() : void
        // Test query system IMEs
        List<String> apps = mAppsQueryHelper.queryApps(AppsQueryHelper.GET_IMES,
                true, UserHandle.of(UserHandle.myUserId()));
        assertEqualsIgnoreOrder(Arrays.asList("sys_app1"), apps);

        // Test query IMEs
        apps = mAppsQueryHelper.queryApps(AppsQueryHelper.GET_IMES, false,
                UserHandle.of(UserHandle.myUserId()));
        assertEqualsIgnoreOrder(Arrays.asList("sys_app1", "app4"), apps);
!!!47864759.java!!!	testQueryAppsRequiredForSystemUser() : void
        // Test query only system apps required for system user
        List<String> apps = mAppsQueryHelper.queryApps(AppsQueryHelper.GET_REQUIRED_FOR_SYSTEM_USER,
                true, UserHandle.SYSTEM);
        assertEqualsIgnoreOrder(Arrays.asList("sys_app3"), apps);

        // Test query all apps required for system user
        apps = mAppsQueryHelper.queryApps(AppsQueryHelper.GET_REQUIRED_FOR_SYSTEM_USER, false,
                UserHandle.SYSTEM);
        assertEqualsIgnoreOrder(Arrays.asList("sys_app3", "app4"), apps);
!!!47865399.java!!!	assertEqualsIgnoreOrder(inout expected : List<String>, inout actual : List<String>) : void
        assertTrue("Lists not equal. Expected " + expected + " but was " + actual,
                (expected.size() == actual.size())
                        && (new HashSet<>(expected).equals(new HashSet<>(actual))));
