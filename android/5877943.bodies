class LimitedLengthInputStreamTest
!!!47870007.java!!!	setUp() : void
        super.setUp();

        mTestStream1 = new ByteArrayInputStream(TEST_STRING1);
!!!47870135.java!!!	testConstructor_NegativeOffset_Failure() : void
        try {
            InputStream is = new LimitedLengthInputStream(mTestStream1, -1, TEST_STRING1.length);
            fail("Should throw IOException on negative index");
        } catch (IOException e) {
            // success
        }
!!!47870263.java!!!	testConstructor_NegativeLength_Failure() : void
        try {
            InputStream is = new LimitedLengthInputStream(mTestStream1, 0, -1);
            fail("Should throw IOException on negative length");
        } catch (IOException e) {
            // success
        }
!!!47870391.java!!!	testConstructor_NullInputStream_Failure() : void
        try {
            InputStream is = new LimitedLengthInputStream(null, 0, 1);
            fail("Should throw IOException on null input stream");
        } catch (IOException e) {
            // success
        }
!!!47870519.java!!!	testConstructor_OffsetLengthOverflow_Fail() : void
        try {
        InputStream is = new LimitedLengthInputStream(mTestStream1, Long.MAX_VALUE - 1,
                Long.MAX_VALUE - 1);
            fail("Should fail when offset + length is > Long.MAX_VALUE");
        } catch (IOException e) {
            // success
        }
!!!47870647.java!!!	checkReadBytesWithOffsetAndLength_WithString1(in offset : int, in length : int) : void
        byte[] temp = new byte[TEST_STRING1.length];
        byte[] expected = new byte[length];
        byte[] actual = new byte[length];

        System.arraycopy(TEST_STRING1, offset, expected, 0, length);

        InputStream is = new LimitedLengthInputStream(mTestStream1, offset, length);
        assertEquals(length, is.read(temp, 0, temp.length));

        System.arraycopy(temp, 0, actual, 0, length);
        assertTrue(Arrays.equals(expected, actual));

        assertEquals(-1, is.read(temp, 0, temp.length));
!!!47870775.java!!!	testReadBytesWithOffsetAndLength_ZeroOffset_PartialLength_Success() : void
        checkReadBytesWithOffsetAndLength_WithString1(0, 2);
!!!47870903.java!!!	testReadBytesWithOffsetAndLength_NonZeroOffset_PartialLength_Success() : void
        checkReadBytesWithOffsetAndLength_WithString1(3, 2);
!!!47871031.java!!!	testReadBytesWithOffsetAndLength_ZeroOffset_FullLength_Success() : void
        checkReadBytesWithOffsetAndLength_WithString1(0, TEST_STRING1.length);
!!!47871159.java!!!	testReadBytesWithOffsetAndLength_NonZeroOffset_FullLength_Success() : void
        checkReadBytesWithOffsetAndLength_WithString1(3, TEST_STRING1.length - 3);
!!!47871287.java!!!	testReadBytesWithOffsetAndLength_ZeroOffset_PastEnd_Success() : void
        byte[] temp = new byte[TEST_STRING1.length + 10];
        InputStream is = new LimitedLengthInputStream(mTestStream1, 0, TEST_STRING1.length + 10);
        assertEquals(TEST_STRING1.length, is.read(temp, 0, TEST_STRING1.length + 10));

        byte[] actual = new byte[TEST_STRING1.length];
        System.arraycopy(temp, 0, actual, 0, actual.length);
        assertTrue(Arrays.equals(TEST_STRING1, actual));
!!!47871415.java!!!	checkReadBytes_WithString1(in offset : int, in length : int) : void
        byte[] temp = new byte[TEST_STRING1.length];
        byte[] expected = new byte[length];
        byte[] actual = new byte[length];

        System.arraycopy(TEST_STRING1, offset, expected, 0, length);

        InputStream is = new LimitedLengthInputStream(mTestStream1, offset, length);
        assertEquals(length, is.read(temp));

        System.arraycopy(temp, 0, actual, 0, length);
        assertTrue(Arrays.equals(expected, actual));

        assertEquals(-1, is.read(temp));
!!!47871543.java!!!	testReadBytes_ZeroOffset_PartialLength_Success() : void
        checkReadBytesWithOffsetAndLength_WithString1(0, 2);
!!!47871671.java!!!	testReadBytes_NonZeroOffset_PartialLength_Success() : void
        checkReadBytesWithOffsetAndLength_WithString1(3, 2);
!!!47871799.java!!!	testReadBytes_ZeroOffset_FullLength_Success() : void
        checkReadBytesWithOffsetAndLength_WithString1(0, TEST_STRING1.length);
!!!47871927.java!!!	testReadBytes_NonZeroOffset_FullLength_Success() : void
        checkReadBytesWithOffsetAndLength_WithString1(3, TEST_STRING1.length - 3);
!!!47872055.java!!!	checkSingleByteRead_WithString1(in offset : int, in length : int) : void
        InputStream is = new LimitedLengthInputStream(mTestStream1, offset, length);

        for (int i = 0; i < length; i++) {
            assertEquals(TEST_STRING1[offset + i], is.read());
        }

        assertEquals(-1, is.read());
!!!47872183.java!!!	testSingleByteRead_ZeroOffset_PartialLength_Success() : void
        checkSingleByteRead_WithString1(0, 2);
!!!47872311.java!!!	testSingleByteRead_NonZeroOffset_PartialLength_Success() : void
        checkSingleByteRead_WithString1(3, 2);
!!!47872439.java!!!	testSingleByteRead_ZeroOffset_FullLength_Success() : void
        checkSingleByteRead_WithString1(0, TEST_STRING1.length);
!!!47872567.java!!!	testSingleByteRead_NonZeroOffset_FullLength_Success() : void
        checkSingleByteRead_WithString1(3, TEST_STRING1.length - 3);
