class SurfaceImage
!!!47957431.java!!!	SurfaceImage(in format : int)
            mFormat = format;
!!!47957559.java!!!	close() : void
            ImageReader.this.releaseImage(this);
!!!47957687.java!!!	getReader() : ImageReader
            return ImageReader.this;
!!!47957815.java!!!	getFormat() : int
            throwISEIfImageIsInvalid();
            int readerFormat = ImageReader.this.getImageFormat();
            // Assume opaque reader always produce opaque images.
            mFormat = (readerFormat == ImageFormat.PRIVATE) ? readerFormat :
                nativeGetFormat(readerFormat);
            return mFormat;
!!!47957943.java!!!	getWidth() : int
            throwISEIfImageIsInvalid();
            int width;
            switch(getFormat()) {
                case ImageFormat.JPEG:
                case ImageFormat.DEPTH_POINT_CLOUD:
                case ImageFormat.RAW_PRIVATE:
                    width = ImageReader.this.getWidth();
                    break;
                default:
                    width = nativeGetWidth();
            }
            return width;
!!!47958071.java!!!	getHeight() : int
            throwISEIfImageIsInvalid();
            int height;
            switch(getFormat()) {
                case ImageFormat.JPEG:
                case ImageFormat.DEPTH_POINT_CLOUD:
                case ImageFormat.RAW_PRIVATE:
                    height = ImageReader.this.getHeight();
                    break;
                default:
                    height = nativeGetHeight();
            }
            return height;
!!!47958199.java!!!	getTimestamp() : long
            throwISEIfImageIsInvalid();
            return mTimestamp;
!!!47958327.java!!!	setTimestamp(in timestampNs : long) : void
            throwISEIfImageIsInvalid();
            mTimestamp = timestampNs;
!!!47958455.java!!!	getPlanes() : Image::Plane
            throwISEIfImageIsInvalid();

            if (mPlanes == null) {
                mPlanes = nativeCreatePlanes(ImageReader.this.mNumPlanes, ImageReader.this.mFormat);
            }
            // Shallow copy is fine.
            return mPlanes.clone();
!!!47958583.java!!!	finalize() : void
            try {
                close();
            } finally {
                super.finalize();
            }
!!!47958711.java!!!	isAttachable() : boolean
            throwISEIfImageIsInvalid();
            return mIsDetached.get();
!!!47958839.java!!!	getOwner() : ImageReader
            throwISEIfImageIsInvalid();
            return ImageReader.this;
!!!47958967.java!!!	getNativeContext() : long
            throwISEIfImageIsInvalid();
            return mNativeBuffer;
!!!47959095.java!!!	setDetached(inout detached : boolean) : void
            throwISEIfImageIsInvalid();
            mIsDetached.getAndSet(detached);
!!!47959223.java!!!	clearSurfacePlanes() : void
            // Image#getPlanes may not be called before the image is closed.
            if (mIsImageValid && mPlanes != null) {
                for (int i = 0; i < mPlanes.length; i++) {
                    if (mPlanes[i] != null) {
                        mPlanes[i].clearBuffer();
                        mPlanes[i] = null;
                    }
                }
            }
