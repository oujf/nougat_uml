class AbstractProxyTest
!!!47991351.java!!!	tearDown() : void
        System.clearProperty("proxyHost");
        System.clearProperty("proxyPort");
        System.clearProperty("http.proxyHost");
        System.clearProperty("http.proxyPort");
        System.clearProperty("https.proxyHost");
        System.clearProperty("https.proxyPort");

        server.shutdown();
        super.tearDown();
!!!47991479.java!!!	testConnectToHttps() : void
        TestSSLContext testSSLContext = TestSSLContext.create();

        server.useHttps(testSSLContext.serverContext.getSocketFactory(), false);
        server.enqueue(new MockResponse()
                .setResponseCode(200)
                .setBody("this response comes via HTTPS"));
        server.play();

        HttpClient httpClient = newHttpClient();

        SSLSocketFactory sslSocketFactory = newSslSocketFactory(testSSLContext);
        sslSocketFactory.setHostnameVerifier(new AllowAllHostnameVerifier());
        httpClient.getConnectionManager().getSchemeRegistry()
                .register(new Scheme("https", sslSocketFactory, server.getPort()));

        HttpResponse response = httpClient.execute(
                new HttpGet("https://localhost:" + server.getPort() + "/foo"));
        assertEquals("this response comes via HTTPS", contentToString(response));

        RecordedRequest request = server.takeRequest();
        assertEquals("GET /foo HTTP/1.1", request.getRequestLine());
!!!47991607.java!!!	newSslSocketFactory(inout testSSLContext : TestSSLContext) : SSLSocketFactory
        // call through to Apache HTTP's non-public SSLSocketFactory constructor
        return SSLSocketFactory.class.getConstructor(javax.net.ssl.SSLSocketFactory.class)
                .newInstance(testSSLContext.clientContext.getSocketFactory());
!!!47991735.java!!!	testConnectViaProxyUsingProxySystemProperty() : void
        testConnectViaProxy(ProxyConfig.PROXY_SYSTEM_PROPERTY);
!!!47991863.java!!!	testConnectViaProxyUsingHttpProxySystemProperty() : void
        testConnectViaProxy(ProxyConfig.HTTP_PROXY_SYSTEM_PROPERTY);
!!!47991991.java!!!	testConnectViaProxyUsingRequestParameter() : void
        testConnectViaProxy(ProxyConfig.REQUEST_PARAMETER);
!!!47992119.java!!!	testConnectViaProxyUsingClientParameter() : void
        testConnectViaProxy(ProxyConfig.CLIENT_PARAMETER);
!!!47992247.java!!!	testConnectViaProxy(inout proxyConfig : AbstractProxyTest::ProxyConfig) : void
        MockResponse mockResponse = new MockResponse()
                .setResponseCode(200)
                .setBody("this response comes via a proxy");
        server.enqueue(mockResponse);
        server.play();

        HttpClient httpProxyClient = newHttpClient();

        HttpGet request = new HttpGet("http://android.com/foo");
        proxyConfig.configure(server, httpProxyClient, request);

        HttpResponse response = httpProxyClient.execute(request);
        assertEquals("this response comes via a proxy", contentToString(response));

        RecordedRequest get = server.takeRequest();
        assertEquals("GET http://android.com/foo HTTP/1.1", get.getRequestLine());
        assertContains(get.getHeaders(), "Host: android.com");
!!!47992375.java!!!	testConnectViaHttpProxyToHttpsUsingProxySystemProperty() : void
        testConnectViaHttpProxyToHttps(ProxyConfig.PROXY_SYSTEM_PROPERTY);
!!!47992503.java!!!	testConnectViaHttpProxyToHttpsUsingHttpsProxySystemProperty() : void
        testConnectViaHttpProxyToHttps(ProxyConfig.HTTPS_PROXY_SYSTEM_PROPERTY);
!!!47992631.java!!!	testConnectViaHttpProxyToHttpsUsingClientParameter() : void
        testConnectViaHttpProxyToHttps(ProxyConfig.CLIENT_PARAMETER);
!!!47992759.java!!!	testConnectViaHttpProxyToHttpsUsingRequestParameter() : void
        testConnectViaHttpProxyToHttps(ProxyConfig.REQUEST_PARAMETER);
!!!47992887.java!!!	testConnectViaHttpProxyToHttps(inout proxyConfig : AbstractProxyTest::ProxyConfig) : void
        TestSSLContext testSSLContext = TestSSLContext.create();

        server.useHttps(testSSLContext.serverContext.getSocketFactory(), true);
        server.enqueue(new MockResponse()
                .setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END)
                .clearHeaders());
        server.enqueue(new MockResponse()
                .setResponseCode(200)
                .setBody("this response comes via a secure proxy"));
        server.play();

        HttpClient httpProxyClient = newHttpClient();
        SSLSocketFactory sslSocketFactory = newSslSocketFactory(testSSLContext);
        sslSocketFactory.setHostnameVerifier(new AllowAllHostnameVerifier());
        httpProxyClient.getConnectionManager().getSchemeRegistry()
                .register(new Scheme("https", sslSocketFactory, 443));

        HttpGet request = new HttpGet("https://android.com/foo");
        proxyConfig.configure(server, httpProxyClient, request);

        HttpResponse response = httpProxyClient.execute(request);
        assertEquals("this response comes via a secure proxy", contentToString(response));

        RecordedRequest connect = server.takeRequest();
        assertEquals("Connect line failure on proxy " + proxyConfig,
                "CONNECT android.com:443 HTTP/1.1", connect.getRequestLine());
        assertContains(connect.getHeaders(), "Host: android.com");

        RecordedRequest get = server.takeRequest();
        assertEquals("GET /foo HTTP/1.1", get.getRequestLine());
        assertContains(get.getHeaders(), "Host: android.com");
!!!47993015.java!!!	testClientParamPreferredOverSystemProperty() : void
        testParamPreferredOverSystemProperty(ProxyConfig.CLIENT_PARAMETER);
!!!47993143.java!!!	testRequestParamPreferredOverSystemProperty() : void
        testParamPreferredOverSystemProperty(ProxyConfig.REQUEST_PARAMETER);
!!!47993271.java!!!	testParamPreferredOverSystemProperty(inout proxyConfig : AbstractProxyTest::ProxyConfig) : void
        server.enqueue(new MockResponse().setBody("Via request parameter proxy!"));
        server.play();
        System.setProperty("http.proxyHost", "proxy.foo");
        System.setProperty("http.proxyPort", "8080");

        HttpClient client = newHttpClient();
        HttpGet request = new HttpGet("http://origin.foo/bar");
        proxyConfig.configure(server, client, request);
        HttpResponse response = client.execute(request);
        assertEquals("Via request parameter proxy!", contentToString(response));

        RecordedRequest recordedRequest = server.takeRequest();
        assertEquals("GET http://origin.foo/bar HTTP/1.1", recordedRequest.getRequestLine());
!!!47993399.java!!!	testExplicitNoProxyCancelsSystemProperty() : void
        server.enqueue(new MockResponse().setBody("Via the origin server!"));
        server.play();
        System.setProperty("http.proxyHost", "proxy.foo");
        System.setProperty("http.proxyPort", "8080");

        HttpClient client = newHttpClient();
        HttpGet request = new HttpGet(server.getUrl("/bar").toURI());
        request.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY, ConnRouteParams.NO_HOST);
        HttpResponse response = client.execute(request);
        assertEquals("Via the origin server!", contentToString(response));

        RecordedRequest recordedRequest = server.takeRequest();
        assertEquals("GET /bar HTTP/1.1", recordedRequest.getRequestLine());
!!!47993527.java!!!	testRetryWithProxy() : void
        server.enqueue(new MockResponse()
                .setSocketPolicy(SocketPolicy.DISCONNECT_AT_START));
        server.play();

        HttpClient httpProxyClient = newHttpClient();
        HttpGet request = new HttpGet("http://android.com/foo");
        ProxyConfig.REQUEST_PARAMETER.configure(server, httpProxyClient, request);

        try {
            httpProxyClient.execute(request);
            fail();
        } catch (IOException expected) {
        }
!!!47993783.java!!!	assertContains(inout headers : List<String>, inout header : String) : void
        assertTrue(headers.toString(), headers.contains(header));
!!!47993911.java!!!	contentToString(inout response : HttpResponse) : String
        StringWriter writer = new StringWriter();
        char[] buffer = new char[1024];
        Reader reader = new InputStreamReader(response.getEntity().getContent());
        int length;
        while ((length = reader.read(buffer)) != -1) {
            writer.write(buffer, 0, length);
        }
        reader.close();
        return writer.toString();
