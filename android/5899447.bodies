class BroadcasterTest
!!!48003127.java!!!	test1() : void
        /*
        * One handler requestes one message, with a translation
        */
        HandlerTester tester = new HandlerTester() {
            Handler h;

            public void go() {
                Broadcaster b = new Broadcaster();
                h = new H();

                b.request(MESSAGE_A, h, MESSAGE_B);

                Message msg = new Message();
                msg.what = MESSAGE_A;

                b.broadcast(msg);
            }

            public void handleMessage(Message msg) {
                if (msg.what == MESSAGE_B) {
                    success();
                } else {
                    failure();
                }
            }
        };
        tester.doTest(1000);
!!!48004791.java!!!	test2() : void
        /*
        * 2 handlers request the same message, with different translations
        */
        HandlerTester tester = new Tests2and3(2);
        tester.doTest(1000);
!!!48004919.java!!!	test3() : void
        /*
        * 1000 handlers request the same message, with different translations
        */
        HandlerTester tester = new Tests2and3(10);
        tester.doTest(1000);
!!!48005047.java!!!	test4() : void
        /*
        * Two handlers request different messages, with translations, sending
        * only one.  The other one should never get sent.
        */
        HandlerTester tester = new HandlerTester() {
            Handler h1;
            Handler h2;

            public void go() {
                Broadcaster b = new Broadcaster();
                h1 = new H();
                h2 = new H();

                b.request(MESSAGE_A, h1, MESSAGE_C);
                b.request(MESSAGE_B, h2, MESSAGE_D);

                Message msg = new Message();
                msg.what = MESSAGE_A;

                b.broadcast(msg);
            }

            public void handleMessage(Message msg) {
                if (msg.what == MESSAGE_C && msg.getTarget() == h1) {
                    success();
                } else {
                    failure();
                }
            }
        };
        tester.doTest(1000);
!!!48005175.java!!!	test5() : void
        /*
        * Two handlers request different messages, with translations, sending
        * only one.  The other one should never get sent.
        */
        HandlerTester tester = new HandlerTester() {
            Handler h1;
            Handler h2;

            public void go() {
                Broadcaster b = new Broadcaster();
                h1 = new H();
                h2 = new H();

                b.request(MESSAGE_A, h1, MESSAGE_C);
                b.request(MESSAGE_B, h2, MESSAGE_D);

                Message msg = new Message();
                msg.what = MESSAGE_B;

                b.broadcast(msg);
            }

            public void handleMessage(Message msg) {
                if (msg.what == MESSAGE_D && msg.getTarget() == h2) {
                    success();
                } else {
                    failure();
                }
            }
        };
        tester.doTest(1000);
!!!48005303.java!!!	test6() : void
        /*
        * Two handlers request same message. Cancel the request for the
        * 2nd handler, make sure the first still works.
        */
        HandlerTester tester = new HandlerTester() {
            Handler h1;
            Handler h2;

            public void go() {
                Broadcaster b = new Broadcaster();
                h1 = new H();
                h2 = new H();

                b.request(MESSAGE_A, h1, MESSAGE_C);
                b.request(MESSAGE_A, h2, MESSAGE_D);
                b.cancelRequest(MESSAGE_A, h2, MESSAGE_D);

                Message msg = new Message();
                msg.what = MESSAGE_A;

                b.broadcast(msg);
            }

            public void handleMessage(Message msg) {
                if (msg.what == MESSAGE_C && msg.getTarget() == h1) {
                    success();
                } else {
                    failure();
                }
            }
        };
        tester.doTest(1000);
