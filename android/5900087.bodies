class FileBridgeTest
!!!48005815.java!!!	setUp() : void
        super.setUp();

        file = getContext().getFileStreamPath("meow.dat");
        file.delete();

        fileOs = new FileOutputStream(file);

        bridge = new FileBridge();
        bridge.setTargetFile(fileOs.getFD());
        bridge.start();
        client = new FileBridgeOutputStream(bridge.getClientSocket());
!!!48005943.java!!!	tearDown() : void
        fileOs.close();
        file.delete();
!!!48006071.java!!!	assertOpen() : void
        assertFalse("expected open", bridge.isClosed());
!!!48006199.java!!!	closeAndAssertClosed() : void
        client.close();

        // Wait a beat for things to settle down
        SystemClock.sleep(200);
        assertTrue("expected closed", bridge.isClosed());
!!!48006327.java!!!	assertContents(inout expected : byte [[]]) : void
        MoreAsserts.assertEquals(expected, Streams.readFully(new FileInputStream(file)));
!!!48006455.java!!!	testNoWriteNoSync() : void
        assertOpen();
        closeAndAssertClosed();
!!!48006583.java!!!	testNoWriteSync() : void
        assertOpen();
        client.flush();
        closeAndAssertClosed();
!!!48006711.java!!!	testWriteNoSync() : void
        assertOpen();
        client.write("meow".getBytes(StandardCharsets.UTF_8));
        closeAndAssertClosed();
        assertContents("meow".getBytes(StandardCharsets.UTF_8));
!!!48006839.java!!!	testWriteSync() : void
        assertOpen();
        client.write("cake".getBytes(StandardCharsets.UTF_8));
        client.flush();
        closeAndAssertClosed();
        assertContents("cake".getBytes(StandardCharsets.UTF_8));
!!!48006967.java!!!	testWriteSyncWrite() : void
        assertOpen();
        client.write("meow".getBytes(StandardCharsets.UTF_8));
        client.flush();
        client.write("cake".getBytes(StandardCharsets.UTF_8));
        closeAndAssertClosed();
        assertContents("meowcake".getBytes(StandardCharsets.UTF_8));
!!!48007095.java!!!	testEmptyWrite() : void
        assertOpen();
        client.write(new byte[0]);
        closeAndAssertClosed();
        assertContents(new byte[0]);
!!!48007223.java!!!	testWriteAfterClose() : void
        assertOpen();
        client.write("meow".getBytes(StandardCharsets.UTF_8));
        closeAndAssertClosed();
        try {
            client.write("cake".getBytes(StandardCharsets.UTF_8));
            fail("wrote after close!");
        } catch (IOException expected) {
        }
        assertContents("meow".getBytes(StandardCharsets.UTF_8));
!!!48007351.java!!!	testRandomWrite() : void
        final Random r = new Random();
        final ByteArrayOutputStream result = new ByteArrayOutputStream();

        for (int i = 0; i < 512; i++) {
            final byte[] test = new byte[r.nextInt(24169)];
            r.nextBytes(test);
            result.write(test);
            client.write(test);
            client.flush();
        }

        closeAndAssertClosed();
        assertContents(result.toByteArray());
!!!48007479.java!!!	testGiantWrite() : void
        final byte[] test = new byte[263401];
        new Random().nextBytes(test);

        assertOpen();
        client.write(test);
        closeAndAssertClosed();
        assertContents(test);
