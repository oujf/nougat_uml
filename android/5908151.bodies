class StaticLayoutDirectionsTest
!!!48076471.java!!!	dirs(in dirs : int) : Layout::Directions
        return new Directions(dirs);
!!!48076599.java!!!	pseudoBidiToReal(inout src : String) : String
        char[] chars = src.toCharArray();
        for (int j = 0; j < chars.length; ++j) {
            char c = chars[j];
            if (c >= 'A' && c <= 'D') {
                chars[j] = (char)(ALEF + c - 'A');
            }
        }

        return new String(chars, 0, chars.length);
!!!48076727.java!!!	testDirections() : void
        StringBuilder buf = new StringBuilder("\n");
        Formatter f = new Formatter(buf);

        LayoutBuilder b = StaticLayoutTest.builder();
        for (int i = 0; i < texts.length; ++i) {
            b.setText(pseudoBidiToReal(texts[i]));
            checkDirections(b.build(), i, b.text, expected, f);
        }
        if (buf.length() > 1) {
            fail(buf.toString());
        }
!!!48076855.java!!!	testTrailingWhitespace() : void
        LayoutBuilder b = StaticLayoutTest.builder();
        b.setText(pseudoBidiToReal("Ab   c"));
        float width = b.paint.measureText(b.text, 0, 5);  // exclude 'c'
        b.setWidth(Math.round(width));
        Layout l = b.build();
        if (l.getLineCount() != 2) {
            throw new RuntimeException("expected 2 lines, got: " + l.getLineCount());
        }
        Directions result = l.getLineDirections(0);
        Directions expected = dirs(0, LVL1_1, 1, LVL2_1, 2, 3 | (1 << Layout.RUN_LEVEL_SHIFT));
        expectDirections("split line", expected, result);
!!!48076983.java!!!	testNextToRightOf() : void
        LayoutBuilder b = StaticLayoutTest.builder();
        b.setText(pseudoBidiToReal("aA1B2"));
        // visual a2B1A positions 04321
        // 0: |a2B1A, strong is sol, after -> 0
        // 1: a|2B1A, strong is a, after ->, 1
        // 2: a2|B1A, strong is B, after -> 4
        // 3: a2B|1A, strong is B, before -> 3
        // 4: a2B1|A, strong is A, after -> 2
        // 5: a2B1A|, strong is eol, before -> 5
        int[] expected = { 0, 1, 4, 3, 2, 5 };
        Layout l = b.build();
        int n = 0;
        for (int i = 1; i < expected.length; ++i) {
            int t = l.getOffsetToRightOf(n);
            if (t != expected[i]) {
                fail("offset[" + i + "] to right of: " + n + " expected: " +
                        expected[i] + " got: " + t);
            }
            n = t;
        }
!!!48077111.java!!!	testNextToLeftOf() : void
        LayoutBuilder b = StaticLayoutTest.builder();
        b.setText(pseudoBidiToReal("aA1B2"));
        int[] expected = { 0, 1, 4, 3, 2, 5 };
        Layout l = b.build();
        int n = 5;
        for (int i = expected.length - 1; --i >= 0;) {
            int t = l.getOffsetToLeftOf(n);
            if (t != expected[i]) {
                fail("offset[" + i + "] to left of: " + n + " expected: " +
                        expected[i] + " got: " + t);
            }
            n = t;
        }
!!!48077239.java!!!	hexArray(inout array : int [[]]) : String
        StringBuilder sb = new StringBuilder();
        sb.append('{');
        for (int i : array) {
            if (sb.length() > 1) {
                sb.append(", ");
            }
            sb.append(Integer.toHexString(i));
        }
        sb.append('}');
        return sb.toString();
!!!48077367.java!!!	checkDirections(inout l : Layout, in i : int, inout text : String, inout expectedDirs : Layout::Directions [[]], inout f : Formatter) : void
        Directions expected = expectedDirs[i];
        Directions result = l.getLineDirections(0);
        if (!Arrays.equals(expected.mDirections, result.mDirections)) {
            f.format("%n[%2d] '%s', %s != %s", i, text,
                    hexArray(expected.mDirections),
                    hexArray(result.mDirections));
        }
!!!48077495.java!!!	expectDirections(inout msg : String, inout expected : Layout::Directions, inout result : Layout::Directions) : void
        if (!Arrays.equals(expected.mDirections, result.mDirections)) {
            fail("expected: " + hexArray(expected.mDirections) +
                    " got: " + hexArray(result.mDirections));
        }
