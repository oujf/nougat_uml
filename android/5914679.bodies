class PatternsTest
!!!48124727.java!!!	testTldPattern() : void
        boolean t;

        t = Patterns.TOP_LEVEL_DOMAIN.matcher("com").matches();
        assertTrue("Missed valid TLD", t);

        // One of the new top level domain.
        t = Patterns.TOP_LEVEL_DOMAIN.matcher("me").matches();
        assertTrue("Missed valid TLD", t);

        // One of the new top level test domain.
        t = Patterns.TOP_LEVEL_DOMAIN.matcher("xn--0zwm56d").matches();
        assertTrue("Missed valid TLD", t);

        // One of the new top level unicode domain.
        t = Patterns.TOP_LEVEL_DOMAIN.matcher("\uD55C\uAD6D").matches();
        assertTrue("Missed valid TLD", t);

        t = Patterns.TOP_LEVEL_DOMAIN.matcher("mem").matches();
        assertFalse("Matched invalid TLD!", t);

        t = Patterns.TOP_LEVEL_DOMAIN.matcher("xn").matches();
        assertFalse("Matched invalid TLD!", t);

        t = Patterns.TOP_LEVEL_DOMAIN.matcher("xer").matches();
        assertFalse("Matched invalid TLD!", t);
!!!48124855.java!!!	testIanaTopLevelDomains_matchesValidTld() : void
        Pattern pattern = Pattern.compile(Patterns.IANA_TOP_LEVEL_DOMAINS);
        assertTrue("Should match 'com'", pattern.matcher("com").matches());
!!!48124983.java!!!	testIanaTopLevelDomains_matchesValidNewTld() : void
        Pattern pattern = Pattern.compile(Patterns.IANA_TOP_LEVEL_DOMAINS);
        assertTrue("Should match 'me'", pattern.matcher("me").matches());
!!!48125111.java!!!	testIanaTopLevelDomains_matchesPunycodeTld() : void
        Pattern pattern = Pattern.compile(Patterns.IANA_TOP_LEVEL_DOMAINS);
        assertTrue("Should match Punycode TLD", pattern.matcher("xn--qxam").matches());
!!!48125239.java!!!	testIanaTopLevelDomains_matchesIriTLD() : void
        Pattern pattern = Pattern.compile(Patterns.IANA_TOP_LEVEL_DOMAINS);
        assertTrue("Should match IRI TLD", pattern.matcher("\uD55C\uAD6D").matches());
!!!48125367.java!!!	testIanaTopLevelDomains_doesNotMatchWrongTld() : void
        Pattern pattern = Pattern.compile(Patterns.IANA_TOP_LEVEL_DOMAINS);
        assertFalse("Should not match 'mem'", pattern.matcher("mem").matches());
!!!48125495.java!!!	testIanaTopLevelDomains_doesNotMatchWrongPunycodeTld() : void
        Pattern pattern = Pattern.compile(Patterns.IANA_TOP_LEVEL_DOMAINS);
        assertFalse("Should not match invalid Punycode TLD", pattern.matcher("xn").matches());
!!!48125623.java!!!	testWebUrl_matchesValidUrlWithSchemeAndHostname() : void
        String url = "http://www.android.com";
        assertTrue("Should match URL with scheme and hostname",
                Patterns.WEB_URL.matcher(url).matches());
!!!48125751.java!!!	testWebUrl_matchesValidUrlWithSchemeHostnameAndNewTld() : void
        String url = "http://www.android.me";
        assertTrue("Should match URL with scheme, hostname and new TLD",
                Patterns.WEB_URL.matcher(url).matches());
!!!48125879.java!!!	testWebUrl_matchesValidUrlWithHostnameAndNewTld() : void
        String url = "android.me";
        assertTrue("Should match URL with hostname and new TLD",
                Patterns.WEB_URL.matcher(url).matches());
!!!48126007.java!!!	testWebUrl_matchesChinesePunycodeUrlWithProtocol() : void
        String url = "http://xn--fsqu00a.xn--0zwm56d";
        assertTrue("Should match Chinese Punycode URL with protocol",
                Patterns.WEB_URL.matcher(url).matches());
!!!48126135.java!!!	testWebUrl_matchesChinesePunycodeUrlWithoutProtocol() : void
        String url = "xn--fsqu00a.xn--0zwm56d";
        assertTrue("Should match Chinese Punycode URL without protocol",
                Patterns.WEB_URL.matcher(url).matches());
!!!48126263.java!!!	testWebUrl_matchesArabicPunycodeUrlWithProtocol() : void
        String url = "http://xn--4gbrim.xn----rmckbbajlc6dj7bxne2c.xn--wgbh1c/ar/default.aspx";
        assertTrue("Should match arabic Punycode URL with protocol",
                Patterns.WEB_URL.matcher(url).matches());
!!!48126391.java!!!	testWebUrl_matchesArabicPunycodeUrlWithoutProtocol() : void
        String url = "xn--4gbrim.xn----rmckbbajlc6dj7bxne2c.xn--wgbh1c/ar/default.aspx";
        assertTrue("Should match Arabic Punycode URL without protocol",
                Patterns.WEB_URL.matcher(url).matches());
!!!48126519.java!!!	testWebUrl_matchesUrlWithUnicodeDomainNameWithProtocol() : void
        String url = "http://\uD604\uAE08\uC601\uC218\uC99D.kr";
        assertTrue("Should match URL with Unicode domain name",
                Patterns.WEB_URL.matcher(url).matches());
!!!48126647.java!!!	testWebUrl_matchesUrlWithUnicodeDomainNameWithoutProtocol() : void
        String url = "\uD604\uAE08\uC601\uC218\uC99D.kr";
        assertTrue("Should match URL without protocol and with Unicode domain name",
                Patterns.WEB_URL.matcher(url).matches());
!!!48126775.java!!!	testWebUrl_matchesUrlWithUnicodeTld() : void
        String url = "\uB3C4\uBA54\uC778.\uD55C\uAD6D";
        assertTrue("Should match URL with Unicode TLD",
                Patterns.WEB_URL.matcher(url).matches());
!!!48126903.java!!!	testWebUrl_matchesUrlWithUnicodePath() : void
        String url = "http://brainstormtech.blogs.fortune.cnn.com/2010/03/11/" +
                "top-five-moments-from-eric-schmidt\u2019s-talk-in-abu-dhabi/";
        assertTrue("Should match URL with Unicode path",
                Patterns.WEB_URL.matcher(url).matches());
!!!48127031.java!!!	testWebUrl_doesNotMatchValidUrlWithInvalidProtocol() : void
        String url = "ftp://www.example.com";
        assertFalse("Should not match URL with invalid protocol",
                Patterns.WEB_URL.matcher(url).matches());
!!!48127159.java!!!	testWebUrl_matchesValidUrlWithPort() : void
        String url = "http://www.example.com:8080";
        assertTrue("Should match URL with port", Patterns.WEB_URL.matcher(url).matches());
!!!48127287.java!!!	testWebUrl_matchesUrlWithPortAndQuery() : void
        String url = "http://www.example.com:8080/?foo=bar";
        assertTrue("Should match URL with port and query",
                Patterns.WEB_URL.matcher(url).matches());
!!!48127415.java!!!	testWebUrl_matchesUrlWithTilde() : void
        String url = "http://www.example.com:8080/~user/?foo=bar";
        assertTrue("Should match URL with tilde", Patterns.WEB_URL.matcher(url).matches());
!!!48127543.java!!!	testWebUrl_matchesProtocolCaseInsensitive() : void
        String url = "hTtP://android.com";
        assertTrue("Protocol matching should be case insensitive",
                Patterns.WEB_URL.matcher(url).matches());
!!!48127671.java!!!	testAutoLinkWebUrl_matchesValidUrlWithSchemeAndHostname() : void
        String url = "http://www.android.com";
        assertTrue("Should match URL with scheme and hostname",
                Patterns.AUTOLINK_WEB_URL.matcher(url).matches());
!!!48127799.java!!!	testAutoLinkWebUrl_matchesValidUrlWithSchemeHostnameAndNewTld() : void
        String url = "http://www.android.me";
        assertTrue("Should match URL with scheme, hostname and new TLD",
                Patterns.AUTOLINK_WEB_URL.matcher(url).matches());
!!!48127927.java!!!	testAutoLinkWebUrl_matchesValidUrlWithHostnameAndNewTld() : void
        String url = "android.me";
        assertTrue("Should match URL with hostname and new TLD",
                Patterns.AUTOLINK_WEB_URL.matcher(url).matches());

        url = "android.camera";
        assertTrue("Should match URL with hostname and new TLD",
                Patterns.AUTOLINK_WEB_URL.matcher(url).matches());
!!!48128055.java!!!	testAutoLinkWebUrl_matchesChinesePunycodeUrlWithProtocol() : void
        String url = "http://xn--fsqu00a.xn--0zwm56d";
        assertTrue("Should match Chinese Punycode URL with protocol",
                Patterns.AUTOLINK_WEB_URL.matcher(url).matches());
!!!48128183.java!!!	testAutoLinkWebUrl_matchesChinesePunycodeUrlWithoutProtocol() : void
        String url = "xn--fsqu00a.xn--0zwm56d";
        assertTrue("Should match Chinese Punycode URL without protocol",
                Patterns.AUTOLINK_WEB_URL.matcher(url).matches());
!!!48128311.java!!!	testAutoLinkWebUrl_matchesArabicPunycodeUrlWithProtocol() : void
        String url = "http://xn--4gbrim.xn--rmckbbajlc6dj7bxne2c.xn--wgbh1c/ar/default.aspx";
        assertTrue("Should match Arabic Punycode URL with protocol",
                Patterns.AUTOLINK_WEB_URL.matcher(url).matches());
!!!48128439.java!!!	testAutoLinkWebUrl_matchesArabicPunycodeUrlWithoutProtocol() : void
        String url = "xn--4gbrim.xn--rmckbbajlc6dj7bxne2c.xn--wgbh1c/ar/default.aspx";
        assertTrue("Should match Arabic Punycode URL without protocol",
                Patterns.AUTOLINK_WEB_URL.matcher(url).matches());
!!!48128567.java!!!	testAutoLinkWebUrl_doesNotMatchPunycodeTldThatStartsWithDash() : void
        String url = "http://xn--fsqu00a.-xn--0zwm56d";
        assertFalse("Should not match Punycode TLD that starts with dash",
                Patterns.AUTOLINK_WEB_URL.matcher(url).matches());
!!!48128695.java!!!	testAutoLinkWebUrl_doesNotMatchPunycodeTldThatEndsWithDash() : void
        String url = "http://xn--fsqu00a.xn--0zwm56d-";
        assertFalse("Should not match Punycode TLD that ends with dash",
                Patterns.AUTOLINK_WEB_URL.matcher(url).matches());
!!!48128823.java!!!	testAutoLinkWebUrl_matchesUrlWithUnicodeDomainName() : void
        String url = "http://\uD604\uAE08\uC601\uC218\uC99D.kr";
        assertTrue("Should match URL with Unicode domain name",
                Patterns.AUTOLINK_WEB_URL.matcher(url).matches());

        url = "\uD604\uAE08\uC601\uC218\uC99D.kr";
        assertTrue("hould match URL without protocol and with Unicode domain name",
                Patterns.AUTOLINK_WEB_URL.matcher(url).matches());
!!!48128951.java!!!	testAutoLinkWebUrl_matchesUrlWithUnicodeTld() : void
        String url = "\uB3C4\uBA54\uC778.\uD55C\uAD6D";
        assertTrue("Should match URL with Unicode TLD",
                Patterns.AUTOLINK_WEB_URL.matcher(url).matches());
!!!48129079.java!!!	testAutoLinkWebUrl_matchesUrlWithUnicodePath() : void
        String url = "http://brainstormtech.blogs.fortune.cnn.com/2010/03/11/" +
                "top-five-moments-from-eric-schmidt\u2019s-talk-in-abu-dhabi/";
        assertTrue("Should match URL with Unicode path",
                Patterns.AUTOLINK_WEB_URL.matcher(url).matches());
!!!48129207.java!!!	testAutoLinkWebUrl_doesNotMatchValidUrlWithInvalidProtocol() : void
        String url = "ftp://www.example.com";
        assertFalse("Should not match URL with invalid protocol",
                Patterns.AUTOLINK_WEB_URL.matcher(url).matches());
!!!48129335.java!!!	testAutoLinkWebUrl_matchesValidUrlWithPort() : void
        String url = "http://www.example.com:8080";
        assertTrue("Should match URL with port",
                Patterns.AUTOLINK_WEB_URL.matcher(url).matches());
!!!48129463.java!!!	testAutoLinkWebUrl_matchesUrlWithPortAndQuery() : void
        String url = "http://www.example.com:8080/?foo=bar";
        assertTrue("Should match URL with port and query",
                Patterns.AUTOLINK_WEB_URL.matcher(url).matches());
!!!48129591.java!!!	testAutoLinkWebUrl_matchesUrlWithTilde() : void
        String url = "http://www.example.com:8080/~user/?foo=bar";
        assertTrue("Should match URL with tilde",
                Patterns.AUTOLINK_WEB_URL.matcher(url).matches());
!!!48129719.java!!!	testAutoLinkWebUrl_matchesProtocolCaseInsensitive() : void
        String url = "hTtP://android.com";
        assertTrue("Protocol matching should be case insensitive",
                Patterns.AUTOLINK_WEB_URL.matcher(url).matches());
!!!48129847.java!!!	testAutoLinkWebUrl_matchesUrlStartingWithHttpAndDoesNotHaveTld() : void
        String url = "http://android/#notld///a/n/d/r/o/i/d&p1=1&p2=2";
        assertTrue("Should match URL without a TLD and starting with http ",
                Patterns.AUTOLINK_WEB_URL.matcher(url).matches());
!!!48129975.java!!!	testAutoLinkWebUrl_doesNotMatchUrlsWithoutProtocolAndWithUnknownTld() : void
        String url = "thank.you";
        assertFalse("Should not match URL that does not start with a protocol and " +
                "does not contain a known TLD",
                Patterns.AUTOLINK_WEB_URL.matcher(url).matches());
!!!48130103.java!!!	testAutoLinkWebUrl_doesNotMatchUrlWithInvalidRequestParameter() : void
        String url = "http://android.com?p=value";
        assertFalse("Should not match URL with invalid request parameter",
                Patterns.AUTOLINK_WEB_URL.matcher(url).matches());
!!!48130231.java!!!	testAutoLinkWebUrl_doesNotPartiallyMatchUnknownProtocol() : void
        String url = "ftp://foo.bar/baz";
        assertFalse("Should not partially match URL with unknown protocol",
                Patterns.AUTOLINK_WEB_URL.matcher(url).find());
!!!48130359.java!!!	testAutoLinkWebUrl_matchesValidUrlWithEmoji() : void
        String url = "Thank\u263A.com";
        assertTrue("Should match URL with emoji",
                Patterns.AUTOLINK_WEB_URL.matcher(url).matches());
!!!48130487.java!!!	testAutoLinkWebUrl_doesNotMatchUrlsWithEmojiWithoutProtocolAndWithoutKnownTld() : void
        String url = "Thank\u263A.you";
        assertFalse("Should not match URLs containing emoji and with unknown TLD",
                Patterns.AUTOLINK_WEB_URL.matcher(url).matches());
!!!48130615.java!!!	testAutoLinkWebUrl_doesNotMatchEmailAddress() : void
        String url = "android@android.com";
        assertFalse("Should not match email address",
                Patterns.AUTOLINK_WEB_URL.matcher(url).matches());
!!!48130743.java!!!	testAutoLinkWebUrl_matchesDomainNameWithSurrogatePairs() : void
        String url = "android\uD83C\uDF38.com";
        assertTrue("Should match domain name with Unicode surrogate pairs",
                Patterns.AUTOLINK_WEB_URL.matcher(url).matches());
!!!48130871.java!!!	testAutoLinkWebUrl_matchesTldWithSurrogatePairs() : void
        String url = "http://android.\uD83C\uDF38com";
        assertTrue("Should match TLD with Unicode surrogate pairs",
                Patterns.AUTOLINK_WEB_URL.matcher(url).matches());
!!!48130999.java!!!	testAutoLinkWebUrl_matchesPathWithSurrogatePairs() : void
        String url = "http://android.com/path-with-\uD83C\uDF38?v=\uD83C\uDF38";
        assertTrue("Should match path and query with Unicode surrogate pairs",
                Patterns.AUTOLINK_WEB_URL.matcher(url).matches());
!!!48131127.java!!!	testAutoLinkWebUrl_doesNotMatchUrlWithExcludedSurrogate() : void
        String url = "http://android\uD83F\uDFFE.com";
        assertFalse("Should not match URL with excluded Unicode surrogate pair",
                Patterns.AUTOLINK_WEB_URL.matcher(url).matches());
!!!48131255.java!!!	testAutoLinkWebUrl_doesNotMatchUnicodeSpaces() : void
        String part1 = "http://and";
        String part2 = "roid";
        String[] emptySpaces = new String[]{
                "\u00A0", // no-break space
                "\u2000", // en quad
                "\u2001", // em quad
                "\u2002", // en space
                "\u2003", // em space
                "\u2004", // three-per-em space
                "\u2005", // four-per-em space
                "\u2006", // six-per-em space
                "\u2007", // figure space
                "\u2008", // punctuation space
                "\u2009", // thin space
                "\u200A", // hair space
                "\u2028", // line separator
                "\u2029", // paragraph separator
                "\u202F", // narrow no-break space
                "\u3000" // ideographic space
        };

        for (String emptySpace : emptySpaces) {
            String url = part1 + emptySpace + part2;
            assertFalse("Should not match empty space - code:" + emptySpace.codePointAt(0),
                    Patterns.AUTOLINK_WEB_URL.matcher(url).matches());
        }
!!!48131383.java!!!	testIpPattern() : void
        boolean t;

        t = Patterns.IP_ADDRESS.matcher("172.29.86.3").matches();
        assertTrue("Valid IP", t);

        t = Patterns.IP_ADDRESS.matcher("1234.4321.9.9").matches();
        assertFalse("Invalid IP", t);
!!!48131511.java!!!	testDomain_matchesPunycodeTld() : void
        String domain = "xn--fsqu00a.xn--0zwm56d";
        assertTrue("Should match domain name in Punycode",
                Patterns.DOMAIN_NAME.matcher(domain).matches());
!!!48131639.java!!!	testDomain_doesNotMatchPunycodeThatStartsWithDash() : void
        String domain = "xn--fsqu00a.-xn--0zwm56d";
        assertFalse("Should not match Punycode TLD that starts with a dash",
                Patterns.DOMAIN_NAME.matcher(domain).matches());
!!!48131767.java!!!	testDomain_doesNotMatchPunycodeThatEndsWithDash() : void
        String domain = "xn--fsqu00a.xn--0zwm56d-";
        assertFalse("Should not match Punycode TLD that ends with a dash",
                Patterns.DOMAIN_NAME.matcher(domain).matches());
!!!48131895.java!!!	testDomain_doesNotMatchPunycodeLongerThanAllowed() : void
        String tld = "xn--";
        for(int i=0; i<=6; i++) {
            tld += "0123456789";
        }
        String domain = "xn--fsqu00a." + tld;
        assertFalse("Should not match Punycode TLD that is longer than 63 chars",
                Patterns.DOMAIN_NAME.matcher(domain).matches());
!!!48132023.java!!!	testDomain_matchesObsoleteTld() : void
        String domain = "test.yu";
        assertTrue("Should match domain names with obsolete TLD",
                Patterns.DOMAIN_NAME.matcher(domain).matches());
!!!48132151.java!!!	testDomain_matchesWithSubDomain() : void
        String domain = "mail.example.com";
        assertTrue("Should match domain names with subdomains",
                Patterns.DOMAIN_NAME.matcher(domain).matches());
!!!48132279.java!!!	testDomain_matchesWithoutSubDomain() : void
        String domain = "android.me";
        assertTrue("Should match domain names without subdomains",
                Patterns.DOMAIN_NAME.matcher(domain).matches());
!!!48132407.java!!!	testDomain_matchesUnicodeDomainNames() : void
        String domain = "\uD604\uAE08\uC601\uC218\uC99D.kr";
        assertTrue("Should match unicodedomain names",
                Patterns.DOMAIN_NAME.matcher(domain).matches());
!!!48132535.java!!!	testDomain_doesNotMatchInvalidDomain() : void
        String domain = "__+&42.xer";
        assertFalse("Should not match invalid domain name",
                Patterns.DOMAIN_NAME.matcher(domain).matches());
!!!48132663.java!!!	testDomain_matchesPunycodeArabicDomainName() : void
        String domain = "xn--4gbrim.xn----rmckbbajlc6dj7bxne2c.xn--wgbh1c";
        assertTrue("Should match Punycode Arabic domain name",
                Patterns.DOMAIN_NAME.matcher(domain).matches());
!!!48132791.java!!!	testAutoLinkEmailAddress_matchesShortValidEmail() : void
        String email = "a@a.co";
        assertTrue("Should match short valid email: " + email,
                Patterns.AUTOLINK_EMAIL_ADDRESS.matcher(email).matches());
!!!48132919.java!!!	testAutoLinkEmailAddress_matchesRegularEmail() : void
        String email = "email@android.com";
        assertTrue("Should match email: " + email,
                Patterns.AUTOLINK_EMAIL_ADDRESS.matcher(email).matches());
!!!48133047.java!!!	testAutoLinkEmailAddress_matchesEmailWithMultipleSubdomains() : void
        String email = "email@e.somelongdomainnameforandroid.abc.uk";
        assertTrue("Should match email: " + email,
                Patterns.AUTOLINK_EMAIL_ADDRESS.matcher(email).matches());
!!!48133175.java!!!	testAutoLinkEmailAddress_matchesLocalPartWithDot() : void
        String email = "e.mail@android.com";
        assertTrue("Should match email: " + email,
                Patterns.AUTOLINK_EMAIL_ADDRESS.matcher(email).matches());
!!!48133303.java!!!	testAutoLinkEmailAddress_matchesLocalPartWithPlus() : void
        String email = "e+mail@android.com";
        assertTrue("Should match email: " + email,
                Patterns.AUTOLINK_EMAIL_ADDRESS.matcher(email).matches());
!!!48133431.java!!!	testAutoLinkEmailAddress_matchesLocalPartWithUnderscore() : void
        String email = "e_mail@android.com";
        assertTrue("Should match email: " + email,
                Patterns.AUTOLINK_EMAIL_ADDRESS.matcher(email).matches());
!!!48133559.java!!!	testAutoLinkEmailAddress_matchesLocalPartWithDash() : void
        String email = "e-mail@android.com";
        assertTrue("Should match email: " + email,
                Patterns.AUTOLINK_EMAIL_ADDRESS.matcher(email).matches());
!!!48133687.java!!!	testAutoLinkEmailAddress_matchesLocalPartWithApostrophe() : void
        String email = "e'mail@android.com";
        assertTrue("Should match email: " + email,
                Patterns.AUTOLINK_EMAIL_ADDRESS.matcher(email).matches());
!!!48133815.java!!!	testAutoLinkEmailAddress_matchesLocalPartWithDigits() : void
        String email = "123@android.com";
        assertTrue("Should match email: " + email,
                Patterns.AUTOLINK_EMAIL_ADDRESS.matcher(email).matches());
!!!48133943.java!!!	testAutoLinkEmailAddress_matchesUnicodeLocalPart() : void
        String email = "\uD604\uAE08\uC601\uC218\uC99D@android.kr";
        assertTrue("Should match email: " + email,
                Patterns.AUTOLINK_EMAIL_ADDRESS.matcher(email).matches());
!!!48134071.java!!!	testAutoLinkEmailAddress_matchesLocalPartWithEmoji() : void
        String email = "smiley\u263A@android.com";
        assertTrue("Should match email: " + email,
                Patterns.AUTOLINK_EMAIL_ADDRESS.matcher(email).matches());
!!!48134199.java!!!	testAutoLinkEmailAddress_matchesLocalPartWithSurrogatePairs() : void
        String email = "\uD83C\uDF38@android.com";
        assertTrue("Should match email: " + email,
                Patterns.AUTOLINK_EMAIL_ADDRESS.matcher(email).matches());
!!!48134327.java!!!	testAutoLinkEmailAddress_matchesDomainWithDash() : void
        String email = "email@an-droid.com";
        assertTrue("Should match email: " + email,
                Patterns.AUTOLINK_EMAIL_ADDRESS.matcher(email).matches());
!!!48134455.java!!!	testAutoLinkEmailAddress_matchesUnicodeDomain() : void
        String email = "email@\uD604\uAE08\uC601\uC218\uC99D.kr";
        assertTrue("Should match email: " + email,
                Patterns.AUTOLINK_EMAIL_ADDRESS.matcher(email).matches());
!!!48134583.java!!!	testAutoLinkEmailAddress_matchesUnicodeLocalPartAndDomain() : void
        String email = "\uD604\uAE08\uC601\uC218\uC99D@\uD604\uAE08\uC601\uC218\uC99D.kr";
        assertTrue("Should match email: " + email,
                Patterns.AUTOLINK_EMAIL_ADDRESS.matcher(email).matches());
!!!48134711.java!!!	testAutoLinkEmailAddress_matchesDomainWithEmoji() : void
        String email = "smiley@\u263Aandroid.com";
        assertTrue("Should match email: " + email,
                Patterns.AUTOLINK_EMAIL_ADDRESS.matcher(email).matches());
!!!48134839.java!!!	testAutoLinkEmailAddress_matchesDomainWithSurrogatePairs() : void
        String email = "email@\uD83C\uDF38android.com";
        assertTrue("Should match email: " + email,
                Patterns.AUTOLINK_EMAIL_ADDRESS.matcher(email).matches());
!!!48134967.java!!!	testAutoLinkEmailAddress_matchesLocalPartAndDomainWithSurrogatePairs() : void
        String email = "\uD83C\uDF38@\uD83C\uDF38android.com";
        assertTrue("Should match email: " + email,
                Patterns.AUTOLINK_EMAIL_ADDRESS.matcher(email).matches());
!!!48135095.java!!!	testAutoLinkEmailAddress_doesNotMatchStringWithoutAtSign() : void
        String email = "android.com";
        assertFalse("Should not match email: " + email,
                Patterns.AUTOLINK_EMAIL_ADDRESS.matcher(email).matches());
!!!48135223.java!!!	testAutoLinkEmailAddress_doesNotMatchPlainString() : void
        String email = "email";
        assertFalse("Should not match email: " + email,
                Patterns.AUTOLINK_EMAIL_ADDRESS.matcher(email).matches());
!!!48135351.java!!!	testAutoLinkEmailAddress_doesNotMatchStringWithMultipleAtSigns() : void
        String email = "email@android@android.com";
        assertFalse("Should not match email: " + email,
                Patterns.AUTOLINK_EMAIL_ADDRESS.matcher(email).matches());
!!!48135479.java!!!	testAutoLinkEmailAddress_doesNotMatchEmailWithoutTld() : void
        String email = "email@android";
        assertFalse("Should not match email: " + email,
                Patterns.AUTOLINK_EMAIL_ADDRESS.matcher(email).matches());
!!!48135607.java!!!	testAutoLinkEmailAddress_doesNotMatchLocalPartEndingWithDot() : void
        String email = "email.@android.com";
        assertFalse("Should not match email: " + email,
                Patterns.AUTOLINK_EMAIL_ADDRESS.matcher(email).matches());
!!!48135735.java!!!	testAutoLinkEmailAddress_doesNotMatchLocalPartStartingWithDot() : void
        String email = ".email@android.com";
        assertFalse("Should not match email: " + email,
                Patterns.AUTOLINK_EMAIL_ADDRESS.matcher(email).matches());
!!!48135863.java!!!	testAutoLinkEmailAddress_doesNotMatchDomainStartingWithDash() : void
        String email = "email@-android.com";
        assertFalse("Should not match email: " + email,
                Patterns.AUTOLINK_EMAIL_ADDRESS.matcher(email).matches());
!!!48135991.java!!!	testAutoLinkEmailAddress_doesNotMatchDomainWithConsecutiveDots() : void
        String email = "email@android..com";
        assertFalse("Should not match email: " + email,
                Patterns.AUTOLINK_EMAIL_ADDRESS.matcher(email).matches());
!!!48136119.java!!!	testAutoLinkEmailAddress_doesNotMatchEmailWithIpAsDomain() : void
        String email = "email@127.0.0.1";
        assertFalse("Should not match email: " + email,
                Patterns.AUTOLINK_EMAIL_ADDRESS.matcher(email).matches());
!!!48136247.java!!!	testAutoLinkEmailAddress_doesNotMatchEmailWithInvalidTld() : void
        String email = "email@android.c";
        assertFalse("Should not match email: " + email,
                Patterns.AUTOLINK_EMAIL_ADDRESS.matcher(email).matches());
!!!48136375.java!!!	testAutoLinkEmailAddress_matchesLocalPartUpTo64Chars() : void
        String localPart = "";
        for (int i = 0; i < 64; i++) {
            localPart += "a";
        }
        String email = localPart + "@android.com";

        assertTrue("Should match local part of length: " + localPart.length(),
                Patterns.AUTOLINK_EMAIL_ADDRESS.matcher(email).matches());

        email = localPart + "a@android.com";
        assertFalse("Should not match local part of length: " + localPart.length(),
                Patterns.AUTOLINK_EMAIL_ADDRESS.matcher(email).matches());
!!!48136503.java!!!	testAutoLinkEmailAddress_matchesSubdomainUpTo63Chars() : void
        String subdomain = "";
        for (int i = 0; i < 63; i++) {
            subdomain += "a";
        }
        String email = "email@" + subdomain + ".com";

        assertTrue("Should match subdomain of length: " + subdomain.length(),
                Patterns.AUTOLINK_EMAIL_ADDRESS.matcher(email).matches());

        subdomain += "a";
        email = "email@" + subdomain + ".com";
        assertFalse("Should not match local part of length: " + subdomain.length(),
                Patterns.AUTOLINK_EMAIL_ADDRESS.matcher(email).matches());
!!!48136631.java!!!	testAutoLinkEmailAddress_matchesDomainUpTo255Chars() : void
        String longDomain = "";
        while (longDomain.length() <= 250) {
            longDomain += "d.";
        }
        longDomain += "com";
        assertEquals(255, longDomain.length());
        String email = "a@" + longDomain;

        assertTrue("Should match domain of length: " + longDomain.length(),
                Patterns.AUTOLINK_EMAIL_ADDRESS.matcher(email).matches());

        email = email + "m";
        assertEquals(258, email.length());
        assertFalse("Should not match domain of length: " + longDomain.length(),
                Patterns.AUTOLINK_EMAIL_ADDRESS.matcher(email).matches());
!!!48136759.java!!!	testPhonePattern() : void
        boolean t;

        t = Patterns.PHONE.matcher("(919) 555-1212").matches();
        assertTrue("Valid phone", t);

        t = Patterns.PHONE.matcher("2334 9323/54321").matches();
        assertFalse("Invalid phone", t);

        String[] tests = {
                "Me: 16505551212 this\n",
                "Me: 6505551212 this\n",
                "Me: 5551212 this\n",
                "Me: 2211 this\n",
                "Me: 112 this\n",

                "Me: 1-650-555-1212 this\n",
                "Me: (650) 555-1212 this\n",
                "Me: +1 (650) 555-1212 this\n",
                "Me: +1-650-555-1212 this\n",
                "Me: 650-555-1212 this\n",
                "Me: 555-1212 this\n",

                "Me: 1.650.555.1212 this\n",
                "Me: (650) 555.1212 this\n",
                "Me: +1 (650) 555.1212 this\n",
                "Me: +1.650.555.1212 this\n",
                "Me: 650.555.1212 this\n",
                "Me: 555.1212 this\n",

                "Me: 1 650 555 1212 this\n",
                "Me: (650) 555 1212 this\n",
                "Me: +1 (650) 555 1212 this\n",
                "Me: +1 650 555 1212 this\n",
                "Me: 650 555 1212 this\n",
                "Me: 555 1212 this\n",
        };

        for (String test : tests) {
            Matcher m = Patterns.PHONE.matcher(test);

            assertTrue("Valid phone " + test, m.find());
        }
