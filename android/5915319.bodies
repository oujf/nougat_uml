class StateSetTest
!!!48139191.java!!!	testStateSetPositiveMatches() : void
         int[] stateSpec = new int[2];
         int[] stateSet = new int[3];
         // Single states in both sets - match
         stateSpec[0] = 1;
         stateSet[0] = 1;
         assertTrue(StateSet.stateSetMatches(stateSpec, stateSet));
         // Single states in both sets - non-match
         stateSet[0] = 2;
         assertFalse(StateSet.stateSetMatches(stateSpec, stateSet));
         // Add another state to the spec which the stateSet doesn't match
         stateSpec[1] = 2;
         assertFalse(StateSet.stateSetMatches(stateSpec, stateSet));
         // Add the missing matching element to the stateSet
         stateSet[1] = 1;
         assertTrue(StateSet.stateSetMatches(stateSpec, stateSet));
         // Add an irrelevent state to the stateSpec
         stateSet[2] = 12345;
         assertTrue(StateSet.stateSetMatches(stateSpec, stateSet));
!!!48139319.java!!!	testStatesSetMatchMixEmUp() : void
         int[] stateSpec = new int[2];
         int[] stateSet = new int[2];
         // One element in stateSpec which we must match and one which we must
         // not match.  stateSet only contains the match.
         stateSpec[0] = 1;
         stateSpec[1] = -2;
         stateSet[0] = 1;
         assertTrue(StateSet.stateSetMatches(stateSpec, stateSet));
         // stateSet now contains just the element we must not match
         stateSet[0] = 2;
         assertFalse(StateSet.stateSetMatches(stateSpec, stateSet));
         // Add another matching state to the the stateSet.  We still fail
         // because stateSet contains a must-not-match element
         stateSet[1] = 1;
         assertFalse(StateSet.stateSetMatches(stateSpec, stateSet));
         // Switch the must-not-match element in stateSet with a don't care
         stateSet[0] = 12345;
         assertTrue(StateSet.stateSetMatches(stateSpec, stateSet));
!!!48139447.java!!!	testStateSetNegativeMatches() : void
         int[] stateSpec = new int[2];
         int[] stateSet = new int[3];
         // Single states in both sets - match
         stateSpec[0] = -1;
         stateSet[0] = 2;
         assertTrue(StateSet.stateSetMatches(stateSpec, stateSet));
         // Add another arrelevent state to the stateSet
         stateSet[1] = 12345;
         assertTrue(StateSet.stateSetMatches(stateSpec, stateSet));
         // Single states in both sets - non-match
         stateSet[0] = 1;
         assertFalse(StateSet.stateSetMatches(stateSpec, stateSet));
         // Add another state to the spec which the stateSet doesn't match
         stateSpec[1] = -2;
         assertFalse(StateSet.stateSetMatches(stateSpec, stateSet));
         // Add an irrelevent state to the stateSet
         stateSet[2] = 12345;
         assertFalse(StateSet.stateSetMatches(stateSpec, stateSet));
!!!48139575.java!!!	testEmptySetMatchesNegtives() : void
         int[] stateSpec = {-12345, -6789};
         int[] stateSet = new int[0];
         assertTrue(StateSet.stateSetMatches(stateSpec, stateSet));
         int[] stateSet2 = {0};
         assertTrue(StateSet.stateSetMatches(stateSpec, stateSet2));
!!!48139703.java!!!	testEmptySetFailsPositives() : void
         int[] stateSpec = {12345};
         int[] stateSet = new int[0];
         assertFalse(StateSet.stateSetMatches(stateSpec, stateSet));
         int[] stateSet2 = {0};
         assertFalse(StateSet.stateSetMatches(stateSpec, stateSet2));
!!!48139831.java!!!	testEmptySetMatchesWildcard() : void
         int[] stateSpec = StateSet.WILD_CARD;
         int[] stateSet = new int[0];
         assertTrue(StateSet.stateSetMatches(stateSpec, stateSet));
         int[] stateSet2 = {0};
         assertTrue(StateSet.stateSetMatches(stateSpec, stateSet2));
!!!48139959.java!!!	testSingleStatePositiveMatches() : void
         int[] stateSpec = new int[2];
         int state;
         //  match
         stateSpec[0] = 1;
         state = 1;
         assertTrue(StateSet.stateSetMatches(stateSpec, state));
         // non-match
         state = 2;
         assertFalse(StateSet.stateSetMatches(stateSpec, state));
         // add irrelevant must-not-match
         stateSpec[1] = -12345;
         assertFalse(StateSet.stateSetMatches(stateSpec, state));
!!!48140087.java!!!	testSingleStateNegativeMatches() : void
         int[] stateSpec = new int[2];
         int state;
         //  match
         stateSpec[0] = -1;
         state = 1;
         assertFalse(StateSet.stateSetMatches(stateSpec, state));
         // non-match
         state = 2;
         assertTrue(StateSet.stateSetMatches(stateSpec, state));
         // add irrelevant must-not-match
         stateSpec[1] = -12345;
         assertTrue(StateSet.stateSetMatches(stateSpec, state));
!!!48140215.java!!!	testZeroStateOnlyMatchesDefault() : void
         int[] stateSpec = new int[3];
         int state = 0;
         //  non-match
         stateSpec[0] = 1;
         assertFalse(StateSet.stateSetMatches(stateSpec, state));
         // non-match
         stateSpec[1] = -1;
         assertFalse(StateSet.stateSetMatches(stateSpec, state));
         // match
         stateSpec = StateSet.WILD_CARD;
         assertTrue(StateSet.stateSetMatches(stateSpec, state));
!!!48140343.java!!!	testNullStateOnlyMatchesDefault() : void
         int[] stateSpec = new int[3];
         int[] stateSet = null;
         //  non-match
         stateSpec[0] = 1;
         assertFalse(StateSet.stateSetMatches(stateSpec, stateSet));
         // non-match
         stateSpec[1] = -1;
         assertFalse(StateSet.stateSetMatches(stateSpec, stateSet));
         // match
         stateSpec = StateSet.WILD_CARD;
         assertTrue(StateSet.stateSetMatches(stateSpec, stateSet));
