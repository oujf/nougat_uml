class MenuWith1ItemTest
!!!48192183.java!!!	MenuWith1ItemTest()
        super("com.android.frameworks.coretests", MenuWith1Item.class);
!!!48192311.java!!!	setUp() : void
        super.setUp();
        mActivity = getActivity();
!!!48192439.java!!!	testPreconditions() : void
        assertNotNull(mActivity);
        assertFalse(mActivity.getButton().isInTouchMode());
!!!48192567.java!!!	testItemClick() : void

        // Open menu, click on an item
        KeyUtils.tapMenuKey(this);
        getInstrumentation().waitForIdleSync();
        assertFalse("Item seems to have been clicked before we clicked on it", mActivity
                .wasItemClicked(0));
        sendKeys(KeyEvent.KEYCODE_DPAD_CENTER);
        assertTrue("Item doesn't seem to have registered our click", mActivity.wasItemClicked(0));
!!!48192695.java!!!	testTouchModeTransfersRemovesFocus() : void
        /* TODO These need to be rewritten to account for presenters that an activity
         * does not have access to.

        // open menu, move around to give it focus
        sendKeys(KeyEvent.KEYCODE_MENU, KeyEvent.KEYCODE_DPAD_LEFT);
        final View menuItem = mActivity.getItemView(MenuBuilder.TYPE_ICON, 0);
        assertTrue("menuItem.isFocused()", menuItem.isFocused());

        // close the menu
        sendKeys(KeyEvent.KEYCODE_MENU);
        Thread.sleep(500);

        // touch the screen
        TouchUtils.clickView(this, mActivity.getButton());
        assertTrue("should be in touch mode after touching button",
                mActivity.getButton().isInTouchMode());

        // open the menu, menu item shouldn't be focused, because we are not
        // in touch mode
        sendKeys(KeyEvent.KEYCODE_MENU);
        assertTrue("menuItem.isInTouchMode()", menuItem.isInTouchMode());
        assertFalse("menuItem.isFocused()", menuItem.isFocused());
         */
