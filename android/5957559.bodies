class ButtonsWithTallTextViewInBetweenTest
!!!48329271.java!!!	ButtonsWithTallTextViewInBetweenTest()
        super("com.android.frameworks.coretests", ButtonsWithTallTextViewInBetween.class);
!!!48329399.java!!!	setUp() : void
        super.setUp();

        mScrollView = getActivity().getScrollView();
        mTopButton = getActivity().getTopButton();
        mMiddleFiller = getActivity().getMiddleFiller();
        mBottomButton = getActivity().getBottomButton();
!!!48329527.java!!!	getTopWithinScrollView(inout descendant : View) : int
        descendant.getDrawingRect(mTempRect);
        mScrollView.offsetDescendantRectToMyCoords(descendant, mTempRect);
        return mTempRect.top;
!!!48329655.java!!!	getBottomWithinScrollView(inout descendant : View) : int
        descendant.getDrawingRect(mTempRect);
        mScrollView.offsetDescendantRectToMyCoords(descendant, mTempRect);
        return mTempRect.bottom;
!!!48329783.java!!!	testPreconditions() : void
        assertTrue("top button should be shorter than max scroll amount",
                mTopButton.getHeight() <
                mScrollView.getMaxScrollAmount());
        assertTrue("bottom button should be further than max scroll amount off screen",
                getTopWithinScrollView(mBottomButton)- mScrollView.getBottom() > mScrollView.getMaxScrollAmount());
!!!48329911.java!!!	testPanTopButtonOffScreenLosesFocus() : void
        sendKeys(KeyEvent.KEYCODE_DPAD_DOWN);

        assertEquals("scroll view should be scrolled by the max amount for one "
                + "arrow navigation",
                mScrollView.getMaxScrollAmount(),
                mScrollView.getScrollY());

        assertTrue("top button should be off screen",
                getBottomWithinScrollView(mTopButton) < mScrollView.getScrollY());

        assertFalse("top button should have lost focus",
                mTopButton.isFocused());

        assertTrue("scroll view should be focused", mScrollView.isFocused());
!!!48330039.java!!!	testScrollDownToBottomButton() : void
        final int screenBottom = mScrollView.getScrollY() + mScrollView.getHeight();
        final int numDownsToButtonButton =
                ((getBottomWithinScrollView(mBottomButton) - screenBottom)) / mScrollView.getMaxScrollAmount() + 1;

        for (int i = 0; i < numDownsToButtonButton; i++) {
            sendKeys(KeyEvent.KEYCODE_DPAD_DOWN);
        }

        assertTrue("bottombutton.isFocused", mBottomButton.isFocused());

        assertEquals("should be fully scrolled to bottom",
                getActivity().getLinearLayout().getHeight() - mScrollView.getHeight(),
                mScrollView.getScrollY());
!!!48330167.java!!!	testPanBottomButtonOffScreenLosesFocus() : void
        mBottomButton.post(new Runnable() {
            public void run() {
                mBottomButton.requestFocus();
            }
        });

        getInstrumentation().waitForIdleSync();

        assertTrue("bottombutton.isFocused", mBottomButton.isFocused());
        final int maxScroll = getActivity().getLinearLayout().getHeight()
                - mScrollView.getHeight();
        assertEquals("should be fully scrolled to bottom",
                maxScroll,
                mScrollView.getScrollY());

        sendKeys(KeyEvent.KEYCODE_DPAD_UP);

        assertEquals("scroll view should have scrolled by the max amount for one "
                + "arrow navigation",
                maxScroll - mScrollView.getMaxScrollAmount(),
                mScrollView.getScrollY());

        assertTrue("bottom button should be off screen",
                getTopWithinScrollView(mBottomButton) > mScrollView.getScrollY() + mScrollView.getHeight());

        assertFalse("bottom button should have lost focus",
                mBottomButton.isFocused());

        assertTrue("scroll view should be focused", mScrollView.isFocused());
