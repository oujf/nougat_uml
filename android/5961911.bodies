class LoggingPrintStreamTest
!!!48358583.java!!!	testPrintException() : void
        @SuppressWarnings("ThrowableInstanceNeverThrown")
        Throwable t = new Throwable("Ignore me.");

        StringWriter sout = new StringWriter();
        t.printStackTrace(new PrintWriter(sout));

        t.printStackTrace(out);
        // t.printStackTrace();

        String[] lines = sout.toString().split("\\n");
        assertEquals(Arrays.asList(lines), out.lines);
!!!48358711.java!!!	testPrintObject() : void
        Object o = new Object();
        out.print(4);
        out.print(o);
        out.print(2);
        out.flush();
        assertEquals(Arrays.asList("4" + o + "2"), out.lines);
!!!48358839.java!!!	testPrintlnObject() : void
        Object o = new Object();
        out.print(4);
        out.println(o);
        out.print(2);
        out.flush();
        assertEquals(Arrays.asList("4" + o, "2"), out.lines);
!!!48358967.java!!!	testPrintf() : void
        out.printf("Name: %s\nEmployer: %s", "Bob", "Google");
        assertEquals(Arrays.asList("Name: Bob"), out.lines);
        out.flush();
        assertEquals(Arrays.asList("Name: Bob", "Employer: Google"), out.lines);
!!!48359095.java!!!	testPrintInt() : void
        out.print(4);
        out.print(2);
        assertTrue(out.lines.isEmpty());
        out.flush();
        assertEquals(Collections.singletonList("42"), out.lines);
!!!48359223.java!!!	testPrintlnInt() : void
        out.println(4);
        out.println(2);
        assertEquals(Arrays.asList("4", "2"), out.lines);
!!!48359351.java!!!	testPrintCharArray() : void
        out.print("Foo\nBar\nTee".toCharArray());
        assertEquals(Arrays.asList("Foo", "Bar"), out.lines);
        out.flush();
        assertEquals(Arrays.asList("Foo", "Bar", "Tee"), out.lines);
!!!48359479.java!!!	testPrintString() : void
        out.print("Foo\nBar\nTee");
        assertEquals(Arrays.asList("Foo", "Bar"), out.lines);
        out.flush();
        assertEquals(Arrays.asList("Foo", "Bar", "Tee"), out.lines);
!!!48359607.java!!!	testPrintlnCharArray() : void
        out.println("Foo\nBar\nTee".toCharArray());
        assertEquals(Arrays.asList("Foo", "Bar", "Tee"), out.lines);
!!!48359735.java!!!	testPrintlnString() : void
        out.println("Foo\nBar\nTee");
        assertEquals(Arrays.asList("Foo", "Bar", "Tee"), out.lines);
!!!48359863.java!!!	testPrintlnStringWithBufferedData() : void
        out.print(5);
        out.println("Foo\nBar\nTee");
        assertEquals(Arrays.asList("5Foo", "Bar", "Tee"), out.lines);
!!!48359991.java!!!	testAppend() : void
        out.append("Foo\n")
            .append('4')
            .append('\n')
            .append("Bar", 1, 2)
            .append('\n');
        assertEquals(Arrays.asList("Foo", "4", "a"), out.lines);
!!!48360119.java!!!	testMultiByteCharactersSpanningBuffers() : void
        // assume 3*1000 bytes won't fit in LoggingPrintStream's internal buffer
        StringBuilder builder = new StringBuilder();
        for (int i = 0; i < 1000; i++) {
            builder.append("\u20AC"); // a Euro character; 3 bytes in UTF-8
        }
        String expected = builder.toString();

        out.write(expected.getBytes("UTF-8"));
        out.flush();
        assertEquals(Arrays.asList(expected), out.lines);
!!!48360247.java!!!	testWriteOneByteAtATimeMultibyteCharacters() : void
        String expected = " \u20AC  \u20AC   \u20AC    \u20AC     ";
        for (byte b : expected.getBytes()) {
            out.write(b);
        }
        out.flush();
        assertEquals(Arrays.asList(expected), out.lines);
!!!48360375.java!!!	testWriteByteArrayAtATimeMultibyteCharacters() : void
        String expected = " \u20AC  \u20AC   \u20AC    \u20AC     ";
        out.write(expected.getBytes());
        out.flush();
        assertEquals(Arrays.asList(expected), out.lines);
!!!48360503.java!!!	testWriteWithOffsetsMultibyteCharacters() : void
        String expected = " \u20AC  \u20AC   \u20AC    \u20AC     ";
        byte[] bytes = expected.getBytes();
        int i = 0;
        while (i < bytes.length - 5) {
            out.write(bytes, i, 5);
            i += 5;
        }
        out.write(bytes, i, bytes.length - i);
        out.flush();
        assertEquals(Arrays.asList(expected), out.lines);
!!!48360631.java!!!	testWriteFlushesOnNewlines() : void
        String a = " \u20AC  \u20AC ";
        String b = "  \u20AC    \u20AC  ";
        String c = "   ";
        String toWrite = a + "\n" + b + "\n" + c;
        out.write(toWrite.getBytes());
        out.flush();
        assertEquals(Arrays.asList(a, b, c), out.lines);
