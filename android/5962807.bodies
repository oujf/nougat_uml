class ArrayUtilsTest
!!!48368055.java!!!	testUnstableRemoveIf() : void
        java.util.function.Predicate<Object> isNull = new java.util.function.Predicate<Object>() {
            @Override
            public boolean test(Object o) {
                return o == null;
            }
        };

        final Object a = new Object();
        final Object b = new Object();
        final Object c = new Object();

        ArrayList<Object> collection = null;
        assertEquals(0, ArrayUtils.unstableRemoveIf(collection, isNull));

        collection = new ArrayList<>();
        assertEquals(0, ArrayUtils.unstableRemoveIf(collection, isNull));

        collection = new ArrayList<>(Collections.singletonList(a));
        assertEquals(0, ArrayUtils.unstableRemoveIf(collection, isNull));
        assertEquals(1, collection.size());
        assertTrue(collection.contains(a));

        collection = new ArrayList<>(Collections.singletonList(null));
        assertEquals(1, ArrayUtils.unstableRemoveIf(collection, isNull));
        assertEquals(0, collection.size());

        collection = new ArrayList<>(Arrays.asList(a, b));
        assertEquals(0, ArrayUtils.unstableRemoveIf(collection, isNull));
        assertEquals(2, collection.size());
        assertTrue(collection.contains(a));
        assertTrue(collection.contains(b));

        collection = new ArrayList<>(Arrays.asList(a, null));
        assertEquals(1, ArrayUtils.unstableRemoveIf(collection, isNull));
        assertEquals(1, collection.size());
        assertTrue(collection.contains(a));

        collection = new ArrayList<>(Arrays.asList(null, a));
        assertEquals(1, ArrayUtils.unstableRemoveIf(collection, isNull));
        assertEquals(1, collection.size());
        assertTrue(collection.contains(a));

        collection = new ArrayList<>(Arrays.asList(null, null));
        assertEquals(2, ArrayUtils.unstableRemoveIf(collection, isNull));
        assertEquals(0, collection.size());

        collection = new ArrayList<>(Arrays.asList(a, b, c));
        assertEquals(0, ArrayUtils.unstableRemoveIf(collection, isNull));
        assertEquals(3, collection.size());
        assertTrue(collection.contains(a));
        assertTrue(collection.contains(b));
        assertTrue(collection.contains(c));

        collection = new ArrayList<>(Arrays.asList(a, b, null));
        assertEquals(1, ArrayUtils.unstableRemoveIf(collection, isNull));
        assertEquals(2, collection.size());
        assertTrue(collection.contains(a));
        assertTrue(collection.contains(b));

        collection = new ArrayList<>(Arrays.asList(a, null, b));
        assertEquals(1, ArrayUtils.unstableRemoveIf(collection, isNull));
        assertEquals(2, collection.size());
        assertTrue(collection.contains(a));
        assertTrue(collection.contains(b));

        collection = new ArrayList<>(Arrays.asList(null, a, b));
        assertEquals(1, ArrayUtils.unstableRemoveIf(collection, isNull));
        assertEquals(2, collection.size());
        assertTrue(collection.contains(a));
        assertTrue(collection.contains(b));

        collection = new ArrayList<>(Arrays.asList(a, null, null));
        assertEquals(2, ArrayUtils.unstableRemoveIf(collection, isNull));
        assertEquals(1, collection.size());
        assertTrue(collection.contains(a));

        collection = new ArrayList<>(Arrays.asList(null, null, a));
        assertEquals(2, ArrayUtils.unstableRemoveIf(collection, isNull));
        assertEquals(1, collection.size());
        assertTrue(collection.contains(a));

        collection = new ArrayList<>(Arrays.asList(null, a, null));
        assertEquals(2, ArrayUtils.unstableRemoveIf(collection, isNull));
        assertEquals(1, collection.size());
        assertTrue(collection.contains(a));

        collection = new ArrayList<>(Arrays.asList(null, null, null));
        assertEquals(3, ArrayUtils.unstableRemoveIf(collection, isNull));
        assertEquals(0, collection.size());
