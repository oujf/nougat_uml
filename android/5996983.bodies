class MonitorRunnable
!!!68877367.java!!!	MonitorRunnable(inout svcmonitor : SvcMonitor)
            this.svcmonitor = svcmonitor;
            this.period = svcmonitor.period;
            javaPID = getPIDof(svcmonitor.javaProc);
            halPID = getPIDof(svcmonitor.halProc);
            java_time_old = getPsTime(javaPID);
            hal_time_old = getPsTime(halPID);
            cpu_time_old = getPsTime("");
            javaProcTAG = String.valueOf(svcmonitor.javaProc.toCharArray());
!!!68877495.java!!!	run() : void
            if (halPID.isEmpty() || javaPID.isEmpty()) {
                Log.d(javaProcTAG, "No such process: " +
                        (halPID.isEmpty() ? svcmonitor.halProc : svcmonitor.javaProc));
                return;
            }
            while (!Thread.interrupted()) {
                calculateUsage();
                SystemClock.sleep(period);
            }
            Log.d(TAG, "Stopping monitor thread");
!!!68877623.java!!!	calculateUsage() : void
            long java_time = getPsTime(javaPID);
            long hal_time = getPsTime(halPID);
            long cpu_time = getPsTime("");

            if (cpu_time_old >= 0) {
                float java_diff = (float) (java_time - java_time_old);
                float hal_diff = (float) (hal_time - hal_time_old);
                float cpu_diff = (float) (cpu_time - cpu_time_old);
                Log.w(javaProcTAG, "\n----------------\n");
                Log.w(javaProcTAG, "JAVA level CPU: "
                        + (java_diff * 100.0 / cpu_diff) + "%\n");
                Log.w(javaProcTAG, " HAL level CPU: "
                        + (hal_diff * 100.0 / cpu_diff) + "%\n");
                Log.w(javaProcTAG, " SYS level CPU: "
                        + ((java_diff + hal_diff) * 100.0 / cpu_diff) + "%\n");
            } else {
                Log.w(TAG, "Waiting for status\n");
            }

            java_time_old = java_time;
            hal_time_old = hal_time;
            cpu_time_old = cpu_time;
!!!68877751.java!!!	getPIDof(inout psName : String) : String
            String pid = "";

            try {
                String[] cmd = {"/system/bin/sh", "-c", "ps | grep " + psName};
                Process ps = Runtime.getRuntime().exec(cmd);
                BufferedReader in = new BufferedReader(
                        new InputStreamReader(ps.getInputStream()));
                String temp = in.readLine();
                if (temp == null || temp.isEmpty())
                    throw new IOException("No such process: " + psName);
                pid = temp.split(" +")[1];
                in.close();
            } catch (IOException e) {
                Log.d(javaProcTAG, "Error finding PID of process: " + psName + "\n", e);
            }
            return pid;
!!!68877879.java!!!	getPsTime(inout pid : String) : long
            String psStat = getPsStat("/" + pid);
            String[] statBreakDown = psStat.split(" +");
            long psTime;

            if (pid.isEmpty()) {
                psTime = Long.parseLong(statBreakDown[1])
                        + Long.parseLong(statBreakDown[2])
                        + Long.parseLong(statBreakDown[3])
                        + Long.parseLong(statBreakDown[4]);
            } else {
                psTime = Long.parseLong(statBreakDown[13])
                        + Long.parseLong(statBreakDown[14]);
            }

            return psTime;
!!!68878007.java!!!	getPsStat(inout psname : String) : String
            String stat = "";
            try {
                FileInputStream fs = new FileInputStream("/proc" + psname + "/stat");
                BufferedReader br = new BufferedReader(new InputStreamReader(fs));
                stat = br.readLine();
                fs.close();
            } catch (IOException e) {
                Log.d(TAG, "Error retreiving stat. \n");
            }
            return stat;
