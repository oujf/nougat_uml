class SurfaceTexture
!!!69081399.java!!!	SurfaceTexture(in texName : int)
        this(texName, false);
!!!69081527.java!!!	SurfaceTexture(in texName : int, inout singleBufferMode : boolean)
        mCreatorLooper = Looper.myLooper();
        nativeInit(false, texName, singleBufferMode, new WeakReference<SurfaceTexture>(this));
!!!69081655.java!!!	SurfaceTexture(inout singleBufferMode : boolean)
        mCreatorLooper = Looper.myLooper();
        nativeInit(true, 0, singleBufferMode, new WeakReference<SurfaceTexture>(this));
!!!69081783.java!!!	setOnFrameAvailableListener(inout listener : SurfaceTexture::OnFrameAvailableListener) : void
        setOnFrameAvailableListener(listener, null);
!!!69081911.java!!!	setOnFrameAvailableListener(in listener : SurfaceTexture::OnFrameAvailableListener, inout handler : Handler) : void
        if (listener != null) {
            // Although we claim the thread is arbitrary, earlier implementation would
            // prefer to send the callback on the creating looper or the main looper
            // so we preserve this behavior here.
            Looper looper = handler != null ? handler.getLooper() :
                    mCreatorLooper != null ? mCreatorLooper : Looper.getMainLooper();
            mOnFrameAvailableHandler = new Handler(looper, null, true /*async*/) {
                @Override
                public void handleMessage(Message msg) {
                    listener.onFrameAvailable(SurfaceTexture.this);
                }
            };
        } else {
            mOnFrameAvailableHandler = null;
        }
!!!69082039.java!!!	setDefaultBufferSize(in width : int, in height : int) : void
        nativeSetDefaultBufferSize(width, height);
!!!69082167.java!!!	updateTexImage() : void
        nativeUpdateTexImage();
!!!69082295.java!!!	releaseTexImage() : void
        nativeReleaseTexImage();
!!!69082423.java!!!	detachFromGLContext() : void
        int err = nativeDetachFromGLContext();
        if (err != 0) {
            throw new RuntimeException("Error during detachFromGLContext (see logcat for details)");
        }
!!!69082551.java!!!	attachToGLContext(in texName : int) : void
        int err = nativeAttachToGLContext(texName);
        if (err != 0) {
            throw new RuntimeException("Error during attachToGLContext (see logcat for details)");
        }
!!!69082679.java!!!	getTransformMatrix(inout mtx : float [[]]) : void
        // Note we intentionally don't check mtx for null, so this will result in a
        // NullPointerException. But it's safe because it happens before the call to native.
        if (mtx.length != 16) {
            throw new IllegalArgumentException();
        }
        nativeGetTransformMatrix(mtx);
!!!69082807.java!!!	getTimestamp() : long
        return nativeGetTimestamp();
!!!69082935.java!!!	release() : void
        nativeRelease();
!!!69083063.java!!!	isReleased() : boolean
        return nativeIsReleased();
!!!69083191.java!!!	finalize() : void
        try {
            nativeFinalize();
        } finally {
            super.finalize();
        }
!!!69083319.java!!!	postEventFromNative(inout weakSelf : WeakReference<SurfaceTexture>) : void
        SurfaceTexture st = weakSelf.get();
        if (st != null) {
            Handler handler = st.mOnFrameAvailableHandler;
            if (handler != null) {
                handler.sendEmptyMessage(0);
            }
        }
