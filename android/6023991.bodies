class VectorDrawableState
!!!69235767.java!!!	VectorDrawableState(inout copy : VectorDrawable::VectorDrawableState)
            if (copy != null) {
                mThemeAttrs = copy.mThemeAttrs;
                mChangingConfigurations = copy.mChangingConfigurations;
                mTint = copy.mTint;
                mTintMode = copy.mTintMode;
                mAutoMirrored = copy.mAutoMirrored;
                mRootGroup = new VGroup(copy.mRootGroup, mVGTargetsMap);
                createNativeTreeFromCopy(copy, mRootGroup);

                mBaseWidth = copy.mBaseWidth;
                mBaseHeight = copy.mBaseHeight;
                setViewportSize(copy.mViewportWidth, copy.mViewportHeight);
                mOpticalInsets = copy.mOpticalInsets;

                mRootName = copy.mRootName;
                mDensity = copy.mDensity;
                if (copy.mRootName != null) {
                    mVGTargetsMap.put(copy.mRootName, this);
                }
                onTreeConstructionFinished();
            }
!!!69235895.java!!!	createNativeTree(inout rootGroup : VectorDrawable::VGroup) : void
            mNativeTree = new VirtualRefBasePtr(nCreateTree(rootGroup.mNativePtr));
            // Register tree size
            VMRuntime.getRuntime().registerNativeAllocation(NATIVE_ALLOCATION_SIZE);
!!!69236023.java!!!	createNativeTreeFromCopy(inout copy : VectorDrawable::VectorDrawableState, inout rootGroup : VectorDrawable::VGroup) : void
            mNativeTree = new VirtualRefBasePtr(nCreateTreeFromCopy(
                    copy.mNativeTree.get(), rootGroup.mNativePtr));
            // Register tree size
            VMRuntime.getRuntime().registerNativeAllocation(NATIVE_ALLOCATION_SIZE);
!!!69236151.java!!!	onTreeConstructionFinished() : void
            mRootGroup.setTree(mNativeTree);
            mAllocationOfAllNodes = mRootGroup.getNativeSize();
            VMRuntime.getRuntime().registerNativeAllocation(mAllocationOfAllNodes);
!!!69236279.java!!!	getNativeRenderer() : long
            if (mNativeTree == null) {
                return 0;
            }
            return mNativeTree.get();
!!!69236407.java!!!	canReuseCache() : boolean
            if (!mCacheDirty
                    && mCachedThemeAttrs == mThemeAttrs
                    && mCachedTint == mTint
                    && mCachedTintMode == mTintMode
                    && mCachedAutoMirrored == mAutoMirrored) {
                return true;
            }
            updateCacheStates();
            return false;
!!!69236535.java!!!	updateCacheStates() : void
            // Use shallow copy here and shallow comparison in canReuseCache(),
            // likely hit cache miss more, but practically not much difference.
            mCachedThemeAttrs = mThemeAttrs;
            mCachedTint = mTint;
            mCachedTintMode = mTintMode;
            mCachedAutoMirrored = mAutoMirrored;
            mCacheDirty = false;
!!!69236663.java!!!	applyTheme(inout t : Resources::Theme) : void
            mRootGroup.applyTheme(t);
!!!69236791.java!!!	canApplyTheme() : boolean
            return mThemeAttrs != null
                    || (mRootGroup != null && mRootGroup.canApplyTheme())
                    || (mTint != null && mTint.canApplyTheme())
                    || super.canApplyTheme();
!!!69236919.java!!!	VectorDrawableState()
            mRootGroup = new VGroup();
            createNativeTree(mRootGroup);
!!!69237047.java!!!	newDrawable() : Drawable
            return new VectorDrawable(this, null);
!!!69237175.java!!!	newDrawable(inout res : Resources) : Drawable
            return new VectorDrawable(this, res);
!!!69237303.java!!!	getChangingConfigurations() : int
            return mChangingConfigurations
                    | (mTint != null ? mTint.getChangingConfigurations() : 0);
!!!69237431.java!!!	isStateful() : boolean
            return (mTint != null && mTint.isStateful())
                    || (mRootGroup != null && mRootGroup.isStateful());
!!!69237559.java!!!	setViewportSize(in viewportWidth : float, in viewportHeight : float) : void
            mViewportWidth = viewportWidth;
            mViewportHeight = viewportHeight;
            nSetRendererViewportSize(getNativeRenderer(), viewportWidth, viewportHeight);
!!!69237687.java!!!	setDensity(in targetDensity : int) : boolean
            if (mDensity != targetDensity) {
                final int sourceDensity = mDensity;
                mDensity = targetDensity;
                applyDensityScaling(sourceDensity, targetDensity);
                return true;
            }
            return false;
!!!69237815.java!!!	applyDensityScaling(in sourceDensity : int, in targetDensity : int) : void
            mBaseWidth = Drawable.scaleFromDensity(mBaseWidth, sourceDensity, targetDensity);
            mBaseHeight = Drawable.scaleFromDensity(mBaseHeight, sourceDensity, targetDensity);

            final int insetLeft = Drawable.scaleFromDensity(
                    mOpticalInsets.left, sourceDensity, targetDensity, false);
            final int insetTop = Drawable.scaleFromDensity(
                    mOpticalInsets.top, sourceDensity, targetDensity, false);
            final int insetRight = Drawable.scaleFromDensity(
                    mOpticalInsets.right, sourceDensity, targetDensity, false);
            final int insetBottom = Drawable.scaleFromDensity(
                    mOpticalInsets.bottom, sourceDensity, targetDensity, false);
            mOpticalInsets = Insets.of(insetLeft, insetTop, insetRight, insetBottom);
!!!69237943.java!!!	onStateChange(inout stateSet : int [[]]) : boolean
            return mRootGroup.onStateChange(stateSet);
!!!69238071.java!!!	finalize() : void
            super.finalize();
            int bitmapCacheSize = mLastHWCachePixelCount * 4 + mLastSWCachePixelCount * 4;
            VMRuntime.getRuntime().registerNativeFree(NATIVE_ALLOCATION_SIZE
                    + mAllocationOfAllNodes + bitmapCacheSize);
!!!69238199.java!!!	setAlpha(in alpha : float) : boolean
            return nSetRootAlpha(mNativeTree.get(), alpha);
!!!69238327.java!!!	getAlpha() : float
            return nGetRootAlpha(mNativeTree.get());
