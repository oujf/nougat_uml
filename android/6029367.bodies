class TransitionDrawable
!!!69229623.java!!!	TransitionDrawable(inout layers : Drawable [[]])
        this(new TransitionState(null, null, null), layers);
!!!69229751.java!!!	TransitionDrawable()
        this(new TransitionState(null, null, null), (Resources) null);
!!!69229879.java!!!	TransitionDrawable(inout state : TransitionDrawable::TransitionState, inout res : Resources)
        super(state, res);
!!!69230007.java!!!	TransitionDrawable(inout state : TransitionDrawable::TransitionState, inout layers : Drawable [[]])
        super(layers, state);
!!!69230135.java!!!	createConstantState(inout state : LayerDrawable::LayerState, inout res : Resources) : LayerDrawable::LayerState
        return new TransitionState((TransitionState) state, this, res);
!!!69230263.java!!!	startTransition(in durationMillis : int) : void
        mFrom = 0;
        mTo = 255;
        mAlpha = 0;
        mDuration = mOriginalDuration = durationMillis;
        mReverse = false;
        mTransitionState = TRANSITION_STARTING;
        invalidateSelf();
!!!69230391.java!!!	resetTransition() : void
        mAlpha = 0;
        mTransitionState = TRANSITION_NONE;
        invalidateSelf();
!!!69230519.java!!!	reverseTransition(in duration : int) : void
        final long time = SystemClock.uptimeMillis();
        // Animation is over
        if (time - mStartTimeMillis > mDuration) {
            if (mTo == 0) {
                mFrom = 0;
                mTo = 255;
                mAlpha = 0;
                mReverse = false;
            } else {
                mFrom = 255;
                mTo = 0;
                mAlpha = 255;
                mReverse = true;
            }
            mDuration = mOriginalDuration = duration;
            mTransitionState = TRANSITION_STARTING;
            invalidateSelf();
            return;
        }

        mReverse = !mReverse;
        mFrom = mAlpha;
        mTo = mReverse ? 0 : 255;
        mDuration = (int) (mReverse ? time - mStartTimeMillis :
                mOriginalDuration - (time - mStartTimeMillis));
        mTransitionState = TRANSITION_STARTING;
!!!69230647.java!!!	draw(inout canvas : Canvas) : void
        boolean done = true;

        switch (mTransitionState) {
            case TRANSITION_STARTING:
                mStartTimeMillis = SystemClock.uptimeMillis();
                done = false;
                mTransitionState = TRANSITION_RUNNING;
                break;

            case TRANSITION_RUNNING:
                if (mStartTimeMillis >= 0) {
                    float normalized = (float)
                            (SystemClock.uptimeMillis() - mStartTimeMillis) / mDuration;
                    done = normalized >= 1.0f;
                    normalized = Math.min(normalized, 1.0f);
                    mAlpha = (int) (mFrom  + (mTo - mFrom) * normalized);
                }
                break;
        }

        final int alpha = mAlpha;
        final boolean crossFade = mCrossFade;
        final ChildDrawable[] array = mLayerState.mChildren;

        if (done) {
            // the setAlpha() calls below trigger invalidation and redraw. If we're done, just draw
            // the appropriate drawable[s] and return
            if (!crossFade || alpha == 0) {
                array[0].mDrawable.draw(canvas);
            }
            if (alpha == 0xFF) {
                array[1].mDrawable.draw(canvas);
            }
            return;
        }

        Drawable d;
        d = array[0].mDrawable;
        if (crossFade) {
            d.setAlpha(255 - alpha);
        }
        d.draw(canvas);
        if (crossFade) {
            d.setAlpha(0xFF);
        }

        if (alpha > 0) {
            d = array[1].mDrawable;
            d.setAlpha(alpha);
            d.draw(canvas);
            d.setAlpha(0xFF);
        }

        if (!done) {
            invalidateSelf();
        }
!!!69230775.java!!!	setCrossFadeEnabled(inout enabled : boolean) : void
        mCrossFade = enabled;
!!!69230903.java!!!	isCrossFadeEnabled() : boolean
        return mCrossFade;
