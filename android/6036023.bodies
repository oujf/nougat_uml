class Credentials
!!!69284279.java!!!	convertToPem(inout  : Certificate...objects) : byte
        ByteArrayOutputStream bao = new ByteArrayOutputStream();
        Writer writer = new OutputStreamWriter(bao, StandardCharsets.US_ASCII);
        PemWriter pw = new PemWriter(writer);
        for (Certificate o : objects) {
            pw.writeObject(new PemObject("CERTIFICATE", o.getEncoded()));
        }
        pw.close();
        return bao.toByteArray();
!!!69284407.java!!!	convertFromPem(inout bytes : byte [[]]) : List<X509Certificate>
        ByteArrayInputStream bai = new ByteArrayInputStream(bytes);
        Reader reader = new InputStreamReader(bai, StandardCharsets.US_ASCII);
        PemReader pr = new PemReader(reader);

        try {
            CertificateFactory cf = CertificateFactory.getInstance("X509");

            List<X509Certificate> result = new ArrayList<X509Certificate>();
            PemObject o;
            while ((o = pr.readPemObject()) != null) {
                if (o.getType().equals("CERTIFICATE")) {
                    Certificate c = cf.generateCertificate(new ByteArrayInputStream(o.getContent()));
                    result.add((X509Certificate) c);
                } else {
                    throw new IllegalArgumentException("Unknown type " + o.getType());
                }
            }
            return result;
        } finally {
            pr.close();
        }
!!!69284535.java!!!	getInstance() : Credentials
        if (singleton == null) {
            singleton = new Credentials();
        }
        return singleton;
!!!69284663.java!!!	unlock(inout context : Context) : void
        try {
            Intent intent = new Intent(UNLOCK_ACTION);
            context.startActivity(intent);
        } catch (ActivityNotFoundException e) {
            Log.w(LOGTAG, e.toString());
        }
!!!69284791.java!!!	install(inout context : Context) : void
        try {
            Intent intent = KeyChain.createInstallIntent();
            context.startActivity(intent);
        } catch (ActivityNotFoundException e) {
            Log.w(LOGTAG, e.toString());
        }
!!!69284919.java!!!	install(inout context : Context, inout pair : KeyPair) : void
        try {
            Intent intent = KeyChain.createInstallIntent();
            intent.putExtra(EXTRA_PRIVATE_KEY, pair.getPrivate().getEncoded());
            intent.putExtra(EXTRA_PUBLIC_KEY, pair.getPublic().getEncoded());
            context.startActivity(intent);
        } catch (ActivityNotFoundException e) {
            Log.w(LOGTAG, e.toString());
        }
!!!69285047.java!!!	install(inout context : Context, inout type : String, inout value : byte [[]]) : void
        try {
            Intent intent = KeyChain.createInstallIntent();
            intent.putExtra(type, value);
            context.startActivity(intent);
        } catch (ActivityNotFoundException e) {
            Log.w(LOGTAG, e.toString());
        }
!!!69285175.java!!!	deleteAllTypesForAlias(inout keystore : KeyStore, inout alias : String) : boolean
        return deleteAllTypesForAlias(keystore, alias, KeyStore.UID_SELF);
!!!69285303.java!!!	deleteAllTypesForAlias(inout keystore : KeyStore, inout alias : String, in uid : int) : boolean
        /*
         * Make sure every type is deleted. There can be all three types, so
         * don't use a conditional here.
         */
        return deletePrivateKeyTypeForAlias(keystore, alias, uid)
                & deleteSecretKeyTypeForAlias(keystore, alias, uid)
                & deleteCertificateTypesForAlias(keystore, alias, uid);
!!!69285431.java!!!	deleteCertificateTypesForAlias(inout keystore : KeyStore, inout alias : String) : boolean
        return deleteCertificateTypesForAlias(keystore, alias, KeyStore.UID_SELF);
!!!69285559.java!!!	deleteCertificateTypesForAlias(inout keystore : KeyStore, inout alias : String, in uid : int) : boolean
        /*
         * Make sure every certificate type is deleted. There can be two types,
         * so don't use a conditional here.
         */
        return keystore.delete(Credentials.USER_CERTIFICATE + alias, uid)
                & keystore.delete(Credentials.CA_CERTIFICATE + alias, uid);
!!!69285687.java!!!	deletePrivateKeyTypeForAlias(inout keystore : KeyStore, inout alias : String) : boolean
        return deletePrivateKeyTypeForAlias(keystore, alias, KeyStore.UID_SELF);
!!!69285815.java!!!	deletePrivateKeyTypeForAlias(inout keystore : KeyStore, inout alias : String, in uid : int) : boolean
        return keystore.delete(Credentials.USER_PRIVATE_KEY + alias, uid);
!!!69285943.java!!!	deleteSecretKeyTypeForAlias(inout keystore : KeyStore, inout alias : String) : boolean
        return deleteSecretKeyTypeForAlias(keystore, alias, KeyStore.UID_SELF);
!!!69286071.java!!!	deleteSecretKeyTypeForAlias(inout keystore : KeyStore, inout alias : String, in uid : int) : boolean
        return keystore.delete(Credentials.USER_SECRET_KEY + alias, uid);
