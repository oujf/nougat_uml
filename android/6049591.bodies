class Builder
!!!69358775.java!!!	Builder(inout keystoreAlias : String, in purposes : int)
            if (keystoreAlias == null) {
                throw new NullPointerException("keystoreAlias == null");
            } else if (keystoreAlias.isEmpty()) {
                throw new IllegalArgumentException("keystoreAlias must not be empty");
            }
            mKeystoreAlias = keystoreAlias;
            mPurposes = purposes;
!!!69358903.java!!!	setUid(in uid : int) : KeyGenParameterSpec::Builder
            mUid = uid;
            return this;
!!!69359031.java!!!	setKeySize(in keySize : int) : KeyGenParameterSpec::Builder
            if (keySize < 0) {
                throw new IllegalArgumentException("keySize < 0");
            }
            mKeySize = keySize;
            return this;
!!!69359159.java!!!	setAlgorithmParameterSpec(inout spec : AlgorithmParameterSpec) : KeyGenParameterSpec::Builder
            if (spec == null) {
                throw new NullPointerException("spec == null");
            }
            mSpec = spec;
            return this;
!!!69359287.java!!!	setCertificateSubject(inout subject : X500Principal) : KeyGenParameterSpec::Builder
            if (subject == null) {
                throw new NullPointerException("subject == null");
            }
            mCertificateSubject = subject;
            return this;
!!!69359415.java!!!	setCertificateSerialNumber(inout serialNumber : BigInteger) : KeyGenParameterSpec::Builder
            if (serialNumber == null) {
                throw new NullPointerException("serialNumber == null");
            }
            mCertificateSerialNumber = serialNumber;
            return this;
!!!69359543.java!!!	setCertificateNotBefore(inout date : Date) : KeyGenParameterSpec::Builder
            if (date == null) {
                throw new NullPointerException("date == null");
            }
            mCertificateNotBefore = Utils.cloneIfNotNull(date);
            return this;
!!!69359671.java!!!	setCertificateNotAfter(inout date : Date) : KeyGenParameterSpec::Builder
            if (date == null) {
                throw new NullPointerException("date == null");
            }
            mCertificateNotAfter = Utils.cloneIfNotNull(date);
            return this;
!!!69359799.java!!!	setKeyValidityStart(inout startDate : Date) : KeyGenParameterSpec::Builder
            mKeyValidityStart = Utils.cloneIfNotNull(startDate);
            return this;
!!!69359927.java!!!	setKeyValidityEnd(inout endDate : Date) : KeyGenParameterSpec::Builder
            setKeyValidityForOriginationEnd(endDate);
            setKeyValidityForConsumptionEnd(endDate);
            return this;
!!!69360055.java!!!	setKeyValidityForOriginationEnd(inout endDate : Date) : KeyGenParameterSpec::Builder
            mKeyValidityForOriginationEnd = Utils.cloneIfNotNull(endDate);
            return this;
!!!69360183.java!!!	setKeyValidityForConsumptionEnd(inout endDate : Date) : KeyGenParameterSpec::Builder
            mKeyValidityForConsumptionEnd = Utils.cloneIfNotNull(endDate);
            return this;
!!!69360311.java!!!	setDigests(inout  : String...digests) : KeyGenParameterSpec::Builder
            mDigests = ArrayUtils.cloneIfNotEmpty(digests);
            return this;
!!!69360439.java!!!	setEncryptionPaddings(inout  : String...paddings) : KeyGenParameterSpec::Builder
            mEncryptionPaddings = ArrayUtils.cloneIfNotEmpty(paddings);
            return this;
!!!69360567.java!!!	setSignaturePaddings(inout  : String...paddings) : KeyGenParameterSpec::Builder
            mSignaturePaddings = ArrayUtils.cloneIfNotEmpty(paddings);
            return this;
!!!69360695.java!!!	setBlockModes(inout  : String...blockModes) : KeyGenParameterSpec::Builder
            mBlockModes = ArrayUtils.cloneIfNotEmpty(blockModes);
            return this;
!!!69360823.java!!!	setRandomizedEncryptionRequired(inout required : boolean) : KeyGenParameterSpec::Builder
            mRandomizedEncryptionRequired = required;
            return this;
!!!69360951.java!!!	setUserAuthenticationRequired(inout required : boolean) : KeyGenParameterSpec::Builder
            mUserAuthenticationRequired = required;
            return this;
!!!69361079.java!!!	setUserAuthenticationValidityDurationSeconds(in seconds : int) : KeyGenParameterSpec::Builder
            if (seconds < -1) {
                throw new IllegalArgumentException("seconds must be -1 or larger");
            }
            mUserAuthenticationValidityDurationSeconds = seconds;
            return this;
!!!69361207.java!!!	setAttestationChallenge(inout attestationChallenge : byte [[]]) : KeyGenParameterSpec::Builder
            mAttestationChallenge = attestationChallenge;
            return this;
!!!69361335.java!!!	setUniqueIdIncluded(inout uniqueIdIncluded : boolean) : KeyGenParameterSpec::Builder
            mUniqueIdIncluded = uniqueIdIncluded;
            return this;
!!!69361463.java!!!	setUserAuthenticationValidWhileOnBody(inout remainsValid : boolean) : KeyGenParameterSpec::Builder
            mUserAuthenticationValidWhileOnBody = remainsValid;
            return this;
!!!69361591.java!!!	setInvalidatedByBiometricEnrollment(inout invalidateKey : boolean) : KeyGenParameterSpec::Builder
            mInvalidatedByBiometricEnrollment = invalidateKey;
            return this;
!!!69361719.java!!!	build() : KeyGenParameterSpec
            return new KeyGenParameterSpec(
                    mKeystoreAlias,
                    mUid,
                    mKeySize,
                    mSpec,
                    mCertificateSubject,
                    mCertificateSerialNumber,
                    mCertificateNotBefore,
                    mCertificateNotAfter,
                    mKeyValidityStart,
                    mKeyValidityForOriginationEnd,
                    mKeyValidityForConsumptionEnd,
                    mPurposes,
                    mDigests,
                    mEncryptionPaddings,
                    mSignaturePaddings,
                    mBlockModes,
                    mRandomizedEncryptionRequired,
                    mUserAuthenticationRequired,
                    mUserAuthenticationValidityDurationSeconds,
                    mAttestationChallenge,
                    mUniqueIdIncluded,
                    mUserAuthenticationValidWhileOnBody,
                    mInvalidatedByBiometricEnrollment);
