class GnssMeasurement
!!!69425079.java!!!	GnssMeasurement()
        initialize();
!!!69425207.java!!!	set(inout measurement : GnssMeasurement) : void
        mFlags = measurement.mFlags;
        mSvid = measurement.mSvid;
        mConstellationType = measurement.mConstellationType;
        mTimeOffsetNanos = measurement.mTimeOffsetNanos;
        mState = measurement.mState;
        mReceivedSvTimeNanos = measurement.mReceivedSvTimeNanos;
        mReceivedSvTimeUncertaintyNanos = measurement.mReceivedSvTimeUncertaintyNanos;
        mCn0DbHz = measurement.mCn0DbHz;
        mPseudorangeRateMetersPerSecond = measurement.mPseudorangeRateMetersPerSecond;
        mPseudorangeRateUncertaintyMetersPerSecond =
                measurement.mPseudorangeRateUncertaintyMetersPerSecond;
        mAccumulatedDeltaRangeState = measurement.mAccumulatedDeltaRangeState;
        mAccumulatedDeltaRangeMeters = measurement.mAccumulatedDeltaRangeMeters;
        mAccumulatedDeltaRangeUncertaintyMeters =
                measurement.mAccumulatedDeltaRangeUncertaintyMeters;
        mCarrierFrequencyHz = measurement.mCarrierFrequencyHz;
        mCarrierCycles = measurement.mCarrierCycles;
        mCarrierPhase = measurement.mCarrierPhase;
        mCarrierPhaseUncertainty = measurement.mCarrierPhaseUncertainty;
        mMultipathIndicator = measurement.mMultipathIndicator;
        mSnrInDb = measurement.mSnrInDb;
!!!69425335.java!!!	reset() : void
        initialize();
!!!69425463.java!!!	getSvid() : int
        return mSvid;
!!!69425591.java!!!	setSvid(in value : int) : void
        mSvid = value;
!!!69425719.java!!!	getConstellationType() : int
        return mConstellationType;
!!!69425847.java!!!	setConstellationType(in value : int) : void
        mConstellationType = value;
!!!69425975.java!!!	getTimeOffsetNanos() : double
        return mTimeOffsetNanos;
!!!69426103.java!!!	setTimeOffsetNanos(in value : double) : void
        mTimeOffsetNanos = value;
!!!69426231.java!!!	getState() : int
        return mState;
!!!69426359.java!!!	setState(in value : int) : void
        mState = value;
!!!69426487.java!!!	getStateString() : String
        if (mState == STATE_UNKNOWN) {
            return "Unknown";
        }

        StringBuilder builder = new StringBuilder();
        if ((mState & STATE_CODE_LOCK) != 0) {
            builder.append("CodeLock|");
        }
        if ((mState & STATE_BIT_SYNC) != 0) {
            builder.append("BitSync|");
        }
        if ((mState & STATE_SUBFRAME_SYNC) != 0) {
            builder.append("SubframeSync|");
        }
        if ((mState & STATE_TOW_DECODED) != 0) {
            builder.append("TowDecoded|");
        }
        if ((mState & STATE_MSEC_AMBIGUOUS) != 0) {
            builder.append("MsecAmbiguous|");
        }
        if ((mState & STATE_SYMBOL_SYNC) != 0) {
            builder.append("SymbolSync|");
        }
        if ((mState & STATE_GLO_STRING_SYNC) != 0) {
            builder.append("GloStringSync|");
        }
        if ((mState & STATE_GLO_TOD_DECODED) != 0) {
            builder.append("GloTodDecoded|");
        }
        if ((mState & STATE_BDS_D2_BIT_SYNC) != 0) {
            builder.append("BdsD2BitSync|");
        }
        if ((mState & STATE_BDS_D2_SUBFRAME_SYNC) != 0) {
            builder.append("BdsD2SubframeSync|");
        }
        if ((mState & STATE_GAL_E1BC_CODE_LOCK) != 0) {
            builder.append("GalE1bcCodeLock|");
        }
        if ((mState & STATE_GAL_E1C_2ND_CODE_LOCK) != 0) {
            builder.append("E1c2ndCodeLock|");
        }
        if ((mState & STATE_GAL_E1B_PAGE_SYNC) != 0) {
            builder.append("GalE1bPageSync|");
        }
        if ((mState & STATE_SBAS_SYNC) != 0) {
            builder.append("SbasSync|");
        }

        int remainingStates = mState & ~STATE_ALL;
        if (remainingStates > 0) {
            builder.append("Other(");
            builder.append(Integer.toBinaryString(remainingStates));
            builder.append(")|");
        }
        builder.setLength(builder.length() - 1);
        return builder.toString();
!!!69426615.java!!!	getReceivedSvTimeNanos() : long
        return mReceivedSvTimeNanos;
!!!69426743.java!!!	setReceivedSvTimeNanos(in value : long) : void
        mReceivedSvTimeNanos = value;
!!!69426871.java!!!	getReceivedSvTimeUncertaintyNanos() : long
        return mReceivedSvTimeUncertaintyNanos;
!!!69426999.java!!!	setReceivedSvTimeUncertaintyNanos(in value : long) : void
        mReceivedSvTimeUncertaintyNanos = value;
!!!69427127.java!!!	getCn0DbHz() : double
        return mCn0DbHz;
!!!69427255.java!!!	setCn0DbHz(in value : double) : void
        mCn0DbHz = value;
!!!69427383.java!!!	getPseudorangeRateMetersPerSecond() : double
        return mPseudorangeRateMetersPerSecond;
!!!69427511.java!!!	setPseudorangeRateMetersPerSecond(in value : double) : void
        mPseudorangeRateMetersPerSecond = value;
!!!69427639.java!!!	getPseudorangeRateUncertaintyMetersPerSecond() : double
        return mPseudorangeRateUncertaintyMetersPerSecond;
!!!69427767.java!!!	setPseudorangeRateUncertaintyMetersPerSecond(in value : double) : void
        mPseudorangeRateUncertaintyMetersPerSecond = value;
!!!69427895.java!!!	getAccumulatedDeltaRangeState() : int
        return mAccumulatedDeltaRangeState;
!!!69428023.java!!!	setAccumulatedDeltaRangeState(in value : int) : void
        mAccumulatedDeltaRangeState = value;
!!!69428151.java!!!	getAccumulatedDeltaRangeStateString() : String
        if (mAccumulatedDeltaRangeState == ADR_STATE_UNKNOWN) {
            return "Unknown";
        }
        StringBuilder builder = new StringBuilder();
        if ((mAccumulatedDeltaRangeState & ADR_STATE_VALID) == ADR_STATE_VALID) {
            builder.append("Valid|");
        }
        if ((mAccumulatedDeltaRangeState & ADR_STATE_RESET) == ADR_STATE_RESET) {
            builder.append("Reset|");
        }
        if ((mAccumulatedDeltaRangeState & ADR_STATE_CYCLE_SLIP) == ADR_STATE_CYCLE_SLIP) {
            builder.append("CycleSlip|");
        }
        int remainingStates = mAccumulatedDeltaRangeState & ~ADR_ALL;
        if (remainingStates > 0) {
            builder.append("Other(");
            builder.append(Integer.toBinaryString(remainingStates));
            builder.append(")|");
        }
        builder.deleteCharAt(builder.length() - 1);
        return builder.toString();
!!!69428279.java!!!	getAccumulatedDeltaRangeMeters() : double
        return mAccumulatedDeltaRangeMeters;
!!!69428407.java!!!	setAccumulatedDeltaRangeMeters(in value : double) : void
        mAccumulatedDeltaRangeMeters = value;
!!!69428535.java!!!	getAccumulatedDeltaRangeUncertaintyMeters() : double
        return mAccumulatedDeltaRangeUncertaintyMeters;
!!!69428663.java!!!	setAccumulatedDeltaRangeUncertaintyMeters(in value : double) : void
        mAccumulatedDeltaRangeUncertaintyMeters = value;
!!!69428791.java!!!	hasCarrierFrequencyHz() : boolean
        return isFlagSet(HAS_CARRIER_FREQUENCY);
!!!69428919.java!!!	getCarrierFrequencyHz() : float
        return mCarrierFrequencyHz;
!!!69429047.java!!!	setCarrierFrequencyHz(in carrierFrequencyHz : float) : void
        setFlag(HAS_CARRIER_FREQUENCY);
        mCarrierFrequencyHz = carrierFrequencyHz;
!!!69429175.java!!!	resetCarrierFrequencyHz() : void
        resetFlag(HAS_CARRIER_FREQUENCY);
        mCarrierFrequencyHz = Float.NaN;
!!!69429303.java!!!	hasCarrierCycles() : boolean
        return isFlagSet(HAS_CARRIER_CYCLES);
!!!69429431.java!!!	getCarrierCycles() : long
        return mCarrierCycles;
!!!69429559.java!!!	setCarrierCycles(in value : long) : void
        setFlag(HAS_CARRIER_CYCLES);
        mCarrierCycles = value;
!!!69429687.java!!!	resetCarrierCycles() : void
        resetFlag(HAS_CARRIER_CYCLES);
        mCarrierCycles = Long.MIN_VALUE;
!!!69429815.java!!!	hasCarrierPhase() : boolean
        return isFlagSet(HAS_CARRIER_PHASE);
!!!69429943.java!!!	getCarrierPhase() : double
        return mCarrierPhase;
!!!69430071.java!!!	setCarrierPhase(in value : double) : void
        setFlag(HAS_CARRIER_PHASE);
        mCarrierPhase = value;
!!!69430199.java!!!	resetCarrierPhase() : void
        resetFlag(HAS_CARRIER_PHASE);
        mCarrierPhase = Double.NaN;
!!!69430327.java!!!	hasCarrierPhaseUncertainty() : boolean
        return isFlagSet(HAS_CARRIER_PHASE_UNCERTAINTY);
!!!69430455.java!!!	getCarrierPhaseUncertainty() : double
        return mCarrierPhaseUncertainty;
!!!69430583.java!!!	setCarrierPhaseUncertainty(in value : double) : void
        setFlag(HAS_CARRIER_PHASE_UNCERTAINTY);
        mCarrierPhaseUncertainty = value;
!!!69430711.java!!!	resetCarrierPhaseUncertainty() : void
        resetFlag(HAS_CARRIER_PHASE_UNCERTAINTY);
        mCarrierPhaseUncertainty = Double.NaN;
!!!69430839.java!!!	getMultipathIndicator() : int
        return mMultipathIndicator;
!!!69430967.java!!!	setMultipathIndicator(in value : int) : void
        mMultipathIndicator = value;
!!!69431095.java!!!	getMultipathIndicatorString() : String
        switch(mMultipathIndicator) {
            case MULTIPATH_INDICATOR_UNKNOWN:
                return "Unknown";
            case MULTIPATH_INDICATOR_DETECTED:
                return "Detected";
            case MULTIPATH_INDICATOR_NOT_USED:
                return "NotUsed";
            default:
                return "<Invalid:" + mMultipathIndicator + ">";
        }
!!!69431223.java!!!	hasSnrInDb() : boolean
        return isFlagSet(HAS_SNR);
!!!69431351.java!!!	getSnrInDb() : double
        return mSnrInDb;
!!!69431479.java!!!	setSnrInDb(in snrInDb : double) : void
        setFlag(HAS_SNR);
        mSnrInDb = snrInDb;
!!!69431607.java!!!	resetSnrInDb() : void
        resetFlag(HAS_SNR);
        mSnrInDb = Double.NaN;
!!!69431735.java!!!	writeToParcel(inout parcel : Parcel, in flags : int) : void
        parcel.writeInt(mFlags);
        parcel.writeInt(mSvid);
        parcel.writeInt(mConstellationType);
        parcel.writeDouble(mTimeOffsetNanos);
        parcel.writeInt(mState);
        parcel.writeLong(mReceivedSvTimeNanos);
        parcel.writeLong(mReceivedSvTimeUncertaintyNanos);
        parcel.writeDouble(mCn0DbHz);
        parcel.writeDouble(mPseudorangeRateMetersPerSecond);
        parcel.writeDouble(mPseudorangeRateUncertaintyMetersPerSecond);
        parcel.writeInt(mAccumulatedDeltaRangeState);
        parcel.writeDouble(mAccumulatedDeltaRangeMeters);
        parcel.writeDouble(mAccumulatedDeltaRangeUncertaintyMeters);
        parcel.writeFloat(mCarrierFrequencyHz);
        parcel.writeLong(mCarrierCycles);
        parcel.writeDouble(mCarrierPhase);
        parcel.writeDouble(mCarrierPhaseUncertainty);
        parcel.writeInt(mMultipathIndicator);
        parcel.writeDouble(mSnrInDb);
!!!69431863.java!!!	describeContents() : int
        return 0;
!!!69431991.java!!!	toString() : String
        final String format = "   %-29s = %s\n";
        final String formatWithUncertainty = "   %-29s = %-25s   %-40s = %s\n";
        StringBuilder builder = new StringBuilder("GnssMeasurement:\n");

        builder.append(String.format(format, "Svid", mSvid));
        builder.append(String.format(format, "ConstellationType", mConstellationType));
        builder.append(String.format(format, "TimeOffsetNanos", mTimeOffsetNanos));

        builder.append(String.format(format, "State", getStateString()));

        builder.append(String.format(
                formatWithUncertainty,
                "ReceivedSvTimeNanos",
                mReceivedSvTimeNanos,
                "ReceivedSvTimeUncertaintyNanos",
                mReceivedSvTimeUncertaintyNanos));

        builder.append(String.format(format, "Cn0DbHz", mCn0DbHz));

        builder.append(String.format(
                formatWithUncertainty,
                "PseudorangeRateMetersPerSecond",
                mPseudorangeRateMetersPerSecond,
                "PseudorangeRateUncertaintyMetersPerSecond",
                mPseudorangeRateUncertaintyMetersPerSecond));

        builder.append(String.format(
                format,
                "AccumulatedDeltaRangeState",
                getAccumulatedDeltaRangeStateString()));

        builder.append(String.format(
                formatWithUncertainty,
                "AccumulatedDeltaRangeMeters",
                mAccumulatedDeltaRangeMeters,
                "AccumulatedDeltaRangeUncertaintyMeters",
                mAccumulatedDeltaRangeUncertaintyMeters));

        builder.append(String.format(
                format,
                "CarrierFrequencyHz",
                hasCarrierFrequencyHz() ? mCarrierFrequencyHz : null));

        builder.append(String.format(
                format,
                "CarrierCycles",
                hasCarrierCycles() ? mCarrierCycles : null));

        builder.append(String.format(
                formatWithUncertainty,
                "CarrierPhase",
                hasCarrierPhase() ? mCarrierPhase : null,
                "CarrierPhaseUncertainty",
                hasCarrierPhaseUncertainty() ? mCarrierPhaseUncertainty : null));

        builder.append(String.format(format, "MultipathIndicator", getMultipathIndicatorString()));

        builder.append(String.format(
                format,
                "SnrInDb",
                hasSnrInDb() ? mSnrInDb : null));

        return builder.toString();
!!!69432119.java!!!	initialize() : void
        mFlags = HAS_NO_FLAGS;
        setSvid(0);
        setTimeOffsetNanos(Long.MIN_VALUE);
        setState(STATE_UNKNOWN);
        setReceivedSvTimeNanos(Long.MIN_VALUE);
        setReceivedSvTimeUncertaintyNanos(Long.MAX_VALUE);
        setCn0DbHz(Double.MIN_VALUE);
        setPseudorangeRateMetersPerSecond(Double.MIN_VALUE);
        setPseudorangeRateUncertaintyMetersPerSecond(Double.MIN_VALUE);
        setAccumulatedDeltaRangeState(ADR_STATE_UNKNOWN);
        setAccumulatedDeltaRangeMeters(Double.MIN_VALUE);
        setAccumulatedDeltaRangeUncertaintyMeters(Double.MIN_VALUE);
        resetCarrierFrequencyHz();
        resetCarrierCycles();
        resetCarrierPhase();
        resetCarrierPhaseUncertainty();
        setMultipathIndicator(MULTIPATH_INDICATOR_UNKNOWN);
        resetSnrInDb();
!!!69432247.java!!!	setFlag(in flag : int) : void
        mFlags |= flag;
!!!69432375.java!!!	resetFlag(in flag : int) : void
        mFlags &= ~flag;
!!!69432503.java!!!	isFlagSet(in flag : int) : boolean
        return (mFlags & flag) == flag;
