class LocationManager
!!!69477431.java!!!	LocationManager(inout context : Context, inout service : ILocationManager)
        mService = service;
        mContext = context;
        mGnssMeasurementCallbackTransport = new GnssMeasurementCallbackTransport(mContext, mService);
        mGnssNavigationMessageCallbackTransport =
                new GnssNavigationMessageCallbackTransport(mContext, mService);
!!!69477559.java!!!	createProvider(inout name : String, inout properties : ProviderProperties) : LocationProvider
        return new LocationProvider(name, properties);
!!!69477687.java!!!	getAllProviders() : String
        try {
            return mService.getAllProviders();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!69477815.java!!!	getProviders(inout enabledOnly : boolean) : String
        try {
            return mService.getProviders(null, enabledOnly);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!69477943.java!!!	getProvider(inout name : String) : LocationProvider
        checkProvider(name);
        try {
            ProviderProperties properties = mService.getProviderProperties(name);
            if (properties == null) {
                return null;
            }
            return createProvider(name, properties);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!69478071.java!!!	getProviders(inout criteria : Criteria, inout enabledOnly : boolean) : String
        checkCriteria(criteria);
        try {
            return mService.getProviders(criteria, enabledOnly);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!69478199.java!!!	getBestProvider(inout criteria : Criteria, inout enabledOnly : boolean) : String
        checkCriteria(criteria);
        try {
            return mService.getBestProvider(criteria, enabledOnly);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!69478327.java!!!	requestLocationUpdates(inout provider : String, in minTime : long, in minDistance : float, inout listener : LocationListener) : void
        checkProvider(provider);
        checkListener(listener);

        LocationRequest request = LocationRequest.createFromDeprecatedProvider(
                provider, minTime, minDistance, false);
        requestLocationUpdates(request, listener, null, null);
!!!69478455.java!!!	requestLocationUpdates(inout provider : String, in minTime : long, in minDistance : float, inout listener : LocationListener, inout looper : Looper) : void
        checkProvider(provider);
        checkListener(listener);

        LocationRequest request = LocationRequest.createFromDeprecatedProvider(
                provider, minTime, minDistance, false);
        requestLocationUpdates(request, listener, looper, null);
!!!69478583.java!!!	requestLocationUpdates(in minTime : long, in minDistance : float, inout criteria : Criteria, inout listener : LocationListener, inout looper : Looper) : void
        checkCriteria(criteria);
        checkListener(listener);

        LocationRequest request = LocationRequest.createFromDeprecatedCriteria(
                criteria, minTime, minDistance, false);
        requestLocationUpdates(request, listener, looper, null);
!!!69478711.java!!!	requestLocationUpdates(inout provider : String, in minTime : long, in minDistance : float, inout intent : PendingIntent) : void
        checkProvider(provider);
        checkPendingIntent(intent);

        LocationRequest request = LocationRequest.createFromDeprecatedProvider(
                provider, minTime, minDistance, false);
        requestLocationUpdates(request, null, null, intent);
!!!69478839.java!!!	requestLocationUpdates(in minTime : long, in minDistance : float, inout criteria : Criteria, inout intent : PendingIntent) : void
        checkCriteria(criteria);
        checkPendingIntent(intent);

        LocationRequest request = LocationRequest.createFromDeprecatedCriteria(
                criteria, minTime, minDistance, false);
        requestLocationUpdates(request, null, null, intent);
!!!69478967.java!!!	requestSingleUpdate(inout provider : String, inout listener : LocationListener, inout looper : Looper) : void
        checkProvider(provider);
        checkListener(listener);

        LocationRequest request = LocationRequest.createFromDeprecatedProvider(
                provider, 0, 0, true);
        requestLocationUpdates(request, listener, looper, null);
!!!69479095.java!!!	requestSingleUpdate(inout criteria : Criteria, inout listener : LocationListener, inout looper : Looper) : void
        checkCriteria(criteria);
        checkListener(listener);

        LocationRequest request = LocationRequest.createFromDeprecatedCriteria(
                criteria, 0, 0, true);
        requestLocationUpdates(request, listener, looper, null);
!!!69479223.java!!!	requestSingleUpdate(inout provider : String, inout intent : PendingIntent) : void
        checkProvider(provider);
        checkPendingIntent(intent);

        LocationRequest request = LocationRequest.createFromDeprecatedProvider(
                provider, 0, 0, true);
        requestLocationUpdates(request, null, null, intent);
!!!69479351.java!!!	requestSingleUpdate(inout criteria : Criteria, inout intent : PendingIntent) : void
        checkCriteria(criteria);
        checkPendingIntent(intent);

        LocationRequest request = LocationRequest.createFromDeprecatedCriteria(
                criteria, 0, 0, true);
        requestLocationUpdates(request, null, null, intent);
!!!69479479.java!!!	requestLocationUpdates(inout request : LocationRequest, inout listener : LocationListener, inout looper : Looper) : void
        checkListener(listener);
        requestLocationUpdates(request, listener, looper, null);
!!!69479607.java!!!	requestLocationUpdates(inout request : LocationRequest, inout intent : PendingIntent) : void
        checkPendingIntent(intent);
        requestLocationUpdates(request, null, null, intent);
!!!69479735.java!!!	wrapListener(inout listener : LocationListener, inout looper : Looper) : LocationManager::ListenerTransport
        if (listener == null) return null;
        synchronized (mListeners) {
            ListenerTransport transport = mListeners.get(listener);
            if (transport == null) {
                transport = new ListenerTransport(listener, looper);
            }
            mListeners.put(listener, transport);
            return transport;
        }
!!!69479863.java!!!	requestLocationUpdates(inout request : LocationRequest, inout listener : LocationListener, inout looper : Looper, inout intent : PendingIntent) : void

        String packageName = mContext.getPackageName();

        // wrap the listener class
        ListenerTransport transport = wrapListener(listener, looper);

        try {
            mService.requestLocationUpdates(request, transport, intent, packageName);
       } catch (RemoteException e) {
           throw e.rethrowFromSystemServer();
       }
!!!69479991.java!!!	removeUpdates(inout listener : LocationListener) : void
        checkListener(listener);
        String packageName = mContext.getPackageName();

        ListenerTransport transport;
        synchronized (mListeners) {
            transport = mListeners.remove(listener);
        }
        if (transport == null) return;

        try {
            mService.removeUpdates(transport, null, packageName);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!69480119.java!!!	removeUpdates(inout intent : PendingIntent) : void
        checkPendingIntent(intent);
        String packageName = mContext.getPackageName();

        try {
            mService.removeUpdates(null, intent, packageName);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!69480247.java!!!	addProximityAlert(in latitude : double, in longitude : double, in radius : float, in expiration : long, inout intent : PendingIntent) : void
        checkPendingIntent(intent);
        if (expiration < 0) expiration = Long.MAX_VALUE;

        Geofence fence = Geofence.createCircle(latitude, longitude, radius);
        LocationRequest request = new LocationRequest().setExpireIn(expiration);
        try {
            mService.requestGeofence(request, fence, intent, mContext.getPackageName());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!69480375.java!!!	addGeofence(inout request : LocationRequest, inout fence : Geofence, inout intent : PendingIntent) : void
        checkPendingIntent(intent);
        checkGeofence(fence);

        try {
            mService.requestGeofence(request, fence, intent, mContext.getPackageName());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!69480503.java!!!	removeProximityAlert(inout intent : PendingIntent) : void
        checkPendingIntent(intent);
        String packageName = mContext.getPackageName();

        try {
            mService.removeGeofence(null, intent, packageName);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!69480631.java!!!	removeGeofence(inout fence : Geofence, inout intent : PendingIntent) : void
        checkPendingIntent(intent);
        checkGeofence(fence);
        String packageName = mContext.getPackageName();

        try {
            mService.removeGeofence(fence, intent, packageName);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!69480759.java!!!	removeAllGeofences(inout intent : PendingIntent) : void
        checkPendingIntent(intent);
        String packageName = mContext.getPackageName();

        try {
            mService.removeGeofence(null, intent, packageName);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!69480887.java!!!	isProviderEnabled(inout provider : String) : boolean
        checkProvider(provider);

        try {
            return mService.isProviderEnabled(provider);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!69481015.java!!!	getLastLocation() : Location
        String packageName = mContext.getPackageName();

        try {
            return mService.getLastLocation(null, packageName);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!69481143.java!!!	getLastKnownLocation(inout provider : String) : Location
        checkProvider(provider);
        String packageName = mContext.getPackageName();
        LocationRequest request = LocationRequest.createFromDeprecatedProvider(
                provider, 0, 0, true);

        try {
            return mService.getLastLocation(request, packageName);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!69481271.java!!!	addTestProvider(inout name : String, inout requiresNetwork : boolean, inout requiresSatellite : boolean, inout requiresCell : boolean, inout hasMonetaryCost : boolean, inout supportsAltitude : boolean, inout supportsSpeed : boolean, inout supportsBearing : boolean, in powerRequirement : int, in accuracy : int) : void
        ProviderProperties properties = new ProviderProperties(requiresNetwork,
                requiresSatellite, requiresCell, hasMonetaryCost, supportsAltitude, supportsSpeed,
                supportsBearing, powerRequirement, accuracy);
        if (name.matches(LocationProvider.BAD_CHARS_REGEX)) {
            throw new IllegalArgumentException("provider name contains illegal character: " + name);
        }

        try {
            mService.addTestProvider(name, properties, mContext.getOpPackageName());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!69481399.java!!!	removeTestProvider(inout provider : String) : void
        try {
            mService.removeTestProvider(provider, mContext.getOpPackageName());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!69481527.java!!!	setTestProviderLocation(inout provider : String, inout loc : Location) : void
        if (!loc.isComplete()) {
            IllegalArgumentException e = new IllegalArgumentException(
                    "Incomplete location object, missing timestamp or accuracy? " + loc);
            if (mContext.getApplicationInfo().targetSdkVersion <= Build.VERSION_CODES.JELLY_BEAN) {
                // just log on old platform (for backwards compatibility)
                Log.w(TAG, e);
                loc.makeComplete();
            } else {
                // really throw it!
                throw e;
            }
        }

        try {
            mService.setTestProviderLocation(provider, loc, mContext.getOpPackageName());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!69481655.java!!!	clearTestProviderLocation(inout provider : String) : void
        try {
            mService.clearTestProviderLocation(provider, mContext.getOpPackageName());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!69481783.java!!!	setTestProviderEnabled(inout provider : String, inout enabled : boolean) : void
        try {
            mService.setTestProviderEnabled(provider, enabled, mContext.getOpPackageName());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!69481911.java!!!	clearTestProviderEnabled(inout provider : String) : void
        try {
            mService.clearTestProviderEnabled(provider, mContext.getOpPackageName());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!69482039.java!!!	setTestProviderStatus(inout provider : String, in status : int, inout extras : Bundle, in updateTime : long) : void
        try {
            mService.setTestProviderStatus(provider, status, extras, updateTime,
                    mContext.getOpPackageName());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!69482167.java!!!	clearTestProviderStatus(inout provider : String) : void
        try {
            mService.clearTestProviderStatus(provider, mContext.getOpPackageName());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!69484855.java!!!	addGpsStatusListener(inout listener : GpsStatus::Listener) : boolean
        boolean result;

        if (mGpsStatusListeners.get(listener) != null) {
            // listener is already registered
            return true;
        }
        try {
            GnssStatusListenerTransport transport = new GnssStatusListenerTransport(listener);
            result = mService.registerGnssStatusCallback(transport, mContext.getPackageName());
            if (result) {
                mGpsStatusListeners.put(listener, transport);
            }
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }

        return result;
!!!69484983.java!!!	removeGpsStatusListener(inout listener : GpsStatus::Listener) : void
        try {
            GnssStatusListenerTransport transport = mGpsStatusListeners.remove(listener);
            if (transport != null) {
                mService.unregisterGnssStatusCallback(transport);
            }
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!69485111.java!!!	registerGnssStatusCallback(inout callback : GnssStatusCallback) : boolean
        return registerGnssStatusCallback(callback, null);
!!!69485239.java!!!	registerGnssStatusCallback(inout callback : GnssStatusCallback, inout handler : Handler) : boolean
        boolean result;
        if (mOldGnssStatusListeners.get(callback) != null) {
            // listener is already registered
            return true;
        }
        try {
            GnssStatusListenerTransport transport =
                    new GnssStatusListenerTransport(callback, handler);
            result = mService.registerGnssStatusCallback(transport, mContext.getPackageName());
            if (result) {
                mOldGnssStatusListeners.put(callback, transport);
            }
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }

        return result;
!!!69485367.java!!!	unregisterGnssStatusCallback(inout callback : GnssStatusCallback) : void
        try {
            GnssStatusListenerTransport transport = mOldGnssStatusListeners.remove(callback);
            if (transport != null) {
                mService.unregisterGnssStatusCallback(transport);
            }
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!69485495.java!!!	registerGnssStatusCallback(inout callback : GnssStatus::Callback) : boolean
        return registerGnssStatusCallback(callback, null);
!!!69485623.java!!!	registerGnssStatusCallback(inout callback : GnssStatus::Callback, inout handler : Handler) : boolean
        boolean result;
        if (mGnssStatusListeners.get(callback) != null) {
            // listener is already registered
            return true;
        }
        try {
            GnssStatusListenerTransport transport =
                    new GnssStatusListenerTransport(callback, handler);
            result = mService.registerGnssStatusCallback(transport, mContext.getPackageName());
            if (result) {
                mGnssStatusListeners.put(callback, transport);
            }
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }

        return result;
!!!69485751.java!!!	unregisterGnssStatusCallback(inout callback : GnssStatus::Callback) : void
        try {
            GnssStatusListenerTransport transport = mGnssStatusListeners.remove(callback);
            if (transport != null) {
                mService.unregisterGnssStatusCallback(transport);
            }
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!69485879.java!!!	addNmeaListener(inout listener : GpsStatus::NmeaListener) : boolean
        boolean result;

        if (mGpsNmeaListeners.get(listener) != null) {
            // listener is already registered
            return true;
        }
        try {
            GnssStatusListenerTransport transport = new GnssStatusListenerTransport(listener);
            result = mService.registerGnssStatusCallback(transport, mContext.getPackageName());
            if (result) {
                mGpsNmeaListeners.put(listener, transport);
            }
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }

        return result;
!!!69486007.java!!!	removeNmeaListener(inout listener : GpsStatus::NmeaListener) : void
        try {
            GnssStatusListenerTransport transport = mGpsNmeaListeners.remove(listener);
            if (transport != null) {
                mService.unregisterGnssStatusCallback(transport);
            }
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!69486135.java!!!	addNmeaListener(inout listener : GnssNmeaListener) : boolean
        return addNmeaListener(listener, null);
!!!69486263.java!!!	addNmeaListener(inout listener : GnssNmeaListener, inout handler : Handler) : boolean
        boolean result;

        if (mGpsNmeaListeners.get(listener) != null) {
            // listener is already registered
            return true;
        }
        try {
            GnssStatusListenerTransport transport =
                    new GnssStatusListenerTransport(listener, handler);
            result = mService.registerGnssStatusCallback(transport, mContext.getPackageName());
            if (result) {
                mOldGnssNmeaListeners.put(listener, transport);
            }
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }

        return result;
!!!69486391.java!!!	removeNmeaListener(inout listener : GnssNmeaListener) : void
        try {
            GnssStatusListenerTransport transport = mOldGnssNmeaListeners.remove(listener);
            if (transport != null) {
                mService.unregisterGnssStatusCallback(transport);
            }
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!69486519.java!!!	addNmeaListener(inout listener : OnNmeaMessageListener) : boolean
        return addNmeaListener(listener, null);
!!!69486647.java!!!	addNmeaListener(inout listener : OnNmeaMessageListener, inout handler : Handler) : boolean
        boolean result;

        if (mGpsNmeaListeners.get(listener) != null) {
            // listener is already registered
            return true;
        }
        try {
            GnssStatusListenerTransport transport =
                    new GnssStatusListenerTransport(listener, handler);
            result = mService.registerGnssStatusCallback(transport, mContext.getPackageName());
            if (result) {
                mGnssNmeaListeners.put(listener, transport);
            }
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }

        return result;
!!!69486775.java!!!	removeNmeaListener(inout listener : OnNmeaMessageListener) : void
        try {
            GnssStatusListenerTransport transport = mGnssNmeaListeners.remove(listener);
            if (transport != null) {
                mService.unregisterGnssStatusCallback(transport);
            }
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!69486903.java!!!	addGpsMeasurementListener(inout listener : GpsMeasurementsEvent::Listener) : boolean
        return false;
!!!69487031.java!!!	registerGnssMeasurementsCallback(inout callback : GnssMeasurementsEvent::Callback) : boolean
        return registerGnssMeasurementsCallback(callback, null);
!!!69487159.java!!!	registerGnssMeasurementsCallback(inout callback : GnssMeasurementsEvent::Callback, inout handler : Handler) : boolean
        return mGnssMeasurementCallbackTransport.add(callback, handler);
!!!69487415.java!!!	unregisterGnssMeasurementsCallback(inout callback : GnssMeasurementsEvent::Callback) : void
        mGnssMeasurementCallbackTransport.remove(callback);
!!!69487543.java!!!	addGpsNavigationMessageListener(inout listener : GpsNavigationMessageEvent::Listener) : boolean
        return false;
!!!69487799.java!!!	registerGnssNavigationMessageCallback(inout callback : GnssNavigationMessageEvent::Callback) : boolean
        return registerGnssNavigationMessageCallback(callback, null);
!!!69487927.java!!!	registerGnssNavigationMessageCallback(in callback : GnssNavigationMessageEvent::Callback, inout handler : Handler) : boolean
        GnssNavigationMessage.Callback bridge = new GnssNavigationMessage.Callback() {
            @Override
            public void onGnssNavigationMessageReceived(GnssNavigationMessage message) {
                GnssNavigationMessageEvent event = new GnssNavigationMessageEvent(message);
                callback.onGnssNavigationMessageReceived(event);
            }

            @Override
            public void onStatusChanged(int status) {
                callback.onStatusChanged(status);
            }
        };
        mNavigationMessageBridge.put(callback, bridge);
        return mGnssNavigationMessageCallbackTransport.add(bridge, handler);
!!!69488055.java!!!	unregisterGnssNavigationMessageCallback(inout callback : GnssNavigationMessageEvent::Callback) : void
        mGnssNavigationMessageCallbackTransport.remove(
                mNavigationMessageBridge.remove(
                        callback));
!!!69488183.java!!!	registerGnssNavigationMessageCallback(inout callback : GnssNavigationMessage::Callback) : boolean
        return registerGnssNavigationMessageCallback(callback, null);
!!!69488311.java!!!	registerGnssNavigationMessageCallback(inout callback : GnssNavigationMessage::Callback, inout handler : Handler) : boolean
        return mGnssNavigationMessageCallbackTransport.add(callback, handler);
!!!69488439.java!!!	unregisterGnssNavigationMessageCallback(inout callback : GnssNavigationMessage::Callback) : void
        mGnssNavigationMessageCallbackTransport.remove(callback);
!!!69488567.java!!!	getGpsStatus(inout status : GpsStatus) : GpsStatus
        if (status == null) {
            status = new GpsStatus();
        }
        // When mGnssStatus is null, that means that this method is called outside
        // onGpsStatusChanged().  Return an empty status  to maintain backwards compatibility.
        if (mGnssStatus != null) {
            status.setStatus(mGnssStatus, mTimeToFirstFix);
        }
        return status;
!!!69488695.java!!!	getGnssYearOfHardware() : int
        try {
            return mService.getGnssYearOfHardware();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!69488823.java!!!	sendExtraCommand(inout provider : String, inout command : String, inout extras : Bundle) : boolean
        try {
            return mService.sendExtraCommand(provider, command, extras);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!69488951.java!!!	sendNiResponse(in notifId : int, in userResponse : int) : boolean
        try {
            return mService.sendNiResponse(notifId, userResponse);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!69489079.java!!!	checkProvider(inout provider : String) : void
        if (provider == null) {
            throw new IllegalArgumentException("invalid provider: " + provider);
        }
!!!69489207.java!!!	checkCriteria(inout criteria : Criteria) : void
        if (criteria == null) {
            throw new IllegalArgumentException("invalid criteria: " + criteria);
        }
!!!69489335.java!!!	checkListener(inout listener : LocationListener) : void
        if (listener == null) {
            throw new IllegalArgumentException("invalid listener: " + listener);
        }
!!!69489463.java!!!	checkPendingIntent(inout intent : PendingIntent) : void
        if (intent == null) {
            throw new IllegalArgumentException("invalid pending intent: " + intent);
        }
        if (!intent.isTargetedToPackage()) {
            IllegalArgumentException e = new IllegalArgumentException(
                    "pending intent must be targeted to package");
            if (mContext.getApplicationInfo().targetSdkVersion > Build.VERSION_CODES.JELLY_BEAN) {
                throw e;
            } else {
                Log.w(TAG, e);
            }
        }
!!!69489591.java!!!	checkGeofence(inout fence : Geofence) : void
        if (fence == null) {
            throw new IllegalArgumentException("invalid geofence: " + fence);
        }
