class LocationRequest
!!!69491383.java!!!	create() : LocationRequest
        LocationRequest request = new LocationRequest();
        return request;
!!!69491511.java!!!	createFromDeprecatedProvider(inout provider : String, in minTime : long, in minDistance : float, inout singleShot : boolean) : LocationRequest
        if (minTime < 0) minTime = 0;
        if (minDistance < 0) minDistance = 0;

        int quality;
        if (LocationManager.PASSIVE_PROVIDER.equals(provider)) {
            quality = POWER_NONE;
        } else if (LocationManager.GPS_PROVIDER.equals(provider)) {
            quality = ACCURACY_FINE;
        } else {
            quality = POWER_LOW;
        }

        LocationRequest request = new LocationRequest()
            .setProvider(provider)
            .setQuality(quality)
            .setInterval(minTime)
            .setFastestInterval(minTime)
            .setSmallestDisplacement(minDistance);
        if (singleShot) request.setNumUpdates(1);
        return request;
!!!69491639.java!!!	createFromDeprecatedCriteria(inout criteria : Criteria, in minTime : long, in minDistance : float, inout singleShot : boolean) : LocationRequest
        if (minTime < 0) minTime = 0;
        if (minDistance < 0) minDistance = 0;

        int quality;
        switch (criteria.getAccuracy()) {
            case Criteria.ACCURACY_COARSE:
                quality = ACCURACY_BLOCK;
                break;
            case Criteria.ACCURACY_FINE:
                quality = ACCURACY_FINE;
                break;
            default: {
                switch (criteria.getPowerRequirement()) {
                    case Criteria.POWER_HIGH:
                        quality = POWER_HIGH;
                        break;
                    default:
                        quality = POWER_LOW;
                }
            }
        }

        LocationRequest request = new LocationRequest()
            .setQuality(quality)
            .setInterval(minTime)
            .setFastestInterval(minTime)
            .setSmallestDisplacement(minDistance);
        if (singleShot) request.setNumUpdates(1);
        return request;
!!!69491895.java!!!	LocationRequest(inout src : LocationRequest)
        mQuality = src.mQuality;
        mInterval = src.mInterval;
        mFastestInterval = src.mFastestInterval;
        mExplicitFastestInterval = src.mExplicitFastestInterval;
        mExpireAt = src.mExpireAt;
        mNumUpdates = src.mNumUpdates;
        mSmallestDisplacement = src.mSmallestDisplacement;
        mProvider = src.mProvider;
        mWorkSource = src.mWorkSource;
        mHideFromAppOps = src.mHideFromAppOps;
!!!69492023.java!!!	setQuality(in quality : int) : LocationRequest
        checkQuality(quality);
        mQuality = quality;
        return this;
!!!69492151.java!!!	getQuality() : int
        return mQuality;
!!!69492279.java!!!	setInterval(in millis : long) : LocationRequest
        checkInterval(millis);
        mInterval = millis;
        if (!mExplicitFastestInterval) {
            mFastestInterval = (long)(mInterval / FASTEST_INTERVAL_FACTOR);
        }
        return this;
!!!69492407.java!!!	getInterval() : long
        return mInterval;
!!!69492535.java!!!	setFastestInterval(in millis : long) : LocationRequest
        checkInterval(millis);
        mExplicitFastestInterval = true;
        mFastestInterval = millis;
        return this;
!!!69492663.java!!!	getFastestInterval() : long
        return mFastestInterval;
!!!69492791.java!!!	setExpireIn(in millis : long) : LocationRequest
        long elapsedRealtime = SystemClock.elapsedRealtime();

        // Check for > Long.MAX_VALUE overflow (elapsedRealtime > 0):
        if (millis > Long.MAX_VALUE - elapsedRealtime) {
          mExpireAt = Long.MAX_VALUE;
        } else {
          mExpireAt = millis + elapsedRealtime;
        }

        if (mExpireAt < 0) mExpireAt = 0;
        return this;
!!!69492919.java!!!	setExpireAt(in millis : long) : LocationRequest
        mExpireAt = millis;
        if (mExpireAt < 0) mExpireAt = 0;
        return this;
!!!69493047.java!!!	getExpireAt() : long
        return mExpireAt;
!!!69493175.java!!!	setNumUpdates(in numUpdates : int) : LocationRequest
        if (numUpdates <= 0) throw new IllegalArgumentException("invalid numUpdates: " + numUpdates);
        mNumUpdates = numUpdates;
        return this;
!!!69493303.java!!!	getNumUpdates() : int
        return mNumUpdates;
!!!69493431.java!!!	decrementNumUpdates() : void
        if (mNumUpdates != Integer.MAX_VALUE) {
            mNumUpdates--;
        }
        if (mNumUpdates < 0) {
            mNumUpdates = 0;
        }
!!!69493559.java!!!	setProvider(inout provider : String) : LocationRequest
        checkProvider(provider);
        mProvider = provider;
        return this;
!!!69493687.java!!!	getProvider() : String
        return mProvider;
!!!69493815.java!!!	setSmallestDisplacement(in meters : float) : LocationRequest
        checkDisplacement(meters);
        mSmallestDisplacement = meters;
        return this;
!!!69493943.java!!!	getSmallestDisplacement() : float
        return mSmallestDisplacement;
!!!69494071.java!!!	setWorkSource(inout workSource : WorkSource) : void
        mWorkSource = workSource;
!!!69494199.java!!!	getWorkSource() : WorkSource
        return mWorkSource;
!!!69494327.java!!!	setHideFromAppOps(inout hideFromAppOps : boolean) : void
        mHideFromAppOps = hideFromAppOps;
!!!69494455.java!!!	getHideFromAppOps() : boolean
        return mHideFromAppOps;
!!!69494583.java!!!	checkInterval(in millis : long) : void
        if (millis < 0) {
            throw new IllegalArgumentException("invalid interval: " + millis);
        }
!!!69494711.java!!!	checkQuality(in quality : int) : void
        switch (quality) {
            case ACCURACY_FINE:
            case ACCURACY_BLOCK:
            case ACCURACY_CITY:
            case POWER_NONE:
            case POWER_LOW:
            case POWER_HIGH:
                break;
            default:
                throw new IllegalArgumentException("invalid quality: " + quality);
        }
!!!69494839.java!!!	checkDisplacement(in meters : float) : void
        if (meters < 0.0f) {
            throw new IllegalArgumentException("invalid displacement: " + meters);
        }
!!!69494967.java!!!	checkProvider(inout name : String) : void
        if (name == null) {
            throw new IllegalArgumentException("invalid provider: " + name);
        }
!!!69495095.java!!!	describeContents() : int
        return 0;
!!!69495223.java!!!	writeToParcel(inout parcel : Parcel, in flags : int) : void
        parcel.writeInt(mQuality);
        parcel.writeLong(mFastestInterval);
        parcel.writeLong(mInterval);
        parcel.writeLong(mExpireAt);
        parcel.writeInt(mNumUpdates);
        parcel.writeFloat(mSmallestDisplacement);
        parcel.writeInt(mHideFromAppOps ? 1 : 0);
        parcel.writeString(mProvider);
        parcel.writeParcelable(mWorkSource, 0);
!!!69495351.java!!!	qualityToString(in quality : int) : String
        switch (quality) {
            case ACCURACY_FINE:
                return "ACCURACY_FINE";
            case ACCURACY_BLOCK:
                return "ACCURACY_BLOCK";
            case ACCURACY_CITY:
                return "ACCURACY_CITY";
            case POWER_NONE:
                return "POWER_NONE";
            case POWER_LOW:
                return "POWER_LOW";
            case POWER_HIGH:
                return "POWER_HIGH";
            default:
                return "???";
        }
!!!69495479.java!!!	toString() : String
        StringBuilder s = new StringBuilder();
        s.append("Request[").append(qualityToString(mQuality));
        if (mProvider != null) s.append(' ').append(mProvider);
        if (mQuality != POWER_NONE) {
            s.append(" requested=");
            TimeUtils.formatDuration(mInterval, s);
        }
        s.append(" fastest=");
        TimeUtils.formatDuration(mFastestInterval, s);
        if (mExpireAt != Long.MAX_VALUE) {
            long expireIn = mExpireAt - SystemClock.elapsedRealtime();
            s.append(" expireIn=");
            TimeUtils.formatDuration(expireIn, s);
        }
        if (mNumUpdates != Integer.MAX_VALUE){
            s.append(" num=").append(mNumUpdates);
        }
        s.append(']');
        return s.toString();
