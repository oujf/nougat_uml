class GpsStatusTest
!!!69514807.java!!!	setUp() : void
        super.setUp();
        mStatus = createGpsStatus();
        generateSatellitesData(generateInt());
!!!69514935.java!!!	testEmptyGpsStatus() : void
        verifyIsEmpty(mStatus);
!!!69515063.java!!!	testGpsStatusIterator() : void
        generateSatellitesData(2);
        setSatellites(mStatus);
        Iterator<GpsSatellite> iterator = mStatus.getSatellites().iterator();
        assertTrue("hasNext(1)", iterator.hasNext());
        assertTrue("hasNext(1) does not overflow", iterator.hasNext());
        GpsSatellite satellite1 = iterator.next();
        assertNotNull("satellite", satellite1);
        assertTrue("hasNext(2)", iterator.hasNext());
        assertTrue("hasNext(2) does not overflow", iterator.hasNext());
        GpsSatellite satellite2 = iterator.next();
        assertNotNull("satellite", satellite2);
        assertFalse("hasNext() no elements", iterator.hasNext());
!!!69515191.java!!!	testTtff() : void
        int testTtff = generateInt();
        set(mStatus, testTtff);
        verifyTtff(mStatus, testTtff);
!!!69515319.java!!!	testCopyTtff() : void
        int testTtff = generateInt();
        verifyTtff(mStatus, 0);

        GpsStatus otherStatus = createGpsStatus();
        set(otherStatus, testTtff);
        verifyTtff(otherStatus, testTtff);

        set(mStatus, otherStatus);
        verifyTtff(mStatus, testTtff);
!!!69515447.java!!!	testSetSatellites() : void
        setSatellites(mStatus);
        verifySatellites(mStatus);
!!!69515575.java!!!	testCopySatellites() : void
        verifyIsEmpty(mStatus);

        GpsStatus otherStatus = createGpsStatus();
        setSatellites(otherStatus);
        verifySatellites(otherStatus);

        set(mStatus, otherStatus);
        verifySatellites(mStatus);
!!!69515703.java!!!	testOverrideSatellites() : void
        setSatellites(mStatus);
        verifySatellites(mStatus);

        GpsStatus otherStatus = createGpsStatus();
        generateSatellitesData(mCount, true /* reusePrns */);
        setSatellites(otherStatus);
        verifySatellites(otherStatus);

        set(mStatus, otherStatus);
        verifySatellites(mStatus);
!!!69515831.java!!!	testAddSatellites() : void
        int count = 10;
        generateSatellitesData(count);
        setSatellites(mStatus);
        verifySatellites(mStatus);

        GpsStatus otherStatus = createGpsStatus();
        generateSatellitesData(count);
        setSatellites(otherStatus);
        verifySatellites(otherStatus);

        set(mStatus, otherStatus);
        verifySatellites(mStatus);
!!!69515959.java!!!	testAddMoreSatellites() : void
        int count = 25;
        generateSatellitesData(count);
        setSatellites(mStatus);
        verifySatellites(mStatus);

        GpsStatus otherStatus = createGpsStatus();
        generateSatellitesData(count * 2);
        setSatellites(otherStatus);
        verifySatellites(otherStatus);

        set(mStatus, otherStatus);
        verifySatellites(mStatus);
!!!69516087.java!!!	testAddLessSatellites() : void
        int count = 25;
        generateSatellitesData(count * 2);
        setSatellites(mStatus);
        verifySatellites(mStatus);

        GpsStatus otherStatus = createGpsStatus();
        generateSatellitesData(count);
        setSatellites(otherStatus);
        verifySatellites(otherStatus);

        set(mStatus, otherStatus);
        verifySatellites(mStatus);
!!!69516215.java!!!	verifyIsEmpty(inout status : GpsStatus) : void
        verifySatelliteCount(status, 0);
        verifyTtff(status, 0);
!!!69516343.java!!!	verifySatelliteCount(inout status : GpsStatus, in expectedCount : int) : void
        int satellites = 0;
        for (GpsSatellite s : status.getSatellites()) {
            ++satellites;
        }
        assertEquals("GpsStatus::SatelliteCount", expectedCount, satellites);
!!!69516471.java!!!	verifySatellites(inout status : GpsStatus) : void
        verifySatelliteCount(status, mCount);
        verifySatellites(status, mCount, mPrns, mCn0s, mElevations, mAzimuth, mEphemerisMask,
                mAlmanacMask, mUsedInFixMask);
!!!69516599.java!!!	verifySatellites(inout status : GpsStatus, in count : int, inout prns : int [[]], inout cn0s : float [[]], inout elevations : float [[]], inout azimuth : float [[]], in ephemerisMask : int, in almanacMask : int, in usedInFixMask : int) : void
        for (int i = 0; i < count; ++i) {
            int prn = prns[i];
            GpsSatellite satellite = getSatellite(status, prn);
            assertNotNull(getSatelliteAssertInfo(i, prn, "non-null"), satellite);
            assertEquals(getSatelliteAssertInfo(i, prn, "Snr"), cn0s[i], satellite.getSnr());
            assertEquals(
                    getSatelliteAssertInfo(i, prn, "Elevation"),
                    elevations[i],
                    satellite.getElevation());
            assertEquals(
                    getSatelliteAssertInfo(i, prn, "Azimuth"),
                    azimuth[i],
                    satellite.getAzimuth());
            int prnShift = 1 << (prn - 1);
            assertEquals(
                    getSatelliteAssertInfo(i, prn, "ephemeris"),
                    (ephemerisMask & prnShift) != 0,
                    satellite.hasEphemeris());
            assertEquals(
                    getSatelliteAssertInfo(i, prn, "almanac"),
                    (almanacMask & prnShift) != 0,
                    satellite.hasAlmanac());
            assertEquals(
                    getSatelliteAssertInfo(i, prn, "usedInFix"),
                    (usedInFixMask & prnShift) != 0,
                    satellite.usedInFix());
        }
!!!69516727.java!!!	verifyTtff(inout status : GpsStatus, in expectedTtff : int) : void
        assertEquals("GpsStatus::TTFF", expectedTtff, status.getTimeToFirstFix());
!!!69516855.java!!!	createGpsStatus() : GpsStatus
        Constructor<GpsStatus>  ctor = GpsStatus.class.getDeclaredConstructor();
        ctor.setAccessible(true);
        return ctor.newInstance();
!!!69516983.java!!!	set(inout status : GpsStatus, in ttff : int) : void
        Class<?> statusClass = status.getClass();
        Method setTtff = statusClass.getDeclaredMethod("setTimeToFirstFix", Integer.TYPE);
        setTtff.setAccessible(true);
        setTtff.invoke(status, ttff);
!!!69517111.java!!!	set(inout status : GpsStatus, inout statusToSet : GpsStatus) : void
        Class<?> statusClass = status.getClass();
        Method setStatus = statusClass.getDeclaredMethod("setStatus", statusClass);
        setStatus.setAccessible(true);
        setStatus.invoke(status, statusToSet);
!!!69517239.java!!!	setSatellites(inout status : GpsStatus) : void
        set(status, mCount, mPrns, mCn0s, mElevations, mAzimuth, mEphemerisMask, mAlmanacMask,
                mUsedInFixMask);
!!!69517367.java!!!	set(inout status : GpsStatus, in count : int, inout prns : int [[]], inout cn0s : float [[]], inout elevations : float [[]], inout azimuth : float [[]], in ephemerisMask : int, in almanacMask : int, in usedInFixMask : int) : void
        Class<?> statusClass = status.getClass();
        Class<?> intClass = Integer.TYPE;
        Class<?> floatArrayClass = Class.forName("[F");
        Method setStatus = statusClass.getDeclaredMethod(
                "setStatus",
                intClass,
                Class.forName("[I"),
                floatArrayClass,
                floatArrayClass,
                floatArrayClass,
                intClass,
                intClass,
                intClass);
        setStatus.setAccessible(true);
        setStatus.invoke(
                status,
                count,
                prns,
                cn0s,
                elevations,
                azimuth,
                ephemerisMask,
                almanacMask,
                usedInFixMask);
!!!69517495.java!!!	generateInt() : int
        return mRandom.nextInt(MAX_VALUE) + 1;
!!!69517623.java!!!	generateIntArray(in count : int) : int
        Set<Integer> generatedPrns = new HashSet<>();
        int[] array = new int[count];
        for(int i = 0; i < count; ++i) {
            int generated;
            do {
                generated = generateInt();
            } while (generatedPrns.contains(generated));
            array[i] = generated;
            generatedPrns.add(generated);
        }
        return array;
!!!69517751.java!!!	generateFloatArray(in count : int) : float
        float[] array = new float[count];
        for(int i = 0; i < count; ++i) {
            array[i] = generateInt();
        }
        return array;
!!!69517879.java!!!	generateMask(inout prns : int [[]]) : int
        int mask = 0;
        int prnsLength = prns.length;
        for (int i = 0; i < prnsLength; ++i) {
            if (mRandom.nextBoolean()) {
                mask |= 1 << (prns[i] - 1);
            }
        }
        return mask;
!!!69518007.java!!!	generateSatellitesData(in count : int) : void
        generateSatellitesData(count, false /* reusePrns */);
!!!69518135.java!!!	generateSatellitesData(in count : int, inout reusePrns : boolean) : void
        mCount = count;
        if (!reusePrns) {
            mPrns = generateIntArray(count);
        }
        mCn0s = generateFloatArray(count);
        mElevations = generateFloatArray(count);
        mAzimuth = generateFloatArray(count);
        mEphemerisMask = generateMask(mPrns);
        mAlmanacMask = generateMask(mPrns);
        mUsedInFixMask = generateMask(mPrns);
!!!69518263.java!!!	getSatellite(inout status : GpsStatus, in prn : int) : GpsSatellite
        for (GpsSatellite satellite : status.getSatellites()) {
            if (satellite.getPrn() == prn) {
                return satellite;
            }
        }
        return null;
!!!69518391.java!!!	getSatelliteAssertInfo(in index : int, in prn : int, inout param : String) : String
        return String.format("Satellite::%s [i=%d, prn=%d]", param, index, prn);
