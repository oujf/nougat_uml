class CCData
!!!69602743.java!!!	fromByteArray(inout data : byte [[]]) : Cea608CCParser::CCData
            CCData[] ccData = new CCData[data.length / 3];

            for (int i = 0; i < ccData.length; i++) {
                ccData[i] = new CCData(
                        data[i * 3],
                        data[i * 3 + 1],
                        data[i * 3 + 2]);
            }

            return ccData;
!!!69602871.java!!!	CCData(in type : byte, in data1 : byte, in data2 : byte)
            mType = type;
            mData1 = data1;
            mData2 = data2;
!!!69602999.java!!!	getCtrlCode() : int
            if ((mData1 == 0x14 || mData1 == 0x1c)
                    && mData2 >= 0x20 && mData2 <= 0x2f) {
                return mData2;
            }
            return INVALID;
!!!69603127.java!!!	getMidRow() : Cea608CCParser::StyleCode
            // only support standard Mid-row codes, ignore
            // optional background/foreground mid-row codes
            if ((mData1 == 0x11 || mData1 == 0x19)
                    && mData2 >= 0x20 && mData2 <= 0x2f) {
                return StyleCode.fromByte(mData2);
            }
            return null;
!!!69603255.java!!!	getPAC() : Cea608CCParser::PAC
            if ((mData1 & 0x70) == 0x10
                    && (mData2 & 0x40) == 0x40
                    && ((mData1 & 0x07) != 0 || (mData2 & 0x20) == 0)) {
                return PAC.fromBytes(mData1, mData2);
            }
            return null;
!!!69603383.java!!!	getTabOffset() : int
            if ((mData1 == 0x17 || mData1 == 0x1f)
                    && mData2 >= 0x21 && mData2 <= 0x23) {
                return mData2 & 0x3;
            }
            return 0;
!!!69603511.java!!!	isDisplayableChar() : boolean
            return isBasicChar() || isSpecialChar() || isExtendedChar();
!!!69603639.java!!!	getDisplayText() : String
            String str = getBasicChars();

            if (str == null) {
                str =  getSpecialChar();

                if (str == null) {
                    str = getExtendedChar();
                }
            }

            return str;
!!!69603767.java!!!	ctrlCodeToString(in ctrlCode : int) : String
            return mCtrlCodeMap[ctrlCode - 0x20];
!!!69603895.java!!!	isBasicChar() : boolean
            return mData1 >= 0x20 && mData1 <= 0x7f;
!!!69604023.java!!!	isSpecialChar() : boolean
            return ((mData1 == 0x11 || mData1 == 0x19)
                    && mData2 >= 0x30 && mData2 <= 0x3f);
!!!69604151.java!!!	isExtendedChar() : boolean
            return ((mData1 == 0x12 || mData1 == 0x1A
                    || mData1 == 0x13 || mData1 == 0x1B)
                    && mData2 >= 0x20 && mData2 <= 0x3f);
!!!69604279.java!!!	getBasicChar(in data : byte) : char
            char c;
            // replace the non-ASCII ones
            switch (data) {
                case 0x2A: c = '\u00E1'; break;
                case 0x5C: c = '\u00E9'; break;
                case 0x5E: c = '\u00ED'; break;
                case 0x5F: c = '\u00F3'; break;
                case 0x60: c = '\u00FA'; break;
                case 0x7B: c = '\u00E7'; break;
                case 0x7C: c = '\u00F7'; break;
                case 0x7D: c = '\u00D1'; break;
                case 0x7E: c = '\u00F1'; break;
                case 0x7F: c = '\u2588'; break; // Full block
                default: c = (char) data; break;
            }
            return c;
!!!69604407.java!!!	getBasicChars() : String
            if (mData1 >= 0x20 && mData1 <= 0x7f) {
                StringBuilder builder = new StringBuilder(2);
                builder.append(getBasicChar(mData1));
                if (mData2 >= 0x20 && mData2 <= 0x7f) {
                    builder.append(getBasicChar(mData2));
                }
                return builder.toString();
            }

            return null;
!!!69604535.java!!!	getSpecialChar() : String
            if ((mData1 == 0x11 || mData1 == 0x19)
                    && mData2 >= 0x30 && mData2 <= 0x3f) {
                return mSpecialCharMap[mData2 - 0x30];
            }

            return null;
!!!69604663.java!!!	getExtendedChar() : String
            if ((mData1 == 0x12 || mData1 == 0x1A)
                    && mData2 >= 0x20 && mData2 <= 0x3f){
                // 1 Spanish/French char
                return mSpanishCharMap[mData2 - 0x20];
            } else if ((mData1 == 0x13 || mData1 == 0x1B)
                    && mData2 >= 0x20 && mData2 <= 0x3f){
                // 1 Portuguese/German/Danish char
                return mProtugueseCharMap[mData2 - 0x20];
            }

            return null;
!!!69604791.java!!!	toString() : String
            String str;

            if (mData1 < 0x10 && mData2 < 0x10) {
                // Null Pad, ignore
                return String.format("[%d]Null: %02x %02x", mType, mData1, mData2);
            }

            int ctrlCode = getCtrlCode();
            if (ctrlCode != INVALID) {
                return String.format("[%d]%s", mType, ctrlCodeToString(ctrlCode));
            }

            int tabOffset = getTabOffset();
            if (tabOffset > 0) {
                return String.format("[%d]Tab%d", mType, tabOffset);
            }

            PAC pac = getPAC();
            if (pac != null) {
                return String.format("[%d]PAC: %s", mType, pac.toString());
            }

            StyleCode m = getMidRow();
            if (m != null) {
                return String.format("[%d]Mid-row: %s", mType, m.toString());
            }

            if (isDisplayableChar()) {
                return String.format("[%d]Displayable: %s (%02x %02x)",
                        mType, getDisplayText(), mData1, mData2);
            }

            return String.format("[%d]Invalid: %02x %02x", mType, mData1, mData2);
