class SoundPool
!!!69796279.java!!!	SoundPool(in maxStreams : int, in streamType : int, in srcQuality : int)
        this(maxStreams,
                new AudioAttributes.Builder().setInternalLegacyStreamType(streamType).build());
!!!69796407.java!!!	SoundPool(in maxStreams : int, inout attributes : AudioAttributes)
        // do native setup
        if (native_setup(new WeakReference<SoundPool>(this), maxStreams, attributes) != 0) {
            throw new RuntimeException("Native setup failed");
        }
        mLock = new Object();
        mAttributes = attributes;
        IBinder b = ServiceManager.getService(Context.APP_OPS_SERVICE);
        mAppOps = IAppOpsService.Stub.asInterface(b);
        // initialize mHasAppOpsPlayAudio
        updateAppOpsPlayAudio();
        // register a callback to monitor whether the OP_PLAY_AUDIO is still allowed
        mAppOpsCallback = new IAppOpsCallback.Stub() {
            public void opChanged(int op, int uid, String packageName) {
                synchronized (mLock) {
                    if (op == AppOpsManager.OP_PLAY_AUDIO) {
                        updateAppOpsPlayAudio();
                    }
                }
            }
        };
        try {
            mAppOps.startWatchingMode(AppOpsManager.OP_PLAY_AUDIO,
                    ActivityThread.currentPackageName(), mAppOpsCallback);
        } catch (RemoteException e) {
            mHasAppOpsPlayAudio = false;
        }
!!!69796535.java!!!	release() : void
        try {
            mAppOps.stopWatchingMode(mAppOpsCallback);
        } catch (RemoteException e) {
            // nothing to do here, the SoundPool is being released anyway
        }
        native_release();
!!!69796791.java!!!	finalize() : void
 release();
!!!69796919.java!!!	load(inout path : String, in priority : int) : int
        int id = 0;
        try {
            File f = new File(path);
            ParcelFileDescriptor fd = ParcelFileDescriptor.open(f,
                    ParcelFileDescriptor.MODE_READ_ONLY);
            if (fd != null) {
                id = _load(fd.getFileDescriptor(), 0, f.length(), priority);
                fd.close();
            }
        } catch (java.io.IOException e) {
            Log.e(TAG, "error loading " + path);
        }
        return id;
!!!69797047.java!!!	load(inout context : Context, in resId : int, in priority : int) : int
        AssetFileDescriptor afd = context.getResources().openRawResourceFd(resId);
        int id = 0;
        if (afd != null) {
            id = _load(afd.getFileDescriptor(), afd.getStartOffset(), afd.getLength(), priority);
            try {
                afd.close();
            } catch (java.io.IOException ex) {
                //Log.d(TAG, "close failed:", ex);
            }
        }
        return id;
!!!69797175.java!!!	load(inout afd : AssetFileDescriptor, in priority : int) : int
        if (afd != null) {
            long len = afd.getLength();
            if (len < 0) {
                throw new AndroidRuntimeException("no length for fd");
            }
            return _load(afd.getFileDescriptor(), afd.getStartOffset(), len, priority);
        } else {
            return 0;
        }
!!!69797303.java!!!	load(inout fd : FileDescriptor, in offset : long, in length : long, in priority : int) : int
        return _load(fd, offset, length, priority);
!!!69797559.java!!!	play(in soundID : int, in leftVolume : float, in rightVolume : float, in priority : int, in loop : int, in rate : float) : int
        if (isRestricted()) {
            leftVolume = rightVolume = 0;
        }
        return _play(soundID, leftVolume, rightVolume, priority, loop, rate);
!!!69798327.java!!!	setVolume(in streamID : int, in leftVolume : float, in rightVolume : float) : void
        if (isRestricted()) {
            return;
        }
        _setVolume(streamID, leftVolume, rightVolume);
!!!69798455.java!!!	setVolume(in streamID : int, in volume : float) : void
        setVolume(streamID, volume, volume);
!!!69799095.java!!!	setOnLoadCompleteListener(inout listener : SoundPool::OnLoadCompleteListener) : void
        synchronized(mLock) {
            if (listener != null) {
                // setup message handler
                Looper looper;
                if ((looper = Looper.myLooper()) != null) {
                    mEventHandler = new EventHandler(looper);
                } else if ((looper = Looper.getMainLooper()) != null) {
                    mEventHandler = new EventHandler(looper);
                } else {
                    mEventHandler = null;
                }
            } else {
                mEventHandler = null;
            }
            mOnLoadCompleteListener = listener;
        }
!!!69799223.java!!!	getService() : IAudioService
        if (sService != null) {
            return sService;
        }
        IBinder b = ServiceManager.getService(Context.AUDIO_SERVICE);
        sService = IAudioService.Stub.asInterface(b);
        return sService;
!!!69799351.java!!!	isRestricted() : boolean
        IAudioService service = getService();
        boolean cameraSoundForced = false;

        try {
            cameraSoundForced = service.isCameraSoundForced();
        } catch (RemoteException e) {
            Log.e(TAG, "Cannot access AudioService in isRestricted()");
        }

        if (cameraSoundForced &&
                ((mAttributes.getAllFlags() & AudioAttributes.FLAG_AUDIBILITY_ENFORCED) != 0)
// FIXME: should also check usage when set properly by camera app
//                && (mAttributes.getUsage() == AudioAttributes.USAGE_ASSISTANCE_SONIFICATION)
                ) {
            return false;
        }

        if ((mAttributes.getAllFlags() & AudioAttributes.FLAG_BYPASS_INTERRUPTION_POLICY) != 0) {
            return false;
        }
        return !mHasAppOpsPlayAudio;
!!!69799479.java!!!	updateAppOpsPlayAudio() : void
        try {
            final int mode = mAppOps.checkAudioOperation(AppOpsManager.OP_PLAY_AUDIO,
                    mAttributes.getUsage(),
                    Process.myUid(), ActivityThread.currentPackageName());
            mHasAppOpsPlayAudio = (mode == AppOpsManager.MODE_ALLOWED);
        } catch (RemoteException e) {
            mHasAppOpsPlayAudio = false;
        }
!!!69800119.java!!!	postEventFromNative(inout ref : Object, in msg : int, in arg1 : int, in arg2 : int, inout obj : Object) : void
        SoundPool soundPool = ((WeakReference<SoundPool>) ref).get();
        if (soundPool == null)
            return;

        if (soundPool.mEventHandler != null) {
            Message m = soundPool.mEventHandler.obtainMessage(msg, arg1, arg2, obj);
            soundPool.mEventHandler.sendMessage(m);
        }
