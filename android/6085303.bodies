class MediaCodecInfo
!!!69661367.java!!!	MediaCodecInfo(inout name : String, inout isEncoder : boolean, inout caps : MediaCodecInfo::CodecCapabilities [[]])
        mName = name;
        mIsEncoder = isEncoder;
        mCaps = new HashMap<String, CodecCapabilities>();
        for (CodecCapabilities c: caps) {
            mCaps.put(c.getMimeType(), c);
        }
!!!69661495.java!!!	getName() : String
        return mName;
!!!69661623.java!!!	isEncoder() : boolean
        return mIsEncoder;
!!!69661751.java!!!	getSupportedTypes() : String
        Set<String> typeSet = mCaps.keySet();
        String[] types = typeSet.toArray(new String[typeSet.size()]);
        Arrays.sort(types);
        return types;
!!!69661879.java!!!	checkPowerOfTwo(in value : int, inout message : String) : int
        if ((value & (value - 1)) != 0) {
            throw new IllegalArgumentException(message);
        }
        return value;
!!!69673527.java!!!	getCapabilitiesForType(inout type : String) : MediaCodecInfo::CodecCapabilities
        CodecCapabilities caps = mCaps.get(type);
        if (caps == null) {
            throw new IllegalArgumentException("codec does not support type");
        }
        // clone writable object
        return caps.dup();
!!!69673655.java!!!	makeRegular() : MediaCodecInfo
        ArrayList<CodecCapabilities> caps = new ArrayList<CodecCapabilities>();
        for (CodecCapabilities c: mCaps.values()) {
            if (c.isRegular()) {
                caps.add(c);
            }
        }
        if (caps.size() == 0) {
            return null;
        } else if (caps.size() == mCaps.size()) {
            return this;
        }

        return new MediaCodecInfo(
                mName, mIsEncoder,
                caps.toArray(new CodecCapabilities[caps.size()]));
