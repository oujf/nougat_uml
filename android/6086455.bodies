class MediaCodecList
!!!69673783.java!!!	getCodecCount() : int
        initCodecList();
        return sRegularCodecInfos.length;
!!!69674039.java!!!	getCodecInfoAt(in index : int) : MediaCodecInfo
        initCodecList();
        if (index < 0 || index > sRegularCodecInfos.length) {
            throw new IllegalArgumentException();
        }
        return sRegularCodecInfos[index];
!!!69674167.java!!!	getGlobalSettings() : String
        synchronized (sInitLock) {
            if (sGlobalSettings == null) {
                sGlobalSettings = native_getGlobalSettings();
            }
        }
        return sGlobalSettings;
!!!69674295.java!!!	initCodecList() : void
        synchronized (sInitLock) {
            if (sRegularCodecInfos == null) {
                int count = native_getCodecCount();
                ArrayList<MediaCodecInfo> regulars = new ArrayList<MediaCodecInfo>();
                ArrayList<MediaCodecInfo> all = new ArrayList<MediaCodecInfo>();
                for (int index = 0; index < count; index++) {
                    try {
                        MediaCodecInfo info = getNewCodecInfoAt(index);
                        all.add(info);
                        info = info.makeRegular();
                        if (info != null) {
                            regulars.add(info);
                        }
                    } catch (Exception e) {
                        Log.e(TAG, "Could not get codec capabilities", e);
                    }
                }
                sRegularCodecInfos =
                    regulars.toArray(new MediaCodecInfo[regulars.size()]);
                sAllCodecInfos =
                    all.toArray(new MediaCodecInfo[all.size()]);
            }
        }
!!!69674423.java!!!	getNewCodecInfoAt(in index : int) : MediaCodecInfo
        String[] supportedTypes = getSupportedTypes(index);
        MediaCodecInfo.CodecCapabilities[] caps =
            new MediaCodecInfo.CodecCapabilities[supportedTypes.length];
        int typeIx = 0;
        for (String type: supportedTypes) {
            caps[typeIx++] = getCodecCapabilities(index, type);
        }
        return new MediaCodecInfo(
                getCodecName(index), isEncoder(index), caps);
!!!69675319.java!!!	getInfoFor(inout codec : String) : MediaCodecInfo
        initCodecList();
        return sAllCodecInfos[findCodecByName(codec)];
!!!69675575.java!!!	MediaCodecList()
        this(REGULAR_CODECS);
!!!69675703.java!!!	MediaCodecList(in kind : int)
        initCodecList();
        if (kind == REGULAR_CODECS) {
            mCodecInfos = sRegularCodecInfos;
        } else {
            mCodecInfos = sAllCodecInfos;
        }
!!!69675831.java!!!	getCodecInfos() : MediaCodecInfo
        return Arrays.copyOf(mCodecInfos, mCodecInfos.length);
!!!69675959.java!!!	findDecoderForFormat(inout format : MediaFormat) : String
        return findCodecForFormat(false /* encoder */, format);
!!!69676087.java!!!	findEncoderForFormat(inout format : MediaFormat) : String
        return findCodecForFormat(true /* encoder */, format);
!!!69676215.java!!!	findCodecForFormat(inout encoder : boolean, inout format : MediaFormat) : String
        String mime = format.getString(MediaFormat.KEY_MIME);
        for (MediaCodecInfo info: mCodecInfos) {
            if (info.isEncoder() != encoder) {
                continue;
            }
            try {
                MediaCodecInfo.CodecCapabilities caps = info.getCapabilitiesForType(mime);
                if (caps != null && caps.isFormatSupported(format)) {
                    return info.getName();
                }
            } catch (IllegalArgumentException e) {
                // type is not supported
            }
        }
        return null;
