class Metadata
!!!69758263.java!!!	scanAllRecords(inout parcel : Parcel, in bytesLeft : int) : boolean
        int recCount = 0;
        boolean error = false;

        mKeyToPosMap.clear();
        while (bytesLeft > kRecordHeaderSize) {
            final int start = parcel.dataPosition();
            // Check the size.
            final int size = parcel.readInt();

            if (size <= kRecordHeaderSize) {  // at least 1 byte should be present.
                Log.e(TAG, "Record is too short");
                error = true;
                break;
            }

            // Check the metadata key.
            final int metadataId = parcel.readInt();
            if (!checkMetadataId(metadataId)) {
                error = true;
                break;
            }

            // Store the record offset which points to the type
            // field so we can later on read/unmarshall the record
            // payload.
            if (mKeyToPosMap.containsKey(metadataId)) {
                Log.e(TAG, "Duplicate metadata ID found");
                error = true;
                break;
            }

            mKeyToPosMap.put(metadataId, parcel.dataPosition());

            // Check the metadata type.
            final int metadataType = parcel.readInt();
            if (metadataType <= 0 || metadataType > LAST_TYPE) {
                Log.e(TAG, "Invalid metadata type " + metadataType);
                error = true;
                break;
            }

            // Skip to the next one.
            try {
                parcel.setDataPosition(MathUtils.addOrThrow(start, size));
            } catch (IllegalArgumentException e) {
                Log.e(TAG, "Invalid size: " + e.getMessage());
                error = true;
                break;
            }

            bytesLeft -= size;
            ++recCount;
        }

        if (0 != bytesLeft || error) {
            Log.e(TAG, "Ran out of data or error on record " + recCount);
            mKeyToPosMap.clear();
            return false;
        } else {
            return true;
        }
!!!69758391.java!!!	parse(inout parcel : Parcel) : boolean
        if (parcel.dataAvail() < kMetaHeaderSize) {
            Log.e(TAG, "Not enough data " + parcel.dataAvail());
            return false;
        }

        final int pin = parcel.dataPosition();  // to roll back in case of errors.
        final int size = parcel.readInt();

        // The extra kInt32Size below is to account for the int32 'size' just read.
        if (parcel.dataAvail() + kInt32Size < size || size < kMetaHeaderSize) {
            Log.e(TAG, "Bad size " + size + " avail " + parcel.dataAvail() + " position " + pin);
            parcel.setDataPosition(pin);
            return false;
        }

        // Checks if the 'M' 'E' 'T' 'A' marker is present.
        final int kShouldBeMetaMarker = parcel.readInt();
        if (kShouldBeMetaMarker != kMetaMarker ) {
            Log.e(TAG, "Marker missing " + Integer.toHexString(kShouldBeMetaMarker));
            parcel.setDataPosition(pin);
            return false;
        }

        // Scan the records to collect metadata ids and offsets.
        if (!scanAllRecords(parcel, size - kMetaHeaderSize)) {
            parcel.setDataPosition(pin);
            return false;
        }
        mParcel = parcel;
        return true;
!!!69758519.java!!!	keySet() : Set<Integer>
        return mKeyToPosMap.keySet();
!!!69758647.java!!!	has(in metadataId : int) : boolean
        if (!checkMetadataId(metadataId)) {
            throw new IllegalArgumentException("Invalid key: " + metadataId);
        }
        return mKeyToPosMap.containsKey(metadataId);
!!!69758775.java!!!	getString(in key : int) : String
        checkType(key, STRING_VAL);
        return mParcel.readString();
!!!69758903.java!!!	getInt(in key : int) : int
        checkType(key, INTEGER_VAL);
        return mParcel.readInt();
!!!69759031.java!!!	getBoolean(in key : int) : boolean
        checkType(key, BOOLEAN_VAL);
        return mParcel.readInt() == 1;
!!!69759159.java!!!	getLong(in key : int) : long
        checkType(key, LONG_VAL);    /**
     * {@hide}
     */
        return mParcel.readLong();
!!!69759287.java!!!	getDouble(in key : int) : double
        checkType(key, DOUBLE_VAL);
        return mParcel.readDouble();
!!!69759415.java!!!	getByteArray(in key : int) : byte
        checkType(key, BYTE_ARRAY_VAL);
        return mParcel.createByteArray();
!!!69759543.java!!!	getDate(in key : int) : Date
        checkType(key, DATE_VAL);
        final long timeSinceEpoch = mParcel.readLong();
        final String timeZone = mParcel.readString();

        if (timeZone.length() == 0) {
            return new Date(timeSinceEpoch);
        } else {
            TimeZone tz = TimeZone.getTimeZone(timeZone);
            Calendar cal = Calendar.getInstance(tz);

            cal.setTimeInMillis(timeSinceEpoch);
            return cal.getTime();
        }
!!!69759671.java!!!	lastSytemId() : int
 return LAST_SYSTEM;
!!!69759799.java!!!	firstCustomId() : int
 return FIRST_CUSTOM;
!!!69759927.java!!!	lastType() : int
 return LAST_TYPE;
!!!69760055.java!!!	checkMetadataId(in val : int) : boolean
        if (val <= ANY || (LAST_SYSTEM < val && val < FIRST_CUSTOM)) {
            Log.e(TAG, "Invalid metadata ID " + val);
            return false;
        }
        return true;
!!!69760183.java!!!	checkType(in key : int, in expectedType : int) : void
        final int pos = mKeyToPosMap.get(key);

        mParcel.setDataPosition(pos);

        final int type = mParcel.readInt();
        if (type != expectedType) {
            throw new IllegalStateException("Wrong type " + expectedType + " but got " + type);
        }
