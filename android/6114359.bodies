class MidiInputPort
!!!69871671.java!!!	MidiInputPort(inout server : IMidiDeviceServer, inout token : IBinder, inout pfd : ParcelFileDescriptor, in portNumber : int)
        super(MidiPortImpl.MAX_PACKET_DATA_SIZE);

        mDeviceServer = server;
        mToken = token;
        mParcelFileDescriptor = pfd;
        mPortNumber = portNumber;
        mOutputStream = new FileOutputStream(pfd.getFileDescriptor());
        mGuard.open("close");
!!!69871799.java!!!	MidiInputPort(inout pfd : ParcelFileDescriptor, in portNumber : int)
        this(null, null, pfd, portNumber);
!!!69871927.java!!!	getPortNumber() : int
        return mPortNumber;
!!!69872055.java!!!	onSend(inout msg : byte [[]], in offset : int, in count : int, in timestamp : long) : void
        if (offset < 0 || count < 0 || offset + count > msg.length) {
            throw new IllegalArgumentException("offset or count out of range");
        }
        if (count > MidiPortImpl.MAX_PACKET_DATA_SIZE) {
            throw new IllegalArgumentException("count exceeds max message size");
        }

        synchronized (mBuffer) {
            if (mOutputStream == null) {
                throw new IOException("MidiInputPort is closed");
            }
            int length = MidiPortImpl.packData(msg, offset, count, timestamp, mBuffer);
            mOutputStream.write(mBuffer, 0, length);
        }
!!!69872183.java!!!	onFlush() : void
        synchronized (mBuffer) {
            if (mOutputStream == null) {
                throw new IOException("MidiInputPort is closed");
            }
            int length = MidiPortImpl.packFlush(mBuffer);
            mOutputStream.write(mBuffer, 0, length);
        }
!!!69872311.java!!!	claimFileDescriptor() : ParcelFileDescriptor
        synchronized (mGuard) {
            ParcelFileDescriptor pfd;
            synchronized (mBuffer) {
                pfd = mParcelFileDescriptor;
                if (pfd == null) return null;
                IoUtils.closeQuietly(mOutputStream);
                mParcelFileDescriptor = null;
                mOutputStream = null;
            }

            // Set mIsClosed = true so we will not call mDeviceServer.closePort() in close().
            // MidiDevice.MidiConnection.close() will do the cleanup instead.
            mIsClosed = true;
            return pfd;
        }
!!!69872439.java!!!	getToken() : IBinder
        return mToken;
!!!69872567.java!!!	getDeviceServer() : IMidiDeviceServer
        return mDeviceServer;
!!!69872695.java!!!	close() : void
        synchronized (mGuard) {
            if (mIsClosed) return;
            mGuard.close();
            synchronized (mBuffer) {
                if (mParcelFileDescriptor != null) {
                    mParcelFileDescriptor.close();
                    mParcelFileDescriptor = null;
                }
                if (mOutputStream != null) {
                    mOutputStream.close();
                    mOutputStream = null;
                }
            }
            if (mDeviceServer != null) {
                try {
                    mDeviceServer.closePort(mToken);
                } catch (RemoteException e) {
                    Log.e(TAG, "RemoteException in MidiInputPort.close()");
                }
            }
            mIsClosed = true;
        }
!!!69872823.java!!!	finalize() : void
        try {
            mGuard.warnIfOpen();
            // not safe to make binder calls from finalize()
            mDeviceServer = null;
            close();
        } finally {
            super.finalize();
        }
