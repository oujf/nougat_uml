class TvInputInfo
!!!69923767.java!!!	createTvInputInfo(inout context : Context, inout service : ResolveInfo, inout hdmiDeviceInfo : HdmiDeviceInfo, inout parentId : String, inout label : String, inout iconUri : Uri) : TvInputInfo
        TvInputInfo info = new TvInputInfo.Builder(context, service)
                .setHdmiDeviceInfo(hdmiDeviceInfo)
                .setParentId(parentId)
                .setLabel(label)
                .build();
        info.mIconUri = iconUri;
        return info;
!!!69923895.java!!!	createTvInputInfo(inout context : Context, inout service : ResolveInfo, inout hdmiDeviceInfo : HdmiDeviceInfo, inout parentId : String, in labelRes : int, inout icon : Icon) : TvInputInfo
        return new TvInputInfo.Builder(context, service)
                .setHdmiDeviceInfo(hdmiDeviceInfo)
                .setParentId(parentId)
                .setLabel(labelRes)
                .setIcon(icon)
                .build();
!!!69924023.java!!!	createTvInputInfo(inout context : Context, inout service : ResolveInfo, inout hardwareInfo : TvInputHardwareInfo, inout label : String, inout iconUri : Uri) : TvInputInfo
        TvInputInfo info = new TvInputInfo.Builder(context, service)
                .setTvInputHardwareInfo(hardwareInfo)
                .setLabel(label)
                .build();
        info.mIconUri = iconUri;
        return info;
!!!69924151.java!!!	createTvInputInfo(inout context : Context, inout service : ResolveInfo, inout hardwareInfo : TvInputHardwareInfo, in labelRes : int, inout icon : Icon) : TvInputInfo
        return new TvInputInfo.Builder(context, service)
                .setTvInputHardwareInfo(hardwareInfo)
                .setLabel(labelRes)
                .setIcon(icon)
                .build();
!!!69924279.java!!!	TvInputInfo(inout service : ResolveInfo, inout id : String, in type : int, inout isHardwareInput : boolean, inout label : CharSequence, in labelResId : int, inout icon : Icon, inout iconStandby : Icon, inout iconDisconnected : Icon, inout setupActivity : String, inout settingsActivity : String, inout canRecord : boolean, in tunerCount : int, inout hdmiDeviceInfo : HdmiDeviceInfo, inout isConnectedToHdmiSwitch : boolean, inout parentId : String, inout extras : Bundle)
        mService = service;
        mId = id;
        mType = type;
        mIsHardwareInput = isHardwareInput;
        mLabel = label;
        mLabelResId = labelResId;
        mIcon = icon;
        mIconStandby = iconStandby;
        mIconDisconnected = iconDisconnected;
        mSetupActivity = setupActivity;
        mSettingsActivity = settingsActivity;
        mCanRecord = canRecord;
        mTunerCount = tunerCount;
        mHdmiDeviceInfo = hdmiDeviceInfo;
        mIsConnectedToHdmiSwitch = isConnectedToHdmiSwitch;
        mParentId = parentId;
        mExtras = extras;
!!!69924407.java!!!	getId() : String
        return mId;
!!!69924535.java!!!	getParentId() : String
        return mParentId;
!!!69924663.java!!!	getServiceInfo() : ServiceInfo
        return mService.serviceInfo;
!!!69924791.java!!!	getComponent() : ComponentName
        return new ComponentName(mService.serviceInfo.packageName, mService.serviceInfo.name);
!!!69924919.java!!!	createSetupIntent() : Intent
        if (!TextUtils.isEmpty(mSetupActivity)) {
            Intent intent = new Intent(Intent.ACTION_MAIN);
            intent.setClassName(mService.serviceInfo.packageName, mSetupActivity);
            intent.putExtra(EXTRA_INPUT_ID, getId());
            return intent;
        }
        return null;
!!!69925047.java!!!	createSettingsIntent() : Intent
        if (!TextUtils.isEmpty(mSettingsActivity)) {
            Intent intent = new Intent(Intent.ACTION_MAIN);
            intent.setClassName(mService.serviceInfo.packageName, mSettingsActivity);
            intent.putExtra(EXTRA_INPUT_ID, getId());
            return intent;
        }
        return null;
!!!69925175.java!!!	getType() : int
        return mType;
!!!69925303.java!!!	getTunerCount() : int
        return mTunerCount;
!!!69925431.java!!!	canRecord() : boolean
        return mCanRecord;
!!!69925559.java!!!	getExtras() : Bundle
        return mExtras;
!!!69925687.java!!!	getHdmiDeviceInfo() : HdmiDeviceInfo
        if (mType == TYPE_HDMI) {
            return mHdmiDeviceInfo;
        }
        return null;
!!!69925815.java!!!	isPassthroughInput() : boolean
        return mType != TYPE_TUNER;
!!!69925943.java!!!	isHardwareInput() : boolean
        return mIsHardwareInput;
!!!69926071.java!!!	isConnectedToHdmiSwitch() : boolean
        return mIsConnectedToHdmiSwitch;
!!!69926199.java!!!	isHidden(inout context : Context) : boolean
        return TvInputSettings.isHidden(context, mId, UserHandle.myUserId());
!!!69926327.java!!!	loadLabel(inout context : Context) : CharSequence
        if (mLabelResId != 0) {
            return context.getPackageManager().getText(mService.serviceInfo.packageName,
                    mLabelResId, null);
        } else if (!TextUtils.isEmpty(mLabel)) {
            return mLabel;
        }
        return mService.loadLabel(context.getPackageManager());
!!!69926455.java!!!	loadCustomLabel(inout context : Context) : CharSequence
        return TvInputSettings.getCustomLabel(context, mId, UserHandle.myUserId());
!!!69926583.java!!!	loadIcon(inout context : Context) : Drawable
        if (mIcon != null) {
            return mIcon.loadDrawable(context);
        } else if (mIconUri != null) {
            try (InputStream is = context.getContentResolver().openInputStream(mIconUri)) {
                Drawable drawable = Drawable.createFromStream(is, null);
                if (drawable != null) {
                    return drawable;
                }
            } catch (IOException e) {
                Log.w(TAG, "Loading the default icon due to a failure on loading " + mIconUri, e);
                // Falls back.
            }
        }
        return loadServiceIcon(context);
!!!69926711.java!!!	loadIcon(inout context : Context, in state : int) : Drawable
        if (state == TvInputManager.INPUT_STATE_CONNECTED) {
            return loadIcon(context);
        } else if (state == TvInputManager.INPUT_STATE_CONNECTED_STANDBY) {
            if (mIconStandby != null) {
                return mIconStandby.loadDrawable(context);
            }
        } else if (state == TvInputManager.INPUT_STATE_DISCONNECTED) {
            if (mIconDisconnected != null) {
                return mIconDisconnected.loadDrawable(context);
            }
        } else {
            throw new IllegalArgumentException("Unknown state: " + state);
        }
        return null;
!!!69926839.java!!!	describeContents() : int
        return 0;
!!!69926967.java!!!	hashCode() : int
        return mId.hashCode();
!!!69927095.java!!!	equals(inout o : Object) : boolean
        if (o == this) {
            return true;
        }

        if (!(o instanceof TvInputInfo)) {
            return false;
        }

        TvInputInfo obj = (TvInputInfo) o;
        return Objects.equals(mService, obj.mService)
                && TextUtils.equals(mId, obj.mId)
                && mType == obj.mType
                && mIsHardwareInput == obj.mIsHardwareInput
                && TextUtils.equals(mLabel, obj.mLabel)
                && Objects.equals(mIconUri, obj.mIconUri)
                && mLabelResId == obj.mLabelResId
                && Objects.equals(mIcon, obj.mIcon)
                && Objects.equals(mIconStandby, obj.mIconStandby)
                && Objects.equals(mIconDisconnected, obj.mIconDisconnected)
                && TextUtils.equals(mSetupActivity, obj.mSetupActivity)
                && TextUtils.equals(mSettingsActivity, obj.mSettingsActivity)
                && mCanRecord == obj.mCanRecord
                && mTunerCount == obj.mTunerCount
                && Objects.equals(mHdmiDeviceInfo, obj.mHdmiDeviceInfo)
                && mIsConnectedToHdmiSwitch == obj.mIsConnectedToHdmiSwitch
                && TextUtils.equals(mParentId, obj.mParentId)
                && Objects.equals(mExtras, obj.mExtras);
!!!69927223.java!!!	toString() : String
        return "TvInputInfo{id=" + mId
                + ", pkg=" + mService.serviceInfo.packageName
                + ", service=" + mService.serviceInfo.name + "}";
!!!69927351.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        mService.writeToParcel(dest, flags);
        dest.writeString(mId);
        dest.writeInt(mType);
        dest.writeByte(mIsHardwareInput ? (byte) 1 : 0);
        TextUtils.writeToParcel(mLabel, dest, flags);
        dest.writeParcelable(mIconUri, flags);
        dest.writeInt(mLabelResId);
        dest.writeParcelable(mIcon, flags);
        dest.writeParcelable(mIconStandby, flags);
        dest.writeParcelable(mIconDisconnected, flags);
        dest.writeString(mSetupActivity);
        dest.writeString(mSettingsActivity);
        dest.writeByte(mCanRecord ? (byte) 1 : 0);
        dest.writeInt(mTunerCount);
        dest.writeParcelable(mHdmiDeviceInfo, flags);
        dest.writeByte(mIsConnectedToHdmiSwitch ? (byte) 1 : 0);
        dest.writeString(mParentId);
        dest.writeBundle(mExtras);
!!!69927479.java!!!	loadServiceIcon(inout context : Context) : Drawable
        if (mService.serviceInfo.icon == 0
                && mService.serviceInfo.applicationInfo.icon == 0) {
            return null;
        }
        return mService.serviceInfo.loadIcon(context.getPackageManager());
!!!69927607.java!!!	TvInputInfo(inout in : Parcel)
        mService = ResolveInfo.CREATOR.createFromParcel(in);
        mId = in.readString();
        mType = in.readInt();
        mIsHardwareInput = in.readByte() == 1;
        mLabel = TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(in);
        mIconUri = in.readParcelable(null);
        mLabelResId = in.readInt();
        mIcon = in.readParcelable(null);
        mIconStandby = in.readParcelable(null);
        mIconDisconnected = in.readParcelable(null);
        mSetupActivity = in.readString();
        mSettingsActivity = in.readString();
        mCanRecord = in.readByte() == 1;
        mTunerCount = in.readInt();
        mHdmiDeviceInfo = in.readParcelable(null);
        mIsConnectedToHdmiSwitch = in.readByte() == 1;
        mParentId = in.readString();
        mExtras = in.readBundle();
