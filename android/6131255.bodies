class Frame
!!!70063159.java!!!	Frame(inout format : FrameFormat, inout frameManager : FrameManager)
        mFormat = format.mutableCopy();
        mFrameManager = frameManager;
!!!70063287.java!!!	Frame(inout format : FrameFormat, inout frameManager : FrameManager, in bindingType : int, in bindingId : long)
        mFormat = format.mutableCopy();
        mFrameManager = frameManager;
        mBindingType = bindingType;
        mBindingId = bindingId;
!!!70063415.java!!!	getFormat() : FrameFormat
        return mFormat;
!!!70063543.java!!!	getCapacity() : int
        return getFormat().getSize();
!!!70063671.java!!!	isReadOnly() : boolean
        return mReadOnly;
!!!70063799.java!!!	getBindingType() : int
        return mBindingType;
!!!70063927.java!!!	getBindingId() : long
        return mBindingId;
!!!70064055.java!!!	setObjectValue(inout object : Object) : void
        assertFrameMutable();

        // Attempt to set the value using a specific setter (which may be more optimized), and
        // fall back to the setGenericObjectValue(...) in case of no match.
        if (object instanceof int[]) {
            setInts((int[])object);
        } else if (object instanceof float[]) {
            setFloats((float[])object);
        } else if (object instanceof ByteBuffer) {
            setData((ByteBuffer)object);
        } else if (object instanceof Bitmap) {
            setBitmap((Bitmap)object);
        } else {
            setGenericObjectValue(object);
        }
!!!70064951.java!!!	setData(inout buffer : ByteBuffer) : void
        setData(buffer, 0, buffer.limit());
!!!70065079.java!!!	setData(inout bytes : byte [[]], in offset : int, in length : int) : void
        setData(ByteBuffer.wrap(bytes, offset, length));
!!!70065591.java!!!	setTimestamp(in timestamp : long) : void
        mTimestamp = timestamp;
!!!70065719.java!!!	getTimestamp() : long
        return mTimestamp;
!!!70065847.java!!!	setDataFromFrame(inout frame : Frame) : void
        setData(frame.getData());
!!!70065975.java!!!	requestResize(inout newDimensions : int [[]]) : boolean
        return false;
!!!70066103.java!!!	getRefCount() : int
        return mRefCount;
!!!70066231.java!!!	release() : Frame
        if (mFrameManager != null) {
            return mFrameManager.releaseFrame(this);
        } else {
            return this;
        }
!!!70066359.java!!!	retain() : Frame
        if (mFrameManager != null) {
            return mFrameManager.retainFrame(this);
        } else {
            return this;
        }
!!!70066487.java!!!	getFrameManager() : FrameManager
        return mFrameManager;
!!!70066615.java!!!	assertFrameMutable() : void
        if (isReadOnly()) {
            throw new RuntimeException("Attempting to modify read-only frame!");
        }
!!!70066743.java!!!	setReusable(inout reusable : boolean) : void
        mReusable = reusable;
!!!70066871.java!!!	setFormat(inout format : FrameFormat) : void
        mFormat = format.mutableCopy();
!!!70066999.java!!!	setGenericObjectValue(inout value : Object) : void
        throw new RuntimeException(
            "Cannot set object value of unsupported type: " + value.getClass());
!!!70067127.java!!!	convertBitmapToRGBA(inout bitmap : Bitmap) : Bitmap
        if (bitmap.getConfig() == Bitmap.Config.ARGB_8888) {
            return bitmap;
        } else {
            Bitmap result = bitmap.copy(Bitmap.Config.ARGB_8888, false);
            if (result == null) {
                throw new RuntimeException("Error converting bitmap to RGBA!");
            } else if (result.getRowBytes() != result.getWidth() * 4) {
                throw new RuntimeException("Unsupported row byte count in bitmap!");
            }
            return result;
        }
!!!70067255.java!!!	reset(inout newFormat : FrameFormat) : void
        mFormat = newFormat.mutableCopy();
        mReadOnly = false;
        mRefCount = 1;
!!!70067895.java!!!	incRefCount() : int
        ++mRefCount;
        return mRefCount;
!!!70068023.java!!!	decRefCount() : int
        --mRefCount;
        return mRefCount;
!!!70068151.java!!!	isReusable() : boolean
        return mReusable;
!!!70068279.java!!!	markReadOnly() : void
        mReadOnly = true;
