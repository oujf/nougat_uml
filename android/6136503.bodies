class GraphEnvironment
!!!70029623.java!!!	GraphEnvironment()
        super(null);
!!!70029751.java!!!	GraphEnvironment(inout frameManager : FrameManager, inout reader : GraphReader)
        super(frameManager);
        mGraphReader = reader;
!!!70029879.java!!!	getGraphReader() : GraphReader
        if (mGraphReader == null) {
            mGraphReader = new TextGraphReader();
        }
        return mGraphReader;
!!!70030007.java!!!	addReferences(inout  : Object...references) : void
        getGraphReader().addReferencesByKeysAndValues(references);
!!!70030135.java!!!	loadGraph(inout context : Context, in resourceId : int) : int
        // Read the file into a graph
        FilterGraph graph = null;
        try {
            graph = getGraphReader().readGraphResource(context, resourceId);
        } catch (GraphIOException e) {
            throw new RuntimeException("Could not read graph: " + e.getMessage());
        }

        // Add graph to our list of graphs
        return addGraph(graph);
!!!70030263.java!!!	addGraph(inout graph : FilterGraph) : int
        GraphHandle graphHandle = new GraphHandle(graph);
        mGraphs.add(graphHandle);
        return mGraphs.size() - 1;
!!!70030391.java!!!	getGraph(in graphId : int) : FilterGraph
        if (graphId < 0 || graphId >= mGraphs.size()) {
            throw new IllegalArgumentException(
                "Invalid graph ID " + graphId + " specified in runGraph()!");
        }
        return mGraphs.get(graphId).getGraph();
!!!70030519.java!!!	getRunner(in graphId : int, in executionMode : int) : GraphRunner
        switch (executionMode) {
            case MODE_ASYNCHRONOUS:
                return mGraphs.get(graphId).getAsyncRunner(getContext());

            case MODE_SYNCHRONOUS:
                return mGraphs.get(graphId).getSyncRunner(getContext());

            default:
                throw new RuntimeException(
                    "Invalid execution mode " + executionMode + " specified in getRunner()!");
        }
