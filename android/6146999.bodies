class BitmapOverlayFilter
!!!70142391.java!!!	BitmapOverlayFilter(inout name : String)
        super(name);
!!!70142519.java!!!	setupPorts() : void
        addMaskedInputPort("image", ImageFormat.create(ImageFormat.COLORSPACE_RGBA));
        addOutputBasedOnInput("image", "image");
!!!70142647.java!!!	getOutputFormat(inout portName : String, inout inputFormat : FrameFormat) : FrameFormat
        return inputFormat;
!!!70142775.java!!!	initProgram(inout context : FilterContext, in target : int) : void
        switch (target) {
            case FrameFormat.TARGET_GPU:
                ShaderProgram shaderProgram = new ShaderProgram(context, mOverlayShader);
                shaderProgram.setMaximumTileSize(mTileSize);
                mProgram = shaderProgram;
                break;

            default:
                throw new RuntimeException("Filter FisheyeFilter does not support frames of " +
                    "target " + target + "!");
        }
        mTarget = target;
!!!70142903.java!!!	tearDown(inout context : FilterContext) : void
        if (mFrame != null) {
            mFrame.release();
            mFrame = null;
        }
!!!70143031.java!!!	process(inout context : FilterContext) : void
        // Get input frame
        Frame input = pullInput("image");
        FrameFormat inputFormat = input.getFormat();

        // Create output frame
        Frame output = context.getFrameManager().newFrame(inputFormat);

        // Create program if not created already
        if (mProgram == null || inputFormat.getTarget() != mTarget) {
            initProgram(context, inputFormat.getTarget());
        }

        if (mBitmap != null) {
            Frame frame = createBitmapFrame(context);
            // Process
            Frame[] inputs = {input, frame};
            mProgram.process(inputs, output);

            frame.release();
        } else {
            output.setDataFromFrame(input);
        }

        // Push output
        pushOutput("image", output);

        // Release pushed frame
        output.release();
!!!70143159.java!!!	createBitmapFrame(inout context : FilterContext) : Frame
        FrameFormat format = ImageFormat.create(mBitmap.getWidth(),
                                                mBitmap.getHeight(),
                                                ImageFormat.COLORSPACE_RGBA,
                                                FrameFormat.TARGET_GPU);

        Frame frame = context.getFrameManager().newFrame(format);
        frame.setBitmap(mBitmap);

        mBitmap.recycle();
        mBitmap = null;

        return frame;
