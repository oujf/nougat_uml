class BitmapSource
!!!70143287.java!!!	BitmapSource(inout name : String)
        super(name);
!!!70143415.java!!!	setupPorts() : void
        // Setup output format
        FrameFormat outputFormat = ImageFormat.create(ImageFormat.COLORSPACE_RGBA,
                                                      FrameFormat.TARGET_UNSPECIFIED);

        // Add output port
        addOutputPort("image", outputFormat);
!!!70143543.java!!!	loadImage(inout filterContext : FilterContext) : void
        // Create frame with bitmap
        mTarget = FrameFormat.readTargetString(mTargetString);
        FrameFormat outputFormat = ImageFormat.create(mBitmap.getWidth(),
                                                      mBitmap.getHeight(),
                                                      ImageFormat.COLORSPACE_RGBA,
                                                      mTarget);
        mImageFrame = filterContext.getFrameManager().newFrame(outputFormat);
        mImageFrame.setBitmap(mBitmap);
        mImageFrame.setTimestamp(Frame.TIMESTAMP_UNKNOWN);

        // Free up space used by bitmap
        if (mRecycleBitmap) {
            mBitmap.recycle();
        }
        mBitmap = null;
!!!70143671.java!!!	fieldPortValueUpdated(inout name : String, inout context : FilterContext) : void
        // Clear image (to trigger reload) in case parameters have been changed
        if (name.equals("bitmap") || name.equals("target")) {
            if (mImageFrame != null) {
                mImageFrame.release();
                mImageFrame = null;
            }
        }
!!!70143799.java!!!	process(inout context : FilterContext) : void
        if (mImageFrame == null) {
            loadImage(context);
        }

        pushOutput("image", mImageFrame);

        if (!mRepeatFrame) {
            closeOutputPort("image");
        }
!!!70143927.java!!!	tearDown(inout env : FilterContext) : void
        if (mImageFrame != null) {
            mImageFrame.release();
            mImageFrame = null;
        }
