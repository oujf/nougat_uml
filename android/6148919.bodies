class FillLightFilter
!!!70152887.java!!!	FillLightFilter(inout name : String)
      super(name);
!!!70153015.java!!!	setupPorts() : void
        addMaskedInputPort("image", ImageFormat.create(ImageFormat.COLORSPACE_RGBA));
        addOutputBasedOnInput("image", "image");
!!!70153143.java!!!	getOutputFormat(inout portName : String, inout inputFormat : FrameFormat) : FrameFormat
        return inputFormat;
!!!70153271.java!!!	initProgram(inout context : FilterContext, in target : int) : void
        switch (target) {
            case FrameFormat.TARGET_GPU:
                ShaderProgram shaderProgram = new ShaderProgram(context, mFillLightShader);
                Log.e("FillLight", "tile size: " + mTileSize);
                shaderProgram.setMaximumTileSize(mTileSize);
                mProgram = shaderProgram;
                break;

            default:
                throw new RuntimeException("Filter FillLight does not support frames of " +
                    "target " + target + "!");
        }
        mTarget = target;
!!!70153399.java!!!	process(inout context : FilterContext) : void
        // Get input frame
        Frame input = pullInput("image");
        FrameFormat inputFormat = input.getFormat();

        // Create output frame
        Frame output = context.getFrameManager().newFrame(inputFormat);

        // Create program if not created already
        if (mProgram == null || inputFormat.getTarget() != mTarget) {
            initProgram(context, inputFormat.getTarget());
            updateParameters();
        }

        // Process
        mProgram.process(input, output);

        // Push output
        pushOutput("image", output);

        // Release pushed frame
        output.release();
!!!70153527.java!!!	fieldPortValueUpdated(inout name : String, inout context : FilterContext) : void
        if (mProgram != null) {
            updateParameters();
        }
!!!70153655.java!!!	updateParameters() : void
        float fade_gamma = 0.3f;
        float amt = 1.0f - mBacklight;
        float mult = 1.0f / (amt * 0.7f + 0.3f);
        float faded = fade_gamma + (1.0f -fade_gamma) *mult;
        float igamma = 1.0f / faded;

        mProgram.setHostValue("mult", mult);
        mProgram.setHostValue("igamma", igamma);
