class RotateFilter
!!!70162999.java!!!	RotateFilter(inout name : String)
        super(name);
!!!70163127.java!!!	setupPorts() : void
        addMaskedInputPort("image", ImageFormat.create(ImageFormat.COLORSPACE_RGBA));
        addOutputBasedOnInput("image", "image");
!!!70163255.java!!!	initProgram(inout context : FilterContext, in target : int) : void
        switch (target) {
            case FrameFormat.TARGET_GPU:
                ShaderProgram shaderProgram = ShaderProgram.createIdentity(context);
                shaderProgram.setMaximumTileSize(mTileSize);
                shaderProgram.setClearsOutput(true);
                mProgram = shaderProgram;
                break;

            default:
                throw new RuntimeException("Filter Sharpen does not support frames of " +
                    "target " + target + "!");
        }
        mTarget = target;
!!!70163383.java!!!	fieldPortValueUpdated(inout name : String, inout context : FilterContext) : void
        if (mProgram != null) {
            updateParameters();
        }
!!!70163511.java!!!	process(inout context : FilterContext) : void
        // Get input frame
        Frame input = pullInput("image");
        FrameFormat inputFormat = input.getFormat();

        // Create program if not created already
        if (mProgram == null || inputFormat.getTarget() != mTarget) {
            initProgram(context, inputFormat.getTarget());
        }

        if (inputFormat.getWidth() != mWidth || inputFormat.getHeight() != mHeight) {
            mWidth = inputFormat.getWidth();
            mHeight = inputFormat.getHeight();
            mOutputWidth = mWidth;
            mOutputHeight = mHeight;

            updateParameters();
        }

        // Create output frame
        FrameFormat outputFormat = ImageFormat.create(mOutputWidth, mOutputHeight,
                                                      ImageFormat.COLORSPACE_RGBA,
                                                      FrameFormat.TARGET_GPU);

        Frame output = context.getFrameManager().newFrame(outputFormat);

        // Process
        mProgram.process(input, output);

        // Push output
        pushOutput("image", output);

        // Release pushed frame
        output.release();
!!!70163639.java!!!	updateParameters() : void
        float sinTheta;
        float cosTheta;

        if (mAngle % 90 == 0) {
            if (mAngle % 180 == 0) {
                sinTheta = 0f;
                cosTheta = (mAngle % 360 == 0) ? 1f:-1f;
            } else {
                cosTheta = 0f;
                sinTheta = ((mAngle + 90) % 360 == 0) ? -1f:1f;

                mOutputWidth = mHeight;
                mOutputHeight = mWidth;
            }
        } else {
            throw new RuntimeException("degree has to be multiply of 90.");
        }

        Point x0 = new Point(0.5f * (-cosTheta + sinTheta + 1f),
                             0.5f * (-sinTheta - cosTheta + 1f));
        Point x1 = new Point(0.5f * (cosTheta + sinTheta + 1f),
                             0.5f * (sinTheta - cosTheta + 1f));
        Point x2 = new Point(0.5f * (-cosTheta - sinTheta + 1f),
                             0.5f * (-sinTheta + cosTheta + 1f));
        Point x3 = new Point(0.5f * (cosTheta - sinTheta + 1f),
                             0.5f * (sinTheta + cosTheta + 1f));
        Quad quad = new Quad(x0, x1, x2, x3);
        ((ShaderProgram) mProgram).setTargetRegion(quad);
