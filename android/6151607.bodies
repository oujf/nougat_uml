class ToPackedGrayFilter
!!!70168887.java!!!	ToPackedGrayFilter(inout name : String)
        super(name);
!!!70169015.java!!!	setupPorts() : void
        addMaskedInputPort("image", ImageFormat.create(ImageFormat.COLORSPACE_RGBA,
                                                       FrameFormat.TARGET_GPU));
        addOutputBasedOnInput("image", "image");
!!!70169143.java!!!	getOutputFormat(inout portName : String, inout inputFormat : FrameFormat) : FrameFormat
        return convertInputFormat(inputFormat);
!!!70169271.java!!!	checkOutputDimensions(in outputWidth : int, in outputHeight : int) : void
        if (outputWidth <= 0 || outputHeight <= 0) {
            throw new RuntimeException("Invalid output dimensions: " +
                                       outputWidth + " " + outputHeight);
        }
!!!70169399.java!!!	convertInputFormat(inout inputFormat : FrameFormat) : FrameFormat
        int ow = mOWidth;
        int oh = mOHeight;
        int w = inputFormat.getWidth();
        int h = inputFormat.getHeight();
        if (mOWidth == FrameFormat.SIZE_UNSPECIFIED) {
            ow = w;
        }
        if (mOHeight == FrameFormat.SIZE_UNSPECIFIED) {
            oh = h;
        }
        if (mKeepAspectRatio) {
            // if keep aspect ratio, use the bigger dimension to determine the
            // final output size
            if (w > h) {
                ow = Math.max(ow, oh);
                oh = ow * h / w;
            } else {
                oh = Math.max(ow, oh);
                ow = oh * w / h;
            }
        }
        ow = (ow > 0 && ow < 4) ? 4 : (ow / 4) * 4; // ensure width is multiple of 4
        return ImageFormat.create(ow, oh,
                                  ImageFormat.COLORSPACE_GRAY,
                                  FrameFormat.TARGET_NATIVE);
!!!70169527.java!!!	prepare(inout context : FilterContext) : void
        mProgram = new ShaderProgram(context, mColorToPackedGrayShader);
!!!70169655.java!!!	process(inout context : FilterContext) : void
        Frame input = pullInput("image");
        FrameFormat inputFormat = input.getFormat();
        FrameFormat outputFormat = convertInputFormat(inputFormat);
        int ow = outputFormat.getWidth();
        int oh = outputFormat.getHeight();
        checkOutputDimensions(ow, oh);
        mProgram.setHostValue("pix_stride", 1.0f / ow);

        // Do the RGBA to luminance conversion.
        MutableFrameFormat tempFrameFormat = inputFormat.mutableCopy();
        tempFrameFormat.setDimensions(ow / 4, oh);
        Frame temp = context.getFrameManager().newFrame(tempFrameFormat);
        mProgram.process(input, temp);

        // Read frame from GPU to CPU.
        Frame output = context.getFrameManager().newFrame(outputFormat);
        output.setDataFromFrame(temp);
        temp.release();

        // Push output and yield ownership.
        pushOutput("image", output);
        output.release();
