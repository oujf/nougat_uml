class CameraTestResultPrinter
!!!70315447.java!!!	CameraTestResultPrinter(inout instrumentation : Instrumentation, inout writeToFile : boolean)
        mInst = instrumentation;
        mWriteToFile = writeToFile;

        // Create a log directory if not exists.
        File baseDir = new File(RESULT_DIR);
        if (!baseDir.exists() && !baseDir.mkdirs()) {
            throw new IllegalStateException("Couldn't create directory for logs: " + baseDir);
        }
        Log.v(TAG, String.format("Saving test results under: %s", baseDir.getAbsolutePath()));
        // Remove all logs but not the base directory before a test run.
        purgeFiles(baseDir);
!!!70315575.java!!!	printStatus(in numAttempts : int, in iteration : int, inout cameraId : String) : void
        Log.v(TAG, String.format("Print status: numAttempts=%d iteration=%d cameraId=%s",
                numAttempts, iteration, cameraId));
        // Write stats to instrumentation results.
        sendInstrumentationStatus(numAttempts, iteration, cameraId);

        if (mWriteToFile) {
            writeToFile(numAttempts, iteration, cameraId);
        }
!!!70315703.java!!!	printStatus(in numAttempts : int, in iteration : int) : void
        printStatus(numAttempts, iteration, "");
!!!70315831.java!!!	sendInstrumentationStatus(in numAttempts : int, in iteration : int, inout cameraId : String) : void
        Bundle output = new Bundle();
        output.putString(KEY_NUM_ATTEMPTS, String.valueOf(numAttempts));
        output.putString(KEY_ITERATION, String.valueOf(iteration));
        if (!"".equals(cameraId)) {
            output.putString(KEY_CAMERA_ID, cameraId);
        }
        mInst.sendStatus(INST_STATUS_IN_PROGRESS, output);
!!!70315959.java!!!	writeToFile(in numAttempts : int, in iteration : int, inout cameraId : String) : void
        // Format output in a form of pairs of key and value
        // eg, "numAttempts=500|iteration=400[|cameraId=0]"
        String results = String.format("%s=%d|%s=%d", KEY_NUM_ATTEMPTS, numAttempts,
                KEY_ITERATION, iteration);
        if (!"".equals(cameraId)) {
            results += String.format("|%s=%s", KEY_CAMERA_ID, cameraId);
        }
        Log.v(TAG, String.format("Writing result to a file: %s", results));

        // Write results to a swap file temporarily, then rename it to a text file when writing
        // has successfully completed, so that process crash during file writing would
        // not corrupt the file.
        File swapFile = new File(RESULT_DIR, RESULT_SWAP_FILE);
        BufferedWriter out = null;
        try {
            out = new BufferedWriter(new FileWriter(swapFile));
            out.write(results);
            out.flush();
        } catch (Exception e) {
            Log.w(TAG, String.format("Failed to write results to a file: %s", e));
        } finally {
            if (out != null) {
                try {
                    out.close();
                    // Delete an old file just before renaming, instead of overwriting.
                    String resultFileName = String.format(RESULT_FILE_FORMAT, cameraId);
                    File txtFile = new File(RESULT_DIR, resultFileName);
                    txtFile.delete();
                    swapFile.renameTo(txtFile);
                } catch (Exception e) {
                    Log.w(TAG, String.format("Failed to write results to a file: %s", e));
                }
            }
        }
!!!70316087.java!!!	purgeFiles(inout path : File) : void
        File[] files = path.listFiles();
        if (files != null) {
            for (File child : files) {
                if (path.isDirectory()) {
                    purgeFiles(child);
                }
                child.delete();
            }
        }
