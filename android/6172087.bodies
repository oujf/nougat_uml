class AssertHelpers
!!!70302263.java!!!	assertArrayNotAllZeroes(inout message : String, inout data : byte [[]]) : void
        int size = data.length;

        int i = 0;
        for (i = 0; i < size; ++i) {
            if (data[i] != 0) {
                break;
            }
        }

        assertTrue(message, i < size);
!!!70302391.java!!!	assertArrayNotGreater(inout message : String, inout left : float [[]], inout right : float [[]]) : void
        assertEquals("Array lengths did not match", left.length, right.length);

        String leftString = Arrays.toString(left);
        String rightString = Arrays.toString(right);

        for (int i = 0; i < left.length; ++i) {
            String msg = String.format(
                    "%s: (%s should be less than or equals than %s; item index %d; left = %s; " +
                    "right = %s)",
                    message, left[i], right[i], i, leftString, rightString);

            assertTrue(msg, left[i] <= right[i]);
        }
!!!70302519.java!!!	assertArrayWithinLowerBound(inout message : String, inout value : float [[]], in lowerBound : float) : void
        for (int i = 0; i < value.length; ++i) {
            assertTrue(
                    String.format("%s: (%s should be greater than than %s; item index %d in %s)",
                            message, value[i], lowerBound, i, Arrays.toString(value)),
                    value[i] > lowerBound);
        }
!!!70302647.java!!!	assertArrayWithinUpperBound(inout message : String, inout value : float [[]], in upperBound : float) : void
        for (int i = 0; i < value.length; ++i) {
            assertTrue(
                    String.format("%s: (%s should be less than than %s; item index %d in %s)",
                            message, value[i], upperBound, i, Arrays.toString(value)),
                    value[i] < upperBound);
        }
!!!70302775.java!!!	assertInRange(in value : float, in low : float, in high : float) : void
        assertTrue(
                String.format("Value %s must be greater or equal to %s, but was lower", value, low),
                value >= low);
        assertTrue(
                String.format("Value %s must be less than or equal to %s, but was higher",
                        value, high),
                value <= high);

        // TODO: generic by using comparators
!!!70302903.java!!!	assertArrayContains(inout message : String, inout actual : T [[]], inout checkVals : T) : void
        assertCollectionContainsAnyOf(message, buildList(actual), Arrays.asList(checkVals));
!!!70303031.java!!!	assertArrayContains(inout message : String, inout actual : int [[]], in checkVals : int) : void
        assertCollectionContainsAnyOf(message, buildList(actual), Arrays.asList(checkVals));
!!!70303159.java!!!	assertArrayContainsAnyOf(inout message : String, inout actual : T [[]], inout checkVals : T [[]]) : T
        return assertCollectionContainsAnyOf(message, buildList(actual), buildList(checkVals));
!!!70303287.java!!!	assertArrayContainsAnyOf(inout message : String, inout actual : int [[]], inout checkVals : int [[]]) : int
        return assertCollectionContainsAnyOf(message, buildList(actual), buildList(checkVals));
!!!70303415.java!!!	assertCollectionContainsAnyOf(inout message : String, inout actual : Collection<T>, inout checkVals : Collection<T>) : T
        boolean contains = false;
        T selected = null;
        for (T check : checkVals) {
            contains = actual.contains(check);
            if (contains) {
                selected = check;
                break;
            }
        }

        if (!contains) {
            fail(String.format("%s : No elements from %s in %s", message,
                    formatCollection(actual, MAX_FORMAT_STRING),
                    formatCollection(checkVals, MAX_FORMAT_STRING)));
        }
        return selected;
!!!70303543.java!!!	buildList(inout array : T [[]]) : List<T>
        return new ArrayList<T>(Arrays.asList(array));
!!!70303671.java!!!	buildList(inout array : int [[]]) : List<Integer>
        List<Integer> list = new ArrayList<Integer>(array.length);
        for (Integer val : array) {
            list.add(val);
        }
        return list;
!!!70303799.java!!!	formatCollection(inout collection : Collection<T>, in maxLen : int) : String
        StringBuilder builder = new StringBuilder();
        builder.append("[");

        boolean first = true;
        for (T elem : collection) {
            String val = ((first) ? ", " : "") + ((elem != null) ? elem.toString() : "null");
            first = false;
            if ((builder.length() + val.length()) > maxLen - "...]".length()) {
                builder.append("...");
                break;
            } else {
                builder.append(val);
            }
        }
        builder.append("]");
        return builder.toString();
!!!70303927.java!!!	AssertHelpers()
 throw new AssertionError();
