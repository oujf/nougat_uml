class RangeTest
!!!70409783.java!!!	testConstructor() : void
        // Trivial, same range
        Range<Integer> intRange = new Range<Integer>(1, 1);

        assertLower(intRange, 1);
        assertUpper(intRange, 1);

        // Different values in range
        Range<Integer> intRange2 = new Range<Integer>(100, 200);
        assertLower(intRange2, 100);
        assertUpper(intRange2, 200);

        Range<Float> floatRange = new Range<Float>(Float.NEGATIVE_INFINITY,
                Float.POSITIVE_INFINITY);
        assertLower(floatRange, Float.NEGATIVE_INFINITY);
        assertUpper(floatRange, Float.POSITIVE_INFINITY);
!!!70409911.java!!!	testIllegalValues() : void
        // Test NPEs
        try {
            new Range<Integer>(null, null);
            fail("Expected exception to be thrown for (null, null)");
        } catch (NullPointerException e) {
            // OK: both args are null
        }

        try {
            new Range<Integer>(null, 0);
            fail("Expected exception to be thrown for (null, 0)");
        } catch (NullPointerException e) {
            // OK: left arg is null
        }

        try {
            new Range<Integer>(0, null);
            fail("Expected exception to be thrown for (0, null)");
        } catch (NullPointerException e) {
            // OK: right arg is null
        }

        // Test IAEs

        try {
            new Range<Integer>(50, -50);
            fail("Expected exception to be thrown for (50, -50)");
        } catch (IllegalArgumentException e) {
            // OK: 50 > -50 so it fails
        }

        try {
            new Range<Float>(0.0f, Float.NEGATIVE_INFINITY);
            fail("Expected exception to be thrown for (0.0f, -Infinity)");
        } catch (IllegalArgumentException e) {
            // OK: 0.0f is > NEGATIVE_INFINITY, so it fails
        }
!!!70410039.java!!!	testEquals() : void
        Range<Float> oneHalf = Range.create(1.0f, 2.0f);
        Range<Float> oneHalf2 = new Range<Float>(1.0f, 2.0f);
        assertEquals(oneHalf, oneHalf2);
        assertHashCodeEquals(oneHalf, oneHalf2);

        Range<Float> twoThirds = new Range<Float>(2.0f, 3.0f);
        Range<Float> twoThirds2 = Range.create(2.0f, 3.0f);
        assertEquals(twoThirds, twoThirds2);
        assertHashCodeEquals(twoThirds, twoThirds2);

        Range<Rational> negativeOneTenthPositiveOneTenth =
                new Range<Rational>(new Rational(-1, 10), new Rational(1, 10));
        Range<Rational> negativeOneTenthPositiveOneTenth2 =
                Range.create(new Rational(-1, 10), new Rational(1, 10));
        assertEquals(negativeOneTenthPositiveOneTenth, negativeOneTenthPositiveOneTenth2);
        assertHashCodeEquals(negativeOneTenthPositiveOneTenth, negativeOneTenthPositiveOneTenth2);
!!!70410167.java!!!	testInRange() : void
        Range<Integer> hundredOneTwo = Range.create(100, 200);

        assertInRange(hundredOneTwo, 100);
        assertInRange(hundredOneTwo, 200);
        assertInRange(hundredOneTwo, 150);
        assertOutOfRange(hundredOneTwo, 99);
        assertOutOfRange(hundredOneTwo, 201);
        assertOutOfRange(hundredOneTwo, 100000);

        Range<Float> infinities = Range.create(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY);

        assertInRange(infinities, Float.NEGATIVE_INFINITY);
        assertInRange(infinities, Float.POSITIVE_INFINITY);
        assertInRange(infinities, 0.0f);
        assertOutOfRange(infinities, Float.NaN);

        Range<Rational> negativeOneTenthPositiveOneTenth =
                new Range<Rational>(new Rational(-1, 10), new Rational(1, 10));
        assertInRange(negativeOneTenthPositiveOneTenth, new Rational(-1, 10));
        assertInRange(negativeOneTenthPositiveOneTenth, new Rational(1, 10));
        assertInRange(negativeOneTenthPositiveOneTenth, Rational.ZERO);
        assertOutOfRange(negativeOneTenthPositiveOneTenth, new Rational(-100, 1));
        assertOutOfRange(negativeOneTenthPositiveOneTenth, new Rational(100, 1));
!!!70410295.java!!!	assertInRange(inout object : Range, inout needle : T) : void
        assertAction("in-range", object, needle, true, object.contains(needle));
!!!70410423.java!!!	assertOutOfRange(inout object : Range, inout needle : T) : void
        assertAction("out-of-range", object, needle, false, object.contains(needle));
!!!70410551.java!!!	assertUpper(inout object : Range, inout expected : T) : void
        assertAction("upper", object, expected, object.getUpper());
!!!70410679.java!!!	assertLower(inout object : Range, inout expected : T) : void
        assertAction("lower", object, expected, object.getLower());
!!!70410807.java!!!	assertAction(inout action : String, inout object : T, inout expected : T2, inout actual : T2) : void
        assertEquals("Expected " + object + " " + action + " to be ",
                expected, actual);
!!!70410935.java!!!	assertAction(inout action : String, inout object : T, inout needle : T2, inout expected : boolean, inout actual : boolean) : void
        String expectedMessage = expected ? action : ("not " + action);
        assertEquals("Expected " + needle + " to be " + expectedMessage + " of " + object,
                expected, actual);
!!!70411063.java!!!	assertHashCodeEquals(inout left : Range, inout right : Range) : void
        assertEquals("Left hash code for " + left +
                " expected to be equal to right hash code for " + right,
                left.hashCode(), right.hashCode());
