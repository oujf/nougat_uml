class FilesActivityPerfTest
!!!70706487.java!!!	FilesActivityPerfTest()
        super(FilesActivity.class);
!!!70706615.java!!!	getInitialRoot() : RootInfo
        return rootDir0;
!!!70706743.java!!!	getTestingProviderAuthority() : String
        return DEFAULT_AUTHORITY;
!!!70706871.java!!!	setupTestingRoots() : void
        rootDir0 = mDocsHelper.getRoot(STRESS_ROOT_0_ID);
        rootDir1 = mDocsHelper.getRoot(STRESS_ROOT_1_ID);
!!!70706999.java!!!	initTestFiles() : void
        // Nothing to create, already done by StressProvider.
!!!70707127.java!!!	testFilesListedPerformance() : void
        final BaseActivity activity = getActivity();

        final List<Long> measurements = new ArrayList<Long>();
        EventListener listener;
        for (int i = 0; i < 10; i++) {
            final CountDownLatch signal = new CountDownLatch(1);
            listener = new EventListener() {
                @Override
                public void onDirectoryNavigated(Uri uri) {
                    if (uri != null && TESTED_URI.equals(uri.toString())) {
                        mStartTime = System.currentTimeMillis();
                    } else {
                        mStartTime = -1;
                    }
                }

                @Override
                public void onDirectoryLoaded(Uri uri) {
                    if (uri == null || !TESTED_URI.equals(uri.toString())) {
                        return;
                    }
                    assertTrue(mStartTime != -1);
                    getInstrumentation().waitForIdle(new Runnable() {
                        @Override
                        public void run() {
                            assertTrue(mStartTime != -1);
                            measurements.add(System.currentTimeMillis() - mStartTime);
                            signal.countDown();
                        }
                    });
                }

                private long mStartTime = -1;
            };

            try {
                activity.addEventListener(listener);
                bots.roots.openRoot(STRESS_ROOT_1_ID);
                signal.await();
            } finally {
                activity.removeEventListener(listener);
            }

            assertEquals(i + 1, measurements.size());

            // Go back to the empty root.
            bots.roots.openRoot(STRESS_ROOT_0_ID);
        }

        assertEquals(NUM_MEASUREMENTS, measurements.size());

        final Bundle status = new Bundle();
        status.putDouble(KEY_FILES_LISTED_PERFORMANCE_FIRST, measurements.get(0));

        final Long[] rawMeasurements = measurements.toArray(new Long[NUM_MEASUREMENTS]);
        Arrays.sort(rawMeasurements);

        final long median = rawMeasurements[NUM_MEASUREMENTS / 2 - 1];
        status.putDouble(KEY_FILES_LISTED_PERFORMANCE_MEDIAN, median);

        getInstrumentation().sendStatus(Activity.RESULT_OK, status);
