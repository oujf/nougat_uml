class DocumentInfo
!!!70840119.java!!!	DocumentInfo()
        reset();
!!!70840247.java!!!	reset() : void
        authority = null;
        documentId = null;
        mimeType = null;
        displayName = null;
        lastModified = -1;
        flags = 0;
        summary = null;
        size = -1;
        icon = 0;
        derivedUri = null;
!!!70840375.java!!!	read(inout in : DataInputStream) : void
        final int version = in.readInt();
        switch (version) {
            case VERSION_INIT:
                throw new ProtocolException("Ignored upgrade");
            case VERSION_SPLIT_URI:
                authority = DurableUtils.readNullableString(in);
                documentId = DurableUtils.readNullableString(in);
                mimeType = DurableUtils.readNullableString(in);
                displayName = DurableUtils.readNullableString(in);
                lastModified = in.readLong();
                flags = in.readInt();
                summary = DurableUtils.readNullableString(in);
                size = in.readLong();
                icon = in.readInt();
                deriveFields();
                break;
            default:
                throw new ProtocolException("Unknown version " + version);
        }
!!!70840503.java!!!	write(inout out : DataOutputStream) : void
        out.writeInt(VERSION_SPLIT_URI);
        DurableUtils.writeNullableString(out, authority);
        DurableUtils.writeNullableString(out, documentId);
        DurableUtils.writeNullableString(out, mimeType);
        DurableUtils.writeNullableString(out, displayName);
        out.writeLong(lastModified);
        out.writeInt(flags);
        DurableUtils.writeNullableString(out, summary);
        out.writeLong(size);
        out.writeInt(icon);
!!!70840631.java!!!	describeContents() : int
        return 0;
!!!70840759.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        DurableUtils.writeToParcel(dest, this);
!!!70840887.java!!!	fromDirectoryCursor(inout cursor : Cursor) : DocumentInfo
        assert(cursor != null);
        final String authority = getCursorString(cursor, RootCursorWrapper.COLUMN_AUTHORITY);
        return fromCursor(cursor, authority);
!!!70841015.java!!!	fromCursor(inout cursor : Cursor, inout authority : String) : DocumentInfo
        assert(cursor != null);
        final DocumentInfo info = new DocumentInfo();
        info.updateFromCursor(cursor, authority);
        return info;
!!!70841143.java!!!	updateFromCursor(inout cursor : Cursor, inout authority : String) : void
        this.authority = authority;
        this.documentId = getCursorString(cursor, Document.COLUMN_DOCUMENT_ID);
        this.mimeType = getCursorString(cursor, Document.COLUMN_MIME_TYPE);
        this.displayName = getCursorString(cursor, Document.COLUMN_DISPLAY_NAME);
        this.lastModified = getCursorLong(cursor, Document.COLUMN_LAST_MODIFIED);
        this.flags = getCursorInt(cursor, Document.COLUMN_FLAGS);
        this.summary = getCursorString(cursor, Document.COLUMN_SUMMARY);
        this.size = getCursorLong(cursor, Document.COLUMN_SIZE);
        this.icon = getCursorInt(cursor, Document.COLUMN_ICON);
        this.deriveFields();
!!!70841271.java!!!	fromUri(inout resolver : ContentResolver, inout uri : Uri) : DocumentInfo
        final DocumentInfo info = new DocumentInfo();
        info.updateFromUri(resolver, uri);
        return info;
!!!70841399.java!!!	updateSelf(inout resolver : ContentResolver) : void
        updateFromUri(resolver, derivedUri);
!!!70841527.java!!!	updateFromUri(inout resolver : ContentResolver, inout uri : Uri) : void
        ContentProviderClient client = null;
        Cursor cursor = null;
        try {
            client = DocumentsApplication.acquireUnstableProviderOrThrow(
                    resolver, uri.getAuthority());
            cursor = client.query(uri, null, null, null, null);
            if (!cursor.moveToFirst()) {
                throw new FileNotFoundException("Missing details for " + uri);
            }
            updateFromCursor(cursor, uri.getAuthority());
        } catch (Throwable t) {
            throw asFileNotFoundException(t);
        } finally {
            IoUtils.closeQuietly(cursor);
            ContentProviderClient.releaseQuietly(client);
        }
!!!70841655.java!!!	deriveFields() : void
        derivedUri = DocumentsContract.buildDocumentUri(authority, documentId);
!!!70841783.java!!!	toString() : String
        return "Document{"
                + "docId=" + documentId
                + ", name=" + displayName
                + ", isContainer=" + isContainer()
                + ", isDirectory=" + isDirectory()
                + ", isArchive=" + isArchive()
                + ", isPartial=" + isPartial()
                + ", isVirtualDocument=" + isVirtualDocument()
                + ", isDeleteSupported=" + isDeleteSupported()
                + ", isCreateSupported=" + isCreateSupported()
                + ", isRenameSupported=" + isRenameSupported()
                + "}";
!!!70841911.java!!!	isCreateSupported() : boolean
        return (flags & Document.FLAG_DIR_SUPPORTS_CREATE) != 0;
!!!70842039.java!!!	isThumbnailSupported() : boolean
        return (flags & Document.FLAG_SUPPORTS_THUMBNAIL) != 0;
!!!70842167.java!!!	isDirectory() : boolean
        return Document.MIME_TYPE_DIR.equals(mimeType);
!!!70842295.java!!!	isGridPreferred() : boolean
        return (flags & Document.FLAG_DIR_PREFERS_GRID) != 0;
!!!70842423.java!!!	isDeleteSupported() : boolean
        return (flags & Document.FLAG_SUPPORTS_DELETE) != 0;
!!!70842551.java!!!	isRemoveSupported() : boolean
        return (flags & Document.FLAG_SUPPORTS_REMOVE) != 0;
!!!70842679.java!!!	isRenameSupported() : boolean
        return (flags & Document.FLAG_SUPPORTS_RENAME) != 0;
!!!70842807.java!!!	isArchive() : boolean
        return (flags & Document.FLAG_ARCHIVE) != 0;
!!!70842935.java!!!	isPartial() : boolean
        return (flags & Document.FLAG_PARTIAL) != 0;
!!!70843063.java!!!	isContainer() : boolean
        return isDirectory() || isArchive();
!!!70843191.java!!!	isVirtualDocument() : boolean
        return (flags & Document.FLAG_VIRTUAL_DOCUMENT) != 0;
!!!70843319.java!!!	hashCode() : int
        return derivedUri.hashCode() + mimeType.hashCode();
!!!70843447.java!!!	equals(inout o : Object) : boolean
        if (o == null) {
            return false;
        }

        if (this == o) {
            return true;
        }

        if (o instanceof DocumentInfo) {
            DocumentInfo other = (DocumentInfo) o;
            // Uri + mime type should be totally unique.
            return Objects.equals(derivedUri, other.derivedUri)
                    && Objects.equals(mimeType, other.mimeType);
        }

        return false;
!!!70843575.java!!!	getCursorString(inout cursor : Cursor, inout columnName : String) : String
        final int index = cursor.getColumnIndex(columnName);
        return (index != -1) ? cursor.getString(index) : null;
!!!70843703.java!!!	getCursorLong(inout cursor : Cursor, inout columnName : String) : long
        final int index = cursor.getColumnIndex(columnName);
        if (index == -1) return -1;
        final String value = cursor.getString(index);
        if (value == null) return -1;
        try {
            return Long.parseLong(value);
        } catch (NumberFormatException e) {
            return -1;
        }
!!!70843831.java!!!	getCursorInt(inout cursor : Cursor, inout columnName : String) : int
        final int index = cursor.getColumnIndex(columnName);
        return (index != -1) ? cursor.getInt(index) : 0;
!!!70843959.java!!!	asFileNotFoundException(inout t : Throwable) : FileNotFoundException
        if (t instanceof FileNotFoundException) {
            throw (FileNotFoundException) t;
        }
        final FileNotFoundException fnfe = new FileNotFoundException(t.getMessage());
        fnfe.initCause(t);
        throw fnfe;
