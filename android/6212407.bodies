class SaveFragment
!!!70776503.java!!!	show(inout fm : FragmentManager, inout mimeType : String, inout displayName : String) : void
        final Bundle args = new Bundle();
        args.putString(EXTRA_MIME_TYPE, mimeType);
        args.putString(EXTRA_DISPLAY_NAME, displayName);

        final SaveFragment fragment = new SaveFragment();
        fragment.setArguments(args);

        final FragmentTransaction ft = fm.beginTransaction();
        ft.replace(R.id.container_save, fragment, TAG);
        ft.commitAllowingStateLoss();
!!!70776631.java!!!	get(inout fm : FragmentManager) : SaveFragment
        return (SaveFragment) fm.findFragmentByTag(TAG);
!!!70776759.java!!!	onCreateView(inout inflater : LayoutInflater, inout container : ViewGroup, inout savedInstanceState : Bundle) : View
        final Context context = inflater.getContext();

        final View view = inflater.inflate(R.layout.fragment_save, container, false);

        final ImageView icon = (ImageView) view.findViewById(android.R.id.icon);
        icon.setImageDrawable(
                IconUtils.loadMimeIcon(context, getArguments().getString(EXTRA_MIME_TYPE)));

        mDisplayName = (EditText) view.findViewById(android.R.id.title);
        mDisplayName.addTextChangedListener(mDisplayNameWatcher);
        mDisplayName.setText(getArguments().getString(EXTRA_DISPLAY_NAME));
        mDisplayName.setOnKeyListener(
                new View.OnKeyListener() {
                    @Override
                    public boolean onKey(View v, int keyCode, KeyEvent event) {
                        // Only handle key-down events. This is simpler, consistent with most other
                        // UIs, and enables the handling of repeated key events from holding down a
                        // key.
                        if (event.getAction() != KeyEvent.ACTION_DOWN) {
                            return false;
                        }

                        if (keyCode == KeyEvent.KEYCODE_ENTER && mSave.isEnabled()) {
                            performSave();
                            return true;
                        }
                        return false;
                    }
                });

        mSave = (Button) view.findViewById(android.R.id.button1);
        mSave.setOnClickListener(mSaveListener);
        mSave.setEnabled(false);

        mProgress = (ProgressBar) view.findViewById(android.R.id.progress);

        return view;
!!!70776887.java!!!	performSave() : void
        final DocumentsActivity activity = DocumentsActivity.get(SaveFragment.this);
        if (mReplaceTarget != null) {
            activity.onSaveRequested(mReplaceTarget);
        } else {
            final String mimeType = getArguments().getString(EXTRA_MIME_TYPE);
            final String displayName = mDisplayName.getText().toString();
            activity.onSaveRequested(mimeType, displayName);
        }
!!!70777015.java!!!	setReplaceTarget(inout replaceTarget : DocumentInfo) : void
        mReplaceTarget = replaceTarget;

        if (mReplaceTarget != null) {
            getArguments().putString(EXTRA_DISPLAY_NAME, replaceTarget.displayName);
            mIgnoreNextEdit = true;
            mDisplayName.setText(replaceTarget.displayName);
        }
!!!70777143.java!!!	prepareForDirectory(inout cwd : DocumentInfo) : void
        setSaveEnabled(cwd != null && cwd.isCreateSupported());
!!!70777271.java!!!	setSaveEnabled(inout enabled : boolean) : void
        mSave.setEnabled(enabled);
!!!70777399.java!!!	setPending(inout pending : boolean) : void
        mSave.setVisibility(pending ? View.INVISIBLE : View.VISIBLE);
        mProgress.setVisibility(pending ? View.VISIBLE : View.GONE);
