class MultiSelectManager_GridModelTest
!!!70896311.java!!!	initData(in numChildren : int, in numColumns : int) : void
        env = new TestEnvironment(numChildren, numColumns);
        adapter = new TestDocumentsAdapter(new ArrayList<String>()) {
            @Override
            public String getModelId(int position) {
                return Integer.toString(position);
            }

            @Override
            public int getItemCount() {
                return numChildren;
            }
        };

        viewWidth = VIEW_PADDING_PX + numColumns * (VIEW_PADDING_PX + CHILD_VIEW_EDGE_PX);
        model = new GridModel(env, adapter);
        model.addOnSelectionChangedListener(
                new GridModel.OnSelectionChangedListener() {
                    @Override
                    public void onSelectionChanged(Set<String> updatedSelection) {
                        lastSelection = updatedSelection;
                    }

                    @Override
                    public boolean onBeforeItemStateChange(String id, boolean nextState) {
                        return true;
                    }
                });
!!!70896439.java!!!	tearDown() : void
        model = null;
        env = null;
        lastSelection = null;
!!!70896567.java!!!	testSelectionLeftOfItems() : void
        initData(20, 5);
        startSelection(new Point(0, 10));
        resizeSelection(new Point(1, 11));
        assertNoSelection();
        assertEquals(NOT_SET, model.getPositionNearestOrigin());
!!!70896695.java!!!	testSelectionRightOfItems() : void
        initData(20, 4);
        startSelection(new Point(viewWidth - 1, 10));
        resizeSelection(new Point(viewWidth - 2, 11));
        assertNoSelection();
        assertEquals(NOT_SET, model.getPositionNearestOrigin());
!!!70896823.java!!!	testSelectionAboveItems() : void
        initData(20, 4);
        startSelection(new Point(10, 0));
        resizeSelection(new Point(11, 1));
        assertNoSelection();
        assertEquals(NOT_SET, model.getPositionNearestOrigin());
!!!70896951.java!!!	testSelectionBelowItems() : void
        initData(5, 4);
        startSelection(new Point(10, VIEWPORT_HEIGHT - 1));
        resizeSelection(new Point(11, VIEWPORT_HEIGHT - 2));
        assertNoSelection();
        assertEquals(NOT_SET, model.getPositionNearestOrigin());
!!!70897079.java!!!	testVerticalSelectionBetweenItems() : void
        initData(20, 4);
        startSelection(new Point(106, 0));
        resizeSelection(new Point(107, 200));
        assertNoSelection();
        assertEquals(NOT_SET, model.getPositionNearestOrigin());
!!!70897207.java!!!	testHorizontalSelectionBetweenItems() : void
        initData(20, 4);
        startSelection(new Point(0, 105));
        resizeSelection(new Point(200, 106));
        assertNoSelection();
        assertEquals(NOT_SET, model.getPositionNearestOrigin());
!!!70897335.java!!!	testGrowingAndShrinkingSelection() : void
        initData(20, 4);
        startSelection(new Point(0, 0));

        resizeSelection(new Point(5, 5));
        verifySelection();

        resizeSelection(new Point(109, 109));
        verifySelection();

        resizeSelection(new Point(110, 109));
        verifySelection();

        resizeSelection(new Point(110, 110));
        verifySelection();

        resizeSelection(new Point(214, 214));
        verifySelection();

        resizeSelection(new Point(215, 214));
        verifySelection();

        resizeSelection(new Point(214, 214));
        verifySelection();

        resizeSelection(new Point(110, 110));
        verifySelection();

        resizeSelection(new Point(110, 109));
        verifySelection();

        resizeSelection(new Point(109, 109));
        verifySelection();

        resizeSelection(new Point(5, 5));
        verifySelection();

        resizeSelection(new Point(0, 0));
        verifySelection();

        assertEquals(NOT_SET, model.getPositionNearestOrigin());
!!!70897463.java!!!	testSelectionMovingAroundOrigin() : void
        initData(16, 4);

        startSelection(new Point(210, 210));
        resizeSelection(new Point(viewWidth - 1, 0));
        verifySelection();

        resizeSelection(new Point(0, 0));
        verifySelection();

        resizeSelection(new Point(0, 420));
        verifySelection();

        resizeSelection(new Point(viewWidth - 1, 420));
        verifySelection();

        // This is manually figured and will need to be adjusted if the separator position is
        // changed.
        assertEquals(7, model.getPositionNearestOrigin());
!!!70897591.java!!!	testScrollingBandSelect() : void
        initData(40, 4);

        startSelection(new Point(0, 0));
        resizeSelection(new Point(100, VIEWPORT_HEIGHT - 1));
        verifySelection();

        scroll(CHILD_VIEW_EDGE_PX);
        verifySelection();

        resizeSelection(new Point(200, VIEWPORT_HEIGHT - 1));
        verifySelection();

        scroll(CHILD_VIEW_EDGE_PX);
        verifySelection();

        scroll(-2 * CHILD_VIEW_EDGE_PX);
        verifySelection();

        resizeSelection(new Point(100, VIEWPORT_HEIGHT - 1));
        verifySelection();

        assertEquals(0, model.getPositionNearestOrigin());
!!!70897719.java!!!	getSelectionArea() : Rect
        // Construct a rect from the two selection points.
        Rect selectionArea = new Rect(
                mSelectionOrigin.x, mSelectionOrigin.y, mSelectionOrigin.x, mSelectionOrigin.y);
        selectionArea.union(mSelectionPoint.x, mSelectionPoint.y);
        // Rect intersection tests are exclusive of bounds, while the MSM's selection code is
        // inclusive. Expand the rect by 1 pixel in all directions to account for this.
        selectionArea.inset(-1, -1);

        return selectionArea;
!!!70897847.java!!!	assertNoSelection() : void
        assertEquals("Unexpected items " + lastSelection + " in selection " + getSelectionArea(),
                0, lastSelection.size());
!!!70897975.java!!!	verifySelection() : void
        Rect selectionArea = getSelectionArea();
        for (TestEnvironment.Item item: env.items) {
            if (Rect.intersects(selectionArea, item.rect)) {
                assertTrue("Expected item " + item + " was not in selection " + selectionArea,
                        lastSelection.contains(item.name));
            } else {
                assertFalse("Unexpected item " + item + " in selection" + selectionArea,
                        lastSelection.contains(item.name));
            }
        }
!!!70898103.java!!!	startSelection(inout p : Point) : void
        model.startSelection(p);
        mSelectionOrigin = env.createAbsolutePoint(p);
!!!70898231.java!!!	resizeSelection(inout p : Point) : void
        model.resizeSelection(p);
        mSelectionPoint = env.createAbsolutePoint(p);
!!!70898359.java!!!	scroll(in dy : int) : void
        assertTrue(env.verticalOffset + VIEWPORT_HEIGHT + dy <= env.getTotalHeight());
        env.verticalOffset += dy;
        // Correct the cached selection point as well.
        mSelectionPoint.y += dy;
        model.onScrolled(null, 0, dy);
