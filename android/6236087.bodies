class KeyguardHostView
!!!70977463.java!!!	KeyguardHostView(inout context : Context)
        this(context, null);
!!!70977591.java!!!	KeyguardHostView(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);
        KeyguardUpdateMonitor.getInstance(context).registerCallback(mUpdateCallback);
!!!70977719.java!!!	dispatchDraw(inout canvas : Canvas) : void
        super.dispatchDraw(canvas);
        if (mViewMediatorCallback != null) {
            mViewMediatorCallback.keyguardDoneDrawing();
        }
!!!70977847.java!!!	setOnDismissAction(inout action : KeyguardHostView::OnDismissAction, inout cancelAction : Runnable) : void
        if (mCancelAction != null) {
            mCancelAction.run();
            mCancelAction = null;
        }
        mDismissAction = action;
        mCancelAction = cancelAction;
!!!70977975.java!!!	cancelDismissAction() : void
        setOnDismissAction(null, null);
!!!70978103.java!!!	onFinishInflate() : void
        mSecurityContainer =
                (KeyguardSecurityContainer) findViewById(R.id.keyguard_security_container);
        mLockPatternUtils = new LockPatternUtils(mContext);
        mSecurityContainer.setLockPatternUtils(mLockPatternUtils);
        mSecurityContainer.setSecurityCallback(this);
        mSecurityContainer.showPrimarySecurityScreen(false);
        // mSecurityContainer.updateSecurityViews(false /* not bouncing */);
!!!70978231.java!!!	showPrimarySecurityScreen() : void
        if (DEBUG) Log.d(TAG, "show()");
        mSecurityContainer.showPrimarySecurityScreen(false);
!!!70978359.java!!!	showPromptReason(in reason : int) : void
        mSecurityContainer.showPromptReason(reason);
!!!70978487.java!!!	showMessage(inout message : String, in color : int) : void
        mSecurityContainer.showMessage(message, color);
!!!70978615.java!!!	dismiss() : boolean
        return dismiss(false);
!!!70978743.java!!!	handleBackKey() : boolean
        if (mSecurityContainer.getCurrentSecuritySelection() != SecurityMode.None) {
            mSecurityContainer.dismiss(false);
            return true;
        }
        return false;
!!!70978871.java!!!	dispatchPopulateAccessibilityEvent(inout event : AccessibilityEvent) : boolean
        if (event.getEventType() == AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED) {
            event.getText().add(mSecurityContainer.getCurrentSecurityModeContentDescription());
            return true;
        } else {
            return super.dispatchPopulateAccessibilityEvent(event);
        }
!!!70978999.java!!!	getSecurityContainer() : KeyguardSecurityContainer
        return mSecurityContainer;
!!!70979127.java!!!	dismiss(inout authenticated : boolean) : boolean
        return mSecurityContainer.showNextSecurityScreenOrFinish(authenticated);
!!!70979255.java!!!	finish(inout strongAuth : boolean) : void
        // If there's a pending runnable because the user interacted with a widget
        // and we're leaving keyguard, then run it.
        boolean deferKeyguardDone = false;
        if (mDismissAction != null) {
            deferKeyguardDone = mDismissAction.onDismiss();
            mDismissAction = null;
            mCancelAction = null;
        }
        if (mViewMediatorCallback != null) {
            if (deferKeyguardDone) {
                mViewMediatorCallback.keyguardDonePending(strongAuth);
            } else {
                mViewMediatorCallback.keyguardDone(strongAuth);
            }
        }
!!!70979383.java!!!	reset() : void
        mViewMediatorCallback.resetKeyguard();
!!!70979511.java!!!	onSecurityModeChanged(inout securityMode : KeyguardSecurityModel::SecurityMode, inout needsInput : boolean) : void
        if (mViewMediatorCallback != null) {
            mViewMediatorCallback.setNeedsInput(needsInput);
        }
!!!70979639.java!!!	userActivity() : void
        if (mViewMediatorCallback != null) {
            mViewMediatorCallback.userActivity();
        }
!!!70979767.java!!!	onPause() : void
        if (DEBUG) Log.d(TAG, String.format("screen off, instance %s at %s",
                Integer.toHexString(hashCode()), SystemClock.uptimeMillis()));
        mSecurityContainer.showPrimarySecurityScreen(true);
        mSecurityContainer.onPause();
        clearFocus();
!!!70979895.java!!!	onResume() : void
        if (DEBUG) Log.d(TAG, "screen on, instance " + Integer.toHexString(hashCode()));
        mSecurityContainer.onResume(KeyguardSecurityView.SCREEN_ON);
        requestFocus();
!!!70980023.java!!!	startAppearAnimation() : void
        mSecurityContainer.startAppearAnimation();
!!!70980151.java!!!	startDisappearAnimation(inout finishRunnable : Runnable) : void
        if (!mSecurityContainer.startDisappearAnimation(finishRunnable) && finishRunnable != null) {
            finishRunnable.run();
        }
!!!70980279.java!!!	cleanUp() : void
        getSecurityContainer().onPause();
!!!70980407.java!!!	dispatchKeyEvent(inout event : KeyEvent) : boolean
        if (interceptMediaKey(event)) {
            return true;
        }
        return super.dispatchKeyEvent(event);
!!!70980535.java!!!	interceptMediaKey(inout event : KeyEvent) : boolean
        final int keyCode = event.getKeyCode();
        if (event.getAction() == KeyEvent.ACTION_DOWN) {
            switch (keyCode) {
                case KeyEvent.KEYCODE_MEDIA_PLAY:
                case KeyEvent.KEYCODE_MEDIA_PAUSE:
                case KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE:
                    /* Suppress PLAY/PAUSE toggle when phone is ringing or
                     * in-call to avoid music playback */
                    if (mTelephonyManager == null) {
                        mTelephonyManager = (TelephonyManager) getContext().getSystemService(
                                Context.TELEPHONY_SERVICE);
                    }
                    if (mTelephonyManager != null &&
                            mTelephonyManager.getCallState() != TelephonyManager.CALL_STATE_IDLE) {
                        return true;  // suppress key event
                    }
                case KeyEvent.KEYCODE_MUTE:
                case KeyEvent.KEYCODE_HEADSETHOOK:
                case KeyEvent.KEYCODE_MEDIA_STOP:
                case KeyEvent.KEYCODE_MEDIA_NEXT:
                case KeyEvent.KEYCODE_MEDIA_PREVIOUS:
                case KeyEvent.KEYCODE_MEDIA_REWIND:
                case KeyEvent.KEYCODE_MEDIA_RECORD:
                case KeyEvent.KEYCODE_MEDIA_FAST_FORWARD:
                case KeyEvent.KEYCODE_MEDIA_AUDIO_TRACK: {
                    handleMediaKeyEvent(event);
                    return true;
                }

                case KeyEvent.KEYCODE_VOLUME_UP:
                case KeyEvent.KEYCODE_VOLUME_DOWN:
                case KeyEvent.KEYCODE_VOLUME_MUTE: {
                    if (KEYGUARD_MANAGES_VOLUME) {
                        synchronized (this) {
                            if (mAudioManager == null) {
                                mAudioManager = (AudioManager) getContext().getSystemService(
                                        Context.AUDIO_SERVICE);
                            }
                        }
                        // Volume buttons should only function for music (local or remote).
                        // TODO: Actually handle MUTE.
                        mAudioManager.adjustSuggestedStreamVolume(
                                keyCode == KeyEvent.KEYCODE_VOLUME_UP
                                        ? AudioManager.ADJUST_RAISE
                                        : AudioManager.ADJUST_LOWER /* direction */,
                                AudioManager.STREAM_MUSIC /* stream */, 0 /* flags */);
                        // Don't execute default volume behavior
                        return true;
                    } else {
                        return false;
                    }
                }
            }
        } else if (event.getAction() == KeyEvent.ACTION_UP) {
            switch (keyCode) {
                case KeyEvent.KEYCODE_MUTE:
                case KeyEvent.KEYCODE_HEADSETHOOK:
                case KeyEvent.KEYCODE_MEDIA_PLAY:
                case KeyEvent.KEYCODE_MEDIA_PAUSE:
                case KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE:
                case KeyEvent.KEYCODE_MEDIA_STOP:
                case KeyEvent.KEYCODE_MEDIA_NEXT:
                case KeyEvent.KEYCODE_MEDIA_PREVIOUS:
                case KeyEvent.KEYCODE_MEDIA_REWIND:
                case KeyEvent.KEYCODE_MEDIA_RECORD:
                case KeyEvent.KEYCODE_MEDIA_FAST_FORWARD:
                case KeyEvent.KEYCODE_MEDIA_AUDIO_TRACK: {
                    handleMediaKeyEvent(event);
                    return true;
                }
            }
        }
        return false;
!!!70980663.java!!!	handleMediaKeyEvent(inout keyEvent : KeyEvent) : void
        synchronized (this) {
            if (mAudioManager == null) {
                mAudioManager = (AudioManager) getContext().getSystemService(
                        Context.AUDIO_SERVICE);
            }
        }
        mAudioManager.dispatchMediaKeyEvent(keyEvent);
!!!70980791.java!!!	dispatchSystemUiVisibilityChanged(in visibility : int) : void
        super.dispatchSystemUiVisibilityChanged(visibility);

        if (!(mContext instanceof Activity)) {
            setSystemUiVisibility(STATUS_BAR_DISABLE_BACK);
        }
!!!70980919.java!!!	shouldEnableMenuKey() : boolean
        final Resources res = getResources();
        final boolean configDisabled = res.getBoolean(R.bool.config_disableMenuKeyInLockScreen);
        final boolean isTestHarness = ActivityManager.isRunningInTestHarness();
        final boolean fileOverride = (new File(ENABLE_MENU_KEY_FILE)).exists();
        return !configDisabled || isTestHarness || fileOverride;
!!!70981047.java!!!	setViewMediatorCallback(inout viewMediatorCallback : ViewMediatorCallback) : void
        mViewMediatorCallback = viewMediatorCallback;
        // Update ViewMediator with the current input method requirements
        mViewMediatorCallback.setNeedsInput(mSecurityContainer.needsInput());
!!!70981175.java!!!	setLockPatternUtils(inout utils : LockPatternUtils) : void
        mLockPatternUtils = utils;
        mSecurityContainer.setLockPatternUtils(utils);
!!!70981303.java!!!	getSecurityMode() : KeyguardSecurityModel::SecurityMode
        return mSecurityContainer.getSecurityMode();
!!!70981431.java!!!	getCurrentSecurityMode() : KeyguardSecurityModel::SecurityMode
        return mSecurityContainer.getCurrentSecurityMode();
