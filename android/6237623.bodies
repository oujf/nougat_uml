class AppearAnimationUtils
!!!71325879.java!!!	AppearAnimationUtils(inout ctx : Context)
        this(ctx, DEFAULT_APPEAR_DURATION,
                1.0f, 1.0f,
                AnimationUtils.loadInterpolator(ctx, android.R.interpolator.linear_out_slow_in));
!!!71326007.java!!!	AppearAnimationUtils(inout ctx : Context, in duration : long, in translationScaleFactor : float, in delayScaleFactor : float, inout interpolator : Interpolator)
        mInterpolator = interpolator;
        mStartTranslation = ctx.getResources().getDimensionPixelOffset(
                R.dimen.appear_y_translation_start) * translationScaleFactor;
        mDelayScale = delayScaleFactor;
        mDuration = duration;
        mAppearing = true;
!!!71326135.java!!!	startAnimation2d(inout objects : View [[][]], in finishListener : Runnable) : void
        startAnimation2d(objects, finishListener, this);
!!!71326263.java!!!	startAnimation(inout objects : View [[]], in finishListener : Runnable) : void
        startAnimation(objects, finishListener, this);
!!!71326391.java!!!	startAnimation2d(inout objects : T [[][]], in finishListener : Runnable, inout creator : AppearAnimationCreator) : void
        AppearAnimationProperties properties = getDelays(objects);
        startAnimations(properties, objects, finishListener, creator);
!!!71326519.java!!!	startAnimation(inout objects : T [[]], in finishListener : Runnable, inout creator : AppearAnimationCreator) : void
        AppearAnimationProperties properties = getDelays(objects);
        startAnimations(properties, objects, finishListener, creator);
!!!71326647.java!!!	startAnimations(inout properties : AppearAnimationUtils::AppearAnimationProperties, inout objects : T [[]], in finishListener : Runnable, inout creator : AppearAnimationCreator) : void
        if (properties.maxDelayRowIndex == -1 || properties.maxDelayColIndex == -1) {
            finishListener.run();
            return;
        }
        for (int row = 0; row < properties.delays.length; row++) {
            long[] columns = properties.delays[row];
            long delay = columns[0];
            Runnable endRunnable = null;
            if (properties.maxDelayRowIndex == row && properties.maxDelayColIndex == 0) {
                endRunnable = finishListener;
            }
            float translationScale = mRowTranslationScaler != null
                    ? mRowTranslationScaler.getRowTranslationScale(row, properties.delays.length)
                    : 1f;
            float translation = translationScale * mStartTranslation;
            creator.createAnimation(objects[row], delay, mDuration,
                    mAppearing ? translation : -translation,
                    mAppearing, mInterpolator, endRunnable);
        }
!!!71326775.java!!!	startAnimations(inout properties : AppearAnimationUtils::AppearAnimationProperties, inout objects : T [[][]], in finishListener : Runnable, inout creator : AppearAnimationCreator) : void
        if (properties.maxDelayRowIndex == -1 || properties.maxDelayColIndex == -1) {
            finishListener.run();
            return;
        }
        for (int row = 0; row < properties.delays.length; row++) {
            long[] columns = properties.delays[row];
            float translationScale = mRowTranslationScaler != null
                    ? mRowTranslationScaler.getRowTranslationScale(row, properties.delays.length)
                    : 1f;
            float translation = translationScale * mStartTranslation;
            for (int col = 0; col < columns.length; col++) {
                long delay = columns[col];
                Runnable endRunnable = null;
                if (properties.maxDelayRowIndex == row && properties.maxDelayColIndex == col) {
                    endRunnable = finishListener;
                }
                creator.createAnimation(objects[row][col], delay, mDuration,
                        mAppearing ? translation : -translation,
                        mAppearing, mInterpolator, endRunnable);
            }
        }
!!!71326903.java!!!	getDelays(inout items : T [[]]) : AppearAnimationUtils::AppearAnimationProperties
        long maxDelay = -1;
        mProperties.maxDelayColIndex = -1;
        mProperties.maxDelayRowIndex = -1;
        mProperties.delays = new long[items.length][];
        for (int row = 0; row < items.length; row++) {
            mProperties.delays[row] = new long[1];
            long delay = calculateDelay(row, 0);
            mProperties.delays[row][0] = delay;
            if (items[row] != null && delay > maxDelay) {
                maxDelay = delay;
                mProperties.maxDelayColIndex = 0;
                mProperties.maxDelayRowIndex = row;
            }
        }
        return mProperties;
!!!71327031.java!!!	getDelays(inout items : T [[][]]) : AppearAnimationUtils::AppearAnimationProperties
        long maxDelay = -1;
        mProperties.maxDelayColIndex = -1;
        mProperties.maxDelayRowIndex = -1;
        mProperties.delays = new long[items.length][];
        for (int row = 0; row < items.length; row++) {
            T[] columns = items[row];
            mProperties.delays[row] = new long[columns.length];
            for (int col = 0; col < columns.length; col++) {
                long delay = calculateDelay(row, col);
                mProperties.delays[row][col] = delay;
                if (items[row][col] != null && delay > maxDelay) {
                    maxDelay = delay;
                    mProperties.maxDelayColIndex = col;
                    mProperties.maxDelayRowIndex = row;
                }
            }
        }
        return mProperties;
!!!71327159.java!!!	calculateDelay(in row : int, in col : int) : long
        return (long) ((row * 40 + col * (Math.pow(row, 0.4) + 0.4) * 20) * mDelayScale);
!!!71327287.java!!!	getInterpolator() : Interpolator
        return mInterpolator;
!!!71327415.java!!!	getStartTranslation() : float
        return mStartTranslation;
!!!71327543.java!!!	createAnimation(in view : View, in delay : long, in duration : long, in translationY : float, inout appearing : boolean, inout interpolator : Interpolator, in endRunnable : Runnable) : void
        if (view != null) {
            view.setAlpha(appearing ? 0f : 1.0f);
            view.setTranslationY(appearing ? translationY : 0);
            Animator alphaAnim;
            float targetAlpha =  appearing ? 1f : 0f;
            if (view.isHardwareAccelerated()) {
                RenderNodeAnimator alphaAnimRt = new RenderNodeAnimator(RenderNodeAnimator.ALPHA,
                        targetAlpha);
                alphaAnimRt.setTarget(view);
                alphaAnim = alphaAnimRt;
            } else {
                alphaAnim = ObjectAnimator.ofFloat(view, View.ALPHA, view.getAlpha(), targetAlpha);
            }
            alphaAnim.setInterpolator(interpolator);
            alphaAnim.setDuration(duration);
            alphaAnim.setStartDelay(delay);
            if (view.hasOverlappingRendering()) {
                view.setLayerType(View.LAYER_TYPE_HARDWARE, null);
                alphaAnim.addListener(new AnimatorListenerAdapter() {
                    @Override
                    public void onAnimationEnd(Animator animation) {
                        view.setLayerType(View.LAYER_TYPE_NONE, null);
                    }
                });
            }
            if (endRunnable != null) {
                alphaAnim.addListener(new AnimatorListenerAdapter() {
                    @Override
                    public void onAnimationEnd(Animator animation) {
                        endRunnable.run();
                    }
                });
            }
            alphaAnim.start();
            startTranslationYAnimation(view, delay, duration, appearing ? 0 : translationY,
                    interpolator);
        }
!!!71327671.java!!!	startTranslationYAnimation(inout view : View, in delay : long, in duration : long, in endTranslationY : float, inout interpolator : Interpolator) : void
        Animator translationAnim;
        if (view.isHardwareAccelerated()) {
            RenderNodeAnimator translationAnimRt = new RenderNodeAnimator(
                    RenderNodeAnimator.TRANSLATION_Y, endTranslationY);
            translationAnimRt.setTarget(view);
            translationAnim = translationAnimRt;
        } else {
            translationAnim = ObjectAnimator.ofFloat(view, View.TRANSLATION_Y,
                    view.getTranslationY(), endTranslationY);
        }
        translationAnim.setInterpolator(interpolator);
        translationAnim.setDuration(duration);
        translationAnim.setStartDelay(delay);
        translationAnim.start();
