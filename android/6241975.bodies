class AppFuse
!!!71035319.java!!!	AppFuse(inout name : String, inout callback : AppFuse::Callback)
        mName = name;
        mCallback = callback;
!!!71035447.java!!!	mount(inout storageManager : StorageManager) : void
        Preconditions.checkState(mDeviceFd == null);
        mDeviceFd = storageManager.mountAppFuse(mName);
        mMessageThread = new AppFuseMessageThread(mDeviceFd.dup().detachFd());
        mMessageThread.start();
!!!71035575.java!!!	close() : void
        try {
            // Remote side of ParcelFileDescriptor is tracking the close of mDeviceFd, and unmount
            // the corresponding fuse file system. The mMessageThread will receive ENODEV, and
            // then terminate itself.
            mDeviceFd.close();
            mMessageThread.join();
        } catch (IOException exp) {
            Log.e(MtpDocumentsProvider.TAG, "Failed to close device FD.", exp);
        } catch (InterruptedException exp) {
            Log.e(MtpDocumentsProvider.TAG, "Failed to terminate message thread.", exp);
        }
!!!71035703.java!!!	openFile(in i : int, in mode : int) : ParcelFileDescriptor
        Preconditions.checkArgument(
                mode == ParcelFileDescriptor.MODE_READ_ONLY ||
                mode == (ParcelFileDescriptor.MODE_WRITE_ONLY |
                         ParcelFileDescriptor.MODE_TRUNCATE));
        return ParcelFileDescriptor.open(new File(
                getMountPoint(),
                Integer.toString(i)),
                mode);
!!!71035831.java!!!	getMountPoint() : File
        return new File("/mnt/appfuse/" + Process.myUid() + "_" + mName);
!!!71036599.java!!!	getFileSize(in inode : int) : long
        try {
            return mCallback.getFileSize(inode);
        } catch (Exception error) {
            return -getErrnoFromException(error);
        }
!!!71036727.java!!!	readObjectBytes(in inode : int, in offset : long, in size : long) : long
        if (offset < 0 || size < 0 || size > MAX_READ) {
            return -OsConstants.EINVAL;
        }
        try {
            // It's OK to share the same mBuffer among requests because the requests are processed
            // by AppFuseMessageThread sequentially.
            return mCallback.readObjectBytes(inode, offset, size, mBuffer);
        } catch (Exception error) {
            return -getErrnoFromException(error);
        }
!!!71036855.java!!!	writeObjectBytes(in fileHandler : long, in inode : int, in offset : long, in size : int, inout bytes : byte [[]]) : int
        try {
            return mCallback.writeObjectBytes(fileHandler, inode, offset, size, bytes);
        } catch (Exception error) {
            return -getErrnoFromException(error);
        }
!!!71036983.java!!!	flushFileHandle(in fileHandle : long) : int
        try {
            mCallback.flushFileHandle(fileHandle);
            return 0;
        } catch (Exception error) {
            return -getErrnoFromException(error);
        }
!!!71037111.java!!!	closeFileHandle(in fileHandle : long) : int
        try {
            mCallback.closeFileHandle(fileHandle);
            return 0;
        } catch (Exception error) {
            return -getErrnoFromException(error);
        }
!!!71037239.java!!!	getErrnoFromException(inout error : Exception) : int
        if (DEBUG) {
            Log.e(MtpDocumentsProvider.TAG, "AppFuse callbacks", error);
        }
        if (error instanceof FileNotFoundException) {
            return OsConstants.ENOENT;
        } else if (error instanceof IOException) {
            return OsConstants.EIO;
        } else if (error instanceof UnsupportedOperationException) {
            return OsConstants.ENOTSUP;
        } else if (error instanceof IllegalArgumentException) {
            return OsConstants.EINVAL;
        } else {
            return OsConstants.EIO;
        }
