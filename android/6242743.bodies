class MtpManager
!!!71053111.java!!!	MtpManager(inout context : Context)
        mManager = (UsbManager) context.getSystemService(Context.USB_SERVICE);
!!!71053239.java!!!	openDevice(in deviceId : int) : MtpDeviceRecord
        UsbDevice rawDevice = null;
        for (final UsbDevice candidate : mManager.getDeviceList().values()) {
            if (candidate.getDeviceId() == deviceId) {
                rawDevice = candidate;
                break;
            }
        }

        ensureNotNull(rawDevice, "Not found USB device: " + deviceId);

        if (!mManager.hasPermission(rawDevice)) {
            mManager.grantPermission(rawDevice);
            if (!mManager.hasPermission(rawDevice)) {
                throw new IOException("Failed to grant a device permission.");
            }
        }

        final MtpDevice device = new MtpDevice(rawDevice);

        final UsbDeviceConnection connection = ensureNotNull(
                mManager.openDevice(rawDevice),
                "Failed to open a USB connection.");

        if (!device.open(connection)) {
            // We cannot open connection when another application use the device.
            throw new BusyDeviceException();
        }

        // Handle devices that fail to obtain storages just after opening a MTP session.
        final int[] storageIds = ensureNotNull(
                device.getStorageIds(),
                "Not found MTP storages in the device.");

        mDevices.put(deviceId, device);
        return createDeviceRecord(rawDevice);
!!!71053367.java!!!	closeDevice(in deviceId : int) : void
        getDevice(deviceId).close();
        mDevices.remove(deviceId);
!!!71053495.java!!!	getDevices() : MtpDeviceRecord
        final ArrayList<MtpDeviceRecord> devices = new ArrayList<>();
        for (UsbDevice device : mManager.getDeviceList().values()) {
            if (!isMtpDevice(device)) {
                continue;
            }
            devices.add(createDeviceRecord(device));
        }
        return devices.toArray(new MtpDeviceRecord[devices.size()]);
!!!71053623.java!!!	getObjectInfo(in deviceId : int, in objectHandle : int) : MtpObjectInfo
        final MtpDevice device = getDevice(deviceId);
        synchronized (device) {
            return ensureNotNull(
                    device.getObjectInfo(objectHandle),
                    "Failed to get object info: " + objectHandle);
        }
!!!71053751.java!!!	getObjectHandles(in deviceId : int, in storageId : int, in parentObjectHandle : int) : int
        final MtpDevice device = getDevice(deviceId);
        synchronized (device) {
            return ensureNotNull(
                    device.getObjectHandles(storageId, 0 /* all format */, parentObjectHandle),
                    "Failed to fetch object handles.");
        }
!!!71053879.java!!!	getObject(in deviceId : int, in objectHandle : int, in expectedSize : int) : byte
        final MtpDevice device = getDevice(deviceId);
        synchronized (device) {
            return ensureNotNull(
                    device.getObject(objectHandle, expectedSize),
                    "Failed to fetch object bytes");
        }
!!!71054007.java!!!	getPartialObject(in deviceId : int, in objectHandle : int, in offset : long, in size : long, inout buffer : byte [[]]) : long
        final MtpDevice device = getDevice(deviceId);
        synchronized (device) {
            return device.getPartialObject(objectHandle, offset, size, buffer);
        }
!!!71054135.java!!!	getPartialObject64(in deviceId : int, in objectHandle : int, in offset : long, in size : long, inout buffer : byte [[]]) : long
        final MtpDevice device = getDevice(deviceId);
        synchronized (device) {
            return device.getPartialObject64(objectHandle, offset, size, buffer);
        }
!!!71054263.java!!!	getThumbnail(in deviceId : int, in objectHandle : int) : byte
        final MtpDevice device = getDevice(deviceId);
        synchronized (device) {
            return ensureNotNull(
                    device.getThumbnail(objectHandle),
                    "Failed to obtain thumbnail bytes");
        }
!!!71054391.java!!!	deleteDocument(in deviceId : int, in objectHandle : int) : void
        final MtpDevice device = getDevice(deviceId);
        synchronized (device) {
            if (!device.deleteObject(objectHandle)) {
                throw new IOException("Failed to delete document");
            }
        }
!!!71054519.java!!!	createDocument(in deviceId : int, inout objectInfo : MtpObjectInfo, inout source : ParcelFileDescriptor) : int
        final MtpDevice device = getDevice(deviceId);
        synchronized (device) {
            final MtpObjectInfo sendObjectInfoResult = device.sendObjectInfo(objectInfo);
            if (sendObjectInfoResult == null) {
                throw new SendObjectInfoFailure();
            }
            if (objectInfo.getFormat() != MtpConstants.FORMAT_ASSOCIATION) {
                if (!device.sendObject(sendObjectInfoResult.getObjectHandle(),
                        sendObjectInfoResult.getCompressedSize(), source)) {
                    throw new IOException("Failed to send contents of a document");
                }
            }
            return sendObjectInfoResult.getObjectHandle();
        }
!!!71054647.java!!!	getParent(in deviceId : int, in objectHandle : int) : int
        final MtpDevice device = getDevice(deviceId);
        synchronized (device) {
            final int result = (int) device.getParent(objectHandle);
            if (result == 0xffffffff) {
                throw new FileNotFoundException("Not found parent object");
            }
            return result;
        }
!!!71054775.java!!!	importFile(in deviceId : int, in objectHandle : int, inout target : ParcelFileDescriptor) : void
        final MtpDevice device = getDevice(deviceId);
        synchronized (device) {
            if (!device.importFile(objectHandle, target)) {
                throw new IOException("Failed to import file to FD");
            }
        }
!!!71054903.java!!!	readEvent(in deviceId : int, inout signal : CancellationSignal) : MtpEvent
        final MtpDevice device = getDevice(deviceId);
        return device.readEvent(signal);
!!!71055031.java!!!	getObjectSizeLong(in deviceId : int, in objectHandle : int, in format : int) : long
        final MtpDevice device = getDevice(deviceId);
        return device.getObjectSizeLong(objectHandle, format);
!!!71055159.java!!!	getDevice(in deviceId : int) : MtpDevice
        return ensureNotNull(
                mDevices.get(deviceId),
                "USB device " + deviceId + " is not opened.");
!!!71055287.java!!!	getRoots(in deviceId : int) : MtpRoot
        final MtpDevice device = getDevice(deviceId);
        synchronized (device) {
            final int[] storageIds =
                    ensureNotNull(device.getStorageIds(), "Failed to obtain storage IDs.");
            final ArrayList<MtpRoot> roots = new ArrayList<>();
            for (int i = 0; i < storageIds.length; i++) {
                final MtpStorageInfo info = device.getStorageInfo(storageIds[i]);
                if (info == null) {
                    continue;
                }
                roots.add(new MtpRoot(device.getDeviceId(), info));
            }
            return roots.toArray(new MtpRoot[roots.size()]);
        }
!!!71055415.java!!!	createDeviceRecord(inout device : UsbDevice) : MtpDeviceRecord
        final MtpDevice mtpDevice = mDevices.get(device.getDeviceId());
        final boolean opened = mtpDevice != null;
        final String name = device.getProductName();
        MtpRoot[] roots;
        int[] operationsSupported = null;
        int[] eventsSupported = null;
        if (opened) {
            try {
                roots = getRoots(device.getDeviceId());
            } catch (IOException exp) {
                Log.e(MtpDocumentsProvider.TAG, "Failed to open device", exp);
                // If we failed to fetch roots for the device, we still returns device model
                // with an empty set of roots so that the device is shown DocumentsUI as long as
                // the device is physically connected.
                roots = new MtpRoot[0];
            }
            final MtpDeviceInfo info = mtpDevice.getDeviceInfo();
            if (info != null) {
                operationsSupported = mtpDevice.getDeviceInfo().getOperationsSupported();
                eventsSupported = mtpDevice.getDeviceInfo().getEventsSupported();
            }
        } else {
            roots = new MtpRoot[0];
        }
        return new MtpDeviceRecord(
                device.getDeviceId(), name, device.getSerialNumber(), opened, roots,
                operationsSupported, eventsSupported);
!!!71055543.java!!!	isMtpDevice(inout device : UsbDevice) : boolean
        for (int i = 0; i < device.getInterfaceCount(); i++) {
            final UsbInterface usbInterface = device.getInterface(i);
            if ((usbInterface.getInterfaceClass() == UsbConstants.USB_CLASS_STILL_IMAGE &&
                    usbInterface.getInterfaceSubclass() == SUBCLASS_STILL_IMAGE_CAPTURE &&
                    usbInterface.getInterfaceProtocol() == PROTOCOL_PICTURE_TRANSFER)) {
                return true;
            }
            if (usbInterface.getInterfaceClass() == UsbConstants.USB_SUBCLASS_VENDOR_SPEC &&
                    usbInterface.getInterfaceSubclass() == SUBCLASS_MTP &&
                    usbInterface.getInterfaceProtocol() == PROTOCOL_MTP &&
                    "MTP".equals(usbInterface.getName())) {
                return true;
            }
        }
        return false;
!!!71055671.java!!!	ensureNotNull(inout t : T, inout errorMessage : String) : T
        if (t != null) {
            return t;
        } else {
            throw new IOException(errorMessage);
        }
