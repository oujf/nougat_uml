class TestUtil
!!!71082551.java!!!	setupMtpDevice(inout instrumentation : TestResultInstrumentation, inout usbManager : UsbManager, inout manager : MtpManager) : UsbDevice
        while (true) {
            try {
                final UsbDevice device = findMtpDevice(usbManager, manager);
                waitForStorages(instrumentation, manager, device.getDeviceId());
                return device;
            } catch (IOException exp) {
                instrumentation.show(Objects.toString(exp.getMessage()));
                SystemClock.sleep(1000);
                // When the MTP device is Android, and it changes the USB device type from
                // "Charging" to "MTP", the device ID will be updated. We need to find a device
                // again.
                continue;
            }
        }
!!!71082679.java!!!	addTestDevice(inout database : MtpDatabase) : void
        database.getMapper().startAddingDocuments(null);
        database.getMapper().putDeviceDocument(new MtpDeviceRecord(
                0, "Device", "device_key", /* opened is */ true, new MtpRoot[0],
                OPERATIONS_SUPPORTED, null));
        database.getMapper().stopAddingDocuments(null);
!!!71082807.java!!!	addTestStorage(inout database : MtpDatabase, inout parentId : String) : void
        database.getMapper().startAddingDocuments(parentId);
        database.getMapper().putStorageDocuments(parentId, OPERATIONS_SUPPORTED, new MtpRoot[] {
                new MtpRoot(0, 100, "Storage", 1024, 1024, ""),
        });
        database.getMapper().stopAddingDocuments(parentId);
!!!71082935.java!!!	findMtpDevice(inout usbManager : UsbManager, inout manager : MtpManager) : UsbDevice
        final HashMap<String,UsbDevice> devices = usbManager.getDeviceList();
        if (devices.size() == 0) {
            throw new IOException("Device not found.");
        }
        final UsbDevice device = devices.values().iterator().next();
        // Tries to get ownership of the device in case that another application use it.
        if (usbManager.hasPermission(device)) {
            final UsbDeviceConnection connection = usbManager.openDevice(device);
            for (int i = 0; i < device.getInterfaceCount(); i++) {
                // Since the test runs real environment, we need to call claim interface with
                // force = true to rob interfaces from other applications.
                connection.claimInterface(device.getInterface(i), true);
                connection.releaseInterface(device.getInterface(i));
            }
            connection.close();
        }
        manager.openDevice(device.getDeviceId());
        return device;
!!!71083063.java!!!	waitForStorages(inout instrumentation : TestResultInstrumentation, inout manager : MtpManager, in deviceId : int) : void
        while (true) {
            MtpDeviceRecord device = null;
            for (final MtpDeviceRecord deviceCandidate : manager.getDevices()) {
                if (deviceCandidate.deviceId == deviceId) {
                    device = deviceCandidate;
                    break;
                }
            }
            if (device == null) {
                throw new IOException("Device was detached.");
            }
            if (device.roots.length == 0) {
                instrumentation.show("Wait for storages.");
                SystemClock.sleep(1000);
                continue;
            }
            return;
        }
