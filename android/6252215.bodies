class HomeSP
!!!71180215.java!!!	HomeSP(inout ssidMap : Map<String, Long>, inout fqdn : String, inout roamingConsortiums : HashSet<Long>, inout otherHomePartners : Set<String>, inout matchAnyOIs : Set<Long>, inout matchAllOIs : List<Long>, inout friendlyName : String, inout iconURL : String, inout credential : Credential)

        mSSIDs = ssidMap;
        List<List<String>> otherPartners = new ArrayList<>(otherHomePartners.size());
        for (String otherPartner : otherHomePartners) {
            otherPartners.add(Utils.splitDomain(otherPartner));
        }
        mOtherHomePartners = otherHomePartners;
        mFQDN = fqdn;
        mDomainMatcher = new DomainMatcher(Utils.splitDomain(fqdn), otherPartners);
        mRoamingConsortiums = roamingConsortiums;
        mMatchAnyOIs = matchAnyOIs;
        mMatchAllOIs = matchAllOIs;
        mFriendlyName = friendlyName;
        mIconURL = iconURL;
        mCredential = credential;

        mPolicy = null;
        mCredentialPriority = -1;
        mAAATrustRoots = null;
        mSubscriptionUpdate = null;
        mSubscriptionParameters = null;
        mUpdateIdentifier = -1;
!!!71180343.java!!!	HomeSP(inout ssidMap : Map<String, Long>, inout fqdn : String, inout roamingConsortiums : HashSet<Long>, inout otherHomePartners : Set<String>, inout matchAnyOIs : Set<Long>, inout matchAllOIs : List<Long>, inout friendlyName : String, inout iconURL : String, inout credential : Credential, inout policy : Policy, in credentialPriority : int, inout AAATrustRoots : Map<String, String>, inout subscriptionUpdate : UpdateInfo, inout subscriptionParameters : SubscriptionParameters, in updateIdentifier : int)

        mSSIDs = ssidMap;
        List<List<String>> otherPartners = new ArrayList<>(otherHomePartners.size());
        for (String otherPartner : otherHomePartners) {
            otherPartners.add(Utils.splitDomain(otherPartner));
        }
        mOtherHomePartners = otherHomePartners;
        mFQDN = fqdn;
        mDomainMatcher = new DomainMatcher(Utils.splitDomain(fqdn), otherPartners);
        mRoamingConsortiums = roamingConsortiums;
        mMatchAnyOIs = matchAnyOIs;
        mMatchAllOIs = matchAllOIs;
        mFriendlyName = friendlyName;
        mIconURL = iconURL;
        mCredential = credential;

        mPolicy = policy;
        mCredentialPriority = credentialPriority;
        mAAATrustRoots = AAATrustRoots;
        mSubscriptionUpdate = subscriptionUpdate;
        mSubscriptionParameters = subscriptionParameters;
        mUpdateIdentifier = updateIdentifier;
!!!71180471.java!!!	getUpdateIdentifier() : int
        return mUpdateIdentifier;
!!!71180599.java!!!	getSubscriptionUpdate() : UpdateInfo
        return mSubscriptionUpdate;
!!!71180727.java!!!	getPolicy() : Policy
        return mPolicy;
!!!71180855.java!!!	imsiMatch(inout imsis : List<String>, inout mccMnc : String) : String
        if (mCredential.getImsi().matchesMccMnc(mccMnc)) {
            for (String imsi : imsis) {
                if (imsi.startsWith(mccMnc)) {
                    return imsi;
                }
            }
        }
        return null;
!!!71180983.java!!!	getFQDN() : String
        return mFQDN;
!!!71181111.java!!!	getFriendlyName() : String
        return mFriendlyName;
!!!71181239.java!!!	getRoamingConsortiums() : HashSet<Long>
        return mRoamingConsortiums;
!!!71181367.java!!!	getCredential() : Credential
        return mCredential;
!!!71181495.java!!!	getSSIDs() : String
        return mSSIDs;
!!!71181623.java!!!	getOtherHomePartners() : String
        return mOtherHomePartners;
!!!71181751.java!!!	getMatchAnyOIs() : Set<Long>
        return mMatchAnyOIs;
!!!71181879.java!!!	getMatchAllOIs() : List<Long>
        return mMatchAllOIs;
!!!71182007.java!!!	getIconURL() : String
        return mIconURL;
!!!71182135.java!!!	deepEquals(inout other : HomeSP) : boolean
        return mFQDN.equals(other.mFQDN) &&
                mSSIDs.equals(other.mSSIDs) &&
                mOtherHomePartners.equals(other.mOtherHomePartners) &&
                mRoamingConsortiums.equals(other.mRoamingConsortiums) &&
                mMatchAnyOIs.equals(other.mMatchAnyOIs) &&
                mMatchAllOIs.equals(other.mMatchAllOIs) &&
                mFriendlyName.equals(other.mFriendlyName) &&
                Utils.compare(mIconURL, other.mIconURL) == 0 &&
                mCredential.equals(other.mCredential);
!!!71182263.java!!!	equals(inout thatObject : Object) : boolean
        if (this == thatObject) {
            return true;
        } else if (thatObject == null || getClass() != thatObject.getClass()) {
            return false;
        }

        HomeSP that = (HomeSP) thatObject;
        return mFQDN.equals(that.mFQDN);
!!!71182391.java!!!	hashCode() : int
        return mFQDN.hashCode();
!!!71182519.java!!!	toString() : String
        return "HomeSP{" +
                "SSIDs=" + mSSIDs +
                ", FQDN='" + mFQDN + '\'' +
                ", DomainMatcher=" + mDomainMatcher +
                ", RoamingConsortiums={" + Utils.roamingConsortiumsToString(mRoamingConsortiums) +
                '}' +
                ", MatchAnyOIs={" + Utils.roamingConsortiumsToString(mMatchAnyOIs) + '}' +
                ", MatchAllOIs={" + Utils.roamingConsortiumsToString(mMatchAllOIs) + '}' +
                ", Credential=" + mCredential +
                ", FriendlyName='" + mFriendlyName + '\'' +
                ", IconURL='" + mIconURL + '\'' +
                '}';
