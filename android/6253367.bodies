class OMAConstructed
!!!71124663.java!!!	OMAConstructed(inout parent : OMAConstructed, inout name : String, inout context : String, inout  : String...avps)
        this(parent, name, context, new MultiValueMap<OMANode>(), buildAttributes(avps));
!!!71124791.java!!!	OMAConstructed(inout parent : OMAConstructed, inout name : String, inout context : String, inout children : MultiValueMap, inout avps : Map<String, String>)
        super(parent, name, context, avps);
        mChildren = children;
!!!71124919.java!!!	addChild(inout name : String, inout context : String, inout value : String, inout pathString : String) : OMANode
        if (pathString == null) {
            OMANode child = value != null ?
                    new OMAScalar(this, name, context, value) :
                    new OMAConstructed(this, name, context);
            mChildren.put(name, child);
            return child;
        } else {
            OMANode target = this;
            while (target.getParent() != null)
                target = target.getParent();

            for (String element : pathString.split("/")) {
                target = target.getChild(element);
                if (target == null)
                    throw new IOException("No child node '" + element + "' in " + getPathString());
                else if (target.isLeaf())
                    throw new IOException("Cannot add child to leaf node: " + getPathString());
            }
            return target.addChild(name, context, value, null);
        }
!!!71125047.java!!!	reparent(inout parent : OMAConstructed) : OMAConstructed
        return new OMAConstructed(parent, getName(), getContext(), mChildren, getAttributes());
!!!71125175.java!!!	addChild(inout child : OMANode) : void
        mChildren.put(child.getName(), child.reparent(this));
!!!71125303.java!!!	getScalarValue(inout path : Iterator<String>) : String
        if (!path.hasNext()) {
            throw new OMAException("Path too short for " + getPathString());
        }
        String tag = path.next();
        OMANode child = mChildren.get(tag);
        if (child != null) {
            return child.getScalarValue(path);
        } else {
            return null;
        }
!!!71125431.java!!!	getListValue(inout path : Iterator<String>) : OMANode
        if (!path.hasNext()) {
            return null;
        }
        String tag = path.next();
        OMANode child;
        if (tag.equals("?")) {
            child = mChildren.getSingletonValue();
        } else {
            child = mChildren.get(tag);
        }

        if (child == null) {
            return null;
        } else if (path.hasNext()) {
            return child.getListValue(path);
        } else {
            return child;
        }
!!!71125559.java!!!	isLeaf() : boolean
        return false;
!!!71125687.java!!!	getChildren() : OMANode
        return Collections.unmodifiableCollection(mChildren.values());
!!!71125815.java!!!	getChild(inout name : String) : OMANode
        return mChildren.get(name);
!!!71125943.java!!!	replaceNode(inout oldNode : OMANode, inout newNode : OMANode) : OMANode
        return mChildren.replace(oldNode.getName(), oldNode, newNode);
!!!71126071.java!!!	removeNode(inout key : String, inout node : OMANode) : OMANode
        if (key.equals("?")) {
            return mChildren.remove(node);
        } else {
            return mChildren.remove(key, node);
        }
!!!71126199.java!!!	getValue() : String
        throw new UnsupportedOperationException();
!!!71126327.java!!!	toString(inout sb : StringBuilder, in level : int) : void
        sb.append(getPathString());
        if (getContext() != null) {
            sb.append(" (").append(getContext()).append(')');
        }
        sb.append('\n');

        for (OMANode node : mChildren.values()) {
            node.toString(sb, level + 1);
        }
!!!71126455.java!!!	marshal(inout out : OutputStream, in level : int) : void
        OMAConstants.indent(level, out);
        OMAConstants.serializeString(getName(), out);
        if (getContext() != null) {
            out.write(String.format("(%s)", getContext()).getBytes(StandardCharsets.UTF_8));
        }
        out.write(new byte[]{'+', '\n'});

        for (OMANode child : mChildren.values()) {
            child.marshal(out, level + 1);
        }
        OMAConstants.indent(level, out);
        out.write(".\n".getBytes(StandardCharsets.UTF_8));
!!!71126583.java!!!	fillPayload(inout sb : StringBuilder) : void
        if (getContext() != null) {
            sb.append('<').append(MOTree.RTPropTag).append(">\n");
            sb.append('<').append(MOTree.TypeTag).append(">\n");
            sb.append('<').append(MOTree.DDFNameTag).append(">");
            sb.append(getContext());
            sb.append("</").append(MOTree.DDFNameTag).append(">\n");
            sb.append("</").append(MOTree.TypeTag).append(">\n");
            sb.append("</").append(MOTree.RTPropTag).append(">\n");
        }

        for (OMANode child : getChildren()) {
            child.toXml(sb);
        }
