class HTTPHandler
!!!71144503.java!!!	HTTPHandler(inout charset : Charset, inout socketFactory : OSUSocketFactory)
        this(charset, socketFactory, null, null);
!!!71144631.java!!!	HTTPHandler(inout charset : Charset, inout socketFactory : OSUSocketFactory, inout user : String, inout password : byte [[]])
        mCharset = charset;
        mSocketFactory = socketFactory;
        mSocket = mSocketFactory.createSocket();
        mOut = new BufferedOutputStream(mSocket.getOutputStream());
        mIn = new BufferedInputStream(mSocket.getInputStream());
        mUser = user;
        mPassword = password;
!!!71144759.java!!!	isHTTPAuthPerformed() : boolean
        return mHTTPAuthPerformed;
!!!71144887.java!!!	getOSUCertificate(inout osu : URL) : X509Certificate
        return mSocketFactory.getOSUCertificate(osu);
!!!71145015.java!!!	renegotiate(inout certs : Map<OSUCertType, List<X509Certificate>>, inout key : PrivateKey) : void
        if (!(mSocket instanceof SSLSocket)) {
            throw new IOException("Not a TLS connection");
        }
        if (certs != null) {
            mSocketFactory.reloadKeys(certs, key);
        }
        ((SSLSocket) mSocket).startHandshake();
!!!71145143.java!!!	getTLSUnique() : byte
        if (mSocket instanceof OpenSSLSocketImpl) {
            return ((OpenSSLSocketImpl) mSocket).getChannelId();
        }
        return null;
!!!71145271.java!!!	exchangeSOAP(inout url : URL, inout message : String) : OSUResponse
        HTTPResponse response = exchangeWithRetry(url, message, HTTPMessage.Method.POST,
                HTTPMessage.ContentTypeSOAP);
        if (response.getStatusCode() >= 300) {
            throw new IOException("Bad HTTP status code " + response.getStatusCode());
        }
        try {
            SOAPParser parser = new SOAPParser(response.getPayloadStream());
            return parser.getResponse();
        } catch (ParserConfigurationException | SAXException e) {
            ByteBuffer x = response.getPayload();
            byte[] b = new byte[x.remaining()];
            x.get(b);
            Log.w("XML", "Bad: '" + new String(b, StandardCharsets.ISO_8859_1));
            throw new IOException(e);
        }
!!!71145399.java!!!	exchangeBinary(inout url : URL, inout message : String, inout contentType : String) : ByteBuffer
        HTTPResponse response =
                exchangeWithRetry(url, message, HTTPMessage.Method.POST, contentType);
        return response.getBinaryPayload();
!!!71145527.java!!!	doGet(inout url : URL) : InputStream
        HTTPResponse response = exchangeWithRetry(url, null, HTTPMessage.Method.GET, null);
        return response.getPayloadStream();
!!!71145655.java!!!	doGetHTTP(inout url : URL) : HTTPResponse
        return exchangeWithRetry(url, null, HTTPMessage.Method.GET, null);
!!!71145783.java!!!	exchangeWithRetry(inout url : URL, inout message : String, inout method : HTTPMessage::Method, inout contentType : String) : HTTPResponse
        HTTPResponse response = null;
        int retry = 0;
        for (; ; ) {
            try {
                response = httpExchange(url, message, method, contentType);
                break;
            } catch (IOException ioe) {
                close();
                retry++;
                if (retry > 3) {
                    break;
                }
                Log.d(OSUManager.TAG, "Failed HTTP exchange, retry " + retry);
                mSocket = mSocketFactory.createSocket();
                mOut = new BufferedOutputStream(mSocket.getOutputStream());
                mIn = new BufferedInputStream(mSocket.getInputStream());
            }
        }
        if (response == null) {
            throw new IOException("Failed to establish connection to peer");
        }
        return response;
!!!71145911.java!!!	httpExchange(inout url : URL, inout message : String, inout method : HTTPMessage::Method, inout contentType : String) : HTTPResponse
        HTTPRequest request = new HTTPRequest(message, mCharset, method, url, contentType, false);
        request.send(mOut);
        HTTPResponse response = new HTTPResponse(mIn);
        Log.d(OSUManager.TAG, "HTTP code " + response.getStatusCode() + ", user " + mUser +
                ", pw " + (mPassword != null ? '\'' + new String(mPassword) + '\'' : "-"));
        if (response.getStatusCode() == 401) {
            if (mUser == null) {
                throw new IOException("Missing user name for HTTP authentication");
            }
            try {
                request = new HTTPRequest(message, StandardCharsets.ISO_8859_1, method, url,
                        contentType, true);
                request.doAuthenticate(response, mUser, mPassword, url,
                        sSequence.incrementAndGet());
                request.send(mOut);
                mHTTPAuthPerformed = true;
            } catch (GeneralSecurityException gse) {
                throw new IOException(gse);
            }

            response = new HTTPResponse(mIn);
        }
        return response;
!!!71146039.java!!!	close() : void
        mIn.close();
        mOut.close();
        mSocket.close();
