class OSUCache
!!!71150391.java!!!	OSUCache()
        mInstant = 0;
!!!71150519.java!!!	clear() : void
        mBatchedOSUs.clear();
!!!71150647.java!!!	clearAll() : void
        clear();
        mCache.clear();
!!!71150775.java!!!	pushScanResults(inout scanResults : Collection<ScanResult>) : OSUProvider
        for (ScanResult scanResult : scanResults) {
            AnqpInformationElement[] osuInfo = scanResult.anqpElements;
            if (osuInfo != null && osuInfo.length > 0) {
                putResult(scanResult, osuInfo);
            }
        }
        return scanEnd();
!!!71150903.java!!!	putResult(inout scanResult : ScanResult, inout elements : AnqpInformationElement [[]]) : void
        for (AnqpInformationElement ie : elements) {
            if (ie.getElementId() == AnqpInformationElement.HS_OSU_PROVIDERS
                    && ie.getVendorId() == AnqpInformationElement.HOTSPOT20_VENDOR_ID) {
                try {
                    HSOsuProvidersElement providers = new HSOsuProvidersElement(
                            Constants.ANQPElementType.HSOSUProviders,
                            ByteBuffer.wrap(ie.getPayload()).order(ByteOrder.LITTLE_ENDIAN));

                    putProviders(scanResult, providers);
                } catch (ProtocolException pe) {
                    Log.w(OSUManager.TAG,
                            "Failed to parse OSU element: " + pe);
                }
            }
        }
!!!71151031.java!!!	putProviders(inout scanResult : ScanResult, inout osuProviders : HSOsuProvidersElement) : void
        for (OSUProvider provider : osuProviders.getProviders()) {
            // Make a predictive put
            ScanResult existing = mBatchedOSUs.put(provider, scanResult);
            if (existing != null && existing.level > scanResult.level) {
                // But undo it if the entry already held a better RSSI
                mBatchedOSUs.put(provider, existing);
            }
        }
!!!71151159.java!!!	scanEnd() : OSUProvider
        // Update the trail of OSU Providers:
        int changes = 0;
        Map<OSUProvider, ScanInstance> aged = new HashMap<>(mCache);
        for (Map.Entry<OSUProvider, ScanResult> entry : mBatchedOSUs.entrySet()) {
            ScanInstance current = aged.remove(entry.getKey());
            if (current == null || !current.bssidEqual(entry.getValue())) {
                mCache.put(entry.getKey(), new ScanInstance(entry.getValue(), mInstant));
                changes++;
                if (current == null) {
                    Log.d("ZXZ", "Add OSU " + entry.getKey() + " from " + entry.getValue().SSID);
                } else {
                    Log.d("ZXZ", "Update OSU " + entry.getKey() + " with " +
                            entry.getValue().SSID + " to " + current);
                }
            } else {
                Log.d("ZXZ", "Existing OSU " + entry.getKey() + ", "
                        + current.getInstant() + " -> " + mInstant);
                current.updateInstant(mInstant);
            }
        }

        for (Map.Entry<OSUProvider, ScanInstance> entry : aged.entrySet()) {
            if (mInstant - entry.getValue().getInstant() > SCAN_BATCH_HISTORY_SIZE) {
                Log.d("ZXZ", "Remove OSU " + entry.getKey() + ", "
                        + entry.getValue().getInstant() + " @ " + mInstant);
                mCache.remove(entry.getKey());
                changes++;
            }
        }

        mInstant++;
        clear();

        // Return the latest results if there were any changes from last batch
        if (changes > 0) {
            Map<OSUProvider, ScanResult> results = new HashMap<>(mCache.size());
            for (Map.Entry<OSUProvider, ScanInstance> entry : mCache.entrySet()) {
                results.put(entry.getKey(), entry.getValue().getScanResult());
            }
            return results;
        } else {
            return null;
        }
!!!71151287.java!!!	toBSSIDStrings(inout bssids : Set<Long>) : String
        StringBuilder sb = new StringBuilder();
        for (Long bssid : bssids) {
            sb.append(String.format(" %012x", bssid));
        }
        return sb.toString();
