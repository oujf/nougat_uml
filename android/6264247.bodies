class DomainMatcher
!!!71179575.java!!!	DomainMatcher(inout primary : List<String>, inout secondary : List<List<String>>)
        mRoot = new Label(Match.None);
        for (List<String> secondaryLabel : secondary) {
            mRoot.addDomain(secondaryLabel.iterator(), Match.Secondary);
        }
        // Primary overwrites secondary.
        mRoot.addDomain(primary.iterator(), Match.Primary);
!!!71179703.java!!!	isSubDomain(inout domain : List<String>) : DomainMatcher::Match

        Label label = mRoot;
        for (String labelString : domain) {
            label = label.getSubLabel(labelString);
            if (label == null) {
                return Match.None;
            } else if (label.getMatch() != Match.None) {
                return label.getMatch();
            }
        }
        return Match.None;  // Domain is a super domain
!!!71179831.java!!!	arg2SubdomainOfArg1(inout arg1 : List<String>, inout arg2 : List<String>) : boolean
        if (arg2.size() < arg1.size()) {
            return false;
        }

        Iterator<String> l1 = arg1.iterator();
        Iterator<String> l2 = arg2.iterator();

        while (l1.hasNext()) {
            if (!l1.next().equals(l2.next())) {
                return false;
            }
        }
        return true;
!!!71179959.java!!!	toString() : String
        return "Domain matcher " + mRoot;
!!!71180087.java!!!	main(inout args : String [[]]) : void
        DomainMatcher dm1 = new DomainMatcher(Utils.splitDomain("android.google.com"),
                Collections.<List<String>>emptyList());
        for (String domain : TestDomains) {
            System.out.println(domain + ": " + dm1.isSubDomain(Utils.splitDomain(domain)));
        }
        List<List<String>> secondaries = new ArrayList<List<String>>();
        secondaries.add(Utils.splitDomain("apple.com"));
        secondaries.add(Utils.splitDomain("net"));
        DomainMatcher dm2 = new DomainMatcher(Utils.splitDomain("android.google.com"), secondaries);
        for (String domain : TestDomains) {
            System.out.println(domain + ": " + dm2.isSubDomain(Utils.splitDomain(domain)));
        }
