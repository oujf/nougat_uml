class ServiceListener
!!!71193527.java!!!	ServiceListener(inout context : Context, inout observer : ServiceListener::Observer, inout serviceTypes : String [[]])
        mObserver = observer;
        mServiceType = serviceTypes;
        mNSDManager = (NsdManager)context.getSystemService(Context.NSD_SERVICE);
        mResolveQueue = ServiceResolveQueue.getInstance(mNSDManager);

        Map<String, VendorInfo> vendorInfoMap = new HashMap<>();
        TypedArray testArray = context.getResources().obtainTypedArray(R.array.known_print_plugin_vendors);
        for(int i = 0; i < testArray.length(); i++) {
            int arrayID = testArray.getResourceId(i, 0);
            if (arrayID != 0) {
                VendorInfo info = new VendorInfo(context.getResources(), arrayID);
                vendorInfoMap.put(info.mVendorID, info);
                vendorInfoMap.put(info.mPackageName, info);
            }
        }
        testArray.recycle();
        mVendorInfoHashMap = vendorInfoMap;
!!!71193655.java!!!	serviceResolved(inout nsdServiceInfo : NsdServiceInfo) : void
        printerFound(nsdServiceInfo);
!!!71193783.java!!!	printerFound(inout nsdServiceInfo : NsdServiceInfo) : void
        if (nsdServiceInfo == null) return;
        if (TextUtils.isEmpty(PrinterHashMap.getKey(nsdServiceInfo))) return;
        String vendor = MDnsUtils.getVendor(nsdServiceInfo);
        if (vendor == null) vendor = "";
        for(Map.Entry<String,VendorInfo> entry : mVendorInfoHashMap.entrySet()) {
            for(String vendorValues : entry.getValue().mDNSValues) {
                if (vendor.equalsIgnoreCase(vendorValues)) {
                    vendor = entry.getValue().mVendorID;
                    break;
                }
            }
            // intentional pointer check
            //noinspection StringEquality
            if ((vendor != entry.getValue().mVendorID) &&
                    MDnsUtils.isVendorPrinter(nsdServiceInfo, entry.getValue().mDNSValues)) {
                vendor = entry.getValue().mVendorID;
            }
            // intentional pointer check
            //noinspection StringEquality
            if (vendor == entry.getValue().mVendorID) break;
        }

        if (TextUtils.isEmpty(vendor)) {
            return;
        }

        if (!mObserver.matchesCriteria(vendor, nsdServiceInfo))
            return;
        boolean mapsChanged;

        PrinterHashMap vendorHash = mVendorHashMap.get(vendor);
        if (vendorHash == null) {
            vendorHash = new PrinterHashMap();
        }
        mapsChanged = (vendorHash.addPrinter(nsdServiceInfo) == null);
        mVendorHashMap.put(vendor, vendorHash);

        if (mapsChanged) {
            mObserver.dataSetChanged();
        }
!!!71193911.java!!!	printerRemoved(inout nsdServiceInfo : NsdServiceInfo) : void
        boolean wasRemoved = false;
        Set<String> vendors = mVendorHashMap.keySet();
        for(String vendor : vendors) {
            PrinterHashMap map = mVendorHashMap.get(vendor);
            wasRemoved |= (map.removePrinter(nsdServiceInfo) != null);
            if (map.isEmpty()) wasRemoved |= (mVendorHashMap.remove(vendor) != null);
        }
        if (wasRemoved) {
            mObserver.dataSetChanged();
        }
!!!71194039.java!!!	start() : void
        stop();
        for(final String service :mServiceType) {
            NsdManager.DiscoveryListener listener = new NsdManager.DiscoveryListener() {
                @Override
                public void onStartDiscoveryFailed(String s, int i) {

                }

                @Override
                public void onStopDiscoveryFailed(String s, int i) {

                }

                @Override
                public void onDiscoveryStarted(String s) {

                }

                @Override
                public void onDiscoveryStopped(String s) {

                }

                @Override
                public void onServiceFound(NsdServiceInfo nsdServiceInfo) {
                    mResolveQueue.queueRequest(nsdServiceInfo, ServiceListener.this);
                }

                @Override
                public void onServiceLost(NsdServiceInfo nsdServiceInfo) {
                    mResolveQueue.removeRequest(nsdServiceInfo, ServiceListener.this);
                    printerRemoved(nsdServiceInfo);
                }
            };
            DiscoveryListenerMultiplexer.addListener(mNSDManager, service, listener);
            mListeners.add(listener);
        }
!!!71194167.java!!!	stop() : void
        for(NsdManager.DiscoveryListener listener : mListeners) {
            DiscoveryListenerMultiplexer.removeListener(mNSDManager, listener);
        }
        mVendorHashMap.clear();
        mListeners.clear();
!!!71194295.java!!!	getCount() : Pair
        int count = 0;
        for (PrinterHashMap map : mVendorHashMap.values()) {
            count += map.size();
        }
        return Pair.create(mVendorHashMap.size(), count);
