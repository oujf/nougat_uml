class SamsungRecommendationPlugin
!!!71204919.java!!!	isSupportedModel(inout model : String) : boolean
        if (!TextUtils.isEmpty(model)) {
            String modelToUpper = model.toUpperCase(Locale.US);
            for (String unSupportedPrinter : mNotSupportedDevices) {
                if (modelToUpper.contains(unSupportedPrinter)) {
                    return  false;
                }
            }
        }
        return true;
!!!71205047.java!!!	SamsungRecommendationPlugin(inout context : Context)
        super(context, R.string.plugin_vendor_samsung, new VendorInfo(context.getResources(), R.array.known_print_vendor_info_for_samsung), new String[]{"_pdl-datastream._tcp"});
!!!71205175.java!!!	matchesCriteria(inout vendor : String, inout nsdServiceInfo : NsdServiceInfo) : boolean
        if (!TextUtils.equals(vendor, mVendorInfo.mVendorID)) return false;

        String modelName = getModelName(nsdServiceInfo);
        if (modelName != null) {
            return (isSupportedModel(modelName));
        }
        return false;
!!!71205303.java!!!	getModelName(inout resolvedDevice : NsdServiceInfo) : String
        Map<String,byte[]> attributes = resolvedDevice.getAttributes();
        String usb_mfg = MDnsUtils.getString(attributes.get(ATTR_USB_MFG));
        if (TextUtils.isEmpty(usb_mfg)) {
            usb_mfg = MDnsUtils.getString(attributes.get(ATTR_MFG));
        }

        String usb_mdl = MDnsUtils.getString(attributes.get(ATTR_USB_MDL));
        if (TextUtils.isEmpty(usb_mdl)) {
            usb_mdl = MDnsUtils.getString(attributes.get(ATTR_MDL));
        }

        String modelName = null;
        if (!TextUtils.isEmpty(usb_mfg) && !TextUtils.isEmpty(usb_mdl)) {
            modelName = usb_mfg.trim() + " " + usb_mdl.trim();
        } else {
            modelName = MDnsUtils.getString(attributes.get(ATTR_PRODUCT));
            if (TextUtils.isEmpty(modelName)) {
                modelName = MDnsUtils.getString(attributes.get(ATTR_TY));
            }
        }

        return modelName;
