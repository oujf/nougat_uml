class MutexFileProvider
!!!71212215.java!!!	MutexFileProvider(inout file : File)
        mFile = file;
        if (file.exists()) {
            file.delete();
        }
        file.createNewFile();
!!!71212343.java!!!	acquireFile(inout callback : MutexFileProvider::OnReleaseRequestCallback) : File
        synchronized (mLock) {
            // If this thread has the file, nothing to do.
            if (mOwnerThread == Thread.currentThread()) {
                return mFile;
            }

            // Another thread wants file ask for a release.
            if (mOwnerThread != null && mOnReleaseRequestCallback != null) {
                mOnReleaseRequestCallback.onReleaseRequested(mFile);
            }

            // Wait until the file is released.
            while (mOwnerThread != null) {
                try {
                    mLock.wait();
                } catch (InterruptedException ie) {
                    /* ignore */
                }
            }

            // Update the owner and the callback.
            mOwnerThread = Thread.currentThread();
            mOnReleaseRequestCallback = callback;

            if (DEBUG) {
                Log.i(LOG_TAG, "Acquired file: " + mFile + " by thread: " + mOwnerThread);
            }

            return mFile;
        }
!!!71212471.java!!!	releaseFile() : void
        synchronized (mLock) {
            if (mOwnerThread != Thread.currentThread()) {
                return;
            }

            if (DEBUG) {
                Log.i(LOG_TAG, "Released file: " + mFile + " from thread: " + mOwnerThread);
            }

            // Update the owner and the callback.
            mOwnerThread = null;
            mOnReleaseRequestCallback = null;

            mLock.notifyAll();
        }
