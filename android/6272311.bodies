class PageContentLruCache
!!!71217847.java!!!	PageContentLruCache(in maxSizeInBytes : int)
            mMaxSizeInBytes = maxSizeInBytes;
!!!71217975.java!!!	getRenderedPage(in pageIndex : int) : PageContentRepository::RenderedPage
            return mRenderedPages.get(pageIndex);
!!!71218103.java!!!	removeRenderedPage(in pageIndex : int) : PageContentRepository::RenderedPage
            RenderedPage page = mRenderedPages.remove(pageIndex);
            if (page != null) {
                mSizeInBytes -= page.getSizeInBytes();
            }
            return page;
!!!71218231.java!!!	putRenderedPage(in pageIndex : int, inout renderedPage : PageContentRepository::RenderedPage) : PageContentRepository::RenderedPage
            RenderedPage oldRenderedPage = mRenderedPages.remove(pageIndex);
            if (oldRenderedPage != null) {
                if (!oldRenderedPage.renderSpec.equals(renderedPage.renderSpec)) {
                    throw new IllegalStateException("Wrong page size");
                }
            } else {
                final int contentSizeInBytes = renderedPage.getSizeInBytes();
                if (mSizeInBytes + contentSizeInBytes > mMaxSizeInBytes) {
                    throw new IllegalStateException("Client didn't free space");
                }

                mSizeInBytes += contentSizeInBytes;
            }
            return mRenderedPages.put(pageIndex, renderedPage);
!!!71218359.java!!!	invalidate() : void
            for (Map.Entry<Integer, RenderedPage> entry : mRenderedPages.entrySet()) {
                entry.getValue().state = RenderedPage.STATE_SCRAP;
            }
!!!71218487.java!!!	removeLeastNeeded() : PageContentRepository::RenderedPage
            if (mRenderedPages.isEmpty()) {
                return null;
            }

            // First try to remove a rendered page that holds invalidated
            // or incomplete content, i.e. its render spec is null.
            for (Map.Entry<Integer, RenderedPage> entry : mRenderedPages.entrySet()) {
                RenderedPage renderedPage = entry.getValue();
                if (renderedPage.state == RenderedPage.STATE_SCRAP) {
                    Integer pageIndex = entry.getKey();
                    mRenderedPages.remove(pageIndex);
                    mSizeInBytes -= renderedPage.getSizeInBytes();
                    return renderedPage;
                }
            }

            // If all rendered pages contain rendered content, then use the oldest.
            final int pageIndex = mRenderedPages.eldest().getKey();
            RenderedPage renderedPage = mRenderedPages.remove(pageIndex);
            mSizeInBytes -= renderedPage.getSizeInBytes();
            return renderedPage;
!!!71218615.java!!!	getSizeInBytes() : int
            return mSizeInBytes;
!!!71218743.java!!!	getMaxSizeInBytes() : int
            return mMaxSizeInBytes;
!!!71218871.java!!!	clear() : void
            Iterator<Map.Entry<Integer, RenderedPage>> iterator =
                    mRenderedPages.entrySet().iterator();
            while (iterator.hasNext()) {
                iterator.next();
                iterator.remove();
            }
