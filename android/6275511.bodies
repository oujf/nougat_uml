class PdfRendererImpl
!!!71242167.java!!!	openDocument(inout source : ParcelFileDescriptor) : int
            synchronized (mLock) {
                try {
                    throwIfOpened();
                    if (DEBUG) {
                        Log.i(LOG_TAG, "openDocument()");
                    }
                    mRenderer = new PdfRenderer(source);
                    return mRenderer.getPageCount();
                } catch (IOException | IllegalStateException e) {
                    IoUtils.closeQuietly(source);
                    Log.e(LOG_TAG, "Cannot open file", e);
                    return ERROR_MALFORMED_PDF_FILE;
                } catch (SecurityException e) {
                    IoUtils.closeQuietly(source);
                    Log.e(LOG_TAG, "Cannot open file", e);
                    return ERROR_SECURE_PDF_FILE;
                }
            }
!!!71242295.java!!!	renderPage(in pageIndex : int, in bitmapWidth : int, in bitmapHeight : int, inout attributes : PrintAttributes, inout destination : ParcelFileDescriptor) : void
            synchronized (mLock) {
                try {
                    throwIfNotOpened();

                    try (PdfRenderer.Page page = mRenderer.openPage(pageIndex)) {
                        final int srcWidthPts = page.getWidth();
                        final int srcHeightPts = page.getHeight();

                        final int dstWidthPts = pointsFromMils(
                                attributes.getMediaSize().getWidthMils());
                        final int dstHeightPts = pointsFromMils(
                                attributes.getMediaSize().getHeightMils());

                        final boolean scaleContent = mRenderer.shouldScaleForPrinting();
                        final boolean contentLandscape = !attributes.getMediaSize().isPortrait();

                        final float displayScale;
                        Matrix matrix = new Matrix();

                        if (scaleContent) {
                            displayScale = Math.min((float) bitmapWidth / srcWidthPts,
                                    (float) bitmapHeight / srcHeightPts);
                        } else {
                            if (contentLandscape) {
                                displayScale = (float) bitmapHeight / dstHeightPts;
                            } else {
                                displayScale = (float) bitmapWidth / dstWidthPts;
                            }
                        }
                        matrix.postScale(displayScale, displayScale);

                        Configuration configuration = PdfManipulationService.this.getResources()
                                .getConfiguration();
                        if (configuration.getLayoutDirection() == View.LAYOUT_DIRECTION_RTL) {
                            matrix.postTranslate(bitmapWidth - srcWidthPts * displayScale, 0);
                        }

                        Margins minMargins = attributes.getMinMargins();
                        final int paddingLeftPts = pointsFromMils(minMargins.getLeftMils());
                        final int paddingTopPts = pointsFromMils(minMargins.getTopMils());
                        final int paddingRightPts = pointsFromMils(minMargins.getRightMils());
                        final int paddingBottomPts = pointsFromMils(minMargins.getBottomMils());

                        Rect clip = new Rect();
                        clip.left = (int) (paddingLeftPts * displayScale);
                        clip.top = (int) (paddingTopPts * displayScale);
                        clip.right = (int) (bitmapWidth - paddingRightPts * displayScale);
                        clip.bottom = (int) (bitmapHeight - paddingBottomPts * displayScale);

                        if (DEBUG) {
                            Log.i(LOG_TAG, "Rendering page:" + pageIndex);
                        }

                        Bitmap bitmap = getBitmapForSize(bitmapWidth, bitmapHeight);
                        page.render(bitmap, clip, matrix, PdfRenderer.Page.RENDER_MODE_FOR_DISPLAY);

                        BitmapSerializeUtils.writeBitmapPixels(bitmap, destination);
                    }
                } catch (Throwable e) {
                    Log.e(LOG_TAG, "Cannot render page", e);

                    // The error is propagated to the caller when it tries to read the bitmap and
                    // the pipe is closed prematurely
                } finally {
                    IoUtils.closeQuietly(destination);
                }
            }
!!!71242423.java!!!	closeDocument() : void
            synchronized (mLock) {
                throwIfNotOpened();
                if (DEBUG) {
                    Log.i(LOG_TAG, "closeDocument()");
                }
                mRenderer.close();
                mRenderer = null;
            }
!!!71242551.java!!!	getBitmapForSize(in width : int, in height : int) : Bitmap
            if (mBitmap != null) {
                if (mBitmap.getWidth() == width && mBitmap.getHeight() == height) {
                    mBitmap.eraseColor(Color.WHITE);
                    return mBitmap;
                }
                mBitmap.recycle();
            }
            mBitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
            mBitmap.eraseColor(Color.WHITE);
            return mBitmap;
!!!71242679.java!!!	throwIfOpened() : void
            if (mRenderer != null) {
                throw new IllegalStateException("Already opened");
            }
!!!71242807.java!!!	throwIfNotOpened() : void
            if (mRenderer == null) {
                throw new IllegalStateException("Not opened");
            }
