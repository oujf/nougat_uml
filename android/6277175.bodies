class ReadTask
!!!71254967.java!!!	doInBackground(inout  : Void...args) : Pair
               return doReadPrinterHistory();
!!!71255095.java!!!	onPostExecute(inout printers : List<Pair<PrinterInfo, Location>>) : void
                if (DEBUG) {
                    Log.i(LOG_TAG, "read history completed "
                            + FusedPrintersProvider.this.hashCode());
                }

                // Ignore printer records whose target services are not enabled.
                Set<ComponentName> enabledComponents = new ArraySet<>();
                final int installedServiceCount = mEnabledServices.size();
                for (int i = 0; i < installedServiceCount; i++) {
                    ServiceInfo serviceInfo = mEnabledServices.get(i).getResolveInfo().serviceInfo;
                    ComponentName componentName = new ComponentName(
                            serviceInfo.packageName, serviceInfo.name);
                    enabledComponents.add(componentName);
                }
                mAreEnabledServicesUpdated = false;

                final int printerCount = printers.size();
                for (int i = printerCount - 1; i >= 0; i--) {
                    ComponentName printerServiceName = printers.get(i).first.getId()
                            .getServiceName();
                    if (!enabledComponents.contains(printerServiceName)) {
                        printers.remove(i);
                    }
                }

                // Store the filtered list.
                mHistoricalPrinters = printers;

                // Compute the favorite printers.
                mFavoritePrinters.clear();
                mFavoritePrinters.addAll(sortFavoritePrinters(mHistoricalPrinters));

                mReadHistoryCompleted = true;

                // Deliver the printers.
                updatePrinters(mDiscoverySession.getPrinters(), mFavoritePrinters,
                        getCurrentLocation());

                // We are done.
                mReadTask = null;

                // Loading the available printers if needed.
                loadInternal();
!!!71255223.java!!!	onCancelled(inout printerInfos : List<Pair<PrinterInfo, Location>>) : void
                // We are done.
                mReadTask = null;
!!!71255351.java!!!	doReadPrinterHistory() : Pair
                final FileInputStream in;
                try {
                    in = mStatePersistFile.openRead();
                } catch (FileNotFoundException fnfe) {
                    if (DEBUG) {
                        Log.i(LOG_TAG, "No existing printer history "
                                + FusedPrintersProvider.this.hashCode());
                    }
                    return new ArrayList<>();
                }
                try {
                    List<Pair<PrinterInfo, Location>> printers = new ArrayList<>();
                    XmlPullParser parser = Xml.newPullParser();
                    parser.setInput(in, StandardCharsets.UTF_8.name());
                    parseState(parser, printers);
                    // Take a note which version of the history was read.
                    mLastReadHistoryTimestamp = mStatePersistFile.getBaseFile().lastModified();
                    return printers;
                } catch (IllegalStateException
                        | NullPointerException
                        | NumberFormatException
                        | XmlPullParserException
                        | IOException
                        | IndexOutOfBoundsException e) {
                    Slog.w(LOG_TAG, "Failed parsing ", e);
                } finally {
                    IoUtils.closeQuietly(in);
                }

                return Collections.emptyList();
!!!71255479.java!!!	parseState(inout parser : XmlPullParser, inout outPrinters : List<Pair<PrinterInfo, Location>>) : void
                parser.next();
                skipEmptyTextTags(parser);
                expect(parser, XmlPullParser.START_TAG, TAG_PRINTERS);
                parser.next();

                while (parsePrinter(parser, outPrinters)) {
                    // Be nice and respond to cancellation
                    if (isCancelled()) {
                        return;
                    }
                    parser.next();
                }

                skipEmptyTextTags(parser);
                expect(parser, XmlPullParser.END_TAG, TAG_PRINTERS);
!!!71255607.java!!!	parsePrinter(inout parser : XmlPullParser, inout outPrinters : List<Pair<PrinterInfo, Location>>) : boolean
                skipEmptyTextTags(parser);
                if (!accept(parser, XmlPullParser.START_TAG, TAG_PRINTER)) {
                    return false;
                }

                String name = parser.getAttributeValue(null, ATTR_NAME);
                String description = parser.getAttributeValue(null, ATTR_DESCRIPTION);

                parser.next();

                skipEmptyTextTags(parser);
                expect(parser, XmlPullParser.START_TAG, TAG_PRINTER_ID);
                String localId = parser.getAttributeValue(null, ATTR_LOCAL_ID);
                ComponentName service = ComponentName.unflattenFromString(parser.getAttributeValue(
                        null, ATTR_SERVICE_NAME));
                PrinterId printerId =  new PrinterId(service, localId);
                parser.next();
                skipEmptyTextTags(parser);
                expect(parser, XmlPullParser.END_TAG, TAG_PRINTER_ID);
                parser.next();

                skipEmptyTextTags(parser);
                Location location;
                if (accept(parser, XmlPullParser.START_TAG, TAG_LOCATION)) {
                    location = new Location("");
                    location.setLongitude(
                            Double.parseDouble(parser.getAttributeValue(null, ATTR_LONGITUDE)));
                    location.setLatitude(
                            Double.parseDouble(parser.getAttributeValue(null, ATTR_LATITUDE)));
                    location.setAccuracy(
                            Float.parseFloat(parser.getAttributeValue(null, ATTR_ACCURACY)));
                    parser.next();

                    skipEmptyTextTags(parser);
                    expect(parser, XmlPullParser.END_TAG, TAG_LOCATION);
                    parser.next();
                } else {
                    location = null;
                }

                // If the printer is available the printer will be replaced by the one read from the
                // discovery session, hence the only time when this object is used is when the
                // printer is unavailable.
                PrinterInfo.Builder builder = new PrinterInfo.Builder(printerId, name,
                        PrinterInfo.STATUS_UNAVAILABLE);
                builder.setDescription(description);
                PrinterInfo printer = builder.build();

                outPrinters.add(new Pair<PrinterInfo, Location>(printer, location));

                if (DEBUG) {
                    Log.i(LOG_TAG, "[RESTORED] " + printer);
                }

                skipEmptyTextTags(parser);
                expect(parser, XmlPullParser.END_TAG, TAG_PRINTER);

                return true;
!!!71255735.java!!!	expect(inout parser : XmlPullParser, in type : int, inout tag : String) : void
                if (!accept(parser, type, tag)) {
                    throw new XmlPullParserException("Exepected event: " + type
                            + " and tag: " + tag + " but got event: " + parser.getEventType()
                            + " and tag:" + parser.getName());
                }
!!!71255863.java!!!	skipEmptyTextTags(inout parser : XmlPullParser) : void
                while (accept(parser, XmlPullParser.TEXT, null)
                        && "\n".equals(parser.getText())) {
                    parser.next();
                }
!!!71255991.java!!!	accept(inout parser : XmlPullParser, in type : int, inout tag : String) : boolean
                if (parser.getEventType() != type) {
                    return false;
                }
                if (tag != null) {
                    if (!tag.equals(parser.getName())) {
                        return false;
                    }
                } else if (parser.getName() != null) {
                    return false;
                }
                return true;
