class UserIconDrawable
!!!71395127.java!!!	getManagedUserBadgeDrawable(inout context : Context) : Drawable
        int displayDensity = context.getResources().getDisplayMetrics().densityDpi;
        return context.getResources().getDrawableForDensity(
                com.android.internal.R.drawable.ic_corp_user_badge,
                displayDensity, context.getTheme());
!!!71395255.java!!!	getSizeForList(inout context : Context) : int
        return (int) context.getResources().getDimension(R.dimen.circle_avatar_size);
!!!71395383.java!!!	UserIconDrawable()
        this(0);
!!!71395511.java!!!	UserIconDrawable(in intrinsicSize : int)
        super();
        mIconPaint.setAntiAlias(true);
        mIconPaint.setFilterBitmap(true);
        mPaint.setFilterBitmap(true);
        mPaint.setAntiAlias(true);
        if (intrinsicSize > 0) {
            setBounds(0, 0, intrinsicSize, intrinsicSize);
            setIntrinsicSize(intrinsicSize);
        }
        setIcon(null);
!!!71395639.java!!!	setIcon(inout icon : Bitmap) : UserIconDrawable
        if (mUserDrawable != null) {
            mUserDrawable.setCallback(null);
            mUserDrawable = null;
        }
        mUserIcon = icon;
        if (mUserIcon == null) {
            mIconPaint.setShader(null);
            mBitmap = null;
        } else {
            mIconPaint.setShader(new BitmapShader(icon, Shader.TileMode.CLAMP,
                    Shader.TileMode.CLAMP));
        }
        onBoundsChange(getBounds());
        return this;
!!!71395767.java!!!	setIconDrawable(inout icon : Drawable) : UserIconDrawable
        if (mUserDrawable != null) {
            mUserDrawable.setCallback(null);
        }
        mUserIcon = null;
        mUserDrawable = icon;
        if (mUserDrawable == null) {
            mBitmap = null;
        } else {
            mUserDrawable.setCallback(this);
        }
        onBoundsChange(getBounds());
        return this;
!!!71395895.java!!!	setBadge(inout badge : Drawable) : UserIconDrawable
        mBadge = badge;
        if (mBadge != null) {
            if (mClearPaint == null) {
                mClearPaint = new Paint();
                mClearPaint.setAntiAlias(true);
                mClearPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
                mClearPaint.setStyle(Paint.Style.FILL);
            }
            // update metrics
            onBoundsChange(getBounds());
        } else {
            invalidateSelf();
        }
        return this;
!!!71396023.java!!!	setBadgeIfManagedUser(inout context : Context, in userId : int) : UserIconDrawable
        Drawable badge = null;
        boolean isManaged = context.getSystemService(DevicePolicyManager.class)
                .getProfileOwnerAsUser(userId) != null;
        if (isManaged) {
            badge = getManagedUserBadgeDrawable(context);
        }
        return setBadge(badge);
!!!71396151.java!!!	setBadgeRadius(in radius : float) : void
        mBadgeRadius = radius;
        onBoundsChange(getBounds());
!!!71396279.java!!!	setBadgeMargin(in margin : float) : void
        mBadgeMargin = margin;
        onBoundsChange(getBounds());
!!!71396407.java!!!	setPadding(in padding : float) : void
        mPadding = padding;
        onBoundsChange(getBounds());
!!!71396535.java!!!	initFramePaint() : void
        if (mFramePaint == null) {
            mFramePaint = new Paint();
            mFramePaint.setStyle(Paint.Style.STROKE);
            mFramePaint.setAntiAlias(true);
        }
!!!71396663.java!!!	setFrameWidth(in width : float) : void
        initFramePaint();
        mFrameWidth = width;
        mFramePaint.setStrokeWidth(width);
        onBoundsChange(getBounds());
!!!71396791.java!!!	setFramePadding(in padding : float) : void
        initFramePaint();
        mFramePadding = padding;
        onBoundsChange(getBounds());
!!!71396919.java!!!	setFrameColor(in color : int) : void
        initFramePaint();
        mFramePaint.setColor(color);
        invalidateSelf();
!!!71397047.java!!!	setFrameColor(inout colorList : ColorStateList) : void
        initFramePaint();
        mFrameColor = colorList;
        invalidateSelf();
!!!71397175.java!!!	setIntrinsicSize(in size : int) : void
        mSize = size;
!!!71397303.java!!!	draw(inout canvas : Canvas) : void
        if (mInvalidated) {
            rebake();
        }
        if (mBitmap != null) {
            if (mTintColor == null) {
                mPaint.setColorFilter(null);
            } else {
                int color = mTintColor.getColorForState(getState(), mTintColor.getDefaultColor());
                if (mPaint.getColorFilter() == null) {
                    mPaint.setColorFilter(new PorterDuffColorFilter(color, mTintMode));
                } else {
                    ((PorterDuffColorFilter) mPaint.getColorFilter()).setMode(mTintMode);
                    ((PorterDuffColorFilter) mPaint.getColorFilter()).setColor(color);
                }
            }

            canvas.drawBitmap(mBitmap, 0, 0, mPaint);
        }
!!!71397431.java!!!	setAlpha(in alpha : int) : void
        mPaint.setAlpha(alpha);
        super.invalidateSelf();
!!!71397687.java!!!	setTintList(inout tintList : ColorStateList) : void
        mTintColor = tintList;
        super.invalidateSelf();
!!!71397815.java!!!	setTintMode(inout mode : PorterDuff::Mode) : void
        mTintMode = mode;
        super.invalidateSelf();
!!!71397943.java!!!	bake() : UserIconDrawable
        if (mSize <= 0) {
            throw new IllegalStateException("Baking requires an explicit intrinsic size");
        }
        onBoundsChange(new Rect(0, 0, mSize, mSize));
        rebake();
        mFrameColor = null;
        mFramePaint = null;
        mClearPaint = null;
        if (mUserDrawable != null) {
            mUserDrawable.setCallback(null);
            mUserDrawable = null;
        } else if (mUserIcon != null) {
            mUserIcon.recycle();
            mUserIcon = null;
        }
        return this;
!!!71398071.java!!!	rebake() : void
        mInvalidated = false;

        if (mBitmap == null || (mUserDrawable == null && mUserIcon == null)) {
            return;
        }

        final Canvas canvas = new Canvas(mBitmap);
        canvas.drawColor(0, PorterDuff.Mode.CLEAR);

        if(mUserDrawable != null) {
            mUserDrawable.draw(canvas);
        } else if (mUserIcon != null) {
            int saveId = canvas.save();
            canvas.concat(mIconMatrix);
            canvas.drawCircle(mUserIcon.getWidth() * 0.5f, mUserIcon.getHeight() * 0.5f,
                    mIntrinsicRadius, mIconPaint);
            canvas.restoreToCount(saveId);
        }

        if (mFrameColor != null) {
            mFramePaint.setColor(mFrameColor.getColorForState(getState(), Color.TRANSPARENT));
        }
        if ((mFrameWidth + mFramePadding) > 0.001f) {
            float radius = mDisplayRadius - mPadding - mFrameWidth * 0.5f;
            canvas.drawCircle(getBounds().exactCenterX(), getBounds().exactCenterY(),
                    radius, mFramePaint);
        }

        if ((mBadge != null) && (mBadgeRadius > 0.001f)) {
            final float badgeDiameter = mBadgeRadius * 2f;
            final float badgeTop = mBitmap.getHeight() - badgeDiameter;
            float badgeLeft = mBitmap.getWidth() - badgeDiameter;

            mBadge.setBounds((int) badgeLeft, (int) badgeTop,
                    (int) (badgeLeft + badgeDiameter), (int) (badgeTop + badgeDiameter));

            final float borderRadius = mBadge.getBounds().width() * 0.5f + mBadgeMargin;
            canvas.drawCircle(badgeLeft + mBadgeRadius, badgeTop + mBadgeRadius,
                    borderRadius, mClearPaint);

            mBadge.draw(canvas);
        }
!!!71398199.java!!!	onBoundsChange(inout bounds : Rect) : void
        if (bounds.isEmpty() || (mUserIcon == null && mUserDrawable == null)) {
            return;
        }

        // re-create bitmap if applicable
        float newDisplayRadius = Math.min(bounds.width(), bounds.height()) * 0.5f;
        int size = (int) (newDisplayRadius * 2);
        if (mBitmap == null || size != ((int) (mDisplayRadius * 2))) {
            mDisplayRadius = newDisplayRadius;
            if (mBitmap != null) {
                mBitmap.recycle();
            }
            mBitmap = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);
        }

        // update metrics
        mDisplayRadius = Math.min(bounds.width(), bounds.height()) * 0.5f;
        final float iconRadius = mDisplayRadius - mFrameWidth - mFramePadding - mPadding;
        RectF dstRect = new RectF(bounds.exactCenterX() - iconRadius,
                                  bounds.exactCenterY() - iconRadius,
                                  bounds.exactCenterX() + iconRadius,
                                  bounds.exactCenterY() + iconRadius);
        if (mUserDrawable != null) {
            Rect rounded = new Rect();
            dstRect.round(rounded);
            mIntrinsicRadius = Math.min(mUserDrawable.getIntrinsicWidth(),
                                        mUserDrawable.getIntrinsicHeight()) * 0.5f;
            mUserDrawable.setBounds(rounded);
        } else if (mUserIcon != null) {
            // Build square-to-square transformation matrix
            final float iconCX = mUserIcon.getWidth() * 0.5f;
            final float iconCY = mUserIcon.getHeight() * 0.5f;
            mIntrinsicRadius = Math.min(iconCX, iconCY);
            RectF srcRect = new RectF(iconCX - mIntrinsicRadius, iconCY - mIntrinsicRadius,
                                      iconCX + mIntrinsicRadius, iconCY + mIntrinsicRadius);
            mIconMatrix.setRectToRect(srcRect, dstRect, Matrix.ScaleToFit.FILL);
        }

        invalidateSelf();
!!!71398327.java!!!	invalidateSelf() : void
        super.invalidateSelf();
        mInvalidated = true;
!!!71398455.java!!!	isStateful() : boolean
        return mFrameColor != null && mFrameColor.isStateful();
!!!71398583.java!!!	getOpacity() : int
        return PixelFormat.TRANSLUCENT;
!!!71398711.java!!!	getIntrinsicWidth() : int
        return (mSize <= 0 ? (int) mIntrinsicRadius * 2 : mSize);
!!!71398839.java!!!	getIntrinsicHeight() : int
        return getIntrinsicWidth();
!!!71398967.java!!!	invalidateDrawable(inout who : Drawable) : void
        invalidateSelf();
!!!71399095.java!!!	scheduleDrawable(inout who : Drawable, inout what : Runnable, in when : long) : void
        scheduleSelf(what, when);
!!!71399223.java!!!	unscheduleDrawable(inout who : Drawable, inout what : Runnable) : void
        unscheduleSelf(what);
