class HidProfile
!!!71364663.java!!!	isProfileReady() : boolean
        return mIsProfileReady;
!!!71364791.java!!!	HidProfile(inout context : Context, inout adapter : LocalBluetoothAdapter, inout deviceManager : CachedBluetoothDeviceManager, inout profileManager : LocalBluetoothProfileManager)
        mLocalAdapter = adapter;
        mDeviceManager = deviceManager;
        mProfileManager = profileManager;
        adapter.getProfileProxy(context, new InputDeviceServiceListener(),
                BluetoothProfile.INPUT_DEVICE);
!!!71364919.java!!!	isConnectable() : boolean
        return true;
!!!71365047.java!!!	isAutoConnectable() : boolean
        return true;
!!!71365175.java!!!	connect(inout device : BluetoothDevice) : boolean
        if (mService == null) return false;
        return mService.connect(device);
!!!71365303.java!!!	disconnect(inout device : BluetoothDevice) : boolean
        if (mService == null) return false;
        return mService.disconnect(device);
!!!71365431.java!!!	getConnectionStatus(inout device : BluetoothDevice) : int
        if (mService == null) {
            return BluetoothProfile.STATE_DISCONNECTED;
        }
        List<BluetoothDevice> deviceList = mService.getConnectedDevices();

        return !deviceList.isEmpty() && deviceList.get(0).equals(device)
                ? mService.getConnectionState(device)
                : BluetoothProfile.STATE_DISCONNECTED;
!!!71365559.java!!!	isPreferred(inout device : BluetoothDevice) : boolean
        if (mService == null) return false;
        return mService.getPriority(device) > BluetoothProfile.PRIORITY_OFF;
!!!71365687.java!!!	getPreferred(inout device : BluetoothDevice) : int
        if (mService == null) return BluetoothProfile.PRIORITY_OFF;
        return mService.getPriority(device);
!!!71365815.java!!!	setPreferred(inout device : BluetoothDevice, inout preferred : boolean) : void
        if (mService == null) return;
        if (preferred) {
            if (mService.getPriority(device) < BluetoothProfile.PRIORITY_ON) {
                mService.setPriority(device, BluetoothProfile.PRIORITY_ON);
            }
        } else {
            mService.setPriority(device, BluetoothProfile.PRIORITY_OFF);
        }
!!!71365943.java!!!	toString() : String
        return NAME;
!!!71366071.java!!!	getOrdinal() : int
        return ORDINAL;
!!!71366199.java!!!	getNameResource(inout device : BluetoothDevice) : int
        // TODO: distinguish between keyboard and mouse?
        return R.string.bluetooth_profile_hid;
!!!71366327.java!!!	getSummaryResourceForDevice(inout device : BluetoothDevice) : int
        int state = getConnectionStatus(device);
        switch (state) {
            case BluetoothProfile.STATE_DISCONNECTED:
                return R.string.bluetooth_hid_profile_summary_use_for;

            case BluetoothProfile.STATE_CONNECTED:
                return R.string.bluetooth_hid_profile_summary_connected;

            default:
                return Utils.getConnectionStateSummary(state);
        }
!!!71366455.java!!!	getDrawableResource(inout btClass : BluetoothClass) : int
        if (btClass == null) {
            return R.drawable.ic_lockscreen_ime;
        }
        return getHidClassDrawable(btClass);
!!!71366583.java!!!	getHidClassDrawable(inout btClass : BluetoothClass) : int
        switch (btClass.getDeviceClass()) {
            case BluetoothClass.Device.PERIPHERAL_KEYBOARD:
            case BluetoothClass.Device.PERIPHERAL_KEYBOARD_POINTING:
                return R.drawable.ic_lockscreen_ime;
            case BluetoothClass.Device.PERIPHERAL_POINTING:
                return R.drawable.ic_bt_pointing_hid;
            default:
                return R.drawable.ic_bt_misc_hid;
        }
!!!71366711.java!!!	finalize() : void
        if (V) Log.d(TAG, "finalize()");
        if (mService != null) {
            try {
                BluetoothAdapter.getDefaultAdapter().closeProfileProxy(BluetoothProfile.INPUT_DEVICE,
                                                                       mService);
                mService = null;
            }catch (Throwable t) {
                Log.w(TAG, "Error cleaning up HID proxy", t);
            }
        }
