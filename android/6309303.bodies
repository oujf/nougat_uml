class IsAssociatedCallable
!!!71503927.java!!!	IsAssociatedCallable(inout sources : List<String>, inout target : String, inout relation : String, inout resultReceiver : ResultReceiver)
            mSources = sources;
            mTarget = target;
            mRelation = relation;
            mResultReceiver = resultReceiver;
!!!71504055.java!!!	verifyOneSource(inout source : AbstractAsset, inout target : AbstractAssetMatcher, inout relation : Relation) : boolean
            Result statements = mStatementRetriever.retrieveStatements(source);
            for (Statement statement : statements.getStatements()) {
                if (relation.matches(statement.getRelation())
                        && target.matches(statement.getTarget())) {
                    return true;
                }
            }
            return false;
!!!71504183.java!!!	call() : Void
            Bundle result = new Bundle();
            ArrayList<String> failedSources = new ArrayList<String>();
            AbstractAssetMatcher target;
            Relation relation;
            try {
                target = AbstractAssetMatcher.createMatcher(mTarget);
                relation = Relation.create(mRelation);
            } catch (AssociationServiceException | JSONException e) {
                Log.e(TAG, "isAssociatedCallable failed with exception", e);
                mResultReceiver.send(RESULT_FAIL, Bundle.EMPTY);
                return null;
            }

            boolean allSourcesVerified = true;
            for (String sourceString : mSources) {
                AbstractAsset source;
                try {
                    source = AbstractAsset.create(sourceString);
                } catch (AssociationServiceException e) {
                    mResultReceiver.send(RESULT_FAIL, Bundle.EMPTY);
                    return null;
                }

                try {
                    if (!verifyOneSource(source, target, relation)) {
                        failedSources.add(source.toJson());
                        allSourcesVerified = false;
                    }
                } catch (AssociationServiceException e) {
                    failedSources.add(source.toJson());
                    allSourcesVerified = false;
                }
            }

            result.putBoolean(IS_ASSOCIATED, allSourcesVerified);
            result.putStringArrayList(FAILED_SOURCES, failedSources);
            mResultReceiver.send(RESULT_SUCCESS, result);
            return null;
