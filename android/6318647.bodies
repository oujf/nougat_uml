class StatusBarKeyguardViewManager
!!!72267831.java!!!	StatusBarKeyguardViewManager(inout context : Context, inout callback : ViewMediatorCallback, inout lockPatternUtils : LockPatternUtils)
        mContext = context;
        mViewMediatorCallback = callback;
        mLockPatternUtils = lockPatternUtils;
!!!72267959.java!!!	registerStatusBar(inout phoneStatusBar : PhoneStatusBar, inout container : ViewGroup, inout statusBarWindowManager : StatusBarWindowManager, inout scrimController : ScrimController, inout fingerprintUnlockController : FingerprintUnlockController) : void
        mPhoneStatusBar = phoneStatusBar;
        mContainer = container;
        mStatusBarWindowManager = statusBarWindowManager;
        mScrimController = scrimController;
        mFingerprintUnlockController = fingerprintUnlockController;
        mBouncer = SystemUIFactory.getInstance().createKeyguardBouncer(mContext,
                mViewMediatorCallback, mLockPatternUtils, mStatusBarWindowManager, container);
!!!72268087.java!!!	show(inout options : Bundle) : void
        mShowing = true;
        mStatusBarWindowManager.setKeyguardShowing(true);
        mScrimController.abortKeyguardFadingOut();
        reset();
!!!72268215.java!!!	showBouncerOrKeyguard() : void
        if (mBouncer.needsFullscreenBouncer()) {

            // The keyguard might be showing (already). So we need to hide it.
            mPhoneStatusBar.hideKeyguard();
            mBouncer.show(true /* resetSecuritySelection */);
        } else {
            mPhoneStatusBar.showKeyguard();
            mBouncer.hide(false /* destroyView */);
            mBouncer.prepare();
        }
!!!72268343.java!!!	showBouncer() : void
        if (mShowing) {
            mBouncer.show(false /* resetSecuritySelection */);
        }
        updateStates();
!!!72268471.java!!!	dismissWithAction(inout r : OnDismissAction, inout cancelAction : Runnable, inout afterKeyguardGone : boolean) : void
        if (mShowing) {
            if (!afterKeyguardGone) {
                mBouncer.showWithDismissAction(r, cancelAction);
            } else {
                mBouncer.show(false /* resetSecuritySelection */);
                mAfterKeyguardGoneAction = r;
            }
        }
        updateStates();
!!!72268599.java!!!	reset() : void
        if (mShowing) {
            if (mOccluded) {
                mPhoneStatusBar.hideKeyguard();
                mPhoneStatusBar.stopWaitingForKeyguardExit();
                mBouncer.hide(false /* destroyView */);
            } else {
                showBouncerOrKeyguard();
            }
            KeyguardUpdateMonitor.getInstance(mContext).sendKeyguardReset();
            updateStates();
        }
!!!72268727.java!!!	onStartedGoingToSleep() : void
        mPhoneStatusBar.onStartedGoingToSleep();
!!!72268855.java!!!	onFinishedGoingToSleep() : void
        mDeviceInteractive = false;
        mPhoneStatusBar.onFinishedGoingToSleep();
        mBouncer.onScreenTurnedOff();
!!!72268983.java!!!	onStartedWakingUp() : void
        mDeviceInteractive = true;
        mDeviceWillWakeUp = false;
        mPhoneStatusBar.onStartedWakingUp();
!!!72269111.java!!!	onScreenTurningOn() : void
        mPhoneStatusBar.onScreenTurningOn();
!!!72269239.java!!!	isScreenTurnedOn() : boolean
        return mScreenTurnedOn;
!!!72269367.java!!!	onScreenTurnedOn() : void
        mScreenTurnedOn = true;
        if (mDeferScrimFadeOut) {
            mDeferScrimFadeOut = false;
            animateScrimControllerKeyguardFadingOut(0, WAKE_AND_UNLOCK_SCRIM_FADEOUT_DURATION_MS,
                    true /* skipFirstFrame */);
            updateStates();
        }
        mPhoneStatusBar.onScreenTurnedOn();
!!!72269495.java!!!	onRemoteInputActive(inout active : boolean) : void
        mRemoteInputActive = active;
        updateStates();
!!!72269623.java!!!	onScreenTurnedOff() : void
        mScreenTurnedOn = false;
        mPhoneStatusBar.onScreenTurnedOff();
!!!72269751.java!!!	notifyDeviceWakeUpRequested() : void
        mDeviceWillWakeUp = !mDeviceInteractive;
!!!72269879.java!!!	verifyUnlock() : void
        dismiss();
!!!72270007.java!!!	setNeedsInput(inout needsInput : boolean) : void
        mStatusBarWindowManager.setKeyguardNeedsInput(needsInput);
!!!72270135.java!!!	isUnlockWithWallpaper() : boolean
        return mStatusBarWindowManager.isShowingWallpaper();
!!!72270263.java!!!	setOccluded(inout occluded : boolean) : void
        if (occluded && !mOccluded && mShowing) {
            if (mPhoneStatusBar.isInLaunchTransition()) {
                mOccluded = true;
                mPhoneStatusBar.fadeKeyguardAfterLaunchTransition(null /* beforeFading */,
                        new Runnable() {
                            @Override
                            public void run() {
                                mStatusBarWindowManager.setKeyguardOccluded(mOccluded);
                                reset();
                            }
                        });
                return;
            }
        }
        mOccluded = occluded;
        mPhoneStatusBar.updateMediaMetaData(false, false);
        mStatusBarWindowManager.setKeyguardOccluded(occluded);
        reset();
!!!72270391.java!!!	isOccluded() : boolean
        return mOccluded;
!!!72270519.java!!!	startPreHideAnimation(inout finishRunnable : Runnable) : void
        if (mBouncer.isShowing()) {
            mBouncer.startPreHideAnimation(finishRunnable);
        } else if (finishRunnable != null) {
            finishRunnable.run();
        }
!!!72270647.java!!!	hide(in startTime : long, in fadeoutDuration : long) : void
        mShowing = false;

        long uptimeMillis = SystemClock.uptimeMillis();
        long delay = Math.max(0, startTime + HIDE_TIMING_CORRECTION_MS - uptimeMillis);

        if (mPhoneStatusBar.isInLaunchTransition() ) {
            mPhoneStatusBar.fadeKeyguardAfterLaunchTransition(new Runnable() {
                @Override
                public void run() {
                    mStatusBarWindowManager.setKeyguardShowing(false);
                    mStatusBarWindowManager.setKeyguardFadingAway(true);
                    mBouncer.hide(true /* destroyView */);
                    updateStates();
                    mScrimController.animateKeyguardFadingOut(
                            PhoneStatusBar.FADE_KEYGUARD_START_DELAY,
                            PhoneStatusBar.FADE_KEYGUARD_DURATION, null,
                            false /* skipFirstFrame */);
                }
            }, new Runnable() {
                @Override
                public void run() {
                    mPhoneStatusBar.hideKeyguard();
                    mStatusBarWindowManager.setKeyguardFadingAway(false);
                    mViewMediatorCallback.keyguardGone();
                    executeAfterKeyguardGoneAction();
                }
            });
        } else {
            if (mFingerprintUnlockController.getMode()
                    == FingerprintUnlockController.MODE_WAKE_AND_UNLOCK_PULSING) {
                mFingerprintUnlockController.startKeyguardFadingAway();
                mPhoneStatusBar.setKeyguardFadingAway(startTime, 0, 240);
                mStatusBarWindowManager.setKeyguardFadingAway(true);
                mPhoneStatusBar.fadeKeyguardWhilePulsing();
                animateScrimControllerKeyguardFadingOut(0, 240, new Runnable() {
                    @Override
                    public void run() {
                        mPhoneStatusBar.hideKeyguard();
                    }
                }, false /* skipFirstFrame */);
            } else {
                mFingerprintUnlockController.startKeyguardFadingAway();
                mPhoneStatusBar.setKeyguardFadingAway(startTime, delay, fadeoutDuration);
                boolean staying = mPhoneStatusBar.hideKeyguard();
                if (!staying) {
                    mStatusBarWindowManager.setKeyguardFadingAway(true);
                    if (mFingerprintUnlockController.getMode()
                            == FingerprintUnlockController.MODE_WAKE_AND_UNLOCK) {
                        if (!mScreenTurnedOn) {
                            mDeferScrimFadeOut = true;
                        } else {

                            // Screen is already on, don't defer with fading out.
                            animateScrimControllerKeyguardFadingOut(0,
                                    WAKE_AND_UNLOCK_SCRIM_FADEOUT_DURATION_MS,
                                    true /* skipFirstFrame */);
                        }
                    } else {
                        animateScrimControllerKeyguardFadingOut(delay, fadeoutDuration,
                                false /* skipFirstFrame */);
                    }
                } else {
                    mScrimController.animateGoingToFullShade(delay, fadeoutDuration);
                    mPhoneStatusBar.finishKeyguardFadingAway();
                }
            }
            mStatusBarWindowManager.setKeyguardShowing(false);
            mBouncer.hide(true /* destroyView */);
            mViewMediatorCallback.keyguardGone();
            executeAfterKeyguardGoneAction();
            updateStates();
        }
!!!72270775.java!!!	onDensityOrFontScaleChanged() : void
        mBouncer.hide(true /* destroyView */);
!!!72270903.java!!!	animateScrimControllerKeyguardFadingOut(in delay : long, in duration : long, inout skipFirstFrame : boolean) : void
        animateScrimControllerKeyguardFadingOut(delay, duration, null /* endRunnable */,
                skipFirstFrame);
!!!72271031.java!!!	animateScrimControllerKeyguardFadingOut(in delay : long, in duration : long, in endRunnable : Runnable, inout skipFirstFrame : boolean) : void
        Trace.asyncTraceBegin(Trace.TRACE_TAG_VIEW, "Fading out", 0);
        mScrimController.animateKeyguardFadingOut(delay, duration, new Runnable() {
            @Override
            public void run() {
                if (endRunnable != null) {
                    endRunnable.run();
                }
                mStatusBarWindowManager.setKeyguardFadingAway(false);
                mPhoneStatusBar.finishKeyguardFadingAway();
                mFingerprintUnlockController.finishKeyguardFadingAway();
                WindowManagerGlobal.getInstance().trimMemory(
                        ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
                Trace.asyncTraceEnd(Trace.TRACE_TAG_VIEW, "Fading out", 0);
            }
        }, skipFirstFrame);
!!!72271159.java!!!	executeAfterKeyguardGoneAction() : void
        if (mAfterKeyguardGoneAction != null) {
            mAfterKeyguardGoneAction.onDismiss();
            mAfterKeyguardGoneAction = null;
        }
!!!72271287.java!!!	dismiss() : void
        if (mDeviceInteractive || mDeviceWillWakeUp) {
            showBouncer();
        }
!!!72271415.java!!!	isSecure() : boolean
        return mBouncer.isSecure();
!!!72271543.java!!!	isShowing() : boolean
        return mShowing;
!!!72271671.java!!!	onBackPressed() : boolean
        if (mBouncer.isShowing()) {
            mPhoneStatusBar.endAffordanceLaunch();
            reset();
            return true;
        }
        return false;
!!!72271799.java!!!	isBouncerShowing() : boolean
        return mBouncer.isShowing();
!!!72271927.java!!!	getNavBarShowDelay() : long
        if (mPhoneStatusBar.isKeyguardFadingAway()) {
            return mPhoneStatusBar.getKeyguardFadingAwayDelay();
        } else {

            // Keyguard is not going away, thus we are showing the navigation bar because the
            // bouncer is appearing.
            return NAV_BAR_SHOW_DELAY_BOUNCER;
        }
!!!72272055.java!!!	updateStates() : void
        int vis = mContainer.getSystemUiVisibility();
        boolean showing = mShowing;
        boolean occluded = mOccluded;
        boolean bouncerShowing = mBouncer.isShowing();
        boolean bouncerDismissible = !mBouncer.isFullscreenBouncer();
        boolean remoteInputActive = mRemoteInputActive;

        if ((bouncerDismissible || !showing || remoteInputActive) !=
                (mLastBouncerDismissible || !mLastShowing || mLastRemoteInputActive)
                || mFirstUpdate) {
            if (bouncerDismissible || !showing || remoteInputActive) {
                mContainer.setSystemUiVisibility(vis & ~View.STATUS_BAR_DISABLE_BACK);
            } else {
                mContainer.setSystemUiVisibility(vis | View.STATUS_BAR_DISABLE_BACK);
            }
        }

        boolean navBarVisible = isNavBarVisible();
        boolean lastNavBarVisible = getLastNavBarVisible();
        if (navBarVisible != lastNavBarVisible || mFirstUpdate) {
            if (mPhoneStatusBar.getNavigationBarView() != null) {
                if (navBarVisible) {
                    long delay = getNavBarShowDelay();
                    if (delay == 0) {
                        mMakeNavigationBarVisibleRunnable.run();
                    } else {
                        mContainer.postOnAnimationDelayed(mMakeNavigationBarVisibleRunnable,
                                delay);
                    }
                } else {
                    mContainer.removeCallbacks(mMakeNavigationBarVisibleRunnable);
                    mPhoneStatusBar.getNavigationBarView().setVisibility(View.GONE);
                }
            }
        }

        if (bouncerShowing != mLastBouncerShowing || mFirstUpdate) {
            mStatusBarWindowManager.setBouncerShowing(bouncerShowing);
            mPhoneStatusBar.setBouncerShowing(bouncerShowing);
            mScrimController.setBouncerShowing(bouncerShowing);
        }

        KeyguardUpdateMonitor updateMonitor = KeyguardUpdateMonitor.getInstance(mContext);
        if ((showing && !occluded) != (mLastShowing && !mLastOccluded) || mFirstUpdate) {
            updateMonitor.onKeyguardVisibilityChanged(showing && !occluded);
        }
        if (bouncerShowing != mLastBouncerShowing || mFirstUpdate) {
            updateMonitor.sendKeyguardBouncerChanged(bouncerShowing);
        }

        mFirstUpdate = false;
        mLastShowing = showing;
        mLastOccluded = occluded;
        mLastBouncerShowing = bouncerShowing;
        mLastBouncerDismissible = bouncerDismissible;
        mLastRemoteInputActive = remoteInputActive;

        mPhoneStatusBar.onKeyguardViewManagerStatesUpdated();
!!!72272183.java!!!	isNavBarVisible() : boolean
        return !(mShowing && !mOccluded) || mBouncer.isShowing() || mRemoteInputActive;
!!!72272311.java!!!	getLastNavBarVisible() : boolean
        return !(mLastShowing && !mLastOccluded) || mLastBouncerShowing || mLastRemoteInputActive;
!!!72272439.java!!!	shouldDismissOnMenuPressed() : boolean
        return mBouncer.shouldDismissOnMenuPressed();
!!!72272567.java!!!	interceptMediaKey(inout event : KeyEvent) : boolean
        return mBouncer.interceptMediaKey(event);
!!!72272695.java!!!	onActivityDrawn() : void
        if (mPhoneStatusBar.isCollapsing()) {
            mPhoneStatusBar.addPostCollapseAction(new Runnable() {
                @Override
                public void run() {
                    mViewMediatorCallback.readyForKeyguardDone();
                }
            });
        } else {
            mViewMediatorCallback.readyForKeyguardDone();
        }
!!!72272823.java!!!	shouldDisableWindowAnimationsForUnlock() : boolean
        return mPhoneStatusBar.isInLaunchTransition();
!!!72272951.java!!!	isGoingToNotificationShade() : boolean
        return mPhoneStatusBar.isGoingToNotificationShade();
!!!72273079.java!!!	isSecure(in userId : int) : boolean
        return mBouncer.isSecure() || mLockPatternUtils.isSecure(userId);
!!!72273207.java!!!	isInputRestricted() : boolean
        return mViewMediatorCallback.isInputRestricted();
!!!72273335.java!!!	keyguardGoingAway() : void
        mPhoneStatusBar.keyguardGoingAway();
!!!72273463.java!!!	animateCollapsePanels(in speedUpFactor : float) : void
        mPhoneStatusBar.animateCollapsePanels(CommandQueue.FLAG_EXCLUDE_NONE, true /* force */,
                false /* delayed */, speedUpFactor);
!!!72273591.java!!!	notifyKeyguardAuthenticated(inout strongAuth : boolean) : void
        mBouncer.notifyKeyguardAuthenticated(strongAuth);
!!!72273719.java!!!	showBouncerMessage(inout message : String, in color : int) : void
        mBouncer.showMessage(message, color);
!!!72273847.java!!!	getViewRootImpl() : ViewRootImpl
        return mPhoneStatusBar.getStatusBarView().getViewRootImpl();
