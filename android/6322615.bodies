class AssistOrbView
!!!71571511.java!!!	AssistOrbView(inout context : Context)
        this(context, null);
!!!71571639.java!!!	AssistOrbView(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, 0);
!!!71571767.java!!!	AssistOrbView(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int)
        this(context, attrs, defStyleAttr, 0);
!!!71571895.java!!!	AssistOrbView(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int, in defStyleRes : int)
        super(context, attrs, defStyleAttr, defStyleRes);
        setOutlineProvider(new ViewOutlineProvider() {
            @Override
            public void getOutline(View view, Outline outline) {
                if (mCircleSize > 0.0f) {
                    outline.setOval(mCircleRect);
                } else {
                    outline.setEmpty();
                }
                outline.setAlpha(mOutlineAlpha);
            }
        });
        setWillNotDraw(false);
        mCircleMinSize = context.getResources().getDimensionPixelSize(
                R.dimen.assist_orb_size);
        mBaseMargin = context.getResources().getDimensionPixelSize(
                R.dimen.assist_orb_base_margin);
        mStaticOffset = context.getResources().getDimensionPixelSize(
                R.dimen.assist_orb_travel_distance);
        mMaxElevation = context.getResources().getDimensionPixelSize(
                R.dimen.assist_orb_elevation);
        mBackgroundPaint.setAntiAlias(true);
        mBackgroundPaint.setColor(getResources().getColor(R.color.assist_orb_color));
!!!71572023.java!!!	getLogo() : ImageView
        return mLogo;
!!!71572151.java!!!	onDraw(inout canvas : Canvas) : void
        super.onDraw(canvas);
        drawBackground(canvas);
!!!71572279.java!!!	drawBackground(inout canvas : Canvas) : void
        canvas.drawCircle(mCircleRect.centerX(), mCircleRect.centerY(), mCircleSize / 2,
                mBackgroundPaint);
!!!71572407.java!!!	onFinishInflate() : void
        super.onFinishInflate();
        mLogo = (ImageView) findViewById(R.id.search_logo);
!!!71572535.java!!!	onLayout(inout changed : boolean, in l : int, in t : int, in r : int, in b : int) : void
        mLogo.layout(0, 0, mLogo.getMeasuredWidth(), mLogo.getMeasuredHeight());
        if (changed) {
            updateCircleRect(mStaticRect, mStaticOffset, true);
        }
!!!71572663.java!!!	animateCircleSize(in circleSize : float, in duration : long, in startDelay : long, inout interpolator : Interpolator) : void
        if (circleSize == mCircleAnimationEndValue) {
            return;
        }
        if (mCircleAnimator != null) {
            mCircleAnimator.cancel();
        }
        mCircleAnimator = ValueAnimator.ofFloat(mCircleSize, circleSize);
        mCircleAnimator.addUpdateListener(mCircleUpdateListener);
        mCircleAnimator.addListener(mClearAnimatorListener);
        mCircleAnimator.setInterpolator(interpolator);
        mCircleAnimator.setDuration(duration);
        mCircleAnimator.setStartDelay(startDelay);
        mCircleAnimator.start();
        mCircleAnimationEndValue = circleSize;
!!!71572791.java!!!	applyCircleSize(in circleSize : float) : void
        mCircleSize = circleSize;
        updateLayout();
!!!71572919.java!!!	updateElevation() : void
        float t = (mStaticOffset - mOffset) / (float) mStaticOffset;
        t = 1.0f - Math.max(t, 0.0f);
        float offset = t * mMaxElevation;
        setElevation(offset);
!!!71573047.java!!!	animateOffset(in offset : float, in duration : long, in startDelay : long, inout interpolator : Interpolator) : void
        if (mOffsetAnimator != null) {
            mOffsetAnimator.removeAllListeners();
            mOffsetAnimator.cancel();
        }
        mOffsetAnimator = ValueAnimator.ofFloat(mOffset, offset);
        mOffsetAnimator.addUpdateListener(mOffsetUpdateListener);
        mOffsetAnimator.addListener(new AnimatorListenerAdapter() {
            @Override
            public void onAnimationEnd(Animator animation) {
                mOffsetAnimator = null;
            }
        });
        mOffsetAnimator.setInterpolator(interpolator);
        mOffsetAnimator.setStartDelay(startDelay);
        mOffsetAnimator.setDuration(duration);
        mOffsetAnimator.start();
!!!71573175.java!!!	updateLayout() : void
        updateCircleRect();
        updateLogo();
        invalidateOutline();
        invalidate();
        updateClipping();
!!!71573303.java!!!	updateClipping() : void
        boolean clip = mCircleSize < mCircleMinSize;
        if (clip != mClipToOutline) {
            setClipToOutline(clip);
            mClipToOutline = clip;
        }
!!!71573431.java!!!	updateLogo() : void
        float translationX = (mCircleRect.left + mCircleRect.right) / 2.0f - mLogo.getWidth() / 2.0f;
        float translationY = (mCircleRect.top + mCircleRect.bottom) / 2.0f
                - mLogo.getHeight() / 2.0f - mCircleMinSize / 7f;
        float t = (mStaticOffset - mOffset) / (float) mStaticOffset;
        translationY += t * mStaticOffset * 0.1f;
        float alpha = 1.0f-t;
        alpha = Math.max((alpha - 0.5f) * 2.0f, 0);
        mLogo.setImageAlpha((int) (alpha * 255));
        mLogo.setTranslationX(translationX);
        mLogo.setTranslationY(translationY);
!!!71573559.java!!!	updateCircleRect() : void
        updateCircleRect(mCircleRect, mOffset, false);
!!!71573687.java!!!	updateCircleRect(inout rect : Rect, in offset : float, inout useStaticSize : boolean) : void
        int left, top;
        float circleSize = useStaticSize ? mCircleMinSize : mCircleSize;
        left = (int) (getWidth() - circleSize) / 2;
        top = (int) (getHeight() - circleSize / 2 - mBaseMargin - offset);
        rect.set(left, top, (int) (left + circleSize), (int) (top + circleSize));
!!!71573815.java!!!	startExitAnimation(in delay : long) : void
        animateCircleSize(0, 200, delay, Interpolators.FAST_OUT_LINEAR_IN);
        animateOffset(0, 200, delay, Interpolators.FAST_OUT_LINEAR_IN);
!!!71573943.java!!!	startEnterAnimation() : void
        applyCircleSize(0);
        post(new Runnable() {
            @Override
            public void run() {
                animateCircleSize(mCircleMinSize, 300, 0 /* delay */, mOvershootInterpolator);
                animateOffset(mStaticOffset, 400, 0 /* delay */, Interpolators.LINEAR_OUT_SLOW_IN);
            }
        });
!!!71574071.java!!!	reset() : void
        mClipToOutline = false;
        mBackgroundPaint.setAlpha(255);
        mOutlineAlpha = 1.0f;
!!!71574199.java!!!	hasOverlappingRendering() : boolean
        // not really true but it's ok during an animation, as it's never permanent
        return false;
