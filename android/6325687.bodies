class HistoryEvaluator
!!!71586359.java!!!	HistoryEvaluator()
        mLastUpdate = System.currentTimeMillis();
!!!71586487.java!!!	addStroke(in evaluation : float) : void
        decayValue();
        mStrokes.add(new Data(evaluation));
!!!71586615.java!!!	addGesture(in evaluation : float) : void
        decayValue();
        mGestureWeights.add(new Data(evaluation));
!!!71586743.java!!!	getEvaluation() : float
        return weightedAverage(mStrokes) + weightedAverage(mGestureWeights);
!!!71586871.java!!!	weightedAverage(inout list : ArrayList<Data>) : float
        float sumValue = 0.0f;
        float sumWeight = 0.0f;
        int size = list.size();
        for (int i = 0; i < size; i++) {
            Data data = list.get(i);
            sumValue += data.evaluation * data.weight;
            sumWeight += data.weight;
        }

        if (sumWeight == 0.0f) {
            return 0.0f;
        }

        return sumValue / sumWeight;
!!!71586999.java!!!	decayValue() : void
        long currentTimeMillis = System.currentTimeMillis();

        // All weights are multiplied by HISTORY_FACTOR after each INTERVAL milliseconds.
        float factor = (float) Math.pow(HISTORY_FACTOR,
                (float) (currentTimeMillis - mLastUpdate) / INTERVAL);

        decayValue(mStrokes, factor);
        decayValue(mGestureWeights, factor);
        mLastUpdate = currentTimeMillis;
!!!71587127.java!!!	decayValue(inout list : ArrayList<Data>, in factor : float) : void
        int size = list.size();
        for (int i = 0; i < size; i++) {
            list.get(i).weight *= factor;
        }

        // Removing evaluations with such small weights that they do not matter anymore
        while (!list.isEmpty() && isZero(list.get(0).weight)) {
            list.remove(0);
        }
!!!71587255.java!!!	isZero(in x : float) : boolean
        return x <= EPSILON && x >= -EPSILON;
