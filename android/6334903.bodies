class PathInterpolatorBuilder
!!!71644599.java!!!	PathInterpolatorBuilder(inout path : Path)
        initPath(path);
!!!71644727.java!!!	PathInterpolatorBuilder(in controlX : float, in controlY : float)
        initQuad(controlX, controlY);
!!!71644855.java!!!	PathInterpolatorBuilder(in controlX1 : float, in controlY1 : float, in controlX2 : float, in controlY2 : float)
        initCubic(controlX1, controlY1, controlX2, controlY2);
!!!71644983.java!!!	initQuad(in controlX : float, in controlY : float) : void
        Path path = new Path();
        path.moveTo(0, 0);
        path.quadTo(controlX, controlY, 1f, 1f);
        initPath(path);
!!!71645111.java!!!	initCubic(in x1 : float, in y1 : float, in x2 : float, in y2 : float) : void
        Path path = new Path();
        path.moveTo(0, 0);
        path.cubicTo(x1, y1, x2, y2, 1f, 1f);
        initPath(path);
!!!71645239.java!!!	initPath(inout path : Path) : void
        float[] pointComponents = path.approximate(PRECISION);

        int numPoints = pointComponents.length / 3;
        if (pointComponents[1] != 0 || pointComponents[2] != 0
                || pointComponents[pointComponents.length - 2] != 1
                || pointComponents[pointComponents.length - 1] != 1) {
            throw new IllegalArgumentException("The Path must start at (0,0) and end at (1,1)");
        }

        mX = new float[numPoints];
        mY = new float[numPoints];
        mDist = new float[numPoints];
        float prevX = 0;
        float prevFraction = 0;
        int componentIndex = 0;
        for (int i = 0; i < numPoints; i++) {
            float fraction = pointComponents[componentIndex++];
            float x = pointComponents[componentIndex++];
            float y = pointComponents[componentIndex++];
            if (fraction == prevFraction && x != prevX) {
                throw new IllegalArgumentException(
                        "The Path cannot have discontinuity in the X axis.");
            }
            if (x < prevX) {
                throw new IllegalArgumentException("The Path cannot loop back on itself.");
            }
            mX[i] = x;
            mY[i] = y;
            if (i > 0) {
                float dx = mX[i] - mX[i - 1];
                float dy = mY[i] - mY[i - 1];
                float dist = (float) Math.sqrt(dx * dx + dy * dy);
                mDist[i] = mDist[i - 1] + dist;
            }
            prevX = x;
            prevFraction = fraction;
        }
        // Scale down dist to 0-1.
        float max = mDist[mDist.length - 1];
        for (int i = 0; i < numPoints; i++) {
            mDist[i] /= max;
        }
!!!71645367.java!!!	getXInterpolator() : Interpolator
        return new PathInterpolator(mDist, mX);
!!!71645495.java!!!	getYInterpolator() : Interpolator
        return new PathInterpolator(mDist, mY);
