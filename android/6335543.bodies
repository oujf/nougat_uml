class QSTile
!!!71647543.java!!!	QSTile(inout host : QSTile::Host)
        mHost = host;
        mContext = host.getContext();
        mHandler = new H(host.getLooper());
!!!71647671.java!!!	setListening(inout listener : Object, inout listening : boolean) : void
        if (listening) {
            if (mListeners.add(listener) && mListeners.size() == 1) {
                if (DEBUG) Log.d(TAG, "setListening " + true);
                mHandler.obtainMessage(H.SET_LISTENING, 1, 0).sendToTarget();
            }
        } else {
            if (mListeners.remove(listener) && mListeners.size() == 0) {
                if (DEBUG) Log.d(TAG, "setListening " + false);
                mHandler.obtainMessage(H.SET_LISTENING, 0, 0).sendToTarget();
            }
        }
!!!71647799.java!!!	getTileSpec() : String
        return mTileSpec;
!!!71647927.java!!!	setTileSpec(inout tileSpec : String) : void
        mTileSpec = tileSpec;
!!!71648055.java!!!	getHost() : QSTile::Host
        return mHost;
!!!71648183.java!!!	createTileView(inout context : Context) : QSIconView
        return new QSIconView(context);
!!!71648311.java!!!	getDetailAdapter() : QSTile::DetailAdapter
        return null; // optional
!!!71648439.java!!!	isAvailable() : boolean
        return true;
!!!71649335.java!!!	addCallback(inout callback : QSTile::Callback) : void
        mHandler.obtainMessage(H.ADD_CALLBACK, callback).sendToTarget();
!!!71649463.java!!!	removeCallback(inout callback : QSTile::Callback) : void
        mHandler.obtainMessage(H.REMOVE_CALLBACK, callback).sendToTarget();
!!!71649591.java!!!	removeCallbacks() : void
        mHandler.sendEmptyMessage(H.REMOVE_CALLBACKS);
!!!71649719.java!!!	click() : void
        mHandler.sendEmptyMessage(H.CLICK);
!!!71649847.java!!!	secondaryClick() : void
        mHandler.sendEmptyMessage(H.SECONDARY_CLICK);
!!!71649975.java!!!	longClick() : void
        mHandler.sendEmptyMessage(H.LONG_CLICK);
!!!71650103.java!!!	showDetail(inout show : boolean) : void
        mHandler.obtainMessage(H.SHOW_DETAIL, show ? 1 : 0, 0).sendToTarget();
!!!71650231.java!!!	refreshState() : void
        refreshState(null);
!!!71650359.java!!!	refreshState(inout arg : Object) : void
        mHandler.obtainMessage(H.REFRESH_STATE, arg).sendToTarget();
!!!71650487.java!!!	clearState() : void
        mHandler.sendEmptyMessage(H.CLEAR_STATE);
!!!71650615.java!!!	userSwitch(in newUserId : int) : void
        mHandler.obtainMessage(H.USER_SWITCH, newUserId, 0).sendToTarget();
!!!71650743.java!!!	fireToggleStateChanged(inout state : boolean) : void
        mHandler.obtainMessage(H.TOGGLE_STATE_CHANGED, state ? 1 : 0, 0).sendToTarget();
!!!71650871.java!!!	fireScanStateChanged(inout state : boolean) : void
        mHandler.obtainMessage(H.SCAN_STATE_CHANGED, state ? 1 : 0, 0).sendToTarget();
!!!71650999.java!!!	destroy() : void
        mHandler.sendEmptyMessage(H.DESTROY);
!!!71651127.java!!!	getState() : TState
        return mState;
!!!71651255.java!!!	setDetailListening(inout listening : boolean) : void
        // optional
!!!71651383.java!!!	handleAddCallback(inout callback : QSTile::Callback) : void
        mCallbacks.add(callback);
        callback.onStateChanged(mState);
!!!71651511.java!!!	handleRemoveCallback(inout callback : QSTile::Callback) : void
        mCallbacks.remove(callback);
!!!71651639.java!!!	handleRemoveCallbacks() : void
        mCallbacks.clear();
!!!71651767.java!!!	handleSecondaryClick() : void
        // Default to normal click.
        handleClick();
!!!71651895.java!!!	handleLongClick() : void
        MetricsLogger.action(mContext, MetricsEvent.ACTION_QS_LONG_PRESS, getTileSpec());
        mHost.startActivityDismissingKeyguard(getLongClickIntent());
!!!71652151.java!!!	handleClearState() : void
        mTmpState = newTileState();
        mState = newTileState();
!!!71652279.java!!!	handleRefreshState(inout arg : Object) : void
        handleUpdateState(mTmpState, arg);
        final boolean changed = mTmpState.copyTo(mState);
        if (changed) {
            handleStateChanged();
        }
!!!71652407.java!!!	handleStateChanged() : void
        boolean delayAnnouncement = shouldAnnouncementBeDelayed();
        if (mCallbacks.size() != 0) {
            for (int i = 0; i < mCallbacks.size(); i++) {
                mCallbacks.get(i).onStateChanged(mState);
            }
            if (mAnnounceNextStateChange && !delayAnnouncement) {
                String announcement = composeChangeAnnouncement();
                if (announcement != null) {
                    mCallbacks.get(0).onAnnouncementRequested(announcement);
                }
            }
        }
        mAnnounceNextStateChange = mAnnounceNextStateChange && delayAnnouncement;
!!!71652535.java!!!	shouldAnnouncementBeDelayed() : boolean
        return false;
!!!71652663.java!!!	composeChangeAnnouncement() : String
        return null;
!!!71652791.java!!!	handleShowDetail(inout show : boolean) : void
        for (int i = 0; i < mCallbacks.size(); i++) {
            mCallbacks.get(i).onShowDetail(show);
        }
!!!71652919.java!!!	handleToggleStateChanged(inout state : boolean) : void
        for (int i = 0; i < mCallbacks.size(); i++) {
            mCallbacks.get(i).onToggleStateChanged(state);
        }
!!!71653047.java!!!	handleScanStateChanged(inout state : boolean) : void
        for (int i = 0; i < mCallbacks.size(); i++) {
            mCallbacks.get(i).onScanStateChanged(state);
        }
!!!71653175.java!!!	handleUserSwitch(in newUserId : int) : void
        handleRefreshState(null);
!!!71653431.java!!!	handleDestroy() : void
        setListening(false);
        mCallbacks.clear();
!!!71653559.java!!!	checkIfRestrictionEnforcedByAdminOnly(inout state : QSTile::State, inout userRestriction : String) : void
        EnforcedAdmin admin = RestrictedLockUtils.checkIfRestrictionEnforced(mContext,
                userRestriction, ActivityManager.getCurrentUser());
        if (admin != null && !RestrictedLockUtils.hasBaseUserRestriction(mContext,
                userRestriction, ActivityManager.getCurrentUser())) {
            state.disabledByPolicy = true;
            state.enforcedAdmin = admin;
        } else {
            state.disabledByPolicy = false;
            state.enforcedAdmin = null;
        }
