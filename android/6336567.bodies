class TileServices
!!!71705015.java!!!	TileServices(inout host : QSTileHost, inout looper : Looper)
        mHost = host;
        mContext = mHost.getContext();
        mContext.registerReceiver(mRequestListeningReceiver,
                new IntentFilter(TileService.ACTION_REQUEST_LISTENING));
        mHandler = new Handler(looper);
        mMainHandler = new Handler(Looper.getMainLooper());
!!!71705143.java!!!	getContext() : Context
        return mContext;
!!!71705271.java!!!	getHost() : QSTileHost
        return mHost;
!!!71705399.java!!!	getTileWrapper(inout tile : CustomTile) : TileServiceManager
        ComponentName component = tile.getComponent();
        TileServiceManager service = onCreateTileService(component, tile.getQsTile());
        synchronized (mServices) {
            mServices.put(tile, service);
            mTiles.put(component, tile);
        }
        return service;
!!!71705527.java!!!	onCreateTileService(inout component : ComponentName, inout tile : Tile) : TileServiceManager
        return new TileServiceManager(this, mHandler, component, tile);
!!!71705655.java!!!	freeService(inout tile : CustomTile, inout service : TileServiceManager) : void
        synchronized (mServices) {
            service.setBindAllowed(false);
            service.handleDestroy();
            mServices.remove(tile);
            mTiles.remove(tile.getComponent());
            final String slot = tile.getComponent().getClassName();
            mMainHandler.post(new Runnable() {
                @Override
                public void run() {
                    mHost.getIconController().removeIcon(slot);
                }
            });
        }
!!!71705783.java!!!	setMemoryPressure(inout memoryPressure : boolean) : void
        mMaxBound = memoryPressure ? REDUCED_MAX_BOUND : DEFAULT_MAX_BOUND;
        recalculateBindAllowance();
!!!71705911.java!!!	recalculateBindAllowance() : void
        final ArrayList<TileServiceManager> services;
        synchronized (mServices) {
            services = new ArrayList<>(mServices.values());
        }
        final int N = services.size();
        if (N > mMaxBound) {
            long currentTime = System.currentTimeMillis();
            // Precalculate the priority of services for binding.
            for (int i = 0; i < N; i++) {
                services.get(i).calculateBindPriority(currentTime);
            }
            // Sort them so we can bind the most important first.
            Collections.sort(services, SERVICE_SORT);
        }
        int i;
        // Allow mMaxBound items to bind.
        for (i = 0; i < mMaxBound && i < N; i++) {
            services.get(i).setBindAllowed(true);
        }
        // The rest aren't allowed to bind for now.
        while (i < N) {
            services.get(i).setBindAllowed(false);
            i++;
        }
!!!71706039.java!!!	verifyCaller(inout packageName : String) : void
        try {
            int uid = mContext.getPackageManager().getPackageUidAsUser(packageName,
                    Binder.getCallingUserHandle().getIdentifier());
            if (Binder.getCallingUid() != uid) {
                throw new SecurityException("Component outside caller's uid");
            }
        } catch (PackageManager.NameNotFoundException e) {
            throw new SecurityException(e);
        }
!!!71706167.java!!!	requestListening(inout component : ComponentName) : void
        synchronized (mServices) {
            CustomTile customTile = getTileForComponent(component);
            if (customTile == null) {
                Log.d("TileServices", "Couldn't find tile for " + component);
                return;
            }
            TileServiceManager service = mServices.get(customTile);
            if (!service.isActiveTile()) {
                return;
            }
            service.setBindRequested(true);
            try {
                service.getTileService().onStartListening();
            } catch (RemoteException e) {
            }
        }
!!!71706295.java!!!	updateQsTile(inout tile : Tile) : void
        ComponentName componentName = tile.getComponentName();
        verifyCaller(componentName.getPackageName());
        CustomTile customTile = getTileForComponent(componentName);
        if (customTile != null) {
            synchronized (mServices) {
                final TileServiceManager tileServiceManager = mServices.get(customTile);
                tileServiceManager.clearPendingBind();
                tileServiceManager.setLastUpdate(System.currentTimeMillis());
            }
            customTile.updateState(tile);
            customTile.refreshState();
        }
!!!71706423.java!!!	onStartSuccessful(inout tile : Tile) : void
        ComponentName componentName = tile.getComponentName();
        verifyCaller(componentName.getPackageName());
        CustomTile customTile = getTileForComponent(componentName);
        if (customTile != null) {
            synchronized (mServices) {
                final TileServiceManager tileServiceManager = mServices.get(customTile);
                tileServiceManager.clearPendingBind();
            }
            customTile.refreshState();
        }
!!!71706551.java!!!	onShowDialog(inout tile : Tile) : void
        ComponentName componentName = tile.getComponentName();
        verifyCaller(componentName.getPackageName());
        CustomTile customTile = getTileForComponent(componentName);
        if (customTile != null) {
            customTile.onDialogShown();
            mHost.collapsePanels();
            mServices.get(customTile).setShowingDialog(true);
        }
!!!71706679.java!!!	onDialogHidden(inout tile : Tile) : void
        ComponentName componentName = tile.getComponentName();
        verifyCaller(componentName.getPackageName());
        CustomTile customTile = getTileForComponent(componentName);
        if (customTile != null) {
            mServices.get(customTile).setShowingDialog(false);
            customTile.onDialogHidden();
        }
!!!71706807.java!!!	onStartActivity(inout tile : Tile) : void
        ComponentName componentName = tile.getComponentName();
        verifyCaller(componentName.getPackageName());
        CustomTile customTile = getTileForComponent(componentName);
        if (customTile != null) {
            mHost.collapsePanels();
        }
!!!71706935.java!!!	updateStatusIcon(inout tile : Tile, inout icon : Icon, inout contentDescription : String) : void
        final ComponentName componentName = tile.getComponentName();
        String packageName = componentName.getPackageName();
        verifyCaller(packageName);
        CustomTile customTile = getTileForComponent(componentName);
        if (customTile != null) {
            try {
                UserHandle userHandle = getCallingUserHandle();
                PackageInfo info = mContext.getPackageManager().getPackageInfoAsUser(packageName, 0,
                        userHandle.getIdentifier());
                if (info.applicationInfo.isSystemApp()) {
                    final StatusBarIcon statusIcon = icon != null
                            ? new StatusBarIcon(userHandle, packageName, icon, 0, 0,
                                    contentDescription)
                            : null;
                    mMainHandler.post(new Runnable() {
                        @Override
                        public void run() {
                            StatusBarIconController iconController = mHost.getIconController();
                            iconController.setIcon(componentName.getClassName(), statusIcon);
                            iconController.setExternalIcon(componentName.getClassName());
                        }
                    });
                }
            } catch (PackageManager.NameNotFoundException e) {
            }
        }
!!!71707063.java!!!	getTile(inout componentName : ComponentName) : Tile
        verifyCaller(componentName.getPackageName());
        CustomTile customTile = getTileForComponent(componentName);
        if (customTile != null) {
            return customTile.getQsTile();
        }
        return null;
!!!71707191.java!!!	startUnlockAndRun(inout tile : Tile) : void
        ComponentName componentName = tile.getComponentName();
        verifyCaller(componentName.getPackageName());
        CustomTile customTile = getTileForComponent(componentName);
        if (customTile != null) {
            customTile.startUnlockAndRun();
        }
!!!71707319.java!!!	isLocked() : boolean
        KeyguardMonitor keyguardMonitor = mHost.getKeyguardMonitor();
        return keyguardMonitor.isShowing();
!!!71707447.java!!!	isSecure() : boolean
        KeyguardMonitor keyguardMonitor = mHost.getKeyguardMonitor();
        return keyguardMonitor.isSecure() && keyguardMonitor.isShowing();
!!!71707575.java!!!	getTileForComponent(inout component : ComponentName) : CustomTile
        synchronized (mServices) {
            return mTiles.get(component);
        }
