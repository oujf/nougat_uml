class NightModeController
!!!72340663.java!!!	NightModeController(inout context : Context)
        this(context, false);
!!!72340791.java!!!	NightModeController(inout context : Context, inout updateMatrix : boolean)
        mContext = context;
        mUpdateMatrix = updateMatrix;
        TunerService.get(mContext).addTunable(this, NIGHT_MODE_ADJUST_TINT,
                COLOR_MATRIX_CUSTOM_VALUES, Secure.TWILIGHT_MODE);
!!!72340919.java!!!	setNightMode(inout isNight : boolean) : void
        if (mIsAuto) {
            if (mIsNight != isNight) {
                TunerService.get(mContext).setValue(Secure.TWILIGHT_MODE, isNight
                        ? Secure.TWILIGHT_MODE_AUTO_OVERRIDE_ON
                        : Secure.TWILIGHT_MODE_AUTO_OVERRIDE_OFF);
            } else {
                TunerService.get(mContext).setValue(Secure.TWILIGHT_MODE,
                        Secure.TWILIGHT_MODE_AUTO);
            }
        } else {
            TunerService.get(mContext).setValue(Secure.TWILIGHT_MODE, isNight
                    ? Secure.TWILIGHT_MODE_LOCKED_ON : Secure.TWILIGHT_MODE_LOCKED_OFF);
        }
!!!72341047.java!!!	setAuto(inout auto : boolean) : void
        mIsAuto = auto;
        if (auto) {
            TunerService.get(mContext).setValue(Secure.TWILIGHT_MODE, Secure.TWILIGHT_MODE_AUTO);
        } else {
            // Lock into the current state
            TunerService.get(mContext).setValue(Secure.TWILIGHT_MODE, mIsNight
                    ? Secure.TWILIGHT_MODE_LOCKED_ON : Secure.TWILIGHT_MODE_LOCKED_OFF);
        }
!!!72341175.java!!!	isAuto() : boolean
        return mIsAuto;
!!!72341303.java!!!	setAdjustTint(inout newValue : Boolean) : void
        TunerService.get(mContext).setValue(NIGHT_MODE_ADJUST_TINT, ((Boolean) newValue) ? 1 : 0);
!!!72341431.java!!!	addListener(inout listener : NightModeController::Listener) : void
        mListeners.add(listener);
        listener.onNightModeChanged();
        updateListening();
!!!72341559.java!!!	removeListener(inout listener : NightModeController::Listener) : void
        mListeners.remove(listener);
        updateListening();
!!!72341687.java!!!	updateListening() : void
        boolean shouldListen = mListeners.size() != 0 || (mUpdateMatrix && mAdjustTint);
        if (shouldListen == mListening) return;
        mListening = shouldListen;
        if (mListening) {
            mContext.registerReceiver(mReceiver, new IntentFilter(ACTION_TWILIGHT_CHANGED));
        } else {
            mContext.unregisterReceiver(mReceiver);
        }
!!!72341815.java!!!	isEnabled() : boolean
        if (!mListening) {
            updateNightMode(mContext.registerReceiver(null,
                    new IntentFilter(ACTION_TWILIGHT_CHANGED)));
        }
        return mIsNight;
!!!72341943.java!!!	getCustomValues() : String
        return TunerService.get(mContext).getValue(COLOR_MATRIX_CUSTOM_VALUES);
!!!72342071.java!!!	setCustomValues(inout values : String) : void
        TunerService.get(mContext).setValue(COLOR_MATRIX_CUSTOM_VALUES, values);
!!!72342199.java!!!	onTuningChanged(inout key : String, inout newValue : String) : void
        if (COLOR_MATRIX_CUSTOM_VALUES.equals(key)) {
            mCustomMatrix = newValue != null ? toValues(newValue) : null;
            updateCurrentMatrix();
        } else if (NIGHT_MODE_ADJUST_TINT.equals(key)) {
            mAdjustTint = newValue == null || Integer.parseInt(newValue) != 0;
            updateListening();
            updateCurrentMatrix();
        } else if (Secure.TWILIGHT_MODE.equals(key)) {
            mIsAuto = newValue != null && Integer.parseInt(newValue) >= Secure.TWILIGHT_MODE_AUTO;
        }
!!!72342327.java!!!	updateCurrentMatrix() : void
        if (!mUpdateMatrix) return;
        if ((!mAdjustTint || mAmount == 0) && mCustomMatrix == null) {
            TunerService.get(mContext).setValue(Secure.ACCESSIBILITY_DISPLAY_COLOR_MATRIX, null);
            return;
        }
        float[] values = scaleValues(IDENTITY_MATRIX, NIGHT_VALUES, mAdjustTint ? mAmount : 0);
        if (mCustomMatrix != null) {
            values = multiply(values, mCustomMatrix);
        }
        TunerService.get(mContext).setValue(Secure.ACCESSIBILITY_DISPLAY_COLOR_MATRIX,
                toString(values));
!!!72342455.java!!!	updateNightMode(inout intent : Intent) : void
        mIsNight = intent != null && intent.getBooleanExtra(EXTRA_IS_NIGHT, false);
        mAmount = intent != null ? intent.getFloatExtra(EXTRA_AMOUNT, 0) : 0;
!!!72342839.java!!!	multiply(inout matrix : float [[]], inout other : float [[]]) : float
        if (matrix == null) {
            return other;
        }
        float[] result = new float[16];
        Matrix.multiplyMM(result, 0, matrix, 0, other, 0);
        return result;
!!!72342967.java!!!	scaleValues(inout identityMatrix : float [[]], inout nightValues : float [[]], in amount : float) : float
        float[] values = new float[identityMatrix.length];
        for (int i = 0; i < values.length; i++) {
            values[i] = MathUtils.lerp(identityMatrix[i], nightValues[i], amount);
        }
        return values;
!!!72343095.java!!!	toString(inout values : float [[]]) : String
        StringBuilder builder = new StringBuilder();
        for (int i = 0; i < values.length; i++) {
            if (builder.length() != 0) {
                builder.append(',');
            }
            builder.append(values[i]);
        }
        return builder.toString();
!!!72343223.java!!!	toValues(inout customValues : String) : float
        String[] strValues = customValues.split(",");
        float[] values = new float[strValues.length];
        for (int i = 0; i < values.length; i++) {
            values[i] = Float.parseFloat(strValues[i]);
        }
        return values;
