class HeaderTileLayout
!!!71684023.java!!!	HeaderTileLayout(inout context : Context)
            super(context);
            setClipChildren(false);
            setClipToPadding(false);
            setGravity(Gravity.CENTER_VERTICAL);
            setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));

            mEndSpacer = new Space(context);
            mEndSpacer.setLayoutParams(generateLayoutParams());
            updateDownArrowMargin();
            addView(mEndSpacer);
            setOrientation(LinearLayout.HORIZONTAL);
!!!71684151.java!!!	onConfigurationChanged(inout newConfig : Configuration) : void
            super.onConfigurationChanged(newConfig);
            updateDownArrowMargin();
!!!71684279.java!!!	updateDownArrowMargin() : void
            LayoutParams params = (LayoutParams) mEndSpacer.getLayoutParams();
            params.setMarginStart(mContext.getResources().getDimensionPixelSize(
                    R.dimen.qs_expand_margin));
            mEndSpacer.setLayoutParams(params);
!!!71684407.java!!!	setListening(inout listening : boolean) : void
            if (mListening == listening) return;
            mListening = listening;
            for (TileRecord record : mRecords) {
                record.tile.setListening(this, mListening);
            }
!!!71684535.java!!!	addTile(inout tile : QSPanel::TileRecord) : void
            addView(tile.tileView, getChildCount() - 1 /* Leave icon at end */,
                    generateLayoutParams());
            // Add a spacer.
            addView(new Space(mContext), getChildCount() - 1 /* Leave icon at end */,
                    generateSpaceParams());
            mRecords.add(tile);
            tile.tile.setListening(this, mListening);
!!!71684663.java!!!	generateSpaceParams() : LinearLayout::LayoutParams
            int size = mContext.getResources().getDimensionPixelSize(R.dimen.qs_quick_tile_size);
            LayoutParams lp = new LayoutParams(0, size);
            lp.weight = 1;
            lp.gravity = Gravity.CENTER;
            return lp;
!!!71684791.java!!!	generateLayoutParams() : LinearLayout::LayoutParams
            int size = mContext.getResources().getDimensionPixelSize(R.dimen.qs_quick_tile_size);
            LayoutParams lp = new LayoutParams(size, size);
            lp.gravity = Gravity.CENTER;
            return lp;
!!!71684919.java!!!	removeTile(inout tile : QSPanel::TileRecord) : void
            int childIndex = getChildIndex(tile.tileView);
            // Remove the tile.
            removeViewAt(childIndex);
            // Remove its spacer as well.
            removeViewAt(childIndex);
            mRecords.remove(tile);
            tile.tile.setListening(this, false);
!!!71685047.java!!!	getChildIndex(inout tileView : QSTileBaseView) : int
            final int N = getChildCount();
            for (int i = 0; i < N; i++) {
                if (getChildAt(i) == tileView) {
                    return i;
                }
            }
            return -1;
!!!71685175.java!!!	getOffsetTop(inout tile : QSPanel::TileRecord) : int
            return 0;
!!!71685303.java!!!	updateResources() : boolean
            // No resources here.
            return false;
!!!71685431.java!!!	hasOverlappingRendering() : boolean
            return false;
!!!71685559.java!!!	onMeasure(in widthMeasureSpec : int, in heightMeasureSpec : int) : void
            super.onMeasure(widthMeasureSpec, heightMeasureSpec);
            if (mRecords != null && mRecords.size() > 0) {
                View previousView = this;
                for (TileRecord record : mRecords) {
                    if (record.tileView.getVisibility() == GONE) continue;
                    previousView = record.tileView.updateAccessibilityOrder(previousView);
                }
                mRecords.get(0).tileView.setAccessibilityTraversalAfter(
                        R.id.alarm_status_collapsed);
                mRecords.get(mRecords.size() - 1).tileView.setAccessibilityTraversalBefore(
                        R.id.expand_indicator);
            }
