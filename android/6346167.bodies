class FlashlightTile
!!!71733431.java!!!	FlashlightTile(inout host : QSTile::Host)
        super(host);
        mFlashlightController = host.getFlashlightController();
        mFlashlightController.addListener(this);
!!!71733559.java!!!	handleDestroy() : void
        super.handleDestroy();
        mFlashlightController.removeListener(this);
!!!71733687.java!!!	newTileState() : QSTile::BooleanState
        return new BooleanState();
!!!71734071.java!!!	getLongClickIntent() : Intent
        return new Intent(MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA);
!!!71734199.java!!!	isAvailable() : boolean
        return mFlashlightController.hasFlashlight();
!!!71734327.java!!!	handleClick() : void
        if (ActivityManager.isUserAMonkey()) {
            return;
        }
        MetricsLogger.action(mContext, getMetricsCategory(), !mState.value);
        boolean newState = !mState.value;
        refreshState(newState);
        mFlashlightController.setFlashlight(newState);
!!!71734455.java!!!	getTileLabel() : CharSequence
        return mContext.getString(R.string.quick_settings_flashlight_label);
!!!71734583.java!!!	handleLongClick() : void
        handleClick();
!!!71734711.java!!!	handleUpdateState(inout state : QSTile::BooleanState, inout arg : Object) : void
        state.label = mHost.getContext().getString(R.string.quick_settings_flashlight_label);
        if (!mFlashlightController.isAvailable()) {
            Drawable icon = mHost.getContext().getDrawable(R.drawable.ic_signal_flashlight_disable)
                    .mutate();
            final int disabledColor = mHost.getContext().getColor(R.color.qs_tile_tint_unavailable);
            icon.setTint(disabledColor);
            state.icon = new DrawableIcon(icon);
            state.label = new SpannableStringBuilder().append(state.label,
                    new ForegroundColorSpan(disabledColor),
                    SpannableStringBuilder.SPAN_INCLUSIVE_INCLUSIVE);
            state.contentDescription = mContext.getString(
                    R.string.accessibility_quick_settings_flashlight_unavailable);
            return;
        }
        if (arg instanceof Boolean) {
            boolean value = (Boolean) arg;
            if (value == state.value) {
                return;
            }
            state.value = value;
        } else {
            state.value = mFlashlightController.isEnabled();
        }
        final AnimationIcon icon = state.value ? mEnable : mDisable;
        state.icon = icon;
        state.contentDescription = mContext.getString(R.string.quick_settings_flashlight_label);
        state.minimalAccessibilityClassName = state.expandedAccessibilityClassName
                = Switch.class.getName();
!!!71734839.java!!!	getMetricsCategory() : int
        return MetricsEvent.QS_FLASHLIGHT;
!!!71734967.java!!!	composeChangeAnnouncement() : String
        if (mState.value) {
            return mContext.getString(R.string.accessibility_quick_settings_flashlight_changed_on);
        } else {
            return mContext.getString(R.string.accessibility_quick_settings_flashlight_changed_off);
        }
!!!71735095.java!!!	onFlashlightChanged(inout enabled : boolean) : void
        refreshState(enabled);
!!!71735223.java!!!	onFlashlightError() : void
        refreshState(false);
!!!71735351.java!!!	onFlashlightAvailabilityChanged(inout available : boolean) : void
        refreshState();
