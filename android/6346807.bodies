class RotationLockTile
!!!71739319.java!!!	RotationLockTile(inout host : QSTile::Host)
        super(host);
        mController = host.getRotationLockController();
!!!71739447.java!!!	newTileState() : QSTile::BooleanState
        return new BooleanState();
!!!71739575.java!!!	setListening(inout listening : boolean) : void
        if (mController == null) return;
        if (listening) {
            mController.addRotationLockControllerCallback(mCallback);
        } else {
            mController.removeRotationLockControllerCallback(mCallback);
        }
!!!71739703.java!!!	getLongClickIntent() : Intent
        return new Intent(Settings.ACTION_DISPLAY_SETTINGS);
!!!71739831.java!!!	handleClick() : void
        if (mController == null) return;
        MetricsLogger.action(mContext, getMetricsCategory(), !mState.value);
        final boolean newState = !mState.value;
        mController.setRotationLocked(!newState);
        refreshState(newState);
!!!71739959.java!!!	getTileLabel() : CharSequence
        return getState().label;
!!!71740087.java!!!	handleUpdateState(inout state : QSTile::BooleanState, inout arg : Object) : void
        if (mController == null) return;
        final boolean rotationLocked = mController.isRotationLocked();
        // TODO: Handle accessibility rotation lock and whatnot.

        state.value = !rotationLocked;
        final boolean portrait = isCurrentOrientationLockPortrait(mController, mContext);
        if (rotationLocked) {
            final int label = portrait ? R.string.quick_settings_rotation_locked_portrait_label
                    : R.string.quick_settings_rotation_locked_landscape_label;
            state.label = mContext.getString(label);
            state.icon = portrait ? mAutoToPortrait : mAutoToLandscape;
        } else {
            state.label = mContext.getString(R.string.quick_settings_rotation_unlocked_label);
            state.icon = portrait ? mPortraitToAuto : mLandscapeToAuto;
        }
        state.contentDescription = getAccessibilityString(rotationLocked);
        state.minimalAccessibilityClassName = state.expandedAccessibilityClassName
                = Switch.class.getName();
!!!71740215.java!!!	isCurrentOrientationLockPortrait(inout controller : RotationLockController, inout context : Context) : boolean
        int lockOrientation = controller.getRotationLockOrientation();
        if (lockOrientation == Configuration.ORIENTATION_UNDEFINED) {
            // Freely rotating device; use current rotation
            return context.getResources().getConfiguration().orientation
                    != Configuration.ORIENTATION_LANDSCAPE;
        } else {
            return lockOrientation != Configuration.ORIENTATION_LANDSCAPE;
        }
!!!71740343.java!!!	getMetricsCategory() : int
        return MetricsEvent.QS_ROTATIONLOCK;
!!!71740471.java!!!	getAccessibilityString(inout locked : boolean) : String
        if (locked) {
            return mContext.getString(R.string.accessibility_quick_settings_rotation) + ","
                    + mContext.getString(R.string.accessibility_quick_settings_rotation_value,
                    isCurrentOrientationLockPortrait(mController, mContext)
                            ? mContext.getString(
                                    R.string.quick_settings_rotation_locked_portrait_label)
                            : mContext.getString(
                                    R.string.quick_settings_rotation_locked_landscape_label));

        } else {
            return mContext.getString(R.string.accessibility_quick_settings_rotation);
        }
!!!71740599.java!!!	composeChangeAnnouncement() : String
        return getAccessibilityString(mState.value);
