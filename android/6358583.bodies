class TaskCardView
!!!71829687.java!!!	TaskCardView(inout context : Context)
        this(context, null);
!!!71829815.java!!!	TaskCardView(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, 0);
!!!71829943.java!!!	TaskCardView(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int)
        super(context, attrs, defStyleAttr);
        mDismissState = false;
        Configuration config = getResources().getConfiguration();
        setLayoutDirection(config.getLayoutDirection());
!!!71830071.java!!!	onFinishInflate() : void
        super.onFinishInflate();
        mThumbnailView = findViewById(R.id.card_view_thumbnail);
        mInfoFieldView = findViewById(R.id.card_info_field);
        mTitleTextView = (TextView) findViewById(R.id.card_title_text);
        mBadgeView = (ImageView) findViewById(R.id.card_extra_badge);
        mDismissIconView = findViewById(R.id.dismiss_icon);
        mDismissAnimationsHolder = new DismissAnimationsHolder(this);
        mCornerRadius = getResources().getDimensionPixelSize(
                R.dimen.recents_task_view_rounded_corners_radius);
        mRecentsRowFocusAnimationHolder = new RecentsRowFocusAnimationHolder(this, mInfoFieldView);
        SystemServicesProxy ssp = Recents.getSystemServices();
        mTouchExplorationEnabled = ssp.isTouchExplorationEnabled();
        if (!mTouchExplorationEnabled) {
            mDismissIconView.setVisibility(VISIBLE);
        } else {
            mDismissIconView.setVisibility(GONE);
        }
        mViewFocusAnimator = new ViewFocusAnimator(this);
!!!71830199.java!!!	init(inout task : Task) : void
        mTask = task;
        mTitleTextView.setText(task.title);
        mBadgeView.setImageDrawable(task.icon);
        setThumbnailView();
        setContentDescription(task.titleDescription);
        mDismissState = false;
        mDismissAnimationsHolder.reset();
        mRecentsRowFocusAnimationHolder.reset();
!!!71830327.java!!!	getTask() : Task
        return mTask;
!!!71830455.java!!!	getFocusedRect(inout r : Rect) : void
        mThumbnailView.getFocusedRect(r);
!!!71830583.java!!!	getFocusedThumbnailRect() : Rect
        Rect r = new Rect();
        mThumbnailView.getGlobalVisibleRect(r);
        return r;
!!!71830711.java!!!	getStartingCardThumbnailRect(inout context : Context, inout hasFocus : boolean, in numberOfTasks : int) : Rect
        if(numberOfTasks > 1) {
            return getStartingCardThumbnailRectForStartPosition(context, hasFocus);
        } else {
            return getStartingCardThumbnailRectForFocusedPosition(context, hasFocus);
        }
!!!71830839.java!!!	getStartingCardThumbnailRectForStartPosition(inout context : Context, inout hasFocus : boolean) : Rect
        Resources res = context.getResources();

        int width = res.getDimensionPixelOffset(R.dimen.recents_tv_card_width);
        int totalSpacing = res.getDimensionPixelOffset(R.dimen.recents_tv_gird_card_spacing) * 2;
        if (hasFocus) {
            totalSpacing += res.getDimensionPixelOffset(R.dimen.recents_tv_gird_focused_card_delta);
        }
        int height = res.getDimensionPixelOffset(R.dimen.recents_tv_screenshot_height);
        int topMargin = res.getDimensionPixelOffset(R.dimen.recents_tv_gird_row_top_margin);
        int headerHeight = res.getDimensionPixelOffset(R.dimen.recents_tv_card_extra_badge_size) +
                res.getDimensionPixelOffset(R.dimen.recents_tv_icon_padding_bottom);

        WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
        Display display = wm.getDefaultDisplay();
        Point size = new Point();
        display.getSize(size);
        int screenWidth = size.x;

        return new Rect(screenWidth / 2 + width / 2 + totalSpacing,
                topMargin + headerHeight,
                screenWidth / 2 + width / 2 + totalSpacing + width,
                topMargin + headerHeight + height);
!!!71830967.java!!!	getStartingCardThumbnailRectForFocusedPosition(inout context : Context, inout hasFocus : boolean) : Rect
        Resources res = context.getResources();

        TypedValue out = new TypedValue();
        res.getValue(R.integer.selected_scale, out, true);
        float scale = hasFocus ? out.getFloat() : 1;

        int width = res.getDimensionPixelOffset(R.dimen.recents_tv_card_width);
        int widthDelta = (int) (width * scale - width);
        int height = res.getDimensionPixelOffset(R.dimen.recents_tv_screenshot_height);
        int heightDelta = (int) (height * scale - height);
        int topMargin = res.getDimensionPixelOffset(R.dimen.recents_tv_gird_row_top_margin);

        int headerHeight = res.getDimensionPixelOffset(R.dimen.recents_tv_card_extra_badge_size) +
                res.getDimensionPixelOffset(R.dimen.recents_tv_icon_padding_bottom);
        int headerHeightDelta = (int) (headerHeight * scale - headerHeight);

        int dismissAreaHeight =
                res.getDimensionPixelOffset(R.dimen.recents_tv_dismiss_icon_top_margin) +
                res.getDimensionPixelOffset(R.dimen.recents_tv_dismiss_icon_bottom_margin) +
                res.getDimensionPixelOffset(R.dimen.recents_tv_dismiss_icon_size) +
                res.getDimensionPixelOffset(R.dimen.recents_tv_dismiss_text_size);

        int dismissAreaHeightDelta = (int) (dismissAreaHeight * scale - dismissAreaHeight);

        int totalHeightDelta = heightDelta + headerHeightDelta + dismissAreaHeightDelta;

        WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
        Display display = wm.getDefaultDisplay();
        Point size = new Point();
        display.getSize(size);
        int screenWidth = size.x;

        return new Rect(screenWidth / 2 - width / 2 - widthDelta / 2,
                topMargin - totalHeightDelta / 2 + (int) (headerHeight * scale),
                screenWidth / 2 + width / 2 + widthDelta / 2,
                topMargin - totalHeightDelta / 2 + (int) (headerHeight * scale) +
                        (int) (height * scale));
!!!71831095.java!!!	dispatchKeyEvent(inout event : KeyEvent) : boolean
        // Override dispatchKeyEvent() instead of onKeyDown() to prevent warning from ViewRootImpl.
        switch (event.getKeyCode()) {
            case KeyEvent.KEYCODE_DPAD_DOWN : {
                if (!isInDismissState() && event.getAction() == KeyEvent.ACTION_DOWN) {
                    setDismissState(true);
                    return true;
                }
                break;
            }
            case KeyEvent.KEYCODE_DPAD_UP : {
                if (event.getAction() == KeyEvent.ACTION_DOWN) {
                    if (isInDismissState()) {
                        setDismissState(false);
                    } else {
                        ((RecentsTvActivity) getContext()).requestPipControlsFocus();
                    }
                }
                return true;
            }

            // Eat right and left key presses when we are in dismiss state
            case KeyEvent.KEYCODE_DPAD_LEFT :
            case KeyEvent.KEYCODE_DPAD_RIGHT : {
                if (isInDismissState()) {
                    return true;
                }
                break;
            }
        }
        return super.dispatchKeyEvent(event);
!!!71831223.java!!!	setDismissState(inout dismissState : boolean) : void
        if (mDismissState != dismissState) {
            mDismissState = dismissState;
            // Check for touch exploration to ensure dismiss icon/text do not
            // get animated. This should be removed based on decision from
            // b/29208918
            if (!mTouchExplorationEnabled) {
                if (dismissState) {
                    mDismissAnimationsHolder.startEnterAnimation();
                } else {
                    mDismissAnimationsHolder.startExitAnimation();
                }
            }
        }
!!!71831351.java!!!	isInDismissState() : boolean
        return mDismissState;
!!!71831479.java!!!	startDismissTaskAnimation(inout listener : Animator::AnimatorListener) : void
        mDismissState = false;
        mDismissAnimationsHolder.startDismissAnimation(listener);
!!!71831607.java!!!	getViewFocusAnimator() : ViewFocusAnimator
        return mViewFocusAnimator;
!!!71831735.java!!!	getRecentsRowFocusAnimationHolder() : RecentsRowFocusAnimationHolder
        return mRecentsRowFocusAnimationHolder;
!!!71831863.java!!!	setThumbnailView() : void
        ImageView screenshotView = (ImageView) findViewById(R.id.card_view_banner_icon);
        PackageManager pm = getContext().getPackageManager();
        if (mTask.thumbnail != null) {
            setAsScreenShotView(mTask.thumbnail, screenshotView);
        } else {
            try {
                Drawable banner = null;
                if (mTask.key != null) {
                    banner = pm.getActivityBanner(mTask.key.baseIntent);
                }
                if (banner != null) {
                    setAsBannerView(banner, screenshotView);
                } else {
                    setAsIconView(mTask.icon, screenshotView);
                }
            } catch (PackageManager.NameNotFoundException e) {
                Log.e(TAG, "Package not found : " + e);
                setAsIconView(mTask.icon, screenshotView);
            }
        }
!!!71831991.java!!!	setAsScreenShotView(inout screenshot : Bitmap, inout screenshotView : ImageView) : void
        LayoutParams lp = (LayoutParams) screenshotView.getLayoutParams();
        lp.width = LayoutParams.MATCH_PARENT;
        lp.height = LayoutParams.MATCH_PARENT;

        screenshotView.setLayoutParams(lp);
        screenshotView.setClipToOutline(true);
        screenshotView.setOutlineProvider(new ViewOutlineProvider() {
            @Override
            public void getOutline(View view, Outline outline) {
                outline.setRoundRect(0, 0, view.getWidth(), view.getHeight(), mCornerRadius);
            }
        });
        screenshotView.setImageBitmap(screenshot);
!!!71832119.java!!!	setAsBannerView(inout banner : Drawable, inout bannerView : ImageView) : void
        LayoutParams lp = (LayoutParams) bannerView.getLayoutParams();
        lp.width = getResources()
                .getDimensionPixelSize(R.dimen.recents_tv_banner_width);
        lp.height = getResources()
                .getDimensionPixelSize(R.dimen.recents_tv_banner_height);
        bannerView.setLayoutParams(lp);
        bannerView.setImageDrawable(banner);
!!!71832247.java!!!	setAsIconView(inout icon : Drawable, inout iconView : ImageView) : void
        LayoutParams lp = (LayoutParams) iconView.getLayoutParams();
        lp.width = getResources()
                .getDimensionPixelSize(R.dimen.recents_tv_fallback_icon_width);
        lp.height = getResources()
                .getDimensionPixelSize(R.dimen.recents_tv_fallback_icon_height);

        iconView.setLayoutParams(lp);
        iconView.setImageDrawable(icon);
!!!71832375.java!!!	getThumbnailView() : View
        return mThumbnailView;
!!!71832503.java!!!	getInfoFieldView() : View
        return mInfoFieldView;
!!!71832631.java!!!	getDismissIconView() : View
        return mDismissIconView;
!!!71832759.java!!!	getNumberOfVisibleTasks(inout context : Context) : int
        Resources res = context.getResources();
        WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
        Display display = wm.getDefaultDisplay();
        Point size = new Point();
        display.getSize(size);
        int screenWidth = size.x;
        int cardWidth = res.getDimensionPixelSize(R.dimen.recents_tv_card_width);
        int spacing = res.getDimensionPixelSize(R.dimen.recents_tv_gird_card_spacing);
        return (int) (1.0 + Math.ceil(screenWidth / (cardWidth + spacing * 2.0)));
