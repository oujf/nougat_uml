class FreePathInterpolator
!!!71796663.java!!!	FreePathInterpolator(inout path : Path)
        initPath(path);
!!!71796791.java!!!	initPath(inout path : Path) : void
        float[] pointComponents = path.approximate(PRECISION);

        int numPoints = pointComponents.length / 3;

        mX = new float[numPoints];
        mY = new float[numPoints];
        mArcLength = 0;
        float prevX = 0;
        float prevY = 0;
        float prevFraction = 0;
        int componentIndex = 0;
        for (int i = 0; i < numPoints; i++) {
            float fraction = pointComponents[componentIndex++];
            float x = pointComponents[componentIndex++];
            float y = pointComponents[componentIndex++];
            if (fraction == prevFraction && x != prevX) {
                throw new IllegalArgumentException(
                        "The Path cannot have discontinuity in the X axis.");
            }
            if (x < prevX) {
                throw new IllegalArgumentException("The Path cannot loop back on itself.");
            }
            mX[i] = x;
            mY[i] = y;
            mArcLength += Math.hypot(x - prevX, y - prevY);
            prevX = x;
            prevY = y;
            prevFraction = fraction;
        }
!!!71796919.java!!!	getInterpolation(in t : float) : float
        int startIndex = 0;
        int endIndex = mX.length - 1;

        // Return early if out of bounds
        if (t <= 0) {
            return mY[startIndex];
        } else if (t >= 1) {
            return mY[endIndex];
        }

        // Do a binary search for the correct x to interpolate between.
        while (endIndex - startIndex > 1) {
            int midIndex = (startIndex + endIndex) / 2;
            if (t < mX[midIndex]) {
                endIndex = midIndex;
            } else {
                startIndex = midIndex;
            }
        }

        float xRange = mX[endIndex] - mX[startIndex];
        if (xRange == 0) {
            return mY[startIndex];
        }

        float tInRange = t - mX[startIndex];
        float fraction = tInRange / xRange;

        float startY = mY[startIndex];
        float endY = mY[endIndex];
        return startY + (fraction * (endY - startY));
!!!71797047.java!!!	getX(in y : float) : float
        int startIndex = 0;
        int endIndex = mY.length - 1;

        // Return early if out of bounds
        if (y <= 0) {
            return mX[endIndex];
        } else if (y >= 1) {
            return mX[startIndex];
        }

        // Do a binary search for index that bounds the y
        while (endIndex - startIndex > 1) {
            int midIndex = (startIndex + endIndex) / 2;
            if (y < mY[midIndex]) {
                startIndex = midIndex;
            } else {
                endIndex = midIndex;
            }
        }

        float yRange = mY[endIndex] - mY[startIndex];
        if (yRange == 0) {
            return mX[startIndex];
        }

        float tInRange = y - mY[startIndex];
        float fraction = tInRange / yRange;

        float startX = mX[startIndex];
        float endX = mX[endIndex];
        return startX + (fraction * (endX - startX));
!!!71797175.java!!!	getArcLength() : float
        return mArcLength;
