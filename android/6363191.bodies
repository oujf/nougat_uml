class TaskGrouping
!!!71810231.java!!!	TaskGrouping(in affiliation : int)
        this.affiliation = affiliation;
!!!71810359.java!!!	addTask(inout t : Task) : void
        mTaskKeys.add(t.key);
        if (t.key.lastActiveTime > latestActiveTimeInGroup) {
            latestActiveTimeInGroup = t.key.lastActiveTime;
        }
        t.setGroup(this);
        updateTaskIndices();
!!!71810487.java!!!	removeTask(inout t : Task) : void
        mTaskKeys.remove(t.key);
        latestActiveTimeInGroup = 0;
        int taskCount = mTaskKeys.size();
        for (int i = 0; i < taskCount; i++) {
            long lastActiveTime = mTaskKeys.get(i).lastActiveTime;
            if (lastActiveTime > latestActiveTimeInGroup) {
                latestActiveTimeInGroup = lastActiveTime;
            }
        }
        t.setGroup(null);
        updateTaskIndices();
!!!71810615.java!!!	getNextTaskInGroup(inout t : Task) : Task::TaskKey
        int i = indexOf(t);
        if ((i + 1) < getTaskCount()) {
            return mTaskKeys.get(i + 1);
        }
        return null;
!!!71810743.java!!!	getPrevTaskInGroup(inout t : Task) : Task::TaskKey
        int i = indexOf(t);
        if ((i - 1) >= 0) {
            return mTaskKeys.get(i - 1);
        }
        return null;
!!!71810871.java!!!	isFrontMostTask(inout t : Task) : boolean
        return (t.key == mFrontMostTaskKey);
!!!71810999.java!!!	indexOf(inout t : Task) : int
        return mTaskKeyIndices.get(t.key);
!!!71811127.java!!!	containsTask(inout t : Task) : boolean
        return mTaskKeyIndices.containsKey(t.key);
!!!71811255.java!!!	isTaskAboveTask(inout t : Task, inout below : Task) : boolean
        return mTaskKeyIndices.containsKey(t.key) && mTaskKeyIndices.containsKey(below.key) &&
                mTaskKeyIndices.get(t.key) > mTaskKeyIndices.get(below.key);
!!!71811383.java!!!	getTaskCount() : int
 return mTaskKeys.size();
!!!71811511.java!!!	updateTaskIndices() : void
        if (mTaskKeys.isEmpty()) {
            mFrontMostTaskKey = null;
            mTaskKeyIndices.clear();
            return;
        }

        int taskCount = mTaskKeys.size();
        mFrontMostTaskKey = mTaskKeys.get(mTaskKeys.size() - 1);
        mTaskKeyIndices.clear();
        for (int i = 0; i < taskCount; i++) {
            Task.TaskKey k = mTaskKeys.get(i);
            mTaskKeyIndices.put(k, i);
        }
