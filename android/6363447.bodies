class FilteredTaskList
!!!71813047.java!!!	setFilter(inout filter : TaskFilter) : boolean
        ArrayList<Task> prevFilteredTasks = new ArrayList<>(mFilteredTasks);
        mFilter = filter;
        updateFilteredTasks();
        if (!prevFilteredTasks.equals(mFilteredTasks)) {
            return true;
        } else {
            return false;
        }
!!!71813175.java!!!	removeFilter() : void
        mFilter = null;
        updateFilteredTasks();
!!!71813303.java!!!	add(inout t : Task) : void
        mTasks.add(t);
        updateFilteredTasks();
!!!71813431.java!!!	moveTaskToStack(inout task : Task, in insertIndex : int, in newStackId : int) : void
        int taskIndex = indexOf(task);
        if (taskIndex != insertIndex) {
            mTasks.remove(taskIndex);
            if (taskIndex < insertIndex) {
                insertIndex--;
            }
            mTasks.add(insertIndex, task);
        }

        // Update the stack id now, after we've moved the task, and before we update the
        // filtered tasks
        task.setStackId(newStackId);
        updateFilteredTasks();
!!!71813559.java!!!	set(inout tasks : List<Task>) : void
        mTasks.clear();
        mTasks.addAll(tasks);
        updateFilteredTasks();
!!!71813687.java!!!	remove(inout t : Task) : boolean
        if (mFilteredTasks.contains(t)) {
            boolean removed = mTasks.remove(t);
            updateFilteredTasks();
            return removed;
        }
        return false;
!!!71813815.java!!!	indexOf(inout t : Task) : int
        if (t != null && mTaskIndices.containsKey(t.key)) {
            return mTaskIndices.get(t.key);
        }
        return -1;
!!!71813943.java!!!	size() : int
        return mFilteredTasks.size();
!!!71814071.java!!!	contains(inout t : Task) : boolean
        return mTaskIndices.containsKey(t.key);
!!!71814199.java!!!	updateFilteredTasks() : void
        mFilteredTasks.clear();
        if (mFilter != null) {
            // Create a sparse array from task id to Task
            SparseArray<Task> taskIdMap = new SparseArray<>();
            int taskCount = mTasks.size();
            for (int i = 0; i < taskCount; i++) {
                Task t = mTasks.get(i);
                taskIdMap.put(t.key.id, t);
            }

            for (int i = 0; i < taskCount; i++) {
                Task t = mTasks.get(i);
                if (mFilter.acceptTask(taskIdMap, t, i)) {
                    mFilteredTasks.add(t);
                }
            }
        } else {
            mFilteredTasks.addAll(mTasks);
        }
        updateFilteredTaskIndices();
!!!71814327.java!!!	updateFilteredTaskIndices() : void
        int taskCount = mFilteredTasks.size();
        mTaskIndices.clear();
        for (int i = 0; i < taskCount; i++) {
            Task t = mFilteredTasks.get(i);
            mTaskIndices.put(t.key, i);
        }
!!!71814455.java!!!	hasFilter() : boolean
        return (mFilter != null);
!!!71814583.java!!!	getTasks() : Task
        return mFilteredTasks;
