class NotificationData
!!!71974711.java!!!	setHeadsUpManager(inout headsUpManager : HeadsUpManager) : void
        mHeadsUpManager = headsUpManager;
!!!71974839.java!!!	NotificationData(inout environment : NotificationData::Environment)
        mEnvironment = environment;
        mGroupManager = environment.getGroupManager();
!!!71974967.java!!!	getActiveNotifications() : NotificationData::Entry
        return mSortedAndFiltered;
!!!71975095.java!!!	get(inout key : String) : NotificationData::Entry
        return mEntries.get(key);
!!!71975223.java!!!	add(inout entry : NotificationData::Entry, inout ranking : NotificationListenerService::RankingMap) : void
        synchronized (mEntries) {
            mEntries.put(entry.notification.getKey(), entry);
        }
        mGroupManager.onEntryAdded(entry);
        updateRankingAndSort(ranking);
!!!71975351.java!!!	remove(inout key : String, inout ranking : NotificationListenerService::RankingMap) : NotificationData::Entry
        Entry removed = null;
        synchronized (mEntries) {
            removed = mEntries.remove(key);
        }
        if (removed == null) return null;
        mGroupManager.onEntryRemoved(removed);
        updateRankingAndSort(ranking);
        return removed;
!!!71975479.java!!!	updateRanking(inout ranking : NotificationListenerService::RankingMap) : void
        updateRankingAndSort(ranking);
!!!71975607.java!!!	isAmbient(inout key : String) : boolean
        if (mRankingMap != null) {
            mRankingMap.getRanking(key, mTmpRanking);
            return mTmpRanking.isAmbient();
        }
        return false;
!!!71975735.java!!!	getVisibilityOverride(inout key : String) : int
        if (mRankingMap != null) {
            mRankingMap.getRanking(key, mTmpRanking);
            return mTmpRanking.getVisibilityOverride();
        }
        return Ranking.VISIBILITY_NO_OVERRIDE;
!!!71975863.java!!!	shouldSuppressScreenOff(inout key : String) : boolean
        if (mRankingMap != null) {
            mRankingMap.getRanking(key, mTmpRanking);
            return (mTmpRanking.getSuppressedVisualEffects()
                    & NotificationListenerService.SUPPRESSED_EFFECT_SCREEN_OFF) != 0;
        }
        return false;
!!!71975991.java!!!	shouldSuppressScreenOn(inout key : String) : boolean
        if (mRankingMap != null) {
            mRankingMap.getRanking(key, mTmpRanking);
            return (mTmpRanking.getSuppressedVisualEffects()
                    & NotificationListenerService.SUPPRESSED_EFFECT_SCREEN_ON) != 0;
        }
        return false;
!!!71976119.java!!!	getImportance(inout key : String) : int
        if (mRankingMap != null) {
            mRankingMap.getRanking(key, mTmpRanking);
            return mTmpRanking.getImportance();
        }
        return Ranking.IMPORTANCE_UNSPECIFIED;
!!!71976247.java!!!	getOverrideGroupKey(inout key : String) : String
        if (mRankingMap != null) {
            mRankingMap.getRanking(key, mTmpRanking);
            return mTmpRanking.getOverrideGroupKey();
        }
         return null;
!!!71976375.java!!!	updateRankingAndSort(inout ranking : NotificationListenerService::RankingMap) : void
        if (ranking != null) {
            mRankingMap = ranking;
            synchronized (mEntries) {
                final int N = mEntries.size();
                for (int i = 0; i < N; i++) {
                    Entry entry = mEntries.valueAt(i);
                    final StatusBarNotification oldSbn = entry.notification.clone();
                    final String overrideGroupKey = getOverrideGroupKey(entry.key);
                    if (!Objects.equals(oldSbn.getOverrideGroupKey(), overrideGroupKey)) {
                        entry.notification.setOverrideGroupKey(overrideGroupKey);
                        mGroupManager.onEntryUpdated(entry, oldSbn);
                    }
                    //mGroupManager.onEntryBundlingUpdated(entry, getOverrideGroupKey(entry.key));
                }
            }
        }
        filterAndSort();
!!!71976503.java!!!	filterAndSort() : void
        mSortedAndFiltered.clear();

        synchronized (mEntries) {
            final int N = mEntries.size();
            for (int i = 0; i < N; i++) {
                Entry entry = mEntries.valueAt(i);
                StatusBarNotification sbn = entry.notification;

                if (shouldFilterOut(sbn)) {
                    continue;
                }

                mSortedAndFiltered.add(entry);
            }
        }

        Collections.sort(mSortedAndFiltered, mRankingComparator);
!!!71976631.java!!!	shouldFilterOut(inout sbn : StatusBarNotification) : boolean
        if (!(mEnvironment.isDeviceProvisioned() ||
                showNotificationEvenIfUnprovisioned(sbn))) {
            return true;
        }

        if (!mEnvironment.isNotificationForCurrentProfiles(sbn)) {
            return true;
        }

        if (mEnvironment.onSecureLockScreen() &&
                (sbn.getNotification().visibility == Notification.VISIBILITY_SECRET
                        || mEnvironment.shouldHideNotifications(sbn.getUserId())
                        || mEnvironment.shouldHideNotifications(sbn.getKey()))) {
            return true;
        }

        if (!BaseStatusBar.ENABLE_CHILD_NOTIFICATIONS
                && mGroupManager.isChildInGroupWithSummary(sbn)) {
            return true;
        }
        return false;
!!!71976759.java!!!	hasActiveClearableNotifications() : boolean
        for (Entry e : mSortedAndFiltered) {
            if (e.getContentView() != null) { // the view successfully inflated
                if (e.notification.isClearable()) {
                    return true;
                }
            }
        }
        return false;
!!!71976887.java!!!	showNotificationEvenIfUnprovisioned(inout sbn : StatusBarNotification) : boolean
        return "android".equals(sbn.getPackageName())
                && sbn.getNotification().extras.getBoolean(Notification.EXTRA_ALLOW_DURING_SETUP);
!!!71977015.java!!!	dump(inout pw : PrintWriter, inout indent : String) : void
        int N = mSortedAndFiltered.size();
        pw.print(indent);
        pw.println("active notifications: " + N);
        int active;
        for (active = 0; active < N; active++) {
            NotificationData.Entry e = mSortedAndFiltered.get(active);
            dumpEntry(pw, indent, active, e);
        }
        synchronized (mEntries) {
            int M = mEntries.size();
            pw.print(indent);
            pw.println("inactive notifications: " + (M - active));
            int inactiveCount = 0;
            for (int i = 0; i < M; i++) {
                Entry entry = mEntries.valueAt(i);
                if (!mSortedAndFiltered.contains(entry)) {
                    dumpEntry(pw, indent, inactiveCount, entry);
                    inactiveCount++;
                }
            }
        }
!!!71977143.java!!!	dumpEntry(inout pw : PrintWriter, inout indent : String, in i : int, inout e : NotificationData::Entry) : void
        mRankingMap.getRanking(e.key, mTmpRanking);
        pw.print(indent);
        pw.println("  [" + i + "] key=" + e.key + " icon=" + e.icon);
        StatusBarNotification n = e.notification;
        pw.print(indent);
        pw.println("      pkg=" + n.getPackageName() + " id=" + n.getId() + " importance=" +
                mTmpRanking.getImportance());
        pw.print(indent);
        pw.println("      notification=" + n.getNotification());
        pw.print(indent);
        pw.println("      tickerText=\"" + n.getNotification().tickerText + "\"");
!!!71977271.java!!!	isSystemNotification(inout sbn : StatusBarNotification) : boolean
        String sbnPackage = sbn.getPackageName();
        return "android".equals(sbnPackage) || "com.android.systemui".equals(sbnPackage);
