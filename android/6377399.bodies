class RemoteInputController
!!!72022327.java!!!	RemoteInputController(inout sbwm : StatusBarWindowManager, inout headsUpManager : HeadsUpManager)
        addCallback(sbwm);
        mHeadsUpManager = headsUpManager;
!!!72022455.java!!!	addRemoteInput(inout entry : NotificationData::Entry) : void
        Preconditions.checkNotNull(entry);

        boolean found = pruneWeakThenRemoveAndContains(
                entry /* contains */, null /* remove */);
        if (!found) {
            mOpen.add(new WeakReference<>(entry));
        }

        apply(entry);
!!!72022583.java!!!	removeRemoteInput(inout entry : NotificationData::Entry) : void
        Preconditions.checkNotNull(entry);

        pruneWeakThenRemoveAndContains(null /* contains */, entry /* remove */);

        apply(entry);
!!!72022711.java!!!	addSpinning(inout key : String) : void
        mSpinning.add(key);
!!!72022839.java!!!	removeSpinning(inout key : String) : void
        mSpinning.remove(key);
!!!72022967.java!!!	isSpinning(inout key : String) : boolean
        return mSpinning.contains(key);
!!!72023095.java!!!	apply(inout entry : NotificationData::Entry) : void
        mHeadsUpManager.setRemoteInputActive(entry, isRemoteInputActive(entry));
        boolean remoteInputActive = isRemoteInputActive();
        int N = mCallbacks.size();
        for (int i = 0; i < N; i++) {
            mCallbacks.get(i).onRemoteInputActive(remoteInputActive);
        }
!!!72023223.java!!!	isRemoteInputActive(inout entry : NotificationData::Entry) : boolean
        return pruneWeakThenRemoveAndContains(entry /* contains */, null /* remove */);
!!!72023351.java!!!	isRemoteInputActive() : boolean
        pruneWeakThenRemoveAndContains(null /* contains */, null /* remove */);
        return !mOpen.isEmpty();
!!!72023479.java!!!	pruneWeakThenRemoveAndContains(inout contains : NotificationData::Entry, inout remove : NotificationData::Entry) : boolean
        boolean found = false;
        for (int i = mOpen.size() - 1; i >= 0; i--) {
            NotificationData.Entry item = mOpen.get(i).get();
            if (item == null || item == remove) {
                mOpen.remove(i);
            } else if (item == contains) {
                found = true;
            }
        }
        return found;
!!!72023607.java!!!	addCallback(inout callback : RemoteInputController::Callback) : void
        Preconditions.checkNotNull(callback);
        mCallbacks.add(callback);
!!!72023735.java!!!	remoteInputSent(inout entry : NotificationData::Entry) : void
        int N = mCallbacks.size();
        for (int i = 0; i < N; i++) {
            mCallbacks.get(i).onRemoteInputSent(entry);
        }
!!!72023863.java!!!	closeRemoteInputs() : void
        if (mOpen.size() == 0) {
            return;
        }

        // Make a copy because closing the remote inputs will modify mOpen.
        ArrayList<NotificationData.Entry> list = new ArrayList<>(mOpen.size());
        for (int i = mOpen.size() - 1; i >= 0; i--) {
            NotificationData.Entry item = mOpen.get(i).get();
            if (item != null && item.row != null) {
                list.add(item);
            }
        }

        for (int i = list.size() - 1; i >= 0; i--) {
            NotificationData.Entry item = list.get(i);
            if (item.row != null) {
                item.row.closeRemoteInput();
            }
        }
