class StackScrollState
!!!72377527.java!!!	StackScrollState(inout hostView : ViewGroup)
        mHostView = hostView;
        mStateMap = new WeakHashMap<>();
        mClearAllTopPadding = hostView.getContext().getResources().getDimensionPixelSize(
                R.dimen.clear_all_padding_top);
!!!72377655.java!!!	getHostView() : ViewGroup
        return mHostView;
!!!72377783.java!!!	resetViewStates() : void
        int numChildren = mHostView.getChildCount();
        for (int i = 0; i < numChildren; i++) {
            ExpandableView child = (ExpandableView) mHostView.getChildAt(i);
            resetViewState(child);

            // handling reset for child notifications
            if (child instanceof ExpandableNotificationRow) {
                ExpandableNotificationRow row = (ExpandableNotificationRow) child;
                List<ExpandableNotificationRow> children =
                        row.getNotificationChildren();
                if (row.isSummaryWithChildren() && children != null) {
                    for (ExpandableNotificationRow childRow : children) {
                        resetViewState(childRow);
                    }
                }
            }
        }
!!!72377911.java!!!	resetViewState(inout view : ExpandableView) : void
        StackViewState viewState = mStateMap.get(view);
        if (viewState == null) {
            viewState = new StackViewState();
            mStateMap.put(view, viewState);
        }
        // initialize with the default values of the view
        viewState.height = view.getIntrinsicHeight();
        viewState.gone = view.getVisibility() == View.GONE;
        viewState.alpha = 1f;
        viewState.shadowAlpha = 1f;
        viewState.notGoneIndex = -1;
        viewState.hidden = false;
!!!72378039.java!!!	getViewStateForView(inout requestedView : View) : StackViewState
        return mStateMap.get(requestedView);
!!!72378167.java!!!	removeViewStateForView(inout child : View) : void
        mStateMap.remove(child);
!!!72378295.java!!!	apply() : void
        int numChildren = mHostView.getChildCount();
        for (int i = 0; i < numChildren; i++) {
            ExpandableView child = (ExpandableView) mHostView.getChildAt(i);
            StackViewState state = mStateMap.get(child);
            if (!applyState(child, state)) {
                continue;
            }
            if (child instanceof DismissView) {
                DismissView dismissView = (DismissView) child;
                boolean visible = state.clipTopAmount < mClearAllTopPadding;
                dismissView.performVisibilityAnimation(visible && !dismissView.willBeGone());
            } else if (child instanceof EmptyShadeView) {
                EmptyShadeView emptyShadeView = (EmptyShadeView) child;
                boolean visible = state.clipTopAmount <= 0;
                emptyShadeView.performVisibilityAnimation(
                        visible && !emptyShadeView.willBeGone());
            }
        }
!!!72378423.java!!!	applyState(inout view : ExpandableView, inout state : StackViewState) : boolean
        if (state == null) {
            Log.wtf(CHILD_NOT_FOUND_TAG, "No child state was found when applying this state " +
                    "to the hostView");
            return false;
        }
        if (state.gone) {
            return false;
        }
        applyViewState(view, state);

        int height = view.getActualHeight();
        int newHeight = state.height;

        // apply height
        if (height != newHeight) {
            view.setActualHeight(newHeight, false /* notifyListeners */);
        }

        float shadowAlpha = view.getShadowAlpha();
        float newShadowAlpha = state.shadowAlpha;

        // apply shadowAlpha
        if (shadowAlpha != newShadowAlpha) {
            view.setShadowAlpha(newShadowAlpha);
        }

        // apply dimming
        view.setDimmed(state.dimmed, false /* animate */);

        // apply hiding sensitive
        view.setHideSensitive(
                state.hideSensitive, false /* animated */, 0 /* delay */, 0 /* duration */);

        // apply speed bump state
        view.setBelowSpeedBump(state.belowSpeedBump);

        // apply dark
        view.setDark(state.dark, false /* animate */, 0 /* delay */);

        // apply clipping
        float oldClipTopAmount = view.getClipTopAmount();
        if (oldClipTopAmount != state.clipTopAmount) {
            view.setClipTopAmount(state.clipTopAmount);
        }
        if (view instanceof ExpandableNotificationRow) {
            ExpandableNotificationRow row = (ExpandableNotificationRow) view;
            if (state.isBottomClipped) {
                row.setClipToActualHeight(true);
            }
            row.applyChildrenState(this);
        }
        return true;
!!!72378551.java!!!	applyViewState(inout view : View, inout state : ViewState) : void
        float alpha = view.getAlpha();
        float yTranslation = view.getTranslationY();
        float xTranslation = view.getTranslationX();
        float zTranslation = view.getTranslationZ();
        float newAlpha = state.alpha;
        float newYTranslation = state.yTranslation;
        float newZTranslation = state.zTranslation;
        boolean becomesInvisible = newAlpha == 0.0f || state.hidden;
        if (alpha != newAlpha && xTranslation == 0) {
            // apply layer type
            boolean becomesFullyVisible = newAlpha == 1.0f;
            boolean newLayerTypeIsHardware = !becomesInvisible && !becomesFullyVisible
                    && view.hasOverlappingRendering();
            int layerType = view.getLayerType();
            int newLayerType = newLayerTypeIsHardware
                    ? View.LAYER_TYPE_HARDWARE
                    : View.LAYER_TYPE_NONE;
            if (layerType != newLayerType) {
                view.setLayerType(newLayerType, null);
            }

            // apply alpha
            view.setAlpha(newAlpha);
        }

        // apply visibility
        int oldVisibility = view.getVisibility();
        int newVisibility = becomesInvisible ? View.INVISIBLE : View.VISIBLE;
        if (newVisibility != oldVisibility) {
            if (!(view instanceof ExpandableView) || !((ExpandableView) view).willBeGone()) {
                // We don't want views to change visibility when they are animating to GONE
                view.setVisibility(newVisibility);
            }
        }

        // apply yTranslation
        if (yTranslation != newYTranslation) {
            view.setTranslationY(newYTranslation);
        }

        // apply zTranslation
        if (zTranslation != newZTranslation) {
            view.setTranslationZ(newZTranslation);
        }
