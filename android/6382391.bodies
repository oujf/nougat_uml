class HeaderProcessor
!!!72014263.java!!!	forTextView(inout row : ExpandableNotificationRow, in id : int) : NotificationHeaderUtil::HeaderProcessor
            return new HeaderProcessor(row, id, null, sTextViewComparator, sVisibilityApplicator);
!!!72014391.java!!!	HeaderProcessor(inout row : ExpandableNotificationRow, in id : int, inout extractor : NotificationHeaderUtil::DataExtractor, inout comparator : NotificationHeaderUtil::ViewComparator, inout applicator : NotificationHeaderUtil::ResultApplicator)
            mId = id;
            mExtractor = extractor;
            mApplicator = applicator;
            mComparator = comparator;
            mParentRow = row;
!!!72014519.java!!!	init() : void
            mParentView = mParentRow.getNotificationHeader().findViewById(mId);
            mParentData = mExtractor == null ? null : mExtractor.extractData(mParentRow);
            mApply = !mComparator.isEmpty(mParentView);
!!!72014647.java!!!	compareToHeader(inout row : ExpandableNotificationRow) : void
            if (!mApply) {
                return;
            }
            NotificationHeaderView header = row.getNotificationHeader();
            if (header == null) {
                mApply = false;
                return;
            }
            Object childData = mExtractor == null ? null : mExtractor.extractData(row);
            mApply = mComparator.compare(mParentView, header.findViewById(mId),
                    mParentData, childData);
!!!72014775.java!!!	apply(inout row : ExpandableNotificationRow) : void
            apply(row, false /* reset */);
!!!72014903.java!!!	apply(inout row : ExpandableNotificationRow, inout reset : boolean) : void
            boolean apply = mApply && !reset;
            if (row.isSummaryWithChildren()) {
                applyToView(apply, row.getNotificationHeader());
                return;
            }
            applyToView(apply, row.getPrivateLayout().getContractedChild());
            applyToView(apply, row.getPrivateLayout().getHeadsUpChild());
            applyToView(apply, row.getPrivateLayout().getExpandedChild());
!!!72015031.java!!!	applyToView(inout apply : boolean, inout parent : View) : void
            if (parent != null) {
                View view = parent.findViewById(mId);
                if (view != null && !mComparator.isEmpty(view)) {
                    mApplicator.apply(view, apply);
                }
            }
