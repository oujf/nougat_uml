class TransformState
!!!72056503.java!!!	initFrom(inout view : View) : void
        mTransformedView = view;
!!!72056631.java!!!	transformViewFrom(inout otherState : TransformState, in transformationAmount : float) : void
        mTransformedView.animate().cancel();
        if (sameAs(otherState)) {
            if (mTransformedView.getVisibility() == View.INVISIBLE) {
                // We have the same content, lets show ourselves
                mTransformedView.setAlpha(1.0f);
                mTransformedView.setVisibility(View.VISIBLE);
            }
        } else {
            CrossFadeHelper.fadeIn(mTransformedView, transformationAmount);
        }
        transformViewFullyFrom(otherState, transformationAmount);
!!!72056759.java!!!	transformViewFullyFrom(inout otherState : TransformState, in transformationAmount : float) : void
        transformViewFrom(otherState, TRANSOFORM_ALL, null, transformationAmount);
!!!72056887.java!!!	transformViewVerticalFrom(inout otherState : TransformState, inout customTransformation : ViewTransformationHelper::CustomTransformation, in transformationAmount : float) : void
        transformViewFrom(otherState, TRANSOFORM_Y, customTransformation, transformationAmount);
!!!72057015.java!!!	transformViewVerticalFrom(inout otherState : TransformState, in transformationAmount : float) : void
        transformViewFrom(otherState, TRANSOFORM_Y, null, transformationAmount);
!!!72057143.java!!!	transformViewFrom(inout otherState : TransformState, in transformationFlags : int, inout customTransformation : ViewTransformationHelper::CustomTransformation, in transformationAmount : float) : void
        final View transformedView = mTransformedView;
        boolean transformX = (transformationFlags & TRANSOFORM_X) != 0;
        boolean transformY = (transformationFlags & TRANSOFORM_Y) != 0;
        boolean transformScale = transformScale();
        // lets animate the positions correctly
        if (transformationAmount == 0.0f
                || transformX && getTransformationStartX() == UNDEFINED
                || transformY && getTransformationStartY() == UNDEFINED
                || transformScale && getTransformationStartScaleX() == UNDEFINED
                || transformScale && getTransformationStartScaleY() == UNDEFINED) {
            int[] otherPosition;
            if (transformationAmount != 0.0f) {
                otherPosition = otherState.getLaidOutLocationOnScreen();
            } else {
                otherPosition = otherState.getLocationOnScreen();
            }
            int[] ownStablePosition = getLaidOutLocationOnScreen();
            if (customTransformation == null
                    || !customTransformation.initTransformation(this, otherState)) {
                if (transformX) {
                    setTransformationStartX(otherPosition[0] - ownStablePosition[0]);
                }
                if (transformY) {
                    setTransformationStartY(otherPosition[1] - ownStablePosition[1]);
                }
                // we also want to animate the scale if we're the same
                View otherView = otherState.getTransformedView();
                if (transformScale && otherView.getWidth() != transformedView.getWidth()) {
                    setTransformationStartScaleX(otherView.getWidth() * otherView.getScaleX()
                            / (float) transformedView.getWidth());
                    transformedView.setPivotX(0);
                } else {
                    setTransformationStartScaleX(UNDEFINED);
                }
                if (transformScale && otherView.getHeight() != transformedView.getHeight()) {
                    setTransformationStartScaleY(otherView.getHeight() * otherView.getScaleY()
                            / (float) transformedView.getHeight());
                    transformedView.setPivotY(0);
                } else {
                    setTransformationStartScaleY(UNDEFINED);
                }
            }
            if (!transformX) {
                setTransformationStartX(UNDEFINED);
            }
            if (!transformY) {
                setTransformationStartY(UNDEFINED);
            }
            if (!transformScale) {
                setTransformationStartScaleX(UNDEFINED);
                setTransformationStartScaleY(UNDEFINED);
            }
            setClippingDeactivated(transformedView, true);
        }
        float interpolatedValue = Interpolators.FAST_OUT_SLOW_IN.getInterpolation(
                transformationAmount);
        if (transformX) {
            transformedView.setTranslationX(NotificationUtils.interpolate(getTransformationStartX(),
                    0.0f,
                    interpolatedValue));
        }
        if (transformY) {
            transformedView.setTranslationY(NotificationUtils.interpolate(getTransformationStartY(),
                    0.0f,
                    interpolatedValue));
        }
        if (transformScale) {
            float transformationStartScaleX = getTransformationStartScaleX();
            if (transformationStartScaleX != UNDEFINED) {
                transformedView.setScaleX(
                        NotificationUtils.interpolate(transformationStartScaleX,
                                1.0f,
                                interpolatedValue));
            }
            float transformationStartScaleY = getTransformationStartScaleY();
            if (transformationStartScaleY != UNDEFINED) {
                transformedView.setScaleY(
                        NotificationUtils.interpolate(transformationStartScaleY,
                                1.0f,
                                interpolatedValue));
            }
        }
!!!72057271.java!!!	transformScale() : boolean
        return false;
!!!72057399.java!!!	transformViewTo(inout otherState : TransformState, in transformationAmount : float) : boolean
        mTransformedView.animate().cancel();
        if (sameAs(otherState)) {
            // We have the same text, lets show ourselfs
            if (mTransformedView.getVisibility() == View.VISIBLE) {
                mTransformedView.setAlpha(0.0f);
                mTransformedView.setVisibility(View.INVISIBLE);
            }
            return false;
        } else {
            CrossFadeHelper.fadeOut(mTransformedView, transformationAmount);
        }
        transformViewFullyTo(otherState, transformationAmount);
        return true;
!!!72057527.java!!!	transformViewFullyTo(inout otherState : TransformState, in transformationAmount : float) : void
        transformViewTo(otherState, TRANSOFORM_ALL, null, transformationAmount);
!!!72057655.java!!!	transformViewVerticalTo(inout otherState : TransformState, inout customTransformation : ViewTransformationHelper::CustomTransformation, in transformationAmount : float) : void
        transformViewTo(otherState, TRANSOFORM_Y, customTransformation, transformationAmount);
!!!72057783.java!!!	transformViewVerticalTo(inout otherState : TransformState, in transformationAmount : float) : void
        transformViewTo(otherState, TRANSOFORM_Y, null, transformationAmount);
!!!72057911.java!!!	transformViewTo(inout otherState : TransformState, in transformationFlags : int, inout customTransformation : ViewTransformationHelper::CustomTransformation, in transformationAmount : float) : void
        // lets animate the positions correctly

        final View transformedView = mTransformedView;
        boolean transformX = (transformationFlags & TRANSOFORM_X) != 0;
        boolean transformY = (transformationFlags & TRANSOFORM_Y) != 0;
        boolean transformScale = transformScale();
        // lets animate the positions correctly
        if (transformationAmount == 0.0f) {
            if (transformX) {
                float transformationStartX = getTransformationStartX();
                float start = transformationStartX != UNDEFINED ? transformationStartX
                        : transformedView.getTranslationX();
                setTransformationStartX(start);
            }
            if (transformY) {
                float transformationStartY = getTransformationStartY();
                float start = transformationStartY != UNDEFINED ? transformationStartY
                        : transformedView.getTranslationY();
                setTransformationStartY(start);
            }
            View otherView = otherState.getTransformedView();
            if (transformScale && otherView.getWidth() != transformedView.getWidth()) {
                setTransformationStartScaleX(transformedView.getScaleX());
                transformedView.setPivotX(0);
            } else {
                setTransformationStartScaleX(UNDEFINED);
            }
            if (transformScale && otherView.getHeight() != transformedView.getHeight()) {
                setTransformationStartScaleY(transformedView.getScaleY());
                transformedView.setPivotY(0);
            } else {
                setTransformationStartScaleY(UNDEFINED);
            }
            setClippingDeactivated(transformedView, true);
        }
        float interpolatedValue = Interpolators.FAST_OUT_SLOW_IN.getInterpolation(
                transformationAmount);
        int[] otherStablePosition = otherState.getLaidOutLocationOnScreen();
        int[] ownPosition = getLaidOutLocationOnScreen();
        if (transformX) {
            float endX = otherStablePosition[0] - ownPosition[0];
            if (customTransformation != null
                    && customTransformation.customTransformTarget(this, otherState)) {
                endX = mTransformationEndX;
            }
            transformedView.setTranslationX(NotificationUtils.interpolate(getTransformationStartX(),
                    endX,
                    interpolatedValue));
        }
        if (transformY) {
            float endY = otherStablePosition[1] - ownPosition[1];
            if (customTransformation != null
                    && customTransformation.customTransformTarget(this, otherState)) {
                endY = mTransformationEndY;
            }
            transformedView.setTranslationY(NotificationUtils.interpolate(getTransformationStartY(),
                    endY,
                    interpolatedValue));
        }
        if (transformScale) {
            View otherView = otherState.getTransformedView();
            float transformationStartScaleX = getTransformationStartScaleX();
            if (transformationStartScaleX != UNDEFINED) {
                transformedView.setScaleX(
                        NotificationUtils.interpolate(transformationStartScaleX,
                                (otherView.getWidth() / (float) transformedView.getWidth()),
                                interpolatedValue));
            }
            float transformationStartScaleY = getTransformationStartScaleY();
            if (transformationStartScaleY != UNDEFINED) {
                transformedView.setScaleY(
                        NotificationUtils.interpolate(transformationStartScaleY,
                                (otherView.getHeight() / (float) transformedView.getHeight()),
                                interpolatedValue));
            }
        }
!!!72058039.java!!!	setClippingDeactivated(in transformedView : View, inout deactivated : boolean) : void
        if (!(transformedView.getParent() instanceof ViewGroup)) {
            return;
        }
        ViewGroup view = (ViewGroup) transformedView.getParent();
        while (true) {
            ArraySet<View> clipSet = (ArraySet<View>) view.getTag(CLIP_CLIPPING_SET);
            if (clipSet == null) {
                clipSet = new ArraySet<>();
                view.setTag(CLIP_CLIPPING_SET, clipSet);
            }
            Boolean clipChildren = (Boolean) view.getTag(CLIP_CHILDREN_TAG);
            if (clipChildren == null) {
                clipChildren = view.getClipChildren();
                view.setTag(CLIP_CHILDREN_TAG, clipChildren);
            }
            Boolean clipToPadding = (Boolean) view.getTag(CLIP_TO_PADDING);
            if (clipToPadding == null) {
                clipToPadding = view.getClipToPadding();
                view.setTag(CLIP_TO_PADDING, clipToPadding);
            }
            ExpandableNotificationRow row = view instanceof ExpandableNotificationRow
                    ? (ExpandableNotificationRow) view
                    : null;
            if (!deactivated) {
                clipSet.remove(transformedView);
                if (clipSet.isEmpty()) {
                    view.setClipChildren(clipChildren);
                    view.setClipToPadding(clipToPadding);
                    view.setTag(CLIP_CLIPPING_SET, null);
                    if (row != null) {
                        row.setClipToActualHeight(true);
                    }
                }
            } else {
                clipSet.add(transformedView);
                view.setClipChildren(false);
                view.setClipToPadding(false);
                if (row != null && row.isChildInGroup()) {
                    // We still want to clip to the parent's height
                    row.setClipToActualHeight(false);
                }
            }
            if (row != null && !row.isChildInGroup()) {
                return;
            }
            final ViewParent parent = view.getParent();
            if (parent instanceof ViewGroup) {
                view = (ViewGroup) parent;
            } else {
                return;
            }
        }
!!!72058167.java!!!	getLaidOutLocationOnScreen() : int
        int[] location = getLocationOnScreen();
        location[0] -= mTransformedView.getTranslationX();
        location[1] -= mTransformedView.getTranslationY();
        return location;
!!!72058295.java!!!	getLocationOnScreen() : int
        mTransformedView.getLocationOnScreen(mOwnPosition);
        return mOwnPosition;
!!!72058423.java!!!	sameAs(inout otherState : TransformState) : boolean
        return false;
!!!72058551.java!!!	createFrom(inout view : View) : TransformState
        if (view instanceof TextView) {
            TextViewTransformState result = TextViewTransformState.obtain();
            result.initFrom(view);
            return result;
        }
        if (view.getId() == com.android.internal.R.id.actions_container) {
            ActionListTransformState result = ActionListTransformState.obtain();
            result.initFrom(view);
            return result;
        }
        if (view instanceof NotificationHeaderView) {
            HeaderTransformState result = HeaderTransformState.obtain();
            result.initFrom(view);
            return result;
        }
        if (view instanceof ImageView) {
            ImageTransformState result = ImageTransformState.obtain();
            result.initFrom(view);
            return result;
        }
        if (view instanceof ProgressBar) {
            ProgressTransformState result = ProgressTransformState.obtain();
            result.initFrom(view);
            return result;
        }
        TransformState result = obtain();
        result.initFrom(view);
        return result;
!!!72058679.java!!!	recycle() : void
        reset();
        if (getClass() == TransformState.class) {
            sInstancePool.release(this);
        }
!!!72058807.java!!!	setTransformationEndY(in transformationEndY : float) : void
        mTransformationEndY = transformationEndY;
!!!72058935.java!!!	setTransformationEndX(in transformationEndX : float) : void
        mTransformationEndX = transformationEndX;
!!!72059063.java!!!	getTransformationStartX() : float
        Object tag = mTransformedView.getTag(TRANSFORMATION_START_X);
        return tag == null ? UNDEFINED : (float) tag;
!!!72059191.java!!!	getTransformationStartY() : float
        Object tag = mTransformedView.getTag(TRANSFORMATION_START_Y);
        return tag == null ? UNDEFINED : (float) tag;
!!!72059319.java!!!	getTransformationStartScaleX() : float
        Object tag = mTransformedView.getTag(TRANSFORMATION_START_SCLALE_X);
        return tag == null ? UNDEFINED : (float) tag;
!!!72059447.java!!!	getTransformationStartScaleY() : float
        Object tag = mTransformedView.getTag(TRANSFORMATION_START_SCLALE_Y);
        return tag == null ? UNDEFINED : (float) tag;
!!!72059575.java!!!	setTransformationStartX(in transformationStartX : float) : void
        mTransformedView.setTag(TRANSFORMATION_START_X, transformationStartX);
!!!72059703.java!!!	setTransformationStartY(in transformationStartY : float) : void
        mTransformedView.setTag(TRANSFORMATION_START_Y, transformationStartY);
!!!72059831.java!!!	setTransformationStartScaleX(in startScaleX : float) : void
        mTransformedView.setTag(TRANSFORMATION_START_SCLALE_X, startScaleX);
!!!72059959.java!!!	setTransformationStartScaleY(in startScaleY : float) : void
        mTransformedView.setTag(TRANSFORMATION_START_SCLALE_Y, startScaleY);
!!!72060087.java!!!	reset() : void
        mTransformedView = null;
        mTransformationEndX = UNDEFINED;
        mTransformationEndY = UNDEFINED;
!!!72060215.java!!!	setVisible(inout visible : boolean, inout force : boolean) : void
        if (!force && mTransformedView.getVisibility() == View.GONE) {
            return;
        }
        if (mTransformedView.getVisibility() != View.GONE) {
            mTransformedView.setVisibility(visible ? View.VISIBLE : View.INVISIBLE);
        }
        mTransformedView.animate().cancel();
        mTransformedView.setAlpha(visible ? 1.0f : 0.0f);
        resetTransformedView();
!!!72060343.java!!!	prepareFadeIn() : void
        resetTransformedView();
!!!72060471.java!!!	resetTransformedView() : void
        mTransformedView.setTranslationX(0);
        mTransformedView.setTranslationY(0);
        mTransformedView.setScaleX(1.0f);
        mTransformedView.setScaleY(1.0f);
        setClippingDeactivated(mTransformedView, false);
        abortTransformation();
!!!72060599.java!!!	abortTransformation() : void
        mTransformedView.setTag(TRANSFORMATION_START_X, UNDEFINED);
        mTransformedView.setTag(TRANSFORMATION_START_Y, UNDEFINED);
        mTransformedView.setTag(TRANSFORMATION_START_SCLALE_X, UNDEFINED);
        mTransformedView.setTag(TRANSFORMATION_START_SCLALE_Y, UNDEFINED);
!!!72060727.java!!!	obtain() : TransformState
        TransformState instance = sInstancePool.acquire();
        if (instance != null) {
            return instance;
        }
        return new TransformState();
!!!72060855.java!!!	getTransformedView() : View
        return mTransformedView;
