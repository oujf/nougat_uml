class KeyguardUserSwitcherScrim
!!!72314935.java!!!	KeyguardUserSwitcherScrim(inout context : Context)
        mDarkColor = context.getColor(
                R.color.keyguard_user_switcher_background_gradient_color);
!!!72315063.java!!!	draw(inout canvas : Canvas) : void
        boolean isLtr = getLayoutDirection() == LayoutDirection.LTR;
        Rect bounds = getBounds();
        float width = bounds.width() * OUTER_EXTENT;
        float height = (mTop + bounds.height()) * OUTER_EXTENT;
        canvas.translate(0, -mTop);
        canvas.scale(1, height / width);
        canvas.drawRect(isLtr ? bounds.right - width : 0, 0,
                isLtr ? bounds.right : bounds.left + width, width, mRadialGradientPaint);
!!!72315191.java!!!	setAlpha(in alpha : int) : void
        mAlpha = alpha;
        updatePaint();
        invalidateSelf();
!!!72315319.java!!!	getAlpha() : int
        return mAlpha;
!!!72315575.java!!!	getOpacity() : int
        return PixelFormat.TRANSLUCENT;
!!!72315703.java!!!	onLayoutChange(inout v : View, in left : int, in top : int, in right : int, in bottom : int, in oldLeft : int, in oldTop : int, in oldRight : int, in oldBottom : int) : void
        if (left != oldLeft || top != oldTop || right != oldRight || bottom != oldBottom) {
            mLayoutWidth = right - left;
            mTop = top;
            updatePaint();
        }
!!!72315831.java!!!	updatePaint() : void
        if (mLayoutWidth == 0) {
            return;
        }
        float radius = mLayoutWidth * OUTER_EXTENT;
        boolean isLtr = getLayoutDirection() == LayoutDirection.LTR;
        mRadialGradientPaint.setShader(
                new RadialGradient(isLtr ? mLayoutWidth : 0, 0, radius,
                        new int[] { Color.argb(
                                        (int) (Color.alpha(mDarkColor) * mAlpha / 255f), 0, 0, 0),
                                Color.TRANSPARENT },
                        new float[] { Math.max(0f, mLayoutWidth * INNER_EXTENT / radius), 1f },
                        Shader.TileMode.CLAMP));
