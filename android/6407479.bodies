class NavBarTuner
!!!72395831.java!!!	onCreateView(inout inflater : LayoutInflater, inout container : ViewGroup, inout savedInstanceState : Bundle) : View
        final View view = inflater.inflate(R.layout.nav_bar_tuner, container, false);
        inflatePreview((ViewGroup) view.findViewById(R.id.nav_preview_frame));
        return view;
!!!72395959.java!!!	inflatePreview(inout view : ViewGroup) : void
        Display display = getActivity().getWindowManager().getDefaultDisplay();
        boolean isRotated = display.getRotation() == Surface.ROTATION_90
                || display.getRotation() == Surface.ROTATION_270;

        Configuration config = new Configuration(getContext().getResources().getConfiguration());
        boolean isPhoneLandscape = isRotated && (config.smallestScreenWidthDp < 600);
        final float scale = isPhoneLandscape ? PREVIEW_SCALE_LANDSCAPE : PREVIEW_SCALE;
        config.densityDpi = (int) (config.densityDpi * scale);

        mPreview = (PreviewNavInflater) LayoutInflater.from(getContext().createConfigurationContext(
                config)).inflate(R.layout.nav_bar_tuner_inflater, view, false);
        final ViewGroup.LayoutParams layoutParams = mPreview.getLayoutParams();
        layoutParams.width = (int) ((isPhoneLandscape ? display.getHeight() : display.getWidth())
                * scale);
        // Not sure why, but the height dimen is not being scaled with the dp, set it manually
        // for now.
        layoutParams.height = (int) (layoutParams.height * scale);
        if (isPhoneLandscape) {
            int width = layoutParams.width;
            layoutParams.width = layoutParams.height;
            layoutParams.height = width;
        }
        view.addView(mPreview);

        if (isRotated) {
            mPreview.findViewById(R.id.rot0).setVisibility(View.GONE);
            final View rot90 = mPreview.findViewById(R.id.rot90);
        } else {
            mPreview.findViewById(R.id.rot90).setVisibility(View.GONE);
            final View rot0 = mPreview.findViewById(R.id.rot0);
        }
!!!72396087.java!!!	notifyChanged() : void
        mPreview.onTuningChanged(NAV_BAR_VIEWS, mNavBarAdapter.getNavString());
!!!72396215.java!!!	onViewCreated(inout view : View, inout savedInstanceState : Bundle) : void
        super.onViewCreated(view, savedInstanceState);
        RecyclerView recyclerView = (RecyclerView) view.findViewById(android.R.id.list);
        final Context context = getContext();
        recyclerView.setLayoutManager(new LinearLayoutManager(context));
        mNavBarAdapter = new NavBarAdapter(context);
        recyclerView.setAdapter(mNavBarAdapter);
        recyclerView.addItemDecoration(new Dividers(context));
        final ItemTouchHelper itemTouchHelper = new ItemTouchHelper(mNavBarAdapter.mCallbacks);
        mNavBarAdapter.setTouchHelper(itemTouchHelper);
        itemTouchHelper.attachToRecyclerView(recyclerView);

        TunerService.get(getContext()).addTunable(this, NAV_BAR_VIEWS);
!!!72396343.java!!!	onDestroyView() : void
        super.onDestroyView();
        TunerService.get(getContext()).removeTunable(this);
!!!72396471.java!!!	onTuningChanged(inout key : String, inout navLayout : String) : void
        if (!NAV_BAR_VIEWS.equals(key)) return;
        Context context = getContext();
        if (navLayout == null) {
            navLayout = context.getString(R.string.config_navBarLayout);
        }
        String[] views = navLayout.split(GRAVITY_SEPARATOR);
        String[] groups = new String[] { NavBarAdapter.START, NavBarAdapter.CENTER,
                NavBarAdapter.END};
        CharSequence[] groupLabels = new String[] { getString(R.string.start),
                getString(R.string.center), getString(R.string.end) };
        mNavBarAdapter.clear();
        for (int i = 0; i < 3; i++) {
            mNavBarAdapter.addButton(groups[i], groupLabels[i]);
            for (String button : views[i].split(BUTTON_SEPARATOR)) {
                mNavBarAdapter.addButton(button, getLabel(button, context));
            }
        }
        mNavBarAdapter.addButton(NavBarAdapter.ADD, getString(R.string.add_button));
        setHasOptionsMenu(true);
!!!72396599.java!!!	onCreateOptionsMenu(inout menu : Menu, inout inflater : MenuInflater) : void
        super.onCreateOptionsMenu(menu, inflater);
        // TODO: Show save button conditionally, only when there are changes.
        menu.add(Menu.NONE, SAVE, Menu.NONE, getString(R.string.save))
                .setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);
        menu.add(Menu.NONE, RESET, Menu.NONE, getString(R.string.reset));
!!!72396727.java!!!	onOptionsItemSelected(inout item : MenuItem) : boolean
        if (item.getItemId() == SAVE) {
            if (!mNavBarAdapter.hasHomeButton()) {
                new AlertDialog.Builder(getContext())
                        .setTitle(R.string.no_home_title)
                        .setMessage(R.string.no_home_message)
                        .setPositiveButton(android.R.string.ok, null)
                        .show();
            } else {
                Settings.Secure.putString(getContext().getContentResolver(),
                        NAV_BAR_VIEWS, mNavBarAdapter.getNavString());
            }
            return true;
        } else if (item.getItemId() == RESET) {
            Settings.Secure.putString(getContext().getContentResolver(),
                    NAV_BAR_VIEWS, null);
            return true;
        }
        return super.onOptionsItemSelected(item);
!!!72396855.java!!!	getLabel(inout button : String, inout context : Context) : CharSequence
        if (button.startsWith(HOME)) {
            return context.getString(R.string.accessibility_home);
        } else if (button.startsWith(BACK)) {
            return context.getString(R.string.accessibility_back);
        } else if (button.startsWith(RECENT)) {
            return context.getString(R.string.accessibility_recent);
        } else if (button.startsWith(NAVSPACE)) {
            return context.getString(R.string.space);
        } else if (button.startsWith(MENU_IME)) {
            return context.getString(R.string.menu_ime);
        } else if (button.startsWith(CLIPBOARD)) {
            return context.getString(R.string.clipboard);
        } else if (button.startsWith(KEY)) {
            return context.getString(R.string.keycode);
        }
        return button;
!!!72397367.java!!!	selectImage() : void
        startActivityForResult(KeycodeSelectionHelper.getSelectImageIntent(), READ_REQUEST);
!!!72397495.java!!!	onActivityResult(in requestCode : int, in resultCode : int, inout data : Intent) : void
        if (requestCode == READ_REQUEST && resultCode == Activity.RESULT_OK && data != null) {
            final Uri uri = data.getData();
            final int takeFlags = data.getFlags() & (Intent.FLAG_GRANT_READ_URI_PERMISSION);
            getContext().getContentResolver().takePersistableUriPermission(uri, takeFlags);
            mNavBarAdapter.onImageSelected(uri);
        } else {
            super.onActivityResult(requestCode, resultCode, data);
        }
