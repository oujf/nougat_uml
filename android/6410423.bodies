class PipRecentsControlsView
!!!72421175.java!!!	PipRecentsControlsView(inout context : Context)
        this(context, null, 0, 0);
!!!72421303.java!!!	PipRecentsControlsView(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, 0, 0);
!!!72421431.java!!!	PipRecentsControlsView(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int)
        this(context, attrs, defStyleAttr, 0);
!!!72421559.java!!!	PipRecentsControlsView(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int, in defStyleRes : int)
        super(context, attrs, defStyleAttr, defStyleRes);
!!!72421687.java!!!	onFinishInflate() : void
        super.onFinishInflate();

        mPipControlsView = (PipControlsView) findViewById(R.id.pip_control_contents);
        mScrim = findViewById(R.id.scrim);

        mFocusGainAnimator = loadAnimator(mPipControlsView,
                R.anim.tv_pip_controls_in_recents_focus_gain_animation);

        mFocusLossAnimatorSet = new AnimatorSet();
        mFocusLossAnimatorSet.playSequentially(
                loadAnimator(mPipControlsView,
                        R.anim.tv_pip_controls_in_recents_focus_loss_animation),
                loadAnimator(mScrim, R.anim.tv_pip_controls_in_recents_scrim_fade_in_animation));

        Rect pipBounds = mPipManager.getRecentsFocusedPipBounds();
        setPadding(0, pipBounds.bottom, 0, 0);
!!!72421815.java!!!	loadAnimator(inout view : View, in animatorResId : int) : Animator
        Animator animator = AnimatorInflater.loadAnimator(getContext(), animatorResId);
        animator.setTarget(view);
        return animator;
!!!72421943.java!!!	startFocusGainAnimation() : void
        // Hides the scrim view as soon as possible, before the PIP resize animation starts.
        // If we don't, PIP will be moved down a bit and a gap between the scrim and PIP will be
        // shown at the bottom of the PIP.
        mScrim.setAlpha(0);
        PipControlButtonView focus = mPipControlsView.getFocusedButton();
        if (focus != null) {
            focus.startFocusGainAnimation();
        }
        startAnimator(mFocusGainAnimator, mFocusLossAnimatorSet);
!!!72422071.java!!!	startFocusLossAnimation() : void
        PipControlButtonView focus = mPipControlsView.getFocusedButton();
        if (focus != null) {
            focus.startFocusLossAnimation();
        }
        startAnimator(mFocusLossAnimatorSet, mFocusGainAnimator);
!!!72422199.java!!!	reset() : void
        cancelAnimator(mFocusGainAnimator);
        cancelAnimator(mFocusLossAnimatorSet);

        // Reset to initial state (i.e. end of focused)
        mScrim.setAlpha(0);
        mPipControlsView.setTranslationY(0);
        mPipControlsView.setScaleX(1);
        mPipControlsView.setScaleY(1);
        mPipControlsView.reset();
!!!72422327.java!!!	startAnimator(inout animator : Animator, inout previousAnimator : Animator) : void
        cancelAnimator(previousAnimator);
        if (!animator.isStarted()) {
            animator.start();
        }
!!!72422455.java!!!	cancelAnimator(inout animator : Animator) : void
        if (animator.isStarted()) {
            animator.cancel();
        }
!!!72422583.java!!!	setListener(inout listener : PipRecentsControlsView::Listener) : void
        mPipControlsView.setListener(listener);
!!!72422711.java!!!	dispatchKeyEvent(inout event : KeyEvent) : boolean
        if (!event.isCanceled()) {
            if (event.getKeyCode() == KeyEvent.KEYCODE_BACK
                    && event.getAction() == KeyEvent.ACTION_UP) {
                if (mPipControlsView.mListener != null) {
                    ((PipRecentsControlsView.Listener) mPipControlsView.mListener).onBackPressed();
                }
                return true;
            } else if (event.getKeyCode() == KeyEvent.KEYCODE_DPAD_DOWN) {
                if (event.getAction() == KeyEvent.ACTION_DOWN) {
                    mPipManager.getPipRecentsOverlayManager().clearFocus();
                }
                // Consume the down event always to prevent warning logs from ViewRootImpl.
                return true;
            }
        }
        return super.dispatchKeyEvent(event);
