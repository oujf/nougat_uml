class TableLayout
!!!5107511.java!!!	TableLayout(inout context : Context)
        super(context);
        initTableLayout();
!!!5107639.java!!!	TableLayout(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);

        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.TableLayout);

        String stretchedColumns = a.getString(R.styleable.TableLayout_stretchColumns);
        if (stretchedColumns != null) {
            if (stretchedColumns.charAt(0) == '*') {
                mStretchAllColumns = true;
            } else {
                mStretchableColumns = parseColumns(stretchedColumns);
            }
        }

        String shrinkedColumns = a.getString(R.styleable.TableLayout_shrinkColumns);
        if (shrinkedColumns != null) {
            if (shrinkedColumns.charAt(0) == '*') {
                mShrinkAllColumns = true;
            } else {
                mShrinkableColumns = parseColumns(shrinkedColumns);
            }
        }

        String collapsedColumns = a.getString(R.styleable.TableLayout_collapseColumns);
        if (collapsedColumns != null) {
            mCollapsedColumns = parseColumns(collapsedColumns);
        }

        a.recycle();
        initTableLayout();
!!!5107767.java!!!	parseColumns(in sequence : String) : SparseBooleanArray
        SparseBooleanArray columns = new SparseBooleanArray();
        Pattern pattern = Pattern.compile("\\s*,\\s*");
        String[] columnDefs = pattern.split(sequence);

        for (String columnIdentifier : columnDefs) {
            try {
                int columnIndex = Integer.parseInt(columnIdentifier);
                // only valid, i.e. positive, columns indexes are handled
                if (columnIndex >= 0) {
                    // putting true in this sparse array indicates that the
                    // column index was defined in the XML file
                    columns.put(columnIndex, true);
                }
            } catch (NumberFormatException e) {
                // we just ignore columns that don't exist
            }
        }

        return columns;
!!!5107895.java!!!	initTableLayout() : void
        if (mCollapsedColumns == null) {
            mCollapsedColumns = new SparseBooleanArray();
        }
        if (mStretchableColumns == null) {
            mStretchableColumns = new SparseBooleanArray();
        }
        if (mShrinkableColumns == null) {
            mShrinkableColumns = new SparseBooleanArray();
        }

        // TableLayouts are always in vertical orientation; keep this tracked
        // for shared LinearLayout code.
        setOrientation(VERTICAL);

        mPassThroughListener = new PassThroughHierarchyChangeListener();
        // make sure to call the parent class method to avoid potential
        // infinite loops
        super.setOnHierarchyChangeListener(mPassThroughListener);

        mInitialized = true;
!!!5108023.java!!!	setOnHierarchyChangeListener(inout listener : ViewGroup::OnHierarchyChangeListener) : void
        // the user listener is delegated to our pass-through listener
        mPassThroughListener.mOnHierarchyChangeListener = listener;
!!!5108151.java!!!	requestRowsLayout() : void
        if (mInitialized) {
            final int count = getChildCount();
            for (int i = 0; i < count; i++) {
                getChildAt(i).requestLayout();
            }
        }
!!!5108279.java!!!	requestLayout() : void
        if (mInitialized) {
            int count = getChildCount();
            for (int i = 0; i < count; i++) {
                getChildAt(i).forceLayout();
            }
        }

        super.requestLayout();
!!!5108407.java!!!	isShrinkAllColumns() : boolean
        return mShrinkAllColumns;
!!!5108535.java!!!	setShrinkAllColumns(inout shrinkAllColumns : boolean) : void
        mShrinkAllColumns = shrinkAllColumns;
!!!5108663.java!!!	isStretchAllColumns() : boolean
        return mStretchAllColumns;
!!!5108791.java!!!	setStretchAllColumns(inout stretchAllColumns : boolean) : void
        mStretchAllColumns = stretchAllColumns;
!!!5108919.java!!!	setColumnCollapsed(in columnIndex : int, inout isCollapsed : boolean) : void
        // update the collapse status of the column
        mCollapsedColumns.put(columnIndex, isCollapsed);

        int count = getChildCount();
        for (int i = 0; i < count; i++) {
            final View view = getChildAt(i);
            if (view instanceof TableRow) {
                ((TableRow) view).setColumnCollapsed(columnIndex, isCollapsed);
            }
        }

        requestRowsLayout();
!!!5109047.java!!!	isColumnCollapsed(in columnIndex : int) : boolean
        return mCollapsedColumns.get(columnIndex);
!!!5109175.java!!!	setColumnStretchable(in columnIndex : int, inout isStretchable : boolean) : void
        mStretchableColumns.put(columnIndex, isStretchable);
        requestRowsLayout();
!!!5109303.java!!!	isColumnStretchable(in columnIndex : int) : boolean
        return mStretchAllColumns || mStretchableColumns.get(columnIndex);
!!!5109431.java!!!	setColumnShrinkable(in columnIndex : int, inout isShrinkable : boolean) : void
        mShrinkableColumns.put(columnIndex, isShrinkable);
        requestRowsLayout();
!!!5109559.java!!!	isColumnShrinkable(in columnIndex : int) : boolean
        return mShrinkAllColumns || mShrinkableColumns.get(columnIndex);
!!!5109687.java!!!	trackCollapsedColumns(inout child : View) : void
        if (child instanceof TableRow) {
            final TableRow row = (TableRow) child;
            final SparseBooleanArray collapsedColumns = mCollapsedColumns;
            final int count = collapsedColumns.size();
            for (int i = 0; i < count; i++) {
                int columnIndex = collapsedColumns.keyAt(i);
                boolean isCollapsed = collapsedColumns.valueAt(i);
                // the collapse status is set only when the column should be
                // collapsed; otherwise, this might affect the default
                // visibility of the row's children
                if (isCollapsed) {
                    row.setColumnCollapsed(columnIndex, isCollapsed);
                }
            }
        }
!!!5109815.java!!!	addView(inout child : View) : void
        super.addView(child);
        requestRowsLayout();
!!!5109943.java!!!	addView(inout child : View, in index : int) : void
        super.addView(child, index);
        requestRowsLayout();
!!!5110071.java!!!	addView(inout child : View, inout params : ViewGroup::LayoutParams) : void
        super.addView(child, params);
        requestRowsLayout();
!!!5110199.java!!!	addView(inout child : View, in index : int, inout params : ViewGroup::LayoutParams) : void
        super.addView(child, index, params);
        requestRowsLayout();
!!!5110327.java!!!	onMeasure(in widthMeasureSpec : int, in heightMeasureSpec : int) : void
        // enforce vertical layout
        measureVertical(widthMeasureSpec, heightMeasureSpec);
!!!5110455.java!!!	onLayout(inout changed : boolean, in l : int, in t : int, in r : int, in b : int) : void
        // enforce vertical layout
        layoutVertical(l, t, r, b);
!!!5110583.java!!!	measureChildBeforeLayout(inout child : View, in childIndex : int, in widthMeasureSpec : int, in totalWidth : int, in heightMeasureSpec : int, in totalHeight : int) : void
        // when the measured child is a table row, we force the width of its
        // children with the widths computed in findLargestCells()
        if (child instanceof TableRow) {
            ((TableRow) child).setColumnsWidthConstraints(mMaxWidths);
        }

        super.measureChildBeforeLayout(child, childIndex,
                widthMeasureSpec, totalWidth, heightMeasureSpec, totalHeight);
!!!5110711.java!!!	measureVertical(in widthMeasureSpec : int, in heightMeasureSpec : int) : void
        findLargestCells(widthMeasureSpec, heightMeasureSpec);
        shrinkAndStretchColumns(widthMeasureSpec);

        super.measureVertical(widthMeasureSpec, heightMeasureSpec);
!!!5110839.java!!!	findLargestCells(in widthMeasureSpec : int, in heightMeasureSpec : int) : void
        boolean firstRow = true;

        // find the maximum width for each column
        // the total number of columns is dynamically changed if we find
        // wider rows as we go through the children
        // the array is reused for each layout operation; the array can grow
        // but never shrinks. Unused extra cells in the array are just ignored
        // this behavior avoids to unnecessary grow the array after the first
        // layout operation
        final int count = getChildCount();
        for (int i = 0; i < count; i++) {
            final View child = getChildAt(i);
            if (child.getVisibility() == GONE) {
                continue;
            }

            if (child instanceof TableRow) {
                final TableRow row = (TableRow) child;
                // forces the row's height
                final ViewGroup.LayoutParams layoutParams = row.getLayoutParams();
                layoutParams.height = LayoutParams.WRAP_CONTENT;

                final int[] widths = row.getColumnsWidths(widthMeasureSpec, heightMeasureSpec);
                final int newLength = widths.length;
                // this is the first row, we just need to copy the values
                if (firstRow) {
                    if (mMaxWidths == null || mMaxWidths.length != newLength) {
                        mMaxWidths = new int[newLength];
                    }
                    System.arraycopy(widths, 0, mMaxWidths, 0, newLength);
                    firstRow = false;
                } else {
                    int length = mMaxWidths.length;
                    final int difference = newLength - length;
                    // the current row is wider than the previous rows, so
                    // we just grow the array and copy the values
                    if (difference > 0) {
                        final int[] oldMaxWidths = mMaxWidths;
                        mMaxWidths = new int[newLength];
                        System.arraycopy(oldMaxWidths, 0, mMaxWidths, 0,
                                oldMaxWidths.length);
                        System.arraycopy(widths, oldMaxWidths.length,
                                mMaxWidths, oldMaxWidths.length, difference);
                    }

                    // the row is narrower or of the same width as the previous
                    // rows, so we find the maximum width for each column
                    // if the row is narrower than the previous ones,
                    // difference will be negative
                    final int[] maxWidths = mMaxWidths;
                    length = Math.min(length, newLength);
                    for (int j = 0; j < length; j++) {
                        maxWidths[j] = Math.max(maxWidths[j], widths[j]);
                    }
                }
            }
        }
!!!5110967.java!!!	shrinkAndStretchColumns(in widthMeasureSpec : int) : void
        // when we have no row, mMaxWidths is not initialized and the loop
        // below could cause a NPE
        if (mMaxWidths == null) {
            return;
        }

        // should we honor AT_MOST, EXACTLY and UNSPECIFIED?
        int totalWidth = 0;
        for (int width : mMaxWidths) {
            totalWidth += width;
        }

        int size = MeasureSpec.getSize(widthMeasureSpec) - mPaddingLeft - mPaddingRight;

        if ((totalWidth > size) && (mShrinkAllColumns || mShrinkableColumns.size() > 0)) {
            // oops, the largest columns are wider than the row itself
            // fairly redistribute the row's width among the columns
            mutateColumnsWidth(mShrinkableColumns, mShrinkAllColumns, size, totalWidth);
        } else if ((totalWidth < size) && (mStretchAllColumns || mStretchableColumns.size() > 0)) {
            // if we have some space left, we distribute it among the
            // expandable columns
            mutateColumnsWidth(mStretchableColumns, mStretchAllColumns, size, totalWidth);
        }
!!!5111095.java!!!	mutateColumnsWidth(inout columns : SparseBooleanArray, inout allColumns : boolean, in size : int, in totalWidth : int) : void
        int skipped = 0;
        final int[] maxWidths = mMaxWidths;
        final int length = maxWidths.length;
        final int count = allColumns ? length : columns.size();
        final int totalExtraSpace = size - totalWidth;
        int extraSpace = totalExtraSpace / count;

        // Column's widths are changed: force child table rows to re-measure.
        // (done by super.measureVertical after shrinkAndStretchColumns.)
        final int nbChildren = getChildCount();
        for (int i = 0; i < nbChildren; i++) {
            View child = getChildAt(i);
            if (child instanceof TableRow) {
                child.forceLayout();
            }
        }

        if (!allColumns) {
            for (int i = 0; i < count; i++) {
                int column = columns.keyAt(i);
                if (columns.valueAt(i)) {
                    if (column < length) {
                        maxWidths[column] += extraSpace;
                    } else {
                        skipped++;
                    }
                }
            }
        } else {
            for (int i = 0; i < count; i++) {
                maxWidths[i] += extraSpace;
            }

            // we don't skip any column so we can return right away
            return;
        }

        if (skipped > 0 && skipped < count) {
            // reclaim any extra space we left to columns that don't exist
            extraSpace = skipped * extraSpace / (count - skipped);
            for (int i = 0; i < count; i++) {
                int column = columns.keyAt(i);
                if (columns.valueAt(i) && column < length) {
                    if (extraSpace > maxWidths[column]) {
                        maxWidths[column] = 0;
                    } else {
                        maxWidths[column] += extraSpace;
                    }
                }
            }
        }
!!!5111223.java!!!	generateLayoutParams(inout attrs : AttributeSet) : ViewGroup::LayoutParams
        return new TableLayout.LayoutParams(getContext(), attrs);
!!!5111351.java!!!	generateDefaultLayoutParams() : LinearLayout::LayoutParams
        return new LayoutParams();
!!!5111479.java!!!	checkLayoutParams(inout p : ViewGroup::LayoutParams) : boolean
        return p instanceof TableLayout.LayoutParams;
!!!5111607.java!!!	generateLayoutParams(inout p : ViewGroup::LayoutParams) : LinearLayout::LayoutParams
        return new LayoutParams(p);
!!!5111735.java!!!	getAccessibilityClassName() : CharSequence
        return TableLayout.class.getName();
