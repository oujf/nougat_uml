class Utils
!!!72491831.java!!!	assertTrue(inout cond : boolean) : void
        if (!cond) {
            throw new AssertionError();
        }
!!!72491959.java!!!	fail(inout message : String, inout args : Object) : void
        throw new AssertionError(
                args.length == 0 ? message : String.format(message, args));
!!!72492087.java!!!	checkNotNull(inout object : T) : T
        if (object == null) throw new NullPointerException();
        return object;
!!!72492215.java!!!	equals(inout a : Object, inout b : Object) : boolean
        return (a == b) || (a == null ? false : a.equals(b));
!!!72492343.java!!!	nextPowerOf2(in n : int) : int
        if (n <= 0 || n > (1 << 30)) throw new IllegalArgumentException("n is invalid: " + n);
        n -= 1;
        n |= n >> 16;
        n |= n >> 8;
        n |= n >> 4;
        n |= n >> 2;
        n |= n >> 1;
        return n + 1;
!!!72492471.java!!!	prevPowerOf2(in n : int) : int
        if (n <= 0) throw new IllegalArgumentException();
        return Integer.highestOneBit(n);
!!!72492599.java!!!	clamp(in x : int, in min : int, in max : int) : int
        if (x > max) return max;
        if (x < min) return min;
        return x;
!!!72492727.java!!!	clamp(in x : float, in min : float, in max : float) : float
        if (x > max) return max;
        if (x < min) return min;
        return x;
!!!72492855.java!!!	clamp(in x : long, in min : long, in max : long) : long
        if (x > max) return max;
        if (x < min) return min;
        return x;
!!!72492983.java!!!	isOpaque(in color : int) : boolean
        return color >>> 24 == 0xFF;
!!!72493111.java!!!	swap(inout array : int [[]], in i : int, in j : int) : void
        int temp = array[i];
        array[i] = array[j];
        array[j] = temp;
!!!72493239.java!!!	crc64Long(inout in : String) : long
        if (in == null || in.length() == 0) {
            return 0;
        }
        return crc64Long(getBytes(in));
!!!72493367.java!!!	crc64Long(inout buffer : byte [[]]) : long
        long crc = INITIALCRC;
        for (int k = 0, n = buffer.length; k < n; ++k) {
            crc = sCrcTable[(((int) crc) ^ buffer[k]) & 0xff] ^ (crc >> 8);
        }
        return crc;
!!!72493495.java!!!	getBytes(inout in : String) : byte
        byte[] result = new byte[in.length() * 2];
        int output = 0;
        for (char ch : in.toCharArray()) {
            result[output++] = (byte) (ch & 0xFF);
            result[output++] = (byte) (ch >> 8);
        }
        return result;
!!!72493623.java!!!	closeSilently(inout c : Closeable) : void
        if (c == null) return;
        try {
            c.close();
        } catch (IOException t) {
            Log.w(TAG, "close fail ", t);
        }
!!!72493751.java!!!	compare(in a : long, in b : long) : int
        return a < b ? -1 : a == b ? 0 : 1;
!!!72493879.java!!!	ceilLog2(in value : float) : int
        int i;
        for (i = 0; i < 31; i++) {
            if ((1 << i) >= value) break;
        }
        return i;
!!!72494007.java!!!	floorLog2(in value : float) : int
        int i;
        for (i = 0; i < 31; i++) {
            if ((1 << i) > value) break;
        }
        return i - 1;
!!!72494135.java!!!	closeSilently(inout fd : ParcelFileDescriptor) : void
        try {
            if (fd != null) fd.close();
        } catch (Throwable t) {
            Log.w(TAG, "fail to close", t);
        }
!!!72494263.java!!!	closeSilently(inout cursor : Cursor) : void
        try {
            if (cursor != null) cursor.close();
        } catch (Throwable t) {
            Log.w(TAG, "fail to close", t);
        }
!!!72494391.java!!!	interpolateAngle(in source : float, in target : float, in progress : float) : float
        // interpolate the angle from source to target
        // We make the difference in the range of [-179, 180], this is the
        // shortest path to change source to target.
        float diff = target - source;
        if (diff < 0) diff += 360f;
        if (diff > 180) diff -= 360f;

        float result = source + diff * progress;
        return result < 0 ? result + 360f : result;
!!!72494519.java!!!	interpolateScale(in source : float, in target : float, in progress : float) : float
        return source + progress * (target - source);
!!!72494647.java!!!	ensureNotNull(inout value : String) : String
        return value == null ? "" : value;
!!!72494775.java!!!	parseFloatSafely(inout content : String, in defaultValue : float) : float
        if (content == null) return defaultValue;
        try {
            return Float.parseFloat(content);
        } catch (NumberFormatException e) {
            return defaultValue;
        }
!!!72494903.java!!!	parseIntSafely(inout content : String, in defaultValue : int) : int
        if (content == null) return defaultValue;
        try {
            return Integer.parseInt(content);
        } catch (NumberFormatException e) {
            return defaultValue;
        }
!!!72495031.java!!!	isNullOrEmpty(inout exifMake : String) : boolean
        return TextUtils.isEmpty(exifMake);
!!!72495159.java!!!	waitWithoutInterrupt(inout object : Object) : void
        try {
            object.wait();
        } catch (InterruptedException e) {
            Log.w(TAG, "unexpected interrupt: " + object);
        }
!!!72495287.java!!!	handleInterrruptedException(inout e : Throwable) : boolean
        // A helper to deal with the interrupt exception
        // If an interrupt detected, we will setup the bit again.
        if (e instanceof InterruptedIOException
                || e instanceof InterruptedException) {
            Thread.currentThread().interrupt();
            return true;
        }
        return false;
!!!72495415.java!!!	escapeXml(inout s : String) : String
        StringBuilder sb = new StringBuilder();
        for (int i = 0, len = s.length(); i < len; ++i) {
            char c = s.charAt(i);
            switch (c) {
                case '<':  sb.append("&lt;"); break;
                case '>':  sb.append("&gt;"); break;
                case '\"': sb.append("&quot;"); break;
                case '\'': sb.append("&#039;"); break;
                case '&':  sb.append("&amp;"); break;
                default: sb.append(c);
            }
        }
        return sb.toString();
!!!72495543.java!!!	getUserAgent(inout context : Context) : String
        PackageInfo packageInfo;
        try {
            packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), 0);
        } catch (NameNotFoundException e) {
            throw new IllegalStateException("getPackageInfo failed");
        }
        return String.format("%s/%s; %s/%s/%s/%s; %s/%s/%s",
                packageInfo.packageName,
                packageInfo.versionName,
                Build.BRAND,
                Build.DEVICE,
                Build.MODEL,
                Build.ID,
                Build.VERSION.SDK_INT,
                Build.VERSION.RELEASE,
                Build.VERSION.INCREMENTAL);
!!!72495671.java!!!	copyOf(inout source : String [[]], in newSize : int) : String
        String[] result = new String[newSize];
        newSize = Math.min(source.length, newSize);
        System.arraycopy(source, 0, result, 0, newSize);
        return result;
!!!72495799.java!!!	maskDebugInfo(inout info : Object) : String
        if (info == null) return null;
        String s = info.toString();
        int length = Math.min(s.length(), MASK_STRING.length());
        return IS_DEBUG_BUILD ? s : MASK_STRING.substring(0, length);
!!!72495927.java!!!	debug(inout message : String, inout args : Object) : void
        Log.v(DEBUG_TAG, String.format(message, args));
