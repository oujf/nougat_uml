class FieldPacker
!!!72650039.java!!!	FieldPacker(in len : int)
        mPos = 0;
        mLen = len;
        mData = new byte[len];
        mAlignment = new BitSet();
!!!72650167.java!!!	FieldPacker(inout data : byte [[]])
        // Advance mPos to the end of the buffer, since we are copying in the
        // full data input.
        mPos = data.length;
        mLen = data.length;
        mData = data;
        mAlignment = new BitSet();
        // TODO: We should either have an actual FieldPacker copy constructor
        // or drop support for computing alignment like this. As it stands,
        // subAlign() can never work correctly for copied FieldPacker objects.
!!!72650295.java!!!	createFromArray(inout args : Object [[]]) : FieldPacker
        FieldPacker fp = new FieldPacker(RenderScript.sPointerSize * 8);
        for (Object arg : args) {
            fp.addSafely(arg);
        }
        fp.resize(fp.mPos);
        return fp;
!!!72650423.java!!!	align(in v : int) : void
        if ((v <= 0) || ((v & (v - 1)) != 0)) {
            throw new RSIllegalArgumentException("argument must be a non-negative non-zero power of 2: " + v);
        }

        while ((mPos & (v - 1)) != 0) {
            mAlignment.flip(mPos);
            mData[mPos++] = 0;
        }
!!!72650551.java!!!	subalign(in v : int) : void
        if ((v & (v - 1)) != 0) {
            throw new RSIllegalArgumentException("argument must be a non-negative non-zero power of 2: " + v);
        }

        while ((mPos & (v - 1)) != 0) {
            mPos--;
        }

        if (mPos > 0) {
            while (mAlignment.get(mPos - 1) == true) {
                mPos--;
                mAlignment.flip(mPos);
            }
        }

!!!72650679.java!!!	reset() : void
        mPos = 0;
!!!72650807.java!!!	reset(in i : int) : void
        if ((i < 0) || (i > mLen)) {
            throw new RSIllegalArgumentException("out of range argument: " + i);
        }
        mPos = i;
!!!72650935.java!!!	skip(in i : int) : void
        int res = mPos + i;
        if ((res < 0) || (res > mLen)) {
            throw new RSIllegalArgumentException("out of range argument: " + i);
        }
        mPos = res;
!!!72651063.java!!!	addI8(in v : byte) : void
        mData[mPos++] = v;
!!!72651191.java!!!	subI8() : byte
        subalign(1);
        return mData[--mPos];
!!!72651319.java!!!	addI16(in v : short) : void
        align(2);
        mData[mPos++] = (byte)(v & 0xff);
        mData[mPos++] = (byte)(v >> 8);
!!!72651447.java!!!	subI16() : short
        subalign(2);
        short v = 0;
        v = (short)((mData[--mPos] & 0xff) << 8);
        v = (short)(v | (short)(mData[--mPos] & 0xff));
        return v;
!!!72651575.java!!!	addI32(in v : int) : void
        align(4);
        mData[mPos++] = (byte)(v & 0xff);
        mData[mPos++] = (byte)((v >> 8) & 0xff);
        mData[mPos++] = (byte)((v >> 16) & 0xff);
        mData[mPos++] = (byte)((v >> 24) & 0xff);
!!!72651703.java!!!	subI32() : int
        subalign(4);
        int v = 0;
        v = ((mData[--mPos] & 0xff) << 24);
        v = v | ((mData[--mPos] & 0xff) << 16);
        v = v | ((mData[--mPos] & 0xff) << 8);
        v = v | ((mData[--mPos] & 0xff));
        return v;
!!!72651831.java!!!	addI64(in v : long) : void
        align(8);
        mData[mPos++] = (byte)(v & 0xff);
        mData[mPos++] = (byte)((v >> 8) & 0xff);
        mData[mPos++] = (byte)((v >> 16) & 0xff);
        mData[mPos++] = (byte)((v >> 24) & 0xff);
        mData[mPos++] = (byte)((v >> 32) & 0xff);
        mData[mPos++] = (byte)((v >> 40) & 0xff);
        mData[mPos++] = (byte)((v >> 48) & 0xff);
        mData[mPos++] = (byte)((v >> 56) & 0xff);
!!!72651959.java!!!	subI64() : long
        subalign(8);
        long v = 0;
        byte x = 0;
        x = ((mData[--mPos]));
        v = (long)(v | (((long)x) & 0xff) << 56l);
        x = ((mData[--mPos]));
        v = (long)(v | (((long)x) & 0xff) << 48l);
        x = ((mData[--mPos]));
        v = (long)(v | (((long)x) & 0xff) << 40l);
        x = ((mData[--mPos]));
        v = (long)(v | (((long)x) & 0xff) << 32l);
        x = ((mData[--mPos]));
        v = (long)(v | (((long)x) & 0xff) << 24l);
        x = ((mData[--mPos]));
        v = (long)(v | (((long)x) & 0xff) << 16l);
        x = ((mData[--mPos]));
        v = (long)(v | (((long)x) & 0xff) << 8l);
        x = ((mData[--mPos]));
        v = (long)(v | (((long)x) & 0xff));
        return v;
!!!72652087.java!!!	addU8(in v : short) : void
        if ((v < 0) || (v > 0xff)) {
            android.util.Log.e("rs", "FieldPacker.addU8( " + v + " )");
            throw new IllegalArgumentException("Saving value out of range for type");
        }
        mData[mPos++] = (byte)v;
!!!72652215.java!!!	addU16(in v : int) : void
        if ((v < 0) || (v > 0xffff)) {
            android.util.Log.e("rs", "FieldPacker.addU16( " + v + " )");
            throw new IllegalArgumentException("Saving value out of range for type");
        }
        align(2);
        mData[mPos++] = (byte)(v & 0xff);
        mData[mPos++] = (byte)(v >> 8);
!!!72652343.java!!!	addU32(in v : long) : void
        if ((v < 0) || (v > 0xffffffffL)) {
            android.util.Log.e("rs", "FieldPacker.addU32( " + v + " )");
            throw new IllegalArgumentException("Saving value out of range for type");
        }
        align(4);
        mData[mPos++] = (byte)(v & 0xff);
        mData[mPos++] = (byte)((v >> 8) & 0xff);
        mData[mPos++] = (byte)((v >> 16) & 0xff);
        mData[mPos++] = (byte)((v >> 24) & 0xff);
!!!72652471.java!!!	addU64(in v : long) : void
        if (v < 0) {
            android.util.Log.e("rs", "FieldPacker.addU64( " + v + " )");
            throw new IllegalArgumentException("Saving value out of range for type");
        }
        align(8);
        mData[mPos++] = (byte)(v & 0xff);
        mData[mPos++] = (byte)((v >> 8) & 0xff);
        mData[mPos++] = (byte)((v >> 16) & 0xff);
        mData[mPos++] = (byte)((v >> 24) & 0xff);
        mData[mPos++] = (byte)((v >> 32) & 0xff);
        mData[mPos++] = (byte)((v >> 40) & 0xff);
        mData[mPos++] = (byte)((v >> 48) & 0xff);
        mData[mPos++] = (byte)((v >> 56) & 0xff);
!!!72652599.java!!!	addF32(in v : float) : void
        addI32(Float.floatToRawIntBits(v));
!!!72652727.java!!!	subF32() : float
        return Float.intBitsToFloat(subI32());
!!!72652855.java!!!	addF64(in v : double) : void
        addI64(Double.doubleToRawLongBits(v));
!!!72652983.java!!!	subF64() : double
        return Double.longBitsToDouble(subI64());
!!!72653111.java!!!	addObj(inout obj : BaseObj) : void
        if (obj != null) {
            if (RenderScript.sPointerSize == 8) {
                addI64(obj.getID(null));
                addI64(0);
                addI64(0);
                addI64(0);
            } else {
                addI32((int)obj.getID(null));
            }
        } else {
            if (RenderScript.sPointerSize == 8) {
                addI64(0);
                addI64(0);
                addI64(0);
                addI64(0);
            } else {
                addI32(0);
            }
        }
!!!72653239.java!!!	addF32(inout v : Float2) : void
        addF32(v.x);
        addF32(v.y);
!!!72653367.java!!!	addF32(inout v : Float3) : void
        addF32(v.x);
        addF32(v.y);
        addF32(v.z);
!!!72653495.java!!!	addF32(inout v : Float4) : void
        addF32(v.x);
        addF32(v.y);
        addF32(v.z);
        addF32(v.w);
!!!72653623.java!!!	addF64(inout v : Double2) : void
        addF64(v.x);
        addF64(v.y);
!!!72653751.java!!!	addF64(inout v : Double3) : void
        addF64(v.x);
        addF64(v.y);
        addF64(v.z);
!!!72653879.java!!!	addF64(inout v : Double4) : void
        addF64(v.x);
        addF64(v.y);
        addF64(v.z);
        addF64(v.w);
!!!72654007.java!!!	addI8(inout v : Byte2) : void
        addI8(v.x);
        addI8(v.y);
!!!72654135.java!!!	addI8(inout v : Byte3) : void
        addI8(v.x);
        addI8(v.y);
        addI8(v.z);
!!!72654263.java!!!	addI8(inout v : Byte4) : void
        addI8(v.x);
        addI8(v.y);
        addI8(v.z);
        addI8(v.w);
!!!72654391.java!!!	addU8(inout v : Short2) : void
        addU8(v.x);
        addU8(v.y);
!!!72654519.java!!!	addU8(inout v : Short3) : void
        addU8(v.x);
        addU8(v.y);
        addU8(v.z);
!!!72654647.java!!!	addU8(inout v : Short4) : void
        addU8(v.x);
        addU8(v.y);
        addU8(v.z);
        addU8(v.w);
!!!72654775.java!!!	addI16(inout v : Short2) : void
        addI16(v.x);
        addI16(v.y);
!!!72654903.java!!!	addI16(inout v : Short3) : void
        addI16(v.x);
        addI16(v.y);
        addI16(v.z);
!!!72655031.java!!!	addI16(inout v : Short4) : void
        addI16(v.x);
        addI16(v.y);
        addI16(v.z);
        addI16(v.w);
!!!72655159.java!!!	addU16(inout v : Int2) : void
        addU16(v.x);
        addU16(v.y);
!!!72655287.java!!!	addU16(inout v : Int3) : void
        addU16(v.x);
        addU16(v.y);
        addU16(v.z);
!!!72655415.java!!!	addU16(inout v : Int4) : void
        addU16(v.x);
        addU16(v.y);
        addU16(v.z);
        addU16(v.w);
!!!72655543.java!!!	addI32(inout v : Int2) : void
        addI32(v.x);
        addI32(v.y);
!!!72655671.java!!!	addI32(inout v : Int3) : void
        addI32(v.x);
        addI32(v.y);
        addI32(v.z);
!!!72655799.java!!!	addI32(inout v : Int4) : void
        addI32(v.x);
        addI32(v.y);
        addI32(v.z);
        addI32(v.w);
!!!72655927.java!!!	addU32(inout v : Long2) : void
        addU32(v.x);
        addU32(v.y);
!!!72656055.java!!!	addU32(inout v : Long3) : void
        addU32(v.x);
        addU32(v.y);
        addU32(v.z);
!!!72656183.java!!!	addU32(inout v : Long4) : void
        addU32(v.x);
        addU32(v.y);
        addU32(v.z);
        addU32(v.w);
!!!72656311.java!!!	addI64(inout v : Long2) : void
        addI64(v.x);
        addI64(v.y);
!!!72656439.java!!!	addI64(inout v : Long3) : void
        addI64(v.x);
        addI64(v.y);
        addI64(v.z);
!!!72656567.java!!!	addI64(inout v : Long4) : void
        addI64(v.x);
        addI64(v.y);
        addI64(v.z);
        addI64(v.w);
!!!72656695.java!!!	addU64(inout v : Long2) : void
        addU64(v.x);
        addU64(v.y);
!!!72656823.java!!!	addU64(inout v : Long3) : void
        addU64(v.x);
        addU64(v.y);
        addU64(v.z);
!!!72656951.java!!!	addU64(inout v : Long4) : void
        addU64(v.x);
        addU64(v.y);
        addU64(v.z);
        addU64(v.w);
!!!72657079.java!!!	subFloat2() : Float2
        Float2 v = new Float2();
        v.y = subF32();
        v.x = subF32();
        return v;
!!!72657207.java!!!	subFloat3() : Float3
        Float3 v = new Float3();
        v.z = subF32();
        v.y = subF32();
        v.x = subF32();
        return v;
!!!72657335.java!!!	subFloat4() : Float4
        Float4 v = new Float4();
        v.w = subF32();
        v.z = subF32();
        v.y = subF32();
        v.x = subF32();
        return v;
!!!72657463.java!!!	subDouble2() : Double2
        Double2 v = new Double2();
        v.y = subF64();
        v.x = subF64();
        return v;
!!!72657591.java!!!	subDouble3() : Double3
        Double3 v = new Double3();
        v.z = subF64();
        v.y = subF64();
        v.x = subF64();
        return v;
!!!72657719.java!!!	subDouble4() : Double4
        Double4 v = new Double4();
        v.w = subF64();
        v.z = subF64();
        v.y = subF64();
        v.x = subF64();
        return v;
!!!72657847.java!!!	subByte2() : Byte2
        Byte2 v = new Byte2();
        v.y = subI8();
        v.x = subI8();
        return v;
!!!72657975.java!!!	subByte3() : Byte3
        Byte3 v = new Byte3();
        v.z = subI8();
        v.y = subI8();
        v.x = subI8();
        return v;
!!!72658103.java!!!	subByte4() : Byte4
        Byte4 v = new Byte4();
        v.w = subI8();
        v.z = subI8();
        v.y = subI8();
        v.x = subI8();
        return v;
!!!72658231.java!!!	subShort2() : Short2
        Short2 v = new Short2();
        v.y = subI16();
        v.x = subI16();
        return v;
!!!72658359.java!!!	subShort3() : Short3
        Short3 v = new Short3();
        v.z = subI16();
        v.y = subI16();
        v.x = subI16();
        return v;
!!!72658487.java!!!	subShort4() : Short4
        Short4 v = new Short4();
        v.w = subI16();
        v.z = subI16();
        v.y = subI16();
        v.x = subI16();
        return v;
!!!72658615.java!!!	subInt2() : Int2
        Int2 v = new Int2();
        v.y = subI32();
        v.x = subI32();
        return v;
!!!72658743.java!!!	subInt3() : Int3
        Int3 v = new Int3();
        v.z = subI32();
        v.y = subI32();
        v.x = subI32();
        return v;
!!!72658871.java!!!	subInt4() : Int4
        Int4 v = new Int4();
        v.w = subI32();
        v.z = subI32();
        v.y = subI32();
        v.x = subI32();
        return v;
!!!72658999.java!!!	subLong2() : Long2
        Long2 v = new Long2();
        v.y = subI64();
        v.x = subI64();
        return v;
!!!72659127.java!!!	subLong3() : Long3
        Long3 v = new Long3();
        v.z = subI64();
        v.y = subI64();
        v.x = subI64();
        return v;
!!!72659255.java!!!	subLong4() : Long4
        Long4 v = new Long4();
        v.w = subI64();
        v.z = subI64();
        v.y = subI64();
        v.x = subI64();
        return v;
!!!72659383.java!!!	addMatrix(inout v : Matrix4f) : void
        for (int i=0; i < v.mMat.length; i++) {
            addF32(v.mMat[i]);
        }
!!!72659511.java!!!	subMatrix4f() : Matrix4f
        Matrix4f v = new Matrix4f();
        for (int i = v.mMat.length - 1; i >= 0; i--) {
            v.mMat[i] = subF32();
        }
        return v;
!!!72659639.java!!!	addMatrix(inout v : Matrix3f) : void
        for (int i=0; i < v.mMat.length; i++) {
            addF32(v.mMat[i]);
        }
!!!72659767.java!!!	subMatrix3f() : Matrix3f
        Matrix3f v = new Matrix3f();
        for (int i = v.mMat.length - 1; i >= 0; i--) {
            v.mMat[i] = subF32();
        }
        return v;
!!!72659895.java!!!	addMatrix(inout v : Matrix2f) : void
        for (int i=0; i < v.mMat.length; i++) {
            addF32(v.mMat[i]);
        }
!!!72660023.java!!!	subMatrix2f() : Matrix2f
        Matrix2f v = new Matrix2f();
        for (int i = v.mMat.length - 1; i >= 0; i--) {
            v.mMat[i] = subF32();
        }
        return v;
!!!72660151.java!!!	addBoolean(inout v : boolean) : void
        addI8((byte)(v ? 1 : 0));
!!!72660279.java!!!	subBoolean() : boolean
        byte v = subI8();
        if (v == 1) {
            return true;
        }
        return false;
!!!72660407.java!!!	getData() : byte
        return mData;
!!!72660535.java!!!	getPos() : int
        return mPos;
!!!72660663.java!!!	add(inout obj : Object) : void
        if (obj instanceof Boolean) {
            addBoolean((Boolean)obj);
            return;
        }

        if (obj instanceof Byte) {
            addI8((Byte)obj);
            return;
        }

        if (obj instanceof Short) {
            addI16((Short)obj);
            return;
        }

        if (obj instanceof Integer) {
            addI32((Integer)obj);
            return;
        }

        if (obj instanceof Long) {
            addI64((Long)obj);
            return;
        }

        if (obj instanceof Float) {
            addF32((Float)obj);
            return;
        }

        if (obj instanceof Double) {
            addF64((Double)obj);
            return;
        }

        if (obj instanceof Byte2) {
            addI8((Byte2)obj);
            return;
        }

        if (obj instanceof Byte3) {
            addI8((Byte3)obj);
            return;
        }

        if (obj instanceof Byte4) {
            addI8((Byte4)obj);
            return;
        }

        if (obj instanceof Short2) {
            addI16((Short2)obj);
            return;
        }

        if (obj instanceof Short3) {
            addI16((Short3)obj);
            return;
        }

        if (obj instanceof Short4) {
            addI16((Short4)obj);
            return;
        }

        if (obj instanceof Int2) {
            addI32((Int2)obj);
            return;
        }

        if (obj instanceof Int3) {
            addI32((Int3)obj);
            return;
        }

        if (obj instanceof Int4) {
            addI32((Int4)obj);
            return;
        }

        if (obj instanceof Long2) {
            addI64((Long2)obj);
            return;
        }

        if (obj instanceof Long3) {
            addI64((Long3)obj);
            return;
        }

        if (obj instanceof Long4) {
            addI64((Long4)obj);
            return;
        }

        if (obj instanceof Float2) {
            addF32((Float2)obj);
            return;
        }

        if (obj instanceof Float3) {
            addF32((Float3)obj);
            return;
        }

        if (obj instanceof Float4) {
            addF32((Float4)obj);
            return;
        }

        if (obj instanceof Double2) {
            addF64((Double2)obj);
            return;
        }

        if (obj instanceof Double3) {
            addF64((Double3)obj);
            return;
        }

        if (obj instanceof Double4) {
            addF64((Double4)obj);
            return;
        }

        if (obj instanceof Matrix2f) {
            addMatrix((Matrix2f)obj);
            return;
        }

        if (obj instanceof Matrix3f) {
            addMatrix((Matrix3f)obj);
            return;
        }

        if (obj instanceof Matrix4f) {
            addMatrix((Matrix4f)obj);
            return;
        }

        if (obj instanceof BaseObj) {
            addObj((BaseObj)obj);
            return;
        }
!!!72660791.java!!!	resize(in newSize : int) : boolean
        if (newSize == mLen) {
            return false;
        }

        byte[] newData = new byte[newSize];
        System.arraycopy(mData, 0, newData, 0, mPos);
        mData = newData;
        mLen = newSize;
        return true;
!!!72660919.java!!!	addSafely(inout obj : Object) : void
        boolean retry;
        final int oldPos = mPos;
        do {
            retry = false;
            try {
                add(obj);
            } catch (ArrayIndexOutOfBoundsException e) {
                mPos = oldPos;
                resize(mLen * 2);
                retry = true;
            }
        } while (retry);
