class Matrix3f
!!!72705591.java!!!	Matrix3f()
        mMat = new float[9];
        loadIdentity();
!!!72705719.java!!!	Matrix3f(inout dataArray : float [[]])
        mMat = new float[9];
        System.arraycopy(dataArray, 0, mMat, 0, mMat.length);
!!!72705847.java!!!	getArray() : float
        return mMat;
!!!72705975.java!!!	get(in x : int, in y : int) : float
        return mMat[x*3 + y];
!!!72706103.java!!!	set(in x : int, in y : int, in v : float) : void
        mMat[x*3 + y] = v;
!!!72706231.java!!!	loadIdentity() : void
        mMat[0] = 1;
        mMat[1] = 0;
        mMat[2] = 0;

        mMat[3] = 0;
        mMat[4] = 1;
        mMat[5] = 0;

        mMat[6] = 0;
        mMat[7] = 0;
        mMat[8] = 1;
!!!72706359.java!!!	load(inout src : Matrix3f) : void
        System.arraycopy(src.getArray(), 0, mMat, 0, mMat.length);
!!!72706487.java!!!	loadRotate(in rot : float, in x : float, in y : float, in z : float) : void
        float c, s;
        rot *= (float)(java.lang.Math.PI / 180.0f);
        c = (float)java.lang.Math.cos(rot);
        s = (float)java.lang.Math.sin(rot);

        float len = (float)java.lang.Math.sqrt(x*x + y*y + z*z);
        if (!(len != 1)) {
            float recipLen = 1.f / len;
            x *= recipLen;
            y *= recipLen;
            z *= recipLen;
        }
        float nc = 1.0f - c;
        float xy = x * y;
        float yz = y * z;
        float zx = z * x;
        float xs = x * s;
        float ys = y * s;
        float zs = z * s;
        mMat[0] = x*x*nc +  c;
        mMat[3] =  xy*nc - zs;
        mMat[6] =  zx*nc + ys;
        mMat[1] =  xy*nc + zs;
        mMat[4] = y*y*nc +  c;
        mMat[7] =  yz*nc - xs;
        mMat[2] =  zx*nc - ys;
        mMat[5] =  yz*nc + xs;
        mMat[8] = z*z*nc +  c;
!!!72706615.java!!!	loadRotate(in rot : float) : void
        loadIdentity();
        float c, s;
        rot *= (float)(java.lang.Math.PI / 180.0f);
        c = (float)java.lang.Math.cos(rot);
        s = (float)java.lang.Math.sin(rot);
        mMat[0] = c;
        mMat[1] = -s;
        mMat[3] = s;
        mMat[4] = c;
!!!72706743.java!!!	loadScale(in x : float, in y : float) : void
        loadIdentity();
        mMat[0] = x;
        mMat[4] = y;
!!!72706871.java!!!	loadScale(in x : float, in y : float, in z : float) : void
        loadIdentity();
        mMat[0] = x;
        mMat[4] = y;
        mMat[8] = z;
!!!72706999.java!!!	loadTranslate(in x : float, in y : float) : void
        loadIdentity();
        mMat[6] = x;
        mMat[7] = y;
!!!72707127.java!!!	loadMultiply(inout lhs : Matrix3f, inout rhs : Matrix3f) : void
        for (int i=0 ; i<3 ; i++) {
            float ri0 = 0;
            float ri1 = 0;
            float ri2 = 0;
            for (int j=0 ; j<3 ; j++) {
                float rhs_ij = rhs.get(i,j);
                ri0 += lhs.get(j,0) * rhs_ij;
                ri1 += lhs.get(j,1) * rhs_ij;
                ri2 += lhs.get(j,2) * rhs_ij;
            }
            set(i,0, ri0);
            set(i,1, ri1);
            set(i,2, ri2);
        }
!!!72707255.java!!!	multiply(inout rhs : Matrix3f) : void
        Matrix3f tmp = new Matrix3f();
        tmp.loadMultiply(this, rhs);
        load(tmp);
!!!72707383.java!!!	rotate(in rot : float, in x : float, in y : float, in z : float) : void
        Matrix3f tmp = new Matrix3f();
        tmp.loadRotate(rot, x, y, z);
        multiply(tmp);
!!!72707511.java!!!	rotate(in rot : float) : void
        Matrix3f tmp = new Matrix3f();
        tmp.loadRotate(rot);
        multiply(tmp);
!!!72707639.java!!!	scale(in x : float, in y : float) : void
        Matrix3f tmp = new Matrix3f();
        tmp.loadScale(x, y);
        multiply(tmp);
!!!72707767.java!!!	scale(in x : float, in y : float, in z : float) : void
        Matrix3f tmp = new Matrix3f();
        tmp.loadScale(x, y, z);
        multiply(tmp);
!!!72707895.java!!!	translate(in x : float, in y : float) : void
        Matrix3f tmp = new Matrix3f();
        tmp.loadTranslate(x, y);
        multiply(tmp);
!!!72708023.java!!!	transpose() : void
        for(int i = 0; i < 2; ++i) {
            for(int j = i + 1; j < 3; ++j) {
                float temp = mMat[i*3 + j];
                mMat[i*3 + j] = mMat[j*3 + i];
                mMat[j*3 + i] = temp;
            }
        }
