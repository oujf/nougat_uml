class Script
!!!72770743.java!!!	createKernelID(in slot : int, in sig : int, inout ein : Element, inout eout : Element) : Script::KernelID
        KernelID k = mKIDs.get(slot);
        if (k != null) {
            return k;
        }

        long id = mRS.nScriptKernelIDCreate(getID(mRS), slot, sig);
        if (id == 0) {
            throw new RSDriverException("Failed to create KernelID");
        }

        k = new KernelID(id, mRS, this, slot, sig);
        mKIDs.put(slot, k);
        return k;
!!!72770999.java!!!	createInvokeID(in slot : int) : Script::InvokeID
        InvokeID i = mIIDs.get(slot);
        if (i != null) {
            return i;
        }

        long id = mRS.nScriptInvokeIDCreate(getID(mRS), slot);
        if (id == 0) {
            throw new RSDriverException("Failed to create KernelID");
        }

        i = new InvokeID(id, mRS, this, slot);
        mIIDs.put(slot, i);
        return i;
!!!72771255.java!!!	createFieldID(in slot : int, inout e : Element) : Script::FieldID
        FieldID f = mFIDs.get(slot);
        if (f != null) {
            return f;
        }

        long id = mRS.nScriptFieldIDCreate(getID(mRS), slot);
        if (id == 0) {
            throw new RSDriverException("Failed to create FieldID");
        }

        f = new FieldID(id, mRS, this, slot);
        mFIDs.put(slot, f);
        return f;
!!!72771383.java!!!	invoke(in slot : int) : void
        mRS.nScriptInvoke(getID(mRS), slot);
!!!72771511.java!!!	invoke(in slot : int, inout v : FieldPacker) : void
        if (v != null) {
            mRS.nScriptInvokeV(getID(mRS), slot, v.getData());
        } else {
            mRS.nScriptInvoke(getID(mRS), slot);
        }
!!!72771639.java!!!	forEach(in slot : int, inout ain : Allocation, inout aout : Allocation, inout v : FieldPacker) : void
        forEach(slot, ain, aout, v, null);
!!!72771767.java!!!	forEach(in slot : int, inout ain : Allocation, inout aout : Allocation, inout v : FieldPacker, inout sc : Script::LaunchOptions) : void
        // TODO: Is this necessary if nScriptForEach calls validate as well?
        mRS.validate();
        mRS.validateObject(ain);
        mRS.validateObject(aout);

        if (ain == null && aout == null && sc == null) {
            throw new RSIllegalArgumentException(
                "At least one of input allocation, output allocation, or LaunchOptions is required to be non-null.");
        }

        long[] in_ids = null;
        if (ain != null) {
            in_ids    = mInIdsBuffer;
            in_ids[0] = ain.getID(mRS);
        }

        long out_id = 0;
        if (aout != null) {
            out_id = aout.getID(mRS);
        }

        byte[] params = null;
        if (v != null) {
            params = v.getData();
        }

        int[] limits = null;
        if (sc != null) {
            limits = new int[6];

            limits[0] = sc.xstart;
            limits[1] = sc.xend;
            limits[2] = sc.ystart;
            limits[3] = sc.yend;
            limits[4] = sc.zstart;
            limits[5] = sc.zend;
        }

        mRS.nScriptForEach(getID(mRS), slot, in_ids, out_id, params, limits);
!!!72771895.java!!!	forEach(in slot : int, inout ains : Allocation [[]], inout aout : Allocation, inout v : FieldPacker) : void

        // FieldPacker is kept here to support regular params in the future.
        forEach(slot, ains, aout, v, null);
!!!72772023.java!!!	forEach(in slot : int, inout ains : Allocation [[]], inout aout : Allocation, inout v : FieldPacker, inout sc : Script::LaunchOptions) : void
        // TODO: Is this necessary if nScriptForEach calls validate as well?
        // FieldPacker is kept here to support regular params in the future.
        mRS.validate();
        if (ains != null) {
            for (Allocation ain : ains) {
                mRS.validateObject(ain);
            }
        }
        mRS.validateObject(aout);

        if (ains == null && aout == null) {
            throw new RSIllegalArgumentException(
                "At least one of ain or aout is required to be non-null.");
        }

        long[] in_ids;
        if (ains != null) {
            in_ids = new long[ains.length];
            for (int index = 0; index < ains.length; ++index) {
                in_ids[index] = ains[index].getID(mRS);
            }
        } else {
            in_ids = null;
        }

        long out_id = 0;
        if (aout != null) {
            out_id = aout.getID(mRS);
        }

        byte[] params = null;
        if (v != null) {
            params = v.getData();
        }

        int[] limits = null;
        if (sc != null) {
            limits = new int[6];

            limits[0] = sc.xstart;
            limits[1] = sc.xend;
            limits[2] = sc.ystart;
            limits[3] = sc.yend;
            limits[4] = sc.zstart;
            limits[5] = sc.zend;
        }

        mRS.nScriptForEach(getID(mRS), slot, in_ids, out_id, params, limits);
!!!72772151.java!!!	reduce(in slot : int, inout ains : Allocation [[]], inout aout : Allocation, inout sc : Script::LaunchOptions) : void
        mRS.validate();
        if (ains == null || ains.length < 1) {
            throw new RSIllegalArgumentException(
                "At least one input is required.");
        }
        if (aout == null) {
            throw new RSIllegalArgumentException(
                "aout is required to be non-null.");
        }
        for (Allocation ain : ains) {
            mRS.validateObject(ain);
        }

        long[] in_ids = new long[ains.length];
        for (int index = 0; index < ains.length; ++index) {
            in_ids[index] = ains[index].getID(mRS);
        }
        long out_id = aout.getID(mRS);

        int[] limits = null;
        if (sc != null) {
            limits = new int[6];

            limits[0] = sc.xstart;
            limits[1] = sc.xend;
            limits[2] = sc.ystart;
            limits[3] = sc.yend;
            limits[4] = sc.zstart;
            limits[5] = sc.zend;
        }

        mRS.nScriptReduce(getID(mRS), slot, in_ids, out_id, limits);
!!!72772279.java!!!	Script(in id : long, inout rs : RenderScript)
        super(id, rs);

        mInIdsBuffer = new long[1];

        /* The constructors for the derived classes (including ScriptIntrinsic
         * derived classes and ScriptC derived classes generated by Slang
         * reflection) seem to be simple enough, so we just put the guard.open()
         * call here, rather than in the end of the constructor for the derived
         * class. This, of course, assumes the derived constructor would not
         * throw any exception after calling this constructor.
         *
         * If new derived classes are added with more complicated constructors
         * that throw exceptions, this call has to be (duplicated and) moved
         * to the end of each derived class constructor.
         */
        guard.open("destroy");
!!!72772407.java!!!	bindAllocation(inout va : Allocation, in slot : int) : void
        mRS.validate();
        mRS.validateObject(va);
        if (va != null) {

            android.content.Context context = mRS.getApplicationContext();

            if (context.getApplicationInfo().targetSdkVersion >= 20) {
                final Type t = va.mType;
                if (t.hasMipmaps() || t.hasFaces() || (t.getY() != 0) ||
                    (t.getZ() != 0)) {

                    throw new RSIllegalArgumentException(
                        "API 20+ only allows simple 1D allocations to be " +
                        "used with bind.");
                }
            }
            mRS.nScriptBindAllocation(getID(mRS), va.getID(mRS), slot);
        } else {
            mRS.nScriptBindAllocation(getID(mRS), 0, slot);
        }
!!!72772535.java!!!	setVar(in index : int, in v : float) : void
        mRS.nScriptSetVarF(getID(mRS), index, v);
!!!72772663.java!!!	getVarF(in index : int) : float
        return mRS.nScriptGetVarF(getID(mRS), index);
!!!72772791.java!!!	setVar(in index : int, in v : double) : void
        mRS.nScriptSetVarD(getID(mRS), index, v);
!!!72772919.java!!!	getVarD(in index : int) : double
        return mRS.nScriptGetVarD(getID(mRS), index);
!!!72773047.java!!!	setVar(in index : int, in v : int) : void
        mRS.nScriptSetVarI(getID(mRS), index, v);
!!!72773175.java!!!	getVarI(in index : int) : int
        return mRS.nScriptGetVarI(getID(mRS), index);
!!!72773303.java!!!	setVar(in index : int, in v : long) : void
        mRS.nScriptSetVarJ(getID(mRS), index, v);
!!!72773431.java!!!	getVarJ(in index : int) : long
        return mRS.nScriptGetVarJ(getID(mRS), index);
!!!72773559.java!!!	setVar(in index : int, inout v : boolean) : void
        mRS.nScriptSetVarI(getID(mRS), index, v ? 1 : 0);
!!!72773687.java!!!	getVarB(in index : int) : boolean
        return mRS.nScriptGetVarI(getID(mRS), index) > 0 ? true : false;
!!!72773815.java!!!	setVar(in index : int, inout o : BaseObj) : void
        mRS.validate();
        mRS.validateObject(o);
        mRS.nScriptSetVarObj(getID(mRS), index, (o == null) ? 0 : o.getID(mRS));
!!!72773943.java!!!	setVar(in index : int, inout v : FieldPacker) : void
        mRS.nScriptSetVarV(getID(mRS), index, v.getData());
!!!72774071.java!!!	setVar(in index : int, inout v : FieldPacker, inout e : Element, inout dims : int [[]]) : void
        mRS.nScriptSetVarVE(getID(mRS), index, v.getData(), e.getID(mRS), dims);
!!!72774199.java!!!	getVarV(in index : int, inout v : FieldPacker) : void
        mRS.nScriptGetVarV(getID(mRS), index, v.getData());
!!!72774327.java!!!	setTimeZone(inout timeZone : String) : void
        mRS.validate();
        try {
            mRS.nScriptSetTimeZone(getID(mRS), timeZone.getBytes("UTF-8"));
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
