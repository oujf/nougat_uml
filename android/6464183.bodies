class SinglePackageBackupRunner
!!!72957879.java!!!	SinglePackageBackupRunner(inout output : ParcelFileDescriptor, inout target : PackageInfo, inout transport : IBackupTransport)
                mOutput = ParcelFileDescriptor.dup(output.getFileDescriptor());
                mTarget = target;
                mPreflight = new SinglePackageBackupPreflight(transport);
                mPreflightLatch = new CountDownLatch(1);
                mBackupLatch = new CountDownLatch(1);
                mPreflightResult = BackupTransport.AGENT_ERROR;
                mBackupResult = BackupTransport.AGENT_ERROR;
!!!72958007.java!!!	run() : void
                FileOutputStream out = new FileOutputStream(mOutput.getFileDescriptor());
                mEngine = new FullBackupEngine(out, mPreflight, mTarget, false, this);
                try {
                    try {
                        mPreflightResult = mEngine.preflightCheck();
                    } finally {
                        mPreflightLatch.countDown();
                    }
                    // If there is no error on preflight, continue backup.
                    if (mPreflightResult == BackupTransport.TRANSPORT_OK) {
                        mBackupResult = mEngine.backupOnePackage();
                    }
                } catch (Exception e) {
                    Slog.e(TAG, "Exception during full package backup of " + mTarget.packageName);
                } finally {
                    mBackupLatch.countDown();
                    try {
                        mOutput.close();
                    } catch (IOException e) {
                        Slog.w(TAG, "Error closing transport pipe in runner");
                    }
                }
!!!72958135.java!!!	sendQuotaExceeded(in backupDataBytes : long, in quotaBytes : long) : void
                mEngine.sendQuotaExceeded(backupDataBytes, quotaBytes);
!!!72958263.java!!!	getPreflightResultBlocking() : long
                try {
                    mPreflightLatch.await(TIMEOUT_FULL_BACKUP_INTERVAL, TimeUnit.MILLISECONDS);
                    if (mPreflightResult == BackupTransport.TRANSPORT_OK) {
                        return mPreflight.getExpectedSizeOrErrorCode();
                    } else {
                        return mPreflightResult;
                    }
                } catch (InterruptedException e) {
                    return BackupTransport.AGENT_ERROR;
                }
!!!72958391.java!!!	getBackupResultBlocking() : int
                try {
                    mBackupLatch.await(TIMEOUT_FULL_BACKUP_INTERVAL, TimeUnit.MILLISECONDS);
                    return mBackupResult;
                } catch (InterruptedException e) {
                    return BackupTransport.AGENT_ERROR;
                }
!!!72958519.java!!!	execute() : void
 /* intentionally empty */
!!!72958647.java!!!	operationComplete(in result : long) : void
 /* intentionally empty */
!!!72958775.java!!!	handleTimeout() : void
                if (DEBUG) {
                    Slog.w(TAG, "Full backup timeout of " + mTarget.packageName);
                }
                tearDownAgentAndKill(mTarget.applicationInfo);
