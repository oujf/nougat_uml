class NativeDaemonEvent
!!!73186231.java!!!	NativeDaemonEvent(in cmdNumber : int, in code : int, inout message : String, inout rawEvent : String, inout logMessage : String, inout fdList : FileDescriptor [[]])
        mCmdNumber = cmdNumber;
        mCode = code;
        mMessage = message;
        mRawEvent = rawEvent;
        mLogMessage = logMessage;
        mParsed = null;
        mFdList = fdList;
!!!73186359.java!!!	getCmdNumber() : int
        return mCmdNumber;
!!!73186487.java!!!	getCode() : int
        return mCode;
!!!73186615.java!!!	getMessage() : String
        return mMessage;
!!!73186743.java!!!	getFileDescriptors() : FileDescriptor
        return mFdList;
!!!73186871.java!!!	getRawEvent() : String
        return mRawEvent;
!!!73186999.java!!!	toString() : String
        return mLogMessage;
!!!73187127.java!!!	isClassContinue() : boolean
        return mCode >= 100 && mCode < 200;
!!!73187255.java!!!	isClassOk() : boolean
        return mCode >= 200 && mCode < 300;
!!!73187383.java!!!	isClassServerError() : boolean
        return mCode >= 400 && mCode < 500;
!!!73187511.java!!!	isClassClientError() : boolean
        return mCode >= 500 && mCode < 600;
!!!73187639.java!!!	isClassUnsolicited() : boolean
        return isClassUnsolicited(mCode);
!!!73187767.java!!!	isClassUnsolicited(in code : int) : boolean
        return code >= 600 && code < 700;
!!!73187895.java!!!	checkCode(in code : int) : void
        if (mCode != code) {
            throw new IllegalStateException("Expected " + code + " but was: " + this);
        }
!!!73188023.java!!!	parseRawEvent(inout rawEvent : String, inout fdList : FileDescriptor [[]]) : NativeDaemonEvent
        final String[] parsed = rawEvent.split(" ");
        if (parsed.length < 2) {
            throw new IllegalArgumentException("Insufficient arguments");
        }

        int skiplength = 0;

        final int code;
        try {
            code = Integer.parseInt(parsed[0]);
            skiplength = parsed[0].length() + 1;
        } catch (NumberFormatException e) {
            throw new IllegalArgumentException("problem parsing code", e);
        }

        int cmdNumber = -1;
        if (isClassUnsolicited(code) == false) {
            if (parsed.length < 3) {
                throw new IllegalArgumentException("Insufficient arguemnts");
            }
            try {
                cmdNumber = Integer.parseInt(parsed[1]);
                skiplength += parsed[1].length() + 1;
            } catch (NumberFormatException e) {
                throw new IllegalArgumentException("problem parsing cmdNumber", e);
            }
        }

        String logMessage = rawEvent;
        if (parsed.length > 2 && parsed[2].equals(SENSITIVE_MARKER)) {
            skiplength += parsed[2].length() + 1;
            logMessage = parsed[0] + " " + parsed[1] + " {}";
        }

        final String message = rawEvent.substring(skiplength);

        return new NativeDaemonEvent(cmdNumber, code, message, rawEvent, logMessage, fdList);
!!!73188151.java!!!	filterMessageList(inout events : NativeDaemonEvent [[]], in matchCode : int) : String
        final ArrayList<String> result = Lists.newArrayList();
        for (NativeDaemonEvent event : events) {
            if (event.getCode() == matchCode) {
                result.add(event.getMessage());
            }
        }
        return result.toArray(new String[result.size()]);
!!!73188279.java!!!	getField(in n : int) : String
        if (mParsed == null) {
            mParsed = unescapeArgs(mRawEvent);
        }
        n += 2; // skip code and command#
        if (n > mParsed.length) return null;
            return mParsed[n];
!!!73188407.java!!!	unescapeArgs(inout rawEvent : String) : String
        final boolean DEBUG_ROUTINE = false;
        final String LOGTAG = "unescapeArgs";
        final ArrayList<String> parsed = new ArrayList<String>();
        final int length = rawEvent.length();
        int current = 0;
        int wordEnd = -1;
        boolean quoted = false;

        if (DEBUG_ROUTINE) Slog.e(LOGTAG, "parsing '" + rawEvent + "'");
        if (rawEvent.charAt(current) == '\"') {
            quoted = true;
            current++;
        }
        while (current < length) {
            // find the end of the word
            char terminator = quoted ? '\"' : ' ';
            wordEnd = current;
            while (wordEnd < length && rawEvent.charAt(wordEnd) != terminator) {
                if (rawEvent.charAt(wordEnd) == '\\') {
                    // skip the escaped char
                    ++wordEnd;
                }
                ++wordEnd;
            }
            if (wordEnd > length) wordEnd = length;
            String word = rawEvent.substring(current, wordEnd);
            current += word.length();
            if (!quoted) {
                word = word.trim();
            } else {
                current++;  // skip the trailing quote
            }
            // unescape stuff within the word
            word = word.replace("\\\\", "\\");
            word = word.replace("\\\"", "\"");

            if (DEBUG_ROUTINE) Slog.e(LOGTAG, "found '" + word + "'");
            parsed.add(word);

            // find the beginning of the next word - either of these options
            int nextSpace = rawEvent.indexOf(' ', current);
            int nextQuote = rawEvent.indexOf(" \"", current);
            if (DEBUG_ROUTINE) {
                Slog.e(LOGTAG, "nextSpace=" + nextSpace + ", nextQuote=" + nextQuote);
            }
            if (nextQuote > -1 && nextQuote <= nextSpace) {
                quoted = true;
                current = nextQuote + 2;
            } else {
                quoted = false;
                if (nextSpace > -1) {
                    current = nextSpace + 1;
                }
            } // else we just start the next word after the current and read til the end
            if (DEBUG_ROUTINE) {
                Slog.e(LOGTAG, "next loop - current=" + current +
                        ", length=" + length + ", quoted=" + quoted);
            }
        }
        return parsed.toArray(new String[parsed.size()]);
