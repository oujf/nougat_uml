class PersistentDataStore
!!!73903799.java!!!	PersistentDataStore()
        mAtomicFile = new AtomicFile(new File("/data/system/input-manager-state.xml"));
!!!73903927.java!!!	saveIfNeeded() : void
        if (mDirty) {
            save();
            mDirty = false;
        }
!!!73904055.java!!!	getTouchCalibration(inout inputDeviceDescriptor : String, in surfaceRotation : int) : TouchCalibration
        InputDeviceState state = getInputDeviceState(inputDeviceDescriptor, false);
        if (state == null) {
            return TouchCalibration.IDENTITY;
        }

        TouchCalibration cal = state.getTouchCalibration(surfaceRotation);
        if (cal == null) {
            return TouchCalibration.IDENTITY;
        }
        return cal;
!!!73904183.java!!!	setTouchCalibration(inout inputDeviceDescriptor : String, in surfaceRotation : int, inout calibration : TouchCalibration) : boolean
        InputDeviceState state = getInputDeviceState(inputDeviceDescriptor, true);

        if (state.setTouchCalibration(surfaceRotation, calibration)) {
            setDirty();
            return true;
        }

        return false;
!!!73904311.java!!!	getCurrentKeyboardLayout(inout inputDeviceDescriptor : String) : String
        InputDeviceState state = getInputDeviceState(inputDeviceDescriptor, false);
        return state != null ? state.getCurrentKeyboardLayout() : null;
!!!73904439.java!!!	setCurrentKeyboardLayout(inout inputDeviceDescriptor : String, inout keyboardLayoutDescriptor : String) : boolean
        InputDeviceState state = getInputDeviceState(inputDeviceDescriptor, true);
        if (state.setCurrentKeyboardLayout(keyboardLayoutDescriptor)) {
            setDirty();
            return true;
        }
        return false;
!!!73904567.java!!!	getKeyboardLayouts(inout inputDeviceDescriptor : String) : String
        InputDeviceState state = getInputDeviceState(inputDeviceDescriptor, false);
        if (state == null) {
            return (String[])ArrayUtils.emptyArray(String.class);
        }
        return state.getKeyboardLayouts();
!!!73904695.java!!!	getKeyboardLayout(inout inputDeviceDescriptor : String, inout imeHandle : InputMethodSubtypeHandle) : String
        InputDeviceState state = getInputDeviceState(inputDeviceDescriptor, false);
        if (state == null) {
            return null;
        }
        return state.getKeyboardLayout(imeHandle);
!!!73904823.java!!!	setKeyboardLayout(inout inputDeviceDescriptor : String, inout imeHandle : InputMethodSubtypeHandle, inout keyboardLayoutDescriptor : String) : boolean
        InputDeviceState state = getInputDeviceState(inputDeviceDescriptor, true);
        if (state.setKeyboardLayout(imeHandle, keyboardLayoutDescriptor)) {
            setDirty();
            return true;
        }
        return false;
!!!73904951.java!!!	addKeyboardLayout(inout inputDeviceDescriptor : String, inout keyboardLayoutDescriptor : String) : boolean
        InputDeviceState state = getInputDeviceState(inputDeviceDescriptor, true);
        if (state.addKeyboardLayout(keyboardLayoutDescriptor)) {
            setDirty();
            return true;
        }
        return false;
!!!73905079.java!!!	removeKeyboardLayout(inout inputDeviceDescriptor : String, inout keyboardLayoutDescriptor : String) : boolean
        InputDeviceState state = getInputDeviceState(inputDeviceDescriptor, true);
        if (state.removeKeyboardLayout(keyboardLayoutDescriptor)) {
            setDirty();
            return true;
        }
        return false;
!!!73905207.java!!!	switchKeyboardLayout(inout inputDeviceDescriptor : String, inout imeHandle : InputMethodSubtypeHandle) : boolean
        InputDeviceState state = getInputDeviceState(inputDeviceDescriptor, false);
        if (state != null && state.switchKeyboardLayout(imeHandle)) {
            setDirty();
            return true;
        }
        return false;
!!!73905335.java!!!	removeUninstalledKeyboardLayouts(inout availableKeyboardLayouts : Set<String>) : boolean
        boolean changed = false;
        for (InputDeviceState state : mInputDevices.values()) {
            if (state.removeUninstalledKeyboardLayouts(availableKeyboardLayouts)) {
                changed = true;
            }
        }
        if (changed) {
            setDirty();
            return true;
        }
        return false;
!!!73905463.java!!!	getInputDeviceState(inout inputDeviceDescriptor : String, inout createIfAbsent : boolean) : PersistentDataStore::InputDeviceState
        loadIfNeeded();
        InputDeviceState state = mInputDevices.get(inputDeviceDescriptor);
        if (state == null && createIfAbsent) {
            state = new InputDeviceState();
            mInputDevices.put(inputDeviceDescriptor, state);
            setDirty();
        }
        return state;
!!!73905591.java!!!	loadIfNeeded() : void
        if (!mLoaded) {
            load();
            mLoaded = true;
        }
!!!73905719.java!!!	setDirty() : void
        mDirty = true;
!!!73905847.java!!!	clearState() : void
        mInputDevices.clear();
!!!73905975.java!!!	load() : void
        clearState();

        final InputStream is;
        try {
            is = mAtomicFile.openRead();
        } catch (FileNotFoundException ex) {
            return;
        }

        XmlPullParser parser;
        try {
            parser = Xml.newPullParser();
            parser.setInput(new BufferedInputStream(is), StandardCharsets.UTF_8.name());
            loadFromXml(parser);
        } catch (IOException ex) {
            Slog.w(InputManagerService.TAG, "Failed to load input manager persistent store data.", ex);
            clearState();
        } catch (XmlPullParserException ex) {
            Slog.w(InputManagerService.TAG, "Failed to load input manager persistent store data.", ex);
            clearState();
        } finally {
            IoUtils.closeQuietly(is);
        }
!!!73906103.java!!!	save() : void
        final FileOutputStream os;
        try {
            os = mAtomicFile.startWrite();
            boolean success = false;
            try {
                XmlSerializer serializer = new FastXmlSerializer();
                serializer.setOutput(new BufferedOutputStream(os), StandardCharsets.UTF_8.name());
                saveToXml(serializer);
                serializer.flush();
                success = true;
            } finally {
                if (success) {
                    mAtomicFile.finishWrite(os);
                } else {
                    mAtomicFile.failWrite(os);
                }
            }
        } catch (IOException ex) {
            Slog.w(InputManagerService.TAG, "Failed to save input manager persistent store data.", ex);
        }
!!!73906231.java!!!	loadFromXml(inout parser : XmlPullParser) : void
        XmlUtils.beginDocument(parser, "input-manager-state");
        final int outerDepth = parser.getDepth();
        while (XmlUtils.nextElementWithin(parser, outerDepth)) {
            if (parser.getName().equals("input-devices")) {
                loadInputDevicesFromXml(parser);
            }
        }
!!!73906359.java!!!	loadInputDevicesFromXml(inout parser : XmlPullParser) : void
        final int outerDepth = parser.getDepth();
        while (XmlUtils.nextElementWithin(parser, outerDepth)) {
            if (parser.getName().equals("input-device")) {
                String descriptor = parser.getAttributeValue(null, "descriptor");
                if (descriptor == null) {
                    throw new XmlPullParserException(
                            "Missing descriptor attribute on input-device.");
                }
                if (mInputDevices.containsKey(descriptor)) {
                    throw new XmlPullParserException("Found duplicate input device.");
                }

                InputDeviceState state = new InputDeviceState();
                state.loadFromXml(parser);
                mInputDevices.put(descriptor, state);
            }
        }
!!!73906487.java!!!	saveToXml(inout serializer : XmlSerializer) : void
        serializer.startDocument(null, true);
        serializer.setFeature("http://xmlpull.org/v1/doc/features.html#indent-output", true);
        serializer.startTag(null, "input-manager-state");
        serializer.startTag(null, "input-devices");
        for (Map.Entry<String, InputDeviceState> entry : mInputDevices.entrySet()) {
            final String descriptor = entry.getKey();
            final InputDeviceState state = entry.getValue();
            serializer.startTag(null, "input-device");
            serializer.attribute(null, "descriptor", descriptor);
            state.saveToXml(serializer);
            serializer.endTag(null, "input-device");
        }
        serializer.endTag(null, "input-devices");
        serializer.endTag(null, "input-manager-state");
        serializer.endDocument();
!!!73906615.java!!!	dump(inout pw : PrintWriter, inout prefix : String) : void
        pw.println(prefix + "PersistentDataStore");
        pw.println(prefix + "  mLoaded=" + mLoaded);
        pw.println(prefix + "  mDirty=" + mDirty);
        pw.println(prefix + "  InputDeviceStates:");
        int i = 0;
        for (Map.Entry<String, InputDeviceState> entry : mInputDevices.entrySet()) {
            pw.println(prefix + "    " + i++ + ": " + entry.getKey());
            entry.getValue().dump(pw, prefix + "      ");
        }
