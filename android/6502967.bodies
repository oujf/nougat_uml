class CryptoHelper
!!!73307703.java!!!	getInstance() : CryptoHelper
        if (sInstance == null) {
            sInstance = new CryptoHelper();
        }
        return sInstance;
!!!73307831.java!!!	CryptoHelper()
        KeyGenerator kgen = KeyGenerator.getInstance(KEY_ALGORITHM);
        mEncryptionKey = kgen.generateKey();
        // Use a different key for mac-ing than encryption/decryption.
        kgen = KeyGenerator.getInstance(MAC_ALGORITHM);
        mMacKey = kgen.generateKey();
!!!73307959.java!!!	encryptBundle(inout bundle : Bundle) : Bundle
        Preconditions.checkNotNull(bundle, "Cannot encrypt null bundle.");
        Parcel parcel = Parcel.obtain();
        bundle.writeToParcel(parcel, 0);
        byte[] clearBytes = parcel.marshall();
        parcel.recycle();

        Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);
        cipher.init(Cipher.ENCRYPT_MODE, mEncryptionKey);
        byte[] encryptedBytes = cipher.doFinal(clearBytes);
        byte[] iv = cipher.getIV();
        byte[] mac = createMac(encryptedBytes, iv);

        Bundle encryptedBundle = new Bundle();
        encryptedBundle.putByteArray(KEY_CIPHER, encryptedBytes);
        encryptedBundle.putByteArray(KEY_MAC, mac);
        encryptedBundle.putByteArray(KEY_IV, iv);

        return encryptedBundle;
!!!73308087.java!!!	decryptBundle(inout bundle : Bundle) : Bundle
        Preconditions.checkNotNull(bundle, "Cannot decrypt null bundle.");
        byte[] iv = bundle.getByteArray(KEY_IV);
        byte[] encryptedBytes = bundle.getByteArray(KEY_CIPHER);
        byte[] mac = bundle.getByteArray(KEY_MAC);
        if (!verifyMac(encryptedBytes, iv, mac)) {
            Log.w(TAG, "Escrow mac mismatched!");
            return null;
        }

        IvParameterSpec ivSpec = new IvParameterSpec(iv);
        Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);
        cipher.init(Cipher.DECRYPT_MODE, mEncryptionKey, ivSpec);
        byte[] decryptedBytes = cipher.doFinal(encryptedBytes);

        Parcel decryptedParcel = Parcel.obtain();
        decryptedParcel.unmarshall(decryptedBytes, 0, decryptedBytes.length);
        decryptedParcel.setDataPosition(0);
        Bundle decryptedBundle = new Bundle();
        decryptedBundle.readFromParcel(decryptedParcel);
        decryptedParcel.recycle();
        return decryptedBundle;
!!!73308215.java!!!	verifyMac(inout cipherArray : byte [[]], inout iv : byte [[]], inout macArray : byte [[]]) : boolean
        if (cipherArray == null || cipherArray.length == 0 || macArray == null
                || macArray.length == 0) {
            if (Log.isLoggable(TAG, Log.VERBOSE)) {
                Log.v(TAG, "Cipher or MAC is empty!");
            }
            return false;
        }
        return constantTimeArrayEquals(macArray, createMac(cipherArray, iv));
!!!73308343.java!!!	createMac(inout cipher : byte [[]], inout iv : byte [[]]) : byte
        Mac mac = Mac.getInstance(MAC_ALGORITHM);
        mac.init(mMacKey);
        mac.update(cipher);
        mac.update(iv);
        return mac.doFinal();
!!!73308471.java!!!	constantTimeArrayEquals(inout a : byte [[]], inout b : byte [[]]) : boolean
        if (a == null || b == null) {
            return a == b;
        }
        if (a.length != b.length) {
            return false;
        }
        boolean isEqual = true;
        for (int i = 0; i < b.length; i++) {
            isEqual &= (a[i] == b[i]);
        }
        return isEqual;
