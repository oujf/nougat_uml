class Installer
!!!74202807.java!!!	Installer(inout context : Context)
        super(context);
        mInstaller = new InstallerConnection();
!!!74202935.java!!!	setWarnIfHeld(inout warnIfHeld : Object) : void
        mInstaller.setWarnIfHeld(warnIfHeld);
!!!74203063.java!!!	onStart() : void
        Slog.i(TAG, "Waiting for installd to be ready.");
        mInstaller.waitForConnection();
!!!74203191.java!!!	createAppData(inout uuid : String, inout pkgname : String, in userid : int, in flags : int, in appid : int, inout seinfo : String, in targetSdkVersion : int) : void
        mInstaller.execute("create_app_data", uuid, pkgname, userid, flags, appid, seinfo,
            targetSdkVersion);
!!!74203319.java!!!	restoreconAppData(inout uuid : String, inout pkgname : String, in userid : int, in flags : int, in appid : int, inout seinfo : String) : void
        mInstaller.execute("restorecon_app_data", uuid, pkgname, userid, flags, appid,
                seinfo);
!!!74203447.java!!!	migrateAppData(inout uuid : String, inout pkgname : String, in userid : int, in flags : int) : void
        mInstaller.execute("migrate_app_data", uuid, pkgname, userid, flags);
!!!74203575.java!!!	clearAppData(inout uuid : String, inout pkgname : String, in userid : int, in flags : int, in ceDataInode : long) : void
        mInstaller.execute("clear_app_data", uuid, pkgname, userid, flags, ceDataInode);
!!!74203703.java!!!	destroyAppData(inout uuid : String, inout pkgname : String, in userid : int, in flags : int, in ceDataInode : long) : void
        mInstaller.execute("destroy_app_data", uuid, pkgname, userid, flags, ceDataInode);
!!!74203831.java!!!	moveCompleteApp(inout from_uuid : String, inout to_uuid : String, inout package_name : String, inout data_app_name : String, in appid : int, inout seinfo : String, in targetSdkVersion : int) : void
        mInstaller.execute("move_complete_app", from_uuid, to_uuid, package_name,
                data_app_name, appid, seinfo, targetSdkVersion);
!!!74203959.java!!!	getAppSize(inout uuid : String, inout pkgname : String, in userid : int, in flags : int, in ceDataInode : long, inout codePath : String, inout stats : PackageStats) : void
        final String[] res = mInstaller.execute("get_app_size", uuid, pkgname, userid, flags,
                ceDataInode, codePath);
        try {
            stats.codeSize += Long.parseLong(res[1]);
            stats.dataSize += Long.parseLong(res[2]);
            stats.cacheSize += Long.parseLong(res[3]);
        } catch (ArrayIndexOutOfBoundsException | NumberFormatException e) {
            throw new InstallerException("Invalid size result: " + Arrays.toString(res));
        }
!!!74204087.java!!!	getAppDataInode(inout uuid : String, inout pkgname : String, in userid : int, in flags : int) : long
        final String[] res = mInstaller.execute("get_app_data_inode", uuid, pkgname, userid, flags);
        try {
            return Long.parseLong(res[1]);
        } catch (ArrayIndexOutOfBoundsException | NumberFormatException e) {
            throw new InstallerException("Invalid inode result: " + Arrays.toString(res));
        }
!!!74204215.java!!!	dexopt(inout apkPath : String, in uid : int, inout instructionSet : String, in dexoptNeeded : int, in dexFlags : int, inout compilerFilter : String, inout volumeUuid : String, inout sharedLibraries : String) : void
        assertValidInstructionSet(instructionSet);
        mInstaller.dexopt(apkPath, uid, instructionSet, dexoptNeeded, dexFlags,
                compilerFilter, volumeUuid, sharedLibraries);
!!!74204343.java!!!	dexopt(inout apkPath : String, in uid : int, inout pkgName : String, inout instructionSet : String, in dexoptNeeded : int, inout outputPath : String, in dexFlags : int, inout compilerFilter : String, inout volumeUuid : String, inout sharedLibraries : String) : void
        assertValidInstructionSet(instructionSet);
        mInstaller.dexopt(apkPath, uid, pkgName, instructionSet, dexoptNeeded,
                outputPath, dexFlags, compilerFilter, volumeUuid, sharedLibraries);
!!!74204471.java!!!	mergeProfiles(in uid : int, inout pkgName : String) : boolean
        return mInstaller.mergeProfiles(uid, pkgName);
!!!74204599.java!!!	dumpProfiles(inout gid : String, inout packageName : String, inout codePaths : String) : boolean
        return mInstaller.dumpProfiles(gid, packageName, codePaths);
!!!74204727.java!!!	idmap(inout targetApkPath : String, inout overlayApkPath : String, in uid : int) : void
        mInstaller.execute("idmap", targetApkPath, overlayApkPath, uid);
!!!74204855.java!!!	rmdex(inout codePath : String, inout instructionSet : String) : void
        assertValidInstructionSet(instructionSet);
        mInstaller.execute("rmdex", codePath, instructionSet);
!!!74204983.java!!!	rmPackageDir(inout packageDir : String) : void
        mInstaller.execute("rmpackagedir", packageDir);
!!!74205111.java!!!	clearAppProfiles(inout pkgName : String) : void
        mInstaller.execute("clear_app_profiles", pkgName);
!!!74205239.java!!!	destroyAppProfiles(inout pkgName : String) : void
        mInstaller.execute("destroy_app_profiles", pkgName);
!!!74205367.java!!!	createUserData(inout uuid : String, in userId : int, in userSerial : int, in flags : int) : void
        mInstaller.execute("create_user_data", uuid, userId, userSerial, flags);
!!!74205495.java!!!	destroyUserData(inout uuid : String, in userId : int, in flags : int) : void
        mInstaller.execute("destroy_user_data", uuid, userId, flags);
!!!74205623.java!!!	markBootComplete(inout instructionSet : String) : void
        assertValidInstructionSet(instructionSet);
        mInstaller.execute("markbootcomplete", instructionSet);
!!!74205751.java!!!	freeCache(inout uuid : String, in freeStorageSize : long) : void
        mInstaller.execute("freecache", uuid, freeStorageSize);
!!!74205879.java!!!	linkNativeLibraryDirectory(inout uuid : String, inout dataPath : String, inout nativeLibPath32 : String, in userId : int) : void
        mInstaller.execute("linklib", uuid, dataPath, nativeLibPath32, userId);
!!!74206007.java!!!	createOatDir(inout oatDir : String, inout dexInstructionSet : String) : void
        mInstaller.execute("createoatdir", oatDir, dexInstructionSet);
!!!74206135.java!!!	linkFile(inout relativePath : String, inout fromBase : String, inout toBase : String) : void
        mInstaller.execute("linkfile", relativePath, fromBase, toBase);
!!!74206263.java!!!	moveAb(inout apkPath : String, inout instructionSet : String, inout outputPath : String) : void
        mInstaller.execute("move_ab", apkPath, instructionSet, outputPath);
!!!74206391.java!!!	assertValidInstructionSet(inout instructionSet : String) : void
        for (String abi : Build.SUPPORTED_ABIS) {
            if (VMRuntime.getInstructionSet(abi).equals(instructionSet)) {
                return;
            }
        }
        throw new InstallerException("Invalid instruction set: " + instructionSet);
