class KeepaliveInfo
!!!73623479.java!!!	KeepaliveInfo(inout messenger : Messenger, inout binder : IBinder, inout nai : NetworkAgentInfo, inout packet : KeepalivePacketData, in interval : int)
            mMessenger = messenger;
            mBinder = binder;
            mPid = Binder.getCallingPid();
            mUid = Binder.getCallingUid();

            mNai = nai;
            mPacket = packet;
            mInterval = interval;

            try {
                mBinder.linkToDeath(this, 0);
            } catch (RemoteException e) {
                binderDied();
            }
!!!73623607.java!!!	getNai() : NetworkAgentInfo
            return mNai;
!!!73623735.java!!!	toString() : String
            return new StringBuffer("KeepaliveInfo [")
                    .append(" network=").append(mNai.network)
                    .append(" isStarted=").append(isStarted)
                    .append(" ")
                    .append(IpUtils.addressAndPortToString(mPacket.srcAddress, mPacket.srcPort))
                    .append("->")
                    .append(IpUtils.addressAndPortToString(mPacket.dstAddress, mPacket.dstPort))
                    .append(" interval=" + mInterval)
                    .append(" data=" + HexDump.toHexString(mPacket.data))
                    .append(" uid=").append(mUid).append(" pid=").append(mPid)
                    .append(" ]")
                    .toString();
!!!73623863.java!!!	notifyMessenger(in slot : int, in err : int) : void
            KeepaliveTracker.this.notifyMessenger(mMessenger, slot, err);
!!!73623991.java!!!	binderDied() : void
            // Not called from ConnectivityService handler thread, so send it a message.
            mConnectivityServiceHandler.obtainMessage(
                    NetworkAgent.CMD_STOP_PACKET_KEEPALIVE,
                    mSlot, PacketKeepalive.BINDER_DIED, mNai.network).sendToTarget();
!!!73624119.java!!!	unlinkDeathRecipient() : void
            if (mBinder != null) {
                mBinder.unlinkToDeath(this, 0);
            }
!!!73624247.java!!!	checkNetworkConnected() : int
            if (!mNai.networkInfo.isConnectedOrConnecting()) {
                return ERROR_INVALID_NETWORK;
            }
            return SUCCESS;
!!!73624375.java!!!	checkSourceAddress() : int
            // Check that we have the source address.
            for (InetAddress address : mNai.linkProperties.getAddresses()) {
                if (address.equals(mPacket.srcAddress)) {
                    return SUCCESS;
                }
            }
            return ERROR_INVALID_IP_ADDRESS;
!!!73624503.java!!!	checkInterval() : int
            return mInterval >= 20 ? SUCCESS : ERROR_INVALID_INTERVAL;
!!!73624631.java!!!	isValid() : int
            synchronized (mNai) {
                int error = checkInterval();
                if (error == SUCCESS) error = checkNetworkConnected();
                if (error == SUCCESS) error = checkSourceAddress();
                return error;
            }
!!!73624759.java!!!	start(in slot : int) : void
            int error = isValid();
            if (error == SUCCESS) {
                mSlot = slot;
                Log.d(TAG, "Starting keepalive " + mSlot + " on " + mNai.name());
                mNai.asyncChannel.sendMessage(CMD_START_PACKET_KEEPALIVE, slot, mInterval, mPacket);
            } else {
                notifyMessenger(NO_KEEPALIVE, error);
                return;
            }
!!!73624887.java!!!	stop(in reason : int) : void
            int uid = Binder.getCallingUid();
            if (uid != mUid && uid != Process.SYSTEM_UID) {
                if (DBG) {
                    Log.e(TAG, "Cannot stop unowned keepalive " + mSlot + " on " + mNai.network);
                }
            }
            if (isStarted) {
                Log.d(TAG, "Stopping keepalive " + mSlot + " on " + mNai.name());
                mNai.asyncChannel.sendMessage(CMD_STOP_PACKET_KEEPALIVE, mSlot);
            }
            // TODO: at the moment we unconditionally return failure here. In cases where the
            // NetworkAgent is alive, should we ask it to reply, so it can return failure?
            notifyMessenger(mSlot, reason);
            unlinkDeathRecipient();
