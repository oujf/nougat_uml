class SystemAudioStatusAction
!!!73896887.java!!!	SystemAudioStatusAction(inout source : HdmiCecLocalDevice, in avrAddress : int, inout callback : IHdmiControlCallback)
        super(source);
        mAvrAddress = avrAddress;
        mCallback = callback;
!!!73897015.java!!!	start() : boolean
        mState = STATE_WAIT_FOR_REPORT_AUDIO_STATUS;
        addTimer(mState, HdmiConfig.TIMEOUT_MS);
        sendGiveAudioStatus();
        return true;
!!!73897143.java!!!	sendGiveAudioStatus() : void
        sendCommand(HdmiCecMessageBuilder.buildGiveAudioStatus(getSourceAddress(), mAvrAddress),
                new SendMessageCallback() {
            @Override
            public void onSendCompleted(int error) {
                if (error != Constants.SEND_RESULT_SUCCESS) {
                    handleSendGiveAudioStatusFailure();
                }
            }
        });
!!!73897271.java!!!	handleSendGiveAudioStatusFailure() : void
        // Inform to all application that the audio status (volumn, mute) of
        // the audio amplifier is unknown.
        tv().setAudioStatus(false, Constants.UNKNOWN_VOLUME);

        sendUserControlPressedAndReleased(mAvrAddress,
                HdmiCecKeycode.getMuteKey(!tv().isSystemAudioActivated()));

        // Still return SUCCESS to callback.
        finishWithCallback(HdmiControlManager.RESULT_SUCCESS);
!!!73897399.java!!!	processCommand(inout cmd : HdmiCecMessage) : boolean
        if (mState != STATE_WAIT_FOR_REPORT_AUDIO_STATUS || mAvrAddress != cmd.getSource()) {
            return false;
        }

        switch (cmd.getOpcode()) {
            case Constants.MESSAGE_REPORT_AUDIO_STATUS:
                handleReportAudioStatus(cmd);
                return true;
        }

        return false;
!!!73897527.java!!!	handleReportAudioStatus(inout cmd : HdmiCecMessage) : void
        byte[] params = cmd.getParams();
        boolean mute = (params[0] & 0x80) == 0x80;
        int volume = params[0] & 0x7F;
        tv().setAudioStatus(mute, volume);

        if (!(tv().isSystemAudioActivated() ^ mute)) {
            // Toggle AVR's mute status to match with the system audio status.
            sendUserControlPressedAndReleased(mAvrAddress, HdmiCecKeycode.CEC_KEYCODE_MUTE);
        }
        finishWithCallback(HdmiControlManager.RESULT_SUCCESS);
!!!73897655.java!!!	finishWithCallback(in returnCode : int) : void
        if (mCallback != null) {
            try {
                mCallback.onComplete(returnCode);
            } catch (RemoteException e) {
                Slog.e(TAG, "Failed to invoke callback.", e);
            }
        }
        finish();
!!!73897783.java!!!	handleTimerEvent(in state : int) : void
        if (mState != state) {
            return;
        }

        handleSendGiveAudioStatusFailure();
