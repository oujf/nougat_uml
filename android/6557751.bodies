class InputDeviceState
!!!73906743.java!!!	getTouchCalibration(in surfaceRotation : int) : TouchCalibration
            try {
                return mTouchCalibration[surfaceRotation];
            } catch (ArrayIndexOutOfBoundsException ex) {
                Slog.w(InputManagerService.TAG, "Cannot get touch calibration.", ex);
                return null;
            }
!!!73906871.java!!!	setTouchCalibration(in surfaceRotation : int, inout calibration : TouchCalibration) : boolean
            try {
                if (!calibration.equals(mTouchCalibration[surfaceRotation])) {
                    mTouchCalibration[surfaceRotation] = calibration;
                    return true;
                }
                return false;
            } catch (ArrayIndexOutOfBoundsException ex) {
                Slog.w(InputManagerService.TAG, "Cannot set touch calibration.", ex);
                return false;
            }
!!!73906999.java!!!	getCurrentKeyboardLayout() : String
            return mCurrentKeyboardLayout;
!!!73907127.java!!!	setCurrentKeyboardLayout(inout keyboardLayout : String) : boolean
            if (Objects.equal(mCurrentKeyboardLayout, keyboardLayout)) {
                return false;
            }
            addKeyboardLayout(keyboardLayout);
            mCurrentKeyboardLayout = keyboardLayout;
            return true;
!!!73907255.java!!!	getKeyboardLayouts() : String
            if (mUnassociatedKeyboardLayouts.isEmpty()) {
                return (String[])ArrayUtils.emptyArray(String.class);
            }
            return mUnassociatedKeyboardLayouts.toArray(
                    new String[mUnassociatedKeyboardLayouts.size()]);
!!!73907383.java!!!	getKeyboardLayout(inout handle : InputMethodSubtypeHandle) : String
            return mKeyboardLayouts.get(handle);
!!!73907511.java!!!	setKeyboardLayout(inout imeHandle : InputMethodSubtypeHandle, inout keyboardLayout : String) : boolean
            String existingLayout = mKeyboardLayouts.get(imeHandle);
            if (TextUtils.equals(existingLayout, keyboardLayout)) {
                return false;
            }
            mKeyboardLayouts.put(imeHandle, keyboardLayout);
            return true;
!!!73907639.java!!!	addKeyboardLayout(inout keyboardLayout : String) : boolean
            int index = Collections.binarySearch(
                    mUnassociatedKeyboardLayouts, keyboardLayout);
            if (index >= 0) {
                return false;
            }
            mUnassociatedKeyboardLayouts.add(-index - 1, keyboardLayout);
            if (mCurrentKeyboardLayout == null) {
                mCurrentKeyboardLayout = keyboardLayout;
            }
            return true;
!!!73907767.java!!!	removeKeyboardLayout(inout keyboardLayout : String) : boolean
            int index = Collections.binarySearch(mUnassociatedKeyboardLayouts, keyboardLayout);
            if (index < 0) {
                return false;
            }
            mUnassociatedKeyboardLayouts.remove(index);
            updateCurrentKeyboardLayoutIfRemoved(keyboardLayout, index);
            return true;
!!!73907895.java!!!	updateCurrentKeyboardLayoutIfRemoved(inout removedKeyboardLayout : String, in removedIndex : int) : void
            if (Objects.equal(mCurrentKeyboardLayout, removedKeyboardLayout)) {
                if (!mUnassociatedKeyboardLayouts.isEmpty()) {
                    int index = removedIndex;
                    if (index == mUnassociatedKeyboardLayouts.size()) {
                        index = 0;
                    }
                    mCurrentKeyboardLayout = mUnassociatedKeyboardLayouts.get(index);
                } else {
                    mCurrentKeyboardLayout = null;
                }
            }
!!!73908023.java!!!	switchKeyboardLayout(inout imeHandle : InputMethodSubtypeHandle) : boolean
            final String layout = mKeyboardLayouts.get(imeHandle);
            if (!TextUtils.equals(mCurrentKeyboardLayout, layout)) {
                mCurrentKeyboardLayout = layout;
                return true;
            }
            return false;
!!!73908151.java!!!	removeUninstalledKeyboardLayouts(inout availableKeyboardLayouts : Set<String>) : boolean
            boolean changed = false;
            for (int i = mUnassociatedKeyboardLayouts.size(); i-- > 0; ) {
                String keyboardLayout = mUnassociatedKeyboardLayouts.get(i);
                if (!availableKeyboardLayouts.contains(keyboardLayout)) {
                    Slog.i(TAG, "Removing uninstalled keyboard layout " + keyboardLayout);
                    mUnassociatedKeyboardLayouts.remove(i);
                    updateCurrentKeyboardLayoutIfRemoved(keyboardLayout, i);
                    changed = true;
                }
            }
            return changed;
!!!73908279.java!!!	loadFromXml(inout parser : XmlPullParser) : void
            final int outerDepth = parser.getDepth();
            while (XmlUtils.nextElementWithin(parser, outerDepth)) {
                if (parser.getName().equals("keyboard-layout")) {
                    String descriptor = parser.getAttributeValue(null, "descriptor");
                    if (descriptor == null) {
                        throw new XmlPullParserException(
                                "Missing descriptor attribute on keyboard-layout.");
                    }

                    String current = parser.getAttributeValue(null, "current");
                    if (current != null && current.equals("true")) {
                        if (mCurrentKeyboardLayout != null) {
                            throw new XmlPullParserException(
                                    "Found multiple current keyboard layouts.");
                        }
                        mCurrentKeyboardLayout = descriptor;
                    }

                    String inputMethodId = parser.getAttributeValue(null, "input-method-id");
                    String inputMethodSubtypeId =
                        parser.getAttributeValue(null, "input-method-subtype-id");
                    if (inputMethodId == null && inputMethodSubtypeId != null
                            || inputMethodId != null && inputMethodSubtypeId == null) {
                        throw new XmlPullParserException(
                                "Found an incomplete input method description");
                    }

                    if (inputMethodSubtypeId != null) {
                        InputMethodSubtypeHandle handle = new InputMethodSubtypeHandle(
                                inputMethodId, Integer.parseInt(inputMethodSubtypeId));
                        if (mKeyboardLayouts.containsKey(handle)) {
                            throw new XmlPullParserException(
                                    "Found duplicate subtype to keyboard layout mapping: "
                                    + handle);
                        }
                        mKeyboardLayouts.put(handle, descriptor);
                    } else {
                        if (mUnassociatedKeyboardLayouts.contains(descriptor)) {
                            throw new XmlPullParserException(
                                    "Found duplicate unassociated keyboard layout: " + descriptor);
                        }
                        mUnassociatedKeyboardLayouts.add(descriptor);
                    }
                } else if (parser.getName().equals("calibration")) {
                    String format = parser.getAttributeValue(null, "format");
                    String rotation = parser.getAttributeValue(null, "rotation");
                    int r = -1;

                    if (format == null) {
                        throw new XmlPullParserException(
                                "Missing format attribute on calibration.");
                    }
                    if (!format.equals("affine")) {
                        throw new XmlPullParserException(
                                "Unsupported format for calibration.");
                    }
                    if (rotation != null) {
                        try {
                            r = stringToSurfaceRotation(rotation);
                        } catch (IllegalArgumentException e) {
                            throw new XmlPullParserException(
                                    "Unsupported rotation for calibration.");
                        }
                    }

                    float[] matrix = TouchCalibration.IDENTITY.getAffineTransform();
                    int depth = parser.getDepth();
                    while (XmlUtils.nextElementWithin(parser, depth)) {
                        String tag = parser.getName().toLowerCase();
                        String value = parser.nextText();

                        for (int i = 0; i < matrix.length && i < CALIBRATION_NAME.length; i++) {
                            if (tag.equals(CALIBRATION_NAME[i])) {
                                matrix[i] = Float.parseFloat(value);
                                break;
                            }
                        }
                    }

                    if (r == -1) {
                        // Assume calibration applies to all rotations
                        for (r = 0; r < mTouchCalibration.length; r++) {
                            mTouchCalibration[r] = new TouchCalibration(matrix[0],
                                matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);
                        }
                    } else {
                        mTouchCalibration[r] = new TouchCalibration(matrix[0],
                            matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);
                    }
                }
            }

            // Maintain invariant that layouts are sorted.
            Collections.sort(mUnassociatedKeyboardLayouts);

            // Maintain invariant that there is always a current keyboard layout unless
            // there are none installed.
            if (mCurrentKeyboardLayout == null && !mUnassociatedKeyboardLayouts.isEmpty()) {
                mCurrentKeyboardLayout = mUnassociatedKeyboardLayouts.get(0);
            }
!!!73908407.java!!!	saveToXml(inout serializer : XmlSerializer) : void
            for (String layout : mUnassociatedKeyboardLayouts) {
                serializer.startTag(null, "keyboard-layout");
                serializer.attribute(null, "descriptor", layout);
                serializer.endTag(null, "keyboard-layout");
            }

            final int N = mKeyboardLayouts.size();
            for (int i = 0; i < N; i++) {
                final InputMethodSubtypeHandle handle = mKeyboardLayouts.keyAt(i);
                final String layout = mKeyboardLayouts.valueAt(i);
                serializer.startTag(null, "keyboard-layout");
                serializer.attribute(null, "descriptor", layout);
                serializer.attribute(null, "input-method-id", handle.getInputMethodId());
                serializer.attribute(null, "input-method-subtype-id",
                        Integer.toString(handle.getSubtypeId()));
                if (layout.equals(mCurrentKeyboardLayout)) {
                    serializer.attribute(null, "current", "true");
                }
                serializer.endTag(null, "keyboard-layout");
            }

            for (int i = 0; i < mTouchCalibration.length; i++) {
                if (mTouchCalibration[i] != null) {
                    String rotation = surfaceRotationToString(i);
                    float[] transform = mTouchCalibration[i].getAffineTransform();

                    serializer.startTag(null, "calibration");
                    serializer.attribute(null, "format", "affine");
                    serializer.attribute(null, "rotation", rotation);
                    for (int j = 0; j < transform.length && j < CALIBRATION_NAME.length; j++) {
                        serializer.startTag(null, CALIBRATION_NAME[j]);
                        serializer.text(Float.toString(transform[j]));
                        serializer.endTag(null, CALIBRATION_NAME[j]);
                    }
                    serializer.endTag(null, "calibration");
                }
            }
!!!73908535.java!!!	dump(in pw : PrintWriter, in prefix : String) : void
            pw.println(prefix + "CurrentKeyboardLayout=" + mCurrentKeyboardLayout);
            pw.println(prefix + "UnassociatedKeyboardLayouts=" + mUnassociatedKeyboardLayouts);
            pw.println(prefix + "TouchCalibration=" + Arrays.toString(mTouchCalibration));
            pw.println(prefix + "Subtype to Layout Mappings:");
            final int N = mKeyboardLayouts.size();
            if (N != 0) {
                for (int i = 0; i < N; i++) {
                    pw.println(prefix + "  " + mKeyboardLayouts.keyAt(i) + ": "
                            + mKeyboardLayouts.valueAt(i));
                }
            } else {
                pw.println(prefix + "  <none>");
            }
!!!73908663.java!!!	surfaceRotationToString(in surfaceRotation : int) : String
            switch (surfaceRotation) {
                case Surface.ROTATION_0:   return "0";
                case Surface.ROTATION_90:  return "90";
                case Surface.ROTATION_180: return "180";
                case Surface.ROTATION_270: return "270";
            }
            throw new IllegalArgumentException("Unsupported surface rotation value" + surfaceRotation);
!!!73908791.java!!!	stringToSurfaceRotation(inout s : String) : int
            if ("0".equals(s)) {
                return Surface.ROTATION_0;
            }
            if ("90".equals(s)) {
                return Surface.ROTATION_90;
            }
            if ("180".equals(s)) {
                return Surface.ROTATION_180;
            }
            if ("270".equals(s)) {
                return Surface.ROTATION_270;
            }
            throw new IllegalArgumentException("Unsupported surface rotation string '" + s + "'");
