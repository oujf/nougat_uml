class RemoteListenerHelper
!!!73988791.java!!!	RemoteListenerHelper(inout handler : Handler, inout name : String)
        Preconditions.checkNotNull(name);
        mHandler = handler;
        mTag = name;
!!!73988919.java!!!	addListener(inout listener : TListener) : boolean
        Preconditions.checkNotNull(listener, "Attempted to register a 'null' listener.");
        IBinder binder = listener.asBinder();
        LinkedListener deathListener = new LinkedListener(listener);
        synchronized (mListenerMap) {
            if (mListenerMap.containsKey(binder)) {
                // listener already added
                return true;
            }
            try {
                binder.linkToDeath(deathListener, 0 /* flags */);
            } catch (RemoteException e) {
                // if the remote process registering the listener is already death, just swallow the
                // exception and return
                Log.v(mTag, "Remote listener already died.", e);
                return false;
            }
            mListenerMap.put(binder, deathListener);

            // update statuses we already know about, starting from the ones that will never change
            int result;
            if (!isAvailableInPlatform()) {
                result = RESULT_NOT_AVAILABLE;
            } else if (mHasIsSupported && !mIsSupported) {
                result = RESULT_NOT_SUPPORTED;
            } else if (!isGpsEnabled()) {
                result = RESULT_GPS_LOCATION_DISABLED;
            } else if (!tryRegister()) {
                // only attempt to register if GPS is enabled, otherwise we will register once GPS
                // becomes available
                result = RESULT_INTERNAL_ERROR;
            } else if (mHasIsSupported && mIsSupported) {
                result = RESULT_SUCCESS;
            } else {
                // at this point if the supported flag is not set, the notification will be sent
                // asynchronously in the future
                return true;
            }
            post(listener, getHandlerOperation(result));
        }
        return true;
!!!73989047.java!!!	removeListener(inout listener : TListener) : void
        Preconditions.checkNotNull(listener, "Attempted to remove a 'null' listener.");
        IBinder binder = listener.asBinder();
        LinkedListener linkedListener;
        synchronized (mListenerMap) {
            linkedListener = mListenerMap.remove(binder);
            if (mListenerMap.isEmpty()) {
                tryUnregister();
            }
        }
        if (linkedListener != null) {
            binder.unlinkToDeath(linkedListener, 0 /* flags */);
        }
!!!73989943.java!!!	foreach(inout operation : RemoteListenerHelper::ListenerOperation) : void
        synchronized (mListenerMap) {
            foreachUnsafe(operation);
        }
!!!73990071.java!!!	setSupported(inout value : boolean) : void
        synchronized (mListenerMap) {
            mHasIsSupported = true;
            mIsSupported = value;
        }
!!!73990199.java!!!	tryUpdateRegistrationWithService() : boolean
        synchronized (mListenerMap) {
            if (!isGpsEnabled()) {
                tryUnregister();
                return true;
            }
            if (mListenerMap.isEmpty()) {
                return true;
            }
            if (tryRegister()) {
                // registration was successful, there is no need to update the state
                return true;
            }
            ListenerOperation<TListener> operation = getHandlerOperation(RESULT_INTERNAL_ERROR);
            foreachUnsafe(operation);
            return false;
        }
!!!73990327.java!!!	updateResult() : void
        synchronized (mListenerMap) {
            int newResult = calculateCurrentResultUnsafe();
            if (mLastReportedResult == newResult) {
                return;
            }
            foreachUnsafe(getHandlerOperation(newResult));
            mLastReportedResult = newResult;
        }
!!!73990455.java!!!	foreachUnsafe(inout operation : RemoteListenerHelper::ListenerOperation) : void
        for (LinkedListener linkedListener : mListenerMap.values()) {
            post(linkedListener.getUnderlyingListener(), operation);
        }
!!!73990583.java!!!	post(inout listener : TListener, inout operation : RemoteListenerHelper::ListenerOperation) : void
        if (operation != null) {
            mHandler.post(new HandlerRunnable(listener, operation));
        }
!!!73990711.java!!!	tryRegister() : boolean
        if (!mIsRegistered) {
            mIsRegistered = registerWithService();
        }
        return mIsRegistered;
!!!73990839.java!!!	tryUnregister() : void
        if (!mIsRegistered) {
            return;
        }
        unregisterFromService();
        mIsRegistered = false;
!!!73990967.java!!!	calculateCurrentResultUnsafe() : int
        // update statuses we already know about, starting from the ones that will never change
        if (!isAvailableInPlatform()) {
            return RESULT_NOT_AVAILABLE;
        }
        if (!mHasIsSupported || mListenerMap.isEmpty()) {
            // we'll update once we have a supported status available
            return RESULT_UNKNOWN;
        }
        if (!mIsSupported) {
            return RESULT_NOT_SUPPORTED;
        }
        if (!isGpsEnabled()) {
            return RESULT_GPS_LOCATION_DISABLED;
        }
        return RESULT_SUCCESS;
