class LocationBasedCountryDetector
!!!73994935.java!!!	LocationBasedCountryDetector(inout ctx : Context)
        super(ctx);
        mLocationManager = (LocationManager) ctx.getSystemService(Context.LOCATION_SERVICE);
!!!73995063.java!!!	getCountryFromLocation(inout location : Location) : String
        String country = null;
        Geocoder geoCoder = new Geocoder(mContext);
        try {
            List<Address> addresses = geoCoder.getFromLocation(
                    location.getLatitude(), location.getLongitude(), 1);
            if (addresses != null && addresses.size() > 0) {
                country = addresses.get(0).getCountryCode();
            }
        } catch (IOException e) {
            Slog.w(TAG, "Exception occurs when getting country from location");
        }
        return country;
!!!73995191.java!!!	isAcceptableProvider(inout provider : String) : boolean
        // We don't want to actively initiate a location fix here (with gps or network providers).
        return LocationManager.PASSIVE_PROVIDER.equals(provider);
!!!73995319.java!!!	registerListener(inout provider : String, inout listener : LocationListener) : void
        final long bid = Binder.clearCallingIdentity();
        try {
            mLocationManager.requestLocationUpdates(provider, 0, 0, listener);
        } finally {
            Binder.restoreCallingIdentity(bid);
        }
!!!73995447.java!!!	unregisterListener(inout listener : LocationListener) : void
        final long bid = Binder.clearCallingIdentity();
        try {
            mLocationManager.removeUpdates(listener);
        } finally {
            Binder.restoreCallingIdentity(bid);
        }
!!!73995575.java!!!	getLastKnownLocation() : Location
        final long bid = Binder.clearCallingIdentity();
        try {
            List<String> providers = mLocationManager.getAllProviders();
            Location bestLocation = null;
            for (String provider : providers) {
                Location lastKnownLocation = mLocationManager.getLastKnownLocation(provider);
                if (lastKnownLocation != null) {
                    if (bestLocation == null ||
                            bestLocation.getElapsedRealtimeNanos() <
                            lastKnownLocation.getElapsedRealtimeNanos()) {
                        bestLocation = lastKnownLocation;
                    }
                }
            }
            return bestLocation;
        } finally {
            Binder.restoreCallingIdentity(bid);
        }
!!!73995703.java!!!	getQueryLocationTimeout() : long
        return QUERY_LOCATION_TIMEOUT;
!!!73995831.java!!!	getEnabledProviders() : String
        if (mEnabledProviders == null) {
            mEnabledProviders = mLocationManager.getProviders(true);
        }
        return mEnabledProviders;
!!!73995959.java!!!	detectCountry() : Country
        if (mLocationListeners  != null) {
            throw new IllegalStateException();
        }
        // Request the location from all enabled providers.
        List<String> enabledProviders = getEnabledProviders();
        int totalProviders = enabledProviders.size();
        if (totalProviders > 0) {
            mLocationListeners = new ArrayList<LocationListener>(totalProviders);
            for (int i = 0; i < totalProviders; i++) {
                String provider = enabledProviders.get(i);
                if (isAcceptableProvider(provider)) {
                    LocationListener listener = new LocationListener () {
                        @Override
                        public void onLocationChanged(Location location) {
                            if (location != null) {
                                LocationBasedCountryDetector.this.stop();
                                queryCountryCode(location);
                            }
                        }
                        @Override
                        public void onProviderDisabled(String provider) {
                        }
                        @Override
                        public void onProviderEnabled(String provider) {
                        }
                        @Override
                        public void onStatusChanged(String provider, int status, Bundle extras) {
                        }
                    };
                    mLocationListeners.add(listener);
                    registerListener(provider, listener);
                }
            }

            mTimer = new Timer();
            mTimer.schedule(new TimerTask() {
                @Override
                public void run() {
                    mTimer = null;
                    LocationBasedCountryDetector.this.stop();
                    // Looks like no provider could provide the location, let's try the last
                    // known location.
                    queryCountryCode(getLastKnownLocation());
                }
            }, getQueryLocationTimeout());
        } else {
            // There is no provider enabled.
            queryCountryCode(getLastKnownLocation());
        }
        return mDetectedCountry;
!!!73996087.java!!!	stop() : void
        if (mLocationListeners != null) {
            for (LocationListener listener : mLocationListeners) {
                unregisterListener(listener);
            }
            mLocationListeners = null;
        }
        if (mTimer != null) {
            mTimer.cancel();
            mTimer = null;
        }
!!!73996215.java!!!	queryCountryCode(in location : Location) : void
        if (location == null) {
            notifyListener(null);
            return;
        }
        if (mQueryThread != null) return;
        mQueryThread = new Thread(new Runnable() {
            @Override
            public void run() {
                String countryIso = null;
                if (location != null) {
                    countryIso = getCountryFromLocation(location);
                }
                if (countryIso != null) {
                    mDetectedCountry = new Country(countryIso, Country.COUNTRY_SOURCE_LOCATION);
                } else {
                    mDetectedCountry = null;
                }
                notifyListener(mDetectedCountry);
                mQueryThread = null;
            }
        });
        mQueryThread.start();
