class UserHandler
!!!74017847.java!!!	UserHandler(inout service : MediaRouterService, inout userRecord : MediaRouterService::UserRecord)
            super(Looper.getMainLooper(), null, true);
            mService = service;
            mUserRecord = userRecord;
            mWatcher = new RemoteDisplayProviderWatcher(service.mContext, this,
                    this, mUserRecord.mUserId);
!!!74017975.java!!!	handleMessage(inout msg : Message) : void
            switch (msg.what) {
                case MSG_START: {
                    start();
                    break;
                }
                case MSG_STOP: {
                    stop();
                    break;
                }
                case MSG_UPDATE_DISCOVERY_REQUEST: {
                    updateDiscoveryRequest();
                    break;
                }
                case MSG_SELECT_ROUTE: {
                    selectRoute((String)msg.obj);
                    break;
                }
                case MSG_UNSELECT_ROUTE: {
                    unselectRoute((String)msg.obj);
                    break;
                }
                case MSG_REQUEST_SET_VOLUME: {
                    requestSetVolume((String)msg.obj, msg.arg1);
                    break;
                }
                case MSG_REQUEST_UPDATE_VOLUME: {
                    requestUpdateVolume((String)msg.obj, msg.arg1);
                    break;
                }
                case MSG_UPDATE_CLIENT_STATE: {
                    updateClientState();
                    break;
                }
                case MSG_CONNECTION_TIMED_OUT: {
                    connectionTimedOut();
                    break;
                }
            }
!!!74018103.java!!!	dump(inout pw : PrintWriter, inout prefix : String) : void
            pw.println(prefix + "Handler");

            final String indent = prefix + "  ";
            pw.println(indent + "mRunning=" + mRunning);
            pw.println(indent + "mDiscoveryMode=" + mDiscoveryMode);
            pw.println(indent + "mGloballySelectedRouteRecord=" + mGloballySelectedRouteRecord);
            pw.println(indent + "mConnectionPhase=" + mConnectionPhase);
            pw.println(indent + "mConnectionTimeoutReason=" + mConnectionTimeoutReason);
            pw.println(indent + "mConnectionTimeoutStartTime=" + (mConnectionTimeoutReason != 0 ?
                    TimeUtils.formatUptime(mConnectionTimeoutStartTime) : "<n/a>"));

            mWatcher.dump(pw, prefix);

            final int providerCount = mProviderRecords.size();
            if (providerCount != 0) {
                for (int i = 0; i < providerCount; i++) {
                    mProviderRecords.get(i).dump(pw, prefix);
                }
            } else {
                pw.println(indent + "<no providers>");
            }
!!!74018231.java!!!	start() : void
            if (!mRunning) {
                mRunning = true;
                mWatcher.start(); // also starts all providers
            }
!!!74018359.java!!!	stop() : void
            if (mRunning) {
                mRunning = false;
                unselectGloballySelectedRoute();
                mWatcher.stop(); // also stops all providers
            }
!!!74018487.java!!!	updateDiscoveryRequest() : void
            int routeTypes = 0;
            boolean activeScan = false;
            synchronized (mService.mLock) {
                final int count = mUserRecord.mClientRecords.size();
                for (int i = 0; i < count; i++) {
                    ClientRecord clientRecord = mUserRecord.mClientRecords.get(i);
                    routeTypes |= clientRecord.mRouteTypes;
                    activeScan |= clientRecord.mActiveScan;
                }
            }

            final int newDiscoveryMode;
            if ((routeTypes & MediaRouter.ROUTE_TYPE_REMOTE_DISPLAY) != 0) {
                if (activeScan) {
                    newDiscoveryMode = RemoteDisplayState.DISCOVERY_MODE_ACTIVE;
                } else {
                    newDiscoveryMode = RemoteDisplayState.DISCOVERY_MODE_PASSIVE;
                }
            } else {
                newDiscoveryMode = RemoteDisplayState.DISCOVERY_MODE_NONE;
            }

            if (mDiscoveryMode != newDiscoveryMode) {
                mDiscoveryMode = newDiscoveryMode;
                final int count = mProviderRecords.size();
                for (int i = 0; i < count; i++) {
                    mProviderRecords.get(i).getProvider().setDiscoveryMode(mDiscoveryMode);
                }
            }
!!!74018615.java!!!	selectRoute(inout routeId : String) : void
            if (routeId != null
                    && (mGloballySelectedRouteRecord == null
                            || !routeId.equals(mGloballySelectedRouteRecord.getUniqueId()))) {
                RouteRecord routeRecord = findRouteRecord(routeId);
                if (routeRecord != null) {
                    unselectGloballySelectedRoute();

                    Slog.i(TAG, "Selected global route:" + routeRecord);
                    mGloballySelectedRouteRecord = routeRecord;
                    checkGloballySelectedRouteState();
                    routeRecord.getProvider().setSelectedDisplay(routeRecord.getDescriptorId());

                    scheduleUpdateClientState();
                }
            }
!!!74018743.java!!!	unselectRoute(inout routeId : String) : void
            if (routeId != null
                    && mGloballySelectedRouteRecord != null
                    && routeId.equals(mGloballySelectedRouteRecord.getUniqueId())) {
                unselectGloballySelectedRoute();
            }
!!!74018871.java!!!	unselectGloballySelectedRoute() : void
            if (mGloballySelectedRouteRecord != null) {
                Slog.i(TAG, "Unselected global route:" + mGloballySelectedRouteRecord);
                mGloballySelectedRouteRecord.getProvider().setSelectedDisplay(null);
                mGloballySelectedRouteRecord = null;
                checkGloballySelectedRouteState();

                scheduleUpdateClientState();
            }
!!!74018999.java!!!	requestSetVolume(inout routeId : String, in volume : int) : void
            if (mGloballySelectedRouteRecord != null
                    && routeId.equals(mGloballySelectedRouteRecord.getUniqueId())) {
                mGloballySelectedRouteRecord.getProvider().setDisplayVolume(volume);
            }
!!!74019127.java!!!	requestUpdateVolume(inout routeId : String, in direction : int) : void
            if (mGloballySelectedRouteRecord != null
                    && routeId.equals(mGloballySelectedRouteRecord.getUniqueId())) {
                mGloballySelectedRouteRecord.getProvider().adjustDisplayVolume(direction);
            }
!!!74019255.java!!!	addProvider(inout provider : RemoteDisplayProviderProxy) : void
            provider.setCallback(this);
            provider.setDiscoveryMode(mDiscoveryMode);
            provider.setSelectedDisplay(null); // just to be safe

            ProviderRecord providerRecord = new ProviderRecord(provider);
            mProviderRecords.add(providerRecord);
            providerRecord.updateDescriptor(provider.getDisplayState());

            scheduleUpdateClientState();
!!!74019383.java!!!	removeProvider(inout provider : RemoteDisplayProviderProxy) : void
            int index = findProviderRecord(provider);
            if (index >= 0) {
                ProviderRecord providerRecord = mProviderRecords.remove(index);
                providerRecord.updateDescriptor(null); // mark routes invalid
                provider.setCallback(null);
                provider.setDiscoveryMode(RemoteDisplayState.DISCOVERY_MODE_NONE);

                checkGloballySelectedRouteState();
                scheduleUpdateClientState();
            }
!!!74019511.java!!!	onDisplayStateChanged(inout provider : RemoteDisplayProviderProxy, inout state : RemoteDisplayState) : void
            updateProvider(provider, state);
!!!74019639.java!!!	updateProvider(inout provider : RemoteDisplayProviderProxy, inout state : RemoteDisplayState) : void
            int index = findProviderRecord(provider);
            if (index >= 0) {
                ProviderRecord providerRecord = mProviderRecords.get(index);
                if (providerRecord.updateDescriptor(state)) {
                    checkGloballySelectedRouteState();
                    scheduleUpdateClientState();
                }
            }
!!!74019767.java!!!	checkGloballySelectedRouteState() : void
            // Unschedule timeouts when the route is unselected.
            if (mGloballySelectedRouteRecord == null) {
                mConnectionPhase = PHASE_NOT_AVAILABLE;
                updateConnectionTimeout(0);
                return;
            }

            // Ensure that the route is still present and enabled.
            if (!mGloballySelectedRouteRecord.isValid()
                    || !mGloballySelectedRouteRecord.isEnabled()) {
                updateConnectionTimeout(TIMEOUT_REASON_NOT_AVAILABLE);
                return;
            }

            // Make sure we haven't lost our connection.
            final int oldPhase = mConnectionPhase;
            mConnectionPhase = getConnectionPhase(mGloballySelectedRouteRecord.getStatus());
            if (oldPhase >= PHASE_CONNECTING && mConnectionPhase < PHASE_CONNECTING) {
                updateConnectionTimeout(TIMEOUT_REASON_CONNECTION_LOST);
                return;
            }

            // Check the route status.
            switch (mConnectionPhase) {
                case PHASE_CONNECTED:
                    if (oldPhase != PHASE_CONNECTED) {
                        Slog.i(TAG, "Connected to global route: "
                                + mGloballySelectedRouteRecord);
                    }
                    updateConnectionTimeout(0);
                    break;
                case PHASE_CONNECTING:
                    if (oldPhase != PHASE_CONNECTING) {
                        Slog.i(TAG, "Connecting to global route: "
                                + mGloballySelectedRouteRecord);
                    }
                    updateConnectionTimeout(TIMEOUT_REASON_WAITING_FOR_CONNECTED);
                    break;
                case PHASE_NOT_CONNECTED:
                    updateConnectionTimeout(TIMEOUT_REASON_WAITING_FOR_CONNECTING);
                    break;
                case PHASE_NOT_AVAILABLE:
                default:
                    updateConnectionTimeout(TIMEOUT_REASON_NOT_AVAILABLE);
                    break;
            }
!!!74019895.java!!!	updateConnectionTimeout(in reason : int) : void
            if (reason != mConnectionTimeoutReason) {
                if (mConnectionTimeoutReason != 0) {
                    removeMessages(MSG_CONNECTION_TIMED_OUT);
                }
                mConnectionTimeoutReason = reason;
                mConnectionTimeoutStartTime = SystemClock.uptimeMillis();
                switch (reason) {
                    case TIMEOUT_REASON_NOT_AVAILABLE:
                    case TIMEOUT_REASON_CONNECTION_LOST:
                        // Route became unavailable or connection lost.
                        // Unselect it immediately.
                        sendEmptyMessage(MSG_CONNECTION_TIMED_OUT);
                        break;
                    case TIMEOUT_REASON_WAITING_FOR_CONNECTING:
                        // Waiting for route to start connecting.
                        sendEmptyMessageDelayed(MSG_CONNECTION_TIMED_OUT, CONNECTING_TIMEOUT);
                        break;
                    case TIMEOUT_REASON_WAITING_FOR_CONNECTED:
                        // Waiting for route to complete connection.
                        sendEmptyMessageDelayed(MSG_CONNECTION_TIMED_OUT, CONNECTED_TIMEOUT);
                        break;
                }
            }
!!!74020023.java!!!	connectionTimedOut() : void
            if (mConnectionTimeoutReason == 0 || mGloballySelectedRouteRecord == null) {
                // Shouldn't get here.  There must be a bug somewhere.
                Log.wtf(TAG, "Handled connection timeout for no reason.");
                return;
            }

            switch (mConnectionTimeoutReason) {
                case TIMEOUT_REASON_NOT_AVAILABLE:
                    Slog.i(TAG, "Global route no longer available: "
                            + mGloballySelectedRouteRecord);
                    break;
                case TIMEOUT_REASON_CONNECTION_LOST:
                    Slog.i(TAG, "Global route connection lost: "
                            + mGloballySelectedRouteRecord);
                    break;
                case TIMEOUT_REASON_WAITING_FOR_CONNECTING:
                    Slog.i(TAG, "Global route timed out while waiting for "
                            + "connection attempt to begin after "
                            + (SystemClock.uptimeMillis() - mConnectionTimeoutStartTime)
                            + " ms: " + mGloballySelectedRouteRecord);
                    break;
                case TIMEOUT_REASON_WAITING_FOR_CONNECTED:
                    Slog.i(TAG, "Global route timed out while connecting after "
                            + (SystemClock.uptimeMillis() - mConnectionTimeoutStartTime)
                            + " ms: " + mGloballySelectedRouteRecord);
                    break;
            }
            mConnectionTimeoutReason = 0;

            unselectGloballySelectedRoute();
!!!74020151.java!!!	scheduleUpdateClientState() : void
            if (!mClientStateUpdateScheduled) {
                mClientStateUpdateScheduled = true;
                sendEmptyMessage(MSG_UPDATE_CLIENT_STATE);
            }
!!!74020279.java!!!	updateClientState() : void
            mClientStateUpdateScheduled = false;

            final String globallySelectedRouteId = mGloballySelectedRouteRecord != null ?
                    mGloballySelectedRouteRecord.getUniqueId() : null;

            // Build a new client state for trusted clients.
            MediaRouterClientState trustedState = new MediaRouterClientState();
            trustedState.globallySelectedRouteId = globallySelectedRouteId;
            final int providerCount = mProviderRecords.size();
            for (int i = 0; i < providerCount; i++) {
                mProviderRecords.get(i).appendClientState(trustedState);
            }

            // Build a new client state for untrusted clients that can only see
            // the currently selected route.
            MediaRouterClientState untrustedState = new MediaRouterClientState();
            untrustedState.globallySelectedRouteId = globallySelectedRouteId;
            if (globallySelectedRouteId != null) {
                untrustedState.routes.add(trustedState.getRoute(globallySelectedRouteId));
            }

            try {
                synchronized (mService.mLock) {
                    // Update the UserRecord.
                    mUserRecord.mTrustedState = trustedState;
                    mUserRecord.mUntrustedState = untrustedState;

                    // Collect all clients.
                    final int count = mUserRecord.mClientRecords.size();
                    for (int i = 0; i < count; i++) {
                        mTempClients.add(mUserRecord.mClientRecords.get(i).mClient);
                    }
                }

                // Notify all clients (outside of the lock).
                final int count = mTempClients.size();
                for (int i = 0; i < count; i++) {
                    try {
                        mTempClients.get(i).onStateChanged();
                    } catch (RemoteException ex) {
                        // ignore errors, client probably died
                    }
                }
            } finally {
                // Clear the list in preparation for the next time.
                mTempClients.clear();
            }
!!!74020407.java!!!	findProviderRecord(inout provider : RemoteDisplayProviderProxy) : int
            final int count = mProviderRecords.size();
            for (int i = 0; i < count; i++) {
                ProviderRecord record = mProviderRecords.get(i);
                if (record.getProvider() == provider) {
                    return i;
                }
            }
            return -1;
!!!74020535.java!!!	findRouteRecord(inout uniqueId : String) : MediaRouterService::UserHandler::RouteRecord
            final int count = mProviderRecords.size();
            for (int i = 0; i < count; i++) {
                RouteRecord record = mProviderRecords.get(i).findRouteByUniqueId(uniqueId);
                if (record != null) {
                    return record;
                }
            }
            return null;
!!!74020663.java!!!	getConnectionPhase(in status : int) : int
            switch (status) {
                case MediaRouter.RouteInfo.STATUS_NONE:
                case MediaRouter.RouteInfo.STATUS_CONNECTED:
                    return PHASE_CONNECTED;
                case MediaRouter.RouteInfo.STATUS_CONNECTING:
                    return PHASE_CONNECTING;
                case MediaRouter.RouteInfo.STATUS_SCANNING:
                case MediaRouter.RouteInfo.STATUS_AVAILABLE:
                    return PHASE_NOT_CONNECTED;
                case MediaRouter.RouteInfo.STATUS_NOT_AVAILABLE:
                case MediaRouter.RouteInfo.STATUS_IN_USE:
                default:
                    return PHASE_NOT_AVAILABLE;
            }
