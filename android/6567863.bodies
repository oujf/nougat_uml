class RouteRecord
!!!74022071.java!!!	RouteRecord(inout providerRecord : MediaRouterService::UserHandler::ProviderRecord, inout descriptorId : String, inout uniqueId : String)
                mProviderRecord = providerRecord;
                mDescriptorId = descriptorId;
                mMutableInfo = new MediaRouterClientState.RouteInfo(uniqueId);
!!!74022199.java!!!	getProvider() : RemoteDisplayProviderProxy
                return mProviderRecord.getProvider();
!!!74022327.java!!!	getProviderRecord() : MediaRouterService::UserHandler::ProviderRecord
                return mProviderRecord;
!!!74022455.java!!!	getDescriptorId() : String
                return mDescriptorId;
!!!74022583.java!!!	getUniqueId() : String
                return mMutableInfo.id;
!!!74022711.java!!!	getInfo() : MediaRouterClientState::RouteInfo
                if (mImmutableInfo == null) {
                    mImmutableInfo = new MediaRouterClientState.RouteInfo(mMutableInfo);
                }
                return mImmutableInfo;
!!!74022839.java!!!	isValid() : boolean
                return mDescriptor != null;
!!!74022967.java!!!	isEnabled() : boolean
                return mMutableInfo.enabled;
!!!74023095.java!!!	getStatus() : int
                return mMutableInfo.statusCode;
!!!74023223.java!!!	updateDescriptor(inout descriptor : RemoteDisplayState::RemoteDisplayInfo) : boolean
                boolean changed = false;
                if (mDescriptor != descriptor) {
                    mDescriptor = descriptor;
                    if (descriptor != null) {
                        final String name = computeName(descriptor);
                        if (!Objects.equals(mMutableInfo.name, name)) {
                            mMutableInfo.name = name;
                            changed = true;
                        }
                        final String description = computeDescription(descriptor);
                        if (!Objects.equals(mMutableInfo.description, description)) {
                            mMutableInfo.description = description;
                            changed = true;
                        }
                        final int supportedTypes = computeSupportedTypes(descriptor);
                        if (mMutableInfo.supportedTypes != supportedTypes) {
                            mMutableInfo.supportedTypes = supportedTypes;
                            changed = true;
                        }
                        final boolean enabled = computeEnabled(descriptor);
                        if (mMutableInfo.enabled != enabled) {
                            mMutableInfo.enabled = enabled;
                            changed = true;
                        }
                        final int statusCode = computeStatusCode(descriptor);
                        if (mMutableInfo.statusCode != statusCode) {
                            mMutableInfo.statusCode = statusCode;
                            changed = true;
                        }
                        final int playbackType = computePlaybackType(descriptor);
                        if (mMutableInfo.playbackType != playbackType) {
                            mMutableInfo.playbackType = playbackType;
                            changed = true;
                        }
                        final int playbackStream = computePlaybackStream(descriptor);
                        if (mMutableInfo.playbackStream != playbackStream) {
                            mMutableInfo.playbackStream = playbackStream;
                            changed = true;
                        }
                        final int volume = computeVolume(descriptor);
                        if (mMutableInfo.volume != volume) {
                            mMutableInfo.volume = volume;
                            changed = true;
                        }
                        final int volumeMax = computeVolumeMax(descriptor);
                        if (mMutableInfo.volumeMax != volumeMax) {
                            mMutableInfo.volumeMax = volumeMax;
                            changed = true;
                        }
                        final int volumeHandling = computeVolumeHandling(descriptor);
                        if (mMutableInfo.volumeHandling != volumeHandling) {
                            mMutableInfo.volumeHandling = volumeHandling;
                            changed = true;
                        }
                        final int presentationDisplayId = computePresentationDisplayId(descriptor);
                        if (mMutableInfo.presentationDisplayId != presentationDisplayId) {
                            mMutableInfo.presentationDisplayId = presentationDisplayId;
                            changed = true;
                        }
                    }
                }
                if (changed) {
                    mImmutableInfo = null;
                }
                return changed;
!!!74023351.java!!!	dump(inout pw : PrintWriter, inout prefix : String) : void
                pw.println(prefix + this);

                final String indent = prefix + "  ";
                pw.println(indent + "mMutableInfo=" + mMutableInfo);
                pw.println(indent + "mDescriptorId=" + mDescriptorId);
                pw.println(indent + "mDescriptor=" + mDescriptor);
!!!74023479.java!!!	toString() : String
                return "Route " + mMutableInfo.name + " (" + mMutableInfo.id + ")";
!!!74023607.java!!!	computeName(inout descriptor : RemoteDisplayState::RemoteDisplayInfo) : String
                // Note that isValid() already ensures the name is non-empty.
                return descriptor.name;
!!!74023735.java!!!	computeDescription(inout descriptor : RemoteDisplayState::RemoteDisplayInfo) : String
                final String description = descriptor.description;
                return TextUtils.isEmpty(description) ? null : description;
!!!74023863.java!!!	computeSupportedTypes(inout descriptor : RemoteDisplayState::RemoteDisplayInfo) : int
                return MediaRouter.ROUTE_TYPE_LIVE_AUDIO
                        | MediaRouter.ROUTE_TYPE_LIVE_VIDEO
                        | MediaRouter.ROUTE_TYPE_REMOTE_DISPLAY;
!!!74023991.java!!!	computeEnabled(inout descriptor : RemoteDisplayState::RemoteDisplayInfo) : boolean
                switch (descriptor.status) {
                    case RemoteDisplayInfo.STATUS_CONNECTED:
                    case RemoteDisplayInfo.STATUS_CONNECTING:
                    case RemoteDisplayInfo.STATUS_AVAILABLE:
                        return true;
                    default:
                        return false;
                }
!!!74024119.java!!!	computeStatusCode(inout descriptor : RemoteDisplayState::RemoteDisplayInfo) : int
                switch (descriptor.status) {
                    case RemoteDisplayInfo.STATUS_NOT_AVAILABLE:
                        return MediaRouter.RouteInfo.STATUS_NOT_AVAILABLE;
                    case RemoteDisplayInfo.STATUS_AVAILABLE:
                        return MediaRouter.RouteInfo.STATUS_AVAILABLE;
                    case RemoteDisplayInfo.STATUS_IN_USE:
                        return MediaRouter.RouteInfo.STATUS_IN_USE;
                    case RemoteDisplayInfo.STATUS_CONNECTING:
                        return MediaRouter.RouteInfo.STATUS_CONNECTING;
                    case RemoteDisplayInfo.STATUS_CONNECTED:
                        return MediaRouter.RouteInfo.STATUS_CONNECTED;
                    default:
                        return MediaRouter.RouteInfo.STATUS_NONE;
                }
!!!74024247.java!!!	computePlaybackType(inout descriptor : RemoteDisplayState::RemoteDisplayInfo) : int
                return MediaRouter.RouteInfo.PLAYBACK_TYPE_REMOTE;
!!!74024375.java!!!	computePlaybackStream(inout descriptor : RemoteDisplayState::RemoteDisplayInfo) : int
                return AudioSystem.STREAM_MUSIC;
!!!74024503.java!!!	computeVolume(inout descriptor : RemoteDisplayState::RemoteDisplayInfo) : int
                final int volume = descriptor.volume;
                final int volumeMax = descriptor.volumeMax;
                if (volume < 0) {
                    return 0;
                } else if (volume > volumeMax) {
                    return volumeMax;
                }
                return volume;
!!!74024631.java!!!	computeVolumeMax(inout descriptor : RemoteDisplayState::RemoteDisplayInfo) : int
                final int volumeMax = descriptor.volumeMax;
                return volumeMax > 0 ? volumeMax : 0;
!!!74024759.java!!!	computeVolumeHandling(inout descriptor : RemoteDisplayState::RemoteDisplayInfo) : int
                final int volumeHandling = descriptor.volumeHandling;
                switch (volumeHandling) {
                    case RemoteDisplayInfo.PLAYBACK_VOLUME_VARIABLE:
                        return MediaRouter.RouteInfo.PLAYBACK_VOLUME_VARIABLE;
                    case RemoteDisplayInfo.PLAYBACK_VOLUME_FIXED:
                    default:
                        return MediaRouter.RouteInfo.PLAYBACK_VOLUME_FIXED;
                }
!!!74024887.java!!!	computePresentationDisplayId(inout descriptor : RemoteDisplayState::RemoteDisplayInfo) : int
                // The MediaRouter class validates that the id corresponds to an extant
                // presentation display.  So all we do here is canonicalize the null case.
                final int displayId = descriptor.presentationDisplayId;
                return displayId < 0 ? -1 : displayId;
