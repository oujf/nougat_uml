class ScheduleCalendar
!!!74165303.java!!!	toString() : String
        return "ScheduleCalendar[mDays=" + mDays + ", mSchedule=" + mSchedule + "]";
!!!74165431.java!!!	setSchedule(inout schedule : ZenModeConfig::ScheduleInfo) : void
        if (Objects.equals(mSchedule, schedule)) return;
        mSchedule = schedule;
        updateDays();
!!!74165559.java!!!	maybeSetNextAlarm(in now : long, in nextAlarm : long) : void
        if (mSchedule != null) {
            if (mSchedule.exitAtAlarm && now > mSchedule.nextAlarm) {
                mSchedule.nextAlarm = nextAlarm;
            }
        }
!!!74165687.java!!!	setTimeZone(inout tz : TimeZone) : void
        mCalendar.setTimeZone(tz);
!!!74165815.java!!!	getNextChangeTime(in now : long) : long
        if (mSchedule == null) return 0;
        final long nextStart = getNextTime(now, mSchedule.startHour, mSchedule.startMinute);
        final long nextEnd = getNextTime(now, mSchedule.endHour, mSchedule.endMinute);
        long nextScheduleTime = Math.min(nextStart, nextEnd);

        return nextScheduleTime;
!!!74165943.java!!!	getNextTime(in now : long, in hr : int, in min : int) : long
        final long time = getTime(now, hr, min);
        return time <= now ? addDays(time, 1) : time;
!!!74166071.java!!!	getTime(in millis : long, in hour : int, in min : int) : long
        mCalendar.setTimeInMillis(millis);
        mCalendar.set(Calendar.HOUR_OF_DAY, hour);
        mCalendar.set(Calendar.MINUTE, min);
        mCalendar.set(Calendar.SECOND, 0);
        mCalendar.set(Calendar.MILLISECOND, 0);
        return mCalendar.getTimeInMillis();
!!!74166199.java!!!	isInSchedule(in time : long) : boolean
        if (mSchedule == null || mDays.size() == 0) return false;
        final long start = getTime(time, mSchedule.startHour, mSchedule.startMinute);
        long end = getTime(time, mSchedule.endHour, mSchedule.endMinute);
        if (end <= start) {
            end = addDays(end, 1);
        }
        boolean isInSchedule =
                isInSchedule(-1, time, start, end) || isInSchedule(0, time, start, end);
        if (isInSchedule && mSchedule.exitAtAlarm
                && mSchedule.nextAlarm != 0
                && time >= mSchedule.nextAlarm) {
            return false;
        } else {
            return isInSchedule;
        }
!!!74166327.java!!!	isInSchedule(in daysOffset : int, in time : long, in start : long, in end : long) : boolean
        final int n = Calendar.SATURDAY;
        final int day = ((getDayOfWeek(time) - 1) + (daysOffset % n) + n) % n + 1;
        start = addDays(start, daysOffset);
        end = addDays(end, daysOffset);
        return mDays.contains(day) && time >= start && time < end;
!!!74166455.java!!!	getDayOfWeek(in time : long) : int
        mCalendar.setTimeInMillis(time);
        return mCalendar.get(Calendar.DAY_OF_WEEK);
!!!74166583.java!!!	updateDays() : void
        mDays.clear();
        if (mSchedule != null && mSchedule.days != null) {
            for (int i = 0; i < mSchedule.days.length; i++) {
                mDays.add(mSchedule.days[i]);
            }
        }
!!!74166711.java!!!	addDays(in time : long, in days : int) : long
        mCalendar.setTimeInMillis(time);
        mCalendar.add(Calendar.DATE, days);
        return mCalendar.getTimeInMillis();
