class EphemeralResolverConnection
!!!74201527.java!!!	EphemeralResolverConnection(inout context : Context, inout componentName : ComponentName)
        mContext = context;
        mIntent = new Intent().setComponent(componentName);
!!!74201655.java!!!	getEphemeralResolveInfoList(in hashPrefix : int) : EphemeralResolveInfo
        throwIfCalledOnMainThread();
        try {
            return mGetEphemeralResolveInfoCaller.getEphemeralResolveInfoList(
                    getRemoteInstanceLazy(), hashPrefix);
        } catch (RemoteException re) {
        } catch (TimeoutException te) {
        } finally {
            synchronized (mLock) {
                mLock.notifyAll();
            }
        }
        return null;
!!!74201783.java!!!	dump(inout fd : FileDescriptor, inout pw : PrintWriter, inout prefix : String) : void
        synchronized (mLock) {
            pw.append(prefix).append("bound=")
                    .append((mRemoteInstance != null) ? "true" : "false").println();

            pw.flush();

            try {
                getRemoteInstanceLazy().asBinder().dump(fd, new String[] { prefix });
            } catch (TimeoutException te) {
                /* ignore */
            } catch (RemoteException re) {
                /* ignore */
            }
        }
!!!74201911.java!!!	getRemoteInstanceLazy() : IEphemeralResolver
        synchronized (mLock) {
            if (mRemoteInstance != null) {
                return mRemoteInstance;
            }
            bindLocked();
            return mRemoteInstance;
        }
!!!74202039.java!!!	bindLocked() : void
        if (mRemoteInstance != null) {
            return;
        }

        mContext.bindServiceAsUser(mIntent, mServiceConnection,
                Context.BIND_AUTO_CREATE | Context.BIND_FOREGROUND_SERVICE, UserHandle.SYSTEM);

        final long startMillis = SystemClock.uptimeMillis();
        while (true) {
            if (mRemoteInstance != null) {
                break;
            }
            final long elapsedMillis = SystemClock.uptimeMillis() - startMillis;
            final long remainingMillis = BIND_SERVICE_TIMEOUT_MS - elapsedMillis;
            if (remainingMillis <= 0) {
                throw new TimeoutException("Didn't bind to resolver in time.");
            }
            try {
                mLock.wait(remainingMillis);
            } catch (InterruptedException ie) {
                /* ignore */
            }
        }

        mLock.notifyAll();
!!!74202167.java!!!	throwIfCalledOnMainThread() : void
        if (Thread.currentThread() == mContext.getMainLooper().getThread()) {
            throw new RuntimeException("Cannot invoke on the main thread");
        }
