class EnableAccessibilityController
!!!74443447.java!!!	EnableAccessibilityController(inout context : Context, inout onAccessibilityEnabledCallback : Runnable)
        mContext = context;
        mOnAccessibilityEnabledCallback = onAccessibilityEnabledCallback;
        mUserManager = (UserManager) mContext.getSystemService(Context.USER_SERVICE);
        mTts = new TextToSpeech(context, new TextToSpeech.OnInitListener() {
            @Override
            public void onInit(int status) {
                if (mDestroyed) {
                    mTts.shutdown();
                }
            }
        });
        mTone = RingtoneManager.getRingtone(context, Settings.System.DEFAULT_NOTIFICATION_URI);
        mTone.setStreamType(AudioManager.STREAM_MUSIC);
        mTouchSlop = context.getResources().getDimensionPixelSize(
                R.dimen.accessibility_touch_slop);
!!!74443575.java!!!	canEnableAccessibilityViaGesture(inout context : Context) : boolean
        AccessibilityManager accessibilityManager = AccessibilityManager.getInstance(context);
        // Accessibility is enabled and there is an enabled speaking
        // accessibility service, then we have nothing to do.
        if (accessibilityManager.isEnabled()
                && !accessibilityManager.getEnabledAccessibilityServiceList(
                        AccessibilityServiceInfo.FEEDBACK_SPOKEN).isEmpty()) {
            return false;
        }
        // If the global gesture is enabled and there is a speaking service
        // installed we are good to go, otherwise there is nothing to do.
        return Settings.Global.getInt(context.getContentResolver(),
                Settings.Global.ENABLE_ACCESSIBILITY_GLOBAL_GESTURE_ENABLED, 0) == 1
                && !getInstalledSpeakingAccessibilityServices(context).isEmpty();
!!!74443703.java!!!	getInstalledSpeakingAccessibilityServices(inout context : Context) : AccessibilityServiceInfo
        List<AccessibilityServiceInfo> services = new ArrayList<AccessibilityServiceInfo>();
        services.addAll(AccessibilityManager.getInstance(context)
                .getInstalledAccessibilityServiceList());
        Iterator<AccessibilityServiceInfo> iterator = services.iterator();
        while (iterator.hasNext()) {
            AccessibilityServiceInfo service = iterator.next();
            if ((service.feedbackType & AccessibilityServiceInfo.FEEDBACK_SPOKEN) == 0) {
                iterator.remove();
            }
        }
        return services;
!!!74443831.java!!!	onDestroy() : void
        mDestroyed = true;
!!!74443959.java!!!	onInterceptTouchEvent(inout event : MotionEvent) : boolean
        if (event.getActionMasked() == MotionEvent.ACTION_POINTER_DOWN
                && event.getPointerCount() == 2) {
            mFirstPointerDownX = event.getX(0);
            mFirstPointerDownY = event.getY(0);
            mSecondPointerDownX = event.getX(1);
            mSecondPointerDownY = event.getY(1);
            mHandler.sendEmptyMessageDelayed(MESSAGE_SPEAK_WARNING,
                    SPEAK_WARNING_DELAY_MILLIS);
            mHandler.sendEmptyMessageDelayed(MESSAGE_ENABLE_ACCESSIBILITY,
                   ENABLE_ACCESSIBILITY_DELAY_MILLIS);
            return true;
        }
        return false;
!!!74444087.java!!!	onTouchEvent(inout event : MotionEvent) : boolean
        final int pointerCount = event.getPointerCount();
        final int action = event.getActionMasked();
        if (mCanceled) {
            if (action == MotionEvent.ACTION_UP) {
                mCanceled = false;
            }
            return true;
        }
        switch (action) {
            case MotionEvent.ACTION_POINTER_DOWN: {
                if (pointerCount > 2) {
                    cancel();
                }
            } break;
            case MotionEvent.ACTION_MOVE: {
                final float firstPointerMove = MathUtils.dist(event.getX(0),
                        event.getY(0), mFirstPointerDownX, mFirstPointerDownY);
                if (Math.abs(firstPointerMove) > mTouchSlop) {
                    cancel();
                }
                final float secondPointerMove = MathUtils.dist(event.getX(1),
                        event.getY(1), mSecondPointerDownX, mSecondPointerDownY);
                if (Math.abs(secondPointerMove) > mTouchSlop) {
                    cancel();
                }
            } break;
            case MotionEvent.ACTION_POINTER_UP:
            case MotionEvent.ACTION_CANCEL: {
                cancel();
            } break;
        }
        return true;
!!!74444215.java!!!	cancel() : void
        mCanceled = true;
        if (mHandler.hasMessages(MESSAGE_SPEAK_WARNING)) {
            mHandler.removeMessages(MESSAGE_SPEAK_WARNING);
        } else if (mHandler.hasMessages(MESSAGE_ENABLE_ACCESSIBILITY)) {
            mHandler.sendEmptyMessage(MESSAGE_SPEAK_ENABLE_CANCELED);
        }
        mHandler.removeMessages(MESSAGE_ENABLE_ACCESSIBILITY);
!!!74444343.java!!!	enableAccessibility() : void
        if (enableAccessibility(mContext)) {
            mOnAccessibilityEnabledCallback.run();
        }
!!!74444471.java!!!	enableAccessibility(inout context : Context) : boolean
        final IAccessibilityManager accessibilityManager = IAccessibilityManager
                .Stub.asInterface(ServiceManager.getService("accessibility"));
        final WindowManagerInternal windowManager = LocalServices.getService(
                WindowManagerInternal.class);
        final UserManager userManager = (UserManager) context.getSystemService(
                Context.USER_SERVICE);
        ComponentName componentName = getInstalledSpeakingAccessibilityServiceComponent(context);
        if (componentName == null) {
            return false;
        }

        boolean keyguardLocked = windowManager.isKeyguardLocked();
        final boolean hasMoreThanOneUser = userManager.getUsers().size() > 1;
        try {
            if (!keyguardLocked || !hasMoreThanOneUser) {
                final int userId = ActivityManager.getCurrentUser();
                accessibilityManager.enableAccessibilityService(componentName, userId);
            } else if (keyguardLocked) {
                accessibilityManager.temporaryEnableAccessibilityStateUntilKeyguardRemoved(
                        componentName, true /* enableTouchExploration */);
            }
        } catch (RemoteException e) {
            Log.e(TAG, "cannot enable accessibilty: " + e);
        }

        return true;
!!!74444599.java!!!	disableAccessibility(inout context : Context) : void
        final IAccessibilityManager accessibilityManager = IAccessibilityManager
                .Stub.asInterface(ServiceManager.getService("accessibility"));
        ComponentName componentName = getInstalledSpeakingAccessibilityServiceComponent(context);
        if (componentName == null) {
            return;
        }

        final int userId = ActivityManager.getCurrentUser();
        try {
            accessibilityManager.disableAccessibilityService(componentName, userId);
        } catch (RemoteException e) {
            Log.e(TAG, "cannot disable accessibility " + e);
        }
!!!74444727.java!!!	isAccessibilityEnabled(inout context : Context) : boolean
        final AccessibilityManager accessibilityManager =
                context.getSystemService(AccessibilityManager.class);
        List enabledServices = accessibilityManager.getEnabledAccessibilityServiceList(
                AccessibilityServiceInfo.FEEDBACK_SPOKEN);
        return enabledServices != null && !enabledServices.isEmpty();
!!!74444855.java!!!	getInstalledSpeakingAccessibilityServiceComponent(inout context : Context) : ComponentName
        List<AccessibilityServiceInfo> services =
                getInstalledSpeakingAccessibilityServices(context);
        if (services.isEmpty()) {
            return null;
        }

        ServiceInfo serviceInfo = services.get(0).getResolveInfo().serviceInfo;
        return new ComponentName(serviceInfo.packageName, serviceInfo.name);
