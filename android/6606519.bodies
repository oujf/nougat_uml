class WakeLock
!!!74525367.java!!!	WakeLock(inout lock : IBinder, in flags : int, inout tag : String, inout packageName : String, inout workSource : WorkSource, inout historyTag : String, in ownerUid : int, in ownerPid : int)
            mLock = lock;
            mFlags = flags;
            mTag = tag;
            mPackageName = packageName;
            mWorkSource = copyWorkSource(workSource);
            mHistoryTag = historyTag;
            mOwnerUid = ownerUid;
            mOwnerPid = ownerPid;
!!!74525495.java!!!	binderDied() : void
            PowerManagerService.this.handleWakeLockDeath(this);
!!!74525623.java!!!	hasSameProperties(in flags : int, inout tag : String, inout workSource : WorkSource, in ownerUid : int, in ownerPid : int) : boolean
            return mFlags == flags
                    && mTag.equals(tag)
                    && hasSameWorkSource(workSource)
                    && mOwnerUid == ownerUid
                    && mOwnerPid == ownerPid;
!!!74525751.java!!!	updateProperties(in flags : int, inout tag : String, inout packageName : String, inout workSource : WorkSource, inout historyTag : String, in ownerUid : int, in ownerPid : int) : void
            if (!mPackageName.equals(packageName)) {
                throw new IllegalStateException("Existing wake lock package name changed: "
                        + mPackageName + " to " + packageName);
            }
            if (mOwnerUid != ownerUid) {
                throw new IllegalStateException("Existing wake lock uid changed: "
                        + mOwnerUid + " to " + ownerUid);
            }
            if (mOwnerPid != ownerPid) {
                throw new IllegalStateException("Existing wake lock pid changed: "
                        + mOwnerPid + " to " + ownerPid);
            }
            mFlags = flags;
            mTag = tag;
            updateWorkSource(workSource);
            mHistoryTag = historyTag;
!!!74525879.java!!!	hasSameWorkSource(inout workSource : WorkSource) : boolean
            return Objects.equal(mWorkSource, workSource);
!!!74526007.java!!!	updateWorkSource(inout workSource : WorkSource) : void
            mWorkSource = copyWorkSource(workSource);
!!!74526135.java!!!	toString() : String
            return getLockLevelString()
                    + " '" + mTag + "'" + getLockFlagsString() + (mDisabled ? " DISABLED" : "")
                    + " (uid=" + mOwnerUid + ", pid=" + mOwnerPid + ", ws=" + mWorkSource + ")";
!!!74526263.java!!!	getLockLevelString() : String
            switch (mFlags & PowerManager.WAKE_LOCK_LEVEL_MASK) {
                case PowerManager.FULL_WAKE_LOCK:
                    return "FULL_WAKE_LOCK                ";
                case PowerManager.SCREEN_BRIGHT_WAKE_LOCK:
                    return "SCREEN_BRIGHT_WAKE_LOCK       ";
                case PowerManager.SCREEN_DIM_WAKE_LOCK:
                    return "SCREEN_DIM_WAKE_LOCK          ";
                case PowerManager.PARTIAL_WAKE_LOCK:
                    return "PARTIAL_WAKE_LOCK             ";
                case PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK:
                    return "PROXIMITY_SCREEN_OFF_WAKE_LOCK";
                case PowerManager.DOZE_WAKE_LOCK:
                    return "DOZE_WAKE_LOCK                ";
                case PowerManager.DRAW_WAKE_LOCK:
                    return "DRAW_WAKE_LOCK                ";
                default:
                    return "???                           ";
            }
!!!74526391.java!!!	getLockFlagsString() : String
            String result = "";
            if ((mFlags & PowerManager.ACQUIRE_CAUSES_WAKEUP) != 0) {
                result += " ACQUIRE_CAUSES_WAKEUP";
            }
            if ((mFlags & PowerManager.ON_AFTER_RELEASE) != 0) {
                result += " ON_AFTER_RELEASE";
            }
            return result;
