class ManagedApplicationService
!!!74614327.java!!!	ManagedApplicationService(in context : Context, in component : ComponentName, in userId : int, in clientLabel : int, inout settingsAction : String, inout binderChecker : ManagedApplicationService::BinderChecker)
        mContext = context;
        mComponent = component;
        mUserId = userId;
        mClientLabel = clientLabel;
        mSettingsAction = settingsAction;
        mChecker = binderChecker;
!!!74614839.java!!!	build(in context : Context, in component : ComponentName, in userId : int, in clientLabel : int, inout settingsAction : String, inout binderChecker : ManagedApplicationService::BinderChecker) : ManagedApplicationService
        return new ManagedApplicationService(context, component, userId, clientLabel,
            settingsAction, binderChecker);
!!!74614967.java!!!	getUserId() : int
        return mUserId;
!!!74615095.java!!!	getComponent() : ComponentName
        return mComponent;
!!!74615223.java!!!	disconnectIfNotMatching(in componentName : ComponentName, in userId : int) : boolean
        if (matches(componentName, userId)) {
            return false;
        }
        disconnect();
        return true;
!!!74615351.java!!!	sendEvent(inout event : ManagedApplicationService::PendingEvent) : void
        IInterface iface;
        synchronized (mLock) {
            iface = mBoundInterface;
            if (iface == null) {
                mPendingEvent = event;
            }
        }

        if (iface != null) {
            try {
                event.runEvent(iface);
            } catch (RuntimeException | RemoteException ex) {
                Slog.e(TAG, "Received exception from user service: ", ex);
            }
        }
!!!74615479.java!!!	disconnect() : void
        synchronized (mLock) {
            // Wipe out pending connections
            mPendingConnection = null;

            // Unbind existing connection, if it exists
            if (mConnection != null) {
                mContext.unbindService(mConnection);
                mConnection = null;
            }

            mBoundInterface = null;
        }
!!!74615607.java!!!	connect() : void
        synchronized (mLock) {
            if (mConnection != null || mPendingConnection != null) {
                // We're already connected or are trying to connect
                return;
            }

            final PendingIntent pendingIntent = PendingIntent.getActivity(
                    mContext, 0, new Intent(mSettingsAction), 0);
            final Intent intent = new Intent().setComponent(mComponent).
                    putExtra(Intent.EXTRA_CLIENT_LABEL, mClientLabel).
                    putExtra(Intent.EXTRA_CLIENT_INTENT, pendingIntent);

            final ServiceConnection serviceConnection = new ServiceConnection() {
                @Override
                public void onServiceConnected(ComponentName componentName, IBinder iBinder) {
                    IInterface iface = null;
                    PendingEvent pendingEvent = null;
                    synchronized (mLock) {
                        if (mPendingConnection == this) {
                            // No longer pending, remove from pending connection
                            mPendingConnection = null;
                            mConnection = this;
                        } else {
                            // Service connection wasn't pending, must have been disconnected
                            mContext.unbindService(this);
                            return;
                        }

                        try {
                            iBinder.linkToDeath(mDeathRecipient, 0);
                            mBoundInterface = mChecker.asInterface(iBinder);
                            if (!mChecker.checkType(mBoundInterface)) {
                                // Received an invalid binder, disconnect
                                mContext.unbindService(this);
                                mBoundInterface = null;
                            }
                            iface = mBoundInterface;
                            pendingEvent = mPendingEvent;
                            mPendingEvent = null;
                        } catch (RemoteException e) {
                            // DOA
                            Slog.w(TAG, "Unable to bind service: " + intent, e);
                            mBoundInterface = null;
                        }
                    }
                    if (iface != null && pendingEvent != null) {
                        try {
                            pendingEvent.runEvent(iface);
                        } catch (RuntimeException | RemoteException ex) {
                            Slog.e(TAG, "Received exception from user service: ", ex);
                        }
                    }
                }

                @Override
                public void onServiceDisconnected(ComponentName componentName) {
                    Slog.w(TAG, "Service disconnected: " + intent);
                    mConnection = null;
                    mBoundInterface = null;
                }
            };

            mPendingConnection = serviceConnection;

            try {
                if (!mContext.bindServiceAsUser(intent, serviceConnection,
                        Context.BIND_AUTO_CREATE | Context.BIND_FOREGROUND_SERVICE,
                        new UserHandle(mUserId))) {
                    Slog.w(TAG, "Unable to bind service: " + intent);
                }
            } catch (SecurityException e) {
                Slog.w(TAG, "Unable to bind service: " + intent, e);
            }
        }
!!!74615735.java!!!	matches(in component : ComponentName, in userId : int) : boolean
        return Objects.equals(mComponent, component) && mUserId == userId;
