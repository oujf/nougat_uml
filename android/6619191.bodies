class WebViewUpdateServiceImpl
!!!74640311.java!!!	WebViewUpdateServiceImpl(inout context : Context, inout systemInterface : SystemInterface)
        mContext = context;
        mSystemInterface = systemInterface;
        mWebViewUpdater = new WebViewUpdater(mContext, mSystemInterface);
!!!74640439.java!!!	packageStateChanged(inout packageName : String, in changedState : int, in userId : int) : void
        // We don't early out here in different cases where we could potentially early-out (e.g. if
        // we receive PACKAGE_CHANGED for another user than the system user) since that would
        // complicate this logic further and open up for more edge cases.
        updateFallbackStateOnPackageChange(packageName, changedState);
        mWebViewUpdater.packageStateChanged(packageName, changedState);
!!!74640567.java!!!	prepareWebViewInSystemServer() : void
        updateFallbackStateOnBoot();
        mWebViewUpdater.prepareWebViewInSystemServer();
!!!74640695.java!!!	existsValidNonFallbackProvider(inout providers : WebViewProviderInfo [[]]) : boolean
        for (WebViewProviderInfo provider : providers) {
            if (provider.availableByDefault && !provider.isFallback) {
                try {
                    PackageInfo packageInfo = mSystemInterface.getPackageInfoForProvider(provider);
                    if (isInstalledPackage(packageInfo) && isEnabledPackage(packageInfo)
                            && mWebViewUpdater.isValidProvider(provider, packageInfo)) {
                        return true;
                    }
                } catch (NameNotFoundException e) {
                    // A non-existent provider is neither valid nor enabled
                }
            }
        }
        return false;
!!!74640823.java!!!	handleNewUser(in userId : int) : void
        if (!mSystemInterface.isFallbackLogicEnabled()) return;

        WebViewProviderInfo[] webviewProviders = mSystemInterface.getWebViewPackages();
        WebViewProviderInfo fallbackProvider = getFallbackProvider(webviewProviders);
        if (fallbackProvider == null) return;

        mSystemInterface.enablePackageForUser(fallbackProvider.packageName,
                !existsValidNonFallbackProvider(webviewProviders), userId);
!!!74640951.java!!!	notifyRelroCreationCompleted() : void
        mWebViewUpdater.notifyRelroCreationCompleted();
!!!74641079.java!!!	waitForAndGetProvider() : WebViewProviderResponse
        return mWebViewUpdater.waitForAndGetProvider();
!!!74641207.java!!!	changeProviderAndSetting(inout newProvider : String) : String
        return mWebViewUpdater.changeProviderAndSetting(newProvider);
!!!74641335.java!!!	getValidWebViewPackages() : WebViewProviderInfo
        return mWebViewUpdater.getValidAndInstalledWebViewPackages();
!!!74641463.java!!!	getWebViewPackages() : WebViewProviderInfo
        return mSystemInterface.getWebViewPackages();
!!!74641591.java!!!	getCurrentWebViewPackageName() : String
        return mWebViewUpdater.getCurrentWebViewPackageName();
!!!74641719.java!!!	enableFallbackLogic(inout enable : boolean) : void
        mSystemInterface.enableFallbackLogic(enable);
!!!74641847.java!!!	updateFallbackStateOnBoot() : void
        if (!mSystemInterface.isFallbackLogicEnabled()) return;

        WebViewProviderInfo[] webviewProviders = mSystemInterface.getWebViewPackages();
        updateFallbackState(webviewProviders, true);
!!!74641975.java!!!	updateFallbackStateOnPackageChange(inout changedPackage : String, in changedState : int) : void
        if (!mSystemInterface.isFallbackLogicEnabled()) return;

        WebViewProviderInfo[] webviewProviders = mSystemInterface.getWebViewPackages();

        // A package was changed / updated / downgraded, early out if it is not one of the
        // webview packages that are available by default.
        boolean changedPackageAvailableByDefault = false;
        for (WebViewProviderInfo provider : webviewProviders) {
            if (provider.packageName.equals(changedPackage)) {
                if (provider.availableByDefault) {
                    changedPackageAvailableByDefault = true;
                }
                break;
            }
        }
        if (!changedPackageAvailableByDefault) return;
        updateFallbackState(webviewProviders, false);
!!!74642103.java!!!	updateFallbackState(inout webviewProviders : WebViewProviderInfo [[]], inout isBoot : boolean) : void
        // If there exists a valid and enabled non-fallback package - disable the fallback
        // package, otherwise, enable it.
        WebViewProviderInfo fallbackProvider = getFallbackProvider(webviewProviders);
        if (fallbackProvider == null) return;
        boolean existsValidNonFallbackProvider = existsValidNonFallbackProvider(webviewProviders);

        boolean isFallbackEnabled = false;
        try {
            isFallbackEnabled = isEnabledPackage(
                    mSystemInterface.getPackageInfoForProvider(fallbackProvider));
        } catch (NameNotFoundException e) {
            // No fallback package installed -> early out.
            return;
        }

        if (existsValidNonFallbackProvider
                // During an OTA the primary user's WebView state might differ from other users', so
                // ignore the state of that user during boot.
                && (isFallbackEnabled || isBoot)) {
            mSystemInterface.uninstallAndDisablePackageForAllUsers(mContext,
                    fallbackProvider.packageName);
        } else if (!existsValidNonFallbackProvider
                // During an OTA the primary user's WebView state might differ from other users', so
                // ignore the state of that user during boot.
                && (!isFallbackEnabled || isBoot)) {
            // Enable the fallback package for all users.
            mSystemInterface.enablePackageForAllUsers(mContext,
                    fallbackProvider.packageName, true);
        }
!!!74642231.java!!!	getFallbackProvider(inout webviewPackages : WebViewProviderInfo [[]]) : WebViewProviderInfo
        for (WebViewProviderInfo provider : webviewPackages) {
            if (provider.isFallback) {
                return provider;
            }
        }
        return null;
!!!74642359.java!!!	isFallbackPackage(inout packageName : String) : boolean
        if (packageName == null || !mSystemInterface.isFallbackLogicEnabled()) return false;

        WebViewProviderInfo[] webviewPackages = mSystemInterface.getWebViewPackages();
        WebViewProviderInfo fallbackProvider = getFallbackProvider(webviewPackages);
        return (fallbackProvider != null
                && packageName.equals(fallbackProvider.packageName));
!!!74644663.java!!!	providerHasValidSignature(inout provider : WebViewProviderInfo, inout packageInfo : PackageInfo, inout systemInterface : SystemInterface) : boolean
        if (systemInterface.systemIsDebuggable()) {
            return true;
        }
        Signature[] packageSignatures;
        // If no signature is declared, instead check whether the package is included in the
        // system.
        if (provider.signatures == null || provider.signatures.length == 0) {
            return packageInfo.applicationInfo.isSystemApp();
        }
        packageSignatures = packageInfo.signatures;
        if (packageSignatures.length != 1)
            return false;

        final byte[] packageSignature = packageSignatures[0].toByteArray();
        // Return whether the package signature matches any of the valid signatures
        for (String signature : provider.signatures) {
            final byte[] validSignature = Base64.decode(signature, Base64.DEFAULT);
            if (Arrays.equals(packageSignature, validSignature))
                return true;
        }
        return false;
!!!74644791.java!!!	isEnabledPackage(inout packageInfo : PackageInfo) : boolean
        return packageInfo.applicationInfo.enabled;
!!!74644919.java!!!	isInstalledPackage(inout packageInfo : PackageInfo) : boolean
        return (((packageInfo.applicationInfo.flags & ApplicationInfo.FLAG_INSTALLED) != 0)
            && ((packageInfo.applicationInfo.privateFlags
                        & ApplicationInfo.PRIVATE_FLAG_HIDDEN) == 0));
