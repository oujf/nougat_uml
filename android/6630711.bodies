class Owners
!!!74889143.java!!!	Owners(inout userManager : UserManager, inout userManagerInternal : UserManagerInternal, inout packageManagerInternal : PackageManagerInternal)
        mUserManager = userManager;
        mUserManagerInternal = userManagerInternal;
        mPackageManagerInternal = packageManagerInternal;
!!!74889271.java!!!	load() : void
        synchronized (mLock) {
            // First, try to read from the legacy file.
            final File legacy = getLegacyConfigFileWithTestOverride();

            final List<UserInfo> users = mUserManager.getUsers(true);

            if (readLegacyOwnerFileLocked(legacy)) {
                if (DEBUG) {
                    Log.d(TAG, "Legacy config file found.");
                }

                // Legacy file exists, write to new files and remove the legacy one.
                writeDeviceOwner();
                for (int userId : getProfileOwnerKeys()) {
                    writeProfileOwner(userId);
                }
                if (DEBUG) {
                    Log.d(TAG, "Deleting legacy config file");
                }
                if (!legacy.delete()) {
                    Slog.e(TAG, "Failed to remove the legacy setting file");
                }
            } else {
                // No legacy file, read from the new format files.
                new DeviceOwnerReadWriter().readFromFileLocked();

                for (UserInfo ui : users) {
                    new ProfileOwnerReadWriter(ui.id).readFromFileLocked();
                }
            }
            mUserManagerInternal.setDeviceManaged(hasDeviceOwner());
            for (UserInfo ui : users) {
                mUserManagerInternal.setUserManaged(ui.id, hasProfileOwner(ui.id));
            }
            if (hasDeviceOwner() && hasProfileOwner(getDeviceOwnerUserId())) {
                Slog.w(TAG, String.format("User %d has both DO and PO, which is not supported",
                        getDeviceOwnerUserId()));
            }
            pushToPackageManagerLocked();
        }
!!!74889399.java!!!	pushToPackageManagerLocked() : void
        final SparseArray<String> po = new SparseArray<>();
        for (int i = mProfileOwners.size() - 1; i >= 0; i--) {
            po.put(mProfileOwners.keyAt(i), mProfileOwners.valueAt(i).packageName);
        }
        mPackageManagerInternal.setDeviceAndProfileOwnerPackages(
                mDeviceOwnerUserId, (mDeviceOwner != null ? mDeviceOwner.packageName : null),
                po);
!!!74889527.java!!!	getDeviceOwnerPackageName() : String
        synchronized (mLock) {
            return mDeviceOwner != null ? mDeviceOwner.packageName : null;
        }
!!!74889655.java!!!	getDeviceOwnerUserId() : int
        synchronized (mLock) {
            return mDeviceOwnerUserId;
        }
!!!74889783.java!!!	getDeviceOwnerUserIdAndComponent() : Pair
        synchronized (mLock) {
            if (mDeviceOwner == null) {
                return null;
            } else {
                return Pair.create(mDeviceOwnerUserId, mDeviceOwner.admin);
            }
        }
!!!74889911.java!!!	getDeviceOwnerName() : String
        synchronized (mLock) {
            return mDeviceOwner != null ? mDeviceOwner.name : null;
        }
!!!74890039.java!!!	getDeviceOwnerComponent() : ComponentName
        synchronized (mLock) {
            return mDeviceOwner != null ? mDeviceOwner.admin : null;
        }
!!!74890167.java!!!	getDeviceOwnerRemoteBugreportUri() : String
        synchronized (mLock) {
            return mDeviceOwner != null ? mDeviceOwner.remoteBugreportUri : null;
        }
!!!74890295.java!!!	getDeviceOwnerRemoteBugreportHash() : String
        synchronized (mLock) {
            return mDeviceOwner != null ? mDeviceOwner.remoteBugreportHash : null;
        }
!!!74890423.java!!!	setDeviceOwner(inout admin : ComponentName, inout ownerName : String, in userId : int) : void
        if (userId < 0) {
            Slog.e(TAG, "Invalid user id for device owner user: " + userId);
            return;
        }
        synchronized (mLock) {
            // For a newly set DO, there's no need for migration.
            setDeviceOwnerWithRestrictionsMigrated(admin, ownerName, userId,
                    /* userRestrictionsMigrated =*/ true);
        }
!!!74890551.java!!!	setDeviceOwnerWithRestrictionsMigrated(inout admin : ComponentName, inout ownerName : String, in userId : int, inout userRestrictionsMigrated : boolean) : void
        synchronized (mLock) {
            mDeviceOwner = new OwnerInfo(ownerName, admin, userRestrictionsMigrated,
                    /* remoteBugreportUri =*/ null, /* remoteBugreportHash =*/ null);
            mDeviceOwnerUserId = userId;

            mUserManagerInternal.setDeviceManaged(true);
            pushToPackageManagerLocked();
        }
!!!74890679.java!!!	clearDeviceOwner() : void
        synchronized (mLock) {
            mDeviceOwner = null;
            mDeviceOwnerUserId = UserHandle.USER_NULL;

            mUserManagerInternal.setDeviceManaged(false);
            pushToPackageManagerLocked();
        }
!!!74890807.java!!!	setProfileOwner(inout admin : ComponentName, inout ownerName : String, in userId : int) : void
        synchronized (mLock) {
            // For a newly set PO, there's no need for migration.
            mProfileOwners.put(userId, new OwnerInfo(ownerName, admin,
                    /* userRestrictionsMigrated =*/ true, /* remoteBugreportUri =*/ null,
                    /* remoteBugreportHash =*/ null));
            mUserManagerInternal.setUserManaged(userId, true);
            pushToPackageManagerLocked();
        }
!!!74890935.java!!!	removeProfileOwner(in userId : int) : void
        synchronized (mLock) {
            mProfileOwners.remove(userId);
            mUserManagerInternal.setUserManaged(userId, false);
            pushToPackageManagerLocked();
        }
!!!74891063.java!!!	getProfileOwnerComponent(in userId : int) : ComponentName
        synchronized (mLock) {
            OwnerInfo profileOwner = mProfileOwners.get(userId);
            return profileOwner != null ? profileOwner.admin : null;
        }
!!!74891191.java!!!	getProfileOwnerName(in userId : int) : String
        synchronized (mLock) {
            OwnerInfo profileOwner = mProfileOwners.get(userId);
            return profileOwner != null ? profileOwner.name : null;
        }
!!!74891319.java!!!	getProfileOwnerPackage(in userId : int) : String
        synchronized (mLock) {
            OwnerInfo profileOwner = mProfileOwners.get(userId);
            return profileOwner != null ? profileOwner.packageName : null;
        }
!!!74891447.java!!!	getProfileOwnerKeys() : Set<Integer>
        synchronized (mLock) {
            return mProfileOwners.keySet();
        }
!!!74891575.java!!!	getSystemUpdatePolicy() : SystemUpdatePolicy
        synchronized (mLock) {
            return mSystemUpdatePolicy;
        }
!!!74891703.java!!!	setSystemUpdatePolicy(inout systemUpdatePolicy : SystemUpdatePolicy) : void
        synchronized (mLock) {
            mSystemUpdatePolicy = systemUpdatePolicy;
        }
!!!74891831.java!!!	clearSystemUpdatePolicy() : void
        synchronized (mLock) {
            mSystemUpdatePolicy = null;
        }
!!!74891959.java!!!	hasDeviceOwner() : boolean
        synchronized (mLock) {
            return mDeviceOwner != null;
        }
!!!74892087.java!!!	isDeviceOwnerUserId(in userId : int) : boolean
        synchronized (mLock) {
            return mDeviceOwner != null && mDeviceOwnerUserId == userId;
        }
!!!74892215.java!!!	hasProfileOwner(in userId : int) : boolean
        synchronized (mLock) {
            return getProfileOwnerComponent(userId) != null;
        }
!!!74892343.java!!!	getDeviceOwnerUserRestrictionsNeedsMigration() : boolean
        synchronized (mLock) {
            return mDeviceOwner != null && !mDeviceOwner.userRestrictionsMigrated;
        }
!!!74892471.java!!!	getProfileOwnerUserRestrictionsNeedsMigration(in userId : int) : boolean
        synchronized (mLock) {
            OwnerInfo profileOwner = mProfileOwners.get(userId);
            return profileOwner != null && !profileOwner.userRestrictionsMigrated;
        }
!!!74892599.java!!!	setDeviceOwnerUserRestrictionsMigrated() : void
        synchronized (mLock) {
            if (mDeviceOwner != null) {
                mDeviceOwner.userRestrictionsMigrated = true;
            }
            writeDeviceOwner();
        }
!!!74892727.java!!!	setDeviceOwnerRemoteBugreportUriAndHash(inout remoteBugreportUri : String, inout remoteBugreportHash : String) : void
        synchronized (mLock) {
            if (mDeviceOwner != null) {
                mDeviceOwner.remoteBugreportUri = remoteBugreportUri;
                mDeviceOwner.remoteBugreportHash = remoteBugreportHash;
            }
            writeDeviceOwner();
        }
!!!74892855.java!!!	setProfileOwnerUserRestrictionsMigrated(in userId : int) : void
        synchronized (mLock) {
            OwnerInfo profileOwner = mProfileOwners.get(userId);
            if (profileOwner != null) {
                profileOwner.userRestrictionsMigrated = true;
            }
            writeProfileOwner(userId);
        }
!!!74892983.java!!!	readLegacyOwnerFileLocked(inout file : File) : boolean
        if (!file.exists()) {
            // Already migrated or the device has no owners.
            return false;
        }
        try {
            InputStream input = new AtomicFile(file).openRead();
            XmlPullParser parser = Xml.newPullParser();
            parser.setInput(input, StandardCharsets.UTF_8.name());
            int type;
            while ((type=parser.next()) != XmlPullParser.END_DOCUMENT) {
                if (type!=XmlPullParser.START_TAG) {
                    continue;
                }

                String tag = parser.getName();
                if (tag.equals(TAG_DEVICE_OWNER)) {
                    String name = parser.getAttributeValue(null, ATTR_NAME);
                    String packageName = parser.getAttributeValue(null, ATTR_PACKAGE);
                    mDeviceOwner = new OwnerInfo(name, packageName,
                            /* userRestrictionsMigrated =*/ false, /* remoteBugreportUri =*/ null,
                            /* remoteBugreportHash =*/ null);
                    mDeviceOwnerUserId = UserHandle.USER_SYSTEM;
                } else if (tag.equals(TAG_DEVICE_INITIALIZER)) {
                    // Deprecated tag
                } else if (tag.equals(TAG_PROFILE_OWNER)) {
                    String profileOwnerPackageName = parser.getAttributeValue(null, ATTR_PACKAGE);
                    String profileOwnerName = parser.getAttributeValue(null, ATTR_NAME);
                    String profileOwnerComponentStr =
                            parser.getAttributeValue(null, ATTR_COMPONENT_NAME);
                    int userId = Integer.parseInt(parser.getAttributeValue(null, ATTR_USERID));
                    OwnerInfo profileOwnerInfo = null;
                    if (profileOwnerComponentStr != null) {
                        ComponentName admin = ComponentName.unflattenFromString(
                                profileOwnerComponentStr);
                        if (admin != null) {
                            profileOwnerInfo = new OwnerInfo(profileOwnerName, admin,
                                /* userRestrictionsMigrated =*/ false, null, null);
                        } else {
                            // This shouldn't happen but switch from package name -> component name
                            // might have written bad device owner files. b/17652534
                            Slog.e(TAG, "Error parsing device-owner file. Bad component name " +
                                    profileOwnerComponentStr);
                        }
                    }
                    if (profileOwnerInfo == null) {
                        profileOwnerInfo = new OwnerInfo(profileOwnerName, profileOwnerPackageName,
                                /* userRestrictionsMigrated =*/ false,
                                /* remoteBugreportUri =*/ null, /* remoteBugreportHash =*/ null);
                    }
                    mProfileOwners.put(userId, profileOwnerInfo);
                } else if (TAG_SYSTEM_UPDATE_POLICY.equals(tag)) {
                    mSystemUpdatePolicy = SystemUpdatePolicy.restoreFromXml(parser);
                } else {
                    throw new XmlPullParserException(
                            "Unexpected tag in device owner file: " + tag);
                }
            }
            input.close();
        } catch (XmlPullParserException|IOException e) {
            Slog.e(TAG, "Error parsing device-owner file", e);
        }
        return true;
!!!74893111.java!!!	writeDeviceOwner() : void
        synchronized (mLock) {
            if (DEBUG) {
                Log.d(TAG, "Writing to device owner file");
            }
            new DeviceOwnerReadWriter().writeToFileLocked();
        }
!!!74893239.java!!!	writeProfileOwner(in userId : int) : void
        synchronized (mLock) {
            if (DEBUG) {
                Log.d(TAG, "Writing to profile owner file for user " + userId);
            }
            new ProfileOwnerReadWriter(userId).writeToFileLocked();
        }
!!!74895799.java!!!	dump(inout prefix : String, inout pw : PrintWriter) : void
        boolean needBlank = false;
        if (mDeviceOwner != null) {
            pw.println(prefix + "Device Owner: ");
            mDeviceOwner.dump(prefix + "  ", pw);
            pw.println(prefix + "  User ID: " + mDeviceOwnerUserId);
            needBlank = true;
        }
        if (mSystemUpdatePolicy != null) {
            if (needBlank) {
                needBlank = false;
                pw.println();
            }
            pw.println(prefix + "System Update Policy: " + mSystemUpdatePolicy);
            needBlank = true;
        }
        if (mProfileOwners != null) {
            for (Map.Entry<Integer, OwnerInfo> entry : mProfileOwners.entrySet()) {
                if (needBlank) {
                    needBlank = false;
                    pw.println();
                }
                pw.println(prefix + "Profile Owner (User " + entry.getKey() + "): ");
                entry.getValue().dump(prefix + "  ", pw);
                needBlank = true;
            }
        }
!!!74895927.java!!!	getLegacyConfigFileWithTestOverride() : File
        return new File(Environment.getDataSystemDirectory(), DEVICE_OWNER_XML_LEGACY);
!!!74896055.java!!!	getDeviceOwnerFileWithTestOverride() : File
        return new File(Environment.getDataSystemDirectory(), DEVICE_OWNER_XML);
!!!74896183.java!!!	getProfileOwnerFileWithTestOverride(in userId : int) : File
        return new File(Environment.getUserSystemDirectory(userId), PROFILE_OWNER_XML);
