class NetlinkSocket
!!!74953015.java!!!	NetlinkSocket(in nlProto : int)
        mDescriptor = Os.socket(
                OsConstants.AF_NETLINK, OsConstants.SOCK_DGRAM, nlProto);

        Libcore.os.setsockoptInt(
                mDescriptor, OsConstants.SOL_SOCKET,
                OsConstants.SO_RCVBUF, SOCKET_RECV_BUFSIZE);
!!!74953143.java!!!	getLocalAddress() : NetlinkSocketAddress
        return (NetlinkSocketAddress) Os.getsockname(mDescriptor);
!!!74953271.java!!!	bind(inout localAddr : NetlinkSocketAddress) : void
        Os.bind(mDescriptor, (SocketAddress)localAddr);
!!!74953399.java!!!	connectTo(inout peerAddr : NetlinkSocketAddress) : void
        Os.connect(mDescriptor, (SocketAddress) peerAddr);
!!!74953527.java!!!	connectToKernel() : void
        connectTo(new NetlinkSocketAddress(0, 0));
!!!74953655.java!!!	recvMessage() : ByteBuffer
        return recvMessage(DEFAULT_RECV_BUFSIZE, 0);
!!!74953783.java!!!	recvMessage(in timeoutMs : long) : ByteBuffer
        return recvMessage(DEFAULT_RECV_BUFSIZE, timeoutMs);
!!!74953911.java!!!	checkTimeout(in timeoutMs : long) : void
        if (timeoutMs < 0) {
            throw new IllegalArgumentException("Negative timeouts not permitted");
        }
!!!74954039.java!!!	recvMessage(in bufsize : int, in timeoutMs : long) : ByteBuffer
        checkTimeout(timeoutMs);

        synchronized (mDescriptor) {
            if (mLastRecvTimeoutMs != timeoutMs) {
                Os.setsockoptTimeval(mDescriptor,
                        OsConstants.SOL_SOCKET, OsConstants.SO_RCVTIMEO,
                        StructTimeval.fromMillis(timeoutMs));
                mLastRecvTimeoutMs = timeoutMs;
            }
        }

        ByteBuffer byteBuffer = ByteBuffer.allocate(bufsize);
        int length = Os.read(mDescriptor, byteBuffer);
        if (length == bufsize) {
            Log.w(TAG, "maximum read");
        }
        byteBuffer.position(0);
        byteBuffer.limit(length);
        byteBuffer.order(ByteOrder.nativeOrder());
        return byteBuffer;
!!!74954167.java!!!	sendMessage(inout bytes : byte [[]], in offset : int, in count : int) : boolean
        return sendMessage(bytes, offset, count, 0);
!!!74954295.java!!!	sendMessage(inout bytes : byte [[]], in offset : int, in count : int, in timeoutMs : long) : boolean
        checkTimeout(timeoutMs);

        synchronized (mDescriptor) {
            if (mLastSendTimeoutMs != timeoutMs) {
                Os.setsockoptTimeval(mDescriptor,
                        OsConstants.SOL_SOCKET, OsConstants.SO_SNDTIMEO,
                        StructTimeval.fromMillis(timeoutMs));
                mLastSendTimeoutMs = timeoutMs;
            }
        }

        return (count == Os.write(mDescriptor, bytes, offset, count));
!!!74954423.java!!!	close() : void
        IoUtils.closeQuietly(mDescriptor);
