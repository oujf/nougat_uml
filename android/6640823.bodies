class StructNdMsg
!!!74957367.java!!!	stringForNudState(in nudState : short) : String
        switch (nudState) {
            case NUD_NONE: return "NUD_NONE";
            case NUD_INCOMPLETE: return "NUD_INCOMPLETE";
            case NUD_REACHABLE: return "NUD_REACHABLE";
            case NUD_STALE: return "NUD_STALE";
            case NUD_DELAY: return "NUD_DELAY";
            case NUD_PROBE: return "NUD_PROBE";
            case NUD_FAILED: return "NUD_FAILED";
            case NUD_NOARP: return "NUD_NOARP";
            case NUD_PERMANENT: return "NUD_PERMANENT";
            default:
                return "unknown NUD state: " + String.valueOf(nudState);
        }
!!!74957495.java!!!	isNudStateConnected(in nudState : short) : boolean
        return ((nudState & (NUD_PERMANENT|NUD_NOARP|NUD_REACHABLE)) != 0);
!!!74957623.java!!!	stringForNudFlags(in flags : byte) : String
        final StringBuilder sb = new StringBuilder();
        if ((flags & NTF_USE) != 0) {
            sb.append("NTF_USE");
        }
        if ((flags & NTF_SELF) != 0) {
            if (sb.length() > 0) { sb.append("|"); }
            sb.append("NTF_SELF");
        }
        if ((flags & NTF_MASTER) != 0) {
            if (sb.length() > 0) { sb.append("|"); }
            sb.append("NTF_MASTER");
        }
        if ((flags & NTF_PROXY) != 0) {
            if (sb.length() > 0) { sb.append("|");
        }
            sb.append("NTF_PROXY"); }
        if ((flags & NTF_ROUTER) != 0) {
            if (sb.length() > 0) { sb.append("|"); }
            sb.append("NTF_ROUTER");
        }
        return sb.toString();
!!!74957751.java!!!	hasAvailableSpace(inout byteBuffer : ByteBuffer) : boolean
        return byteBuffer != null && byteBuffer.remaining() >= STRUCT_SIZE;
!!!74957879.java!!!	parse(inout byteBuffer : ByteBuffer) : StructNdMsg
        if (!hasAvailableSpace(byteBuffer)) { return null; }

        // The ByteOrder must have already been set by the caller.  In most
        // cases ByteOrder.nativeOrder() is correct, with the possible
        // exception of usage within unittests.
        final StructNdMsg struct = new StructNdMsg();
        struct.ndm_family = byteBuffer.get();
        final byte pad1 = byteBuffer.get();
        final short pad2 = byteBuffer.getShort();
        struct.ndm_ifindex = byteBuffer.getInt();
        struct.ndm_state = byteBuffer.getShort();
        struct.ndm_flags = byteBuffer.get();
        struct.ndm_type = byteBuffer.get();
        return struct;
!!!74958007.java!!!	StructNdMsg()
        ndm_family = (byte) OsConstants.AF_UNSPEC;
!!!74958135.java!!!	pack(inout byteBuffer : ByteBuffer) : void
        // The ByteOrder must have already been set by the caller.  In most
        // cases ByteOrder.nativeOrder() is correct, with the exception
        // of usage within unittests.
        byteBuffer.put(ndm_family);
        byteBuffer.put((byte) 0);         // pad1
        byteBuffer.putShort((short) 0);   // pad2
        byteBuffer.putInt(ndm_ifindex);
        byteBuffer.putShort(ndm_state);
        byteBuffer.put(ndm_flags);
        byteBuffer.put(ndm_type);
!!!74958263.java!!!	nudConnected() : boolean
        return isNudStateConnected(ndm_state);
!!!74958391.java!!!	nudValid() : boolean
        return (nudConnected() || ((ndm_state & (NUD_PROBE|NUD_STALE|NUD_DELAY)) != 0));
!!!74958519.java!!!	toString() : String
        final String stateStr = "" + ndm_state + " (" + stringForNudState(ndm_state) + ")";
        final String flagsStr = "" + ndm_flags + " (" + stringForNudFlags(ndm_flags) + ")";
        return "StructNdMsg{ "
                + "family{" + NetlinkConstants.stringForAddressFamily((int) ndm_family) + "}, "
                + "ifindex{" + ndm_ifindex + "}, "
                + "state{" + stateStr + "}, "
                + "flags{" + flagsStr + "}, "
                + "type{" + ndm_type + "} "
                + "}";
