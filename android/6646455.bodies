class RtNetlinkNeighborMessageTest
!!!75008823.java!!!	testParseRtmDelNeigh() : void
        final ByteBuffer byteBuffer = ByteBuffer.wrap(RTM_DELNEIGH);
        byteBuffer.order(ByteOrder.LITTLE_ENDIAN);  // For testing.
        final NetlinkMessage msg = NetlinkMessage.parse(byteBuffer);
        assertNotNull(msg);
        assertTrue(msg instanceof RtNetlinkNeighborMessage);
        final RtNetlinkNeighborMessage neighMsg = (RtNetlinkNeighborMessage) msg;

        final StructNlMsgHdr hdr = neighMsg.getHeader();
        assertNotNull(hdr);
        assertEquals(76, hdr.nlmsg_len);
        assertEquals(NetlinkConstants.RTM_DELNEIGH, hdr.nlmsg_type);
        assertEquals(0, hdr.nlmsg_flags);
        assertEquals(0, hdr.nlmsg_seq);
        assertEquals(0, hdr.nlmsg_pid);

        final StructNdMsg ndmsgHdr = neighMsg.getNdHeader();
        assertNotNull(ndmsgHdr);
        assertEquals((byte) OsConstants.AF_INET, ndmsgHdr.ndm_family);
        assertEquals(21, ndmsgHdr.ndm_ifindex);
        assertEquals(StructNdMsg.NUD_STALE, ndmsgHdr.ndm_state);
        final InetAddress destination = neighMsg.getDestination();
        assertNotNull(destination);
        assertEquals(InetAddress.parseNumericAddress("192.168.159.254"), destination);
!!!75008951.java!!!	testParseRtmNewNeigh() : void
        final ByteBuffer byteBuffer = ByteBuffer.wrap(RTM_NEWNEIGH);
        byteBuffer.order(ByteOrder.LITTLE_ENDIAN);  // For testing.
        final NetlinkMessage msg = NetlinkMessage.parse(byteBuffer);
        assertNotNull(msg);
        assertTrue(msg instanceof RtNetlinkNeighborMessage);
        final RtNetlinkNeighborMessage neighMsg = (RtNetlinkNeighborMessage) msg;

        final StructNlMsgHdr hdr = neighMsg.getHeader();
        assertNotNull(hdr);
        assertEquals(88, hdr.nlmsg_len);
        assertEquals(NetlinkConstants.RTM_NEWNEIGH, hdr.nlmsg_type);
        assertEquals(0, hdr.nlmsg_flags);
        assertEquals(0, hdr.nlmsg_seq);
        assertEquals(0, hdr.nlmsg_pid);

        final StructNdMsg ndmsgHdr = neighMsg.getNdHeader();
        assertNotNull(ndmsgHdr);
        assertEquals((byte) OsConstants.AF_INET6, ndmsgHdr.ndm_family);
        assertEquals(21, ndmsgHdr.ndm_ifindex);
        assertEquals(StructNdMsg.NUD_STALE, ndmsgHdr.ndm_state);
        final InetAddress destination = neighMsg.getDestination();
        assertNotNull(destination);
        assertEquals(InetAddress.parseNumericAddress("fe80::86c9:b2ff:fe6a:ed4b"), destination);
!!!75009079.java!!!	testParseRtmGetNeighResponse() : void
        final ByteBuffer byteBuffer = ByteBuffer.wrap(RTM_GETNEIGH_RESPONSE);
        byteBuffer.order(ByteOrder.LITTLE_ENDIAN);  // For testing.

        int messageCount = 0;
        while (byteBuffer.remaining() > 0) {
            final NetlinkMessage msg = NetlinkMessage.parse(byteBuffer);
            assertNotNull(msg);
            assertTrue(msg instanceof RtNetlinkNeighborMessage);
            final RtNetlinkNeighborMessage neighMsg = (RtNetlinkNeighborMessage) msg;

            final StructNlMsgHdr hdr = neighMsg.getHeader();
            assertNotNull(hdr);
            assertEquals(NetlinkConstants.RTM_NEWNEIGH, hdr.nlmsg_type);
            assertEquals(StructNlMsgHdr.NLM_F_MULTI, hdr.nlmsg_flags);
            assertEquals(0, hdr.nlmsg_seq);
            assertEquals(11070, hdr.nlmsg_pid);

            messageCount++;
        }
        // TODO: add more detailed spot checks.
        assertEquals(14, messageCount);
!!!75009207.java!!!	testCreateRtmNewNeighMessage() : void
        final int seqNo = 2635;
        final int ifIndex = 14;
        final byte[] llAddr =
                new byte[] { (byte) 1, (byte) 2, (byte) 3, (byte) 4, (byte) 5, (byte) 6 };

        // Hexadecimal representation of our created packet.
        final String expectedNewNeighHex =
                // struct nlmsghdr
                "30000000" +     // length = 48
                "1c00" +         // type = 28 (RTM_NEWNEIGH)
                "0501" +         // flags (NLM_F_REQUEST | NLM_F_ACK | NLM_F_REPLACE)
                "4b0a0000" +     // seqno
                "00000000" +     // pid (0 == kernel)
                // struct ndmsg
                "02" +           // family
                "00" +           // pad1
                "0000" +         // pad2
                "0e000000" +     // interface index (14)
                "0800" +         // NUD state (0x08 == NUD_DELAY)
                "00" +           // flags
                "00" +           // type
                // struct nlattr: NDA_DST
                "0800" +         // length = 8
                "0100" +         // type (1 == NDA_DST, for neighbor messages)
                "7f000001" +     // IPv4 address (== 127.0.0.1)
                // struct nlattr: NDA_LLADDR
                "0a00" +         // length = 10
                "0200" +         // type (2 == NDA_LLADDR, for neighbor messages)
                "010203040506" + // MAC Address (== 01:02:03:04:05:06)
                "0000";          // padding, for 4 byte alignment
        final byte[] expectedNewNeigh =
                HexEncoding.decode(expectedNewNeighHex.toCharArray(), false);

        final byte[] bytes = RtNetlinkNeighborMessage.newNewNeighborMessage(
            seqNo, Inet4Address.LOOPBACK, StructNdMsg.NUD_DELAY, ifIndex, llAddr);
        if (!Arrays.equals(expectedNewNeigh, bytes)) {
            assertEquals(expectedNewNeigh.length, bytes.length);
            for (int i = 0; i < Math.min(expectedNewNeigh.length, bytes.length); i++) {
                assertEquals(expectedNewNeigh[i], bytes[i]);
            }
        }
