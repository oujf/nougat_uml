class AccessibilityManagerTest
!!!75014071.java!!!	setUp() : void
        MockitoAnnotations.initMocks(this);
!!!75014199.java!!!	createManager(inout enabled : boolean) : AccessibilityManager
        if (enabled) {
            when(mMockService.addClient(any(IAccessibilityManagerClient.class), anyInt()))
                    .thenReturn(AccessibilityManager.STATE_FLAG_ACCESSIBILITY_ENABLED);
        } else {
            when(mMockService.addClient(any(IAccessibilityManagerClient.class), anyInt()))
                    .thenReturn(0);
        }

        AccessibilityManager manager =
                new AccessibilityManager(mContext, mMockService, UserHandle.USER_CURRENT);

        verify(mMockService).addClient(any(IAccessibilityManagerClient.class), anyInt());

        return manager;
!!!75014327.java!!!	testGetAccessibilityServiceList() : void
        // create a list of installed accessibility services the mock service returns
        List<AccessibilityServiceInfo> expectedServices = new ArrayList<>();
        AccessibilityServiceInfo accessibilityServiceInfo = new AccessibilityServiceInfo();
        accessibilityServiceInfo.packageNames = new String[] { "foo.bar" };
        expectedServices.add(accessibilityServiceInfo);

        // configure the mock service behavior
        when(mMockService.getInstalledAccessibilityServiceList(anyInt()))
                .thenReturn(expectedServices);

        // invoke the method under test
        AccessibilityManager manager = createManager(true);
        List<AccessibilityServiceInfo> receivedServices =
                manager.getInstalledAccessibilityServiceList();

        verify(mMockService).getInstalledAccessibilityServiceList(UserHandle.USER_CURRENT);
        // check expected result (list equals() compares it contents as well)
        assertEquals("All expected services must be returned", expectedServices, receivedServices);
!!!75014455.java!!!	testInterrupt() : void
        AccessibilityManager manager = createManager(true);
        manager.interrupt();

        verify(mMockService).interrupt(UserHandle.USER_CURRENT);
!!!75014583.java!!!	testIsEnabled() : void
        // invoke the method under test
        AccessibilityManager manager = createManager(true);
        boolean isEnabledServiceEnabled = manager.isEnabled();

        // check expected result
        assertTrue("Must be enabled since the mock service is enabled", isEnabledServiceEnabled);

        // disable accessibility
        manager.getClient().setState(0);

        // wait for the asynchronous IBinder call to complete
        Thread.sleep(TIMEOUT_BINDER_CALL);

        // invoke the method under test
        boolean isEnabledServcieDisabled = manager.isEnabled();

        // check expected result
        assertFalse("Must be disabled since the mock service is disabled",
                isEnabledServcieDisabled);
!!!75014711.java!!!	testSendAccessibilityEvent_AccessibilityEnabled() : void
        AccessibilityEvent sentEvent = AccessibilityEvent.obtain();

        when(mMockService.sendAccessibilityEvent(eq(sentEvent), anyInt()))
                .thenReturn(true  /* should recycle event object */)
                .thenReturn(false /* should not recycle event object */);

        AccessibilityManager manager = createManager(true);
        manager.sendAccessibilityEvent(sentEvent);

        assertSame("The event should be recycled.", sentEvent, AccessibilityEvent.obtain());

        manager.sendAccessibilityEvent(sentEvent);

        assertNotSame("The event should not be recycled.", sentEvent, AccessibilityEvent.obtain());
!!!75014839.java!!!	testSendAccessibilityEvent_AccessibilityDisabled() : void
        AccessibilityEvent sentEvent = AccessibilityEvent.obtain();

        AccessibilityManager manager = createManager(false  /* disabled */);

        try {
            manager.sendAccessibilityEvent(sentEvent);
            fail("No accessibility events are sent if accessibility is disabled");
        } catch (IllegalStateException ise) {
            // check expected result
            assertEquals("Accessibility off. Did you forget to check that?", ise.getMessage());
        }
