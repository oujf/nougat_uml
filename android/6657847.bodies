class ComprehensiveCountryDetectorTest
!!!75117751.java!!!	testDetectNetworkBasedCountry() : void
        final Country resultCountry = new Country(
                TestCountryDetector.COUNTRY_ISO, Country.COUNTRY_SOURCE_NETWORK);
        TestCountryDetector countryDetector = new TestCountryDetector() {
            @Override
            protected Country getNetworkBasedCountry() {
                return resultCountry;
            }
        };
        CountryListenerImpl listener = new CountryListenerImpl();
        countryDetector.setCountryListener(listener);
        Country country = countryDetector.detectCountry();
        assertTrue(sameCountry(country, resultCountry));
        assertFalse(listener.notified());
        assertFalse(countryDetector.locationBasedDetectorStarted());
        assertFalse(countryDetector.locationRefreshStarted());
        countryDetector.stop();
!!!75117879.java!!!	testDetectLocationBasedCountry() : void
        final Country resultCountry = new Country(
                TestCountryDetector.COUNTRY_ISO, Country.COUNTRY_SOURCE_SIM);
        final Country locationBasedCountry = new Country(
                TestCountryDetector.COUNTRY_ISO, Country.COUNTRY_SOURCE_LOCATION);
        TestCountryDetector countryDetector = new TestCountryDetector() {
            @Override
            protected Country getSimBasedCountry() {
                return resultCountry;
            }
        };
        CountryListenerImpl listener = new CountryListenerImpl();
        countryDetector.setCountryListener(listener);
        Country country = countryDetector.detectCountry();
        assertTrue(sameCountry(country, resultCountry));
        assertTrue(countryDetector.locationBasedDetectorStarted());
        countryDetector.notifyLocationBasedListener(locationBasedCountry);
        assertTrue(listener.notified());
        assertTrue(sameCountry(listener.getCountry(), locationBasedCountry));
        assertTrue(countryDetector.locationBasedDetectorStopped());
        assertTrue(countryDetector.locationRefreshStarted());
        countryDetector.stop();
        assertTrue(countryDetector.locationRefreshCancelled());
!!!75118007.java!!!	testLocaleBasedCountry() : void
        final Country resultCountry = new Country(
                TestCountryDetector.COUNTRY_ISO, Country.COUNTRY_SOURCE_LOCALE);
        TestCountryDetector countryDetector = new TestCountryDetector() {
            @Override
            protected Country getLocaleCountry() {
                return resultCountry;
            }
        };
        CountryListenerImpl listener = new CountryListenerImpl();
        countryDetector.setCountryListener(listener);
        Country country = countryDetector.detectCountry();
        assertTrue(sameCountry(country, resultCountry));
        assertFalse(listener.notified());
        assertTrue(countryDetector.locationBasedDetectorStarted());
        assertTrue(countryDetector.locationRefreshStarted());
        countryDetector.stop();
        assertTrue(countryDetector.locationRefreshCancelled());
!!!75118135.java!!!	testStoppingDetector() : void
        // Test stopping detector when LocationBasedCountryDetector was started
        final Country resultCountry = new Country(
                TestCountryDetector.COUNTRY_ISO, Country.COUNTRY_SOURCE_SIM);
        TestCountryDetector countryDetector = new TestCountryDetector() {
            @Override
            protected Country getSimBasedCountry() {
                return resultCountry;
            }
        };
        CountryListenerImpl listener = new CountryListenerImpl();
        countryDetector.setCountryListener(listener);
        Country country = countryDetector.detectCountry();
        assertTrue(sameCountry(country, resultCountry));
        assertTrue(countryDetector.locationBasedDetectorStarted());
        countryDetector.stop();
        // The LocationBasedDetector should be stopped.
        assertTrue(countryDetector.locationBasedDetectorStopped());
        // The location refresh should not running.
        assertTrue(countryDetector.locationRefreshCancelled());
!!!75118263.java!!!	testLocationBasedCountryNotFound() : void
        final Country resultCountry = new Country(
                TestCountryDetector.COUNTRY_ISO, Country.COUNTRY_SOURCE_SIM);
        TestCountryDetector countryDetector = new TestCountryDetector() {
            @Override
            protected Country getSimBasedCountry() {
                return resultCountry;
            }
        };
        CountryListenerImpl listener = new CountryListenerImpl();
        countryDetector.setCountryListener(listener);
        Country country = countryDetector.detectCountry();
        assertTrue(sameCountry(country, resultCountry));
        assertTrue(countryDetector.locationBasedDetectorStarted());
        countryDetector.notifyLocationBasedListener(null);
        assertFalse(listener.notified());
        assertTrue(sameCountry(listener.getCountry(), null));
        assertTrue(countryDetector.locationBasedDetectorStopped());
        assertTrue(countryDetector.locationRefreshStarted());
        countryDetector.stop();
        assertTrue(countryDetector.locationRefreshCancelled());
!!!75118391.java!!!	testNoCountryFound() : void
        TestCountryDetector countryDetector = new TestCountryDetector();
        CountryListenerImpl listener = new CountryListenerImpl();
        countryDetector.setCountryListener(listener);
        Country country = countryDetector.detectCountry();
        assertTrue(sameCountry(country, null));
        assertTrue(countryDetector.locationBasedDetectorStarted());
        countryDetector.notifyLocationBasedListener(null);
        assertFalse(listener.notified());
        assertTrue(sameCountry(listener.getCountry(), null));
        assertTrue(countryDetector.locationBasedDetectorStopped());
        assertTrue(countryDetector.locationRefreshStarted());
        countryDetector.stop();
        assertTrue(countryDetector.locationRefreshCancelled());
!!!75118519.java!!!	testAddRemoveListener() : void
        TestCountryDetector countryDetector = new TestCountryDetector();
        CountryListenerImpl listener = new CountryListenerImpl();
        countryDetector.setCountryListener(listener);
        assertTrue(countryDetector.isPhoneStateListenerAdded());
        assertTrue(countryDetector.locationBasedDetectorStarted());
        countryDetector.setCountryListener(null);
        assertFalse(countryDetector.isPhoneStateListenerAdded());
        assertTrue(countryDetector.locationBasedDetectorStopped());
!!!75118647.java!!!	testGeocoderNotImplemented() : void
        TestCountryDetector countryDetector = new TestCountryDetector() {
            @Override
            protected boolean isGeoCoderImplemented() {
                return false;
            }
        };
        CountryListenerImpl listener = new CountryListenerImpl();
        countryDetector.setCountryListener(listener);
        assertTrue(countryDetector.isPhoneStateListenerAdded());
        assertFalse(countryDetector.locationBasedDetectorStarted());
        countryDetector.setCountryListener(null);
        assertFalse(countryDetector.isPhoneStateListenerAdded());
!!!75118775.java!!!	sameCountry(inout country1 : Country, inout country2 : Country) : boolean
        return country1 == null && country2 == null || country1 != null && country2 != null &&
        country1.getCountryIso().equalsIgnoreCase(country2.getCountryIso()) &&
        country1.getSource() == country2.getSource();
