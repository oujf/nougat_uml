class RateEstimatorTest
!!!75142071.java!!!	setUp() : void
        mTestStartTime = 1225731600000L;
        mEstimator = new RateEstimator();
!!!75142199.java!!!	testRunningTimeBackwardDoesntExplodeUpdate() : void
        assertUpdateTime(mTestStartTime);
        assertUpdateTime(mTestStartTime - 1000L);
!!!75142327.java!!!	testRunningTimeBackwardDoesntExplodeGet() : void
        assertUpdateTime(mTestStartTime);
        final float rate = mEstimator.getRate(mTestStartTime - 1000L);
        assertFalse(Float.isInfinite(rate));
        assertFalse(Float.isNaN(rate));
!!!75142455.java!!!	testInstantaneousEventsDontExplodeUpdate() : void
        assertUpdateTime(mTestStartTime);
        assertUpdateTime(mTestStartTime);
!!!75142583.java!!!	testInstantaneousEventsDontExplodeGet() : void
        assertUpdateTime(mTestStartTime);
        assertUpdateTime(mTestStartTime);
        final float rate = mEstimator.getRate(mTestStartTime);
        assertFalse(Float.isInfinite(rate));
        assertFalse(Float.isNaN(rate));
!!!75142711.java!!!	testInstantaneousBurstIsEstimatedUnderTwoPercent() : void
        assertUpdateTime(mTestStartTime);
        long eventStart = mTestStartTime + 1000; // start event a long time after initialization
        long nextEventTime = postEvents(eventStart, 0, 5); // five events at \inf
        final float rate = mEstimator.getRate(nextEventTime);
        assertLessThan("Rate", rate, 20f);
!!!75142839.java!!!	testCompactBurstIsEstimatedUnderTwoPercent() : void
        assertUpdateTime(mTestStartTime);
        long eventStart = mTestStartTime + 1000; // start event a long time after initialization
        long nextEventTime = postEvents(eventStart, 1, 5); // five events at 1000Hz
        final float rate = mEstimator.getRate(nextEventTime);
        assertLessThan("Rate", rate, 20f);
!!!75142967.java!!!	testSustained1000HzBurstIsEstimatedOverNinetyPercent() : void
        assertUpdateTime(mTestStartTime);
        long eventStart = mTestStartTime + 1000; // start event a long time after initialization
        long nextEventTime = postEvents(eventStart, 1, 100); // one hundred events at 1000Hz
        final float rate = mEstimator.getRate(nextEventTime);
        assertGreaterThan("Rate", rate, 900f);
!!!75143095.java!!!	testSustained100HzBurstIsEstimatedOverNinetyPercent() : void
        assertUpdateTime(mTestStartTime);
        long eventStart = mTestStartTime + 1000; // start event a long time after initialization
        long nextEventTime = postEvents(eventStart, 10, 100); // one hundred events at 100Hz
        final float rate = mEstimator.getRate(nextEventTime);

        assertGreaterThan("Rate", rate, 90f);
!!!75143223.java!!!	testRecoverQuicklyAfterSustainedBurst() : void
        assertUpdateTime(mTestStartTime);
        long eventStart = mTestStartTime + 1000; // start event a long time after initialization
        long nextEventTime = postEvents(eventStart, 10, 1000); // one hundred events at 100Hz
        final float rate = mEstimator.getRate(nextEventTime + 5000L); // two seconds later
        assertLessThan("Rate", rate, 2f);
!!!75143351.java!!!	testEstimateShouldNotOvershoot() : void
        assertUpdateTime(mTestStartTime);
        long eventStart = mTestStartTime + 1000; // start event a long time after initialization
        long nextEventTime = postEvents(eventStart, 1, 1000); // one thousand events at 1000Hz
        final float rate = mEstimator.getRate(nextEventTime);
        assertLessThan("Rate", rate, 1000f);
!!!75143479.java!!!	testGetRateWithoutUpdate() : void
        final float rate = mEstimator.getRate(mTestStartTime);
        assertLessThan("Rate", rate, 0.1f);
!!!75143607.java!!!	testGetRateWithOneUpdate() : void
        assertUpdateTime(mTestStartTime);
        final float rate = mEstimator.getRate(mTestStartTime+1);
        assertLessThan("Rate", rate, 1f);
!!!75143735.java!!!	assertLessThan(inout label : String, in a : float, in b : float) : void
        assertTrue(String.format("%s was %f, but should be less than %f", label, a, b), a <= b);
!!!75143863.java!!!	assertGreaterThan(inout label : String, in a : float, in b : float) : void
        assertTrue(String.format("%s was %f, but should be more than %f", label, a, b), a >= b);
!!!75143991.java!!!	postEvents(in start : long, in dt : long, in num : int) : long
        long time = start;
        for (int i = 0; i < num; i++) {
            mEstimator.update(time);
            time += dt;
        }
        return time;
!!!75144119.java!!!	assertUpdateTime(in time : long) : void
        final float rate = mEstimator.update(time);
        assertFalse(Float.isInfinite(rate));
        assertFalse(Float.isNaN(rate));
