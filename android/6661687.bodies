class CertPinInstallReceiverTest
!!!75159991.java!!!	overrideSettings(inout key : String, inout value : String) : void
        assertTrue(Settings.Secure.putString(mContext.getContentResolver(), key, value));
        Thread.sleep(1000);
!!!75160119.java!!!	overrideCert(inout value : String) : void
        overrideSettings(PINLIST_CERTIFICATE_KEY, value);
!!!75160247.java!!!	readPins() : String
        return IoUtils.readFileAsString(PINLIST_CONTENT_PATH);
!!!75160375.java!!!	readCurrentVersion() : String
        return IoUtils.readFileAsString("/data/misc/keychain/metadata/version");
!!!75160503.java!!!	getNextVersion() : String
        int currentVersion = Integer.parseInt(readCurrentVersion());
        return Integer.toString(currentVersion + 1);
!!!75160631.java!!!	getCurrentHash(inout content : String) : String
        if (content == null) {
            return "0";
        }
        MessageDigest dgst = MessageDigest.getInstance("SHA512");
        byte[] encoded = content.getBytes();
        byte[] fingerprint = dgst.digest(encoded);
        return HexDump.toHexString(fingerprint, false);
!!!75160759.java!!!	getHashOfCurrentContent() : String
        String content = IoUtils.readFileAsString("/data/misc/keychain/pins");
        return getCurrentHash(content);
!!!75160887.java!!!	createKey() : PrivateKey
        byte[] derKey = Base64.decode(TEST_KEY.getBytes(), Base64.DEFAULT);
        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(derKey);
        KeyFactory keyFactory = KeyFactory.getInstance("RSA");
        return (PrivateKey) keyFactory.generatePrivate(keySpec);
!!!75161015.java!!!	createCertificate() : X509Certificate
        byte[] derCert = Base64.decode(TEST_CERT.getBytes(), Base64.DEFAULT);
        InputStream istream = new ByteArrayInputStream(derCert);
        CertificateFactory cf = CertificateFactory.getInstance("X.509");
        return (X509Certificate) cf.generateCertificate(istream);
!!!75161143.java!!!	makeTemporaryContentFile(inout content : String) : String
        FileOutputStream fw = mContext.openFileOutput("content.txt", mContext.MODE_WORLD_READABLE);
        fw.write(content.getBytes(), 0, content.length());
        fw.close();
        return mContext.getFilesDir() + "/content.txt";
!!!75161271.java!!!	createSignature(inout content : String, inout version : String, inout requiredHash : String) : String
        Signature signer = Signature.getInstance("SHA512withRSA");
        signer.initSign(createKey());
        signer.update(content.trim().getBytes());
        signer.update(version.trim().getBytes());
        signer.update(requiredHash.getBytes());
        String sig = new String(Base64.encode(signer.sign(), Base64.DEFAULT));
        assertEquals(true,
                     verifySignature(content, version, requiredHash, sig, createCertificate()));
        return sig;
!!!75161399.java!!!	verifySignature(inout content : String, inout version : String, inout requiredPrevious : String, inout signature : String, inout cert : X509Certificate) : boolean
        Signature signer = Signature.getInstance("SHA512withRSA");
        signer.initVerify(cert);
        signer.update(content.trim().getBytes());
        signer.update(version.trim().getBytes());
        signer.update(requiredPrevious.trim().getBytes());
        return signer.verify(Base64.decode(signature.getBytes(), Base64.DEFAULT));
!!!75161527.java!!!	sendIntent(inout contentPath : String, inout version : String, inout required : String, inout sig : String) : void
        Intent i = new Intent();
        i.setAction("android.intent.action.UPDATE_PINS");
        i.putExtra(EXTRA_CONTENT_PATH, contentPath);
        i.putExtra(EXTRA_VERSION_NUMBER, version);
        i.putExtra(EXTRA_REQUIRED_HASH, required);
        i.putExtra(EXTRA_SIGNATURE, sig);
        mContext.sendBroadcast(i);
!!!75161655.java!!!	runTest(inout cert : String, inout content : String, inout version : String, inout required : String, inout sig : String) : String
        Log.e(TAG, "started test");
        overrideCert(cert);
        String contentPath = makeTemporaryContentFile(content);
        sendIntent(contentPath, version, required, sig);
        Thread.sleep(1000);
        return readPins();
!!!75161783.java!!!	runTestWithoutSig(inout cert : String, inout content : String, inout version : String, inout required : String) : String
        String sig = createSignature(content, version, required);
        return runTest(cert, content, version, required, sig);
!!!75161911.java!!!	testOverwritePinlist() : void
        Log.e(TAG, "started testOverwritePinList");
        assertEquals("abcde", runTestWithoutSig(TEST_CERT, "abcde", getNextVersion(), getHashOfCurrentContent()));
        Log.e(TAG, "started testOverwritePinList");
!!!75162039.java!!!	testBadSignatureFails() : void
        Log.e(TAG, "started testOverwritePinList");
        String text = "blahblah";
        runTestWithoutSig(TEST_CERT, text, getNextVersion(), getHashOfCurrentContent());
        assertEquals(text, runTest(TEST_CERT, "bcdef", getNextVersion(), getCurrentHash(text), ""));
        Log.e(TAG, "started testOverwritePinList");
!!!75162167.java!!!	testBadRequiredHashFails() : void
        runTestWithoutSig(TEST_CERT, "blahblahblah", getNextVersion(), getHashOfCurrentContent());
        assertEquals("blahblahblah", runTestWithoutSig(TEST_CERT, "cdefg", getNextVersion(), "0"));
        Log.e(TAG, "started testOverwritePinList");
!!!75162295.java!!!	testBadVersionFails() : void
        String text = "blahblahblahblah";
        String version = getNextVersion();
        runTestWithoutSig(TEST_CERT, text, version, getHashOfCurrentContent());
        assertEquals(text, runTestWithoutSig(TEST_CERT, "defgh", version, getCurrentHash(text)));
        Log.e(TAG, "started testOverwritePinList");
!!!75162423.java!!!	testOverrideRequiredHash() : void
        runTestWithoutSig(TEST_CERT, "blahblahblah", getNextVersion(), getHashOfCurrentContent());
        assertEquals("blahblahblah", runTestWithoutSig(TEST_CERT, "cdefg", "NONE", "0"));
        Log.e(TAG, "started testOverwritePinList");
