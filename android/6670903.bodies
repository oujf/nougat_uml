class Call
!!!75264695.java!!!	getRemainingPostDialSequence() : String
        return mRemainingPostDialSequence;
!!!75264823.java!!!	answer(in videoState : int) : void
        mInCallAdapter.answerCall(mTelecomCallId, videoState);
!!!75264951.java!!!	reject(inout rejectWithMessage : boolean, inout textMessage : String) : void
        mInCallAdapter.rejectCall(mTelecomCallId, rejectWithMessage, textMessage);
!!!75265079.java!!!	disconnect() : void
        mInCallAdapter.disconnectCall(mTelecomCallId);
!!!75265207.java!!!	hold() : void
        mInCallAdapter.holdCall(mTelecomCallId);
!!!75265335.java!!!	unhold() : void
        mInCallAdapter.unholdCall(mTelecomCallId);
!!!75265463.java!!!	playDtmfTone(in digit : char) : void
        mInCallAdapter.playDtmfTone(mTelecomCallId, digit);
!!!75265591.java!!!	stopDtmfTone() : void
        mInCallAdapter.stopDtmfTone(mTelecomCallId);
!!!75265719.java!!!	postDialContinue(inout proceed : boolean) : void
        mInCallAdapter.postDialContinue(mTelecomCallId, proceed);
!!!75265847.java!!!	phoneAccountSelected(inout accountHandle : PhoneAccountHandle, inout setDefault : boolean) : void
        mInCallAdapter.phoneAccountSelected(mTelecomCallId, accountHandle, setDefault);

!!!75265975.java!!!	conference(inout callToConferenceWith : Call) : void
        if (callToConferenceWith != null) {
            mInCallAdapter.conference(mTelecomCallId, callToConferenceWith.mTelecomCallId);
        }
!!!75266103.java!!!	splitFromConference() : void
        mInCallAdapter.splitFromConference(mTelecomCallId);
!!!75266231.java!!!	mergeConference() : void
        mInCallAdapter.mergeConference(mTelecomCallId);
!!!75266359.java!!!	swapConference() : void
        mInCallAdapter.swapConference(mTelecomCallId);
!!!75266487.java!!!	pullExternalCall() : void
        // If this isn't an external call, ignore the request.
        if (!mDetails.hasProperty(Details.PROPERTY_IS_EXTERNAL_CALL)) {
            return;
        }

        mInCallAdapter.pullExternalCall(mTelecomCallId);
!!!75266615.java!!!	sendCallEvent(inout event : String, inout extras : Bundle) : void
        mInCallAdapter.sendCallEvent(mTelecomCallId, event, extras);
!!!75266743.java!!!	putExtras(inout extras : Bundle) : void
        if (extras == null) {
            return;
        }

        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putAll(extras);
        mInCallAdapter.putExtras(mTelecomCallId, extras);
!!!75266871.java!!!	putExtra(inout key : String, inout value : boolean) : void
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putBoolean(key, value);
        mInCallAdapter.putExtra(mTelecomCallId, key, value);
!!!75266999.java!!!	putExtra(inout key : String, in value : int) : void
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putInt(key, value);
        mInCallAdapter.putExtra(mTelecomCallId, key, value);
!!!75267127.java!!!	putExtra(inout key : String, inout value : String) : void
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putString(key, value);
        mInCallAdapter.putExtra(mTelecomCallId, key, value);
!!!75267255.java!!!	removeExtras(inout keys : List<String>) : void
        if (mExtras != null) {
            for (String key : keys) {
                mExtras.remove(key);
            }
            if (mExtras.size() == 0) {
                mExtras = null;
            }
        }
        mInCallAdapter.removeExtras(mTelecomCallId, keys);
!!!75267383.java!!!	getParent() : Call
        if (mParentId != null) {
            return mPhone.internalGetCallByTelecomId(mParentId);
        }
        return null;
!!!75267511.java!!!	getChildren() : Call
        if (!mChildrenCached) {
            mChildrenCached = true;
            mChildren.clear();

            for(String id : mChildrenIds) {
                Call call = mPhone.internalGetCallByTelecomId(id);
                if (call == null) {
                    // At least one child was still not found, so do not save true for "cached"
                    mChildrenCached = false;
                } else {
                    mChildren.add(call);
                }
            }
        }

        return mUnmodifiableChildren;
!!!75267639.java!!!	getConferenceableCalls() : Call
        return mUnmodifiableConferenceableCalls;
!!!75267767.java!!!	getState() : int
        return mState;
!!!75267895.java!!!	getCannedTextResponses() : String
        return mCannedTextResponses;
!!!75268023.java!!!	getVideoCall() : InCallService::VideoCall
        return mVideoCallImpl;
!!!75268151.java!!!	getDetails() : Call::Details
        return mDetails;
!!!75268279.java!!!	registerCallback(inout callback : Call::Callback) : void
        registerCallback(callback, new Handler());
!!!75268407.java!!!	registerCallback(inout callback : Call::Callback, inout handler : Handler) : void
        unregisterCallback(callback);
        // Don't allow new callback registration if the call is already being destroyed.
        if (callback != null && handler != null && mState != STATE_DISCONNECTED) {
            mCallbackRecords.add(new CallbackRecord<Callback>(callback, handler));
        }
!!!75268535.java!!!	unregisterCallback(inout callback : Call::Callback) : void
        // Don't allow callback deregistration if the call is already being destroyed.
        if (callback != null && mState != STATE_DISCONNECTED) {
            for (CallbackRecord<Callback> record : mCallbackRecords) {
                if (record.getCallback() == callback) {
                    mCallbackRecords.remove(record);
                    break;
                }
            }
        }
!!!75268663.java!!!	toString() : String
        return new StringBuilder().
                append("Call [id: ").
                append(mTelecomCallId).
                append(", state: ").
                append(stateToString(mState)).
                append(", details: ").
                append(mDetails).
                append("]").toString();
!!!75268791.java!!!	stateToString(in state : int) : String
        switch (state) {
            case STATE_NEW:
                return "NEW";
            case STATE_RINGING:
                return "RINGING";
            case STATE_DIALING:
                return "DIALING";
            case STATE_ACTIVE:
                return "ACTIVE";
            case STATE_HOLDING:
                return "HOLDING";
            case STATE_DISCONNECTED:
                return "DISCONNECTED";
            case STATE_CONNECTING:
                return "CONNECTING";
            case STATE_DISCONNECTING:
                return "DISCONNECTING";
            case STATE_SELECT_PHONE_ACCOUNT:
                return "SELECT_PHONE_ACCOUNT";
            default:
                Log.w(Call.class, "Unknown state %d", state);
                return "UNKNOWN";
        }
!!!75268919.java!!!	addListener(inout listener : Call::Listener) : void
        registerCallback(listener);
!!!75269047.java!!!	removeListener(inout listener : Call::Listener) : void
        unregisterCallback(listener);
!!!75269175.java!!!	Call(inout phone : Phone, inout telecomCallId : String, inout inCallAdapter : InCallAdapter)
        mPhone = phone;
        mTelecomCallId = telecomCallId;
        mInCallAdapter = inCallAdapter;
        mState = STATE_NEW;
!!!75269303.java!!!	Call(inout phone : Phone, inout telecomCallId : String, inout inCallAdapter : InCallAdapter, in state : int)
        mPhone = phone;
        mTelecomCallId = telecomCallId;
        mInCallAdapter = inCallAdapter;
        mState = state;
!!!75269431.java!!!	internalGetCallId() : String
        return mTelecomCallId;
!!!75269559.java!!!	internalUpdate(inout parcelableCall : ParcelableCall, inout callIdMap : Map<String, Call>) : void
        // First, we update the internal state as far as possible before firing any updates.
        Details details = Details.createFromParcelableCall(parcelableCall);
        boolean detailsChanged = !Objects.equals(mDetails, details);
        if (detailsChanged) {
            mDetails = details;
        }

        boolean cannedTextResponsesChanged = false;
        if (mCannedTextResponses == null && parcelableCall.getCannedSmsResponses() != null
                && !parcelableCall.getCannedSmsResponses().isEmpty()) {
            mCannedTextResponses =
                    Collections.unmodifiableList(parcelableCall.getCannedSmsResponses());
            cannedTextResponsesChanged = true;
        }

        VideoCallImpl newVideoCallImpl = parcelableCall.getVideoCallImpl();
        boolean videoCallChanged = parcelableCall.isVideoCallProviderChanged() &&
                !Objects.equals(mVideoCallImpl, newVideoCallImpl);
        if (videoCallChanged) {
            mVideoCallImpl = newVideoCallImpl;
        }
        if (mVideoCallImpl != null) {
            mVideoCallImpl.setVideoState(getDetails().getVideoState());
        }

        int state = parcelableCall.getState();
        boolean stateChanged = mState != state;
        if (stateChanged) {
            mState = state;
        }

        String parentId = parcelableCall.getParentCallId();
        boolean parentChanged = !Objects.equals(mParentId, parentId);
        if (parentChanged) {
            mParentId = parentId;
        }

        List<String> childCallIds = parcelableCall.getChildCallIds();
        boolean childrenChanged = !Objects.equals(childCallIds, mChildrenIds);
        if (childrenChanged) {
            mChildrenIds.clear();
            mChildrenIds.addAll(parcelableCall.getChildCallIds());
            mChildrenCached = false;
        }

        List<String> conferenceableCallIds = parcelableCall.getConferenceableCallIds();
        List<Call> conferenceableCalls = new ArrayList<Call>(conferenceableCallIds.size());
        for (String otherId : conferenceableCallIds) {
            if (callIdMap.containsKey(otherId)) {
                conferenceableCalls.add(callIdMap.get(otherId));
            }
        }

        if (!Objects.equals(mConferenceableCalls, conferenceableCalls)) {
            mConferenceableCalls.clear();
            mConferenceableCalls.addAll(conferenceableCalls);
            fireConferenceableCallsChanged();
        }

        // Now we fire updates, ensuring that any client who listens to any of these notifications
        // gets the most up-to-date state.

        if (stateChanged) {
            fireStateChanged(mState);
        }
        if (detailsChanged) {
            fireDetailsChanged(mDetails);
        }
        if (cannedTextResponsesChanged) {
            fireCannedTextResponsesLoaded(mCannedTextResponses);
        }
        if (videoCallChanged) {
            fireVideoCallChanged(mVideoCallImpl);
        }
        if (parentChanged) {
            fireParentChanged(getParent());
        }
        if (childrenChanged) {
            fireChildrenChanged(getChildren());
        }

        // If we have transitioned to DISCONNECTED, that means we need to notify clients and
        // remove ourselves from the Phone. Note that we do this after completing all state updates
        // so a client can cleanly transition all their UI to the state appropriate for a
        // DISCONNECTED Call while still relying on the existence of that Call in the Phone's list.
        if (mState == STATE_DISCONNECTED) {
            fireCallDestroyed();
        }
!!!75269687.java!!!	internalSetPostDialWait(inout remaining : String) : void
        mRemainingPostDialSequence = remaining;
        firePostDialWait(mRemainingPostDialSequence);
!!!75269815.java!!!	internalSetDisconnected() : void
        if (mState != Call.STATE_DISCONNECTED) {
            mState = Call.STATE_DISCONNECTED;
            fireStateChanged(mState);
            fireCallDestroyed();
        }
!!!75269943.java!!!	internalOnConnectionEvent(inout event : String, inout extras : Bundle) : void
        fireOnConnectionEvent(event, extras);
!!!75270071.java!!!	fireStateChanged(in newState : int) : void
        for (CallbackRecord<Callback> record : mCallbackRecords) {
            final Call call = this;
            final Callback callback = record.getCallback();
            record.getHandler().post(new Runnable() {
                @Override
                public void run() {
                    callback.onStateChanged(call, newState);
                }
            });
        }
!!!75270199.java!!!	fireParentChanged(in newParent : Call) : void
        for (CallbackRecord<Callback> record : mCallbackRecords) {
            final Call call = this;
            final Callback callback = record.getCallback();
            record.getHandler().post(new Runnable() {
                @Override
                public void run() {
                    callback.onParentChanged(call, newParent);
                }
            });
        }
!!!75270327.java!!!	fireChildrenChanged(in children : List<Call>) : void
        for (CallbackRecord<Callback> record : mCallbackRecords) {
            final Call call = this;
            final Callback callback = record.getCallback();
            record.getHandler().post(new Runnable() {
                @Override
                public void run() {
                    callback.onChildrenChanged(call, children);
                }
            });
        }
!!!75270455.java!!!	fireDetailsChanged(in details : Call::Details) : void
        for (CallbackRecord<Callback> record : mCallbackRecords) {
            final Call call = this;
            final Callback callback = record.getCallback();
            record.getHandler().post(new Runnable() {
                @Override
                public void run() {
                    callback.onDetailsChanged(call, details);
                }
            });
        }
!!!75270583.java!!!	fireCannedTextResponsesLoaded(in cannedTextResponses : List<String>) : void
        for (CallbackRecord<Callback> record : mCallbackRecords) {
            final Call call = this;
            final Callback callback = record.getCallback();
            record.getHandler().post(new Runnable() {
                @Override
                public void run() {
                    callback.onCannedTextResponsesLoaded(call, cannedTextResponses);
                }
            });
        }
!!!75270711.java!!!	fireVideoCallChanged(in videoCall : InCallService::VideoCall) : void
        for (CallbackRecord<Callback> record : mCallbackRecords) {
            final Call call = this;
            final Callback callback = record.getCallback();
            record.getHandler().post(new Runnable() {
                @Override
                public void run() {
                    callback.onVideoCallChanged(call, videoCall);
                }
            });
        }
!!!75270839.java!!!	firePostDialWait(in remainingPostDialSequence : String) : void
        for (CallbackRecord<Callback> record : mCallbackRecords) {
            final Call call = this;
            final Callback callback = record.getCallback();
            record.getHandler().post(new Runnable() {
                @Override
                public void run() {
                    callback.onPostDialWait(call, remainingPostDialSequence);
                }
            });
        }
!!!75270967.java!!!	fireCallDestroyed() : void
        /**
         * To preserve the ordering of the Call's onCallDestroyed callback and Phone's
         * onCallRemoved callback, we remove this call from the Phone's record
         * only once all of the registered onCallDestroyed callbacks are executed.
         * All the callbacks get removed from our records as a part of this operation
         * since onCallDestroyed is the final callback.
         */
        final Call call = this;
        if (mCallbackRecords.isEmpty()) {
            // No callbacks registered, remove the call from Phone's record.
            mPhone.internalRemoveCall(call);
        }
        for (final CallbackRecord<Callback> record : mCallbackRecords) {
            final Callback callback = record.getCallback();
            record.getHandler().post(new Runnable() {
                @Override
                public void run() {
                    boolean isFinalRemoval = false;
                    RuntimeException toThrow = null;
                    try {
                        callback.onCallDestroyed(call);
                    } catch (RuntimeException e) {
                            toThrow = e;
                    }
                    synchronized(Call.this) {
                        mCallbackRecords.remove(record);
                        if (mCallbackRecords.isEmpty()) {
                            isFinalRemoval = true;
                        }
                    }
                    if (isFinalRemoval) {
                        mPhone.internalRemoveCall(call);
                    }
                    if (toThrow != null) {
                        throw toThrow;
                    }
                }
            });
        }
!!!75271095.java!!!	fireConferenceableCallsChanged() : void
        for (CallbackRecord<Callback> record : mCallbackRecords) {
            final Call call = this;
            final Callback callback = record.getCallback();
            record.getHandler().post(new Runnable() {
                @Override
                public void run() {
                    callback.onConferenceableCallsChanged(call, mUnmodifiableConferenceableCalls);
                }
            });
        }
!!!75271223.java!!!	fireOnConnectionEvent(in event : String, in extras : Bundle) : void
        for (CallbackRecord<Callback> record : mCallbackRecords) {
            final Call call = this;
            final Callback callback = record.getCallback();
            record.getHandler().post(new Runnable() {
                @Override
                public void run() {
                    callback.onConnectionEvent(call, event, extras);
                }
            });
        }
!!!75271351.java!!!	areBundlesEqual(inout bundle : Bundle, inout newBundle : Bundle) : boolean
        if (bundle == null || newBundle == null) {
            return bundle == newBundle;
        }

        if (bundle.size() != newBundle.size()) {
            return false;
        }

        for(String key : bundle.keySet()) {
            if (key != null) {
                final Object value = bundle.get(key);
                final Object newValue = newBundle.get(key);
                if (!Objects.equals(value, newValue)) {
                    return false;
                }
            }
        }
        return true;
