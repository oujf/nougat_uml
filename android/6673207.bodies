class Conference
!!!75277239.java!!!	Conference(inout phoneAccount : PhoneAccountHandle)
        mPhoneAccount = phoneAccount;
!!!75277367.java!!!	getTelecomCallId() : String
        return mTelecomCallId;
!!!75277495.java!!!	setTelecomCallId(inout telecomCallId : String) : void
        mTelecomCallId = telecomCallId;
!!!75277623.java!!!	getPhoneAccountHandle() : PhoneAccountHandle
        return mPhoneAccount;
!!!75277751.java!!!	getConnections() : Connection
        return mUnmodifiableChildConnections;
!!!75277879.java!!!	getState() : int
        return mState;
!!!75278007.java!!!	getConnectionCapabilities() : int
        return mConnectionCapabilities;
!!!75278135.java!!!	getConnectionProperties() : int
        return mConnectionProperties;
!!!75278263.java!!!	can(in capabilities : int, in capability : int) : boolean
        return (capabilities & capability) != 0;
!!!75278391.java!!!	can(in capability : int) : boolean
        return can(mConnectionCapabilities, capability);
!!!75278519.java!!!	removeCapability(in capability : int) : void
        int newCapabilities = mConnectionCapabilities;
        newCapabilities &= ~capability;

        setConnectionCapabilities(newCapabilities);
!!!75278647.java!!!	addCapability(in capability : int) : void
        int newCapabilities = mConnectionCapabilities;
        newCapabilities |= capability;

        setConnectionCapabilities(newCapabilities);
!!!75278775.java!!!	getAudioState() : AudioState
        return new AudioState(mCallAudioState);
!!!75278903.java!!!	getCallAudioState() : CallAudioState
        return mCallAudioState;
!!!75279031.java!!!	getVideoProvider() : Connection::VideoProvider
        return null;
!!!75279159.java!!!	getVideoState() : int
        return VideoProfile.STATE_AUDIO_ONLY;
!!!75280823.java!!!	setOnHold() : void
        setState(Connection.STATE_HOLDING);
!!!75280951.java!!!	setDialing() : void
        setState(Connection.STATE_DIALING);
!!!75281079.java!!!	setActive() : void
        setState(Connection.STATE_ACTIVE);
!!!75281207.java!!!	setDisconnected(inout disconnectCause : DisconnectCause) : void
        mDisconnectCause = disconnectCause;;
        setState(Connection.STATE_DISCONNECTED);
        for (Listener l : mListeners) {
            l.onDisconnected(this, mDisconnectCause);
        }
!!!75281335.java!!!	getDisconnectCause() : DisconnectCause
        return mDisconnectCause;
!!!75281463.java!!!	setConnectionCapabilities(in connectionCapabilities : int) : void
        if (connectionCapabilities != mConnectionCapabilities) {
            mConnectionCapabilities = connectionCapabilities;

            for (Listener l : mListeners) {
                l.onConnectionCapabilitiesChanged(this, mConnectionCapabilities);
            }
        }
!!!75281591.java!!!	setConnectionProperties(in connectionProperties : int) : void
        if (connectionProperties != mConnectionProperties) {
            mConnectionProperties = connectionProperties;

            for (Listener l : mListeners) {
                l.onConnectionPropertiesChanged(this, mConnectionProperties);
            }
        }
!!!75281719.java!!!	addConnection(inout connection : Connection) : boolean
        Log.d(this, "Connection=%s, connection=", connection);
        if (connection != null && !mChildConnections.contains(connection)) {
            if (connection.setConference(this)) {
                mChildConnections.add(connection);
                onConnectionAdded(connection);
                for (Listener l : mListeners) {
                    l.onConnectionAdded(this, connection);
                }
                return true;
            }
        }
        return false;
!!!75281847.java!!!	removeConnection(inout connection : Connection) : void
        Log.d(this, "removing %s from %s", connection, mChildConnections);
        if (connection != null && mChildConnections.remove(connection)) {
            connection.resetConference();
            for (Listener l : mListeners) {
                l.onConnectionRemoved(this, connection);
            }
        }
!!!75281975.java!!!	setConferenceableConnections(inout conferenceableConnections : List<Connection>) : void
        clearConferenceableList();
        for (Connection c : conferenceableConnections) {
            // If statement checks for duplicates in input. It makes it N^2 but we're dealing with a
            // small amount of items here.
            if (!mConferenceableConnections.contains(c)) {
                c.addConnectionListener(mConnectionDeathListener);
                mConferenceableConnections.add(c);
            }
        }
        fireOnConferenceableConnectionsChanged();
!!!75282103.java!!!	setVideoState(inout c : Connection, in videoState : int) : void
        Log.d(this, "setVideoState Conference: %s Connection: %s VideoState: %s",
                this, c, videoState);
        for (Listener l : mListeners) {
            l.onVideoStateChanged(this, videoState);
        }
!!!75282231.java!!!	setVideoProvider(inout c : Connection, inout videoProvider : Connection::VideoProvider) : void
        Log.d(this, "setVideoProvider Conference: %s Connection: %s VideoState: %s",
                this, c, videoProvider);
        for (Listener l : mListeners) {
            l.onVideoProviderChanged(this, videoProvider);
        }
!!!75282359.java!!!	fireOnConferenceableConnectionsChanged() : void
        for (Listener l : mListeners) {
            l.onConferenceableConnectionsChanged(this, getConferenceableConnections());
        }
!!!75282487.java!!!	getConferenceableConnections() : Connection
        return mUnmodifiableConferenceableConnections;
!!!75282615.java!!!	destroy() : void
        Log.d(this, "destroying conference : %s", this);
        // Tear down the children.
        for (Connection connection : mChildConnections) {
            Log.d(this, "removing connection %s", connection);
            removeConnection(connection);
        }

        // If not yet disconnected, set the conference call as disconnected first.
        if (mState != Connection.STATE_DISCONNECTED) {
            Log.d(this, "setting to disconnected");
            setDisconnected(new DisconnectCause(DisconnectCause.LOCAL));
        }

        // ...and notify.
        for (Listener l : mListeners) {
            l.onDestroyed(this);
        }
!!!75282743.java!!!	addListener(inout listener : Conference::Listener) : Conference
        mListeners.add(listener);
        return this;
!!!75282871.java!!!	removeListener(inout listener : Conference::Listener) : Conference
        mListeners.remove(listener);
        return this;
!!!75282999.java!!!	getPrimaryConnection() : Connection
        if (mUnmodifiableChildConnections == null || mUnmodifiableChildConnections.isEmpty()) {
            return null;
        }
        return mUnmodifiableChildConnections.get(0);
!!!75283127.java!!!	setConnectTimeMillis(in connectTimeMillis : long) : void
        setConnectionTime(connectTimeMillis);
!!!75283255.java!!!	setConnectionTime(in connectionTimeMillis : long) : void
        mConnectTimeMillis = connectionTimeMillis;
!!!75283383.java!!!	getConnectTimeMillis() : long
        return getConnectionTime();
!!!75283511.java!!!	getConnectionTime() : long
        return mConnectTimeMillis;
!!!75283639.java!!!	setCallAudioState(inout state : CallAudioState) : void
        Log.d(this, "setCallAudioState %s", state);
        mCallAudioState = state;
        onAudioStateChanged(getAudioState());
        onCallAudioStateChanged(state);
!!!75283767.java!!!	setState(in newState : int) : void
        if (newState != Connection.STATE_ACTIVE &&
                newState != Connection.STATE_HOLDING &&
                newState != Connection.STATE_DISCONNECTED) {
            Log.w(this, "Unsupported state transition for Conference call.",
                    Connection.stateToString(newState));
            return;
        }

        if (mState != newState) {
            int oldState = mState;
            mState = newState;
            for (Listener l : mListeners) {
                l.onStateChanged(this, oldState, newState);
            }
        }
!!!75283895.java!!!	clearConferenceableList() : void
        for (Connection c : mConferenceableConnections) {
            c.removeConnectionListener(mConnectionDeathListener);
        }
        mConferenceableConnections.clear();
!!!75284023.java!!!	toString() : String
        return String.format(Locale.US,
                "[State: %s,Capabilites: %s, VideoState: %s, VideoProvider: %s, ThisObject %s]",
                Connection.stateToString(mState),
                Call.Details.capabilitiesToString(mConnectionCapabilities),
                getVideoState(),
                getVideoProvider(),
                super.toString());
!!!75284151.java!!!	setStatusHints(inout statusHints : StatusHints) : void
        mStatusHints = statusHints;
        for (Listener l : mListeners) {
            l.onStatusHintsChanged(this, statusHints);
        }
!!!75284279.java!!!	getStatusHints() : StatusHints
        return mStatusHints;
!!!75284407.java!!!	setExtras(inout extras : Bundle) : void
        // Keeping putExtras and removeExtras in the same lock so that this operation happens as a
        // block instead of letting other threads put/remove while this method is running.
        synchronized (mExtrasLock) {
            // Add/replace any new or changed extras values.
            putExtras(extras);
            // If we have used "setExtras" in the past, compare the key set from the last invocation
            // to the current one and remove any keys that went away.
            if (mPreviousExtraKeys != null) {
                List<String> toRemove = new ArrayList<String>();
                for (String oldKey : mPreviousExtraKeys) {
                    if (extras == null || !extras.containsKey(oldKey)) {
                        toRemove.add(oldKey);
                    }
                }

                if (!toRemove.isEmpty()) {
                    removeExtras(toRemove);
                }
            }

            // Track the keys the last time set called setExtras.  This way, the next time setExtras
            // is called we can see if the caller has removed any extras values.
            if (mPreviousExtraKeys == null) {
                mPreviousExtraKeys = new ArraySet<String>();
            }
            mPreviousExtraKeys.clear();
            if (extras != null) {
                mPreviousExtraKeys.addAll(extras.keySet());
            }
        }
!!!75284535.java!!!	putExtras(inout extras : Bundle) : void
        if (extras == null) {
            return;
        }

        // Creating a Bundle clone so we don't have to synchronize on mExtrasLock while calling
        // onExtrasChanged.
        Bundle listenersBundle;
        synchronized (mExtrasLock) {
            if (mExtras == null) {
                mExtras = new Bundle();
            }
            mExtras.putAll(extras);
            listenersBundle = new Bundle(mExtras);
        }

        for (Listener l : mListeners) {
            l.onExtrasChanged(this, new Bundle(listenersBundle));
        }
!!!75284663.java!!!	putExtra(inout key : String, inout value : boolean) : void
        Bundle newExtras = new Bundle();
        newExtras.putBoolean(key, value);
        putExtras(newExtras);
!!!75284791.java!!!	putExtra(inout key : String, in value : int) : void
        Bundle newExtras = new Bundle();
        newExtras.putInt(key, value);
        putExtras(newExtras);
!!!75284919.java!!!	putExtra(inout key : String, inout value : String) : void
        Bundle newExtras = new Bundle();
        newExtras.putString(key, value);
        putExtras(newExtras);
!!!75285047.java!!!	removeExtras(inout keys : List<String>) : void
        if (keys == null || keys.isEmpty()) {
            return;
        }

        synchronized (mExtrasLock) {
            if (mExtras != null) {
                for (String key : keys) {
                    mExtras.remove(key);
                }
            }
        }

        List<String> unmodifiableKeys = Collections.unmodifiableList(keys);
        for (Listener l : mListeners) {
            l.onExtrasRemoved(this, unmodifiableKeys);
        }
!!!75285175.java!!!	getExtras() : Bundle
        return mExtras;
!!!75285431.java!!!	handleExtrasChanged(inout extras : Bundle) : void
        Bundle b = null;
        synchronized (mExtrasLock) {
            mExtras = extras;
            if (mExtras != null) {
                b = new Bundle(mExtras);
            }
        }
        onExtrasChanged(b);
