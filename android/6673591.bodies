class Connection
!!!75286583.java!!!	can(in capabilities : int, in capability : int) : boolean
        return (capabilities & capability) == capability;
!!!75286711.java!!!	can(in capability : int) : boolean
        return can(mConnectionCapabilities, capability);
!!!75286839.java!!!	removeCapability(in capability : int) : void
        mConnectionCapabilities &= ~capability;
!!!75286967.java!!!	addCapability(in capability : int) : void
        mConnectionCapabilities |= capability;
!!!75287095.java!!!	capabilitiesToString(in capabilities : int) : String
        StringBuilder builder = new StringBuilder();
        builder.append("[Capabilities:");
        if (can(capabilities, CAPABILITY_HOLD)) {
            builder.append(" CAPABILITY_HOLD");
        }
        if (can(capabilities, CAPABILITY_SUPPORT_HOLD)) {
            builder.append(" CAPABILITY_SUPPORT_HOLD");
        }
        if (can(capabilities, CAPABILITY_MERGE_CONFERENCE)) {
            builder.append(" CAPABILITY_MERGE_CONFERENCE");
        }
        if (can(capabilities, CAPABILITY_SWAP_CONFERENCE)) {
            builder.append(" CAPABILITY_SWAP_CONFERENCE");
        }
        if (can(capabilities, CAPABILITY_RESPOND_VIA_TEXT)) {
            builder.append(" CAPABILITY_RESPOND_VIA_TEXT");
        }
        if (can(capabilities, CAPABILITY_MUTE)) {
            builder.append(" CAPABILITY_MUTE");
        }
        if (can(capabilities, CAPABILITY_MANAGE_CONFERENCE)) {
            builder.append(" CAPABILITY_MANAGE_CONFERENCE");
        }
        if (can(capabilities, CAPABILITY_SUPPORTS_VT_LOCAL_RX)) {
            builder.append(" CAPABILITY_SUPPORTS_VT_LOCAL_RX");
        }
        if (can(capabilities, CAPABILITY_SUPPORTS_VT_LOCAL_TX)) {
            builder.append(" CAPABILITY_SUPPORTS_VT_LOCAL_TX");
        }
        if (can(capabilities, CAPABILITY_SUPPORTS_VT_LOCAL_BIDIRECTIONAL)) {
            builder.append(" CAPABILITY_SUPPORTS_VT_LOCAL_BIDIRECTIONAL");
        }
        if (can(capabilities, CAPABILITY_SUPPORTS_VT_REMOTE_RX)) {
            builder.append(" CAPABILITY_SUPPORTS_VT_REMOTE_RX");
        }
        if (can(capabilities, CAPABILITY_SUPPORTS_VT_REMOTE_TX)) {
            builder.append(" CAPABILITY_SUPPORTS_VT_REMOTE_TX");
        }
        if (can(capabilities, CAPABILITY_SUPPORTS_VT_REMOTE_BIDIRECTIONAL)) {
            builder.append(" CAPABILITY_SUPPORTS_VT_REMOTE_BIDIRECTIONAL");
        }
        if (can(capabilities, CAPABILITY_CANNOT_DOWNGRADE_VIDEO_TO_AUDIO)) {
            builder.append(" CAPABILITY_CANNOT_DOWNGRADE_VIDEO_TO_AUDIO");
        }
        if (can(capabilities, CAPABILITY_SPEED_UP_MT_AUDIO)) {
            builder.append(" CAPABILITY_SPEED_UP_MT_AUDIO");
        }
        if (can(capabilities, CAPABILITY_CAN_UPGRADE_TO_VIDEO)) {
            builder.append(" CAPABILITY_CAN_UPGRADE_TO_VIDEO");
        }
        if (can(capabilities, CAPABILITY_CAN_PAUSE_VIDEO)) {
            builder.append(" CAPABILITY_CAN_PAUSE_VIDEO");
        }
        if (can(capabilities, CAPABILITY_CONFERENCE_HAS_NO_CHILDREN)) {
            builder.append(" CAPABILITY_SINGLE_PARTY_CONFERENCE");
        }
        if (can(capabilities, CAPABILITY_CAN_SEND_RESPONSE_VIA_CONNECTION)) {
            builder.append(" CAPABILITY_CAN_SEND_RESPONSE_VIA_CONNECTION");
        }
        if (can(capabilities, CAPABILITY_CAN_PULL_CALL)) {
            builder.append(" CAPABILITY_CAN_PULL_CALL");
        }

        builder.append("]");
        return builder.toString();
!!!75287223.java!!!	propertiesToString(in properties : int) : String
        StringBuilder builder = new StringBuilder();
        builder.append("[Properties:");

        if (can(properties, PROPERTY_SHOW_CALLBACK_NUMBER)) {
            builder.append(" PROPERTY_SHOW_CALLBACK_NUMBER");
        }

        if (can(properties, PROPERTY_HIGH_DEF_AUDIO)) {
            builder.append(" PROPERTY_HIGH_DEF_AUDIO");
        }

        if (can(properties, PROPERTY_WIFI)) {
            builder.append(" PROPERTY_WIFI");
        }

        if (can(properties, PROPERTY_GENERIC_CONFERENCE)) {
            builder.append(" PROPERTY_GENERIC_CONFERENCE");
        }

        if (can(properties, PROPERTY_IS_EXTERNAL_CALL)) {
            builder.append(" PROPERTY_IS_EXTERNAL_CALL");
        }

        builder.append("]");
        return builder.toString();
!!!75294903.java!!!	getTelecomCallId() : String
        return mTelecomCallId;
!!!75295031.java!!!	getAddress() : Uri
        return mAddress;
!!!75295159.java!!!	getAddressPresentation() : int
        return mAddressPresentation;
!!!75295287.java!!!	getCallerDisplayName() : String
        return mCallerDisplayName;
!!!75295415.java!!!	getCallerDisplayNamePresentation() : int
        return mCallerDisplayNamePresentation;
!!!75295543.java!!!	getState() : int
        return mState;
!!!75295671.java!!!	getVideoState() : int
        return mVideoState;
!!!75295799.java!!!	getAudioState() : AudioState
        if (mCallAudioState == null) {
          return null;
        }
        return new AudioState(mCallAudioState);
!!!75295927.java!!!	getCallAudioState() : CallAudioState
        return mCallAudioState;
!!!75296055.java!!!	getConference() : Conference
        return mConference;
!!!75296183.java!!!	isRingbackRequested() : boolean
        return mRingbackRequested;
!!!75296311.java!!!	getAudioModeIsVoip() : boolean
        return mAudioModeIsVoip;
!!!75296439.java!!!	getConnectTimeMillis() : long
        return mConnectTimeMillis;
!!!75296567.java!!!	getStatusHints() : StatusHints
        return mStatusHints;
!!!75296695.java!!!	getExtras() : Bundle
        Bundle extras = null;
        synchronized (mExtrasLock) {
            if (mExtras != null) {
                extras = new Bundle(mExtras);
            }
        }
        return extras;
!!!75296823.java!!!	addConnectionListener(inout l : Connection::Listener) : Connection
        mListeners.add(l);
        return this;
!!!75296951.java!!!	removeConnectionListener(inout l : Connection::Listener) : Connection
        if (l != null) {
            mListeners.remove(l);
        }
        return this;
!!!75297079.java!!!	getDisconnectCause() : DisconnectCause
        return mDisconnectCause;
!!!75297207.java!!!	setTelecomCallId(inout callId : String) : void
        mTelecomCallId = callId;
!!!75297335.java!!!	setCallAudioState(inout state : CallAudioState) : void
        checkImmutable();
        Log.d(this, "setAudioState %s", state);
        mCallAudioState = state;
        onAudioStateChanged(getAudioState());
        onCallAudioStateChanged(state);
!!!75297463.java!!!	stateToString(in state : int) : String
        switch (state) {
            case STATE_INITIALIZING:
                return "INITIALIZING";
            case STATE_NEW:
                return "NEW";
            case STATE_RINGING:
                return "RINGING";
            case STATE_DIALING:
                return "DIALING";
            case STATE_ACTIVE:
                return "ACTIVE";
            case STATE_HOLDING:
                return "HOLDING";
            case STATE_DISCONNECTED:
                return "DISCONNECTED";
            default:
                Log.wtf(Connection.class, "Unknown state %d", state);
                return "UNKNOWN";
        }
!!!75297591.java!!!	getConnectionCapabilities() : int
        return mConnectionCapabilities;
!!!75297719.java!!!	getConnectionProperties() : int
        return mConnectionProperties;
!!!75297847.java!!!	setAddress(inout address : Uri, in presentation : int) : void
        checkImmutable();
        Log.d(this, "setAddress %s", address);
        mAddress = address;
        mAddressPresentation = presentation;
        for (Listener l : mListeners) {
            l.onAddressChanged(this, address, presentation);
        }
!!!75297975.java!!!	setCallerDisplayName(inout callerDisplayName : String, in presentation : int) : void
        checkImmutable();
        Log.d(this, "setCallerDisplayName %s", callerDisplayName);
        mCallerDisplayName = callerDisplayName;
        mCallerDisplayNamePresentation = presentation;
        for (Listener l : mListeners) {
            l.onCallerDisplayNameChanged(this, callerDisplayName, presentation);
        }
!!!75298103.java!!!	setVideoState(in videoState : int) : void
        checkImmutable();
        Log.d(this, "setVideoState %d", videoState);
        mVideoState = videoState;
        for (Listener l : mListeners) {
            l.onVideoStateChanged(this, mVideoState);
        }
!!!75298231.java!!!	setActive() : void
        checkImmutable();
        setRingbackRequested(false);
        setState(STATE_ACTIVE);
!!!75298359.java!!!	setRinging() : void
        checkImmutable();
        setState(STATE_RINGING);
!!!75298487.java!!!	setInitializing() : void
        checkImmutable();
        setState(STATE_INITIALIZING);
!!!75298615.java!!!	setInitialized() : void
        checkImmutable();
        setState(STATE_NEW);
!!!75298743.java!!!	setDialing() : void
        checkImmutable();
        setState(STATE_DIALING);
!!!75298871.java!!!	setOnHold() : void
        checkImmutable();
        setState(STATE_HOLDING);
!!!75298999.java!!!	setVideoProvider(inout videoProvider : Connection::VideoProvider) : void
        checkImmutable();
        mVideoProvider = videoProvider;
        for (Listener l : mListeners) {
            l.onVideoProviderChanged(this, videoProvider);
        }
!!!75299127.java!!!	getVideoProvider() : Connection::VideoProvider
        return mVideoProvider;
!!!75299255.java!!!	setDisconnected(inout disconnectCause : DisconnectCause) : void
        checkImmutable();
        mDisconnectCause = disconnectCause;
        setState(STATE_DISCONNECTED);
        Log.d(this, "Disconnected with cause %s", disconnectCause);
        for (Listener l : mListeners) {
            l.onDisconnected(this, disconnectCause);
        }
!!!75299383.java!!!	setPostDialWait(inout remaining : String) : void
        checkImmutable();
        for (Listener l : mListeners) {
            l.onPostDialWait(this, remaining);
        }
!!!75299511.java!!!	setNextPostDialChar(in nextChar : char) : void
        checkImmutable();
        for (Listener l : mListeners) {
            l.onPostDialChar(this, nextChar);
        }
!!!75299639.java!!!	setRingbackRequested(inout ringback : boolean) : void
        checkImmutable();
        if (mRingbackRequested != ringback) {
            mRingbackRequested = ringback;
            for (Listener l : mListeners) {
                l.onRingbackRequested(this, ringback);
            }
        }
!!!75299767.java!!!	setConnectionCapabilities(in connectionCapabilities : int) : void
        checkImmutable();
        if (mConnectionCapabilities != connectionCapabilities) {
            mConnectionCapabilities = connectionCapabilities;
            for (Listener l : mListeners) {
                l.onConnectionCapabilitiesChanged(this, mConnectionCapabilities);
            }
        }
!!!75299895.java!!!	setConnectionProperties(in connectionProperties : int) : void
        checkImmutable();
        if (mConnectionProperties != connectionProperties) {
            mConnectionProperties = connectionProperties;
            for (Listener l : mListeners) {
                l.onConnectionPropertiesChanged(this, mConnectionProperties);
            }
        }
!!!75300023.java!!!	destroy() : void
        for (Listener l : mListeners) {
            l.onDestroyed(this);
        }
!!!75300151.java!!!	setAudioModeIsVoip(inout isVoip : boolean) : void
        checkImmutable();
        mAudioModeIsVoip = isVoip;
        for (Listener l : mListeners) {
            l.onAudioModeIsVoipChanged(this, isVoip);
        }
!!!75300279.java!!!	setConnectTimeMillis(in connectTimeMillis : long) : void
        mConnectTimeMillis = connectTimeMillis;
!!!75300407.java!!!	setStatusHints(inout statusHints : StatusHints) : void
        checkImmutable();
        mStatusHints = statusHints;
        for (Listener l : mListeners) {
            l.onStatusHintsChanged(this, statusHints);
        }
!!!75300535.java!!!	setConferenceableConnections(inout conferenceableConnections : List<Connection>) : void
        checkImmutable();
        clearConferenceableList();
        for (Connection c : conferenceableConnections) {
            // If statement checks for duplicates in input. It makes it N^2 but we're dealing with a
            // small amount of items here.
            if (!mConferenceables.contains(c)) {
                c.addConnectionListener(mConnectionDeathListener);
                mConferenceables.add(c);
            }
        }
        fireOnConferenceableConnectionsChanged();
!!!75300663.java!!!	setConferenceables(inout conferenceables : List<Conferenceable>) : void
        clearConferenceableList();
        for (Conferenceable c : conferenceables) {
            // If statement checks for duplicates in input. It makes it N^2 but we're dealing with a
            // small amount of items here.
            if (!mConferenceables.contains(c)) {
                if (c instanceof Connection) {
                    Connection connection = (Connection) c;
                    connection.addConnectionListener(mConnectionDeathListener);
                } else if (c instanceof Conference) {
                    Conference conference = (Conference) c;
                    conference.addListener(mConferenceDeathListener);
                }
                mConferenceables.add(c);
            }
        }
        fireOnConferenceableConnectionsChanged();
!!!75300791.java!!!	getConferenceables() : Conferenceable
        return mUnmodifiableConferenceables;
!!!75300919.java!!!	setConnectionService(inout connectionService : ConnectionService) : void
        checkImmutable();
        if (mConnectionService != null) {
            Log.e(this, new Exception(), "Trying to set ConnectionService on a connection " +
                    "which is already associated with another ConnectionService.");
        } else {
            mConnectionService = connectionService;
        }
!!!75301047.java!!!	unsetConnectionService(inout connectionService : ConnectionService) : void
        if (mConnectionService != connectionService) {
            Log.e(this, new Exception(), "Trying to remove ConnectionService from a Connection " +
                    "that does not belong to the ConnectionService.");
        } else {
            mConnectionService = null;
        }
!!!75301175.java!!!	getConnectionService() : ConnectionService
        return mConnectionService;
!!!75301303.java!!!	setConference(inout conference : Conference) : boolean
        checkImmutable();
        // We check to see if it is already part of another conference.
        if (mConference == null) {
            mConference = conference;
            if (mConnectionService != null && mConnectionService.containsConference(conference)) {
                fireConferenceChanged();
            }
            return true;
        }
        return false;
!!!75301431.java!!!	resetConference() : void
        if (mConference != null) {
            Log.d(this, "Conference reset");
            mConference = null;
            fireConferenceChanged();
        }
!!!75301559.java!!!	setExtras(inout extras : Bundle) : void
        checkImmutable();

        // Add/replace any new or changed extras values.
        putExtras(extras);

        // If we have used "setExtras" in the past, compare the key set from the last invocation to
        // the current one and remove any keys that went away.
        if (mPreviousExtraKeys != null) {
            List<String> toRemove = new ArrayList<String>();
            for (String oldKey : mPreviousExtraKeys) {
                if (extras == null || !extras.containsKey(oldKey)) {
                    toRemove.add(oldKey);
                }
            }
            if (!toRemove.isEmpty()) {
                removeExtras(toRemove);
            }
        }

        // Track the keys the last time set called setExtras.  This way, the next time setExtras is
        // called we can see if the caller has removed any extras values.
        if (mPreviousExtraKeys == null) {
            mPreviousExtraKeys = new ArraySet<String>();
        }
        mPreviousExtraKeys.clear();
        if (extras != null) {
            mPreviousExtraKeys.addAll(extras.keySet());
        }
!!!75301687.java!!!	putExtras(inout extras : Bundle) : void
        checkImmutable();
        if (extras == null) {
            return;
        }
        // Creating a duplicate bundle so we don't have to synchronize on mExtrasLock while calling
        // the listeners.
        Bundle listenerExtras;
        synchronized (mExtrasLock) {
            if (mExtras == null) {
                mExtras = new Bundle();
            }
            mExtras.putAll(extras);
            listenerExtras = new Bundle(mExtras);
        }
        for (Listener l : mListeners) {
            // Create a new clone of the extras for each listener so that they don't clobber
            // each other
            l.onExtrasChanged(this, new Bundle(listenerExtras));
        }
!!!75301815.java!!!	putExtra(inout key : String, inout value : boolean) : void
        Bundle newExtras = new Bundle();
        newExtras.putBoolean(key, value);
        putExtras(newExtras);
!!!75301943.java!!!	putExtra(inout key : String, in value : int) : void
        Bundle newExtras = new Bundle();
        newExtras.putInt(key, value);
        putExtras(newExtras);
!!!75302071.java!!!	putExtra(inout key : String, inout value : String) : void
        Bundle newExtras = new Bundle();
        newExtras.putString(key, value);
        putExtras(newExtras);
!!!75302199.java!!!	removeExtras(inout keys : List<String>) : void
        synchronized (mExtrasLock) {
            if (mExtras != null) {
                for (String key : keys) {
                    mExtras.remove(key);
                }
            }
        }
        List<String> unmodifiableKeys = Collections.unmodifiableList(keys);
        for (Listener l : mListeners) {
            l.onExtrasRemoved(this, unmodifiableKeys);
        }
!!!75303863.java!!!	onAnswer() : void
        onAnswer(VideoProfile.STATE_AUDIO_ONLY);
!!!75304887.java!!!	toLogSafePhoneNumber(inout number : String) : String
        // For unknown number, log empty string.
        if (number == null) {
            return "";
        }

        if (PII_DEBUG) {
            // When PII_DEBUG is true we emit PII.
            return number;
        }

        // Do exactly same thing as Uri#toSafeString() does, which will enable us to compare
        // sanitized phone numbers.
        StringBuilder builder = new StringBuilder();
        for (int i = 0; i < number.length(); i++) {
            char c = number.charAt(i);
            if (c == '-' || c == '@' || c == '.') {
                builder.append(c);
            } else {
                builder.append('x');
            }
        }
        return builder.toString();
!!!75305015.java!!!	setState(in state : int) : void
        checkImmutable();
        if (mState == STATE_DISCONNECTED && mState != state) {
            Log.d(this, "Connection already DISCONNECTED; cannot transition out of this state.");
            return;
        }
        if (mState != state) {
            Log.d(this, "setState: %s", stateToString(state));
            mState = state;
            onStateChanged(state);
            for (Listener l : mListeners) {
                l.onStateChanged(this, state);
            }
        }
!!!75305399.java!!!	createFailedConnection(inout disconnectCause : DisconnectCause) : Connection
        return new FailureSignalingConnection(disconnectCause);
!!!75305655.java!!!	createCanceledConnection() : Connection
        return new FailureSignalingConnection(new DisconnectCause(DisconnectCause.CANCELED));
!!!75305783.java!!!	fireOnConferenceableConnectionsChanged() : void
        for (Listener l : mListeners) {
            l.onConferenceablesChanged(this, getConferenceables());
        }
!!!75305911.java!!!	fireConferenceChanged() : void
        for (Listener l : mListeners) {
            l.onConferenceChanged(this, mConference);
        }
!!!75306039.java!!!	clearConferenceableList() : void
        for (Conferenceable c : mConferenceables) {
            if (c instanceof Connection) {
                Connection connection = (Connection) c;
                connection.removeConnectionListener(mConnectionDeathListener);
            } else if (c instanceof Conference) {
                Conference conference = (Conference) c;
                conference.removeListener(mConferenceDeathListener);
            }
        }
        mConferenceables.clear();
!!!75306167.java!!!	handleExtrasChanged(inout extras : Bundle) : void
        Bundle b = null;
        synchronized (mExtrasLock) {
            mExtras = extras;
            if (mExtras != null) {
                b = new Bundle(mExtras);
            }
        }
        onExtrasChanged(b);
!!!75306295.java!!!	notifyConferenceMergeFailed() : void
        for (Listener l : mListeners) {
            l.onConferenceMergeFailed(this);
        }
!!!75306423.java!!!	updateConferenceParticipants(inout conferenceParticipants : List<ConferenceParticipant>) : void
        for (Listener l : mListeners) {
            l.onConferenceParticipantsChanged(this, conferenceParticipants);
        }
!!!75306551.java!!!	notifyConferenceStarted() : void
        for (Listener l : mListeners) {
            l.onConferenceStarted();
        }
!!!75306679.java!!!	sendConnectionEvent(inout event : String, inout extras : Bundle) : void
        for (Listener l : mListeners) {
            l.onConnectionEvent(this, event, extras);
        }
