class RenamingDelegatingContext
!!!75594039.java!!!	providerWithRenamedContext(inout contentProvider : Class, inout c : Context, inout filePrefix : String) : T
        return providerWithRenamedContext(contentProvider, c, filePrefix, false);
!!!75594167.java!!!	providerWithRenamedContext(inout contentProvider : Class, inout c : Context, inout filePrefix : String, inout allowAccessToExistingFilesAndDbs : boolean) : T
        Class<T> mProviderClass = contentProvider;
        T mProvider = mProviderClass.newInstance();
        RenamingDelegatingContext mContext = new RenamingDelegatingContext(c, filePrefix);
        if (allowAccessToExistingFilesAndDbs) {
            mContext.makeExistingFilesAndDbsAccessible();
        }
        mProvider.attachInfoForTesting(mContext, null);
        return mProvider;
!!!75594295.java!!!	makeExistingFilesAndDbsAccessible() : void
        String[] databaseList = mFileContext.databaseList();
        for (String diskName : databaseList) {
            if (shouldDiskNameBeVisible(diskName)) {
                mDatabaseNames.add(publicNameFromDiskName(diskName));
            }
        }
        String[] fileList = mFileContext.fileList();
        for (String diskName : fileList) {
            if (shouldDiskNameBeVisible(diskName)) {
                mFileNames.add(publicNameFromDiskName(diskName));
            }
        }
!!!75594423.java!!!	shouldDiskNameBeVisible(inout diskName : String) : boolean
        return diskName.startsWith(mFilePrefix);
!!!75594551.java!!!	publicNameFromDiskName(inout diskName : String) : String
        if (!shouldDiskNameBeVisible(diskName)) {
            throw new IllegalArgumentException("disk file should not be visible: " + diskName);
        }
        return diskName.substring(mFilePrefix.length(), diskName.length());
!!!75594679.java!!!	RenamingDelegatingContext(inout context : Context, inout filePrefix : String)
        super(context);
        mFileContext = context;
        mFilePrefix = filePrefix;
!!!75594807.java!!!	RenamingDelegatingContext(inout context : Context, inout fileContext : Context, inout filePrefix : String)
        super(context);
        mFileContext = fileContext;
        mFilePrefix = filePrefix;
!!!75594935.java!!!	getDatabasePrefix() : String
        return mFilePrefix;
!!!75595063.java!!!	renamedFileName(inout name : String) : String
        return mFilePrefix + name;
!!!75595191.java!!!	openOrCreateDatabase(inout name : String, in mode : int, inout factory : SQLiteDatabase::CursorFactory) : SQLiteDatabase
        final String internalName = renamedFileName(name);
        if (!mDatabaseNames.contains(name)) {
            mDatabaseNames.add(name);
            mFileContext.deleteDatabase(internalName);
        }
        return mFileContext.openOrCreateDatabase(internalName, mode, factory);
!!!75595319.java!!!	openOrCreateDatabase(inout name : String, in mode : int, inout factory : SQLiteDatabase::CursorFactory, inout errorHandler : DatabaseErrorHandler) : SQLiteDatabase
        final String internalName = renamedFileName(name);
        if (!mDatabaseNames.contains(name)) {
            mDatabaseNames.add(name);
            mFileContext.deleteDatabase(internalName);
        }
        return mFileContext.openOrCreateDatabase(internalName, mode, factory, errorHandler);
!!!75595447.java!!!	deleteDatabase(inout name : String) : boolean
        if (mDatabaseNames.contains(name)) {
            mDatabaseNames.remove(name);
            return mFileContext.deleteDatabase(renamedFileName(name));
        } else {
            return false;
        }
!!!75595575.java!!!	getDatabasePath(inout name : String) : File
        return mFileContext.getDatabasePath(renamedFileName(name));
!!!75595703.java!!!	databaseList() : String
        return mDatabaseNames.toArray(new String[]{});
!!!75595831.java!!!	openFileInput(inout name : String) : FileInputStream
        final String internalName = renamedFileName(name);
        if (mFileNames.contains(name)) {
            return mFileContext.openFileInput(internalName);
        } else {
            throw new FileNotFoundException(internalName);
        }
!!!75595959.java!!!	openFileOutput(inout name : String, in mode : int) : FileOutputStream
        mFileNames.add(name);
        return mFileContext.openFileOutput(renamedFileName(name), mode);
!!!75596087.java!!!	getFileStreamPath(inout name : String) : File
        return mFileContext.getFileStreamPath(renamedFileName(name));
!!!75596215.java!!!	deleteFile(inout name : String) : boolean
        if (mFileNames.contains(name)) {
            mFileNames.remove(name);
            return mFileContext.deleteFile(renamedFileName(name));
        } else {
            return false;
        }
!!!75596343.java!!!	fileList() : String
        return mFileNames.toArray(new String[]{});
!!!75596471.java!!!	getCacheDir() : File
        synchronized (mSync) {
            if (mCacheDir == null) {
                mCacheDir = new File(mFileContext.getCacheDir(), renamedFileName("cache"));
            }
            if (!mCacheDir.exists()) {
                if(!mCacheDir.mkdirs()) {
                    Log.w("RenamingDelegatingContext", "Unable to create cache directory");
                    return null;
                }
                FileUtils.setPermissions(
                        mCacheDir.getPath(),
                        FileUtils.S_IRWXU|FileUtils.S_IRWXG|FileUtils.S_IXOTH,
                        -1, -1);
            }
        }
        return mCacheDir;
