class TestGrouping
!!!75624247.java!!!	TestGrouping(inout comparator : Comparator<Class<? extends TestCase>>)
        testCaseClasses = new TreeSet<Class<? extends TestCase>>(comparator);
!!!75624375.java!!!	getTests() : TestMethod
        List<TestMethod> testMethods = new ArrayList<TestMethod>();
        for (Class<? extends TestCase> testCase : testCaseClasses) {
            for (Method testMethod : getTestMethods(testCase)) {
                testMethods.add(new TestMethod(testMethod, testCase));
            }
        }
        return testMethods;
!!!75624503.java!!!	getTestMethods(inout testCaseClass : Class) : List<Method>
        List<Method> methods = Arrays.asList(testCaseClass.getMethods());
        return select(methods, new TestMethodPredicate());
!!!75624631.java!!!	getTestCaseClasses() : Class
        return testCaseClasses;
!!!75624759.java!!!	equals(inout o : Object) : boolean
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TestGrouping other = (TestGrouping) o;
        if (!this.testCaseClasses.equals(other.testCaseClasses)) {
            return false;
        }
        return this.testCaseClasses.comparator().equals(other.testCaseClasses.comparator());
!!!75624887.java!!!	hashCode() : int
        return testCaseClasses.hashCode();
!!!75625015.java!!!	addPackagesRecursive(inout  : String...packageNames) : TestGrouping
        for (String packageName : packageNames) {
            List<Class<? extends TestCase>> addedClasses = testCaseClassesInPackage(packageName);
            if (addedClasses.isEmpty()) {
                Log.w(LOG_TAG, "Invalid Package: '" + packageName
                        + "' could not be found or has no tests");
            }
            testCaseClasses.addAll(addedClasses);
            if (firstIncludedPackage == null) {
                firstIncludedPackage = packageName;
            }
        }
        return this;
!!!75625143.java!!!	removePackagesRecursive(inout  : String...packageNames) : TestGrouping
        for (String packageName : packageNames) {
            testCaseClasses.removeAll(testCaseClassesInPackage(packageName));
        }
        return this;
!!!75625271.java!!!	getFirstIncludedPackage() : String
        return firstIncludedPackage;
!!!75625399.java!!!	testCaseClassesInPackage(inout packageName : String) : Class
        ClassPathPackageInfoSource source = PackageInfoSources.forClassPath(classLoader);
        ClassPathPackageInfo packageInfo = source.getPackageInfo(packageName);

        return selectTestClasses(packageInfo.getTopLevelClassesRecursive());
!!!75625527.java!!!	selectTestClasses(inout allClasses : Set<Class<?>>) : Class
        List<Class<? extends TestCase>> testClasses = new ArrayList<Class<? extends TestCase>>();
        for (Class<?> testClass : select(allClasses,
                new TestCasePredicate())) {
            testClasses.add((Class<? extends TestCase>) testClass);
        }
        return testClasses;
!!!75625655.java!!!	select(inout items : Collection<T>, inout predicate : Predicate) : List<T>
        ArrayList<T> selectedItems = new ArrayList<T>();
        for (T item : items) {
            if (predicate.apply(item)) {
                selectedItems.add(item);
            }
        }
        return selectedItems;
!!!75625783.java!!!	setClassLoader(inout classLoader : ClassLoader) : void
        this.classLoader = classLoader;
