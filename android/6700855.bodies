class TestSuiteBuilderTest
!!!75645111.java!!!	setUp() : void
        super.setUp();
        testSuiteBuilder = new TestSuiteBuilder(getClass());
!!!75645239.java!!!	testShouldRunSimpleTests() : void
        testSuiteBuilder.includePackages(packageFor(SimpleTest.class));

        SuiteExecutionRecorder recorder = runSuite(testSuiteBuilder);

        assertTrue(recorder.passed("SimpleTest.testSimpleOne"));
        assertTrue(recorder.passed("SimpleTest.testSimpleTwo"));
        assertTrue(recorder.passed("AnotherSimpleTest.testAnotherOne"));
!!!75645367.java!!!	testShouldOnlyIncludeTestsThatSatisfyAllPredicates() : void
        testSuiteBuilder.includePackages(packageFor(SimpleTest.class))
                .addRequirements(testsWhoseNameContains("test"))
                .addRequirements(testsWhoseNameContains("Simple"))
                .addRequirements(testsWhoseNameContains("Two"));

        SuiteExecutionRecorder recorder = runSuite(testSuiteBuilder);

        assertTrue(recorder.passed("SimpleTest.testSimpleTwo"));
!!!75645495.java!!!	testShouldAddFailingTestsToSuite() : void
        testSuiteBuilder.includePackages(packageFor(FailingTest.class));

        SuiteExecutionRecorder recorder = runSuite(testSuiteBuilder);

        assertTrue(recorder.failed("FailingTest.testFailOne"));
        assertTrue(recorder.failed("FailingTest.testFailTwo"));
!!!75645623.java!!!	testShouldAddTestsWithErrorsToSuite() : void
        testSuiteBuilder.includePackages(packageFor(ErrorTest.class));

        SuiteExecutionRecorder recorder = runSuite(testSuiteBuilder);

        assertTrue(recorder.errored("ErrorTest.testErrorOne"));
        assertTrue(recorder.errored("ErrorTest.testErrorTwo"));
!!!75645751.java!!!	testShouldRunTestsInheritedFromSuperclass() : void
        testSuiteBuilder.includePackages(packageFor(SubclassTest.class));

        SuiteExecutionRecorder recorder = runSuite(testSuiteBuilder);

        assertEquals(2, getTestCaseNames(testSuiteBuilder.build()).size());

        assertTrue(recorder.passed("SubclassTest.testSubclass"));
        assertTrue(recorder.passed("SubclassTest.testSuperclass"));
        assertFalse(recorder.saw("SuperclassTest.testSuperclass"));
!!!75645879.java!!!	testShouldIncludeTestsInSubPackagesRecursively() : void
        testSuiteBuilder.includePackages(packageFor(Level1Test.class));

        SuiteExecutionRecorder recorder = runSuite(testSuiteBuilder);

        assertTrue(recorder.passed("Level1Test.testLevel1"));
        assertTrue(recorder.passed("Level2Test.testLevel2"));
!!!75646007.java!!!	testExcludePackage() : void
        testSuiteBuilder.includePackages(packageFor(SimpleTest.class),
                packageFor(Level1Test.class)).excludePackages(packageFor(Level2Test.class));

        TestSuite testSuite = testSuiteBuilder.build();
        assertContentsInOrder(getTestCaseNames(testSuite),
                "testLevel1", "testAnotherOne", "testSimpleOne", "testSimpleTwo");
!!!75646135.java!!!	testShouldExcludeSuppressedTests() : void
        testSuiteBuilder.includePackages(packageFor(SuppressedTest.class));
        testSuiteBuilder.build();

        SuiteExecutionRecorder recorder = runSuite(testSuiteBuilder);

        assertEquals(1, recorder.testsSeen.size());
        assertTrue(recorder.passed("PartiallySuppressedTest.testUnSuppressedMethod"));
!!!75646263.java!!!	testIncludeAllPackagesUnderHere() : void

        TestSuite testSuite = new OuterTest().buildTestsUnderHereRecursively();
        assertContentsInOrder(getTestCaseNames(testSuite),
                "testOuter", "testErrorOne", "testErrorTwo", "testFailOne", "testFailTwo",
                "testInstrumentation", "testLevel1", "testLevel2", "testAnotherOne",
                "testSimpleOne", "testSimpleTwo", "testNonSmoke", "testSmoke", "testSubclass",
                "testSuperclass", "testUnSuppressedMethod");
!!!75646391.java!!!	assertContentsInOrder(inout actual : List<String>, inout  : String...source) : void
        String[] clonedSource = source.clone();
        assertEquals("Unexpected number of items.", clonedSource.length, actual.size());
        for (int i = 0; i < actual.size(); i++) {
            String actualItem = actual.get(i);
            String sourceItem = clonedSource[i];
            assertEquals("Unexpected item. Index: " + i, sourceItem, actualItem);
        }
!!!75646519.java!!!	packageFor(inout clazz : Class) : String
        String className = clazz.getName();
        return className.substring(0, className.lastIndexOf('.'));
!!!75646647.java!!!	testsWhoseNameContains(in string : String) : Predicate
        return new Predicate<TestMethod>() {
            public boolean apply(TestMethod testMethod) {
                return testMethod.getName().contains(string);
            }
        };
!!!75646775.java!!!	runSuite(inout builder : TestSuiteBuilder) : TestSuiteBuilderTest::SuiteExecutionRecorder
        TestSuite suite = builder.build();
        SuiteExecutionRecorder recorder = new SuiteExecutionRecorder();
        TestResult result = new TestResult();
        result.addListener(recorder);
        suite.run(result);
        return recorder;
