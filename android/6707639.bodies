class VirtualDisplayThread
!!!75666999.java!!!	VirtualDisplayThread(in width : int, in height : int, in densityDpi : int)
            mWidth = width;
            mHeight = height;
            mDensityDpi = densityDpi;
!!!75667127.java!!!	run() : void
            MediaFormat format = MediaFormat.createVideoFormat("video/avc", mWidth, mHeight);
            format.setInteger(MediaFormat.KEY_COLOR_FORMAT,
                    MediaCodecInfo.CodecCapabilities.COLOR_FormatSurface);
            format.setInteger(MediaFormat.KEY_BIT_RATE, BIT_RATE);
            format.setInteger(MediaFormat.KEY_FRAME_RATE, FRAME_RATE);
            format.setInteger(MediaFormat.KEY_I_FRAME_INTERVAL, I_FRAME_INTERVAL);
            MediaCodec codec;
            try {
                codec = MediaCodec.createEncoderByType("video/avc");
            } catch (IOException e) {
                throw new RuntimeException(
                        "failed to create video/avc encoder", e);
            }
            codec.configure(format, null, null, MediaCodec.CONFIGURE_FLAG_ENCODE);
            Surface surface = codec.createInputSurface();
            codec.start();

            VirtualDisplay virtualDisplay = mDisplayManager.createVirtualDisplay(
                    DISPLAY_NAME, mWidth, mHeight, mDensityDpi, surface, 0);
            if (virtualDisplay != null) {
                mHandler.obtainMessage(MSG_DISPATCH_DISPLAY_ADDED,
                        virtualDisplay.getDisplay()).sendToTarget();

                stream(codec);

                mHandler.obtainMessage(MSG_DISPATCH_DISPLAY_REMOVED,
                        virtualDisplay.getDisplay()).sendToTarget();
                virtualDisplay.release();
            }

            codec.signalEndOfInputStream();
            codec.stop();
!!!75667255.java!!!	quit() : void
            mQuitting = true;
!!!75667383.java!!!	stream(inout codec : MediaCodec) : void
            BufferInfo info = new BufferInfo();
            ByteBuffer[] buffers = null;
            while (!mQuitting) {
                int index = codec.dequeueOutputBuffer(info, TIMEOUT_USEC);
                if (index >= 0) {
                    if (buffers == null) {
                        buffers = codec.getOutputBuffers();
                    }

                    ByteBuffer buffer = buffers[index];
                    buffer.limit(info.offset + info.size);
                    buffer.position(info.offset);

                    getTransport().sendMessage(Protocol.DisplaySinkService.ID,
                            Protocol.DisplaySinkService.MSG_CONTENT, buffer);
                    codec.releaseOutputBuffer(index, false);
                } else if (index == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {
                    buffers = null;
                } else if (index == MediaCodec.INFO_TRY_AGAIN_LATER) {
                    getLogger().log("Codec dequeue buffer timed out.");
                }
            }
