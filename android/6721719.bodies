class ImageGoodnessFilterTest
!!!75706295.java!!!	createFilter(inout mffContext : MffContext) : Filter
        return new ImageGoodnessFilter(mffContext, "goodnessFilter");
!!!75706423.java!!!	testAwfulPicture() : void
        FrameValue sharpnessFrame = createFrame(FrameType.single(), new int[] { 1 }).
                asFrameValue();
        sharpnessFrame.setValue(10f);
        FrameValue oEFrame = createFrame(FrameType.single(), new int[] { 1 }).asFrameValue();
        oEFrame.setValue(0.39f);
        FrameValue uEFrame = createFrame(FrameType.single(), new int[] { 1 }).asFrameValue();
        uEFrame.setValue(0.25f);
        FrameValue colorFrame = createFrame(FrameType.single(), new int[] { 1 }).asFrameValue();
        colorFrame.setValue(2.1f);
        FrameValue contrastFrame = createFrame(FrameType.single(), new int[] { 1 }).asFrameValue();
        contrastFrame.setValue(0.18f);
        FrameValue motionFrame = createFrame(FrameType.array(), new int[] { 1 }).asFrameValue();
        float[] motionFloatArray = { 9.0f, 3.0f, 2.0f };
        motionFrame.setValue(motionFloatArray);

        injectInputFrame("sharpness", sharpnessFrame);
        injectInputFrame("overExposure", oEFrame);
        injectInputFrame("underExposure", uEFrame);
        injectInputFrame("colorfulness", colorFrame);
        injectInputFrame("contrastRating", contrastFrame);
        injectInputFrame("motionValues", motionFrame);

        process();
        assertEquals("Awful Picture", (String) getOutputFrame("goodOrBadPic").asFrameValue().
                getValue());
!!!75706551.java!!!	testBadPicture() : void
        FrameValue sharpnessFrame = createFrame(FrameType.single(), new int[] { 1 }).
                asFrameValue();
        sharpnessFrame.setValue(10f);
        FrameValue oEFrame = createFrame(FrameType.single(), new int[] { 1 }).asFrameValue();
        oEFrame.setValue(0.39f);
        FrameValue uEFrame = createFrame(FrameType.single(), new int[] { 1 }).asFrameValue();
        uEFrame.setValue(0.25f);
        FrameValue colorFrame = createFrame(FrameType.single(), new int[] { 1 }).asFrameValue();
        colorFrame.setValue(2.1f);
        FrameValue contrastFrame = createFrame(FrameType.single(), new int[] { 1 }).asFrameValue();
        contrastFrame.setValue(0.18f);
        FrameValue motionFrame = createFrame(FrameType.array(), new int[] { 1 }).asFrameValue();
        float[] motionFloatArray = { 0.0f, 0.0f, 0.0f };
        motionFrame.setValue(motionFloatArray);

        injectInputFrame("sharpness", sharpnessFrame);
        injectInputFrame("overExposure", oEFrame);
        injectInputFrame("underExposure", uEFrame);
        injectInputFrame("colorfulness", colorFrame);
        injectInputFrame("contrastRating", contrastFrame);
        injectInputFrame("motionValues", motionFrame);

        process();
        assertEquals("Bad Picture", (String) getOutputFrame("goodOrBadPic").asFrameValue().
                getValue());
!!!75706679.java!!!	testOkPicture() : void
        FrameValue sharpnessFrame = createFrame(FrameType.single(), new int[] { 1 }).
                asFrameValue();
        sharpnessFrame.setValue(30f);
        FrameValue oEFrame = createFrame(FrameType.single(), new int[] { 1 }).asFrameValue();
        oEFrame.setValue(0.39f);
        FrameValue uEFrame = createFrame(FrameType.single(), new int[] { 1 }).asFrameValue();
        uEFrame.setValue(0.25f);
        FrameValue colorFrame = createFrame(FrameType.single(), new int[] { 1 }).asFrameValue();
        colorFrame.setValue(2.1f);
        FrameValue contrastFrame = createFrame(FrameType.single(), new int[] { 1 }).asFrameValue();
        contrastFrame.setValue(0.18f);
        FrameValue motionFrame = createFrame(FrameType.array(), new int[] { 1 }).asFrameValue();
        float[] motionFloatArray = { 0.0f, 0.0f, 0.0f };
        motionFrame.setValue(motionFloatArray);

        injectInputFrame("sharpness", sharpnessFrame);
        injectInputFrame("overExposure", oEFrame);
        injectInputFrame("underExposure", uEFrame);
        injectInputFrame("colorfulness", colorFrame);
        injectInputFrame("contrastRating", contrastFrame);
        injectInputFrame("motionValues", motionFrame);

        process();
        assertEquals("Ok Picture", (String) getOutputFrame("goodOrBadPic").asFrameValue().
                getValue());
!!!75706807.java!!!	testGoodPicture() : void
        FrameValue sharpnessFrame = createFrame(FrameType.single(), new int[] { 1 }).
                asFrameValue();
        sharpnessFrame.setValue(50f);
        FrameValue oEFrame = createFrame(FrameType.single(), new int[] { 1 }).asFrameValue();
        oEFrame.setValue(0.01f);
        FrameValue uEFrame = createFrame(FrameType.single(), new int[] { 1 }).asFrameValue();
        uEFrame.setValue(0.01f);
        FrameValue colorFrame = createFrame(FrameType.single(), new int[] { 1 }).asFrameValue();
        colorFrame.setValue(2.1f);
        FrameValue contrastFrame = createFrame(FrameType.single(), new int[] { 1 }).asFrameValue();
        contrastFrame.setValue(0.18f);
        FrameValue motionFrame = createFrame(FrameType.array(), new int[] { 1 }).asFrameValue();
        float[] motionFloatArray = { 0.0f, 0.0f, 0.0f };
        motionFrame.setValue(motionFloatArray);

        injectInputFrame("sharpness", sharpnessFrame);
        injectInputFrame("overExposure", oEFrame);
        injectInputFrame("underExposure", uEFrame);
        injectInputFrame("colorfulness", colorFrame);
        injectInputFrame("contrastRating", contrastFrame);
        injectInputFrame("motionValues", motionFrame);

        process();
        assertEquals("Good Picture!", (String) getOutputFrame("goodOrBadPic").asFrameValue().
                getValue());
!!!75706935.java!!!	testGreatPicture() : void
        FrameValue sharpnessFrame = createFrame(FrameType.single(), new int[] { 1 }).
                asFrameValue();
        sharpnessFrame.setValue(50f);
        FrameValue oEFrame = createFrame(FrameType.single(), new int[] { 1 }).asFrameValue();
        oEFrame.setValue(0.01f);
        FrameValue uEFrame = createFrame(FrameType.single(), new int[] { 1 }).asFrameValue();
        uEFrame.setValue(0.02f);
        FrameValue colorFrame = createFrame(FrameType.single(), new int[] { 1 }).asFrameValue();
        colorFrame.setValue(2.1f);
        FrameValue contrastFrame = createFrame(FrameType.single(), new int[] { 1 }).asFrameValue();
        contrastFrame.setValue(0.25f);
        FrameValue motionFrame = createFrame(FrameType.array(), new int[] { 1 }).asFrameValue();
        float[] motionFloatArray = { 0.0f, 0.0f, 0.0f };
        motionFrame.setValue(motionFloatArray);

        injectInputFrame("sharpness", sharpnessFrame);
        injectInputFrame("overExposure", oEFrame);
        injectInputFrame("underExposure", uEFrame);
        injectInputFrame("colorfulness", colorFrame);
        injectInputFrame("contrastRating", contrastFrame);
        injectInputFrame("motionValues", motionFrame);

        process();
        assertEquals("Great Picture!", (String) getOutputFrame("goodOrBadPic").asFrameValue().
                getValue());
