class ProcessErrorsTest
!!!75906103.java!!!	ProcessErrorsTest()
        mHomeIntent = new Intent(Intent.ACTION_MAIN);
        mHomeIntent.addCategory(Intent.CATEGORY_HOME);
        mHomeIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
!!!75906231.java!!!	setUp() : void
        super.setUp();
        // First, make sure we have a Context
        assertNotNull("getContext() returned null!", getContext());

        mActivityManager = (ActivityManager)
                getContext().getSystemService(Context.ACTIVITY_SERVICE);
        mPackageManager = getContext().getPackageManager();
!!!75906359.java!!!	testSetUpConditions() : void
        assertNotNull(mActivityManager);
        assertNotNull(mPackageManager);
!!!75906487.java!!!	testNoProcessErrorsAfterBoot() : void
        final String reportMsg = checkForProcessErrors();
        if (reportMsg != null) {
            Log.w(TAG, reportMsg);
        }

        // report a non-empty list back to the test framework
        assertNull(reportMsg, reportMsg);
!!!75906615.java!!!	testRunAllActivities() : void
        final Set<ProcessError> errSet = new LinkedHashSet<ProcessError>();

        for (ResolveInfo app : getLauncherActivities(mPackageManager)) {
            final Collection<ProcessError> errProcs = runOneActivity(app);
            if (errProcs != null) {
                errSet.addAll(errProcs);
            }
        }

        if (!errSet.isEmpty()) {
            fail(String.format("Got %d errors:\n%s", errSet.size(),
                    reportWrappedListContents(errSet)));
        }
!!!75906743.java!!!	testZZReportAsyncErrors() : void
        try {
            if (!mAsyncErrors.isEmpty()) {
                fail(String.format("Got %d asynchronous errors:\n%s", mAsyncErrors.size(),
                        reportWrappedListContents(mAsyncErrors)));
            }
        } finally {
            // Reset state just in case we should get another set of runs in the same process
            mAsyncErrors.clear();
        }
!!!75906871.java!!!	runOneActivity(inout app : ResolveInfo) : ProcessErrorsTest::ProcessError
        final long appLaunchWait = 7000;
        final long homeLaunchWait = 2000;

        Log.i(TAG, String.format("Running activity %s/%s", app.activityInfo.packageName,
                app.activityInfo.name));

        // We check for any Crash or ANR dialogs that are already up, and we ignore them.  This is
        // so that we don't report crashes that were caused by prior apps (which those particular
        // tests should have caught and reported already).
        final Collection<ProcessError> preErrProcs =
                ProcessError.fromCollection(mActivityManager.getProcessesInErrorState());

        // launch app, and wait 7 seconds for it to start/settle
        final Intent intent = intentForActivity(app);
        if (intent == null) {
            Log.i(TAG, String.format("Activity %s/%s is disabled, skipping",
                    app.activityInfo.packageName, app.activityInfo.name));
            return Collections.EMPTY_LIST;
        }
        getContext().startActivity(intent);
        try {
            Thread.sleep(appLaunchWait);
        } catch (InterruptedException e) {
            // ignore
        }

        // Send the "home" intent and wait 2 seconds for us to get there
        getContext().startActivity(mHomeIntent);
        try {
            Thread.sleep(homeLaunchWait);
        } catch (InterruptedException e) {
            // ignore
        }

        // See if there are any errors.  We wait until down here to give ANRs as much time as
        // possible to occur.
        final Collection<ProcessError> errProcs =
                ProcessError.fromCollection(mActivityManager.getProcessesInErrorState());

        // Distinguish the asynchronous crashes/ANRs from the synchronous ones by checking the
        // crash package name against the package name for {@code app}
        if (errProcs != null) {
            Iterator<ProcessError> errIter = errProcs.iterator();
            while (errIter.hasNext()) {
                ProcessError err = errIter.next();
                if (!packageMatches(app, err)) {
                    // async!  Drop into mAsyncErrors and don't report now
                    mAsyncErrors.add(err);
                    errIter.remove();
                }
            }
        }
        // Take the difference between the remaining current error processes and the ones that were
        // present when we started.  The result is guaranteed to be:
        // 1) Errors that are pertinent to this app's package
        // 2) Errors that are pertinent to this particular app invocation
        if (errProcs != null && preErrProcs != null) {
            errProcs.removeAll(preErrProcs);
        }

        return errProcs;
!!!75906999.java!!!	checkForProcessErrors() : String
        List<ProcessErrorStateInfo> errList;
        errList = mActivityManager.getProcessesInErrorState();

        // note: this contains information about each process that is currently in an error
        // condition.  if the list is empty (null) then "we're good".

        // if the list is non-empty, then it's useful to report the contents of the list
        final String reportMsg = reportListContents(errList);
        return reportMsg;
!!!75907127.java!!!	packageMatches(inout app : ResolveInfo, inout err : ProcessErrorsTest::ProcessError) : boolean
        final String appPkg = app.activityInfo.packageName;
        final String errPkg = err.info.processName;
        Log.d(TAG, String.format("packageMatches(%s, %s)", appPkg, errPkg));
        return appPkg.equals(errPkg);
!!!75907255.java!!!	getLauncherActivities(inout pm : PackageManager) : ResolveInfo
        final Intent launchable = new Intent(Intent.ACTION_MAIN);
        launchable.addCategory(Intent.CATEGORY_LAUNCHER);
        final List<ResolveInfo> activities = pm.queryIntentActivities(launchable, 0);
        return activities;
!!!75907383.java!!!	intentForActivity(inout app : ResolveInfo) : Intent
        final ComponentName component = new ComponentName(app.activityInfo.packageName,
                app.activityInfo.name);
        if (getContext().getPackageManager().getComponentEnabledSetting(component) == 
                PackageManager.COMPONENT_ENABLED_STATE_DISABLED) {
            return null;
        }
        final Intent intent = new Intent(Intent.ACTION_MAIN);
        intent.setComponent(component);
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        intent.addFlags(Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
        return intent;
!!!75907511.java!!!	reportWrappedListContents(inout errList : Collection<ProcessError>) : String
        List<ProcessErrorStateInfo> newList = new ArrayList<ProcessErrorStateInfo>(errList.size());
        for (ProcessError err : errList) {
            newList.add(err.info);
        }
        return reportListContents(newList);
!!!75907639.java!!!	reportListContents(inout errList : Collection<ProcessErrorStateInfo>) : String
        if (errList == null) return null;

        StringBuilder builder = new StringBuilder();

        Iterator<ProcessErrorStateInfo> iter = errList.iterator();
        while (iter.hasNext()) {
            ProcessErrorStateInfo entry = iter.next();

            String condition;
            switch (entry.condition) {
            case ActivityManager.ProcessErrorStateInfo.CRASHED:
                condition = "a CRASH";
                break;
            case ActivityManager.ProcessErrorStateInfo.NOT_RESPONDING:
                condition = "an ANR";
                break;
            default:
                condition = "an unknown error";
                break;
            }

            builder.append(String.format("Process %s encountered %s (%s)", entry.processName,
                    condition, entry.shortMsg));
            if (entry.condition == ActivityManager.ProcessErrorStateInfo.CRASHED) {
                builder.append(String.format(" with stack trace:\n%s\n", entry.stackTrace));
            }
            builder.append("\n");
        }
        return builder.toString();
