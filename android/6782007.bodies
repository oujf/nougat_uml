class CustomSurfaceView
!!!75923255.java!!!	CustomSurfaceView(inout context : Context, inout name : String)
        super(context);
        mName = name;
        getHolder().addCallback(this);
!!!75923383.java!!!	setMode(in pixelFormat : int, inout drawNameOnReady : boolean) : void
        mDrawNameOnReady = drawNameOnReady;
        getHolder().setFormat(pixelFormat);
!!!75923511.java!!!	acquireCanvas() : void
        synchronized (mSurfaceLock) {
            if (mCanvas != null) {
                throw new RuntimeException("Surface canvas was already acquired.");
            }
            if (mSurface != null) {
                mCanvas = mSurface.lockCanvas(null);
            }
        }
!!!75923639.java!!!	releaseCanvas() : void
        synchronized (mSurfaceLock) {
            if (mCanvas != null) {
                if (mSurface == null) {
                    throw new RuntimeException(
                            "Surface was destroyed but canvas was not released.");
                }
                mSurface.unlockCanvasAndPost(mCanvas);
                mCanvas = null;
            }
        }
!!!75923767.java!!!	invalidateSurface(inout drawSurfaceId : boolean) : void
        synchronized (mSurfaceLock) {
            if (mSurface != null) {
                Canvas canvas = mSurface.lockCanvas(null);
                // Draw surface name for debug purpose only. This does not affect the test
                // because it is drawn only during allocation.
                if (drawSurfaceId) {
                    int textSize = canvas.getHeight() / 24;
                    Paint paint = new Paint();
                    paint.setTextSize(textSize);
                    int textWidth = (int)(paint.measureText(mName) + 0.5f);
                    int x = mRandom.nextInt(canvas.getWidth() - textWidth);
                    int y = textSize + mRandom.nextInt(canvas.getHeight() - textSize);
                    // Create effect of fog to visually control correctness of composition.
                    paint.setColor(0xFFFF8040);
                    canvas.drawARGB(32, 255, 255, 255);
                    canvas.drawText(mName, x, y, paint);
                }
                mSurface.unlockCanvasAndPost(canvas);
            }
        }
!!!75923895.java!!!	waitForSurfaceReady() : void
        synchronized (mSurfaceLock) {
            if (mSurface == null) {
                try {
                    mSurfaceLock.wait(5000);
                } catch(InterruptedException e) {
                    e.printStackTrace();
                }
            }
            if (mSurface == null)
                throw new RuntimeException("Surface is not ready.");
            mSurfaceWasChanged = false;
        }
!!!75924023.java!!!	waitForSurfaceDestroyed() : void
        synchronized (mSurfaceLock) {
            if (mSurface != null) {
                try {
                    mSurfaceLock.wait(5000);
                } catch(InterruptedException e) {
                    e.printStackTrace();
                }
            }
            if (mSurface != null)
                throw new RuntimeException("Surface still exists.");
            mSurfaceWasChanged = false;
        }
!!!75924151.java!!!	validateSurfaceNotChanged() : void
        synchronized (mSurfaceLock) {
            if (mSurfaceWasChanged) {
                throw new RuntimeException("Surface was changed during the test execution.");
            }
        }
!!!75924279.java!!!	measureFPS(in badFPS : double, in perfectFPS : double) : double
        try {
            ValidateThread validateThread = new ValidateThread(badFPS, perfectFPS);
            validateThread.start();
            validateThread.join();
            return validateThread.getFPS();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
!!!75924407.java!!!	surfaceCreated(inout holder : SurfaceHolder) : void
        synchronized (mSurfaceLock) {
            mSurfaceWasChanged = true;
        }
!!!75924535.java!!!	surfaceChanged(inout holder : SurfaceHolder, in format : int, in width : int, in height : int) : void
        // This method is always called at least once, after surfaceCreated.
        synchronized (mSurfaceLock) {
            mSurface = holder.getSurface();
            // We only need to invalidate the surface for the compositor performance test so that
            // it gets included in the composition process. For allocation performance we
            // don't need to invalidate surface and this allows us to remove non-necessary
            // surface invalidation from the test.
            if (mDrawNameOnReady) {
                invalidateSurface(true);
            }
            mSurfaceWasChanged = true;
            mSurfaceLock.notify();
        }
!!!75924663.java!!!	surfaceDestroyed(inout holder : SurfaceHolder) : void
        synchronized (mSurfaceLock) {
            mSurface = null;
            mSurfaceWasChanged = true;
            mSurfaceLock.notify();
        }
