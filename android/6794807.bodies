class SetAlarm
!!!75962423.java!!!	handleCommands() : void
        if (CMD_PREPARE.equals(mCommand)) {
            callPrepare();
        } else if (CMD_SET.equals(mCommand)) {
            String paramString = mArgs.getString(PARAM);
            if (paramString == null) {
                errorFinish("argument expected for alarm time");
            }
            long timeout = -1;
            try {
                timeout = Long.parseLong(paramString);
            } catch (NumberFormatException nfe) {
                errorFinish("a number argument is expected");
            }
            callSetAndWait(timeout);
        } else if (CMD_DONE.equals(mCommand)) {
            callDone();
        } else {
            errorFinish("Unrecognized command: " + mCommand);
        }
        finish(Activity.RESULT_OK, new Bundle());
!!!75962551.java!!!	onCreate(inout arguments : Bundle) : void
        super.onCreate(arguments);
        mCommand = arguments.getString(COMMAND);
        if ("true".equals(arguments.getString("debug"))) {
            Debug.waitForDebugger();
        }
        if (mCommand == null) {
            errorFinish("No command specified");
        }
        mArgs = arguments;
        connectToAlarmService();
!!!75962679.java!!!	errorFinish(inout msg : String) : void
        Bundle ret = new Bundle();
        ret.putString("error", msg);
        finish(Activity.RESULT_CANCELED, ret);
!!!75962807.java!!!	connectToAlarmService() : void
        // start the service with an intent, this ensures the service keeps running after unbind
        ComponentName cn = getContext().startService(mServceIntent);
        if (cn == null) {
            errorFinish("failed to start service");
        }
        if (!getContext().bindService(mServceIntent, mConn, Context.BIND_AUTO_CREATE)) {
            errorFinish("failed to bind service");
        }
!!!75962935.java!!!	callPrepare() : void
        try {
            mAlarmService.prepare();
        } catch (RemoteException e) {
            errorFinish("RemoteExeption in prepare()");
        } finally {
            getContext().unbindService(mConn);
        }
!!!75963063.java!!!	callDone() : void
        try {
            mAlarmService.done();
        } catch (RemoteException e) {
            errorFinish("RemoteExeption in prepare()");
        } finally {
            getContext().unbindService(mConn);
        }
        // explicitly stop the service (started in prepare()) so that the service is now free
        // to be reclaimed
        getContext().stopService(mServceIntent);
!!!75963191.java!!!	callSetAndWait(in timeoutMills : long) : void
        try {
            mAlarmService.setAlarmAndWait(timeoutMills);
        } catch (RemoteException e) {
            errorFinish("RemoteExeption in setAlarmAndWait()");
        } finally {
            getContext().unbindService(mConn);
        }
