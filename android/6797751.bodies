class AssistVisualizer
!!!75968695.java!!!	AssistVisualizer(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);
        setWillNotDraw(false);
        mFramePaint.setColor(0xffff0000);
        mFramePaint.setStyle(Paint.Style.STROKE);
        mFramePaint.setStrokeWidth(0);
        mFrameBaselinePaint.setColor(0xa0b0b000);
        mFrameBaselinePaint.setStyle(Paint.Style.STROKE);
        mFrameBaselinePaint.setStrokeWidth(0);
        float density = getResources().getDisplayMetrics().density;
        mFramePaint.setShadowLayer(density, density, density, 0xff000000);
        mFrameNoTransformPaint.setColor(0xff0000ff);
        mFrameNoTransformPaint.setStyle(Paint.Style.STROKE);
        mFrameNoTransformPaint.setStrokeWidth(0);
        mFrameNoTransformPaint.setShadowLayer(density, density, density, 0xff000000);
!!!75968823.java!!!	setAssistStructure(inout as : AssistStructure) : void
        mAssistStructure = as;
        mTextRects.clear();
        final int N = as.getWindowNodeCount();
        if (N > 0) {
            for (int i=0; i<N; i++) {
                AssistStructure.WindowNode windowNode = as.getWindowNodeAt(i);
                mMatrixStack.clear();
                Matrix matrix = new Matrix();
                matrix.setTranslate(windowNode.getLeft(), windowNode.getTop());
                mMatrixStack.add(matrix);
                buildTextRects(windowNode.getRootViewNode(), 0, windowNode.getLeft(),
                        windowNode.getTop());
            }
        }
        Log.d(TAG, "Building text rects in " + this + ": found " + mTextRects.size());
        invalidate();
!!!75968951.java!!!	logTree() : void
        if (mAssistStructure != null) {
            mAssistStructure.dump();
        }
!!!75969079.java!!!	logText() : void
        final int N = mTextRects.size();
        for (int i=0; i<N; i++) {
            TextEntry te = mTextRects.get(i);
            Log.d(TAG, "View " + te.className + " " + te.bounds.toShortString()
                    + " in " + te.parentLeft + "," + te.parentTop
                    + " matrix=" + te.matrix.toShortString()
                    + " size=" + te.textSize + " color=#" + Integer.toHexString(te.textColor)
                    + ": "
                    + te.text);
            if (te.lineCharOffsets != null && te.lineBaselines != null) {
                final int num = te.lineCharOffsets.length < te.lineBaselines.length
                        ? te.lineCharOffsets.length : te.lineBaselines.length;
                for (int j=0; j<num; j++) {
                    Log.d(TAG, "  Line #" + j + ": offset=" + te.lineCharOffsets[j]
                            + " baseline=" + te.lineBaselines[j]);
                }
            }
        }
!!!75969207.java!!!	clearAssistData() : void
        mAssistStructure = null;
        mTextRects.clear();
!!!75969335.java!!!	buildTextRects(inout root : AssistStructure::ViewNode, in matrixStackIndex : int, in parentLeft : int, in parentTop : int) : void
        if (root.getVisibility() != View.VISIBLE) {
            return;
        }
        Matrix parentMatrix = mMatrixStack.get(matrixStackIndex);
        matrixStackIndex++;
        Matrix matrix;
        if (mMatrixStack.size() > matrixStackIndex) {
            matrix = mMatrixStack.get(matrixStackIndex);
            matrix.set(parentMatrix);
        } else {
            matrix = new Matrix(parentMatrix);
            mMatrixStack.add(matrix);
        }
        matrix.preTranslate(root.getLeft(), root.getTop());
        int left = parentLeft + root.getLeft();
        int top = parentTop + root.getTop();
        Matrix transform = root.getTransformation();
        if (transform != null) {
            matrix.preConcat(transform);
        }
        if (root.getText() != null || root.getContentDescription() != null) {
            TextEntry te = new TextEntry(root, parentLeft, parentTop, matrix);
            mTextRects.add(te);
        }
        final int N = root.getChildCount();
        if (N > 0) {
            left -= root.getScrollX();
            top -= root.getScrollY();
            matrix.preTranslate(-root.getScrollX(), -root.getScrollY());
            for (int i=0; i<N; i++) {
                AssistStructure.ViewNode child = root.getChildAt(i);
                buildTextRects(child, matrixStackIndex, left, top);
            }
        }
!!!75969463.java!!!	onDraw(inout canvas : Canvas) : void
        super.onDraw(canvas);
        getLocationOnScreen(mTmpLocation);
        final int N = mTextRects.size();
        Log.d(TAG, "Drawing text rects in " + this + ": found " + mTextRects.size());
        for (int i=0; i<N; i++) {
            TextEntry te = mTextRects.get(i);
            canvas.drawRect(te.bounds.left - mTmpLocation[0], te.bounds.top - mTmpLocation[1],
                    te.bounds.right - mTmpLocation[0], te.bounds.bottom - mTmpLocation[1],
                    mFrameNoTransformPaint);
        }
        for (int i=0; i<N; i++) {
            TextEntry te = mTextRects.get(i);
            canvas.save();
            canvas.translate(-mTmpLocation[0], -mTmpLocation[1]);
            canvas.concat(te.matrix);
            canvas.drawRect(0, 0, te.bounds.right - te.bounds.left, te.bounds.bottom - te.bounds.top,
                    mFramePaint);
            if (te.lineBaselines != null) {
                for (int j=0; j<te.lineBaselines.length; j++) {
                    canvas.drawLine(0, te.lineBaselines[j] - te.scrollY,
                            te.bounds.right - te.bounds.left, te.lineBaselines[j] - te.scrollY,
                            mFrameBaselinePaint);
                }
            }
            canvas.restore();
        }
