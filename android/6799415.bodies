class TestInteractionActivity
!!!75976631.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);

        if (!isVoiceInteraction()) {
            Log.w(TAG, "Not running as a voice interaction!");
            finish();
            return;
        }

        if (!VoiceInteractionService.isActiveService(this,
                new ComponentName(this, MainInteractionService.class))) {
            Log.w(TAG, "Not current voice interactor!");
            finish();
            return;
        }

        setContentView(R.layout.test_interaction);
        mLog = (TextView)findViewById(R.id.log);
        mAirplaneButton = (Button)findViewById(R.id.airplane);
        mAirplaneButton.setOnClickListener(this);
        mAbortButton = (Button)findViewById(R.id.abort);
        mAbortButton.setOnClickListener(this);
        mCompleteButton = (Button)findViewById(R.id.complete);
        mCompleteButton.setOnClickListener(this);
        mCommandButton = (Button)findViewById(R.id.command);
        mCommandButton.setOnClickListener(this);
        mPickButton = (Button)findViewById(R.id.pick);
        mPickButton.setOnClickListener(this);
        mJumpOutButton = (Button)findViewById(R.id.jump);
        mJumpOutButton.setOnClickListener(this);
        mCancelButton = (Button)findViewById(R.id.cancel);
        mCancelButton.setOnClickListener(this);

        mInteractor = getVoiceInteractor();

        VoiceInteractor.Request[] active = mInteractor.getActiveRequests();
        for (int i=0; i<active.length; i++) {
            Log.i(TAG, "Active #" + i + " / " + active[i].getName() + ": " + active[i]);
        }

        mCurrentRequest = mInteractor.getActiveRequest(REQUEST_CONFIRM);
        if (mCurrentRequest == null) {
            mCurrentRequest = new VoiceInteractor.ConfirmationRequest(
                    new VoiceInteractor.Prompt("This is a confirmation"), null) {
                @Override
                public void onCancel() {
                    Log.i(TAG, "Canceled!");
                    getActivity().finish();
                }

                @Override
                public void onConfirmationResult(boolean confirmed, Bundle result) {
                    Log.i(TAG, "Confirmation result: confirmed=" + confirmed + " result=" + result);
                    getActivity().finish();
                }
            };
            mInteractor.submitRequest(mCurrentRequest, REQUEST_CONFIRM);
            String[] cmds = new String[] {
                    "com.android.test.voiceinteraction.COMMAND",
                    "com.example.foo.bar"
            };
            boolean sup[] = mInteractor.supportsCommands(cmds);
            for (int i=0; i<cmds.length; i++) {
                mLog.append(cmds[i] + ": " + (sup[i] ? "SUPPORTED" : "NOT SUPPORTED") + "\n");
            }
        } else {
            Log.i(TAG, "Restarting with active confirmation: " + mCurrentRequest);
        }
!!!75976759.java!!!	onResume() : void
        super.onResume();
!!!75976887.java!!!	onClick(inout v : View) : void
        if (v == mAirplaneButton) {
            Intent intent = new Intent(Settings.ACTION_VOICE_CONTROL_AIRPLANE_MODE);
            intent.addCategory(Intent.CATEGORY_VOICE);
            intent.putExtra(Settings.EXTRA_AIRPLANE_MODE_ENABLED, true);
            startActivity(intent);
        } else if (v == mAbortButton) {
            VoiceInteractor.AbortVoiceRequest req = new TestAbortVoice();
            mInteractor.submitRequest(req, REQUEST_ABORT);
        } else if (v == mCompleteButton) {
            VoiceInteractor.CompleteVoiceRequest req = new TestCompleteVoice();
            mInteractor.submitRequest(req, REQUEST_COMPLETE);
        } else if (v == mCommandButton) {
            VoiceInteractor.CommandRequest req = new TestCommand("Some arg");
            mInteractor.submitRequest(req, REQUEST_COMMAND);
        } else if (v == mPickButton) {
            VoiceInteractor.PickOptionRequest.Option[] options =
                    new VoiceInteractor.PickOptionRequest.Option[5];
            options[0] = new VoiceInteractor.PickOptionRequest.Option("One");
            options[1] = new VoiceInteractor.PickOptionRequest.Option("Two");
            options[2] = new VoiceInteractor.PickOptionRequest.Option("Three");
            options[3] = new VoiceInteractor.PickOptionRequest.Option("Four");
            options[4] = new VoiceInteractor.PickOptionRequest.Option("Five");
            VoiceInteractor.PickOptionRequest req = new TestPickOption(options);
            mInteractor.submitRequest(req, REQUEST_PICK);
        } else if (v == mJumpOutButton) {
            Log.i(TAG, "Jump out");
            Intent intent = new Intent(Intent.ACTION_MAIN);
            intent.addCategory(Intent.CATEGORY_LAUNCHER);
            intent.setComponent(new ComponentName(this, VoiceInteractionMain.class));
            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            startActivity(intent);
        } else if (v == mCancelButton && mCurrentRequest != null) {
            Log.i(TAG, "Cancel request");
            mCurrentRequest.cancel();
        }
!!!75977015.java!!!	onDestroy() : void
        super.onDestroy();
