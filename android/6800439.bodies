class ClockEngine
!!!75980855.java!!!	onCreate(inout surfaceHolder : SurfaceHolder) : void
            super.onCreate(surfaceHolder);

            mDesiredWidth = getDesiredMinimumWidth();
            mDesiredHeight = getDesiredMinimumHeight();

            Paint paint = mFillPaint;
            paint.setStyle(Paint.Style.FILL);

            paint = mStrokePaint;
            paint.setStrokeWidth(3);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStyle(Paint.Style.STROKE);

            TextPaint tpaint = mTextPaint;
            tpaint.density = getResources().getDisplayMetrics().density;
            tpaint.setCompatibilityScaling(getResources().getCompatibilityInfo().applicationScale);
            tpaint.setColor(TEXT_COLOR);
            tpaint.setTextSize(18 * getResources().getDisplayMetrics().scaledDensity);
            tpaint.setShadowLayer(4 * getResources().getDisplayMetrics().density, 0, 0, 0xff000000);

            mTextPaint.getFontMetrics(mTextMetrics);

            mPadding = (int)(16 * getResources().getDisplayMetrics().density);

            if (isPreview()) {
                mOffsetX = 0.5f;
                mOffsetY = 0.5f;
            }
!!!75980983.java!!!	onDestroy() : void
            super.onDestroy();
            mHandler.removeCallbacks(mDrawClock);
!!!75981111.java!!!	onVisibilityChanged(inout visible : boolean) : void
            mVisible = visible;
            if (!visible) {
                mHandler.removeCallbacks(mDrawClock);
            }
            drawFrame();
!!!75981239.java!!!	onSurfaceChanged(inout holder : SurfaceHolder, in format : int, in width : int, in height : int) : void
            super.onSurfaceChanged(holder, format, width, height);
            drawFrame();
!!!75981367.java!!!	onSurfaceCreated(inout holder : SurfaceHolder) : void
            super.onSurfaceCreated(holder);
!!!75981495.java!!!	onSurfaceDestroyed(inout holder : SurfaceHolder) : void
            super.onSurfaceDestroyed(holder);
            mVisible = false;
            mHandler.removeCallbacks(mDrawClock);
!!!75981623.java!!!	onApplyWindowInsets(inout insets : WindowInsets) : void
            super.onApplyWindowInsets(insets);
            mMainInsets.set(insets.getSystemWindowInsetLeft(), insets.getSystemWindowInsetTop(),
                    insets.getSystemWindowInsetRight(), insets.getSystemWindowInsetBottom());
            mStableInsets.set(insets.getStableInsetLeft(), insets.getStableInsetTop(),
                    insets.getStableInsetRight(), insets.getStableInsetBottom());
            mRound = insets.isRound();
            drawFrame();
!!!75981751.java!!!	onDesiredSizeChanged(in desiredWidth : int, in desiredHeight : int) : void
            super.onDesiredSizeChanged(desiredWidth, desiredHeight);
            mDesiredWidth = desiredWidth;
            mDesiredHeight = desiredHeight;
            drawFrame();
!!!75981879.java!!!	onOffsetsChanged(in xOffset : float, in yOffset : float, in xStep : float, in yStep : float, in xPixels : int, in yPixels : int) : void
            super.onOffsetsChanged(xOffset, yOffset, xStep, yStep, xPixels, yPixels);

            if (isPreview()) return;

            mOffsetX = xOffset;
            mOffsetY = yOffset;
            mOffsetXStep = xStep;
            mOffsetYStep = yStep;
            mOffsetXPixels = xPixels;
            mOffsetYPixels = yPixels;

            drawFrame();
!!!75982007.java!!!	drawFrame() : void
            final SurfaceHolder holder = getSurfaceHolder();
            final Rect frame = holder.getSurfaceFrame();
            final int width = frame.width();
            final int height = frame.height();

            Canvas c = null;
            try {
                c = holder.lockCanvas();
                if (c != null) {
                    final Paint paint = mFillPaint;

                    paint.setColor(OUTER_COLOR);
                    c.drawRect(0, 0, width, height, paint);

                    paint.setColor(INNER_COLOR);
                    c.drawRect(0+mMainInsets.left, 0+mMainInsets.top,
                            width-mMainInsets.right, height-mMainInsets.bottom, paint);

                    mStrokePaint.setColor(STABLE_COLOR);
                    c.drawRect(0 + mStableInsets.left, 0 + mStableInsets.top,
                            width - mStableInsets.right, height - mStableInsets.bottom,
                            mStrokePaint);

                    final int ascdesc = (int)(-mTextMetrics.ascent + mTextMetrics.descent);
                    final int linegap = (int)(-mTextMetrics.ascent + mTextMetrics.descent
                            + mTextMetrics.leading);

                    int x = mStableInsets.left + mPadding;
                    int y = height - mStableInsets.bottom - mPadding - ascdesc;
                    c.drawText("Surface Size: " + width + " x " + height,
                            x, y, mTextPaint);
                    y -= linegap;
                    c.drawText("Desired Size: " + mDesiredWidth + " x " + mDesiredHeight,
                            x, y, mTextPaint);
                    y -= linegap;
                    c.drawText("Cur Offset Raw: " + mOffsetX + ", " + mOffsetY,
                            x, y, mTextPaint);
                    y -= linegap;
                    c.drawText("Cur Offset Step: " + mOffsetXStep + ", " + mOffsetYStep,
                            x, y, mTextPaint);
                    y -= linegap;
                    c.drawText("Cur Offset Pixels: " + mOffsetXPixels + ", " + mOffsetYPixels,
                            x, y, mTextPaint);
                    y -= linegap;
                    c.drawText("Stable Insets: (" + mStableInsets.left + ", " + mStableInsets.top
                            + ") - (" + mStableInsets.right + ", " + mStableInsets.bottom + ")",
                            x, y, mTextPaint);
                    y -= linegap;
                    c.drawText("System Insets: (" + mMainInsets.left + ", " + mMainInsets.top
                            + ") - (" + mMainInsets.right + ", " + mMainInsets.bottom + ")",
                            x, y, mTextPaint);

                }
            } finally {
                if (c != null) holder.unlockCanvasAndPost(c);
            }
