class PropertyValuesHolder_Delegate
!!!75986231.java!!!	registerMethod(inout targetClass : Class, inout methodName : String, inout types : Class [[]], in nArgs : int) : long
        // Encode the number of arguments in the method name
        String methodIndexName = String.format("%1$s.%2$s#%3$d", targetClass.getSimpleName(),
                methodName, nArgs);
        synchronized (sMethodIndexLock) {
            Long methodId = METHOD_NAME_TO_ID.get(methodIndexName);

            if (methodId != null) {
                // The method was already registered
                return methodId;
            }

            Class[] args = new Class[nArgs];
            Method method = null;
            for (Class typeVariant : types) {
                for (int i = 0; i < nArgs; i++) {
                    args[i] = typeVariant;
                }
                try {
                    method = targetClass.getDeclaredMethod(methodName, args);
                } catch (NoSuchMethodException ignore) {
                }
            }

            if (method != null) {
                methodId = sNextId++;
                ID_TO_METHOD.put(methodId, method);
                METHOD_NAME_TO_ID.put(methodIndexName, methodId);

                return methodId;
            }
        }

        // Method not found
        return 0;
!!!75986359.java!!!	callMethod(inout target : Object, in methodID : long, inout  : Object...args) : void
        Method method = ID_TO_METHOD.get(methodID);
        assert method != null;

        try {
            method.setAccessible(true);
            method.invoke(target, args);
        } catch (IllegalAccessException e) {
            Bridge.getLog().error(null, "Unable to update property during animation", e, null);
        } catch (InvocationTargetException e) {
            Bridge.getLog().error(null, "Unable to update property during animation", e, null);
        }
!!!75986487.java!!!	nGetIntMethod(inout targetClass : Class, inout methodName : String) : long
        return nGetMultipleIntMethod(targetClass, methodName, 1);
!!!75986615.java!!!	nGetFloatMethod(inout targetClass : Class, inout methodName : String) : long
        return nGetMultipleFloatMethod(targetClass, methodName, 1);
!!!75986743.java!!!	nGetMultipleIntMethod(inout targetClass : Class, inout methodName : String, in numParams : int) : long
        return registerMethod(targetClass, methodName, INTEGER_VARIANTS, numParams);
!!!75986871.java!!!	nGetMultipleFloatMethod(inout targetClass : Class, inout methodName : String, in numParams : int) : long
        return registerMethod(targetClass, methodName, FLOAT_VARIANTS, numParams);
!!!75986999.java!!!	nCallIntMethod(inout target : Object, in methodID : long, in arg : int) : void
        callMethod(target, methodID, arg);
!!!75987127.java!!!	nCallFloatMethod(inout target : Object, in methodID : long, in arg : float) : void
        callMethod(target, methodID, arg);
!!!75987255.java!!!	nCallTwoIntMethod(inout target : Object, in methodID : long, in arg1 : int, in arg2 : int) : void
        callMethod(target, methodID, arg1, arg2);
!!!75987383.java!!!	nCallFourIntMethod(inout target : Object, in methodID : long, in arg1 : int, in arg2 : int, in arg3 : int, in arg4 : int) : void
        callMethod(target, methodID, arg1, arg2, arg3, arg4);
!!!75987511.java!!!	nCallMultipleIntMethod(inout target : Object, in methodID : long, inout args : int [[]]) : void
        assert args != null;

        // Box parameters
        Object[] params = new Object[args.length];
        for (int i = 0; i < args.length; i++) {
            params[i] = args;
        }
        callMethod(target, methodID, params);
!!!75987639.java!!!	nCallTwoFloatMethod(inout target : Object, in methodID : long, in arg1 : float, in arg2 : float) : void
        callMethod(target, methodID, arg1, arg2);
!!!75987767.java!!!	nCallFourFloatMethod(inout target : Object, in methodID : long, in arg1 : float, in arg2 : float, in arg3 : float, in arg4 : float) : void
        callMethod(target, methodID, arg1, arg2, arg3, arg4);
!!!75987895.java!!!	nCallMultipleFloatMethod(inout target : Object, in methodID : long, inout args : float [[]]) : void
        assert args != null;

        // Box parameters
        Object[] params = new Object[args.length];
        for (int i = 0; i < args.length; i++) {
            params[i] = args;
        }
        callMethod(target, methodID, params);
