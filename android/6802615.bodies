class BridgeContext
!!!76168247.java!!!	BridgeContext(inout projectKey : Object, inout metrics : DisplayMetrics, inout renderResources : RenderResources, inout assets : AssetRepository, inout layoutlibCallback : LayoutlibCallback, inout config : Configuration, in targetSdkVersion : int, inout hasRtlSupport : boolean)
        mProjectKey = projectKey;
        mMetrics = metrics;
        mLayoutlibCallback = layoutlibCallback;

        mRenderResources = renderResources;
        mConfig = config;
        AssetManager systemAssetManager = AssetManager.getSystem();
        if (systemAssetManager instanceof BridgeAssetManager) {
            mAssets = (BridgeAssetManager) systemAssetManager;
        } else {
            throw new AssertionError("Creating BridgeContext without initializing Bridge");
        }
        mAssets.setAssetRepository(assets);

        mApplicationInfo = new ApplicationInfo();
        mApplicationInfo.targetSdkVersion = targetSdkVersion;
        if (hasRtlSupport) {
            mApplicationInfo.flags = mApplicationInfo.flags | ApplicationInfo.FLAG_SUPPORTS_RTL;
        }

        mWindowManager = new WindowManagerImpl(mMetrics);
        mDisplayManager = new DisplayManager(this);
!!!76168375.java!!!	initResources() : void
        AssetManager assetManager = AssetManager.getSystem();

        mSystemResources = Resources_Delegate.initSystem(
                this,
                assetManager,
                mMetrics,
                mConfig,
                mLayoutlibCallback);
        mTheme = mSystemResources.newTheme();
!!!76168503.java!!!	disposeResources() : void
        Resources_Delegate.disposeSystem();
!!!76168631.java!!!	setBridgeInflater(inout inflater : BridgeInflater) : void
        mBridgeInflater = inflater;
!!!76168759.java!!!	addViewKey(inout view : View, inout viewKey : Object) : void
        mViewKeyMap.put(view, viewKey);
!!!76168887.java!!!	getViewKey(inout view : View) : Object
        return mViewKeyMap.get(view);
!!!76169015.java!!!	addCookie(inout o : Object, inout cookie : Object) : void
        mViewKeyHelpMap.put(o, cookie);
!!!76169143.java!!!	getCookie(inout o : Object) : Object
        return mViewKeyHelpMap.get(o);
!!!76169271.java!!!	getProjectKey() : Object
        return mProjectKey;
!!!76169399.java!!!	getMetrics() : DisplayMetrics
        return mMetrics;
!!!76169527.java!!!	getLayoutlibCallback() : LayoutlibCallback
        return mLayoutlibCallback;
!!!76169655.java!!!	getRenderResources() : RenderResources
        return mRenderResources;
!!!76169783.java!!!	getDefaultProperties() : Object
        return mDefaultPropMaps;
!!!76169911.java!!!	getConfiguration() : Configuration
        return mConfig;
!!!76170039.java!!!	pushParser(inout parser : BridgeXmlBlockParser) : void
        if (ParserFactory.LOG_PARSER) {
            System.out.println("PUSH " + parser.getParser().toString());
        }
        mParserStack.push(parser);
!!!76170167.java!!!	popParser() : void
        BridgeXmlBlockParser parser = mParserStack.pop();
        if (ParserFactory.LOG_PARSER) {
            System.out.println("POPD " + parser.getParser().toString());
        }
!!!76170295.java!!!	getCurrentParser() : BridgeXmlBlockParser
        return mParserStack.peek();
!!!76170423.java!!!	getPreviousParser() : BridgeXmlBlockParser
        if (mParserStack.size() < 2) {
            return null;
        }
        return mParserStack.get(mParserStack.size() - 2);
!!!76170551.java!!!	resolveThemeAttribute(in resId : int, inout outValue : TypedValue, inout resolveRefs : boolean) : boolean
        Pair<ResourceType, String> resourceInfo = Bridge.resolveResourceId(resId);
        boolean isFrameworkRes = true;
        if (resourceInfo == null) {
            resourceInfo = mLayoutlibCallback.resolveResourceId(resId);
            isFrameworkRes = false;
        }

        if (resourceInfo == null) {
            return false;
        }

        ResourceValue value = mRenderResources.findItemInTheme(resourceInfo.getSecond(),
                isFrameworkRes);
        if (resolveRefs) {
            value = mRenderResources.resolveResValue(value);
        }

        if (value == null) {
            // unable to find the attribute.
            return false;
        }

        // check if this is a style resource
        if (value instanceof StyleResourceValue) {
            // get the id that will represent this style.
            outValue.resourceId = getDynamicIdByStyle((StyleResourceValue) value);
            return true;
        }

        int a;
        // if this is a framework value.
        if (value.isFramework()) {
            // look for idName in the android R classes.
            // use 0 a default res value as it's not a valid id value.
            a = getFrameworkResourceValue(value.getResourceType(), value.getName(), 0 /*defValue*/);
        } else {
            // look for idName in the project R class.
            // use 0 a default res value as it's not a valid id value.
            a = getProjectResourceValue(value.getResourceType(), value.getName(), 0 /*defValue*/);
        }

        if (a != 0) {
            outValue.resourceId = a;
            return true;
        }

        return false;
!!!76170679.java!!!	resolveId(in id : int) : ResourceReference
        // first get the String related to this id in the framework
        Pair<ResourceType, String> resourceInfo = Bridge.resolveResourceId(id);

        if (resourceInfo != null) {
            return new ResourceReference(resourceInfo.getSecond(), true);
        }

        // didn't find a match in the framework? look in the project.
        if (mLayoutlibCallback != null) {
            resourceInfo = mLayoutlibCallback.resolveResourceId(id);

            if (resourceInfo != null) {
                return new ResourceReference(resourceInfo.getSecond(), false);
            }
        }

        // The base value for R.style is 0x01030000 and the custom style is 0x02030000.
        // So, if the second byte is 03, it's probably a style.
        if ((id >> 16 & 0xFF) == 0x03) {
            return getStyleByDynamicId(id);
        }
        return null;
!!!76170807.java!!!	inflateView(inout resource : ResourceReference, inout parent : ViewGroup, inout attachToRoot : boolean, inout skipCallbackParser : boolean) : View
        boolean isPlatformLayout = resource.isFramework();

        if (!isPlatformLayout && !skipCallbackParser) {
            // check if the project callback can provide us with a custom parser.
            ILayoutPullParser parser = getParser(resource);

            if (parser != null) {
                BridgeXmlBlockParser blockParser = new BridgeXmlBlockParser(parser,
                        this, resource.isFramework());
                try {
                    pushParser(blockParser);
                    return Pair.of(
                            mBridgeInflater.inflate(blockParser, parent, attachToRoot),
                            Boolean.TRUE);
                } finally {
                    popParser();
                }
            }
        }

        ResourceValue resValue;
        if (resource instanceof ResourceValue) {
            resValue = (ResourceValue) resource;
        } else {
            if (isPlatformLayout) {
                resValue = mRenderResources.getFrameworkResource(ResourceType.LAYOUT,
                        resource.getName());
            } else {
                resValue = mRenderResources.getProjectResource(ResourceType.LAYOUT,
                        resource.getName());
            }
        }

        if (resValue != null) {

            File xml = new File(resValue.getValue());
            if (xml.isFile()) {
                // we need to create a pull parser around the layout XML file, and then
                // give that to our XmlBlockParser
                try {
                    XmlPullParser parser = ParserFactory.create(xml, true);

                    // set the resource ref to have correct view cookies
                    mBridgeInflater.setResourceReference(resource);

                    BridgeXmlBlockParser blockParser = new BridgeXmlBlockParser(parser,
                            this, resource.isFramework());
                    try {
                        pushParser(blockParser);
                        return Pair.of(
                                mBridgeInflater.inflate(blockParser, parent, attachToRoot),
                                Boolean.FALSE);
                    } finally {
                        popParser();
                    }
                } catch (XmlPullParserException e) {
                    Bridge.getLog().error(LayoutLog.TAG_BROKEN,
                            "Failed to configure parser for " + xml, e, null /*data*/);
                    // we'll return null below.
                } catch (FileNotFoundException e) {
                    // this shouldn't happen since we check above.
                } finally {
                    mBridgeInflater.setResourceReference(null);
                }
            } else {
                Bridge.getLog().error(LayoutLog.TAG_BROKEN,
                        String.format("File %s is missing!", xml), null);
            }
        } else {
            Bridge.getLog().error(LayoutLog.TAG_BROKEN,
                    String.format("Layout %s%s does not exist.", isPlatformLayout ? "android:" : "",
                            resource.getName()), null);
        }

        return Pair.of(null, Boolean.FALSE);
!!!76170935.java!!!	getParser(inout resource : ResourceReference) : ILayoutPullParser
        ILayoutPullParser parser;
        if (resource instanceof ResourceValue) {
            parser = mLayoutlibCallback.getParser((ResourceValue) resource);
        } else {
            parser = mLayoutlibCallback.getParser(resource.getName());
        }
        return parser;
!!!76171063.java!!!	getResources() : Resources
        return mSystemResources;
!!!76171191.java!!!	getTheme() : Resources::Theme
        return mTheme;
!!!76171319.java!!!	getClassLoader() : ClassLoader
        // The documentation for this method states that it should return a class loader one can
        // use to retrieve classes in this package. However, when called by LayoutInflater, we do
        // not want the class loader to return app's custom views.
        // This is so that the IDE can instantiate the custom views and also generate proper error
        // messages in case of failure. This also enables the IDE to fallback to MockView in case
        // there's an exception thrown when trying to inflate the custom view.
        // To work around this issue, LayoutInflater is modified via LayoutLib Create tool to
        // replace invocations of this method to a new method: getFrameworkClassLoader(). Also,
        // the method is injected into Context. The implementation of getFrameworkClassLoader() is:
        // "return getClass().getClassLoader();". This means that when LayoutInflater asks for
        // the context ClassLoader, it gets only LayoutLib's ClassLoader which doesn't have
        // access to the apps's custom views.
        // This method can now return the right ClassLoader, which CustomViews can use to do the
        // right thing.
        if (mClassLoader == null) {
            mClassLoader = new ClassLoader(getClass().getClassLoader()) {
                @Override
                protected Class<?> findClass(String name) throws ClassNotFoundException {
                    for (String prefix : BridgeInflater.getClassPrefixList()) {
                        if (name.startsWith(prefix)) {
                            // These are framework classes and should not be loaded from the app.
                            throw new ClassNotFoundException(name + " not found");
                        }
                    }
                    return BridgeContext.this.mLayoutlibCallback.findClass(name);
                }
            };
        }
        return mClassLoader;
!!!76171447.java!!!	getSystemService(inout service : String) : Object
        if (LAYOUT_INFLATER_SERVICE.equals(service)) {
            return mBridgeInflater;
        }

        if (TEXT_SERVICES_MANAGER_SERVICE.equals(service)) {
            // we need to return a valid service to avoid NPE
            return TextServicesManager.getInstance();
        }

        if (WINDOW_SERVICE.equals(service)) {
            return mWindowManager;
        }

        // needed by SearchView
        if (INPUT_METHOD_SERVICE.equals(service)) {
            return null;
        }

        if (POWER_SERVICE.equals(service)) {
            return new PowerManager(this, new BridgePowerManager(), new Handler());
        }

        if (DISPLAY_SERVICE.equals(service)) {
            return mDisplayManager;
        }

        if (ACCESSIBILITY_SERVICE.equals(service)) {
            return AccessibilityManager.getInstance(this);
        }

        throw new UnsupportedOperationException("Unsupported Service: " + service);
!!!76171575.java!!!	getSystemServiceName(inout serviceClass : Class) : String
        if (serviceClass.equals(LayoutInflater.class)) {
            return LAYOUT_INFLATER_SERVICE;
        }

        if (serviceClass.equals(TextServicesManager.class)) {
            return TEXT_SERVICES_MANAGER_SERVICE;
        }

        if (serviceClass.equals(WindowManager.class)) {
            return WINDOW_SERVICE;
        }

        if (serviceClass.equals(PowerManager.class)) {
            return POWER_SERVICE;
        }

        if (serviceClass.equals(DisplayManager.class)) {
            return DISPLAY_SERVICE;
        }

        if (serviceClass.equals(AccessibilityManager.class)) {
            return ACCESSIBILITY_SERVICE;
        }

        throw new UnsupportedOperationException("Unsupported Service: " + serviceClass);
!!!76171703.java!!!	obtainStyledAttributes(inout attrs : int [[]]) : BridgeTypedArray
        return obtainStyledAttributes(0, attrs);
!!!76171831.java!!!	obtainStyledAttributes(in resId : int, inout attrs : int [[]]) : BridgeTypedArray
        StyleResourceValue style = null;
        // get the StyleResourceValue based on the resId;
        if (resId != 0) {
            style = getStyleByDynamicId(resId);

            if (style == null) {
                // In some cases, style may not be a dynamic id, so we do a full search.
                ResourceReference ref = resolveId(resId);
                if (ref != null) {
                    style = mRenderResources.getStyle(ref.getName(), ref.isFramework());
                }
            }

            if (style == null) {
                throw new Resources.NotFoundException();
            }
        }

        if (mTypedArrayCache == null) {
            mTypedArrayCache = new TypedArrayCache();
        }

        List<StyleResourceValue> currentThemes = mRenderResources.getAllThemes();

        Pair<BridgeTypedArray, PropertiesMap> typeArrayAndPropertiesPair =
                mTypedArrayCache.get(attrs, currentThemes, resId);

        if (typeArrayAndPropertiesPair == null) {
            typeArrayAndPropertiesPair = createStyleBasedTypedArray(style, attrs);
            mTypedArrayCache.put(attrs, currentThemes, resId, typeArrayAndPropertiesPair);
        }
        // Add value to defaultPropsMap if needed
        if (typeArrayAndPropertiesPair.getSecond() != null) {
            BridgeXmlBlockParser parser = getCurrentParser();
            Object key = parser != null ? parser.getViewCookie() : null;
            if (key != null) {
                PropertiesMap defaultPropMap = mDefaultPropMaps.get(key);
                if (defaultPropMap == null) {
                    defaultPropMap = typeArrayAndPropertiesPair.getSecond();
                    mDefaultPropMaps.put(key, defaultPropMap);
                } else {
                    defaultPropMap.putAll(typeArrayAndPropertiesPair.getSecond());
                }
            }
        }
        return typeArrayAndPropertiesPair.getFirst();
!!!76171959.java!!!	obtainStyledAttributes(inout set : AttributeSet, inout attrs : int [[]]) : BridgeTypedArray
        return obtainStyledAttributes(set, attrs, 0, 0);
!!!76172087.java!!!	obtainStyledAttributes(inout set : AttributeSet, inout attrs : int [[]], in defStyleAttr : int, in defStyleRes : int) : BridgeTypedArray

        PropertiesMap defaultPropMap = null;
        boolean isPlatformFile = true;

        // Hint: for XmlPullParser, attach source //DEVICE_SRC/dalvik/libcore/xml/src/java
        if (set instanceof BridgeXmlBlockParser) {
            BridgeXmlBlockParser parser;
            parser = (BridgeXmlBlockParser)set;

            isPlatformFile = parser.isPlatformFile();

            Object key = parser.getViewCookie();
            if (key != null) {
                defaultPropMap = mDefaultPropMaps.get(key);
                if (defaultPropMap == null) {
                    defaultPropMap = new PropertiesMap();
                    mDefaultPropMaps.put(key, defaultPropMap);
                }
            }

        } else if (set instanceof BridgeLayoutParamsMapAttributes) {
            // this is only for temp layout params generated dynamically, so this is never
            // platform content.
            isPlatformFile = false;
        } else if (set != null) { // null parser is ok
            // really this should not be happening since its instantiated in Bridge
            Bridge.getLog().error(LayoutLog.TAG_BROKEN,
                    "Parser is not a BridgeXmlBlockParser!", null);
            return null;
        }

        List<Pair<String, Boolean>> attributeList = searchAttrs(attrs);

        BridgeTypedArray ta =
                Resources_Delegate.newTypeArray(mSystemResources, attrs.length, isPlatformFile);

        // look for a custom style.
        String customStyle = null;
        if (set != null) {
            customStyle = set.getAttributeValue(null, "style");
        }

        StyleResourceValue customStyleValues = null;
        if (customStyle != null) {
            ResourceValue item = mRenderResources.findResValue(customStyle,
                    isPlatformFile /*forceFrameworkOnly*/);

            // resolve it in case it links to something else
            item = mRenderResources.resolveResValue(item);

            if (item instanceof StyleResourceValue) {
                customStyleValues = (StyleResourceValue)item;
            }
        }

        // resolve the defStyleAttr value into a IStyleResourceValue
        StyleResourceValue defStyleValues = null;

        if (defStyleAttr != 0) {
            // get the name from the int.
            Pair<String, Boolean> defStyleAttribute = searchAttr(defStyleAttr);

            if (defStyleAttribute == null) {
                // This should be rare. Happens trying to map R.style.foo to @style/foo fails.
                // This will happen if the user explicitly used a non existing int value for
                // defStyleAttr or there's something wrong with the project structure/build.
                Bridge.getLog().error(LayoutLog.TAG_RESOURCES_RESOLVE,
                        "Failed to find the style corresponding to the id " + defStyleAttr, null);
            } else {
                String defStyleName = defStyleAttribute.getFirst();

                // look for the style in the current theme, and its parent:
                ResourceValue item = mRenderResources.findItemInTheme(defStyleName,
                        defStyleAttribute.getSecond());

                if (item != null) {
                    // item is a reference to a style entry. Search for it.
                    item = mRenderResources.findResValue(item.getValue(), item.isFramework());
                    item = mRenderResources.resolveResValue(item);
                    if (item instanceof StyleResourceValue) {
                        defStyleValues = (StyleResourceValue) item;
                    }
                    if (defaultPropMap != null) {
                        if (defStyleAttribute.getSecond()) {
                            defStyleName = "android:" + defStyleName;
                        }
                        defaultPropMap.put("style", new Property(defStyleName, item.getValue()));
                    }
                } else {
                    Bridge.getLog().error(LayoutLog.TAG_RESOURCES_RESOLVE_THEME_ATTR,
                            String.format(
                                    "Failed to find style '%s' in current theme",
                                    defStyleAttribute.getFirst()),
                            null);
                }
            }
        } else if (defStyleRes != 0) {
            StyleResourceValue item = getStyleByDynamicId(defStyleRes);
            if (item != null) {
                defStyleValues = item;
            } else {
                boolean isFrameworkRes = true;
                Pair<ResourceType, String> value = Bridge.resolveResourceId(defStyleRes);
                if (value == null) {
                    value = mLayoutlibCallback.resolveResourceId(defStyleRes);
                    isFrameworkRes = false;
                }

                if (value != null) {
                    if ((value.getFirst() == ResourceType.STYLE)) {
                        // look for the style in all resources:
                        item = mRenderResources.getStyle(value.getSecond(), isFrameworkRes);
                        if (item != null) {
                            if (defaultPropMap != null) {
                                String name = item.getName();
                                defaultPropMap.put("style", new Property(name, name));
                            }

                            defStyleValues = item;
                        } else {
                            Bridge.getLog().error(null,
                                    String.format(
                                            "Style with id 0x%x (resolved to '%s') does not exist.",
                                            defStyleRes, value.getSecond()),
                                    null);
                        }
                    } else {
                        Bridge.getLog().error(null,
                                String.format(
                                        "Resource id 0x%x is not of type STYLE (instead %s)",
                                        defStyleRes, value.getFirst().toString()),
                                null);
                    }
                } else {
                    Bridge.getLog().error(null,
                            String.format(
                                    "Failed to find style with id 0x%x in current theme",
                                    defStyleRes),
                            null);
                }
            }
        }

        String appNamespace = mLayoutlibCallback.getNamespace();

        if (attributeList != null) {
            for (int index = 0 ; index < attributeList.size() ; index++) {
                Pair<String, Boolean> attribute = attributeList.get(index);

                if (attribute == null) {
                    continue;
                }

                String attrName = attribute.getFirst();
                boolean frameworkAttr = attribute.getSecond();
                String value = null;
                if (set != null) {
                    value = set.getAttributeValue(
                            frameworkAttr ? BridgeConstants.NS_RESOURCES : appNamespace,
                                    attrName);

                    // if this is an app attribute, and the first get fails, try with the
                    // new res-auto namespace as well
                    if (!frameworkAttr && value == null) {
                        value = set.getAttributeValue(BridgeConstants.NS_APP_RES_AUTO, attrName);
                    }
                }

                // if there's no direct value for this attribute in the XML, we look for default
                // values in the widget defStyle, and then in the theme.
                if (value == null) {
                    ResourceValue resValue = null;

                    // look for the value in the custom style first (and its parent if needed)
                    if (customStyleValues != null) {
                        resValue = mRenderResources.findItemInStyle(customStyleValues,
                                attrName, frameworkAttr);
                    }

                    // then look for the value in the default Style (and its parent if needed)
                    if (resValue == null && defStyleValues != null) {
                        resValue = mRenderResources.findItemInStyle(defStyleValues,
                                attrName, frameworkAttr);
                    }

                    // if the item is not present in the defStyle, we look in the main theme (and
                    // its parent themes)
                    if (resValue == null) {
                        resValue = mRenderResources.findItemInTheme(attrName, frameworkAttr);
                    }

                    // if we found a value, we make sure this doesn't reference another value.
                    // So we resolve it.
                    if (resValue != null) {
                        String preResolve = resValue.getValue();
                        resValue = mRenderResources.resolveResValue(resValue);

                        if (defaultPropMap != null) {
                            defaultPropMap.put(
                                    frameworkAttr ? SdkConstants.PREFIX_ANDROID + attrName :
                                            attrName,
                                    new Property(preResolve, resValue.getValue()));
                        }

                        // If the value is a reference to another theme attribute that doesn't
                        // exist, we should log a warning and omit it.
                        String val = resValue.getValue();
                        if (val != null && val.startsWith(SdkConstants.PREFIX_THEME_REF)) {
                            if (!attrName.equals(RTL_ATTRS.get(val)) ||
                                    getApplicationInfo().targetSdkVersion <
                                            VERSION_CODES.JELLY_BEAN_MR1) {
                                // Only log a warning if the referenced value isn't one of the RTL
                                // attributes, or the app targets old API.
                                Bridge.getLog().warning(LayoutLog.TAG_RESOURCES_RESOLVE_THEME_ATTR,
                                        String.format("Failed to find '%s' in current theme.", val),
                                        val);
                            }
                            resValue = null;
                        }
                    }

                    ta.bridgeSetValue(index, attrName, frameworkAttr, resValue);
                } else {
                    // there is a value in the XML, but we need to resolve it in case it's
                    // referencing another resource or a theme value.
                    ta.bridgeSetValue(index, attrName, frameworkAttr,
                            mRenderResources.resolveValue(null, attrName, value, isPlatformFile));
                }
            }
        }

        ta.sealArray();

        return ta;
!!!76172215.java!!!	getMainLooper() : Looper
        return Looper.myLooper();
!!!76172343.java!!!	getPackageName() : String
        if (mApplicationInfo.packageName == null) {
            mApplicationInfo.packageName = mLayoutlibCallback.getFlag(FLAG_KEY_APPLICATION_PACKAGE);
        }
        return mApplicationInfo.packageName;
!!!76172471.java!!!	getPackageManager() : PackageManager
        if (mPackageManager == null) {
            mPackageManager = new BridgePackageManager();
        }
        return mPackageManager;
!!!76172599.java!!!	createStyleBasedTypedArray(inout style : StyleResourceValue, inout attrs : int [[]]) : BridgeTypedArray
        List<Pair<String, Boolean>> attributes = searchAttrs(attrs);

        BridgeTypedArray ta =
                Resources_Delegate.newTypeArray(mSystemResources, attrs.length, false);

        PropertiesMap defaultPropMap = new PropertiesMap();
        // for each attribute, get its name so that we can search it in the style
        for (int i = 0; i < attrs.length; i++) {
            Pair<String, Boolean> attribute = attributes.get(i);

            if (attribute != null) {
                // look for the value in the given style
                ResourceValue resValue;
                String attrName = attribute.getFirst();
                boolean frameworkAttr = attribute.getSecond();
                if (style != null) {
                    resValue = mRenderResources.findItemInStyle(style, attrName, frameworkAttr);
                } else {
                    resValue = mRenderResources.findItemInTheme(attrName, frameworkAttr);
                }

                if (resValue != null) {
                    // Add it to defaultPropMap before resolving
                    String preResolve = resValue.getValue();
                    // resolve it to make sure there are no references left.
                    resValue = mRenderResources.resolveResValue(resValue);
                    ta.bridgeSetValue(i, attrName, frameworkAttr, resValue);
                    defaultPropMap.put(
                            frameworkAttr ? SdkConstants.ANDROID_PREFIX + attrName : attrName,
                            new Property(preResolve, resValue.getValue()));
                }
            }
        }

        ta.sealArray();

        return Pair.of(ta, defaultPropMap);
!!!76172727.java!!!	searchAttrs(inout attrs : int [[]]) : List<Pair<String, Boolean>>
        List<Pair<String, Boolean>> results = new ArrayList<>(attrs.length);

        // for each attribute, get its name so that we can search it in the style
        for (int attr : attrs) {
            Pair<ResourceType, String> resolvedResource = Bridge.resolveResourceId(attr);
            boolean isFramework = false;
            if (resolvedResource != null) {
                isFramework = true;
            } else {
                resolvedResource = mLayoutlibCallback.resolveResourceId(attr);
            }

            if (resolvedResource != null) {
                results.add(Pair.of(resolvedResource.getSecond(), isFramework));
            } else {
                results.add(null);
            }
        }

        return results;
!!!76172855.java!!!	searchAttr(in attr : int) : String
        Pair<ResourceType, String> info = Bridge.resolveResourceId(attr);
        if (info != null) {
            return Pair.of(info.getSecond(), Boolean.TRUE);
        }

        info = mLayoutlibCallback.resolveResourceId(attr);
        if (info != null) {
            return Pair.of(info.getSecond(), Boolean.FALSE);
        }

        return null;
!!!76172983.java!!!	getDynamicIdByStyle(inout resValue : StyleResourceValue) : int
        if (mDynamicIdToStyleMap == null) {
            // create the maps.
            mDynamicIdToStyleMap = new HashMap<>();
            mStyleToDynamicIdMap = new HashMap<>();
        }

        // look for an existing id
        Integer id = mStyleToDynamicIdMap.get(resValue);

        if (id == null) {
            // generate a new id
            id = ++mDynamicIdGenerator;

            // and add it to the maps.
            mDynamicIdToStyleMap.put(id, resValue);
            mStyleToDynamicIdMap.put(resValue, id);
        }

        return id;
!!!76173111.java!!!	getStyleByDynamicId(in i : int) : StyleResourceValue
        if (mDynamicIdToStyleMap != null) {
            return mDynamicIdToStyleMap.get(i);
        }

        return null;
!!!76173239.java!!!	getFrameworkResourceValue(inout resType : ResourceType, inout resName : String, in defValue : int) : int
        if (getRenderResources().getFrameworkResource(resType, resName) != null) {
            // Bridge.getResourceId creates a new resource id if an existing one isn't found. So,
            // we check for the existence of the resource before calling it.
            return Bridge.getResourceId(resType, resName);
        }

        return defValue;
!!!76173367.java!!!	getProjectResourceValue(inout resType : ResourceType, inout resName : String, in defValue : int) : int
        // getResourceId creates a new resource id if an existing resource id isn't found. So, we
        // check for the existence of the resource before calling it.
        if (getRenderResources().getProjectResource(resType, resName) != null) {
            if (mLayoutlibCallback != null) {
                Integer value = mLayoutlibCallback.getResourceId(resType, resName);
                if (value != null) {
                    return value;
                }
            }
        }

        return defValue;
!!!76173495.java!!!	getBaseContext(inout context : Context) : Context
        while (context instanceof ContextWrapper) {
            context = ((ContextWrapper) context).getBaseContext();
        }
        return context;
!!!76173623.java!!!	getBinder() : IBinder
        if (mBinder == null) {
            // create a dummy binder. We only need it be not null.
            mBinder = new IBinder() {
                @Override
                public String getInterfaceDescriptor() throws RemoteException {
                    return null;
                }

                @Override
                public boolean pingBinder() {
                    return false;
                }

                @Override
                public boolean isBinderAlive() {
                    return false;
                }

                @Override
                public IInterface queryLocalInterface(String descriptor) {
                    return null;
                }

                @Override
                public void dump(FileDescriptor fd, String[] args) throws RemoteException {

                }

                @Override
                public void dumpAsync(FileDescriptor fd, String[] args) throws RemoteException {

                }

                @Override
                public boolean transact(int code, Parcel data, Parcel reply, int flags)
                        throws RemoteException {
                    return false;
                }

                @Override
                public void linkToDeath(DeathRecipient recipient, int flags)
                        throws RemoteException {

                }

                @Override
                public boolean unlinkToDeath(DeathRecipient recipient, int flags) {
                    return false;
                }

                @Override
                public void shellCommand(FileDescriptor in, FileDescriptor out, FileDescriptor err,
                  String[] args, ResultReceiver resultReceiver) {
                }
            };
        }
        return mBinder;
!!!76173751.java!!!	bindService(inout arg0 : Intent, inout arg1 : ServiceConnection, in arg2 : int) : boolean
        // pass
        return false;
!!!76173879.java!!!	checkCallingOrSelfPermission(inout arg0 : String) : int
        // pass
        return 0;
!!!76174007.java!!!	checkCallingOrSelfUriPermission(inout arg0 : Uri, in arg1 : int) : int
        // pass
        return 0;
!!!76174135.java!!!	checkCallingPermission(inout arg0 : String) : int
        // pass
        return 0;
!!!76174263.java!!!	checkCallingUriPermission(inout arg0 : Uri, in arg1 : int) : int
        // pass
        return 0;
!!!76174391.java!!!	checkPermission(inout arg0 : String, in arg1 : int, in arg2 : int) : int
        // pass
        return 0;
!!!76174519.java!!!	checkSelfPermission(inout arg0 : String) : int
        // pass
        return 0;
!!!76174647.java!!!	checkPermission(inout arg0 : String, in arg1 : int, in arg2 : int, inout arg3 : IBinder) : int
        // pass
        return 0;
!!!76174775.java!!!	checkUriPermission(inout arg0 : Uri, in arg1 : int, in arg2 : int, in arg3 : int) : int
        // pass
        return 0;
!!!76174903.java!!!	checkUriPermission(inout arg0 : Uri, in arg1 : int, in arg2 : int, in arg3 : int, inout arg4 : IBinder) : int
        // pass
        return 0;
!!!76175031.java!!!	checkUriPermission(inout arg0 : Uri, inout arg1 : String, inout arg2 : String, in arg3 : int, in arg4 : int, in arg5 : int) : int
        // pass
        return 0;
!!!76175159.java!!!	clearWallpaper() : void
        // pass

!!!76175287.java!!!	createPackageContext(inout arg0 : String, in arg1 : int) : Context
        // pass
        return null;
!!!76175415.java!!!	createPackageContextAsUser(inout arg0 : String, in arg1 : int, inout user : UserHandle) : Context
        // pass
        return null;
!!!76175543.java!!!	createConfigurationContext(inout overrideConfiguration : Configuration) : Context
        // pass
        return null;
!!!76175671.java!!!	createDisplayContext(inout display : Display) : Context
        // pass
        return null;
!!!76175799.java!!!	databaseList() : String
        // pass
        return null;
!!!76175927.java!!!	createApplicationContext(inout application : ApplicationInfo, in flags : int) : Context
        return null;
!!!76176055.java!!!	moveDatabaseFrom(inout sourceContext : Context, inout name : String) : boolean
        // pass
        return false;
!!!76176183.java!!!	deleteDatabase(inout arg0 : String) : boolean
        // pass
        return false;
!!!76176311.java!!!	deleteFile(inout arg0 : String) : boolean
        // pass
        return false;
!!!76176439.java!!!	enforceCallingOrSelfPermission(inout arg0 : String, inout arg1 : String) : void
        // pass

!!!76176567.java!!!	enforceCallingOrSelfUriPermission(inout arg0 : Uri, in arg1 : int, inout arg2 : String) : void
        // pass

!!!76176695.java!!!	enforceCallingPermission(inout arg0 : String, inout arg1 : String) : void
        // pass

!!!76176823.java!!!	enforceCallingUriPermission(inout arg0 : Uri, in arg1 : int, inout arg2 : String) : void
        // pass

!!!76176951.java!!!	enforcePermission(inout arg0 : String, in arg1 : int, in arg2 : int, inout arg3 : String) : void
        // pass

!!!76177079.java!!!	enforceUriPermission(inout arg0 : Uri, in arg1 : int, in arg2 : int, in arg3 : int, inout arg4 : String) : void
        // pass

!!!76177207.java!!!	enforceUriPermission(inout arg0 : Uri, inout arg1 : String, inout arg2 : String, in arg3 : int, in arg4 : int, in arg5 : int, inout arg6 : String) : void
        // pass

!!!76177335.java!!!	fileList() : String
        // pass
        return null;
!!!76177463.java!!!	getAssets() : BridgeAssetManager
        return mAssets;
!!!76177591.java!!!	getCacheDir() : File
        // pass
        return null;
!!!76177719.java!!!	getCodeCacheDir() : File
        // pass
        return null;
!!!76177847.java!!!	getExternalCacheDir() : File
        // pass
        return null;
!!!76177975.java!!!	getContentResolver() : ContentResolver
        if (mContentResolver == null) {
            mContentResolver = new BridgeContentResolver(this);
        }
        return mContentResolver;
!!!76178103.java!!!	getDatabasePath(inout arg0 : String) : File
        // pass
        return null;
!!!76178231.java!!!	getDir(inout arg0 : String, in arg1 : int) : File
        // pass
        return null;
!!!76178359.java!!!	getFileStreamPath(inout arg0 : String) : File
        // pass
        return null;
!!!76178487.java!!!	getSharedPreferencesPath(inout name : String) : File
        // pass
        return null;
!!!76178615.java!!!	getDataDir() : File
        // pass
        return null;
!!!76178743.java!!!	getFilesDir() : File
        // pass
        return null;
!!!76178871.java!!!	getNoBackupFilesDir() : File
        // pass
        return null;
!!!76178999.java!!!	getExternalFilesDir(inout type : String) : File
        // pass
        return null;
!!!76179127.java!!!	getPackageCodePath() : String
        // pass
        return null;
!!!76179255.java!!!	getBasePackageName() : String
        // pass
        return null;
!!!76179383.java!!!	getOpPackageName() : String
        // pass
        return null;
!!!76179511.java!!!	getApplicationInfo() : ApplicationInfo
        return mApplicationInfo;
!!!76179639.java!!!	getPackageResourcePath() : String
        // pass
        return null;
!!!76179767.java!!!	getSharedPreferences(inout arg0 : String, in arg1 : int) : SharedPreferences
        if (mSharedPreferences == null) {
            mSharedPreferences = new BridgeSharedPreferences();
        }
        return mSharedPreferences;
!!!76179895.java!!!	getSharedPreferences(inout arg0 : File, in arg1 : int) : SharedPreferences
        if (mSharedPreferences == null) {
            mSharedPreferences = new BridgeSharedPreferences();
        }
        return mSharedPreferences;
!!!76180023.java!!!	moveSharedPreferencesFrom(inout sourceContext : Context, inout name : String) : boolean
        // pass
        return false;
!!!76180151.java!!!	deleteSharedPreferences(inout name : String) : boolean
        // pass
        return false;
!!!76180279.java!!!	getWallpaper() : Drawable
        // pass
        return null;
!!!76180407.java!!!	getWallpaperDesiredMinimumWidth() : int
        return -1;
!!!76180535.java!!!	getWallpaperDesiredMinimumHeight() : int
        return -1;
!!!76180663.java!!!	grantUriPermission(inout arg0 : String, inout arg1 : Uri, in arg2 : int) : void
        // pass

!!!76180791.java!!!	openFileInput(inout arg0 : String) : FileInputStream
        // pass
        return null;
!!!76180919.java!!!	openFileOutput(inout arg0 : String, in arg1 : int) : FileOutputStream
        // pass
        return null;
!!!76181047.java!!!	openOrCreateDatabase(inout arg0 : String, in arg1 : int, inout arg2 : SQLiteDatabase::CursorFactory) : SQLiteDatabase
        // pass
        return null;
!!!76181175.java!!!	openOrCreateDatabase(inout arg0 : String, in arg1 : int, inout arg2 : SQLiteDatabase::CursorFactory, inout arg3 : DatabaseErrorHandler) : SQLiteDatabase
        // pass
        return null;
!!!76181303.java!!!	peekWallpaper() : Drawable
        // pass
        return null;
!!!76181431.java!!!	registerReceiver(inout arg0 : BroadcastReceiver, inout arg1 : IntentFilter) : Intent
        // pass
        return null;
!!!76181559.java!!!	registerReceiver(inout arg0 : BroadcastReceiver, inout arg1 : IntentFilter, inout arg2 : String, inout arg3 : Handler) : Intent
        // pass
        return null;
!!!76181687.java!!!	registerReceiverAsUser(inout arg0 : BroadcastReceiver, inout arg0p5 : UserHandle, inout arg1 : IntentFilter, inout arg2 : String, inout arg3 : Handler) : Intent
        // pass
        return null;
!!!76181815.java!!!	removeStickyBroadcast(inout arg0 : Intent) : void
        // pass

!!!76181943.java!!!	revokeUriPermission(inout arg0 : Uri, in arg1 : int) : void
        // pass

!!!76182071.java!!!	sendBroadcast(inout arg0 : Intent) : void
        // pass

!!!76182199.java!!!	sendBroadcast(inout arg0 : Intent, inout arg1 : String) : void
        // pass

!!!76182327.java!!!	sendBroadcastMultiplePermissions(inout intent : Intent, inout receiverPermissions : String [[]]) : void
        // pass

!!!76182455.java!!!	sendBroadcast(inout arg0 : Intent, inout arg1 : String, inout arg2 : Bundle) : void
        // pass

!!!76182583.java!!!	sendBroadcast(inout intent : Intent, inout receiverPermission : String, in appOp : int) : void
        // pass
!!!76182711.java!!!	sendOrderedBroadcast(inout arg0 : Intent, inout arg1 : String) : void
        // pass

!!!76182839.java!!!	sendOrderedBroadcast(inout arg0 : Intent, inout arg1 : String, inout arg2 : BroadcastReceiver, inout arg3 : Handler, in arg4 : int, inout arg5 : String, inout arg6 : Bundle) : void
        // pass

!!!76182967.java!!!	sendOrderedBroadcast(inout arg0 : Intent, inout arg1 : String, inout arg7 : Bundle, inout arg2 : BroadcastReceiver, inout arg3 : Handler, in arg4 : int, inout arg5 : String, inout arg6 : Bundle) : void
        // pass

!!!76183095.java!!!	sendOrderedBroadcast(inout intent : Intent, inout receiverPermission : String, in appOp : int, inout resultReceiver : BroadcastReceiver, inout scheduler : Handler, in initialCode : int, inout initialData : String, inout initialExtras : Bundle) : void
        // pass
!!!76183223.java!!!	sendBroadcastAsUser(inout intent : Intent, inout user : UserHandle) : void
        // pass
!!!76183351.java!!!	sendBroadcastAsUser(inout intent : Intent, inout user : UserHandle, inout receiverPermission : String) : void
        // pass
!!!76183479.java!!!	sendBroadcastAsUser(inout intent : Intent, inout user : UserHandle, inout receiverPermission : String, in appOp : int) : void
        // pass
!!!76183607.java!!!	sendOrderedBroadcastAsUser(inout intent : Intent, inout user : UserHandle, inout receiverPermission : String, inout resultReceiver : BroadcastReceiver, inout scheduler : Handler, in initialCode : int, inout initialData : String, inout initialExtras : Bundle) : void
        // pass
!!!76183735.java!!!	sendOrderedBroadcastAsUser(inout intent : Intent, inout user : UserHandle, inout receiverPermission : String, in appOp : int, inout resultReceiver : BroadcastReceiver, inout scheduler : Handler, in initialCode : int, inout initialData : String, inout initialExtras : Bundle) : void
        // pass
!!!76183863.java!!!	sendOrderedBroadcastAsUser(inout intent : Intent, inout user : UserHandle, inout receiverPermission : String, in appOp : int, inout options : Bundle, inout resultReceiver : BroadcastReceiver, inout scheduler : Handler, in initialCode : int, inout initialData : String, inout initialExtras : Bundle) : void
        // pass
!!!76183991.java!!!	sendStickyBroadcast(inout arg0 : Intent) : void
        // pass

!!!76184119.java!!!	sendStickyOrderedBroadcast(inout intent : Intent, inout resultReceiver : BroadcastReceiver, inout scheduler : Handler, in initialCode : int, inout initialData : String, inout initialExtras : Bundle) : void
        // pass
!!!76184247.java!!!	sendStickyBroadcastAsUser(inout intent : Intent, inout user : UserHandle) : void
        // pass
!!!76184375.java!!!	sendStickyBroadcastAsUser(inout intent : Intent, inout user : UserHandle, inout options : Bundle) : void
        // pass
!!!76184503.java!!!	sendStickyOrderedBroadcastAsUser(inout intent : Intent, inout user : UserHandle, inout resultReceiver : BroadcastReceiver, inout scheduler : Handler, in initialCode : int, inout initialData : String, inout initialExtras : Bundle) : void
        // pass
!!!76184631.java!!!	removeStickyBroadcastAsUser(inout intent : Intent, inout user : UserHandle) : void
        // pass
!!!76184759.java!!!	setTheme(in arg0 : int) : void
        // pass

!!!76184887.java!!!	setWallpaper(inout arg0 : Bitmap) : void
        // pass

!!!76185015.java!!!	setWallpaper(inout arg0 : InputStream) : void
        // pass

!!!76185143.java!!!	startActivity(inout arg0 : Intent) : void
        // pass
!!!76185271.java!!!	startActivity(inout arg0 : Intent, inout arg1 : Bundle) : void
        // pass
!!!76185399.java!!!	startIntentSender(inout intent : IntentSender, inout fillInIntent : Intent, in flagsMask : int, in flagsValues : int, in extraFlags : int) : void
        // pass
!!!76185527.java!!!	startIntentSender(inout intent : IntentSender, inout fillInIntent : Intent, in flagsMask : int, in flagsValues : int, in extraFlags : int, inout options : Bundle) : void
        // pass
!!!76185655.java!!!	startInstrumentation(inout arg0 : ComponentName, inout arg1 : String, inout arg2 : Bundle) : boolean
        // pass
        return false;
!!!76185783.java!!!	startService(inout arg0 : Intent) : ComponentName
        // pass
        return null;
!!!76185911.java!!!	stopService(inout arg0 : Intent) : boolean
        // pass
        return false;
!!!76186039.java!!!	startServiceAsUser(inout arg0 : Intent, inout arg1 : UserHandle) : ComponentName
        // pass
        return null;
!!!76186167.java!!!	stopServiceAsUser(inout arg0 : Intent, inout arg1 : UserHandle) : boolean
        // pass
        return false;
!!!76186295.java!!!	unbindService(inout arg0 : ServiceConnection) : void
        // pass

!!!76186423.java!!!	unregisterReceiver(inout arg0 : BroadcastReceiver) : void
        // pass

!!!76186551.java!!!	getApplicationContext() : Context
        return this;
!!!76186679.java!!!	startActivities(inout arg0 : Intent [[]]) : void
        // pass

!!!76186807.java!!!	startActivities(inout arg0 : Intent [[]], inout arg1 : Bundle) : void
        // pass

!!!76186935.java!!!	isRestricted() : boolean
        return false;
!!!76187063.java!!!	getObbDir() : File
        Bridge.getLog().error(LayoutLog.TAG_UNSUPPORTED, "OBB not supported", null);
        return null;
!!!76187191.java!!!	getDisplayAdjustments(in displayId : int) : DisplayAdjustments
        // pass
        return null;
!!!76187319.java!!!	getDisplay() : Display
        // pass
        return null;
!!!76187447.java!!!	getUserId() : int
        return 0; // not used
!!!76187575.java!!!	getExternalFilesDirs(inout type : String) : File
        // pass
        return new File[0];
!!!76187703.java!!!	getObbDirs() : File
        // pass
        return new File[0];
!!!76187831.java!!!	getExternalCacheDirs() : File
        // pass
        return new File[0];
!!!76187959.java!!!	getExternalMediaDirs() : File
        // pass
        return new File[0];
!!!76188087.java!!!	setScrollYPos(inout view : View, in scrollPos : int) : void
        mScrollYPos.put(view, scrollPos);
!!!76188215.java!!!	getScrollYPos(inout view : View) : int
        Integer pos = mScrollYPos.get(view);
        return pos != null ? pos : 0;
!!!76188343.java!!!	setScrollXPos(inout view : View, in scrollPos : int) : void
        mScrollXPos.put(view, scrollPos);
!!!76188471.java!!!	getScrollXPos(inout view : View) : int
        Integer pos = mScrollXPos.get(view);
        return pos != null ? pos : 0;
!!!76188599.java!!!	createDeviceProtectedStorageContext() : Context
        // pass
        return null;
!!!76188727.java!!!	createCredentialProtectedStorageContext() : Context
        // pass
        return null;
!!!76188855.java!!!	isDeviceProtectedStorage() : boolean
        return false;
!!!76188983.java!!!	isCredentialProtectedStorage() : boolean
        return false;
