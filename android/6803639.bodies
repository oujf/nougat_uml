class Paint_Delegate
!!!76047799.java!!!	getDelegate(in native_paint : long) : Paint_Delegate
        return sManager.getDelegate(native_paint);
!!!76047927.java!!!	getFonts() : Paint_Delegate::FontInfo
        return mFonts;
!!!76048055.java!!!	isAntiAliased() : boolean
        return (mFlags & Paint.ANTI_ALIAS_FLAG) != 0;
!!!76048183.java!!!	isFilterBitmap() : boolean
        return (mFlags & Paint.FILTER_BITMAP_FLAG) != 0;
!!!76048311.java!!!	getStyle() : int
        return mStyle;
!!!76048439.java!!!	getColor() : int
        return mColor;
!!!76048567.java!!!	getAlpha() : int
        return mColor >>> 24;
!!!76048695.java!!!	setAlpha(in alpha : int) : void
        mColor = (alpha << 24) | (mColor & 0x00FFFFFF);
!!!76048823.java!!!	getTextAlign() : int
        return mTextAlign;
!!!76048951.java!!!	getStrokeWidth() : float
        return mStrokeWidth;
!!!76049079.java!!!	getJavaStrokeMiter() : float
        return mStrokeMiter;
!!!76049207.java!!!	getJavaCap() : int
        switch (Paint.sCapArray[mCap]) {
            case BUTT:
                return BasicStroke.CAP_BUTT;
            case ROUND:
                return BasicStroke.CAP_ROUND;
            default:
            case SQUARE:
                return BasicStroke.CAP_SQUARE;
        }
!!!76049335.java!!!	getJavaJoin() : int
        switch (Paint.sJoinArray[mJoin]) {
            default:
            case MITER:
                return BasicStroke.JOIN_MITER;
            case ROUND:
                return BasicStroke.JOIN_ROUND;
            case BEVEL:
                return BasicStroke.JOIN_BEVEL;
        }
!!!76049463.java!!!	getJavaStroke() : Stroke
        if (mPathEffect != null) {
            if (mPathEffect.isSupported()) {
                Stroke stroke = mPathEffect.getStroke(this);
                assert stroke != null;
                if (stroke != null) {
                    return stroke;
                }
            } else {
                Bridge.getLog().fidelityWarning(LayoutLog.TAG_PATHEFFECT,
                        mPathEffect.getSupportMessage(),
                        null, null /*data*/);
            }
        }

        // if no custom stroke as been set, set the default one.
        return new BasicStroke(
                    getStrokeWidth(),
                    getJavaCap(),
                    getJavaJoin(),
                    getJavaStrokeMiter());
!!!76049591.java!!!	getXfermode() : Xfermode_Delegate
        return mXfermode;
!!!76049719.java!!!	getColorFilter() : ColorFilter_Delegate
        return mColorFilter;
!!!76049847.java!!!	setColorFilter(in colorFilterPtr : long) : void
        mColorFilter = ColorFilter_Delegate.getDelegate(colorFilterPtr);
!!!76049975.java!!!	setShader(in shaderPtr : long) : void
        mShader = Shader_Delegate.getDelegate(shaderPtr);
!!!76050103.java!!!	getShader() : Shader_Delegate
        return mShader;
!!!76050231.java!!!	getMaskFilter() : MaskFilter_Delegate
        return mMaskFilter;
!!!76050359.java!!!	getRasterizer() : Rasterizer_Delegate
        return mRasterizer;
!!!76050487.java!!!	nGetFlags(inout thisPaint : Paint, in nativePaint : long) : int
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(nativePaint);
        if (delegate == null) {
            return 0;
        }

        return delegate.mFlags;
!!!76050615.java!!!	nSetFlags(inout thisPaint : Paint, in nativePaint : long, in flags : int) : void
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(nativePaint);
        if (delegate == null) {
            return;
        }

        delegate.mFlags = flags;
!!!76050743.java!!!	nSetFilterBitmap(inout thisPaint : Paint, in nativePaint : long, inout filter : boolean) : void
        setFlag(nativePaint, Paint.FILTER_BITMAP_FLAG, filter);
!!!76050871.java!!!	nGetHinting(inout thisPaint : Paint, in nativePaint : long) : int
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(nativePaint);
        if (delegate == null) {
            return Paint.HINTING_ON;
        }

        return delegate.mHintingMode;
!!!76050999.java!!!	nSetHinting(inout thisPaint : Paint, in nativePaint : long, in mode : int) : void
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(nativePaint);
        if (delegate == null) {
            return;
        }

        delegate.mHintingMode = mode;
!!!76051127.java!!!	nSetAntiAlias(inout thisPaint : Paint, in nativePaint : long, inout aa : boolean) : void
        setFlag(nativePaint, Paint.ANTI_ALIAS_FLAG, aa);
!!!76051255.java!!!	nSetSubpixelText(inout thisPaint : Paint, in nativePaint : long, inout subpixelText : boolean) : void
        setFlag(nativePaint, Paint.SUBPIXEL_TEXT_FLAG, subpixelText);
!!!76051383.java!!!	nSetUnderlineText(inout thisPaint : Paint, in nativePaint : long, inout underlineText : boolean) : void
        setFlag(nativePaint, Paint.UNDERLINE_TEXT_FLAG, underlineText);
!!!76051511.java!!!	nSetStrikeThruText(inout thisPaint : Paint, in nativePaint : long, inout strikeThruText : boolean) : void
        setFlag(nativePaint, Paint.STRIKE_THRU_TEXT_FLAG, strikeThruText);
!!!76051639.java!!!	nSetFakeBoldText(inout thisPaint : Paint, in nativePaint : long, inout fakeBoldText : boolean) : void
        setFlag(nativePaint, Paint.FAKE_BOLD_TEXT_FLAG, fakeBoldText);
!!!76051767.java!!!	nSetDither(inout thisPaint : Paint, in nativePaint : long, inout dither : boolean) : void
        setFlag(nativePaint, Paint.DITHER_FLAG, dither);
!!!76051895.java!!!	nSetLinearText(inout thisPaint : Paint, in nativePaint : long, inout linearText : boolean) : void
        setFlag(nativePaint, Paint.LINEAR_TEXT_FLAG, linearText);
!!!76052023.java!!!	nGetColor(inout thisPaint : Paint, in nativePaint : long) : int
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(nativePaint);
        if (delegate == null) {
            return 0;
        }

        return delegate.mColor;
!!!76052151.java!!!	nSetColor(inout thisPaint : Paint, in nativePaint : long, in color : int) : void
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(nativePaint);
        if (delegate == null) {
            return;
        }

        delegate.mColor = color;
!!!76052279.java!!!	nGetAlpha(inout thisPaint : Paint, in nativePaint : long) : int
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(nativePaint);
        if (delegate == null) {
            return 0;
        }

        return delegate.getAlpha();
!!!76052407.java!!!	nSetAlpha(inout thisPaint : Paint, in nativePaint : long, in a : int) : void
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(nativePaint);
        if (delegate == null) {
            return;
        }

        delegate.setAlpha(a);
!!!76052535.java!!!	nGetStrokeWidth(inout thisPaint : Paint, in nativePaint : long) : float
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(nativePaint);
        if (delegate == null) {
            return 1.f;
        }

        return delegate.mStrokeWidth;
!!!76052663.java!!!	nSetStrokeWidth(inout thisPaint : Paint, in nativePaint : long, in width : float) : void
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(nativePaint);
        if (delegate == null) {
            return;
        }

        delegate.mStrokeWidth = width;
!!!76052791.java!!!	nGetStrokeMiter(inout thisPaint : Paint, in nativePaint : long) : float
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(nativePaint);
        if (delegate == null) {
            return 1.f;
        }

        return delegate.mStrokeMiter;
!!!76052919.java!!!	nSetStrokeMiter(inout thisPaint : Paint, in nativePaint : long, in miter : float) : void
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(nativePaint);
        if (delegate == null) {
            return;
        }

        delegate.mStrokeMiter = miter;
!!!76053047.java!!!	nSetShadowLayer(in paint : long, in radius : float, in dx : float, in dy : float, in color : int) : void
        // FIXME
        Bridge.getLog().fidelityWarning(LayoutLog.TAG_UNSUPPORTED,
                "Paint.setShadowLayer is not supported.", null, null /*data*/);
!!!76053175.java!!!	nHasShadowLayer(in paint : long) : boolean
        // FIXME
        Bridge.getLog().fidelityWarning(LayoutLog.TAG_UNSUPPORTED,
                "Paint.hasShadowLayer is not supported.", null, null /*data*/);
        return false;
!!!76053303.java!!!	nIsElegantTextHeight(inout thisPaint : Paint, in nativePaint : long) : boolean
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(nativePaint);
        return delegate != null && delegate.mFontVariant == FontVariant.ELEGANT;
!!!76053431.java!!!	nSetElegantTextHeight(inout thisPaint : Paint, in nativePaint : long, inout elegant : boolean) : void
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(nativePaint);
        if (delegate == null) {
            return;
        }

        delegate.mFontVariant = elegant ? FontVariant.ELEGANT : FontVariant.COMPACT;
!!!76053559.java!!!	nGetTextSize(inout thisPaint : Paint, in nativePaint : long) : float
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(nativePaint);
        if (delegate == null) {
            return 1.f;
        }

        return delegate.mTextSize;
!!!76053687.java!!!	nSetTextSize(inout thisPaint : Paint, in nativePaint : long, in textSize : float) : void
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(nativePaint);
        if (delegate == null) {
            return;
        }

        if (delegate.mTextSize != textSize) {
            delegate.mTextSize = textSize;
            delegate.updateFontObject();
        }
!!!76053815.java!!!	nGetTextScaleX(inout thisPaint : Paint, in nativePaint : long) : float
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(nativePaint);
        if (delegate == null) {
            return 1.f;
        }

        return delegate.mTextScaleX;
!!!76053943.java!!!	nSetTextScaleX(inout thisPaint : Paint, in nativePaint : long, in scaleX : float) : void
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(nativePaint);
        if (delegate == null) {
            return;
        }

        if (delegate.mTextScaleX != scaleX) {
            delegate.mTextScaleX = scaleX;
            delegate.updateFontObject();
        }
!!!76054071.java!!!	nGetTextSkewX(inout thisPaint : Paint, in nativePaint : long) : float
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(nativePaint);
        if (delegate == null) {
            return 1.f;
        }

        return delegate.mTextSkewX;
!!!76054199.java!!!	nSetTextSkewX(inout thisPaint : Paint, in nativePaint : long, in skewX : float) : void
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(nativePaint);
        if (delegate == null) {
            return;
        }

        if (delegate.mTextSkewX != skewX) {
            delegate.mTextSkewX = skewX;
            delegate.updateFontObject();
        }
!!!76054327.java!!!	nAscent(inout thisPaint : Paint, in nativePaint : long, in nativeTypeface : long) : float
        // get the delegate
        Paint_Delegate delegate = sManager.getDelegate(nativePaint);
        if (delegate == null) {
            return 0;
        }

        if (delegate.mFonts.size() > 0) {
            java.awt.FontMetrics javaMetrics = delegate.mFonts.get(0).mMetrics;
            // Android expects negative ascent so we invert the value from Java.
            return - javaMetrics.getAscent();
        }

        return 0;
!!!76054455.java!!!	nDescent(inout thisPaint : Paint, in nativePaint : long, in nativeTypeface : long) : float
        // get the delegate
        Paint_Delegate delegate = sManager.getDelegate(nativePaint);
        if (delegate == null) {
            return 0;
        }

        if (delegate.mFonts.size() > 0) {
            java.awt.FontMetrics javaMetrics = delegate.mFonts.get(0).mMetrics;
            return javaMetrics.getDescent();
        }

        return 0;

!!!76054583.java!!!	nGetFontMetrics(inout thisPaint : Paint, in nativePaint : long, in nativeTypeface : long, inout metrics : Paint::FontMetrics) : float
        // get the delegate
        Paint_Delegate delegate = sManager.getDelegate(nativePaint);
        if (delegate == null) {
            return 0;
        }

        return delegate.getFontMetrics(metrics);
!!!76054711.java!!!	nGetFontMetricsInt(inout thisPaint : Paint, in nativePaint : long, in nativeTypeface : long, inout fmi : Paint::FontMetricsInt) : int
        // get the delegate
        Paint_Delegate delegate = sManager.getDelegate(nativePaint);
        if (delegate == null) {
            return 0;
        }

        if (delegate.mFonts.size() > 0) {
            java.awt.FontMetrics javaMetrics = delegate.mFonts.get(0).mMetrics;
            if (fmi != null) {
                // Android expects negative ascent so we invert the value from Java.
                fmi.top = - javaMetrics.getMaxAscent();
                fmi.ascent = - javaMetrics.getAscent();
                fmi.descent = javaMetrics.getDescent();
                fmi.bottom = javaMetrics.getMaxDescent();
                fmi.leading = javaMetrics.getLeading();
            }

            return javaMetrics.getHeight();
        }

        return 0;
!!!76054839.java!!!	nBreakText(in nativePaint : long, in nativeTypeface : long, inout text : char [[]], in index : int, in count : int, in maxWidth : float, in bidiFlags : int, inout measuredWidth : float [[]]) : int

        // get the delegate
        Paint_Delegate delegate = sManager.getDelegate(nativePaint);
        if (delegate == null) {
            return 0;
        }

        int inc = count > 0 ? 1 : -1;

        int measureIndex = 0;
        for (int i = index; i != index + count; i += inc, measureIndex++) {
            int start, end;
            if (i < index) {
                start = i;
                end = index;
            } else {
                start = index;
                end = i;
            }

            // measure from start to end
            RectF bounds = delegate.measureText(text, start, end - start + 1, null, 0, bidiFlags);
            float res = bounds.right - bounds.left;

            if (measuredWidth != null) {
                measuredWidth[measureIndex] = res;
            }

            if (res > maxWidth) {
                // we should not return this char index, but since it's 0-based
                // and we need to return a count, we simply return measureIndex;
                return measureIndex;
            }

        }

        return measureIndex;
!!!76054967.java!!!	nBreakText(in nativePaint : long, in nativeTypeface : long, inout text : String, inout measureForwards : boolean, in maxWidth : float, in bidiFlags : int, inout measuredWidth : float [[]]) : int
        return nBreakText(nativePaint, nativeTypeface, text.toCharArray(), 0, text.length(),
                maxWidth, bidiFlags, measuredWidth);
!!!76055095.java!!!	nInit() : long
        Paint_Delegate newDelegate = new Paint_Delegate();
        return sManager.addNewDelegate(newDelegate);
!!!76055223.java!!!	nInitWithPaint(in paint : long) : long
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(paint);
        if (delegate == null) {
            return 0;
        }

        Paint_Delegate newDelegate = new Paint_Delegate(delegate);
        return sManager.addNewDelegate(newDelegate);
!!!76055351.java!!!	nReset(in native_object : long) : void
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return;
        }

        delegate.reset();
!!!76055479.java!!!	nSet(in native_dst : long, in native_src : long) : void
        // get the delegate from the native int.
        Paint_Delegate delegate_dst = sManager.getDelegate(native_dst);
        if (delegate_dst == null) {
            return;
        }

        // get the delegate from the native int.
        Paint_Delegate delegate_src = sManager.getDelegate(native_src);
        if (delegate_src == null) {
            return;
        }

        delegate_dst.set(delegate_src);
!!!76055607.java!!!	nGetStyle(in native_object : long) : int
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return 0;
        }

        return delegate.mStyle;
!!!76055735.java!!!	nSetStyle(in native_object : long, in style : int) : void
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return;
        }

        delegate.mStyle = style;
!!!76055863.java!!!	nGetStrokeCap(in native_object : long) : int
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return 0;
        }

        return delegate.mCap;
!!!76055991.java!!!	nSetStrokeCap(in native_object : long, in cap : int) : void
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return;
        }

        delegate.mCap = cap;
!!!76056119.java!!!	nGetStrokeJoin(in native_object : long) : int
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return 0;
        }

        return delegate.mJoin;
!!!76056247.java!!!	nSetStrokeJoin(in native_object : long, in join : int) : void
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return;
        }

        delegate.mJoin = join;
!!!76056375.java!!!	nGetFillPath(in native_object : long, in src : long, in dst : long) : boolean
        Paint_Delegate paint = sManager.getDelegate(native_object);
        if (paint == null) {
            return false;
        }

        Path_Delegate srcPath = Path_Delegate.getDelegate(src);
        if (srcPath == null) {
            return true;
        }

        Path_Delegate dstPath = Path_Delegate.getDelegate(dst);
        if (dstPath == null) {
            return true;
        }

        Stroke stroke = paint.getJavaStroke();
        Shape strokeShape = stroke.createStrokedShape(srcPath.getJavaShape());

        dstPath.setJavaShape(strokeShape);

        // FIXME figure out the return value?
        return true;
!!!76056503.java!!!	nSetShader(in native_object : long, in shader : long) : long
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return shader;
        }

        delegate.mShader = Shader_Delegate.getDelegate(shader);

        return shader;
!!!76056631.java!!!	nSetColorFilter(in native_object : long, in filter : long) : long
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return filter;
        }

        delegate.mColorFilter = ColorFilter_Delegate.getDelegate(filter);

        // Log warning if it's not supported.
        if (delegate.mColorFilter != null && !delegate.mColorFilter.isSupported()) {
            Bridge.getLog().fidelityWarning(LayoutLog.TAG_COLORFILTER,
                    delegate.mColorFilter.getSupportMessage(), null, null /*data*/);
        }

        return filter;
!!!76056759.java!!!	nSetXfermode(in native_object : long, in xfermode : long) : long
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return xfermode;
        }

        delegate.mXfermode = Xfermode_Delegate.getDelegate(xfermode);

        return xfermode;
!!!76056887.java!!!	nSetPathEffect(in native_object : long, in effect : long) : long
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return effect;
        }

        delegate.mPathEffect = PathEffect_Delegate.getDelegate(effect);

        return effect;
!!!76057015.java!!!	nSetMaskFilter(in native_object : long, in maskfilter : long) : long
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return maskfilter;
        }

        delegate.mMaskFilter = MaskFilter_Delegate.getDelegate(maskfilter);

        // since none of those are supported, display a fidelity warning right away
        if (delegate.mMaskFilter != null && !delegate.mMaskFilter.isSupported()) {
            Bridge.getLog().fidelityWarning(LayoutLog.TAG_MASKFILTER,
                    delegate.mMaskFilter.getSupportMessage(), null, null /*data*/);
        }

        return maskfilter;
!!!76057143.java!!!	nSetTypeface(in native_object : long, in typeface : long) : long
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return 0;
        }

        Typeface_Delegate typefaceDelegate = Typeface_Delegate.getDelegate(typeface);
        if (delegate.mTypeface != typefaceDelegate || delegate.mNativeTypeface != typeface) {
            delegate.mTypeface = Typeface_Delegate.getDelegate(typeface);
            delegate.mNativeTypeface = typeface;
            delegate.updateFontObject();
        }
        return typeface;
!!!76057271.java!!!	nSetRasterizer(in native_object : long, in rasterizer : long) : long
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return rasterizer;
        }

        delegate.mRasterizer = Rasterizer_Delegate.getDelegate(rasterizer);

        // since none of those are supported, display a fidelity warning right away
        if (delegate.mRasterizer != null && !delegate.mRasterizer.isSupported()) {
            Bridge.getLog().fidelityWarning(LayoutLog.TAG_RASTERIZER,
                    delegate.mRasterizer.getSupportMessage(), null, null /*data*/);
        }

        return rasterizer;
!!!76057399.java!!!	nGetTextAlign(in native_object : long) : int
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return 0;
        }

        return delegate.mTextAlign;
!!!76057527.java!!!	nSetTextAlign(in native_object : long, in align : int) : void
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return;
        }

        delegate.mTextAlign = align;
!!!76057655.java!!!	nSetTextLocales(in native_object : long, inout locale : String) : int
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return 0;
        }

        delegate.setTextLocale(locale);
        return 0;
!!!76057783.java!!!	nSetTextLocalesByMinikinLangListId(in paintPtr : long, in mMinikinLangListId : int) : void
        // FIXME
!!!76057911.java!!!	nGetTextAdvances(in native_object : long, in native_typeface : long, inout text : char [[]], in index : int, in count : int, in contextIndex : int, in contextCount : int, in bidiFlags : int, inout advances : float [[]], in advancesIndex : int) : float

        if (advances != null)
            for (int i = advancesIndex; i< advancesIndex+count; i++)
                advances[i]=0;
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return 0.f;
        }

        // native_typeface is passed here since Framework's old implementation did not have the
        // typeface object associated with the Paint. Since, we follow the new framework way,
        // we store the typeface with the paint and use it directly.
        assert (native_typeface == delegate.mNativeTypeface);

        RectF bounds = delegate.measureText(text, index, count, advances, advancesIndex, bidiFlags);
        return bounds.right - bounds.left;
!!!76058039.java!!!	nGetTextAdvances(in native_object : long, in native_typeface : long, inout text : String, in start : int, in end : int, in contextStart : int, in contextEnd : int, in bidiFlags : int, inout advances : float [[]], in advancesIndex : int) : float
        // FIXME: support contextStart and contextEnd
        int count = end - start;
        char[] buffer = TemporaryBuffer.obtain(count);
        TextUtils.getChars(text, start, end, buffer, 0);

        return nGetTextAdvances(native_object, native_typeface, buffer, 0, count,
                contextStart, contextEnd - contextStart, bidiFlags, advances, advancesIndex);
!!!76058167.java!!!	nGetTextRunCursor(inout thisPaint : Paint, in native_object : long, inout text : char [[]], in contextStart : int, in contextLength : int, in flags : int, in offset : int, in cursorOpt : int) : int
        // FIXME
        Bridge.getLog().fidelityWarning(LayoutLog.TAG_UNSUPPORTED,
                "Paint.getTextRunCursor is not supported.", null, null /*data*/);
        return 0;
!!!76058295.java!!!	nGetTextRunCursor(inout thisPaint : Paint, in native_object : long, inout text : String, in contextStart : int, in contextEnd : int, in flags : int, in offset : int, in cursorOpt : int) : int
        // FIXME
        Bridge.getLog().fidelityWarning(LayoutLog.TAG_UNSUPPORTED,
                "Paint.getTextRunCursor is not supported.", null, null /*data*/);
        return 0;
!!!76058423.java!!!	nGetTextPath(in native_object : long, in native_typeface : long, in bidiFlags : int, inout text : char [[]], in index : int, in count : int, in x : float, in y : float, in path : long) : void
        // FIXME
        Bridge.getLog().fidelityWarning(LayoutLog.TAG_UNSUPPORTED,
                "Paint.getTextPath is not supported.", null, null /*data*/);
!!!76058551.java!!!	nGetTextPath(in native_object : long, in native_typeface : long, in bidiFlags : int, inout text : String, in start : int, in end : int, in x : float, in y : float, in path : long) : void
        // FIXME
        Bridge.getLog().fidelityWarning(LayoutLog.TAG_UNSUPPORTED,
                "Paint.getTextPath is not supported.", null, null /*data*/);
!!!76058679.java!!!	nGetStringBounds(in nativePaint : long, in native_typeface : long, inout text : String, in start : int, in end : int, in bidiFlags : int, inout bounds : Rect) : void
        nGetCharArrayBounds(nativePaint, native_typeface, text.toCharArray(), start,
                end - start, bidiFlags, bounds);
!!!76058807.java!!!	nGetCharArrayBounds(in nativePaint : long, in native_typeface : long, inout text : char [[]], in index : int, in count : int, in bidiFlags : int, inout bounds : Rect) : void

        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(nativePaint);
        if (delegate == null) {
            return;
        }

        // assert that the typeface passed is actually the one that we had stored.
        assert (native_typeface == delegate.mNativeTypeface);

        delegate.measureText(text, index, count, null, 0, bidiFlags).roundOut(bounds);
!!!76058935.java!!!	nGetNativeFinalizer() : long
        synchronized (Paint_Delegate.class) {
            if (sFinalizer == -1) {
                sFinalizer = NativeAllocationRegistry_Delegate.createFinalizer(
                        sManager::removeJavaReferenceFor);
            }
        }
        return sFinalizer;
!!!76059063.java!!!	nGetLetterSpacing(in nativePaint : long) : float
        Paint_Delegate delegate = sManager.getDelegate(nativePaint);
        if (delegate == null) {
            return 0;
        }
        return delegate.mLetterSpacing;
!!!76059191.java!!!	nSetLetterSpacing(in nativePaint : long, in letterSpacing : float) : void
        Bridge.getLog().fidelityWarning(LayoutLog.TAG_TEXT_RENDERING,
                "Paint.setLetterSpacing() not supported.", null, null);
        Paint_Delegate delegate = sManager.getDelegate(nativePaint);
        if (delegate == null) {
            return;
        }
        delegate.mLetterSpacing = letterSpacing;
!!!76059319.java!!!	nSetFontFeatureSettings(in nativePaint : long, inout settings : String) : void
        Bridge.getLog().fidelityWarning(LayoutLog.TAG_TEXT_RENDERING,
                "Paint.setFontFeatureSettings() not supported.", null, null);
!!!76059447.java!!!	nGetHyphenEdit(in nativePaint : long) : int
        Paint_Delegate delegate = sManager.getDelegate(nativePaint);
        if (delegate == null) {
            return 0;
        }
        return delegate.mHyphenEdit;
!!!76059575.java!!!	nSetHyphenEdit(in nativePaint : long, in hyphen : int) : void
        Paint_Delegate delegate = sManager.getDelegate(nativePaint);
        if (delegate == null) {
            return;
        }
        delegate.mHyphenEdit = hyphen;
!!!76059703.java!!!	nHasGlyph(in nativePaint : long, in nativeTypeface : long, in bidiFlags : int, inout string : String) : boolean
        Paint_Delegate delegate = sManager.getDelegate(nativePaint);
        if (delegate == null) {
            return false;
        }
        if (string.length() == 0) {
            return false;
        }
        if (string.length() > 1) {
            Bridge.getLog().fidelityWarning(LayoutLog.TAG_TEXT_RENDERING,
                    "Paint.hasGlyph() is not supported for ligatures.", null, null);
            return false;
        }
        assert nativeTypeface == delegate.mNativeTypeface;
        Typeface_Delegate typeface_delegate = Typeface_Delegate.getDelegate(nativeTypeface);

        char c = string.charAt(0);
        for (Font font : typeface_delegate.getFonts(delegate.mFontVariant)) {
            if (font.canDisplay(c)) {
                return true;
            }
        }
        return false;
!!!76059831.java!!!	nGetRunAdvance(in nativePaint : long, in nativeTypeface : long, inout text : char [[]], in start : int, in end : int, in contextStart : int, in contextEnd : int, inout isRtl : boolean, in offset : int) : float
        int count = end - start;
        float[] advances = new float[count];
        int bidiFlags = isRtl ? Paint.BIDI_FORCE_RTL : Paint.BIDI_FORCE_LTR;
        nGetTextAdvances(nativePaint, nativeTypeface, text, start, count,
                contextStart, contextEnd - contextStart, bidiFlags, advances, 0);
        int startOffset = offset - start;  // offset from start.
        float sum = 0;
        for (int i = 0; i < startOffset; i++) {
            sum += advances[i];
        }
        return sum;
!!!76059959.java!!!	nGetOffsetForAdvance(in nativePaint : long, in nativeTypeface : long, inout text : char [[]], in start : int, in end : int, in contextStart : int, in contextEnd : int, inout isRtl : boolean, in advance : float) : int
        int count = end - start;
        float[] advances = new float[count];
        int bidiFlags = isRtl ? Paint.BIDI_FORCE_RTL : Paint.BIDI_FORCE_LTR;
        nGetTextAdvances(nativePaint, nativeTypeface, text, start, count,
                contextStart, contextEnd - contextStart, bidiFlags, advances, 0);
        float sum = 0;
        int i;
        for (i = 0; i < count && sum < advance; i++) {
            sum += advances[i];
        }
        float distanceToI = sum - advance;
        float distanceToIMinus1 = advance - (sum - advances[i]);
        return distanceToI > distanceToIMinus1 ? i : i - 1;
!!!76060087.java!!!	Paint_Delegate()
        reset();
!!!76060215.java!!!	Paint_Delegate(inout paint : Paint_Delegate)
        set(paint);
!!!76060343.java!!!	set(inout paint : Paint_Delegate) : void
        mFlags = paint.mFlags;
        mColor = paint.mColor;
        mStyle = paint.mStyle;
        mCap = paint.mCap;
        mJoin = paint.mJoin;
        mTextAlign = paint.mTextAlign;

        boolean needsFontUpdate = false;
        if (mTypeface != paint.mTypeface || mNativeTypeface != paint.mNativeTypeface) {
            mTypeface = paint.mTypeface;
            mNativeTypeface = paint.mNativeTypeface;
            needsFontUpdate = true;
        }

        if (mTextSize != paint.mTextSize) {
            mTextSize = paint.mTextSize;
            needsFontUpdate = true;
        }

        if (mTextScaleX != paint.mTextScaleX) {
            mTextScaleX = paint.mTextScaleX;
            needsFontUpdate = true;
        }

        if (mTextSkewX != paint.mTextSkewX) {
            mTextSkewX = paint.mTextSkewX;
            needsFontUpdate = true;
        }

        mStrokeWidth = paint.mStrokeWidth;
        mStrokeMiter = paint.mStrokeMiter;
        mXfermode = paint.mXfermode;
        mColorFilter = paint.mColorFilter;
        mShader = paint.mShader;
        mPathEffect = paint.mPathEffect;
        mMaskFilter = paint.mMaskFilter;
        mRasterizer = paint.mRasterizer;
        mHintingMode = paint.mHintingMode;

        if (needsFontUpdate) {
            updateFontObject();
        }
!!!76060471.java!!!	reset() : void
        mFlags = Paint.HIDDEN_DEFAULT_PAINT_FLAGS;
        mColor = 0xFF000000;
        mStyle = Paint.Style.FILL.nativeInt;
        mCap = Paint.Cap.BUTT.nativeInt;
        mJoin = Paint.Join.MITER.nativeInt;
        mTextAlign = 0;
        mTypeface = Typeface_Delegate.getDelegate(Typeface.sDefaults[0].native_instance);
        mNativeTypeface = 0;
        mStrokeWidth = 1.f;
        mStrokeMiter = 4.f;
        mTextSize = 20.f;
        mTextScaleX = 1.f;
        mTextSkewX = 0.f;
        mXfermode = null;
        mColorFilter = null;
        mShader = null;
        mPathEffect = null;
        mMaskFilter = null;
        mRasterizer = null;
        updateFontObject();
        mHintingMode = Paint.HINTING_ON;
!!!76060599.java!!!	updateFontObject() : void
        if (mTypeface != null) {
            // Get the fonts from the TypeFace object.
            List<Font> fonts = mTypeface.getFonts(mFontVariant);

            if (fonts.isEmpty()) {
                mFonts = Collections.emptyList();
                return;
            }

            // create new font objects as well as FontMetrics, based on the current text size
            // and skew info.
            int nFonts = fonts.size();
            ArrayList<FontInfo> infoList = new ArrayList<FontInfo>(nFonts);
            //noinspection ForLoopReplaceableByForEach (avoid iterator instantiation)
            for (int i = 0; i < nFonts; i++) {
                Font font = fonts.get(i);
                if (font == null) {
                    // If the font is null, add null to infoList. When rendering the text, if this
                    // null is reached, a warning will be logged.
                    infoList.add(null);
                    continue;
                }
                FontInfo info = new FontInfo();
                info.mFont = font.deriveFont(mTextSize);
                if (mTextScaleX != 1.0 || mTextSkewX != 0) {
                    // TODO: support skew
                    info.mFont = info.mFont.deriveFont(new AffineTransform(
                            mTextScaleX, mTextSkewX, 0, 1, 0, 0));
                }
                // The metrics here don't have anti-aliasing set.
                info.mMetrics = Toolkit.getDefaultToolkit().getFontMetrics(info.mFont);

                infoList.add(info);
            }

            mFonts = Collections.unmodifiableList(infoList);
        }
!!!76060727.java!!!	measureText(inout text : char [[]], in index : int, in count : int, inout advances : float [[]], in advancesIndex : int, in bidiFlags : int) : RectF
        return new BidiRenderer(null, this, text)
                .renderText(index, index + count, bidiFlags, advances, advancesIndex, false);
!!!76060855.java!!!	measureText(inout text : char [[]], in index : int, in count : int, inout advances : float [[]], in advancesIndex : int, inout isRtl : boolean) : RectF
        return new BidiRenderer(null, this, text)
                .renderText(index, index + count, isRtl, advances, advancesIndex, false);
!!!76060983.java!!!	getFontMetrics(inout metrics : Paint::FontMetrics) : float
        if (mFonts.size() > 0) {
            java.awt.FontMetrics javaMetrics = mFonts.get(0).mMetrics;
            if (metrics != null) {
                // Android expects negative ascent so we invert the value from Java.
                metrics.top = - javaMetrics.getMaxAscent();
                metrics.ascent = - javaMetrics.getAscent();
                metrics.descent = javaMetrics.getDescent();
                metrics.bottom = javaMetrics.getMaxDescent();
                metrics.leading = javaMetrics.getLeading();
            }

            return javaMetrics.getHeight();
        }

        return 0;
!!!76061111.java!!!	setTextLocale(inout locale : String) : void
        mLocale = new Locale(locale);
!!!76061239.java!!!	setFlag(in nativePaint : long, in flagMask : int, inout flagValue : boolean) : void
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(nativePaint);
        if (delegate == null) {
            return;
        }

        if (flagValue) {
            delegate.mFlags |= flagMask;
        } else {
            delegate.mFlags &= ~flagMask;
        }
