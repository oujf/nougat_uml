class Bitmap_Delegate
!!!76003383.java!!!	getDelegate(in native_bitmap : long) : Bitmap_Delegate
        return sManager.getDelegate(native_bitmap);
!!!76003511.java!!!	getDelegate(inout bitmap : Bitmap) : Bitmap_Delegate
        // refSkPixelRef is a hack to get the native pointer: see #nativeRefPixelRef()
        return bitmap == null ? null : getDelegate(bitmap.refSkPixelRef());
!!!76003639.java!!!	createBitmap(inout input : File, inout isMutable : boolean, inout density : Density) : Bitmap
        return createBitmap(input, getPremultipliedBitmapCreateFlags(isMutable), density);
!!!76003767.java!!!	createBitmap(inout input : File, inout createFlags : Set<BitmapCreateFlags>, inout density : Density) : Bitmap
        // create a delegate with the content of the file.
        BufferedImage image = ImageIO.read(input);
        if (image == null && input.exists()) {
            // There was a problem decoding the image, or the decoder isn't registered. Webp maybe.
            // Replace with a broken image icon.
            BridgeContext currentContext = RenderAction.getCurrentContext();
            if (currentContext != null) {
                RenderResources resources = currentContext.getRenderResources();
                ResourceValue broken = resources.getFrameworkResource(ResourceType.DRAWABLE,
                        "ic_menu_report_image");
                File brokenFile = new File(broken.getValue());
                if (brokenFile.exists()) {
                    image = ImageIO.read(brokenFile);
                }
            }
        }
        Bitmap_Delegate delegate = new Bitmap_Delegate(image, Config.ARGB_8888);

        return createBitmap(delegate, createFlags, density.getDpiValue());
!!!76003895.java!!!	createBitmap(inout input : InputStream, inout isMutable : boolean, inout density : Density) : Bitmap
        return createBitmap(input, getPremultipliedBitmapCreateFlags(isMutable), density);
!!!76004023.java!!!	createBitmap(inout input : InputStream, inout createFlags : Set<BitmapCreateFlags>, inout density : Density) : Bitmap
        // create a delegate with the content of the stream.
        Bitmap_Delegate delegate = new Bitmap_Delegate(ImageIO.read(input), Config.ARGB_8888);

        return createBitmap(delegate, createFlags, density.getDpiValue());
!!!76004151.java!!!	createBitmap(inout image : BufferedImage, inout isMutable : boolean, inout density : Density) : Bitmap
        return createBitmap(image, getPremultipliedBitmapCreateFlags(isMutable), density);
!!!76004279.java!!!	createBitmap(inout image : BufferedImage, inout createFlags : Set<BitmapCreateFlags>, inout density : Density) : Bitmap
        // create a delegate with the given image.
        Bitmap_Delegate delegate = new Bitmap_Delegate(image, Config.ARGB_8888);

        return createBitmap(delegate, createFlags, density.getDpiValue());
!!!76004407.java!!!	getBufferedImageType() : int
        return BufferedImage.TYPE_INT_ARGB;
!!!76004535.java!!!	getImage() : BufferedImage
        return mImage;
!!!76004663.java!!!	getConfig() : Bitmap::Config
        return mConfig;
!!!76004791.java!!!	hasAlpha() : boolean
        return mHasAlpha && mConfig != Config.RGB_565;
!!!76004919.java!!!	change() : void
        mGenerationId++;
!!!76005047.java!!!	nativeCreate(inout colors : int [[]], in offset : int, in stride : int, in width : int, in height : int, in nativeConfig : int, inout isMutable : boolean) : Bitmap
        int imageType = getBufferedImageType();

        // create the image
        BufferedImage image = new BufferedImage(width, height, imageType);

        if (colors != null) {
            image.setRGB(0, 0, width, height, colors, offset, stride);
        }

        // create a delegate with the content of the stream.
        Bitmap_Delegate delegate = new Bitmap_Delegate(image, Config.nativeToConfig(nativeConfig));

        return createBitmap(delegate, getPremultipliedBitmapCreateFlags(isMutable),
                            Bitmap.getDefaultDensity());
!!!76005175.java!!!	nativeCopy(in srcBitmap : long, in nativeConfig : int, inout isMutable : boolean) : Bitmap
        Bitmap_Delegate srcBmpDelegate = sManager.getDelegate(srcBitmap);
        if (srcBmpDelegate == null) {
            return null;
        }

        BufferedImage srcImage = srcBmpDelegate.getImage();

        int width = srcImage.getWidth();
        int height = srcImage.getHeight();

        int imageType = getBufferedImageType();

        // create the image
        BufferedImage image = new BufferedImage(width, height, imageType);

        // copy the source image into the image.
        int[] argb = new int[width * height];
        srcImage.getRGB(0, 0, width, height, argb, 0, width);
        image.setRGB(0, 0, width, height, argb, 0, width);

        // create a delegate with the content of the stream.
        Bitmap_Delegate delegate = new Bitmap_Delegate(image, Config.nativeToConfig(nativeConfig));

        return createBitmap(delegate, getPremultipliedBitmapCreateFlags(isMutable),
                Bitmap.getDefaultDensity());
!!!76005303.java!!!	nativeCopyAshmem(in nativeSrcBitmap : long) : Bitmap
        // Unused method; no implementation provided.
        assert false;
        return null;
!!!76005431.java!!!	nativeCopyAshmemConfig(in nativeSrcBitmap : long, in nativeConfig : int) : Bitmap
        // Unused method; no implementation provided.
        assert false;
        return null;
!!!76005559.java!!!	nativeGetNativeFinalizer() : long
        synchronized (Bitmap_Delegate.class) {
            if (sFinalizer == -1) {
                sFinalizer = NativeAllocationRegistry_Delegate.createFinalizer(sManager::removeJavaReferenceFor);
            }
            return sFinalizer;
        }
!!!76005687.java!!!	nativeRecycle(in nativeBitmap : long) : boolean
        // In our case reycle() is a no-op. We will let the finalizer to dispose the bitmap.
        return true;
!!!76005815.java!!!	nativeReconfigure(in nativeBitmap : long, in width : int, in height : int, in config : int, in allocSize : int, inout isPremultiplied : boolean) : void
        Bridge.getLog().error(LayoutLog.TAG_UNSUPPORTED,
                "Bitmap.reconfigure() is not supported", null /*data*/);
!!!76005943.java!!!	nativeCompress(in nativeBitmap : long, in format : int, in quality : int, inout stream : OutputStream, inout tempStorage : byte [[]]) : boolean
        Bridge.getLog().error(LayoutLog.TAG_UNSUPPORTED,
                "Bitmap.compress() is not supported", null /*data*/);
        return true;
!!!76006071.java!!!	nativeErase(in nativeBitmap : long, in color : int) : void
        // get the delegate from the native int.
        Bitmap_Delegate delegate = sManager.getDelegate(nativeBitmap);
        if (delegate == null) {
            return;
        }

        BufferedImage image = delegate.mImage;

        Graphics2D g = image.createGraphics();
        try {
            g.setColor(new java.awt.Color(color, true));

            g.fillRect(0, 0, image.getWidth(), image.getHeight());
        } finally {
            g.dispose();
        }
!!!76006199.java!!!	nativeRowBytes(in nativeBitmap : long) : int
        // get the delegate from the native int.
        Bitmap_Delegate delegate = sManager.getDelegate(nativeBitmap);
        if (delegate == null) {
            return 0;
        }

        return delegate.mImage.getWidth();
!!!76006327.java!!!	nativeConfig(in nativeBitmap : long) : int
        // get the delegate from the native int.
        Bitmap_Delegate delegate = sManager.getDelegate(nativeBitmap);
        if (delegate == null) {
            return 0;
        }

        return delegate.mConfig.nativeInt;
!!!76006455.java!!!	nativeHasAlpha(in nativeBitmap : long) : boolean
        // get the delegate from the native int.
        Bitmap_Delegate delegate = sManager.getDelegate(nativeBitmap);
        return delegate == null || delegate.mHasAlpha;

!!!76006583.java!!!	nativeHasMipMap(in nativeBitmap : long) : boolean
        // get the delegate from the native int.
        Bitmap_Delegate delegate = sManager.getDelegate(nativeBitmap);
        return delegate == null || delegate.mHasMipMap;

!!!76006711.java!!!	nativeGetPixel(in nativeBitmap : long, in x : int, in y : int) : int
        // get the delegate from the native int.
        Bitmap_Delegate delegate = sManager.getDelegate(nativeBitmap);
        if (delegate == null) {
            return 0;
        }

        return delegate.mImage.getRGB(x, y);
!!!76006839.java!!!	nativeGetPixels(in nativeBitmap : long, inout pixels : int [[]], in offset : int, in stride : int, in x : int, in y : int, in width : int, in height : int) : void
        Bitmap_Delegate delegate = sManager.getDelegate(nativeBitmap);
        if (delegate == null) {
            return;
        }

        delegate.getImage().getRGB(x, y, width, height, pixels, offset, stride);
!!!76006967.java!!!	nativeSetPixel(in nativeBitmap : long, in x : int, in y : int, in color : int) : void
        Bitmap_Delegate delegate = sManager.getDelegate(nativeBitmap);
        if (delegate == null) {
            return;
        }

        delegate.getImage().setRGB(x, y, color);
!!!76007095.java!!!	nativeSetPixels(in nativeBitmap : long, inout colors : int [[]], in offset : int, in stride : int, in x : int, in y : int, in width : int, in height : int) : void
        Bitmap_Delegate delegate = sManager.getDelegate(nativeBitmap);
        if (delegate == null) {
            return;
        }

        delegate.getImage().setRGB(x, y, width, height, colors, offset, stride);
!!!76007223.java!!!	nativeCopyPixelsToBuffer(in nativeBitmap : long, inout dst : Buffer) : void
        // FIXME implement native delegate
        Bridge.getLog().fidelityWarning(LayoutLog.TAG_UNSUPPORTED,
                "Bitmap.copyPixelsToBuffer is not supported.", null, null /*data*/);
!!!76007351.java!!!	nativeCopyPixelsFromBuffer(in nb : long, inout src : Buffer) : void
        // FIXME implement native delegate
        Bridge.getLog().fidelityWarning(LayoutLog.TAG_UNSUPPORTED,
                "Bitmap.copyPixelsFromBuffer is not supported.", null, null /*data*/);
!!!76007479.java!!!	nativeGenerationId(in nativeBitmap : long) : int
        Bitmap_Delegate delegate = sManager.getDelegate(nativeBitmap);
        if (delegate == null) {
            return 0;
        }

        return delegate.mGenerationId;
!!!76007607.java!!!	nativeCreateFromParcel(inout p : Parcel) : Bitmap
        // This is only called by Bitmap.CREATOR (Parcelable.Creator<Bitmap>), which is only
        // used during aidl call so really this should not be called.
        Bridge.getLog().error(LayoutLog.TAG_UNSUPPORTED,
                "AIDL is not suppored, and therefore Bitmaps cannot be created from parcels.",
                null /*data*/);
        return null;
!!!76007735.java!!!	nativeWriteToParcel(in nativeBitmap : long, inout isMutable : boolean, in density : int, inout p : Parcel) : boolean
        // This is only called when sending a bitmap through aidl, so really this should not
        // be called.
        Bridge.getLog().error(LayoutLog.TAG_UNSUPPORTED,
                "AIDL is not suppored, and therefore Bitmaps cannot be written to parcels.",
                null /*data*/);
        return false;
!!!76007863.java!!!	nativeExtractAlpha(in nativeBitmap : long, in nativePaint : long, inout offsetXY : int [[]]) : Bitmap
        Bitmap_Delegate bitmap = sManager.getDelegate(nativeBitmap);
        if (bitmap == null) {
            return null;
        }

        // get the paint which can be null if nativePaint is 0.
        Paint_Delegate paint = Paint_Delegate.getDelegate(nativePaint);

        if (paint != null && paint.getMaskFilter() != null) {
            Bridge.getLog().fidelityWarning(LayoutLog.TAG_MASKFILTER,
                    "MaskFilter not supported in Bitmap.extractAlpha",
                    null, null /*data*/);
        }

        int alpha = paint != null ? paint.getAlpha() : 0xFF;
        BufferedImage image = createCopy(bitmap.getImage(), BufferedImage.TYPE_INT_ARGB, alpha);

        // create the delegate. The actual Bitmap config is only an alpha channel
        Bitmap_Delegate delegate = new Bitmap_Delegate(image, Config.ALPHA_8);

        // the density doesn't matter, it's set by the Java method.
        return createBitmap(delegate, EnumSet.of(BitmapCreateFlags.MUTABLE),
                Density.DEFAULT_DENSITY /*density*/);
!!!76007991.java!!!	nativeIsPremultiplied(in nativeBitmap : long) : boolean
        // get the delegate from the native int.
        Bitmap_Delegate delegate = sManager.getDelegate(nativeBitmap);
        return delegate != null && delegate.mIsPremultiplied;

!!!76008119.java!!!	nativeSetPremultiplied(in nativeBitmap : long, inout isPremul : boolean) : void
        // get the delegate from the native int.
        Bitmap_Delegate delegate = sManager.getDelegate(nativeBitmap);
        if (delegate == null) {
            return;
        }

        delegate.mIsPremultiplied = isPremul;
!!!76008247.java!!!	nativeSetHasAlpha(in nativeBitmap : long, inout hasAlpha : boolean, inout isPremul : boolean) : void
        // get the delegate from the native int.
        Bitmap_Delegate delegate = sManager.getDelegate(nativeBitmap);
        if (delegate == null) {
            return;
        }

        delegate.mHasAlpha = hasAlpha;
!!!76008375.java!!!	nativeSetHasMipMap(in nativeBitmap : long, inout hasMipMap : boolean) : void
        // get the delegate from the native int.
        Bitmap_Delegate delegate = sManager.getDelegate(nativeBitmap);
        if (delegate == null) {
            return;
        }

        delegate.mHasMipMap = hasMipMap;
!!!76008503.java!!!	nativeSameAs(in nb0 : long, in nb1 : long) : boolean
        Bitmap_Delegate delegate1 = sManager.getDelegate(nb0);
        if (delegate1 == null) {
            return false;
        }

        Bitmap_Delegate delegate2 = sManager.getDelegate(nb1);
        if (delegate2 == null) {
            return false;
        }

        BufferedImage image1 = delegate1.getImage();
        BufferedImage image2 = delegate2.getImage();
        if (delegate1.mConfig != delegate2.mConfig ||
                image1.getWidth() != image2.getWidth() ||
                image1.getHeight() != image2.getHeight()) {
            return false;
        }

        // get the internal data
        int w = image1.getWidth();
        int h = image2.getHeight();
        int[] argb1 = new int[w*h];
        int[] argb2 = new int[w*h];

        image1.getRGB(0, 0, w, h, argb1, 0, w);
        image2.getRGB(0, 0, w, h, argb2, 0, w);

        // compares
        if (delegate1.mConfig == Config.ALPHA_8) {
            // in this case we have to manually compare the alpha channel as the rest is garbage.
            final int length = w*h;
            for (int i = 0 ; i < length ; i++) {
                if ((argb1[i] & 0xFF000000) != (argb2[i] & 0xFF000000)) {
                    return false;
                }
            }
            return true;
        }

        return Arrays.equals(argb1, argb2);
!!!76008631.java!!!	nativeRefPixelRef(in nativeBitmap : long) : long
        // Hack: This is called by Bitmap.refSkPixelRef() and LayoutLib uses that method to get
        // the native pointer from a Bitmap. So, we return nativeBitmap here.
        return nativeBitmap;
!!!76008759.java!!!	Bitmap_Delegate(inout image : BufferedImage, inout config : Bitmap::Config)
        mImage = image;
        mConfig = config;
!!!76008887.java!!!	createBitmap(inout delegate : Bitmap_Delegate, inout createFlags : Set<BitmapCreateFlags>, in density : int) : Bitmap
        // get its native_int
        long nativeInt = sManager.addNewDelegate(delegate);

        int width = delegate.mImage.getWidth();
        int height = delegate.mImage.getHeight();
        boolean isMutable = createFlags.contains(BitmapCreateFlags.MUTABLE);
        boolean isPremultiplied = createFlags.contains(BitmapCreateFlags.PREMULTIPLIED);

        // and create/return a new Bitmap with it
        return new Bitmap(nativeInt, null /* buffer */, width, height, density, isMutable,
                          isPremultiplied, null /*ninePatchChunk*/, null /* layoutBounds */);
!!!76009015.java!!!	getPremultipliedBitmapCreateFlags(inout isMutable : boolean) : Bitmap_Delegate::BitmapCreateFlags
        Set<BitmapCreateFlags> createFlags = EnumSet.of(BitmapCreateFlags.PREMULTIPLIED);
        if (isMutable) {
            createFlags.add(BitmapCreateFlags.MUTABLE);
        }
        return createFlags;
!!!76009143.java!!!	createCopy(inout image : BufferedImage, in imageType : int, in alpha : int) : BufferedImage
        int w = image.getWidth();
        int h = image.getHeight();

        BufferedImage result = new BufferedImage(w, h, imageType);

        int[] argb = new int[w * h];
        image.getRGB(0, 0, image.getWidth(), image.getHeight(), argb, 0, image.getWidth());

        if (alpha != 255) {
            final int length = argb.length;
            for (int i = 0 ; i < length; i++) {
                int a = (argb[i] >>> 24 * alpha) / 255;
                argb[i] = (a << 24) | (argb[i] & 0x00FFFFFF);
            }
        }

        result.setRGB(0, 0, w, h, argb, 0, w);

        return result;
