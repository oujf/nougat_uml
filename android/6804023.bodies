class BitmapFactory_Delegate
!!!76009271.java!!!	nativeDecodeStream(inout is : InputStream, inout storage : byte [[]], inout padding : Rect, inout opts : BitmapFactory::Options) : Bitmap
        Bitmap bm = null;

        Density density = Density.MEDIUM;
        Set<BitmapCreateFlags> bitmapCreateFlags = EnumSet.of(BitmapCreateFlags.MUTABLE);
        if (opts != null) {
            density = Density.getEnum(opts.inDensity);
            if (opts.inPremultiplied) {
                bitmapCreateFlags.add(BitmapCreateFlags.PREMULTIPLIED);
            }
            opts.inScaled = false;
        }

        try {
            if (is instanceof NinePatchInputStream) {
                NinePatchInputStream npis = (NinePatchInputStream) is;
                npis.disableFakeMarkSupport();

                // load the bitmap as a nine patch
                com.android.ninepatch.NinePatch ninePatch = com.android.ninepatch.NinePatch.load(
                        npis, true /*is9Patch*/, false /*convert*/);

                // get the bitmap and chunk objects.
                bm = Bitmap_Delegate.createBitmap(ninePatch.getImage(), bitmapCreateFlags,
                        density);
                NinePatchChunk chunk = ninePatch.getChunk();

                // put the chunk in the bitmap
                bm.setNinePatchChunk(NinePatch_Delegate.serialize(chunk));

                if (padding != null) {
                    // read the padding
                    int[] paddingArray = chunk.getPadding();
                    padding.left = paddingArray[0];
                    padding.top = paddingArray[1];
                    padding.right = paddingArray[2];
                    padding.bottom = paddingArray[3];
                }
            } else {
                // load the bitmap directly.
                bm = Bitmap_Delegate.createBitmap(is, bitmapCreateFlags, density);
            }
        } catch (IOException e) {
            Bridge.getLog().error(null, "Failed to load image", e, null);
        }

        return bm;
!!!76009399.java!!!	nativeDecodeFileDescriptor(inout fd : FileDescriptor, inout padding : Rect, inout opts : BitmapFactory::Options) : Bitmap
        opts.inBitmap = null;
        return null;
!!!76009527.java!!!	nativeDecodeAsset(in asset : long, inout padding : Rect, inout opts : BitmapFactory::Options) : Bitmap
        opts.inBitmap = null;
        return null;
!!!76009655.java!!!	nativeDecodeByteArray(inout data : byte [[]], in offset : int, in length : int, inout opts : BitmapFactory::Options) : Bitmap
        opts.inBitmap = null;
        return null;
!!!76009783.java!!!	nativeIsSeekable(inout fd : FileDescriptor) : boolean
        return true;
!!!76009911.java!!!	setDensityFromOptions(inout outputBitmap : Bitmap, inout opts : BitmapFactory::Options) : void
        if (outputBitmap == null || opts == null) return;

        final int density = opts.inDensity;
        if (density != 0) {
            outputBitmap.setDensity(density);
            final int targetDensity = opts.inTargetDensity;
            if (targetDensity == 0 || density == targetDensity || density == opts.inScreenDensity) {
                return;
            }

            // --- Change from original implementation begins ---
            // LayoutLib doesn't scale the nine patch when decoding it. Hence, don't change the
            // density of the source bitmap in case of ninepatch.

            if (opts.inScaled) {
            // --- Change from original implementation ends. ---
                outputBitmap.setDensity(targetDensity);
            }
        } else if (opts.inBitmap != null) {
            // bitmap was reused, ensure density is reset
            outputBitmap.setDensity(Bitmap.getDefaultDensity());
        }
