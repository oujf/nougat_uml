class LinearGradientPaint
!!!76036279.java!!!	LinearGradientPaint(in x0 : float, in y0 : float, in x1 : float, in y1 : float, inout colors : int [[]], inout positions : float [[]], inout tile : Shader::TileMode)
            super(colors, positions, tile);
            mX0 = x0;
            mY0 = y0;
            mDx = x1 - x0;
            mDy = y1 - y0;
            mDSize2 = mDx * mDx + mDy * mDy;
!!!76036407.java!!!	createContext(inout colorModel : java.awt.image.ColorModel, inout deviceBounds : java.awt.Rectangle, inout userBounds : java.awt.geom.Rectangle2D, inout xform : java.awt.geom.AffineTransform, inout hints : java.awt.RenderingHints) : PaintContext
            precomputeGradientColors();

            java.awt.geom.AffineTransform canvasMatrix;
            try {
                canvasMatrix = xform.createInverse();
            } catch (java.awt.geom.NoninvertibleTransformException e) {
                Bridge.getLog().fidelityWarning(LayoutLog.TAG_MATRIX_INVERSE,
                        "Unable to inverse matrix in LinearGradient", e, null /*data*/);
                canvasMatrix = new java.awt.geom.AffineTransform();
            }

            java.awt.geom.AffineTransform localMatrix = getLocalMatrix();
            try {
                localMatrix = localMatrix.createInverse();
            } catch (java.awt.geom.NoninvertibleTransformException e) {
                Bridge.getLog().fidelityWarning(LayoutLog.TAG_MATRIX_INVERSE,
                        "Unable to inverse matrix in LinearGradient", e, null /*data*/);
                localMatrix = new java.awt.geom.AffineTransform();
            }

            return new LinearGradientPaintContext(canvasMatrix, localMatrix, colorModel);
!!!76037047.java!!!	getColor(in x : float, in y : float) : int
            float pos;
            if (mDx == 0) {
                pos = (y - mY0) / mDy;
            } else if (mDy == 0) {
                pos = (x - mX0) / mDx;
            } else {
                // find the x position on the gradient vector.
                float _x = (mDx*mDy*(y-mY0) + mDy*mDy*mX0 + mDx*mDx*x) / mDSize2;
                // from it get the position relative to the vector
                pos = (_x - mX0) / mDx;
            }

            return getGradientColor(pos);
