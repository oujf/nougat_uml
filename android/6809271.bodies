class Path_Delegate
!!!76061751.java!!!	getDelegate(in nPath : long) : Path_Delegate
        return sManager.getDelegate(nPath);
!!!76061879.java!!!	getJavaShape() : Path2D
        return mPath;
!!!76062007.java!!!	setJavaShape(inout shape : Shape) : void
        reset();
        mPath.append(shape, false /*connect*/);
!!!76062135.java!!!	reset() : void
        mPath.reset();
!!!76062263.java!!!	setPathIterator(inout iterator : PathIterator) : void
        reset();
        mPath.append(iterator, false /*connect*/);
!!!76062391.java!!!	init1() : long
        // create the delegate
        Path_Delegate newDelegate = new Path_Delegate();

        return sManager.addNewDelegate(newDelegate);
!!!76062519.java!!!	init2(in nPath : long) : long
        // create the delegate
        Path_Delegate newDelegate = new Path_Delegate();

        // get the delegate to copy, which could be null if nPath is 0
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate != null) {
            newDelegate.set(pathDelegate);
        }

        return sManager.addNewDelegate(newDelegate);
!!!76062647.java!!!	native_reset(in nPath : long) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.mPath.reset();
!!!76062775.java!!!	native_rewind(in nPath : long) : void
        // call out to reset since there's nothing to optimize in
        // terms of data structs.
        native_reset(nPath);
!!!76062903.java!!!	native_set(in native_dst : long, in native_src : long) : void
        Path_Delegate pathDstDelegate = sManager.getDelegate(native_dst);
        if (pathDstDelegate == null) {
            return;
        }

        Path_Delegate pathSrcDelegate = sManager.getDelegate(native_src);
        if (pathSrcDelegate == null) {
            return;
        }

        pathDstDelegate.set(pathSrcDelegate);
!!!76063031.java!!!	native_isConvex(in nPath : long) : boolean
        Bridge.getLog().fidelityWarning(LayoutLog.TAG_UNSUPPORTED,
                "Path.isConvex is not supported.", null, null);
        return true;
!!!76063159.java!!!	native_getFillType(in nPath : long) : int
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return 0;
        }

        return pathDelegate.mFillType.nativeInt;
!!!76063287.java!!!	native_setFillType(in nPath : long, in ft : int) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.setFillType(Path.sFillTypeArray[ft]);
!!!76063415.java!!!	native_isEmpty(in nPath : long) : boolean
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        return pathDelegate == null || pathDelegate.isEmpty();

!!!76063543.java!!!	native_isRect(in nPath : long, inout rect : RectF) : boolean
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return false;
        }

        // create an Area that can test if the path is a rect
        Area area = new Area(pathDelegate.mPath);
        if (area.isRectangular()) {
            if (rect != null) {
                pathDelegate.fillBounds(rect);
            }

            return true;
        }

        return false;
!!!76063671.java!!!	native_computeBounds(in nPath : long, inout bounds : RectF) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.fillBounds(bounds);
!!!76063799.java!!!	native_incReserve(in nPath : long, in extraPtCount : int) : void
        // since we use a java2D path, there's no way to pre-allocate new points,
        // so we do nothing.
!!!76063927.java!!!	native_moveTo(in nPath : long, in x : float, in y : float) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.moveTo(x, y);
!!!76064055.java!!!	native_rMoveTo(in nPath : long, in dx : float, in dy : float) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.rMoveTo(dx, dy);
!!!76064183.java!!!	native_lineTo(in nPath : long, in x : float, in y : float) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.lineTo(x, y);
!!!76064311.java!!!	native_rLineTo(in nPath : long, in dx : float, in dy : float) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.rLineTo(dx, dy);
!!!76064439.java!!!	native_quadTo(in nPath : long, in x1 : float, in y1 : float, in x2 : float, in y2 : float) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.quadTo(x1, y1, x2, y2);
!!!76064567.java!!!	native_rQuadTo(in nPath : long, in dx1 : float, in dy1 : float, in dx2 : float, in dy2 : float) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.rQuadTo(dx1, dy1, dx2, dy2);
!!!76064695.java!!!	native_cubicTo(in nPath : long, in x1 : float, in y1 : float, in x2 : float, in y2 : float, in x3 : float, in y3 : float) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.cubicTo(x1, y1, x2, y2, x3, y3);
!!!76064823.java!!!	native_rCubicTo(in nPath : long, in x1 : float, in y1 : float, in x2 : float, in y2 : float, in x3 : float, in y3 : float) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.rCubicTo(x1, y1, x2, y2, x3, y3);
!!!76064951.java!!!	native_arcTo(in nPath : long, in left : float, in top : float, in right : float, in bottom : float, in startAngle : float, in sweepAngle : float, inout forceMoveTo : boolean) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.arcTo(left, top, right, bottom, startAngle, sweepAngle, forceMoveTo);
!!!76065079.java!!!	native_close(in nPath : long) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.close();
!!!76065207.java!!!	native_addRect(in nPath : long, in left : float, in top : float, in right : float, in bottom : float, in dir : int) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.addRect(left, top, right, bottom, dir);
!!!76065335.java!!!	native_addOval(in nPath : long, in left : float, in top : float, in right : float, in bottom : float, in dir : int) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.mPath.append(new Ellipse2D.Float(
                left, top, right - left, bottom - top), false);
!!!76065463.java!!!	native_addCircle(in nPath : long, in x : float, in y : float, in radius : float, in dir : int) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        // because x/y is the center of the circle, need to offset this by the radius
        pathDelegate.mPath.append(new Ellipse2D.Float(
                x - radius, y - radius, radius * 2, radius * 2), false);
!!!76065591.java!!!	native_addArc(in nPath : long, in left : float, in top : float, in right : float, in bottom : float, in startAngle : float, in sweepAngle : float) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        // because x/y is the center of the circle, need to offset this by the radius
        pathDelegate.mPath.append(new Arc2D.Float(
                left, top, right - left, bottom - top,
                -startAngle, -sweepAngle, Arc2D.OPEN), false);
!!!76065719.java!!!	native_addRoundRect(in nPath : long, in left : float, in top : float, in right : float, in bottom : float, in rx : float, in ry : float, in dir : int) : void

        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.mPath.append(new RoundRectangle2D.Float(
                left, top, right - left, bottom - top, rx * 2, ry * 2), false);
!!!76065847.java!!!	native_addRoundRect(in nPath : long, in left : float, in top : float, in right : float, in bottom : float, inout radii : float [[]], in dir : int) : void

        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        float[] cornerDimensions = new float[radii.length];
        for (int i = 0; i < radii.length; i++) {
            cornerDimensions[i] = 2 * radii[i];
        }
        pathDelegate.mPath.append(new RoundRectangle(left, top, right - left, bottom - top,
                cornerDimensions), false);
!!!76065975.java!!!	native_addPath(in nPath : long, in src : long, in dx : float, in dy : float) : void
        addPath(nPath, src, AffineTransform.getTranslateInstance(dx, dy));
!!!76066103.java!!!	native_addPath(in nPath : long, in src : long) : void
        addPath(nPath, src, null /*transform*/);
!!!76066231.java!!!	native_addPath(in nPath : long, in src : long, in matrix : long) : void
        Matrix_Delegate matrixDelegate = Matrix_Delegate.getDelegate(matrix);
        if (matrixDelegate == null) {
            return;
        }

        addPath(nPath, src, matrixDelegate.getAffineTransform());
!!!76066359.java!!!	native_offset(in nPath : long, in dx : float, in dy : float) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.offset(dx, dy);
!!!76066487.java!!!	native_setLastPoint(in nPath : long, in dx : float, in dy : float) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.mLastX = dx;
        pathDelegate.mLastY = dy;
!!!76066615.java!!!	native_transform(in nPath : long, in matrix : long, in dst_path : long) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        Matrix_Delegate matrixDelegate = Matrix_Delegate.getDelegate(matrix);
        if (matrixDelegate == null) {
            return;
        }

        // this can be null if dst_path is 0
        Path_Delegate dstDelegate = sManager.getDelegate(dst_path);

        pathDelegate.transform(matrixDelegate, dstDelegate);
!!!76066743.java!!!	native_transform(in nPath : long, in matrix : long) : void
        native_transform(nPath, matrix, 0);
!!!76066871.java!!!	native_op(in nPath1 : long, in nPath2 : long, in op : int, in result : long) : boolean
        Bridge.getLog().error(LayoutLog.TAG_UNSUPPORTED, "Path.op() not supported", null);
        return false;
!!!76066999.java!!!	finalizer(in nPath : long) : void
        sManager.removeJavaReferenceFor(nPath);
!!!76067127.java!!!	native_approximate(in nPath : long, in error : float) : float
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return null;
        }
        // Get a FlatteningIterator
        PathIterator iterator = pathDelegate.getJavaShape().getPathIterator(null, error);

        float segment[] = new float[6];
        float totalLength = 0;
        ArrayList<Point2D.Float> points = new ArrayList<Point2D.Float>();
        Point2D.Float previousPoint = null;
        while (!iterator.isDone()) {
            int type = iterator.currentSegment(segment);
            Point2D.Float currentPoint = new Point2D.Float(segment[0], segment[1]);
            // MoveTo shouldn't affect the length
            if (previousPoint != null && type != PathIterator.SEG_MOVETO) {
                totalLength += currentPoint.distance(previousPoint);
            }
            previousPoint = currentPoint;
            points.add(currentPoint);
            iterator.next();
        }

        int nPoints = points.size();
        float[] result = new float[nPoints * 3];
        previousPoint = null;
        for (int i = 0; i < nPoints; i++) {
            Point2D.Float point = points.get(i);
            float distance = previousPoint != null ? (float) previousPoint.distance(point) : .0f;
            result[i * 3] = distance / totalLength;
            result[i * 3 + 1] = point.x;
            result[i * 3 + 2] = point.y;

            totalLength += distance;
            previousPoint = point;
        }

        return result;
!!!76067255.java!!!	set(inout delegate : Path_Delegate) : void
        mPath.reset();
        setFillType(delegate.mFillType);
        mPath.append(delegate.mPath, false /*connect*/);
!!!76067383.java!!!	setFillType(inout fillType : Path::FillType) : void
        mFillType = fillType;
        mPath.setWindingRule(getWindingRule(fillType));
!!!76067511.java!!!	getWindingRule(inout type : Path::FillType) : int
        switch (type) {
            case WINDING:
            case INVERSE_WINDING:
                return GeneralPath.WIND_NON_ZERO;
            case EVEN_ODD:
            case INVERSE_EVEN_ODD:
                return GeneralPath.WIND_EVEN_ODD;
        }

        assert false;
        throw new IllegalArgumentException();
!!!76067639.java!!!	getDirection(in direction : int) : Path::Direction
        for (Direction d : Direction.values()) {
            if (direction == d.nativeInt) {
                return d;
            }
        }

        assert false;
        return null;
!!!76067767.java!!!	addPath(in destPath : long, in srcPath : long, inout transform : AffineTransform) : void
        Path_Delegate destPathDelegate = sManager.getDelegate(destPath);
        if (destPathDelegate == null) {
            return;
        }

        Path_Delegate srcPathDelegate = sManager.getDelegate(srcPath);
        if (srcPathDelegate == null) {
            return;
        }

        if (transform != null) {
            destPathDelegate.mPath.append(
                    srcPathDelegate.mPath.getPathIterator(transform), false);
        } else {
            destPathDelegate.mPath.append(srcPathDelegate.mPath, false);
        }
!!!76067895.java!!!	hasPoints() : boolean
        return !mPath.getPathIterator(null).isDone();
!!!76068023.java!!!	isEmpty() : boolean
        if (!mCachedIsEmpty) {
            return false;
        }

        float[] coords = new float[6];
        mCachedIsEmpty = Boolean.TRUE;
        for (PathIterator it = mPath.getPathIterator(null); !it.isDone(); it.next()) {
            int type = it.currentSegment(coords);
            if (type != PathIterator.SEG_MOVETO) {
                // Once we know that the path is not empty, we do not need to check again unless
                // Path#reset is called.
                mCachedIsEmpty = false;
                return false;
            }
        }

        return true;
!!!76068151.java!!!	fillBounds(inout bounds : RectF) : void
        Rectangle2D rect = mPath.getBounds2D();
        bounds.left = (float)rect.getMinX();
        bounds.right = (float)rect.getMaxX();
        bounds.top = (float)rect.getMinY();
        bounds.bottom = (float)rect.getMaxY();
!!!76068279.java!!!	moveTo(in x : float, in y : float) : void
        mPath.moveTo(mLastX = x, mLastY = y);
!!!76068407.java!!!	rMoveTo(in dx : float, in dy : float) : void
        dx += mLastX;
        dy += mLastY;
        mPath.moveTo(mLastX = dx, mLastY = dy);
!!!76068535.java!!!	lineTo(in x : float, in y : float) : void
        if (!hasPoints()) {
            mPath.moveTo(mLastX = 0, mLastY = 0);
        }
        mPath.lineTo(mLastX = x, mLastY = y);
!!!76068663.java!!!	rLineTo(in dx : float, in dy : float) : void
        if (!hasPoints()) {
            mPath.moveTo(mLastX = 0, mLastY = 0);
        }

        if (Math.abs(dx) < EPSILON && Math.abs(dy) < EPSILON) {
            // The delta is so small that this shouldn't generate a line
            return;
        }

        dx += mLastX;
        dy += mLastY;
        mPath.lineTo(mLastX = dx, mLastY = dy);
!!!76068791.java!!!	quadTo(in x1 : float, in y1 : float, in x2 : float, in y2 : float) : void
        mPath.quadTo(x1, y1, mLastX = x2, mLastY = y2);
!!!76068919.java!!!	rQuadTo(in dx1 : float, in dy1 : float, in dx2 : float, in dy2 : float) : void
        if (!hasPoints()) {
            mPath.moveTo(mLastX = 0, mLastY = 0);
        }
        dx1 += mLastX;
        dy1 += mLastY;
        dx2 += mLastX;
        dy2 += mLastY;
        mPath.quadTo(dx1, dy1, mLastX = dx2, mLastY = dy2);
!!!76069047.java!!!	cubicTo(in x1 : float, in y1 : float, in x2 : float, in y2 : float, in x3 : float, in y3 : float) : void
        if (!hasPoints()) {
            mPath.moveTo(0, 0);
        }
        mPath.curveTo(x1, y1, x2, y2, mLastX = x3, mLastY = y3);
!!!76069175.java!!!	rCubicTo(in dx1 : float, in dy1 : float, in dx2 : float, in dy2 : float, in dx3 : float, in dy3 : float) : void
        if (!hasPoints()) {
            mPath.moveTo(mLastX = 0, mLastY = 0);
        }
        dx1 += mLastX;
        dy1 += mLastY;
        dx2 += mLastX;
        dy2 += mLastY;
        dx3 += mLastX;
        dy3 += mLastY;
        mPath.curveTo(dx1, dy1, dx2, dy2, mLastX = dx3, mLastY = dy3);
!!!76069303.java!!!	arcTo(in left : float, in top : float, in right : float, in bottom : float, in startAngle : float, in sweepAngle : float, inout forceMoveTo : boolean) : void
        Arc2D arc = new Arc2D.Float(left, top, right - left, bottom - top, -startAngle,
                -sweepAngle, Arc2D.OPEN);
        mPath.append(arc, true /*connect*/);

        resetLastPointFromPath();
!!!76069431.java!!!	close() : void
        mPath.closePath();
!!!76069559.java!!!	resetLastPointFromPath() : void
        Point2D last = mPath.getCurrentPoint();
        mLastX = (float) last.getX();
        mLastY = (float) last.getY();
!!!76069687.java!!!	addRect(in left : float, in top : float, in right : float, in bottom : float, in dir : int) : void
        moveTo(left, top);

        Direction direction = getDirection(dir);

        switch (direction) {
            case CW:
                lineTo(right, top);
                lineTo(right, bottom);
                lineTo(left, bottom);
                break;
            case CCW:
                lineTo(left, bottom);
                lineTo(right, bottom);
                lineTo(right, top);
                break;
        }

        close();

        resetLastPointFromPath();
!!!76069815.java!!!	offset(in dx : float, in dy : float) : void
        GeneralPath newPath = new GeneralPath();

        PathIterator iterator = mPath.getPathIterator(new AffineTransform(0, 0, dx, 0, 0, dy));

        newPath.append(iterator, false /*connect*/);
        mPath = newPath;
!!!76069943.java!!!	transform(inout matrix : Matrix_Delegate, inout dst : Path_Delegate) : void
        if (matrix.hasPerspective()) {
            assert false;
            Bridge.getLog().fidelityWarning(LayoutLog.TAG_MATRIX_AFFINE,
                    "android.graphics.Path#transform() only " +
                    "supports affine transformations.", null, null /*data*/);
        }

        GeneralPath newPath = new GeneralPath();

        PathIterator iterator = mPath.getPathIterator(matrix.getAffineTransform());

        newPath.append(iterator, false /*connect*/);

        if (dst != null) {
            dst.mPath = newPath;
        } else {
            mPath = newPath;
        }
