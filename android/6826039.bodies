class SparseWeakArray
!!!76299191.java!!!	SparseWeakArray()
        this(10);
!!!76299319.java!!!	SparseWeakArray(in initialCapacity : int)
        mKeys = ArrayUtils.newUnpaddedLongArray(initialCapacity);
        mValues = new WeakReference[mKeys.length];
        mSize = 0;
!!!76299447.java!!!	get(in key : long) : E
        return get(key, null);
!!!76299575.java!!!	get(in key : long, inout valueIfKeyNotFound : E) : E
        int i = binarySearch(mKeys, 0, mSize, key);

        if (i < 0 || mValues[i] == DELETED || mValues[i].get() == null) {
            return valueIfKeyNotFound;
        } else {
            return (E) mValues[i].get();
        }
!!!76299703.java!!!	delete(in key : long) : void
        int i = binarySearch(mKeys, 0, mSize, key);

        if (i >= 0) {
            if (mValues[i] != DELETED) {
                mValues[i] = DELETED;
                mGarbage = true;
            }
        }
!!!76299831.java!!!	remove(in key : long) : void
        delete(key);
!!!76299959.java!!!	removeAt(in index : int) : void
        if (mValues[index] != DELETED) {
            mValues[index] = DELETED;
            mGarbage = true;
        }
!!!76300087.java!!!	gc() : void
        int n = mSize;
        int o = 0;
        long[] keys = mKeys;
        WeakReference<?>[] values = mValues;

        for (int i = 0; i < n; i++) {
            WeakReference<?> val = values[i];

            // Don't keep any non DELETED values, but only the one that still have a valid
            // reference.
            if (val != DELETED && val.get() != null) {
                if (i != o) {
                    keys[o] = keys[i];
                    values[o] = val;
                }

                o++;
            }
        }

        mGarbage = false;
        mSize = o;
!!!76300215.java!!!	put(in key : long, inout value : E) : void
        int i = binarySearch(mKeys, 0, mSize, key);

        if (i >= 0) {
            mValues[i] = new WeakReference(value);
        } else {
            i = ~i;

            if (i < mSize && (mValues[i] == DELETED || mValues[i].get() == null)) {
                mKeys[i] = key;
                mValues[i] = new WeakReference(value);
                return;
            }

            if (mSize >= mKeys.length && (mGarbage || hasReclaimedRefs())) {
                gc();

                // Search again because indices may have changed.
                i = ~binarySearch(mKeys, 0, mSize, key);
            }

            mKeys = GrowingArrayUtils.insert(mKeys, mSize, i, key);
            mValues = GrowingArrayUtils.insert(mValues, mSize, i, new WeakReference(value));
            mSize++;
        }
!!!76300343.java!!!	size() : int
        if (mGarbage) {
            gc();
        }

        return mSize;
!!!76300471.java!!!	keyAt(in index : int) : long
        if (mGarbage) {
            gc();
        }

        return mKeys[index];
!!!76300599.java!!!	valueAt(in index : int) : E
        if (mGarbage) {
            gc();
        }

        return (E) mValues[index].get();
!!!76300727.java!!!	setValueAt(in index : int, inout value : E) : void
        if (mGarbage) {
            gc();
        }

        mValues[index] = new WeakReference(value);
!!!76300855.java!!!	indexOfKey(in key : long) : int
        if (mGarbage) {
            gc();
        }

        return binarySearch(mKeys, 0, mSize, key);
!!!76300983.java!!!	indexOfValue(inout value : E) : int
        if (mGarbage) {
            gc();
        }

        for (int i = 0; i < mSize; i++)
            if (mValues[i].get() == value)
                return i;

        return -1;
!!!76301111.java!!!	clear() : void
        int n = mSize;
        WeakReference<?>[] values = mValues;

        for (int i = 0; i < n; i++) {
            values[i] = null;
        }

        mSize = 0;
        mGarbage = false;
!!!76301239.java!!!	append(in key : long, inout value : E) : void
        if (mSize != 0 && key <= mKeys[mSize - 1]) {
            put(key, value);
            return;
        }

        if (mSize >= mKeys.length && (mGarbage || hasReclaimedRefs())) {
            gc();
        }

        mKeys = GrowingArrayUtils.append(mKeys, mSize, key);
        mValues = GrowingArrayUtils.append(mValues, mSize, new WeakReference(value));
        mSize++;
!!!76301367.java!!!	hasReclaimedRefs() : boolean
        for (int i = 0 ; i < mSize ; i++) {
            if (mValues[i].get() == null) { // DELETED.get() never returns null.
                return true;
            }
        }

        return false;
!!!76301495.java!!!	binarySearch(inout a : long [[]], in start : int, in len : int, in key : long) : int
        int high = start + len, low = start - 1, guess;

        while (high - low > 1) {
            guess = (high + low) / 2;

            if (a[guess] < key)
                low = guess;
            else
                high = guess;
        }

        if (high == start + len)
            return ~(start + len);
        else if (a[high] == key)
            return high;
        else
            return ~high;
