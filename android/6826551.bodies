class LayoutParserWrapper
!!!76271159.java!!!	LayoutParserWrapper(inout delegate : XmlPullParser)
        mDelegate = delegate;
!!!76271287.java!!!	peekTillLayoutStart() : LayoutParserWrapper
        final int STATE_LAYOUT_NOT_STARTED = 0;  // <layout> tag not encountered yet.
        final int STATE_ROOT_NOT_STARTED = 1;    // the main view root not found yet.
        final int STATE_INSIDE_DATA = 2;         // START_TAG for <data> found, but not END_TAG.

        int state = STATE_LAYOUT_NOT_STARTED;
        int dataDepth = -1;    // depth of the <data> tag. Should be two.
        while (true) {
            int peekNext = peekNext();
            switch (peekNext) {
                case START_TAG:
                    if (state == STATE_LAYOUT_NOT_STARTED) {
                        if (mName.equals(TAG_LAYOUT)) {
                            state = STATE_ROOT_NOT_STARTED;
                        } else {
                            return this; // no layout tag in the file.
                        }
                    } else if (state == STATE_ROOT_NOT_STARTED) {
                        if (mName.equals(TAG_DATA)) {
                            state = STATE_INSIDE_DATA;
                            dataDepth = mDepth;
                        } else {
                            mFinalDepth = mDepth;
                            return this;
                        }
                    }
                    break;
                case END_TAG:
                    if (state == STATE_INSIDE_DATA) {
                        if (mDepth <= dataDepth) {
                            state = STATE_ROOT_NOT_STARTED;
                        }
                    }
                    break;
                case END_DOCUMENT:
                    // No layout start found.
                    return this;
            }
            // consume the peeked tag.
            next();
        }
!!!76271415.java!!!	peekNext() : int
        if (mPeeked) {
            return mNext;
        }
        mEventType = mDelegate.getEventType();
        mNext = mDelegate.next();
        if (mEventType == START_TAG) {
            int count = mDelegate.getAttributeCount();
            mAttributes = count > 0 ? new ArrayList<Attribute>(count) :
                    Collections.<Attribute>emptyList();
            for (int i = 0; i < count; i++) {
                mAttributes.add(new Attribute(mDelegate.getAttributeNamespace(i),
                        mDelegate.getAttributeName(i), mDelegate.getAttributeValue(i)));
            }
        }
        mDepth = mDelegate.getDepth();
        mText = mDelegate.getText();
        mName = mDelegate.getName();
        mPeeked = true;
        return mNext;
!!!76271543.java!!!	reset() : void
        mAttributes = null;
        mText = null;
        mName = null;
        mPeeked = false;
!!!76271671.java!!!	next() : int
        int returnValue;
        int depth;
        if (mPeeked) {
            returnValue = mNext;
            depth = mDepth;
            reset();
        } else if (mEndNow) {
            return END_DOCUMENT;
        } else {
            returnValue = mDelegate.next();
            depth = getDepth();
        }
        if (returnValue == END_TAG && depth <= mFinalDepth) {
            mEndNow = true;
        }
        return returnValue;
!!!76271799.java!!!	getEventType() : int
        return mPeeked ? mEventType : mDelegate.getEventType();
!!!76271927.java!!!	getDepth() : int
        return mPeeked ? mDepth : mDelegate.getDepth();
!!!76272055.java!!!	getName() : String
        return mPeeked ? mName : mDelegate.getName();
!!!76272183.java!!!	getText() : String
        return mPeeked ? mText : mDelegate.getText();
!!!76272311.java!!!	getAttributeValue(inout namespace : String, inout name : String) : String
        String returnValue = null;
        if (mPeeked) {
            if (mAttributes == null) {
                if (mEventType != START_TAG) {
                    throw new IndexOutOfBoundsException("getAttributeValue() called when not at START_TAG.");
                } else {
                    return null;
                }
            } else {
                for (Attribute attribute : mAttributes) {
                    //noinspection StringEquality for nullness check.
                    if (attribute.name.equals(name) && (attribute.namespace == namespace ||
                            attribute.namespace != null && attribute.namespace.equals(namespace))) {
                        returnValue = attribute.value;
                        break;
                    }
                }
            }
        } else {
            returnValue = mDelegate.getAttributeValue(namespace, name);
        }
        // Check if the value is bound via data-binding, if yes get the default value.
        if (returnValue != null && mFinalDepth >= 0 && returnValue.startsWith("@{")) {
            // TODO: Improve the detection of default keyword.
            int i = returnValue.lastIndexOf(DEFAULT);
            return i > 0 ? returnValue.substring(i + DEFAULT.length(), returnValue.length() - 1)
                    : null;
        }
        return returnValue;
!!!76272567.java!!!	setFeature(inout s : String, inout b : boolean) : void
        mDelegate.setFeature(s, b);
!!!76272695.java!!!	setProperty(inout s : String, inout o : Object) : void
        mDelegate.setProperty(s, o);
!!!76272823.java!!!	setInput(inout inputStream : InputStream, inout s : String) : void
        mDelegate.setInput(inputStream, s);
!!!76272951.java!!!	setInput(inout reader : Reader) : void
        mDelegate.setInput(reader);
!!!76273079.java!!!	getInputEncoding() : String
        return mDelegate.getInputEncoding();
!!!76273207.java!!!	getNamespace(inout s : String) : String
        return mDelegate.getNamespace(s);
!!!76273335.java!!!	getPositionDescription() : String
        return mDelegate.getPositionDescription();
!!!76273463.java!!!	getLineNumber() : int
        return mDelegate.getLineNumber();
!!!76273591.java!!!	getNamespace() : String
        return mDelegate.getNamespace();
!!!76273719.java!!!	getColumnNumber() : int
        return mDelegate.getColumnNumber();
!!!76273847.java!!!	require(in i : int, inout s : String, inout s1 : String) : void
        throw new UnsupportedOperationException("Only few parser methods are supported.");
!!!76273975.java!!!	getFeature(inout s : String) : boolean
        throw new UnsupportedOperationException("Only few parser methods are supported.");
!!!76274103.java!!!	defineEntityReplacementText(inout s : String, inout s1 : String) : void
        throw new UnsupportedOperationException("Only few parser methods are supported.");
!!!76274231.java!!!	getProperty(inout s : String) : Object
        throw new UnsupportedOperationException("Only few parser methods are supported.");
!!!76274359.java!!!	nextToken() : int
        throw new UnsupportedOperationException("Only few parser methods are supported.");
!!!76274487.java!!!	getNamespaceCount(in i : int) : int
        throw new UnsupportedOperationException("Only few parser methods are supported.");
!!!76274615.java!!!	getNamespacePrefix(in i : int) : String
        throw new UnsupportedOperationException("Only few parser methods are supported.");
!!!76274743.java!!!	getNamespaceUri(in i : int) : String
        throw new UnsupportedOperationException("Only few parser methods are supported.");
!!!76274871.java!!!	isWhitespace() : boolean
        throw new UnsupportedOperationException("Only few parser methods are supported.");
!!!76274999.java!!!	getTextCharacters(inout ints : int [[]]) : char
        throw new UnsupportedOperationException("Only few parser methods are supported.");
!!!76275127.java!!!	getPrefix() : String
        throw new UnsupportedOperationException("Only few parser methods are supported.");
!!!76275255.java!!!	isEmptyElementTag() : boolean
        throw new UnsupportedOperationException("Only few parser methods are supported.");
!!!76275383.java!!!	getAttributeCount() : int
        throw new UnsupportedOperationException("Only few parser methods are supported.");
!!!76275511.java!!!	getAttributeNamespace(in i : int) : String
        throw new UnsupportedOperationException("Only few parser methods are supported.");
!!!76275639.java!!!	getAttributeName(in i : int) : String
        throw new UnsupportedOperationException("Only few parser methods are supported.");
!!!76275767.java!!!	getAttributePrefix(in i : int) : String
        throw new UnsupportedOperationException("Only few parser methods are supported.");
!!!76275895.java!!!	getAttributeType(in i : int) : String
        throw new UnsupportedOperationException("Only few parser methods are supported.");
!!!76276023.java!!!	isAttributeDefault(in i : int) : boolean
        throw new UnsupportedOperationException("Only few parser methods are supported.");
!!!76276151.java!!!	getAttributeValue(in i : int) : String
        throw new UnsupportedOperationException("Only few parser methods are supported.");
!!!76276279.java!!!	nextText() : String
        throw new UnsupportedOperationException("Only few parser methods are supported.");
!!!76276407.java!!!	nextTag() : int
        throw new UnsupportedOperationException("Only few parser methods are supported.");
