class AsmAnalyzer
!!!76328503.java!!!	AsmAnalyzer(inout log : Log, inout osJarPath : List<String>, inout gen : AsmGenerator, inout deriveFrom : String [[]], inout includeGlobs : String [[]], inout excludeClasses : Set<String>, inout includeFileGlobs : String [[]])
        mLog = log;
        mGen = gen;
        mOsSourceJar = osJarPath != null ? osJarPath : new ArrayList<String>();
        mDeriveFrom = deriveFrom != null ? deriveFrom : new String[0];
        mIncludeGlobs = includeGlobs != null ? includeGlobs : new String[0];
        mExcludedClasses = excludeClasses;
        mIncludeFileGlobs = includeFileGlobs != null ? includeFileGlobs : new String[0];
!!!76328631.java!!!	analyze() : void

        TreeMap<String, ClassReader> zipClasses = new TreeMap<>();
        Map<String, InputStream> filesFound = new TreeMap<>();

        parseZip(mOsSourceJar, zipClasses, filesFound);
        mLog.info("Found %d classes in input JAR%s.", zipClasses.size(),
                mOsSourceJar.size() > 1 ? "s" : "");

        Map<String, ClassReader> found = findIncludes(zipClasses);
        Map<String, ClassReader> deps = findDeps(zipClasses, found);

        if (mGen != null) {
            mGen.setKeep(found);
            mGen.setDeps(deps);
            mGen.setCopyFiles(filesFound);
            mGen.setRewriteMethodCallClasses(mReplaceMethodCallClasses);
        }
!!!76328759.java!!!	parseZip(inout jarPathList : List<String>, inout classes : Map<String, ClassReader>, inout filesFound : Map<String, InputStream>) : void
        if (classes == null || filesFound == null) {
            return;
        }

        Pattern[] includeFilePatterns = new Pattern[mIncludeFileGlobs.length];
        for (int i = 0; i < mIncludeFileGlobs.length; ++i) {
            includeFilePatterns[i] = getPatternFromGlob(mIncludeFileGlobs[i]);
        }

        for (String jarPath : jarPathList) {
            ZipFile zip = new ZipFile(jarPath);
            Enumeration<? extends ZipEntry> entries = zip.entries();
            ZipEntry entry;
            while (entries.hasMoreElements()) {
                entry = entries.nextElement();
                if (entry.getName().endsWith(".class")) {
                    ClassReader cr = new ClassReader(zip.getInputStream(entry));
                    String className = classReaderToClassName(cr);
                    classes.put(className, cr);
                } else {
                    for (Pattern includeFilePattern : includeFilePatterns) {
                        if (includeFilePattern.matcher(entry.getName()).matches()) {
                            filesFound.put(entry.getName(), zip.getInputStream(entry));
                            break;
                        }
                    }
                }
            }
        }

!!!76328887.java!!!	classReaderToClassName(inout classReader : ClassReader) : String
        if (classReader == null) {
            return null;
        } else {
            return classReader.getClassName().replace('/', '.');
        }
!!!76329015.java!!!	internalToBinaryClassName(inout className : String) : String
        if (className == null) {
            return null;
        } else {
            return className.replace('/', '.');
        }
!!!76329143.java!!!	findIncludes(inout zipClasses : Map<String, ClassReader>) : String
        TreeMap<String, ClassReader> found = new TreeMap<>();

        mLog.debug("Find classes to include.");

        for (String s : mIncludeGlobs) {
            findGlobs(s, zipClasses, found);
        }
        for (String s : mDeriveFrom) {
            findClassesDerivingFrom(s, zipClasses, found);
        }

        return found;
!!!76329271.java!!!	findClass(inout className : String, inout zipClasses : Map<String, ClassReader>, inout inOutFound : Map<String, ClassReader>) : ClassReader
        ClassReader classReader = zipClasses.get(className);
        if (classReader == null) {
            throw new LogAbortException("Class %s not found by ASM in %s",
                    className, mOsSourceJar);
        }

        inOutFound.put(className, classReader);
        return classReader;
!!!76329399.java!!!	findGlobs(inout globPattern : String, inout zipClasses : Map<String, ClassReader>, inout inOutFound : Map<String, ClassReader>) : void

        Pattern regexp = getPatternFromGlob(globPattern);

        for (Entry<String, ClassReader> entry : zipClasses.entrySet()) {
            String class_name = entry.getKey();
            if (regexp.matcher(class_name).matches() &&
                    !mExcludedClasses.contains(getOuterClassName(class_name))) {
                findClass(class_name, zipClasses, inOutFound);
            }
        }
!!!76329527.java!!!	getPatternFromGlob(inout globPattern : String) : Pattern
     // transforms the glob pattern in a regexp:
        // - escape "." with "\."
        // - replace "*" by "[^.]*"
        // - escape "$" with "\$"
        // - add end-of-line match $
        globPattern = globPattern.replaceAll("\\$", "\\\\\\$");
        globPattern = globPattern.replaceAll("\\.", "\\\\.");
        // prevent ** from being altered by the next rule, then process the * rule and finally
        // the real ** rule (which is now @)
        globPattern = globPattern.replaceAll("\\*\\*", "@");
        globPattern = globPattern.replaceAll("\\*", "[^.]*");
        globPattern = globPattern.replaceAll("@", ".*");
        globPattern += "$";

        return Pattern.compile(globPattern);
!!!76329655.java!!!	findClassesDerivingFrom(inout super_name : String, inout zipClasses : Map<String, ClassReader>, inout inOutFound : Map<String, ClassReader>) : void
        if (mExcludedClasses.contains(getOuterClassName(super_name))) {
            return;
        }
        findClass(super_name, zipClasses, inOutFound);

        for (Entry<String, ClassReader> entry : zipClasses.entrySet()) {
            String className = entry.getKey();
            if (super_name.equals(className)) {
                continue;
            }
            ClassReader classReader = entry.getValue();
            ClassReader parent_cr = classReader;
            while (parent_cr != null) {
                String parent_name = internalToBinaryClassName(parent_cr.getSuperName());
                if (parent_name == null) {
                    // not found
                    break;
                } else if (super_name.equals(parent_name)) {
                    inOutFound.put(className, classReader);
                    break;
                }
                parent_cr = zipClasses.get(parent_name);
            }
        }
!!!76329783.java!!!	getVisitor(inout zipClasses : Map<String, ClassReader>, inout inKeep : Map<String, ClassReader>, inout outKeep : Map<String, ClassReader>, inout inDeps : Map<String, ClassReader>, inout outDeps : Map<String, ClassReader>) : AsmAnalyzer::DependencyVisitor
        return new DependencyVisitor(zipClasses, inKeep, outKeep, inDeps, outDeps);
!!!76329911.java!!!	findDeps(inout zipClasses : Map<String, ClassReader>, inout inOutKeepClasses : Map<String, ClassReader>) : String

        TreeMap<String, ClassReader> deps = new TreeMap<>();
        TreeMap<String, ClassReader> new_deps = new TreeMap<>();
        TreeMap<String, ClassReader> new_keep = new TreeMap<>();
        TreeMap<String, ClassReader> temp = new TreeMap<>();

        DependencyVisitor visitor = getVisitor(zipClasses,
                inOutKeepClasses, new_keep,
                deps, new_deps);

        for (ClassReader cr : inOutKeepClasses.values()) {
            visitor.setClassName(cr.getClassName());
            cr.accept(visitor, 0 /* flags */);
        }

        while (new_deps.size() > 0 || new_keep.size() > 0) {
            deps.putAll(new_deps);
            inOutKeepClasses.putAll(new_keep);

            temp.clear();
            temp.putAll(new_deps);
            temp.putAll(new_keep);
            new_deps.clear();
            new_keep.clear();
            mLog.debug("Found %1$d to keep, %2$d dependencies.",
                    inOutKeepClasses.size(), deps.size());

            for (ClassReader cr : temp.values()) {
                visitor.setClassName(cr.getClassName());
                cr.accept(visitor, 0 /* flags */);
            }
        }

        mLog.info("Found %1$d classes to keep, %2$d class dependencies.",
                inOutKeepClasses.size(), deps.size());

        return deps;
!!!76330039.java!!!	getOuterClassName(inout className : String) : String
        int pos = className.indexOf('$');
        if (pos > 0) {
            return className.substring(0, pos);
        }
        return className;
