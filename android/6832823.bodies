class MyMethodVisitor
!!!76332727.java!!!	MyMethodVisitor(inout ownerClass : String)
                super(Main.ASM_VERSION);
                mOwnerClass = ownerClass;
!!!76332855.java!!!	visitAnnotationDefault() : AnnotationVisitor
                return new MyAnnotationVisitor();
!!!76332983.java!!!	visitCode() : void
                // pass
!!!76333111.java!!!	visitFieldInsn(in opcode : int, inout owner : String, inout name : String, inout desc : String) : void
                // owner is the class that declares the field.
                considerName(owner);
                // desc is the field's descriptor (see Type).
                considerDesc(desc);
!!!76333239.java!!!	visitFrame(in type : int, in local : int, inout local2 : Object [[]], in stack : int, inout stack2 : Object [[]]) : void
                // pass
!!!76333367.java!!!	visitIincInsn(in var : int, in increment : int) : void
                // pass -- an IINC instruction
!!!76333495.java!!!	visitInsn(in opcode : int) : void
                // pass -- a zero operand instruction
!!!76333623.java!!!	visitIntInsn(in opcode : int, in operand : int) : void
                // pass -- a single int operand instruction
!!!76333751.java!!!	visitJumpInsn(in opcode : int, inout label : Label) : void
                // pass -- a jump instruction
!!!76333879.java!!!	visitLabel(inout label : Label) : void
                // pass -- a label target
!!!76334007.java!!!	visitLdcInsn(inout cst : Object) : void
                if (cst instanceof Type) {
                    considerType((Type) cst);
                }
!!!76334135.java!!!	visitLineNumber(in line : int, inout start : Label) : void
                // pass
!!!76334263.java!!!	visitLocalVariable(inout name : String, inout desc : String, inout signature : String, inout start : Label, inout end : Label, in index : int) : void
                // desc is the type descriptor of this local variable.
                considerDesc(desc);
                // signature is the type signature of this local variable. May be null if the local
                // variable type does not use generic types.
                considerSignature(signature);
!!!76334391.java!!!	visitLookupSwitchInsn(inout dflt : Label, inout keys : int [[]], inout labels : Label [[]]) : void
                // pass -- a lookup switch instruction
!!!76334519.java!!!	visitMaxs(in maxStack : int, in maxLocals : int) : void
                // pass
!!!76334647.java!!!	visitMethodInsn(in opcode : int, inout owner : String, inout name : String, inout desc : String, inout itf : boolean) : void

                // owner is the internal name of the method's owner class
                considerName(owner);
                // desc is the method's descriptor (see Type).
                considerDesc(desc);


                // Check if method needs to replaced by a call to a different method.
                if (ReplaceMethodCallsAdapter.isReplacementNeeded(owner, name, desc, mOwnerClass)) {
                    mReplaceMethodCallClasses.add(mOwnerClass);
                }
!!!76334775.java!!!	visitMultiANewArrayInsn(inout desc : String, in dims : int) : void

                // desc an array type descriptor.
                considerDesc(desc);
!!!76334903.java!!!	visitParameterAnnotation(in parameter : int, inout desc : String, inout visible : boolean) : AnnotationVisitor
                // desc is the class descriptor of the annotation class.
                considerDesc(desc);
                return new MyAnnotationVisitor();
!!!76335031.java!!!	visitTableSwitchInsn(in min : int, in max : int, inout dflt : Label, inout  : Label...labels) : void
                // pass -- table switch instruction

!!!76335159.java!!!	visitTryCatchBlock(inout start : Label, inout end : Label, inout handler : Label, inout type : String) : void
                // type is the internal name of the type of exceptions handled by the handler,
                // or null to catch any exceptions (for "finally" blocks).
                considerName(type);
!!!76335287.java!!!	visitTypeInsn(in opcode : int, inout type : String) : void
                // type is the operand of the instruction to be visited. This operand must be the
                // internal name of an object or array class.
                considerName(type);
!!!76335415.java!!!	visitVarInsn(in opcode : int, in var : int) : void
                // pass -- local variable instruction
