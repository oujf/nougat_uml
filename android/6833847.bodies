class DelegateMethodAdapter
!!!76344887.java!!!	DelegateMethodAdapter(inout log : Log, inout mvOriginal : MethodVisitor, inout mvDelegate : MethodVisitor, inout className : String, inout methodName : String, inout desc : String, inout isStatic : boolean, inout isStaticClass : boolean)
        super(Main.ASM_VERSION);
        mLog = log;
        mOrgWriter = mvOriginal;
        mDelWriter = mvDelegate;
        mClassName = className;
        mMethodName = methodName;
        mDesc = desc;
        mIsStatic = isStatic;
        mIsStaticInnerClass = isStaticClass;
!!!76345015.java!!!	generateDelegateCode() : void
        /*
         * The goal is to generate a call to a static delegate method.
         * If this method is non-static, the first parameter will be 'this'.
         * All the parameters must be passed and then the eventual return type returned.
         *
         * Example, let's say we have a method such as
         *   public void myMethod(int a, Object b, ArrayList<String> c) { ... }
         *
         * We'll want to create a body that calls a delegate method like this:
         *   TheClass_Delegate.myMethod(this, a, b, c);
         *
         * If the method is non-static and the class name is an inner class (e.g. has $ in its
         * last segment), we want to push the 'this' of the outer class first:
         *   OuterClass_InnerClass_Delegate.myMethod(
         *     OuterClass.this,
         *     OuterClass$InnerClass.this,
         *     a, b, c);
         *
         * Only one level of inner class is supported right now, for simplicity and because
         * we don't need more.
         *
         * The generated class name is the current class name with "_Delegate" appended to it.
         * One thing to realize is that we don't care about generics -- since generic types
         * are erased at build time, they have no influence on the method name being called.
         */

        // Add our annotation
        AnnotationVisitor aw = mDelWriter.visitAnnotation(
                Type.getObjectType(Type.getInternalName(LayoutlibDelegate.class)).toString(),
                true); // visible at runtime
        if (aw != null) {
            aw.visitEnd();
        }

        mDelWriter.visitCode();

        if (mDelegateLineNumber != null) {
            Object[] p = mDelegateLineNumber;
            mDelWriter.visitLineNumber((Integer) p[0], (Label) p[1]);
        }

        ArrayList<Type> paramTypes = new ArrayList<>();
        String delegateClassName = mClassName + DELEGATE_SUFFIX;
        boolean pushedArg0 = false;
        int maxStack = 0;

        // Check if the last segment of the class name has inner an class.
        // Right now we only support one level of inner classes.
        Type outerType = null;
        int slash = mClassName.lastIndexOf('/');
        int dol = mClassName.lastIndexOf('$');
        if (dol != -1 && dol > slash && dol == mClassName.indexOf('$')) {
            String outerClass = mClassName.substring(0, dol);
            outerType = Type.getObjectType(outerClass);

            // Change a delegate class name to "com/foo/Outer_Inner_Delegate"
            delegateClassName = delegateClassName.replace('$', '_');
        }

        // For an instance method (e.g. non-static), push the 'this' preceded
        // by the 'this' of any outer class, if any.
        if (!mIsStatic) {

            if (outerType != null && !mIsStaticInnerClass) {
                // The first-level inner class has a package-protected member called 'this$0'
                // that points to the outer class.

                // Push this.getField("this$0") on the call stack.
                mDelWriter.visitVarInsn(Opcodes.ALOAD, 0); // var 0 = this
                mDelWriter.visitFieldInsn(Opcodes.GETFIELD,
                        mClassName,                 // class where the field is defined
                        "this$0",                   // field name
                        outerType.getDescriptor()); // type of the field
                maxStack++;
                paramTypes.add(outerType);

            }

            // Push "this" for the instance method, which is always ALOAD 0
            mDelWriter.visitVarInsn(Opcodes.ALOAD, 0);
            maxStack++;
            pushedArg0 = true;
            paramTypes.add(Type.getObjectType(mClassName));
        }

        // Push all other arguments. Start at arg 1 if we already pushed 'this' above.
        Type[] argTypes = Type.getArgumentTypes(mDesc);
        int maxLocals = pushedArg0 ? 1 : 0;
        for (Type t : argTypes) {
            int size = t.getSize();
            mDelWriter.visitVarInsn(t.getOpcode(Opcodes.ILOAD), maxLocals);
            maxLocals += size;
            maxStack += size;
            paramTypes.add(t);
        }

        // Construct the descriptor of the delegate based on the parameters
        // we pushed on the call stack. The return type remains unchanged.
        String desc = Type.getMethodDescriptor(
                Type.getReturnType(mDesc),
                paramTypes.toArray(new Type[paramTypes.size()]));

        // Invoke the static delegate
        mDelWriter.visitMethodInsn(Opcodes.INVOKESTATIC,
                delegateClassName,
                mMethodName,
                desc,
                false);

        Type returnType = Type.getReturnType(mDesc);
        mDelWriter.visitInsn(returnType.getOpcode(Opcodes.IRETURN));

        mDelWriter.visitMaxs(maxStack, maxLocals);
        mDelWriter.visitEnd();

        // For debugging now. Maybe we should collect these and store them in
        // a text file for helping create the delegates. We could also compare
        // the text file to a golden and break the build on unsupported changes
        // or regressions. Even better we could fancy-print something that looks
        // like the expected Java method declaration.
        mLog.debug("Delegate: %1$s # %2$s %3$s", delegateClassName, mMethodName, desc);
!!!76345143.java!!!	visitCode() : void
        if (mOrgWriter != null) {
            mOrgWriter.visitCode();
        }
!!!76345271.java!!!	visitMaxs(in maxStack : int, in maxLocals : int) : void
        if (mOrgWriter != null) {
            mOrgWriter.visitMaxs(maxStack, maxLocals);
        }
!!!76345399.java!!!	visitEnd() : void
        if (mOrgWriter != null) {
            mOrgWriter.visitEnd();
        }
        generateDelegateCode();
!!!76345527.java!!!	visitAnnotation(inout desc : String, inout visible : boolean) : AnnotationVisitor
        if (mOrgWriter != null) {
            return mOrgWriter.visitAnnotation(desc, visible);
        } else {
            return null;
        }
!!!76345655.java!!!	visitAnnotationDefault() : AnnotationVisitor
        if (mOrgWriter != null) {
            return mOrgWriter.visitAnnotationDefault();
        } else {
            return null;
        }
!!!76345783.java!!!	visitParameterAnnotation(in parameter : int, inout desc : String, inout visible : boolean) : AnnotationVisitor
        if (mOrgWriter != null) {
            return mOrgWriter.visitParameterAnnotation(parameter, desc, visible);
        } else {
            return null;
        }
!!!76345911.java!!!	visitAttribute(inout attr : Attribute) : void
        if (mOrgWriter != null) {
            mOrgWriter.visitAttribute(attr);
        }
!!!76346039.java!!!	visitLineNumber(in line : int, inout start : Label) : void
        // Capture the first line values for the new delegate method
        if (mDelegateLineNumber == null) {
            mDelegateLineNumber = new Object[] { line, start };
        }
        if (mOrgWriter != null) {
            mOrgWriter.visitLineNumber(line, start);
        }
!!!76346167.java!!!	visitInsn(in opcode : int) : void
        if (mOrgWriter != null) {
            mOrgWriter.visitInsn(opcode);
        }
!!!76346295.java!!!	visitLabel(inout label : Label) : void
        if (mOrgWriter != null) {
            mOrgWriter.visitLabel(label);
        }
!!!76346423.java!!!	visitTryCatchBlock(inout start : Label, inout end : Label, inout handler : Label, inout type : String) : void
        if (mOrgWriter != null) {
            mOrgWriter.visitTryCatchBlock(start, end, handler, type);
        }
!!!76346551.java!!!	visitMethodInsn(in opcode : int, inout owner : String, inout name : String, inout desc : String, inout itf : boolean) : void
        if (mOrgWriter != null) {
            mOrgWriter.visitMethodInsn(opcode, owner, name, desc, itf);
        }
!!!76346679.java!!!	visitFieldInsn(in opcode : int, inout owner : String, inout name : String, inout desc : String) : void
        if (mOrgWriter != null) {
            mOrgWriter.visitFieldInsn(opcode, owner, name, desc);
        }
!!!76346807.java!!!	visitFrame(in type : int, in nLocal : int, inout local : Object [[]], in nStack : int, inout stack : Object [[]]) : void
        if (mOrgWriter != null) {
            mOrgWriter.visitFrame(type, nLocal, local, nStack, stack);
        }
!!!76346935.java!!!	visitIincInsn(in var : int, in increment : int) : void
        if (mOrgWriter != null) {
            mOrgWriter.visitIincInsn(var, increment);
        }
!!!76347063.java!!!	visitIntInsn(in opcode : int, in operand : int) : void
        if (mOrgWriter != null) {
            mOrgWriter.visitIntInsn(opcode, operand);
        }
!!!76347191.java!!!	visitJumpInsn(in opcode : int, inout label : Label) : void
        if (mOrgWriter != null) {
            mOrgWriter.visitJumpInsn(opcode, label);
        }
!!!76347319.java!!!	visitLdcInsn(inout cst : Object) : void
        if (mOrgWriter != null) {
            mOrgWriter.visitLdcInsn(cst);
        }
!!!76347447.java!!!	visitLocalVariable(inout name : String, inout desc : String, inout signature : String, inout start : Label, inout end : Label, in index : int) : void
        if (mOrgWriter != null) {
            mOrgWriter.visitLocalVariable(name, desc, signature, start, end, index);
        }
!!!76347575.java!!!	visitLookupSwitchInsn(inout dflt : Label, inout keys : int [[]], inout labels : Label [[]]) : void
        if (mOrgWriter != null) {
            mOrgWriter.visitLookupSwitchInsn(dflt, keys, labels);
        }
!!!76347703.java!!!	visitMultiANewArrayInsn(inout desc : String, in dims : int) : void
        if (mOrgWriter != null) {
            mOrgWriter.visitMultiANewArrayInsn(desc, dims);
        }
!!!76347831.java!!!	visitTableSwitchInsn(in min : int, in max : int, inout dflt : Label, inout labels : Label [[]]) : void
        if (mOrgWriter != null) {
            mOrgWriter.visitTableSwitchInsn(min, max, dflt, labels);
        }
!!!76347959.java!!!	visitTypeInsn(in opcode : int, inout type : String) : void
        if (mOrgWriter != null) {
            mOrgWriter.visitTypeInsn(opcode, type);
        }
!!!76348087.java!!!	visitVarInsn(in opcode : int, in var : int) : void
        if (mOrgWriter != null) {
            mOrgWriter.visitVarInsn(opcode, var);
        }
