class AsmGeneratorTest
!!!76376503.java!!!	setUp() : void
        mLog = new MockLog();
        URL url = this.getClass().getClassLoader().getResource("data/mock_android.jar");

        mOsJarPath = new ArrayList<>();
        //noinspection ConstantConditions
        mOsJarPath.add(url.getFile());

        mTempFile = File.createTempFile("mock", ".jar");
        mOsDestJar = mTempFile.getAbsolutePath();
        mTempFile.deleteOnExit();
!!!76376631.java!!!	tearDown() : void
        if (mTempFile != null) {
            mTempFile.delete();
            mTempFile = null;
        }
!!!76376759.java!!!	testClassRenaming() : void

        ICreateInfo ci = new ICreateInfo() {
            @Override
            public Class<?>[] getInjectedClasses() {
                // classes to inject in the final JAR
                return new Class<?>[0];
            }

            @Override
            public String[] getDelegateMethods() {
                return EMPTY_STRING_ARRAY;
            }

            @Override
            public String[] getDelegateClassNatives() {
                return EMPTY_STRING_ARRAY;
            }

            @Override
            public String[] getOverriddenMethods() {
                // methods to force override
                return EMPTY_STRING_ARRAY;
            }

            @Override
            public String[] getRenamedClasses() {
                // classes to rename (so that we can replace them)
                return new String[] {
                        "mock_android.view.View", "mock_android.view._Original_View",
                        "not.an.actual.ClassName", "anoter.fake.NewClassName",
                };
            }

            @Override
            public String[] getJavaPkgClasses() {
              return EMPTY_STRING_ARRAY;
            }

            @Override
            public Set<String> getExcludedClasses() {
                return null;
            }

            @Override
            public String[] getDeleteReturns() {
                 // methods deleted from their return type.
                return EMPTY_STRING_ARRAY;
            }

            @Override
            public String[] getPromotedFields() {
                return EMPTY_STRING_ARRAY;
            }

            @Override
            public Map<String, InjectMethodRunnable> getInjectedMethodsMap() {
                return Collections.emptyMap();
            }
        };

        AsmGenerator agen = new AsmGenerator(mLog, mOsDestJar, ci);

        AsmAnalyzer aa = new AsmAnalyzer(mLog, mOsJarPath, agen,
                null,                 // derived from
                new String[] {        // include classes
                    "**"
                },
                Collections.<String>emptySet() /* excluded classes */,
                new String[]{} /* include files */);
        aa.analyze();
        agen.generate();

        Set<String> notRenamed = agen.getClassesNotRenamed();
        assertArrayEquals(new String[] { "not/an/actual/ClassName" }, notRenamed.toArray());

!!!76376887.java!!!	testClassRefactoring() : void
        ICreateInfo ci = new ICreateInfo() {
            @Override
            public Class<?>[] getInjectedClasses() {
                // classes to inject in the final JAR
                return new Class<?>[] {
                        com.android.tools.layoutlib.create.dataclass.JavaClass.class
                };
            }

            @Override
            public String[] getDelegateMethods() {
                return EMPTY_STRING_ARRAY;
            }

            @Override
            public String[] getDelegateClassNatives() {
                return EMPTY_STRING_ARRAY;
            }

            @Override
            public String[] getOverriddenMethods() {
                // methods to force override
                return EMPTY_STRING_ARRAY;
            }

            @Override
            public String[] getRenamedClasses() {
                // classes to rename (so that we can replace them)
                return EMPTY_STRING_ARRAY;
            }

            @Override
            public String[] getJavaPkgClasses() {
             // classes to refactor (so that we can replace them)
                return new String[] {
                        "java.lang.JavaClass", "com.android.tools.layoutlib.create.dataclass.JavaClass",
                };
            }

            @Override
            public Set<String> getExcludedClasses() {
                return Collections.singleton("java.lang.JavaClass");
            }

            @Override
            public String[] getDeleteReturns() {
                 // methods deleted from their return type.
                return EMPTY_STRING_ARRAY;
            }

            @Override
            public String[] getPromotedFields() {
                return EMPTY_STRING_ARRAY;
            }

            @Override
            public Map<String, InjectMethodRunnable> getInjectedMethodsMap() {
                return Collections.emptyMap();
            }
        };

        AsmGenerator agen = new AsmGenerator(mLog, mOsDestJar, ci);

        AsmAnalyzer aa = new AsmAnalyzer(mLog, mOsJarPath, agen,
                null,                 // derived from
                new String[] {        // include classes
                    "**"
                },
                Collections.<String>emptySet(),
                new String[] {        /* include files */
                    "mock_android/data/data*"
                });
        aa.analyze();
        agen.generate();
        Map<String, ClassReader> output = new TreeMap<>();
        Map<String, InputStream> filesFound = new TreeMap<>();
        parseZip(mOsDestJar, output, filesFound);
        boolean injectedClassFound = false;
        for (ClassReader cr: output.values()) {
            TestClassVisitor cv = new TestClassVisitor();
            cr.accept(cv, 0);
            injectedClassFound |= cv.mInjectedClassFound;
        }
        assertTrue(injectedClassFound);
        assertArrayEquals(new String[] {"mock_android/data/dataFile"},
                filesFound.keySet().toArray());
!!!76377015.java!!!	testClassExclusion() : void
        ICreateInfo ci = new ICreateInfo() {
            @Override
            public Class<?>[] getInjectedClasses() {
                return new Class<?>[0];
            }

            @Override
            public String[] getDelegateMethods() {
                return EMPTY_STRING_ARRAY;
            }

            @Override
            public String[] getDelegateClassNatives() {
                return EMPTY_STRING_ARRAY;
            }

            @Override
            public String[] getOverriddenMethods() {
                // methods to force override
                return EMPTY_STRING_ARRAY;
            }

            @Override
            public String[] getRenamedClasses() {
                // classes to rename (so that we can replace them)
                return EMPTY_STRING_ARRAY;
            }

            @Override
            public String[] getJavaPkgClasses() {
                // classes to refactor (so that we can replace them)
                return EMPTY_STRING_ARRAY;
            }

            @Override
            public Set<String> getExcludedClasses() {
                Set<String> set = new HashSet<>(2);
                set.add("mock_android.dummy.InnerTest");
                set.add("java.lang.JavaClass");
                return set;
            }

            @Override
            public String[] getDeleteReturns() {
                // methods deleted from their return type.
                return EMPTY_STRING_ARRAY;
            }

            @Override
            public String[] getPromotedFields() {
                return EMPTY_STRING_ARRAY;
            }

            @Override
            public Map<String, InjectMethodRunnable> getInjectedMethodsMap() {
                return Collections.emptyMap();
            }
        };

        AsmGenerator agen = new AsmGenerator(mLog, mOsDestJar, ci);
        Set<String> excludedClasses = ci.getExcludedClasses();
        AsmAnalyzer aa = new AsmAnalyzer(mLog, mOsJarPath, agen,
                null,                 // derived from
                new String[] {        // include classes
                        "**"
                },
                excludedClasses,
                new String[] {        /* include files */
                        "mock_android/data/data*"
                });
        aa.analyze();
        agen.generate();
        Map<String, ClassReader> output = new TreeMap<>();
        Map<String, InputStream> filesFound = new TreeMap<>();
        parseZip(mOsDestJar, output, filesFound);
        for (String s : output.keySet()) {
            assertFalse(excludedClasses.contains(s));
        }
        assertArrayEquals(new String[] {"mock_android/data/dataFile"},
                filesFound.keySet().toArray());
!!!76377143.java!!!	testMethodInjection() : void
        ICreateInfo ci = new ICreateInfo() {
            @Override
            public Class<?>[] getInjectedClasses() {
                return new Class<?>[0];
            }

            @Override
            public String[] getDelegateMethods() {
                return EMPTY_STRING_ARRAY;
            }

            @Override
            public String[] getDelegateClassNatives() {
                return EMPTY_STRING_ARRAY;
            }

            @Override
            public String[] getOverriddenMethods() {
                // methods to force override
                return EMPTY_STRING_ARRAY;
            }

            @Override
            public String[] getRenamedClasses() {
                // classes to rename (so that we can replace them)
                return EMPTY_STRING_ARRAY;
            }

            @Override
            public String[] getJavaPkgClasses() {
                // classes to refactor (so that we can replace them)
                return EMPTY_STRING_ARRAY;
            }

            @Override
            public Set<String> getExcludedClasses() {
                return Collections.emptySet();
            }

            @Override
            public String[] getDeleteReturns() {
                // methods deleted from their return type.
                return EMPTY_STRING_ARRAY;
            }

            @Override
            public String[] getPromotedFields() {
                return EMPTY_STRING_ARRAY;
            }

            @Override
            public Map<String, InjectMethodRunnable> getInjectedMethodsMap() {
                return Collections.singletonMap("mock_android.util.EmptyArray",
                        InjectMethodRunnables.CONTEXT_GET_FRAMEWORK_CLASS_LOADER);
            }
        };

        AsmGenerator agen = new AsmGenerator(mLog, mOsDestJar, ci);
        AsmAnalyzer aa = new AsmAnalyzer(mLog, mOsJarPath, agen,
                null,                 // derived from
                new String[] {        // include classes
                        "**"
                },
                ci.getExcludedClasses(),
                new String[] {        /* include files */
                        "mock_android/data/data*"
                });
        aa.analyze();
        agen.generate();
        Map<String, ClassReader> output = new TreeMap<>();
        Map<String, InputStream> filesFound = new TreeMap<>();
        parseZip(mOsDestJar, output, filesFound);
        final String modifiedClass = "mock_android.util.EmptyArray";
        final String modifiedClassPath = modifiedClass.replace('.', '/').concat(".class");
        ZipFile zipFile = new ZipFile(mOsDestJar);
        ZipEntry entry = zipFile.getEntry(modifiedClassPath);
        assertNotNull(entry);
        final byte[] bytes;
        try (InputStream inputStream = zipFile.getInputStream(entry)) {
            bytes = getByteArray(inputStream);
        }
        ClassLoader classLoader = new ClassLoader(getClass().getClassLoader()) {
            @Override
            protected Class<?> findClass(String name) throws ClassNotFoundException {
                if (name.equals(modifiedClass)) {
                    return defineClass(null, bytes, 0, bytes.length);
                }
                throw new ClassNotFoundException(name + " not found.");
            }
        };
        Class<?> emptyArrayClass = classLoader.loadClass(modifiedClass);
        Object emptyArrayInstance = emptyArrayClass.newInstance();
        Method method = emptyArrayClass.getMethod("getFrameworkClassLoader");
        Object cl = method.invoke(emptyArrayInstance);
        assertEquals(classLoader, cl);
!!!76377271.java!!!	getByteArray(inout stream : InputStream) : byte
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        byte[] buffer = new byte[1024];
        int read;
        while ((read = stream.read(buffer, 0, buffer.length)) > -1) {
            bos.write(buffer, 0, read);
        }
        return bos.toByteArray();
!!!76377399.java!!!	parseZip(inout jarPath : String, inout classes : Map<String, ClassReader>, inout filesFound : Map<String, InputStream>) : void

            ZipFile zip = new ZipFile(jarPath);
            Enumeration<? extends ZipEntry> entries = zip.entries();
            ZipEntry entry;
            while (entries.hasMoreElements()) {
                entry = entries.nextElement();
                if (entry.getName().endsWith(".class")) {
                    ClassReader cr = new ClassReader(zip.getInputStream(entry));
                    String className = classReaderToClassName(cr);
                    classes.put(className, cr);
                } else {
                    filesFound.put(entry.getName(), zip.getInputStream(entry));
                }
            }

!!!76377527.java!!!	classReaderToClassName(inout classReader : ClassReader) : String
        if (classReader == null) {
            return null;
        } else {
            return classReader.getClassName().replace('/', '.');
        }
