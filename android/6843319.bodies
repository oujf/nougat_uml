class UI
!!!76408503.java!!!	UI(inout clientListModel : ListModel<Client>, inout dataTableModel : TableModel, inout actions : List<Action>)
        super("Preloaded-classes computation");

        getContentPane().add(new JScrollPane(clientList = new JList<Client>(clientListModel)),
                BorderLayout.WEST);
        clientList.setCellRenderer(new ClientListCellRenderer());
        // clientList.addListSelectionListener(listener);

        dataTable = new JTable(dataTableModel);
        getContentPane().add(new JScrollPane(dataTable), BorderLayout.CENTER);

        JToolBar toolbar = new JToolBar(JToolBar.HORIZONTAL);
        for (Action a : actions) {
            if (a == null) {
                toolbar.addSeparator();
            } else {
                toolbar.add(a);
            }
        }
        getContentPane().add(toolbar, BorderLayout.PAGE_START);

        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setBounds(100, 100, 800, 600);
!!!76408631.java!!!	getSelectedClient() : Client
        return clientList.getSelectedValue();
!!!76408759.java!!!	getSelectedDataTableRow() : int
        return dataTable.getSelectedRow();
!!!76408887.java!!!	showWaitDialog() : void
        if (currentWaitDialog == null) {
            currentWaitDialog = new JDialog(this, "Please wait...", true);
            currentWaitDialog.getContentPane().add(new JLabel("Please be patient."),
                    BorderLayout.CENTER);
            JProgressBar progress = new JProgressBar(JProgressBar.HORIZONTAL);
            progress.setIndeterminate(true);
            currentWaitDialog.getContentPane().add(progress, BorderLayout.SOUTH);
            currentWaitDialog.setSize(200, 100);
            currentWaitDialog.setLocationRelativeTo(null);
            showWaitDialogLater();
        }
!!!76409015.java!!!	showWaitDialogLater() : void
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                if (currentWaitDialog != null) {
                    currentWaitDialog.setVisible(true); // This is blocking.
                }
            }
        });
!!!76409143.java!!!	updateWaitDialog(inout s : String) : void
        if (currentWaitDialog != null) {
            ((JLabel) currentWaitDialog.getContentPane().getComponent(0)).setText(s);
            Dimension prefSize = currentWaitDialog.getPreferredSize();
            Dimension curSize = currentWaitDialog.getSize();
            if (prefSize.width > curSize.width || prefSize.height > curSize.height) {
                currentWaitDialog.setSize(Math.max(prefSize.width, curSize.width),
                        Math.max(prefSize.height, curSize.height));
                currentWaitDialog.invalidate();
            }
        }
!!!76409271.java!!!	hideWaitDialog() : void
        if (currentWaitDialog != null) {
            currentWaitDialog.setVisible(false);
            currentWaitDialog = null;
        }
!!!76409399.java!!!	showMessageDialog(inout s : String) : void
        // Hide the wait dialog...
        if (currentWaitDialog != null) {
            currentWaitDialog.setVisible(false);
        }

        try {
            JOptionPane.showMessageDialog(this, s);
        } finally {
            // And reshow it afterwards...
            if (currentWaitDialog != null) {
                showWaitDialogLater();
            }
        }
!!!76409527.java!!!	showConfirmDialog(inout title : String, inout message : String) : boolean
        // Hide the wait dialog...
        if (currentWaitDialog != null) {
            currentWaitDialog.setVisible(false);
        }

        try {
            return JOptionPane.showConfirmDialog(this, title, message, JOptionPane.YES_NO_OPTION)
                    == JOptionPane.YES_OPTION;
        } finally {
            // And reshow it afterwards...
            if (currentWaitDialog != null) {
                showWaitDialogLater();
            }
        }
!!!76409655.java!!!	showInputDialog(inout message : String) : String
        // Hide the wait dialog...
        if (currentWaitDialog != null) {
            currentWaitDialog.setVisible(false);
        }

        try {
            return JOptionPane.showInputDialog(message);
        } finally {
            // And reshow it afterwards...
            if (currentWaitDialog != null) {
                showWaitDialogLater();
            }
        }
!!!76409783.java!!!	showChoiceDialog(inout title : String, inout message : String, inout choices : T [[]]) : T
        // Hide the wait dialog...
        if (currentWaitDialog != null) {
            currentWaitDialog.setVisible(false);
        }

        try{
            return (T)JOptionPane.showInputDialog(this,
                    title,
                    message,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    choices,
                    choices[0]);
        } finally {
            // And reshow it afterwards...
            if (currentWaitDialog != null) {
                showWaitDialogLater();
            }
        }
!!!76409911.java!!!	showSaveDialog() : File
        // Hide the wait dialog...
        if (currentWaitDialog != null) {
            currentWaitDialog.setVisible(false);
        }

        try{
            if (jfc == null) {
                jfc = new JFileChooser();
            }

            int ret = jfc.showSaveDialog(this);
            if (ret == JFileChooser.APPROVE_OPTION) {
                return jfc.getSelectedFile();
            } else {
                return null;
            }
        } finally {
            // And reshow it afterwards...
            if (currentWaitDialog != null) {
                showWaitDialogLater();
            }
        }
!!!76410039.java!!!	showOpenDialog(inout multi : boolean) : File
        // Hide the wait dialog...
        if (currentWaitDialog != null) {
            currentWaitDialog.setVisible(false);
        }

        try{
            if (jfc == null) {
                jfc = new JFileChooser();
            }

            jfc.setMultiSelectionEnabled(multi);
            int ret = jfc.showOpenDialog(this);
            if (ret == JFileChooser.APPROVE_OPTION) {
                return jfc.getSelectedFiles();
            } else {
                return null;
            }
        } finally {
            // And reshow it afterwards...
            if (currentWaitDialog != null) {
                showWaitDialogLater();
            }
        }
