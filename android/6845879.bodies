class Hprof
!!!76404407.java!!!	init() : void
        synchronized(Hprof.class) {
            if (hprofHandler == null) {
                ClientData.setHprofDumpHandler(hprofHandler = new GeneralHprofDumpHandler());
            }
        }
!!!76404535.java!!!	doHprof(inout client : Client, in timeout : int) : File
        GetHprof gh = new GetHprof(client, timeout);
        return gh.get();
!!!76404663.java!!!	analyzeHprof(inout hprofLocalFile : File) : String
        Snapshot snapshot = Snapshot.createSnapshot(new MemoryMappedFileBuffer(hprofLocalFile));

        Map<String, Set<ClassObj>> classes = Queries.classes(snapshot, null);
        Map<String, String> retValue = new HashMap<String, String>();
        for (Map.Entry<String, Set<ClassObj>> e : classes.entrySet()) {
            for (ClassObj c : e.getValue()) {
                String cl = c.getClassLoader() == null ? null : c.getClassLoader().toString();
                String cName = c.getClassName();
                int aDepth = 0;
                while (cName.endsWith("[]")) {
                    cName = cName.substring(0, cName.length()-2);
                    aDepth++;
                }
                String newName = transformPrimitiveClass(cName);
                if (aDepth > 0) {
                    // Need to use kind-a descriptor syntax. If it was transformed, it is primitive.
                    if (newName.equals(cName)) {
                        newName = "L" + newName + ";";
                    }
                    for (int i = 0; i < aDepth; i++) {
                        newName = "[" + newName;
                    }
                }
                retValue.put(newName, cl);
            }
        }

        // Free up memory.
        snapshot.dispose();

        return retValue;
!!!76404791.java!!!	transformPrimitiveClass(inout name : String) : String
        String rep = primitiveMapping.get(name);
        if (rep != null) {
            return rep;
        }
        return name;
!!!76405815.java!!!	Hprof(in timeout : int)
        this.timeout = timeout;
!!!76405943.java!!!	getClassData(inout client : Client) : String
        File hprofLocalFile = Hprof.doHprof(client, timeout);
        if (hprofLocalFile == null) {
            throw new RuntimeException("Failed getting dump...");
        }
        System.out.println("Dump file is " + hprofLocalFile);

        try {
            return analyzeHprof(hprofLocalFile);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
