class WifiEnterpriseConfig
!!!76434487.java!!!	WifiEnterpriseConfig()
        // Do not set defaults so that the enterprise fields that are not changed
        // by API are not changed underneath
        // This is essential because an app may not have all fields like password
        // available. It allows modification of subset of fields.

!!!76434615.java!!!	WifiEnterpriseConfig(inout source : WifiEnterpriseConfig)
        for (String key : source.mFields.keySet()) {
            mFields.put(key, source.mFields.get(key));
        }
        mEapMethod = source.mEapMethod;
        mPhase2Method = source.mPhase2Method;
!!!76434743.java!!!	describeContents() : int
        return 0;
!!!76434871.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        dest.writeInt(mFields.size());
        for (Map.Entry<String, String> entry : mFields.entrySet()) {
            dest.writeString(entry.getKey());
            dest.writeString(entry.getValue());
        }

        dest.writeInt(mEapMethod);
        dest.writeInt(mPhase2Method);
        writeCertificates(dest, mCaCerts);

        if (mClientPrivateKey != null) {
            String algorithm = mClientPrivateKey.getAlgorithm();
            byte[] userKeyBytes = mClientPrivateKey.getEncoded();
            dest.writeInt(userKeyBytes.length);
            dest.writeByteArray(userKeyBytes);
            dest.writeString(algorithm);
        } else {
            dest.writeInt(0);
        }

        writeCertificate(dest, mClientCertificate);
!!!76434999.java!!!	writeCertificates(inout dest : Parcel, inout cert : X509Certificate [[]]) : void
        if (cert != null && cert.length != 0) {
            dest.writeInt(cert.length);
            for (int i = 0; i < cert.length; i++) {
                writeCertificate(dest, cert[i]);
            }
        } else {
            dest.writeInt(0);
        }
!!!76435127.java!!!	writeCertificate(inout dest : Parcel, inout cert : X509Certificate) : void
        if (cert != null) {
            try {
                byte[] certBytes = cert.getEncoded();
                dest.writeInt(certBytes.length);
                dest.writeByteArray(certBytes);
            } catch (CertificateEncodingException e) {
                dest.writeInt(0);
            }
        } else {
            dest.writeInt(0);
        }
!!!76435767.java!!!	saveToSupplicant(inout saver : WifiEnterpriseConfig::SupplicantSaver) : boolean
        if (!isEapMethodValid()) {
            return false;
        }

        for (String key : mFields.keySet()) {
            if (!saver.saveValue(key, mFields.get(key))) {
                return false;
            }
        }

        if (!saver.saveValue(EAP_KEY, Eap.strings[mEapMethod])) {
            return false;
        }

        if (mEapMethod != Eap.TLS && mPhase2Method != Phase2.NONE) {
            boolean is_autheap = mEapMethod == Eap.TTLS && mPhase2Method == Phase2.GTC;
            String prefix = is_autheap ? Phase2.AUTHEAP_PREFIX : Phase2.AUTH_PREFIX;
            String value = convertToQuotedString(prefix + Phase2.strings[mPhase2Method]);
            return saver.saveValue(PHASE2_KEY, value);
        } else if (mPhase2Method == Phase2.NONE) {
            // By default, send a null phase 2 to clear old configuration values.
            return saver.saveValue(PHASE2_KEY, null);
        } else {
            Log.e(TAG, "WiFi enterprise configuration is invalid as it supplies a "
                    + "phase 2 method but the phase1 method does not support it.");
            return false;
        }
!!!76435895.java!!!	loadFromSupplicant(inout loader : WifiEnterpriseConfig::SupplicantLoader) : void
        for (String key : SUPPLICANT_CONFIG_KEYS) {
            String value = loader.loadValue(key);
            if (value == null) {
                mFields.put(key, EMPTY_VALUE);
            } else {
                mFields.put(key, value);
            }
        }
        String eapMethod  = loader.loadValue(EAP_KEY);
        mEapMethod = getStringIndex(Eap.strings, eapMethod, Eap.NONE);

        String phase2Method = removeDoubleQuotes(loader.loadValue(PHASE2_KEY));
        // Remove "auth=" or "autheap=" prefix.
        if (phase2Method.startsWith(Phase2.AUTH_PREFIX)) {
            phase2Method = phase2Method.substring(Phase2.AUTH_PREFIX.length());
        } else if (phase2Method.startsWith(Phase2.AUTHEAP_PREFIX)) {
            phase2Method = phase2Method.substring(Phase2.AUTHEAP_PREFIX.length());
        }
        mPhase2Method = getStringIndex(Phase2.strings, phase2Method, Phase2.NONE);
!!!76436023.java!!!	setEapMethod(in eapMethod : int) : void
        switch (eapMethod) {
            /** Valid methods */
            case Eap.TLS:
            case Eap.UNAUTH_TLS:
                setPhase2Method(Phase2.NONE);
                /* fall through */
            case Eap.PEAP:
            case Eap.PWD:
            case Eap.TTLS:
            case Eap.SIM:
            case Eap.AKA:
            case Eap.AKA_PRIME:
                mEapMethod = eapMethod;
                mFields.put(OPP_KEY_CACHING, "1");
                break;
            default:
                throw new IllegalArgumentException("Unknown EAP method");
        }
!!!76436151.java!!!	getEapMethod() : int
        return mEapMethod;
!!!76436279.java!!!	setPhase2Method(in phase2Method : int) : void
        switch (phase2Method) {
            case Phase2.NONE:
            case Phase2.PAP:
            case Phase2.MSCHAP:
            case Phase2.MSCHAPV2:
            case Phase2.GTC:
                mPhase2Method = phase2Method;
                break;
            default:
                throw new IllegalArgumentException("Unknown Phase 2 method");
        }
!!!76436407.java!!!	getPhase2Method() : int
        return mPhase2Method;
!!!76436535.java!!!	setIdentity(inout identity : String) : void
        setFieldValue(IDENTITY_KEY, identity, "");
!!!76436663.java!!!	getIdentity() : String
        return getFieldValue(IDENTITY_KEY, "");
!!!76436791.java!!!	setAnonymousIdentity(inout anonymousIdentity : String) : void
        setFieldValue(ANON_IDENTITY_KEY, anonymousIdentity, "");
!!!76436919.java!!!	getAnonymousIdentity() : String
        return getFieldValue(ANON_IDENTITY_KEY, "");
!!!76437047.java!!!	setPassword(inout password : String) : void
        setFieldValue(PASSWORD_KEY, password, "");
!!!76437175.java!!!	getPassword() : String
        return getFieldValue(PASSWORD_KEY, "");
!!!76437303.java!!!	encodeCaCertificateAlias(inout alias : String) : String
        byte[] bytes = alias.getBytes(StandardCharsets.UTF_8);
        StringBuilder sb = new StringBuilder(bytes.length * 2);
        for (byte o : bytes) {
            sb.append(String.format("%02x", o & 0xFF));
        }
        return sb.toString();
!!!76437431.java!!!	decodeCaCertificateAlias(inout alias : String) : String
        byte[] data = new byte[alias.length() >> 1];
        for (int n = 0, position = 0; n < alias.length(); n += 2, position++) {
            data[position] = (byte) Integer.parseInt(alias.substring(n,  n + 2), 16);
        }
        try {
            return new String(data, StandardCharsets.UTF_8);
        } catch (NumberFormatException e) {
            e.printStackTrace();
            return alias;
        }
!!!76437559.java!!!	setCaCertificateAlias(inout alias : String) : void
        setFieldValue(CA_CERT_KEY, alias, CA_CERT_PREFIX);
!!!76437687.java!!!	setCaCertificateAliases(inout aliases : String [[]]) : void
        if (aliases == null) {
            setFieldValue(CA_CERT_KEY, null, CA_CERT_PREFIX);
        } else if (aliases.length == 1) {
            // Backwards compatibility: use the original cert prefix if setting only one alias.
            setCaCertificateAlias(aliases[0]);
        } else {
            // Use KEYSTORES_URI which supports multiple aliases.
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < aliases.length; i++) {
                if (i > 0) {
                    sb.append(CA_CERT_ALIAS_DELIMITER);
                }
                sb.append(encodeCaCertificateAlias(Credentials.CA_CERTIFICATE + aliases[i]));
            }
            setFieldValue(CA_CERT_KEY, sb.toString(), KEYSTORES_URI);
        }
!!!76437815.java!!!	getCaCertificateAlias() : String
        return getFieldValue(CA_CERT_KEY, CA_CERT_PREFIX);
!!!76437943.java!!!	getCaCertificateAliases() : String
        String value = getFieldValue(CA_CERT_KEY, "");
        if (value.startsWith(CA_CERT_PREFIX)) {
            // Backwards compatibility: parse the original alias prefix.
            return new String[] {getFieldValue(CA_CERT_KEY, CA_CERT_PREFIX)};
        } else if (value.startsWith(KEYSTORES_URI)) {
            String values = value.substring(KEYSTORES_URI.length());

            String[] aliases = TextUtils.split(values, CA_CERT_ALIAS_DELIMITER);
            for (int i = 0; i < aliases.length; i++) {
                aliases[i] = decodeCaCertificateAlias(aliases[i]);
                if (aliases[i].startsWith(Credentials.CA_CERTIFICATE)) {
                    aliases[i] = aliases[i].substring(Credentials.CA_CERTIFICATE.length());
                }
            }
            return aliases.length != 0 ? aliases : null;
        } else {
            return TextUtils.isEmpty(value) ? null : new String[] {value};
        }
!!!76438071.java!!!	setCaCertificate(inout cert : X509Certificate) : void
        if (cert != null) {
            if (cert.getBasicConstraints() >= 0) {
                mCaCerts = new X509Certificate[] {cert};
            } else {
                throw new IllegalArgumentException("Not a CA certificate");
            }
        } else {
            mCaCerts = null;
        }
!!!76438199.java!!!	getCaCertificate() : X509Certificate
        if (mCaCerts != null && mCaCerts.length > 0) {
            return mCaCerts[0];
        } else {
            return null;
        }
!!!76438327.java!!!	setCaCertificates(inout certs : X509Certificate [[]]) : void
        if (certs != null) {
            X509Certificate[] newCerts = new X509Certificate[certs.length];
            for (int i = 0; i < certs.length; i++) {
                if (certs[i].getBasicConstraints() >= 0) {
                    newCerts[i] = certs[i];
                } else {
                    throw new IllegalArgumentException("Not a CA certificate");
                }
            }
            mCaCerts = newCerts;
        } else {
            mCaCerts = null;
        }
!!!76438455.java!!!	getCaCertificates() : X509Certificate
        if (mCaCerts != null && mCaCerts.length > 0) {
            return mCaCerts;
        } else {
            return null;
        }
!!!76438583.java!!!	resetCaCertificate() : void
        mCaCerts = null;
!!!76438711.java!!!	setCaPath(inout path : String) : void
        setFieldValue(CA_PATH_KEY, path);
!!!76438839.java!!!	getCaPath() : String
        return getFieldValue(CA_PATH_KEY, "");
!!!76438967.java!!!	setClientCertificateAlias(inout alias : String) : void
        setFieldValue(CLIENT_CERT_KEY, alias, CLIENT_CERT_PREFIX);
        setFieldValue(PRIVATE_KEY_ID_KEY, alias, Credentials.USER_PRIVATE_KEY);
        // Also, set engine parameters
        if (TextUtils.isEmpty(alias)) {
            mFields.put(ENGINE_KEY, ENGINE_DISABLE);
            mFields.put(ENGINE_ID_KEY, EMPTY_VALUE);
        } else {
            mFields.put(ENGINE_KEY, ENGINE_ENABLE);
            mFields.put(ENGINE_ID_KEY, convertToQuotedString(ENGINE_ID_KEYSTORE));
        }
!!!76439095.java!!!	getClientCertificateAlias() : String
        return getFieldValue(CLIENT_CERT_KEY, CLIENT_CERT_PREFIX);
!!!76439223.java!!!	setClientKeyEntry(inout privateKey : PrivateKey, inout clientCertificate : X509Certificate) : void
        if (clientCertificate != null) {
            if (clientCertificate.getBasicConstraints() != -1) {
                throw new IllegalArgumentException("Cannot be a CA certificate");
            }
            if (privateKey == null) {
                throw new IllegalArgumentException("Client cert without a private key");
            }
            if (privateKey.getEncoded() == null) {
                throw new IllegalArgumentException("Private key cannot be encoded");
            }
        }

        mClientPrivateKey = privateKey;
        mClientCertificate = clientCertificate;
!!!76439351.java!!!	getClientCertificate() : X509Certificate
        return mClientCertificate;
!!!76439479.java!!!	resetClientKeyEntry() : void
        mClientPrivateKey = null;
        mClientCertificate = null;
!!!76439607.java!!!	getClientPrivateKey() : PrivateKey
        return mClientPrivateKey;
!!!76439735.java!!!	setSubjectMatch(inout subjectMatch : String) : void
        setFieldValue(SUBJECT_MATCH_KEY, subjectMatch, "");
!!!76439863.java!!!	getSubjectMatch() : String
        return getFieldValue(SUBJECT_MATCH_KEY, "");
!!!76439991.java!!!	setAltSubjectMatch(inout altSubjectMatch : String) : void
        setFieldValue(ALTSUBJECT_MATCH_KEY, altSubjectMatch, "");
!!!76440119.java!!!	getAltSubjectMatch() : String
        return getFieldValue(ALTSUBJECT_MATCH_KEY, "");
!!!76440247.java!!!	setDomainSuffixMatch(inout domain : String) : void
        setFieldValue(DOM_SUFFIX_MATCH_KEY, domain);
!!!76440375.java!!!	getDomainSuffixMatch() : String
        return getFieldValue(DOM_SUFFIX_MATCH_KEY, "");
!!!76440503.java!!!	setRealm(inout realm : String) : void
        setFieldValue(REALM_KEY, realm, "");
!!!76440631.java!!!	getRealm() : String
        return getFieldValue(REALM_KEY, "");
!!!76440759.java!!!	setPlmn(inout plmn : String) : void
        setFieldValue(PLMN_KEY, plmn, "");
!!!76440887.java!!!	getPlmn() : String
        return getFieldValue(PLMN_KEY, "");
!!!76441015.java!!!	getKeyId(inout current : WifiEnterpriseConfig) : String
        // If EAP method is not initialized, use current config details
        if (mEapMethod == Eap.NONE) {
            return (current != null) ? current.getKeyId(null) : EMPTY_VALUE;
        }
        if (!isEapMethodValid()) {
            return EMPTY_VALUE;
        }
        return Eap.strings[mEapMethod] + "_" + Phase2.strings[mPhase2Method];
!!!76441143.java!!!	removeDoubleQuotes(inout string : String) : String
        if (TextUtils.isEmpty(string)) return "";
        int length = string.length();
        if ((length > 1) && (string.charAt(0) == '"')
                && (string.charAt(length - 1) == '"')) {
            return string.substring(1, length - 1);
        }
        return string;
!!!76441271.java!!!	convertToQuotedString(inout string : String) : String
        return "\"" + string + "\"";
!!!76441399.java!!!	getStringIndex(inout arr : String [[]], inout toBeFound : String, in defaultIndex : int) : int
        if (TextUtils.isEmpty(toBeFound)) return defaultIndex;
        for (int i = 0; i < arr.length; i++) {
            if (toBeFound.equals(arr[i])) return i;
        }
        return defaultIndex;
!!!76441527.java!!!	getFieldValue(inout key : String, inout prefix : String) : String
        // TODO: Should raise an exception if |key| is EAP_KEY or PHASE2_KEY since
        // neither of these keys should be retrieved in this manner.
        String value = mFields.get(key);
        // Uninitialized or known to be empty after reading from supplicant
        if (TextUtils.isEmpty(value) || EMPTY_VALUE.equals(value)) return "";

        value = removeDoubleQuotes(value);
        if (value.startsWith(prefix)) {
            return value.substring(prefix.length());
        } else {
            return value;
        }
!!!76441655.java!!!	setFieldValue(inout key : String, inout value : String, inout prefix : String) : void
        // TODO: Should raise an exception if |key| is EAP_KEY or PHASE2_KEY since
        // neither of these keys should be set in this manner.
        if (TextUtils.isEmpty(value)) {
            mFields.put(key, EMPTY_VALUE);
        } else {
            mFields.put(key, convertToQuotedString(prefix + value));
        }
!!!76441783.java!!!	setFieldValue(inout key : String, inout value : String) : void
        // TODO: Should raise an exception if |key| is EAP_KEY or PHASE2_KEY since
        // neither of these keys should be set in this manner.
        if (TextUtils.isEmpty(value)) {
           mFields.put(key, EMPTY_VALUE);
        } else {
            mFields.put(key, convertToQuotedString(value));
        }
!!!76441911.java!!!	toString() : String
        StringBuffer sb = new StringBuffer();
        for (String key : mFields.keySet()) {
            // Don't display password in toString().
            String value = PASSWORD_KEY.equals(key) ? "<removed>" : mFields.get(key);
            sb.append(key).append(" ").append(value).append("\n");
        }
        return sb.toString();
!!!76442039.java!!!	isEapMethodValid() : boolean
        if (mEapMethod == Eap.NONE) {
            Log.e(TAG, "WiFi enterprise configuration is invalid as it supplies no EAP method.");
            return false;
        }
        if (mEapMethod < 0 || mEapMethod >= Eap.strings.length) {
            Log.e(TAG, "mEapMethod is invald for WiFi enterprise configuration: " + mEapMethod);
            return false;
        }
        if (mPhase2Method < 0 || mPhase2Method >= Phase2.strings.length) {
            Log.e(TAG, "mPhase2Method is invald for WiFi enterprise configuration: "
                    + mPhase2Method);
            return false;
        }
        return true;
