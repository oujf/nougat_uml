class WifiNanManager
!!!76487351.java!!!	WifiNanManager(inout service : IWifiNanManager)
        mService = service;
!!!76487479.java!!!	connect(inout listener : WifiNanEventListener, in events : int) : void
        try {
            if (VDBG) Log.v(TAG, "connect()");
            if (listener == null) {
                throw new IllegalArgumentException("Invalid listener - must not be null");
            }
            if (mBinder == null) {
                mBinder = new Binder();
            }
            mService.connect(mBinder, listener.callback, events);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!76487607.java!!!	disconnect() : void
        try {
            if (VDBG) Log.v(TAG, "disconnect()");
            mService.disconnect(mBinder);
            mBinder = null;
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!76487735.java!!!	requestConfig(inout configRequest : ConfigRequest) : void
        if (VDBG) Log.v(TAG, "requestConfig(): configRequest=" + configRequest);
        try {
            mService.requestConfig(configRequest);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!76487863.java!!!	publish(inout publishData : PublishData, inout publishSettings : PublishSettings, inout listener : WifiNanSessionListener, in events : int) : WifiNanPublishSession
        return publishRaw(publishData, publishSettings, listener,
                events | WifiNanSessionListener.LISTEN_HIDDEN_FLAGS);
!!!76487991.java!!!	publishRaw(inout publishData : PublishData, inout publishSettings : PublishSettings, inout listener : WifiNanSessionListener, in events : int) : WifiNanPublishSession
        if (VDBG) Log.v(TAG, "publish(): data='" + publishData + "', settings=" + publishSettings);

        if (publishSettings.mPublishType == PublishSettings.PUBLISH_TYPE_UNSOLICITED
                && publishData.mRxFilterLength != 0) {
            throw new IllegalArgumentException("Invalid publish data & settings: UNSOLICITED "
                    + "publishes (active) can't have an Rx filter");
        }
        if (publishSettings.mPublishType == PublishSettings.PUBLISH_TYPE_SOLICITED
                && publishData.mTxFilterLength != 0) {
            throw new IllegalArgumentException("Invalid publish data & settings: SOLICITED "
                    + "publishes (passive) can't have a Tx filter");
        }
        if (listener == null) {
            throw new IllegalArgumentException("Invalid listener - must not be null");
        }

        int sessionId;

        try {
            sessionId = mService.createSession(listener.callback, events);
            if (DBG) Log.d(TAG, "publish: session created - sessionId=" + sessionId);
            mService.publish(sessionId, publishData, publishSettings);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }

        return new WifiNanPublishSession(this, sessionId);
!!!76488119.java!!!	publish(in sessionId : int, inout publishData : PublishData, inout publishSettings : PublishSettings) : void
        if (VDBG) Log.v(TAG, "publish(): data='" + publishData + "', settings=" + publishSettings);

        if (publishSettings.mPublishType == PublishSettings.PUBLISH_TYPE_UNSOLICITED
                && publishData.mRxFilterLength != 0) {
            throw new IllegalArgumentException("Invalid publish data & settings: UNSOLICITED "
                    + "publishes (active) can't have an Rx filter");
        }
        if (publishSettings.mPublishType == PublishSettings.PUBLISH_TYPE_SOLICITED
                && publishData.mTxFilterLength != 0) {
            throw new IllegalArgumentException("Invalid publish data & settings: SOLICITED "
                    + "publishes (passive) can't have a Tx filter");
        }

        try {
            mService.publish(sessionId, publishData, publishSettings);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!76488247.java!!!	subscribe(inout subscribeData : SubscribeData, inout subscribeSettings : SubscribeSettings, inout listener : WifiNanSessionListener, in events : int) : WifiNanSubscribeSession
        return subscribeRaw(subscribeData, subscribeSettings, listener,
                events | WifiNanSessionListener.LISTEN_HIDDEN_FLAGS);
!!!76488375.java!!!	subscribeRaw(inout subscribeData : SubscribeData, inout subscribeSettings : SubscribeSettings, inout listener : WifiNanSessionListener, in events : int) : WifiNanSubscribeSession
        if (VDBG) {
            Log.v(TAG, "subscribe(): data='" + subscribeData + "', settings=" + subscribeSettings);
        }

        if (subscribeSettings.mSubscribeType == SubscribeSettings.SUBSCRIBE_TYPE_ACTIVE
                && subscribeData.mRxFilterLength != 0) {
            throw new IllegalArgumentException(
                    "Invalid subscribe data & settings: ACTIVE subscribes can't have an Rx filter");
        }
        if (subscribeSettings.mSubscribeType == SubscribeSettings.SUBSCRIBE_TYPE_PASSIVE
                && subscribeData.mTxFilterLength != 0) {
            throw new IllegalArgumentException(
                    "Invalid subscribe data & settings: PASSIVE subscribes can't have a Tx filter");
        }

        int sessionId;

        try {
            sessionId = mService.createSession(listener.callback, events);
            if (DBG) Log.d(TAG, "subscribe: session created - sessionId=" + sessionId);
            mService.subscribe(sessionId, subscribeData, subscribeSettings);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }

        return new WifiNanSubscribeSession(this, sessionId);
!!!76488503.java!!!	subscribe(in sessionId : int, inout subscribeData : SubscribeData, inout subscribeSettings : SubscribeSettings) : void
        if (VDBG) {
            Log.v(TAG, "subscribe(): data='" + subscribeData + "', settings=" + subscribeSettings);
        }

        if (subscribeSettings.mSubscribeType == SubscribeSettings.SUBSCRIBE_TYPE_ACTIVE
                && subscribeData.mRxFilterLength != 0) {
            throw new IllegalArgumentException(
                    "Invalid subscribe data & settings: ACTIVE subscribes can't have an Rx filter");
        }
        if (subscribeSettings.mSubscribeType == SubscribeSettings.SUBSCRIBE_TYPE_PASSIVE
                && subscribeData.mTxFilterLength != 0) {
            throw new IllegalArgumentException(
                    "Invalid subscribe data & settings: PASSIVE subscribes can't have a Tx filter");
        }

        try {
            mService.subscribe(sessionId, subscribeData, subscribeSettings);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!76488631.java!!!	stopSession(in sessionId : int) : void
        if (DBG) Log.d(TAG, "Stop NAN session #" + sessionId);

        try {
            mService.stopSession(sessionId);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!76488759.java!!!	destroySession(in sessionId : int) : void
        if (DBG) Log.d(TAG, "Destroy NAN session #" + sessionId);

        try {
            mService.destroySession(sessionId);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!76488887.java!!!	sendMessage(in sessionId : int, in peerId : int, inout message : byte [[]], in messageLength : int, in messageId : int) : void
        try {
            if (VDBG) {
                Log.v(TAG, "sendMessage(): sessionId=" + sessionId + ", peerId=" + peerId
                        + ", messageLength=" + messageLength + ", messageId=" + messageId);
            }
            mService.sendMessage(sessionId, peerId, message, messageLength, messageId);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
