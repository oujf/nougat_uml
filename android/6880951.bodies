class UiccPkcs15
!!!76704695.java!!!	UiccPkcs15(inout uiccCard : UiccCard, inout loadedCallback : Message)
        log("Creating UiccPkcs15");
        mUiccCard = uiccCard;
        mLoadedCallback = loadedCallback;
        mPkcs15Selector = new Pkcs15Selector(obtainMessage(EVENT_SELECT_PKCS15_DONE));
!!!76704823.java!!!	handleMessage(inout msg : Message) : void
        log("handleMessage: " + msg.what);
        AsyncResult ar = (AsyncResult) msg.obj;

        switch (msg.what) {
          case EVENT_SELECT_PKCS15_DONE:
              if (ar.exception == null) {
                  // ar.result is null if using logical channel,
                  // or string for pkcs15 path if using file access.
                  mFh = new FileHandler((String)ar.result);
                  if (!mFh.loadFile(ID_ACRF, obtainMessage(EVENT_LOAD_ACRF_DONE))) {
                      cleanUp();
                  }
              } else {
                  log("select pkcs15 failed: " + ar.exception);
                  // select PKCS15 failed, notify uiccCarrierPrivilegeRules
                  mLoadedCallback.sendToTarget();
              }
              break;

          case EVENT_LOAD_ACRF_DONE:
              if (ar.exception == null && ar.result != null) {
                  String idAccf = parseAcrf((String)ar.result);
                  if (!mFh.loadFile(idAccf, obtainMessage(EVENT_LOAD_ACCF_DONE))) {
                      cleanUp();
                  }
              } else {
                  cleanUp();
              }
              break;

          case EVENT_LOAD_ACCF_DONE:
              if (ar.exception == null && ar.result != null) {
                  parseAccf((String)ar.result);
              }
              // We are done here, no more file to read
              cleanUp();
              break;

          case EVENT_CLOSE_LOGICAL_CHANNEL_DONE:
              break;

          default:
              Rlog.e(LOG_TAG, "Unknown event " + msg.what);
        }
!!!76704951.java!!!	cleanUp() : void
        log("cleanUp");
        if (mChannelId >= 0) {
            mUiccCard.iccCloseLogicalChannel(mChannelId, obtainMessage(
                    EVENT_CLOSE_LOGICAL_CHANNEL_DONE));
            mChannelId = -1;
        }
        mLoadedCallback.sendToTarget();
!!!76705079.java!!!	parseAcrf(inout data : String) : String
        String ret = null;

        String acRules = data;
        while (!acRules.isEmpty()) {
            TLV tlvRule = new TLV(TAG_ASN_SEQUENCE);
            try {
                acRules = tlvRule.parse(acRules, false);
                String ruleString = tlvRule.getValue();
                if (ruleString.startsWith(TAG_TARGET_AID)) {
                    // rule string consists of target AID + path, example:
                    // [A0] 08 [04] 06 FF FF FF FF FF FF [30] 04 [04] 02 43 10
                    // bytes in [] are tags for the data
                    TLV tlvTarget = new TLV(TAG_TARGET_AID); // A0
                    TLV tlvAid = new TLV(TAG_ASN_OCTET_STRING); // 04
                    TLV tlvAsnPath = new TLV(TAG_ASN_SEQUENCE); // 30
                    TLV tlvPath = new TLV(TAG_ASN_OCTET_STRING);  // 04

                    // populate tlvTarget.value with aid data,
                    // ruleString has remaining data for path
                    ruleString = tlvTarget.parse(ruleString, false);
                    // parse tlvTarget.value to get actual strings for AID.
                    // no other tags expected so shouldConsumeAll is true.
                    tlvAid.parse(tlvTarget.getValue(), true);

                    if (CARRIER_RULE_AID.equals(tlvAid.getValue())) {
                        tlvAsnPath.parse(ruleString, true);
                        tlvPath.parse(tlvAsnPath.getValue(), true);
                        ret = tlvPath.getValue();
                    }
                }
                continue; // skip current rule as it doesn't have expected TAG
            } catch (IllegalArgumentException|IndexOutOfBoundsException ex) {
                log("Error: " + ex);
                break; // Bad data, ignore all remaining ACRules
            }
        }
        return ret;
!!!76705207.java!!!	parseAccf(inout data : String) : void
        String acCondition = data;
        while (!acCondition.isEmpty()) {
            TLV tlvCondition = new TLV(TAG_ASN_SEQUENCE);
            TLV tlvCert = new TLV(TAG_ASN_OCTET_STRING);
            try {
                acCondition = tlvCondition.parse(acCondition, false);
                tlvCert.parse(tlvCondition.getValue(), true);
                if (!tlvCert.getValue().isEmpty()) {
                    mRules.add(tlvCert.getValue());
                }
            } catch (IllegalArgumentException|IndexOutOfBoundsException ex) {
                log("Error: " + ex);
                break; // Bad data, ignore all remaining acCondition data
            }
        }
!!!76705335.java!!!	getRules() : String
        return mRules;
!!!76705463.java!!!	log(inout msg : String) : void
        if (DBG) Rlog.d(LOG_TAG, msg);
!!!76705591.java!!!	dump(inout fd : FileDescriptor, inout pw : PrintWriter, inout args : String [[]]) : void
        if (mRules != null) {
            pw.println(" mRules:");
            for (String cert : mRules) {
                pw.println("  " + cert);
            }
        }
