class SimulatedCommands
!!!76713911.java!!!	SimulatedCommands()
        super(null);  // Don't log statistics
        mHandlerThread = new HandlerThread("SimulatedCommands");
        mHandlerThread.start();
        Looper looper = mHandlerThread.getLooper();

        simulatedCallState = new SimulatedGsmCallState(looper);

        setRadioState(RadioState.RADIO_ON);
        mSimLockedState = INITIAL_LOCK_STATE;
        mSimLockEnabled = (mSimLockedState != SimLockState.NONE);
        mPinCode = DEFAULT_SIM_PIN_CODE;
        mSimFdnEnabledState = INITIAL_FDN_STATE;
        mSimFdnEnabled = (mSimFdnEnabledState != SimFdnState.NONE);
        mPin2Code = DEFAULT_SIM_PIN2_CODE;
!!!76714039.java!!!	log(inout str : String) : void
        Rlog.d(LOG_TAG, str);
!!!76714167.java!!!	getIccCardStatus(inout result : Message) : void
        if(mIccCardStatus!=null) {
            resultSuccess(result, mIccCardStatus);
        } else {
            resultFail(result, null, new RuntimeException("IccCardStatus not set"));
        }
!!!76714295.java!!!	supplyIccPin(inout pin : String, inout result : Message) : void
        if (mSimLockedState != SimLockState.REQUIRE_PIN) {
            Rlog.i(LOG_TAG, "[SimCmd] supplyIccPin: wrong state, state=" +
                    mSimLockedState);
            CommandException ex = new CommandException(
                    CommandException.Error.PASSWORD_INCORRECT);
            resultFail(result, null, ex);
            return;
        }

        if (pin != null && pin.equals(mPinCode)) {
            Rlog.i(LOG_TAG, "[SimCmd] supplyIccPin: success!");
            mPinUnlockAttempts = 0;
            mSimLockedState = SimLockState.NONE;
            mIccStatusChangedRegistrants.notifyRegistrants();

            resultSuccess(result, null);

            return;
        }

        if (result != null) {
            mPinUnlockAttempts ++;

            Rlog.i(LOG_TAG, "[SimCmd] supplyIccPin: failed! attempt=" +
                    mPinUnlockAttempts);
            if (mPinUnlockAttempts >= DEFAULT_PIN1_ATTEMPT) {
                Rlog.i(LOG_TAG, "[SimCmd] supplyIccPin: set state to REQUIRE_PUK");
                mSimLockedState = SimLockState.REQUIRE_PUK;
            }

            CommandException ex = new CommandException(
                    CommandException.Error.PASSWORD_INCORRECT);
            resultFail(result, null, ex);
        }
!!!76714423.java!!!	supplyIccPuk(inout puk : String, inout newPin : String, inout result : Message) : void
        if (mSimLockedState != SimLockState.REQUIRE_PUK) {
            Rlog.i(LOG_TAG, "[SimCmd] supplyIccPuk: wrong state, state=" +
                    mSimLockedState);
            CommandException ex = new CommandException(
                    CommandException.Error.PASSWORD_INCORRECT);
            resultFail(result, null, ex);
            return;
        }

        if (puk != null && puk.equals(SIM_PUK_CODE)) {
            Rlog.i(LOG_TAG, "[SimCmd] supplyIccPuk: success!");
            mSimLockedState = SimLockState.NONE;
            mPukUnlockAttempts = 0;
            mIccStatusChangedRegistrants.notifyRegistrants();

            resultSuccess(result, null);
            return;
        }

        if (result != null) {
            mPukUnlockAttempts ++;

            Rlog.i(LOG_TAG, "[SimCmd] supplyIccPuk: failed! attempt=" +
                    mPukUnlockAttempts);
            if (mPukUnlockAttempts >= 10) {
                Rlog.i(LOG_TAG, "[SimCmd] supplyIccPuk: set state to SIM_PERM_LOCKED");
                mSimLockedState = SimLockState.SIM_PERM_LOCKED;
            }

            CommandException ex = new CommandException(
                    CommandException.Error.PASSWORD_INCORRECT);
            resultFail(result, null, ex);
        }
!!!76714551.java!!!	supplyIccPin2(inout pin2 : String, inout result : Message) : void
        if (mSimFdnEnabledState != SimFdnState.REQUIRE_PIN2) {
            Rlog.i(LOG_TAG, "[SimCmd] supplyIccPin2: wrong state, state=" +
                    mSimFdnEnabledState);
            CommandException ex = new CommandException(
                    CommandException.Error.PASSWORD_INCORRECT);
            resultFail(result, null, ex);
            return;
        }

        if (pin2 != null && pin2.equals(mPin2Code)) {
            Rlog.i(LOG_TAG, "[SimCmd] supplyIccPin2: success!");
            mPin2UnlockAttempts = 0;
            mSimFdnEnabledState = SimFdnState.NONE;

            resultSuccess(result, null);
            return;
        }

        if (result != null) {
            mPin2UnlockAttempts ++;

            Rlog.i(LOG_TAG, "[SimCmd] supplyIccPin2: failed! attempt=" +
                    mPin2UnlockAttempts);
            if (mPin2UnlockAttempts >= DEFAULT_PIN2_ATTEMPT) {
                Rlog.i(LOG_TAG, "[SimCmd] supplyIccPin2: set state to REQUIRE_PUK2");
                mSimFdnEnabledState = SimFdnState.REQUIRE_PUK2;
            }

            CommandException ex = new CommandException(
                    CommandException.Error.PASSWORD_INCORRECT);
            resultFail(result, null, ex);
        }
!!!76714679.java!!!	supplyIccPuk2(inout puk2 : String, inout newPin2 : String, inout result : Message) : void
        if (mSimFdnEnabledState != SimFdnState.REQUIRE_PUK2) {
            Rlog.i(LOG_TAG, "[SimCmd] supplyIccPuk2: wrong state, state=" +
                    mSimLockedState);
            CommandException ex = new CommandException(
                    CommandException.Error.PASSWORD_INCORRECT);
            resultFail(result, null, ex);
            return;
        }

        if (puk2 != null && puk2.equals(SIM_PUK2_CODE)) {
            Rlog.i(LOG_TAG, "[SimCmd] supplyIccPuk2: success!");
            mSimFdnEnabledState = SimFdnState.NONE;
            mPuk2UnlockAttempts = 0;

            resultSuccess(result, null);
            return;
        }

        if (result != null) {
            mPuk2UnlockAttempts ++;

            Rlog.i(LOG_TAG, "[SimCmd] supplyIccPuk2: failed! attempt=" +
                    mPuk2UnlockAttempts);
            if (mPuk2UnlockAttempts >= 10) {
                Rlog.i(LOG_TAG, "[SimCmd] supplyIccPuk2: set state to SIM_PERM_LOCKED");
                mSimFdnEnabledState = SimFdnState.SIM_PERM_LOCKED;
            }

            CommandException ex = new CommandException(
                    CommandException.Error.PASSWORD_INCORRECT);
            resultFail(result, null, ex);
        }
!!!76714807.java!!!	changeIccPin(inout oldPin : String, inout newPin : String, inout result : Message) : void
        if (oldPin != null && oldPin.equals(mPinCode)) {
            mPinCode = newPin;
            resultSuccess(result, null);

            return;
        }

        Rlog.i(LOG_TAG, "[SimCmd] changeIccPin: pin failed!");

        CommandException ex = new CommandException(
                CommandException.Error.PASSWORD_INCORRECT);
        resultFail(result, null, ex);
!!!76714935.java!!!	changeIccPin2(inout oldPin2 : String, inout newPin2 : String, inout result : Message) : void
        if (oldPin2 != null && oldPin2.equals(mPin2Code)) {
            mPin2Code = newPin2;
            resultSuccess(result, null);

            return;
        }

        Rlog.i(LOG_TAG, "[SimCmd] changeIccPin2: pin2 failed!");

        CommandException ex = new CommandException(
                CommandException.Error.PASSWORD_INCORRECT);
        resultFail(result, null, ex);
!!!76715063.java!!!	changeBarringPassword(inout facility : String, inout oldPwd : String, inout newPwd : String, inout result : Message) : void
        unimplemented(result);
!!!76715191.java!!!	setSuppServiceNotifications(inout enable : boolean, inout result : Message) : void
        resultSuccess(result, null);

        if (enable && mSsnNotifyOn) {
            Rlog.w(LOG_TAG, "Supp Service Notifications already enabled!");
        }

        mSsnNotifyOn = enable;
!!!76715319.java!!!	queryFacilityLock(inout facility : String, inout pin : String, in serviceClass : int, inout result : Message) : void
        queryFacilityLockForApp(facility, pin, serviceClass, null, result);
!!!76715447.java!!!	queryFacilityLockForApp(inout facility : String, inout pin : String, in serviceClass : int, inout appId : String, inout result : Message) : void
        if (facility != null && facility.equals(CommandsInterface.CB_FACILITY_BA_SIM)) {
            if (result != null) {
                int[] r = new int[1];
                r[0] = (mSimLockEnabled ? 1 : 0);
                Rlog.i(LOG_TAG, "[SimCmd] queryFacilityLock: SIM is "
                        + (r[0] == 0 ? "unlocked" : "locked"));
                resultSuccess(result, r);
            }
            return;
        } else if (facility != null && facility.equals(CommandsInterface.CB_FACILITY_BA_FD)) {
            if (result != null) {
                int[] r = new int[1];
                r[0] = (mSimFdnEnabled ? 1 : 0);
                Rlog.i(LOG_TAG, "[SimCmd] queryFacilityLock: FDN is "
                        + (r[0] == 0 ? "disabled" : "enabled"));
                resultSuccess(result, r);
            }
            return;
        }

        unimplemented(result);
!!!76715575.java!!!	setFacilityLock(inout facility : String, inout lockEnabled : boolean, inout pin : String, in serviceClass : int, inout result : Message) : void
        setFacilityLockForApp(facility, lockEnabled, pin, serviceClass, null, result);
!!!76715703.java!!!	setFacilityLockForApp(inout facility : String, inout lockEnabled : boolean, inout pin : String, in serviceClass : int, inout appId : String, inout result : Message) : void
        if (facility != null &&
                facility.equals(CommandsInterface.CB_FACILITY_BA_SIM)) {
            if (pin != null && pin.equals(mPinCode)) {
                Rlog.i(LOG_TAG, "[SimCmd] setFacilityLock: pin is valid");
                mSimLockEnabled = lockEnabled;

                resultSuccess(result, null);

                return;
            }

            Rlog.i(LOG_TAG, "[SimCmd] setFacilityLock: pin failed!");

            CommandException ex = new CommandException(
                    CommandException.Error.GENERIC_FAILURE);
            resultFail(result, null, ex);

            return;
        }  else if (facility != null &&
                facility.equals(CommandsInterface.CB_FACILITY_BA_FD)) {
            if (pin != null && pin.equals(mPin2Code)) {
                Rlog.i(LOG_TAG, "[SimCmd] setFacilityLock: pin2 is valid");
                mSimFdnEnabled = lockEnabled;

                resultSuccess(result, null);

                return;
            }

            Rlog.i(LOG_TAG, "[SimCmd] setFacilityLock: pin2 failed!");

            CommandException ex = new CommandException(
                    CommandException.Error.GENERIC_FAILURE);
            resultFail(result, null, ex);

            return;
        }

        unimplemented(result);
!!!76715831.java!!!	supplyNetworkDepersonalization(inout netpin : String, inout result : Message) : void
        unimplemented(result);
!!!76715959.java!!!	getCurrentCalls(inout result : Message) : void
        SimulatedCommandsVerifier.getInstance().getCurrentCalls(result);
        if ((mState == RadioState.RADIO_ON) && !isSimLocked()) {
            //Rlog.i("GSM", "[SimCmds] getCurrentCalls");
            resultSuccess(result, simulatedCallState.getDriverCalls());
        } else {
            //Rlog.i("GSM", "[SimCmds] getCurrentCalls: RADIO_OFF or SIM not ready!");
            resultFail(result, null,
                new CommandException(CommandException.Error.RADIO_NOT_AVAILABLE));
        }
!!!76716087.java!!!	getPDPContextList(inout result : Message) : void
        getDataCallList(result);
!!!76716215.java!!!	getDataCallList(inout result : Message) : void
        resultSuccess(result, new ArrayList<DataCallResponse>(0));
!!!76716343.java!!!	dial(inout address : String, in clirMode : int, inout result : Message) : void
        SimulatedCommandsVerifier.getInstance().dial(address, clirMode, result);
        simulatedCallState.onDial(address);

        resultSuccess(result, null);
!!!76716471.java!!!	dial(inout address : String, in clirMode : int, inout uusInfo : UUSInfo, inout result : Message) : void
        SimulatedCommandsVerifier.getInstance().dial(address, clirMode, uusInfo, result);
        simulatedCallState.onDial(address);

        resultSuccess(result, null);
!!!76716599.java!!!	getIMSI(inout result : Message) : void
        getIMSIForApp(null, result);
!!!76716727.java!!!	getIMSIForApp(inout aid : String, inout result : Message) : void
        resultSuccess(result, "012345678901234");
!!!76716855.java!!!	setIMEI(inout imei : String) : void
        mImei = imei;
!!!76716983.java!!!	getIMEI(inout result : Message) : void
        SimulatedCommandsVerifier.getInstance().getIMEI(result);
        resultSuccess(result, mImei != null ? mImei : FAKE_IMEI);
!!!76717111.java!!!	setIMEISV(inout imeisv : String) : void
        mImeiSv = imeisv;
!!!76717239.java!!!	getIMEISV(inout result : Message) : void
        SimulatedCommandsVerifier.getInstance().getIMEISV(result);
        resultSuccess(result, mImeiSv != null ? mImeiSv : FAKE_IMEISV);
!!!76717367.java!!!	hangupConnection(in gsmIndex : int, inout result : Message) : void
        boolean success;

        success = simulatedCallState.onChld('1', (char)('0'+gsmIndex));

        if (!success){
            Rlog.i("GSM", "[SimCmd] hangupConnection: resultFail");
            resultFail(result, null, new RuntimeException("Hangup Error"));
        } else {
            Rlog.i("GSM", "[SimCmd] hangupConnection: resultSuccess");
            resultSuccess(result, null);
        }
!!!76717495.java!!!	hangupWaitingOrBackground(inout result : Message) : void
        boolean success;

        success = simulatedCallState.onChld('0', '\0');

        if (!success){
            resultFail(result, null, new RuntimeException("Hangup Error"));
        } else {
            resultSuccess(result, null);
        }
!!!76717623.java!!!	hangupForegroundResumeBackground(inout result : Message) : void
        boolean success;

        success = simulatedCallState.onChld('1', '\0');

        if (!success){
            resultFail(result, null, new RuntimeException("Hangup Error"));
        } else {
            resultSuccess(result, null);
        }
!!!76717751.java!!!	switchWaitingOrHoldingAndActive(inout result : Message) : void
        boolean success;

        success = simulatedCallState.onChld('2', '\0');

        if (!success){
            resultFail(result, null, new RuntimeException("Hangup Error"));
        } else {
            resultSuccess(result, null);
        }
!!!76717879.java!!!	conference(inout result : Message) : void
        boolean success;

        success = simulatedCallState.onChld('3', '\0');

        if (!success){
            resultFail(result, null, new RuntimeException("Hangup Error"));
        } else {
            resultSuccess(result, null);
        }
!!!76718007.java!!!	explicitCallTransfer(inout result : Message) : void
        boolean success;

        success = simulatedCallState.onChld('4', '\0');

        if (!success){
            resultFail(result, null, new RuntimeException("Hangup Error"));
        } else {
            resultSuccess(result, null);
        }
!!!76718135.java!!!	separateConnection(in gsmIndex : int, inout result : Message) : void
        boolean success;

        char ch = (char)(gsmIndex + '0');
        success = simulatedCallState.onChld('2', ch);

        if (!success){
            resultFail(result, null, new RuntimeException("Hangup Error"));
        } else {
            resultSuccess(result, null);
        }
!!!76718263.java!!!	acceptCall(inout result : Message) : void
        boolean success;

        SimulatedCommandsVerifier.getInstance().acceptCall(result);
        success = simulatedCallState.onAnswer();

        if (!success){
            resultFail(result, null, new RuntimeException("Hangup Error"));
        } else {
            resultSuccess(result, null);
        }
!!!76718391.java!!!	rejectCall(inout result : Message) : void
        boolean success;

        success = simulatedCallState.onChld('0', '\0');

        if (!success){
            resultFail(result, null, new RuntimeException("Hangup Error"));
        } else {
            resultSuccess(result, null);
        }
!!!76718519.java!!!	getLastCallFailCause(inout result : Message) : void
        LastCallFailCause mFailCause = new LastCallFailCause();
        mFailCause.causeCode = mNextCallFailCause;
        resultSuccess(result, mFailCause);
!!!76718647.java!!!	getLastPdpFailCause(inout result : Message) : void
        unimplemented(result);
!!!76718775.java!!!	getLastDataCallFailCause(inout result : Message) : void
        //
        unimplemented(result);
!!!76718903.java!!!	setMute(inout enableMute : boolean, inout result : Message) : void
unimplemented(result);
!!!76719031.java!!!	getMute(inout result : Message) : void
unimplemented(result);
!!!76719159.java!!!	setSignalStrength(inout signalStrength : SignalStrength) : void
        mSignalStrength = signalStrength;
!!!76719287.java!!!	getSignalStrength(inout result : Message) : void

        if (mSignalStrength == null) {
            mSignalStrength = new SignalStrength(
                20, // gsmSignalStrength
                0,  // gsmBitErrorRate
                -1, // cdmaDbm
                -1, // cdmaEcio
                -1, // evdoDbm
                -1, // evdoEcio
                -1, // evdoSnr
                99, // lteSignalStrength
                SignalStrength.INVALID,     // lteRsrp
                SignalStrength.INVALID,     // lteRsrq
                SignalStrength.INVALID,     // lteRssnr
                SignalStrength.INVALID,     // lteCqi
                SignalStrength.INVALID,     // tdScdmaRscp
                true                        // gsmFlag
            );
        }

        resultSuccess(result, mSignalStrength);
!!!76719415.java!!!	setBandMode(in bandMode : int, inout result : Message) : void
        resultSuccess(result, null);
!!!76719543.java!!!	queryAvailableBandMode(inout result : Message) : void
        int ret[] = new int [4];

        ret[0] = 4;
        ret[1] = Phone.BM_US_BAND;
        ret[2] = Phone.BM_JPN_BAND;
        ret[3] = Phone.BM_AUS_BAND;

        resultSuccess(result, ret);
!!!76719671.java!!!	sendTerminalResponse(inout contents : String, inout response : Message) : void
        resultSuccess(response, null);
!!!76719799.java!!!	sendEnvelope(inout contents : String, inout response : Message) : void
        resultSuccess(response, null);
!!!76719927.java!!!	sendEnvelopeWithStatus(inout contents : String, inout response : Message) : void
        resultSuccess(response, null);
!!!76720055.java!!!	handleCallSetupRequestFromSim(inout accept : boolean, inout response : Message) : void
        resultSuccess(response, null);
!!!76720183.java!!!	setVoiceRadioTech(in voiceRadioTech : int) : void
        mVoiceRadioTech = voiceRadioTech;
!!!76720311.java!!!	setVoiceRegState(in voiceRegState : int) : void
        mVoiceRegState = voiceRegState;
!!!76720439.java!!!	getVoiceRegistrationState(inout result : Message) : void
        mGetVoiceRegistrationStateCallCount.incrementAndGet();
        String ret[] = new String[14];

        ret[0] = Integer.toString(mVoiceRegState);
        ret[3] = Integer.toString(mVoiceRadioTech);

        resultSuccess(result, ret);
!!!76720567.java!!!	getGetVoiceRegistrationStateCallCount() : int
        return mGetVoiceRegistrationStateCallCount.get();
!!!76720695.java!!!	setDataRadioTech(in radioTech : int) : void
        mDataRadioTech = radioTech;
!!!76720823.java!!!	setDataRegState(in dataRegState : int) : void
        mDataRegState = dataRegState;
!!!76720951.java!!!	getDataRegistrationState(inout result : Message) : void
        mGetDataRegistrationStateCallCount.incrementAndGet();
        String ret[] = new String[11];

        ret[0] = Integer.toString(mDataRegState);
        ret[3] = Integer.toString(mDataRadioTech);

        resultSuccess(result, ret);
!!!76721079.java!!!	getGetDataRegistrationStateCallCount() : int
        return mGetDataRegistrationStateCallCount.get();
!!!76721207.java!!!	getOperator(inout result : Message) : void
        mGetOperatorCallCount.incrementAndGet();
        String[] ret = new String[3];

        ret[0] = FAKE_LONG_NAME;
        ret[1] = FAKE_SHORT_NAME;
        ret[2] = FAKE_MCC_MNC;

        resultSuccess(result, ret);
!!!76721335.java!!!	getGetOperatorCallCount() : int
        final int count = mGetOperatorCallCount.get();
        return mGetOperatorCallCount.get();
!!!76721463.java!!!	sendDtmf(in c : char, inout result : Message) : void
        resultSuccess(result, null);
!!!76721591.java!!!	startDtmf(in c : char, inout result : Message) : void
        resultSuccess(result, null);
!!!76721719.java!!!	stopDtmf(inout result : Message) : void
        resultSuccess(result, null);
!!!76721847.java!!!	sendBurstDtmf(inout dtmfString : String, in on : int, in off : int, inout result : Message) : void
        SimulatedCommandsVerifier.getInstance().sendBurstDtmf(dtmfString, on, off, result);
        resultSuccess(result, null);
!!!76721975.java!!!	sendSMS(inout smscPDU : String, inout pdu : String, inout result : Message) : void
        SimulatedCommandsVerifier.getInstance().sendSMS(smscPDU, pdu, result);
        resultSuccess(result, new SmsResponse(0 /*messageRef*/, null, 0));
!!!76722103.java!!!	sendSMSExpectMore(inout smscPDU : String, inout pdu : String, inout result : Message) : void
        unimplemented(result);
!!!76722231.java!!!	deleteSmsOnSim(in index : int, inout response : Message) : void
        Rlog.d(LOG_TAG, "Delete message at index " + index);
        unimplemented(response);
!!!76722359.java!!!	deleteSmsOnRuim(in index : int, inout response : Message) : void
        Rlog.d(LOG_TAG, "Delete RUIM message at index " + index);
        unimplemented(response);
!!!76722487.java!!!	writeSmsToSim(in status : int, inout smsc : String, inout pdu : String, inout response : Message) : void
        Rlog.d(LOG_TAG, "Write SMS to SIM with status " + status);
        unimplemented(response);
!!!76722615.java!!!	writeSmsToRuim(in status : int, inout pdu : String, inout response : Message) : void
        Rlog.d(LOG_TAG, "Write SMS to RUIM with status " + status);
        unimplemented(response);
!!!76722743.java!!!	setDataCallResponse(in success : boolean, in dcResponse : DataCallResponse) : void
        mDcResponse = dcResponse;
        mDcSuccess = success;
!!!76722871.java!!!	triggerNITZupdate(inout NITZStr : String) : void
        if (NITZStr != null) {
            mNITZTimeRegistrant.notifyRegistrant(new AsyncResult (null, new Object[]{NITZStr,
                    SystemClock.elapsedRealtime()}, null));
        }
!!!76722999.java!!!	setupDataCall(in radioTechnology : int, in profile : int, inout apn : String, inout user : String, inout password : String, in authType : int, inout protocol : String, inout result : Message) : void
        SimulatedCommandsVerifier.getInstance().setupDataCall(radioTechnology, profile, apn, user,
                password, authType, protocol, result);

        if (mDcResponse == null) {
            mDcResponse = new DataCallResponse();
            mDcResponse.version = 11;
            mDcResponse.status = 0;
            mDcResponse.suggestedRetryTime = -1;
            mDcResponse.cid = 1;
            mDcResponse.active = 2;
            mDcResponse.type = "IP";
            mDcResponse.ifname = "rmnet_data7";
            mDcResponse.mtu = 1440;
            mDcResponse.addresses = new String[]{"12.34.56.78"};
            mDcResponse.dnses = new String[]{"98.76.54.32"};
            mDcResponse.gateways = new String[]{"11.22.33.44"};
            mDcResponse.pcscf = new String[]{};
        }

        if (mDcSuccess) {
            resultSuccess(result, mDcResponse);
        } else {
            resultFail(result, mDcResponse, new RuntimeException("Setup data call failed!"));
        }
!!!76723127.java!!!	deactivateDataCall(in cid : int, in reason : int, inout result : Message) : void
        SimulatedCommandsVerifier.getInstance().deactivateDataCall(cid, reason, result);
        resultSuccess(result, null);
!!!76723255.java!!!	setPreferredNetworkType(in networkType : int, inout result : Message) : void
        SimulatedCommandsVerifier.getInstance().setPreferredNetworkType(networkType, result);
        mNetworkType = networkType;
        resultSuccess(result, null);
!!!76723383.java!!!	getPreferredNetworkType(inout result : Message) : void
        SimulatedCommandsVerifier.getInstance().getPreferredNetworkType(result);
        int ret[] = new int[1];

        ret[0] = mNetworkType;
        resultSuccess(result, ret);
!!!76723511.java!!!	getNeighboringCids(inout result : Message) : void
        int ret[] = new int[7];

        ret[0] = 6;
        for (int i = 1; i<7; i++) {
            ret[i] = i;
        }
        resultSuccess(result, ret);
!!!76723639.java!!!	setLocationUpdates(inout enable : boolean, inout response : Message) : void
        SimulatedCommandsVerifier.getInstance().setLocationUpdates(enable, response);
        resultSuccess(response, null);
!!!76723767.java!!!	getSmscAddress(inout result : Message) : void
        unimplemented(result);
!!!76723895.java!!!	setSmscAddress(inout address : String, inout result : Message) : void
        unimplemented(result);
!!!76724023.java!!!	reportSmsMemoryStatus(inout available : boolean, inout result : Message) : void
        resultSuccess(result, null);
        SimulatedCommandsVerifier.getInstance().reportSmsMemoryStatus(available, result);
!!!76724151.java!!!	reportStkServiceIsRunning(inout result : Message) : void
        resultSuccess(result, null);
!!!76724279.java!!!	getCdmaSubscriptionSource(inout result : Message) : void
        unimplemented(result);
!!!76724407.java!!!	isSimLocked() : boolean
        if (mSimLockedState != SimLockState.NONE) {
            return true;
        }
        return false;
!!!76724535.java!!!	setRadioPower(inout on : boolean, inout result : Message) : void
        if(on) {
            setRadioState(RadioState.RADIO_ON);
        } else {
            setRadioState(RadioState.RADIO_OFF);
        }
!!!76724663.java!!!	acknowledgeLastIncomingGsmSms(inout success : boolean, in cause : int, inout result : Message) : void
        unimplemented(result);
        SimulatedCommandsVerifier.getInstance().
                acknowledgeLastIncomingGsmSms(success, cause, result);
!!!76724791.java!!!	acknowledgeLastIncomingCdmaSms(inout success : boolean, in cause : int, inout result : Message) : void
        unimplemented(result);
!!!76724919.java!!!	acknowledgeIncomingGsmSmsWithPdu(inout success : boolean, inout ackPdu : String, inout result : Message) : void
        unimplemented(result);
!!!76725047.java!!!	iccIO(in command : int, in fileid : int, inout path : String, in p1 : int, in p2 : int, in p3 : int, inout data : String, inout pin2 : String, inout response : Message) : void
        iccIOForApp(command, fileid, path, p1, p2, p3, data, pin2, null, response);
!!!76725175.java!!!	iccIOForApp(in command : int, in fileid : int, inout path : String, in p1 : int, in p2 : int, in p3 : int, inout data : String, inout pin2 : String, inout aid : String, inout result : Message) : void
        unimplemented(result);
!!!76725303.java!!!	queryCLIP(inout response : Message) : void
 unimplemented(response);
!!!76725431.java!!!	getCLIR(inout result : Message) : void
unimplemented(result);
!!!76725559.java!!!	setCLIR(in clirMode : int, inout result : Message) : void
unimplemented(result);
!!!76725687.java!!!	queryCallWaiting(in serviceClass : int, inout response : Message) : void
        unimplemented(response);
!!!76725815.java!!!	setCallWaiting(inout enable : boolean, in serviceClass : int, inout response : Message) : void
        unimplemented(response);
!!!76725943.java!!!	setCallForward(in action : int, in cfReason : int, in serviceClass : int, inout number : String, in timeSeconds : int, inout result : Message) : void
        SimulatedCommandsVerifier.getInstance().setCallForward(action, cfReason, serviceClass,
                number, timeSeconds, result);
        resultSuccess(result, null);
!!!76726071.java!!!	queryCallForwardStatus(in cfReason : int, in serviceClass : int, inout number : String, inout result : Message) : void
        SimulatedCommandsVerifier.getInstance().queryCallForwardStatus(cfReason, serviceClass,
                number, result);
        resultSuccess(result, null);
!!!76726199.java!!!	setNetworkSelectionModeAutomatic(inout result : Message) : void
unimplemented(result);
!!!76726327.java!!!	exitEmergencyCallbackMode(inout result : Message) : void
unimplemented(result);
!!!76726455.java!!!	setNetworkSelectionModeManual(inout operatorNumeric : String, inout result : Message) : void
unimplemented(result);
!!!76726583.java!!!	getNetworkSelectionMode(inout result : Message) : void
        SimulatedCommandsVerifier.getInstance().getNetworkSelectionMode(result);
        getNetworkSelectionModeCallCount.incrementAndGet();
        int ret[] = new int[1];

        ret[0] = 0;
        resultSuccess(result, ret);
!!!76726711.java!!!	getGetNetworkSelectionModeCallCount() : int
        return getNetworkSelectionModeCallCount.get();
!!!76726839.java!!!	getAvailableNetworks(inout result : Message) : void
unimplemented(result);
!!!76726967.java!!!	getBasebandVersion(inout result : Message) : void
        SimulatedCommandsVerifier.getInstance().getBasebandVersion(result);
        resultSuccess(result, "SimulatedCommands");
!!!76727095.java!!!	triggerIncomingStkCcAlpha(inout alphaString : String) : void
        if (mCatCcAlphaRegistrant != null) {
            mCatCcAlphaRegistrant.notifyResult(alphaString);
        }
!!!76727223.java!!!	sendStkCcAplha(inout alphaString : String) : void
        triggerIncomingStkCcAlpha(alphaString);
!!!76727351.java!!!	triggerIncomingUssd(inout statusCode : String, inout message : String) : void
        if (mUSSDRegistrant != null) {
            String[] result = {statusCode, message};
            mUSSDRegistrant.notifyResult(result);
        }
!!!76727479.java!!!	sendUSSD(inout ussdString : String, inout result : Message) : void

        // We simulate this particular sequence
        if (ussdString.equals("#646#")) {
            resultSuccess(result, null);

            // 0 == USSD-Notify
            triggerIncomingUssd("0", "You have NNN minutes remaining.");
        } else {
            resultSuccess(result, null);

            triggerIncomingUssd("0", "All Done");
        }
!!!76727607.java!!!	cancelPendingUssd(inout response : Message) : void
        resultSuccess(response, null);
!!!76727735.java!!!	resetRadio(inout result : Message) : void
        unimplemented(result);
!!!76727863.java!!!	invokeOemRilRequestRaw(inout data : byte [[]], inout response : Message) : void
        // Just echo back data
        if (response != null) {
            AsyncResult.forMessage(response).result = data;
            response.sendToTarget();
        }
!!!76727991.java!!!	invokeOemRilRequestStrings(inout strings : String [[]], inout response : Message) : void
        // Just echo back data
        if (response != null) {
            AsyncResult.forMessage(response).result = strings;
            response.sendToTarget();
        }
!!!76728119.java!!!	triggerRing(inout number : String) : void
        simulatedCallState.triggerRing(number);
        mCallStateRegistrants.notifyRegistrants();
!!!76728247.java!!!	progressConnectingCallState() : void
        simulatedCallState.progressConnectingCallState();
        mCallStateRegistrants.notifyRegistrants();
!!!76728375.java!!!	progressConnectingToActive() : void
        simulatedCallState.progressConnectingToActive();
        mCallStateRegistrants.notifyRegistrants();
!!!76728503.java!!!	setAutoProgressConnectingCall(inout b : boolean) : void
        simulatedCallState.setAutoProgressConnectingCall(b);
!!!76728631.java!!!	setNextDialFailImmediately(inout b : boolean) : void
        simulatedCallState.setNextDialFailImmediately(b);
!!!76728759.java!!!	setNextCallFailCause(in gsmCause : int) : void
        mNextCallFailCause = gsmCause;
!!!76728887.java!!!	triggerHangupForeground() : void
        simulatedCallState.triggerHangupForeground();
        mCallStateRegistrants.notifyRegistrants();
!!!76729015.java!!!	triggerHangupBackground() : void
        simulatedCallState.triggerHangupBackground();
        mCallStateRegistrants.notifyRegistrants();
!!!76729143.java!!!	triggerSsn(in type : int, in code : int) : void
        SuppServiceNotification not = new SuppServiceNotification();
        not.notificationType = type;
        not.code = code;
        mSsnRegistrant.notifyRegistrant(new AsyncResult(null, not, null));
!!!76729271.java!!!	shutdown() : void
        setRadioState(RadioState.RADIO_UNAVAILABLE);
        Looper looper = mHandlerThread.getLooper();
        if (looper != null) {
            looper.quit();
        }
!!!76729399.java!!!	triggerHangupAll() : void
        simulatedCallState.triggerHangupAll();
        mCallStateRegistrants.notifyRegistrants();
!!!76729527.java!!!	triggerIncomingSMS(inout message : String) : void
        //TODO
!!!76729655.java!!!	pauseResponses() : void
        mPausedResponseCount++;
!!!76729783.java!!!	resumeResponses() : void
        mPausedResponseCount--;

        if (mPausedResponseCount == 0) {
            for (int i = 0, s = mPausedResponses.size(); i < s ; i++) {
                mPausedResponses.get(i).sendToTarget();
            }
            mPausedResponses.clear();
        } else {
            Rlog.e("GSM", "SimulatedCommands.resumeResponses < 0");
        }
!!!76729911.java!!!	unimplemented(inout result : Message) : void
        if (result != null) {
            AsyncResult.forMessage(result).exception
                = new RuntimeException("Unimplemented");

            if (mPausedResponseCount > 0) {
                mPausedResponses.add(result);
            } else {
                result.sendToTarget();
            }
        }
!!!76730039.java!!!	resultSuccess(inout result : Message, inout ret : Object) : void
        if (result != null) {
            AsyncResult.forMessage(result).result = ret;
            if (mPausedResponseCount > 0) {
                mPausedResponses.add(result);
            } else {
                result.sendToTarget();
            }
        }
!!!76730167.java!!!	resultFail(inout result : Message, inout ret : Object, inout tr : Throwable) : void
        if (result != null) {
            AsyncResult.forMessage(result, ret, tr);
            if (mPausedResponseCount > 0) {
                mPausedResponses.add(result);
            } else {
                result.sendToTarget();
            }
        }
!!!76730295.java!!!	getDeviceIdentity(inout response : Message) : void
        SimulatedCommandsVerifier.getInstance().getDeviceIdentity(response);
        resultSuccess(response, new String[] {FAKE_IMEI, FAKE_IMEISV, FAKE_ESN, FAKE_MEID});
!!!76730423.java!!!	getCDMASubscription(inout result : Message) : void
        String ret[] = new String[5];
        ret[0] = "123";
        ret[1] = "456";
        ret[2] = "789";
        ret[3] = "234";
        ret[4] = "345";
        resultSuccess(result, ret);
!!!76730551.java!!!	setCdmaSubscriptionSource(in cdmaSubscriptionType : int, inout response : Message) : void
        unimplemented(response);
!!!76730679.java!!!	queryCdmaRoamingPreference(inout response : Message) : void
        unimplemented(response);
!!!76730807.java!!!	setCdmaRoamingPreference(in cdmaRoamingType : int, inout response : Message) : void
        unimplemented(response);
!!!76731063.java!!!	getPreferredVoicePrivacy(inout result : Message) : void
        unimplemented(result);
!!!76731191.java!!!	setPreferredVoicePrivacy(inout enable : boolean, inout result : Message) : void
        unimplemented(result);
!!!76731319.java!!!	setTTYMode(in ttyMode : int, inout response : Message) : void
        Rlog.w(LOG_TAG, "Not implemented in SimulatedCommands");
        unimplemented(response);
!!!76731447.java!!!	queryTTYMode(inout response : Message) : void
        unimplemented(response);
!!!76731575.java!!!	sendCDMAFeatureCode(inout FeatureCode : String, inout response : Message) : void
        unimplemented(response);
!!!76731703.java!!!	sendCdmaSms(inout pdu : byte [[]], inout response : Message) : void
        SimulatedCommandsVerifier.getInstance().sendCdmaSms(pdu, response);
        resultSuccess(response, null);
!!!76731831.java!!!	setCdmaBroadcastActivation(inout activate : boolean, inout response : Message) : void
        unimplemented(response);

!!!76731959.java!!!	getCdmaBroadcastConfig(inout response : Message) : void
        unimplemented(response);

!!!76732087.java!!!	setCdmaBroadcastConfig(inout configs : CdmaSmsBroadcastConfigInfo [[]], inout response : Message) : void
        unimplemented(response);
!!!76732215.java!!!	forceDataDormancy(inout response : Message) : void
        unimplemented(response);
!!!76732343.java!!!	setGsmBroadcastActivation(inout activate : boolean, inout response : Message) : void
        unimplemented(response);
!!!76732471.java!!!	setGsmBroadcastConfig(inout config : SmsBroadcastConfigInfo [[]], inout response : Message) : void
        unimplemented(response);
!!!76732599.java!!!	getGsmBroadcastConfig(inout response : Message) : void
        unimplemented(response);
!!!76732727.java!!!	supplyIccPinForApp(inout pin : String, inout aid : String, inout response : Message) : void
        SimulatedCommandsVerifier.getInstance().supplyIccPinForApp(pin, aid, response);
        if (mPinCode != null && mPinCode.equals(pin)) {
            resultSuccess(response, null);
            return;
        }

        Rlog.i(LOG_TAG, "[SimCmd] supplyIccPinForApp: pin failed!");
        CommandException ex = new CommandException(
                CommandException.Error.PASSWORD_INCORRECT);
        resultFail(response, new int[]{
                (--mPin1attemptsRemaining < 0) ? 0 : mPin1attemptsRemaining}, ex);
!!!76732855.java!!!	supplyIccPukForApp(inout puk : String, inout newPin : String, inout aid : String, inout response : Message) : void
        unimplemented(response);
!!!76732983.java!!!	supplyIccPin2ForApp(inout pin2 : String, inout aid : String, inout response : Message) : void
        unimplemented(response);
!!!76733111.java!!!	supplyIccPuk2ForApp(inout puk2 : String, inout newPin2 : String, inout aid : String, inout response : Message) : void
        unimplemented(response);
!!!76733239.java!!!	changeIccPinForApp(inout oldPin : String, inout newPin : String, inout aidPtr : String, inout response : Message) : void
        SimulatedCommandsVerifier.getInstance().changeIccPinForApp(oldPin, newPin, aidPtr,
                response);
        changeIccPin(oldPin, newPin, response);
!!!76733367.java!!!	changeIccPin2ForApp(inout oldPin2 : String, inout newPin2 : String, inout aidPtr : String, inout response : Message) : void
        unimplemented(response);
!!!76733495.java!!!	requestIsimAuthentication(inout nonce : String, inout response : Message) : void
        unimplemented(response);
!!!76733623.java!!!	requestIccSimAuthentication(in authContext : int, inout data : String, inout aid : String, inout response : Message) : void
        unimplemented(response);
!!!76733751.java!!!	getVoiceRadioTechnology(inout response : Message) : void
        SimulatedCommandsVerifier.getInstance().getVoiceRadioTechnology(response);
        int ret[] = new int[1];
        ret[0] = mVoiceRadioTech;
        resultSuccess(response, ret);
!!!76733879.java!!!	setCellInfoList(inout list : List<CellInfo>) : void
        mCellInfoList = list;
!!!76734007.java!!!	getCellInfoList(inout response : Message) : void
        if (mCellInfoList == null) {
            Parcel p = Parcel.obtain();
            p.writeInt(1);
            p.writeInt(1);
            p.writeInt(2);
            p.writeLong(1453510289108L);
            p.writeInt(310);
            p.writeInt(260);
            p.writeInt(123);
            p.writeInt(456);
            p.writeInt(99);
            p.writeInt(3);
            p.setDataPosition(0);

            CellInfoGsm cellInfo = CellInfoGsm.CREATOR.createFromParcel(p);

            ArrayList<CellInfo> mCellInfoList = new ArrayList();
            mCellInfoList.add(cellInfo);
        }

        resultSuccess(response, mCellInfoList);
!!!76734135.java!!!	getRilVersion() : int
        return 11;
!!!76734263.java!!!	setCellInfoListRate(in rateInMillis : int, inout response : Message) : void
        unimplemented(response);
!!!76734647.java!!!	setImsRegistrationState(inout regState : int [[]]) : void
        mImsRegState = regState;
!!!76734775.java!!!	getImsRegistrationState(inout response : Message) : void
        if (mImsRegState == null) {
            mImsRegState = new int[]{1, PhoneConstants.PHONE_TYPE_NONE};
        }

        resultSuccess(response, mImsRegState);
!!!76734903.java!!!	sendImsCdmaSms(inout pdu : byte [[]], in retry : int, in messageRef : int, inout response : Message) : void
        SimulatedCommandsVerifier.getInstance().sendImsCdmaSms(pdu, retry, messageRef, response);
        resultSuccess(response, new SmsResponse(0 /*messageRef*/, null, 0));
!!!76735031.java!!!	sendImsGsmSms(inout smscPDU : String, inout pdu : String, in retry : int, in messageRef : int, inout response : Message) : void
        SimulatedCommandsVerifier.getInstance().sendImsGsmSms(smscPDU, pdu, retry, messageRef,
                response);
        resultSuccess(response, new SmsResponse(0 /*messageRef*/, null, 0));
!!!76735159.java!!!	iccOpenLogicalChannel(inout AID : String, inout response : Message) : void
        SimulatedCommandsVerifier.getInstance().iccOpenLogicalChannel(AID, response);
        Object result = new int[]{mChannelId};
        resultSuccess(response, result);
!!!76735287.java!!!	iccCloseLogicalChannel(in channel : int, inout response : Message) : void
        unimplemented(response);
!!!76735415.java!!!	iccTransmitApduLogicalChannel(in channel : int, in cla : int, in instruction : int, in p1 : int, in p2 : int, in p3 : int, inout data : String, inout response : Message) : void
        SimulatedCommandsVerifier.getInstance().iccTransmitApduLogicalChannel(channel, cla,
                instruction, p1, p2, p3, data, response);
        if(mIccIoResultForApduLogicalChannel!=null) {
            resultSuccess(response, mIccIoResultForApduLogicalChannel);
        }else {
            resultFail(response, null, new RuntimeException("IccIoResult not set"));
        }
!!!76735543.java!!!	iccTransmitApduBasicChannel(in cla : int, in instruction : int, in p1 : int, in p2 : int, in p3 : int, inout data : String, inout response : Message) : void
        unimplemented(response);
!!!76735671.java!!!	nvReadItem(in itemID : int, inout response : Message) : void
        unimplemented(response);
!!!76735799.java!!!	nvWriteItem(in itemID : int, inout itemValue : String, inout response : Message) : void
        unimplemented(response);
!!!76735927.java!!!	nvWriteCdmaPrl(inout preferredRoamingList : byte [[]], inout response : Message) : void
        unimplemented(response);
!!!76736055.java!!!	nvResetConfig(in resetType : int, inout response : Message) : void
        unimplemented(response);
!!!76736183.java!!!	getHardwareConfig(inout result : Message) : void
        unimplemented(result);
!!!76736311.java!!!	requestShutdown(inout result : Message) : void
        setRadioState(RadioState.RADIO_UNAVAILABLE);
!!!76736439.java!!!	startLceService(in report_interval_ms : int, inout pullMode : boolean, inout result : Message) : void
        SimulatedCommandsVerifier.getInstance().startLceService(report_interval_ms, pullMode,
                result);
        unimplemented(result);
!!!76736567.java!!!	stopLceService(inout result : Message) : void
        unimplemented(result);
!!!76736695.java!!!	pullLceData(inout result : Message) : void
        unimplemented(result);
!!!76736823.java!!!	getModemActivityInfo(inout result : Message) : void
        unimplemented(result);
!!!76736951.java!!!	getRadioCapability(inout result : Message) : void
        SimulatedCommandsVerifier.getInstance().getRadioCapability(result);
        resultSuccess(result, new RadioCapability(0, 0, 0, 0xFFFF, null, 0));
!!!76737079.java!!!	notifySmsStatus(inout result : Object) : void
        if (mSmsStatusRegistrant != null) {
            mSmsStatusRegistrant.notifyRegistrant(new AsyncResult(null, result, null));
        }
!!!76737207.java!!!	notifyGsmBroadcastSms(inout result : Object) : void
        if (mGsmBroadcastSmsRegistrant != null) {
            mGsmBroadcastSmsRegistrant.notifyRegistrant(new AsyncResult(null, result, null));
        }
!!!76737335.java!!!	notifyIccSmsFull() : void
        if (mIccSmsFullRegistrant != null) {
            mIccSmsFullRegistrant.notifyRegistrant();
        }
!!!76737463.java!!!	notifyEmergencyCallbackMode() : void
        if (mEmergencyCallbackModeRegistrant != null) {
            mEmergencyCallbackModeRegistrant.notifyRegistrant();
        }
!!!76737591.java!!!	setEmergencyCallbackMode(inout h : Handler, in what : int, inout obj : Object) : void
        SimulatedCommandsVerifier.getInstance().setEmergencyCallbackMode(h, what, obj);
        super.setEmergencyCallbackMode(h, what, obj);
!!!76737719.java!!!	notifyExitEmergencyCallbackMode() : void
        if (mExitEmergencyCallbackModeRegistrants != null) {
            mExitEmergencyCallbackModeRegistrants.notifyRegistrants(
                    new AsyncResult (null, null, null));
        }
!!!76737847.java!!!	notifyImsNetworkStateChanged() : void
        if(mImsNetworkStateChangedRegistrants != null) {
            mImsNetworkStateChangedRegistrants.notifyRegistrants();
        }
!!!76737975.java!!!	registerForExitEmergencyCallbackMode(inout h : Handler, in what : int, inout obj : Object) : void
        SimulatedCommandsVerifier.getInstance().registerForExitEmergencyCallbackMode(h, what, obj);
        super.registerForExitEmergencyCallbackMode(h, what, obj);
!!!76738103.java!!!	notifyRadioOn() : void
        mOnRegistrants.notifyRegistrants();
!!!76738231.java!!!	notifyVoiceNetworkStateChanged() : void
        mVoiceNetworkStateRegistrants.notifyRegistrants();
!!!76738359.java!!!	notifyOtaProvisionStatusChanged() : void
        if (mOtaProvisionRegistrants != null) {
            int ret[] = new int[1];
            ret[0] = Phone.CDMA_OTA_PROVISION_STATUS_COMMITTED;
            mOtaProvisionRegistrants.notifyRegistrants(new AsyncResult(null, ret, null));
        }
!!!76738487.java!!!	notifySignalStrength() : void
        if (mSignalStrength == null) {
            mSignalStrength = new SignalStrength(
                    20, // gsmSignalStrength
                    0,  // gsmBitErrorRate
                    -1, // cdmaDbm
                    -1, // cdmaEcio
                    -1, // evdoDbm
                    -1, // evdoEcio
                    -1, // evdoSnr
                    99, // lteSignalStrength
                    SignalStrength.INVALID,     // lteRsrp
                    SignalStrength.INVALID,     // lteRsrq
                    SignalStrength.INVALID,     // lteRssnr
                    SignalStrength.INVALID,     // lteCqi
                    SignalStrength.INVALID,     // tdScdmaRscp
                    true                        // gsmFlag
            );
        }

        if (mSignalStrengthRegistrant != null) {
            mSignalStrengthRegistrant.notifyRegistrant(
                    new AsyncResult (null, mSignalStrength, null));
        }
!!!76738615.java!!!	setIccCardStatus(inout iccCardStatus : IccCardStatus) : void
        mIccCardStatus = iccCardStatus;
!!!76738743.java!!!	setIccIoResultForApduLogicalChannel(inout iccIoResult : IccIoResult) : void
        mIccIoResultForApduLogicalChannel = iccIoResult;
!!!76738871.java!!!	setOpenChannelId(in channelId : int) : void
        mChannelId = channelId;
!!!76738999.java!!!	setPin1RemainingAttempt(in pin1attemptsRemaining : int) : void
        mPin1attemptsRemaining = pin1attemptsRemaining;
!!!76739127.java!!!	setDataAllowed(inout allowed : boolean, inout result : Message) : void
        log("setDataAllowed = " + allowed);
        mAllowed.set(allowed);
        resultSuccess(result, null);
!!!76739255.java!!!	isDataAllowed() : boolean
        return mAllowed.get();
