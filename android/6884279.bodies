class SipPhoneBase
!!!76798775.java!!!	SipPhoneBase(inout name : String, inout context : Context, inout notifier : PhoneNotifier)
        super(name, notifier, context, new SipCommandInterface(context), false);
!!!76799287.java!!!	dial(inout dialString : String, inout uusInfo : UUSInfo, in videoState : int, inout intentExtras : Bundle) : Connection
        // ignore UUSInfo
        return dial(dialString, videoState);
!!!76799415.java!!!	migrateFrom(inout from : SipPhoneBase) : void
        super.migrateFrom(from);
        migrate(mRingbackRegistrants, from.mRingbackRegistrants);
!!!76799543.java!!!	registerForRingbackTone(inout h : Handler, in what : int, inout obj : Object) : void
        mRingbackRegistrants.addUnique(h, what, obj);
!!!76799671.java!!!	unregisterForRingbackTone(inout h : Handler) : void
        mRingbackRegistrants.remove(h);
!!!76799799.java!!!	startRingbackTone() : void
        AsyncResult result = new AsyncResult(null, Boolean.TRUE, null);
        mRingbackRegistrants.notifyRegistrants(result);
!!!76799927.java!!!	stopRingbackTone() : void
        AsyncResult result = new AsyncResult(null, Boolean.FALSE, null);
        mRingbackRegistrants.notifyRegistrants(result);
!!!76800055.java!!!	getServiceState() : ServiceState
        // FIXME: we may need to provide this when data connectivity is lost
        // or when server is down
        ServiceState s = new ServiceState();
        s.setVoiceRegState(ServiceState.STATE_IN_SERVICE);
        return s;
!!!76800183.java!!!	getCellLocation() : CellLocation
        return null;
!!!76800311.java!!!	getState() : PhoneConstants::State
        return mState;
!!!76800439.java!!!	getPhoneType() : int
        return PhoneConstants.PHONE_TYPE_SIP;
!!!76800567.java!!!	getSignalStrength() : SignalStrength
        return new SignalStrength();
!!!76800695.java!!!	getMessageWaitingIndicator() : boolean
        return false;
!!!76800823.java!!!	getCallForwardingIndicator() : boolean
        return false;
!!!76800951.java!!!	getPendingMmiCodes() : List<? extends MmiCode>
        return new ArrayList<MmiCode>(0);
!!!76801079.java!!!	getDataConnectionState() : PhoneConstants::DataState
        return PhoneConstants.DataState.DISCONNECTED;
!!!76801207.java!!!	getDataConnectionState(inout apnType : String) : PhoneConstants::DataState
        return PhoneConstants.DataState.DISCONNECTED;
!!!76801335.java!!!	getDataActivityState() : DataActivityState
        return DataActivityState.NONE;
!!!76801463.java!!!	notifyPhoneStateChanged() : void
        // Do nothing.
!!!76801591.java!!!	notifyPreciseCallStateChanged() : void
        /* we'd love it if this was package-scoped*/
        super.notifyPreciseCallStateChangedP();
!!!76801719.java!!!	notifyNewRingingConnection(inout c : Connection) : void
        super.notifyNewRingingConnectionP(c);
!!!76801847.java!!!	notifyDisconnect(inout cn : Connection) : void
        mDisconnectRegistrants.notifyResult(cn);
!!!76801975.java!!!	notifyUnknownConnection() : void
        mUnknownConnectionRegistrants.notifyResult(this);
!!!76802103.java!!!	notifySuppServiceFailed(inout code : SuppService) : void
        mSuppServiceFailedRegistrants.notifyResult(code);
!!!76802231.java!!!	notifyServiceStateChanged(inout ss : ServiceState) : void
        super.notifyServiceStateChangedP(ss);
!!!76802359.java!!!	notifyCallForwardingIndicator() : void
        mNotifier.notifyCallForwardingChanged(this);
!!!76802487.java!!!	canDial() : boolean
        int serviceState = getServiceState().getState();
        Rlog.v(LOG_TAG, "canDial(): serviceState = " + serviceState);
        if (serviceState == ServiceState.STATE_POWER_OFF) return false;

        String disableCall = SystemProperties.get(
                TelephonyProperties.PROPERTY_DISABLE_CALL, "false");
        Rlog.v(LOG_TAG, "canDial(): disableCall = " + disableCall);
        if (disableCall.equals("true")) return false;

        Rlog.v(LOG_TAG, "canDial(): ringingCall: " + getRingingCall().getState());
        Rlog.v(LOG_TAG, "canDial(): foregndCall: " + getForegroundCall().getState());
        Rlog.v(LOG_TAG, "canDial(): backgndCall: " + getBackgroundCall().getState());
        return !getRingingCall().isRinging()
                && (!getForegroundCall().getState().isAlive()
                    || !getBackgroundCall().getState().isAlive());
!!!76802615.java!!!	handleInCallMmiCommands(inout dialString : String) : boolean
        return false;
!!!76802743.java!!!	isInCall() : boolean
        Call.State foregroundCallState = getForegroundCall().getState();
        Call.State backgroundCallState = getBackgroundCall().getState();
        Call.State ringingCallState = getRingingCall().getState();

       return (foregroundCallState.isAlive() || backgroundCallState.isAlive()
            || ringingCallState.isAlive());
!!!76802871.java!!!	handlePinMmi(inout dialString : String) : boolean
        return false;
!!!76803511.java!!!	getVoiceMailNumber() : String
        return null;
!!!76803639.java!!!	getVoiceMailAlphaTag() : String
        return null;
!!!76803767.java!!!	getDeviceId() : String
        return null;
!!!76803895.java!!!	getDeviceSvn() : String
        return null;
!!!76804023.java!!!	getImei() : String
        return null;
!!!76804151.java!!!	getEsn() : String
        Rlog.e(LOG_TAG, "[SipPhone] getEsn() is a CDMA method");
        return "0";
!!!76804279.java!!!	getMeid() : String
        Rlog.e(LOG_TAG, "[SipPhone] getMeid() is a CDMA method");
        return "0";
!!!76804407.java!!!	getSubscriberId() : String
        return null;
!!!76804535.java!!!	getGroupIdLevel1() : String
        return null;
!!!76804663.java!!!	getGroupIdLevel2() : String
        return null;
!!!76804791.java!!!	getIccSerialNumber() : String
        return null;
!!!76804919.java!!!	getLine1Number() : String
        return null;
!!!76805047.java!!!	getLine1AlphaTag() : String
        return null;
!!!76805175.java!!!	setLine1Number(inout alphaTag : String, inout number : String, inout onComplete : Message) : boolean
        // FIXME: what to reply for SIP?
        return false;
!!!76805303.java!!!	setVoiceMailNumber(inout alphaTag : String, inout voiceMailNumber : String, inout onComplete : Message) : void
        // FIXME: what to reply for SIP?
        AsyncResult.forMessage(onComplete, null, null);
        onComplete.sendToTarget();
!!!76805687.java!!!	getOutgoingCallerIdDisplay(inout onComplete : Message) : void
        // FIXME: what to reply?
        AsyncResult.forMessage(onComplete, null, null);
        onComplete.sendToTarget();
!!!76805815.java!!!	setOutgoingCallerIdDisplay(in commandInterfaceCLIRMode : int, inout onComplete : Message) : void
        // FIXME: what's this for SIP?
        AsyncResult.forMessage(onComplete, null, null);
        onComplete.sendToTarget();
!!!76805943.java!!!	getCallWaiting(inout onComplete : Message) : void
        AsyncResult.forMessage(onComplete, null, null);
        onComplete.sendToTarget();
!!!76806071.java!!!	setCallWaiting(inout enable : boolean, inout onComplete : Message) : void
        Rlog.e(LOG_TAG, "call waiting not supported");
!!!76806199.java!!!	getIccRecordsLoaded() : boolean
        return false;
!!!76806327.java!!!	getIccCard() : IccCard
        return null;
!!!76807223.java!!!	getCurrentDataConnectionList() : DataConnection
        return null;
!!!76807735.java!!!	getDataRoamingEnabled() : boolean
        return false;
!!!76807991.java!!!	getDataEnabled() : boolean
        return false;
!!!76808247.java!!!	enableDataConnectivity() : boolean
        return false;
!!!76808375.java!!!	disableDataConnectivity() : boolean
        return false;
!!!76808503.java!!!	isDataConnectivityPossible() : boolean
        return false;
!!!76808759.java!!!	getIccPhoneBookInterfaceManager() : IccPhoneBookInterfaceManager
        return null;
!!!76808887.java!!!	getIccFileHandler() : IccFileHandler
        return null;
!!!76809015.java!!!	activateCellBroadcastSms(in activate : int, inout response : Message) : void
        Rlog.e(LOG_TAG, "Error! This functionality is not implemented for SIP.");
!!!76809143.java!!!	getCellBroadcastSmsConfig(inout response : Message) : void
        Rlog.e(LOG_TAG, "Error! This functionality is not implemented for SIP.");
!!!76809271.java!!!	setCellBroadcastSmsConfig(inout configValuesArray : int [[]], inout response : Message) : void
        Rlog.e(LOG_TAG, "Error! This functionality is not implemented for SIP.");
!!!76809399.java!!!	needsOtaServiceProvisioning() : boolean
        // FIXME: what's this for SIP?
        return false;
!!!76809527.java!!!	getLinkProperties(inout apnType : String) : LinkProperties
        // FIXME: what's this for SIP?
        return null;
!!!76809655.java!!!	isVideoEnabled() : boolean
        return false;
!!!76809783.java!!!	updatePhoneState() : void
        PhoneConstants.State oldState = mState;

        if (getRingingCall().isRinging()) {
            mState = PhoneConstants.State.RINGING;
        } else if (getForegroundCall().isIdle()
                && getBackgroundCall().isIdle()) {
            mState = PhoneConstants.State.IDLE;
        } else {
            mState = PhoneConstants.State.OFFHOOK;
        }

        if (mState != oldState) {
            Rlog.d(LOG_TAG, " ^^^ new phone state: " + mState);
            notifyPhoneStateChanged();
        }
