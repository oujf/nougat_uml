class ImsExternalCallTracker
!!!76823479.java!!!	ImsExternalCallTracker(inout phone : ImsPhone, inout callPuller : ImsPullCall)
        mPhone = phone;
        mExternalCallStateListener = new ExternalCallStateListener();
        mCallPuller = callPuller;
!!!76823607.java!!!	getExternalCallStateListener() : ImsExternalCallTracker::ExternalCallStateListener
        return mExternalCallStateListener;
!!!76823735.java!!!	refreshExternalCallState(inout externalCallStates : List<ImsExternalCallState>) : void
        Log.d(TAG, "refreshExternalCallState: depSize = " + externalCallStates.size());

        // Check to see if any call Ids are no longer present in the external call state.  If they
        // are, the calls are terminated and should be removed.
        Iterator<Map.Entry<Integer, ImsExternalConnection>> connectionIterator =
                mExternalConnections.entrySet().iterator();
        boolean wasCallRemoved = false;
        while (connectionIterator.hasNext()) {
            Map.Entry<Integer, ImsExternalConnection> entry = connectionIterator.next();
            int callId = entry.getKey().intValue();

            if (!containsCallId(externalCallStates, callId)) {
                ImsExternalConnection externalConnection = entry.getValue();
                externalConnection.setTerminated();
                externalConnection.removeListener(mExternalConnectionListener);
                connectionIterator.remove();
                wasCallRemoved = true;
            }
        }
        // If one or more calls were removed, trigger a notification that will cause the
        // TelephonyConnection instancse to refresh their state with Telecom.
        if (wasCallRemoved) {
            mPhone.notifyPreciseCallStateChanged();
        }

        // Check for new calls, and updates to existing ones.
        for (ImsExternalCallState callState : externalCallStates) {
            if (!mExternalConnections.containsKey(callState.getCallId())) {
                Log.d(TAG, "refreshExternalCallState: got = " + callState);
                // If there is a new entry and it is already terminated, don't bother adding it to
                // telecom.
                if (callState.getCallState() != ImsExternalCallState.CALL_STATE_CONFIRMED) {
                    continue;
                }
                createExternalConnection(callState);
            } else{
                updateExistingConnection(mExternalConnections.get(callState.getCallId()),
                        callState);
            }
        }
!!!76823863.java!!!	getConnectionById(in callId : int) : Connection
        return mExternalConnections.get(callId);
!!!76823991.java!!!	createExternalConnection(inout state : ImsExternalCallState) : void
        Log.i(TAG, "createExternalConnection");

        ImsExternalConnection connection = new ImsExternalConnection(mPhone,
                state.getCallId(), /* Dialog event package call id */
                state.getAddress().getSchemeSpecificPart() /* phone number */,
                state.isCallPullable());
        connection.setVideoState(ImsCallProfile.getVideoStateFromCallType(state.getCallType()));
        connection.addListener(mExternalConnectionListener);

        // Add to list of tracked connections.
        mExternalConnections.put(connection.getCallId(), connection);

        // Note: The notification of unknown connection is ultimately handled by
        // PstnIncomingCallNotifier#addNewUnknownCall.  That method will ensure that an extra is set
        // containing the ImsExternalConnection#mCallId so that we have a means of reconciling which
        // unknown call was added.
        mPhone.notifyUnknownConnection(connection);
!!!76824119.java!!!	updateExistingConnection(inout connection : ImsExternalConnection, inout state : ImsExternalCallState) : void
        Call.State existingState = connection.getState();
        Call.State newState = state.getCallState() == ImsExternalCallState.CALL_STATE_CONFIRMED ?
                Call.State.ACTIVE : Call.State.DISCONNECTED;

        if (existingState != newState) {
            if (newState == Call.State.ACTIVE) {
                connection.setActive();
            } else {
                connection.setTerminated();
                connection.removeListener(mExternalConnectionListener);
                mExternalConnections.remove(connection);
                mPhone.notifyPreciseCallStateChanged();
            }
        }

        connection.setIsPullable(state.isCallPullable());

        int newVideoState = ImsCallProfile.getVideoStateFromCallType(state.getCallType());
        if (newVideoState != connection.getVideoState()) {
            connection.setVideoState(newVideoState);
        }
!!!76824247.java!!!	containsCallId(inout externalCallStates : List<ImsExternalCallState>, in callId : int) : boolean
        for (ImsExternalCallState state : externalCallStates) {
            if (state.getCallId() == callId) {
                return true;
            }
        }

        return false;
