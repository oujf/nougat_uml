class ImsPhoneCall
!!!76849975.java!!!	ImsPhoneCall()
        mCallContext = CONTEXT_UNKNOWN;
!!!76850103.java!!!	ImsPhoneCall(inout owner : ImsPhoneCallTracker, inout context : String)
        mOwner = owner;
        mCallContext = context;
!!!76850231.java!!!	dispose() : void
        try {
            mOwner.hangup(this);
        } catch (CallStateException ex) {
            //Rlog.e(LOG_TAG, "dispose: unexpected error on hangup", ex);
            //while disposing, ignore the exception and clean the connections
        } finally {
            for(int i = 0, s = mConnections.size(); i < s; i++) {
                ImsPhoneConnection c = (ImsPhoneConnection) mConnections.get(i);
                c.onDisconnect(DisconnectCause.LOST_SIGNAL);
            }
        }
!!!76850359.java!!!	getConnections() : List<Connection>
        return mConnections;
!!!76850487.java!!!	getPhone() : Phone
        return mOwner.mPhone;
!!!76850615.java!!!	isMultiparty() : boolean
        ImsCall imsCall = getImsCall();
        if (imsCall == null) {
            return false;
        }

        return imsCall.isMultiparty();
!!!76850743.java!!!	hangup() : void
        mOwner.hangup(this);
!!!76850871.java!!!	toString() : String
        StringBuilder sb = new StringBuilder();
        sb.append("[ImsPhoneCall ");
        sb.append(mCallContext);
        sb.append(" state: ");
        sb.append(mState.toString());
        sb.append(" ");
        if (mConnections.size() > 1) {
            sb.append(" ERROR_MULTIPLE ");
        }
        for (Connection conn : mConnections) {
            sb.append(conn);
            sb.append(" ");
        }

        sb.append("]");
        return sb.toString();
!!!76850999.java!!!	getConferenceParticipants() : ConferenceParticipant
         ImsCall call = getImsCall();
         if (call == null) {
             return null;
         }
         return call.getConferenceParticipants();
!!!76851127.java!!!	attach(inout conn : Connection) : void
        if (VDBG) {
            Rlog.v(LOG_TAG, "attach : " + mCallContext + " conn = " + conn);
        }
        clearDisconnected();
        mConnections.add(conn);

        mOwner.logState();
!!!76851255.java!!!	attach(inout conn : Connection, inout state : State) : void
        if (VDBG) {
            Rlog.v(LOG_TAG, "attach : " + mCallContext + " state = " +
                    state.toString());
        }
        this.attach(conn);
        mState = state;
!!!76851383.java!!!	attachFake(inout conn : Connection, inout state : State) : void
        attach(conn, state);
!!!76851511.java!!!	connectionDisconnected(inout conn : ImsPhoneConnection) : boolean
        if (mState != State.DISCONNECTED) {
            /* If only disconnected connections remain, we are disconnected*/

            boolean hasOnlyDisconnectedConnections = true;

            for (int i = 0, s = mConnections.size()  ; i < s; i ++) {
                if (mConnections.get(i).getState() != State.DISCONNECTED) {
                    hasOnlyDisconnectedConnections = false;
                    break;
                }
            }

            if (hasOnlyDisconnectedConnections) {
                mState = State.DISCONNECTED;
                return true;
            }
        }

        return false;
!!!76851639.java!!!	detach(inout conn : ImsPhoneConnection) : void
        if (VDBG) {
            Rlog.v(LOG_TAG, "detach : " + mCallContext + " conn = " + conn);
        }
        mConnections.remove(conn);
        clearDisconnected();

        mOwner.logState();
!!!76851767.java!!!	isFull() : boolean
        return mConnections.size() == ImsPhoneCallTracker.MAX_CONNECTIONS_PER_CALL;
!!!76851895.java!!!	onHangupLocal() : void
        for (int i = 0, s = mConnections.size(); i < s; i++) {
            ImsPhoneConnection cn = (ImsPhoneConnection)mConnections.get(i);
            cn.onHangupLocal();
        }
        mState = State.DISCONNECTING;
!!!76852023.java!!!	getFirstConnection() : ImsPhoneConnection
        if (mConnections.size() == 0) return null;

        return (ImsPhoneConnection) mConnections.get(0);
!!!76852151.java!!!	setMute(inout mute : boolean) : void
        ImsCall imsCall = getFirstConnection() == null ?
                null : getFirstConnection().getImsCall();
        if (imsCall != null) {
            try {
                imsCall.setMute(mute);
            } catch (ImsException e) {
                Rlog.e(LOG_TAG, "setMute failed : " + e.getMessage());
            }
        }
!!!76852279.java!!!	merge(inout that : ImsPhoneCall, inout state : State) : void
        // This call is the conference host and the "that" call is the one being merged in.
        // Set the connect time for the conference; this will have been determined when the
        // conference was initially created.
        ImsPhoneConnection imsPhoneConnection = getFirstConnection();
        if (imsPhoneConnection != null) {
            long conferenceConnectTime = imsPhoneConnection.getConferenceConnectTime();
            if (conferenceConnectTime > 0) {
                imsPhoneConnection.setConnectTime(conferenceConnectTime);
            } else {
                if (DBG) {
                    Rlog.d(LOG_TAG, "merge: conference connect time is 0");
                }
            }
        }
        if (DBG) {
            Rlog.d(LOG_TAG, "merge(" + mCallContext + "): " + that + "state = "
                    + state);
        }
!!!76852407.java!!!	getImsCall() : ImsCall
        return (getFirstConnection() == null) ? null : getFirstConnection().getImsCall();
!!!76852535.java!!!	isLocalTone(inout imsCall : ImsCall) : boolean
        if ((imsCall == null) || (imsCall.getCallProfile() == null)
                || (imsCall.getCallProfile().mMediaProfile == null)) {
            return false;
        }

        ImsStreamMediaProfile mediaProfile = imsCall.getCallProfile().mMediaProfile;

        return (mediaProfile.mAudioDirection == ImsStreamMediaProfile.DIRECTION_INACTIVE)
                ? true : false;
!!!76852663.java!!!	update(inout conn : ImsPhoneConnection, inout imsCall : ImsCall, inout state : State) : boolean
        State newState = state;
        boolean changed = false;

        //ImsCall.Listener.onCallProgressing can be invoked several times
        //and ringback tone mode can be changed during the call setup procedure
        if (state == State.ALERTING) {
            if (mRingbackTonePlayed && !isLocalTone(imsCall)) {
                mOwner.mPhone.stopRingbackTone();
                mRingbackTonePlayed = false;
            } else if (!mRingbackTonePlayed && isLocalTone(imsCall)) {
                mOwner.mPhone.startRingbackTone();
                mRingbackTonePlayed = true;
            }
        } else {
            if (mRingbackTonePlayed) {
                mOwner.mPhone.stopRingbackTone();
                mRingbackTonePlayed = false;
            }
        }

        if ((newState != mState) && (state != State.DISCONNECTED)) {
            mState = newState;
            changed = true;
        } else if (state == State.DISCONNECTED) {
            changed = true;
        }

        return changed;
!!!76852791.java!!!	getHandoverConnection() : ImsPhoneConnection
        return (ImsPhoneConnection) getEarliestConnection();
!!!76852919.java!!!	switchWith(inout that : ImsPhoneCall) : void
        if (VDBG) {
            Rlog.v(LOG_TAG, "switchWith : switchCall = " + this + " withCall = " + that);
        }
        synchronized (ImsPhoneCall.class) {
            ImsPhoneCall tmp = new ImsPhoneCall();
            tmp.takeOver(this);
            this.takeOver(that);
            that.takeOver(tmp);
        }
        mOwner.logState();
!!!76853047.java!!!	takeOver(inout that : ImsPhoneCall) : void
        mConnections = that.mConnections;
        mState = that.mState;
        for (Connection c : mConnections) {
            ((ImsPhoneConnection) c).changeParent(this);
        }
