class ConnectivityServiceMock
!!!76925367.java!!!	ConnectivityServiceMock(inout context : Context)
        if (DBG) log("starting up");

        mContext = context;
        mHandlerThread = new HandlerThread("ConnectivityServiceMock");
        mHandlerThread.start();
        mHandler = new InternalHandler(mHandlerThread.getLooper());
        mTrackerHandler = new NetworkStateTrackerHandler(mHandlerThread.getLooper());
!!!76925495.java!!!	die() : void
        // clean up threads/handlers
!!!76926135.java!!!	isRequest(inout request : NetworkRequest) : boolean
        return mNetworkRequests.get(request).isRequest;
!!!76926263.java!!!	handleAsyncChannelHalfConnect(inout msg : Message) : void
        AsyncChannel ac = (AsyncChannel) msg.obj;
        if (mNetworkFactoryInfos.containsKey(msg.replyTo)) {
            if (msg.arg1 == AsyncChannel.STATUS_SUCCESSFUL) {
                if (VDBG) log("NetworkFactory connected");
                // A network factory has connected.  Send it all current NetworkRequests.
                for (NetworkRequestInfo nri : mNetworkRequests.values()) {
                    if (nri.isRequest == false) continue;
                    //NetworkAgentInfo nai = mNetworkForRequestId.get(nri.request.requestId);
                    NetworkAgentInfo nai = null;
                    ac.sendMessage(android.net.NetworkFactory.CMD_REQUEST_NETWORK,
                            (nai != null ? nai.getCurrentScore() : 0), 0, nri.request);
                }
            } else {
                loge("Error connecting NetworkFactory");
                mNetworkFactoryInfos.remove(msg.obj);
            }
        } else if (mNetworkAgentInfos.containsKey(msg.replyTo)) {
            if (msg.arg1 == AsyncChannel.STATUS_SUCCESSFUL) {
                if (VDBG) log("NetworkAgent connected");
                // A network agent has requested a connection.  Establish the connection.
                mNetworkAgentInfos.get(msg.replyTo).asyncChannel.
                        sendMessage(AsyncChannel.CMD_CHANNEL_FULL_CONNECTION);
            } else {
                loge("Error connecting NetworkAgent");
                NetworkAgentInfo nai = mNetworkAgentInfos.remove(msg.replyTo);
                //if (nai != null) {
                //    final boolean wasDefault = isDefaultNetwork(nai);
                //    synchronized (mNetworkForNetId) {
                //        mNetworkForNetId.remove(nai.network.netId);
                //        mNetIdInUse.delete(nai.network.netId);
                //    }
                //    // Just in case.
                //    mLegacyTypeTracker.remove(nai, wasDefault);
                //}
            }
        }
!!!76926391.java!!!	handleAsyncChannelDisconnected(inout msg : Message) : void
        NetworkAgentInfo nai = mNetworkAgentInfos.get(msg.replyTo);
        if (nai != null) {
            if (DBG) {
                log(nai.name() + " got DISCONNECTED, was satisfying " + nai.networkRequests.size());
            }
            // A network agent has disconnected.
            // TODO - if we move the logic to the network agent (have them disconnect
            // because they lost all their requests or because their score isn't good)
            // then they would disconnect organically, report their new state and then
            // disconnect the channel.
            //if (nai.networkInfo.isConnected()) {
            //    nai.networkInfo.setDetailedState(NetworkInfo.DetailedState.DISCONNECTED,
            //            null, null);
            //}
            //final boolean wasDefault = isDefaultNetwork(nai);
            //if (wasDefault) {
            //    mDefaultInetConditionPublished = 0;
            //}
            //notifyIfacesChanged();
            // TODO - we shouldn't send CALLBACK_LOST to requests that can be satisfied
            // by other networks that are already connected. Perhaps that can be done by
            // sending all CALLBACK_LOST messages (for requests, not listens) at the end
            // of rematchAllNetworksAndRequests
            //notifyNetworkCallbacks(nai, ConnectivityManager.CALLBACK_LOST);
            //mKeepaliveTracker.handleStopAllKeepalives(nai,
            //       ConnectivityManager.PacketKeepalive.ERROR_INVALID_NETWORK);
            nai.networkMonitor.sendMessage(NetworkMonitor.CMD_NETWORK_DISCONNECTED);
            mNetworkAgentInfos.remove(msg.replyTo);
            //updateClat(null, nai.linkProperties, nai);
            //synchronized (mNetworkForNetId) {
            //    // Remove the NetworkAgent, but don't mark the netId as
            //    // available until we've told netd to delete it below.
            //    mNetworkForNetId.remove(nai.network.netId);
            //}
            // Remove all previously satisfied requests.
            //for (int i = 0; i < nai.networkRequests.size(); i++) {
            //    NetworkRequest request = nai.networkRequests.valueAt(i);
            //    NetworkAgentInfo currentNetwork = mNetworkForRequestId.get(request.requestId);
            //    if (currentNetwork != null && currentNetwork.network.netId == nai.network.netId) {
            //        mNetworkForRequestId.remove(request.requestId);
            //        sendUpdatedScoreToFactories(request, 0);
            //    }
            //}
            //if (nai.networkRequests.get(mDefaultRequest.requestId) != null) {
            //    removeDataActivityTracking(nai);
            //    notifyLockdownVpn(nai);
            //    requestNetworkTransitionWakelock(nai.name());
            //}
            //mLegacyTypeTracker.remove(nai, wasDefault);
            //rematchAllNetworksAndRequests(null, 0);
            //if (nai.created) {
            //    // Tell netd to clean up the configuration for this network
            //    // (routing rules, DNS, etc).
            //    // This may be slow as it requires a lot of netd shelling out to ip and
            //    // ip[6]tables to flush routes and remove the incoming packet mark rule, so do it
            //    // after we've rematched networks with requests which should make a potential
            //    // fallback network the default or requested a new network from the
            //    // NetworkFactories, so network traffic isn't interrupted for an unnecessarily
            //    // long time.
            //    try {
            //        mNetd.removeNetwork(nai.network.netId);
            //    } catch (Exception e) {
            //        loge("Exception removing network: " + e);
            //    }
            //}
            //synchronized (mNetworkForNetId) {
            //    mNetIdInUse.delete(nai.network.netId);
            //}
        } else {
            NetworkFactoryInfo nfi = mNetworkFactoryInfos.remove(msg.replyTo);
            if (DBG && nfi != null) log("unregisterNetworkFactory for " + nfi.name);
        }
!!!76926519.java!!!	log(inout str : String) : void
        Slog.d(TAG, str);
!!!76926647.java!!!	loge(inout str : String) : void
        Slog.e(TAG, str);
!!!76927543.java!!!	nextNetworkRequestId() : int
        return mNextNetworkRequestId++;
!!!76927671.java!!!	getActiveNetworkInfo() : NetworkInfo
        throw new RuntimeException("not implemented");
!!!76927799.java!!!	getActiveNetwork() : Network
        throw new RuntimeException("not implemented");
!!!76927927.java!!!	getActiveNetworkForUid(in uid : int, inout ignoreBlocked : boolean) : Network
        throw new RuntimeException("not implemented");
!!!76928055.java!!!	getActiveNetworkInfoUnfiltered() : NetworkInfo
        throw new RuntimeException("not implemented");
!!!76928183.java!!!	getActiveNetworkInfoForUid(in uid : int, inout ignoreBlocked : boolean) : NetworkInfo
        throw new RuntimeException("not implemented");
!!!76928311.java!!!	getNetworkInfo(in networkType : int) : NetworkInfo
        throw new RuntimeException("not implemented");
!!!76928439.java!!!	getNetworkInfoForUid(inout network : Network, in uid : int, inout ignoreBlocked : boolean) : NetworkInfo
        throw new RuntimeException("not implemented");
!!!76928567.java!!!	getAllNetworkInfo() : NetworkInfo
        throw new RuntimeException("not implemented");
!!!76928695.java!!!	getNetworkForType(in networkType : int) : Network
        throw new RuntimeException("not implemented");
!!!76928823.java!!!	getAllNetworks() : Network
        throw new RuntimeException("not implemented");
!!!76928951.java!!!	getDefaultNetworkCapabilitiesForUser(in userId : int) : NetworkCapabilities
        throw new RuntimeException("not implemented");
!!!76929079.java!!!	isNetworkSupported(in networkType : int) : boolean
        throw new RuntimeException("not implemented");
!!!76929207.java!!!	getActiveLinkProperties() : LinkProperties
        throw new RuntimeException("not implemented");
!!!76929335.java!!!	getLinkPropertiesForType(in networkType : int) : LinkProperties
        throw new RuntimeException("not implemented");
!!!76929463.java!!!	getLinkProperties(inout network : Network) : LinkProperties
        throw new RuntimeException("not implemented");
!!!76929591.java!!!	getNetworkCapabilities(inout network : Network) : NetworkCapabilities
        throw new RuntimeException("not implemented");
!!!76929719.java!!!	getAllNetworkState() : NetworkState
        throw new RuntimeException("not implemented");
!!!76929847.java!!!	getActiveNetworkQuotaInfo() : NetworkQuotaInfo
        throw new RuntimeException("not implemented");
!!!76929975.java!!!	isActiveNetworkMetered() : boolean
        throw new RuntimeException("not implemented");
!!!76930103.java!!!	requestRouteToHostAddress(in networkType : int, inout hostAddress : byte [[]]) : boolean
        throw new RuntimeException("not implemented");
!!!76930231.java!!!	getRestoreDefaultNetworkDelay(in networkType : int) : int
        throw new RuntimeException("not implemented");
!!!76930359.java!!!	dump(inout fd : FileDescriptor, inout writer : PrintWriter, inout args : String [[]]) : void
        throw new RuntimeException("not implemented");
!!!76930487.java!!!	setAcceptUnvalidated(inout network : Network, inout accept : boolean, inout always : boolean) : void
        throw new RuntimeException("not implemented");
!!!76930615.java!!!	tether(inout iface : String) : int
        throw new RuntimeException("not implemented");
!!!76930743.java!!!	untether(inout iface : String) : int
        throw new RuntimeException("not implemented");
!!!76930871.java!!!	getLastTetherError(inout iface : String) : int
        throw new RuntimeException("not implemented");
!!!76930999.java!!!	getTetherableUsbRegexs() : String
        throw new RuntimeException("not implemented");
!!!76931127.java!!!	getTetherableWifiRegexs() : String
        throw new RuntimeException("not implemented");
!!!76931255.java!!!	getTetherableBluetoothRegexs() : String
        throw new RuntimeException("not implemented");
!!!76931383.java!!!	setUsbTethering(inout enable : boolean) : int
        throw new RuntimeException("not implemented");
!!!76931511.java!!!	getTetherableIfaces() : String
        throw new RuntimeException("not implemented");
!!!76931639.java!!!	getTetheredIfaces() : String
        throw new RuntimeException("not implemented");
!!!76931767.java!!!	getTetheringErroredIfaces() : String
        throw new RuntimeException("not implemented");
!!!76931895.java!!!	getTetheredDhcpRanges() : String
        throw new RuntimeException("not implemented");
!!!76932023.java!!!	isTetheringSupported() : boolean
        throw new RuntimeException("not implemented");
!!!76932151.java!!!	startTethering(in type : int, inout receiver : ResultReceiver, inout showProvisioningUi : boolean) : void
        throw new RuntimeException("not implemented");
!!!76932279.java!!!	stopTethering(in type : int) : void
        throw new RuntimeException("not implemented");
!!!76932407.java!!!	reportInetCondition(in networkType : int, in percentage : int) : void
        throw new RuntimeException("not implemented");
!!!76932535.java!!!	reportNetworkConnectivity(inout network : Network, inout hasConnectivity : boolean) : void
        throw new RuntimeException("not implemented");
!!!76932663.java!!!	getProxyForNetwork(inout network : Network) : ProxyInfo
        throw new RuntimeException("not implemented");
!!!76932791.java!!!	setGlobalProxy(inout proxyProperties : ProxyInfo) : void
        throw new RuntimeException("not implemented");
!!!76932919.java!!!	getGlobalProxy() : ProxyInfo
        throw new RuntimeException("not implemented");
!!!76933047.java!!!	prepareVpn(inout oldPackage : String, inout newPackage : String, in userId : int) : boolean
        throw new RuntimeException("not implemented");
!!!76933175.java!!!	setVpnPackageAuthorization(inout packageName : String, in userId : int, inout authorized : boolean) : void
        throw new RuntimeException("not implemented");
!!!76933303.java!!!	establishVpn(inout config : VpnConfig) : ParcelFileDescriptor
        throw new RuntimeException("not implemented");
!!!76933431.java!!!	startLegacyVpn(inout profile : VpnProfile) : void
        throw new RuntimeException("not implemented");
!!!76933559.java!!!	getLegacyVpnInfo(in userId : int) : LegacyVpnInfo
        throw new RuntimeException("not implemented");
!!!76933687.java!!!	getAllVpnInfo() : VpnInfo
        throw new RuntimeException("not implemented");
!!!76933815.java!!!	getVpnConfig(in userId : int) : VpnConfig
        throw new RuntimeException("not implemented");
!!!76933943.java!!!	updateLockdownVpn() : boolean
        throw new RuntimeException("not implemented");
!!!76934071.java!!!	setAlwaysOnVpnPackage(in userId : int, inout packageName : String, inout lockdownEnabled : boolean) : boolean
        throw new RuntimeException("not implemented");
!!!76934199.java!!!	getAlwaysOnVpnPackage(in userId : int) : String
        throw new RuntimeException("not implemented");
!!!76934327.java!!!	checkMobileProvisioning(in suggestedTimeOutMs : int) : int
        throw new RuntimeException("not implemented");
!!!76934455.java!!!	getMobileProvisioningUrl() : String
        throw new RuntimeException("not implemented");
!!!76934583.java!!!	setProvisioningNotificationVisible(inout visible : boolean, in networkType : int, inout action : String) : void
        throw new RuntimeException("not implemented");
!!!76934711.java!!!	setAirplaneMode(inout enable : boolean) : void
        throw new RuntimeException("not implemented");
!!!76934839.java!!!	requestNetwork(inout networkCapabilities : NetworkCapabilities, inout messenger : Messenger, in timeoutMs : int, inout binder : IBinder, in legacyType : int) : NetworkRequest
        networkCapabilities = new NetworkCapabilities(networkCapabilities);

        if (timeoutMs < 0 || timeoutMs > ConnectivityManager.MAX_NETWORK_REQUEST_TIMEOUT_MS) {
            throw new IllegalArgumentException("Bad timeout specified");
        }

        NetworkRequest networkRequest = new NetworkRequest(networkCapabilities, legacyType,
                nextNetworkRequestId());
        NetworkRequestInfo nri = new NetworkRequestInfo(messenger, networkRequest, binder,
                NetworkRequestInfo.REQUEST);
        if (DBG) log("requestNetwork for " + nri);

        mHandler.sendMessage(mHandler.obtainMessage(EVENT_REGISTER_NETWORK_REQUEST, nri));

        return networkRequest;
!!!76934967.java!!!	requestBandwidthUpdate(inout network : Network) : boolean
        throw new RuntimeException("not implemented");
!!!76935095.java!!!	pendingRequestForNetwork(inout networkCapabilities : NetworkCapabilities, inout operation : PendingIntent) : NetworkRequest
        throw new RuntimeException("not implemented");
!!!76935223.java!!!	releasePendingNetworkRequest(inout operation : PendingIntent) : void
        throw new RuntimeException("not implemented");
!!!76935351.java!!!	listenForNetwork(inout networkCapabilities : NetworkCapabilities, inout messenger : Messenger, inout binder : IBinder) : NetworkRequest
        throw new RuntimeException("not implemented");
!!!76935479.java!!!	pendingListenForNetwork(inout networkCapabilities : NetworkCapabilities, inout operation : PendingIntent) : void
        throw new RuntimeException("not implemented");
!!!76935607.java!!!	releaseNetworkRequest(inout networkRequest : NetworkRequest) : void
        mHandler.sendMessage(mHandler.obtainMessage(EVENT_RELEASE_NETWORK_REQUEST, getCallingUid(),
                0, networkRequest));
!!!76935735.java!!!	registerNetworkFactory(inout messenger : Messenger, inout name : String) : void
        NetworkFactoryInfo nfi = new NetworkFactoryInfo(name, messenger, new AsyncChannel());
        mHandler.sendMessage(mHandler.obtainMessage(EVENT_REGISTER_NETWORK_FACTORY, nfi));
!!!76935863.java!!!	handleRegisterNetworkFactory(inout nfi : ConnectivityServiceMock::NetworkFactoryInfo) : void
        if (DBG) log("Got NetworkFactory Messenger for " + nfi.name);
        mNetworkFactoryInfos.put(nfi.messenger, nfi);
        nfi.asyncChannel.connect(mContext, mTrackerHandler, nfi.messenger);
!!!76935991.java!!!	unregisterNetworkFactory(inout messenger : Messenger) : void
        mHandler.sendMessage(mHandler.obtainMessage(EVENT_UNREGISTER_NETWORK_FACTORY, messenger));
!!!76936119.java!!!	handleUnregisterNetworkFactory(inout messenger : Messenger) : void
        NetworkFactoryInfo nfi = mNetworkFactoryInfos.remove(messenger);
        if (nfi == null) {
            loge("Failed to find Messenger in unregisterNetworkFactory");
            return;
        }
        if (DBG) log("unregisterNetworkFactory for " + nfi.name);
!!!76936247.java!!!	registerNetworkAgent(inout messenger : Messenger, inout networkInfo : NetworkInfo, inout linkProperties : LinkProperties, inout networkCapabilities : NetworkCapabilities, in currentScore : int, inout networkMisc : NetworkMisc) : int
//        final NetworkAgentInfo nai = new NetworkAgentInfo(messenger, new AsyncChannel(),
//                new Network(reserveNetId()), new NetworkInfo(networkInfo), new LinkProperties(
//                linkProperties), new NetworkCapabilities(networkCapabilities), currentScore,
//                mContext, mTrackerHandler, new NetworkMisc(networkMisc), mDefaultRequest, this);
//        synchronized (this) {
//            nai.networkMonitor.systemReady = mSystemReady;
//        }
//        mHandler.sendMessage(mHandler.obtainMessage(EVENT_REGISTER_NETWORK_AGENT, nai));
//        return nai.network.netId;
        throw new RuntimeException("not implemented");
!!!76936375.java!!!	handleRegisterNetworkAgent(inout na : NetworkAgentInfo) : void
        if (VDBG) log("Got NetworkAgent Messenger");
//        mNetworkAgentInfos.put(na.messenger, na);
//        synchronized (mNetworkForNetId) {
//            mNetworkForNetId.put(na.network.netId, na);
//        }
//        na.asyncChannel.connect(mContext, mTrackerHandler, na.messenger);
//        NetworkInfo networkInfo = na.networkInfo;
//        na.networkInfo = null;
//        updateNetworkInfo(na, networkInfo);
!!!76936503.java!!!	handleRegisterNetworkRequest(inout nri : ConnectivityServiceMock::NetworkRequestInfo) : void
        mNetworkRequests.put(nri.request, nri);
        if (!nri.isRequest) {
            for (NetworkAgentInfo network : mNetworkAgentInfos.values()) {
                if (nri.request.networkCapabilities.hasSignalStrength() &&
                        network.satisfiesImmutableCapabilitiesOf(nri.request)) {
                }
            }
        }
        rematchAllNetworksAndRequests(null, 0);
        if (nri.isRequest) {
            sendUpdatedScoreToFactories(nri.request, 0);
        }
!!!76936631.java!!!	handleReleaseNetworkRequest(inout request : NetworkRequest, in callingUid : int) : void
        NetworkRequestInfo nri = mNetworkRequests.get(request);
        if (nri != null) {
            if (DBG) log("releasing NetworkRequest " + request);
            nri.unlinkDeathRecipient();
            mNetworkRequests.remove(request);
            if (nri.isRequest) {
                // Find all networks that are satisfying this request and remove the request
                // from their request lists.
                // TODO - it's my understanding that for a request there is only a single
                // network satisfying it, so this loop is wasteful
                //boolean wasKept = false;
                //for (NetworkAgentInfo nai : mNetworkAgentInfos.values()) {
                //    if (nai.networkRequests.get(nri.request.requestId) != null) {
                //        nai.networkRequests.remove(nri.request.requestId);
                //        if (DBG) {
                //            log(" Removing from current network " + nai.name() +
                //                    ", leaving " + nai.networkRequests.size() +
                //                    " requests.");
                //        }
                //        if (unneeded(nai)) {
                //            if (DBG) log("no live requests for " + nai.name() + "; disconnecting");
                //            teardownUnneededNetwork(nai);
                //        } else {
                //            // suspect there should only be one pass through here
                //            // but if any were kept do the check below
                //            wasKept |= true;
                //        }
                //    }
                //}

                //NetworkAgentInfo nai = mNetworkForRequestId.get(nri.request.requestId);
                //if (nai != null) {
                //    mNetworkForRequestId.remove(nri.request.requestId);
                //}
                // Maintain the illusion.  When this request arrived, we might have pretended
                // that a network connected to serve it, even though the network was already
                // connected.  Now that this request has gone away, we might have to pretend
                // that the network disconnected.  LegacyTypeTracker will generate that
                // phantom disconnect for this type.
                //if (nri.request.legacyType != TYPE_NONE && nai != null) {
                //    boolean doRemove = true;
                //    if (wasKept) {
                //        // check if any of the remaining requests for this network are for the
                //        // same legacy type - if so, don't remove the nai
                //        for (int i = 0; i < nai.networkRequests.size(); i++) {
                //            NetworkRequest otherRequest = nai.networkRequests.valueAt(i);
                //            if (otherRequest.legacyType == nri.request.legacyType &&
                //                    isRequest(otherRequest)) {
                //                if (DBG) log(" still have other legacy request - leaving");
                //                doRemove = false;
                //            }
                //        }
                //    }
                //
                //    if (doRemove) {
                //        mLegacyTypeTracker.remove(nri.request.legacyType, nai, false);
                //    }
                //}

                for (NetworkFactoryInfo nfi : mNetworkFactoryInfos.values()) {
                    nfi.asyncChannel.sendMessage(android.net.NetworkFactory.CMD_CANCEL_REQUEST,
                            nri.request);
                }
            } else {
                // listens don't have a singular affectedNetwork.  Check all networks to see
                // if this listen request applies and remove it.
                //for (NetworkAgentInfo nai : mNetworkAgentInfos.values()) {
                //    nai.networkRequests.remove(nri.request.requestId);
                //    if (nri.request.networkCapabilities.hasSignalStrength() &&
                //            nai.satisfiesImmutableCapabilitiesOf(nri.request)) {
                //        updateSignalStrengthThresholds(nai, "RELEASE", nri.request);
                //    }
                //}
            }
            //callCallbackForRequest(nri, null, ConnectivityManager.CALLBACK_RELEASED);
        }
!!!76936759.java!!!	sendUpdatedScoreToFactories(inout nai : NetworkAgentInfo) : void
        for (int i = 0; i < nai.networkRequests.size(); i++) {
            NetworkRequest nr = nai.networkRequests.valueAt(i);
            // Don't send listening requests to factories. b/17393458
            if (!isRequest(nr)) continue;
                sendUpdatedScoreToFactories(nr, nai.getCurrentScore());
        }
!!!76936887.java!!!	sendUpdatedScoreToFactories(inout networkRequest : NetworkRequest, in score : int) : void
        if (VDBG) log("sending new Min Network Score(" + score + "): " + networkRequest.toString());
        for (NetworkFactoryInfo nfi : mNetworkFactoryInfos.values()) {
            nfi.asyncChannel.sendMessage(android.net.NetworkFactory.CMD_REQUEST_NETWORK, score, 0,
                    networkRequest);
        }
!!!76937143.java!!!	onSendFinished(inout pendingIntent : PendingIntent, inout intent : Intent, in resultCode : int, inout resultData : String, inout resultExtras : Bundle) : void
        throw new RuntimeException("not implemented");
!!!76937271.java!!!	addVpnAddress(inout address : String, in prefixLength : int) : boolean
        throw new RuntimeException("not implemented");
!!!76937399.java!!!	removeVpnAddress(inout address : String, in prefixLength : int) : boolean
        throw new RuntimeException("not implemented");
!!!76937527.java!!!	setUnderlyingNetworksForVpn(inout networks : Network [[]]) : boolean
        throw new RuntimeException("not implemented");
!!!76937655.java!!!	getCaptivePortalServerUrl() : String
        throw new RuntimeException("not implemented");
!!!76937783.java!!!	startNattKeepalive(inout network : Network, in intervalSeconds : int, inout messenger : Messenger, inout binder : IBinder, inout srcAddr : String, in srcPort : int, inout dstAddr : String) : void
        throw new RuntimeException("not implemented");
!!!76937911.java!!!	stopKeepalive(inout network : Network, in slot : int) : void
        throw new RuntimeException("not implemented");
!!!76938039.java!!!	factoryReset() : void
        throw new RuntimeException("not implemented");
!!!76938167.java!!!	createNetworkMonitor(inout context : Context, inout handler : Handler, inout nai : NetworkAgentInfo, inout defaultRequest : NetworkRequest) : NetworkMonitor
        throw new RuntimeException("not implemented");
!!!76938295.java!!!	addDefaultRequest() : void
        if (defaultRequest != null) return;
        NetworkCapabilities netCap = new NetworkCapabilities();
        netCap.addCapability(NET_CAPABILITY_INTERNET);
        netCap.addCapability(NET_CAPABILITY_NOT_RESTRICTED);
        defaultRequest = requestNetwork(netCap, null, 0, new Binder(),
                ConnectivityManager.TYPE_NONE);
!!!76938423.java!!!	setCurrentScoreForRequest(inout nr : NetworkRequest, in score : int) : void
        sendUpdatedScoreToFactories(nr, score);
!!!76938551.java!!!	removeDefaultRequest() : void
        if (defaultRequest == null) return;
        releaseNetworkRequest(defaultRequest);
        defaultRequest = null;
