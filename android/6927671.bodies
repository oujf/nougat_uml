class Display
!!!81412023.java!!!	Display(inout global : DisplayManagerGlobal, in displayId : int, inout displayInfo : DisplayInfo, inout daj : DisplayAdjustments)
        mGlobal = global;
        mDisplayId = displayId;
        mDisplayInfo = displayInfo;
        mDisplayAdjustments = new DisplayAdjustments(daj);
        mIsValid = true;

        // Cache properties that cannot change as long as the display is valid.
        mLayerStack = displayInfo.layerStack;
        mFlags = displayInfo.flags;
        mType = displayInfo.type;
        mAddress = displayInfo.address;
        mOwnerUid = displayInfo.ownerUid;
        mOwnerPackageName = displayInfo.ownerPackageName;
!!!81412151.java!!!	getDisplayId() : int
        return mDisplayId;
!!!81412279.java!!!	isValid() : boolean
        synchronized (this) {
            updateDisplayInfoLocked();
            return mIsValid;
        }
!!!81412407.java!!!	getDisplayInfo(inout outDisplayInfo : DisplayInfo) : boolean
        synchronized (this) {
            updateDisplayInfoLocked();
            outDisplayInfo.copyFrom(mDisplayInfo);
            return mIsValid;
        }
!!!81412535.java!!!	getLayerStack() : int
        return mLayerStack;
!!!81412663.java!!!	getFlags() : int
        return mFlags;
!!!81412791.java!!!	getType() : int
        return mType;
!!!81412919.java!!!	getAddress() : String
        return mAddress;
!!!81413047.java!!!	getOwnerUid() : int
        return mOwnerUid;
!!!81413175.java!!!	getOwnerPackageName() : String
        return mOwnerPackageName;
!!!81413303.java!!!	getDisplayAdjustments() : DisplayAdjustments
        return mDisplayAdjustments;
!!!81413431.java!!!	getName() : String
        synchronized (this) {
            updateDisplayInfoLocked();
            return mDisplayInfo.name;
        }
!!!81413559.java!!!	getSize(inout outSize : Point) : void
        synchronized (this) {
            updateDisplayInfoLocked();
            mDisplayInfo.getAppMetrics(mTempMetrics, mDisplayAdjustments);
            outSize.x = mTempMetrics.widthPixels;
            outSize.y = mTempMetrics.heightPixels;
        }
!!!81413687.java!!!	getRectSize(inout outSize : Rect) : void
        synchronized (this) {
            updateDisplayInfoLocked();
            mDisplayInfo.getAppMetrics(mTempMetrics, mDisplayAdjustments);
            outSize.set(0, 0, mTempMetrics.widthPixels, mTempMetrics.heightPixels);
        }
!!!81413815.java!!!	getCurrentSizeRange(inout outSmallestSize : Point, inout outLargestSize : Point) : void
        synchronized (this) {
            updateDisplayInfoLocked();
            outSmallestSize.x = mDisplayInfo.smallestNominalAppWidth;
            outSmallestSize.y = mDisplayInfo.smallestNominalAppHeight;
            outLargestSize.x = mDisplayInfo.largestNominalAppWidth;
            outLargestSize.y = mDisplayInfo.largestNominalAppHeight;
        }
!!!81413943.java!!!	getMaximumSizeDimension() : int
        synchronized (this) {
            updateDisplayInfoLocked();
            return Math.max(mDisplayInfo.logicalWidth, mDisplayInfo.logicalHeight);
        }
!!!81414071.java!!!	getWidth() : int
        synchronized (this) {
            updateCachedAppSizeIfNeededLocked();
            return mCachedAppWidthCompat;
        }
!!!81414199.java!!!	getHeight() : int
        synchronized (this) {
            updateCachedAppSizeIfNeededLocked();
            return mCachedAppHeightCompat;
        }
!!!81414327.java!!!	getOverscanInsets(inout outRect : Rect) : void
        synchronized (this) {
            updateDisplayInfoLocked();
            outRect.set(mDisplayInfo.overscanLeft, mDisplayInfo.overscanTop,
                    mDisplayInfo.overscanRight, mDisplayInfo.overscanBottom);
        }
!!!81414455.java!!!	getRotation() : int
        synchronized (this) {
            updateDisplayInfoLocked();
            return mDisplayInfo.rotation;
        }
!!!81414583.java!!!	getOrientation() : int
        return getRotation();
!!!81414711.java!!!	getPixelFormat() : int
        return PixelFormat.RGBA_8888;
!!!81414839.java!!!	getRefreshRate() : float
        synchronized (this) {
            updateDisplayInfoLocked();
            return mDisplayInfo.getMode().getRefreshRate();
        }
!!!81414967.java!!!	getSupportedRefreshRates() : float
        synchronized (this) {
            updateDisplayInfoLocked();
            return mDisplayInfo.getDefaultRefreshRates();
        }
!!!81415095.java!!!	getMode() : Display::Mode
        synchronized (this) {
            updateDisplayInfoLocked();
            return mDisplayInfo.getMode();
        }
!!!81415223.java!!!	getSupportedModes() : Display::Mode
        synchronized (this) {
            updateDisplayInfoLocked();
            final Display.Mode[] modes = mDisplayInfo.supportedModes;
            return Arrays.copyOf(modes, modes.length);
        }
!!!81415351.java!!!	requestColorTransform(inout colorTransform : Display::ColorTransform) : void
        mGlobal.requestColorTransform(mDisplayId, colorTransform.getId());
!!!81415479.java!!!	getColorTransform() : Display::ColorTransform
        synchronized (this) {
            updateDisplayInfoLocked();
            return mDisplayInfo.getColorTransform();
        }
!!!81415607.java!!!	getDefaultColorTransform() : Display::ColorTransform
        synchronized (this) {
            updateDisplayInfoLocked();
            return mDisplayInfo.getDefaultColorTransform();
        }
!!!81415735.java!!!	getHdrCapabilities() : Display::HdrCapabilities
        synchronized (this) {
            updateDisplayInfoLocked();
            return mDisplayInfo.hdrCapabilities;
        }
!!!81415863.java!!!	getSupportedColorTransforms() : Display::ColorTransform
        synchronized (this) {
            updateDisplayInfoLocked();
            ColorTransform[] transforms = mDisplayInfo.supportedColorTransforms;
            return Arrays.copyOf(transforms, transforms.length);
        }
!!!81415991.java!!!	getAppVsyncOffsetNanos() : long
        synchronized (this) {
            updateDisplayInfoLocked();
            return mDisplayInfo.appVsyncOffsetNanos;
        }
!!!81416119.java!!!	getPresentationDeadlineNanos() : long
        synchronized (this) {
            updateDisplayInfoLocked();
            return mDisplayInfo.presentationDeadlineNanos;
        }
!!!81416247.java!!!	getMetrics(inout outMetrics : DisplayMetrics) : void
        synchronized (this) {
            updateDisplayInfoLocked();
            mDisplayInfo.getAppMetrics(outMetrics, mDisplayAdjustments);
        }
!!!81416375.java!!!	getRealSize(inout outSize : Point) : void
        synchronized (this) {
            updateDisplayInfoLocked();
            outSize.x = mDisplayInfo.logicalWidth;
            outSize.y = mDisplayInfo.logicalHeight;
        }
!!!81416503.java!!!	getRealMetrics(inout outMetrics : DisplayMetrics) : void
        synchronized (this) {
            updateDisplayInfoLocked();
            mDisplayInfo.getLogicalMetrics(outMetrics,
                    CompatibilityInfo.DEFAULT_COMPATIBILITY_INFO, null);
        }
!!!81416631.java!!!	getState() : int
        synchronized (this) {
            updateDisplayInfoLocked();
            return mIsValid ? mDisplayInfo.state : STATE_UNKNOWN;
        }
!!!81416759.java!!!	hasAccess(in uid : int) : boolean
        return Display.hasAccess(uid, mFlags, mOwnerUid);
!!!81416887.java!!!	hasAccess(in uid : int, in flags : int, in ownerUid : int) : boolean
        return (flags & Display.FLAG_PRIVATE) == 0
                || uid == ownerUid
                || uid == Process.SYSTEM_UID
                || uid == 0;
!!!81417015.java!!!	isPublicPresentation() : boolean
        return (mFlags & (Display.FLAG_PRIVATE | Display.FLAG_PRESENTATION)) ==
                Display.FLAG_PRESENTATION;
!!!81417143.java!!!	updateDisplayInfoLocked() : void
        // Note: The display manager caches display info objects on our behalf.
        DisplayInfo newInfo = mGlobal.getDisplayInfo(mDisplayId);
        if (newInfo == null) {
            // Preserve the old mDisplayInfo after the display is removed.
            if (mIsValid) {
                mIsValid = false;
                if (DEBUG) {
                    Log.d(TAG, "Logical display " + mDisplayId + " was removed.");
                }
            }
        } else {
            // Use the new display info.  (It might be the same object if nothing changed.)
            mDisplayInfo = newInfo;
            if (!mIsValid) {
                mIsValid = true;
                if (DEBUG) {
                    Log.d(TAG, "Logical display " + mDisplayId + " was recreated.");
                }
            }
        }
!!!81417271.java!!!	updateCachedAppSizeIfNeededLocked() : void
        long now = SystemClock.uptimeMillis();
        if (now > mLastCachedAppSizeUpdate + CACHED_APP_SIZE_DURATION_MILLIS) {
            updateDisplayInfoLocked();
            mDisplayInfo.getAppMetrics(mTempMetrics, mDisplayAdjustments);
            mCachedAppWidthCompat = mTempMetrics.widthPixels;
            mCachedAppHeightCompat = mTempMetrics.heightPixels;
            mLastCachedAppSizeUpdate = now;
        }
!!!81417399.java!!!	toString() : String
        synchronized (this) {
            updateDisplayInfoLocked();
            mDisplayInfo.getAppMetrics(mTempMetrics, mDisplayAdjustments);
            return "Display id " + mDisplayId + ": " + mDisplayInfo
                    + ", " + mTempMetrics + ", isValid=" + mIsValid;
        }
!!!81417527.java!!!	typeToString(in type : int) : String
        switch (type) {
            case TYPE_UNKNOWN:
                return "UNKNOWN";
            case TYPE_BUILT_IN:
                return "BUILT_IN";
            case TYPE_HDMI:
                return "HDMI";
            case TYPE_WIFI:
                return "WIFI";
            case TYPE_OVERLAY:
                return "OVERLAY";
            case TYPE_VIRTUAL:
                return "VIRTUAL";
            default:
                return Integer.toString(type);
        }
!!!81417655.java!!!	stateToString(in state : int) : String
        switch (state) {
            case STATE_UNKNOWN:
                return "UNKNOWN";
            case STATE_OFF:
                return "OFF";
            case STATE_ON:
                return "ON";
            case STATE_DOZE:
                return "DOZE";
            case STATE_DOZE_SUSPEND:
                return "DOZE_SUSPEND";
            default:
                return Integer.toString(state);
        }
!!!81417783.java!!!	isSuspendedState(in state : int) : boolean
        return state == STATE_OFF || state == STATE_DOZE_SUSPEND;
