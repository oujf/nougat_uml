class BinderProxy
!!!77071543.java!!!	queryLocalInterface(in descriptor : String) : IInterface
        return null;
!!!77071671.java!!!	transact(in code : int, inout data : Parcel, inout reply : Parcel, in flags : int) : boolean
        Binder.checkParcel(this, code, data, "Unreasonably large binder buffer");
        if (Binder.isTracingEnabled()) { Binder.getTransactionTracker().addTrace(); }
        return transactNative(code, data, reply, flags);
!!!77072311.java!!!	dump(inout fd : FileDescriptor, inout args : String [[]]) : void
        Parcel data = Parcel.obtain();
        Parcel reply = Parcel.obtain();
        data.writeFileDescriptor(fd);
        data.writeStringArray(args);
        try {
            transact(DUMP_TRANSACTION, data, reply, 0);
            reply.readException();
        } finally {
            data.recycle();
            reply.recycle();
        }
!!!77072439.java!!!	dumpAsync(inout fd : FileDescriptor, inout args : String [[]]) : void
        Parcel data = Parcel.obtain();
        Parcel reply = Parcel.obtain();
        data.writeFileDescriptor(fd);
        data.writeStringArray(args);
        try {
            transact(DUMP_TRANSACTION, data, reply, FLAG_ONEWAY);
        } finally {
            data.recycle();
            reply.recycle();
        }
!!!77072567.java!!!	shellCommand(inout in : FileDescriptor, inout out : FileDescriptor, inout err : FileDescriptor, inout args : String [[]], inout resultReceiver : ResultReceiver) : void
        Parcel data = Parcel.obtain();
        Parcel reply = Parcel.obtain();
        data.writeFileDescriptor(in);
        data.writeFileDescriptor(out);
        data.writeFileDescriptor(err);
        data.writeStringArray(args);
        resultReceiver.writeToParcel(data, 0);
        try {
            transact(SHELL_COMMAND_TRANSACTION, data, reply, 0);
            reply.readException();
        } finally {
            data.recycle();
            reply.recycle();
        }
!!!77072695.java!!!	BinderProxy()
        mSelf = new WeakReference(this);
!!!77072823.java!!!	finalize() : void
        try {
            destroy();
        } finally {
            super.finalize();
        }
!!!77073079.java!!!	sendDeathNotice(inout recipient : IBinder::DeathRecipient) : void
        if (false) Log.v("JavaBinder", "sendDeathNotice to " + recipient);
        try {
            recipient.binderDied();
        }
        catch (RuntimeException exc) {
            Log.w("BinderNative", "Uncaught exception from death notification",
                    exc);
        }
