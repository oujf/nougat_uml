class Window
!!!77115191.java!!!	Window(inout context : Context)
        mContext = context;
        mFeatures = mLocalFeatures = getDefaultFeatures(context);
!!!77115319.java!!!	getContext() : Context
        return mContext;
!!!77115447.java!!!	getWindowStyle() : TypedArray
        synchronized (this) {
            if (mWindowStyle == null) {
                mWindowStyle = mContext.obtainStyledAttributes(
                        com.android.internal.R.styleable.Window);
            }
            return mWindowStyle;
        }
!!!77115575.java!!!	setContainer(inout container : Window) : void
        mContainer = container;
        if (container != null) {
            // Embedded screens never have a title.
            mFeatures |= 1<<FEATURE_NO_TITLE;
            mLocalFeatures |= 1<<FEATURE_NO_TITLE;
            container.mHasChildren = true;
        }
!!!77115703.java!!!	getContainer() : Window
        return mContainer;
!!!77115831.java!!!	hasChildren() : boolean
        return mHasChildren;
!!!77115959.java!!!	destroy() : void
        mDestroyed = true;
!!!77116087.java!!!	isDestroyed() : boolean
        return mDestroyed;
!!!77116215.java!!!	setWindowManager(inout wm : WindowManager, inout appToken : IBinder, in appName : String) : void
        setWindowManager(wm, appToken, appName, false);
!!!77116343.java!!!	setWindowManager(inout wm : WindowManager, inout appToken : IBinder, in appName : String, inout hardwareAccelerated : boolean) : void
        mAppToken = appToken;
        mAppName = appName;
        mHardwareAccelerated = hardwareAccelerated
                || SystemProperties.getBoolean(PROPERTY_HARDWARE_UI, false);
        if (wm == null) {
            wm = (WindowManager)mContext.getSystemService(Context.WINDOW_SERVICE);
        }
        mWindowManager = ((WindowManagerImpl)wm).createLocalWindowManager(this);
!!!77116471.java!!!	adjustLayoutParamsForSubWindow(inout wp : WindowManager::LayoutParams) : void
        CharSequence curTitle = wp.getTitle();
        if (wp.type >= WindowManager.LayoutParams.FIRST_SUB_WINDOW &&
                wp.type <= WindowManager.LayoutParams.LAST_SUB_WINDOW) {
            if (wp.token == null) {
                View decor = peekDecorView();
                if (decor != null) {
                    wp.token = decor.getWindowToken();
                }
            }
            if (curTitle == null || curTitle.length() == 0) {
                final StringBuilder title = new StringBuilder(32);
                if (wp.type == WindowManager.LayoutParams.TYPE_APPLICATION_MEDIA) {
                    title.append("Media");
                } else if (wp.type == WindowManager.LayoutParams.TYPE_APPLICATION_MEDIA_OVERLAY) {
                    title.append("MediaOvr");
                } else if (wp.type == WindowManager.LayoutParams.TYPE_APPLICATION_PANEL) {
                    title.append("Panel");
                } else if (wp.type == WindowManager.LayoutParams.TYPE_APPLICATION_SUB_PANEL) {
                    title.append("SubPanel");
                } else if (wp.type == WindowManager.LayoutParams.TYPE_APPLICATION_ABOVE_SUB_PANEL) {
                    title.append("AboveSubPanel");
                } else if (wp.type == WindowManager.LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG) {
                    title.append("AtchDlg");
                } else {
                    title.append(wp.type);
                }
                if (mAppName != null) {
                    title.append(":").append(mAppName);
                }
                wp.setTitle(title);
            }
        } else if (wp.type >= WindowManager.LayoutParams.FIRST_SYSTEM_WINDOW &&
                wp.type <= WindowManager.LayoutParams.LAST_SYSTEM_WINDOW) {
            // We don't set the app token to this system window because the life cycles should be
            // independent. If an app creates a system window and then the app goes to the stopped
            // state, the system window should not be affected (can still show and receive input
            // events).
            if (curTitle == null || curTitle.length() == 0) {
                final StringBuilder title = new StringBuilder(32);
                title.append("Sys").append(wp.type);
                if (mAppName != null) {
                    title.append(":").append(mAppName);
                }
                wp.setTitle(title);
            }
        } else {
            if (wp.token == null) {
                wp.token = mContainer == null ? mAppToken : mContainer.mAppToken;
            }
            if ((curTitle == null || curTitle.length() == 0)
                    && mAppName != null) {
                wp.setTitle(mAppName);
            }
        }
        if (wp.packageName == null) {
            wp.packageName = mContext.getPackageName();
        }
        if (mHardwareAccelerated ||
                (mWindowAttributes.flags & FLAG_HARDWARE_ACCELERATED) != 0) {
            wp.flags |= FLAG_HARDWARE_ACCELERATED;
        }
!!!77116599.java!!!	getWindowManager() : WindowManager
        return mWindowManager;
!!!77116727.java!!!	setCallback(inout callback : Window::Callback) : void
        mCallback = callback;
!!!77116855.java!!!	getCallback() : Window::Callback
        return mCallback;
!!!77116983.java!!!	addOnFrameMetricsAvailableListener(inout listener : Window::OnFrameMetricsAvailableListener, inout handler : Handler) : void
        final View decorView = getDecorView();
        if (decorView == null) {
            throw new IllegalStateException("can't observe a Window without an attached view");
        }

        if (listener == null) {
            throw new NullPointerException("listener cannot be null");
        }

        decorView.addFrameMetricsListener(this, listener, handler);
!!!77117111.java!!!	removeOnFrameMetricsAvailableListener(inout listener : Window::OnFrameMetricsAvailableListener) : void
        final View decorView = getDecorView();
        if (decorView != null) {
            getDecorView().removeFrameMetricsListener(listener);
        }
!!!77117239.java!!!	setOnWindowDismissedCallback(inout dcb : Window::OnWindowDismissedCallback) : void
        mOnWindowDismissedCallback = dcb;
!!!77117367.java!!!	dispatchOnWindowDismissed(inout finishTask : boolean) : void
        if (mOnWindowDismissedCallback != null) {
            mOnWindowDismissedCallback.onWindowDismissed(finishTask);
        }
!!!77117495.java!!!	setWindowControllerCallback(inout wccb : Window::WindowControllerCallback) : void
        mWindowControllerCallback = wccb;
!!!77117623.java!!!	getWindowControllerCallback() : Window::WindowControllerCallback
        return mWindowControllerCallback;
!!!77117751.java!!!	setRestrictedCaptionAreaListener(inout listener : Window::OnRestrictedCaptionAreaChangedListener) : void
        mOnRestrictedCaptionAreaChangedListener = listener;
        mRestrictedCaptionAreaRect = listener != null ? new Rect() : null;
!!!77118263.java!!!	setLayout(in width : int, in height : int) : void
        final WindowManager.LayoutParams attrs = getAttributes();
        attrs.width = width;
        attrs.height = height;
        dispatchWindowAttributesChanged(attrs);
!!!77118391.java!!!	setGravity(in gravity : int) : void
        final WindowManager.LayoutParams attrs = getAttributes();
        attrs.gravity = gravity;
        dispatchWindowAttributesChanged(attrs);
!!!77118519.java!!!	setType(in type : int) : void
        final WindowManager.LayoutParams attrs = getAttributes();
        attrs.type = type;
        dispatchWindowAttributesChanged(attrs);
!!!77118647.java!!!	setFormat(in format : int) : void
        final WindowManager.LayoutParams attrs = getAttributes();
        if (format != PixelFormat.UNKNOWN) {
            attrs.format = format;
            mHaveWindowFormat = true;
        } else {
            attrs.format = mDefaultWindowFormat;
            mHaveWindowFormat = false;
        }
        dispatchWindowAttributesChanged(attrs);
!!!77118775.java!!!	setWindowAnimations(in resId : int) : void
        final WindowManager.LayoutParams attrs = getAttributes();
        attrs.windowAnimations = resId;
        dispatchWindowAttributesChanged(attrs);
!!!77118903.java!!!	setSoftInputMode(in mode : int) : void
        final WindowManager.LayoutParams attrs = getAttributes();
        if (mode != WindowManager.LayoutParams.SOFT_INPUT_STATE_UNSPECIFIED) {
            attrs.softInputMode = mode;
            mHasSoftInputMode = true;
        } else {
            mHasSoftInputMode = false;
        }
        dispatchWindowAttributesChanged(attrs);
!!!77119031.java!!!	addFlags(in flags : int) : void
        setFlags(flags, flags);
!!!77119159.java!!!	addPrivateFlags(in flags : int) : void
        setPrivateFlags(flags, flags);
!!!77119287.java!!!	clearFlags(in flags : int) : void
        setFlags(0, flags);
!!!77119415.java!!!	setFlags(in flags : int, in mask : int) : void
        final WindowManager.LayoutParams attrs = getAttributes();
        attrs.flags = (attrs.flags&~mask) | (flags&mask);
        mForcedWindowFlags |= mask;
        dispatchWindowAttributesChanged(attrs);
!!!77119543.java!!!	setPrivateFlags(in flags : int, in mask : int) : void
        final WindowManager.LayoutParams attrs = getAttributes();
        attrs.privateFlags = (attrs.privateFlags & ~mask) | (flags & mask);
        dispatchWindowAttributesChanged(attrs);
!!!77119671.java!!!	setNeedsMenuKey(in value : int) : void
        final WindowManager.LayoutParams attrs = getAttributes();
        attrs.needsMenuKey = value;
        dispatchWindowAttributesChanged(attrs);
!!!77119799.java!!!	dispatchWindowAttributesChanged(inout attrs : WindowManager::LayoutParams) : void
        if (mCallback != null) {
            mCallback.onWindowAttributesChanged(attrs);
        }
!!!77119927.java!!!	setDimAmount(in amount : float) : void
        final WindowManager.LayoutParams attrs = getAttributes();
        attrs.dimAmount = amount;
        mHaveDimAmount = true;
        dispatchWindowAttributesChanged(attrs);
!!!77120055.java!!!	setAttributes(inout a : WindowManager::LayoutParams) : void
        mWindowAttributes.copyFrom(a);
        dispatchWindowAttributesChanged(mWindowAttributes);
!!!77120183.java!!!	getAttributes() : WindowManager::LayoutParams
        return mWindowAttributes;
!!!77120311.java!!!	getForcedWindowFlags() : int
        return mForcedWindowFlags;
!!!77120439.java!!!	hasSoftInputMode() : boolean
        return mHasSoftInputMode;
!!!77120567.java!!!	setCloseOnTouchOutside(inout close : boolean) : void
        mCloseOnTouchOutside = close;
        mSetCloseOnTouchOutside = true;
!!!77120695.java!!!	setCloseOnTouchOutsideIfNotSet(inout close : boolean) : void
        if (!mSetCloseOnTouchOutside) {
            mCloseOnTouchOutside = close;
            mSetCloseOnTouchOutside = true;
        }
!!!77120823.java!!!	setDisableWallpaperTouchEvents(inout disable : boolean) : void
        setPrivateFlags(disable
                ? WindowManager.LayoutParams.PRIVATE_FLAG_DISABLE_WALLPAPER_TOUCH_EVENTS : 0,
                WindowManager.LayoutParams.PRIVATE_FLAG_DISABLE_WALLPAPER_TOUCH_EVENTS);
!!!77121079.java!!!	shouldCloseOnTouch(inout context : Context, inout event : MotionEvent) : boolean
        if (mCloseOnTouchOutside && event.getAction() == MotionEvent.ACTION_DOWN
                && isOutOfBounds(context, event) && peekDecorView() != null) {
            return true;
        }
        return false;
!!!77121207.java!!!	setSustainedPerformanceMode(inout enable : boolean) : void
        setPrivateFlags(enable
                ? WindowManager.LayoutParams.PRIVATE_FLAG_SUSTAINED_PERFORMANCE_MODE : 0,
                WindowManager.LayoutParams.PRIVATE_FLAG_SUSTAINED_PERFORMANCE_MODE);
!!!77121335.java!!!	isOutOfBounds(inout context : Context, inout event : MotionEvent) : boolean
        final int x = (int) event.getX();
        final int y = (int) event.getY();
        final int slop = ViewConfiguration.get(context).getScaledWindowTouchSlop();
        final View decorView = getDecorView();
        return (x < -slop) || (y < -slop)
                || (x > (decorView.getWidth()+slop))
                || (y > (decorView.getHeight()+slop));
!!!77121463.java!!!	requestFeature(in featureId : int) : boolean
        final int flag = 1<<featureId;
        mFeatures |= flag;
        mLocalFeatures |= mContainer != null ? (flag&~mContainer.mFeatures) : flag;
        return (mFeatures&flag) != 0;
!!!77121591.java!!!	removeFeature(in featureId : int) : void
        final int flag = 1<<featureId;
        mFeatures &= ~flag;
        mLocalFeatures &= ~(mContainer != null ? (flag&~mContainer.mFeatures) : flag);
!!!77121719.java!!!	makeActive() : void
        if (mContainer != null) {
            if (mContainer.mActiveChild != null) {
                mContainer.mActiveChild.mIsActive = false;
            }
            mContainer.mActiveChild = this;
        }
        mIsActive = true;
        onActive();
!!!77121847.java!!!	isActive() : boolean
        return mIsActive;
!!!77121975.java!!!	findViewById(in id : int) : View
        return getDecorView().findViewById(id);
!!!77124535.java!!!	getElevation() : float
        return 0.0f;
!!!77124791.java!!!	setBackgroundDrawableResource(in resId : int) : void
        setBackgroundDrawable(mContext.getDrawable(resId));
!!!77127095.java!!!	getFeatures() : int
        return mFeatures;
!!!77127223.java!!!	getDefaultFeatures(inout context : Context) : int
        int features = 0;

        final Resources res = context.getResources();
        if (res.getBoolean(com.android.internal.R.bool.config_defaultWindowFeatureOptionsPanel)) {
            features |= 1 << FEATURE_OPTIONS_PANEL;
        }

        if (res.getBoolean(com.android.internal.R.bool.config_defaultWindowFeatureContextMenu)) {
            features |= 1 << FEATURE_CONTEXT_MENU;
        }

        return features;
!!!77127351.java!!!	hasFeature(in feature : int) : boolean
        return (getFeatures() & (1 << feature)) != 0;
!!!77127479.java!!!	getLocalFeatures() : int
        return mLocalFeatures;
!!!77127607.java!!!	setDefaultWindowFormat(in format : int) : void
        mDefaultWindowFormat = format;
        if (!mHaveWindowFormat) {
            final WindowManager.LayoutParams attrs = getAttributes();
            attrs.format = format;
            dispatchWindowAttributesChanged(attrs);
        }
!!!77127735.java!!!	haveDimAmount() : boolean
        return mHaveDimAmount;
!!!77128631.java!!!	getMediaController() : MediaController
        return null;
!!!77129783.java!!!	getTransitionManager() : TransitionManager
        return null;
!!!77129911.java!!!	setTransitionManager(inout tm : TransitionManager) : void
        throw new UnsupportedOperationException();
!!!77130039.java!!!	getContentScene() : Scene
        return null;
!!!77130679.java!!!	getEnterTransition() : Transition
 return null;
!!!77130807.java!!!	getReturnTransition() : Transition
 return null;
!!!77130935.java!!!	getExitTransition() : Transition
 return null;
!!!77131063.java!!!	getReenterTransition() : Transition
 return null;
!!!77131447.java!!!	getSharedElementEnterTransition() : Transition
 return null;
!!!77131575.java!!!	getSharedElementReturnTransition() : Transition
 return null;
!!!77131959.java!!!	getSharedElementExitTransition() : Transition
 return null;
!!!77132087.java!!!	getSharedElementReenterTransition() : Transition
 return null;
!!!77132343.java!!!	getAllowEnterTransitionOverlap() : boolean
 return true;
!!!77132599.java!!!	getAllowReturnTransitionOverlap() : boolean
 return true;
!!!77132727.java!!!	getTransitionBackgroundFadeDuration() : long
 return 0;
!!!77132983.java!!!	getSharedElementsUseOverlay() : boolean
 return true;
!!!77133879.java!!!	setOverlayWithDecorCaptionEnabled(inout enabled : boolean) : void
        mOverlayWithDecorCaptionEnabled = enabled;
!!!77134007.java!!!	isOverlayWithDecorCaptionEnabled() : boolean
        return mOverlayWithDecorCaptionEnabled;
!!!77134135.java!!!	notifyRestrictedCaptionAreaCallback(in left : int, in top : int, in right : int, in bottom : int) : void
        if (mOnRestrictedCaptionAreaChangedListener != null) {
            mRestrictedCaptionAreaRect.set(left, top, right, bottom);
            mOnRestrictedCaptionAreaChangedListener.onRestrictedCaptionAreaChanged(
                    mRestrictedCaptionAreaRect);
        }
