class StateListAnimator
!!!77442999.java!!!	StateListAnimator()
        initAnimatorListener();
!!!77443127.java!!!	initAnimatorListener() : void
        mAnimatorListener = new AnimatorListenerAdapter() {
            @Override
            public void onAnimationEnd(Animator animation) {
                animation.setTarget(null);
                if (mRunningAnimator == animation) {
                    mRunningAnimator = null;
                }
            }
        };
!!!77443255.java!!!	addState(inout specs : int [[]], inout animator : Animator) : void
        Tuple tuple = new Tuple(specs, animator);
        tuple.mAnimator.addListener(mAnimatorListener);
        mTuples.add(tuple);
        mChangingConfigurations |= animator.getChangingConfigurations();
!!!77443383.java!!!	getRunningAnimator() : Animator
        return mRunningAnimator;
!!!77443511.java!!!	getTarget() : View
        return mViewRef == null ? null : mViewRef.get();
!!!77443639.java!!!	setTarget(inout view : View) : void
        final View current = getTarget();
        if (current == view) {
            return;
        }
        if (current != null) {
            clearTarget();
        }
        if (view != null) {
            mViewRef = new WeakReference<View>(view);
        }

!!!77443767.java!!!	clearTarget() : void
        final int size = mTuples.size();
        for (int i = 0; i < size; i++) {
            mTuples.get(i).mAnimator.setTarget(null);
        }
        mViewRef = null;
        mLastMatch = null;
        mRunningAnimator = null;
!!!77443895.java!!!	clone() : StateListAnimator
        try {
            StateListAnimator clone = (StateListAnimator) super.clone();
            clone.mTuples = new ArrayList<Tuple>(mTuples.size());
            clone.mLastMatch = null;
            clone.mRunningAnimator = null;
            clone.mViewRef = null;
            clone.mAnimatorListener = null;
            clone.initAnimatorListener();
            final int tupleSize = mTuples.size();
            for (int i = 0; i < tupleSize; i++) {
                final Tuple tuple = mTuples.get(i);
                final Animator animatorClone = tuple.mAnimator.clone();
                animatorClone.removeListener(mAnimatorListener);
                clone.addState(tuple.mSpecs, animatorClone);
            }
            clone.setChangingConfigurations(getChangingConfigurations());
            return clone;
        } catch (CloneNotSupportedException e) {
            throw new AssertionError("cannot clone state list animator", e);
        }
!!!77444023.java!!!	setState(inout state : int [[]]) : void
        Tuple match = null;
        final int count = mTuples.size();
        for (int i = 0; i < count; i++) {
            final Tuple tuple = mTuples.get(i);
            if (StateSet.stateSetMatches(tuple.mSpecs, state)) {
                match = tuple;
                break;
            }
        }
        if (match == mLastMatch) {
            return;
        }
        if (mLastMatch != null) {
            cancel();
        }
        mLastMatch = match;
        if (match != null) {
            start(match);
        }
!!!77444151.java!!!	start(inout match : StateListAnimator::Tuple) : void
        match.mAnimator.setTarget(getTarget());
        mRunningAnimator = match.mAnimator;
        mRunningAnimator.start();
!!!77444279.java!!!	cancel() : void
        if (mRunningAnimator != null) {
            mRunningAnimator.cancel();
            mRunningAnimator = null;
        }
!!!77444407.java!!!	getTuples() : StateListAnimator::Tuple
        return mTuples;
!!!77444535.java!!!	jumpToCurrentState() : void
        if (mRunningAnimator != null) {
            mRunningAnimator.end();
        }
!!!77444663.java!!!	getChangingConfigurations() : int
        return mChangingConfigurations;
!!!77444791.java!!!	setChangingConfigurations(in configs : int) : void
        mChangingConfigurations = configs;
!!!77444919.java!!!	appendChangingConfigurations(in configs : int) : void
        mChangingConfigurations |= configs;
!!!77445047.java!!!	createConstantState() : ConstantState
        return new StateListAnimatorConstantState(this);
