class ScrollBarDrawable
!!!82305335.java!!!	setAlwaysDrawHorizontalTrack(inout alwaysDrawTrack : boolean) : void
        mAlwaysDrawHorizontalTrack = alwaysDrawTrack;
!!!82305463.java!!!	setAlwaysDrawVerticalTrack(inout alwaysDrawTrack : boolean) : void
        mAlwaysDrawVerticalTrack = alwaysDrawTrack;
!!!82305591.java!!!	getAlwaysDrawVerticalTrack() : boolean
        return mAlwaysDrawVerticalTrack;
!!!82305719.java!!!	getAlwaysDrawHorizontalTrack() : boolean
        return mAlwaysDrawHorizontalTrack;
!!!82305847.java!!!	setParameters(in range : int, in offset : int, in extent : int, inout vertical : boolean) : void
        if (mVertical != vertical) {
            mVertical = vertical;

            mBoundsChanged = true;
        }

        if (mRange != range || mOffset != offset || mExtent != extent) {
            mRange = range;
            mOffset = offset;
            mExtent = extent;

            mRangeChanged = true;
        }
!!!82305975.java!!!	draw(inout canvas : Canvas) : void
        final boolean vertical = mVertical;
        final int extent = mExtent;
        final int range = mRange;

        boolean drawTrack = true;
        boolean drawThumb = true;
        if (extent <= 0 || range <= extent) {
            drawTrack = vertical ? mAlwaysDrawVerticalTrack : mAlwaysDrawHorizontalTrack;
            drawThumb = false;
        }

        final Rect r = getBounds();
        if (canvas.quickReject(r.left, r.top, r.right, r.bottom, Canvas.EdgeType.AA)) {
            return;
        }

        if (drawTrack) {
            drawTrack(canvas, r, vertical);
        }

        if (drawThumb) {
            final int scrollBarLength = vertical ? r.height() : r.width();
            final int thickness = vertical ? r.width() : r.height();
            final int thumbLength =
                    ScrollBarUtils.getThumbLength(scrollBarLength, thickness, extent, range);
            final int thumbOffset =
                    ScrollBarUtils.getThumbOffset(scrollBarLength, thumbLength, extent, range,
                            mOffset);

            drawThumb(canvas, r, thumbOffset, thumbLength, vertical);
        }
!!!82306103.java!!!	onBoundsChange(inout bounds : Rect) : void
        super.onBoundsChange(bounds);
        mBoundsChanged = true;
!!!82306231.java!!!	isStateful() : boolean
        return (mVerticalTrack != null && mVerticalTrack.isStateful())
                || (mVerticalThumb != null && mVerticalThumb.isStateful())
                || (mHorizontalTrack != null && mHorizontalTrack.isStateful())
                || (mHorizontalThumb != null && mHorizontalThumb.isStateful())
                || super.isStateful();
!!!82306359.java!!!	onStateChange(inout state : int [[]]) : boolean
        boolean changed = super.onStateChange(state);
        if (mVerticalTrack != null) {
            changed |= mVerticalTrack.setState(state);
        }
        if (mVerticalThumb != null) {
            changed |= mVerticalThumb.setState(state);
        }
        if (mHorizontalTrack != null) {
            changed |= mHorizontalTrack.setState(state);
        }
        if (mHorizontalThumb != null) {
            changed |= mHorizontalThumb.setState(state);
        }
        return changed;
!!!82306487.java!!!	drawTrack(inout canvas : Canvas, inout bounds : Rect, inout vertical : boolean) : void
        final Drawable track;
        if (vertical) {
            track = mVerticalTrack;
        } else {
            track = mHorizontalTrack;
        }

        if (track != null) {
            if (mBoundsChanged) {
                track.setBounds(bounds);
            }
            track.draw(canvas);
        }
!!!82306615.java!!!	drawThumb(inout canvas : Canvas, inout bounds : Rect, in offset : int, in length : int, inout vertical : boolean) : void
        final boolean changed = mRangeChanged || mBoundsChanged;
        if (vertical) {
            if (mVerticalThumb != null) {
                final Drawable thumb = mVerticalThumb;
                if (changed) {
                    thumb.setBounds(bounds.left, bounds.top + offset,
                            bounds.right, bounds.top + offset + length);
                }

                thumb.draw(canvas);
            }
        } else {
            if (mHorizontalThumb != null) {
                final Drawable thumb = mHorizontalThumb;
                if (changed) {
                    thumb.setBounds(bounds.left + offset, bounds.top,
                            bounds.left + offset + length, bounds.bottom);
                }

                thumb.draw(canvas);
            }
        }
!!!82306743.java!!!	setVerticalThumbDrawable(inout thumb : Drawable) : void
        if (mVerticalThumb != null) {
            mVerticalThumb.setCallback(null);
        }

        propagateCurrentState(thumb);
        mVerticalThumb = thumb;
!!!82306871.java!!!	setVerticalTrackDrawable(inout track : Drawable) : void
        if (mVerticalTrack != null) {
            mVerticalTrack.setCallback(null);
        }

        propagateCurrentState(track);
        mVerticalTrack = track;
!!!82306999.java!!!	setHorizontalThumbDrawable(inout thumb : Drawable) : void
        if (mHorizontalThumb != null) {
            mHorizontalThumb.setCallback(null);
        }

        propagateCurrentState(thumb);
        mHorizontalThumb = thumb;
!!!82307127.java!!!	setHorizontalTrackDrawable(inout track : Drawable) : void
        if (mHorizontalTrack != null) {
            mHorizontalTrack.setCallback(null);
        }

        propagateCurrentState(track);
        mHorizontalTrack = track;
!!!82307255.java!!!	propagateCurrentState(inout d : Drawable) : void
        if (d != null) {
            if (mMutated) {
                d.mutate();
            }

            d.setState(getState());
            d.setCallback(this);

            if (mHasSetAlpha) {
                d.setAlpha(mAlpha);
            }

            if (mHasSetColorFilter) {
                d.setColorFilter(mColorFilter);
            }
        }
!!!82307383.java!!!	getSize(inout vertical : boolean) : int
        if (vertical) {
            return mVerticalTrack != null ? mVerticalTrack.getIntrinsicWidth() :
                    mVerticalThumb != null ? mVerticalThumb.getIntrinsicWidth() : 0;
        } else {
            return mHorizontalTrack != null ? mHorizontalTrack.getIntrinsicHeight() :
                    mHorizontalThumb != null ? mHorizontalThumb.getIntrinsicHeight() : 0;
        }
!!!82307511.java!!!	mutate() : ScrollBarDrawable
        if (!mMutated && super.mutate() == this) {
            if (mVerticalTrack != null) {
                mVerticalTrack.mutate();
            }
            if (mVerticalThumb != null) {
                mVerticalThumb.mutate();
            }
            if (mHorizontalTrack != null) {
                mHorizontalTrack.mutate();
            }
            if (mHorizontalThumb != null) {
                mHorizontalThumb.mutate();
            }
            mMutated = true;
        }
        return this;
!!!82307639.java!!!	setAlpha(in alpha : int) : void
        mAlpha = alpha;
        mHasSetAlpha = true;

        if (mVerticalTrack != null) {
            mVerticalTrack.setAlpha(alpha);
        }
        if (mVerticalThumb != null) {
            mVerticalThumb.setAlpha(alpha);
        }
        if (mHorizontalTrack != null) {
            mHorizontalTrack.setAlpha(alpha);
        }
        if (mHorizontalThumb != null) {
            mHorizontalThumb.setAlpha(alpha);
        }
!!!82307767.java!!!	getAlpha() : int
        return mAlpha;
!!!82307895.java!!!	setColorFilter(inout colorFilter : ColorFilter) : void
        mColorFilter = colorFilter;
        mHasSetColorFilter = true;

        if (mVerticalTrack != null) {
            mVerticalTrack.setColorFilter(colorFilter);
        }
        if (mVerticalThumb != null) {
            mVerticalThumb.setColorFilter(colorFilter);
        }
        if (mHorizontalTrack != null) {
            mHorizontalTrack.setColorFilter(colorFilter);
        }
        if (mHorizontalThumb != null) {
            mHorizontalThumb.setColorFilter(colorFilter);
        }
!!!82308023.java!!!	getColorFilter() : ColorFilter
        return mColorFilter;
!!!82308151.java!!!	getOpacity() : int
        return PixelFormat.TRANSLUCENT;
!!!82308279.java!!!	invalidateDrawable(inout who : Drawable) : void
        invalidateSelf();
!!!82308407.java!!!	scheduleDrawable(inout who : Drawable, inout what : Runnable, in when : long) : void
        scheduleSelf(what, when);
!!!82308535.java!!!	unscheduleDrawable(inout who : Drawable, inout what : Runnable) : void
        unscheduleSelf(what);
!!!82308663.java!!!	toString() : String
        return "ScrollBarDrawable: range=" + mRange + " offset=" + mOffset +
               " extent=" + mExtent + (mVertical ? " V" : " H");
