class PersistableBundle
!!!80379063.java!!!	isValidType(inout value : Object) : boolean
        return (value instanceof Integer) || (value instanceof Long) ||
                (value instanceof Double) || (value instanceof String) ||
                (value instanceof int[]) || (value instanceof long[]) ||
                (value instanceof double[]) || (value instanceof String[]) ||
                (value instanceof PersistableBundle) || (value == null) ||
                (value instanceof Boolean) || (value instanceof boolean[]);
!!!80379191.java!!!	PersistableBundle()
        super();
        mFlags = FLAG_DEFUSABLE;
!!!80379319.java!!!	PersistableBundle(in capacity : int)
        super(capacity);
        mFlags = FLAG_DEFUSABLE;
!!!80379447.java!!!	PersistableBundle(inout b : PersistableBundle)
        super(b);
        mFlags = b.mFlags;
!!!80379575.java!!!	PersistableBundle(inout b : Bundle)
        this(b.getMap());
!!!80379703.java!!!	PersistableBundle(inout map : ArrayMap)
        super();
        mFlags = FLAG_DEFUSABLE;

        // First stuff everything in.
        putAll(map);

        // Now verify each item throwing an exception if there is a violation.
        final int N = mMap.size();
        for (int i=0; i<N; i++) {
            Object value = mMap.valueAt(i);
            if (value instanceof ArrayMap) {
                // Fix up any Maps by replacing them with PersistableBundles.
                mMap.setValueAt(i, new PersistableBundle((ArrayMap<String, Object>) value));
            } else if (value instanceof Bundle) {
                mMap.setValueAt(i, new PersistableBundle(((Bundle) value)));
            } else if (!isValidType(value)) {
                throw new IllegalArgumentException("Bad value in PersistableBundle key="
                        + mMap.keyAt(i) + " value=" + value);
            }
        }
!!!80379831.java!!!	PersistableBundle(inout parcelledData : Parcel, in length : int)
        super(parcelledData, length);
        mFlags = FLAG_DEFUSABLE;
!!!80379959.java!!!	forPair(inout key : String, inout value : String) : PersistableBundle
        PersistableBundle b = new PersistableBundle(1);
        b.putString(key, value);
        return b;
!!!80380087.java!!!	clone() : Object
        return new PersistableBundle(this);
!!!80380215.java!!!	putPersistableBundle(inout key : String, inout value : PersistableBundle) : void
        unparcel();
        mMap.put(key, value);
!!!80380343.java!!!	getPersistableBundle(inout key : String) : PersistableBundle
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (PersistableBundle) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "Bundle", e);
            return null;
        }
!!!80380471.java!!!	writeUnknownObject(inout v : Object, inout name : String, inout out : XmlSerializer) : void
        if (v instanceof PersistableBundle) {
            out.startTag(null, TAG_PERSISTABLEMAP);
            out.attribute(null, "name", name);
            ((PersistableBundle) v).saveToXml(out);
            out.endTag(null, TAG_PERSISTABLEMAP);
        } else {
            throw new XmlPullParserException("Unknown Object o=" + v);
        }
!!!80380599.java!!!	saveToXml(inout out : XmlSerializer) : void
        unparcel();
        XmlUtils.writeMapXml(mMap, out, this);
!!!80380855.java!!!	describeContents() : int
        return 0;
!!!80380983.java!!!	writeToParcel(inout parcel : Parcel, in flags : int) : void
        final boolean oldAllowFds = parcel.pushAllowFds(false);
        try {
            writeToParcelInner(parcel, flags);
        } finally {
            parcel.restoreAllowFds(oldAllowFds);
        }
!!!80381111.java!!!	restoreFromXml(inout in : XmlPullParser) : PersistableBundle
        final int outerDepth = in.getDepth();
        final String startTag = in.getName();
        final String[] tagName = new String[1];
        int event;
        while (((event = in.next()) != XmlPullParser.END_DOCUMENT) &&
                (event != XmlPullParser.END_TAG || in.getDepth() < outerDepth)) {
            if (event == XmlPullParser.START_TAG) {
                return new PersistableBundle((ArrayMap<String, Object>)
                        XmlUtils.readThisArrayMapXml(in, startTag, tagName,
                        new MyReadMapCallback()));
            }
        }
        return EMPTY;
!!!80381239.java!!!	toString() : String
        if (mParcelledData != null) {
            if (isEmptyParcel()) {
                return "PersistableBundle[EMPTY_PARCEL]";
            } else {
                return "PersistableBundle[mParcelledData.dataSize=" +
                        mParcelledData.dataSize() + "]";
            }
        }
        return "PersistableBundle[" + mMap.toString() + "]";
