class Fragment
!!!77914295.java!!!	instantiate(inout context : Context, inout fname : String) : Fragment
        return instantiate(context, fname, null);
!!!77914423.java!!!	instantiate(inout context : Context, inout fname : String, inout args : Bundle) : Fragment
        try {
            Class<?> clazz = sClassMap.get(fname);
            if (clazz == null) {
                // Class not found in the cache, see if it's real, and try to add it
                clazz = context.getClassLoader().loadClass(fname);
                if (!Fragment.class.isAssignableFrom(clazz)) {
                    throw new InstantiationException("Trying to instantiate a class " + fname
                            + " that is not a Fragment", new ClassCastException());
                }
                sClassMap.put(fname, clazz);
            }
            Fragment f = (Fragment)clazz.newInstance();
            if (args != null) {
                args.setClassLoader(f.getClass().getClassLoader());
                f.mArguments = args;
            }
            return f;
        } catch (ClassNotFoundException e) {
            throw new InstantiationException("Unable to instantiate fragment " + fname
                    + ": make sure class name exists, is public, and has an"
                    + " empty constructor that is public", e);
        } catch (java.lang.InstantiationException e) {
            throw new InstantiationException("Unable to instantiate fragment " + fname
                    + ": make sure class name exists, is public, and has an"
                    + " empty constructor that is public", e);
        } catch (IllegalAccessException e) {
            throw new InstantiationException("Unable to instantiate fragment " + fname
                    + ": make sure class name exists, is public, and has an"
                    + " empty constructor that is public", e);
        }
!!!77914551.java!!!	restoreViewState(inout savedInstanceState : Bundle) : void
        if (mSavedViewState != null) {
            mView.restoreHierarchyState(mSavedViewState);
            mSavedViewState = null;
        }
        mCalled = false;
        onViewStateRestored(savedInstanceState);
        if (!mCalled) {
            throw new SuperNotCalledException("Fragment " + this
                    + " did not call through to super.onViewStateRestored()");
        }
!!!77914679.java!!!	setIndex(in index : int, inout parent : Fragment) : void
        mIndex = index;
        if (parent != null) {
            mWho = parent.mWho + ":" + mIndex;
        } else {
            mWho = "android:fragment:" + mIndex;
        }
!!!77914807.java!!!	isInBackStack() : boolean
        return mBackStackNesting > 0;
!!!77914935.java!!!	equals(inout o : Object) : boolean
        return super.equals(o);
!!!77915063.java!!!	hashCode() : int
        return super.hashCode();
!!!77915191.java!!!	toString() : String
        StringBuilder sb = new StringBuilder(128);
        DebugUtils.buildShortClassTag(this, sb);
        if (mIndex >= 0) {
            sb.append(" #");
            sb.append(mIndex);
        }
        if (mFragmentId != 0) {
            sb.append(" id=0x");
            sb.append(Integer.toHexString(mFragmentId));
        }
        if (mTag != null) {
            sb.append(" ");
            sb.append(mTag);
        }
        sb.append('}');
        return sb.toString();
!!!77915319.java!!!	getId() : int
        return mFragmentId;
!!!77915447.java!!!	getTag() : String
        return mTag;
!!!77915575.java!!!	setArguments(inout args : Bundle) : void
        if (mIndex >= 0) {
            throw new IllegalStateException("Fragment already active");
        }
        mArguments = args;
!!!77915703.java!!!	getArguments() : Bundle
        return mArguments;
!!!77915831.java!!!	setInitialSavedState(inout state : Fragment::SavedState) : void
        if (mIndex >= 0) {
            throw new IllegalStateException("Fragment already active");
        }
        mSavedFragmentState = state != null && state.mState != null
                ? state.mState : null;
!!!77915959.java!!!	setTargetFragment(inout fragment : Fragment, in requestCode : int) : void
        mTarget = fragment;
        mTargetRequestCode = requestCode;
!!!77916087.java!!!	getTargetFragment() : Fragment
        return mTarget;
!!!77916215.java!!!	getTargetRequestCode() : int
        return mTargetRequestCode;
!!!77916343.java!!!	getContext() : Context
        return mHost == null ? null : mHost.getContext();
!!!77916471.java!!!	getActivity() : Activity
        return mHost == null ? null : mHost.getActivity();
!!!77916599.java!!!	getHost() : Object
        return mHost == null ? null : mHost.onGetHost();
!!!77916727.java!!!	getResources() : Resources
        if (mHost == null) {
            throw new IllegalStateException("Fragment " + this + " not attached to Activity");
        }
        return mHost.getContext().getResources();
!!!77916855.java!!!	getText(in resId : int) : CharSequence
        return getResources().getText(resId);
!!!77916983.java!!!	getString(in resId : int) : String
        return getResources().getString(resId);
!!!77917111.java!!!	getString(in resId : int, inout  : Object...formatArgs) : String
        return getResources().getString(resId, formatArgs);
!!!77917239.java!!!	getFragmentManager() : FragmentManager
        return mFragmentManager;
!!!77917367.java!!!	getChildFragmentManager() : FragmentManager
        if (mChildFragmentManager == null) {
            instantiateChildFragmentManager();
            if (mState >= RESUMED) {
                mChildFragmentManager.dispatchResume();
            } else if (mState >= STARTED) {
                mChildFragmentManager.dispatchStart();
            } else if (mState >= ACTIVITY_CREATED) {
                mChildFragmentManager.dispatchActivityCreated();
            } else if (mState >= CREATED) {
                mChildFragmentManager.dispatchCreate();
            }
        }
        return mChildFragmentManager;
!!!77917495.java!!!	getParentFragment() : Fragment
        return mParentFragment;
!!!77917623.java!!!	isAdded() : boolean
        return mHost != null && mAdded;
!!!77917751.java!!!	isDetached() : boolean
        return mDetached;
!!!77917879.java!!!	isRemoving() : boolean
        return mRemoving;
!!!77918007.java!!!	isInLayout() : boolean
        return mInLayout;
!!!77918135.java!!!	isResumed() : boolean
        return mState >= RESUMED;
!!!77918263.java!!!	isVisible() : boolean
        return isAdded() && !isHidden() && mView != null
                && mView.getWindowToken() != null && mView.getVisibility() == View.VISIBLE;
!!!77918391.java!!!	isHidden() : boolean
        return mHidden;
!!!77918647.java!!!	setRetainInstance(inout retain : boolean) : void
        mRetainInstance = retain;
!!!77918775.java!!!	getRetainInstance() : boolean
        return mRetainInstance;
!!!77918903.java!!!	setHasOptionsMenu(inout hasMenu : boolean) : void
        if (mHasMenu != hasMenu) {
            mHasMenu = hasMenu;
            if (isAdded() && !isHidden()) {
                mFragmentManager.invalidateOptionsMenu();
            }
        }
!!!77919031.java!!!	setMenuVisibility(inout menuVisible : boolean) : void
        if (mMenuVisible != menuVisible) {
            mMenuVisible = menuVisible;
            if (mHasMenu && isAdded() && !isHidden()) {
                mFragmentManager.invalidateOptionsMenu();
            }
        }
!!!77919159.java!!!	setUserVisibleHint(inout isVisibleToUser : boolean) : void
        // Prior to Android N we were simply checking if this fragment had a FragmentManager
        // set before we would trigger a deferred start. Unfortunately this also gets set before
        // a fragment transaction is committed, so if setUserVisibleHint was called before a
        // transaction commit, we would start the fragment way too early. FragmentPagerAdapter
        // triggers this situation.
        // Unfortunately some apps relied on this timing in overrides of setUserVisibleHint
        // on their own fragments, and expected, however erroneously, that after a call to
        // super.setUserVisibleHint their onStart methods had been run.
        // We preserve this behavior for apps targeting old platform versions below.
        boolean useBrokenAddedCheck = false;
        Context context = getContext();
        if (mFragmentManager != null && mFragmentManager.mHost != null) {
            context = mFragmentManager.mHost.getContext();
        }
        if (context != null) {
            useBrokenAddedCheck = context.getApplicationInfo().targetSdkVersion <= VERSION_CODES.M;
        }

        final boolean performDeferredStart;
        if (useBrokenAddedCheck) {
            performDeferredStart = !mUserVisibleHint && isVisibleToUser && mState < STARTED
                    && mFragmentManager != null;
        } else {
            performDeferredStart = !mUserVisibleHint && isVisibleToUser && mState < STARTED
                    && mFragmentManager != null && isAdded();
        }

        if (performDeferredStart) {
            mFragmentManager.performPendingDeferredStart(this);
        }

        mUserVisibleHint = isVisibleToUser;
        mDeferStart = mState < STARTED && !isVisibleToUser;
!!!77919287.java!!!	getUserVisibleHint() : boolean
        return mUserVisibleHint;
!!!77919415.java!!!	getLoaderManager() : LoaderManager
        if (mLoaderManager != null) {
            return mLoaderManager;
        }
        if (mHost == null) {
            throw new IllegalStateException("Fragment " + this + " not attached to Activity");
        }
        mCheckedForLoaderManager = true;
        mLoaderManager = mHost.getLoaderManager(mWho, mLoadersStarted, true);
        return mLoaderManager;
!!!77919543.java!!!	startActivity(inout intent : Intent) : void
        startActivity(intent, null);
!!!77919671.java!!!	startActivity(inout intent : Intent, inout options : Bundle) : void
        if (mHost == null) {
            throw new IllegalStateException("Fragment " + this + " not attached to Activity");
        }
        if (options != null) {
            mHost.onStartActivityFromFragment(this, intent, -1, options);
        } else {
            // Note we want to go through this call for compatibility with
            // applications that may have overridden the method.
            mHost.onStartActivityFromFragment(this, intent, -1, null /*options*/);
        }
!!!77919799.java!!!	startActivityForResult(inout intent : Intent, in requestCode : int) : void
        startActivityForResult(intent, requestCode, null);
!!!77919927.java!!!	startActivityForResult(inout intent : Intent, in requestCode : int, inout options : Bundle) : void
        if (mHost == null) {
            throw new IllegalStateException("Fragment " + this + " not attached to Activity");
        }
        mHost.onStartActivityFromFragment(this, intent, requestCode, options);
!!!77920055.java!!!	startIntentSenderForResult(inout intent : IntentSender, in requestCode : int, inout fillInIntent : Intent, in flagsMask : int, in flagsValues : int, in extraFlags : int, inout options : Bundle) : void
        if (mHost == null) {
            throw new IllegalStateException("Fragment " + this + " not attached to Activity");
        }
        mHost.onStartIntentSenderFromFragment(this, intent, requestCode, fillInIntent, flagsMask,
                flagsValues, extraFlags, options);
!!!77920311.java!!!	requestPermissions(inout permissions : String [[]], in requestCode : int) : void
        if (mHost == null) {
            throw new IllegalStateException("Fragment " + this + " not attached to Activity");
        }
        mHost.onRequestPermissionsFromFragment(this, permissions,requestCode);
!!!77920439.java!!!	onRequestPermissionsResult(in requestCode : int, inout permissions : String [[]], inout grantResults : int [[]]) : void
        /* callback - do nothing */
!!!77920567.java!!!	shouldShowRequestPermissionRationale(inout permission : String) : boolean
        if (mHost != null) {
            return mHost.getContext().getPackageManager()
                    .shouldShowRequestPermissionRationale(permission);
        }
        return false;
!!!77920695.java!!!	getLayoutInflater(inout savedInstanceState : Bundle) : LayoutInflater
        final LayoutInflater result = mHost.onGetLayoutInflater();
        if (mHost.onUseFragmentManagerInflaterFactory()) {
            getChildFragmentManager(); // Init if needed; use raw implementation below.
            result.setPrivateFactory(mChildFragmentManager.getLayoutInflaterFactory());
        }
        return result;
!!!77920823.java!!!	onInflate(inout attrs : AttributeSet, inout savedInstanceState : Bundle) : void
        mCalled = true;
!!!77920951.java!!!	onInflate(inout context : Context, inout attrs : AttributeSet, inout savedInstanceState : Bundle) : void
        onInflate(attrs, savedInstanceState);
        mCalled = true;

        TypedArray a = context.obtainStyledAttributes(attrs,
                com.android.internal.R.styleable.Fragment);
        mEnterTransition = loadTransition(context, a, mEnterTransition, null,
                com.android.internal.R.styleable.Fragment_fragmentEnterTransition);
        mReturnTransition = loadTransition(context, a, mReturnTransition, USE_DEFAULT_TRANSITION,
                com.android.internal.R.styleable.Fragment_fragmentReturnTransition);
        mExitTransition = loadTransition(context, a, mExitTransition, null,
                com.android.internal.R.styleable.Fragment_fragmentExitTransition);
        mReenterTransition = loadTransition(context, a, mReenterTransition, USE_DEFAULT_TRANSITION,
                com.android.internal.R.styleable.Fragment_fragmentReenterTransition);
        mSharedElementEnterTransition = loadTransition(context, a, mSharedElementEnterTransition,
                null, com.android.internal.R.styleable.Fragment_fragmentSharedElementEnterTransition);
        mSharedElementReturnTransition = loadTransition(context, a, mSharedElementReturnTransition,
                USE_DEFAULT_TRANSITION,
                com.android.internal.R.styleable.Fragment_fragmentSharedElementReturnTransition);
        if (mAllowEnterTransitionOverlap == null) {
            mAllowEnterTransitionOverlap = a.getBoolean(
                    com.android.internal.R.styleable.Fragment_fragmentAllowEnterTransitionOverlap, true);
        }
        if (mAllowReturnTransitionOverlap == null) {
            mAllowReturnTransitionOverlap = a.getBoolean(
                    com.android.internal.R.styleable.Fragment_fragmentAllowReturnTransitionOverlap, true);
        }
        a.recycle();

        final Activity hostActivity = mHost == null ? null : mHost.getActivity();
        if (hostActivity != null) {
            mCalled = false;
            onInflate(hostActivity, attrs, savedInstanceState);
        }
!!!77921079.java!!!	onInflate(inout activity : Activity, inout attrs : AttributeSet, inout savedInstanceState : Bundle) : void
        mCalled = true;
!!!77921335.java!!!	onAttach(inout context : Context) : void
        mCalled = true;
        final Activity hostActivity = mHost == null ? null : mHost.getActivity();
        if (hostActivity != null) {
            mCalled = false;
            onAttach(hostActivity);
        }
!!!77921463.java!!!	onAttach(inout activity : Activity) : void
        mCalled = true;
!!!77921591.java!!!	onCreateAnimator(in transit : int, inout enter : boolean, in nextAnim : int) : Animator
        return null;
!!!77921719.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        mCalled = true;
        final Context context = getContext();
        final int version = context != null ? context.getApplicationInfo().targetSdkVersion : 0;
        if (version >= Build.VERSION_CODES.N) {
            restoreChildFragmentState(savedInstanceState, true);
            if (mChildFragmentManager != null
                    && !mChildFragmentManager.isStateAtLeast(Fragment.CREATED)) {
                mChildFragmentManager.dispatchCreate();
            }
        }
!!!77921847.java!!!	restoreChildFragmentState(inout savedInstanceState : Bundle, inout provideNonConfig : boolean) : void
        if (savedInstanceState != null) {
            Parcelable p = savedInstanceState.getParcelable(Activity.FRAGMENTS_TAG);
            if (p != null) {
                if (mChildFragmentManager == null) {
                    instantiateChildFragmentManager();
                }
                mChildFragmentManager.restoreAllState(p, provideNonConfig ? mChildNonConfig : null);
                mChildNonConfig = null;
                mChildFragmentManager.dispatchCreate();
            }
        }
!!!77921975.java!!!	onCreateView(inout inflater : LayoutInflater, inout container : ViewGroup, inout savedInstanceState : Bundle) : View
        return null;
!!!77922231.java!!!	getView() : View
        return mView;
!!!77922359.java!!!	onActivityCreated(inout savedInstanceState : Bundle) : void
        mCalled = true;
!!!77922487.java!!!	onViewStateRestored(inout savedInstanceState : Bundle) : void
        mCalled = true;
!!!77922615.java!!!	onStart() : void
        mCalled = true;

        if (!mLoadersStarted) {
            mLoadersStarted = true;
            if (!mCheckedForLoaderManager) {
                mCheckedForLoaderManager = true;
                mLoaderManager = mHost.getLoaderManager(mWho, mLoadersStarted, false);
            }
            if (mLoaderManager != null) {
                mLoaderManager.doStart();
            }
        }
!!!77922743.java!!!	onResume() : void
        mCalled = true;
!!!77923255.java!!!	onConfigurationChanged(inout newConfig : Configuration) : void
        mCalled = true;
!!!77923383.java!!!	onPause() : void
        mCalled = true;
!!!77923511.java!!!	onStop() : void
        mCalled = true;
!!!77923639.java!!!	onLowMemory() : void
        mCalled = true;
!!!77923767.java!!!	onTrimMemory(in level : int) : void
        mCalled = true;
!!!77923895.java!!!	onDestroyView() : void
        mCalled = true;
!!!77924023.java!!!	onDestroy() : void
        mCalled = true;
        //Log.v("foo", "onDestroy: mCheckedForLoaderManager=" + mCheckedForLoaderManager
        //        + " mLoaderManager=" + mLoaderManager);
        if (!mCheckedForLoaderManager) {
            mCheckedForLoaderManager = true;
            mLoaderManager = mHost.getLoaderManager(mWho, mLoadersStarted, false);
        }
        if (mLoaderManager != null) {
            mLoaderManager.doDestroy();
        }
!!!77924151.java!!!	initState() : void
        mIndex = -1;
        mWho = null;
        mAdded = false;
        mRemoving = false;
        mFromLayout = false;
        mInLayout = false;
        mRestored = false;
        mBackStackNesting = 0;
        mFragmentManager = null;
        mChildFragmentManager = null;
        mHost = null;
        mFragmentId = 0;
        mContainerId = 0;
        mTag = null;
        mHidden = false;
        mDetached = false;
        mRetaining = false;
        mLoaderManager = null;
        mLoadersStarted = false;
        mCheckedForLoaderManager = false;
!!!77924279.java!!!	onDetach() : void
        mCalled = true;
!!!77924791.java!!!	onOptionsItemSelected(inout item : MenuItem) : boolean
        return false;
!!!77925047.java!!!	onCreateContextMenu(inout menu : ContextMenu, inout v : View, inout menuInfo : ContextMenu::ContextMenuInfo) : void
        getActivity().onCreateContextMenu(menu, v, menuInfo);
!!!77925175.java!!!	registerForContextMenu(inout view : View) : void
        view.setOnCreateContextMenuListener(this);
!!!77925303.java!!!	unregisterForContextMenu(inout view : View) : void
        view.setOnCreateContextMenuListener(null);
!!!77925431.java!!!	onContextItemSelected(inout item : MenuItem) : boolean
        return false;
!!!77925559.java!!!	setEnterSharedElementCallback(inout callback : SharedElementCallback) : void
        if (callback == null) {
            callback = SharedElementCallback.NULL_CALLBACK;
        }
        mEnterTransitionCallback = callback;
!!!77925687.java!!!	setEnterSharedElementTransitionCallback(inout callback : SharedElementCallback) : void
        setEnterSharedElementCallback(callback);
!!!77925815.java!!!	setExitSharedElementCallback(inout callback : SharedElementCallback) : void
        if (callback == null) {
            callback = SharedElementCallback.NULL_CALLBACK;
        }
        mExitTransitionCallback = callback;
!!!77925943.java!!!	setExitSharedElementTransitionCallback(inout callback : SharedElementCallback) : void
        setExitSharedElementCallback(callback);
!!!77926071.java!!!	setEnterTransition(inout transition : Transition) : void
        mEnterTransition = transition;
!!!77926199.java!!!	getEnterTransition() : Transition
        return mEnterTransition;
!!!77926327.java!!!	setReturnTransition(inout transition : Transition) : void
        mReturnTransition = transition;
!!!77926455.java!!!	getReturnTransition() : Transition
        return mReturnTransition == USE_DEFAULT_TRANSITION ? getEnterTransition()
                : mReturnTransition;
!!!77926583.java!!!	setExitTransition(inout transition : Transition) : void
        mExitTransition = transition;
!!!77926711.java!!!	getExitTransition() : Transition
        return mExitTransition;
!!!77926839.java!!!	setReenterTransition(inout transition : Transition) : void
        mReenterTransition = transition;
!!!77926967.java!!!	getReenterTransition() : Transition
        return mReenterTransition == USE_DEFAULT_TRANSITION ? getExitTransition()
                : mReenterTransition;
!!!77927095.java!!!	setSharedElementEnterTransition(inout transition : Transition) : void
        mSharedElementEnterTransition = transition;
!!!77927223.java!!!	getSharedElementEnterTransition() : Transition
        return mSharedElementEnterTransition;
!!!77927351.java!!!	setSharedElementReturnTransition(inout transition : Transition) : void
        mSharedElementReturnTransition = transition;
!!!77927479.java!!!	getSharedElementReturnTransition() : Transition
        return mSharedElementReturnTransition == USE_DEFAULT_TRANSITION ?
                getSharedElementEnterTransition() : mSharedElementReturnTransition;
!!!77927607.java!!!	setAllowEnterTransitionOverlap(inout allow : boolean) : void
        mAllowEnterTransitionOverlap = allow;
!!!77927735.java!!!	getAllowEnterTransitionOverlap() : boolean
        return (mAllowEnterTransitionOverlap == null) ? true : mAllowEnterTransitionOverlap;
!!!77927863.java!!!	setAllowReturnTransitionOverlap(inout allow : boolean) : void
        mAllowReturnTransitionOverlap = allow;
!!!77927991.java!!!	getAllowReturnTransitionOverlap() : boolean
        return (mAllowReturnTransitionOverlap == null) ? true : mAllowReturnTransitionOverlap;
!!!77928119.java!!!	dump(inout prefix : String, inout fd : FileDescriptor, inout writer : PrintWriter, inout args : String [[]]) : void
        writer.print(prefix); writer.print("mFragmentId=#");
        writer.print(Integer.toHexString(mFragmentId));
        writer.print(" mContainerId=#");
        writer.print(Integer.toHexString(mContainerId));
        writer.print(" mTag="); writer.println(mTag);
        writer.print(prefix); writer.print("mState="); writer.print(mState);
        writer.print(" mIndex="); writer.print(mIndex);
        writer.print(" mWho="); writer.print(mWho);
        writer.print(" mBackStackNesting="); writer.println(mBackStackNesting);
        writer.print(prefix); writer.print("mAdded="); writer.print(mAdded);
        writer.print(" mRemoving="); writer.print(mRemoving);
        writer.print(" mFromLayout="); writer.print(mFromLayout);
        writer.print(" mInLayout="); writer.println(mInLayout);
        writer.print(prefix); writer.print("mHidden="); writer.print(mHidden);
        writer.print(" mDetached="); writer.print(mDetached);
        writer.print(" mMenuVisible="); writer.print(mMenuVisible);
        writer.print(" mHasMenu="); writer.println(mHasMenu);
        writer.print(prefix); writer.print("mRetainInstance="); writer.print(mRetainInstance);
        writer.print(" mRetaining="); writer.print(mRetaining);
        writer.print(" mUserVisibleHint="); writer.println(mUserVisibleHint);
        if (mFragmentManager != null) {
            writer.print(prefix); writer.print("mFragmentManager=");
            writer.println(mFragmentManager);
        }
        if (mHost != null) {
            writer.print(prefix); writer.print("mHost=");
            writer.println(mHost);
        }
        if (mParentFragment != null) {
            writer.print(prefix); writer.print("mParentFragment=");
            writer.println(mParentFragment);
        }
        if (mArguments != null) {
            writer.print(prefix); writer.print("mArguments="); writer.println(mArguments);
        }
        if (mSavedFragmentState != null) {
            writer.print(prefix); writer.print("mSavedFragmentState=");
            writer.println(mSavedFragmentState);
        }
        if (mSavedViewState != null) {
            writer.print(prefix); writer.print("mSavedViewState=");
            writer.println(mSavedViewState);
        }
        if (mTarget != null) {
            writer.print(prefix); writer.print("mTarget="); writer.print(mTarget);
            writer.print(" mTargetRequestCode=");
            writer.println(mTargetRequestCode);
        }
        if (mNextAnim != 0) {
            writer.print(prefix); writer.print("mNextAnim="); writer.println(mNextAnim);
        }
        if (mContainer != null) {
            writer.print(prefix); writer.print("mContainer="); writer.println(mContainer);
        }
        if (mView != null) {
            writer.print(prefix); writer.print("mView="); writer.println(mView);
        }
        if (mAnimatingAway != null) {
            writer.print(prefix); writer.print("mAnimatingAway="); writer.println(mAnimatingAway);
            writer.print(prefix); writer.print("mStateAfterAnimating=");
            writer.println(mStateAfterAnimating);
        }
        if (mLoaderManager != null) {
            writer.print(prefix); writer.println("Loader Manager:");
            mLoaderManager.dump(prefix + "  ", fd, writer, args);
        }
        if (mChildFragmentManager != null) {
            writer.print(prefix); writer.println("Child " + mChildFragmentManager + ":");
            mChildFragmentManager.dump(prefix + "  ", fd, writer, args);
        }
!!!77928247.java!!!	findFragmentByWho(inout who : String) : Fragment
        if (who.equals(mWho)) {
            return this;
        }
        if (mChildFragmentManager != null) {
            return mChildFragmentManager.findFragmentByWho(who);
        }
        return null;
!!!77928375.java!!!	instantiateChildFragmentManager() : void
        mChildFragmentManager = new FragmentManagerImpl();
        mChildFragmentManager.attachController(mHost, new FragmentContainer() {
            @Override
            @Nullable
            public View onFindViewById(int id) {
                if (mView == null) {
                    throw new IllegalStateException("Fragment does not have a view");
                }
                return mView.findViewById(id);
            }

            @Override
            public boolean onHasView() {
                return (mView != null);
            }
        }, this);
!!!77928503.java!!!	performCreate(inout savedInstanceState : Bundle) : void
        if (mChildFragmentManager != null) {
            mChildFragmentManager.noteStateNotSaved();
        }
        mState = CREATED;
        mCalled = false;
        onCreate(savedInstanceState);
        if (!mCalled) {
            throw new SuperNotCalledException("Fragment " + this
                    + " did not call through to super.onCreate()");
        }
        final Context context = getContext();
        final int version = context != null ? context.getApplicationInfo().targetSdkVersion : 0;
        if (version < Build.VERSION_CODES.N) {
            restoreChildFragmentState(savedInstanceState, false);
        }
!!!77928631.java!!!	performCreateView(inout inflater : LayoutInflater, inout container : ViewGroup, inout savedInstanceState : Bundle) : View
        if (mChildFragmentManager != null) {
            mChildFragmentManager.noteStateNotSaved();
        }
        return onCreateView(inflater, container, savedInstanceState);
!!!77928759.java!!!	performActivityCreated(inout savedInstanceState : Bundle) : void
        if (mChildFragmentManager != null) {
            mChildFragmentManager.noteStateNotSaved();
        }
        mState = ACTIVITY_CREATED;
        mCalled = false;
        onActivityCreated(savedInstanceState);
        if (!mCalled) {
            throw new SuperNotCalledException("Fragment " + this
                    + " did not call through to super.onActivityCreated()");
        }
        if (mChildFragmentManager != null) {
            mChildFragmentManager.dispatchActivityCreated();
        }
!!!77928887.java!!!	performStart() : void
        if (mChildFragmentManager != null) {
            mChildFragmentManager.noteStateNotSaved();
            mChildFragmentManager.execPendingActions();
        }
        mState = STARTED;
        mCalled = false;
        onStart();
        if (!mCalled) {
            throw new SuperNotCalledException("Fragment " + this
                    + " did not call through to super.onStart()");
        }
        if (mChildFragmentManager != null) {
            mChildFragmentManager.dispatchStart();
        }
        if (mLoaderManager != null) {
            mLoaderManager.doReportStart();
        }
!!!77929015.java!!!	performResume() : void
        if (mChildFragmentManager != null) {
            mChildFragmentManager.noteStateNotSaved();
            mChildFragmentManager.execPendingActions();
        }
        mState = RESUMED;
        mCalled = false;
        onResume();
        if (!mCalled) {
            throw new SuperNotCalledException("Fragment " + this
                    + " did not call through to super.onResume()");
        }
        if (mChildFragmentManager != null) {
            mChildFragmentManager.dispatchResume();
            mChildFragmentManager.execPendingActions();
        }
!!!77929143.java!!!	performMultiWindowModeChanged(inout isInMultiWindowMode : boolean) : void
        onMultiWindowModeChanged(isInMultiWindowMode);
        if (mChildFragmentManager != null) {
            mChildFragmentManager.dispatchMultiWindowModeChanged(isInMultiWindowMode);
        }
!!!77929271.java!!!	performPictureInPictureModeChanged(inout isInPictureInPictureMode : boolean) : void
        onPictureInPictureModeChanged(isInPictureInPictureMode);
        if (mChildFragmentManager != null) {
            mChildFragmentManager.dispatchPictureInPictureModeChanged(isInPictureInPictureMode);
        }
!!!77929399.java!!!	performConfigurationChanged(inout newConfig : Configuration) : void
        onConfigurationChanged(newConfig);
        if (mChildFragmentManager != null) {
            mChildFragmentManager.dispatchConfigurationChanged(newConfig);
        }
!!!77929527.java!!!	performLowMemory() : void
        onLowMemory();
        if (mChildFragmentManager != null) {
            mChildFragmentManager.dispatchLowMemory();
        }
!!!77929655.java!!!	performTrimMemory(in level : int) : void
        onTrimMemory(level);
        if (mChildFragmentManager != null) {
            mChildFragmentManager.dispatchTrimMemory(level);
        }
!!!77929783.java!!!	performCreateOptionsMenu(inout menu : Menu, inout inflater : MenuInflater) : boolean
        boolean show = false;
        if (!mHidden) {
            if (mHasMenu && mMenuVisible) {
                show = true;
                onCreateOptionsMenu(menu, inflater);
            }
            if (mChildFragmentManager != null) {
                show |= mChildFragmentManager.dispatchCreateOptionsMenu(menu, inflater);
            }
        }
        return show;
!!!77929911.java!!!	performPrepareOptionsMenu(inout menu : Menu) : boolean
        boolean show = false;
        if (!mHidden) {
            if (mHasMenu && mMenuVisible) {
                show = true;
                onPrepareOptionsMenu(menu);
            }
            if (mChildFragmentManager != null) {
                show |= mChildFragmentManager.dispatchPrepareOptionsMenu(menu);
            }
        }
        return show;
!!!77930039.java!!!	performOptionsItemSelected(inout item : MenuItem) : boolean
        if (!mHidden) {
            if (mHasMenu && mMenuVisible) {
                if (onOptionsItemSelected(item)) {
                    return true;
                }
            }
            if (mChildFragmentManager != null) {
                if (mChildFragmentManager.dispatchOptionsItemSelected(item)) {
                    return true;
                }
            }
        }
        return false;
!!!77930167.java!!!	performContextItemSelected(inout item : MenuItem) : boolean
        if (!mHidden) {
            if (onContextItemSelected(item)) {
                return true;
            }
            if (mChildFragmentManager != null) {
                if (mChildFragmentManager.dispatchContextItemSelected(item)) {
                    return true;
                }
            }
        }
        return false;
!!!77930295.java!!!	performOptionsMenuClosed(inout menu : Menu) : void
        if (!mHidden) {
            if (mHasMenu && mMenuVisible) {
                onOptionsMenuClosed(menu);
            }
            if (mChildFragmentManager != null) {
                mChildFragmentManager.dispatchOptionsMenuClosed(menu);
            }
        }
!!!77930423.java!!!	performSaveInstanceState(inout outState : Bundle) : void
        onSaveInstanceState(outState);
        if (mChildFragmentManager != null) {
            Parcelable p = mChildFragmentManager.saveAllState();
            if (p != null) {
                outState.putParcelable(Activity.FRAGMENTS_TAG, p);
            }
        }
!!!77930551.java!!!	performPause() : void
        if (mChildFragmentManager != null) {
            mChildFragmentManager.dispatchPause();
        }
        mState = STARTED;
        mCalled = false;
        onPause();
        if (!mCalled) {
            throw new SuperNotCalledException("Fragment " + this
                    + " did not call through to super.onPause()");
        }
!!!77930679.java!!!	performStop() : void
        if (mChildFragmentManager != null) {
            mChildFragmentManager.dispatchStop();
        }
        mState = STOPPED;
        mCalled = false;
        onStop();
        if (!mCalled) {
            throw new SuperNotCalledException("Fragment " + this
                    + " did not call through to super.onStop()");
        }

        if (mLoadersStarted) {
            mLoadersStarted = false;
            if (!mCheckedForLoaderManager) {
                mCheckedForLoaderManager = true;
                mLoaderManager = mHost.getLoaderManager(mWho, mLoadersStarted, false);
            }
            if (mLoaderManager != null) {
                if (mHost.getRetainLoaders()) {
                    mLoaderManager.doRetain();
                } else {
                    mLoaderManager.doStop();
                }
            }
        }
!!!77930807.java!!!	performDestroyView() : void
        if (mChildFragmentManager != null) {
            mChildFragmentManager.dispatchDestroyView();
        }
        mState = CREATED;
        mCalled = false;
        onDestroyView();
        if (!mCalled) {
            throw new SuperNotCalledException("Fragment " + this
                    + " did not call through to super.onDestroyView()");
        }
        if (mLoaderManager != null) {
            mLoaderManager.doReportNextStart();
        }
!!!77930935.java!!!	performDestroy() : void
        if (mChildFragmentManager != null) {
            mChildFragmentManager.dispatchDestroy();
        }
        mState = INITIALIZING;
        mCalled = false;
        onDestroy();
        if (!mCalled) {
            throw new SuperNotCalledException("Fragment " + this
                    + " did not call through to super.onDestroy()");
        }
        mChildFragmentManager = null;
!!!77931063.java!!!	performDetach() : void
        mCalled = false;
        onDetach();
        if (!mCalled) {
            throw new SuperNotCalledException("Fragment " + this
                    + " did not call through to super.onDetach()");
        }

        // Destroy the child FragmentManager if we still have it here.
        // We won't unless we're retaining our instance and if we do,
        // our child FragmentManager instance state will have already been saved.
        if (mChildFragmentManager != null) {
            if (!mRetaining) {
                throw new IllegalStateException("Child FragmentManager of " + this + " was not "
                        + " destroyed and this fragment is not retaining instance");
            }
            mChildFragmentManager.dispatchDestroy();
            mChildFragmentManager = null;
        }
!!!77931191.java!!!	loadTransition(inout context : Context, inout typedArray : TypedArray, inout currentValue : Transition, inout defaultValue : Transition, in id : int) : Transition
        if (currentValue != defaultValue) {
            return currentValue;
        }
        int transitionId = typedArray.getResourceId(id, 0);
        Transition transition = defaultValue;
        if (transitionId != 0 && transitionId != com.android.internal.R.transition.no_transition) {
            TransitionInflater inflater = TransitionInflater.from(context);
            transition = inflater.inflateTransition(transitionId);
            if (transition instanceof TransitionSet &&
                    ((TransitionSet)transition).getTransitionCount() == 0) {
                transition = null;
            }
        }
        return transition;
