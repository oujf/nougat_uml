class Size
!!!81348919.java!!!	Size(in width : int, in height : int)
        mWidth = width;
        mHeight = height;
!!!81349047.java!!!	getWidth() : int
        return mWidth;
!!!81349175.java!!!	getHeight() : int
        return mHeight;
!!!81349303.java!!!	equals(in obj : Object) : boolean
        if (obj == null) {
            return false;
        }
        if (this == obj) {
            return true;
        }
        if (obj instanceof Size) {
            Size other = (Size) obj;
            return mWidth == other.mWidth && mHeight == other.mHeight;
        }
        return false;
!!!81349431.java!!!	toString() : String
        return mWidth + "x" + mHeight;
!!!81349559.java!!!	invalidSize(inout s : String) : NumberFormatException
        throw new NumberFormatException("Invalid Size: \"" + s + "\"");
!!!81349687.java!!!	parseSize(inout string : String) : Size
        checkNotNull(string, "string must not be null");

        int sep_ix = string.indexOf('*');
        if (sep_ix < 0) {
            sep_ix = string.indexOf('x');
        }
        if (sep_ix < 0) {
            throw invalidSize(string);
        }
        try {
            return new Size(Integer.parseInt(string.substring(0, sep_ix)),
                    Integer.parseInt(string.substring(sep_ix + 1)));
        } catch (NumberFormatException e) {
            throw invalidSize(string);
        }
!!!81349815.java!!!	hashCode() : int
        // assuming most sizes are <2^16, doing a rotate will give us perfect hashing
        return mHeight ^ ((mWidth << (Integer.SIZE / 2)) | (mWidth >>> (Integer.SIZE / 2)));
