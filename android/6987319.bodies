class Debug
!!!80227639.java!!!	waitForDebugger() : void
        if (!VMDebug.isDebuggingEnabled()) {
            //System.out.println("debugging not enabled, not waiting");
            return;
        }
        if (isDebuggerConnected())
            return;

        // if DDMS is listening, inform them of our plight
        System.out.println("Sending WAIT chunk");
        byte[] data = new byte[] { 0 };     // 0 == "waiting for debugger"
        Chunk waitChunk = new Chunk(ChunkHandler.type("WAIT"), data, 0, 1);
        DdmServer.sendChunk(waitChunk);

        mWaiting = true;
        while (!isDebuggerConnected()) {
            try { Thread.sleep(SPIN_DELAY); }
            catch (InterruptedException ie) {}
        }
        mWaiting = false;

        System.out.println("Debugger has connected");

        /*
         * There is no "ready to go" signal from the debugger, and we're
         * not allowed to suspend ourselves -- the debugger expects us to
         * be running happily, and gets confused if we aren't.  We need to
         * allow the debugger a chance to set breakpoints before we start
         * running again.
         *
         * Sit and spin until the debugger has been idle for a short while.
         */
        while (true) {
            long delta = VMDebug.lastDebuggerActivity();
            if (delta < 0) {
                System.out.println("debugger detached?");
                break;
            }

            if (delta < MIN_DEBUGGER_IDLE) {
                System.out.println("waiting for debugger to settle...");
                try { Thread.sleep(SPIN_DELAY); }
                catch (InterruptedException ie) {}
            } else {
                System.out.println("debugger has settled (" + delta + ")");
                break;
            }
        }
!!!80227767.java!!!	waitingForDebugger() : boolean
        return mWaiting;
!!!80227895.java!!!	isDebuggerConnected() : boolean
        return VMDebug.isDebuggerConnected();
!!!80228023.java!!!	getVmFeatureList() : String
        return VMDebug.getVmFeatureList();
!!!80228279.java!!!	startNativeTracing() : void
        // Open the sysfs file for writing and write "1" to it.
        PrintWriter outStream = null;
        try {
            FileOutputStream fos = new FileOutputStream(SYSFS_QEMU_TRACE_STATE);
            outStream = new FastPrintWriter(fos);
            outStream.println("1");
        } catch (Exception e) {
        } finally {
            if (outStream != null)
                outStream.close();
        }

        VMDebug.startEmulatorTracing();
!!!80228407.java!!!	stopNativeTracing() : void
        VMDebug.stopEmulatorTracing();

        // Open the sysfs file for writing and write "0" to it.
        PrintWriter outStream = null;
        try {
            FileOutputStream fos = new FileOutputStream(SYSFS_QEMU_TRACE_STATE);
            outStream = new FastPrintWriter(fos);
            outStream.println("0");
        } catch (Exception e) {
            // We could print an error message here but we probably want
            // to quietly ignore errors if we are not running in the emulator.
        } finally {
            if (outStream != null)
                outStream.close();
        }
!!!80228535.java!!!	enableEmulatorTraceOutput() : void
        VMDebug.startEmulatorTracing();
!!!80228663.java!!!	startMethodTracing() : void
        VMDebug.startMethodTracing(fixTracePath(null), 0, 0, false, 0);
!!!80228791.java!!!	startMethodTracing(inout tracePath : String) : void
        startMethodTracing(tracePath, 0, 0);
!!!80228919.java!!!	startMethodTracing(inout tracePath : String, in bufferSize : int) : void
        startMethodTracing(tracePath, bufferSize, 0);
!!!80229047.java!!!	startMethodTracing(inout tracePath : String, in bufferSize : int, in flags : int) : void
        VMDebug.startMethodTracing(fixTracePath(tracePath), bufferSize, flags, false, 0);
!!!80229175.java!!!	startMethodTracingSampling(inout tracePath : String, in bufferSize : int, in intervalUs : int) : void
        VMDebug.startMethodTracing(fixTracePath(tracePath), bufferSize, 0, true, intervalUs);
!!!80229303.java!!!	fixTracePath(inout tracePath : String) : String
        if (tracePath == null || tracePath.charAt(0) != '/') {
            final Context context = AppGlobals.getInitialApplication();
            final File dir;
            if (context != null) {
                dir = context.getExternalFilesDir(null);
            } else {
                dir = Environment.getExternalStorageDirectory();
            }

            if (tracePath == null) {
                tracePath = new File(dir, DEFAULT_TRACE_BODY).getAbsolutePath();
            } else {
                tracePath = new File(dir, tracePath).getAbsolutePath();
            }
        }
        if (!tracePath.endsWith(DEFAULT_TRACE_EXTENSION)) {
            tracePath += DEFAULT_TRACE_EXTENSION;
        }
        return tracePath;
!!!80229431.java!!!	startMethodTracing(inout traceName : String, inout fd : FileDescriptor, in bufferSize : int, in flags : int) : void
        VMDebug.startMethodTracing(traceName, fd, bufferSize, flags, false, 0);
!!!80229559.java!!!	startMethodTracingDdms(in bufferSize : int, in flags : int, inout samplingEnabled : boolean, in intervalUs : int) : void
        VMDebug.startMethodTracingDdms(bufferSize, flags, samplingEnabled, intervalUs);
!!!80229687.java!!!	getMethodTracingMode() : int
        return VMDebug.getMethodTracingMode();
!!!80229815.java!!!	stopMethodTracing() : void
        VMDebug.stopMethodTracing();
!!!80229943.java!!!	threadCpuTimeNanos() : long
        return VMDebug.threadCpuTimeNanos();
!!!80230071.java!!!	startAllocCounting() : void
        VMDebug.startAllocCounting();
!!!80230199.java!!!	stopAllocCounting() : void
        VMDebug.stopAllocCounting();
!!!80230327.java!!!	getGlobalAllocCount() : int
        return VMDebug.getAllocCount(VMDebug.KIND_GLOBAL_ALLOCATED_OBJECTS);
!!!80230455.java!!!	resetGlobalAllocCount() : void
        VMDebug.resetAllocCount(VMDebug.KIND_GLOBAL_ALLOCATED_OBJECTS);
!!!80230583.java!!!	getGlobalAllocSize() : int
        return VMDebug.getAllocCount(VMDebug.KIND_GLOBAL_ALLOCATED_BYTES);
!!!80230711.java!!!	resetGlobalAllocSize() : void
        VMDebug.resetAllocCount(VMDebug.KIND_GLOBAL_ALLOCATED_BYTES);
!!!80230839.java!!!	getGlobalFreedCount() : int
        return VMDebug.getAllocCount(VMDebug.KIND_GLOBAL_FREED_OBJECTS);
!!!80230967.java!!!	resetGlobalFreedCount() : void
        VMDebug.resetAllocCount(VMDebug.KIND_GLOBAL_FREED_OBJECTS);
!!!80231095.java!!!	getGlobalFreedSize() : int
        return VMDebug.getAllocCount(VMDebug.KIND_GLOBAL_FREED_BYTES);
!!!80231223.java!!!	resetGlobalFreedSize() : void
        VMDebug.resetAllocCount(VMDebug.KIND_GLOBAL_FREED_BYTES);
!!!80231351.java!!!	getGlobalGcInvocationCount() : int
        return VMDebug.getAllocCount(VMDebug.KIND_GLOBAL_GC_INVOCATIONS);
!!!80231479.java!!!	resetGlobalGcInvocationCount() : void
        VMDebug.resetAllocCount(VMDebug.KIND_GLOBAL_GC_INVOCATIONS);
!!!80231607.java!!!	getGlobalClassInitCount() : int
        return VMDebug.getAllocCount(VMDebug.KIND_GLOBAL_CLASS_INIT_COUNT);
!!!80231735.java!!!	resetGlobalClassInitCount() : void
        VMDebug.resetAllocCount(VMDebug.KIND_GLOBAL_CLASS_INIT_COUNT);
!!!80231863.java!!!	getGlobalClassInitTime() : int
        /* cumulative elapsed time for class initialization, in usec */
        return VMDebug.getAllocCount(VMDebug.KIND_GLOBAL_CLASS_INIT_TIME);
!!!80231991.java!!!	resetGlobalClassInitTime() : void
        VMDebug.resetAllocCount(VMDebug.KIND_GLOBAL_CLASS_INIT_TIME);
!!!80232119.java!!!	getGlobalExternalAllocCount() : int
        return 0;
!!!80232503.java!!!	getGlobalExternalAllocSize() : int
        return 0;
!!!80232631.java!!!	getGlobalExternalFreedCount() : int
        return 0;
!!!80232887.java!!!	getGlobalExternalFreedSize() : int
        return 0;
!!!80233143.java!!!	getThreadAllocCount() : int
        return VMDebug.getAllocCount(VMDebug.KIND_THREAD_ALLOCATED_OBJECTS);
!!!80233271.java!!!	resetThreadAllocCount() : void
        VMDebug.resetAllocCount(VMDebug.KIND_THREAD_ALLOCATED_OBJECTS);
!!!80233399.java!!!	getThreadAllocSize() : int
        return VMDebug.getAllocCount(VMDebug.KIND_THREAD_ALLOCATED_BYTES);
!!!80233527.java!!!	resetThreadAllocSize() : void
        VMDebug.resetAllocCount(VMDebug.KIND_THREAD_ALLOCATED_BYTES);
!!!80233655.java!!!	getThreadExternalAllocCount() : int
        return 0;
!!!80233911.java!!!	getThreadExternalAllocSize() : int
        return 0;
!!!80234167.java!!!	getThreadGcInvocationCount() : int
        return VMDebug.getAllocCount(VMDebug.KIND_THREAD_GC_INVOCATIONS);
!!!80234295.java!!!	resetThreadGcInvocationCount() : void
        VMDebug.resetAllocCount(VMDebug.KIND_THREAD_GC_INVOCATIONS);
!!!80234423.java!!!	resetAllCounts() : void
        VMDebug.resetAllocCount(VMDebug.KIND_ALL_COUNTS);
!!!80234551.java!!!	getRuntimeStat(inout statName : String) : String
        return VMDebug.getRuntimeStat(statName);
!!!80234679.java!!!	getRuntimeStats() : String
        return VMDebug.getRuntimeStats();
!!!80235831.java!!!	setAllocationLimit(in limit : int) : int
        return -1;
!!!80235959.java!!!	setGlobalAllocationLimit(in limit : int) : int
        return -1;
!!!80236087.java!!!	printLoadedClasses(in flags : int) : void
        VMDebug.printLoadedClasses(flags);
!!!80236215.java!!!	getLoadedClassCount() : int
        return VMDebug.getLoadedClassCount();
!!!80236343.java!!!	dumpHprofData(inout fileName : String) : void
        VMDebug.dumpHprofData(fileName);
!!!80236471.java!!!	dumpHprofData(inout fileName : String, inout fd : FileDescriptor) : void
        VMDebug.dumpHprofData(fileName, fd);
!!!80236599.java!!!	dumpHprofDataDdms() : void
        VMDebug.dumpHprofDataDdms();
!!!80236855.java!!!	countInstancesOfClass(inout cls : Class) : long
        return VMDebug.countInstancesOfClass(cls, true);
!!!80237623.java!!!	cacheRegisterMap(inout classAndMethodDesc : String) : boolean
        return VMDebug.cacheRegisterMap(classAndMethodDesc);
!!!80237751.java!!!	dumpReferenceTables() : void
        VMDebug.dumpReferenceTables();
!!!80238519.java!!!	fieldTypeMatches(inout field : Field, inout cl : Class) : boolean
        Class<?> fieldClass = field.getType();
        if (fieldClass == cl) {
            return true;
        }
        Field primitiveTypeField;
        try {
            /* All of the classes we care about (Boolean, Integer, etc.)
             * have a Class field called "TYPE" that points to the corresponding
             * primitive class.
             */
            primitiveTypeField = cl.getField("TYPE");
        } catch (NoSuchFieldException ex) {
            return false;
        }
        try {
            return fieldClass == (Class<?>) primitiveTypeField.get(null);
        } catch (IllegalAccessException ex) {
            return false;
        }
!!!80238647.java!!!	modifyFieldIfSet(in field : Field, in properties : TypedProperties, in propertyName : String) : void
        if (field.getType() == java.lang.String.class) {
            int stringInfo = properties.getStringInfo(propertyName);
            switch (stringInfo) {
                case TypedProperties.STRING_SET:
                    // Handle as usual below.
                    break;
                case TypedProperties.STRING_NULL:
                    try {
                        field.set(null, null);  // null object for static fields; null string
                    } catch (IllegalAccessException ex) {
                        throw new IllegalArgumentException(
                            "Cannot set field for " + propertyName, ex);
                    }
                    return;
                case TypedProperties.STRING_NOT_SET:
                    return;
                case TypedProperties.STRING_TYPE_MISMATCH:
                    throw new IllegalArgumentException(
                        "Type of " + propertyName + " " +
                        " does not match field type (" + field.getType() + ")");
                default:
                    throw new IllegalStateException(
                        "Unexpected getStringInfo(" + propertyName + ") return value " +
                        stringInfo);
            }
        }
        Object value = properties.get(propertyName);
        if (value != null) {
            if (!fieldTypeMatches(field, value.getClass())) {
                throw new IllegalArgumentException(
                    "Type of " + propertyName + " (" + value.getClass() + ") " +
                    " does not match field type (" + field.getType() + ")");
            }
            try {
                field.set(null, value);  // null object for static fields
            } catch (IllegalAccessException ex) {
                throw new IllegalArgumentException(
                    "Cannot set field for " + propertyName, ex);
            }
        }
!!!80238775.java!!!	setFieldsOn(inout cl : Class) : void
        setFieldsOn(cl, false);
!!!80238903.java!!!	setFieldsOn(inout cl : Class, inout partial : boolean) : void
        if (false) {
            if (debugProperties != null) {
                /* Only look for fields declared directly by the class,
                 * so we don't mysteriously change static fields in superclasses.
                 */
                for (Field field : cl.getDeclaredFields()) {
                    if (!partial || field.getAnnotation(DebugProperty.class) != null) {
                        final String propertyName = cl.getName() + "." + field.getName();
                        boolean isStatic = Modifier.isStatic(field.getModifiers());
                        boolean isFinal = Modifier.isFinal(field.getModifiers());

                        if (!isStatic || isFinal) {
                            throw new IllegalArgumentException(propertyName +
                                " must be static and non-final");
                        }
                        modifyFieldIfSet(field, debugProperties, propertyName);
                    }
                }
            }
        } else {
            Log.wtf(TAG,
                  "setFieldsOn(" + (cl == null ? "null" : cl.getName()) +
                  ") called in non-DEBUG build");
        }
!!!80239031.java!!!	dumpService(inout name : String, inout fd : FileDescriptor, inout args : String [[]]) : boolean
        IBinder service = ServiceManager.getService(name);
        if (service == null) {
            Log.e(TAG, "Can't find service to dump: " + name);
            return false;
        }

        try {
            service.dump(fd, args);
            return true;
        } catch (RemoteException e) {
            Log.e(TAG, "Can't dump service: " + name, e);
            return false;
        }
!!!80239415.java!!!	getCaller(inout callStack : StackTraceElement [[]], in depth : int) : String
        // callStack[4] is the caller of the method that called getCallers()
        if (4 + depth >= callStack.length) {
            return "<bottom of call stack>";
        }
        StackTraceElement caller = callStack[4 + depth];
        return caller.getClassName() + "." + caller.getMethodName() + ":" + caller.getLineNumber();
!!!80239543.java!!!	getCallers(in depth : int) : String
        final StackTraceElement[] callStack = Thread.currentThread().getStackTrace();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < depth; i++) {
            sb.append(getCaller(callStack, i)).append(" ");
        }
        return sb.toString();
!!!80239671.java!!!	getCallers(in start : int, in depth : int) : String
        final StackTraceElement[] callStack = Thread.currentThread().getStackTrace();
        StringBuffer sb = new StringBuffer();
        depth += start;
        for (int i = start; i < depth; i++) {
            sb.append(getCaller(callStack, i)).append(" ");
        }
        return sb.toString();
!!!80239799.java!!!	getCallers(in depth : int, inout linePrefix : String) : String
        final StackTraceElement[] callStack = Thread.currentThread().getStackTrace();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < depth; i++) {
            sb.append(linePrefix).append(getCaller(callStack, i)).append("\n");
        }
        return sb.toString();
!!!80239927.java!!!	getCaller() : String
        return getCaller(Thread.currentThread().getStackTrace(), 0);
