class JobInfo
!!!78442039.java!!!	getMinPeriodMillis() : long
        return MIN_PERIOD_MILLIS;
!!!78442167.java!!!	getMinFlexMillis() : long
        return MIN_FLEX_MILLIS;
!!!78442295.java!!!	getId() : int
        return jobId;
!!!78442423.java!!!	getExtras() : PersistableBundle
        return extras;
!!!78442551.java!!!	getService() : ComponentName
        return service;
!!!78442679.java!!!	getPriority() : int
        return priority;
!!!78442807.java!!!	getFlags() : int
        return flags;
!!!78442935.java!!!	isRequireCharging() : boolean
        return requireCharging;
!!!78443063.java!!!	isRequireDeviceIdle() : boolean
        return requireDeviceIdle;
!!!78443191.java!!!	getTriggerContentUris() : JobInfo::TriggerContentUri
        return triggerContentUris;
!!!78443319.java!!!	getTriggerContentUpdateDelay() : long
        return triggerContentUpdateDelay;
!!!78443447.java!!!	getTriggerContentMaxDelay() : long
        return triggerContentMaxDelay;
!!!78443575.java!!!	getNetworkType() : int
        return networkType;
!!!78443703.java!!!	getMinLatencyMillis() : long
        return minLatencyMillis;
!!!78443831.java!!!	getMaxExecutionDelayMillis() : long
        return maxExecutionDelayMillis;
!!!78443959.java!!!	isPeriodic() : boolean
        return isPeriodic;
!!!78444087.java!!!	isPersisted() : boolean
        return isPersisted;
!!!78444215.java!!!	getIntervalMillis() : long
        return intervalMillis >= getMinPeriodMillis() ? intervalMillis : getMinPeriodMillis();
!!!78444343.java!!!	getFlexMillis() : long
        long interval = getIntervalMillis();
        long percentClamp = 5 * interval / 100;
        long clampedFlex = Math.max(flexMillis, Math.max(percentClamp, getMinFlexMillis()));
        return clampedFlex <= interval ? clampedFlex : interval;
!!!78444471.java!!!	getInitialBackoffMillis() : long
        return initialBackoffMillis;
!!!78444599.java!!!	getBackoffPolicy() : int
        return backoffPolicy;
!!!78444727.java!!!	hasEarlyConstraint() : boolean
        return hasEarlyConstraint;
!!!78444855.java!!!	hasLateConstraint() : boolean
        return hasLateConstraint;
!!!78444983.java!!!	JobInfo(inout in : Parcel)
        jobId = in.readInt();
        extras = in.readPersistableBundle();
        service = in.readParcelable(null);
        requireCharging = in.readInt() == 1;
        requireDeviceIdle = in.readInt() == 1;
        triggerContentUris = in.createTypedArray(TriggerContentUri.CREATOR);
        triggerContentUpdateDelay = in.readLong();
        triggerContentMaxDelay = in.readLong();
        networkType = in.readInt();
        minLatencyMillis = in.readLong();
        maxExecutionDelayMillis = in.readLong();
        isPeriodic = in.readInt() == 1;
        isPersisted = in.readInt() == 1;
        intervalMillis = in.readLong();
        flexMillis = in.readLong();
        initialBackoffMillis = in.readLong();
        backoffPolicy = in.readInt();
        hasEarlyConstraint = in.readInt() == 1;
        hasLateConstraint = in.readInt() == 1;
        priority = in.readInt();
        flags = in.readInt();
!!!78445111.java!!!	JobInfo(inout b : JobInfo::Builder)
        jobId = b.mJobId;
        extras = b.mExtras;
        service = b.mJobService;
        requireCharging = b.mRequiresCharging;
        requireDeviceIdle = b.mRequiresDeviceIdle;
        triggerContentUris = b.mTriggerContentUris != null
                ? b.mTriggerContentUris.toArray(new TriggerContentUri[b.mTriggerContentUris.size()])
                : null;
        triggerContentUpdateDelay = b.mTriggerContentUpdateDelay;
        triggerContentMaxDelay = b.mTriggerContentMaxDelay;
        networkType = b.mNetworkType;
        minLatencyMillis = b.mMinLatencyMillis;
        maxExecutionDelayMillis = b.mMaxExecutionDelayMillis;
        isPeriodic = b.mIsPeriodic;
        isPersisted = b.mIsPersisted;
        intervalMillis = b.mIntervalMillis;
        flexMillis = b.mFlexMillis;
        initialBackoffMillis = b.mInitialBackoffMillis;
        backoffPolicy = b.mBackoffPolicy;
        hasEarlyConstraint = b.mHasEarlyConstraint;
        hasLateConstraint = b.mHasLateConstraint;
        priority = b.mPriority;
        flags = b.mFlags;
!!!78445239.java!!!	describeContents() : int
        return 0;
!!!78445367.java!!!	writeToParcel(inout out : Parcel, in flags : int) : void
        out.writeInt(jobId);
        out.writePersistableBundle(extras);
        out.writeParcelable(service, flags);
        out.writeInt(requireCharging ? 1 : 0);
        out.writeInt(requireDeviceIdle ? 1 : 0);
        out.writeTypedArray(triggerContentUris, flags);
        out.writeLong(triggerContentUpdateDelay);
        out.writeLong(triggerContentMaxDelay);
        out.writeInt(networkType);
        out.writeLong(minLatencyMillis);
        out.writeLong(maxExecutionDelayMillis);
        out.writeInt(isPeriodic ? 1 : 0);
        out.writeInt(isPersisted ? 1 : 0);
        out.writeLong(intervalMillis);
        out.writeLong(flexMillis);
        out.writeLong(initialBackoffMillis);
        out.writeInt(backoffPolicy);
        out.writeInt(hasEarlyConstraint ? 1 : 0);
        out.writeInt(hasLateConstraint ? 1 : 0);
        out.writeInt(priority);
        out.writeInt(this.flags);
!!!78445495.java!!!	toString() : String
        return "(job:" + jobId + "/" + service.flattenToShortString() + ")";
