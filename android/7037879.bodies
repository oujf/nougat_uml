class Loader
!!!78064439.java!!!	Loader(inout context : Context)
        mContext = context.getApplicationContext();
!!!78064567.java!!!	deliverResult(inout data : D) : void
        if (mListener != null) {
            mListener.onLoadComplete(this, data);
        }
!!!78064695.java!!!	deliverCancellation() : void
        if (mOnLoadCanceledListener != null) {
            mOnLoadCanceledListener.onLoadCanceled(this);
        }
!!!78064823.java!!!	getContext() : Context
        return mContext;
!!!78064951.java!!!	getId() : int
        return mId;
!!!78065079.java!!!	registerListener(in id : int, inout listener : Loader::OnLoadCompleteListener) : void
        if (mListener != null) {
            throw new IllegalStateException("There is already a listener registered");
        }
        mListener = listener;
        mId = id;
!!!78065207.java!!!	unregisterListener(inout listener : Loader::OnLoadCompleteListener) : void
        if (mListener == null) {
            throw new IllegalStateException("No listener register");
        }
        if (mListener != listener) {
            throw new IllegalArgumentException("Attempting to unregister the wrong listener");
        }
        mListener = null;
!!!78065335.java!!!	registerOnLoadCanceledListener(inout listener : Loader::OnLoadCanceledListener) : void
        if (mOnLoadCanceledListener != null) {
            throw new IllegalStateException("There is already a listener registered");
        }
        mOnLoadCanceledListener = listener;
!!!78065463.java!!!	unregisterOnLoadCanceledListener(inout listener : Loader::OnLoadCanceledListener) : void
        if (mOnLoadCanceledListener == null) {
            throw new IllegalStateException("No listener register");
        }
        if (mOnLoadCanceledListener != listener) {
            throw new IllegalArgumentException("Attempting to unregister the wrong listener");
        }
        mOnLoadCanceledListener = null;
!!!78065591.java!!!	isStarted() : boolean
        return mStarted;
!!!78065719.java!!!	isAbandoned() : boolean
        return mAbandoned;
!!!78065847.java!!!	isReset() : boolean
        return mReset;
!!!78065975.java!!!	startLoading() : void
        mStarted = true;
        mReset = false;
        mAbandoned = false;
        onStartLoading();
!!!78066231.java!!!	cancelLoad() : boolean
        return onCancelLoad();
!!!78066359.java!!!	onCancelLoad() : boolean
        return false;
!!!78066487.java!!!	forceLoad() : void
        onForceLoad();
!!!78066743.java!!!	stopLoading() : void
        mStarted = false;
        onStopLoading();
!!!78066999.java!!!	abandon() : void
        mAbandoned = true;
        onAbandon();
!!!78067255.java!!!	reset() : void
        onReset();
        mReset = true;
        mStarted = false;
        mAbandoned = false;
        mContentChanged = false;
        mProcessingChange = false;
!!!78067511.java!!!	takeContentChanged() : boolean
        boolean res = mContentChanged;
        mContentChanged = false;
        mProcessingChange |= res;
        return res;
!!!78067639.java!!!	commitContentChanged() : void
        mProcessingChange = false;
!!!78067767.java!!!	rollbackContentChanged() : void
        if (mProcessingChange) {
            onContentChanged();
        }
!!!78067895.java!!!	onContentChanged() : void
        if (mStarted) {
            forceLoad();
        } else {
            // This loader has been stopped, so we don't want to load
            // new data right now...  but keep track of it changing to
            // refresh later if we start again.
            mContentChanged = true;
        }
!!!78068023.java!!!	dataToString(inout data : D) : String
        StringBuilder sb = new StringBuilder(64);
        DebugUtils.buildShortClassTag(data, sb);
        sb.append("}");
        return sb.toString();
!!!78068151.java!!!	toString() : String
        StringBuilder sb = new StringBuilder(64);
        DebugUtils.buildShortClassTag(this, sb);
        sb.append(" id=");
        sb.append(mId);
        sb.append("}");
        return sb.toString();
!!!78068279.java!!!	dump(inout prefix : String, inout fd : FileDescriptor, inout writer : PrintWriter, inout args : String [[]]) : void
        writer.print(prefix); writer.print("mId="); writer.print(mId);
                writer.print(" mListener="); writer.println(mListener);
        if (mStarted || mContentChanged || mProcessingChange) {
            writer.print(prefix); writer.print("mStarted="); writer.print(mStarted);
                    writer.print(" mContentChanged="); writer.print(mContentChanged);
                    writer.print(" mProcessingChange="); writer.println(mProcessingChange);
        }
        if (mAbandoned || mReset) {
            writer.print(prefix); writer.print("mAbandoned="); writer.print(mAbandoned);
                    writer.print(" mReset="); writer.println(mReset);
        }
