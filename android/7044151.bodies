class UnreadConversation
!!!78135735.java!!!	UnreadConversation(inout messages : String [[]], inout remoteInput : RemoteInput, inout replyPendingIntent : PendingIntent, inout readPendingIntent : PendingIntent, inout participants : String [[]], in latestTimestamp : long)
                mMessages = messages;
                mRemoteInput = remoteInput;
                mReadPendingIntent = readPendingIntent;
                mReplyPendingIntent = replyPendingIntent;
                mParticipants = participants;
                mLatestTimestamp = latestTimestamp;
!!!78135863.java!!!	getMessages() : String
                return mMessages;
!!!78135991.java!!!	getRemoteInput() : RemoteInput
                return mRemoteInput;
!!!78136119.java!!!	getReplyPendingIntent() : PendingIntent
                return mReplyPendingIntent;
!!!78136247.java!!!	getReadPendingIntent() : PendingIntent
                return mReadPendingIntent;
!!!78136375.java!!!	getParticipants() : String
                return mParticipants;
!!!78136503.java!!!	getParticipant() : String
                return mParticipants.length > 0 ? mParticipants[0] : null;
!!!78136631.java!!!	getLatestTimestamp() : long
                return mLatestTimestamp;
!!!78136759.java!!!	getBundleForUnreadConversation() : Bundle
                Bundle b = new Bundle();
                String author = null;
                if (mParticipants != null && mParticipants.length > 1) {
                    author = mParticipants[0];
                }
                Parcelable[] messages = new Parcelable[mMessages.length];
                for (int i = 0; i < messages.length; i++) {
                    Bundle m = new Bundle();
                    m.putString(KEY_TEXT, mMessages[i]);
                    m.putString(KEY_AUTHOR, author);
                    messages[i] = m;
                }
                b.putParcelableArray(KEY_MESSAGES, messages);
                if (mRemoteInput != null) {
                    b.putParcelable(KEY_REMOTE_INPUT, mRemoteInput);
                }
                b.putParcelable(KEY_ON_REPLY, mReplyPendingIntent);
                b.putParcelable(KEY_ON_READ, mReadPendingIntent);
                b.putStringArray(KEY_PARTICIPANTS, mParticipants);
                b.putLong(KEY_TIMESTAMP, mLatestTimestamp);
                return b;
!!!78136887.java!!!	getUnreadConversationFromBundle(inout b : Bundle) : Notification::CarExtender::UnreadConversation
                if (b == null) {
                    return null;
                }
                Parcelable[] parcelableMessages = b.getParcelableArray(KEY_MESSAGES);
                String[] messages = null;
                if (parcelableMessages != null) {
                    String[] tmp = new String[parcelableMessages.length];
                    boolean success = true;
                    for (int i = 0; i < tmp.length; i++) {
                        if (!(parcelableMessages[i] instanceof Bundle)) {
                            success = false;
                            break;
                        }
                        tmp[i] = ((Bundle) parcelableMessages[i]).getString(KEY_TEXT);
                        if (tmp[i] == null) {
                            success = false;
                            break;
                        }
                    }
                    if (success) {
                        messages = tmp;
                    } else {
                        return null;
                    }
                }

                PendingIntent onRead = b.getParcelable(KEY_ON_READ);
                PendingIntent onReply = b.getParcelable(KEY_ON_REPLY);

                RemoteInput remoteInput = b.getParcelable(KEY_REMOTE_INPUT);

                String[] participants = b.getStringArray(KEY_PARTICIPANTS);
                if (participants == null || participants.length != 1) {
                    return null;
                }

                return new UnreadConversation(messages,
                        remoteInput,
                        onReply,
                        onRead,
                        participants, b.getLong(KEY_TIMESTAMP));
