class DevicePolicyManager
!!!78270519.java!!!	DevicePolicyManager(inout context : Context, inout parentInstance : boolean)
        this(context,
                IDevicePolicyManager.Stub.asInterface(
                        ServiceManager.getService(Context.DEVICE_POLICY_SERVICE)),
                parentInstance);
!!!78270647.java!!!	DevicePolicyManager(inout context : Context, inout service : IDevicePolicyManager, inout parentInstance : boolean)
        mContext = context;
        mService = service;
        mParentInstance = parentInstance;
!!!78270775.java!!!	create(inout context : Context) : DevicePolicyManager
        DevicePolicyManager me = new DevicePolicyManager(context, false);
        return me.mService != null ? me : null;
!!!78270903.java!!!	myUserId() : int
        return UserHandle.myUserId();
!!!78271031.java!!!	isAdminActive(inout admin : ComponentName) : boolean
        return isAdminActiveAsUser(admin, myUserId());
!!!78271159.java!!!	isAdminActiveAsUser(inout admin : ComponentName, in userId : int) : boolean
        if (mService != null) {
            try {
                return mService.isAdminActive(admin, userId);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return false;
!!!78271287.java!!!	isRemovingAdmin(inout admin : ComponentName, in userId : int) : boolean
        if (mService != null) {
            try {
                return mService.isRemovingAdmin(admin, userId);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return false;
!!!78271415.java!!!	getActiveAdmins() : ComponentName
        throwIfParentInstance("getActiveAdmins");
        return getActiveAdminsAsUser(myUserId());
!!!78271543.java!!!	getActiveAdminsAsUser(in userId : int) : ComponentName
        if (mService != null) {
            try {
                return mService.getActiveAdmins(userId);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return null;
!!!78271671.java!!!	packageHasActiveAdmins(inout packageName : String) : boolean
        return packageHasActiveAdmins(packageName, myUserId());
!!!78271799.java!!!	packageHasActiveAdmins(inout packageName : String, in userId : int) : boolean
        if (mService != null) {
            try {
                return mService.packageHasActiveAdmins(packageName, userId);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return false;
!!!78271927.java!!!	removeActiveAdmin(inout admin : ComponentName) : void
        throwIfParentInstance("removeActiveAdmin");
        if (mService != null) {
            try {
                mService.removeActiveAdmin(admin, myUserId());
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78272055.java!!!	hasGrantedPolicy(inout admin : ComponentName, in usesPolicy : int) : boolean
        throwIfParentInstance("hasGrantedPolicy");
        if (mService != null) {
            try {
                return mService.hasGrantedPolicy(admin, usesPolicy, myUserId());
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return false;
!!!78272183.java!!!	isSeparateProfileChallengeAllowed(in userHandle : int) : boolean
        if (mService != null) {
            try {
                return mService.isSeparateProfileChallengeAllowed(userHandle);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return false;
!!!78272311.java!!!	setPasswordQuality(inout admin : ComponentName, in quality : int) : void
        if (mService != null) {
            try {
                mService.setPasswordQuality(admin, quality, mParentInstance);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78272439.java!!!	getPasswordQuality(inout admin : ComponentName) : int
        return getPasswordQuality(admin, myUserId());
!!!78272567.java!!!	getPasswordQuality(inout admin : ComponentName, in userHandle : int) : int
        if (mService != null) {
            try {
                return mService.getPasswordQuality(admin, userHandle, mParentInstance);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return PASSWORD_QUALITY_UNSPECIFIED;
!!!78272695.java!!!	setPasswordMinimumLength(inout admin : ComponentName, in length : int) : void
        if (mService != null) {
            try {
                mService.setPasswordMinimumLength(admin, length, mParentInstance);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78272823.java!!!	getPasswordMinimumLength(inout admin : ComponentName) : int
        return getPasswordMinimumLength(admin, myUserId());
!!!78272951.java!!!	getPasswordMinimumLength(inout admin : ComponentName, in userHandle : int) : int
        if (mService != null) {
            try {
                return mService.getPasswordMinimumLength(admin, userHandle, mParentInstance);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return 0;
!!!78273079.java!!!	setPasswordMinimumUpperCase(inout admin : ComponentName, in length : int) : void
        if (mService != null) {
            try {
                mService.setPasswordMinimumUpperCase(admin, length, mParentInstance);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78273207.java!!!	getPasswordMinimumUpperCase(inout admin : ComponentName) : int
        return getPasswordMinimumUpperCase(admin, myUserId());
!!!78273335.java!!!	getPasswordMinimumUpperCase(inout admin : ComponentName, in userHandle : int) : int
        if (mService != null) {
            try {
                return mService.getPasswordMinimumUpperCase(admin, userHandle, mParentInstance);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return 0;
!!!78273463.java!!!	setPasswordMinimumLowerCase(inout admin : ComponentName, in length : int) : void
        if (mService != null) {
            try {
                mService.setPasswordMinimumLowerCase(admin, length, mParentInstance);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78273591.java!!!	getPasswordMinimumLowerCase(inout admin : ComponentName) : int
        return getPasswordMinimumLowerCase(admin, myUserId());
!!!78273719.java!!!	getPasswordMinimumLowerCase(inout admin : ComponentName, in userHandle : int) : int
        if (mService != null) {
            try {
                return mService.getPasswordMinimumLowerCase(admin, userHandle, mParentInstance);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return 0;
!!!78273847.java!!!	setPasswordMinimumLetters(inout admin : ComponentName, in length : int) : void
        if (mService != null) {
            try {
                mService.setPasswordMinimumLetters(admin, length, mParentInstance);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78273975.java!!!	getPasswordMinimumLetters(inout admin : ComponentName) : int
        return getPasswordMinimumLetters(admin, myUserId());
!!!78274103.java!!!	getPasswordMinimumLetters(inout admin : ComponentName, in userHandle : int) : int
        if (mService != null) {
            try {
                return mService.getPasswordMinimumLetters(admin, userHandle, mParentInstance);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return 0;
!!!78274231.java!!!	setPasswordMinimumNumeric(inout admin : ComponentName, in length : int) : void
        if (mService != null) {
            try {
                mService.setPasswordMinimumNumeric(admin, length, mParentInstance);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78274359.java!!!	getPasswordMinimumNumeric(inout admin : ComponentName) : int
        return getPasswordMinimumNumeric(admin, myUserId());
!!!78274487.java!!!	getPasswordMinimumNumeric(inout admin : ComponentName, in userHandle : int) : int
        if (mService != null) {
            try {
                return mService.getPasswordMinimumNumeric(admin, userHandle, mParentInstance);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return 0;
!!!78274615.java!!!	setPasswordMinimumSymbols(inout admin : ComponentName, in length : int) : void
        if (mService != null) {
            try {
                mService.setPasswordMinimumSymbols(admin, length, mParentInstance);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78274743.java!!!	getPasswordMinimumSymbols(inout admin : ComponentName) : int
        return getPasswordMinimumSymbols(admin, myUserId());
!!!78274871.java!!!	getPasswordMinimumSymbols(inout admin : ComponentName, in userHandle : int) : int
        if (mService != null) {
            try {
                return mService.getPasswordMinimumSymbols(admin, userHandle, mParentInstance);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return 0;
!!!78274999.java!!!	setPasswordMinimumNonLetter(inout admin : ComponentName, in length : int) : void
        if (mService != null) {
            try {
                mService.setPasswordMinimumNonLetter(admin, length, mParentInstance);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78275127.java!!!	getPasswordMinimumNonLetter(inout admin : ComponentName) : int
        return getPasswordMinimumNonLetter(admin, myUserId());
!!!78275255.java!!!	getPasswordMinimumNonLetter(inout admin : ComponentName, in userHandle : int) : int
        if (mService != null) {
            try {
                return mService.getPasswordMinimumNonLetter(admin, userHandle, mParentInstance);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return 0;
!!!78275383.java!!!	setPasswordHistoryLength(inout admin : ComponentName, in length : int) : void
        if (mService != null) {
            try {
                mService.setPasswordHistoryLength(admin, length, mParentInstance);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78275511.java!!!	setPasswordExpirationTimeout(inout admin : ComponentName, in timeout : long) : void
        if (mService != null) {
            try {
                mService.setPasswordExpirationTimeout(admin, timeout, mParentInstance);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78275639.java!!!	getPasswordExpirationTimeout(inout admin : ComponentName) : long
        if (mService != null) {
            try {
                return mService.getPasswordExpirationTimeout(admin, myUserId(), mParentInstance);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return 0;
!!!78275767.java!!!	getPasswordExpiration(inout admin : ComponentName) : long
        if (mService != null) {
            try {
                return mService.getPasswordExpiration(admin, myUserId(), mParentInstance);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return 0;
!!!78275895.java!!!	getPasswordHistoryLength(inout admin : ComponentName) : int
        return getPasswordHistoryLength(admin, myUserId());
!!!78276023.java!!!	getPasswordHistoryLength(inout admin : ComponentName, in userHandle : int) : int
        if (mService != null) {
            try {
                return mService.getPasswordHistoryLength(admin, userHandle, mParentInstance);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return 0;
!!!78276151.java!!!	getPasswordMaximumLength(in quality : int) : int
        // Kind-of arbitrary.
        return 16;
!!!78276279.java!!!	isActivePasswordSufficient() : boolean
        if (mService != null) {
            try {
                return mService.isActivePasswordSufficient(myUserId(), mParentInstance);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return false;
!!!78276407.java!!!	isProfileActivePasswordSufficientForParent(in userHandle : int) : boolean
        if (mService != null) {
            try {
                return mService.isProfileActivePasswordSufficientForParent(userHandle);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return false;
!!!78276535.java!!!	getCurrentFailedPasswordAttempts() : int
        return getCurrentFailedPasswordAttempts(myUserId());
!!!78276663.java!!!	getCurrentFailedPasswordAttempts(in userHandle : int) : int
        if (mService != null) {
            try {
                return mService.getCurrentFailedPasswordAttempts(userHandle, mParentInstance);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return -1;
!!!78276791.java!!!	getDoNotAskCredentialsOnBoot() : boolean
        if (mService != null) {
            try {
                return mService.getDoNotAskCredentialsOnBoot();
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return false;
!!!78276919.java!!!	setMaximumFailedPasswordsForWipe(inout admin : ComponentName, in num : int) : void
        if (mService != null) {
            try {
                mService.setMaximumFailedPasswordsForWipe(admin, num, mParentInstance);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78277047.java!!!	getMaximumFailedPasswordsForWipe(inout admin : ComponentName) : int
        return getMaximumFailedPasswordsForWipe(admin, myUserId());
!!!78277175.java!!!	getMaximumFailedPasswordsForWipe(inout admin : ComponentName, in userHandle : int) : int
        if (mService != null) {
            try {
                return mService.getMaximumFailedPasswordsForWipe(
                        admin, userHandle, mParentInstance);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return 0;
!!!78277303.java!!!	getProfileWithMinimumFailedPasswordsForWipe(in userHandle : int) : int
        if (mService != null) {
            try {
                return mService.getProfileWithMinimumFailedPasswordsForWipe(
                        userHandle, mParentInstance);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return UserHandle.USER_NULL;
!!!78277431.java!!!	resetPassword(inout password : String, in flags : int) : boolean
        throwIfParentInstance("resetPassword");
        if (mService != null) {
            try {
                return mService.resetPassword(password, flags);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return false;
!!!78277559.java!!!	setMaximumTimeToLock(inout admin : ComponentName, in timeMs : long) : void
        if (mService != null) {
            try {
                mService.setMaximumTimeToLock(admin, timeMs, mParentInstance);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78277687.java!!!	getMaximumTimeToLock(inout admin : ComponentName) : long
        return getMaximumTimeToLock(admin, myUserId());
!!!78277815.java!!!	getMaximumTimeToLock(inout admin : ComponentName, in userHandle : int) : long
        if (mService != null) {
            try {
                return mService.getMaximumTimeToLock(admin, userHandle, mParentInstance);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return 0;
!!!78277943.java!!!	getMaximumTimeToLockForUserAndProfiles(in userHandle : int) : long
        if (mService != null) {
            try {
                return mService.getMaximumTimeToLockForUserAndProfiles(userHandle);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return 0;
!!!78278071.java!!!	lockNow() : void
        if (mService != null) {
            try {
                mService.lockNow(mParentInstance);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78278199.java!!!	wipeData(in flags : int) : void
        throwIfParentInstance("wipeData");
        if (mService != null) {
            try {
                mService.wipeData(flags);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78278327.java!!!	setGlobalProxy(inout admin : ComponentName, inout proxySpec : Proxy, inout exclusionList : List<String>) : ComponentName
        throwIfParentInstance("setGlobalProxy");
        if (proxySpec == null) {
            throw new NullPointerException();
        }
        if (mService != null) {
            try {
                String hostSpec;
                String exclSpec;
                if (proxySpec.equals(Proxy.NO_PROXY)) {
                    hostSpec = null;
                    exclSpec = null;
                } else {
                    if (!proxySpec.type().equals(Proxy.Type.HTTP)) {
                        throw new IllegalArgumentException();
                    }
                    InetSocketAddress sa = (InetSocketAddress)proxySpec.address();
                    String hostName = sa.getHostName();
                    int port = sa.getPort();
                    StringBuilder hostBuilder = new StringBuilder();
                    hostSpec = hostBuilder.append(hostName)
                        .append(":").append(Integer.toString(port)).toString();
                    if (exclusionList == null) {
                        exclSpec = "";
                    } else {
                        StringBuilder listBuilder = new StringBuilder();
                        boolean firstDomain = true;
                        for (String exclDomain : exclusionList) {
                            if (!firstDomain) {
                                listBuilder = listBuilder.append(",");
                            } else {
                                firstDomain = false;
                            }
                            listBuilder = listBuilder.append(exclDomain.trim());
                        }
                        exclSpec = listBuilder.toString();
                    }
                    if (android.net.Proxy.validate(hostName, Integer.toString(port), exclSpec)
                            != android.net.Proxy.PROXY_VALID)
                        throw new IllegalArgumentException();
                }
                return mService.setGlobalProxy(admin, hostSpec, exclSpec);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return null;
!!!78278455.java!!!	setRecommendedGlobalProxy(inout admin : ComponentName, inout proxyInfo : ProxyInfo) : void
        throwIfParentInstance("setRecommendedGlobalProxy");
        if (mService != null) {
            try {
                mService.setRecommendedGlobalProxy(admin, proxyInfo);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78278583.java!!!	getGlobalProxyAdmin() : ComponentName
        if (mService != null) {
            try {
                return mService.getGlobalProxyAdmin(myUserId());
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return null;
!!!78278711.java!!!	setStorageEncryption(inout admin : ComponentName, inout encrypt : boolean) : int
        throwIfParentInstance("setStorageEncryption");
        if (mService != null) {
            try {
                return mService.setStorageEncryption(admin, encrypt);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return ENCRYPTION_STATUS_UNSUPPORTED;
!!!78278839.java!!!	getStorageEncryption(inout admin : ComponentName) : boolean
        throwIfParentInstance("getStorageEncryption");
        if (mService != null) {
            try {
                return mService.getStorageEncryption(admin, myUserId());
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return false;
!!!78278967.java!!!	getStorageEncryptionStatus() : int
        throwIfParentInstance("getStorageEncryptionStatus");
        return getStorageEncryptionStatus(myUserId());
!!!78279095.java!!!	getStorageEncryptionStatus(in userHandle : int) : int
        if (mService != null) {
            try {
                return mService.getStorageEncryptionStatus(mContext.getPackageName(), userHandle);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return ENCRYPTION_STATUS_UNSUPPORTED;
!!!78279223.java!!!	approveCaCert(inout alias : String, in userHandle : int, inout approval : boolean) : boolean
        if (mService != null) {
            try {
                return mService.approveCaCert(alias, userHandle, approval);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return false;
!!!78279351.java!!!	isCaCertApproved(inout alias : String, in userHandle : int) : boolean
        if (mService != null) {
            try {
                return mService.isCaCertApproved(alias, userHandle);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return false;
!!!78279479.java!!!	installCaCert(inout admin : ComponentName, inout certBuffer : byte [[]]) : boolean
        throwIfParentInstance("installCaCert");
        if (mService != null) {
            try {
                return mService.installCaCert(admin, certBuffer);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return false;
!!!78279607.java!!!	uninstallCaCert(inout admin : ComponentName, inout certBuffer : byte [[]]) : void
        throwIfParentInstance("uninstallCaCert");
        if (mService != null) {
            try {
                final String alias = getCaCertAlias(certBuffer);
                mService.uninstallCaCerts(admin, new String[] {alias});
            } catch (CertificateException e) {
                Log.w(TAG, "Unable to parse certificate", e);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78279735.java!!!	getInstalledCaCerts(inout admin : ComponentName) : List<byte[]>
        List<byte[]> certs = new ArrayList<byte[]>();
        throwIfParentInstance("getInstalledCaCerts");
        if (mService != null) {
            try {
                mService.enforceCanManageCaCerts(admin);
                final TrustedCertificateStore certStore = new TrustedCertificateStore();
                for (String alias : certStore.userAliases()) {
                    try {
                        certs.add(certStore.getCertificate(alias).getEncoded());
                    } catch (CertificateException ce) {
                        Log.w(TAG, "Could not encode certificate: " + alias, ce);
                    }
                }
            } catch (RemoteException re) {
                throw re.rethrowFromSystemServer();
            }
        }
        return certs;
!!!78279863.java!!!	uninstallAllUserCaCerts(inout admin : ComponentName) : void
        throwIfParentInstance("uninstallAllUserCaCerts");
        if (mService != null) {
            try {
                mService.uninstallCaCerts(admin, new TrustedCertificateStore().userAliases()
                        .toArray(new String[0]));
            } catch (RemoteException re) {
                throw re.rethrowFromSystemServer();
            }
        }
!!!78279991.java!!!	hasCaCertInstalled(inout admin : ComponentName, inout certBuffer : byte [[]]) : boolean
        throwIfParentInstance("hasCaCertInstalled");
        if (mService != null) {
            try {
                mService.enforceCanManageCaCerts(admin);
                return getCaCertAlias(certBuffer) != null;
            } catch (RemoteException re) {
                throw re.rethrowFromSystemServer();
            } catch (CertificateException ce) {
                Log.w(TAG, "Could not parse certificate", ce);
            }
        }
        return false;
!!!78280119.java!!!	installKeyPair(inout admin : ComponentName, inout privKey : PrivateKey, inout cert : Certificate, inout alias : String) : boolean
        return installKeyPair(admin, privKey, new Certificate[] {cert}, alias, false);
!!!78280247.java!!!	installKeyPair(inout admin : ComponentName, inout privKey : PrivateKey, inout certs : Certificate [[]], inout alias : String, inout requestAccess : boolean) : boolean
        throwIfParentInstance("installKeyPair");
        try {
            final byte[] pemCert = Credentials.convertToPem(certs[0]);
            byte[] pemChain = null;
            if (certs.length > 1) {
                pemChain = Credentials.convertToPem(Arrays.copyOfRange(certs, 1, certs.length));
            }
            final byte[] pkcs8Key = KeyFactory.getInstance(privKey.getAlgorithm())
                    .getKeySpec(privKey, PKCS8EncodedKeySpec.class).getEncoded();
            return mService.installKeyPair(admin, pkcs8Key, pemCert, pemChain, alias,
                    requestAccess);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
            Log.w(TAG, "Failed to obtain private key material", e);
        } catch (CertificateException | IOException e) {
            Log.w(TAG, "Could not pem-encode certificate", e);
        }
        return false;
!!!78280375.java!!!	removeKeyPair(inout admin : ComponentName, inout alias : String) : boolean
        throwIfParentInstance("removeKeyPair");
        try {
            return mService.removeKeyPair(admin, alias);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!78280503.java!!!	getCaCertAlias(inout certBuffer : byte [[]]) : String
        final CertificateFactory certFactory = CertificateFactory.getInstance("X.509");
        final X509Certificate cert = (X509Certificate) certFactory.generateCertificate(
                              new ByteArrayInputStream(certBuffer));
        return new TrustedCertificateStore().getCertificateAlias(cert);
!!!78280631.java!!!	setCertInstallerPackage(inout admin : ComponentName, inout installerPackage : String) : void
        throwIfParentInstance("setCertInstallerPackage");
        if (mService != null) {
            try {
                mService.setCertInstallerPackage(admin, installerPackage);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78280759.java!!!	getCertInstallerPackage(inout admin : ComponentName) : String
        throwIfParentInstance("getCertInstallerPackage");
        if (mService != null) {
            try {
                return mService.getCertInstallerPackage(admin);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return null;
!!!78280887.java!!!	setAlwaysOnVpnPackage(inout admin : ComponentName, inout vpnPackage : String) : void
        setAlwaysOnVpnPackage(admin, vpnPackage, /* lockdownEnabled */ true);
!!!78281015.java!!!	setAlwaysOnVpnPackage(inout admin : ComponentName, inout vpnPackage : String, inout lockdownEnabled : boolean) : void
        throwIfParentInstance("setAlwaysOnVpnPackage");
        if (mService != null) {
            try {
                if (!mService.setAlwaysOnVpnPackage(admin, vpnPackage, lockdownEnabled)) {
                    throw new NameNotFoundException(vpnPackage);
                }
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78281143.java!!!	getAlwaysOnVpnPackage(inout admin : ComponentName) : String
        throwIfParentInstance("getAlwaysOnVpnPackage");
        if (mService != null) {
            try {
                return mService.getAlwaysOnVpnPackage(admin);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return null;
!!!78281271.java!!!	setCameraDisabled(inout admin : ComponentName, inout disabled : boolean) : void
        throwIfParentInstance("setCameraDisabled");
        if (mService != null) {
            try {
                mService.setCameraDisabled(admin, disabled);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78281399.java!!!	getCameraDisabled(inout admin : ComponentName) : boolean
        throwIfParentInstance("getCameraDisabled");
        return getCameraDisabled(admin, myUserId());
!!!78281527.java!!!	getCameraDisabled(inout admin : ComponentName, in userHandle : int) : boolean
        if (mService != null) {
            try {
                return mService.getCameraDisabled(admin, userHandle);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return false;
!!!78281655.java!!!	requestBugreport(inout admin : ComponentName) : boolean
        throwIfParentInstance("requestBugreport");
        if (mService != null) {
            try {
                return mService.requestBugreport(admin);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return false;
!!!78281783.java!!!	getGuestUserDisabled(inout admin : ComponentName) : boolean
        // Currently guest users can always be created if multi-user is enabled
        // TODO introduce a policy for guest user creation
        return false;
!!!78281911.java!!!	setScreenCaptureDisabled(inout admin : ComponentName, inout disabled : boolean) : void
        throwIfParentInstance("setScreenCaptureDisabled");
        if (mService != null) {
            try {
                mService.setScreenCaptureDisabled(admin, disabled);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78282039.java!!!	getScreenCaptureDisabled(inout admin : ComponentName) : boolean
        throwIfParentInstance("getScreenCaptureDisabled");
        return getScreenCaptureDisabled(admin, myUserId());
!!!78282167.java!!!	getScreenCaptureDisabled(inout admin : ComponentName, in userHandle : int) : boolean
        if (mService != null) {
            try {
                return mService.getScreenCaptureDisabled(admin, userHandle);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return false;
!!!78282295.java!!!	setAutoTimeRequired(inout admin : ComponentName, inout required : boolean) : void
        throwIfParentInstance("setAutoTimeRequired");
        if (mService != null) {
            try {
                mService.setAutoTimeRequired(admin, required);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78282423.java!!!	getAutoTimeRequired() : boolean
        throwIfParentInstance("getAutoTimeRequired");
        if (mService != null) {
            try {
                return mService.getAutoTimeRequired();
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return false;
!!!78282551.java!!!	setForceEphemeralUsers(inout admin : ComponentName, inout forceEphemeralUsers : boolean) : void
        throwIfParentInstance("setForceEphemeralUsers");
        if (mService != null) {
            try {
                mService.setForceEphemeralUsers(admin, forceEphemeralUsers);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78282679.java!!!	getForceEphemeralUsers(inout admin : ComponentName) : boolean
        throwIfParentInstance("getForceEphemeralUsers");
        if (mService != null) {
            try {
                return mService.getForceEphemeralUsers(admin);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return false;
!!!78282807.java!!!	setKeyguardDisabledFeatures(inout admin : ComponentName, in which : int) : void
        if (mService != null) {
            try {
                mService.setKeyguardDisabledFeatures(admin, which, mParentInstance);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78282935.java!!!	getKeyguardDisabledFeatures(inout admin : ComponentName) : int
        return getKeyguardDisabledFeatures(admin, myUserId());
!!!78283063.java!!!	getKeyguardDisabledFeatures(inout admin : ComponentName, in userHandle : int) : int
        if (mService != null) {
            try {
                return mService.getKeyguardDisabledFeatures(admin, userHandle, mParentInstance);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return KEYGUARD_DISABLE_FEATURES_NONE;
!!!78283191.java!!!	setActiveAdmin(inout policyReceiver : ComponentName, inout refreshing : boolean, in userHandle : int) : void
        if (mService != null) {
            try {
                mService.setActiveAdmin(policyReceiver, refreshing, userHandle);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78283319.java!!!	setActiveAdmin(inout policyReceiver : ComponentName, inout refreshing : boolean) : void
        setActiveAdmin(policyReceiver, refreshing, myUserId());
!!!78283447.java!!!	getRemoveWarning(inout admin : ComponentName, inout result : RemoteCallback) : void
        if (mService != null) {
            try {
                mService.getRemoveWarning(admin, result, myUserId());
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78283575.java!!!	setActivePasswordState(in quality : int, in length : int, in letters : int, in uppercase : int, in lowercase : int, in numbers : int, in symbols : int, in nonletter : int, in userHandle : int) : void
        if (mService != null) {
            try {
                mService.setActivePasswordState(quality, length, letters, uppercase, lowercase,
                        numbers, symbols, nonletter, userHandle);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78283703.java!!!	reportFailedPasswordAttempt(in userHandle : int) : void
        if (mService != null) {
            try {
                mService.reportFailedPasswordAttempt(userHandle);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78283831.java!!!	reportSuccessfulPasswordAttempt(in userHandle : int) : void
        if (mService != null) {
            try {
                mService.reportSuccessfulPasswordAttempt(userHandle);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78283959.java!!!	reportFailedFingerprintAttempt(in userHandle : int) : void
        if (mService != null) {
            try {
                mService.reportFailedFingerprintAttempt(userHandle);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78284087.java!!!	reportSuccessfulFingerprintAttempt(in userHandle : int) : void
        if (mService != null) {
            try {
                mService.reportSuccessfulFingerprintAttempt(userHandle);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78284215.java!!!	reportKeyguardDismissed(in userHandle : int) : void
        if (mService != null) {
            try {
                mService.reportKeyguardDismissed(userHandle);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78284343.java!!!	reportKeyguardSecured(in userHandle : int) : void
        if (mService != null) {
            try {
                mService.reportKeyguardSecured(userHandle);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78284471.java!!!	setDeviceOwner(inout who : ComponentName) : boolean
        return setDeviceOwner(who, null);
!!!78284599.java!!!	setDeviceOwner(inout who : ComponentName, in userId : int) : boolean
        return setDeviceOwner(who, null, userId);
!!!78284727.java!!!	setDeviceOwner(inout who : ComponentName, inout ownerName : String) : boolean
        return setDeviceOwner(who, ownerName, UserHandle.USER_SYSTEM);
!!!78284855.java!!!	setDeviceOwner(inout who : ComponentName, inout ownerName : String, in userId : int) : boolean
        if (mService != null) {
            try {
                return mService.setDeviceOwner(who, ownerName, userId);
            } catch (RemoteException re) {
                throw re.rethrowFromSystemServer();
            }
        }
        return false;
!!!78284983.java!!!	isDeviceOwnerApp(inout packageName : String) : boolean
        throwIfParentInstance("isDeviceOwnerApp");
        return isDeviceOwnerAppOnCallingUser(packageName);
!!!78285111.java!!!	isDeviceOwnerAppOnCallingUser(inout packageName : String) : boolean
        return isDeviceOwnerAppOnAnyUserInner(packageName, /* callingUserOnly =*/ true);
!!!78285239.java!!!	isDeviceOwnerAppOnAnyUser(inout packageName : String) : boolean
        return isDeviceOwnerAppOnAnyUserInner(packageName, /* callingUserOnly =*/ false);
!!!78285367.java!!!	getDeviceOwnerComponentOnCallingUser() : ComponentName
        return getDeviceOwnerComponentInner(/* callingUserOnly =*/ true);
!!!78285495.java!!!	getDeviceOwnerComponentOnAnyUser() : ComponentName
        return getDeviceOwnerComponentInner(/* callingUserOnly =*/ false);
!!!78285623.java!!!	isDeviceOwnerAppOnAnyUserInner(inout packageName : String, inout callingUserOnly : boolean) : boolean
        if (packageName == null) {
            return false;
        }
        final ComponentName deviceOwner = getDeviceOwnerComponentInner(callingUserOnly);
        if (deviceOwner == null) {
            return false;
        }
        return packageName.equals(deviceOwner.getPackageName());
!!!78285751.java!!!	getDeviceOwnerComponentInner(inout callingUserOnly : boolean) : ComponentName
        if (mService != null) {
            try {
                return mService.getDeviceOwnerComponent(callingUserOnly);
            } catch (RemoteException re) {
                throw re.rethrowFromSystemServer();
            }
        }
        return null;
!!!78285879.java!!!	getDeviceOwnerUserId() : int
        if (mService != null) {
            try {
                return mService.getDeviceOwnerUserId();
            } catch (RemoteException re) {
                throw re.rethrowFromSystemServer();
            }
        }
        return UserHandle.USER_NULL;
!!!78286007.java!!!	clearDeviceOwnerApp(inout packageName : String) : void
        throwIfParentInstance("clearDeviceOwnerApp");
        if (mService != null) {
            try {
                mService.clearDeviceOwner(packageName);
            } catch (RemoteException re) {
                throw re.rethrowFromSystemServer();
            }
        }
!!!78286135.java!!!	getDeviceOwner() : String
        throwIfParentInstance("getDeviceOwner");
        final ComponentName name = getDeviceOwnerComponentOnCallingUser();
        return name != null ? name.getPackageName() : null;
!!!78286263.java!!!	isDeviceManaged() : boolean
        return getDeviceOwnerComponentOnAnyUser() != null;
!!!78286391.java!!!	getDeviceOwnerNameOnAnyUser() : String
        throwIfParentInstance("getDeviceOwnerNameOnAnyUser");
        if (mService != null) {
            try {
                return mService.getDeviceOwnerName();
            } catch (RemoteException re) {
                throw re.rethrowFromSystemServer();
            }
        }
        return null;
!!!78286519.java!!!	getDeviceInitializerApp() : String
        return null;
!!!78286647.java!!!	getDeviceInitializerComponent() : ComponentName
        return null;
!!!78286775.java!!!	setActiveProfileOwner(inout admin : ComponentName, inout ownerName : String) : boolean
        throwIfParentInstance("setActiveProfileOwner");
        if (mService != null) {
            try {
                final int myUserId = myUserId();
                mService.setActiveAdmin(admin, false, myUserId);
                return mService.setProfileOwner(admin, ownerName, myUserId);
            } catch (RemoteException re) {
                throw re.rethrowFromSystemServer();
            }
        }
        return false;
!!!78286903.java!!!	clearProfileOwner(inout admin : ComponentName) : void
        throwIfParentInstance("clearProfileOwner");
        if (mService != null) {
            try {
                mService.clearProfileOwner(admin);
            } catch (RemoteException re) {
                throw re.rethrowFromSystemServer();
            }
        }
!!!78287031.java!!!	hasUserSetupCompleted() : boolean
        if (mService != null) {
            try {
                return mService.hasUserSetupCompleted();
            } catch (RemoteException re) {
                throw re.rethrowFromSystemServer();
            }
        }
        return true;
!!!78287159.java!!!	setProfileOwner(inout admin : ComponentName, inout ownerName : String, in userHandle : int) : boolean
        if (mService != null) {
            try {
                if (ownerName == null) {
                    ownerName = "";
                }
                return mService.setProfileOwner(admin, ownerName, userHandle);
            } catch (RemoteException re) {
                throw re.rethrowFromSystemServer();
            }
        }
        return false;
!!!78287287.java!!!	setDeviceOwnerLockScreenInfo(inout admin : ComponentName, inout info : CharSequence) : void
        throwIfParentInstance("setDeviceOwnerLockScreenInfo");
        if (mService != null) {
            try {
                mService.setDeviceOwnerLockScreenInfo(admin, info);
            } catch (RemoteException re) {
                throw re.rethrowFromSystemServer();
            }
        }
!!!78287415.java!!!	getDeviceOwnerLockScreenInfo() : CharSequence
        throwIfParentInstance("getDeviceOwnerLockScreenInfo");
        if (mService != null) {
            try {
                return mService.getDeviceOwnerLockScreenInfo();
            } catch (RemoteException re) {
                throw re.rethrowFromSystemServer();
            }
        }
        return null;
!!!78287543.java!!!	setPackagesSuspended(inout admin : ComponentName, inout packageNames : String [[]], inout suspended : boolean) : String
        throwIfParentInstance("setPackagesSuspended");
        if (mService != null) {
            try {
                return mService.setPackagesSuspended(admin, packageNames, suspended);
            } catch (RemoteException re) {
                throw re.rethrowFromSystemServer();
            }
        }
        return packageNames;
!!!78287671.java!!!	isPackageSuspended(inout admin : ComponentName, inout packageName : String) : boolean
        throwIfParentInstance("isPackageSuspended");
        if (mService != null) {
            try {
                return mService.isPackageSuspended(admin, packageName);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            } catch (IllegalArgumentException ex) {
                throw new NameNotFoundException(packageName);
            }
        }
        return false;
!!!78287799.java!!!	setProfileEnabled(inout admin : ComponentName) : void
        throwIfParentInstance("setProfileEnabled");
        if (mService != null) {
            try {
                mService.setProfileEnabled(admin);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78287927.java!!!	setProfileName(inout admin : ComponentName, inout profileName : String) : void
        throwIfParentInstance("setProfileName");
        if (mService != null) {
            try {
                mService.setProfileName(admin, profileName);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78288055.java!!!	isProfileOwnerApp(inout packageName : String) : boolean
        throwIfParentInstance("isProfileOwnerApp");
        if (mService != null) {
            try {
                ComponentName profileOwner = mService.getProfileOwner(myUserId());
                return profileOwner != null
                        && profileOwner.getPackageName().equals(packageName);
            } catch (RemoteException re) {
                throw re.rethrowFromSystemServer();
            }
        }
        return false;
!!!78288183.java!!!	getProfileOwner() : ComponentName
        throwIfParentInstance("getProfileOwner");
        return getProfileOwnerAsUser(Process.myUserHandle().getIdentifier());
!!!78288311.java!!!	getProfileOwnerAsUser(in userId : int) : ComponentName
        if (mService != null) {
            try {
                return mService.getProfileOwner(userId);
            } catch (RemoteException re) {
                throw re.rethrowFromSystemServer();
            }
        }
        return null;
!!!78288439.java!!!	getProfileOwnerName() : String
        if (mService != null) {
            try {
                return mService.getProfileOwnerName(Process.myUserHandle().getIdentifier());
            } catch (RemoteException re) {
                throw re.rethrowFromSystemServer();
            }
        }
        return null;
!!!78288567.java!!!	getProfileOwnerNameAsUser(in userId : int) : String
        throwIfParentInstance("getProfileOwnerNameAsUser");
        if (mService != null) {
            try {
                return mService.getProfileOwnerName(userId);
            } catch (RemoteException re) {
                throw re.rethrowFromSystemServer();
            }
        }
        return null;
!!!78288695.java!!!	addPersistentPreferredActivity(inout admin : ComponentName, inout filter : IntentFilter, inout activity : ComponentName) : void
        throwIfParentInstance("addPersistentPreferredActivity");
        if (mService != null) {
            try {
                mService.addPersistentPreferredActivity(admin, filter, activity);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78288823.java!!!	clearPackagePersistentPreferredActivities(inout admin : ComponentName, inout packageName : String) : void
        throwIfParentInstance("clearPackagePersistentPreferredActivities");
        if (mService != null) {
            try {
                mService.clearPackagePersistentPreferredActivities(admin, packageName);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78288951.java!!!	setApplicationRestrictionsManagingPackage(inout admin : ComponentName, inout packageName : String) : void
        throwIfParentInstance("setApplicationRestrictionsManagingPackage");
        if (mService != null) {
            try {
                if (!mService.setApplicationRestrictionsManagingPackage(admin, packageName)) {
                    throw new NameNotFoundException(packageName);
                }
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78289079.java!!!	getApplicationRestrictionsManagingPackage(inout admin : ComponentName) : String
        throwIfParentInstance("getApplicationRestrictionsManagingPackage");
        if (mService != null) {
            try {
                return mService.getApplicationRestrictionsManagingPackage(admin);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return null;
!!!78289207.java!!!	isCallerApplicationRestrictionsManagingPackage() : boolean
        throwIfParentInstance("isCallerApplicationRestrictionsManagingPackage");
        if (mService != null) {
            try {
                return mService.isCallerApplicationRestrictionsManagingPackage();
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return false;
!!!78289335.java!!!	setApplicationRestrictions(inout admin : ComponentName, inout packageName : String, inout settings : Bundle) : void
        throwIfParentInstance("setApplicationRestrictions");
        if (mService != null) {
            try {
                mService.setApplicationRestrictions(admin, packageName, settings);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78289463.java!!!	setTrustAgentConfiguration(inout admin : ComponentName, inout target : ComponentName, inout configuration : PersistableBundle) : void
        if (mService != null) {
            try {
                mService.setTrustAgentConfiguration(admin, target, configuration, mParentInstance);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78289591.java!!!	getTrustAgentConfiguration(inout admin : ComponentName, inout agent : ComponentName) : PersistableBundle
        return getTrustAgentConfiguration(admin, agent, myUserId());
!!!78289719.java!!!	getTrustAgentConfiguration(inout admin : ComponentName, inout agent : ComponentName, in userHandle : int) : PersistableBundle
        if (mService != null) {
            try {
                return mService.getTrustAgentConfiguration(admin, agent, userHandle,
                        mParentInstance);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return new ArrayList<PersistableBundle>(); // empty list
!!!78289847.java!!!	setCrossProfileCallerIdDisabled(inout admin : ComponentName, inout disabled : boolean) : void
        throwIfParentInstance("setCrossProfileCallerIdDisabled");
        if (mService != null) {
            try {
                mService.setCrossProfileCallerIdDisabled(admin, disabled);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78289975.java!!!	getCrossProfileCallerIdDisabled(inout admin : ComponentName) : boolean
        throwIfParentInstance("getCrossProfileCallerIdDisabled");
        if (mService != null) {
            try {
                return mService.getCrossProfileCallerIdDisabled(admin);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return false;
!!!78290103.java!!!	getCrossProfileCallerIdDisabled(inout userHandle : UserHandle) : boolean
        if (mService != null) {
            try {
                return mService.getCrossProfileCallerIdDisabledForUser(userHandle.getIdentifier());
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return false;
!!!78290231.java!!!	setCrossProfileContactsSearchDisabled(inout admin : ComponentName, inout disabled : boolean) : void
        throwIfParentInstance("setCrossProfileContactsSearchDisabled");
        if (mService != null) {
            try {
                mService.setCrossProfileContactsSearchDisabled(admin, disabled);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78290359.java!!!	getCrossProfileContactsSearchDisabled(inout admin : ComponentName) : boolean
        throwIfParentInstance("getCrossProfileContactsSearchDisabled");
        if (mService != null) {
            try {
                return mService.getCrossProfileContactsSearchDisabled(admin);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return false;
!!!78290487.java!!!	getCrossProfileContactsSearchDisabled(inout userHandle : UserHandle) : boolean
        if (mService != null) {
            try {
                return mService
                        .getCrossProfileContactsSearchDisabledForUser(userHandle.getIdentifier());
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return false;
!!!78290615.java!!!	startManagedQuickContact(inout actualLookupKey : String, in actualContactId : long, inout isContactIdIgnored : boolean, in directoryId : long, inout originalIntent : Intent) : void
        if (mService != null) {
            try {
                mService.startManagedQuickContact(actualLookupKey, actualContactId,
                        isContactIdIgnored, directoryId, originalIntent);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78290743.java!!!	startManagedQuickContact(inout actualLookupKey : String, in actualContactId : long, inout originalIntent : Intent) : void
        startManagedQuickContact(actualLookupKey, actualContactId, false, Directory.DEFAULT,
                originalIntent);
!!!78290871.java!!!	setBluetoothContactSharingDisabled(inout admin : ComponentName, inout disabled : boolean) : void
        throwIfParentInstance("setBluetoothContactSharingDisabled");
        if (mService != null) {
            try {
                mService.setBluetoothContactSharingDisabled(admin, disabled);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78290999.java!!!	getBluetoothContactSharingDisabled(inout admin : ComponentName) : boolean
        throwIfParentInstance("getBluetoothContactSharingDisabled");
        if (mService != null) {
            try {
                return mService.getBluetoothContactSharingDisabled(admin);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return true;
!!!78291127.java!!!	getBluetoothContactSharingDisabled(inout userHandle : UserHandle) : boolean
        if (mService != null) {
            try {
                return mService.getBluetoothContactSharingDisabledForUser(userHandle
                        .getIdentifier());
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return true;
!!!78291255.java!!!	addCrossProfileIntentFilter(inout admin : ComponentName, inout filter : IntentFilter, in flags : int) : void
        throwIfParentInstance("addCrossProfileIntentFilter");
        if (mService != null) {
            try {
                mService.addCrossProfileIntentFilter(admin, filter, flags);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78291383.java!!!	clearCrossProfileIntentFilters(inout admin : ComponentName) : void
        throwIfParentInstance("clearCrossProfileIntentFilters");
        if (mService != null) {
            try {
                mService.clearCrossProfileIntentFilters(admin);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78291511.java!!!	setPermittedAccessibilityServices(inout admin : ComponentName, inout packageNames : List<String>) : boolean
        throwIfParentInstance("setPermittedAccessibilityServices");
        if (mService != null) {
            try {
                return mService.setPermittedAccessibilityServices(admin, packageNames);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return false;
!!!78291639.java!!!	getPermittedAccessibilityServices(inout admin : ComponentName) : String
        throwIfParentInstance("getPermittedAccessibilityServices");
        if (mService != null) {
            try {
                return mService.getPermittedAccessibilityServices(admin);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return null;
!!!78291767.java!!!	isAccessibilityServicePermittedByAdmin(inout admin : ComponentName, inout packageName : String, in userHandle : int) : boolean
        if (mService != null) {
            try {
                return mService.isAccessibilityServicePermittedByAdmin(admin, packageName,
                        userHandle);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return false;
!!!78291895.java!!!	getPermittedAccessibilityServices(in userId : int) : String
        throwIfParentInstance("getPermittedAccessibilityServices");
        if (mService != null) {
            try {
                return mService.getPermittedAccessibilityServicesForUser(userId);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return null;
!!!78292023.java!!!	setPermittedInputMethods(inout admin : ComponentName, inout packageNames : List<String>) : boolean
        throwIfParentInstance("setPermittedInputMethods");
        if (mService != null) {
            try {
                return mService.setPermittedInputMethods(admin, packageNames);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return false;
!!!78292151.java!!!	getPermittedInputMethods(inout admin : ComponentName) : String
        throwIfParentInstance("getPermittedInputMethods");
        if (mService != null) {
            try {
                return mService.getPermittedInputMethods(admin);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return null;
!!!78292279.java!!!	isInputMethodPermittedByAdmin(inout admin : ComponentName, inout packageName : String, in userHandle : int) : boolean
        if (mService != null) {
            try {
                return mService.isInputMethodPermittedByAdmin(admin, packageName, userHandle);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return false;
!!!78292407.java!!!	getPermittedInputMethodsForCurrentUser() : String
        throwIfParentInstance("getPermittedInputMethodsForCurrentUser");
        if (mService != null) {
            try {
                return mService.getPermittedInputMethodsForCurrentUser();
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return null;
!!!78292535.java!!!	getKeepUninstalledPackages(inout admin : ComponentName) : String
        throwIfParentInstance("getKeepUninstalledPackages");
        if (mService != null) {
            try {
                return mService.getKeepUninstalledPackages(admin);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return null;
!!!78292663.java!!!	setKeepUninstalledPackages(inout admin : ComponentName, inout packageNames : List<String>) : void
        throwIfParentInstance("setKeepUninstalledPackages");
        if (mService != null) {
            try {
                mService.setKeepUninstalledPackages(admin, packageNames);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78292791.java!!!	createUser(inout admin : ComponentName, inout name : String) : UserHandle
        return null;
!!!78292919.java!!!	createAndInitializeUser(inout admin : ComponentName, inout name : String, inout ownerName : String, inout profileOwnerComponent : ComponentName, inout adminExtras : Bundle) : UserHandle
        return null;
!!!78293047.java!!!	createAndManageUser(inout admin : ComponentName, inout name : String, inout profileOwner : ComponentName, inout adminExtras : PersistableBundle, in flags : int) : UserHandle
        throwIfParentInstance("createAndManageUser");
        try {
            return mService.createAndManageUser(admin, name, profileOwner, adminExtras, flags);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!78293175.java!!!	removeUser(inout admin : ComponentName, inout userHandle : UserHandle) : boolean
        throwIfParentInstance("removeUser");
        try {
            return mService.removeUser(admin, userHandle);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!78293303.java!!!	switchUser(inout admin : ComponentName, inout userHandle : UserHandle) : boolean
        throwIfParentInstance("switchUser");
        try {
            return mService.switchUser(admin, userHandle);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!78293431.java!!!	getApplicationRestrictions(inout admin : ComponentName, inout packageName : String) : Bundle
        throwIfParentInstance("getApplicationRestrictions");
        if (mService != null) {
            try {
                return mService.getApplicationRestrictions(admin, packageName);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return null;
!!!78293559.java!!!	addUserRestriction(inout admin : ComponentName, inout key : String) : void
        throwIfParentInstance("addUserRestriction");
        if (mService != null) {
            try {
                mService.setUserRestriction(admin, key, true);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78293687.java!!!	clearUserRestriction(inout admin : ComponentName, inout key : String) : void
        throwIfParentInstance("clearUserRestriction");
        if (mService != null) {
            try {
                mService.setUserRestriction(admin, key, false);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78293815.java!!!	getUserRestrictions(inout admin : ComponentName) : Bundle
        throwIfParentInstance("getUserRestrictions");
        Bundle ret = null;
        if (mService != null) {
            try {
                ret = mService.getUserRestrictions(admin);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return ret == null ? new Bundle() : ret;
!!!78293943.java!!!	setApplicationHidden(inout admin : ComponentName, inout packageName : String, inout hidden : boolean) : boolean
        throwIfParentInstance("setApplicationHidden");
        if (mService != null) {
            try {
                return mService.setApplicationHidden(admin, packageName, hidden);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return false;
!!!78294071.java!!!	isApplicationHidden(inout admin : ComponentName, inout packageName : String) : boolean
        throwIfParentInstance("isApplicationHidden");
        if (mService != null) {
            try {
                return mService.isApplicationHidden(admin, packageName);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return false;
!!!78294199.java!!!	enableSystemApp(inout admin : ComponentName, inout packageName : String) : void
        throwIfParentInstance("enableSystemApp");
        if (mService != null) {
            try {
                mService.enableSystemApp(admin, packageName);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78294327.java!!!	enableSystemApp(inout admin : ComponentName, inout intent : Intent) : int
        throwIfParentInstance("enableSystemApp");
        if (mService != null) {
            try {
                return mService.enableSystemAppWithIntent(admin, intent);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return 0;
!!!78294455.java!!!	setAccountManagementDisabled(inout admin : ComponentName, inout accountType : String, inout disabled : boolean) : void
        throwIfParentInstance("setAccountManagementDisabled");
        if (mService != null) {
            try {
                mService.setAccountManagementDisabled(admin, accountType, disabled);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78294583.java!!!	getAccountTypesWithManagementDisabled() : String
        throwIfParentInstance("getAccountTypesWithManagementDisabled");
        return getAccountTypesWithManagementDisabledAsUser(myUserId());
!!!78294711.java!!!	getAccountTypesWithManagementDisabledAsUser(in userId : int) : String
        if (mService != null) {
            try {
                return mService.getAccountTypesWithManagementDisabledAsUser(userId);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }

        return null;
!!!78294839.java!!!	setLockTaskPackages(inout admin : ComponentName, inout packages : String [[]]) : void
        throwIfParentInstance("setLockTaskPackages");
        if (mService != null) {
            try {
                mService.setLockTaskPackages(admin, packages);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78294967.java!!!	getLockTaskPackages(inout admin : ComponentName) : String
        throwIfParentInstance("getLockTaskPackages");
        if (mService != null) {
            try {
                return mService.getLockTaskPackages(admin);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return null;
!!!78295095.java!!!	isLockTaskPermitted(inout pkg : String) : boolean
        throwIfParentInstance("isLockTaskPermitted");
        if (mService != null) {
            try {
                return mService.isLockTaskPermitted(pkg);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return false;
!!!78295223.java!!!	setGlobalSetting(inout admin : ComponentName, inout setting : String, inout value : String) : void
        throwIfParentInstance("setGlobalSetting");
        if (mService != null) {
            try {
                mService.setGlobalSetting(admin, setting, value);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78295351.java!!!	setSecureSetting(inout admin : ComponentName, inout setting : String, inout value : String) : void
        throwIfParentInstance("setSecureSetting");
        if (mService != null) {
            try {
                mService.setSecureSetting(admin, setting, value);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78295479.java!!!	setRestrictionsProvider(inout admin : ComponentName, inout provider : ComponentName) : void
        throwIfParentInstance("setRestrictionsProvider");
        if (mService != null) {
            try {
                mService.setRestrictionsProvider(admin, provider);
            } catch (RemoteException re) {
                throw re.rethrowFromSystemServer();
            }
        }
!!!78295607.java!!!	setMasterVolumeMuted(inout admin : ComponentName, inout on : boolean) : void
        throwIfParentInstance("setMasterVolumeMuted");
        if (mService != null) {
            try {
                mService.setMasterVolumeMuted(admin, on);
            } catch (RemoteException re) {
                throw re.rethrowFromSystemServer();
            }
        }
!!!78295735.java!!!	isMasterVolumeMuted(inout admin : ComponentName) : boolean
        throwIfParentInstance("isMasterVolumeMuted");
        if (mService != null) {
            try {
                return mService.isMasterVolumeMuted(admin);
            } catch (RemoteException re) {
                throw re.rethrowFromSystemServer();
            }
        }
        return false;
!!!78295863.java!!!	setUninstallBlocked(inout admin : ComponentName, inout packageName : String, inout uninstallBlocked : boolean) : void
        throwIfParentInstance("setUninstallBlocked");
        if (mService != null) {
            try {
                mService.setUninstallBlocked(admin, packageName, uninstallBlocked);
            } catch (RemoteException re) {
                throw re.rethrowFromSystemServer();
            }
        }
!!!78295991.java!!!	isUninstallBlocked(inout admin : ComponentName, inout packageName : String) : boolean
        throwIfParentInstance("isUninstallBlocked");
        if (mService != null) {
            try {
                return mService.isUninstallBlocked(admin, packageName);
            } catch (RemoteException re) {
                throw re.rethrowFromSystemServer();
            }
        }
        return false;
!!!78296119.java!!!	addCrossProfileWidgetProvider(inout admin : ComponentName, inout packageName : String) : boolean
        throwIfParentInstance("addCrossProfileWidgetProvider");
        if (mService != null) {
            try {
                return mService.addCrossProfileWidgetProvider(admin, packageName);
            } catch (RemoteException re) {
                throw re.rethrowFromSystemServer();
            }
        }
        return false;
!!!78296247.java!!!	removeCrossProfileWidgetProvider(inout admin : ComponentName, inout packageName : String) : boolean
        throwIfParentInstance("removeCrossProfileWidgetProvider");
        if (mService != null) {
            try {
                return mService.removeCrossProfileWidgetProvider(admin, packageName);
            } catch (RemoteException re) {
                throw re.rethrowFromSystemServer();
            }
        }
        return false;
!!!78296375.java!!!	getCrossProfileWidgetProviders(inout admin : ComponentName) : String
        throwIfParentInstance("getCrossProfileWidgetProviders");
        if (mService != null) {
            try {
                List<String> providers = mService.getCrossProfileWidgetProviders(admin);
                if (providers != null) {
                    return providers;
                }
            } catch (RemoteException re) {
                throw re.rethrowFromSystemServer();
            }
        }
        return Collections.emptyList();
!!!78296503.java!!!	setUserIcon(inout admin : ComponentName, inout icon : Bitmap) : void
        throwIfParentInstance("setUserIcon");
        try {
            mService.setUserIcon(admin, icon);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!78296631.java!!!	setSystemUpdatePolicy(inout admin : ComponentName, inout policy : SystemUpdatePolicy) : void
        throwIfParentInstance("setSystemUpdatePolicy");
        if (mService != null) {
            try {
                mService.setSystemUpdatePolicy(admin, policy);
            } catch (RemoteException re) {
                throw re.rethrowFromSystemServer();
            }
        }
!!!78296759.java!!!	getSystemUpdatePolicy() : SystemUpdatePolicy
        throwIfParentInstance("getSystemUpdatePolicy");
        if (mService != null) {
            try {
                return mService.getSystemUpdatePolicy();
            } catch (RemoteException re) {
                throw re.rethrowFromSystemServer();
            }
        }
        return null;
!!!78296887.java!!!	setKeyguardDisabled(inout admin : ComponentName, inout disabled : boolean) : boolean
        throwIfParentInstance("setKeyguardDisabled");
        try {
            return mService.setKeyguardDisabled(admin, disabled);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!78297015.java!!!	setStatusBarDisabled(inout admin : ComponentName, inout disabled : boolean) : boolean
        throwIfParentInstance("setStatusBarDisabled");
        try {
            return mService.setStatusBarDisabled(admin, disabled);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!78297143.java!!!	notifyPendingSystemUpdate(in updateReceivedTime : long) : void
        throwIfParentInstance("notifyPendingSystemUpdate");
        if (mService != null) {
            try {
                mService.notifyPendingSystemUpdate(updateReceivedTime);
            } catch (RemoteException re) {
                throw re.rethrowFromSystemServer();
            }
        }
!!!78297271.java!!!	setPermissionPolicy(inout admin : ComponentName, in policy : int) : void
        throwIfParentInstance("setPermissionPolicy");
        try {
            mService.setPermissionPolicy(admin, policy);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!78297399.java!!!	getPermissionPolicy(inout admin : ComponentName) : int
        throwIfParentInstance("getPermissionPolicy");
        try {
            return mService.getPermissionPolicy(admin);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!78297527.java!!!	setPermissionGrantState(inout admin : ComponentName, inout packageName : String, inout permission : String, in grantState : int) : boolean
        throwIfParentInstance("setPermissionGrantState");
        try {
            return mService.setPermissionGrantState(admin, packageName, permission, grantState);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!78297655.java!!!	getPermissionGrantState(inout admin : ComponentName, inout packageName : String, inout permission : String) : int
        throwIfParentInstance("getPermissionGrantState");
        try {
            return mService.getPermissionGrantState(admin, packageName, permission);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!78297783.java!!!	isProvisioningAllowed(inout action : String) : boolean
        throwIfParentInstance("isProvisioningAllowed");
        try {
            return mService.isProvisioningAllowed(action);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!78297911.java!!!	isManagedProfile(inout admin : ComponentName) : boolean
        throwIfParentInstance("isManagedProfile");
        try {
            return mService.isManagedProfile(admin);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!78298039.java!!!	isSystemOnlyUser(inout admin : ComponentName) : boolean
        try {
            return mService.isSystemOnlyUser(admin);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!78298167.java!!!	getWifiMacAddress(inout admin : ComponentName) : String
        throwIfParentInstance("getWifiMacAddress");
        try {
            return mService.getWifiMacAddress(admin);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!78298295.java!!!	reboot(inout admin : ComponentName) : void
        throwIfParentInstance("reboot");
        try {
            mService.reboot(admin);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!78298423.java!!!	setShortSupportMessage(inout admin : ComponentName, inout message : CharSequence) : void
        throwIfParentInstance("setShortSupportMessage");
        if (mService != null) {
            try {
                mService.setShortSupportMessage(admin, message);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78298551.java!!!	getShortSupportMessage(inout admin : ComponentName) : CharSequence
        throwIfParentInstance("getShortSupportMessage");
        if (mService != null) {
            try {
                return mService.getShortSupportMessage(admin);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return null;
!!!78298679.java!!!	setLongSupportMessage(inout admin : ComponentName, inout message : CharSequence) : void
        throwIfParentInstance("setLongSupportMessage");
        if (mService != null) {
            try {
                mService.setLongSupportMessage(admin, message);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78298807.java!!!	getLongSupportMessage(inout admin : ComponentName) : CharSequence
        throwIfParentInstance("getLongSupportMessage");
        if (mService != null) {
            try {
                return mService.getLongSupportMessage(admin);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return null;
!!!78298935.java!!!	getShortSupportMessageForUser(inout admin : ComponentName, in userHandle : int) : CharSequence
        if (mService != null) {
            try {
                return mService.getShortSupportMessageForUser(admin, userHandle);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return null;
!!!78299063.java!!!	getLongSupportMessageForUser(inout admin : ComponentName, in userHandle : int) : CharSequence
        if (mService != null) {
            try {
                return mService.getLongSupportMessageForUser(admin, userHandle);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return null;
!!!78299191.java!!!	getParentProfileInstance(inout admin : ComponentName) : DevicePolicyManager
        throwIfParentInstance("getParentProfileInstance");
        try {
            if (!mService.isManagedProfile(admin)) {
                throw new SecurityException("The current user does not have a parent profile.");
            }
            return new DevicePolicyManager(mContext, true);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!78299319.java!!!	setSecurityLoggingEnabled(inout admin : ComponentName, inout enabled : boolean) : void
        throwIfParentInstance("setSecurityLoggingEnabled");
        try {
            mService.setSecurityLoggingEnabled(admin, enabled);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!78299447.java!!!	isSecurityLoggingEnabled(inout admin : ComponentName) : boolean
        throwIfParentInstance("isSecurityLoggingEnabled");
        try {
            return mService.isSecurityLoggingEnabled(admin);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!78299575.java!!!	retrieveSecurityLogs(inout admin : ComponentName) : SecurityLog::SecurityEvent
        throwIfParentInstance("retrieveSecurityLogs");
        try {
            ParceledListSlice<SecurityEvent> list = mService.retrieveSecurityLogs(admin);
            if (list != null) {
                return list.getList();
            } else {
                // Rate limit exceeded.
                return null;
            }
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!78299703.java!!!	getParentProfileInstance(inout uInfo : UserInfo) : DevicePolicyManager
        mContext.checkSelfPermission(
                android.Manifest.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS);
        if (!uInfo.isManagedProfile()) {
            throw new SecurityException("The user " + uInfo.id
                    + " does not have a parent profile.");
        }
        return new DevicePolicyManager(mContext, true);
!!!78299831.java!!!	retrievePreRebootSecurityLogs(inout admin : ComponentName) : SecurityLog::SecurityEvent
        throwIfParentInstance("retrievePreRebootSecurityLogs");
        try {
            ParceledListSlice<SecurityEvent> list = mService.retrievePreRebootSecurityLogs(admin);
            if (list != null) {
                return list.getList();
            } else {
                return null;
            }
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!78299959.java!!!	setOrganizationColor(inout admin : ComponentName, in color : int) : void
        throwIfParentInstance("setOrganizationColor");
        try {
            // always enforce alpha channel to have 100% opacity
            color |= 0xFF000000;
            mService.setOrganizationColor(admin, color);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!78300087.java!!!	setOrganizationColorForUser(in color : int, in userId : int) : void
        try {
            // always enforce alpha channel to have 100% opacity
            color |= 0xFF000000;
            mService.setOrganizationColorForUser(color, userId);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!78300215.java!!!	getOrganizationColor(inout admin : ComponentName) : int
        throwIfParentInstance("getOrganizationColor");
        try {
            return mService.getOrganizationColor(admin);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!78300343.java!!!	getOrganizationColorForUser(in userHandle : int) : int
        try {
            return mService.getOrganizationColorForUser(userHandle);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!78300471.java!!!	setOrganizationName(inout admin : ComponentName, inout title : CharSequence) : void
        throwIfParentInstance("setOrganizationName");
        try {
            mService.setOrganizationName(admin, title);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!78300599.java!!!	getOrganizationName(inout admin : ComponentName) : CharSequence
        throwIfParentInstance("getOrganizationName");
        try {
            return mService.getOrganizationName(admin);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!78300727.java!!!	getOrganizationNameForUser(in userHandle : int) : CharSequence
        try {
            return mService.getOrganizationNameForUser(userHandle);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!78300855.java!!!	getUserProvisioningState() : int
        throwIfParentInstance("getUserProvisioningState");
        if (mService != null) {
            try {
                return mService.getUserProvisioningState();
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
        return STATE_USER_UNMANAGED;
!!!78300983.java!!!	setUserProvisioningState(in state : int, in userHandle : int) : void
        if (mService != null) {
            try {
                mService.setUserProvisioningState(state, userHandle);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!78301111.java!!!	setAffiliationIds(inout admin : ComponentName, inout ids : Set<String>) : void
        throwIfParentInstance("setAffiliationIds");
        try {
            mService.setAffiliationIds(admin, new ArrayList<String>(ids));
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!78301239.java!!!	isAffiliatedUser() : boolean
        throwIfParentInstance("isAffiliatedUser");
        try {
            return mService != null && mService.isAffiliatedUser();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!78301367.java!!!	isUninstallInQueue(inout packageName : String) : boolean
        try {
            return mService.isUninstallInQueue(packageName);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!78301495.java!!!	uninstallPackageWithActiveAdmins(inout packageName : String) : void
        try {
            mService.uninstallPackageWithActiveAdmins(packageName);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!78301623.java!!!	forceRemoveActiveAdmin(inout adminReceiver : ComponentName, in userHandle : int) : void
        try {
            mService.forceRemoveActiveAdmin(adminReceiver, userHandle);
        } catch (RemoteException re) {
            throw re.rethrowFromSystemServer();
        }
!!!78301751.java!!!	throwIfParentInstance(inout functionName : String) : void
        if (mParentInstance) {
            throw new SecurityException(functionName + " cannot be called on the parent instance");
        }
