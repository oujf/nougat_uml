class Builder
!!!78446647.java!!!	Builder(in jobId : int, inout jobService : ComponentName)
            mJobService = jobService;
            mJobId = jobId;
!!!78446775.java!!!	setPriority(in priority : int) : JobInfo::Builder
            mPriority = priority;
            return this;
!!!78446903.java!!!	setFlags(in flags : int) : JobInfo::Builder
            mFlags = flags;
            return this;
!!!78447031.java!!!	setExtras(inout extras : PersistableBundle) : JobInfo::Builder
            mExtras = extras;
            return this;
!!!78447159.java!!!	setRequiredNetworkType(in networkType : int) : JobInfo::Builder
            mNetworkType = networkType;
            return this;
!!!78447287.java!!!	setRequiresCharging(inout requiresCharging : boolean) : JobInfo::Builder
            mRequiresCharging = requiresCharging;
            return this;
!!!78447415.java!!!	setRequiresDeviceIdle(inout requiresDeviceIdle : boolean) : JobInfo::Builder
            mRequiresDeviceIdle = requiresDeviceIdle;
            return this;
!!!78447543.java!!!	addTriggerContentUri(inout uri : JobInfo::TriggerContentUri) : JobInfo::Builder
            if (mTriggerContentUris == null) {
                mTriggerContentUris = new ArrayList<>();
            }
            mTriggerContentUris.add(uri);
            return this;
!!!78447671.java!!!	setTriggerContentUpdateDelay(in durationMs : long) : JobInfo::Builder
            mTriggerContentUpdateDelay = durationMs;
            return this;
!!!78447799.java!!!	setTriggerContentMaxDelay(in durationMs : long) : JobInfo::Builder
            mTriggerContentMaxDelay = durationMs;
            return this;
!!!78447927.java!!!	setPeriodic(in intervalMillis : long) : JobInfo::Builder
            return setPeriodic(intervalMillis, intervalMillis);
!!!78448055.java!!!	setPeriodic(in intervalMillis : long, in flexMillis : long) : JobInfo::Builder
            mIsPeriodic = true;
            mIntervalMillis = intervalMillis;
            mFlexMillis = flexMillis;
            mHasEarlyConstraint = mHasLateConstraint = true;
            return this;
!!!78448183.java!!!	setMinimumLatency(in minLatencyMillis : long) : JobInfo::Builder
            mMinLatencyMillis = minLatencyMillis;
            mHasEarlyConstraint = true;
            return this;
!!!78448311.java!!!	setOverrideDeadline(in maxExecutionDelayMillis : long) : JobInfo::Builder
            mMaxExecutionDelayMillis = maxExecutionDelayMillis;
            mHasLateConstraint = true;
            return this;
!!!78448439.java!!!	setBackoffCriteria(in initialBackoffMillis : long, in backoffPolicy : int) : JobInfo::Builder
            mBackoffPolicySet = true;
            mInitialBackoffMillis = initialBackoffMillis;
            mBackoffPolicy = backoffPolicy;
            return this;
!!!78448567.java!!!	setPersisted(inout isPersisted : boolean) : JobInfo::Builder
            mIsPersisted = isPersisted;
            return this;
!!!78448695.java!!!	build() : JobInfo
            // Allow jobs with no constraints - What am I, a database?
            if (!mHasEarlyConstraint && !mHasLateConstraint && !mRequiresCharging &&
                    !mRequiresDeviceIdle && mNetworkType == NETWORK_TYPE_NONE &&
                    mTriggerContentUris == null) {
                throw new IllegalArgumentException("You're trying to build a job with no " +
                        "constraints, this is not allowed.");
            }
            mExtras = new PersistableBundle(mExtras);  // Make our own copy.
            // Check that a deadline was not set on a periodic job.
            if (mIsPeriodic && (mMaxExecutionDelayMillis != 0L)) {
                throw new IllegalArgumentException("Can't call setOverrideDeadline() on a " +
                        "periodic job.");
            }
            if (mIsPeriodic && (mMinLatencyMillis != 0L)) {
                throw new IllegalArgumentException("Can't call setMinimumLatency() on a " +
                        "periodic job");
            }
            if (mIsPeriodic && (mTriggerContentUris != null)) {
                throw new IllegalArgumentException("Can't call addTriggerContentUri() on a " +
                        "periodic job");
            }
            if (mIsPersisted && (mTriggerContentUris != null)) {
                throw new IllegalArgumentException("Can't call addTriggerContentUri() on a " +
                        "persisted job");
            }
            if (mBackoffPolicySet && mRequiresDeviceIdle) {
                throw new IllegalArgumentException("An idle mode job will not respect any" +
                        " back-off policy, so calling setBackoffCriteria with" +
                        " setRequiresDeviceIdle is an error.");
            }
            JobInfo job = new JobInfo(this);
            if (job.isPeriodic()) {
                if (job.intervalMillis != job.getIntervalMillis()) {
                    StringBuilder builder = new StringBuilder();
                    builder.append("Specified interval for ")
                            .append(String.valueOf(mJobId))
                            .append(" is ");
                    formatDuration(mIntervalMillis, builder);
                    builder.append(". Clamped to ");
                    formatDuration(job.getIntervalMillis(), builder);
                    Log.w(TAG, builder.toString());
                }
                if (job.flexMillis != job.getFlexMillis()) {
                    StringBuilder builder = new StringBuilder();
                    builder.append("Specified flex for ")
                            .append(String.valueOf(mJobId))
                            .append(" is ");
                    formatDuration(mFlexMillis, builder);
                    builder.append(". Clamped to ");
                    formatDuration(job.getFlexMillis(), builder);
                    Log.w(TAG, builder.toString());
                }
            }
            return job;
