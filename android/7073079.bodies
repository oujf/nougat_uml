class Proxy
!!!78460727.java!!!	Proxy(inout remote : IBinder)
mRemote = remote;
!!!78460855.java!!!	asBinder() : IBinder
return mRemote;
!!!78460983.java!!!	getInterfaceDescriptor() : String
return DESCRIPTOR;
!!!78461111.java!!!	queryUsageStats(in bucketType : int, in beginTime : long, in endTime : long, inout callingPackage : String) : ParceledListSlice
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
android.content.pm.ParceledListSlice _result;
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeInt(bucketType);
_data.writeLong(beginTime);
_data.writeLong(endTime);
_data.writeString(callingPackage);
mRemote.transact(Stub.TRANSACTION_queryUsageStats, _data, _reply, 0);
_reply.readException();
if ((0!=_reply.readInt())) {
_result = android.content.pm.ParceledListSlice.CREATOR.createFromParcel(_reply);
}
else {
_result = null;
}
}
finally {
_reply.recycle();
_data.recycle();
}
return _result;
!!!78461239.java!!!	queryConfigurationStats(in bucketType : int, in beginTime : long, in endTime : long, inout callingPackage : String) : ParceledListSlice
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
android.content.pm.ParceledListSlice _result;
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeInt(bucketType);
_data.writeLong(beginTime);
_data.writeLong(endTime);
_data.writeString(callingPackage);
mRemote.transact(Stub.TRANSACTION_queryConfigurationStats, _data, _reply, 0);
_reply.readException();
if ((0!=_reply.readInt())) {
_result = android.content.pm.ParceledListSlice.CREATOR.createFromParcel(_reply);
}
else {
_result = null;
}
}
finally {
_reply.recycle();
_data.recycle();
}
return _result;
!!!78461367.java!!!	queryEvents(in beginTime : long, in endTime : long, inout callingPackage : String) : UsageEvents
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
android.app.usage.UsageEvents _result;
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeLong(beginTime);
_data.writeLong(endTime);
_data.writeString(callingPackage);
mRemote.transact(Stub.TRANSACTION_queryEvents, _data, _reply, 0);
_reply.readException();
if ((0!=_reply.readInt())) {
_result = android.app.usage.UsageEvents.CREATOR.createFromParcel(_reply);
}
else {
_result = null;
}
}
finally {
_reply.recycle();
_data.recycle();
}
return _result;
!!!78461495.java!!!	setAppInactive(inout packageName : String, inout inactive : boolean, in userId : int) : void
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeString(packageName);
_data.writeInt(((inactive)?(1):(0)));
_data.writeInt(userId);
mRemote.transact(Stub.TRANSACTION_setAppInactive, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
!!!78461623.java!!!	isAppInactive(inout packageName : String, in userId : int) : boolean
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
boolean _result;
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeString(packageName);
_data.writeInt(userId);
mRemote.transact(Stub.TRANSACTION_isAppInactive, _data, _reply, 0);
_reply.readException();
_result = (0!=_reply.readInt());
}
finally {
_reply.recycle();
_data.recycle();
}
return _result;
!!!78461751.java!!!	whitelistAppTemporarily(inout packageName : String, in duration : long, in userId : int) : void
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeString(packageName);
_data.writeLong(duration);
_data.writeInt(userId);
mRemote.transact(Stub.TRANSACTION_whitelistAppTemporarily, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
!!!78461879.java!!!	onCarrierPrivilegedAppsChanged() : void
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
mRemote.transact(Stub.TRANSACTION_onCarrierPrivilegedAppsChanged, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
