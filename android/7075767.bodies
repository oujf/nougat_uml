class UsageStatsManager
!!!78475575.java!!!	UsageStatsManager(inout context : Context, inout service : IUsageStatsManager)
        mContext = context;
        mService = service;
!!!78475703.java!!!	queryUsageStats(in intervalType : int, in beginTime : long, in endTime : long) : UsageStats
        try {
            @SuppressWarnings("unchecked")
            ParceledListSlice<UsageStats> slice = mService.queryUsageStats(intervalType, beginTime,
                    endTime, mContext.getOpPackageName());
            if (slice != null) {
                return slice.getList();
            }
        } catch (RemoteException e) {
            // fallthrough and return null.
        }
        return Collections.emptyList();
!!!78475831.java!!!	queryConfigurations(in intervalType : int, in beginTime : long, in endTime : long) : ConfigurationStats
        try {
            @SuppressWarnings("unchecked")
            ParceledListSlice<ConfigurationStats> slice = mService.queryConfigurationStats(
                    intervalType, beginTime, endTime, mContext.getOpPackageName());
            if (slice != null) {
                return slice.getList();
            }
        } catch (RemoteException e) {
            // fallthrough and return the empty list.
        }
        return Collections.emptyList();
!!!78475959.java!!!	queryEvents(in beginTime : long, in endTime : long) : UsageEvents
        try {
            UsageEvents iter = mService.queryEvents(beginTime, endTime,
                    mContext.getOpPackageName());
            if (iter != null) {
                return iter;
            }
        } catch (RemoteException e) {
            // fallthrough and return null
        }
        return sEmptyResults;
!!!78476087.java!!!	queryAndAggregateUsageStats(in beginTime : long, in endTime : long) : String
        List<UsageStats> stats = queryUsageStats(INTERVAL_BEST, beginTime, endTime);
        if (stats.isEmpty()) {
            return Collections.emptyMap();
        }

        ArrayMap<String, UsageStats> aggregatedStats = new ArrayMap<>();
        final int statCount = stats.size();
        for (int i = 0; i < statCount; i++) {
            UsageStats newStat = stats.get(i);
            UsageStats existingStat = aggregatedStats.get(newStat.getPackageName());
            if (existingStat == null) {
                aggregatedStats.put(newStat.mPackageName, newStat);
            } else {
                existingStat.add(newStat);
            }
        }
        return aggregatedStats;
!!!78476215.java!!!	isAppInactive(inout packageName : String) : boolean
        try {
            return mService.isAppInactive(packageName, UserHandle.myUserId());
        } catch (RemoteException e) {
            // fall through and return default
        }
        return false;
!!!78476343.java!!!	setAppInactive(inout packageName : String, inout inactive : boolean) : void
        try {
            mService.setAppInactive(packageName, inactive, UserHandle.myUserId());
        } catch (RemoteException e) {
            // fall through
        }
!!!78476471.java!!!	whitelistAppTemporarily(inout packageName : String, in duration : long, inout user : UserHandle) : void
        try {
            mService.whitelistAppTemporarily(packageName, duration, user.getIdentifier());
        } catch (RemoteException re) {
        }
!!!78476599.java!!!	onCarrierPrivilegedAppsChanged() : void
        try {
            mService.onCarrierPrivilegedAppsChanged();
        } catch (RemoteException re) {
        }
