class BluetoothGattCharacteristic
!!!78538551.java!!!	BluetoothGattCharacteristic(inout uuid : UUID, in properties : int, in permissions : int)
        initCharacteristic(null, uuid, 0, properties, permissions);
!!!78538679.java!!!	BluetoothGattCharacteristic(inout service : BluetoothGattService, inout uuid : UUID, in instanceId : int, in properties : int, in permissions : int)
        initCharacteristic(service, uuid, instanceId, properties, permissions);
!!!78538807.java!!!	BluetoothGattCharacteristic(inout uuid : UUID, in instanceId : int, in properties : int, in permissions : int)
        initCharacteristic(null, uuid, instanceId, properties, permissions);
!!!78538935.java!!!	initCharacteristic(inout service : BluetoothGattService, inout uuid : UUID, in instanceId : int, in properties : int, in permissions : int) : void
        mUuid = uuid;
        mInstance = instanceId;
        mProperties = properties;
        mPermissions = permissions;
        mService = service;
        mValue = null;
        mDescriptors = new ArrayList<BluetoothGattDescriptor>();

        if ((mProperties & PROPERTY_WRITE_NO_RESPONSE) != 0) {
            mWriteType = WRITE_TYPE_NO_RESPONSE;
        } else {
            mWriteType = WRITE_TYPE_DEFAULT;
        }
!!!78539063.java!!!	describeContents() : int
        return 0;
!!!78539191.java!!!	writeToParcel(inout out : Parcel, in flags : int) : void
        out.writeParcelable(new ParcelUuid(mUuid), 0);
        out.writeInt(mInstance);
        out.writeInt(mProperties);
        out.writeInt(mPermissions);
        out.writeInt(mKeySize);
        out.writeInt(mWriteType);
        out.writeTypedList(mDescriptors);
!!!78539319.java!!!	BluetoothGattCharacteristic(inout in : Parcel)
        mUuid = ((ParcelUuid)in.readParcelable(null)).getUuid();
        mInstance = in.readInt();
        mProperties = in.readInt();
        mPermissions = in.readInt();
        mKeySize = in.readInt();
        mWriteType = in.readInt();

        mDescriptors = new ArrayList<BluetoothGattDescriptor>();

        ArrayList<BluetoothGattDescriptor> descs =
                in.createTypedArrayList(BluetoothGattDescriptor.CREATOR);
        if (descs != null) {
            for (BluetoothGattDescriptor desc: descs) {
                desc.setCharacteristic(this);
                mDescriptors.add(desc);
            }
        }
!!!78539447.java!!!	getKeySize() : int
        return mKeySize;
!!!78539575.java!!!	addDescriptor(inout descriptor : BluetoothGattDescriptor) : boolean
        mDescriptors.add(descriptor);
        descriptor.setCharacteristic(this);
        return true;
!!!78539703.java!!!	getDescriptor(inout uuid : UUID, in instanceId : int) : BluetoothGattDescriptor
        for(BluetoothGattDescriptor descriptor : mDescriptors) {
            if (descriptor.getUuid().equals(uuid)
             && descriptor.getInstanceId() == instanceId) {
                return descriptor;
            }
        }
        return null;
!!!78539831.java!!!	getService() : BluetoothGattService
        return mService;
!!!78539959.java!!!	setService(inout service : BluetoothGattService) : void
        mService = service;
!!!78540087.java!!!	getUuid() : UUID
        return mUuid;
!!!78540215.java!!!	getInstanceId() : int
        return mInstance;
!!!78540343.java!!!	getProperties() : int
        return mProperties;
!!!78540471.java!!!	getPermissions() : int
        return mPermissions;
!!!78540599.java!!!	getWriteType() : int
        return mWriteType;
!!!78540727.java!!!	setWriteType(in writeType : int) : void
        mWriteType = writeType;
!!!78540855.java!!!	setKeySize(in keySize : int) : void
        mKeySize = keySize;
!!!78540983.java!!!	getDescriptors() : BluetoothGattDescriptor
        return mDescriptors;
!!!78541111.java!!!	getDescriptor(inout uuid : UUID) : BluetoothGattDescriptor
        for(BluetoothGattDescriptor descriptor : mDescriptors) {
            if (descriptor.getUuid().equals(uuid)) {
                return descriptor;
            }
        }
        return null;
!!!78541239.java!!!	getValue() : byte
        return mValue;
!!!78541367.java!!!	getIntValue(in formatType : int, in offset : int) : Integer
        if ((offset + getTypeLen(formatType)) > mValue.length) return null;

        switch (formatType) {
            case FORMAT_UINT8:
                return unsignedByteToInt(mValue[offset]);

            case FORMAT_UINT16:
                return unsignedBytesToInt(mValue[offset], mValue[offset+1]);

            case FORMAT_UINT32:
                return unsignedBytesToInt(mValue[offset],   mValue[offset+1],
                                          mValue[offset+2], mValue[offset+3]);
            case FORMAT_SINT8:
                return unsignedToSigned(unsignedByteToInt(mValue[offset]), 8);

            case FORMAT_SINT16:
                return unsignedToSigned(unsignedBytesToInt(mValue[offset],
                                                           mValue[offset+1]), 16);

            case FORMAT_SINT32:
                return unsignedToSigned(unsignedBytesToInt(mValue[offset],
                        mValue[offset+1], mValue[offset+2], mValue[offset+3]), 32);
        }

        return null;
!!!78541495.java!!!	getFloatValue(in formatType : int, in offset : int) : Float
        if ((offset + getTypeLen(formatType)) > mValue.length) return null;

        switch (formatType) {
            case FORMAT_SFLOAT:
                return bytesToFloat(mValue[offset], mValue[offset+1]);

            case FORMAT_FLOAT:
                return bytesToFloat(mValue[offset],   mValue[offset+1],
                                    mValue[offset+2], mValue[offset+3]);
        }

        return null;
!!!78541623.java!!!	getStringValue(in offset : int) : String
        if (mValue == null || offset > mValue.length) return null;
        byte[] strBytes = new byte[mValue.length - offset];
        for (int i=0; i != (mValue.length-offset); ++i) strBytes[i] = mValue[offset+i];
        return new String(strBytes);
!!!78541751.java!!!	setValue(inout value : byte [[]]) : boolean
        mValue = value;
        return true;
!!!78541879.java!!!	setValue(in value : int, in formatType : int, in offset : int) : boolean
        int len = offset + getTypeLen(formatType);
        if (mValue == null) mValue = new byte[len];
        if (len > mValue.length) return false;

        switch (formatType) {
            case FORMAT_SINT8:
                value = intToSignedBits(value, 8);
                // Fall-through intended
            case FORMAT_UINT8:
                mValue[offset] = (byte)(value & 0xFF);
                break;

            case FORMAT_SINT16:
                value = intToSignedBits(value, 16);
                // Fall-through intended
            case FORMAT_UINT16:
                mValue[offset++] = (byte)(value & 0xFF);
                mValue[offset] = (byte)((value >> 8) & 0xFF);
                break;

            case FORMAT_SINT32:
                value = intToSignedBits(value, 32);
                // Fall-through intended
            case FORMAT_UINT32:
                mValue[offset++] = (byte)(value & 0xFF);
                mValue[offset++] = (byte)((value >> 8) & 0xFF);
                mValue[offset++] = (byte)((value >> 16) & 0xFF);
                mValue[offset] = (byte)((value >> 24) & 0xFF);
                break;

            default:
                return false;
        }
        return true;
!!!78542007.java!!!	setValue(in mantissa : int, in exponent : int, in formatType : int, in offset : int) : boolean
        int len = offset + getTypeLen(formatType);
        if (mValue == null) mValue = new byte[len];
        if (len > mValue.length) return false;

        switch (formatType) {
            case FORMAT_SFLOAT:
                mantissa = intToSignedBits(mantissa, 12);
                exponent = intToSignedBits(exponent, 4);
                mValue[offset++] = (byte)(mantissa & 0xFF);
                mValue[offset] = (byte)((mantissa >> 8) & 0x0F);
                mValue[offset] += (byte)((exponent & 0x0F) << 4);
                break;

            case FORMAT_FLOAT:
                mantissa = intToSignedBits(mantissa, 24);
                exponent = intToSignedBits(exponent, 8);
                mValue[offset++] = (byte)(mantissa & 0xFF);
                mValue[offset++] = (byte)((mantissa >> 8) & 0xFF);
                mValue[offset++] = (byte)((mantissa >> 16) & 0xFF);
                mValue[offset] += (byte)(exponent & 0xFF);
                break;

            default:
                return false;
        }

        return true;
!!!78542135.java!!!	setValue(inout value : String) : boolean
        mValue = value.getBytes();
        return true;
!!!78542263.java!!!	getTypeLen(in formatType : int) : int
        return formatType & 0xF;
!!!78542391.java!!!	unsignedByteToInt(in b : byte) : int
        return b & 0xFF;
!!!78542519.java!!!	unsignedBytesToInt(in b0 : byte, in b1 : byte) : int
        return (unsignedByteToInt(b0) + (unsignedByteToInt(b1) << 8));
!!!78542647.java!!!	unsignedBytesToInt(in b0 : byte, in b1 : byte, in b2 : byte, in b3 : byte) : int
        return (unsignedByteToInt(b0) + (unsignedByteToInt(b1) << 8))
             + (unsignedByteToInt(b2) << 16) + (unsignedByteToInt(b3) << 24);
!!!78542775.java!!!	bytesToFloat(in b0 : byte, in b1 : byte) : float
        int mantissa = unsignedToSigned(unsignedByteToInt(b0)
                        + ((unsignedByteToInt(b1) & 0x0F) << 8), 12);
        int exponent = unsignedToSigned(unsignedByteToInt(b1) >> 4, 4);
        return (float)(mantissa * Math.pow(10, exponent));
!!!78542903.java!!!	bytesToFloat(in b0 : byte, in b1 : byte, in b2 : byte, in b3 : byte) : float
        int mantissa = unsignedToSigned(unsignedByteToInt(b0)
                        + (unsignedByteToInt(b1) << 8)
                        + (unsignedByteToInt(b2) << 16), 24);
        return (float)(mantissa * Math.pow(10, b3));
!!!78543031.java!!!	unsignedToSigned(in unsigned : int, in size : int) : int
        if ((unsigned & (1 << size-1)) != 0) {
            unsigned = -1 * ((1 << size-1) - (unsigned & ((1 << size-1) - 1)));
        }
        return unsigned;
!!!78543159.java!!!	intToSignedBits(in i : int, in size : int) : int
        if (i < 0) {
            i = (1 << size-1) + (i & ((1 << size-1) - 1));
        }
        return i;
