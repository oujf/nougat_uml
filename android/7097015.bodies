class Builder
!!!78708407.java!!!	setDeviceName(inout deviceName : String) : ScanFilter::Builder
            mDeviceName = deviceName;
            return this;
!!!78708535.java!!!	setDeviceAddress(inout deviceAddress : String) : ScanFilter::Builder
            if (deviceAddress != null && !BluetoothAdapter.checkBluetoothAddress(deviceAddress)) {
                throw new IllegalArgumentException("invalid device address " + deviceAddress);
            }
            mDeviceAddress = deviceAddress;
            return this;
!!!78708663.java!!!	setServiceUuid(inout serviceUuid : ParcelUuid) : ScanFilter::Builder
            mServiceUuid = serviceUuid;
            mUuidMask = null; // clear uuid mask
            return this;
!!!78708791.java!!!	setServiceUuid(inout serviceUuid : ParcelUuid, inout uuidMask : ParcelUuid) : ScanFilter::Builder
            if (mUuidMask != null && mServiceUuid == null) {
                throw new IllegalArgumentException("uuid is null while uuidMask is not null!");
            }
            mServiceUuid = serviceUuid;
            mUuidMask = uuidMask;
            return this;
!!!78708919.java!!!	setServiceData(inout serviceDataUuid : ParcelUuid, inout serviceData : byte [[]]) : ScanFilter::Builder
            if (serviceDataUuid == null) {
                throw new IllegalArgumentException("serviceDataUuid is null");
            }
            mServiceDataUuid = serviceDataUuid;
            mServiceData = serviceData;
            mServiceDataMask = null; // clear service data mask
            return this;
!!!78709047.java!!!	setServiceData(inout serviceDataUuid : ParcelUuid, inout serviceData : byte [[]], inout serviceDataMask : byte [[]]) : ScanFilter::Builder
            if (serviceDataUuid == null) {
                throw new IllegalArgumentException("serviceDataUuid is null");
            }
            if (mServiceDataMask != null) {
                if (mServiceData == null) {
                    throw new IllegalArgumentException(
                            "serviceData is null while serviceDataMask is not null");
                }
                // Since the mServiceDataMask is a bit mask for mServiceData, the lengths of the two
                // byte array need to be the same.
                if (mServiceData.length != mServiceDataMask.length) {
                    throw new IllegalArgumentException(
                            "size mismatch for service data and service data mask");
                }
            }
            mServiceDataUuid = serviceDataUuid;
            mServiceData = serviceData;
            mServiceDataMask = serviceDataMask;
            return this;
!!!78709175.java!!!	setManufacturerData(in manufacturerId : int, inout manufacturerData : byte [[]]) : ScanFilter::Builder
            if (manufacturerData != null && manufacturerId < 0) {
                throw new IllegalArgumentException("invalid manufacture id");
            }
            mManufacturerId = manufacturerId;
            mManufacturerData = manufacturerData;
            mManufacturerDataMask = null; // clear manufacturer data mask
            return this;
!!!78709303.java!!!	setManufacturerData(in manufacturerId : int, inout manufacturerData : byte [[]], inout manufacturerDataMask : byte [[]]) : ScanFilter::Builder
            if (manufacturerData != null && manufacturerId < 0) {
                throw new IllegalArgumentException("invalid manufacture id");
            }
            if (mManufacturerDataMask != null) {
                if (mManufacturerData == null) {
                    throw new IllegalArgumentException(
                            "manufacturerData is null while manufacturerDataMask is not null");
                }
                // Since the mManufacturerDataMask is a bit mask for mManufacturerData, the lengths
                // of the two byte array need to be the same.
                if (mManufacturerData.length != mManufacturerDataMask.length) {
                    throw new IllegalArgumentException(
                            "size mismatch for manufacturerData and manufacturerDataMask");
                }
            }
            mManufacturerId = manufacturerId;
            mManufacturerData = manufacturerData;
            mManufacturerDataMask = manufacturerDataMask;
            return this;
!!!78709431.java!!!	build() : ScanFilter
            return new ScanFilter(mDeviceName, mDeviceAddress,
                    mServiceUuid, mUuidMask,
                    mServiceDataUuid, mServiceData, mServiceDataMask,
                    mManufacturerId, mManufacturerData, mManufacturerDataMask);
