class Builder
!!!80034743.java!!!	scheme(inout scheme : String) : Uri::Builder
            this.scheme = scheme;
            return this;
!!!80034871.java!!!	opaquePart(inout opaquePart : Uri::Part) : Uri::Builder
            this.opaquePart = opaquePart;
            return this;
!!!80034999.java!!!	opaquePart(inout opaquePart : String) : Uri::Builder
            return opaquePart(Part.fromDecoded(opaquePart));
!!!80035127.java!!!	encodedOpaquePart(inout opaquePart : String) : Uri::Builder
            return opaquePart(Part.fromEncoded(opaquePart));
!!!80035255.java!!!	authority(inout authority : Uri::Part) : Uri::Builder
            // This URI will be hierarchical.
            this.opaquePart = null;

            this.authority = authority;
            return this;
!!!80035383.java!!!	authority(inout authority : String) : Uri::Builder
            return authority(Part.fromDecoded(authority));
!!!80035511.java!!!	encodedAuthority(inout authority : String) : Uri::Builder
            return authority(Part.fromEncoded(authority));
!!!80035639.java!!!	path(inout path : Uri::PathPart) : Uri::Builder
            // This URI will be hierarchical.
            this.opaquePart = null;

            this.path = path;
            return this;
!!!80035767.java!!!	path(inout path : String) : Uri::Builder
            return path(PathPart.fromDecoded(path));
!!!80035895.java!!!	encodedPath(inout path : String) : Uri::Builder
            return path(PathPart.fromEncoded(path));
!!!80036023.java!!!	appendPath(inout newSegment : String) : Uri::Builder
            return path(PathPart.appendDecodedSegment(path, newSegment));
!!!80036151.java!!!	appendEncodedPath(inout newSegment : String) : Uri::Builder
            return path(PathPart.appendEncodedSegment(path, newSegment));
!!!80036279.java!!!	query(inout query : Uri::Part) : Uri::Builder
            // This URI will be hierarchical.
            this.opaquePart = null;

            this.query = query;
            return this;
!!!80036407.java!!!	query(inout query : String) : Uri::Builder
            return query(Part.fromDecoded(query));
!!!80036535.java!!!	encodedQuery(inout query : String) : Uri::Builder
            return query(Part.fromEncoded(query));
!!!80036663.java!!!	fragment(inout fragment : Uri::Part) : Uri::Builder
            this.fragment = fragment;
            return this;
!!!80036791.java!!!	fragment(inout fragment : String) : Uri::Builder
            return fragment(Part.fromDecoded(fragment));
!!!80036919.java!!!	encodedFragment(inout fragment : String) : Uri::Builder
            return fragment(Part.fromEncoded(fragment));
!!!80037047.java!!!	appendQueryParameter(inout key : String, inout value : String) : Uri::Builder
            // This URI will be hierarchical.
            this.opaquePart = null;

            String encodedParameter = encode(key, null) + "="
                    + encode(value, null);

            if (query == null) {
                query = Part.fromEncoded(encodedParameter);
                return this;
            }

            String oldQuery = query.getEncoded();
            if (oldQuery == null || oldQuery.length() == 0) {
                query = Part.fromEncoded(encodedParameter);
            } else {
                query = Part.fromEncoded(oldQuery + "&" + encodedParameter);
            }

            return this;
!!!80037175.java!!!	clearQuery() : Uri::Builder
          return query((Part) null);
!!!80037303.java!!!	build() : Uri
            if (opaquePart != null) {
                if (this.scheme == null) {
                    throw new UnsupportedOperationException(
                            "An opaque URI must have a scheme.");
                }

                return new OpaqueUri(scheme, opaquePart, fragment);
            } else {
                // Hierarchical URIs should not return null for getPath().
                PathPart path = this.path;
                if (path == null || path == PathPart.NULL) {
                    path = PathPart.EMPTY;
                } else {
                    // If we have a scheme and/or authority, the path must
                    // be absolute. Prepend it with a '/' if necessary.
                    if (hasSchemeOrAuthority()) {
                        path = PathPart.makeAbsolute(path);
                    }
                }

                return new HierarchicalUri(
                        scheme, authority, path, query, fragment);
            }
!!!80037431.java!!!	hasSchemeOrAuthority() : boolean
            return scheme != null
                    || (authority != null && authority != Part.NULL);

!!!80037559.java!!!	toString() : String
            return build().toString();
