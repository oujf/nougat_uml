class AbstractCursor
!!!79135415.java!!!	getType(in column : int) : int
        // Reflects the assumption that all commonly used field types (meaning everything
        // but blobs) are convertible to strings so it should be safe to call
        // getString to retrieve them.
        return FIELD_TYPE_STRING;
!!!79135543.java!!!	getBlob(in column : int) : byte
        throw new UnsupportedOperationException("getBlob is not supported");
!!!79135671.java!!!	getWindow() : CursorWindow
        return null;
!!!79135799.java!!!	getColumnCount() : int
        return getColumnNames().length;
!!!79135927.java!!!	deactivate() : void
        onDeactivateOrClose();
!!!79136055.java!!!	onDeactivateOrClose() : void
        if (mSelfObserver != null) {
            mContentResolver.unregisterContentObserver(mSelfObserver);
            mSelfObserverRegistered = false;
        }
        mDataSetObservable.notifyInvalidated();
!!!79136183.java!!!	requery() : boolean
        if (mSelfObserver != null && mSelfObserverRegistered == false) {
            mContentResolver.registerContentObserver(mNotifyUri, true, mSelfObserver);
            mSelfObserverRegistered = true;
        }
        mDataSetObservable.notifyChanged();
        return true;
!!!79136311.java!!!	isClosed() : boolean
        return mClosed;
!!!79136439.java!!!	close() : void
        mClosed = true;
        mContentObservable.unregisterAll();
        onDeactivateOrClose();
!!!79136567.java!!!	onMove(in oldPosition : int, in newPosition : int) : boolean
        return true;
!!!79136695.java!!!	copyStringToBuffer(in columnIndex : int, inout buffer : CharArrayBuffer) : void
        // Default implementation, uses getString
        String result = getString(columnIndex);
        if (result != null) {
            char[] data = buffer.data;
            if (data == null || data.length < result.length()) {
                buffer.data = result.toCharArray();
            } else {
                result.getChars(0, result.length(), data, 0);
            }
            buffer.sizeCopied = result.length();
        } else {
            buffer.sizeCopied = 0;
        }
!!!79136823.java!!!	AbstractCursor()
        mPos = -1;
!!!79136951.java!!!	getPosition() : int
        return mPos;
!!!79137079.java!!!	moveToPosition(in position : int) : boolean
        // Make sure position isn't past the end of the cursor
        final int count = getCount();
        if (position >= count) {
            mPos = count;
            return false;
        }

        // Make sure position isn't before the beginning of the cursor
        if (position < 0) {
            mPos = -1;
            return false;
        }

        // Check for no-op moves, and skip the rest of the work for them
        if (position == mPos) {
            return true;
        }

        boolean result = onMove(mPos, position);
        if (result == false) {
            mPos = -1;
        } else {
            mPos = position;
        }

        return result;
!!!79137207.java!!!	fillWindow(in position : int, inout window : CursorWindow) : void
        DatabaseUtils.cursorFillWindow(this, position, window);
!!!79137335.java!!!	move(in offset : int) : boolean
        return moveToPosition(mPos + offset);
!!!79137463.java!!!	moveToFirst() : boolean
        return moveToPosition(0);
!!!79137591.java!!!	moveToLast() : boolean
        return moveToPosition(getCount() - 1);
!!!79137719.java!!!	moveToNext() : boolean
        return moveToPosition(mPos + 1);
!!!79137847.java!!!	moveToPrevious() : boolean
        return moveToPosition(mPos - 1);
!!!79137975.java!!!	isFirst() : boolean
        return mPos == 0 && getCount() != 0;
!!!79138103.java!!!	isLast() : boolean
        int cnt = getCount();
        return mPos == (cnt - 1) && cnt != 0;
!!!79138231.java!!!	isBeforeFirst() : boolean
        if (getCount() == 0) {
            return true;
        }
        return mPos == -1;
!!!79138359.java!!!	isAfterLast() : boolean
        if (getCount() == 0) {
            return true;
        }
        return mPos == getCount();
!!!79138487.java!!!	getColumnIndex(inout columnName : String) : int
        // Hack according to bug 903852
        final int periodIndex = columnName.lastIndexOf('.');
        if (periodIndex != -1) {
            Exception e = new Exception();
            Log.e(TAG, "requesting column name with table name -- " + columnName, e);
            columnName = columnName.substring(periodIndex + 1);
        }

        String columnNames[] = getColumnNames();
        int length = columnNames.length;
        for (int i = 0; i < length; i++) {
            if (columnNames[i].equalsIgnoreCase(columnName)) {
                return i;
            }
        }

        if (false) {
            if (getCount() > 0) {
                Log.w("AbstractCursor", "Unknown column " + columnName);
            }
        }
        return -1;
!!!79138615.java!!!	getColumnIndexOrThrow(inout columnName : String) : int
        final int index = getColumnIndex(columnName);
        if (index < 0) {
            throw new IllegalArgumentException("column '" + columnName + "' does not exist");
        }
        return index;
!!!79138743.java!!!	getColumnName(in columnIndex : int) : String
        return getColumnNames()[columnIndex];
!!!79138871.java!!!	registerContentObserver(inout observer : ContentObserver) : void
        mContentObservable.registerObserver(observer);
!!!79138999.java!!!	unregisterContentObserver(inout observer : ContentObserver) : void
        // cursor will unregister all observers when it close
        if (!mClosed) {
            mContentObservable.unregisterObserver(observer);
        }
!!!79139127.java!!!	registerDataSetObserver(inout observer : DataSetObserver) : void
        mDataSetObservable.registerObserver(observer);
!!!79139255.java!!!	unregisterDataSetObserver(inout observer : DataSetObserver) : void
        mDataSetObservable.unregisterObserver(observer);
!!!79139383.java!!!	onChange(inout selfChange : boolean) : void
        synchronized (mSelfObserverLock) {
            mContentObservable.dispatchChange(selfChange, null);
            if (mNotifyUri != null && selfChange) {
                mContentResolver.notifyChange(mNotifyUri, mSelfObserver);
            }
        }
!!!79139511.java!!!	setNotificationUri(inout cr : ContentResolver, inout notifyUri : Uri) : void
        setNotificationUri(cr, notifyUri, UserHandle.myUserId());
!!!79139639.java!!!	setNotificationUri(inout cr : ContentResolver, inout notifyUri : Uri, in userHandle : int) : void
        synchronized (mSelfObserverLock) {
            mNotifyUri = notifyUri;
            mContentResolver = cr;
            if (mSelfObserver != null) {
                mContentResolver.unregisterContentObserver(mSelfObserver);
            }
            mSelfObserver = new SelfContentObserver(this);
            mContentResolver.registerContentObserver(mNotifyUri, true, mSelfObserver, userHandle);
            mSelfObserverRegistered = true;
        }
!!!79139767.java!!!	getNotificationUri() : Uri
        synchronized (mSelfObserverLock) {
            return mNotifyUri;
        }
!!!79139895.java!!!	getWantsAllOnMoveCalls() : boolean
        return false;
!!!79140023.java!!!	setExtras(inout extras : Bundle) : void
        mExtras = (extras == null) ? Bundle.EMPTY : extras;
!!!79140151.java!!!	getExtras() : Bundle
        return mExtras;
!!!79140279.java!!!	respond(inout extras : Bundle) : Bundle
        return Bundle.EMPTY;
!!!79140407.java!!!	isFieldUpdated(in columnIndex : int) : boolean
        return false;
!!!79140535.java!!!	getUpdatedField(in columnIndex : int) : Object
        return null;
!!!79140663.java!!!	checkPosition() : void
        if (-1 == mPos || getCount() == mPos) {
            throw new CursorIndexOutOfBoundsException(mPos, getCount());
        }
!!!79140791.java!!!	finalize() : void
        if (mSelfObserver != null && mSelfObserverRegistered == true) {
            mContentResolver.unregisterContentObserver(mSelfObserver);
        }
        try {
            if (!mClosed) close();
        } catch(Exception e) { }
