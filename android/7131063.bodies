class MatrixCursor
!!!79172279.java!!!	MatrixCursor(inout columnNames : String [[]], in initialCapacity : int)
        this.columnNames = columnNames;
        this.columnCount = columnNames.length;

        if (initialCapacity < 1) {
            initialCapacity = 1;
        }

        this.data = new Object[columnCount * initialCapacity];
!!!79172407.java!!!	MatrixCursor(inout columnNames : String [[]])
        this(columnNames, 16);
!!!79172535.java!!!	get(in column : int) : Object
        if (column < 0 || column >= columnCount) {
            throw new CursorIndexOutOfBoundsException("Requested column: "
                    + column + ", # of columns: " +  columnCount);
        }
        if (mPos < 0) {
            throw new CursorIndexOutOfBoundsException("Before first row.");
        }
        if (mPos >= rowCount) {
            throw new CursorIndexOutOfBoundsException("After last row.");
        }
        return data[mPos * columnCount + column];
!!!79172663.java!!!	newRow() : MatrixCursor::RowBuilder
        final int row = rowCount++;
        final int endIndex = rowCount * columnCount;
        ensureCapacity(endIndex);
        return new RowBuilder(row);
!!!79172791.java!!!	addRow(inout columnValues : Object [[]]) : void
        if (columnValues.length != columnCount) {
            throw new IllegalArgumentException("columnNames.length = "
                    + columnCount + ", columnValues.length = "
                    + columnValues.length);
        }

        int start = rowCount++ * columnCount;
        ensureCapacity(start + columnCount);
        System.arraycopy(columnValues, 0, data, start, columnCount);
!!!79172919.java!!!	addRow(inout columnValues : Iterable<?>) : void
        int start = rowCount * columnCount;
        int end = start + columnCount;
        ensureCapacity(end);

        if (columnValues instanceof ArrayList<?>) {
            addRow((ArrayList<?>) columnValues, start);
            return;
        }

        int current = start;
        Object[] localData = data;
        for (Object columnValue : columnValues) {
            if (current == end) {
                // TODO: null out row?
                throw new IllegalArgumentException(
                        "columnValues.size() > columnNames.length");
            }
            localData[current++] = columnValue;
        }

        if (current != end) {
            // TODO: null out row?
            throw new IllegalArgumentException(
                    "columnValues.size() < columnNames.length");
        }

        // Increase row count here in case we encounter an exception.
        rowCount++;
!!!79173047.java!!!	addRow(inout columnValues : ArrayList<?>, in start : int) : void
        int size = columnValues.size();
        if (size != columnCount) {
            throw new IllegalArgumentException("columnNames.length = "
                    + columnCount + ", columnValues.size() = " + size);
        }

        rowCount++;
        Object[] localData = data;
        for (int i = 0; i < size; i++) {
            localData[start + i] = columnValues.get(i);
        }
!!!79173175.java!!!	ensureCapacity(in size : int) : void
        if (size > data.length) {
            Object[] oldData = this.data;
            int newSize = data.length * 2;
            if (newSize < size) {
                newSize = size;
            }
            this.data = new Object[newSize];
            System.arraycopy(oldData, 0, this.data, 0, oldData.length);
        }
!!!79173687.java!!!	getCount() : int
        return rowCount;
!!!79173815.java!!!	getColumnNames() : String
        return columnNames;
!!!79173943.java!!!	getString(in column : int) : String
        Object value = get(column);
        if (value == null) return null;
        return value.toString();
!!!79174071.java!!!	getShort(in column : int) : short
        Object value = get(column);
        if (value == null) return 0;
        if (value instanceof Number) return ((Number) value).shortValue();
        return Short.parseShort(value.toString());
!!!79174199.java!!!	getInt(in column : int) : int
        Object value = get(column);
        if (value == null) return 0;
        if (value instanceof Number) return ((Number) value).intValue();
        return Integer.parseInt(value.toString());
!!!79174327.java!!!	getLong(in column : int) : long
        Object value = get(column);
        if (value == null) return 0;
        if (value instanceof Number) return ((Number) value).longValue();
        return Long.parseLong(value.toString());
!!!79174455.java!!!	getFloat(in column : int) : float
        Object value = get(column);
        if (value == null) return 0.0f;
        if (value instanceof Number) return ((Number) value).floatValue();
        return Float.parseFloat(value.toString());
!!!79174583.java!!!	getDouble(in column : int) : double
        Object value = get(column);
        if (value == null) return 0.0d;
        if (value instanceof Number) return ((Number) value).doubleValue();
        return Double.parseDouble(value.toString());
!!!79174711.java!!!	getBlob(in column : int) : byte
        Object value = get(column);
        return (byte[]) value;
!!!79174839.java!!!	getType(in column : int) : int
        return DatabaseUtils.getTypeOfObject(get(column));
!!!79174967.java!!!	isNull(in column : int) : boolean
        return get(column) == null;
