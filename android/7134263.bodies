class SQLiteCursor
!!!79196727.java!!!	SQLiteCursor(inout db : SQLiteDatabase, inout driver : SQLiteCursorDriver, inout editTable : String, inout query : SQLiteQuery)
        this(driver, editTable, query);
!!!79196855.java!!!	SQLiteCursor(inout driver : SQLiteCursorDriver, inout editTable : String, inout query : SQLiteQuery)
        if (query == null) {
            throw new IllegalArgumentException("query object cannot be null");
        }
        if (StrictMode.vmSqliteObjectLeaksEnabled()) {
            mStackTrace = new DatabaseObjectNotClosedException().fillInStackTrace();
        } else {
            mStackTrace = null;
        }
        mDriver = driver;
        mEditTable = editTable;
        mColumnNameMap = null;
        mQuery = query;

        mColumns = query.getColumnNames();
!!!79196983.java!!!	getDatabase() : SQLiteDatabase
        return mQuery.getDatabase();
!!!79197111.java!!!	onMove(in oldPosition : int, in newPosition : int) : boolean
        // Make sure the row at newPosition is present in the window
        if (mWindow == null || newPosition < mWindow.getStartPosition() ||
                newPosition >= (mWindow.getStartPosition() + mWindow.getNumRows())) {
            fillWindow(newPosition);
        }

        return true;
!!!79197239.java!!!	getCount() : int
        if (mCount == NO_COUNT) {
            fillWindow(0);
        }
        return mCount;
!!!79197367.java!!!	fillWindow(in requiredPos : int) : void
        clearOrCreateWindow(getDatabase().getPath());

        try {
            if (mCount == NO_COUNT) {
                int startPos = DatabaseUtils.cursorPickFillWindowStartPosition(requiredPos, 0);
                mCount = mQuery.fillWindow(mWindow, startPos, requiredPos, true);
                mCursorWindowCapacity = mWindow.getNumRows();
                if (Log.isLoggable(TAG, Log.DEBUG)) {
                    Log.d(TAG, "received count(*) from native_fill_window: " + mCount);
                }
            } else {
                int startPos = DatabaseUtils.cursorPickFillWindowStartPosition(requiredPos,
                        mCursorWindowCapacity);
                mQuery.fillWindow(mWindow, startPos, requiredPos, false);
            }
        } catch (RuntimeException ex) {
            // Close the cursor window if the query failed and therefore will
            // not produce any results.  This helps to avoid accidentally leaking
            // the cursor window if the client does not correctly handle exceptions
            // and fails to close the cursor.
            closeWindow();
            throw ex;
        }
!!!79197495.java!!!	getColumnIndex(inout columnName : String) : int
        // Create mColumnNameMap on demand
        if (mColumnNameMap == null) {
            String[] columns = mColumns;
            int columnCount = columns.length;
            HashMap<String, Integer> map = new HashMap<String, Integer>(columnCount, 1);
            for (int i = 0; i < columnCount; i++) {
                map.put(columns[i], i);
            }
            mColumnNameMap = map;
        }

        // Hack according to bug 903852
        final int periodIndex = columnName.lastIndexOf('.');
        if (periodIndex != -1) {
            Exception e = new Exception();
            Log.e(TAG, "requesting column name with table name -- " + columnName, e);
            columnName = columnName.substring(periodIndex + 1);
        }

        Integer i = mColumnNameMap.get(columnName);
        if (i != null) {
            return i.intValue();
        } else {
            return -1;
        }
!!!79197623.java!!!	getColumnNames() : String
        return mColumns;
!!!79197751.java!!!	deactivate() : void
        super.deactivate();
        mDriver.cursorDeactivated();
!!!79197879.java!!!	close() : void
        super.close();
        synchronized (this) {
            mQuery.close();
            mDriver.cursorClosed();
        }
!!!79198007.java!!!	requery() : boolean
        if (isClosed()) {
            return false;
        }

        synchronized (this) {
            if (!mQuery.getDatabase().isOpen()) {
                return false;
            }

            if (mWindow != null) {
                mWindow.clear();
            }
            mPos = -1;
            mCount = NO_COUNT;

            mDriver.cursorRequeried(this);
        }

        try {
            return super.requery();
        } catch (IllegalStateException e) {
            // for backwards compatibility, just return false
            Log.w(TAG, "requery() failed " + e.getMessage(), e);
            return false;
        }
!!!79198135.java!!!	setWindow(inout window : CursorWindow) : void
        super.setWindow(window);
        mCount = NO_COUNT;
!!!79198263.java!!!	setSelectionArguments(inout selectionArgs : String [[]]) : void
        mDriver.setBindArguments(selectionArgs);
!!!79198391.java!!!	finalize() : void
        try {
            // if the cursor hasn't been closed yet, close it first
            if (mWindow != null) {
                if (mStackTrace != null) {
                    String sql = mQuery.getSql();
                    int len = sql.length();
                    StrictMode.onSqliteObjectLeaked(
                        "Finalizing a Cursor that has not been deactivated or closed. " +
                        "database = " + mQuery.getDatabase().getLabel() +
                        ", table = " + mEditTable +
                        ", query = " + sql.substring(0, (len > 1000) ? 1000 : len),
                        mStackTrace);
                }
                close();
            }
        } finally {
            super.finalize();
        }
