class BaseEventQueue
!!!79312439.java!!!	BaseEventQueue(inout looper : Looper, inout manager : SystemSensorManager, in mode : int, inout packageName : String)
            if (packageName == null) packageName = "";
            nSensorEventQueue = nativeInitBaseEventQueue(manager.mNativeInstance,
                    new WeakReference<>(this), looper.getQueue(),
                    packageName, mode, manager.mContext.getOpPackageName());
            mCloseGuard.open("dispose");
            mManager = manager;
!!!79312567.java!!!	dispose() : void
            dispose(false);
!!!79312695.java!!!	addSensor(inout sensor : Sensor, in delayUs : int, in maxBatchReportLatencyUs : int) : boolean
            // Check if already present.
            int handle = sensor.getHandle();
            if (mActiveSensors.get(handle)) return false;

            // Get ready to receive events before calling enable.
            mActiveSensors.put(handle, true);
            addSensorEvent(sensor);
            if (enableSensor(sensor, delayUs, maxBatchReportLatencyUs) != 0) {
                // Try continuous mode if batching fails.
                if (maxBatchReportLatencyUs == 0 ||
                    maxBatchReportLatencyUs > 0 && enableSensor(sensor, delayUs, 0) != 0) {
                  removeSensor(sensor, false);
                  return false;
                }
            }
            return true;
!!!79312823.java!!!	removeAllSensors() : boolean
            for (int i=0 ; i<mActiveSensors.size(); i++) {
                if (mActiveSensors.valueAt(i) == true) {
                    int handle = mActiveSensors.keyAt(i);
                    Sensor sensor = mManager.mHandleToSensor.get(handle);
                    if (sensor != null) {
                        disableSensor(sensor);
                        mActiveSensors.put(handle, false);
                        removeSensorEvent(sensor);
                    } else {
                        // sensor just disconnected -- just ignore.
                    }
                }
            }
            return true;
!!!79312951.java!!!	removeSensor(inout sensor : Sensor, inout disable : boolean) : boolean
            final int handle = sensor.getHandle();
            if (mActiveSensors.get(handle)) {
                if (disable) disableSensor(sensor);
                mActiveSensors.put(sensor.getHandle(), false);
                removeSensorEvent(sensor);
                return true;
            }
            return false;
!!!79313079.java!!!	flush() : int
            if (nSensorEventQueue == 0) throw new NullPointerException();
            return nativeFlushSensor(nSensorEventQueue);
!!!79313207.java!!!	hasSensors() : boolean
            // no more sensors are set
            return mActiveSensors.indexOfValue(true) >= 0;
!!!79313335.java!!!	finalize() : void
            try {
                dispose(true);
            } finally {
                super.finalize();
            }
!!!79313463.java!!!	dispose(inout finalized : boolean) : void
            if (mCloseGuard != null) {
                if (finalized) {
                    mCloseGuard.warnIfOpen();
                }
                mCloseGuard.close();
            }
            if (nSensorEventQueue != 0) {
                nativeDestroySensorEventQueue(nSensorEventQueue);
                nSensorEventQueue = 0;
            }
!!!79313591.java!!!	enableSensor(inout sensor : Sensor, in rateUs : int, in maxBatchReportLatencyUs : int) : int
            if (nSensorEventQueue == 0) throw new NullPointerException();
            if (sensor == null) throw new NullPointerException();
            return nativeEnableSensor(nSensorEventQueue, sensor.getHandle(), rateUs,
                    maxBatchReportLatencyUs);
!!!79313719.java!!!	injectSensorDataBase(in handle : int, inout values : float [[]], in accuracy : int, in timestamp : long) : int
            return nativeInjectSensorData(nSensorEventQueue, handle, values, accuracy, timestamp);
!!!79313847.java!!!	disableSensor(inout sensor : Sensor) : int
            if (nSensorEventQueue == 0) throw new NullPointerException();
            if (sensor == null) throw new NullPointerException();
            return nativeDisableSensor(nSensorEventQueue, sensor.getHandle());
!!!79314231.java!!!	dispatchAdditionalInfoEvent(in handle : int, in type : int, in serial : int, inout floatValues : float [[]], inout intValues : int [[]]) : void
            // default implementation is do nothing
