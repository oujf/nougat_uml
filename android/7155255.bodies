class ICameraDeviceUserWrapper
!!!79378743.java!!!	ICameraDeviceUserWrapper(inout remoteDevice : ICameraDeviceUser)
        if (remoteDevice == null) {
            throw new NullPointerException("Remote device may not be null");
        }
        mRemoteDevice = remoteDevice;
!!!79378871.java!!!	unlinkToDeath(inout recipient : IBinder::DeathRecipient, in flags : int) : void
        if (mRemoteDevice.asBinder() != null) {
            mRemoteDevice.asBinder().unlinkToDeath(recipient, flags);
        }
!!!79378999.java!!!	disconnect() : void
        try {
            mRemoteDevice.disconnect();
        } catch (RemoteException t) {
            // ignore binder errors for disconnect
        }
!!!79379127.java!!!	submitRequest(inout request : CaptureRequest, inout streaming : boolean) : SubmitInfo
        try {
            return mRemoteDevice.submitRequest(request, streaming);
        } catch (Throwable t) {
            CameraManager.throwAsPublicException(t);
            throw new UnsupportedOperationException("Unexpected exception", t);
        }
!!!79379255.java!!!	submitRequestList(inout requestList : CaptureRequest [[]], inout streaming : boolean) : SubmitInfo
        try {
            return mRemoteDevice.submitRequestList(requestList, streaming);
        } catch (Throwable t) {
            CameraManager.throwAsPublicException(t);
            throw new UnsupportedOperationException("Unexpected exception", t);
        }
!!!79379383.java!!!	cancelRequest(in requestId : int) : long
        try {
            return mRemoteDevice.cancelRequest(requestId);
        } catch (Throwable t) {
            CameraManager.throwAsPublicException(t);
            throw new UnsupportedOperationException("Unexpected exception", t);
        }
!!!79379511.java!!!	beginConfigure() : void
        try {
            mRemoteDevice.beginConfigure();
        } catch (Throwable t) {
            CameraManager.throwAsPublicException(t);
            throw new UnsupportedOperationException("Unexpected exception", t);
        }
!!!79379639.java!!!	endConfigure(inout isConstrainedHighSpeed : boolean) : void
        try {
            mRemoteDevice.endConfigure(isConstrainedHighSpeed);
        } catch (Throwable t) {
            CameraManager.throwAsPublicException(t);
            throw new UnsupportedOperationException("Unexpected exception", t);
        }
!!!79379767.java!!!	deleteStream(in streamId : int) : void
        try {
            mRemoteDevice.deleteStream(streamId);
        } catch (Throwable t) {
            CameraManager.throwAsPublicException(t);
            throw new UnsupportedOperationException("Unexpected exception", t);
        }
!!!79379895.java!!!	createStream(inout outputConfiguration : OutputConfiguration) : int
        try {
            return mRemoteDevice.createStream(outputConfiguration);
        } catch (Throwable t) {
            CameraManager.throwAsPublicException(t);
            throw new UnsupportedOperationException("Unexpected exception", t);
        }
!!!79380023.java!!!	createInputStream(in width : int, in height : int, in format : int) : int
        try {
            return mRemoteDevice.createInputStream(width, height, format);
        } catch (Throwable t) {
            CameraManager.throwAsPublicException(t);
            throw new UnsupportedOperationException("Unexpected exception", t);
        }
!!!79380151.java!!!	getInputSurface() : Surface
        try {
            return mRemoteDevice.getInputSurface();
        } catch (Throwable t) {
            CameraManager.throwAsPublicException(t);
            throw new UnsupportedOperationException("Unexpected exception", t);
        }
!!!79380279.java!!!	createDefaultRequest(in templateId : int) : CameraMetadataNative
        try {
            return mRemoteDevice.createDefaultRequest(templateId);
        } catch (Throwable t) {
            CameraManager.throwAsPublicException(t);
            throw new UnsupportedOperationException("Unexpected exception", t);
        }
!!!79380407.java!!!	getCameraInfo() : CameraMetadataNative
        try {
            return mRemoteDevice.getCameraInfo();
        } catch (Throwable t) {
            CameraManager.throwAsPublicException(t);
            throw new UnsupportedOperationException("Unexpected exception", t);
        }
!!!79380535.java!!!	waitUntilIdle() : void
        try {
            mRemoteDevice.waitUntilIdle();
        } catch (Throwable t) {
            CameraManager.throwAsPublicException(t);
            throw new UnsupportedOperationException("Unexpected exception", t);
        }
!!!79380663.java!!!	flush() : long
        try {
            return mRemoteDevice.flush();
        } catch (Throwable t) {
            CameraManager.throwAsPublicException(t);
            throw new UnsupportedOperationException("Unexpected exception", t);
        }
!!!79380791.java!!!	prepare(in streamId : int) : void
        try {
            mRemoteDevice.prepare(streamId);
        } catch (Throwable t) {
            CameraManager.throwAsPublicException(t);
            throw new UnsupportedOperationException("Unexpected exception", t);
        }
!!!79380919.java!!!	tearDown(in streamId : int) : void
        try {
            mRemoteDevice.tearDown(streamId);
        } catch (Throwable t) {
            CameraManager.throwAsPublicException(t);
            throw new UnsupportedOperationException("Unexpected exception", t);
        }
!!!79381047.java!!!	prepare2(in maxCount : int, in streamId : int) : void
        try {
            mRemoteDevice.prepare2(maxCount, streamId);
        } catch (Throwable t) {
            CameraManager.throwAsPublicException(t);
            throw new UnsupportedOperationException("Unexpected exception", t);
        }
