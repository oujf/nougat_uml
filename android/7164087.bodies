class MarshalerArray
!!!79430071.java!!!	MarshalerArray(inout typeReference : TypeReference, in nativeType : int)
            super(MarshalQueryableArray.this, typeReference, nativeType);

            mClass = (Class<T>)typeReference.getRawType();

            TypeReference<?> componentToken = typeReference.getComponentType();
            mComponentMarshaler = MarshalRegistry.getMarshaler(componentToken, mNativeType);
            mComponentClass = componentToken.getRawType();
!!!79430199.java!!!	marshal(inout value : T, inout buffer : ByteBuffer) : void
            int length = Array.getLength(value);
            for (int i = 0; i < length; ++i) {
                marshalArrayElement(mComponentMarshaler, buffer, value, i);
            }
!!!79430327.java!!!	unmarshal(inout buffer : ByteBuffer) : T
            Object array;

            int elementSize = mComponentMarshaler.getNativeSize();

            if (elementSize != Marshaler.NATIVE_SIZE_DYNAMIC) {
                int remaining = buffer.remaining();
                int arraySize = remaining / elementSize;

                if (remaining % elementSize != 0) {
                    throw new UnsupportedOperationException("Arrays for " + mTypeReference
                            + " must be packed tighly into a multiple of " + elementSize
                            + "; but there are " + (remaining % elementSize) + " left over bytes");
                }

                if (DEBUG) {
                    Log.v(TAG, String.format(
                            "Attempting to unpack array (count = %d, element size = %d, bytes "
                            + "remaining = %d) for type %s",
                            arraySize, elementSize, remaining, mClass));
                }

                array = Array.newInstance(mComponentClass, arraySize);
                for (int i = 0; i < arraySize; ++i) {
                    Object elem = mComponentMarshaler.unmarshal(buffer);
                    Array.set(array, i, elem);
                }
            } else {
                // Dynamic size, use an array list.
                ArrayList<Object> arrayList = new ArrayList<Object>();

                // Assumes array is packed tightly; no unused bytes allowed
                while (buffer.hasRemaining()) {
                    Object elem = mComponentMarshaler.unmarshal(buffer);
                    arrayList.add(elem);
                }

                int arraySize = arrayList.size();
                array = copyListToArray(arrayList, Array.newInstance(mComponentClass, arraySize));
            }

            if (buffer.remaining() != 0) {
                Log.e(TAG, "Trailing bytes (" + buffer.remaining() + ") left over after unpacking "
                        + mClass);
            }

            return mClass.cast(array);
!!!79430455.java!!!	getNativeSize() : int
            return NATIVE_SIZE_DYNAMIC;
!!!79430583.java!!!	calculateMarshalSize(inout value : T) : int
            int elementSize = mComponentMarshaler.getNativeSize();
            int arrayLength = Array.getLength(value);

            if (elementSize != Marshaler.NATIVE_SIZE_DYNAMIC) {
                // The fast way. Every element size is uniform.
                return elementSize * arrayLength;
            } else {
                // The slow way. Accumulate size for each element.
                int size = 0;
                for (int i = 0; i < arrayLength; ++i) {
                    size += calculateElementMarshalSize(mComponentMarshaler, value, i);
                }

                return size;
            }
!!!79430711.java!!!	marshalArrayElement(inout marshaler : Marshaler, inout buffer : ByteBuffer, inout array : Object, in index : int) : void
            marshaler.marshal((TElem)Array.get(array, index), buffer);
!!!79430839.java!!!	copyListToArray(inout arrayList : ArrayList<?>, inout arrayDest : Object) : Object
            return arrayList.toArray((T[]) arrayDest);
!!!79430967.java!!!	calculateElementMarshalSize(inout marshaler : Marshaler, inout array : Object, in index : int) : int
            Object elem = Array.get(array, index);

            return marshaler.calculateMarshalSize((TElem) elem);
