class MarshalQueryableEnum
!!!79434167.java!!!	createMarshaler(inout managedType : TypeReference, in nativeType : int) : Marshaler
        return new MarshalerEnum(managedType, nativeType);
!!!79434295.java!!!	isTypeMappingSupported(inout managedType : TypeReference, in nativeType : int) : boolean
        if (nativeType == TYPE_INT32 || nativeType == TYPE_BYTE) {
            if (managedType.getType() instanceof Class<?>) {
                Class<?> typeClass = (Class<?>)managedType.getType();

                if (typeClass.isEnum()) {
                    if (DEBUG) {
                        Log.v(TAG, "possible enum detected for " + typeClass);
                    }

                    // The enum must not take extra arguments
                    try {
                        // match a class like: "public enum Fruits { Apple, Orange; }"
                        typeClass.getDeclaredConstructor(String.class, int.class);
                        return true;
                    } catch (NoSuchMethodException e) {
                        // Skip: custom enum with a special constructor e.g. Foo(T), but need Foo()
                        Log.e(TAG, "Can't marshal class " + typeClass + "; no default constructor");
                    } catch (SecurityException e) {
                        // Skip: wouldn't be able to touch the enum anyway
                        Log.e(TAG, "Can't marshal class " + typeClass + "; not accessible");
                    }
                }
            }
        }

        return false;
!!!79434423.java!!!	registerEnumValues(inout enumType : Class, inout values : int [[]]) : void
        if (enumType.getEnumConstants().length != values.length) {
            throw new IllegalArgumentException(
                    "Expected values array to be the same size as the enumTypes values "
                            + values.length + " for type " + enumType);
        }
        if (DEBUG) {
            Log.v(TAG, "Registered enum values for type " + enumType + " values");
        }

        sEnumValues.put(enumType, values);
!!!79434551.java!!!	getEnumValue(inout enumValue : T) : int
        int[] values;
        values = sEnumValues.get(enumValue.getClass());

        int ordinal = enumValue.ordinal();
        if (values != null) {
            return values[ordinal];
        }

        return ordinal;
!!!79434679.java!!!	getEnumFromValue(inout enumType : Class, in value : int) : T
        int ordinal;

        int[] registeredValues = sEnumValues.get(enumType);
        if (registeredValues != null) {
            ordinal = -1;

            for (int i = 0; i < registeredValues.length; ++i) {
                if (registeredValues[i] == value) {
                    ordinal = i;
                    break;
                }
            }
        } else {
            ordinal = value;
        }

        T[] values = enumType.getEnumConstants();

        if (ordinal < 0 || ordinal >= values.length) {
            throw new IllegalArgumentException(
                    String.format(
                            "Argument 'value' (%d) was not a valid enum value for type %s "
                                    + "(registered? %b)",
                            value,
                            enumType, (registeredValues != null)));
        }

        return values[ordinal];
