class MarshalerEnum
!!!79433655.java!!!	MarshalerEnum(inout typeReference : TypeReference, in nativeType : int)
            super(MarshalQueryableEnum.this, typeReference, nativeType);

            mClass = (Class<T>)typeReference.getRawType();
!!!79433783.java!!!	marshal(inout value : T, inout buffer : ByteBuffer) : void
            int enumValue = getEnumValue(value);

            if (mNativeType == TYPE_INT32) {
                buffer.putInt(enumValue);
            } else if (mNativeType == TYPE_BYTE) {
                if (enumValue < UINT8_MIN || enumValue > UINT8_MAX) {
                    throw new UnsupportedOperationException(String.format(
                            "Enum value %x too large to fit into unsigned byte", enumValue));
                }
                buffer.put((byte)enumValue);
            } else {
                throw new AssertionError();
            }
!!!79433911.java!!!	unmarshal(inout buffer : ByteBuffer) : T
            int enumValue;

            switch (mNativeType) {
                case TYPE_INT32:
                    enumValue = buffer.getInt();
                    break;
                case TYPE_BYTE:
                    // get the unsigned byte value; avoid sign extension
                    enumValue = buffer.get() & UINT8_MASK;
                    break;
                default:
                    throw new AssertionError(
                            "Unexpected native type; impossible since its not supported");
            }

            return getEnumFromValue(mClass, enumValue);
!!!79434039.java!!!	getNativeSize() : int
            return getPrimitiveTypeSize(mNativeType);
