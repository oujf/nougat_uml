class MarshalerPair
!!!79437111.java!!!	MarshalerPair(inout typeReference : TypeReference, in nativeType : int)
            super(MarshalQueryablePair.this, typeReference, nativeType);

            mClass = typeReference.getRawType();

            /*
             * Lookup the actual type arguments, e.g. Pair<Integer, Float> --> [Integer, Float]
             * and then get the marshalers for that managed type.
             */
            ParameterizedType paramType;
            try {
                paramType = (ParameterizedType) typeReference.getType();
            } catch (ClassCastException e) {
                throw new AssertionError("Raw use of Pair is not supported", e);
            }

            // Get type marshaler for T1
            {
                Type actualTypeArgument = paramType.getActualTypeArguments()[0];

                TypeReference<?> actualTypeArgToken =
                        TypeReference.createSpecializedTypeReference(actualTypeArgument);

                mNestedTypeMarshalerFirst = (Marshaler<T1>)MarshalRegistry.getMarshaler(
                        actualTypeArgToken, mNativeType);
            }
            // Get type marshaler for T2
            {
                Type actualTypeArgument = paramType.getActualTypeArguments()[1];

                TypeReference<?> actualTypeArgToken =
                        TypeReference.createSpecializedTypeReference(actualTypeArgument);

                mNestedTypeMarshalerSecond = (Marshaler<T2>)MarshalRegistry.getMarshaler(
                        actualTypeArgToken, mNativeType);
            }
            try {
                mConstructor = (Constructor<Pair<T1, T2>>)mClass.getConstructor(
                        Object.class, Object.class);
            } catch (NoSuchMethodException e) {
                throw new AssertionError(e);
            }
!!!79437239.java!!!	marshal(inout value : Pair, inout buffer : ByteBuffer) : void
            if (value.first == null) {
                throw new UnsupportedOperationException("Pair#first must not be null");
            } else if (value.second == null) {
                throw new UnsupportedOperationException("Pair#second must not be null");
            }

            mNestedTypeMarshalerFirst.marshal(value.first, buffer);
            mNestedTypeMarshalerSecond.marshal(value.second, buffer);
!!!79437367.java!!!	unmarshal(inout buffer : ByteBuffer) : Pair
            T1 first = mNestedTypeMarshalerFirst.unmarshal(buffer);
            T2 second = mNestedTypeMarshalerSecond.unmarshal(buffer);

            try {
                return mConstructor.newInstance(first, second);
            } catch (InstantiationException e) {
                throw new AssertionError(e);
            } catch (IllegalAccessException e) {
                throw new AssertionError(e);
            } catch (IllegalArgumentException e) {
                throw new AssertionError(e);
            } catch (InvocationTargetException e) {
                throw new AssertionError(e);
            }
!!!79437495.java!!!	getNativeSize() : int
            int firstSize = mNestedTypeMarshalerFirst.getNativeSize();
            int secondSize = mNestedTypeMarshalerSecond.getNativeSize();

            if (firstSize != NATIVE_SIZE_DYNAMIC && secondSize != NATIVE_SIZE_DYNAMIC) {
                return firstSize + secondSize;
            } else {
                return NATIVE_SIZE_DYNAMIC;
            }
!!!79437623.java!!!	calculateMarshalSize(inout value : Pair) : int
            int nativeSize = getNativeSize();

            if (nativeSize != NATIVE_SIZE_DYNAMIC) {
                return nativeSize;
            } else {
                int firstSize = mNestedTypeMarshalerFirst.calculateMarshalSize(value.first);
                int secondSize = mNestedTypeMarshalerSecond.calculateMarshalSize(value.second);

                return firstSize + secondSize;
            }
