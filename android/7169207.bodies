class ArrayUtils
!!!79470391.java!!!	getArrayIndex(inout array : T [[]], inout needle : T) : int
        if (array == null) {
            return -1;
        }

        int index = 0;
        for (T elem : array) {
            if (Objects.equals(elem, needle)) {
                return index;
            }
            index++;
        }

        return -1;
!!!79470519.java!!!	getArrayIndex(inout array : int [[]], in needle : int) : int
        if (array == null) {
            return -1;
        }
        for (int i = 0; i < array.length; ++i) {
            if (array[i] == needle) {
                return i;
            }
        }
        return -1;
!!!79470647.java!!!	convertStringListToIntArray(inout list : List<String>, inout convertFrom : String [[]], inout convertTo : int [[]]) : int
        if (list == null) {
            return null;
        }

        List<Integer> convertedList = convertStringListToIntList(list, convertFrom, convertTo);

        int[] returnArray = new int[convertedList.size()];
        for (int i = 0; i < returnArray.length; ++i) {
            returnArray[i] = convertedList.get(i);
        }

        return returnArray;
!!!79470775.java!!!	convertStringListToIntList(inout list : List<String>, inout convertFrom : String [[]], inout convertTo : int [[]]) : List<Integer>
        if (list == null) {
            return null;
        }

        List<Integer> convertedList = new ArrayList<>(list.size());

        for (String str : list) {
            int strIndex = getArrayIndex(convertFrom, str);

            // Guard against unexpected values
            if (strIndex < 0) {
                if (DEBUG) Log.v(TAG, "Ignoring invalid value " + str);
                continue;
            }

            // Ignore values we can't map into (intentional)
            if (strIndex < convertTo.length) {
                convertedList.add(convertTo[strIndex]);
            }
        }

        return convertedList;
!!!79470903.java!!!	toIntArray(inout list : List<Integer>) : int
        if (list == null) {
            return null;
        }

        int[] arr = new int[list.size()];
        int i = 0;
        for (int elem : list) {
            arr[i] = elem;
            i++;
        }

        return arr;
!!!79471031.java!!!	contains(inout array : int [[]], in elem : int) : boolean
        return getArrayIndex(array, elem) != -1;
!!!79471159.java!!!	contains(inout array : T [[]], inout elem : T) : boolean
        return getArrayIndex(array, elem) != -1;
!!!79471287.java!!!	ArrayUtils()
        throw new AssertionError();
