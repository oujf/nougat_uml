class HdmiTimerRecordSources
!!!79546295.java!!!	ofDigitalSource(inout timerInfo : HdmiTimerRecordSources::TimerInfo, inout source : HdmiRecordSources::DigitalServiceSource) : HdmiTimerRecordSources::TimerRecordSource
        checkTimerRecordSourceInputs(timerInfo, source);
        return new TimerRecordSource(timerInfo, source);
!!!79546423.java!!!	ofAnalogueSource(inout timerInfo : HdmiTimerRecordSources::TimerInfo, inout source : HdmiRecordSources::AnalogueServiceSource) : HdmiTimerRecordSources::TimerRecordSource
        checkTimerRecordSourceInputs(timerInfo, source);
        return new TimerRecordSource(timerInfo, source);
!!!79546551.java!!!	ofExternalPlug(inout timerInfo : HdmiTimerRecordSources::TimerInfo, inout source : HdmiRecordSources::ExternalPlugData) : HdmiTimerRecordSources::TimerRecordSource
        checkTimerRecordSourceInputs(timerInfo, source);
        return new TimerRecordSource(timerInfo,
                new ExternalSourceDecorator(source, EXTERNAL_SOURCE_SPECIFIER_EXTERNAL_PLUG));
!!!79546679.java!!!	ofExternalPhysicalAddress(inout timerInfo : HdmiTimerRecordSources::TimerInfo, inout source : HdmiRecordSources::ExternalPhysicalAddress) : HdmiTimerRecordSources::TimerRecordSource
        checkTimerRecordSourceInputs(timerInfo, source);
        return new TimerRecordSource(timerInfo,
                new ExternalSourceDecorator(source,
                        EXTERNAL_SOURCE_SPECIFIER_EXTERNAL_PHYSICAL_ADDRESS));
!!!79546807.java!!!	checkTimerRecordSourceInputs(inout timerInfo : HdmiTimerRecordSources::TimerInfo, inout source : HdmiRecordSources::RecordSource) : void
        if (timerInfo == null) {
            Log.w(TAG, "TimerInfo should not be null.");
            throw new IllegalArgumentException("TimerInfo should not be null.");
        }
        if (source == null) {
            Log.w(TAG, "source should not be null.");
            throw new IllegalArgumentException("source should not be null.");
        }
!!!79546935.java!!!	timeOf(in hour : int, in minute : int) : HdmiTimerRecordSources::Time
        checkTimeValue(hour, minute);
        return new Time(hour, minute);
!!!79547063.java!!!	checkTimeValue(in hour : int, in minute : int) : void
        if (hour < 0 || hour > 23) {
            throw new IllegalArgumentException("Hour should be in rage of [0, 23]:" + hour);
        }
        if (minute < 0 || minute > 59) {
            throw new IllegalArgumentException("Minute should be in rage of [0, 59]:" + minute);
        }
!!!79547191.java!!!	durationOf(in hour : int, in minute : int) : HdmiTimerRecordSources::Duration
        checkDurationValue(hour, minute);
        return new Duration(hour, minute);
!!!79547319.java!!!	checkDurationValue(in hour : int, in minute : int) : void
        if (hour < 0 || hour > 99) {
            throw new IllegalArgumentException("Hour should be in rage of [0, 99]:" + hour);
        }
        if (minute < 0 || minute > 59) {
            throw new IllegalArgumentException("minute should be in rage of [0, 59]:" + minute);
        }
!!!79548087.java!!!	timerInfoOf(in dayOfMonth : int, in monthOfYear : int, inout startTime : HdmiTimerRecordSources::Time, inout duration : HdmiTimerRecordSources::Duration, in recordingSequence : int) : HdmiTimerRecordSources::TimerInfo
        if (dayOfMonth < 0 || dayOfMonth > 31) {
            throw new IllegalArgumentException(
                    "Day of month should be in range of [0, 31]:" + dayOfMonth);
        }
        if (monthOfYear < 1 || monthOfYear > 12) {
            throw new IllegalArgumentException(
                    "Month of year should be in range of [1, 12]:" + monthOfYear);
        }
        checkTimeValue(startTime.mHour, startTime.mMinute);
        checkDurationValue(duration.mHour, duration.mMinute);
        // Recording sequence should use least 7 bits or no bits.
        if ((recordingSequence != 0)
                && ((recordingSequence & ~RECORDING_SEQUENCE_REPEAT_MASK) != 0)) {
            throw new IllegalArgumentException(
                    "Invalid reecording sequence value:" + recordingSequence);
        }

        return new TimerInfo(dayOfMonth, monthOfYear, startTime, duration, recordingSequence);
!!!79549239.java!!!	checkTimerRecordSource(in sourcetype : int, inout recordSource : byte [[]]) : boolean
        int recordSourceSize = recordSource.length - TimerInfo.BASIC_INFO_SIZE;
        switch (sourcetype) {
            case TIMER_RECORDING_TYPE_DIGITAL:
                return DigitalServiceSource.EXTRA_DATA_SIZE == recordSourceSize;
            case TIMER_RECORDING_TYPE_ANALOGUE:
                return AnalogueServiceSource.EXTRA_DATA_SIZE == recordSourceSize;
            case TIMER_RECORDING_TYPE_EXTERNAL:
                int specifier = recordSource[TimerInfo.BASIC_INFO_SIZE];
                if (specifier == EXTERNAL_SOURCE_SPECIFIER_EXTERNAL_PLUG) {
                    // One byte for specifier.
                    return ExternalPlugData.EXTRA_DATA_SIZE + 1 == recordSourceSize;
                } else if (specifier == EXTERNAL_SOURCE_SPECIFIER_EXTERNAL_PHYSICAL_ADDRESS) {
                    // One byte for specifier.
                    return ExternalPhysicalAddress.EXTRA_DATA_SIZE + 1 == recordSourceSize;
                } else {
                    // Invalid specifier.
                    return false;
                }
            default:
                return false;
        }
