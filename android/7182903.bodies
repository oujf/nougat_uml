class Stub
!!!79553847.java!!!	Stub()
this.attachInterface(this, DESCRIPTOR);
!!!79553975.java!!!	asInterface(inout obj : IBinder) : IHdmiControlService
if ((obj==null)) {
return null;
}
android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);
if (((iin!=null)&&(iin instanceof android.hardware.hdmi.IHdmiControlService))) {
return ((android.hardware.hdmi.IHdmiControlService)iin);
}
return new android.hardware.hdmi.IHdmiControlService.Stub.Proxy(obj);
!!!79554103.java!!!	asBinder() : IBinder
return this;
!!!79554231.java!!!	onTransact(in code : int, inout data : Parcel, inout reply : Parcel, in flags : int) : boolean
switch (code)
{
case INTERFACE_TRANSACTION:
{
reply.writeString(DESCRIPTOR);
return true;
}
case TRANSACTION_getSupportedTypes:
{
data.enforceInterface(DESCRIPTOR);
int[] _result = this.getSupportedTypes();
reply.writeNoException();
reply.writeIntArray(_result);
return true;
}
case TRANSACTION_getActiveSource:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.hdmi.HdmiDeviceInfo _result = this.getActiveSource();
reply.writeNoException();
if ((_result!=null)) {
reply.writeInt(1);
_result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
case TRANSACTION_oneTouchPlay:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.hdmi.IHdmiControlCallback _arg0;
_arg0 = android.hardware.hdmi.IHdmiControlCallback.Stub.asInterface(data.readStrongBinder());
this.oneTouchPlay(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_queryDisplayStatus:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.hdmi.IHdmiControlCallback _arg0;
_arg0 = android.hardware.hdmi.IHdmiControlCallback.Stub.asInterface(data.readStrongBinder());
this.queryDisplayStatus(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_addHotplugEventListener:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.hdmi.IHdmiHotplugEventListener _arg0;
_arg0 = android.hardware.hdmi.IHdmiHotplugEventListener.Stub.asInterface(data.readStrongBinder());
this.addHotplugEventListener(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_removeHotplugEventListener:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.hdmi.IHdmiHotplugEventListener _arg0;
_arg0 = android.hardware.hdmi.IHdmiHotplugEventListener.Stub.asInterface(data.readStrongBinder());
this.removeHotplugEventListener(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_addDeviceEventListener:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.hdmi.IHdmiDeviceEventListener _arg0;
_arg0 = android.hardware.hdmi.IHdmiDeviceEventListener.Stub.asInterface(data.readStrongBinder());
this.addDeviceEventListener(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_deviceSelect:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
android.hardware.hdmi.IHdmiControlCallback _arg1;
_arg1 = android.hardware.hdmi.IHdmiControlCallback.Stub.asInterface(data.readStrongBinder());
this.deviceSelect(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_portSelect:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
android.hardware.hdmi.IHdmiControlCallback _arg1;
_arg1 = android.hardware.hdmi.IHdmiControlCallback.Stub.asInterface(data.readStrongBinder());
this.portSelect(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_sendKeyEvent:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
int _arg1;
_arg1 = data.readInt();
boolean _arg2;
_arg2 = (0!=data.readInt());
this.sendKeyEvent(_arg0, _arg1, _arg2);
reply.writeNoException();
return true;
}
case TRANSACTION_getPortInfo:
{
data.enforceInterface(DESCRIPTOR);
java.util.List<android.hardware.hdmi.HdmiPortInfo> _result = this.getPortInfo();
reply.writeNoException();
reply.writeTypedList(_result);
return true;
}
case TRANSACTION_canChangeSystemAudioMode:
{
data.enforceInterface(DESCRIPTOR);
boolean _result = this.canChangeSystemAudioMode();
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_getSystemAudioMode:
{
data.enforceInterface(DESCRIPTOR);
boolean _result = this.getSystemAudioMode();
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_setSystemAudioMode:
{
data.enforceInterface(DESCRIPTOR);
boolean _arg0;
_arg0 = (0!=data.readInt());
android.hardware.hdmi.IHdmiControlCallback _arg1;
_arg1 = android.hardware.hdmi.IHdmiControlCallback.Stub.asInterface(data.readStrongBinder());
this.setSystemAudioMode(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_addSystemAudioModeChangeListener:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.hdmi.IHdmiSystemAudioModeChangeListener _arg0;
_arg0 = android.hardware.hdmi.IHdmiSystemAudioModeChangeListener.Stub.asInterface(data.readStrongBinder());
this.addSystemAudioModeChangeListener(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_removeSystemAudioModeChangeListener:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.hdmi.IHdmiSystemAudioModeChangeListener _arg0;
_arg0 = android.hardware.hdmi.IHdmiSystemAudioModeChangeListener.Stub.asInterface(data.readStrongBinder());
this.removeSystemAudioModeChangeListener(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_setArcMode:
{
data.enforceInterface(DESCRIPTOR);
boolean _arg0;
_arg0 = (0!=data.readInt());
this.setArcMode(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_setProhibitMode:
{
data.enforceInterface(DESCRIPTOR);
boolean _arg0;
_arg0 = (0!=data.readInt());
this.setProhibitMode(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_setSystemAudioVolume:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
int _arg1;
_arg1 = data.readInt();
int _arg2;
_arg2 = data.readInt();
this.setSystemAudioVolume(_arg0, _arg1, _arg2);
reply.writeNoException();
return true;
}
case TRANSACTION_setSystemAudioMute:
{
data.enforceInterface(DESCRIPTOR);
boolean _arg0;
_arg0 = (0!=data.readInt());
this.setSystemAudioMute(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_setInputChangeListener:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.hdmi.IHdmiInputChangeListener _arg0;
_arg0 = android.hardware.hdmi.IHdmiInputChangeListener.Stub.asInterface(data.readStrongBinder());
this.setInputChangeListener(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_getInputDevices:
{
data.enforceInterface(DESCRIPTOR);
java.util.List<android.hardware.hdmi.HdmiDeviceInfo> _result = this.getInputDevices();
reply.writeNoException();
reply.writeTypedList(_result);
return true;
}
case TRANSACTION_getDeviceList:
{
data.enforceInterface(DESCRIPTOR);
java.util.List<android.hardware.hdmi.HdmiDeviceInfo> _result = this.getDeviceList();
reply.writeNoException();
reply.writeTypedList(_result);
return true;
}
case TRANSACTION_sendVendorCommand:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
int _arg1;
_arg1 = data.readInt();
byte[] _arg2;
_arg2 = data.createByteArray();
boolean _arg3;
_arg3 = (0!=data.readInt());
this.sendVendorCommand(_arg0, _arg1, _arg2, _arg3);
reply.writeNoException();
return true;
}
case TRANSACTION_addVendorCommandListener:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.hdmi.IHdmiVendorCommandListener _arg0;
_arg0 = android.hardware.hdmi.IHdmiVendorCommandListener.Stub.asInterface(data.readStrongBinder());
int _arg1;
_arg1 = data.readInt();
this.addVendorCommandListener(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_sendStandby:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
int _arg1;
_arg1 = data.readInt();
this.sendStandby(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_setHdmiRecordListener:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.hdmi.IHdmiRecordListener _arg0;
_arg0 = android.hardware.hdmi.IHdmiRecordListener.Stub.asInterface(data.readStrongBinder());
this.setHdmiRecordListener(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_startOneTouchRecord:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
byte[] _arg1;
_arg1 = data.createByteArray();
this.startOneTouchRecord(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_stopOneTouchRecord:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
this.stopOneTouchRecord(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_startTimerRecording:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
int _arg1;
_arg1 = data.readInt();
byte[] _arg2;
_arg2 = data.createByteArray();
this.startTimerRecording(_arg0, _arg1, _arg2);
reply.writeNoException();
return true;
}
case TRANSACTION_clearTimerRecording:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
int _arg1;
_arg1 = data.readInt();
byte[] _arg2;
_arg2 = data.createByteArray();
this.clearTimerRecording(_arg0, _arg1, _arg2);
reply.writeNoException();
return true;
}
case TRANSACTION_sendMhlVendorCommand:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
int _arg1;
_arg1 = data.readInt();
int _arg2;
_arg2 = data.readInt();
byte[] _arg3;
_arg3 = data.createByteArray();
this.sendMhlVendorCommand(_arg0, _arg1, _arg2, _arg3);
reply.writeNoException();
return true;
}
case TRANSACTION_addHdmiMhlVendorCommandListener:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.hdmi.IHdmiMhlVendorCommandListener _arg0;
_arg0 = android.hardware.hdmi.IHdmiMhlVendorCommandListener.Stub.asInterface(data.readStrongBinder());
this.addHdmiMhlVendorCommandListener(_arg0);
reply.writeNoException();
return true;
}
}
return super.onTransact(code, data, reply, flags);
