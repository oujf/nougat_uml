class Stub
!!!79573431.java!!!	Stub()
this.attachInterface(this, DESCRIPTOR);
!!!79573559.java!!!	asInterface(inout obj : IBinder) : IInputManager
if ((obj==null)) {
return null;
}
android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);
if (((iin!=null)&&(iin instanceof android.hardware.input.IInputManager))) {
return ((android.hardware.input.IInputManager)iin);
}
return new android.hardware.input.IInputManager.Stub.Proxy(obj);
!!!79573687.java!!!	asBinder() : IBinder
return this;
!!!79573815.java!!!	onTransact(in code : int, inout data : Parcel, inout reply : Parcel, in flags : int) : boolean
switch (code)
{
case INTERFACE_TRANSACTION:
{
reply.writeString(DESCRIPTOR);
return true;
}
case TRANSACTION_getInputDevice:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
android.view.InputDevice _result = this.getInputDevice(_arg0);
reply.writeNoException();
if ((_result!=null)) {
reply.writeInt(1);
_result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
case TRANSACTION_getInputDeviceIds:
{
data.enforceInterface(DESCRIPTOR);
int[] _result = this.getInputDeviceIds();
reply.writeNoException();
reply.writeIntArray(_result);
return true;
}
case TRANSACTION_hasKeys:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
int _arg1;
_arg1 = data.readInt();
int[] _arg2;
_arg2 = data.createIntArray();
boolean[] _arg3;
int _arg3_length = data.readInt();
if ((_arg3_length<0)) {
_arg3 = null;
}
else {
_arg3 = new boolean[_arg3_length];
}
boolean _result = this.hasKeys(_arg0, _arg1, _arg2, _arg3);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
reply.writeBooleanArray(_arg3);
return true;
}
case TRANSACTION_tryPointerSpeed:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
this.tryPointerSpeed(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_injectInputEvent:
{
data.enforceInterface(DESCRIPTOR);
android.view.InputEvent _arg0;
if ((0!=data.readInt())) {
_arg0 = android.view.InputEvent.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
int _arg1;
_arg1 = data.readInt();
boolean _result = this.injectInputEvent(_arg0, _arg1);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_getTouchCalibrationForInputDevice:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
int _arg1;
_arg1 = data.readInt();
android.hardware.input.TouchCalibration _result = this.getTouchCalibrationForInputDevice(_arg0, _arg1);
reply.writeNoException();
if ((_result!=null)) {
reply.writeInt(1);
_result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
case TRANSACTION_setTouchCalibrationForInputDevice:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
int _arg1;
_arg1 = data.readInt();
android.hardware.input.TouchCalibration _arg2;
if ((0!=data.readInt())) {
_arg2 = android.hardware.input.TouchCalibration.CREATOR.createFromParcel(data);
}
else {
_arg2 = null;
}
this.setTouchCalibrationForInputDevice(_arg0, _arg1, _arg2);
reply.writeNoException();
return true;
}
case TRANSACTION_getKeyboardLayouts:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.input.KeyboardLayout[] _result = this.getKeyboardLayouts();
reply.writeNoException();
reply.writeTypedArray(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
return true;
}
case TRANSACTION_getKeyboardLayoutsForInputDevice:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.input.InputDeviceIdentifier _arg0;
if ((0!=data.readInt())) {
_arg0 = android.hardware.input.InputDeviceIdentifier.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
android.hardware.input.KeyboardLayout[] _result = this.getKeyboardLayoutsForInputDevice(_arg0);
reply.writeNoException();
reply.writeTypedArray(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
return true;
}
case TRANSACTION_getKeyboardLayout:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
android.hardware.input.KeyboardLayout _result = this.getKeyboardLayout(_arg0);
reply.writeNoException();
if ((_result!=null)) {
reply.writeInt(1);
_result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
case TRANSACTION_getCurrentKeyboardLayoutForInputDevice:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.input.InputDeviceIdentifier _arg0;
if ((0!=data.readInt())) {
_arg0 = android.hardware.input.InputDeviceIdentifier.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
java.lang.String _result = this.getCurrentKeyboardLayoutForInputDevice(_arg0);
reply.writeNoException();
reply.writeString(_result);
return true;
}
case TRANSACTION_setCurrentKeyboardLayoutForInputDevice:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.input.InputDeviceIdentifier _arg0;
if ((0!=data.readInt())) {
_arg0 = android.hardware.input.InputDeviceIdentifier.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
java.lang.String _arg1;
_arg1 = data.readString();
this.setCurrentKeyboardLayoutForInputDevice(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_getEnabledKeyboardLayoutsForInputDevice:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.input.InputDeviceIdentifier _arg0;
if ((0!=data.readInt())) {
_arg0 = android.hardware.input.InputDeviceIdentifier.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
java.lang.String[] _result = this.getEnabledKeyboardLayoutsForInputDevice(_arg0);
reply.writeNoException();
reply.writeStringArray(_result);
return true;
}
case TRANSACTION_addKeyboardLayoutForInputDevice:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.input.InputDeviceIdentifier _arg0;
if ((0!=data.readInt())) {
_arg0 = android.hardware.input.InputDeviceIdentifier.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
java.lang.String _arg1;
_arg1 = data.readString();
this.addKeyboardLayoutForInputDevice(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_removeKeyboardLayoutForInputDevice:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.input.InputDeviceIdentifier _arg0;
if ((0!=data.readInt())) {
_arg0 = android.hardware.input.InputDeviceIdentifier.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
java.lang.String _arg1;
_arg1 = data.readString();
this.removeKeyboardLayoutForInputDevice(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_getKeyboardLayoutForInputDevice:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.input.InputDeviceIdentifier _arg0;
if ((0!=data.readInt())) {
_arg0 = android.hardware.input.InputDeviceIdentifier.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
android.view.inputmethod.InputMethodInfo _arg1;
if ((0!=data.readInt())) {
_arg1 = android.view.inputmethod.InputMethodInfo.CREATOR.createFromParcel(data);
}
else {
_arg1 = null;
}
android.view.inputmethod.InputMethodSubtype _arg2;
if ((0!=data.readInt())) {
_arg2 = android.view.inputmethod.InputMethodSubtype.CREATOR.createFromParcel(data);
}
else {
_arg2 = null;
}
android.hardware.input.KeyboardLayout _result = this.getKeyboardLayoutForInputDevice(_arg0, _arg1, _arg2);
reply.writeNoException();
if ((_result!=null)) {
reply.writeInt(1);
_result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
case TRANSACTION_setKeyboardLayoutForInputDevice:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.input.InputDeviceIdentifier _arg0;
if ((0!=data.readInt())) {
_arg0 = android.hardware.input.InputDeviceIdentifier.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
android.view.inputmethod.InputMethodInfo _arg1;
if ((0!=data.readInt())) {
_arg1 = android.view.inputmethod.InputMethodInfo.CREATOR.createFromParcel(data);
}
else {
_arg1 = null;
}
android.view.inputmethod.InputMethodSubtype _arg2;
if ((0!=data.readInt())) {
_arg2 = android.view.inputmethod.InputMethodSubtype.CREATOR.createFromParcel(data);
}
else {
_arg2 = null;
}
java.lang.String _arg3;
_arg3 = data.readString();
this.setKeyboardLayoutForInputDevice(_arg0, _arg1, _arg2, _arg3);
reply.writeNoException();
return true;
}
case TRANSACTION_registerInputDevicesChangedListener:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.input.IInputDevicesChangedListener _arg0;
_arg0 = android.hardware.input.IInputDevicesChangedListener.Stub.asInterface(data.readStrongBinder());
this.registerInputDevicesChangedListener(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_isInTabletMode:
{
data.enforceInterface(DESCRIPTOR);
int _result = this.isInTabletMode();
reply.writeNoException();
reply.writeInt(_result);
return true;
}
case TRANSACTION_registerTabletModeChangedListener:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.input.ITabletModeChangedListener _arg0;
_arg0 = android.hardware.input.ITabletModeChangedListener.Stub.asInterface(data.readStrongBinder());
this.registerTabletModeChangedListener(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_vibrate:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
long[] _arg1;
_arg1 = data.createLongArray();
int _arg2;
_arg2 = data.readInt();
android.os.IBinder _arg3;
_arg3 = data.readStrongBinder();
this.vibrate(_arg0, _arg1, _arg2, _arg3);
reply.writeNoException();
return true;
}
case TRANSACTION_cancelVibrate:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
android.os.IBinder _arg1;
_arg1 = data.readStrongBinder();
this.cancelVibrate(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_setPointerIconType:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
this.setPointerIconType(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_setCustomPointerIcon:
{
data.enforceInterface(DESCRIPTOR);
android.view.PointerIcon _arg0;
if ((0!=data.readInt())) {
_arg0 = android.view.PointerIcon.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
this.setCustomPointerIcon(_arg0);
reply.writeNoException();
return true;
}
}
return super.onTransact(code, data, reply, flags);
