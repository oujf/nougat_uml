class NanoApp
!!!79636023.java!!!	NanoApp()
        this(0, null);
        mAppIdSet = false;
!!!79636151.java!!!	NanoApp(in appId : int, inout appBinary : byte [[]])
        mPublisher = UNKNOWN;
        mName = UNKNOWN;

        mAppId = appId;
        mAppIdSet = true;
        mAppVersion = 0;

        mNeededReadMemBytes = 0;
        mNeededWriteMemBytes = 0;
        mNeededExecMemBytes = 0;

        mNeededSensors = new int[0];
        mOutputEvents = new int[0];
        mAppBinary = appBinary;
!!!79636279.java!!!	setPublisher(inout publisher : String) : void
        mPublisher = publisher;
!!!79636407.java!!!	setName(inout name : String) : void
        mName = name;
!!!79636535.java!!!	setAppId(in appId : int) : void
        mAppId = appId;
        mAppIdSet = true;
!!!79636663.java!!!	setAppVersion(in appVersion : int) : void
        mAppVersion = appVersion;
!!!79636791.java!!!	setNeededReadMemBytes(in neededReadMemBytes : int) : void
        mNeededReadMemBytes = neededReadMemBytes;
!!!79636919.java!!!	setNeededWriteMemBytes(in neededWriteMemBytes : int) : void
        mNeededWriteMemBytes = neededWriteMemBytes;
!!!79637047.java!!!	setNeededExecMemBytes(in neededExecMemBytes : int) : void
        mNeededExecMemBytes = neededExecMemBytes;
!!!79637175.java!!!	setNeededSensors(inout neededSensors : int [[]]) : void
        mNeededSensors = neededSensors;
!!!79637303.java!!!	setOutputEvents(inout outputEvents : int [[]]) : void
        mOutputEvents = outputEvents;
!!!79637431.java!!!	setAppBinary(inout appBinary : byte [[]]) : void
        mAppBinary = appBinary;
!!!79637559.java!!!	getPublisher() : String
        return mPublisher;
!!!79637687.java!!!	getName() : String
        return mName;
!!!79637815.java!!!	getAppId() : int
        return mAppId;
!!!79637943.java!!!	getAppVersion() : int
        return mAppVersion;
!!!79638071.java!!!	getNeededReadMemBytes() : int
        return mNeededReadMemBytes;
!!!79638199.java!!!	getNeededWriteMemBytes() : int
        return mNeededWriteMemBytes;
!!!79638327.java!!!	getNeededExecMemBytes() : int
        return mNeededExecMemBytes;
!!!79638455.java!!!	getNeededSensors() : int
        return mNeededSensors;
!!!79638583.java!!!	getOutputEvents() : int
        return mOutputEvents;
!!!79638711.java!!!	getAppBinary() : byte
        return mAppBinary;
!!!79638839.java!!!	NanoApp(inout in : Parcel)
        mPublisher = in.readString();
        mName = in.readString();

        mAppId = in.readInt();
        mAppVersion = in.readInt();
        mNeededReadMemBytes = in.readInt();
        mNeededWriteMemBytes = in.readInt();
        mNeededExecMemBytes = in.readInt();

        int mNeededSensorsLength = in.readInt();
        mNeededSensors = new int[mNeededSensorsLength];
        in.readIntArray(mNeededSensors);

        int mOutputEventsLength = in.readInt();
        mOutputEvents = new int[mOutputEventsLength];
        in.readIntArray(mOutputEvents);

        int binaryLength = in.readInt();
        mAppBinary = new byte[binaryLength];
        in.readByteArray(mAppBinary);
!!!79638967.java!!!	describeContents() : int
        return 0;
!!!79639095.java!!!	writeToParcel(inout out : Parcel, in flags : int) : void
        if (mAppBinary == null) {
            throw new IllegalStateException("Must set non-null AppBinary for nanoapp " + mName);
        }
        if (!mAppIdSet) {
            throw new IllegalStateException("Must set AppId for nanoapp " + mName);
        }

        out.writeString(mPublisher);
        out.writeString(mName);
        out.writeInt(mAppId);
        out.writeInt(mAppVersion);
        out.writeInt(mNeededReadMemBytes);
        out.writeInt(mNeededWriteMemBytes);
        out.writeInt(mNeededExecMemBytes);

        out.writeInt(mNeededSensors.length);
        out.writeIntArray(mNeededSensors);

        out.writeInt(mOutputEvents.length);
        out.writeIntArray(mOutputEvents);

        out.writeInt(mAppBinary.length);
        out.writeByteArray(mAppBinary);
!!!79639223.java!!!	toString() : String
        String retVal = "Id : " + mAppId;
        retVal += ", Version : " + mAppVersion;
        retVal += ", Name : " + mName;
        retVal += ", Publisher : " + mPublisher;

        return retVal;
