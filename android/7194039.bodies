class Stub
!!!79625271.java!!!	Stub()
this.attachInterface(this, DESCRIPTOR);
!!!79625399.java!!!	asInterface(inout obj : IBinder) : IFusedLocationHardware
if ((obj==null)) {
return null;
}
android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);
if (((iin!=null)&&(iin instanceof android.hardware.location.IFusedLocationHardware))) {
return ((android.hardware.location.IFusedLocationHardware)iin);
}
return new android.hardware.location.IFusedLocationHardware.Stub.Proxy(obj);
!!!79625527.java!!!	asBinder() : IBinder
return this;
!!!79625655.java!!!	onTransact(in code : int, inout data : Parcel, inout reply : Parcel, in flags : int) : boolean
switch (code)
{
case INTERFACE_TRANSACTION:
{
reply.writeString(DESCRIPTOR);
return true;
}
case TRANSACTION_registerSink:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.location.IFusedLocationHardwareSink _arg0;
_arg0 = android.hardware.location.IFusedLocationHardwareSink.Stub.asInterface(data.readStrongBinder());
this.registerSink(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_unregisterSink:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.location.IFusedLocationHardwareSink _arg0;
_arg0 = android.hardware.location.IFusedLocationHardwareSink.Stub.asInterface(data.readStrongBinder());
this.unregisterSink(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_getSupportedBatchSize:
{
data.enforceInterface(DESCRIPTOR);
int _result = this.getSupportedBatchSize();
reply.writeNoException();
reply.writeInt(_result);
return true;
}
case TRANSACTION_startBatching:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
android.location.FusedBatchOptions _arg1;
if ((0!=data.readInt())) {
_arg1 = android.location.FusedBatchOptions.CREATOR.createFromParcel(data);
}
else {
_arg1 = null;
}
this.startBatching(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_stopBatching:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
this.stopBatching(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_updateBatchingOptions:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
android.location.FusedBatchOptions _arg1;
if ((0!=data.readInt())) {
_arg1 = android.location.FusedBatchOptions.CREATOR.createFromParcel(data);
}
else {
_arg1 = null;
}
this.updateBatchingOptions(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_requestBatchOfLocations:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
this.requestBatchOfLocations(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_supportsDiagnosticDataInjection:
{
data.enforceInterface(DESCRIPTOR);
boolean _result = this.supportsDiagnosticDataInjection();
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_injectDiagnosticData:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
this.injectDiagnosticData(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_supportsDeviceContextInjection:
{
data.enforceInterface(DESCRIPTOR);
boolean _result = this.supportsDeviceContextInjection();
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_injectDeviceContext:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
this.injectDeviceContext(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_flushBatchedLocations:
{
data.enforceInterface(DESCRIPTOR);
this.flushBatchedLocations();
reply.writeNoException();
return true;
}
case TRANSACTION_getVersion:
{
data.enforceInterface(DESCRIPTOR);
int _result = this.getVersion();
reply.writeNoException();
reply.writeInt(_result);
return true;
}
}
return super.onTransact(code, data, reply, flags);
