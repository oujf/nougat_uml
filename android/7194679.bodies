class Stub
!!!79631415.java!!!	Stub()
this.attachInterface(this, DESCRIPTOR);
!!!79631543.java!!!	asInterface(inout obj : IBinder) : IGeofenceHardware
if ((obj==null)) {
return null;
}
android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);
if (((iin!=null)&&(iin instanceof android.hardware.location.IGeofenceHardware))) {
return ((android.hardware.location.IGeofenceHardware)iin);
}
return new android.hardware.location.IGeofenceHardware.Stub.Proxy(obj);
!!!79631671.java!!!	asBinder() : IBinder
return this;
!!!79631799.java!!!	onTransact(in code : int, inout data : Parcel, inout reply : Parcel, in flags : int) : boolean
switch (code)
{
case INTERFACE_TRANSACTION:
{
reply.writeString(DESCRIPTOR);
return true;
}
case TRANSACTION_setGpsGeofenceHardware:
{
data.enforceInterface(DESCRIPTOR);
android.location.IGpsGeofenceHardware _arg0;
_arg0 = android.location.IGpsGeofenceHardware.Stub.asInterface(data.readStrongBinder());
this.setGpsGeofenceHardware(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_setFusedGeofenceHardware:
{
data.enforceInterface(DESCRIPTOR);
android.location.IFusedGeofenceHardware _arg0;
_arg0 = android.location.IFusedGeofenceHardware.Stub.asInterface(data.readStrongBinder());
this.setFusedGeofenceHardware(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_getMonitoringTypes:
{
data.enforceInterface(DESCRIPTOR);
int[] _result = this.getMonitoringTypes();
reply.writeNoException();
reply.writeIntArray(_result);
return true;
}
case TRANSACTION_getStatusOfMonitoringType:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
int _result = this.getStatusOfMonitoringType(_arg0);
reply.writeNoException();
reply.writeInt(_result);
return true;
}
case TRANSACTION_addCircularFence:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
android.hardware.location.GeofenceHardwareRequestParcelable _arg1;
if ((0!=data.readInt())) {
_arg1 = android.hardware.location.GeofenceHardwareRequestParcelable.CREATOR.createFromParcel(data);
}
else {
_arg1 = null;
}
android.hardware.location.IGeofenceHardwareCallback _arg2;
_arg2 = android.hardware.location.IGeofenceHardwareCallback.Stub.asInterface(data.readStrongBinder());
boolean _result = this.addCircularFence(_arg0, _arg1, _arg2);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_removeGeofence:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
int _arg1;
_arg1 = data.readInt();
boolean _result = this.removeGeofence(_arg0, _arg1);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_pauseGeofence:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
int _arg1;
_arg1 = data.readInt();
boolean _result = this.pauseGeofence(_arg0, _arg1);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_resumeGeofence:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
int _arg1;
_arg1 = data.readInt();
int _arg2;
_arg2 = data.readInt();
boolean _result = this.resumeGeofence(_arg0, _arg1, _arg2);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_registerForMonitorStateChangeCallback:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
android.hardware.location.IGeofenceHardwareMonitorCallback _arg1;
_arg1 = android.hardware.location.IGeofenceHardwareMonitorCallback.Stub.asInterface(data.readStrongBinder());
boolean _result = this.registerForMonitorStateChangeCallback(_arg0, _arg1);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_unregisterForMonitorStateChangeCallback:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
android.hardware.location.IGeofenceHardwareMonitorCallback _arg1;
_arg1 = android.hardware.location.IGeofenceHardwareMonitorCallback.Stub.asInterface(data.readStrongBinder());
boolean _result = this.unregisterForMonitorStateChangeCallback(_arg0, _arg1);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
}
return super.onTransact(code, data, reply, flags);
