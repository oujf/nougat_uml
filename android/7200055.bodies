class Stub
!!!79682487.java!!!	Stub()
this.attachInterface(this, DESCRIPTOR);
!!!79682615.java!!!	asInterface(inout obj : IBinder) : IUsbManager
if ((obj==null)) {
return null;
}
android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);
if (((iin!=null)&&(iin instanceof android.hardware.usb.IUsbManager))) {
return ((android.hardware.usb.IUsbManager)iin);
}
return new android.hardware.usb.IUsbManager.Stub.Proxy(obj);
!!!79682743.java!!!	asBinder() : IBinder
return this;
!!!79682871.java!!!	onTransact(in code : int, inout data : Parcel, inout reply : Parcel, in flags : int) : boolean
switch (code)
{
case INTERFACE_TRANSACTION:
{
reply.writeString(DESCRIPTOR);
return true;
}
case TRANSACTION_getDeviceList:
{
data.enforceInterface(DESCRIPTOR);
android.os.Bundle _arg0;
_arg0 = new android.os.Bundle();
this.getDeviceList(_arg0);
reply.writeNoException();
if ((_arg0!=null)) {
reply.writeInt(1);
_arg0.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
case TRANSACTION_openDevice:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
android.os.ParcelFileDescriptor _result = this.openDevice(_arg0);
reply.writeNoException();
if ((_result!=null)) {
reply.writeInt(1);
_result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
case TRANSACTION_getCurrentAccessory:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.usb.UsbAccessory _result = this.getCurrentAccessory();
reply.writeNoException();
if ((_result!=null)) {
reply.writeInt(1);
_result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
case TRANSACTION_openAccessory:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.usb.UsbAccessory _arg0;
if ((0!=data.readInt())) {
_arg0 = android.hardware.usb.UsbAccessory.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
android.os.ParcelFileDescriptor _result = this.openAccessory(_arg0);
reply.writeNoException();
if ((_result!=null)) {
reply.writeInt(1);
_result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
case TRANSACTION_setDevicePackage:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.usb.UsbDevice _arg0;
if ((0!=data.readInt())) {
_arg0 = android.hardware.usb.UsbDevice.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
java.lang.String _arg1;
_arg1 = data.readString();
int _arg2;
_arg2 = data.readInt();
this.setDevicePackage(_arg0, _arg1, _arg2);
reply.writeNoException();
return true;
}
case TRANSACTION_setAccessoryPackage:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.usb.UsbAccessory _arg0;
if ((0!=data.readInt())) {
_arg0 = android.hardware.usb.UsbAccessory.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
java.lang.String _arg1;
_arg1 = data.readString();
int _arg2;
_arg2 = data.readInt();
this.setAccessoryPackage(_arg0, _arg1, _arg2);
reply.writeNoException();
return true;
}
case TRANSACTION_hasDevicePermission:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.usb.UsbDevice _arg0;
if ((0!=data.readInt())) {
_arg0 = android.hardware.usb.UsbDevice.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
boolean _result = this.hasDevicePermission(_arg0);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_hasAccessoryPermission:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.usb.UsbAccessory _arg0;
if ((0!=data.readInt())) {
_arg0 = android.hardware.usb.UsbAccessory.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
boolean _result = this.hasAccessoryPermission(_arg0);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_requestDevicePermission:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.usb.UsbDevice _arg0;
if ((0!=data.readInt())) {
_arg0 = android.hardware.usb.UsbDevice.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
java.lang.String _arg1;
_arg1 = data.readString();
android.app.PendingIntent _arg2;
if ((0!=data.readInt())) {
_arg2 = android.app.PendingIntent.CREATOR.createFromParcel(data);
}
else {
_arg2 = null;
}
this.requestDevicePermission(_arg0, _arg1, _arg2);
reply.writeNoException();
return true;
}
case TRANSACTION_requestAccessoryPermission:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.usb.UsbAccessory _arg0;
if ((0!=data.readInt())) {
_arg0 = android.hardware.usb.UsbAccessory.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
java.lang.String _arg1;
_arg1 = data.readString();
android.app.PendingIntent _arg2;
if ((0!=data.readInt())) {
_arg2 = android.app.PendingIntent.CREATOR.createFromParcel(data);
}
else {
_arg2 = null;
}
this.requestAccessoryPermission(_arg0, _arg1, _arg2);
reply.writeNoException();
return true;
}
case TRANSACTION_grantDevicePermission:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.usb.UsbDevice _arg0;
if ((0!=data.readInt())) {
_arg0 = android.hardware.usb.UsbDevice.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
int _arg1;
_arg1 = data.readInt();
this.grantDevicePermission(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_grantAccessoryPermission:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.usb.UsbAccessory _arg0;
if ((0!=data.readInt())) {
_arg0 = android.hardware.usb.UsbAccessory.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
int _arg1;
_arg1 = data.readInt();
this.grantAccessoryPermission(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_hasDefaults:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
int _arg1;
_arg1 = data.readInt();
boolean _result = this.hasDefaults(_arg0, _arg1);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_clearDefaults:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
int _arg1;
_arg1 = data.readInt();
this.clearDefaults(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_isFunctionEnabled:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
boolean _result = this.isFunctionEnabled(_arg0);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_setCurrentFunction:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
this.setCurrentFunction(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_setUsbDataUnlocked:
{
data.enforceInterface(DESCRIPTOR);
boolean _arg0;
_arg0 = (0!=data.readInt());
this.setUsbDataUnlocked(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_allowUsbDebugging:
{
data.enforceInterface(DESCRIPTOR);
boolean _arg0;
_arg0 = (0!=data.readInt());
java.lang.String _arg1;
_arg1 = data.readString();
this.allowUsbDebugging(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_denyUsbDebugging:
{
data.enforceInterface(DESCRIPTOR);
this.denyUsbDebugging();
reply.writeNoException();
return true;
}
case TRANSACTION_clearUsbDebuggingKeys:
{
data.enforceInterface(DESCRIPTOR);
this.clearUsbDebuggingKeys();
reply.writeNoException();
return true;
}
case TRANSACTION_getPorts:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.usb.UsbPort[] _result = this.getPorts();
reply.writeNoException();
reply.writeTypedArray(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
return true;
}
case TRANSACTION_getPortStatus:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
android.hardware.usb.UsbPortStatus _result = this.getPortStatus(_arg0);
reply.writeNoException();
if ((_result!=null)) {
reply.writeInt(1);
_result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
case TRANSACTION_setPortRoles:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
int _arg1;
_arg1 = data.readInt();
int _arg2;
_arg2 = data.readInt();
this.setPortRoles(_arg0, _arg1, _arg2);
reply.writeNoException();
return true;
}
}
return super.onTransact(code, data, reply, flags);
