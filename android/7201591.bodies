class UsbManager
!!!79702711.java!!!	UsbManager(inout context : Context, inout service : IUsbManager)
        mContext = context;
        mService = service;
!!!79702839.java!!!	getDeviceList() : String
        Bundle bundle = new Bundle();
        try {
            mService.getDeviceList(bundle);
            HashMap<String,UsbDevice> result = new HashMap<String,UsbDevice>();
            for (String name : bundle.keySet()) {
                result.put(name, (UsbDevice)bundle.get(name));
            }
            return result;
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!79702967.java!!!	openDevice(inout device : UsbDevice) : UsbDeviceConnection
        try {
            String deviceName = device.getDeviceName();
            ParcelFileDescriptor pfd = mService.openDevice(deviceName);
            if (pfd != null) {
                UsbDeviceConnection connection = new UsbDeviceConnection(device);
                boolean result = connection.open(deviceName, pfd);
                pfd.close();
                if (result) {
                    return connection;
                }
            }
        } catch (Exception e) {
            Log.e(TAG, "exception in UsbManager.openDevice", e);
        }
        return null;
!!!79703095.java!!!	getAccessoryList() : UsbAccessory
        try {
            UsbAccessory accessory = mService.getCurrentAccessory();
            if (accessory == null) {
                return null;
            } else {
                return new UsbAccessory[] { accessory };
            }
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!79703223.java!!!	openAccessory(inout accessory : UsbAccessory) : ParcelFileDescriptor
        try {
            return mService.openAccessory(accessory);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!79703351.java!!!	hasPermission(inout device : UsbDevice) : boolean
        try {
            return mService.hasDevicePermission(device);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!79703479.java!!!	hasPermission(inout accessory : UsbAccessory) : boolean
        try {
            return mService.hasAccessoryPermission(accessory);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!79703607.java!!!	requestPermission(inout device : UsbDevice, inout pi : PendingIntent) : void
        try {
            mService.requestDevicePermission(device, mContext.getPackageName(), pi);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!79703735.java!!!	requestPermission(inout accessory : UsbAccessory, inout pi : PendingIntent) : void
        try {
            mService.requestAccessoryPermission(accessory, mContext.getPackageName(), pi);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!79703863.java!!!	grantPermission(inout device : UsbDevice) : void
        try {
            mService.grantDevicePermission(device, Process.myUid());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!79703991.java!!!	isFunctionEnabled(inout function : String) : boolean
        try {
            return mService.isFunctionEnabled(function);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!79704119.java!!!	setCurrentFunction(inout function : String) : void
        try {
            mService.setCurrentFunction(function);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!79704247.java!!!	setUsbDataUnlocked(inout unlocked : boolean) : void
        try {
            mService.setUsbDataUnlocked(unlocked);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!79704375.java!!!	getPorts() : UsbPort
        try {
            return mService.getPorts();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!79704503.java!!!	getPortStatus(inout port : UsbPort) : UsbPortStatus
        Preconditions.checkNotNull(port, "port must not be null");

        try {
            return mService.getPortStatus(port.getId());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!79704631.java!!!	setPortRoles(inout port : UsbPort, in powerRole : int, in dataRole : int) : void
        Preconditions.checkNotNull(port, "port must not be null");
        UsbPort.checkRoles(powerRole, dataRole);

        try {
            mService.setPortRoles(port.getId(), powerRole, dataRole);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!79704759.java!!!	addFunction(inout functions : String, inout function : String) : String
        if (USB_FUNCTION_NONE.equals(functions)) {
            return function;
        }
        if (!containsFunction(functions, function)) {
            if (functions.length() > 0) {
                functions += ",";
            }
            functions += function;
        }
        return functions;
!!!79704887.java!!!	removeFunction(inout functions : String, inout function : String) : String
        String[] split = functions.split(",");
        for (int i = 0; i < split.length; i++) {
            if (function.equals(split[i])) {
                split[i] = null;
            }
        }
        if (split.length == 1 && split[0] == null) {
            return USB_FUNCTION_NONE;
        }
        StringBuilder builder = new StringBuilder();
        for (int i = 0; i < split.length; i++) {
            String s = split[i];
            if (s != null) {
                if (builder.length() > 0) {
                    builder.append(",");
                }
                builder.append(s);
            }
        }
        return builder.toString();
!!!79705015.java!!!	containsFunction(inout functions : String, inout function : String) : boolean
        int index = functions.indexOf(function);
        if (index < 0) return false;
        if (index > 0 && functions.charAt(index - 1) != ',') return false;
        int charAfter = index + function.length();
        if (charAfter < functions.length() && functions.charAt(charAfter) != ',') return false;
        return true;
