class WordIterator
!!!81158327.java!!!	WordIterator()
        this(Locale.getDefault());
!!!81158455.java!!!	WordIterator(inout locale : Locale)
        mIterator = BreakIterator.getWordInstance(locale);
!!!81158583.java!!!	setCharSequence(inout charSequence : CharSequence, in start : int, in end : int) : void
        mOffsetShift = Math.max(0, start - WINDOW_WIDTH);
        final int windowEnd = Math.min(charSequence.length(), end + WINDOW_WIDTH);

        if (charSequence instanceof SpannableStringBuilder) {
            mString = ((SpannableStringBuilder) charSequence).substring(mOffsetShift, windowEnd);
        } else {
            mString = charSequence.subSequence(mOffsetShift, windowEnd).toString();
        }
        mIterator.setText(mString);
!!!81158711.java!!!	preceding(in offset : int) : int
        int shiftedOffset = offset - mOffsetShift;
        do {
            shiftedOffset = mIterator.preceding(shiftedOffset);
            if (shiftedOffset == BreakIterator.DONE) {
                return BreakIterator.DONE;
            }
            if (isOnLetterOrDigit(shiftedOffset)) {
                return shiftedOffset + mOffsetShift;
            }
        } while (true);
!!!81158839.java!!!	following(in offset : int) : int
        int shiftedOffset = offset - mOffsetShift;
        do {
            shiftedOffset = mIterator.following(shiftedOffset);
            if (shiftedOffset == BreakIterator.DONE) {
                return BreakIterator.DONE;
            }
            if (isAfterLetterOrDigit(shiftedOffset)) {
                return shiftedOffset + mOffsetShift;
            }
        } while (true);
!!!81158967.java!!!	isBoundary(in offset : int) : boolean
        int shiftedOffset = offset - mOffsetShift;
        checkOffsetIsValid(shiftedOffset);
        return mIterator.isBoundary(shiftedOffset);
!!!81159095.java!!!	nextBoundary(in offset : int) : int
        int shiftedOffset = offset - mOffsetShift;
        shiftedOffset = mIterator.following(shiftedOffset);
        if (shiftedOffset == BreakIterator.DONE) {
            return BreakIterator.DONE;
        }
        return shiftedOffset + mOffsetShift;
!!!81159223.java!!!	prevBoundary(in offset : int) : int
        int shiftedOffset = offset - mOffsetShift;
        shiftedOffset = mIterator.preceding(shiftedOffset);
        if (shiftedOffset == BreakIterator.DONE) {
            return BreakIterator.DONE;
        }
        return shiftedOffset + mOffsetShift;
!!!81159351.java!!!	getBeginning(in offset : int) : int
        // TODO: Check if usage of this can be updated to getBeginning(offset, true) if
        // so this method can be removed.
        return getBeginning(offset, false);
!!!81159479.java!!!	getEnd(in offset : int) : int
        // TODO: Check if usage of this can be updated to getEnd(offset, true), if
        // so this method can be removed.
        return getEnd(offset, false);
!!!81159607.java!!!	getPrevWordBeginningOnTwoWordsBoundary(in offset : int) : int
        return getBeginning(offset, true);
!!!81159735.java!!!	getNextWordEndOnTwoWordBoundary(in offset : int) : int
        return getEnd(offset, true);
!!!81159863.java!!!	getBeginning(in offset : int, inout getPrevWordBeginningOnTwoWordsBoundary : boolean) : int
        final int shiftedOffset = offset - mOffsetShift;
        checkOffsetIsValid(shiftedOffset);

        if (isOnLetterOrDigit(shiftedOffset)) {
            if (mIterator.isBoundary(shiftedOffset)
                    && (!isAfterLetterOrDigit(shiftedOffset)
                            || !getPrevWordBeginningOnTwoWordsBoundary)) {
                return shiftedOffset + mOffsetShift;
            } else {
                return mIterator.preceding(shiftedOffset) + mOffsetShift;
            }
        } else {
            if (isAfterLetterOrDigit(shiftedOffset)) {
                return mIterator.preceding(shiftedOffset) + mOffsetShift;
            }
        }
        return BreakIterator.DONE;
!!!81159991.java!!!	getEnd(in offset : int, inout getNextWordEndOnTwoWordBoundary : boolean) : int
        final int shiftedOffset = offset - mOffsetShift;
        checkOffsetIsValid(shiftedOffset);

        if (isAfterLetterOrDigit(shiftedOffset)) {
            if (mIterator.isBoundary(shiftedOffset)
                    && (!isOnLetterOrDigit(shiftedOffset) || !getNextWordEndOnTwoWordBoundary)) {
                return shiftedOffset + mOffsetShift;
            } else {
                return mIterator.following(shiftedOffset) + mOffsetShift;
            }
        } else {
            if (isOnLetterOrDigit(shiftedOffset)) {
                return mIterator.following(shiftedOffset) + mOffsetShift;
            }
        }
        return BreakIterator.DONE;
!!!81160119.java!!!	getPunctuationBeginning(in offset : int) : int
        while (offset != BreakIterator.DONE && !isPunctuationStartBoundary(offset)) {
            offset = prevBoundary(offset);
        }
        // No need to shift offset, prevBoundary handles that.
        return offset;
!!!81160247.java!!!	getPunctuationEnd(in offset : int) : int
        while (offset != BreakIterator.DONE && !isPunctuationEndBoundary(offset)) {
            offset = nextBoundary(offset);
        }
        // No need to shift offset, nextBoundary handles that.
        return offset;
!!!81160375.java!!!	isAfterPunctuation(in offset : int) : boolean
        final int shiftedOffset = offset - mOffsetShift;
        if (shiftedOffset >= 1 && shiftedOffset <= mString.length()) {
            final int codePoint = mString.codePointBefore(shiftedOffset);
            return isPunctuation(codePoint);
        }
        return false;
!!!81160503.java!!!	isOnPunctuation(in offset : int) : boolean
        final int shiftedOffset = offset - mOffsetShift;
        if (shiftedOffset >= 0 && shiftedOffset < mString.length()) {
            final int codePoint = mString.codePointAt(shiftedOffset);
            return isPunctuation(codePoint);
        }
        return false;
!!!81160631.java!!!	isPunctuationStartBoundary(in offset : int) : boolean
        return isOnPunctuation(offset) && !isAfterPunctuation(offset);
!!!81160759.java!!!	isPunctuationEndBoundary(in offset : int) : boolean
        return !isOnPunctuation(offset) && isAfterPunctuation(offset);
!!!81160887.java!!!	isPunctuation(in cp : int) : boolean
        int type = Character.getType(cp);
        return (type == Character.CONNECTOR_PUNCTUATION ||
                type == Character.DASH_PUNCTUATION ||
                type == Character.END_PUNCTUATION ||
                type == Character.FINAL_QUOTE_PUNCTUATION ||
                type == Character.INITIAL_QUOTE_PUNCTUATION ||
                type == Character.OTHER_PUNCTUATION ||
                type == Character.START_PUNCTUATION);
!!!81161015.java!!!	isAfterLetterOrDigit(in shiftedOffset : int) : boolean
        if (shiftedOffset >= 1 && shiftedOffset <= mString.length()) {
            final int codePoint = mString.codePointBefore(shiftedOffset);
            if (Character.isLetterOrDigit(codePoint)) return true;
        }
        return false;
!!!81161143.java!!!	isOnLetterOrDigit(in shiftedOffset : int) : boolean
        if (shiftedOffset >= 0 && shiftedOffset < mString.length()) {
            final int codePoint = mString.codePointAt(shiftedOffset);
            if (Character.isLetterOrDigit(codePoint)) return true;
        }
        return false;
!!!81161271.java!!!	checkOffsetIsValid(in shiftedOffset : int) : void
        if (shiftedOffset < 0 || shiftedOffset > mString.length()) {
            throw new IllegalArgumentException("Invalid offset: " + (shiftedOffset + mOffsetShift) +
                    ". Valid range is [" + mOffsetShift + ", " + (mString.length() + mOffsetShift) +
                    "]");
        }
