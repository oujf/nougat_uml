class Stub
!!!79790263.java!!!	Stub()
this.attachInterface(this, DESCRIPTOR);
!!!79790391.java!!!	asInterface(inout obj : IBinder) : IInputMethod
if ((obj==null)) {
return null;
}
android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);
if (((iin!=null)&&(iin instanceof com.android.internal.view.IInputMethod))) {
return ((com.android.internal.view.IInputMethod)iin);
}
return new com.android.internal.view.IInputMethod.Stub.Proxy(obj);
!!!79790519.java!!!	asBinder() : IBinder
return this;
!!!79790647.java!!!	onTransact(in code : int, inout data : Parcel, inout reply : Parcel, in flags : int) : boolean
switch (code)
{
case INTERFACE_TRANSACTION:
{
reply.writeString(DESCRIPTOR);
return true;
}
case TRANSACTION_attachToken:
{
data.enforceInterface(DESCRIPTOR);
android.os.IBinder _arg0;
_arg0 = data.readStrongBinder();
this.attachToken(_arg0);
return true;
}
case TRANSACTION_bindInput:
{
data.enforceInterface(DESCRIPTOR);
android.view.inputmethod.InputBinding _arg0;
if ((0!=data.readInt())) {
_arg0 = android.view.inputmethod.InputBinding.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
this.bindInput(_arg0);
return true;
}
case TRANSACTION_unbindInput:
{
data.enforceInterface(DESCRIPTOR);
this.unbindInput();
return true;
}
case TRANSACTION_startInput:
{
data.enforceInterface(DESCRIPTOR);
com.android.internal.view.IInputContext _arg0;
_arg0 = com.android.internal.view.IInputContext.Stub.asInterface(data.readStrongBinder());
int _arg1;
_arg1 = data.readInt();
android.view.inputmethod.EditorInfo _arg2;
if ((0!=data.readInt())) {
_arg2 = android.view.inputmethod.EditorInfo.CREATOR.createFromParcel(data);
}
else {
_arg2 = null;
}
this.startInput(_arg0, _arg1, _arg2);
return true;
}
case TRANSACTION_restartInput:
{
data.enforceInterface(DESCRIPTOR);
com.android.internal.view.IInputContext _arg0;
_arg0 = com.android.internal.view.IInputContext.Stub.asInterface(data.readStrongBinder());
int _arg1;
_arg1 = data.readInt();
android.view.inputmethod.EditorInfo _arg2;
if ((0!=data.readInt())) {
_arg2 = android.view.inputmethod.EditorInfo.CREATOR.createFromParcel(data);
}
else {
_arg2 = null;
}
this.restartInput(_arg0, _arg1, _arg2);
return true;
}
case TRANSACTION_createSession:
{
data.enforceInterface(DESCRIPTOR);
android.view.InputChannel _arg0;
if ((0!=data.readInt())) {
_arg0 = android.view.InputChannel.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
com.android.internal.view.IInputSessionCallback _arg1;
_arg1 = com.android.internal.view.IInputSessionCallback.Stub.asInterface(data.readStrongBinder());
this.createSession(_arg0, _arg1);
return true;
}
case TRANSACTION_setSessionEnabled:
{
data.enforceInterface(DESCRIPTOR);
com.android.internal.view.IInputMethodSession _arg0;
_arg0 = com.android.internal.view.IInputMethodSession.Stub.asInterface(data.readStrongBinder());
boolean _arg1;
_arg1 = (0!=data.readInt());
this.setSessionEnabled(_arg0, _arg1);
return true;
}
case TRANSACTION_revokeSession:
{
data.enforceInterface(DESCRIPTOR);
com.android.internal.view.IInputMethodSession _arg0;
_arg0 = com.android.internal.view.IInputMethodSession.Stub.asInterface(data.readStrongBinder());
this.revokeSession(_arg0);
return true;
}
case TRANSACTION_showSoftInput:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
android.os.ResultReceiver _arg1;
if ((0!=data.readInt())) {
_arg1 = android.os.ResultReceiver.CREATOR.createFromParcel(data);
}
else {
_arg1 = null;
}
this.showSoftInput(_arg0, _arg1);
return true;
}
case TRANSACTION_hideSoftInput:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
android.os.ResultReceiver _arg1;
if ((0!=data.readInt())) {
_arg1 = android.os.ResultReceiver.CREATOR.createFromParcel(data);
}
else {
_arg1 = null;
}
this.hideSoftInput(_arg0, _arg1);
return true;
}
case TRANSACTION_changeInputMethodSubtype:
{
data.enforceInterface(DESCRIPTOR);
android.view.inputmethod.InputMethodSubtype _arg0;
if ((0!=data.readInt())) {
_arg0 = android.view.inputmethod.InputMethodSubtype.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
this.changeInputMethodSubtype(_arg0);
return true;
}
}
return super.onTransact(code, data, reply, flags);
