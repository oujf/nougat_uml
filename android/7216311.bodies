class RouteInfo
!!!79999159.java!!!	RouteInfo(inout destination : IpPrefix, inout gateway : InetAddress, inout iface : String, in type : int)
        switch (type) {
            case RTN_UNICAST:
            case RTN_UNREACHABLE:
            case RTN_THROW:
                // TODO: It would be nice to ensure that route types that don't have nexthops or
                // interfaces, such as unreachable or throw, can't be created if an interface or
                // a gateway is specified. This is a bit too complicated to do at the moment
                // because:
                //
                // - LinkProperties sets the interface on routes added to it, and modifies the
                //   interfaces of all the routes when its interface name changes.
                // - Even when the gateway is null, we store a non-null gateway here.
                //
                // For now, we just rely on the code that sets routes to do things properly.
                break;
            default:
                throw new IllegalArgumentException("Unknown route type " + type);
        }

        if (destination == null) {
            if (gateway != null) {
                if (gateway instanceof Inet4Address) {
                    destination = new IpPrefix(Inet4Address.ANY, 0);
                } else {
                    destination = new IpPrefix(Inet6Address.ANY, 0);
                }
            } else {
                // no destination, no gateway. invalid.
                throw new IllegalArgumentException("Invalid arguments passed in: " + gateway + "," +
                                                   destination);
            }
        }
        // TODO: set mGateway to null if there is no gateway. This is more correct, saves space, and
        // matches the documented behaviour. Before we can do this we need to fix all callers (e.g.,
        // ConnectivityService) to stop doing things like r.getGateway().equals(), ... .
        if (gateway == null) {
            if (destination.getAddress() instanceof Inet4Address) {
                gateway = Inet4Address.ANY;
            } else {
                gateway = Inet6Address.ANY;
            }
        }
        mHasGateway = (!gateway.isAnyLocalAddress());

        if ((destination.getAddress() instanceof Inet4Address &&
                 (gateway instanceof Inet4Address == false)) ||
                (destination.getAddress() instanceof Inet6Address &&
                 (gateway instanceof Inet6Address == false))) {
            throw new IllegalArgumentException("address family mismatch in RouteInfo constructor");
        }
        mDestination = destination;  // IpPrefix objects are immutable.
        mGateway = gateway;          // InetAddress objects are immutable.
        mInterface = iface;          // Strings are immutable.
        mType = type;
        mIsHost = isHost();
!!!79999287.java!!!	RouteInfo(inout destination : IpPrefix, inout gateway : InetAddress, inout iface : String)
        this(destination, gateway, iface, RTN_UNICAST);
!!!79999415.java!!!	RouteInfo(inout destination : LinkAddress, inout gateway : InetAddress, inout iface : String)
        this(destination == null ? null :
                new IpPrefix(destination.getAddress(), destination.getPrefixLength()),
                gateway, iface);
!!!79999543.java!!!	RouteInfo(inout destination : IpPrefix, inout gateway : InetAddress)
        this(destination, gateway, null);
!!!79999671.java!!!	RouteInfo(inout destination : LinkAddress, inout gateway : InetAddress)
        this(destination, gateway, null);
!!!79999799.java!!!	RouteInfo(inout gateway : InetAddress)
        this((IpPrefix) null, gateway, null);
!!!79999927.java!!!	RouteInfo(inout destination : IpPrefix)
        this(destination, null, null);
!!!80000055.java!!!	RouteInfo(inout destination : LinkAddress)
        this(destination, null, null);
!!!80000183.java!!!	RouteInfo(inout destination : IpPrefix, in type : int)
        this(destination, null, null, type);
!!!80000311.java!!!	makeHostRoute(inout host : InetAddress, inout iface : String) : RouteInfo
        return makeHostRoute(host, null, iface);
!!!80000439.java!!!	makeHostRoute(inout host : InetAddress, inout gateway : InetAddress, inout iface : String) : RouteInfo
        if (host == null) return null;

        if (host instanceof Inet4Address) {
            return new RouteInfo(new IpPrefix(host, 32), gateway, iface);
        } else {
            return new RouteInfo(new IpPrefix(host, 128), gateway, iface);
        }
!!!80000567.java!!!	isHost() : boolean
        return (mDestination.getAddress() instanceof Inet4Address &&
                mDestination.getPrefixLength() == 32) ||
               (mDestination.getAddress() instanceof Inet6Address &&
                mDestination.getPrefixLength() == 128);
!!!80000695.java!!!	getDestination() : IpPrefix
        return mDestination;
!!!80000823.java!!!	getDestinationLinkAddress() : LinkAddress
        return new LinkAddress(mDestination.getAddress(), mDestination.getPrefixLength());
!!!80000951.java!!!	getGateway() : InetAddress
        return mGateway;
!!!80001079.java!!!	getInterface() : String
        return mInterface;
!!!80001207.java!!!	getType() : int
        return mType;
!!!80001335.java!!!	isDefaultRoute() : boolean
        return mType == RTN_UNICAST && mDestination.getPrefixLength() == 0;
!!!80001463.java!!!	isIPv4Default() : boolean
        return isDefaultRoute() && mDestination.getAddress() instanceof Inet4Address;
!!!80001591.java!!!	isIPv6Default() : boolean
        return isDefaultRoute() && mDestination.getAddress() instanceof Inet6Address;
!!!80001719.java!!!	isHostRoute() : boolean
        return mIsHost;
!!!80001847.java!!!	hasGateway() : boolean
        return mHasGateway;
!!!80001975.java!!!	matches(inout destination : InetAddress) : boolean
        return mDestination.contains(destination);
!!!80002103.java!!!	selectBestRoute(inout routes : Collection<RouteInfo>, inout dest : InetAddress) : RouteInfo
        if ((routes == null) || (dest == null)) return null;

        RouteInfo bestRoute = null;
        // pick a longest prefix match under same address type
        for (RouteInfo route : routes) {
            if (NetworkUtils.addressTypeMatches(route.mDestination.getAddress(), dest)) {
                if ((bestRoute != null) &&
                        (bestRoute.mDestination.getPrefixLength() >=
                        route.mDestination.getPrefixLength())) {
                    continue;
                }
                if (route.matches(dest)) bestRoute = route;
            }
        }
        return bestRoute;
!!!80002231.java!!!	toString() : String
        String val = "";
        if (mDestination != null) val = mDestination.toString();
        if (mType == RTN_UNREACHABLE) {
            val += " unreachable";
        } else if (mType == RTN_THROW) {
            val += " throw";
        } else {
            val += " ->";
            if (mGateway != null) val += " " + mGateway.getHostAddress();
            if (mInterface != null) val += " " + mInterface;
            if (mType != RTN_UNICAST) {
                val += " unknown type " + mType;
            }
        }
        return val;
!!!80002359.java!!!	equals(inout obj : Object) : boolean
        if (this == obj) return true;

        if (!(obj instanceof RouteInfo)) return false;

        RouteInfo target = (RouteInfo) obj;

        return Objects.equals(mDestination, target.getDestination()) &&
                Objects.equals(mGateway, target.getGateway()) &&
                Objects.equals(mInterface, target.getInterface()) &&
                mType == target.getType();
!!!80002487.java!!!	hashCode() : int
        return (mDestination.hashCode() * 41)
                + (mGateway == null ? 0 :mGateway.hashCode() * 47)
                + (mInterface == null ? 0 :mInterface.hashCode() * 67)
                + (mType * 71);
!!!80002615.java!!!	describeContents() : int
        return 0;
!!!80002743.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        dest.writeParcelable(mDestination, flags);
        byte[] gatewayBytes = (mGateway == null) ? null : mGateway.getAddress();
        dest.writeByteArray(gatewayBytes);
        dest.writeString(mInterface);
        dest.writeInt(mType);
