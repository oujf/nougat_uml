class NetworkPolicy
!!!79961911.java!!!	NetworkPolicy(inout template : NetworkTemplate, in cycleDay : int, inout cycleTimezone : String, in warningBytes : long, in limitBytes : long, inout metered : boolean)
        this(template, cycleDay, cycleTimezone, warningBytes, limitBytes, SNOOZE_NEVER,
                SNOOZE_NEVER, metered, false);
!!!79962039.java!!!	NetworkPolicy(inout template : NetworkTemplate, in cycleDay : int, inout cycleTimezone : String, in warningBytes : long, in limitBytes : long, in lastWarningSnooze : long, in lastLimitSnooze : long, inout metered : boolean, inout inferred : boolean)
        this.template = checkNotNull(template, "missing NetworkTemplate");
        this.cycleDay = cycleDay;
        this.cycleTimezone = checkNotNull(cycleTimezone, "missing cycleTimezone");
        this.warningBytes = warningBytes;
        this.limitBytes = limitBytes;
        this.lastWarningSnooze = lastWarningSnooze;
        this.lastLimitSnooze = lastLimitSnooze;
        this.metered = metered;
        this.inferred = inferred;
!!!79962167.java!!!	NetworkPolicy(inout in : Parcel)
        template = in.readParcelable(null);
        cycleDay = in.readInt();
        cycleTimezone = in.readString();
        warningBytes = in.readLong();
        limitBytes = in.readLong();
        lastWarningSnooze = in.readLong();
        lastLimitSnooze = in.readLong();
        metered = in.readInt() != 0;
        inferred = in.readInt() != 0;
!!!79962295.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        dest.writeParcelable(template, flags);
        dest.writeInt(cycleDay);
        dest.writeString(cycleTimezone);
        dest.writeLong(warningBytes);
        dest.writeLong(limitBytes);
        dest.writeLong(lastWarningSnooze);
        dest.writeLong(lastLimitSnooze);
        dest.writeInt(metered ? 1 : 0);
        dest.writeInt(inferred ? 1 : 0);
!!!79962423.java!!!	describeContents() : int
        return 0;
!!!79962551.java!!!	isOverWarning(in totalBytes : long) : boolean
        return warningBytes != WARNING_DISABLED && totalBytes >= warningBytes;
!!!79962679.java!!!	isOverLimit(in totalBytes : long) : boolean
        // over-estimate, since kernel will trigger limit once first packet
        // trips over limit.
        totalBytes += 2 * DEFAULT_MTU;
        return limitBytes != LIMIT_DISABLED && totalBytes >= limitBytes;
!!!79962807.java!!!	clearSnooze() : void
        lastWarningSnooze = SNOOZE_NEVER;
        lastLimitSnooze = SNOOZE_NEVER;
!!!79962935.java!!!	hasCycle() : boolean
        return cycleDay != CYCLE_NONE;
!!!79963063.java!!!	compareTo(inout another : NetworkPolicy) : int
        if (another == null || another.limitBytes == LIMIT_DISABLED) {
            // other value is missing or disabled; we win
            return -1;
        }
        if (limitBytes == LIMIT_DISABLED || another.limitBytes < limitBytes) {
            // we're disabled or other limit is smaller; they win
            return 1;
        }
        return 0;
!!!79963191.java!!!	hashCode() : int
        return Objects.hash(template, cycleDay, cycleTimezone, warningBytes, limitBytes,
                lastWarningSnooze, lastLimitSnooze, metered, inferred);
!!!79963319.java!!!	equals(inout obj : Object) : boolean
        if (obj instanceof NetworkPolicy) {
            final NetworkPolicy other = (NetworkPolicy) obj;
            return cycleDay == other.cycleDay && warningBytes == other.warningBytes
                    && limitBytes == other.limitBytes
                    && lastWarningSnooze == other.lastWarningSnooze
                    && lastLimitSnooze == other.lastLimitSnooze && metered == other.metered
                    && inferred == other.inferred
                    && Objects.equals(cycleTimezone, other.cycleTimezone)
                    && Objects.equals(template, other.template);
        }
        return false;
!!!79963447.java!!!	toString() : String
        final StringBuilder builder = new StringBuilder("NetworkPolicy");
        builder.append("[").append(template).append("]:");
        builder.append(" cycleDay=").append(cycleDay);
        builder.append(", cycleTimezone=").append(cycleTimezone);
        builder.append(", warningBytes=").append(warningBytes);
        builder.append(", limitBytes=").append(limitBytes);
        builder.append(", lastWarningSnooze=").append(lastWarningSnooze);
        builder.append(", lastLimitSnooze=").append(lastLimitSnooze);
        builder.append(", metered=").append(metered);
        builder.append(", inferred=").append(inferred);
        return builder.toString();
!!!79963575.java!!!	getBytesForBackup() : byte
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        DataOutputStream out = new DataOutputStream(baos);

        out.writeInt(BACKUP_VERSION);
        out.write(template.getBytesForBackup());
        out.writeInt(cycleDay);
        BackupUtils.writeString(out, cycleTimezone);
        out.writeLong(warningBytes);
        out.writeLong(limitBytes);
        out.writeLong(lastWarningSnooze);
        out.writeLong(lastLimitSnooze);
        out.writeInt(metered ? 1 : 0);
        out.writeInt(inferred ? 1 : 0);
        return baos.toByteArray();
!!!79963703.java!!!	getNetworkPolicyFromBackup(inout in : DataInputStream) : NetworkPolicy
        int version = in.readInt();
        if (version < 1 || version > BACKUP_VERSION) {
            throw new BackupUtils.BadVersionException("Unknown Backup Serialization Version");
        }

        NetworkTemplate template = NetworkTemplate.getNetworkTemplateFromBackup(in);
        int cycleDay = in.readInt();
        String cycleTimeZone = BackupUtils.readString(in);
        long warningBytes = in.readLong();
        long limitBytes = in.readLong();
        long lastWarningSnooze = in.readLong();
        long lastLimitSnooze = in.readLong();
        boolean metered = in.readInt() == 1;
        boolean inferred = in.readInt() == 1;
        return new NetworkPolicy(template, cycleDay, cycleTimeZone, warningBytes, limitBytes,
                lastWarningSnooze, lastLimitSnooze, metered, inferred);
