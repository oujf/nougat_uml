class IpPrefix
!!!79908151.java!!!	checkAndMaskAddressAndPrefixLength() : void
        if (address.length != 4 && address.length != 16) {
            throw new IllegalArgumentException(
                    "IpPrefix has " + address.length + " bytes which is neither 4 nor 16");
        }
        NetworkUtils.maskRawAddress(address, prefixLength);
!!!79908279.java!!!	IpPrefix(inout address : byte [[]], in prefixLength : int)
        this.address = address.clone();
        this.prefixLength = prefixLength;
        checkAndMaskAddressAndPrefixLength();
!!!79908407.java!!!	IpPrefix(inout address : InetAddress, in prefixLength : int)
        // We don't reuse the (byte[], int) constructor because it calls clone() on the byte array,
        // which is unnecessary because getAddress() already returns a clone.
        this.address = address.getAddress();
        this.prefixLength = prefixLength;
        checkAndMaskAddressAndPrefixLength();
!!!79908535.java!!!	IpPrefix(inout prefix : String)
        // We don't reuse the (InetAddress, int) constructor because "error: call to this must be
        // first statement in constructor". We could factor out setting the member variables to an
        // init() method, but if we did, then we'd have to make the members non-final, or "error:
        // cannot assign a value to final variable address". So we just duplicate the code here.
        Pair<InetAddress, Integer> ipAndMask = NetworkUtils.parseIpAndMask(prefix);
        this.address = ipAndMask.first.getAddress();
        this.prefixLength = ipAndMask.second;
        checkAndMaskAddressAndPrefixLength();
!!!79908663.java!!!	equals(inout obj : Object) : boolean
        if (!(obj instanceof IpPrefix)) {
            return false;
        }
        IpPrefix that = (IpPrefix) obj;
        return Arrays.equals(this.address, that.address) && this.prefixLength == that.prefixLength;
!!!79908791.java!!!	hashCode() : int
        return Arrays.hashCode(address) + 11 * prefixLength;
!!!79908919.java!!!	getAddress() : InetAddress
        try {
            return InetAddress.getByAddress(address);
        } catch (UnknownHostException e) {
            // Cannot happen. InetAddress.getByAddress can only throw an exception if the byte
            // array is the wrong length, but we check that in the constructor.
            return null;
        }
!!!79909047.java!!!	getRawAddress() : byte
        return address.clone();
!!!79909175.java!!!	getPrefixLength() : int
        return prefixLength;
!!!79909303.java!!!	contains(inout address : InetAddress) : boolean
        byte[] addrBytes = (address == null) ? null : address.getAddress();
        if (addrBytes == null || addrBytes.length != this.address.length) {
            return false;
        }
        NetworkUtils.maskRawAddress(addrBytes, prefixLength);
        return Arrays.equals(this.address, addrBytes);
!!!79909431.java!!!	toString() : String
        try {
            return InetAddress.getByAddress(address).getHostAddress() + "/" + prefixLength;
        } catch(UnknownHostException e) {
            // Cosmic rays?
            throw new IllegalStateException("IpPrefix with invalid address! Shouldn't happen.", e);
        }
!!!79909559.java!!!	describeContents() : int
        return 0;
!!!79909687.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        dest.writeByteArray(address);
        dest.writeInt(prefixLength);
