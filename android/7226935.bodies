class RssiCurve
!!!80002871.java!!!	RssiCurve(in start : int, in bucketWidth : int, inout rssiBuckets : byte [[]])
        this(start, bucketWidth, rssiBuckets, DEFAULT_ACTIVE_NETWORK_RSSI_BOOST);
!!!80002999.java!!!	RssiCurve(in start : int, in bucketWidth : int, inout rssiBuckets : byte [[]], in activeNetworkRssiBoost : int)
        this.start = start;
        this.bucketWidth = bucketWidth;
        if (rssiBuckets == null || rssiBuckets.length == 0) {
            throw new IllegalArgumentException("rssiBuckets must be at least one element large.");
        }
        this.rssiBuckets = rssiBuckets;
        this.activeNetworkRssiBoost = activeNetworkRssiBoost;
!!!80003127.java!!!	RssiCurve(inout in : Parcel)
        start = in.readInt();
        bucketWidth = in.readInt();
        int bucketCount = in.readInt();
        rssiBuckets = new byte[bucketCount];
        in.readByteArray(rssiBuckets);
        activeNetworkRssiBoost = in.readInt();
!!!80003255.java!!!	describeContents() : int
        return 0;
!!!80003383.java!!!	writeToParcel(inout out : Parcel, in flags : int) : void
        out.writeInt(start);
        out.writeInt(bucketWidth);
        out.writeInt(rssiBuckets.length);
        out.writeByteArray(rssiBuckets);
        out.writeInt(activeNetworkRssiBoost);
!!!80003511.java!!!	lookupScore(in rssi : int) : byte
        return lookupScore(rssi, false /* isActiveNetwork */);
!!!80003639.java!!!	lookupScore(in rssi : int, inout isActiveNetwork : boolean) : byte
        if (isActiveNetwork) {
            rssi += activeNetworkRssiBoost;
        }

        int index = (rssi - start) / bucketWidth;

        // Snap the index to the closest bucket if it falls outside the curve.
        if (index < 0) {
            index = 0;
        } else if (index > rssiBuckets.length - 1) {
            index = rssiBuckets.length - 1;
        }

        return rssiBuckets[index];
!!!80003767.java!!!	equals(inout o : Object) : boolean
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        RssiCurve rssiCurve = (RssiCurve) o;

        return start == rssiCurve.start &&
                bucketWidth == rssiCurve.bucketWidth &&
                Arrays.equals(rssiBuckets, rssiCurve.rssiBuckets) &&
                activeNetworkRssiBoost == rssiCurve.activeNetworkRssiBoost;
!!!80003895.java!!!	hashCode() : int
        return Objects.hash(start, bucketWidth, rssiBuckets, activeNetworkRssiBoost);
!!!80004023.java!!!	toString() : String
        StringBuilder sb = new StringBuilder();
        sb.append("RssiCurve[start=")
                .append(start)
                .append(",bucketWidth=")
                .append(bucketWidth)
                .append(",activeNetworkRssiBoost=")
                .append(activeNetworkRssiBoost);

        sb.append(",buckets=");
        for (int i = 0; i < rssiBuckets.length; i++) {
            sb.append(rssiBuckets[i]);
            if (i < rssiBuckets.length - 1) {
                sb.append(",");
            }
        }
        sb.append("]");

        return sb.toString();
