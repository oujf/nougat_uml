class Part
!!!80039479.java!!!	Part(inout encoded : String, inout decoded : String)
            super(encoded, decoded);
!!!80039607.java!!!	isEmpty() : boolean
            return false;
!!!80039735.java!!!	getEncoded() : String
            @SuppressWarnings("StringEquality")
            boolean hasEncoded = encoded != NOT_CACHED;
            return hasEncoded ? encoded : (encoded = encode(decoded));
!!!80039863.java!!!	readFrom(inout parcel : Parcel) : Uri::Part
            int representation = parcel.readInt();
            switch (representation) {
                case Representation.BOTH:
                    return from(parcel.readString(), parcel.readString());
                case Representation.ENCODED:
                    return fromEncoded(parcel.readString());
                case Representation.DECODED:
                    return fromDecoded(parcel.readString());
                default:
                    throw new IllegalArgumentException("Unknown representation: "
                            + representation);
            }
!!!80039991.java!!!	nonNull(inout part : Uri::Part) : Uri::Part
            return part == null ? NULL : part;
!!!80040119.java!!!	fromEncoded(inout encoded : String) : Uri::Part
            return from(encoded, NOT_CACHED);
!!!80040247.java!!!	fromDecoded(inout decoded : String) : Uri::Part
            return from(NOT_CACHED, decoded);
!!!80040375.java!!!	from(inout encoded : String, inout decoded : String) : Uri::Part
            // We have to check both encoded and decoded in case one is
            // NOT_CACHED.

            if (encoded == null) {
                return NULL;
            }
            if (encoded.length() == 0) {
                return EMPTY;
            }

            if (decoded == null) {
                return NULL;
            }
            if (decoded .length() == 0) {
                return EMPTY;
            }

            return new Part(encoded, decoded);
