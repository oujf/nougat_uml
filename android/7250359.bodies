class Environment
!!!80242615.java!!!	initForCurrentUser() : void
        final int userId = UserHandle.myUserId();
        sCurrentUser = new UserEnvironment(userId);
!!!80244279.java!!!	getRootDirectory() : File
        return DIR_ANDROID_ROOT;
!!!80244407.java!!!	getStorageDirectory() : File
        return DIR_ANDROID_STORAGE;
!!!80244535.java!!!	getOemDirectory() : File
        return DIR_OEM_ROOT;
!!!80244663.java!!!	getOdmDirectory() : File
        return DIR_ODM_ROOT;
!!!80244791.java!!!	getVendorDirectory() : File
        return DIR_VENDOR_ROOT;
!!!80244919.java!!!	getUserSystemDirectory(in userId : int) : File
        return new File(new File(getDataSystemDirectory(), "users"), Integer.toString(userId));
!!!80245047.java!!!	getUserConfigDirectory(in userId : int) : File
        return new File(new File(new File(
                getDataDirectory(), "misc"), "user"), Integer.toString(userId));
!!!80245175.java!!!	getDataDirectory() : File
        return DIR_ANDROID_DATA;
!!!80245303.java!!!	getDataDirectory(inout volumeUuid : String) : File
        if (TextUtils.isEmpty(volumeUuid)) {
            return DIR_ANDROID_DATA;
        } else {
            return new File("/mnt/expand/" + volumeUuid);
        }
!!!80245431.java!!!	getExpandDirectory() : File
        return DIR_ANDROID_EXPAND;
!!!80245559.java!!!	getDataSystemDirectory() : File
        return new File(getDataDirectory(), "system");
!!!80245687.java!!!	getDataSystemDeDirectory() : File
        return buildPath(getDataDirectory(), "system_de");
!!!80245815.java!!!	getDataSystemCeDirectory() : File
        return buildPath(getDataDirectory(), "system_ce");
!!!80245943.java!!!	getDataSystemCeDirectory(in userId : int) : File
        return buildPath(getDataDirectory(), "system_ce", String.valueOf(userId));
!!!80246071.java!!!	getDataSystemDeDirectory(in userId : int) : File
        return buildPath(getDataDirectory(), "system_de", String.valueOf(userId));
!!!80246199.java!!!	getDataMiscDirectory() : File
        return new File(getDataDirectory(), "misc");
!!!80246327.java!!!	getDataMiscCeDirectory(in userId : int) : File
        return buildPath(getDataDirectory(), "misc_ce", String.valueOf(userId));
!!!80246455.java!!!	getDataMiscDeDirectory(in userId : int) : File
        return buildPath(getDataDirectory(), "misc_de", String.valueOf(userId));
!!!80246583.java!!!	getDataProfilesDeDirectory(in userId : int) : File
        return buildPath(getDataDirectory(), "misc", "profiles", "cur", String.valueOf(userId));
!!!80246711.java!!!	getDataProfilesDePackageDirectory(in userId : int, inout packageName : String) : File
        return buildPath(getDataProfilesDeDirectory(userId), packageName);
!!!80246839.java!!!	getDataProfilesDeForeignDexDirectory(in userId : int) : File
        return buildPath(getDataProfilesDeDirectory(userId), "foreign-dex");
!!!80246967.java!!!	getDataAppDirectory(inout volumeUuid : String) : File
        return new File(getDataDirectory(volumeUuid), "app");
!!!80247095.java!!!	getDataAppEphemeralDirectory(inout volumeUuid : String) : File
        return new File(getDataDirectory(volumeUuid), "app-ephemeral");
!!!80247223.java!!!	getDataUserCeDirectory(inout volumeUuid : String) : File
        return new File(getDataDirectory(volumeUuid), "user");
!!!80247351.java!!!	getDataUserCeDirectory(inout volumeUuid : String, in userId : int) : File
        return new File(getDataUserCeDirectory(volumeUuid), String.valueOf(userId));
!!!80247479.java!!!	getDataUserCePackageDirectory(inout volumeUuid : String, in userId : int, inout packageName : String) : File
        // TODO: keep consistent with installd
        return new File(getDataUserCeDirectory(volumeUuid, userId), packageName);
!!!80247607.java!!!	getDataUserDeDirectory(inout volumeUuid : String) : File
        return new File(getDataDirectory(volumeUuid), "user_de");
!!!80247735.java!!!	getDataUserDeDirectory(inout volumeUuid : String, in userId : int) : File
        return new File(getDataUserDeDirectory(volumeUuid), String.valueOf(userId));
!!!80247863.java!!!	getDataUserDePackageDirectory(inout volumeUuid : String, in userId : int, inout packageName : String) : File
        // TODO: keep consistent with installd
        return new File(getDataUserDeDirectory(volumeUuid, userId), packageName);
!!!80247991.java!!!	getExternalStorageDirectory() : File
        throwIfUserRequired();
        return sCurrentUser.getExternalDirs()[0];
!!!80248119.java!!!	getLegacyExternalStorageDirectory() : File
        return new File(System.getenv(ENV_EXTERNAL_STORAGE));
!!!80248247.java!!!	getLegacyExternalStorageObbDirectory() : File
        return buildPath(getLegacyExternalStorageDirectory(), DIR_ANDROID, DIR_OBB);
!!!80248375.java!!!	isStandardDirectory(inout dir : String) : boolean
        for (String valid : STANDARD_DIRECTORIES) {
            if (valid.equals(dir)) {
                return true;
            }
        }
        return false;
!!!80248503.java!!!	getExternalStoragePublicDirectory(inout type : String) : File
        throwIfUserRequired();
        return sCurrentUser.buildExternalStoragePublicDirs(type)[0];
!!!80248631.java!!!	buildExternalStorageAndroidDataDirs() : File
        throwIfUserRequired();
        return sCurrentUser.buildExternalStorageAndroidDataDirs();
!!!80248759.java!!!	buildExternalStorageAppDataDirs(inout packageName : String) : File
        throwIfUserRequired();
        return sCurrentUser.buildExternalStorageAppDataDirs(packageName);
!!!80248887.java!!!	buildExternalStorageAppMediaDirs(inout packageName : String) : File
        throwIfUserRequired();
        return sCurrentUser.buildExternalStorageAppMediaDirs(packageName);
!!!80249015.java!!!	buildExternalStorageAppObbDirs(inout packageName : String) : File
        throwIfUserRequired();
        return sCurrentUser.buildExternalStorageAppObbDirs(packageName);
!!!80249143.java!!!	buildExternalStorageAppFilesDirs(inout packageName : String) : File
        throwIfUserRequired();
        return sCurrentUser.buildExternalStorageAppFilesDirs(packageName);
!!!80249271.java!!!	buildExternalStorageAppCacheDirs(inout packageName : String) : File
        throwIfUserRequired();
        return sCurrentUser.buildExternalStorageAppCacheDirs(packageName);
!!!80249399.java!!!	getDownloadCacheDirectory() : File
        return DIR_DOWNLOAD_CACHE;
!!!80249527.java!!!	getExternalStorageState() : String
        final File externalDir = sCurrentUser.getExternalDirs()[0];
        return getExternalStorageState(externalDir);
!!!80249655.java!!!	getStorageState(inout path : File) : String
        return getExternalStorageState(path);
!!!80249783.java!!!	getExternalStorageState(inout path : File) : String
        final StorageVolume volume = StorageManager.getStorageVolume(path, UserHandle.myUserId());
        if (volume != null) {
            return volume.getState();
        } else {
            return MEDIA_UNKNOWN;
        }
!!!80249911.java!!!	isExternalStorageRemovable() : boolean
        if (isStorageDisabled()) return false;
        final File externalDir = sCurrentUser.getExternalDirs()[0];
        return isExternalStorageRemovable(externalDir);
!!!80250039.java!!!	isExternalStorageRemovable(inout path : File) : boolean
        final StorageVolume volume = StorageManager.getStorageVolume(path, UserHandle.myUserId());
        if (volume != null) {
            return volume.isRemovable();
        } else {
            throw new IllegalArgumentException("Failed to find storage device at " + path);
        }
!!!80250167.java!!!	isExternalStorageEmulated() : boolean
        if (isStorageDisabled()) return false;
        final File externalDir = sCurrentUser.getExternalDirs()[0];
        return isExternalStorageEmulated(externalDir);
!!!80250295.java!!!	isExternalStorageEmulated(inout path : File) : boolean
        final StorageVolume volume = StorageManager.getStorageVolume(path, UserHandle.myUserId());
        if (volume != null) {
            return volume.isEmulated();
        } else {
            throw new IllegalArgumentException("Failed to find storage device at " + path);
        }
!!!80250423.java!!!	getDirectory(inout variableName : String, inout defaultPath : String) : File
        String path = System.getenv(variableName);
        return path == null ? new File(defaultPath) : new File(path);
!!!80250551.java!!!	setUserRequired(inout userRequired : boolean) : void
        sUserRequired = userRequired;
!!!80250679.java!!!	throwIfUserRequired() : void
        if (sUserRequired) {
            Log.wtf(TAG, "Path requests must specify a user by using UserEnvironment",
                    new Throwable());
        }
!!!80250807.java!!!	buildPaths(inout base : File [[]], inout  : String...segments) : File
        File[] result = new File[base.length];
        for (int i = 0; i < base.length; i++) {
            result[i] = buildPath(base[i], segments);
        }
        return result;
!!!80250935.java!!!	buildPath(inout base : File, inout  : String...segments) : File
        File cur = base;
        for (String segment : segments) {
            if (cur == null) {
                cur = new File(segment);
            } else {
                cur = new File(cur, segment);
            }
        }
        return cur;
!!!80251063.java!!!	isStorageDisabled() : boolean
        return SystemProperties.getBoolean("config.disable_storage", false);
!!!80251191.java!!!	maybeTranslateEmulatedPathToInternal(inout path : File) : File
        return StorageManager.maybeTranslateEmulatedPathToInternal(path);
