class Stub
!!!80273207.java!!!	Stub()
this.attachInterface(this, DESCRIPTOR);
!!!80273335.java!!!	asInterface(inout obj : IBinder) : INetworkManagementService
if ((obj==null)) {
return null;
}
android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);
if (((iin!=null)&&(iin instanceof android.os.INetworkManagementService))) {
return ((android.os.INetworkManagementService)iin);
}
return new android.os.INetworkManagementService.Stub.Proxy(obj);
!!!80273463.java!!!	asBinder() : IBinder
return this;
!!!80273591.java!!!	onTransact(in code : int, inout data : Parcel, inout reply : Parcel, in flags : int) : boolean
switch (code)
{
case INTERFACE_TRANSACTION:
{
reply.writeString(DESCRIPTOR);
return true;
}
case TRANSACTION_registerObserver:
{
data.enforceInterface(DESCRIPTOR);
android.net.INetworkManagementEventObserver _arg0;
_arg0 = android.net.INetworkManagementEventObserver.Stub.asInterface(data.readStrongBinder());
this.registerObserver(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_unregisterObserver:
{
data.enforceInterface(DESCRIPTOR);
android.net.INetworkManagementEventObserver _arg0;
_arg0 = android.net.INetworkManagementEventObserver.Stub.asInterface(data.readStrongBinder());
this.unregisterObserver(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_getNetdService:
{
data.enforceInterface(DESCRIPTOR);
android.net.INetd _result = this.getNetdService();
reply.writeNoException();
reply.writeStrongBinder((((_result!=null))?(_result.asBinder()):(null)));
return true;
}
case TRANSACTION_listInterfaces:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String[] _result = this.listInterfaces();
reply.writeNoException();
reply.writeStringArray(_result);
return true;
}
case TRANSACTION_getInterfaceConfig:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
android.net.InterfaceConfiguration _result = this.getInterfaceConfig(_arg0);
reply.writeNoException();
if ((_result!=null)) {
reply.writeInt(1);
_result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
case TRANSACTION_setInterfaceConfig:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
android.net.InterfaceConfiguration _arg1;
if ((0!=data.readInt())) {
_arg1 = android.net.InterfaceConfiguration.CREATOR.createFromParcel(data);
}
else {
_arg1 = null;
}
this.setInterfaceConfig(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_clearInterfaceAddresses:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
this.clearInterfaceAddresses(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_setInterfaceDown:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
this.setInterfaceDown(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_setInterfaceUp:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
this.setInterfaceUp(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_setInterfaceIpv6PrivacyExtensions:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
boolean _arg1;
_arg1 = (0!=data.readInt());
this.setInterfaceIpv6PrivacyExtensions(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_disableIpv6:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
this.disableIpv6(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_enableIpv6:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
this.enableIpv6(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_setInterfaceIpv6NdOffload:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
boolean _arg1;
_arg1 = (0!=data.readInt());
this.setInterfaceIpv6NdOffload(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_addRoute:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
android.net.RouteInfo _arg1;
if ((0!=data.readInt())) {
_arg1 = android.net.RouteInfo.CREATOR.createFromParcel(data);
}
else {
_arg1 = null;
}
this.addRoute(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_removeRoute:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
android.net.RouteInfo _arg1;
if ((0!=data.readInt())) {
_arg1 = android.net.RouteInfo.CREATOR.createFromParcel(data);
}
else {
_arg1 = null;
}
this.removeRoute(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_setMtu:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
int _arg1;
_arg1 = data.readInt();
this.setMtu(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_shutdown:
{
data.enforceInterface(DESCRIPTOR);
this.shutdown();
reply.writeNoException();
return true;
}
case TRANSACTION_getIpForwardingEnabled:
{
data.enforceInterface(DESCRIPTOR);
boolean _result = this.getIpForwardingEnabled();
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_setIpForwardingEnabled:
{
data.enforceInterface(DESCRIPTOR);
boolean _arg0;
_arg0 = (0!=data.readInt());
this.setIpForwardingEnabled(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_startTethering:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String[] _arg0;
_arg0 = data.createStringArray();
this.startTethering(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_stopTethering:
{
data.enforceInterface(DESCRIPTOR);
this.stopTethering();
reply.writeNoException();
return true;
}
case TRANSACTION_isTetheringStarted:
{
data.enforceInterface(DESCRIPTOR);
boolean _result = this.isTetheringStarted();
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_tetherInterface:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
this.tetherInterface(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_untetherInterface:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
this.untetherInterface(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_listTetheredInterfaces:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String[] _result = this.listTetheredInterfaces();
reply.writeNoException();
reply.writeStringArray(_result);
return true;
}
case TRANSACTION_setDnsForwarders:
{
data.enforceInterface(DESCRIPTOR);
android.net.Network _arg0;
if ((0!=data.readInt())) {
_arg0 = android.net.Network.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
java.lang.String[] _arg1;
_arg1 = data.createStringArray();
this.setDnsForwarders(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_getDnsForwarders:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String[] _result = this.getDnsForwarders();
reply.writeNoException();
reply.writeStringArray(_result);
return true;
}
case TRANSACTION_startInterfaceForwarding:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
java.lang.String _arg1;
_arg1 = data.readString();
this.startInterfaceForwarding(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_stopInterfaceForwarding:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
java.lang.String _arg1;
_arg1 = data.readString();
this.stopInterfaceForwarding(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_enableNat:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
java.lang.String _arg1;
_arg1 = data.readString();
this.enableNat(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_disableNat:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
java.lang.String _arg1;
_arg1 = data.readString();
this.disableNat(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_listTtys:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String[] _result = this.listTtys();
reply.writeNoException();
reply.writeStringArray(_result);
return true;
}
case TRANSACTION_attachPppd:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
java.lang.String _arg1;
_arg1 = data.readString();
java.lang.String _arg2;
_arg2 = data.readString();
java.lang.String _arg3;
_arg3 = data.readString();
java.lang.String _arg4;
_arg4 = data.readString();
this.attachPppd(_arg0, _arg1, _arg2, _arg3, _arg4);
reply.writeNoException();
return true;
}
case TRANSACTION_detachPppd:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
this.detachPppd(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_wifiFirmwareReload:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
java.lang.String _arg1;
_arg1 = data.readString();
this.wifiFirmwareReload(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_startAccessPoint:
{
data.enforceInterface(DESCRIPTOR);
android.net.wifi.WifiConfiguration _arg0;
if ((0!=data.readInt())) {
_arg0 = android.net.wifi.WifiConfiguration.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
java.lang.String _arg1;
_arg1 = data.readString();
this.startAccessPoint(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_stopAccessPoint:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
this.stopAccessPoint(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_setAccessPoint:
{
data.enforceInterface(DESCRIPTOR);
android.net.wifi.WifiConfiguration _arg0;
if ((0!=data.readInt())) {
_arg0 = android.net.wifi.WifiConfiguration.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
java.lang.String _arg1;
_arg1 = data.readString();
this.setAccessPoint(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_getNetworkStatsSummaryDev:
{
data.enforceInterface(DESCRIPTOR);
android.net.NetworkStats _result = this.getNetworkStatsSummaryDev();
reply.writeNoException();
if ((_result!=null)) {
reply.writeInt(1);
_result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
case TRANSACTION_getNetworkStatsSummaryXt:
{
data.enforceInterface(DESCRIPTOR);
android.net.NetworkStats _result = this.getNetworkStatsSummaryXt();
reply.writeNoException();
if ((_result!=null)) {
reply.writeInt(1);
_result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
case TRANSACTION_getNetworkStatsDetail:
{
data.enforceInterface(DESCRIPTOR);
android.net.NetworkStats _result = this.getNetworkStatsDetail();
reply.writeNoException();
if ((_result!=null)) {
reply.writeInt(1);
_result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
case TRANSACTION_getNetworkStatsUidDetail:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
android.net.NetworkStats _result = this.getNetworkStatsUidDetail(_arg0);
reply.writeNoException();
if ((_result!=null)) {
reply.writeInt(1);
_result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
case TRANSACTION_getNetworkStatsTethering:
{
data.enforceInterface(DESCRIPTOR);
android.net.NetworkStats _result = this.getNetworkStatsTethering();
reply.writeNoException();
if ((_result!=null)) {
reply.writeInt(1);
_result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
case TRANSACTION_setInterfaceQuota:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
long _arg1;
_arg1 = data.readLong();
this.setInterfaceQuota(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_removeInterfaceQuota:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
this.removeInterfaceQuota(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_setInterfaceAlert:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
long _arg1;
_arg1 = data.readLong();
this.setInterfaceAlert(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_removeInterfaceAlert:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
this.removeInterfaceAlert(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_setGlobalAlert:
{
data.enforceInterface(DESCRIPTOR);
long _arg0;
_arg0 = data.readLong();
this.setGlobalAlert(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_setUidMeteredNetworkBlacklist:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
boolean _arg1;
_arg1 = (0!=data.readInt());
this.setUidMeteredNetworkBlacklist(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_setUidMeteredNetworkWhitelist:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
boolean _arg1;
_arg1 = (0!=data.readInt());
this.setUidMeteredNetworkWhitelist(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_setDataSaverModeEnabled:
{
data.enforceInterface(DESCRIPTOR);
boolean _arg0;
_arg0 = (0!=data.readInt());
boolean _result = this.setDataSaverModeEnabled(_arg0);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_setUidCleartextNetworkPolicy:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
int _arg1;
_arg1 = data.readInt();
this.setUidCleartextNetworkPolicy(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_isBandwidthControlEnabled:
{
data.enforceInterface(DESCRIPTOR);
boolean _result = this.isBandwidthControlEnabled();
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_addIdleTimer:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
int _arg1;
_arg1 = data.readInt();
int _arg2;
_arg2 = data.readInt();
this.addIdleTimer(_arg0, _arg1, _arg2);
reply.writeNoException();
return true;
}
case TRANSACTION_removeIdleTimer:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
this.removeIdleTimer(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_setDnsConfigurationForNetwork:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
java.lang.String[] _arg1;
_arg1 = data.createStringArray();
java.lang.String _arg2;
_arg2 = data.readString();
this.setDnsConfigurationForNetwork(_arg0, _arg1, _arg2);
reply.writeNoException();
return true;
}
case TRANSACTION_setDnsServersForNetwork:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
java.lang.String[] _arg1;
_arg1 = data.createStringArray();
java.lang.String _arg2;
_arg2 = data.readString();
this.setDnsServersForNetwork(_arg0, _arg1, _arg2);
reply.writeNoException();
return true;
}
case TRANSACTION_setFirewallEnabled:
{
data.enforceInterface(DESCRIPTOR);
boolean _arg0;
_arg0 = (0!=data.readInt());
this.setFirewallEnabled(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_isFirewallEnabled:
{
data.enforceInterface(DESCRIPTOR);
boolean _result = this.isFirewallEnabled();
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_setFirewallInterfaceRule:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
boolean _arg1;
_arg1 = (0!=data.readInt());
this.setFirewallInterfaceRule(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_setFirewallEgressSourceRule:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
boolean _arg1;
_arg1 = (0!=data.readInt());
this.setFirewallEgressSourceRule(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_setFirewallEgressDestRule:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
int _arg1;
_arg1 = data.readInt();
boolean _arg2;
_arg2 = (0!=data.readInt());
this.setFirewallEgressDestRule(_arg0, _arg1, _arg2);
reply.writeNoException();
return true;
}
case TRANSACTION_setFirewallUidRule:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
int _arg1;
_arg1 = data.readInt();
int _arg2;
_arg2 = data.readInt();
this.setFirewallUidRule(_arg0, _arg1, _arg2);
reply.writeNoException();
return true;
}
case TRANSACTION_setFirewallUidRules:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
int[] _arg1;
_arg1 = data.createIntArray();
int[] _arg2;
_arg2 = data.createIntArray();
this.setFirewallUidRules(_arg0, _arg1, _arg2);
reply.writeNoException();
return true;
}
case TRANSACTION_setFirewallChainEnabled:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
boolean _arg1;
_arg1 = (0!=data.readInt());
this.setFirewallChainEnabled(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_addVpnUidRanges:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
android.net.UidRange[] _arg1;
_arg1 = data.createTypedArray(android.net.UidRange.CREATOR);
this.addVpnUidRanges(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_removeVpnUidRanges:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
android.net.UidRange[] _arg1;
_arg1 = data.createTypedArray(android.net.UidRange.CREATOR);
this.removeVpnUidRanges(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_startClatd:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
this.startClatd(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_stopClatd:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
this.stopClatd(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_isClatdStarted:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
boolean _result = this.isClatdStarted(_arg0);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_registerNetworkActivityListener:
{
data.enforceInterface(DESCRIPTOR);
android.os.INetworkActivityListener _arg0;
_arg0 = android.os.INetworkActivityListener.Stub.asInterface(data.readStrongBinder());
this.registerNetworkActivityListener(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_unregisterNetworkActivityListener:
{
data.enforceInterface(DESCRIPTOR);
android.os.INetworkActivityListener _arg0;
_arg0 = android.os.INetworkActivityListener.Stub.asInterface(data.readStrongBinder());
this.unregisterNetworkActivityListener(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_isNetworkActive:
{
data.enforceInterface(DESCRIPTOR);
boolean _result = this.isNetworkActive();
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_createPhysicalNetwork:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
java.lang.String _arg1;
_arg1 = data.readString();
this.createPhysicalNetwork(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_createVirtualNetwork:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
boolean _arg1;
_arg1 = (0!=data.readInt());
boolean _arg2;
_arg2 = (0!=data.readInt());
this.createVirtualNetwork(_arg0, _arg1, _arg2);
reply.writeNoException();
return true;
}
case TRANSACTION_removeNetwork:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
this.removeNetwork(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_addInterfaceToNetwork:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
int _arg1;
_arg1 = data.readInt();
this.addInterfaceToNetwork(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_removeInterfaceFromNetwork:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
int _arg1;
_arg1 = data.readInt();
this.removeInterfaceFromNetwork(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_addLegacyRouteForNetId:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
android.net.RouteInfo _arg1;
if ((0!=data.readInt())) {
_arg1 = android.net.RouteInfo.CREATOR.createFromParcel(data);
}
else {
_arg1 = null;
}
int _arg2;
_arg2 = data.readInt();
this.addLegacyRouteForNetId(_arg0, _arg1, _arg2);
reply.writeNoException();
return true;
}
case TRANSACTION_setDefaultNetId:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
this.setDefaultNetId(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_clearDefaultNetId:
{
data.enforceInterface(DESCRIPTOR);
this.clearDefaultNetId();
reply.writeNoException();
return true;
}
case TRANSACTION_setNetworkPermission:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
java.lang.String _arg1;
_arg1 = data.readString();
this.setNetworkPermission(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_setPermission:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
int[] _arg1;
_arg1 = data.createIntArray();
this.setPermission(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_clearPermission:
{
data.enforceInterface(DESCRIPTOR);
int[] _arg0;
_arg0 = data.createIntArray();
this.clearPermission(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_allowProtect:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
this.allowProtect(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_denyProtect:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
this.denyProtect(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_addInterfaceToLocalNetwork:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
java.util.List<android.net.RouteInfo> _arg1;
_arg1 = data.createTypedArrayList(android.net.RouteInfo.CREATOR);
this.addInterfaceToLocalNetwork(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_removeInterfaceFromLocalNetwork:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
this.removeInterfaceFromLocalNetwork(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_removeRoutesFromLocalNetwork:
{
data.enforceInterface(DESCRIPTOR);
java.util.List<android.net.RouteInfo> _arg0;
_arg0 = data.createTypedArrayList(android.net.RouteInfo.CREATOR);
int _result = this.removeRoutesFromLocalNetwork(_arg0);
reply.writeNoException();
reply.writeInt(_result);
return true;
}
case TRANSACTION_setAllowOnlyVpnForUids:
{
data.enforceInterface(DESCRIPTOR);
boolean _arg0;
_arg0 = (0!=data.readInt());
android.net.UidRange[] _arg1;
_arg1 = data.createTypedArray(android.net.UidRange.CREATOR);
this.setAllowOnlyVpnForUids(_arg0, _arg1);
reply.writeNoException();
return true;
}
}
return super.onTransact(code, data, reply, flags);
