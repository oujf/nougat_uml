class Stub
!!!80497975.java!!!	Stub()
            this.attachInterface(this, DESCRIPTOR);
!!!80498103.java!!!	asInterface(inout obj : IBinder) : IMountServiceListener
            if ((obj == null)) {
                return null;
            }
            IInterface iin = (IInterface) obj.queryLocalInterface(DESCRIPTOR);
            if (((iin != null) && (iin instanceof IMountServiceListener))) {
                return ((IMountServiceListener) iin);
            }
            return new IMountServiceListener.Stub.Proxy(obj);
!!!80498231.java!!!	asBinder() : IBinder
            return this;
!!!80498359.java!!!	onTransact(in code : int, inout data : Parcel, inout reply : Parcel, in flags : int) : boolean
            switch (code) {
                case INTERFACE_TRANSACTION: {
                    reply.writeString(DESCRIPTOR);
                    return true;
                }
                case TRANSACTION_onUsbMassStorageConnectionChanged: {
                    data.enforceInterface(DESCRIPTOR);
                    boolean connected;
                    connected = (0 != data.readInt());
                    this.onUsbMassStorageConnectionChanged(connected);
                    reply.writeNoException();
                    return true;
                }
                case TRANSACTION_onStorageStateChanged: {
                    data.enforceInterface(DESCRIPTOR);
                    final String path = data.readString();
                    final String oldState = data.readString();
                    final String newState = data.readString();
                    this.onStorageStateChanged(path, oldState, newState);
                    reply.writeNoException();
                    return true;
                }
                case TRANSACTION_onVolumeStateChanged: {
                    data.enforceInterface(DESCRIPTOR);
                    final VolumeInfo vol = (VolumeInfo) data.readParcelable(null);
                    final int oldState = data.readInt();
                    final int newState = data.readInt();
                    onVolumeStateChanged(vol, oldState, newState);
                    reply.writeNoException();
                    return true;
                }
                case TRANSACTION_onVolumeRecordChanged: {
                    data.enforceInterface(DESCRIPTOR);
                    final VolumeRecord rec = (VolumeRecord) data.readParcelable(null);
                    onVolumeRecordChanged(rec);
                    reply.writeNoException();
                    return true;
                }
                case TRANSACTION_onVolumeForgotten: {
                    data.enforceInterface(DESCRIPTOR);
                    final String fsUuid = data.readString();
                    onVolumeForgotten(fsUuid);
                    reply.writeNoException();
                    return true;
                }
                case TRANSACTION_onDiskScanned: {
                    data.enforceInterface(DESCRIPTOR);
                    final DiskInfo disk = (DiskInfo) data.readParcelable(null);
                    final int volumeCount = data.readInt();
                    onDiskScanned(disk, volumeCount);
                    reply.writeNoException();
                    return true;
                }
                case TRANSACTION_onDiskDestroyed: {
                    data.enforceInterface(DESCRIPTOR);
                    final DiskInfo disk = (DiskInfo) data.readParcelable(null);
                    onDiskDestroyed(disk);
                    reply.writeNoException();
                    return true;
                }
            }
            return super.onTransact(code, data, reply, flags);
