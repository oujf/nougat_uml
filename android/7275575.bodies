class PreferenceGroupAdapter
!!!80573367.java!!!	PreferenceGroupAdapter(inout preferenceGroup : PreferenceGroup)
        mPreferenceGroup = preferenceGroup;
        // If this group gets or loses any children, let us know
        mPreferenceGroup.setOnPreferenceChangeInternalListener(this);

        mPreferenceList = new ArrayList<Preference>();
        mPreferenceLayouts = new ArrayList<PreferenceLayout>();

        syncMyPreferences();
!!!80573495.java!!!	syncMyPreferences() : void
        synchronized(this) {
            if (mIsSyncing) {
                return;
            }

            mIsSyncing = true;
        }

        List<Preference> newPreferenceList = new ArrayList<Preference>(mPreferenceList.size());
        flattenPreferenceGroup(newPreferenceList, mPreferenceGroup);
        mPreferenceList = newPreferenceList;
        
        notifyDataSetChanged();

        synchronized(this) {
            mIsSyncing = false;
            notifyAll();
        }
!!!80573623.java!!!	flattenPreferenceGroup(inout preferences : List<Preference>, inout group : PreferenceGroup) : void
        // TODO: shouldn't always?
        group.sortPreferences();

        final int groupSize = group.getPreferenceCount();
        for (int i = 0; i < groupSize; i++) {
            final Preference preference = group.getPreference(i);
            
            preferences.add(preference);
            
            if (!mHasReturnedViewTypeCount && preference.canRecycleLayout()) {
                addPreferenceClassName(preference);
            }
            
            if (preference instanceof PreferenceGroup) {
                final PreferenceGroup preferenceAsGroup = (PreferenceGroup) preference;
                if (preferenceAsGroup.isOnSameScreenAsChildren()) {
                    flattenPreferenceGroup(preferences, preferenceAsGroup);
                }
            }

            preference.setOnPreferenceChangeInternalListener(this);
        }
!!!80573751.java!!!	createPreferenceLayout(inout preference : Preference, inout in : PreferenceGroupAdapter::PreferenceLayout) : PreferenceGroupAdapter::PreferenceLayout
        PreferenceLayout pl = in != null? in : new PreferenceLayout();
        pl.name = preference.getClass().getName();
        pl.resId = preference.getLayoutResource();
        pl.widgetResId = preference.getWidgetLayoutResource();
        return pl;
!!!80573879.java!!!	addPreferenceClassName(inout preference : Preference) : void
        final PreferenceLayout pl = createPreferenceLayout(preference, null);
        int insertPos = Collections.binarySearch(mPreferenceLayouts, pl);

        // Only insert if it doesn't exist (when it is negative).
        if (insertPos < 0) {
            // Convert to insert index
            insertPos = insertPos * -1 - 1;
            mPreferenceLayouts.add(insertPos, pl);
        }
!!!80574007.java!!!	getCount() : int
        return mPreferenceList.size();
!!!80574135.java!!!	getItem(in position : int) : Preference
        if (position < 0 || position >= getCount()) return null;
        return mPreferenceList.get(position);
!!!80574263.java!!!	getItemId(in position : int) : long
        if (position < 0 || position >= getCount()) return ListView.INVALID_ROW_ID;
        return this.getItem(position).getId();
!!!80574391.java!!!	setHighlighted(in position : int) : void
        mHighlightedPosition = position;
!!!80574519.java!!!	setHighlightedDrawable(inout drawable : Drawable) : void
        mHighlightedDrawable = drawable;
!!!80574647.java!!!	getView(in position : int, inout convertView : View, inout parent : ViewGroup) : View
        final Preference preference = this.getItem(position);
        // Build a PreferenceLayout to compare with known ones that are cacheable.
        mTempPreferenceLayout = createPreferenceLayout(preference, mTempPreferenceLayout);

        // If it's not one of the cached ones, set the convertView to null so that 
        // the layout gets re-created by the Preference.
        if (Collections.binarySearch(mPreferenceLayouts, mTempPreferenceLayout) < 0 ||
                (getItemViewType(position) == getHighlightItemViewType())) {
            convertView = null;
        }
        View result = preference.getView(convertView, parent);
        if (position == mHighlightedPosition && mHighlightedDrawable != null) {
            ViewGroup wrapper = new FrameLayout(parent.getContext());
            wrapper.setLayoutParams(sWrapperLayoutParams);
            wrapper.setBackgroundDrawable(mHighlightedDrawable);
            wrapper.addView(result);
            result = wrapper;
        }
        return result;
!!!80574775.java!!!	isEnabled(in position : int) : boolean
        if (position < 0 || position >= getCount()) return true;
        return this.getItem(position).isSelectable();
!!!80574903.java!!!	areAllItemsEnabled() : boolean
        // There should always be a preference group, and these groups are always
        // disabled
        return false;
!!!80575031.java!!!	onPreferenceChange(inout preference : Preference) : void
        notifyDataSetChanged();
!!!80575159.java!!!	onPreferenceHierarchyChange(inout preference : Preference) : void
        mHandler.removeCallbacks(mSyncRunnable);
        mHandler.post(mSyncRunnable);
!!!80575287.java!!!	hasStableIds() : boolean
        return true;
!!!80575415.java!!!	getHighlightItemViewType() : int
        return getViewTypeCount() - 1;
!!!80575543.java!!!	getItemViewType(in position : int) : int
        if (position == mHighlightedPosition) {
            return getHighlightItemViewType();
        }

        if (!mHasReturnedViewTypeCount) {
            mHasReturnedViewTypeCount = true;
        }
        
        final Preference preference = this.getItem(position);
        if (!preference.canRecycleLayout()) {
            return IGNORE_ITEM_VIEW_TYPE;
        }

        mTempPreferenceLayout = createPreferenceLayout(preference, mTempPreferenceLayout);

        int viewType = Collections.binarySearch(mPreferenceLayouts, mTempPreferenceLayout);
        if (viewType < 0) {
            // This is a class that was seen after we returned the count, so
            // don't recycle it.
            return IGNORE_ITEM_VIEW_TYPE;
        } else {
            return viewType;
        }
!!!80575671.java!!!	getViewTypeCount() : int
        if (!mHasReturnedViewTypeCount) {
            mHasReturnedViewTypeCount = true;
        }
        
        return Math.max(1, mPreferenceLayouts.size()) + 1;
