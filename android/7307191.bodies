class MemoryIntArray
!!!81332407.java!!!	MemoryIntArray(in size : int, inout clientWritable : boolean)
        if (size > MAX_SIZE) {
            throw new IllegalArgumentException("Max size is " + MAX_SIZE);
        }
        mOwnerPid = Process.myPid();
        mClientWritable = clientWritable;
        final String name = UUID.randomUUID().toString();
        mFd = nativeCreate(name, size);
        mMemoryAddr = nativeOpen(mFd, true, clientWritable);
!!!81332535.java!!!	MemoryIntArray(inout parcel : Parcel)
        mOwnerPid = parcel.readInt();
        mClientWritable = (parcel.readInt() == 1);
        ParcelFileDescriptor pfd = parcel.readParcelable(null);
        if (pfd == null) {
            throw new IOException("No backing file descriptor");
        }
        mFd = pfd.detachFd();
        final long memoryAddress = parcel.readLong();
        if (isOwner()) {
            mMemoryAddr = memoryAddress;
        } else {
            mMemoryAddr = nativeOpen(mFd, false, mClientWritable);
        }
!!!81332663.java!!!	isWritable() : boolean
        enforceNotClosed();
        return isOwner() || mClientWritable;
!!!81332791.java!!!	get(in index : int) : int
        enforceNotClosed();
        enforceValidIndex(index);
        return nativeGet(mFd, mMemoryAddr, index, isOwner());
!!!81332919.java!!!	set(in index : int, in value : int) : void
        enforceNotClosed();
        enforceWritable();
        enforceValidIndex(index);
        nativeSet(mFd, mMemoryAddr, index, value, isOwner());
!!!81333047.java!!!	size() : int
        enforceNotClosed();
        return nativeSize(mFd);
!!!81333175.java!!!	close() : void
        if (!isClosed()) {
            nativeClose(mFd, mMemoryAddr, isOwner());
            mFd = -1;
        }
!!!81333303.java!!!	isClosed() : boolean
        return mFd == -1;
!!!81333431.java!!!	finalize() : void
        IoUtils.closeQuietly(this);
        super.finalize();
!!!81333559.java!!!	describeContents() : int
        return CONTENTS_FILE_DESCRIPTOR;
!!!81333687.java!!!	writeToParcel(inout parcel : Parcel, in flags : int) : void
        ParcelFileDescriptor pfd = ParcelFileDescriptor.adoptFd(mFd);
        try {
            parcel.writeInt(mOwnerPid);
            parcel.writeInt(mClientWritable ? 1 : 0);
            parcel.writeParcelable(pfd, flags & ~Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
            parcel.writeLong(mMemoryAddr);
        } finally {
            pfd.detachFd();
        }
!!!81333815.java!!!	equals(inout obj : Object) : boolean
        if (obj == null) {
            return false;
        }
        if (this == obj) {
            return true;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        MemoryIntArray other = (MemoryIntArray) obj;
        return mFd == other.mFd;
!!!81333943.java!!!	hashCode() : int
        return mFd;
!!!81334071.java!!!	isOwner() : boolean
        return mOwnerPid == Process.myPid();
!!!81334199.java!!!	enforceNotClosed() : void
        if (isClosed()) {
            throw new IllegalStateException("cannot interact with a closed instance");
        }
!!!81334327.java!!!	enforceValidIndex(in index : int) : void
        final int size = size();
        if (index < 0 || index > size - 1) {
            throw new IndexOutOfBoundsException(
                    index + " not between 0 and " + (size - 1));
        }
!!!81334455.java!!!	enforceWritable() : void
        if (!isWritable()) {
            throw new UnsupportedOperationException("array is not writable");
        }
!!!81335351.java!!!	getMaxSize() : int
        return MAX_SIZE;
