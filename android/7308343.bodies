class Global
!!!80751543.java!!!	getBluetoothHeadsetPriorityKey(inout address : String) : String
            return BLUETOOTH_HEADSET_PRIORITY_PREFIX + address.toUpperCase(Locale.ROOT);
!!!80751671.java!!!	getBluetoothA2dpSinkPriorityKey(inout address : String) : String
            return BLUETOOTH_A2DP_SINK_PRIORITY_PREFIX + address.toUpperCase(Locale.ROOT);
!!!80751799.java!!!	getBluetoothA2dpSrcPriorityKey(inout address : String) : String
            return BLUETOOTH_A2DP_SRC_PRIORITY_PREFIX + address.toUpperCase(Locale.ROOT);
!!!80751927.java!!!	getBluetoothInputDevicePriorityKey(inout address : String) : String
            return BLUETOOTH_INPUT_DEVICE_PRIORITY_PREFIX + address.toUpperCase(Locale.ROOT);
!!!80752055.java!!!	getBluetoothMapPriorityKey(inout address : String) : String
            return BLUETOOTH_MAP_PRIORITY_PREFIX + address.toUpperCase(Locale.ROOT);
!!!80752183.java!!!	getBluetoothPbapClientPriorityKey(inout address : String) : String
            return BLUETOOTH_PBAP_CLIENT_PRIORITY_PREFIX + address.toUpperCase(Locale.ROOT);
!!!80752311.java!!!	getBluetoothSapPriorityKey(inout address : String) : String
            return BLUETOOTH_SAP_PRIORITY_PREFIX + address.toUpperCase(Locale.ROOT);
!!!80752439.java!!!	zenModeToString(in mode : int) : String
            if (mode == ZEN_MODE_IMPORTANT_INTERRUPTIONS) return "ZEN_MODE_IMPORTANT_INTERRUPTIONS";
            if (mode == ZEN_MODE_ALARMS) return "ZEN_MODE_ALARMS";
            if (mode == ZEN_MODE_NO_INTERRUPTIONS) return "ZEN_MODE_NO_INTERRUPTIONS";
            return "ZEN_MODE_OFF";
!!!80752567.java!!!	isValidZenMode(in value : int) : boolean
            switch (value) {
                case Global.ZEN_MODE_OFF:
                case Global.ZEN_MODE_IMPORTANT_INTERRUPTIONS:
                case Global.ZEN_MODE_ALARMS:
                case Global.ZEN_MODE_NO_INTERRUPTIONS:
                    return true;
                default:
                    return false;
            }
!!!80752695.java!!!	getMovedToSecureSettings(inout outKeySet : Set<String>) : void
            outKeySet.addAll(MOVED_TO_SECURE);
!!!80752823.java!!!	getString(inout resolver : ContentResolver, inout name : String) : String
            return getStringForUser(resolver, name, UserHandle.myUserId());
!!!80752951.java!!!	getStringForUser(inout resolver : ContentResolver, inout name : String, in userHandle : int) : String
            if (MOVED_TO_SECURE.contains(name)) {
                Log.w(TAG, "Setting " + name + " has moved from android.provider.Settings.Global"
                        + " to android.provider.Settings.Secure, returning read-only value.");
                return Secure.getStringForUser(resolver, name, userHandle);
            }
            return sNameValueCache.getStringForUser(resolver, name, userHandle);
!!!80753079.java!!!	putString(inout resolver : ContentResolver, inout name : String, inout value : String) : boolean
            return putStringForUser(resolver, name, value, UserHandle.myUserId());
!!!80753207.java!!!	putStringForUser(inout resolver : ContentResolver, inout name : String, inout value : String, in userHandle : int) : boolean
            if (LOCAL_LOGV) {
                Log.v(TAG, "Global.putString(name=" + name + ", value=" + value
                        + " for " + userHandle);
            }
            // Global and Secure have the same access policy so we can forward writes
            if (MOVED_TO_SECURE.contains(name)) {
                Log.w(TAG, "Setting " + name + " has moved from android.provider.Settings.Global"
                        + " to android.provider.Settings.Secure, value is unchanged.");
                return Secure.putStringForUser(resolver, name, value, userHandle);
            }
            return sNameValueCache.putStringForUser(resolver, name, value, userHandle);
!!!80753335.java!!!	getUriFor(inout name : String) : Uri
            return getUriFor(CONTENT_URI, name);
!!!80753463.java!!!	getInt(inout cr : ContentResolver, inout name : String, in def : int) : int
            String v = getString(cr, name);
            try {
                return v != null ? Integer.parseInt(v) : def;
            } catch (NumberFormatException e) {
                return def;
            }
!!!80753591.java!!!	getInt(inout cr : ContentResolver, inout name : String) : int
            String v = getString(cr, name);
            try {
                return Integer.parseInt(v);
            } catch (NumberFormatException e) {
                throw new SettingNotFoundException(name);
            }
!!!80753719.java!!!	putInt(inout cr : ContentResolver, inout name : String, in value : int) : boolean
            return putString(cr, name, Integer.toString(value));
!!!80753847.java!!!	getLong(inout cr : ContentResolver, inout name : String, in def : long) : long
            String valString = getString(cr, name);
            long value;
            try {
                value = valString != null ? Long.parseLong(valString) : def;
            } catch (NumberFormatException e) {
                value = def;
            }
            return value;
!!!80753975.java!!!	getLong(inout cr : ContentResolver, inout name : String) : long
            String valString = getString(cr, name);
            try {
                return Long.parseLong(valString);
            } catch (NumberFormatException e) {
                throw new SettingNotFoundException(name);
            }
!!!80754103.java!!!	putLong(inout cr : ContentResolver, inout name : String, in value : long) : boolean
            return putString(cr, name, Long.toString(value));
!!!80754231.java!!!	getFloat(inout cr : ContentResolver, inout name : String, in def : float) : float
            String v = getString(cr, name);
            try {
                return v != null ? Float.parseFloat(v) : def;
            } catch (NumberFormatException e) {
                return def;
            }
!!!80754359.java!!!	getFloat(inout cr : ContentResolver, inout name : String) : float
            String v = getString(cr, name);
            if (v == null) {
                throw new SettingNotFoundException(name);
            }
            try {
                return Float.parseFloat(v);
            } catch (NumberFormatException e) {
                throw new SettingNotFoundException(name);
            }
!!!80754487.java!!!	putFloat(inout cr : ContentResolver, inout name : String, in value : float) : boolean
            return putString(cr, name, Float.toString(value));
