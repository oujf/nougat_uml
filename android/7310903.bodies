class ApplicationConfig
!!!80780087.java!!!	ApplicationConfig(inout configSource : ConfigSource)
        mConfigSource = configSource;
        mInitialized = false;
!!!80780215.java!!!	hasPerDomainConfigs() : boolean
        ensureInitialized();
        return mConfigs != null && !mConfigs.isEmpty();
!!!80780343.java!!!	getConfigForHostname(inout hostname : String) : NetworkSecurityConfig
        ensureInitialized();
        if (hostname == null || hostname.isEmpty() || mConfigs == null) {
            return mDefaultConfig;
        }
        if (hostname.charAt(0) ==  '.') {
            throw new IllegalArgumentException("hostname must not begin with a .");
        }
        // Domains are case insensitive.
        hostname = hostname.toLowerCase(Locale.US);
        // Normalize hostname by removing trailing . if present, all Domain hostnames are
        // absolute.
        if (hostname.charAt(hostname.length() - 1) == '.') {
            hostname = hostname.substring(0, hostname.length() - 1);
        }
        // Find the Domain -> NetworkSecurityConfig entry with the most specific matching
        // Domain entry for hostname.
        // TODO: Use a smarter data structure for the lookup.
        Pair<Domain, NetworkSecurityConfig> bestMatch = null;
        for (Pair<Domain, NetworkSecurityConfig> entry : mConfigs) {
            Domain domain = entry.first;
            NetworkSecurityConfig config = entry.second;
            // Check for an exact match.
            if (domain.hostname.equals(hostname)) {
                return config;
            }
            // Otherwise check if the Domain includes sub-domains and that the hostname is a
            // sub-domain of the Domain.
            if (domain.subdomainsIncluded
                    && hostname.endsWith(domain.hostname)
                    && hostname.charAt(hostname.length() - domain.hostname.length() - 1) == '.') {
                if (bestMatch == null) {
                    bestMatch = entry;
                } else if (domain.hostname.length() > bestMatch.first.hostname.length()) {
                    bestMatch = entry;
                }
            }
        }
        if (bestMatch != null) {
            return bestMatch.second;
        }
        // If no match was found use the default configuration.
        return mDefaultConfig;
!!!80780471.java!!!	getTrustManager() : X509TrustManager
        ensureInitialized();
        return mTrustManager;
!!!80780599.java!!!	isCleartextTrafficPermitted() : boolean
        ensureInitialized();
        if (mConfigs != null) {
            for (Pair<Domain, NetworkSecurityConfig> entry : mConfigs) {
                if (!entry.second.isCleartextTrafficPermitted()) {
                    return false;
                }
            }
        }

        return mDefaultConfig.isCleartextTrafficPermitted();
!!!80780727.java!!!	isCleartextTrafficPermitted(inout hostname : String) : boolean
        return getConfigForHostname(hostname).isCleartextTrafficPermitted();
!!!80780855.java!!!	handleTrustStorageUpdate() : void
        ensureInitialized();
        mDefaultConfig.handleTrustStorageUpdate();
        if (mConfigs != null) {
            Set<NetworkSecurityConfig> updatedConfigs =
                    new HashSet<NetworkSecurityConfig>(mConfigs.size());
            for (Pair<Domain, NetworkSecurityConfig> entry : mConfigs) {
                if (updatedConfigs.add(entry.second)) {
                    entry.second.handleTrustStorageUpdate();
                }
            }
        }
!!!80780983.java!!!	ensureInitialized() : void
        synchronized(mLock) {
            if (mInitialized) {
                return;
            }
            mConfigs = mConfigSource.getPerDomainConfigs();
            mDefaultConfig = mConfigSource.getDefaultConfig();
            mConfigSource = null;
            mTrustManager = new RootTrustManager(this);
            mInitialized = true;
        }
!!!80781111.java!!!	setDefaultInstance(inout config : ApplicationConfig) : void
        synchronized (sLock) {
            sInstance = config;
        }
!!!80781239.java!!!	getDefaultInstance() : ApplicationConfig
        synchronized (sLock) {
            return sInstance;
        }
