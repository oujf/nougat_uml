class VoiceInteractionSession
!!!80923831.java!!!	VoiceInteractionSession(inout context : Context)
        this(context, new Handler());
!!!80923959.java!!!	VoiceInteractionSession(inout context : Context, inout handler : Handler)
        mContext = context;
        mHandlerCaller = new HandlerCaller(context, handler.getLooper(),
                mCallbacks, true);
!!!80924087.java!!!	getContext() : Context
        return mContext;
!!!80924215.java!!!	addRequest(inout req : VoiceInteractionSession::Request) : void
        synchronized (this) {
            mActiveRequests.put(req.mInterface.asBinder(), req);
        }
!!!80924343.java!!!	isRequestActive(inout reqInterface : IBinder) : boolean
        synchronized (this) {
            return mActiveRequests.containsKey(reqInterface);
        }
!!!80924471.java!!!	removeRequest(inout reqInterface : IBinder) : VoiceInteractionSession::Request
        synchronized (this) {
            return mActiveRequests.remove(reqInterface);
        }
!!!80924599.java!!!	doCreate(inout service : IVoiceInteractionManagerService, inout token : IBinder) : void
        mSystemService = service;
        mToken = token;
        onCreate();
!!!80924727.java!!!	doShow(inout args : Bundle, in flags : int, in showCallback : IVoiceInteractionSessionShowCallback) : void
        if (DEBUG) Log.v(TAG, "Showing window: mWindowAdded=" + mWindowAdded
                + " mWindowVisible=" + mWindowVisible);

        if (mInShowWindow) {
            Log.w(TAG, "Re-entrance in to showWindow");
            return;
        }

        try {
            mInShowWindow = true;
            if (!mWindowVisible) {
                if (!mWindowAdded) {
                    mWindowAdded = true;
                    View v = onCreateContentView();
                    if (v != null) {
                        setContentView(v);
                    }
                }
            }
            onShow(args, flags);
            if (!mWindowVisible) {
                mWindowVisible = true;
                mWindow.show();
            }
            if (showCallback != null) {
                mRootView.invalidate();
                mRootView.getViewTreeObserver().addOnPreDrawListener(
                        new ViewTreeObserver.OnPreDrawListener() {
                            @Override
                            public boolean onPreDraw() {
                                mRootView.getViewTreeObserver().removeOnPreDrawListener(this);
                                try {
                                    showCallback.onShown();
                                } catch (RemoteException e) {
                                    Log.w(TAG, "Error calling onShown", e);
                                }
                                return true;
                            }
                        });
            }
        } finally {
            mWindowWasVisible = true;
            mInShowWindow = false;
        }
!!!80924855.java!!!	doHide() : void
        if (mWindowVisible) {
            mWindow.hide();
            mWindowVisible = false;
            onHide();
        }
!!!80924983.java!!!	doDestroy() : void
        onDestroy();
        if (mInitialized) {
            mRootView.getViewTreeObserver().removeOnComputeInternalInsetsListener(
                    mInsetsComputer);
            if (mWindowAdded) {
                mWindow.dismiss();
                mWindowAdded = false;
            }
            mInitialized = false;
        }
!!!80925111.java!!!	initViews() : void
        mInitialized = true;

        mThemeAttrs = mContext.obtainStyledAttributes(android.R.styleable.VoiceInteractionSession);
        mRootView = mInflater.inflate(
                com.android.internal.R.layout.voice_interaction_session, null);
        mRootView.setSystemUiVisibility(
                View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);
        mWindow.setContentView(mRootView);
        mRootView.getViewTreeObserver().addOnComputeInternalInsetsListener(mInsetsComputer);

        mContentFrame = (FrameLayout)mRootView.findViewById(android.R.id.content);
!!!80925239.java!!!	setDisabledShowContext(in flags : int) : void
        try {
            mSystemService.setDisabledShowContext(flags);
        } catch (RemoteException e) {
        }
!!!80925367.java!!!	getDisabledShowContext() : int
        try {
            return mSystemService.getDisabledShowContext();
        } catch (RemoteException e) {
            return 0;
        }
!!!80925495.java!!!	getUserDisabledShowContext() : int
        try {
            return mSystemService.getUserDisabledShowContext();
        } catch (RemoteException e) {
            return 0;
        }
!!!80925623.java!!!	show(inout args : Bundle, in flags : int) : void
        if (mToken == null) {
            throw new IllegalStateException("Can't call before onCreate()");
        }
        try {
            mSystemService.showSessionFromSession(mToken, args, flags);
        } catch (RemoteException e) {
        }
!!!80925751.java!!!	hide() : void
        if (mToken == null) {
            throw new IllegalStateException("Can't call before onCreate()");
        }
        try {
            mSystemService.hideSessionFromSession(mToken);
        } catch (RemoteException e) {
        }
!!!80925879.java!!!	setTheme(in theme : int) : void
        if (mWindow != null) {
            throw new IllegalStateException("Must be called before onCreate()");
        }
        mTheme = theme;
!!!80926007.java!!!	startVoiceActivity(inout intent : Intent) : void
        if (mToken == null) {
            throw new IllegalStateException("Can't call before onCreate()");
        }
        try {
            intent.migrateExtraStreamToClipData();
            intent.prepareToLeaveProcess(mContext);
            int res = mSystemService.startVoiceActivity(mToken, intent,
                    intent.resolveType(mContext.getContentResolver()));
            Instrumentation.checkStartActivityResult(res, intent);
        } catch (RemoteException e) {
        }
!!!80926135.java!!!	setKeepAwake(inout keepAwake : boolean) : void
        if (mToken == null) {
            throw new IllegalStateException("Can't call before onCreate()");
        }
        try {
            mSystemService.setKeepAwake(mToken, keepAwake);
        } catch (RemoteException e) {
        }
!!!80926263.java!!!	closeSystemDialogs() : void
        if (mToken == null) {
            throw new IllegalStateException("Can't call before onCreate()");
        }
        try {
            mSystemService.closeSystemDialogs(mToken);
        } catch (RemoteException e) {
        }
!!!80926391.java!!!	getLayoutInflater() : LayoutInflater
        return mInflater;
!!!80926519.java!!!	getWindow() : Dialog
        return mWindow;
!!!80926647.java!!!	finish() : void
        if (mToken == null) {
            throw new IllegalStateException("Can't call before onCreate()");
        }
        try {
            mSystemService.finish(mToken);
        } catch (RemoteException e) {
        }
!!!80926775.java!!!	onCreate() : void
        doOnCreate();
!!!80926903.java!!!	doOnCreate() : void
        mTheme = mTheme != 0 ? mTheme
                : com.android.internal.R.style.Theme_DeviceDefault_VoiceInteractionSession;
        mInflater = (LayoutInflater)mContext.getSystemService(
                Context.LAYOUT_INFLATER_SERVICE);
        mWindow = new SoftInputWindow(mContext, "VoiceInteractionSession", mTheme,
                mCallbacks, this, mDispatcherState,
                WindowManager.LayoutParams.TYPE_VOICE_INTERACTION, Gravity.BOTTOM, true);
        mWindow.getWindow().addFlags(
                WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED |
                WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN |
                WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR);
        initViews();
        mWindow.getWindow().setLayout(MATCH_PARENT, MATCH_PARENT);
        mWindow.setToken(mToken);
!!!80927415.java!!!	onCreateContentView() : View
        return null;
!!!80927543.java!!!	setContentView(inout view : View) : void
        mContentFrame.removeAllViews();
        mContentFrame.addView(view, new FrameLayout.LayoutParams(
                ViewGroup.LayoutParams.MATCH_PARENT,
                ViewGroup.LayoutParams.MATCH_PARENT));
        mContentFrame.requestApplyInsets();
!!!80927671.java!!!	doOnHandleAssist(inout data : Bundle, inout structure : AssistStructure, inout failure : Throwable, inout content : AssistContent) : void
        if (failure != null) {
            onAssistStructureFailure(failure);
        }
        onHandleAssist(data, structure, content);
!!!80927799.java!!!	doOnHandleAssistSecondary(inout data : Bundle, inout structure : AssistStructure, inout failure : Throwable, inout content : AssistContent, in index : int, in count : int) : void
        if (failure != null) {
            onAssistStructureFailure(failure);
        }
        onHandleAssistSecondary(data, structure, content, index, count);
!!!80928439.java!!!	onKeyDown(in keyCode : int, inout event : KeyEvent) : boolean
        return false;
!!!80928567.java!!!	onKeyLongPress(in keyCode : int, inout event : KeyEvent) : boolean
        return false;
!!!80928695.java!!!	onKeyUp(in keyCode : int, inout event : KeyEvent) : boolean
        return false;
!!!80928823.java!!!	onKeyMultiple(in keyCode : int, in count : int, inout event : KeyEvent) : boolean
        return false;
!!!80928951.java!!!	onBackPressed() : void
        hide();
!!!80929079.java!!!	onCloseSystemDialogs() : void
        hide();
!!!80929207.java!!!	onLockscreenShown() : void
        hide();
!!!80929719.java!!!	onComputeInsets(inout outInsets : VoiceInteractionSession::Insets) : void
        outInsets.contentInsets.left = 0;
        outInsets.contentInsets.bottom = 0;
        outInsets.contentInsets.right = 0;
        View decor = getWindow().getWindow().getDecorView();
        outInsets.contentInsets.top = decor.getHeight();
        outInsets.touchableInsets = Insets.TOUCHABLE_INSETS_FRAME;
        outInsets.touchableRegion.setEmpty();
!!!80929975.java!!!	onTaskFinished(inout intent : Intent, in taskId : int) : void
        hide();
!!!80930103.java!!!	onGetSupportedCommands(inout commands : String [[]]) : boolean
        return new boolean[commands.length];
!!!80930999.java!!!	dump(inout prefix : String, inout fd : FileDescriptor, inout writer : PrintWriter, inout args : String [[]]) : void
        writer.print(prefix); writer.print("mToken="); writer.println(mToken);
        writer.print(prefix); writer.print("mTheme=#"); writer.println(Integer.toHexString(mTheme));
        writer.print(prefix); writer.print("mInitialized="); writer.println(mInitialized);
        writer.print(prefix); writer.print("mWindowAdded="); writer.print(mWindowAdded);
        writer.print(" mWindowVisible="); writer.println(mWindowVisible);
        writer.print(prefix); writer.print("mWindowWasVisible="); writer.print(mWindowWasVisible);
        writer.print(" mInShowWindow="); writer.println(mInShowWindow);
        if (mActiveRequests.size() > 0) {
            writer.print(prefix); writer.println("Active requests:");
            String innerPrefix = prefix + "    ";
            for (int i=0; i<mActiveRequests.size(); i++) {
                Request req = mActiveRequests.valueAt(i);
                writer.print(prefix); writer.print("  #"); writer.print(i);
                writer.print(": ");
                writer.println(req);
                req.dump(innerPrefix, fd, writer, args);

            }
        }
