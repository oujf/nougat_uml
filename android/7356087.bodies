class Selection
!!!81076919.java!!!	Selection()
 /* cannot be instantiated */
!!!81077047.java!!!	getSelectionStart(inout text : CharSequence) : int
        if (text instanceof Spanned)
            return ((Spanned) text).getSpanStart(SELECTION_START);
        else
            return -1;
!!!81077175.java!!!	getSelectionEnd(inout text : CharSequence) : int
        if (text instanceof Spanned)
            return ((Spanned) text).getSpanStart(SELECTION_END);
        else
            return -1;
!!!81077303.java!!!	setSelection(inout text : Spannable, in start : int, in stop : int) : void
        // int len = text.length();
        // start = pin(start, 0, len);  XXX remove unless we really need it
        // stop = pin(stop, 0, len);

        int ostart = getSelectionStart(text);
        int oend = getSelectionEnd(text);

        if (ostart != start || oend != stop) {
            text.setSpan(SELECTION_START, start, start,
                         Spanned.SPAN_POINT_POINT|Spanned.SPAN_INTERMEDIATE);
            text.setSpan(SELECTION_END, stop, stop,
                         Spanned.SPAN_POINT_POINT);
        }
!!!81077431.java!!!	setSelection(inout text : Spannable, in index : int) : void
        setSelection(text, index, index);
!!!81077559.java!!!	selectAll(inout text : Spannable) : void
        setSelection(text, 0, text.length());
!!!81077687.java!!!	extendSelection(inout text : Spannable, in index : int) : void
        if (text.getSpanStart(SELECTION_END) != index)
            text.setSpan(SELECTION_END, index, index, Spanned.SPAN_POINT_POINT);
!!!81077815.java!!!	removeSelection(inout text : Spannable) : void
        text.removeSpan(SELECTION_START);
        text.removeSpan(SELECTION_END);
!!!81077943.java!!!	moveUp(inout text : Spannable, inout layout : Layout) : boolean
        int start = getSelectionStart(text);
        int end = getSelectionEnd(text);

        if (start != end) {
            int min = Math.min(start, end);
            int max = Math.max(start, end);

            setSelection(text, min);

            if (min == 0 && max == text.length()) {
                return false;
            }

            return true;
        } else {
            int line = layout.getLineForOffset(end);

            if (line > 0) {
                int move;

                if (layout.getParagraphDirection(line) ==
                    layout.getParagraphDirection(line - 1)) {
                    float h = layout.getPrimaryHorizontal(end);
                    move = layout.getOffsetForHorizontal(line - 1, h);
                } else {
                    move = layout.getLineStart(line - 1);
                }

                setSelection(text, move);
                return true;
            } else if (end != 0) {
                setSelection(text, 0);
                return true;
            }
        }

        return false;
!!!81078071.java!!!	moveDown(inout text : Spannable, inout layout : Layout) : boolean
        int start = getSelectionStart(text);
        int end = getSelectionEnd(text);

        if (start != end) {
            int min = Math.min(start, end);
            int max = Math.max(start, end);

            setSelection(text, max);

            if (min == 0 && max == text.length()) {
                return false;
            }

            return true;
        } else {
            int line = layout.getLineForOffset(end);

            if (line < layout.getLineCount() - 1) {
                int move;

                if (layout.getParagraphDirection(line) ==
                    layout.getParagraphDirection(line + 1)) {
                    float h = layout.getPrimaryHorizontal(end);
                    move = layout.getOffsetForHorizontal(line + 1, h);
                } else {
                    move = layout.getLineStart(line + 1);
                }

                setSelection(text, move);
                return true;
            } else if (end != text.length()) {
                setSelection(text, text.length());
                return true;
            }
        }

        return false;
!!!81078199.java!!!	moveLeft(inout text : Spannable, inout layout : Layout) : boolean
        int start = getSelectionStart(text);
        int end = getSelectionEnd(text);

        if (start != end) {
            setSelection(text, chooseHorizontal(layout, -1, start, end));
            return true;
        } else {
            int to = layout.getOffsetToLeftOf(end);

            if (to != end) {
                setSelection(text, to);
                return true;
            }
        }

        return false;
!!!81078327.java!!!	moveRight(inout text : Spannable, inout layout : Layout) : boolean
        int start = getSelectionStart(text);
        int end = getSelectionEnd(text);

        if (start != end) {
            setSelection(text, chooseHorizontal(layout, 1, start, end));
            return true;
        } else {
            int to = layout.getOffsetToRightOf(end);

            if (to != end) {
                setSelection(text, to);
                return true;
            }
        }

        return false;
!!!81078455.java!!!	extendUp(inout text : Spannable, inout layout : Layout) : boolean
        int end = getSelectionEnd(text);
        int line = layout.getLineForOffset(end);

        if (line > 0) {
            int move;

            if (layout.getParagraphDirection(line) ==
                layout.getParagraphDirection(line - 1)) {
                float h = layout.getPrimaryHorizontal(end);
                move = layout.getOffsetForHorizontal(line - 1, h);
            } else {
                move = layout.getLineStart(line - 1);
            }

            extendSelection(text, move);
            return true;
        } else if (end != 0) {
            extendSelection(text, 0);
            return true;
        }

        return true;
!!!81078583.java!!!	extendDown(inout text : Spannable, inout layout : Layout) : boolean
        int end = getSelectionEnd(text);
        int line = layout.getLineForOffset(end);

        if (line < layout.getLineCount() - 1) {
            int move;

            if (layout.getParagraphDirection(line) ==
                layout.getParagraphDirection(line + 1)) {
                float h = layout.getPrimaryHorizontal(end);
                move = layout.getOffsetForHorizontal(line + 1, h);
            } else {
                move = layout.getLineStart(line + 1);
            }

            extendSelection(text, move);
            return true;
        } else if (end != text.length()) {
            extendSelection(text, text.length());
            return true;
        }

        return true;
!!!81078711.java!!!	extendLeft(inout text : Spannable, inout layout : Layout) : boolean
        int end = getSelectionEnd(text);
        int to = layout.getOffsetToLeftOf(end);

        if (to != end) {
            extendSelection(text, to);
            return true;
        }

        return true;
!!!81078839.java!!!	extendRight(inout text : Spannable, inout layout : Layout) : boolean
        int end = getSelectionEnd(text);
        int to = layout.getOffsetToRightOf(end);

        if (to != end) {
            extendSelection(text, to);
            return true;
        }

        return true;
!!!81078967.java!!!	extendToLeftEdge(inout text : Spannable, inout layout : Layout) : boolean
        int where = findEdge(text, layout, -1);
        extendSelection(text, where);
        return true;
!!!81079095.java!!!	extendToRightEdge(inout text : Spannable, inout layout : Layout) : boolean
        int where = findEdge(text, layout, 1);
        extendSelection(text, where);
        return true;
!!!81079223.java!!!	moveToLeftEdge(inout text : Spannable, inout layout : Layout) : boolean
        int where = findEdge(text, layout, -1);
        setSelection(text, where);
        return true;
!!!81079351.java!!!	moveToRightEdge(inout text : Spannable, inout layout : Layout) : boolean
        int where = findEdge(text, layout, 1);
        setSelection(text, where);
        return true;
!!!81079735.java!!!	moveToPreceding(inout text : Spannable, inout iter : Selection::PositionIterator, inout extendSelection : boolean) : boolean
        final int offset = iter.preceding(getSelectionEnd(text));
        if (offset != PositionIterator.DONE) {
            if (extendSelection) {
                extendSelection(text, offset);
            } else {
                setSelection(text, offset);
            }
        }
        return true;
!!!81079863.java!!!	moveToFollowing(inout text : Spannable, inout iter : Selection::PositionIterator, inout extendSelection : boolean) : boolean
        final int offset = iter.following(getSelectionEnd(text));
        if (offset != PositionIterator.DONE) {
            if (extendSelection) {
                extendSelection(text, offset);
            } else {
                setSelection(text, offset);
            }
        }
        return true;
!!!81079991.java!!!	findEdge(inout text : Spannable, inout layout : Layout, in dir : int) : int
        int pt = getSelectionEnd(text);
        int line = layout.getLineForOffset(pt);
        int pdir = layout.getParagraphDirection(line);

        if (dir * pdir < 0) {
            return layout.getLineStart(line);
        } else {
            int end = layout.getLineEnd(line);

            if (line == layout.getLineCount() - 1)
                return end;
            else
                return end - 1;
        }
!!!81080119.java!!!	chooseHorizontal(inout layout : Layout, in direction : int, in off1 : int, in off2 : int) : int
        int line1 = layout.getLineForOffset(off1);
        int line2 = layout.getLineForOffset(off2);

        if (line1 == line2) {
            // same line, so it goes by pure physical direction

            float h1 = layout.getPrimaryHorizontal(off1);
            float h2 = layout.getPrimaryHorizontal(off2);

            if (direction < 0) {
                // to left

                if (h1 < h2)
                    return off1;
                else
                    return off2;
            } else {
                // to right

                if (h1 > h2)
                    return off1;
                else
                    return off2;
            }
        } else {
            // different line, so which line is "left" and which is "right"
            // depends upon the directionality of the text

            // This only checks at one end, but it's not clear what the
            // right thing to do is if the ends don't agree.  Even if it
            // is wrong it should still not be too bad.
            int line = layout.getLineForOffset(off1);
            int textdir = layout.getParagraphDirection(line);

            if (textdir == direction)
                return Math.max(off1, off2);
            else
                return Math.min(off1, off2);
        }
