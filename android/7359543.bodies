class BaseMovementMethod
!!!81124151.java!!!	canSelectArbitrarily() : boolean
        return false;
!!!81124407.java!!!	onKeyDown(inout widget : TextView, inout text : Spannable, in keyCode : int, inout event : KeyEvent) : boolean
        final int movementMetaState = getMovementMetaState(text, event);
        boolean handled = handleMovementKey(widget, text, keyCode, movementMetaState, event);
        if (handled) {
            MetaKeyKeyListener.adjustMetaAfterKeypress(text);
            MetaKeyKeyListener.resetLockedMeta(text);
        }
        return handled;
!!!81124535.java!!!	onKeyOther(inout widget : TextView, inout text : Spannable, inout event : KeyEvent) : boolean
        final int movementMetaState = getMovementMetaState(text, event);
        final int keyCode = event.getKeyCode();
        if (keyCode != KeyEvent.KEYCODE_UNKNOWN
                && event.getAction() == KeyEvent.ACTION_MULTIPLE) {
            final int repeat = event.getRepeatCount();
            boolean handled = false;
            for (int i = 0; i < repeat; i++) {
                if (!handleMovementKey(widget, text, keyCode, movementMetaState, event)) {
                    break;
                }
                handled = true;
            }
            if (handled) {
                MetaKeyKeyListener.adjustMetaAfterKeypress(text);
                MetaKeyKeyListener.resetLockedMeta(text);
            }
            return handled;
        }
        return false;
!!!81124663.java!!!	onKeyUp(inout widget : TextView, inout text : Spannable, in keyCode : int, inout event : KeyEvent) : boolean
        return false;
!!!81124919.java!!!	onTouchEvent(inout widget : TextView, inout text : Spannable, inout event : MotionEvent) : boolean
        return false;
!!!81125047.java!!!	onTrackballEvent(inout widget : TextView, inout text : Spannable, inout event : MotionEvent) : boolean
        return false;
!!!81125175.java!!!	onGenericMotionEvent(inout widget : TextView, inout text : Spannable, inout event : MotionEvent) : boolean
        if ((event.getSource() & InputDevice.SOURCE_CLASS_POINTER) != 0) {
            switch (event.getAction()) {
                case MotionEvent.ACTION_SCROLL: {
                    final float vscroll;
                    final float hscroll;
                    if ((event.getMetaState() & KeyEvent.META_SHIFT_ON) != 0) {
                        vscroll = 0;
                        hscroll = event.getAxisValue(MotionEvent.AXIS_VSCROLL);
                    } else {
                        vscroll = -event.getAxisValue(MotionEvent.AXIS_VSCROLL);
                        hscroll = event.getAxisValue(MotionEvent.AXIS_HSCROLL);
                    }

                    boolean handled = false;
                    if (hscroll < 0) {
                        handled |= scrollLeft(widget, text, (int)Math.ceil(-hscroll));
                    } else if (hscroll > 0) {
                        handled |= scrollRight(widget, text, (int)Math.ceil(hscroll));
                    }
                    if (vscroll < 0) {
                        handled |= scrollUp(widget, text, (int)Math.ceil(-vscroll));
                    } else if (vscroll > 0) {
                        handled |= scrollDown(widget, text, (int)Math.ceil(vscroll));
                    }
                    return handled;
                }
            }
        }
        return false;
!!!81125303.java!!!	getMovementMetaState(inout buffer : Spannable, inout event : KeyEvent) : int
        // We ignore locked modifiers and SHIFT.
        int metaState = MetaKeyKeyListener.getMetaState(buffer, event)
                & ~(MetaKeyKeyListener.META_ALT_LOCKED | MetaKeyKeyListener.META_SYM_LOCKED);
        return KeyEvent.normalizeMetaState(metaState) & ~KeyEvent.META_SHIFT_MASK;
!!!81125431.java!!!	handleMovementKey(inout widget : TextView, inout buffer : Spannable, in keyCode : int, in movementMetaState : int, inout event : KeyEvent) : boolean
        switch (keyCode) {
            case KeyEvent.KEYCODE_DPAD_LEFT:
                if (KeyEvent.metaStateHasNoModifiers(movementMetaState)) {
                    return left(widget, buffer);
                } else if (KeyEvent.metaStateHasModifiers(movementMetaState,
                        KeyEvent.META_CTRL_ON)) {
                    return leftWord(widget, buffer);
                } else if (KeyEvent.metaStateHasModifiers(movementMetaState,
                        KeyEvent.META_ALT_ON)) {
                    return lineStart(widget, buffer);
                }
                break;

            case KeyEvent.KEYCODE_DPAD_RIGHT:
                if (KeyEvent.metaStateHasNoModifiers(movementMetaState)) {
                    return right(widget, buffer);
                } else if (KeyEvent.metaStateHasModifiers(movementMetaState,
                        KeyEvent.META_CTRL_ON)) {
                    return rightWord(widget, buffer);
                } else if (KeyEvent.metaStateHasModifiers(movementMetaState,
                        KeyEvent.META_ALT_ON)) {
                    return lineEnd(widget, buffer);
                }
                break;

            case KeyEvent.KEYCODE_DPAD_UP:
                if (KeyEvent.metaStateHasNoModifiers(movementMetaState)) {
                    return up(widget, buffer);
                } else if (KeyEvent.metaStateHasModifiers(movementMetaState,
                        KeyEvent.META_ALT_ON)) {
                    return top(widget, buffer);
                }
                break;

            case KeyEvent.KEYCODE_DPAD_DOWN:
                if (KeyEvent.metaStateHasNoModifiers(movementMetaState)) {
                    return down(widget, buffer);
                } else if (KeyEvent.metaStateHasModifiers(movementMetaState,
                        KeyEvent.META_ALT_ON)) {
                    return bottom(widget, buffer);
                }
                break;

            case KeyEvent.KEYCODE_PAGE_UP:
                if (KeyEvent.metaStateHasNoModifiers(movementMetaState)) {
                    return pageUp(widget, buffer);
                } else if (KeyEvent.metaStateHasModifiers(movementMetaState,
                        KeyEvent.META_ALT_ON)) {
                    return top(widget, buffer);
                }
                break;

            case KeyEvent.KEYCODE_PAGE_DOWN:
                if (KeyEvent.metaStateHasNoModifiers(movementMetaState)) {
                    return pageDown(widget, buffer);
                } else if (KeyEvent.metaStateHasModifiers(movementMetaState,
                        KeyEvent.META_ALT_ON)) {
                    return bottom(widget, buffer);
                }
                break;

            case KeyEvent.KEYCODE_MOVE_HOME:
                if (KeyEvent.metaStateHasNoModifiers(movementMetaState)) {
                    return home(widget, buffer);
                } else if (KeyEvent.metaStateHasModifiers(movementMetaState,
                        KeyEvent.META_CTRL_ON)) {
                    return top(widget, buffer);
                }
                break;

            case KeyEvent.KEYCODE_MOVE_END:
                if (KeyEvent.metaStateHasNoModifiers(movementMetaState)) {
                    return end(widget, buffer);
                } else if (KeyEvent.metaStateHasModifiers(movementMetaState,
                        KeyEvent.META_CTRL_ON)) {
                    return bottom(widget, buffer);
                }
                break;
        }
        return false;
!!!81125559.java!!!	left(inout widget : TextView, inout buffer : Spannable) : boolean
        return false;
!!!81125687.java!!!	right(inout widget : TextView, inout buffer : Spannable) : boolean
        return false;
!!!81125815.java!!!	up(inout widget : TextView, inout buffer : Spannable) : boolean
        return false;
!!!81125943.java!!!	down(inout widget : TextView, inout buffer : Spannable) : boolean
        return false;
!!!81126071.java!!!	pageUp(inout widget : TextView, inout buffer : Spannable) : boolean
        return false;
!!!81126199.java!!!	pageDown(inout widget : TextView, inout buffer : Spannable) : boolean
        return false;
!!!81126327.java!!!	top(inout widget : TextView, inout buffer : Spannable) : boolean
        return false;
!!!81126455.java!!!	bottom(inout widget : TextView, inout buffer : Spannable) : boolean
        return false;
!!!81126583.java!!!	lineStart(inout widget : TextView, inout buffer : Spannable) : boolean
        return false;
!!!81126711.java!!!	lineEnd(inout widget : TextView, inout buffer : Spannable) : boolean
        return false;
!!!81126839.java!!!	leftWord(inout widget : TextView, inout buffer : Spannable) : boolean
        return false;
!!!81126967.java!!!	rightWord(inout widget : TextView, inout buffer : Spannable) : boolean
        return false;
!!!81127095.java!!!	home(inout widget : TextView, inout buffer : Spannable) : boolean
        return false;
!!!81127223.java!!!	end(inout widget : TextView, inout buffer : Spannable) : boolean
        return false;
!!!81127351.java!!!	getTopLine(inout widget : TextView) : int
        return widget.getLayout().getLineForVertical(widget.getScrollY());
!!!81127479.java!!!	getBottomLine(inout widget : TextView) : int
        return widget.getLayout().getLineForVertical(widget.getScrollY() + getInnerHeight(widget));
!!!81127607.java!!!	getInnerWidth(inout widget : TextView) : int
        return widget.getWidth() - widget.getTotalPaddingLeft() - widget.getTotalPaddingRight();
!!!81127735.java!!!	getInnerHeight(inout widget : TextView) : int
        return widget.getHeight() - widget.getTotalPaddingTop() - widget.getTotalPaddingBottom();
!!!81127863.java!!!	getCharacterWidth(inout widget : TextView) : int
        return (int) Math.ceil(widget.getPaint().getFontSpacing());
!!!81127991.java!!!	getScrollBoundsLeft(inout widget : TextView) : int
        final Layout layout = widget.getLayout();
        final int topLine = getTopLine(widget);
        final int bottomLine = getBottomLine(widget);
        if (topLine > bottomLine) {
            return 0;
        }
        int left = Integer.MAX_VALUE;
        for (int line = topLine; line <= bottomLine; line++) {
            final int lineLeft = (int) Math.floor(layout.getLineLeft(line));
            if (lineLeft < left) {
                left = lineLeft;
            }
        }
        return left;
!!!81128119.java!!!	getScrollBoundsRight(inout widget : TextView) : int
        final Layout layout = widget.getLayout();
        final int topLine = getTopLine(widget);
        final int bottomLine = getBottomLine(widget);
        if (topLine > bottomLine) {
            return 0;
        }
        int right = Integer.MIN_VALUE;
        for (int line = topLine; line <= bottomLine; line++) {
            final int lineRight = (int) Math.ceil(layout.getLineRight(line));
            if (lineRight > right) {
                right = lineRight;
            }
        }
        return right;
!!!81128247.java!!!	scrollLeft(inout widget : TextView, inout buffer : Spannable, in amount : int) : boolean
        final int minScrollX = getScrollBoundsLeft(widget);
        int scrollX = widget.getScrollX();
        if (scrollX > minScrollX) {
            scrollX = Math.max(scrollX - getCharacterWidth(widget) * amount, minScrollX);
            widget.scrollTo(scrollX, widget.getScrollY());
            return true;
        }
        return false;
!!!81128375.java!!!	scrollRight(inout widget : TextView, inout buffer : Spannable, in amount : int) : boolean
        final int maxScrollX = getScrollBoundsRight(widget) - getInnerWidth(widget);
        int scrollX = widget.getScrollX();
        if (scrollX < maxScrollX) {
            scrollX = Math.min(scrollX + getCharacterWidth(widget) * amount, maxScrollX);
            widget.scrollTo(scrollX, widget.getScrollY());
            return true;
        }
        return false;
!!!81128503.java!!!	scrollUp(inout widget : TextView, inout buffer : Spannable, in amount : int) : boolean
        final Layout layout = widget.getLayout();
        final int top = widget.getScrollY();
        int topLine = layout.getLineForVertical(top);
        if (layout.getLineTop(topLine) == top) {
            // If the top line is partially visible, bring it all the way
            // into view; otherwise, bring the previous line into view.
            topLine -= 1;
        }
        if (topLine >= 0) {
            topLine = Math.max(topLine - amount + 1, 0);
            Touch.scrollTo(widget, layout, widget.getScrollX(), layout.getLineTop(topLine));
            return true;
        }
        return false;
!!!81128631.java!!!	scrollDown(inout widget : TextView, inout buffer : Spannable, in amount : int) : boolean
        final Layout layout = widget.getLayout();
        final int innerHeight = getInnerHeight(widget);
        final int bottom = widget.getScrollY() + innerHeight;
        int bottomLine = layout.getLineForVertical(bottom);
        if (layout.getLineTop(bottomLine + 1) < bottom + 1) {
            // Less than a pixel of this line is out of view,
            // so we must have tried to make it entirely in view
            // and now want the next line to be in view instead.
            bottomLine += 1;
        }
        final int limit = layout.getLineCount() - 1;
        if (bottomLine <= limit) {
            bottomLine = Math.min(bottomLine + amount - 1, limit);
            Touch.scrollTo(widget, layout, widget.getScrollX(),
                    layout.getLineTop(bottomLine + 1) - innerHeight);
            return true;
        }
        return false;
!!!81128759.java!!!	scrollPageUp(inout widget : TextView, inout buffer : Spannable) : boolean
        final Layout layout = widget.getLayout();
        final int top = widget.getScrollY() - getInnerHeight(widget);
        int topLine = layout.getLineForVertical(top);
        if (topLine >= 0) {
            Touch.scrollTo(widget, layout, widget.getScrollX(), layout.getLineTop(topLine));
            return true;
        }
        return false;
!!!81128887.java!!!	scrollPageDown(inout widget : TextView, inout buffer : Spannable) : boolean
        final Layout layout = widget.getLayout();
        final int innerHeight = getInnerHeight(widget);
        final int bottom = widget.getScrollY() + innerHeight + innerHeight;
        int bottomLine = layout.getLineForVertical(bottom);
        if (bottomLine <= layout.getLineCount() - 1) {
            Touch.scrollTo(widget, layout, widget.getScrollX(),
                    layout.getLineTop(bottomLine + 1) - innerHeight);
            return true;
        }
        return false;
!!!81129015.java!!!	scrollTop(inout widget : TextView, inout buffer : Spannable) : boolean
        final Layout layout = widget.getLayout();
        if (getTopLine(widget) >= 0) {
            Touch.scrollTo(widget, layout, widget.getScrollX(), layout.getLineTop(0));
            return true;
        }
        return false;
!!!81129143.java!!!	scrollBottom(inout widget : TextView, inout buffer : Spannable) : boolean
        final Layout layout = widget.getLayout();
        final int lineCount = layout.getLineCount();
        if (getBottomLine(widget) <= lineCount - 1) {
            Touch.scrollTo(widget, layout, widget.getScrollX(),
                    layout.getLineTop(lineCount) - getInnerHeight(widget));
            return true;
        }
        return false;
!!!81129271.java!!!	scrollLineStart(inout widget : TextView, inout buffer : Spannable) : boolean
        final int minScrollX = getScrollBoundsLeft(widget);
        int scrollX = widget.getScrollX();
        if (scrollX > minScrollX) {
            widget.scrollTo(minScrollX, widget.getScrollY());
            return true;
        }
        return false;
!!!81129399.java!!!	scrollLineEnd(inout widget : TextView, inout buffer : Spannable) : boolean
        final int maxScrollX = getScrollBoundsRight(widget) - getInnerWidth(widget);
        int scrollX = widget.getScrollX();
        if (scrollX < maxScrollX) {
            widget.scrollTo(maxScrollX, widget.getScrollY());
            return true;
        }
        return false;
