class MultiAutoCompleteTextView
!!!81225911.java!!!	MultiAutoCompleteTextView(inout context : Context)
        this(context, null);
!!!81226039.java!!!	MultiAutoCompleteTextView(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, com.android.internal.R.attr.autoCompleteTextViewStyle);
!!!81226167.java!!!	MultiAutoCompleteTextView(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int)
        this(context, attrs, defStyleAttr, 0);
!!!81226295.java!!!	MultiAutoCompleteTextView(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int, in defStyleRes : int)
        super(context, attrs, defStyleAttr, defStyleRes);
!!!81226551.java!!!	setTokenizer(inout t : MultiAutoCompleteTextView::Tokenizer) : void
        mTokenizer = t;
!!!81226679.java!!!	performFiltering(inout text : CharSequence, in keyCode : int) : void
        if (enoughToFilter()) {
            int end = getSelectionEnd();
            int start = mTokenizer.findTokenStart(text, end);

            performFiltering(text, start, end, keyCode);
        } else {
            dismissDropDown();

            Filter f = getFilter();
            if (f != null) {
                f.filter(null);
            }
        }
!!!81226807.java!!!	enoughToFilter() : boolean
        Editable text = getText();

        int end = getSelectionEnd();
        if (end < 0 || mTokenizer == null) {
            return false;
        }

        int start = mTokenizer.findTokenStart(text, end);

        if (end - start >= getThreshold()) {
            return true;
        } else {
            return false;
        }
!!!81226935.java!!!	performValidation() : void
        Validator v = getValidator();

        if (v == null || mTokenizer == null) {
            return;
        }

        Editable e = getText();
        int i = getText().length();
        while (i > 0) {
            int start = mTokenizer.findTokenStart(e, i);
            int end = mTokenizer.findTokenEnd(e, start);

            CharSequence sub = e.subSequence(start, end);
            if (TextUtils.isEmpty(sub)) {
                e.replace(start, i, "");
            } else if (!v.isValid(sub)) {
                e.replace(start, i,
                          mTokenizer.terminateToken(v.fixText(sub)));
            }

            i = start;
        }
!!!81227063.java!!!	performFiltering(inout text : CharSequence, in start : int, in end : int, in keyCode : int) : void
        getFilter().filter(text.subSequence(start, end), this);
!!!81227191.java!!!	replaceText(inout text : CharSequence) : void
        clearComposingText();

        int end = getSelectionEnd();
        int start = mTokenizer.findTokenStart(getText(), end);

        Editable editable = getText();
        String original = TextUtils.substring(editable, start, end);

        QwertyKeyListener.markAsReplaced(editable, start, end, original);
        editable.replace(start, end, mTokenizer.terminateToken(text));
!!!81227319.java!!!	getAccessibilityClassName() : CharSequence
        return MultiAutoCompleteTextView.class.getName();
