class ByteBufferDataSource
!!!81376823.java!!!	ByteBufferDataSource(inout buf : ByteBuffer)
            // Defensive copy, to avoid changes to mBuf being visible in buf.
            mBuf = buf.slice();
!!!81376951.java!!!	size() : long
            return mBuf.capacity();
!!!81377079.java!!!	feedIntoMessageDigests(inout mds : MessageDigest [[]], in offset : long, in size : int) : void
            // There's no way to tell MessageDigest to read data from ByteBuffer from a position
            // other than the buffer's current position. We thus need to change the buffer's
            // position to match the requested offset.
            //
            // In the future, it may be necessary to compute digests of multiple regions in
            // parallel. Given that digest computation is a slow operation, we enable multiple
            // such requests to be fulfilled by this instance. This is achieved by serially
            // creating a new ByteBuffer corresponding to the requested data range and then,
            // potentially concurrently, feeding these buffers into MessageDigest instances.
            ByteBuffer region;
            synchronized (mBuf) {
                mBuf.position((int) offset);
                mBuf.limit((int) offset + size);
                region = mBuf.slice();
            }

            for (MessageDigest md : mds) {
                // Need to reset position to 0 at the start of each iteration because
                // MessageDigest.update below sets it to the buffer's limit.
                region.position(0);
                md.update(region);
            }
