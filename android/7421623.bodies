class SpellCheckerSubtype
!!!81898807.java!!!	SpellCheckerSubtype(in nameId : int, inout locale : String, inout languageTag : String, inout extraValue : String, in subtypeId : int)
        mSubtypeNameResId = nameId;
        mSubtypeLocale = locale != null ? locale : "";
        mSubtypeLanguageTag = languageTag != null ? languageTag : SUBTYPE_LANGUAGE_TAG_NONE;
        mSubtypeExtraValue = extraValue != null ? extraValue : "";
        mSubtypeId = subtypeId;
        mSubtypeHashCode = mSubtypeId != SUBTYPE_ID_NONE ?
                mSubtypeId : hashCodeInternal(mSubtypeLocale, mSubtypeExtraValue);
!!!81898935.java!!!	SpellCheckerSubtype(in nameId : int, inout locale : String, inout extraValue : String)
        this(nameId, locale, SUBTYPE_LANGUAGE_TAG_NONE, extraValue, SUBTYPE_ID_NONE);
!!!81899063.java!!!	SpellCheckerSubtype(inout source : Parcel)
        String s;
        mSubtypeNameResId = source.readInt();
        s = source.readString();
        mSubtypeLocale = s != null ? s : "";
        s = source.readString();
        mSubtypeLanguageTag = s != null ? s : "";
        s = source.readString();
        mSubtypeExtraValue = s != null ? s : "";
        mSubtypeId = source.readInt();
        mSubtypeHashCode = mSubtypeId != SUBTYPE_ID_NONE ?
                mSubtypeId : hashCodeInternal(mSubtypeLocale, mSubtypeExtraValue);
!!!81899191.java!!!	getNameResId() : int
        return mSubtypeNameResId;
!!!81899319.java!!!	getLocale() : String
        return mSubtypeLocale;
!!!81899447.java!!!	getLanguageTag() : String
        return mSubtypeLanguageTag;
!!!81899575.java!!!	getExtraValue() : String
        return mSubtypeExtraValue;
!!!81899703.java!!!	getExtraValueHashMap() : String
        if (mExtraValueHashMapCache == null) {
            mExtraValueHashMapCache = new HashMap<String, String>();
            final String[] pairs = mSubtypeExtraValue.split(EXTRA_VALUE_PAIR_SEPARATOR);
            final int N = pairs.length;
            for (int i = 0; i < N; ++i) {
                final String[] pair = pairs[i].split(EXTRA_VALUE_KEY_VALUE_SEPARATOR);
                if (pair.length == 1) {
                    mExtraValueHashMapCache.put(pair[0], null);
                } else if (pair.length > 1) {
                    if (pair.length > 2) {
                        Slog.w(TAG, "ExtraValue has two or more '='s");
                    }
                    mExtraValueHashMapCache.put(pair[0], pair[1]);
                }
            }
        }
        return mExtraValueHashMapCache;
!!!81899831.java!!!	containsExtraValueKey(inout key : String) : boolean
        return getExtraValueHashMap().containsKey(key);
!!!81899959.java!!!	getExtraValueOf(inout key : String) : String
        return getExtraValueHashMap().get(key);
!!!81900087.java!!!	hashCode() : int
        return mSubtypeHashCode;
!!!81900215.java!!!	equals(inout o : Object) : boolean
        if (o instanceof SpellCheckerSubtype) {
            SpellCheckerSubtype subtype = (SpellCheckerSubtype) o;
            if (subtype.mSubtypeId != SUBTYPE_ID_NONE || mSubtypeId != SUBTYPE_ID_NONE) {
                return (subtype.hashCode() == hashCode());
            }
            return (subtype.hashCode() == hashCode())
                    && (subtype.getNameResId() == getNameResId())
                    && (subtype.getLocale().equals(getLocale()))
                    && (subtype.getLanguageTag().equals(getLanguageTag()))
                    && (subtype.getExtraValue().equals(getExtraValue()));
        }
        return false;
!!!81900343.java!!!	getLocaleObject() : Locale
        if (!TextUtils.isEmpty(mSubtypeLanguageTag)) {
            return Locale.forLanguageTag(mSubtypeLanguageTag);
        }
        return InputMethodUtils.constructLocaleFromString(mSubtypeLocale);
!!!81900471.java!!!	getDisplayName(inout context : Context, inout packageName : String, inout appInfo : ApplicationInfo) : CharSequence
        final Locale locale = getLocaleObject();
        final String localeStr = locale != null ? locale.getDisplayName() : mSubtypeLocale;
        if (mSubtypeNameResId == 0) {
            return localeStr;
        }
        final CharSequence subtypeName = context.getPackageManager().getText(
                packageName, mSubtypeNameResId, appInfo);
        if (!TextUtils.isEmpty(subtypeName)) {
            return String.format(subtypeName.toString(), localeStr);
        } else {
            return localeStr;
        }
!!!81900599.java!!!	describeContents() : int
        return 0;
!!!81900727.java!!!	writeToParcel(inout dest : Parcel, in parcelableFlags : int) : void
        dest.writeInt(mSubtypeNameResId);
        dest.writeString(mSubtypeLocale);
        dest.writeString(mSubtypeLanguageTag);
        dest.writeString(mSubtypeExtraValue);
        dest.writeInt(mSubtypeId);
!!!81900855.java!!!	hashCodeInternal(inout locale : String, inout extraValue : String) : int
        return Arrays.hashCode(new Object[] {locale, extraValue});
!!!81900983.java!!!	sort(inout context : Context, in flags : int, inout sci : SpellCheckerInfo, inout subtypeList : List<SpellCheckerSubtype>) : SpellCheckerSubtype
        if (sci == null) return subtypeList;
        final HashSet<SpellCheckerSubtype> subtypesSet = new HashSet<SpellCheckerSubtype>(
                subtypeList);
        final ArrayList<SpellCheckerSubtype> sortedList = new ArrayList<SpellCheckerSubtype>();
        int N = sci.getSubtypeCount();
        for (int i = 0; i < N; ++i) {
            SpellCheckerSubtype subtype = sci.getSubtypeAt(i);
            if (subtypesSet.contains(subtype)) {
                sortedList.add(subtype);
                subtypesSet.remove(subtype);
            }
        }
        // If subtypes in subtypesSet remain, that means these subtypes are not
        // contained in sci, so the remaining subtypes will be appended.
        for (SpellCheckerSubtype subtype: subtypesSet) {
            sortedList.add(subtype);
        }
        return sortedList;
