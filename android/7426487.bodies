class JsDialogHelper
!!!81924279.java!!!	JsDialogHelper(inout result : JsPromptResult, in type : int, inout defaultValue : String, inout message : String, inout url : String)
        mResult = result;
        mDefaultValue = defaultValue;
        mMessage = message;
        mType = type;
        mUrl = url;
!!!81924407.java!!!	JsDialogHelper(inout result : JsPromptResult, inout msg : Message)
        mResult = result;
        mDefaultValue = msg.getData().getString("default");
        mMessage = msg.getData().getString("message");
        mType = msg.getData().getInt("type");
        mUrl = msg.getData().getString("url");
!!!81924535.java!!!	invokeCallback(inout client : WebChromeClient, inout webView : WebView) : boolean
        switch (mType) {
            case ALERT:
                return client.onJsAlert(webView, mUrl, mMessage, mResult);
            case CONFIRM:
                return client.onJsConfirm(webView, mUrl, mMessage, mResult);
            case UNLOAD:
                return client.onJsBeforeUnload(webView, mUrl, mMessage, mResult);
            case PROMPT:
                return client.onJsPrompt(webView, mUrl, mMessage, mDefaultValue, mResult);
            default:
                throw new IllegalArgumentException("Unexpected type: " + mType);
        }
!!!81924663.java!!!	showDialog(inout context : Context) : void
        if (!canShowAlertDialog(context)) {
            Log.w(TAG, "Cannot create a dialog, the WebView context is not an Activity");
            mResult.cancel();
            return;
        }

        String title, displayMessage;
        int positiveTextId, negativeTextId;
        if (mType == UNLOAD) {
            title = context.getString(com.android.internal.R.string.js_dialog_before_unload_title);
            displayMessage = context.getString(
                    com.android.internal.R.string.js_dialog_before_unload, mMessage);
            positiveTextId = com.android.internal.R.string.js_dialog_before_unload_positive_button;
            negativeTextId = com.android.internal.R.string.js_dialog_before_unload_negative_button;
        } else {
            title = getJsDialogTitle(context);
            displayMessage = mMessage;
            positiveTextId = com.android.internal.R.string.ok;
            negativeTextId = com.android.internal.R.string.cancel;
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(context);
        builder.setTitle(title);
        builder.setOnCancelListener(new CancelListener());
        if (mType != PROMPT) {
            builder.setMessage(displayMessage);
            builder.setPositiveButton(positiveTextId, new PositiveListener(null));
        } else {
            final View view = LayoutInflater.from(context).inflate(
                    com.android.internal.R.layout.js_prompt, null);
            EditText edit = ((EditText) view.findViewById(com.android.internal.R.id.value));
            edit.setText(mDefaultValue);
            builder.setPositiveButton(positiveTextId, new PositiveListener(edit));
            ((TextView) view.findViewById(com.android.internal.R.id.message)).setText(mMessage);
            builder.setView(view);
        }
        if (mType != ALERT) {
            builder.setNegativeButton(negativeTextId, new CancelListener());
        }
        builder.show();
!!!81925303.java!!!	getJsDialogTitle(inout context : Context) : String
        String title = mUrl;
        if (URLUtil.isDataUrl(mUrl)) {
            // For data: urls, we just display 'JavaScript' similar to Chrome.
            title = context.getString(com.android.internal.R.string.js_dialog_title_default);
        } else {
            try {
                URL alertUrl = new URL(mUrl);
                // For example: "The page at 'http://www.mit.edu' says:"
                title = context.getString(com.android.internal.R.string.js_dialog_title,
                        alertUrl.getProtocol() + "://" + alertUrl.getHost());
            } catch (MalformedURLException ex) {
                // do nothing. just use the url as the title
            }
        }
        return title;
!!!81925431.java!!!	canShowAlertDialog(inout context : Context) : boolean
        // We can only display the alert dialog if mContext is
        // an Activity context.
        // FIXME: Should we display dialogs if mContext does
        // not have the window focus (e.g. if the user is viewing
        // another Activity when the alert should be displayed) ?
        // See bug 3166409
        return context instanceof Activity;
