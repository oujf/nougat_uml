class DayPickerPagerAdapter
!!!82110775.java!!!	DayPickerPagerAdapter(inout context : Context, in layoutResId : int, in calendarViewId : int)
        mInflater = LayoutInflater.from(context);
        mLayoutResId = layoutResId;
        mCalendarViewId = calendarViewId;

        final TypedArray ta = context.obtainStyledAttributes(new int[] {
                com.android.internal.R.attr.colorControlHighlight});
        mDayHighlightColor = ta.getColorStateList(0);
        ta.recycle();
!!!82110903.java!!!	setRange(inout min : Calendar, inout max : Calendar) : void
        mMinDate.setTimeInMillis(min.getTimeInMillis());
        mMaxDate.setTimeInMillis(max.getTimeInMillis());

        final int diffYear = mMaxDate.get(Calendar.YEAR) - mMinDate.get(Calendar.YEAR);
        final int diffMonth = mMaxDate.get(Calendar.MONTH) - mMinDate.get(Calendar.MONTH);
        mCount = diffMonth + MONTHS_IN_YEAR * diffYear + 1;

        // Positions are now invalid, clear everything and start over.
        notifyDataSetChanged();
!!!82111031.java!!!	setFirstDayOfWeek(in weekStart : int) : void
        mFirstDayOfWeek = weekStart;

        // Update displayed views.
        final int count = mItems.size();
        for (int i = 0; i < count; i++) {
            final SimpleMonthView monthView = mItems.valueAt(i).calendar;
            monthView.setFirstDayOfWeek(weekStart);
        }
!!!82111159.java!!!	getFirstDayOfWeek() : int
        return mFirstDayOfWeek;
!!!82111287.java!!!	setSelectedDay(inout day : Calendar) : void
        final int oldPosition = getPositionForDay(mSelectedDay);
        final int newPosition = getPositionForDay(day);

        // Clear the old position if necessary.
        if (oldPosition != newPosition && oldPosition >= 0) {
            final ViewHolder oldMonthView = mItems.get(oldPosition, null);
            if (oldMonthView != null) {
                oldMonthView.calendar.setSelectedDay(-1);
            }
        }

        // Set the new position.
        if (newPosition >= 0) {
            final ViewHolder newMonthView = mItems.get(newPosition, null);
            if (newMonthView != null) {
                final int dayOfMonth = day.get(Calendar.DAY_OF_MONTH);
                newMonthView.calendar.setSelectedDay(dayOfMonth);
            }
        }

        mSelectedDay = day;
!!!82111415.java!!!	setOnDaySelectedListener(inout listener : DayPickerPagerAdapter::OnDaySelectedListener) : void
        mOnDaySelectedListener = listener;
!!!82111543.java!!!	setCalendarTextColor(inout calendarTextColor : ColorStateList) : void
        mCalendarTextColor = calendarTextColor;
        notifyDataSetChanged();
!!!82111671.java!!!	setDaySelectorColor(inout selectorColor : ColorStateList) : void
        mDaySelectorColor = selectorColor;
        notifyDataSetChanged();
!!!82111799.java!!!	setMonthTextAppearance(in resId : int) : void
        mMonthTextAppearance = resId;
        notifyDataSetChanged();
!!!82111927.java!!!	setDayOfWeekTextAppearance(in resId : int) : void
        mDayOfWeekTextAppearance = resId;
        notifyDataSetChanged();
!!!82112055.java!!!	getDayOfWeekTextAppearance() : int
        return mDayOfWeekTextAppearance;
!!!82112183.java!!!	setDayTextAppearance(in resId : int) : void
        mDayTextAppearance = resId;
        notifyDataSetChanged();
!!!82112311.java!!!	getDayTextAppearance() : int
        return mDayTextAppearance;
!!!82112439.java!!!	getCount() : int
        return mCount;
!!!82112567.java!!!	isViewFromObject(inout view : View, inout object : Object) : boolean
        final ViewHolder holder = (ViewHolder) object;
        return view == holder.container;
!!!82112695.java!!!	getMonthForPosition(in position : int) : int
        return (position + mMinDate.get(Calendar.MONTH)) % MONTHS_IN_YEAR;
!!!82112823.java!!!	getYearForPosition(in position : int) : int
        final int yearOffset = (position + mMinDate.get(Calendar.MONTH)) / MONTHS_IN_YEAR;
        return yearOffset + mMinDate.get(Calendar.YEAR);
!!!82112951.java!!!	getPositionForDay(inout day : Calendar) : int
        if (day == null) {
            return -1;
        }

        final int yearOffset = day.get(Calendar.YEAR) - mMinDate.get(Calendar.YEAR);
        final int monthOffset = day.get(Calendar.MONTH) - mMinDate.get(Calendar.MONTH);
        final int position = yearOffset * MONTHS_IN_YEAR + monthOffset;
        return position;
!!!82113079.java!!!	instantiateItem(inout container : ViewGroup, in position : int) : Object
        final View itemView = mInflater.inflate(mLayoutResId, container, false);

        final SimpleMonthView v = (SimpleMonthView) itemView.findViewById(mCalendarViewId);
        v.setOnDayClickListener(mOnDayClickListener);
        v.setMonthTextAppearance(mMonthTextAppearance);
        v.setDayOfWeekTextAppearance(mDayOfWeekTextAppearance);
        v.setDayTextAppearance(mDayTextAppearance);

        if (mDaySelectorColor != null) {
            v.setDaySelectorColor(mDaySelectorColor);
        }

        if (mDayHighlightColor != null) {
            v.setDayHighlightColor(mDayHighlightColor);
        }

        if (mCalendarTextColor != null) {
            v.setMonthTextColor(mCalendarTextColor);
            v.setDayOfWeekTextColor(mCalendarTextColor);
            v.setDayTextColor(mCalendarTextColor);
        }

        final int month = getMonthForPosition(position);
        final int year = getYearForPosition(position);

        final int selectedDay;
        if (mSelectedDay != null && mSelectedDay.get(Calendar.MONTH) == month) {
            selectedDay = mSelectedDay.get(Calendar.DAY_OF_MONTH);
        } else {
            selectedDay = -1;
        }

        final int enabledDayRangeStart;
        if (mMinDate.get(Calendar.MONTH) == month && mMinDate.get(Calendar.YEAR) == year) {
            enabledDayRangeStart = mMinDate.get(Calendar.DAY_OF_MONTH);
        } else {
            enabledDayRangeStart = 1;
        }

        final int enabledDayRangeEnd;
        if (mMaxDate.get(Calendar.MONTH) == month && mMaxDate.get(Calendar.YEAR) == year) {
            enabledDayRangeEnd = mMaxDate.get(Calendar.DAY_OF_MONTH);
        } else {
            enabledDayRangeEnd = 31;
        }

        v.setMonthParams(selectedDay, month, year, mFirstDayOfWeek,
                enabledDayRangeStart, enabledDayRangeEnd);

        final ViewHolder holder = new ViewHolder(position, itemView, v);
        mItems.put(position, holder);

        container.addView(itemView);

        return holder;
!!!82113207.java!!!	destroyItem(inout container : ViewGroup, in position : int, inout object : Object) : void
        final ViewHolder holder = (ViewHolder) object;
        container.removeView(holder.container);

        mItems.remove(position);
!!!82113335.java!!!	getItemPosition(inout object : Object) : int
        final ViewHolder holder = (ViewHolder) object;
        return holder.position;
!!!82113463.java!!!	getPageTitle(in position : int) : CharSequence
        final SimpleMonthView v = mItems.get(position).calendar;
        if (v != null) {
            return v.getMonthYearLabel();
        }
        return null;
!!!82113591.java!!!	getView(inout object : Object) : SimpleMonthView
        if (object == null) {
            return null;
        }
        final ViewHolder holder = (ViewHolder) object;
        return holder.calendar;
