class RemoteViewsMetaData
!!!82288439.java!!!	RemoteViewsMetaData()
            reset();
!!!82288567.java!!!	set(inout d : RemoteViewsAdapter::RemoteViewsMetaData) : void
            synchronized (d) {
                count = d.count;
                viewTypeCount = d.viewTypeCount;
                hasStableIds = d.hasStableIds;
                setLoadingViewTemplates(d.mUserLoadingView, d.mFirstView);
            }
!!!82288695.java!!!	reset() : void
            count = 0;

            // by default there is at least one dummy view type
            viewTypeCount = 1;
            hasStableIds = true;
            mUserLoadingView = null;
            mFirstView = null;
            mFirstViewHeight = 0;
            mTypeIdIndexMap.clear();
!!!82288823.java!!!	setLoadingViewTemplates(inout loadingView : RemoteViews, inout firstView : RemoteViews) : void
            mUserLoadingView = loadingView;
            if (firstView != null) {
                mFirstView = firstView;
                mFirstViewHeight = -1;
            }
!!!82288951.java!!!	getMappedViewType(in typeId : int) : int
            int mappedTypeId = mTypeIdIndexMap.get(typeId, -1);
            if (mappedTypeId == -1) {
                // We +1 because the loading view always has view type id of 0
                mappedTypeId = mTypeIdIndexMap.size() + 1;
                mTypeIdIndexMap.put(typeId, mappedTypeId);
            }
            return mappedTypeId;
!!!82289079.java!!!	isViewTypeInRange(in typeId : int) : boolean
            int mappedType = getMappedViewType(typeId);
            return (mappedType < viewTypeCount);
!!!82289207.java!!!	createDefaultLoadingView(inout parent : ViewGroup) : View
            final Context context = parent.getContext();
            if (mFirstViewHeight < 0) {
                try {
                    View firstView = mFirstView.apply(parent.getContext(), parent);
                    firstView.measure(
                            MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED),
                            MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED));
                    mFirstViewHeight = firstView.getMeasuredHeight();
                } catch (Exception e) {
                    float density = context.getResources().getDisplayMetrics().density;
                    mFirstViewHeight = Math.round(sDefaultLoadingViewHeight * density);
                    Log.w(TAG, "Error inflating first RemoteViews" + e);
                }
                mFirstView = null;
            }

            // Compose the loading view text
            TextView loadingTextView = (TextView) LayoutInflater.from(context).inflate(
                    com.android.internal.R.layout.remote_views_adapter_default_loading_view,
                    parent, false);
            loadingTextView.setHeight(mFirstViewHeight);
            return loadingTextView;
