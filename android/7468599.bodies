class ViewFlipper
!!!82413751.java!!!	ViewFlipper(inout context : Context)
        super(context);
!!!82413879.java!!!	ViewFlipper(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);

        TypedArray a = context.obtainStyledAttributes(attrs,
                com.android.internal.R.styleable.ViewFlipper);
        mFlipInterval = a.getInt(
                com.android.internal.R.styleable.ViewFlipper_flipInterval, DEFAULT_INTERVAL);
        mAutoStart = a.getBoolean(
                com.android.internal.R.styleable.ViewFlipper_autoStart, false);
        a.recycle();
!!!82414007.java!!!	onAttachedToWindow() : void
        super.onAttachedToWindow();

        // Listen for broadcasts related to user-presence
        final IntentFilter filter = new IntentFilter();
        filter.addAction(Intent.ACTION_SCREEN_OFF);
        filter.addAction(Intent.ACTION_USER_PRESENT);

        // OK, this is gross but needed. This class is supported by the
        // remote views machanism and as a part of that the remote views
        // can be inflated by a context for another user without the app
        // having interact users permission - just for loading resources.
        // For exmaple, when adding widgets from a user profile to the
        // home screen. Therefore, we register the receiver as the current
        // user not the one the context is for.
        getContext().registerReceiverAsUser(mReceiver, android.os.Process.myUserHandle(),
                filter, null, getHandler());

        if (mAutoStart) {
            // Automatically start when requested
            startFlipping();
        }
!!!82414135.java!!!	onDetachedFromWindow() : void
        super.onDetachedFromWindow();
        mVisible = false;

        getContext().unregisterReceiver(mReceiver);
        updateRunning();
!!!82414263.java!!!	onWindowVisibilityChanged(in visibility : int) : void
        super.onWindowVisibilityChanged(visibility);
        mVisible = visibility == VISIBLE;
        updateRunning(false);
!!!82414391.java!!!	setFlipInterval(in milliseconds : int) : void
        mFlipInterval = milliseconds;
!!!82414519.java!!!	startFlipping() : void
        mStarted = true;
        updateRunning();
!!!82414647.java!!!	stopFlipping() : void
        mStarted = false;
        updateRunning();
!!!82414775.java!!!	getAccessibilityClassName() : CharSequence
        return ViewFlipper.class.getName();
!!!82414903.java!!!	updateRunning() : void
        updateRunning(true);
!!!82415031.java!!!	updateRunning(inout flipNow : boolean) : void
        boolean running = mVisible && mStarted && mUserPresent;
        if (running != mRunning) {
            if (running) {
                showOnly(mWhichChild, flipNow);
                postDelayed(mFlipRunnable, mFlipInterval);
            } else {
                removeCallbacks(mFlipRunnable);
            }
            mRunning = running;
        }
        if (LOGD) {
            Log.d(TAG, "updateRunning() mVisible=" + mVisible + ", mStarted=" + mStarted
                    + ", mUserPresent=" + mUserPresent + ", mRunning=" + mRunning);
        }
!!!82415159.java!!!	isFlipping() : boolean
        return mStarted;
!!!82415287.java!!!	setAutoStart(inout autoStart : boolean) : void
        mAutoStart = autoStart;
!!!82415415.java!!!	isAutoStart() : boolean
        return mAutoStart;
