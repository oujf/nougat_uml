class Stub
!!!82460855.java!!!	Stub()
this.attachInterface(this, DESCRIPTOR);
!!!82460983.java!!!	asInterface(inout obj : IBinder) : IVoiceInteractionManagerService
if ((obj==null)) {
return null;
}
android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);
if (((iin!=null)&&(iin instanceof com.android.internal.app.IVoiceInteractionManagerService))) {
return ((com.android.internal.app.IVoiceInteractionManagerService)iin);
}
return new com.android.internal.app.IVoiceInteractionManagerService.Stub.Proxy(obj);
!!!82461111.java!!!	asBinder() : IBinder
return this;
!!!82461239.java!!!	onTransact(in code : int, inout data : Parcel, inout reply : Parcel, in flags : int) : boolean
switch (code)
{
case INTERFACE_TRANSACTION:
{
reply.writeString(DESCRIPTOR);
return true;
}
case TRANSACTION_showSession:
{
data.enforceInterface(DESCRIPTOR);
android.service.voice.IVoiceInteractionService _arg0;
_arg0 = android.service.voice.IVoiceInteractionService.Stub.asInterface(data.readStrongBinder());
android.os.Bundle _arg1;
if ((0!=data.readInt())) {
_arg1 = android.os.Bundle.CREATOR.createFromParcel(data);
}
else {
_arg1 = null;
}
int _arg2;
_arg2 = data.readInt();
this.showSession(_arg0, _arg1, _arg2);
reply.writeNoException();
return true;
}
case TRANSACTION_deliverNewSession:
{
data.enforceInterface(DESCRIPTOR);
android.os.IBinder _arg0;
_arg0 = data.readStrongBinder();
android.service.voice.IVoiceInteractionSession _arg1;
_arg1 = android.service.voice.IVoiceInteractionSession.Stub.asInterface(data.readStrongBinder());
com.android.internal.app.IVoiceInteractor _arg2;
_arg2 = com.android.internal.app.IVoiceInteractor.Stub.asInterface(data.readStrongBinder());
boolean _result = this.deliverNewSession(_arg0, _arg1, _arg2);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_showSessionFromSession:
{
data.enforceInterface(DESCRIPTOR);
android.os.IBinder _arg0;
_arg0 = data.readStrongBinder();
android.os.Bundle _arg1;
if ((0!=data.readInt())) {
_arg1 = android.os.Bundle.CREATOR.createFromParcel(data);
}
else {
_arg1 = null;
}
int _arg2;
_arg2 = data.readInt();
boolean _result = this.showSessionFromSession(_arg0, _arg1, _arg2);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_hideSessionFromSession:
{
data.enforceInterface(DESCRIPTOR);
android.os.IBinder _arg0;
_arg0 = data.readStrongBinder();
boolean _result = this.hideSessionFromSession(_arg0);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_startVoiceActivity:
{
data.enforceInterface(DESCRIPTOR);
android.os.IBinder _arg0;
_arg0 = data.readStrongBinder();
android.content.Intent _arg1;
if ((0!=data.readInt())) {
_arg1 = android.content.Intent.CREATOR.createFromParcel(data);
}
else {
_arg1 = null;
}
java.lang.String _arg2;
_arg2 = data.readString();
int _result = this.startVoiceActivity(_arg0, _arg1, _arg2);
reply.writeNoException();
reply.writeInt(_result);
return true;
}
case TRANSACTION_setKeepAwake:
{
data.enforceInterface(DESCRIPTOR);
android.os.IBinder _arg0;
_arg0 = data.readStrongBinder();
boolean _arg1;
_arg1 = (0!=data.readInt());
this.setKeepAwake(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_closeSystemDialogs:
{
data.enforceInterface(DESCRIPTOR);
android.os.IBinder _arg0;
_arg0 = data.readStrongBinder();
this.closeSystemDialogs(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_finish:
{
data.enforceInterface(DESCRIPTOR);
android.os.IBinder _arg0;
_arg0 = data.readStrongBinder();
this.finish(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_setDisabledShowContext:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
this.setDisabledShowContext(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_getDisabledShowContext:
{
data.enforceInterface(DESCRIPTOR);
int _result = this.getDisabledShowContext();
reply.writeNoException();
reply.writeInt(_result);
return true;
}
case TRANSACTION_getUserDisabledShowContext:
{
data.enforceInterface(DESCRIPTOR);
int _result = this.getUserDisabledShowContext();
reply.writeNoException();
reply.writeInt(_result);
return true;
}
case TRANSACTION_getKeyphraseSoundModel:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
java.lang.String _arg1;
_arg1 = data.readString();
android.hardware.soundtrigger.SoundTrigger.KeyphraseSoundModel _result = this.getKeyphraseSoundModel(_arg0, _arg1);
reply.writeNoException();
if ((_result!=null)) {
reply.writeInt(1);
_result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
case TRANSACTION_updateKeyphraseSoundModel:
{
data.enforceInterface(DESCRIPTOR);
android.hardware.soundtrigger.SoundTrigger.KeyphraseSoundModel _arg0;
if ((0!=data.readInt())) {
_arg0 = android.hardware.soundtrigger.SoundTrigger.KeyphraseSoundModel.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
int _result = this.updateKeyphraseSoundModel(_arg0);
reply.writeNoException();
reply.writeInt(_result);
return true;
}
case TRANSACTION_deleteKeyphraseSoundModel:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
java.lang.String _arg1;
_arg1 = data.readString();
int _result = this.deleteKeyphraseSoundModel(_arg0, _arg1);
reply.writeNoException();
reply.writeInt(_result);
return true;
}
case TRANSACTION_getDspModuleProperties:
{
data.enforceInterface(DESCRIPTOR);
android.service.voice.IVoiceInteractionService _arg0;
_arg0 = android.service.voice.IVoiceInteractionService.Stub.asInterface(data.readStrongBinder());
android.hardware.soundtrigger.SoundTrigger.ModuleProperties _result = this.getDspModuleProperties(_arg0);
reply.writeNoException();
if ((_result!=null)) {
reply.writeInt(1);
_result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
case TRANSACTION_isEnrolledForKeyphrase:
{
data.enforceInterface(DESCRIPTOR);
android.service.voice.IVoiceInteractionService _arg0;
_arg0 = android.service.voice.IVoiceInteractionService.Stub.asInterface(data.readStrongBinder());
int _arg1;
_arg1 = data.readInt();
java.lang.String _arg2;
_arg2 = data.readString();
boolean _result = this.isEnrolledForKeyphrase(_arg0, _arg1, _arg2);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_startRecognition:
{
data.enforceInterface(DESCRIPTOR);
android.service.voice.IVoiceInteractionService _arg0;
_arg0 = android.service.voice.IVoiceInteractionService.Stub.asInterface(data.readStrongBinder());
int _arg1;
_arg1 = data.readInt();
java.lang.String _arg2;
_arg2 = data.readString();
android.hardware.soundtrigger.IRecognitionStatusCallback _arg3;
_arg3 = android.hardware.soundtrigger.IRecognitionStatusCallback.Stub.asInterface(data.readStrongBinder());
android.hardware.soundtrigger.SoundTrigger.RecognitionConfig _arg4;
if ((0!=data.readInt())) {
_arg4 = android.hardware.soundtrigger.SoundTrigger.RecognitionConfig.CREATOR.createFromParcel(data);
}
else {
_arg4 = null;
}
int _result = this.startRecognition(_arg0, _arg1, _arg2, _arg3, _arg4);
reply.writeNoException();
reply.writeInt(_result);
return true;
}
case TRANSACTION_stopRecognition:
{
data.enforceInterface(DESCRIPTOR);
android.service.voice.IVoiceInteractionService _arg0;
_arg0 = android.service.voice.IVoiceInteractionService.Stub.asInterface(data.readStrongBinder());
int _arg1;
_arg1 = data.readInt();
android.hardware.soundtrigger.IRecognitionStatusCallback _arg2;
_arg2 = android.hardware.soundtrigger.IRecognitionStatusCallback.Stub.asInterface(data.readStrongBinder());
int _result = this.stopRecognition(_arg0, _arg1, _arg2);
reply.writeNoException();
reply.writeInt(_result);
return true;
}
case TRANSACTION_getActiveServiceComponentName:
{
data.enforceInterface(DESCRIPTOR);
android.content.ComponentName _result = this.getActiveServiceComponentName();
reply.writeNoException();
if ((_result!=null)) {
reply.writeInt(1);
_result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
case TRANSACTION_showSessionForActiveService:
{
data.enforceInterface(DESCRIPTOR);
android.os.Bundle _arg0;
if ((0!=data.readInt())) {
_arg0 = android.os.Bundle.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
int _arg1;
_arg1 = data.readInt();
com.android.internal.app.IVoiceInteractionSessionShowCallback _arg2;
_arg2 = com.android.internal.app.IVoiceInteractionSessionShowCallback.Stub.asInterface(data.readStrongBinder());
android.os.IBinder _arg3;
_arg3 = data.readStrongBinder();
boolean _result = this.showSessionForActiveService(_arg0, _arg1, _arg2, _arg3);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_hideCurrentSession:
{
data.enforceInterface(DESCRIPTOR);
this.hideCurrentSession();
reply.writeNoException();
return true;
}
case TRANSACTION_launchVoiceAssistFromKeyguard:
{
data.enforceInterface(DESCRIPTOR);
this.launchVoiceAssistFromKeyguard();
reply.writeNoException();
return true;
}
case TRANSACTION_isSessionRunning:
{
data.enforceInterface(DESCRIPTOR);
boolean _result = this.isSessionRunning();
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_activeServiceSupportsAssist:
{
data.enforceInterface(DESCRIPTOR);
boolean _result = this.activeServiceSupportsAssist();
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_activeServiceSupportsLaunchFromKeyguard:
{
data.enforceInterface(DESCRIPTOR);
boolean _result = this.activeServiceSupportsLaunchFromKeyguard();
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_onLockscreenShown:
{
data.enforceInterface(DESCRIPTOR);
this.onLockscreenShown();
reply.writeNoException();
return true;
}
case TRANSACTION_registerVoiceInteractionSessionListener:
{
data.enforceInterface(DESCRIPTOR);
com.android.internal.app.IVoiceInteractionSessionListener _arg0;
_arg0 = com.android.internal.app.IVoiceInteractionSessionListener.Stub.asInterface(data.readStrongBinder());
this.registerVoiceInteractionSessionListener(_arg0);
reply.writeNoException();
return true;
}
}
return super.onTransact(code, data, reply, flags);
