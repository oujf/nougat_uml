class ControllerMonitor
!!!82599351.java!!!	ControllerMonitor(inout controller : ISessionController)
            mController = controller;
!!!82599479.java!!!	onSessionDestroyed() : void
            System.out.println("onSessionDestroyed. Enter q to quit.");

!!!82599607.java!!!	onEvent(in event : String, inout extras : Bundle) : void
            System.out.println("onSessionEvent event=" + event + ", extras=" + extras);
!!!82599735.java!!!	onPlaybackStateChanged(inout state : PlaybackState) : void
            System.out.println("onPlaybackStateChanged " + state);
!!!82599863.java!!!	onMetadataChanged(inout metadata : MediaMetadata) : void
            String mmString = metadata == null ? null : "title=" + metadata
                    .getDescription();
            System.out.println("onMetadataChanged " + mmString);
!!!82599991.java!!!	onQueueChanged(inout queue : ParceledListSlice) : void
            System.out.println("onQueueChanged, "
                    + (queue == null ? "null queue" : " size=" + queue.getList().size()));
!!!82600119.java!!!	onQueueTitleChanged(inout title : CharSequence) : void
            System.out.println("onQueueTitleChange " + title);
!!!82600247.java!!!	onExtrasChanged(inout extras : Bundle) : void
            System.out.println("onExtrasChanged " + extras);
!!!82600375.java!!!	onVolumeInfoChanged(inout info : ParcelableVolumeInfo) : void
            System.out.println("onVolumeInfoChanged " + info);
!!!82600503.java!!!	printUsageMessage() : void
            try {
                System.out.println("V2Monitoring session " + mController.getTag()
                        + "...  available commands: play, pause, next, previous");
            } catch (RemoteException e) {
                System.out.println("Error trying to monitor session!");
            }
            System.out.println("(q)uit: finish monitoring");
!!!82600631.java!!!	run() : void
            printUsageMessage();
            HandlerThread cbThread = new HandlerThread("MediaCb") {
                @Override
                protected void onLooperPrepared() {
                    try {
                        mController.registerCallbackListener(ControllerMonitor.this);
                    } catch (RemoteException e) {
                        System.out.println("Error registering monitor callback");
                    }
                }
            };
            cbThread.start();

            try {
                InputStreamReader converter = new InputStreamReader(System.in);
                BufferedReader in = new BufferedReader(converter);
                String line;

                while ((line = in.readLine()) != null) {
                    boolean addNewline = true;
                    if (line.length() <= 0) {
                        addNewline = false;
                    } else if ("q".equals(line) || "quit".equals(line)) {
                        break;
                    } else if ("play".equals(line)) {
                        mController.play();
                    } else if ("pause".equals(line)) {
                        mController.pause();
                    } else if ("next".equals(line)) {
                        mController.next();
                    } else if ("previous".equals(line)) {
                        mController.previous();
                    } else {
                        System.out.println("Invalid command: " + line);
                    }

                    synchronized (this) {
                        if (addNewline) {
                            System.out.println("");
                        }
                        printUsageMessage();
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                cbThread.getLooper().quit();
                try {
                    mController.unregisterCallbackListener(this);
                } catch (Exception e) {
                    // ignoring
                }
            }
