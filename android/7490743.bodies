class UiDevice
!!!82643127.java!!!	UiDevice()
        /* hide constructor */
!!!82643255.java!!!	initialize(inout uiAutomatorBridge : UiAutomatorBridge) : void
        mUiAutomationBridge = uiAutomatorBridge;
!!!82643383.java!!!	isInWatcherContext() : boolean
        return mInWatcherContext;
!!!82643511.java!!!	getAutomatorBridge() : UiAutomatorBridge
        if (mUiAutomationBridge == null) {
            throw new RuntimeException("UiDevice not initialized");
        }
        return mUiAutomationBridge;
!!!82643639.java!!!	setCompressedLayoutHeirarchy(inout compressed : boolean) : void
        getAutomatorBridge().setCompressedLayoutHierarchy(compressed);
!!!82643767.java!!!	getInstance() : UiDevice
        if (sDevice == null) {
            sDevice = new UiDevice();
        }
        return sDevice;
!!!82643895.java!!!	getDisplaySizeDp() : Point
        Tracer.trace();
        Display display = getAutomatorBridge().getDefaultDisplay();
        Point p = new Point();
        display.getRealSize(p);
        DisplayMetrics metrics = new DisplayMetrics();
        display.getRealMetrics(metrics);
        float dpx = p.x / metrics.density;
        float dpy = p.y / metrics.density;
        p.x = Math.round(dpx);
        p.y = Math.round(dpy);
        return p;
!!!82644023.java!!!	getProductName() : String
        Tracer.trace();
        return Build.PRODUCT;
!!!82644151.java!!!	getLastTraversedText() : String
        Tracer.trace();
        return getAutomatorBridge().getQueryController().getLastTraversedText();
!!!82644279.java!!!	clearLastTraversedText() : void
        Tracer.trace();
        getAutomatorBridge().getQueryController().clearLastTraversedText();
!!!82644407.java!!!	pressMenu() : boolean
        Tracer.trace();
        waitForIdle();
        return getAutomatorBridge().getInteractionController().sendKeyAndWaitForEvent(
                KeyEvent.KEYCODE_MENU, 0, AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED,
                KEY_PRESS_EVENT_TIMEOUT);
!!!82644535.java!!!	pressBack() : boolean
        Tracer.trace();
        waitForIdle();
        return getAutomatorBridge().getInteractionController().sendKeyAndWaitForEvent(
                KeyEvent.KEYCODE_BACK, 0, AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED,
                KEY_PRESS_EVENT_TIMEOUT);
!!!82644663.java!!!	pressHome() : boolean
        Tracer.trace();
        waitForIdle();
        return getAutomatorBridge().getInteractionController().sendKeyAndWaitForEvent(
                KeyEvent.KEYCODE_HOME, 0, AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED,
                KEY_PRESS_EVENT_TIMEOUT);
!!!82644791.java!!!	pressSearch() : boolean
        Tracer.trace();
        return pressKeyCode(KeyEvent.KEYCODE_SEARCH);
!!!82644919.java!!!	pressDPadCenter() : boolean
        Tracer.trace();
        return pressKeyCode(KeyEvent.KEYCODE_DPAD_CENTER);
!!!82645047.java!!!	pressDPadDown() : boolean
        Tracer.trace();
        return pressKeyCode(KeyEvent.KEYCODE_DPAD_DOWN);
!!!82645175.java!!!	pressDPadUp() : boolean
        Tracer.trace();
        return pressKeyCode(KeyEvent.KEYCODE_DPAD_UP);
!!!82645303.java!!!	pressDPadLeft() : boolean
        Tracer.trace();
        return pressKeyCode(KeyEvent.KEYCODE_DPAD_LEFT);
!!!82645431.java!!!	pressDPadRight() : boolean
        Tracer.trace();
        return pressKeyCode(KeyEvent.KEYCODE_DPAD_RIGHT);
!!!82645559.java!!!	pressDelete() : boolean
        Tracer.trace();
        return pressKeyCode(KeyEvent.KEYCODE_DEL);
!!!82645687.java!!!	pressEnter() : boolean
        Tracer.trace();
        return pressKeyCode(KeyEvent.KEYCODE_ENTER);
!!!82645815.java!!!	pressKeyCode(in keyCode : int) : boolean
        Tracer.trace(keyCode);
        waitForIdle();
        return getAutomatorBridge().getInteractionController().sendKey(keyCode, 0);
!!!82645943.java!!!	pressKeyCode(in keyCode : int, in metaState : int) : boolean
        Tracer.trace(keyCode, metaState);
        waitForIdle();
        return getAutomatorBridge().getInteractionController().sendKey(keyCode, metaState);
!!!82646071.java!!!	pressRecentApps() : boolean
        Tracer.trace();
        waitForIdle();
        return getAutomatorBridge().getInteractionController().toggleRecentApps();
!!!82646199.java!!!	openNotification() : boolean
        Tracer.trace();
        waitForIdle();
        return  getAutomatorBridge().getInteractionController().openNotification();
!!!82646327.java!!!	openQuickSettings() : boolean
        Tracer.trace();
        waitForIdle();
        return getAutomatorBridge().getInteractionController().openQuickSettings();
!!!82646455.java!!!	getDisplayWidth() : int
        Tracer.trace();
        Display display = getAutomatorBridge().getDefaultDisplay();
        Point p = new Point();
        display.getSize(p);
        return p.x;
!!!82646583.java!!!	getDisplayHeight() : int
        Tracer.trace();
        Display display = getAutomatorBridge().getDefaultDisplay();
        Point p = new Point();
        display.getSize(p);
        return p.y;
!!!82646711.java!!!	click(in x : int, in y : int) : boolean
        Tracer.trace(x, y);
        if (x >= getDisplayWidth() || y >= getDisplayHeight()) {
            return (false);
        }
        return getAutomatorBridge().getInteractionController().clickNoSync(x, y);
!!!82646839.java!!!	swipe(in startX : int, in startY : int, in endX : int, in endY : int, in steps : int) : boolean
        Tracer.trace(startX, startY, endX, endY, steps);
        return getAutomatorBridge().getInteractionController()
                .swipe(startX, startY, endX, endY, steps);
!!!82646967.java!!!	drag(in startX : int, in startY : int, in endX : int, in endY : int, in steps : int) : boolean
        Tracer.trace(startX, startY, endX, endY, steps);
        return getAutomatorBridge().getInteractionController()
                .swipe(startX, startY, endX, endY, steps, true);
!!!82647095.java!!!	swipe(inout segments : Point [[]], in segmentSteps : int) : boolean
        Tracer.trace(segments, segmentSteps);
        return getAutomatorBridge().getInteractionController().swipe(segments, segmentSteps);
!!!82647223.java!!!	waitForIdle() : void
        Tracer.trace();
        waitForIdle(Configurator.getInstance().getWaitForIdleTimeout());
!!!82647351.java!!!	waitForIdle(in timeout : long) : void
        Tracer.trace(timeout);
        getAutomatorBridge().waitForIdle(timeout);
!!!82647479.java!!!	getCurrentActivityName() : String
        Tracer.trace();
        return getAutomatorBridge().getQueryController().getCurrentActivityName();
!!!82647607.java!!!	getCurrentPackageName() : String
        Tracer.trace();
        return getAutomatorBridge().getQueryController().getCurrentPackageName();
!!!82647735.java!!!	registerWatcher(in name : String, inout watcher : UiWatcher) : void
        Tracer.trace(name, watcher);
        if (mInWatcherContext) {
            throw new IllegalStateException("Cannot register new watcher from within another");
        }
        mWatchers.put(name, watcher);
!!!82647863.java!!!	removeWatcher(in name : String) : void
        Tracer.trace(name);
        if (mInWatcherContext) {
            throw new IllegalStateException("Cannot remove a watcher from within another");
        }
        mWatchers.remove(name);
!!!82647991.java!!!	runWatchers() : void
        Tracer.trace();
        if (mInWatcherContext) {
            return;
        }

        for (String watcherName : mWatchers.keySet()) {
            UiWatcher watcher = mWatchers.get(watcherName);
            if (watcher != null) {
                try {
                    mInWatcherContext = true;
                    if (watcher.checkForCondition()) {
                        setWatcherTriggered(watcherName);
                    }
                } catch (Exception e) {
                    Log.e(LOG_TAG, "Exceuting watcher: " + watcherName, e);
                } finally {
                    mInWatcherContext = false;
                }
            }
        }
!!!82648119.java!!!	resetWatcherTriggers() : void
        Tracer.trace();
        mWatchersTriggers.clear();
!!!82648247.java!!!	hasWatcherTriggered(in watcherName : String) : boolean
        Tracer.trace(watcherName);
        return mWatchersTriggers.contains(watcherName);
!!!82648375.java!!!	hasAnyWatcherTriggered() : boolean
        Tracer.trace();
        return mWatchersTriggers.size() > 0;
!!!82648503.java!!!	setWatcherTriggered(in watcherName : String) : void
        Tracer.trace(watcherName);
        if (!hasWatcherTriggered(watcherName)) {
            mWatchersTriggers.add(watcherName);
        }
!!!82648631.java!!!	isNaturalOrientation() : boolean
        Tracer.trace();
        waitForIdle();
        int ret = getAutomatorBridge().getRotation();
        return ret == UiAutomation.ROTATION_FREEZE_0 ||
                ret == UiAutomation.ROTATION_FREEZE_180;
!!!82648759.java!!!	getDisplayRotation() : int
        Tracer.trace();
        waitForIdle();
        return getAutomatorBridge().getRotation();
!!!82648887.java!!!	freezeRotation() : void
        Tracer.trace();
        getAutomatorBridge().getInteractionController().freezeRotation();
!!!82649015.java!!!	unfreezeRotation() : void
        Tracer.trace();
        getAutomatorBridge().getInteractionController().unfreezeRotation();
!!!82649143.java!!!	setOrientationLeft() : void
        Tracer.trace();
        getAutomatorBridge().getInteractionController().setRotationLeft();
        waitForIdle(); // we don't need to check for idle on entry for this. We'll sync on exit
!!!82649271.java!!!	setOrientationRight() : void
        Tracer.trace();
        getAutomatorBridge().getInteractionController().setRotationRight();
        waitForIdle(); // we don't need to check for idle on entry for this. We'll sync on exit
!!!82649399.java!!!	setOrientationNatural() : void
        Tracer.trace();
        getAutomatorBridge().getInteractionController().setRotationNatural();
        waitForIdle(); // we don't need to check for idle on entry for this. We'll sync on exit
!!!82649527.java!!!	wakeUp() : void
        Tracer.trace();
        if(getAutomatorBridge().getInteractionController().wakeDevice()) {
            // sync delay to allow the window manager to start accepting input
            // after the device is awakened.
            SystemClock.sleep(500);
        }
!!!82649655.java!!!	isScreenOn() : boolean
        Tracer.trace();
        return getAutomatorBridge().getInteractionController().isScreenOn();
!!!82649783.java!!!	sleep() : void
        Tracer.trace();
        getAutomatorBridge().getInteractionController().sleepDevice();
!!!82649911.java!!!	dumpWindowHierarchy(in fileName : String) : void
        Tracer.trace(fileName);
        AccessibilityNodeInfo root =
                getAutomatorBridge().getQueryController().getAccessibilityRootNode();
        if(root != null) {
            Display display = getAutomatorBridge().getDefaultDisplay();
            Point size = new Point();
            display.getSize(size);
            AccessibilityNodeInfoDumper.dumpWindowToFile(root,
                    new File(new File(Environment.getDataDirectory(), "local/tmp"), fileName),
                    display.getRotation(), size.x, size.y);
        }
!!!82650039.java!!!	waitForWindowUpdate(in packageName : String, in timeout : long) : boolean
        Tracer.trace(packageName, timeout);
        if (packageName != null) {
            if (!packageName.equals(getCurrentPackageName())) {
                return false;
            }
        }
        Runnable emptyRunnable = new Runnable() {
            @Override
            public void run() {
            }
        };
        AccessibilityEventFilter checkWindowUpdate = new AccessibilityEventFilter() {
            @Override
            public boolean accept(AccessibilityEvent t) {
                if (t.getEventType() == AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED) {
                    return packageName == null || packageName.equals(t.getPackageName());
                }
                return false;
            }
        };
        try {
            getAutomatorBridge().executeCommandAndWaitForAccessibilityEvent(
                    emptyRunnable, checkWindowUpdate, timeout);
        } catch (TimeoutException e) {
            return false;
        } catch (Exception e) {
            Log.e(LOG_TAG, "waitForWindowUpdate: general exception from bridge", e);
            return false;
        }
        return true;
!!!82650167.java!!!	takeScreenshot(inout storePath : File) : boolean
        Tracer.trace(storePath);
        return takeScreenshot(storePath, 1.0f, 90);
!!!82650295.java!!!	takeScreenshot(inout storePath : File, in scale : float, in quality : int) : boolean
        Tracer.trace(storePath, scale, quality);
        return getAutomatorBridge().takeScreenshot(storePath, quality);
