class UiSelector
!!!82654775.java!!!	UiSelector(inout selector : UiSelector)
        mSelectorAttributes = selector.cloneSelector().mSelectorAttributes;
!!!82654903.java!!!	cloneSelector() : UiSelector
        UiSelector ret = new UiSelector();
        ret.mSelectorAttributes = mSelectorAttributes.clone();
        if (hasChildSelector())
            ret.mSelectorAttributes.put(SELECTOR_CHILD, new UiSelector(getChildSelector()));
        if (hasParentSelector())
            ret.mSelectorAttributes.put(SELECTOR_PARENT, new UiSelector(getParentSelector()));
        if (hasPatternSelector())
            ret.mSelectorAttributes.put(SELECTOR_PATTERN, new UiSelector(getPatternSelector()));
        return ret;
!!!82655031.java!!!	patternBuilder(inout selector : UiSelector) : UiSelector
        if (!selector.hasPatternSelector()) {
            return new UiSelector().patternSelector(selector);
        }
        return selector;
!!!82655159.java!!!	patternBuilder(inout container : UiSelector, inout pattern : UiSelector) : UiSelector
        return new UiSelector(
                new UiSelector().containerSelector(container).patternSelector(pattern));
!!!82655287.java!!!	text(in text : String) : UiSelector
        return buildSelector(SELECTOR_TEXT, text);
!!!82655415.java!!!	textMatches(in regex : String) : UiSelector
        return buildSelector(SELECTOR_TEXT_REGEX, Pattern.compile(regex));
!!!82655543.java!!!	textStartsWith(in text : String) : UiSelector
        return buildSelector(SELECTOR_START_TEXT, text);
!!!82655671.java!!!	textContains(in text : String) : UiSelector
        return buildSelector(SELECTOR_CONTAINS_TEXT, text);
!!!82655799.java!!!	className(in className : String) : UiSelector
        return buildSelector(SELECTOR_CLASS, className);
!!!82655927.java!!!	classNameMatches(in regex : String) : UiSelector
        return buildSelector(SELECTOR_CLASS_REGEX, Pattern.compile(regex));
!!!82656055.java!!!	className(inout type : Class<T>) : UiSelector
        return buildSelector(SELECTOR_CLASS, type.getName());
!!!82656183.java!!!	description(in desc : String) : UiSelector
        return buildSelector(SELECTOR_DESCRIPTION, desc);
!!!82656311.java!!!	descriptionMatches(in regex : String) : UiSelector
        return buildSelector(SELECTOR_DESCRIPTION_REGEX, Pattern.compile(regex));
!!!82656439.java!!!	descriptionStartsWith(in desc : String) : UiSelector
        return buildSelector(SELECTOR_START_DESCRIPTION, desc);
!!!82656567.java!!!	descriptionContains(in desc : String) : UiSelector
        return buildSelector(SELECTOR_CONTAINS_DESCRIPTION, desc);
!!!82656695.java!!!	resourceId(in id : String) : UiSelector
        return buildSelector(SELECTOR_RESOURCE_ID, id);
!!!82656823.java!!!	resourceIdMatches(in regex : String) : UiSelector
        return buildSelector(SELECTOR_RESOURCE_ID_REGEX, Pattern.compile(regex));
!!!82656951.java!!!	index(in index : int) : UiSelector
        return buildSelector(SELECTOR_INDEX, index);
!!!82657079.java!!!	instance(in instance : int) : UiSelector
        return buildSelector(SELECTOR_INSTANCE, instance);
!!!82657207.java!!!	enabled(inout val : boolean) : UiSelector
        return buildSelector(SELECTOR_ENABLED, val);
!!!82657335.java!!!	focused(inout val : boolean) : UiSelector
        return buildSelector(SELECTOR_FOCUSED, val);
!!!82657463.java!!!	focusable(inout val : boolean) : UiSelector
        return buildSelector(SELECTOR_FOCUSABLE, val);
!!!82657591.java!!!	scrollable(inout val : boolean) : UiSelector
        return buildSelector(SELECTOR_SCROLLABLE, val);
!!!82657719.java!!!	selected(inout val : boolean) : UiSelector
        return buildSelector(SELECTOR_SELECTED, val);
!!!82657847.java!!!	checked(inout val : boolean) : UiSelector
        return buildSelector(SELECTOR_CHECKED, val);
!!!82657975.java!!!	clickable(inout val : boolean) : UiSelector
        return buildSelector(SELECTOR_CLICKABLE, val);
!!!82658103.java!!!	checkable(inout val : boolean) : UiSelector
        return buildSelector(SELECTOR_CHECKABLE, val);
!!!82658231.java!!!	longClickable(inout val : boolean) : UiSelector
        return buildSelector(SELECTOR_LONG_CLICKABLE, val);
!!!82658359.java!!!	childSelector(inout selector : UiSelector) : UiSelector
        return buildSelector(SELECTOR_CHILD, selector);
!!!82658487.java!!!	patternSelector(inout selector : UiSelector) : UiSelector
        return buildSelector(SELECTOR_PATTERN, selector);
!!!82658615.java!!!	containerSelector(inout selector : UiSelector) : UiSelector
        return buildSelector(SELECTOR_CONTAINER, selector);
!!!82658743.java!!!	fromParent(inout selector : UiSelector) : UiSelector
        return buildSelector(SELECTOR_PARENT, selector);
!!!82658871.java!!!	packageName(in name : String) : UiSelector
        return buildSelector(SELECTOR_PACKAGE_NAME, name);
!!!82658999.java!!!	packageNameMatches(in regex : String) : UiSelector
        return buildSelector(SELECTOR_PACKAGE_NAME_REGEX, Pattern.compile(regex));
!!!82659127.java!!!	buildSelector(in selectorId : int, inout selectorValue : Object) : UiSelector
        UiSelector selector = new UiSelector(this);
        if (selectorId == SELECTOR_CHILD || selectorId == SELECTOR_PARENT)
            selector.getLastSubSelector().mSelectorAttributes.put(selectorId, selectorValue);
        else
            selector.mSelectorAttributes.put(selectorId, selectorValue);
        return selector;
!!!82659255.java!!!	getChildSelector() : UiSelector
        UiSelector selector = (UiSelector)mSelectorAttributes.get(UiSelector.SELECTOR_CHILD, null);
        if (selector != null)
            return new UiSelector(selector);
        return null;
!!!82659383.java!!!	getPatternSelector() : UiSelector
        UiSelector selector =
                (UiSelector)mSelectorAttributes.get(UiSelector.SELECTOR_PATTERN, null);
        if (selector != null)
            return new UiSelector(selector);
        return null;
!!!82659511.java!!!	getContainerSelector() : UiSelector
        UiSelector selector =
                (UiSelector)mSelectorAttributes.get(UiSelector.SELECTOR_CONTAINER, null);
        if (selector != null)
            return new UiSelector(selector);
        return null;
!!!82659639.java!!!	getParentSelector() : UiSelector
        UiSelector selector =
                (UiSelector) mSelectorAttributes.get(UiSelector.SELECTOR_PARENT, null);
        if (selector != null)
            return new UiSelector(selector);
        return null;
!!!82659767.java!!!	getInstance() : int
        return getInt(UiSelector.SELECTOR_INSTANCE);
!!!82659895.java!!!	getString(in criterion : int) : String
        return (String) mSelectorAttributes.get(criterion, null);
!!!82660023.java!!!	getBoolean(in criterion : int) : boolean
        return (Boolean) mSelectorAttributes.get(criterion, false);
!!!82660151.java!!!	getInt(in criterion : int) : int
        return (Integer) mSelectorAttributes.get(criterion, 0);
!!!82660279.java!!!	getPattern(in criterion : int) : Pattern
        return (Pattern) mSelectorAttributes.get(criterion, null);
!!!82660407.java!!!	isMatchFor(inout node : AccessibilityNodeInfo, in index : int) : boolean
        int size = mSelectorAttributes.size();
        for(int x = 0; x < size; x++) {
            CharSequence s = null;
            int criterion = mSelectorAttributes.keyAt(x);
            switch(criterion) {
            case UiSelector.SELECTOR_INDEX:
                if (index != this.getInt(criterion))
                    return false;
                break;
            case UiSelector.SELECTOR_CHECKED:
                if (node.isChecked() != getBoolean(criterion)) {
                    return false;
                }
                break;
            case UiSelector.SELECTOR_CLASS:
                s = node.getClassName();
                if (s == null || !s.toString().contentEquals(getString(criterion))) {
                    return false;
                }
                break;
            case UiSelector.SELECTOR_CLASS_REGEX:
                s = node.getClassName();
                if (s == null || !getPattern(criterion).matcher(s).matches()) {
                    return false;
                }
                break;
            case UiSelector.SELECTOR_CLICKABLE:
                if (node.isClickable() != getBoolean(criterion)) {
                    return false;
                }
                break;
            case UiSelector.SELECTOR_CHECKABLE:
                if (node.isCheckable() != getBoolean(criterion)) {
                    return false;
                }
                break;
            case UiSelector.SELECTOR_LONG_CLICKABLE:
                if (node.isLongClickable() != getBoolean(criterion)) {
                    return false;
                }
                break;
            case UiSelector.SELECTOR_CONTAINS_DESCRIPTION:
                s = node.getContentDescription();
                if (s == null || !s.toString().toLowerCase()
                        .contains(getString(criterion).toLowerCase())) {
                    return false;
                }
                break;
            case UiSelector.SELECTOR_START_DESCRIPTION:
                s = node.getContentDescription();
                if (s == null || !s.toString().toLowerCase()
                        .startsWith(getString(criterion).toLowerCase())) {
                    return false;
                }
                break;
            case UiSelector.SELECTOR_DESCRIPTION:
                s = node.getContentDescription();
                if (s == null || !s.toString().contentEquals(getString(criterion))) {
                    return false;
                }
                break;
            case UiSelector.SELECTOR_DESCRIPTION_REGEX:
                s = node.getContentDescription();
                if (s == null || !getPattern(criterion).matcher(s).matches()) {
                    return false;
                }
                break;
            case UiSelector.SELECTOR_CONTAINS_TEXT:
                s = node.getText();
                if (s == null || !s.toString().toLowerCase()
                        .contains(getString(criterion).toLowerCase())) {
                    return false;
                }
                break;
            case UiSelector.SELECTOR_START_TEXT:
                s = node.getText();
                if (s == null || !s.toString().toLowerCase()
                        .startsWith(getString(criterion).toLowerCase())) {
                    return false;
                }
                break;
            case UiSelector.SELECTOR_TEXT:
                s = node.getText();
                if (s == null || !s.toString().contentEquals(getString(criterion))) {
                    return false;
                }
                break;
            case UiSelector.SELECTOR_TEXT_REGEX:
                s = node.getText();
                if (s == null || !getPattern(criterion).matcher(s).matches()) {
                    return false;
                }
                break;
            case UiSelector.SELECTOR_ENABLED:
                if (node.isEnabled() != getBoolean(criterion)) {
                    return false;
                }
                break;
            case UiSelector.SELECTOR_FOCUSABLE:
                if (node.isFocusable() != getBoolean(criterion)) {
                    return false;
                }
                break;
            case UiSelector.SELECTOR_FOCUSED:
                if (node.isFocused() != getBoolean(criterion)) {
                    return false;
                }
                break;
            case UiSelector.SELECTOR_ID:
                break; //TODO: do we need this for AccessibilityNodeInfo.id?
            case UiSelector.SELECTOR_PACKAGE_NAME:
                s = node.getPackageName();
                if (s == null || !s.toString().contentEquals(getString(criterion))) {
                    return false;
                }
                break;
            case UiSelector.SELECTOR_PACKAGE_NAME_REGEX:
                s = node.getPackageName();
                if (s == null || !getPattern(criterion).matcher(s).matches()) {
                    return false;
                }
                break;
            case UiSelector.SELECTOR_SCROLLABLE:
                if (node.isScrollable() != getBoolean(criterion)) {
                    return false;
                }
                break;
            case UiSelector.SELECTOR_SELECTED:
                if (node.isSelected() != getBoolean(criterion)) {
                    return false;
                }
                break;
            case UiSelector.SELECTOR_RESOURCE_ID:
                s = node.getViewIdResourceName();
                if (s == null || !s.toString().contentEquals(getString(criterion))) {
                    return false;
                }
                break;
            case UiSelector.SELECTOR_RESOURCE_ID_REGEX:
                s = node.getViewIdResourceName();
                if (s == null || !getPattern(criterion).matcher(s).matches()) {
                    return false;
                }
                break;
            }
        }
        return matchOrUpdateInstance();
!!!82660535.java!!!	matchOrUpdateInstance() : boolean
        int currentSelectorCounter = 0;
        int currentSelectorInstance = 0;

        // matched attributes - now check for matching instance number
        if (mSelectorAttributes.indexOfKey(UiSelector.SELECTOR_INSTANCE) >= 0) {
            currentSelectorInstance =
                    (Integer)mSelectorAttributes.get(UiSelector.SELECTOR_INSTANCE);
        }

        // instance is required. Add count if not already counting
        if (mSelectorAttributes.indexOfKey(UiSelector.SELECTOR_COUNT) >= 0) {
            currentSelectorCounter = (Integer)mSelectorAttributes.get(UiSelector.SELECTOR_COUNT);
        }

        // Verify
        if (currentSelectorInstance == currentSelectorCounter) {
            return true;
        }
        // Update count
        if (currentSelectorInstance > currentSelectorCounter) {
            mSelectorAttributes.put(UiSelector.SELECTOR_COUNT, ++currentSelectorCounter);
        }
        return false;
!!!82660663.java!!!	isLeaf() : boolean
        if (mSelectorAttributes.indexOfKey(UiSelector.SELECTOR_CHILD) < 0 &&
                mSelectorAttributes.indexOfKey(UiSelector.SELECTOR_PARENT) < 0) {
            return true;
        }
        return false;
!!!82660791.java!!!	hasChildSelector() : boolean
        if (mSelectorAttributes.indexOfKey(UiSelector.SELECTOR_CHILD) < 0) {
            return false;
        }
        return true;
!!!82660919.java!!!	hasPatternSelector() : boolean
        if (mSelectorAttributes.indexOfKey(UiSelector.SELECTOR_PATTERN) < 0) {
            return false;
        }
        return true;
!!!82661047.java!!!	hasContainerSelector() : boolean
        if (mSelectorAttributes.indexOfKey(UiSelector.SELECTOR_CONTAINER) < 0) {
            return false;
        }
        return true;
!!!82661175.java!!!	hasParentSelector() : boolean
        if (mSelectorAttributes.indexOfKey(UiSelector.SELECTOR_PARENT) < 0) {
            return false;
        }
        return true;
!!!82661303.java!!!	getLastSubSelector() : UiSelector
        if (mSelectorAttributes.indexOfKey(UiSelector.SELECTOR_CHILD) >= 0) {
            UiSelector child = (UiSelector)mSelectorAttributes.get(UiSelector.SELECTOR_CHILD);
            if (child.getLastSubSelector() == null) {
                return child;
            }
            return child.getLastSubSelector();
        } else if (mSelectorAttributes.indexOfKey(UiSelector.SELECTOR_PARENT) >= 0) {
            UiSelector parent = (UiSelector)mSelectorAttributes.get(UiSelector.SELECTOR_PARENT);
            if (parent.getLastSubSelector() == null) {
                return parent;
            }
            return parent.getLastSubSelector();
        }
        return this;
!!!82661431.java!!!	toString() : String
        return dumpToString(true);
!!!82661559.java!!!	dumpToString(inout all : boolean) : String
        StringBuilder builder = new StringBuilder();
        builder.append(UiSelector.class.getSimpleName() + "[");
        final int criterionCount = mSelectorAttributes.size();
        for (int i = 0; i < criterionCount; i++) {
            if (i > 0) {
                builder.append(", ");
            }
            final int criterion = mSelectorAttributes.keyAt(i);
            switch (criterion) {
            case SELECTOR_TEXT:
                builder.append("TEXT=").append(mSelectorAttributes.valueAt(i));
                break;
            case SELECTOR_TEXT_REGEX:
                builder.append("TEXT_REGEX=").append(mSelectorAttributes.valueAt(i));
                break;
            case SELECTOR_START_TEXT:
                builder.append("START_TEXT=").append(mSelectorAttributes.valueAt(i));
                break;
            case SELECTOR_CONTAINS_TEXT:
                builder.append("CONTAINS_TEXT=").append(mSelectorAttributes.valueAt(i));
                break;
            case SELECTOR_CLASS:
                builder.append("CLASS=").append(mSelectorAttributes.valueAt(i));
                break;
            case SELECTOR_CLASS_REGEX:
                builder.append("CLASS_REGEX=").append(mSelectorAttributes.valueAt(i));
                break;
            case SELECTOR_DESCRIPTION:
                builder.append("DESCRIPTION=").append(mSelectorAttributes.valueAt(i));
                break;
            case SELECTOR_DESCRIPTION_REGEX:
                builder.append("DESCRIPTION_REGEX=").append(mSelectorAttributes.valueAt(i));
                break;
            case SELECTOR_START_DESCRIPTION:
                builder.append("START_DESCRIPTION=").append(mSelectorAttributes.valueAt(i));
                break;
            case SELECTOR_CONTAINS_DESCRIPTION:
                builder.append("CONTAINS_DESCRIPTION=").append(mSelectorAttributes.valueAt(i));
                break;
            case SELECTOR_INDEX:
                builder.append("INDEX=").append(mSelectorAttributes.valueAt(i));
                break;
            case SELECTOR_INSTANCE:
                builder.append("INSTANCE=").append(mSelectorAttributes.valueAt(i));
                break;
            case SELECTOR_ENABLED:
                builder.append("ENABLED=").append(mSelectorAttributes.valueAt(i));
                break;
            case SELECTOR_FOCUSED:
                builder.append("FOCUSED=").append(mSelectorAttributes.valueAt(i));
                break;
            case SELECTOR_FOCUSABLE:
                builder.append("FOCUSABLE=").append(mSelectorAttributes.valueAt(i));
                break;
            case SELECTOR_SCROLLABLE:
                builder.append("SCROLLABLE=").append(mSelectorAttributes.valueAt(i));
                break;
            case SELECTOR_CLICKABLE:
                builder.append("CLICKABLE=").append(mSelectorAttributes.valueAt(i));
                break;
            case SELECTOR_CHECKABLE:
                builder.append("CHECKABLE=").append(mSelectorAttributes.valueAt(i));
                break;
            case SELECTOR_LONG_CLICKABLE:
                builder.append("LONG_CLICKABLE=").append(mSelectorAttributes.valueAt(i));
                break;
            case SELECTOR_CHECKED:
                builder.append("CHECKED=").append(mSelectorAttributes.valueAt(i));
                break;
            case SELECTOR_SELECTED:
                builder.append("SELECTED=").append(mSelectorAttributes.valueAt(i));
                break;
            case SELECTOR_ID:
                builder.append("ID=").append(mSelectorAttributes.valueAt(i));
                break;
            case SELECTOR_CHILD:
                if (all)
                    builder.append("CHILD=").append(mSelectorAttributes.valueAt(i));
                else
                    builder.append("CHILD[..]");
                break;
            case SELECTOR_PATTERN:
                if (all)
                    builder.append("PATTERN=").append(mSelectorAttributes.valueAt(i));
                else
                    builder.append("PATTERN[..]");
                break;
            case SELECTOR_CONTAINER:
                if (all)
                    builder.append("CONTAINER=").append(mSelectorAttributes.valueAt(i));
                else
                    builder.append("CONTAINER[..]");
                break;
            case SELECTOR_PARENT:
                if (all)
                    builder.append("PARENT=").append(mSelectorAttributes.valueAt(i));
                else
                    builder.append("PARENT[..]");
                break;
            case SELECTOR_COUNT:
                builder.append("COUNT=").append(mSelectorAttributes.valueAt(i));
                break;
            case SELECTOR_PACKAGE_NAME:
                builder.append("PACKAGE NAME=").append(mSelectorAttributes.valueAt(i));
                break;
            case SELECTOR_PACKAGE_NAME_REGEX:
                builder.append("PACKAGE_NAME_REGEX=").append(mSelectorAttributes.valueAt(i));
                break;
            case SELECTOR_RESOURCE_ID:
                builder.append("RESOURCE_ID=").append(mSelectorAttributes.valueAt(i));
                break;
            case SELECTOR_RESOURCE_ID_REGEX:
                builder.append("RESOURCE_ID_REGEX=").append(mSelectorAttributes.valueAt(i));
                break;
            default:
                builder.append("UNDEFINED="+criterion+" ").append(mSelectorAttributes.valueAt(i));
            }
        }
        builder.append("]");
        return builder.toString();
