class Picture
!!!82689591.cpp!!!	Picture(in src : Picture = NULL)
    if (NULL != src) {
        mWidth = src->width();
        mHeight = src->height();
        if (NULL != src->mPicture.get()) {
            mPicture.reset(SkRef(src->mPicture.get()));
        } else if (NULL != src->mRecorder.get()) {
            mPicture.reset(src->makePartialCopy());
        }
        validate();
    } else {
        mWidth = 0;
        mHeight = 0;
    }
!!!82689719.cpp!!!	beginRecording(in width : int, in height : int) : Canvas
    mPicture.reset(NULL);
    mRecorder.reset(new SkPictureRecorder);
    mWidth = width;
    mHeight = height;
    SkCanvas* canvas = mRecorder->beginRecording(width, height, NULL, 0);
    return Canvas::create_canvas(canvas);
!!!82689847.cpp!!!	endRecording() : void
    if (NULL != mRecorder.get()) {
        mPicture.reset(mRecorder->endRecording());
        validate();
        mRecorder.reset(NULL);
    }
!!!82689975.cpp!!!	width() : int
    validate();
    return mWidth;
!!!82690103.cpp!!!	height() : int
    validate();
    return mHeight;
!!!82690231.cpp!!!	CreateFromStream(inout stream : SkStream) : Picture
    Picture* newPict = new Picture;

    SkPicture* skPicture = SkPicture::CreateFromStream(stream);
    if (NULL != skPicture) {
        newPict->mPicture.reset(skPicture);

        const SkIRect cullRect = skPicture->cullRect().roundOut();
        newPict->mWidth = cullRect.width();
        newPict->mHeight = cullRect.height();
    }

    return newPict;
!!!82690359.cpp!!!	serialize(inout stream : SkWStream) : void
    if (NULL != mRecorder.get()) {
        std::unique_ptr<SkPicture> tempPict(this->makePartialCopy());
        tempPict->serialize(stream);
    } else if (NULL != mPicture.get()) {
        validate();
        mPicture->serialize(stream);
    } else {
        SkPictureRecorder recorder;
        recorder.beginRecording(0, 0);
        std::unique_ptr<SkPicture> empty(recorder.endRecording());
        empty->serialize(stream);
    }
!!!82690487.cpp!!!	draw(inout canvas : Canvas) : void
    if (NULL != mRecorder.get()) {
        this->endRecording();
        SkASSERT(NULL != mPicture.get());
    }
    validate();
    if (NULL != mPicture.get()) {
        mPicture.get()->playback(canvas->asSkCanvas());
    }
!!!82690615.cpp!!!	makePartialCopy() : SkPicture
    SkASSERT(NULL != mRecorder.get());

    SkPictureRecorder reRecorder;

    SkCanvas* canvas = reRecorder.beginRecording(mWidth, mHeight, NULL, 0);
    mRecorder->partialReplay(canvas);
    return reRecorder.endRecording();
!!!82690743.cpp!!!	validate() : void
#ifdef SK_DEBUG
    if (NULL != mPicture.get()) {
        SkRect cullRect = mPicture->cullRect();
        SkRect myRect = SkRect::MakeWH(SkIntToScalar(mWidth), SkIntToScalar(mHeight));
        SkASSERT(cullRect == myRect);
    }
#endif
