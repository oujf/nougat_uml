class JNIRadioCallback
!!!82703159.cpp!!!	JNIRadioCallback(inout env : JNIEnv, in thiz : jobject, in weak_thiz : jobject)

    // Hold onto the RadioModule class for use in calling the static method
    // that posts events to the application thread.
    jclass clazz = env->GetObjectClass(thiz);
    if (clazz == NULL) {
        ALOGE("Can't find class %s", kRadioModuleClassPathName);
        return;
    }
    mClass = (jclass)env->NewGlobalRef(clazz);

    // We use a weak reference so the RadioModule object can be garbage collected.
    // The reference is only used as a proxy for callbacks.
    mObject  = env->NewGlobalRef(weak_thiz);
!!!82703287.cpp!!!	~JNIRadioCallback()
    // remove global references
    JNIEnv *env = AndroidRuntime::getJNIEnv();
    if (env == NULL) {
        return;
    }
    env->DeleteGlobalRef(mObject);
    env->DeleteGlobalRef(mClass);
!!!82703415.cpp!!!	onEvent(inout event : radio_event) : void
    JNIEnv *env = AndroidRuntime::getJNIEnv();
    if (env == NULL) {
        return;
    }

    ALOGV("%s", __FUNCTION__);

    jobject jObj = NULL;
    jint jArg2 = 0;
    jint jStatus = RADIO_STATUS_OK;
    switch (event->type) {
        case RADIO_EVENT_CONFIG:
            jStatus = convertBandConfigFromNative(env, &jObj, &event->config);
            break;
        case RADIO_EVENT_TUNED:
        case RADIO_EVENT_AF_SWITCH:
            ALOGV("%s RADIO_EVENT_TUNED channel %d", __FUNCTION__, event->info.channel);
            jStatus = convertProgramInfoFromNative(env, &jObj, &event->info);
            break;
        case RADIO_EVENT_METADATA:
            jStatus = convertMetadataFromNative(env, &jObj, event->metadata);
            if (jStatus >= 0) {
                jStatus = RADIO_STATUS_OK;
            }
            break;
        case RADIO_EVENT_ANTENNA:
        case RADIO_EVENT_TA:
        case RADIO_EVENT_EA:
        case RADIO_EVENT_CONTROL:
            jArg2 = event->on ? 1 : 0;
            break;
    }

    if (jStatus != RADIO_STATUS_OK) {
        return;
    }
    env->CallStaticVoidMethod(mClass, gPostEventFromNative, mObject,
                              event->type, event->status, jArg2, jObj);

    env->DeleteLocalRef(jObj);
    if (env->ExceptionCheck()) {
        ALOGW("An exception occurred while notifying an event.");
        env->ExceptionClear();
    }
