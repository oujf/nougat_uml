class JNIAudioPortCallback
!!!82705207.cpp!!!	JNIAudioPortCallback(inout env : JNIEnv, in thiz : jobject, in weak_thiz : jobject)

    // Hold onto the AudioPortEventHandler class for use in calling the static method
    // that posts events to the application thread.
    jclass clazz = env->GetObjectClass(thiz);
    if (clazz == NULL) {
        ALOGE("Can't find class %s", kEventHandlerClassPathName);
        return;
    }
    mClass = (jclass)env->NewGlobalRef(clazz);

    // We use a weak reference so the AudioPortEventHandler object can be garbage collected.
    // The reference is only used as a proxy for callbacks.
    mObject  = env->NewGlobalRef(weak_thiz);
!!!82705335.cpp!!!	~JNIAudioPortCallback()
    // remove global references
    JNIEnv *env = AndroidRuntime::getJNIEnv();
    if (env == NULL) {
        return;
    }
    env->DeleteGlobalRef(mObject);
    env->DeleteGlobalRef(mClass);
!!!82705463.cpp!!!	onAudioPortListUpdate() : void
    sendEvent(AUDIOPORT_EVENT_PORT_LIST_UPDATED);
!!!82705591.cpp!!!	onAudioPatchListUpdate() : void
    sendEvent(AUDIOPORT_EVENT_PATCH_LIST_UPDATED);
!!!82705719.cpp!!!	onServiceDied() : void
    sendEvent(AUDIOPORT_EVENT_SERVICE_DIED);
!!!82705847.cpp!!!	sendEvent(in event : int) : void
    JNIEnv *env = AndroidRuntime::getJNIEnv();
    if (env == NULL) {
        return;
    }
    env->CallStaticVoidMethod(mClass, gAudioPortEventHandlerMethods.postEventFromNative, mObject,
                              event, 0, 0, NULL);
    if (env->ExceptionCheck()) {
        ALOGW("An exception occurred while notifying an event.");
        env->ExceptionClear();
    }
