class ChooserListAdapter
!!!82779191.java!!!	ChooserListAdapter(inout context : Context, inout payloadIntents : List<Intent>, inout initialIntents : Intent [[]], inout rList : List<ResolveInfo>, in launchedFromUid : int, inout filterLastUsed : boolean)
            // Don't send the initial intents through the shared ResolverActivity path,
            // we want to separate them into a different section.
            super(context, payloadIntents, null, rList, launchedFromUid, filterLastUsed);

            if (initialIntents != null) {
                final PackageManager pm = getPackageManager();
                for (int i = 0; i < initialIntents.length; i++) {
                    final Intent ii = initialIntents[i];
                    if (ii == null) {
                        continue;
                    }

                    // We reimplement Intent#resolveActivityInfo here because if we have an
                    // implicit intent, we want the ResolveInfo returned by PackageManager
                    // instead of one we reconstruct ourselves. The ResolveInfo returned might
                    // have extra metadata and resolvePackageName set and we want to respect that.
                    ResolveInfo ri = null;
                    ActivityInfo ai = null;
                    final ComponentName cn = ii.getComponent();
                    if (cn != null) {
                        try {
                            ai = pm.getActivityInfo(ii.getComponent(), 0);
                            ri = new ResolveInfo();
                            ri.activityInfo = ai;
                        } catch (PackageManager.NameNotFoundException ignored) {
                            // ai will == null below
                        }
                    }
                    if (ai == null) {
                        ri = pm.resolveActivity(ii, PackageManager.MATCH_DEFAULT_ONLY);
                        ai = ri != null ? ri.activityInfo : null;
                    }
                    if (ai == null) {
                        Log.w(TAG, "No activity found for " + ii);
                        continue;
                    }
                    UserManager userManager =
                            (UserManager) getSystemService(Context.USER_SERVICE);
                    if (ii instanceof LabeledIntent) {
                        LabeledIntent li = (LabeledIntent)ii;
                        ri.resolvePackageName = li.getSourcePackage();
                        ri.labelRes = li.getLabelResource();
                        ri.nonLocalizedLabel = li.getNonLocalizedLabel();
                        ri.icon = li.getIconResource();
                        ri.iconResourceId = ri.icon;
                    }
                    if (userManager.isManagedProfile()) {
                        ri.noResourceId = true;
                        ri.icon = 0;
                    }
                    mCallerTargets.add(new DisplayResolveInfo(ii, ri,
                            ri.loadLabel(pm), null, ii));
                }
            }
!!!82779319.java!!!	showsExtendedInfo(inout info : ResolverActivity::TargetInfo) : boolean
            // We have badges so we don't need this text shown.
            return false;
!!!82779447.java!!!	isComponentPinned(inout name : ComponentName) : boolean
            return mPinnedSharedPrefs.getBoolean(name.flattenToString(), false);
!!!82779575.java!!!	getScore(inout target : ResolverActivity::DisplayResolveInfo) : float
            if (target == null) {
                return CALLER_TARGET_SCORE_BOOST;
            }
            float score = super.getScore(target);
            if (target.isPinned()) {
                score += PINNED_TARGET_SCORE_BOOST;
            }
            return score;
!!!82779703.java!!!	onCreateView(inout parent : ViewGroup) : View
            return mInflater.inflate(
                    com.android.internal.R.layout.resolve_grid_item, parent, false);
!!!82779831.java!!!	onListRebuilt() : void
            if (mServiceTargets != null) {
                pruneServiceTargets();
            }
!!!82779959.java!!!	shouldGetResolvedFilter() : boolean
            return true;
!!!82780087.java!!!	getCount() : int
            return super.getCount() + getServiceTargetCount() + getCallerTargetCount();
!!!82780215.java!!!	getUnfilteredCount() : int
            return super.getUnfilteredCount() + getServiceTargetCount() + getCallerTargetCount();
!!!82780343.java!!!	getCallerTargetCount() : int
            return mCallerTargets.size();
!!!82780471.java!!!	getServiceTargetCount() : int
            if (!mShowServiceTargets) {
                return 0;
            }
            return Math.min(mServiceTargets.size(), MAX_SERVICE_TARGETS);
!!!82780599.java!!!	getStandardTargetCount() : int
            return super.getCount();
!!!82780727.java!!!	getPositionTargetType(in position : int) : int
            int offset = 0;

            final int callerTargetCount = getCallerTargetCount();
            if (position < callerTargetCount) {
                return TARGET_CALLER;
            }
            offset += callerTargetCount;

            final int serviceTargetCount = getServiceTargetCount();
            if (position - offset < serviceTargetCount) {
                return TARGET_SERVICE;
            }
            offset += serviceTargetCount;

            final int standardTargetCount = super.getCount();
            if (position - offset < standardTargetCount) {
                return TARGET_STANDARD;
            }

            return TARGET_BAD;
!!!82780855.java!!!	getItem(in position : int) : ResolverActivity::TargetInfo
            return targetInfoForPosition(position, true);
!!!82780983.java!!!	targetInfoForPosition(in position : int, inout filtered : boolean) : ResolverActivity::TargetInfo
            int offset = 0;

            final int callerTargetCount = getCallerTargetCount();
            if (position < callerTargetCount) {
                return mCallerTargets.get(position);
            }
            offset += callerTargetCount;

            final int serviceTargetCount = getServiceTargetCount();
            if (position - offset < serviceTargetCount) {
                return mServiceTargets.get(position - offset);
            }
            offset += serviceTargetCount;

            return filtered ? super.getItem(position - offset)
                    : getDisplayInfoAt(position - offset);
!!!82781111.java!!!	addServiceResults(inout origTarget : ResolverActivity::DisplayResolveInfo, inout targets : List<ChooserTarget>) : void
            if (DEBUG) Log.d(TAG, "addServiceResults " + origTarget + ", " + targets.size()
                    + " targets");
            final float parentScore = getScore(origTarget);
            Collections.sort(targets, mBaseTargetComparator);
            float lastScore = 0;
            for (int i = 0, N = Math.min(targets.size(), MAX_TARGETS_PER_SERVICE); i < N; i++) {
                final ChooserTarget target = targets.get(i);
                float targetScore = target.getScore();
                targetScore *= parentScore;
                targetScore *= mLateFee;
                if (i > 0 && targetScore >= lastScore) {
                    // Apply a decay so that the top app can't crowd out everything else.
                    // This incents ChooserTargetServices to define what's truly better.
                    targetScore = lastScore * 0.95f;
                }
                insertServiceTarget(new ChooserTargetInfo(origTarget, target, targetScore));

                if (DEBUG) {
                    Log.d(TAG, " => " + target.toString() + " score=" + targetScore
                            + " base=" + target.getScore()
                            + " lastScore=" + lastScore
                            + " parentScore=" + parentScore
                            + " lateFee=" + mLateFee);
                }

                lastScore = targetScore;
            }

            mLateFee *= 0.95f;

            notifyDataSetChanged();
!!!82781239.java!!!	setShowServiceTargets(inout show : boolean) : void
            mShowServiceTargets = show;
            notifyDataSetChanged();
!!!82781367.java!!!	insertServiceTarget(inout chooserTargetInfo : ChooserActivity::ChooserTargetInfo) : void
            final float newScore = chooserTargetInfo.getModifiedScore();
            for (int i = 0, N = mServiceTargets.size(); i < N; i++) {
                final ChooserTargetInfo serviceTarget = mServiceTargets.get(i);
                if (newScore > serviceTarget.getModifiedScore()) {
                    mServiceTargets.add(i, chooserTargetInfo);
                    return;
                }
            }
            mServiceTargets.add(chooserTargetInfo);
!!!82781495.java!!!	pruneServiceTargets() : void
            if (DEBUG) Log.d(TAG, "pruneServiceTargets");
            for (int i = mServiceTargets.size() - 1; i >= 0; i--) {
                final ChooserTargetInfo cti = mServiceTargets.get(i);
                if (!hasResolvedTarget(cti.getResolveInfo())) {
                    if (DEBUG) Log.d(TAG, " => " + i + " " + cti);
                    mServiceTargets.remove(i);
                }
            }
