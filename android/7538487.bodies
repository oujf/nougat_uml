class LocaleHelper
!!!82840631.java!!!	toSentenceCase(inout str : String, inout locale : Locale) : String
        if (str.isEmpty()) {
            return str;
        }
        final int firstCodePointLen = str.offsetByCodePoints(0, 1);
        return str.substring(0, firstCodePointLen).toUpperCase(locale)
                + str.substring(firstCodePointLen);
!!!82840759.java!!!	normalizeForSearch(inout str : String, inout locale : Locale) : String
        // TODO: tbd if it needs to be smarter (real normalization, remove accents, etc.)
        // If needed we might use case folding and ICU/CLDR's collation-based loose searching.
        // TODO: decide what should the locale be, the default locale, or the locale of the string.
        // Uppercase is better than lowercase because of things like sharp S, Greek sigma, ...
        return str.toUpperCase();
!!!82840887.java!!!	shouldUseDialectName(inout locale : Locale) : boolean
        final String lang = locale.getLanguage();
        return "fa".equals(lang) // Persian
                || "ro".equals(lang) // Romanian
                || "zh".equals(lang); // Chinese
!!!82841015.java!!!	getDisplayName(inout locale : Locale, inout displayLocale : Locale, inout sentenceCase : boolean) : String
        final ULocale displayULocale = ULocale.forLocale(displayLocale);
        String result = shouldUseDialectName(locale)
                ? ULocale.getDisplayNameWithDialect(locale.toLanguageTag(), displayULocale)
                : ULocale.getDisplayName(locale.toLanguageTag(), displayULocale);
        return sentenceCase ? toSentenceCase(result, displayLocale) : result;
!!!82841143.java!!!	getDisplayName(inout locale : Locale, inout sentenceCase : boolean) : String
        return getDisplayName(locale, Locale.getDefault(), sentenceCase);
!!!82841271.java!!!	getDisplayCountry(inout locale : Locale, inout displayLocale : Locale) : String
        return ULocale.getDisplayCountry(locale.toLanguageTag(), ULocale.forLocale(displayLocale));
!!!82841399.java!!!	getDisplayCountry(inout locale : Locale) : String
        return ULocale.getDisplayCountry(locale.toLanguageTag(), ULocale.getDefault());
!!!82841527.java!!!	getDisplayLocaleList(inout locales : LocaleList, inout displayLocale : Locale, in maxLocales : int) : String

        final Locale dispLocale = displayLocale == null ? Locale.getDefault() : displayLocale;

        final boolean ellipsisNeeded = locales.size() > maxLocales;
        final int localeCount, listCount;
        if (ellipsisNeeded) {
            localeCount = maxLocales;
            listCount = maxLocales + 1;  // One extra slot for the ellipsis
        } else {
            listCount = localeCount = locales.size();
        }
        final String[] localeNames = new String[listCount];
        for (int i = 0; i < localeCount; i++) {
            localeNames[i] = LocaleHelper.getDisplayName(locales.get(i), dispLocale, false);
        }
        if (ellipsisNeeded) {
            // Theoretically, we want to extract this from ICU's Resource Bundle for
            // "Ellipsis/final", which seems to have different strings than the normal ellipsis for
            // Hong Kong Traditional Chinese (zh_Hant_HK) and Dzongkha (dz). But that has two
            // problems: it's expensive to extract it, and in case the output string becomes
            // automatically ellipsized, it can result in weird output.
            localeNames[maxLocales] = TextUtils.ELLIPSIS_STRING;
        }

        ListFormatter lfn = ListFormatter.getInstance(dispLocale);
        return lfn.format((Object[]) localeNames);
!!!82841655.java!!!	addLikelySubtags(inout locale : Locale) : Locale
        return libcore.icu.ICU.addLikelySubtags(locale);
