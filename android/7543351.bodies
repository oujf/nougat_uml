class MenuItemImpl
!!!83341879.java!!!	MenuItemImpl(inout menu : MenuBuilder, in group : int, in id : int, in categoryOrder : int, in ordering : int, inout title : CharSequence, in showAsAction : int)

        String lang = menu.getContext().getResources().getConfiguration().locale.toString();
        if (sPrependShortcutLabel == null || !lang.equals(sLanguage)) {
            sLanguage = lang;
            // This is instantiated from the UI thread, so no chance of sync issues 
            sPrependShortcutLabel = menu.getContext().getResources().getString(
                    com.android.internal.R.string.prepend_shortcut_label);
            sEnterShortcutLabel = menu.getContext().getResources().getString(
                    com.android.internal.R.string.menu_enter_shortcut_label);
            sDeleteShortcutLabel = menu.getContext().getResources().getString(
                    com.android.internal.R.string.menu_delete_shortcut_label);
            sSpaceShortcutLabel = menu.getContext().getResources().getString(
                    com.android.internal.R.string.menu_space_shortcut_label);
        }
        
        mMenu = menu;
        mId = id;
        mGroup = group;
        mCategoryOrder = categoryOrder;
        mOrdering = ordering;
        mTitle = title;
        mShowAsAction = showAsAction;
!!!83342007.java!!!	invoke() : boolean
        if (mClickListener != null &&
            mClickListener.onMenuItemClick(this)) {
            return true;
        }

        if (mMenu.dispatchMenuItemSelected(mMenu, this)) {
            return true;
        }

        if (mItemCallback != null) {
            mItemCallback.run();
            return true;
        }

        if (mIntent != null) {
            try {
                mMenu.getContext().startActivity(mIntent);
                return true;
            } catch (ActivityNotFoundException e) {
                Log.e(TAG, "Can't find activity to handle intent; ignoring", e);
            }
        }

        if (mActionProvider != null && mActionProvider.onPerformDefaultAction()) {
            return true;
        }

        return false;
!!!83342135.java!!!	isEnabled() : boolean
        return (mFlags & ENABLED) != 0;
!!!83342263.java!!!	setEnabled(inout enabled : boolean) : MenuItem
        if (enabled) {
            mFlags |= ENABLED;
        } else {
            mFlags &= ~ENABLED;
        }

        mMenu.onItemsChanged(false);
        
        return this;
!!!83342391.java!!!	getGroupId() : int
        return mGroup;
!!!83342519.java!!!	getItemId() : int
        return mId;
!!!83342647.java!!!	getOrder() : int
        return mCategoryOrder;
!!!83342775.java!!!	getOrdering() : int
        return mOrdering; 
!!!83342903.java!!!	getIntent() : Intent
        return mIntent;
!!!83343031.java!!!	setIntent(inout intent : Intent) : MenuItem
        mIntent = intent;
        return this;
!!!83343159.java!!!	getCallback() : Runnable
        return mItemCallback;
!!!83343287.java!!!	setCallback(inout callback : Runnable) : MenuItem
        mItemCallback = callback;
        return this;
!!!83343415.java!!!	getAlphabeticShortcut() : char
        return mShortcutAlphabeticChar;
!!!83343543.java!!!	setAlphabeticShortcut(in alphaChar : char) : MenuItem
        if (mShortcutAlphabeticChar == alphaChar) return this;
        
        mShortcutAlphabeticChar = Character.toLowerCase(alphaChar);
        
        mMenu.onItemsChanged(false);
        
        return this;
!!!83343671.java!!!	getNumericShortcut() : char
        return mShortcutNumericChar;
!!!83343799.java!!!	setNumericShortcut(in numericChar : char) : MenuItem
        if (mShortcutNumericChar == numericChar) return this;
        
        mShortcutNumericChar = numericChar;
        
        mMenu.onItemsChanged(false);
        
        return this;
!!!83343927.java!!!	setShortcut(in numericChar : char, in alphaChar : char) : MenuItem
        mShortcutNumericChar = numericChar;
        mShortcutAlphabeticChar = Character.toLowerCase(alphaChar);
        
        mMenu.onItemsChanged(false);
        
        return this;
!!!83344055.java!!!	getShortcut() : char
        return (mMenu.isQwertyMode() ? mShortcutAlphabeticChar : mShortcutNumericChar);
!!!83344183.java!!!	getShortcutLabel() : String

        char shortcut = getShortcut();
        if (shortcut == 0) {
            return "";
        }
        
        StringBuilder sb = new StringBuilder(sPrependShortcutLabel);
        switch (shortcut) {
        
            case '\n':
                sb.append(sEnterShortcutLabel);
                break;
            
            case '\b':
                sb.append(sDeleteShortcutLabel);
                break;
            
            case ' ':
                sb.append(sSpaceShortcutLabel);
                break;
            
            default:
                sb.append(shortcut);
                break;
        }
        
        return sb.toString();
!!!83344311.java!!!	shouldShowShortcut() : boolean
        // Show shortcuts if the menu is supposed to show shortcuts AND this item has a shortcut
        return mMenu.isShortcutsVisible() && (getShortcut() != 0);
!!!83344439.java!!!	getSubMenu() : SubMenu
        return mSubMenu;
!!!83344567.java!!!	hasSubMenu() : boolean
        return mSubMenu != null;
!!!83344695.java!!!	setSubMenu(inout subMenu : SubMenuBuilder) : void
        mSubMenu = subMenu;
        
        subMenu.setHeaderTitle(getTitle());
!!!83344823.java!!!	getTitle() : CharSequence
        return mTitle;
!!!83344951.java!!!	getTitleForItemView(inout itemView : MenuView::ItemView) : CharSequence
        return ((itemView != null) && itemView.prefersCondensedTitle())
                ? getTitleCondensed()
                : getTitle();
!!!83345079.java!!!	setTitle(inout title : CharSequence) : MenuItem
        mTitle = title;

        mMenu.onItemsChanged(false);
        
        if (mSubMenu != null) {
            mSubMenu.setHeaderTitle(title);
        }
        
        return this;
!!!83345207.java!!!	setTitle(in title : int) : MenuItem
        return setTitle(mMenu.getContext().getString(title));
!!!83345335.java!!!	getTitleCondensed() : CharSequence
        return mTitleCondensed != null ? mTitleCondensed : mTitle;
!!!83345463.java!!!	setTitleCondensed(inout title : CharSequence) : MenuItem
        mTitleCondensed = title;

        // Could use getTitle() in the loop below, but just cache what it would do here 
        if (title == null) {
            title = mTitle;
        }
        
        mMenu.onItemsChanged(false);
        
        return this;
!!!83345591.java!!!	getIcon() : Drawable
        if (mIconDrawable != null) {
            return mIconDrawable;
        }

        if (mIconResId != NO_ICON) {
            Drawable icon =  mMenu.getContext().getDrawable(mIconResId);
            mIconResId = NO_ICON;
            mIconDrawable = icon;
            return icon;
        }
        
        return null;
!!!83345719.java!!!	setIcon(inout icon : Drawable) : MenuItem
        mIconResId = NO_ICON;
        mIconDrawable = icon;
        mMenu.onItemsChanged(false);
        
        return this;
!!!83345847.java!!!	setIcon(in iconResId : int) : MenuItem
        mIconDrawable = null;
        mIconResId = iconResId;

        // If we have a view, we need to push the Drawable to them
        mMenu.onItemsChanged(false);
        
        return this;
!!!83345975.java!!!	isCheckable() : boolean
        return (mFlags & CHECKABLE) == CHECKABLE;
!!!83346103.java!!!	setCheckable(inout checkable : boolean) : MenuItem
        final int oldFlags = mFlags;
        mFlags = (mFlags & ~CHECKABLE) | (checkable ? CHECKABLE : 0);
        if (oldFlags != mFlags) {
            mMenu.onItemsChanged(false);
        }
        
        return this;
!!!83346231.java!!!	setExclusiveCheckable(inout exclusive : boolean) : void
        mFlags = (mFlags & ~EXCLUSIVE) | (exclusive ? EXCLUSIVE : 0);
!!!83346359.java!!!	isExclusiveCheckable() : boolean
        return (mFlags & EXCLUSIVE) != 0;
!!!83346487.java!!!	isChecked() : boolean
        return (mFlags & CHECKED) == CHECKED;
!!!83346615.java!!!	setChecked(inout checked : boolean) : MenuItem
        if ((mFlags & EXCLUSIVE) != 0) {
            // Call the method on the Menu since it knows about the others in this
            // exclusive checkable group
            mMenu.setExclusiveItemChecked(this);
        } else {
            setCheckedInt(checked);
        }
        
        return this;
!!!83346743.java!!!	setCheckedInt(inout checked : boolean) : void
        final int oldFlags = mFlags;
        mFlags = (mFlags & ~CHECKED) | (checked ? CHECKED : 0);
        if (oldFlags != mFlags) {
            mMenu.onItemsChanged(false);
        }
!!!83346871.java!!!	isVisible() : boolean
        if (mActionProvider != null && mActionProvider.overridesItemVisibility()) {
            return (mFlags & HIDDEN) == 0 && mActionProvider.isVisible();
        }
        return (mFlags & HIDDEN) == 0;
!!!83346999.java!!!	setVisibleInt(inout shown : boolean) : boolean
        final int oldFlags = mFlags;
        mFlags = (mFlags & ~HIDDEN) | (shown ? 0 : HIDDEN);
        return oldFlags != mFlags;
!!!83347127.java!!!	setVisible(inout shown : boolean) : MenuItem
        // Try to set the shown state to the given state. If the shown state was changed
        // (i.e. the previous state isn't the same as given state), notify the parent menu that
        // the shown state has changed for this item
        if (setVisibleInt(shown)) mMenu.onItemVisibleChanged(this);
        
        return this;
!!!83347255.java!!!	setOnMenuItemClickListener(inout clickListener : MenuItem::OnMenuItemClickListener) : MenuItem
        mClickListener = clickListener;
        return this;
!!!83347383.java!!!	toString() : String
        return mTitle != null ? mTitle.toString() : null;
!!!83347511.java!!!	setMenuInfo(inout menuInfo : ContextMenu::ContextMenuInfo) : void
        mMenuInfo = menuInfo;
!!!83347639.java!!!	getMenuInfo() : ContextMenu::ContextMenuInfo
        return mMenuInfo;
!!!83347767.java!!!	actionFormatChanged() : void
        mMenu.onItemActionRequestChanged(this);
!!!83347895.java!!!	shouldShowIcon() : boolean
        return mMenu.getOptionalIconsVisible();
!!!83348023.java!!!	isActionButton() : boolean
        return (mFlags & IS_ACTION) == IS_ACTION;
!!!83348151.java!!!	requestsActionButton() : boolean
        return (mShowAsAction & SHOW_AS_ACTION_IF_ROOM) == SHOW_AS_ACTION_IF_ROOM;
!!!83348279.java!!!	requiresActionButton() : boolean
        return (mShowAsAction & SHOW_AS_ACTION_ALWAYS) == SHOW_AS_ACTION_ALWAYS;
!!!83348407.java!!!	setIsActionButton(inout isActionButton : boolean) : void
        if (isActionButton) {
            mFlags |= IS_ACTION;
        } else {
            mFlags &= ~IS_ACTION;
        }
!!!83348535.java!!!	showsTextAsAction() : boolean
        return (mShowAsAction & SHOW_AS_ACTION_WITH_TEXT) == SHOW_AS_ACTION_WITH_TEXT;
!!!83348663.java!!!	setShowAsAction(in actionEnum : int) : void
        switch (actionEnum & SHOW_AS_ACTION_MASK) {
            case SHOW_AS_ACTION_ALWAYS:
            case SHOW_AS_ACTION_IF_ROOM:
            case SHOW_AS_ACTION_NEVER:
                // Looks good!
                break;

            default:
                // Mutually exclusive options selected!
                throw new IllegalArgumentException("SHOW_AS_ACTION_ALWAYS, SHOW_AS_ACTION_IF_ROOM,"
                        + " and SHOW_AS_ACTION_NEVER are mutually exclusive.");
        }
        mShowAsAction = actionEnum;
        mMenu.onItemActionRequestChanged(this);
!!!83348791.java!!!	setActionView(inout view : View) : MenuItem
        mActionView = view;
        mActionProvider = null;
        if (view != null && view.getId() == View.NO_ID && mId > 0) {
            view.setId(mId);
        }
        mMenu.onItemActionRequestChanged(this);
        return this;
!!!83348919.java!!!	setActionView(in resId : int) : MenuItem
        final Context context = mMenu.getContext();
        final LayoutInflater inflater = LayoutInflater.from(context);
        setActionView(inflater.inflate(resId, new LinearLayout(context), false));
        return this;
!!!83349047.java!!!	getActionView() : View
        if (mActionView != null) {
            return mActionView;
        } else if (mActionProvider != null) {
            mActionView = mActionProvider.onCreateActionView(this);
            return mActionView;
        } else {
            return null;
        }
!!!83349175.java!!!	getActionProvider() : ActionProvider
        return mActionProvider;
!!!83349303.java!!!	setActionProvider(inout actionProvider : ActionProvider) : MenuItem
        if (mActionProvider != null) {
            mActionProvider.reset();
        }
        mActionView = null;
        mActionProvider = actionProvider;
        mMenu.onItemsChanged(true); // Measurement can be changed
        if (mActionProvider != null) {
            mActionProvider.setVisibilityListener(new ActionProvider.VisibilityListener() {
                @Override public void onActionProviderVisibilityChanged(boolean isVisible) {
                    mMenu.onItemVisibleChanged(MenuItemImpl.this);
                }
            });
        }
        return this;
!!!83349431.java!!!	setShowAsActionFlags(in actionEnum : int) : MenuItem
        setShowAsAction(actionEnum);
        return this;
!!!83349559.java!!!	expandActionView() : boolean
        if (!hasCollapsibleActionView()) {
            return false;
        }

        if (mOnActionExpandListener == null ||
                mOnActionExpandListener.onMenuItemActionExpand(this)) {
            return mMenu.expandItemActionView(this);
        }

        return false;
!!!83349687.java!!!	collapseActionView() : boolean
        if ((mShowAsAction & SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW) == 0) {
            return false;
        }
        if (mActionView == null) {
            // We're already collapsed if we have no action view.
            return true;
        }

        if (mOnActionExpandListener == null ||
                mOnActionExpandListener.onMenuItemActionCollapse(this)) {
            return mMenu.collapseItemActionView(this);
        }

        return false;
!!!83349815.java!!!	setOnActionExpandListener(inout listener : MenuItem::OnActionExpandListener) : MenuItem
        mOnActionExpandListener = listener;
        return this;
!!!83349943.java!!!	hasCollapsibleActionView() : boolean
        if ((mShowAsAction & SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW) != 0) {
            if (mActionView == null && mActionProvider != null) {
                mActionView = mActionProvider.onCreateActionView(this);
            }
            return mActionView != null;
        }
        return false;
!!!83350071.java!!!	setActionViewExpanded(inout isExpanded : boolean) : void
        mIsActionViewExpanded = isExpanded;
        mMenu.onItemsChanged(false);
!!!83350199.java!!!	isActionViewExpanded() : boolean
        return mIsActionViewExpanded;
