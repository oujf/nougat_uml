class SparseMappingTable
!!!82919095.java!!!	SparseMappingTable()
        mLongs.add(new long[ARRAY_SIZE]);
!!!82919223.java!!!	reset() : void
        // Clear out mLongs, and prime it with a new array of data
        mLongs.clear();
        mLongs.add(new long[ARRAY_SIZE]);
        mNextIndex = 0;

        // Increment out sequence counter, because all of the tables will
        // now be out of sync with the data.
        mSequence++;
!!!82919351.java!!!	writeToParcel(inout out : Parcel) : void
        out.writeInt(mSequence);
        out.writeInt(mNextIndex);
        final int N = mLongs.size();
        out.writeInt(N);
        for (int i=0; i<N-1; i++) {
            final long[] array = mLongs.get(i);
            out.writeInt(array.length);
            writeCompactedLongArray(out, array, array.length);
        }
        // save less for the last one. upon re-loading they'll just start a new array.
        final long[] lastLongs = mLongs.get(N-1);
        out.writeInt(mNextIndex);
        writeCompactedLongArray(out, lastLongs, mNextIndex);
!!!82919479.java!!!	readFromParcel(inout in : Parcel) : void
        mSequence = in.readInt();
        mNextIndex = in.readInt();

        mLongs.clear();
        final int N = in.readInt();
        for (int i=0; i<N; i++) {
            final int size = in.readInt();
            final long[] array = new long[size];
            readCompactedLongArray(in, array, size);
            mLongs.add(array);
        }
!!!82919607.java!!!	dumpInternalState(inout includeData : boolean) : String
        final StringBuilder sb = new StringBuilder();
        sb.append("SparseMappingTable{");
        sb.append("mSequence=");
        sb.append(mSequence);
        sb.append(" mNextIndex=");
        sb.append(mNextIndex);
        sb.append(" mLongs.size=");
        final int N = mLongs.size();
        sb.append(N);
        sb.append("\n");
        if (includeData) {
            for (int i=0; i<N; i++) {
                final long[] array = mLongs.get(i);
                for (int j=0; j<array.length; j++) {
                    if (i == N-1 && j == mNextIndex) {
                        break;
                    }
                    sb.append(String.format(" %4d %d 0x%016x %-19d\n", i, j, array[j], array[j]));
                }
            }
        }
        sb.append("}");
        return sb.toString();
!!!82919735.java!!!	writeCompactedLongArray(inout out : Parcel, inout array : long [[]], in num : int) : void
        for (int i=0; i<num; i++) {
            long val = array[i];
            if (val < 0) {
                Slog.w(TAG, "Time val negative: " + val);
                val = 0;
            }
            if (val <= Integer.MAX_VALUE) {
                out.writeInt((int)val);
            } else {
                int top = ~((int)((val>>32)&0x7fffffff));
                int bottom = (int)(val&0x0ffffffffL);
                out.writeInt(top);
                out.writeInt(bottom);
            }
        }
!!!82919863.java!!!	readCompactedLongArray(inout in : Parcel, inout array : long [[]], in num : int) : void
        final int alen = array.length;
        if (num > alen) {
            logOrThrow("bad array lengths: got " + num + " array is " + alen);
            return;
        }
        int i;
        for (i=0; i<num; i++) {
            int val = in.readInt();
            if (val >= 0) {
                array[i] = val;
            } else {
                int bottom = in.readInt();
                array[i] = (((long)~val)<<32) | bottom;
            }
        }
        while (i < alen) {
            array[i] = 0;
            i++;
        }
!!!82919991.java!!!	getIdFromKey(in key : int) : byte
        return (byte)((key >> ID_SHIFT) & ID_MASK);
!!!82920119.java!!!	getArrayFromKey(in key : int) : int
        return (key >> ARRAY_SHIFT) & ARRAY_MASK;
!!!82920247.java!!!	getIndexFromKey(in key : int) : int
        return (key >> INDEX_SHIFT) & INDEX_MASK;
!!!82920375.java!!!	logOrThrow(inout message : String) : void
        logOrThrow(message, new RuntimeException("Stack trace"));
!!!82920503.java!!!	logOrThrow(inout message : String, inout th : Throwable) : void
        Slog.e(TAG, message, th);
        if (Build.TYPE.equals("eng")) {
            throw new RuntimeException(message, th);
        }
