class SysMemUsageTable
!!!82939447.java!!!	SysMemUsageTable(inout tableData : SparseMappingTable)
        super(tableData);
!!!82939575.java!!!	mergeStats(inout that : SysMemUsageTable) : void
        final int N = that.getKeyCount();
        for (int i=0; i<N; i++) {
            final int key = that.getKeyAt(i);

            final int state = SparseMappingTable.getIdFromKey(key);
            final long[] addData = that.getArrayForKey(key);
            final int addOff = SparseMappingTable.getIndexFromKey(key);

            mergeStats(state, addData, addOff);
        }
!!!82939703.java!!!	mergeStats(in state : int, inout addData : long [[]], in addOff : int) : void
        final int key = getOrAddKey((byte)state, SYS_MEM_USAGE_COUNT);
        
        final long[] dstData = getArrayForKey(key);
        final int dstOff = SparseMappingTable.getIndexFromKey(key);

        SysMemUsageTable.mergeSysMemUsage(dstData, dstOff, addData, addOff);
!!!82939831.java!!!	getTotalMemUsage() : long
        long[] total = new long[SYS_MEM_USAGE_COUNT];
        final int N = getKeyCount();
        for (int i=0; i<N; i++) {
            final int key = getKeyAt(i);

            final long[] addData = getArrayForKey(key);
            final int addOff = SparseMappingTable.getIndexFromKey(key);

            SysMemUsageTable.mergeSysMemUsage(total, 0, addData, addOff);
        }
        return total;
!!!82939959.java!!!	mergeSysMemUsage(inout dstData : long [[]], in dstOff : int, inout addData : long [[]], in addOff : int) : void
        final long dstCount = dstData[dstOff+SYS_MEM_USAGE_SAMPLE_COUNT];
        final long addCount = addData[addOff+SYS_MEM_USAGE_SAMPLE_COUNT];
        if (dstCount == 0) {
            dstData[dstOff+SYS_MEM_USAGE_SAMPLE_COUNT] = addCount;
            for (int i=SYS_MEM_USAGE_CACHED_MINIMUM; i<SYS_MEM_USAGE_COUNT; i++) {
                dstData[dstOff+i] = addData[addOff+i];
            }
        } else if (addCount > 0) {
            dstData[dstOff+SYS_MEM_USAGE_SAMPLE_COUNT] = dstCount + addCount;
            for (int i=SYS_MEM_USAGE_CACHED_MINIMUM; i<SYS_MEM_USAGE_COUNT; i+=3) {
                if (dstData[dstOff+i] > addData[addOff+i]) {
                    dstData[dstOff+i] = addData[addOff+i];
                }
                dstData[dstOff+i+1] = (long)(
                        ((dstData[dstOff+i+1]*(double)dstCount)
                                + (addData[addOff+i+1]*(double)addCount))
                                / (dstCount+addCount) );
                if (dstData[dstOff+i+2] < addData[addOff+i+2]) {
                    dstData[dstOff+i+2] = addData[addOff+i+2];
                }
            }
        }
!!!82940087.java!!!	dump(inout pw : PrintWriter, inout prefix : String, inout screenStates : int [[]], inout memStates : int [[]]) : void
        int printedScreen = -1;
        for (int is=0; is<screenStates.length; is++) {
            int printedMem = -1;
            for (int im=0; im<memStates.length; im++) {
                final int iscreen = screenStates[is];
                final int imem = memStates[im];
                final int bucket = ((iscreen + imem) * STATE_COUNT);
                long count = getValueForId((byte)bucket, SYS_MEM_USAGE_SAMPLE_COUNT);
                if (count > 0) {
                    pw.print(prefix);
                    if (screenStates.length > 1) {
                        DumpUtils.printScreenLabel(pw, printedScreen != iscreen
                                ? iscreen : STATE_NOTHING);
                        printedScreen = iscreen;
                    }
                    if (memStates.length > 1) {
                        DumpUtils.printMemLabel(pw,
                                printedMem != imem ? imem : STATE_NOTHING, '\0');
                        printedMem = imem;
                    }
                    pw.print(": ");
                    pw.print(count);
                    pw.println(" samples:");
                    dumpCategory(pw, prefix, "  Cached", bucket, SYS_MEM_USAGE_CACHED_MINIMUM);
                    dumpCategory(pw, prefix, "  Free", bucket, SYS_MEM_USAGE_FREE_MINIMUM);
                    dumpCategory(pw, prefix, "  ZRam", bucket, SYS_MEM_USAGE_ZRAM_MINIMUM);
                    dumpCategory(pw, prefix, "  Kernel", bucket, SYS_MEM_USAGE_KERNEL_MINIMUM);
                    dumpCategory(pw, prefix, "  Native", bucket, SYS_MEM_USAGE_NATIVE_MINIMUM);
                }
            }
        }
!!!82940215.java!!!	dumpCategory(inout pw : PrintWriter, inout prefix : String, inout label : String, in bucket : int, in index : int) : void
        pw.print(prefix); pw.print(label);
        pw.print(": ");
        DebugUtils.printSizeValue(pw, getValueForId((byte)bucket, index) * 1024);
        pw.print(" min, ");
        DebugUtils.printSizeValue(pw, getValueForId((byte)bucket, index + 1) * 1024);
        pw.print(" avg, ");
        DebugUtils.printSizeValue(pw, getValueForId((byte)bucket, index+2) * 1024);
        pw.println(" max");
