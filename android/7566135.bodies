class DividerSnapAlgorithm
!!!83079863.java!!!	create(inout ctx : Context, inout insets : Rect) : DividerSnapAlgorithm
        DisplayInfo displayInfo = new DisplayInfo();
        ctx.getSystemService(DisplayManager.class).getDisplay(
                Display.DEFAULT_DISPLAY).getDisplayInfo(displayInfo);
        int dividerWindowWidth = ctx.getResources().getDimensionPixelSize(
                com.android.internal.R.dimen.docked_stack_divider_thickness);
        int dividerInsets = ctx.getResources().getDimensionPixelSize(
                com.android.internal.R.dimen.docked_stack_divider_insets);
        return new DividerSnapAlgorithm(ctx.getResources(),
                displayInfo.logicalWidth, displayInfo.logicalHeight,
                dividerWindowWidth - 2 * dividerInsets,
                ctx.getApplicationContext().getResources().getConfiguration().orientation
                        == Configuration.ORIENTATION_PORTRAIT,
                insets);
!!!83079991.java!!!	DividerSnapAlgorithm(inout res : Resources, in displayWidth : int, in displayHeight : int, in dividerSize : int, inout isHorizontalDivision : boolean, inout insets : Rect)
        mMinFlingVelocityPxPerSecond =
                MIN_FLING_VELOCITY_DP_PER_SECOND * res.getDisplayMetrics().density;
        mMinDismissVelocityPxPerSecond =
                MIN_DISMISS_VELOCITY_DP_PER_SECOND * res.getDisplayMetrics().density;
        mDividerSize = dividerSize;
        mDisplayWidth = displayWidth;
        mDisplayHeight = displayHeight;
        mIsHorizontalDivision = isHorizontalDivision;
        mInsets.set(insets);
        mSnapMode = res.getInteger(
                com.android.internal.R.integer.config_dockedStackDividerSnapMode);
        mFixedRatio = res.getFraction(
                com.android.internal.R.fraction.docked_stack_divider_fixed_ratio, 1, 1);
        mMinimalSizeResizableTask = res.getDimensionPixelSize(
                com.android.internal.R.dimen.default_minimal_size_resizable_task);
        calculateTargets(isHorizontalDivision);
        mFirstSplitTarget = mTargets.get(1);
        mLastSplitTarget = mTargets.get(mTargets.size() - 2);
        mDismissStartTarget = mTargets.get(0);
        mDismissEndTarget = mTargets.get(mTargets.size() - 1);
        mMiddleTarget = mTargets.get(mTargets.size() / 2);
!!!83080119.java!!!	isSplitScreenFeasible() : boolean
        int statusBarSize = mInsets.top;
        int navBarSize = mIsHorizontalDivision ? mInsets.bottom : mInsets.right;
        int size = mIsHorizontalDivision
                ? mDisplayHeight
                : mDisplayWidth;
        int availableSpace = size - navBarSize - statusBarSize - mDividerSize;
        return availableSpace / 2 >= mMinimalSizeResizableTask;
!!!83080247.java!!!	calculateSnapTarget(in position : int, in velocity : float) : DividerSnapAlgorithm::SnapTarget
        return calculateSnapTarget(position, velocity, true /* hardDismiss */);
!!!83080375.java!!!	calculateSnapTarget(in position : int, in velocity : float, inout hardDismiss : boolean) : DividerSnapAlgorithm::SnapTarget
        if (position < mFirstSplitTarget.position && velocity < -mMinDismissVelocityPxPerSecond) {
            return mDismissStartTarget;
        }
        if (position > mLastSplitTarget.position && velocity > mMinDismissVelocityPxPerSecond) {
            return mDismissEndTarget;
        }
        if (Math.abs(velocity) < mMinFlingVelocityPxPerSecond) {
            return snap(position, hardDismiss);
        }
        if (velocity < 0) {
            return mFirstSplitTarget;
        } else {
            return mLastSplitTarget;
        }
!!!83080503.java!!!	calculateNonDismissingSnapTarget(in position : int) : DividerSnapAlgorithm::SnapTarget
        SnapTarget target = snap(position, false /* hardDismiss */);
        if (target == mDismissStartTarget) {
            return mFirstSplitTarget;
        } else if (target == mDismissEndTarget) {
            return mLastSplitTarget;
        } else {
            return target;
        }
!!!83080631.java!!!	calculateDismissingFraction(in position : int) : float
        if (position < mFirstSplitTarget.position) {
            return 1f - (float) (position - getStartInset())
                    / (mFirstSplitTarget.position - getStartInset());
        } else if (position > mLastSplitTarget.position) {
            return (float) (position - mLastSplitTarget.position)
                    / (mDismissEndTarget.position - mLastSplitTarget.position - mDividerSize);
        }
        return 0f;
!!!83080759.java!!!	getClosestDismissTarget(in position : int) : DividerSnapAlgorithm::SnapTarget
        if (position < mFirstSplitTarget.position) {
            return mDismissStartTarget;
        } else if (position > mLastSplitTarget.position) {
            return mDismissEndTarget;
        } else if (position - mDismissStartTarget.position
                < mDismissEndTarget.position - position) {
            return mDismissStartTarget;
        } else {
            return mDismissEndTarget;
        }
!!!83080887.java!!!	getFirstSplitTarget() : DividerSnapAlgorithm::SnapTarget
        return mFirstSplitTarget;
!!!83081015.java!!!	getLastSplitTarget() : DividerSnapAlgorithm::SnapTarget
        return mLastSplitTarget;
!!!83081143.java!!!	getDismissStartTarget() : DividerSnapAlgorithm::SnapTarget
        return mDismissStartTarget;
!!!83081271.java!!!	getDismissEndTarget() : DividerSnapAlgorithm::SnapTarget
        return mDismissEndTarget;
!!!83081399.java!!!	getStartInset() : int
        if (mIsHorizontalDivision) {
            return mInsets.top;
        } else {
            return mInsets.left;
        }
!!!83081527.java!!!	getEndInset() : int
        if (mIsHorizontalDivision) {
            return mInsets.bottom;
        } else {
            return mInsets.right;
        }
!!!83081655.java!!!	snap(in position : int, inout hardDismiss : boolean) : DividerSnapAlgorithm::SnapTarget
        int minIndex = -1;
        float minDistance = Float.MAX_VALUE;
        int size = mTargets.size();
        for (int i = 0; i < size; i++) {
            SnapTarget target = mTargets.get(i);
            float distance = Math.abs(position - target.position);
            if (hardDismiss) {
                distance /= target.distanceMultiplier;
            }
            if (distance < minDistance) {
                minIndex = i;
                minDistance = distance;
            }
        }
        return mTargets.get(minIndex);
!!!83081783.java!!!	calculateTargets(inout isHorizontalDivision : boolean) : void
        mTargets.clear();
        int dividerMax = isHorizontalDivision
                ? mDisplayHeight
                : mDisplayWidth;
        mTargets.add(new SnapTarget(-mDividerSize, -mDividerSize, SnapTarget.FLAG_DISMISS_START,
                0.35f));
        switch (mSnapMode) {
            case SNAP_MODE_16_9:
                addRatio16_9Targets(isHorizontalDivision, dividerMax);
                break;
            case SNAP_FIXED_RATIO:
                addFixedDivisionTargets(isHorizontalDivision, dividerMax);
                break;
            case SNAP_ONLY_1_1:
                addMiddleTarget(isHorizontalDivision);
                break;
        }
        int navBarSize = isHorizontalDivision ? mInsets.bottom : mInsets.right;
        mTargets.add(new SnapTarget(dividerMax - navBarSize, dividerMax,
                SnapTarget.FLAG_DISMISS_END, 0.35f));
!!!83081911.java!!!	addNonDismissingTargets(inout isHorizontalDivision : boolean, in topPosition : int, in bottomPosition : int, in dividerMax : int) : void
        maybeAddTarget(topPosition, topPosition - mInsets.top);
        addMiddleTarget(isHorizontalDivision);
        maybeAddTarget(bottomPosition, dividerMax - mInsets.bottom
                - (bottomPosition + mDividerSize));
!!!83082039.java!!!	addFixedDivisionTargets(inout isHorizontalDivision : boolean, in dividerMax : int) : void
        int start = isHorizontalDivision ? mInsets.top : mInsets.left;
        int end = isHorizontalDivision
                ? mDisplayHeight - mInsets.bottom
                : mDisplayWidth - mInsets.right;
        int size = (int) (mFixedRatio * (end - start)) - mDividerSize / 2;
        int topPosition = start + size;
        int bottomPosition = end - size - mDividerSize;
        addNonDismissingTargets(isHorizontalDivision, topPosition, bottomPosition, dividerMax);
!!!83082167.java!!!	addRatio16_9Targets(inout isHorizontalDivision : boolean, in dividerMax : int) : void
        int start = isHorizontalDivision ? mInsets.top : mInsets.left;
        int end = isHorizontalDivision
                ? mDisplayHeight - mInsets.bottom
                : mDisplayWidth - mInsets.right;
        int startOther = isHorizontalDivision ? mInsets.left : mInsets.top;
        int endOther = isHorizontalDivision
                ? mDisplayWidth - mInsets.right
                : mDisplayHeight - mInsets.bottom;
        float size = 9.0f / 16.0f * (endOther - startOther);
        int sizeInt = (int) Math.floor(size);
        int topPosition = start + sizeInt;
        int bottomPosition = end - sizeInt - mDividerSize;
        addNonDismissingTargets(isHorizontalDivision, topPosition, bottomPosition, dividerMax);
!!!83082295.java!!!	maybeAddTarget(in position : int, in smallerSize : int) : void
        if (smallerSize >= mMinimalSizeResizableTask) {
            mTargets.add(new SnapTarget(position, position, SnapTarget.FLAG_NONE));
        }
!!!83082423.java!!!	addMiddleTarget(inout isHorizontalDivision : boolean) : void
        int position = DockedDividerUtils.calculateMiddlePosition(isHorizontalDivision,
                mInsets, mDisplayWidth, mDisplayHeight, mDividerSize);
        mTargets.add(new SnapTarget(position, position, SnapTarget.FLAG_NONE));
!!!83082551.java!!!	getMiddleTarget() : DividerSnapAlgorithm::SnapTarget
        return mMiddleTarget;
!!!83082679.java!!!	getNextTarget(inout snapTarget : DividerSnapAlgorithm::SnapTarget) : DividerSnapAlgorithm::SnapTarget
        int index = mTargets.indexOf(snapTarget);
        if (index != -1 && index < mTargets.size() - 1) {
            return mTargets.get(index + 1);
        }
        return snapTarget;
!!!83082807.java!!!	getPreviousTarget(inout snapTarget : DividerSnapAlgorithm::SnapTarget) : DividerSnapAlgorithm::SnapTarget
        int index = mTargets.indexOf(snapTarget);
        if (index != -1 && index > 0) {
            return mTargets.get(index - 1);
        }
        return snapTarget;
!!!83082935.java!!!	isFirstSplitTargetAvailable() : boolean
        return mFirstSplitTarget != mMiddleTarget;
!!!83083063.java!!!	isLastSplitTargetAvailable() : boolean
        return mLastSplitTarget != mMiddleTarget;
!!!83083191.java!!!	cycleNonDismissTarget(inout snapTarget : DividerSnapAlgorithm::SnapTarget, in increment : int) : DividerSnapAlgorithm::SnapTarget
        int index = mTargets.indexOf(snapTarget);
        if (index != -1) {
            SnapTarget newTarget = mTargets.get((index + mTargets.size() + increment)
                    % mTargets.size());
            if (newTarget == mDismissStartTarget) {
                return mLastSplitTarget;
            } else if (newTarget == mDismissEndTarget) {
                return mFirstSplitTarget;
            } else {
                return newTarget;
            }
        }
        return snapTarget;
