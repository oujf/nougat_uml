class Preconditions
!!!83199543.java!!!	checkArgument(inout expression : boolean) : void
        if (!expression) {
            throw new IllegalArgumentException();
        }
!!!83199671.java!!!	checkArgument(inout expression : boolean, in errorMessage : Object) : void
        if (!expression) {
            throw new IllegalArgumentException(String.valueOf(errorMessage));
        }
!!!83199799.java!!!	checkStringNotEmpty(in string : T) : T
        if (TextUtils.isEmpty(string)) {
            throw new IllegalArgumentException();
        }
        return string;
!!!83199927.java!!!	checkStringNotEmpty(in string : T, in errorMessage : Object) : T
        if (TextUtils.isEmpty(string)) {
            throw new IllegalArgumentException(String.valueOf(errorMessage));
        }
        return string;
!!!83200055.java!!!	checkNotNull(in reference : T) : T
        if (reference == null) {
            throw new NullPointerException();
        }
        return reference;
!!!83200183.java!!!	checkNotNull(in reference : T, in errorMessage : Object) : T
        if (reference == null) {
            throw new NullPointerException(String.valueOf(errorMessage));
        }
        return reference;
!!!83200311.java!!!	checkState(in expression : boolean, inout message : String) : void
        if (!expression) {
            throw new IllegalStateException(message);
        }
!!!83200439.java!!!	checkState(in expression : boolean) : void
        checkState(expression, null);
!!!83200567.java!!!	checkFlagsArgument(in requestedFlags : int, in allowedFlags : int) : int
        if ((requestedFlags & allowedFlags) != requestedFlags) {
            throw new IllegalArgumentException("Requested flags 0x"
                    + Integer.toHexString(requestedFlags) + ", but only 0x"
                    + Integer.toHexString(allowedFlags) + " are allowed");
        }

        return requestedFlags;
!!!83200695.java!!!	checkArgumentNonnegative(in value : int, in errorMessage : String) : int
        if (value < 0) {
            throw new IllegalArgumentException(errorMessage);
        }

        return value;
!!!83200823.java!!!	checkArgumentNonnegative(in value : int) : int
        if (value < 0) {
            throw new IllegalArgumentException();
        }

        return value;
!!!83200951.java!!!	checkArgumentNonnegative(in value : long) : long
        if (value < 0) {
            throw new IllegalArgumentException();
        }

        return value;
!!!83201079.java!!!	checkArgumentNonnegative(in value : long, in errorMessage : String) : long
        if (value < 0) {
            throw new IllegalArgumentException(errorMessage);
        }

        return value;
!!!83201207.java!!!	checkArgumentPositive(in value : int, in errorMessage : String) : int
        if (value <= 0) {
            throw new IllegalArgumentException(errorMessage);
        }

        return value;
!!!83201335.java!!!	checkArgumentFinite(in value : float, in valueName : String) : float
        if (Float.isNaN(value)) {
            throw new IllegalArgumentException(valueName + " must not be NaN");
        } else if (Float.isInfinite(value)) {
            throw new IllegalArgumentException(valueName + " must not be infinite");
        }

        return value;
!!!83201463.java!!!	checkArgumentInRange(in value : float, in lower : float, in upper : float, inout valueName : String) : float
        if (Float.isNaN(value)) {
            throw new IllegalArgumentException(valueName + " must not be NaN");
        } else if (value < lower) {
            throw new IllegalArgumentException(
                    String.format(
                            "%s is out of range of [%f, %f] (too low)", valueName, lower, upper));
        } else if (value > upper) {
            throw new IllegalArgumentException(
                    String.format(
                            "%s is out of range of [%f, %f] (too high)", valueName, lower, upper));
        }

        return value;
!!!83201591.java!!!	checkArgumentInRange(in value : int, in lower : int, in upper : int, inout valueName : String) : int
        if (value < lower) {
            throw new IllegalArgumentException(
                    String.format(
                            "%s is out of range of [%d, %d] (too low)", valueName, lower, upper));
        } else if (value > upper) {
            throw new IllegalArgumentException(
                    String.format(
                            "%s is out of range of [%d, %d] (too high)", valueName, lower, upper));
        }

        return value;
!!!83201719.java!!!	checkArgumentInRange(in value : long, in lower : long, in upper : long, inout valueName : String) : long
        if (value < lower) {
            throw new IllegalArgumentException(
                    String.format(
                            "%s is out of range of [%d, %d] (too low)", valueName, lower, upper));
        } else if (value > upper) {
            throw new IllegalArgumentException(
                    String.format(
                            "%s is out of range of [%d, %d] (too high)", valueName, lower, upper));
        }

        return value;
!!!83201847.java!!!	checkArrayElementsNotNull(in value : T [[]], in valueName : String) : T
        if (value == null) {
            throw new NullPointerException(valueName + " must not be null");
        }

        for (int i = 0; i < value.length; ++i) {
            if (value[i] == null) {
                throw new NullPointerException(
                        String.format("%s[%d] must not be null", valueName, i));
            }
        }

        return value;
!!!83201975.java!!!	checkCollectionElementsNotNull(in value : C, in valueName : String) : C
        if (value == null) {
            throw new NullPointerException(valueName + " must not be null");
        }

        long ctr = 0;
        for (T elem : value) {
            if (elem == null) {
                throw new NullPointerException(
                        String.format("%s[%d] must not be null", valueName, ctr));
            }
            ++ctr;
        }

        return value;
!!!83202103.java!!!	checkCollectionNotEmpty(in value : Collection<T>, in valueName : String) : Collection<T>
        if (value == null) {
            throw new NullPointerException(valueName + " must not be null");
        }
        if (value.isEmpty()) {
            throw new IllegalArgumentException(valueName + " is empty");
        }
        return value;
!!!83202231.java!!!	checkArrayElementsInRange(inout value : float [[]], in lower : float, in upper : float, inout valueName : String) : float
        checkNotNull(value, valueName + " must not be null");

        for (int i = 0; i < value.length; ++i) {
            float v = value[i];

            if (Float.isNaN(v)) {
                throw new IllegalArgumentException(valueName + "[" + i + "] must not be NaN");
            } else if (v < lower) {
                throw new IllegalArgumentException(
                        String.format("%s[%d] is out of range of [%f, %f] (too low)",
                                valueName, i, lower, upper));
            } else if (v > upper) {
                throw new IllegalArgumentException(
                        String.format("%s[%d] is out of range of [%f, %f] (too high)",
                                valueName, i, lower, upper));
            }
        }

        return value;
