class LogRecords
!!!83211063.java!!!	setSize(in maxSize : int) : void
            // TODO: once b/28217358 is fixed, add unit tests  to verify that these variables are
            // cleared after calling this method, and that subsequent calls to get() function as
            // expected.
            mMaxSize = maxSize;
            mOldestIndex = 0;
            mCount = 0;
            mLogRecVector.clear();
!!!83211191.java!!!	setLogOnlyTransitions(inout enable : boolean) : void
            mLogOnlyTransitions = enable;
!!!83211319.java!!!	logOnlyTransitions() : boolean
            return mLogOnlyTransitions;
!!!83211447.java!!!	size() : int
            return mLogRecVector.size();
!!!83211575.java!!!	count() : int
            return mCount;
!!!83211703.java!!!	cleanup() : void
            mLogRecVector.clear();
!!!83211831.java!!!	get(in index : int) : StateMachine::LogRec
            int nextIndex = mOldestIndex + index;
            if (nextIndex >= mMaxSize) {
                nextIndex -= mMaxSize;
            }
            if (nextIndex >= size()) {
                return null;
            } else {
                return mLogRecVector.get(nextIndex);
            }
!!!83211959.java!!!	add(inout sm : StateMachine, inout msg : Message, inout messageInfo : String, inout state : IState, inout orgState : IState, inout transToState : IState) : void
            mCount += 1;
            if (mLogRecVector.size() < mMaxSize) {
                mLogRecVector.add(new LogRec(sm, msg, messageInfo, state, orgState, transToState));
            } else {
                LogRec pmi = mLogRecVector.get(mOldestIndex);
                mOldestIndex += 1;
                if (mOldestIndex >= mMaxSize) {
                    mOldestIndex = 0;
                }
                pmi.update(sm, msg, messageInfo, state, orgState, transToState);
            }
