class HomeView
!!!83388727.java!!!	HomeView(inout context : Context)
            this(context, null);
!!!83388855.java!!!	HomeView(inout context : Context, inout attrs : AttributeSet)
            super(context, attrs);
            LayoutTransition t = getLayoutTransition();
            if (t != null) {
                // Set a lower duration than the default
                t.setDuration(DEFAULT_TRANSITION_DURATION);
            }
!!!83388983.java!!!	setShowUp(inout isUp : boolean) : void
            mUpView.setVisibility(isUp ? VISIBLE : GONE);
!!!83389111.java!!!	setShowIcon(inout showIcon : boolean) : void
            mIconView.setVisibility(showIcon ? VISIBLE : GONE);
!!!83389239.java!!!	setIcon(inout icon : Drawable) : void
            mIconView.setImageDrawable(icon);
!!!83389367.java!!!	setUpIndicator(inout d : Drawable) : void
            mUpIndicator = d;
            mUpIndicatorRes = 0;
            updateUpIndicator();
!!!83389495.java!!!	setDefaultUpIndicator(inout d : Drawable) : void
            mDefaultUpIndicator = d;
            updateUpIndicator();
!!!83389623.java!!!	setUpIndicator(in resId : int) : void
            mUpIndicatorRes = resId;
            mUpIndicator = null;
            updateUpIndicator();
!!!83389751.java!!!	updateUpIndicator() : void
            if (mUpIndicator != null) {
                mUpView.setImageDrawable(mUpIndicator);
            } else if (mUpIndicatorRes != 0) {
                mUpView.setImageDrawable(getContext().getDrawable(mUpIndicatorRes));
            } else {
                mUpView.setImageDrawable(mDefaultUpIndicator);
            }
!!!83389879.java!!!	onConfigurationChanged(inout newConfig : Configuration) : void
            super.onConfigurationChanged(newConfig);
            if (mUpIndicatorRes != 0) {
                // Reload for config change
                updateUpIndicator();
            }
!!!83390007.java!!!	dispatchPopulateAccessibilityEventInternal(inout event : AccessibilityEvent) : boolean
            onPopulateAccessibilityEvent(event);
            return true;
!!!83390135.java!!!	onPopulateAccessibilityEventInternal(inout event : AccessibilityEvent) : void
            super.onPopulateAccessibilityEventInternal(event);
            final CharSequence cdesc = getContentDescription();
            if (!TextUtils.isEmpty(cdesc)) {
                event.getText().add(cdesc);
            }
!!!83390263.java!!!	dispatchHoverEvent(inout event : MotionEvent) : boolean
            // Don't allow children to hover; we want this to be treated as a single component.
            return onHoverEvent(event);
!!!83390391.java!!!	onFinishInflate() : void
            mUpView = (ImageView) findViewById(com.android.internal.R.id.up);
            mIconView = (ImageView) findViewById(com.android.internal.R.id.home);
            mDefaultUpIndicator = mUpView.getDrawable();
!!!83390519.java!!!	getStartOffset() : int
            return mUpView.getVisibility() == GONE ? mStartOffset : 0;
!!!83390647.java!!!	getUpWidth() : int
            return mUpWidth;
!!!83390775.java!!!	onMeasure(in widthMeasureSpec : int, in heightMeasureSpec : int) : void
            measureChildWithMargins(mUpView, widthMeasureSpec, 0, heightMeasureSpec, 0);
            final LayoutParams upLp = (LayoutParams) mUpView.getLayoutParams();
            final int upMargins = upLp.leftMargin + upLp.rightMargin;
            mUpWidth = mUpView.getMeasuredWidth();
            mStartOffset = mUpWidth + upMargins;
            int width = mUpView.getVisibility() == GONE ? 0 : mStartOffset;
            int height = upLp.topMargin + mUpView.getMeasuredHeight() + upLp.bottomMargin;

            if (mIconView.getVisibility() != GONE) {
                measureChildWithMargins(mIconView, widthMeasureSpec, width, heightMeasureSpec, 0);
                final LayoutParams iconLp = (LayoutParams) mIconView.getLayoutParams();
                width += iconLp.leftMargin + mIconView.getMeasuredWidth() + iconLp.rightMargin;
                height = Math.max(height,
                        iconLp.topMargin + mIconView.getMeasuredHeight() + iconLp.bottomMargin);
            } else if (upMargins < 0) {
                // Remove the measurement effects of negative margins used for offsets
                width -= upMargins;
            }

            final int widthMode = MeasureSpec.getMode(widthMeasureSpec);
            final int heightMode = MeasureSpec.getMode(heightMeasureSpec);
            final int widthSize = MeasureSpec.getSize(widthMeasureSpec);
            final int heightSize = MeasureSpec.getSize(heightMeasureSpec);

            switch (widthMode) {
                case MeasureSpec.AT_MOST:
                    width = Math.min(width, widthSize);
                    break;
                case MeasureSpec.EXACTLY:
                    width = widthSize;
                    break;
                case MeasureSpec.UNSPECIFIED:
                default:
                    break;
            }
            switch (heightMode) {
                case MeasureSpec.AT_MOST:
                    height = Math.min(height, heightSize);
                    break;
                case MeasureSpec.EXACTLY:
                    height = heightSize;
                    break;
                case MeasureSpec.UNSPECIFIED:
                default:
                    break;
            }
            setMeasuredDimension(width, height);
!!!83390903.java!!!	onLayout(inout changed : boolean, in l : int, in t : int, in r : int, in b : int) : void
            final int vCenter = (b - t) / 2;
            final boolean isLayoutRtl = isLayoutRtl();
            final int width = getWidth();
            int upOffset = 0;
            if (mUpView.getVisibility() != GONE) {
                final LayoutParams upLp = (LayoutParams) mUpView.getLayoutParams();
                final int upHeight = mUpView.getMeasuredHeight();
                final int upWidth = mUpView.getMeasuredWidth();
                upOffset = upLp.leftMargin + upWidth + upLp.rightMargin;
                final int upTop = vCenter - upHeight / 2;
                final int upBottom = upTop + upHeight;
                final int upRight;
                final int upLeft;
                if (isLayoutRtl) {
                    upRight = width;
                    upLeft = upRight - upWidth;
                    r -= upOffset;
                } else {
                    upRight = upWidth;
                    upLeft = 0;
                    l += upOffset;
                }
                mUpView.layout(upLeft, upTop, upRight, upBottom);
            }

            final LayoutParams iconLp = (LayoutParams) mIconView.getLayoutParams();
            final int iconHeight = mIconView.getMeasuredHeight();
            final int iconWidth = mIconView.getMeasuredWidth();
            final int hCenter = (r - l) / 2;
            final int iconTop = Math.max(iconLp.topMargin, vCenter - iconHeight / 2);
            final int iconBottom = iconTop + iconHeight;
            final int iconLeft;
            final int iconRight;
            int marginStart = iconLp.getMarginStart();
            final int delta = Math.max(marginStart, hCenter - iconWidth / 2);
            if (isLayoutRtl) {
                iconRight = width - upOffset - delta;
                iconLeft = iconRight - iconWidth;
            } else {
                iconLeft = upOffset + delta;
                iconRight = iconLeft + iconWidth;
            }
            mIconView.layout(iconLeft, iconTop, iconRight, iconBottom);
