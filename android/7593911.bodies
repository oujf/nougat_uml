class AutoScrollHelper
!!!83393591.java!!!	AutoScrollHelper(inout target : View)
        mTarget = target;

        final DisplayMetrics metrics = Resources.getSystem().getDisplayMetrics();
        final int maxVelocity = (int) (DEFAULT_MAXIMUM_VELOCITY_DIPS * metrics.density + 0.5f);
        final int minVelocity = (int) (DEFAULT_MINIMUM_VELOCITY_DIPS * metrics.density + 0.5f);
        setMaximumVelocity(maxVelocity, maxVelocity);
        setMinimumVelocity(minVelocity, minVelocity);

        setEdgeType(DEFAULT_EDGE_TYPE);
        setMaximumEdges(DEFAULT_MAXIMUM_EDGE, DEFAULT_MAXIMUM_EDGE);
        setRelativeEdges(DEFAULT_RELATIVE_EDGE, DEFAULT_RELATIVE_EDGE);
        setRelativeVelocity(DEFAULT_RELATIVE_VELOCITY, DEFAULT_RELATIVE_VELOCITY);
        setActivationDelay(DEFAULT_ACTIVATION_DELAY);
        setRampUpDuration(DEFAULT_RAMP_UP_DURATION);
        setRampDownDuration(DEFAULT_RAMP_DOWN_DURATION);
!!!83393719.java!!!	setEnabled(inout enabled : boolean) : AutoScrollHelper
        if (mEnabled && !enabled) {
            requestStop();
        }

        mEnabled = enabled;
        return this;
!!!83393847.java!!!	isEnabled() : boolean
        return mEnabled;
!!!83393975.java!!!	setExclusive(inout exclusive : boolean) : AutoScrollHelper
        mExclusive = exclusive;
        return this;
!!!83394103.java!!!	isExclusive() : boolean
        return mExclusive;
!!!83394231.java!!!	setMaximumVelocity(in horizontalMax : float, in verticalMax : float) : AutoScrollHelper
        mMaximumVelocity[HORIZONTAL] = horizontalMax / 1000f;
        mMaximumVelocity[VERTICAL] = verticalMax / 1000f;
        return this;
!!!83394359.java!!!	setMinimumVelocity(in horizontalMin : float, in verticalMin : float) : AutoScrollHelper
        mMinimumVelocity[HORIZONTAL] = horizontalMin / 1000f;
        mMinimumVelocity[VERTICAL] = verticalMin / 1000f;
        return this;
!!!83394487.java!!!	setRelativeVelocity(in horizontal : float, in vertical : float) : AutoScrollHelper
        mRelativeVelocity[HORIZONTAL] = horizontal / 1000f;
        mRelativeVelocity[VERTICAL] = vertical / 1000f;
        return this;
!!!83394615.java!!!	setEdgeType(in type : int) : AutoScrollHelper
        mEdgeType = type;
        return this;
!!!83394743.java!!!	setRelativeEdges(in horizontal : float, in vertical : float) : AutoScrollHelper
        mRelativeEdges[HORIZONTAL] = horizontal;
        mRelativeEdges[VERTICAL] = vertical;
        return this;
!!!83394871.java!!!	setMaximumEdges(in horizontalMax : float, in verticalMax : float) : AutoScrollHelper
        mMaximumEdges[HORIZONTAL] = horizontalMax;
        mMaximumEdges[VERTICAL] = verticalMax;
        return this;
!!!83394999.java!!!	setActivationDelay(in delayMillis : int) : AutoScrollHelper
        mActivationDelay = delayMillis;
        return this;
!!!83395127.java!!!	setRampUpDuration(in durationMillis : int) : AutoScrollHelper
        mScroller.setRampUpDuration(durationMillis);
        return this;
!!!83395255.java!!!	setRampDownDuration(in durationMillis : int) : AutoScrollHelper
        mScroller.setRampDownDuration(durationMillis);
        return this;
!!!83395383.java!!!	onTouch(inout v : View, inout event : MotionEvent) : boolean
        if (!mEnabled) {
            return false;
        }

        final int action = event.getActionMasked();
        switch (action) {
            case MotionEvent.ACTION_DOWN:
                mNeedsCancel = true;
                mAlreadyDelayed = false;
                // $FALL-THROUGH$
            case MotionEvent.ACTION_MOVE:
                final float xTargetVelocity = computeTargetVelocity(
                        HORIZONTAL, event.getX(), v.getWidth(), mTarget.getWidth());
                final float yTargetVelocity = computeTargetVelocity(
                        VERTICAL, event.getY(), v.getHeight(), mTarget.getHeight());
                mScroller.setTargetVelocity(xTargetVelocity, yTargetVelocity);

                // If the auto scroller was not previously active, but it should
                // be, then update the state and start animations.
                if (!mAnimating && shouldAnimate()) {
                    startAnimating();
                }
                break;
            case MotionEvent.ACTION_UP:
            case MotionEvent.ACTION_CANCEL:
                requestStop();
                break;
        }

        return mExclusive && mAnimating;
!!!83395511.java!!!	shouldAnimate() : boolean
        final ClampedScroller scroller = mScroller;
        final int verticalDirection = scroller.getVerticalDirection();
        final int horizontalDirection = scroller.getHorizontalDirection();

        return verticalDirection != 0 && canTargetScrollVertically(verticalDirection)
                || horizontalDirection != 0 && canTargetScrollHorizontally(horizontalDirection);
!!!83395639.java!!!	startAnimating() : void
        if (mRunnable == null) {
            mRunnable = new ScrollAnimationRunnable();
        }

        mAnimating = true;
        mNeedsReset = true;

        if (!mAlreadyDelayed && mActivationDelay > 0) {
            mTarget.postOnAnimationDelayed(mRunnable, mActivationDelay);
        } else {
            mRunnable.run();
        }

        // If we start animating again before the user lifts their finger, we
        // already know it's not a tap and don't need an activation delay.
        mAlreadyDelayed = true;
!!!83395767.java!!!	requestStop() : void
        if (mNeedsReset) {
            // The animation has been posted, but hasn't run yet. Manually
            // stopping animation will prevent it from running.
            mAnimating = false;
        } else {
            mScroller.requestStop();
        }
!!!83395895.java!!!	computeTargetVelocity(in direction : int, in coordinate : float, in srcSize : float, in dstSize : float) : float
        final float relativeEdge = mRelativeEdges[direction];
        final float maximumEdge = mMaximumEdges[direction];
        final float value = getEdgeValue(relativeEdge, srcSize, maximumEdge, coordinate);
        if (value == 0) {
            // The edge in this direction is not activated.
            return 0;
        }

        final float relativeVelocity = mRelativeVelocity[direction];
        final float minimumVelocity = mMinimumVelocity[direction];
        final float maximumVelocity = mMaximumVelocity[direction];
        final float targetVelocity = relativeVelocity * dstSize;

        // Target velocity is adjusted for interpolated edge position, then
        // clamped to the minimum and maximum values. Later, this value will be
        // adjusted for time-based acceleration.
        if (value > 0) {
            return constrain(value * targetVelocity, minimumVelocity, maximumVelocity);
        } else {
            return -constrain(-value * targetVelocity, minimumVelocity, maximumVelocity);
        }
!!!83396407.java!!!	getEdgeValue(in relativeValue : float, in size : float, in maxValue : float, in current : float) : float
        // For now, leading and trailing edges are always the same size.
        final float edgeSize = constrain(relativeValue * size, NO_MIN, maxValue);
        final float valueLeading = constrainEdgeValue(current, edgeSize);
        final float valueTrailing = constrainEdgeValue(size - current, edgeSize);
        final float value = (valueTrailing - valueLeading);
        final float interpolated;
        if (value < 0) {
            interpolated = -mEdgeInterpolator.getInterpolation(-value);
        } else if (value > 0) {
            interpolated = mEdgeInterpolator.getInterpolation(value);
        } else {
            return 0;
        }

        return constrain(interpolated, -1, 1);
!!!83396535.java!!!	constrainEdgeValue(in current : float, in leading : float) : float
        if (leading == 0) {
            return 0;
        }

        switch (mEdgeType) {
            case EDGE_TYPE_INSIDE:
            case EDGE_TYPE_INSIDE_EXTEND:
                if (current < leading) {
                    if (current >= 0) {
                        // Movement up to the edge is scaled.
                        return 1f - current / leading;
                    } else if (mAnimating && (mEdgeType == EDGE_TYPE_INSIDE_EXTEND)) {
                        // Movement beyond the edge is always maximum.
                        return 1f;
                    }
                }
                break;
            case EDGE_TYPE_OUTSIDE:
                if (current < 0) {
                    // Movement beyond the edge is scaled.
                    return current / -leading;
                }
                break;
        }

        return 0;
!!!83396663.java!!!	constrain(in value : int, in min : int, in max : int) : int
        if (value > max) {
            return max;
        } else if (value < min) {
            return min;
        } else {
            return value;
        }
!!!83396791.java!!!	constrain(in value : float, in min : float, in max : float) : float
        if (value > max) {
            return max;
        } else if (value < min) {
            return min;
        } else {
            return value;
        }
!!!83396919.java!!!	cancelTargetTouch() : void
        final long eventTime = SystemClock.uptimeMillis();
        final MotionEvent cancel = MotionEvent.obtain(
                eventTime, eventTime, MotionEvent.ACTION_CANCEL, 0, 0, 0);
        mTarget.onTouchEvent(cancel);
        cancel.recycle();
