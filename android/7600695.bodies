class NumericTextView
!!!83472823.java!!!	NumericTextView(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);

        // Generate the hint text color based on disabled state.
        final int textColorDisabled = getTextColors().getColorForState(StateSet.get(0), 0);
        setHintTextColor(textColorDisabled);

        setFocusable(true);
!!!83472951.java!!!	onFocusChanged(inout focused : boolean, in direction : int, inout previouslyFocusedRect : Rect) : void
        super.onFocusChanged(focused, direction, previouslyFocusedRect);

        if (focused) {
            mPreviousValue = mValue;
            mValue = 0;
            mCount = 0;

            // Transfer current text to hint.
            setHint(getText());
            setText("");
        } else {
            if (mCount == 0) {
                // No digits were entered, revert to previous value.
                mValue = mPreviousValue;

                setText(getHint());
                setHint("");
            }

            // Ensure the committed value is within range.
            if (mValue < mMinValue) {
                mValue = mMinValue;
            }

            setValue(mValue);

            if (mListener != null) {
                mListener.onValueChanged(this, mValue, true, true);
            }
        }
!!!83473079.java!!!	setValue(in value : int) : void
        if (mValue != value) {
            mValue = value;

            updateDisplayedValue();
        }
!!!83473207.java!!!	getValue() : int
        return mValue;
!!!83473335.java!!!	setRange(in minValue : int, in maxValue : int) : void
        if (mMinValue != minValue) {
            mMinValue = minValue;
        }

        if (mMaxValue != maxValue) {
            mMaxValue = maxValue;
            mMaxCount = 1 + (int) (Math.log(maxValue) / LOG_RADIX);

            updateMinimumWidth();
            updateDisplayedValue();
        }
!!!83473463.java!!!	getRangeMinimum() : int
        return mMinValue;
!!!83473591.java!!!	getRangeMaximum() : int
        return mMaxValue;
!!!83473719.java!!!	setShowLeadingZeroes(inout showLeadingZeroes : boolean) : void
        if (mShowLeadingZeroes != showLeadingZeroes) {
            mShowLeadingZeroes = showLeadingZeroes;

            updateDisplayedValue();
        }
!!!83473847.java!!!	getShowLeadingZeroes() : boolean
        return mShowLeadingZeroes;
!!!83473975.java!!!	updateDisplayedValue() : void
        final String format;
        if (mShowLeadingZeroes) {
            format = "%0" + mMaxCount + "d";
        } else {
            format = "%d";
        }

        // Always use String.format() rather than Integer.toString()
        // to obtain correctly localized values.
        setText(String.format(format, mValue));
!!!83474103.java!!!	updateMinimumWidth() : void
        final CharSequence previousText = getText();
        int maxWidth = 0;

        for (int i = 0; i < mMaxValue; i++) {
            setText(String.format("%0" + mMaxCount + "d", i));
            measure(MeasureSpec.UNSPECIFIED, MeasureSpec.UNSPECIFIED);

            final int width = getMeasuredWidth();
            if (width > maxWidth) {
                maxWidth = width;
            }
        }

        setText(previousText);
        setMinWidth(maxWidth);
        setMinimumWidth(maxWidth);
!!!83474231.java!!!	setOnDigitEnteredListener(inout listener : NumericTextView::OnValueChangedListener) : void
        mListener = listener;
!!!83474359.java!!!	getOnDigitEnteredListener() : NumericTextView::OnValueChangedListener
        return mListener;
!!!83474487.java!!!	onKeyDown(in keyCode : int, inout event : KeyEvent) : boolean
        return isKeyCodeNumeric(keyCode)
                || (keyCode == KeyEvent.KEYCODE_DEL)
                || super.onKeyDown(keyCode, event);
!!!83474615.java!!!	onKeyMultiple(in keyCode : int, in repeatCount : int, inout event : KeyEvent) : boolean
        return isKeyCodeNumeric(keyCode)
                || (keyCode == KeyEvent.KEYCODE_DEL)
                || super.onKeyMultiple(keyCode, repeatCount, event);
!!!83474743.java!!!	onKeyUp(in keyCode : int, inout event : KeyEvent) : boolean
        return handleKeyUp(keyCode)
                || super.onKeyUp(keyCode, event);
!!!83474871.java!!!	handleKeyUp(in keyCode : int) : boolean
        if (keyCode == KeyEvent.KEYCODE_DEL) {
            // Backspace removes the least-significant digit, if available.
            if (mCount > 0) {
                mValue /= RADIX;
                mCount--;
            }
        } else if (isKeyCodeNumeric(keyCode)) {
            if (mCount < mMaxCount) {
                final int keyValue = numericKeyCodeToInt(keyCode);
                final int newValue = mValue * RADIX + keyValue;
                if (newValue <= mMaxValue) {
                    mValue = newValue;
                    mCount++;
                }
            }
        } else {
            return false;
        }

        final String formattedValue;
        if (mCount > 0) {
            // If the user types 01, we should always show the leading 0 even if
            // getShowLeadingZeroes() is false. Preserve typed leading zeroes by
            // using the number of digits entered as the format width.
            formattedValue = String.format("%0" + mCount + "d", mValue);
        } else {
            formattedValue = "";
        }

        setText(formattedValue);

        if (mListener != null) {
            final boolean isValid = mValue >= mMinValue;
            final boolean isFinished = mCount >= mMaxCount || mValue * RADIX > mMaxValue;
            mListener.onValueChanged(this, mValue, isValid, isFinished);
        }

        return true;
!!!83474999.java!!!	isKeyCodeNumeric(in keyCode : int) : boolean
        return keyCode == KeyEvent.KEYCODE_0 || keyCode == KeyEvent.KEYCODE_1
                || keyCode == KeyEvent.KEYCODE_2 || keyCode == KeyEvent.KEYCODE_3
                || keyCode == KeyEvent.KEYCODE_4 || keyCode == KeyEvent.KEYCODE_5
                || keyCode == KeyEvent.KEYCODE_6 || keyCode == KeyEvent.KEYCODE_7
                || keyCode == KeyEvent.KEYCODE_8 || keyCode == KeyEvent.KEYCODE_9;
!!!83475127.java!!!	numericKeyCodeToInt(in keyCode : int) : int
        return keyCode - KeyEvent.KEYCODE_0;
