class DnsServerRepository
!!!83556151.java!!!	DnsServerRepository()
        mCurrentServers = new HashSet();
        mAllServers = new ArrayList<DnsServerEntry>(NUM_SERVERS);
        mIndex = new HashMap<InetAddress, DnsServerEntry>(NUM_SERVERS);
!!!83556279.java!!!	setDnsServersOn(inout lp : LinkProperties) : void
        lp.setDnsServers(mCurrentServers);
!!!83556407.java!!!	addServers(in lifetime : long, inout addresses : String [[]]) : boolean
        // The lifetime is actually an unsigned 32-bit number, but Java doesn't have unsigned.
        // Technically 0xffffffff (the maximum) is special and means "forever", but 2^32 seconds
        // (136 years) is close enough.
        long now = System.currentTimeMillis();
        long expiry = now + 1000 * lifetime;

        // Go through the list of servers. For each one, update the entry if one exists, and
        // create one if it doesn't.
        for (String addressString : addresses) {
            InetAddress address;
            try {
                address = InetAddress.parseNumericAddress(addressString);
            } catch (IllegalArgumentException ex) {
                continue;
            }

            if (!updateExistingEntry(address, expiry)) {
                // There was no entry for this server. Create one, unless it's already expired
                // (i.e., if the lifetime is zero; it cannot be < 0 because it's unsigned).
                if (expiry > now) {
                    DnsServerEntry entry = new DnsServerEntry(address, expiry);
                    mAllServers.add(entry);
                    mIndex.put(address, entry);
                }
            }
        }

        // Sort the servers by expiry.
        Collections.sort(mAllServers);

        // Prune excess entries and update the current server list.
        return updateCurrentServers();
!!!83556535.java!!!	updateExistingEntry(inout address : InetAddress, in expiry : long) : boolean
        DnsServerEntry existing = mIndex.get(address);
        if (existing != null) {
            existing.expiry = expiry;
            return true;
        }
        return false;
!!!83556663.java!!!	updateCurrentServers() : boolean
        long now = System.currentTimeMillis();
        boolean changed = false;

        // Prune excess or expired entries.
        for (int i = mAllServers.size() - 1; i >= 0; i--) {
            if (i >= NUM_SERVERS || mAllServers.get(i).expiry < now) {
                DnsServerEntry removed = mAllServers.remove(i);
                mIndex.remove(removed.address);
                changed |= mCurrentServers.remove(removed.address);
            } else {
                break;
            }
        }

        // Add servers to the current set, in order of decreasing lifetime, until it has enough.
        // Prefer existing servers over new servers in order to minimize updates to the rest of the
        // system and avoid persistent oscillations.
        for (DnsServerEntry entry : mAllServers) {
            if (mCurrentServers.size() < NUM_CURRENT_SERVERS) {
                changed |= mCurrentServers.add(entry.address);
            } else {
                break;
            }
        }
        return changed;
