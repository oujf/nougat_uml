class Stub
!!!83580855.java!!!	Stub()
this.attachInterface(this, DESCRIPTOR);
!!!83580983.java!!!	asInterface(inout obj : IBinder) : IAudioService
if ((obj==null)) {
return null;
}
android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);
if (((iin!=null)&&(iin instanceof android.media.IAudioService))) {
return ((android.media.IAudioService)iin);
}
return new android.media.IAudioService.Stub.Proxy(obj);
!!!83581111.java!!!	asBinder() : IBinder
return this;
!!!83581239.java!!!	onTransact(in code : int, inout data : Parcel, inout reply : Parcel, in flags : int) : boolean
switch (code)
{
case INTERFACE_TRANSACTION:
{
reply.writeString(DESCRIPTOR);
return true;
}
case TRANSACTION_adjustSuggestedStreamVolume:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
int _arg1;
_arg1 = data.readInt();
int _arg2;
_arg2 = data.readInt();
java.lang.String _arg3;
_arg3 = data.readString();
java.lang.String _arg4;
_arg4 = data.readString();
this.adjustSuggestedStreamVolume(_arg0, _arg1, _arg2, _arg3, _arg4);
return true;
}
case TRANSACTION_adjustStreamVolume:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
int _arg1;
_arg1 = data.readInt();
int _arg2;
_arg2 = data.readInt();
java.lang.String _arg3;
_arg3 = data.readString();
this.adjustStreamVolume(_arg0, _arg1, _arg2, _arg3);
reply.writeNoException();
return true;
}
case TRANSACTION_setStreamVolume:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
int _arg1;
_arg1 = data.readInt();
int _arg2;
_arg2 = data.readInt();
java.lang.String _arg3;
_arg3 = data.readString();
this.setStreamVolume(_arg0, _arg1, _arg2, _arg3);
reply.writeNoException();
return true;
}
case TRANSACTION_isStreamMute:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
boolean _result = this.isStreamMute(_arg0);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_forceRemoteSubmixFullVolume:
{
data.enforceInterface(DESCRIPTOR);
boolean _arg0;
_arg0 = (0!=data.readInt());
android.os.IBinder _arg1;
_arg1 = data.readStrongBinder();
this.forceRemoteSubmixFullVolume(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_isMasterMute:
{
data.enforceInterface(DESCRIPTOR);
boolean _result = this.isMasterMute();
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_setMasterMute:
{
data.enforceInterface(DESCRIPTOR);
boolean _arg0;
_arg0 = (0!=data.readInt());
int _arg1;
_arg1 = data.readInt();
java.lang.String _arg2;
_arg2 = data.readString();
int _arg3;
_arg3 = data.readInt();
this.setMasterMute(_arg0, _arg1, _arg2, _arg3);
reply.writeNoException();
return true;
}
case TRANSACTION_getStreamVolume:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
int _result = this.getStreamVolume(_arg0);
reply.writeNoException();
reply.writeInt(_result);
return true;
}
case TRANSACTION_getStreamMinVolume:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
int _result = this.getStreamMinVolume(_arg0);
reply.writeNoException();
reply.writeInt(_result);
return true;
}
case TRANSACTION_getStreamMaxVolume:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
int _result = this.getStreamMaxVolume(_arg0);
reply.writeNoException();
reply.writeInt(_result);
return true;
}
case TRANSACTION_getLastAudibleStreamVolume:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
int _result = this.getLastAudibleStreamVolume(_arg0);
reply.writeNoException();
reply.writeInt(_result);
return true;
}
case TRANSACTION_setMicrophoneMute:
{
data.enforceInterface(DESCRIPTOR);
boolean _arg0;
_arg0 = (0!=data.readInt());
java.lang.String _arg1;
_arg1 = data.readString();
int _arg2;
_arg2 = data.readInt();
this.setMicrophoneMute(_arg0, _arg1, _arg2);
reply.writeNoException();
return true;
}
case TRANSACTION_setRingerModeExternal:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
java.lang.String _arg1;
_arg1 = data.readString();
this.setRingerModeExternal(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_setRingerModeInternal:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
java.lang.String _arg1;
_arg1 = data.readString();
this.setRingerModeInternal(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_getRingerModeExternal:
{
data.enforceInterface(DESCRIPTOR);
int _result = this.getRingerModeExternal();
reply.writeNoException();
reply.writeInt(_result);
return true;
}
case TRANSACTION_getRingerModeInternal:
{
data.enforceInterface(DESCRIPTOR);
int _result = this.getRingerModeInternal();
reply.writeNoException();
reply.writeInt(_result);
return true;
}
case TRANSACTION_isValidRingerMode:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
boolean _result = this.isValidRingerMode(_arg0);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_setVibrateSetting:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
int _arg1;
_arg1 = data.readInt();
this.setVibrateSetting(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_getVibrateSetting:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
int _result = this.getVibrateSetting(_arg0);
reply.writeNoException();
reply.writeInt(_result);
return true;
}
case TRANSACTION_shouldVibrate:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
boolean _result = this.shouldVibrate(_arg0);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_setMode:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
android.os.IBinder _arg1;
_arg1 = data.readStrongBinder();
java.lang.String _arg2;
_arg2 = data.readString();
this.setMode(_arg0, _arg1, _arg2);
reply.writeNoException();
return true;
}
case TRANSACTION_getMode:
{
data.enforceInterface(DESCRIPTOR);
int _result = this.getMode();
reply.writeNoException();
reply.writeInt(_result);
return true;
}
case TRANSACTION_playSoundEffect:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
this.playSoundEffect(_arg0);
return true;
}
case TRANSACTION_playSoundEffectVolume:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
float _arg1;
_arg1 = data.readFloat();
this.playSoundEffectVolume(_arg0, _arg1);
return true;
}
case TRANSACTION_loadSoundEffects:
{
data.enforceInterface(DESCRIPTOR);
boolean _result = this.loadSoundEffects();
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_unloadSoundEffects:
{
data.enforceInterface(DESCRIPTOR);
this.unloadSoundEffects();
return true;
}
case TRANSACTION_reloadAudioSettings:
{
data.enforceInterface(DESCRIPTOR);
this.reloadAudioSettings();
return true;
}
case TRANSACTION_avrcpSupportsAbsoluteVolume:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
boolean _arg1;
_arg1 = (0!=data.readInt());
this.avrcpSupportsAbsoluteVolume(_arg0, _arg1);
return true;
}
case TRANSACTION_setSpeakerphoneOn:
{
data.enforceInterface(DESCRIPTOR);
boolean _arg0;
_arg0 = (0!=data.readInt());
this.setSpeakerphoneOn(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_isSpeakerphoneOn:
{
data.enforceInterface(DESCRIPTOR);
boolean _result = this.isSpeakerphoneOn();
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_setBluetoothScoOn:
{
data.enforceInterface(DESCRIPTOR);
boolean _arg0;
_arg0 = (0!=data.readInt());
this.setBluetoothScoOn(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_isBluetoothScoOn:
{
data.enforceInterface(DESCRIPTOR);
boolean _result = this.isBluetoothScoOn();
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_setBluetoothA2dpOn:
{
data.enforceInterface(DESCRIPTOR);
boolean _arg0;
_arg0 = (0!=data.readInt());
this.setBluetoothA2dpOn(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_isBluetoothA2dpOn:
{
data.enforceInterface(DESCRIPTOR);
boolean _result = this.isBluetoothA2dpOn();
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_requestAudioFocus:
{
data.enforceInterface(DESCRIPTOR);
android.media.AudioAttributes _arg0;
if ((0!=data.readInt())) {
_arg0 = android.media.AudioAttributes.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
int _arg1;
_arg1 = data.readInt();
android.os.IBinder _arg2;
_arg2 = data.readStrongBinder();
android.media.IAudioFocusDispatcher _arg3;
_arg3 = android.media.IAudioFocusDispatcher.Stub.asInterface(data.readStrongBinder());
java.lang.String _arg4;
_arg4 = data.readString();
java.lang.String _arg5;
_arg5 = data.readString();
int _arg6;
_arg6 = data.readInt();
android.media.audiopolicy.IAudioPolicyCallback _arg7;
_arg7 = android.media.audiopolicy.IAudioPolicyCallback.Stub.asInterface(data.readStrongBinder());
int _result = this.requestAudioFocus(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7);
reply.writeNoException();
reply.writeInt(_result);
return true;
}
case TRANSACTION_abandonAudioFocus:
{
data.enforceInterface(DESCRIPTOR);
android.media.IAudioFocusDispatcher _arg0;
_arg0 = android.media.IAudioFocusDispatcher.Stub.asInterface(data.readStrongBinder());
java.lang.String _arg1;
_arg1 = data.readString();
android.media.AudioAttributes _arg2;
if ((0!=data.readInt())) {
_arg2 = android.media.AudioAttributes.CREATOR.createFromParcel(data);
}
else {
_arg2 = null;
}
int _result = this.abandonAudioFocus(_arg0, _arg1, _arg2);
reply.writeNoException();
reply.writeInt(_result);
return true;
}
case TRANSACTION_unregisterAudioFocusClient:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
this.unregisterAudioFocusClient(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_getCurrentAudioFocus:
{
data.enforceInterface(DESCRIPTOR);
int _result = this.getCurrentAudioFocus();
reply.writeNoException();
reply.writeInt(_result);
return true;
}
case TRANSACTION_startBluetoothSco:
{
data.enforceInterface(DESCRIPTOR);
android.os.IBinder _arg0;
_arg0 = data.readStrongBinder();
int _arg1;
_arg1 = data.readInt();
this.startBluetoothSco(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_startBluetoothScoVirtualCall:
{
data.enforceInterface(DESCRIPTOR);
android.os.IBinder _arg0;
_arg0 = data.readStrongBinder();
this.startBluetoothScoVirtualCall(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_stopBluetoothSco:
{
data.enforceInterface(DESCRIPTOR);
android.os.IBinder _arg0;
_arg0 = data.readStrongBinder();
this.stopBluetoothSco(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_forceVolumeControlStream:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
android.os.IBinder _arg1;
_arg1 = data.readStrongBinder();
this.forceVolumeControlStream(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_setRingtonePlayer:
{
data.enforceInterface(DESCRIPTOR);
android.media.IRingtonePlayer _arg0;
_arg0 = android.media.IRingtonePlayer.Stub.asInterface(data.readStrongBinder());
this.setRingtonePlayer(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_getRingtonePlayer:
{
data.enforceInterface(DESCRIPTOR);
android.media.IRingtonePlayer _result = this.getRingtonePlayer();
reply.writeNoException();
reply.writeStrongBinder((((_result!=null))?(_result.asBinder()):(null)));
return true;
}
case TRANSACTION_getUiSoundsStreamType:
{
data.enforceInterface(DESCRIPTOR);
int _result = this.getUiSoundsStreamType();
reply.writeNoException();
reply.writeInt(_result);
return true;
}
case TRANSACTION_setWiredDeviceConnectionState:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
int _arg1;
_arg1 = data.readInt();
java.lang.String _arg2;
_arg2 = data.readString();
java.lang.String _arg3;
_arg3 = data.readString();
java.lang.String _arg4;
_arg4 = data.readString();
this.setWiredDeviceConnectionState(_arg0, _arg1, _arg2, _arg3, _arg4);
reply.writeNoException();
return true;
}
case TRANSACTION_setBluetoothA2dpDeviceConnectionState:
{
data.enforceInterface(DESCRIPTOR);
android.bluetooth.BluetoothDevice _arg0;
if ((0!=data.readInt())) {
_arg0 = android.bluetooth.BluetoothDevice.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
int _arg1;
_arg1 = data.readInt();
int _arg2;
_arg2 = data.readInt();
int _result = this.setBluetoothA2dpDeviceConnectionState(_arg0, _arg1, _arg2);
reply.writeNoException();
reply.writeInt(_result);
return true;
}
case TRANSACTION_startWatchingRoutes:
{
data.enforceInterface(DESCRIPTOR);
android.media.IAudioRoutesObserver _arg0;
_arg0 = android.media.IAudioRoutesObserver.Stub.asInterface(data.readStrongBinder());
android.media.AudioRoutesInfo _result = this.startWatchingRoutes(_arg0);
reply.writeNoException();
if ((_result!=null)) {
reply.writeInt(1);
_result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
case TRANSACTION_isCameraSoundForced:
{
data.enforceInterface(DESCRIPTOR);
boolean _result = this.isCameraSoundForced();
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_setVolumeController:
{
data.enforceInterface(DESCRIPTOR);
android.media.IVolumeController _arg0;
_arg0 = android.media.IVolumeController.Stub.asInterface(data.readStrongBinder());
this.setVolumeController(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_notifyVolumeControllerVisible:
{
data.enforceInterface(DESCRIPTOR);
android.media.IVolumeController _arg0;
_arg0 = android.media.IVolumeController.Stub.asInterface(data.readStrongBinder());
boolean _arg1;
_arg1 = (0!=data.readInt());
this.notifyVolumeControllerVisible(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_isStreamAffectedByRingerMode:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
boolean _result = this.isStreamAffectedByRingerMode(_arg0);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_isStreamAffectedByMute:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
boolean _result = this.isStreamAffectedByMute(_arg0);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_disableSafeMediaVolume:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
this.disableSafeMediaVolume(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_setHdmiSystemAudioSupported:
{
data.enforceInterface(DESCRIPTOR);
boolean _arg0;
_arg0 = (0!=data.readInt());
int _result = this.setHdmiSystemAudioSupported(_arg0);
reply.writeNoException();
reply.writeInt(_result);
return true;
}
case TRANSACTION_isHdmiSystemAudioSupported:
{
data.enforceInterface(DESCRIPTOR);
boolean _result = this.isHdmiSystemAudioSupported();
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_registerAudioPolicy:
{
data.enforceInterface(DESCRIPTOR);
android.media.audiopolicy.AudioPolicyConfig _arg0;
if ((0!=data.readInt())) {
_arg0 = android.media.audiopolicy.AudioPolicyConfig.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
android.media.audiopolicy.IAudioPolicyCallback _arg1;
_arg1 = android.media.audiopolicy.IAudioPolicyCallback.Stub.asInterface(data.readStrongBinder());
boolean _arg2;
_arg2 = (0!=data.readInt());
java.lang.String _result = this.registerAudioPolicy(_arg0, _arg1, _arg2);
reply.writeNoException();
reply.writeString(_result);
return true;
}
case TRANSACTION_unregisterAudioPolicyAsync:
{
data.enforceInterface(DESCRIPTOR);
android.media.audiopolicy.IAudioPolicyCallback _arg0;
_arg0 = android.media.audiopolicy.IAudioPolicyCallback.Stub.asInterface(data.readStrongBinder());
this.unregisterAudioPolicyAsync(_arg0);
return true;
}
case TRANSACTION_setFocusPropertiesForPolicy:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
android.media.audiopolicy.IAudioPolicyCallback _arg1;
_arg1 = android.media.audiopolicy.IAudioPolicyCallback.Stub.asInterface(data.readStrongBinder());
int _result = this.setFocusPropertiesForPolicy(_arg0, _arg1);
reply.writeNoException();
reply.writeInt(_result);
return true;
}
case TRANSACTION_setVolumePolicy:
{
data.enforceInterface(DESCRIPTOR);
android.media.VolumePolicy _arg0;
if ((0!=data.readInt())) {
_arg0 = android.media.VolumePolicy.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
this.setVolumePolicy(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_registerRecordingCallback:
{
data.enforceInterface(DESCRIPTOR);
android.media.IRecordingConfigDispatcher _arg0;
_arg0 = android.media.IRecordingConfigDispatcher.Stub.asInterface(data.readStrongBinder());
this.registerRecordingCallback(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_unregisterRecordingCallback:
{
data.enforceInterface(DESCRIPTOR);
android.media.IRecordingConfigDispatcher _arg0;
_arg0 = android.media.IRecordingConfigDispatcher.Stub.asInterface(data.readStrongBinder());
this.unregisterRecordingCallback(_arg0);
return true;
}
case TRANSACTION_getActiveRecordingConfigurations:
{
data.enforceInterface(DESCRIPTOR);
java.util.List<android.media.AudioRecordingConfiguration> _result = this.getActiveRecordingConfigurations();
reply.writeNoException();
reply.writeTypedList(_result);
return true;
}
}
return super.onTransact(code, data, reply, flags);
