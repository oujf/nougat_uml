class Proxy
!!!83604279.java!!!	Proxy(inout remote : IBinder)
mRemote = remote;
!!!83604407.java!!!	asBinder() : IBinder
return mRemote;
!!!83604535.java!!!	getInterfaceDescriptor() : String
return DESCRIPTOR;
!!!83604663.java!!!	registerClientAsUser(inout client : IMediaRouterClient, inout packageName : String, in userId : int) : void
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeStrongBinder((((client!=null))?(client.asBinder()):(null)));
_data.writeString(packageName);
_data.writeInt(userId);
mRemote.transact(Stub.TRANSACTION_registerClientAsUser, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
!!!83604791.java!!!	unregisterClient(inout client : IMediaRouterClient) : void
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeStrongBinder((((client!=null))?(client.asBinder()):(null)));
mRemote.transact(Stub.TRANSACTION_unregisterClient, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
!!!83604919.java!!!	getState(inout client : IMediaRouterClient) : MediaRouterClientState
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
android.media.MediaRouterClientState _result;
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeStrongBinder((((client!=null))?(client.asBinder()):(null)));
mRemote.transact(Stub.TRANSACTION_getState, _data, _reply, 0);
_reply.readException();
if ((0!=_reply.readInt())) {
_result = android.media.MediaRouterClientState.CREATOR.createFromParcel(_reply);
}
else {
_result = null;
}
}
finally {
_reply.recycle();
_data.recycle();
}
return _result;
!!!83605047.java!!!	setDiscoveryRequest(inout client : IMediaRouterClient, in routeTypes : int, inout activeScan : boolean) : void
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeStrongBinder((((client!=null))?(client.asBinder()):(null)));
_data.writeInt(routeTypes);
_data.writeInt(((activeScan)?(1):(0)));
mRemote.transact(Stub.TRANSACTION_setDiscoveryRequest, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
!!!83605175.java!!!	setSelectedRoute(inout client : IMediaRouterClient, inout routeId : String, inout explicit : boolean) : void
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeStrongBinder((((client!=null))?(client.asBinder()):(null)));
_data.writeString(routeId);
_data.writeInt(((explicit)?(1):(0)));
mRemote.transact(Stub.TRANSACTION_setSelectedRoute, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
!!!83605303.java!!!	requestSetVolume(inout client : IMediaRouterClient, inout routeId : String, in volume : int) : void
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeStrongBinder((((client!=null))?(client.asBinder()):(null)));
_data.writeString(routeId);
_data.writeInt(volume);
mRemote.transact(Stub.TRANSACTION_requestSetVolume, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
!!!83605431.java!!!	requestUpdateVolume(inout client : IMediaRouterClient, inout routeId : String, in direction : int) : void
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeStrongBinder((((client!=null))?(client.asBinder()):(null)));
_data.writeString(routeId);
_data.writeInt(direction);
mRemote.transact(Stub.TRANSACTION_requestUpdateVolume, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
