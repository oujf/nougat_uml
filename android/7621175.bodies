class Proxy
!!!83630263.java!!!	Proxy(inout remote : IBinder)
mRemote = remote;
!!!83630391.java!!!	asBinder() : IBinder
return mRemote;
!!!83630519.java!!!	getInterfaceDescriptor() : String
return DESCRIPTOR;
!!!83630647.java!!!	getDevices() : MidiDeviceInfo
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
android.media.midi.MidiDeviceInfo[] _result;
try {
_data.writeInterfaceToken(DESCRIPTOR);
mRemote.transact(Stub.TRANSACTION_getDevices, _data, _reply, 0);
_reply.readException();
_result = _reply.createTypedArray(android.media.midi.MidiDeviceInfo.CREATOR);
}
finally {
_reply.recycle();
_data.recycle();
}
return _result;
!!!83630775.java!!!	registerListener(inout clientToken : IBinder, inout listener : IMidiDeviceListener) : void
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeStrongBinder(clientToken);
_data.writeStrongBinder((((listener!=null))?(listener.asBinder()):(null)));
mRemote.transact(Stub.TRANSACTION_registerListener, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
!!!83630903.java!!!	unregisterListener(inout clientToken : IBinder, inout listener : IMidiDeviceListener) : void
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeStrongBinder(clientToken);
_data.writeStrongBinder((((listener!=null))?(listener.asBinder()):(null)));
mRemote.transact(Stub.TRANSACTION_unregisterListener, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
!!!83631031.java!!!	openDevice(inout clientToken : IBinder, inout device : MidiDeviceInfo, inout callback : IMidiDeviceOpenCallback) : void
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeStrongBinder(clientToken);
if ((device!=null)) {
_data.writeInt(1);
device.writeToParcel(_data, 0);
}
else {
_data.writeInt(0);
}
_data.writeStrongBinder((((callback!=null))?(callback.asBinder()):(null)));
mRemote.transact(Stub.TRANSACTION_openDevice, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
!!!83631159.java!!!	openBluetoothDevice(inout clientToken : IBinder, inout bluetoothDevice : BluetoothDevice, inout callback : IMidiDeviceOpenCallback) : void
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeStrongBinder(clientToken);
if ((bluetoothDevice!=null)) {
_data.writeInt(1);
bluetoothDevice.writeToParcel(_data, 0);
}
else {
_data.writeInt(0);
}
_data.writeStrongBinder((((callback!=null))?(callback.asBinder()):(null)));
mRemote.transact(Stub.TRANSACTION_openBluetoothDevice, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
!!!83631287.java!!!	closeDevice(inout clientToken : IBinder, inout deviceToken : IBinder) : void
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeStrongBinder(clientToken);
_data.writeStrongBinder(deviceToken);
mRemote.transact(Stub.TRANSACTION_closeDevice, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
!!!83631415.java!!!	registerDeviceServer(inout server : IMidiDeviceServer, in numInputPorts : int, in numOutputPorts : int, inout inputPortNames : String [[]], inout outputPortNames : String [[]], inout properties : Bundle, in type : int) : MidiDeviceInfo
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
android.media.midi.MidiDeviceInfo _result;
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeStrongBinder((((server!=null))?(server.asBinder()):(null)));
_data.writeInt(numInputPorts);
_data.writeInt(numOutputPorts);
_data.writeStringArray(inputPortNames);
_data.writeStringArray(outputPortNames);
if ((properties!=null)) {
_data.writeInt(1);
properties.writeToParcel(_data, 0);
}
else {
_data.writeInt(0);
}
_data.writeInt(type);
mRemote.transact(Stub.TRANSACTION_registerDeviceServer, _data, _reply, 0);
_reply.readException();
if ((0!=_reply.readInt())) {
_result = android.media.midi.MidiDeviceInfo.CREATOR.createFromParcel(_reply);
}
else {
_result = null;
}
}
finally {
_reply.recycle();
_data.recycle();
}
return _result;
!!!83631543.java!!!	unregisterDeviceServer(inout server : IMidiDeviceServer) : void
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeStrongBinder((((server!=null))?(server.asBinder()):(null)));
mRemote.transact(Stub.TRANSACTION_unregisterDeviceServer, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
!!!83631671.java!!!	getServiceDeviceInfo(inout packageName : String, inout className : String) : MidiDeviceInfo
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
android.media.midi.MidiDeviceInfo _result;
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeString(packageName);
_data.writeString(className);
mRemote.transact(Stub.TRANSACTION_getServiceDeviceInfo, _data, _reply, 0);
_reply.readException();
if ((0!=_reply.readInt())) {
_result = android.media.midi.MidiDeviceInfo.CREATOR.createFromParcel(_reply);
}
else {
_result = null;
}
}
finally {
_reply.recycle();
_data.recycle();
}
return _result;
!!!83631799.java!!!	getDeviceStatus(inout deviceInfo : MidiDeviceInfo) : MidiDeviceStatus
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
android.media.midi.MidiDeviceStatus _result;
try {
_data.writeInterfaceToken(DESCRIPTOR);
if ((deviceInfo!=null)) {
_data.writeInt(1);
deviceInfo.writeToParcel(_data, 0);
}
else {
_data.writeInt(0);
}
mRemote.transact(Stub.TRANSACTION_getDeviceStatus, _data, _reply, 0);
_reply.readException();
if ((0!=_reply.readInt())) {
_result = android.media.midi.MidiDeviceStatus.CREATOR.createFromParcel(_reply);
}
else {
_result = null;
}
}
finally {
_reply.recycle();
_data.recycle();
}
return _result;
!!!83631927.java!!!	setDeviceStatus(inout server : IMidiDeviceServer, inout status : MidiDeviceStatus) : void
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeStrongBinder((((server!=null))?(server.asBinder()):(null)));
if ((status!=null)) {
_data.writeInt(1);
status.writeToParcel(_data, 0);
}
else {
_data.writeInt(0);
}
mRemote.transact(Stub.TRANSACTION_setDeviceStatus, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
