class Stub
!!!83637559.java!!!	Stub()
this.attachInterface(this, DESCRIPTOR);
!!!83637687.java!!!	asInterface(inout obj : IBinder) : IMediaProjectionManager
if ((obj==null)) {
return null;
}
android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);
if (((iin!=null)&&(iin instanceof android.media.projection.IMediaProjectionManager))) {
return ((android.media.projection.IMediaProjectionManager)iin);
}
return new android.media.projection.IMediaProjectionManager.Stub.Proxy(obj);
!!!83637815.java!!!	asBinder() : IBinder
return this;
!!!83637943.java!!!	onTransact(in code : int, inout data : Parcel, inout reply : Parcel, in flags : int) : boolean
switch (code)
{
case INTERFACE_TRANSACTION:
{
reply.writeString(DESCRIPTOR);
return true;
}
case TRANSACTION_hasProjectionPermission:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
java.lang.String _arg1;
_arg1 = data.readString();
boolean _result = this.hasProjectionPermission(_arg0, _arg1);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_createProjection:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
java.lang.String _arg1;
_arg1 = data.readString();
int _arg2;
_arg2 = data.readInt();
boolean _arg3;
_arg3 = (0!=data.readInt());
android.media.projection.IMediaProjection _result = this.createProjection(_arg0, _arg1, _arg2, _arg3);
reply.writeNoException();
reply.writeStrongBinder((((_result!=null))?(_result.asBinder()):(null)));
return true;
}
case TRANSACTION_isValidMediaProjection:
{
data.enforceInterface(DESCRIPTOR);
android.media.projection.IMediaProjection _arg0;
_arg0 = android.media.projection.IMediaProjection.Stub.asInterface(data.readStrongBinder());
boolean _result = this.isValidMediaProjection(_arg0);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_getActiveProjectionInfo:
{
data.enforceInterface(DESCRIPTOR);
android.media.projection.MediaProjectionInfo _result = this.getActiveProjectionInfo();
reply.writeNoException();
if ((_result!=null)) {
reply.writeInt(1);
_result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
case TRANSACTION_stopActiveProjection:
{
data.enforceInterface(DESCRIPTOR);
this.stopActiveProjection();
reply.writeNoException();
return true;
}
case TRANSACTION_addCallback:
{
data.enforceInterface(DESCRIPTOR);
android.media.projection.IMediaProjectionWatcherCallback _arg0;
_arg0 = android.media.projection.IMediaProjectionWatcherCallback.Stub.asInterface(data.readStrongBinder());
this.addCallback(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_removeCallback:
{
data.enforceInterface(DESCRIPTOR);
android.media.projection.IMediaProjectionWatcherCallback _arg0;
_arg0 = android.media.projection.IMediaProjectionWatcherCallback.Stub.asInterface(data.readStrongBinder());
this.removeCallback(_arg0);
reply.writeNoException();
return true;
}
}
return super.onTransact(code, data, reply, flags);
