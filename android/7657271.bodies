class ImageReaderTest
!!!83909943.java!!!	setUp() : void
        super.setUp();

        /**
         * Workaround for mockito and JB-MR2 incompatibility
         *
         * Avoid java.lang.IllegalArgumentException: dexcache == null
         * https://code.google.com/p/dexmaker/issues/detail?id=2
         */
        System.setProperty("dexmaker.dexcache", getContext().getCacheDir().toString());

        // TODO: refactor above into one of the test runners

        mReader = spy(ImageReader.newInstance(DEFAULT_WIDTH, DEFAULT_HEIGHT, DEFAULT_FORMAT,
                DEFAULT_MAX_IMAGES));
        mImage1 = mock(Image.class);
        mImage2 = mock(Image.class);
        mImage3 = mock(Image.class);

        /**
         * Ensure rest of classes are mockable
         */
        {
            mock(Plane.class);
            mock(OnImageAvailableListener.class);
        }

!!!83910071.java!!!	tearDown() : void
        mReader.close();

        super.tearDown();
!!!83910199.java!!!	testGetLatestImageEmpty() : void
        when(mReader.acquireNextImage()).thenReturn(null);
        when(mReader.acquireNextImageNoThrowISE()).thenReturn(null);
        assertEquals(null, mReader.acquireLatestImage());
!!!83910327.java!!!	testGetLatestImage1() : void
        when(mReader.acquireNextImage()).thenReturn(mImage1);
        when(mReader.acquireNextImageNoThrowISE()).thenReturn(null);
        assertEquals(mImage1, mReader.acquireLatestImage());
        verify(mImage1, never()).close();
!!!83910455.java!!!	testGetLatestImage2() : void
        when(mReader.acquireNextImage()).thenReturn(mImage1);
        when(mReader.acquireNextImageNoThrowISE()).thenReturn(mImage2).thenReturn(null);
        assertEquals(mImage2, mReader.acquireLatestImage());
        verify(mImage1, atLeastOnce()).close();
        verify(mImage2, never()).close();
!!!83910583.java!!!	testGetLatestImage3() : void
        when(mReader.acquireNextImage()).thenReturn(mImage1);
        when(mReader.acquireNextImageNoThrowISE()).thenReturn(mImage2).
                                                   thenReturn(mImage3).
                                                   thenReturn(null);
        assertEquals(mImage3, mReader.acquireLatestImage());
        verify(mImage1, atLeastOnce()).close();
        verify(mImage2, atLeastOnce()).close();
        verify(mImage3, never()).close();
!!!83910711.java!!!	testGetLatestImageTooManyBuffersAcquiredEmpty() : void
        when(mReader.acquireNextImage()).thenThrow(new IllegalStateException());
        try {
            mReader.acquireLatestImage();
            fail("Expected IllegalStateException to be thrown");
        } catch(IllegalStateException e) {
        }
!!!83910839.java!!!	testGetLatestImageExceptionalError() : void
        when(mReader.acquireNextImage()).thenReturn(mImage1);
        when(mReader.acquireNextImageNoThrowISE()).thenReturn(mImage2).
                                                   thenReturn(mImage3).
                                                   thenThrow(new OutOfMemoryError());
        try {
            mReader.acquireLatestImage();
            fail("Impossible");
        } catch(OutOfMemoryError e) {
        }

        verify(mImage1, atLeastOnce()).close();
        verify(mImage2, atLeastOnce()).close();
        verify(mImage3, atLeastOnce()).close();
!!!83910967.java!!!	testGetLatestImageExceptionalRuntime() : void

        when(mReader.acquireNextImage()).thenReturn(mImage1);
        when(mReader.acquireNextImageNoThrowISE()).thenReturn(mImage2).
                                                   thenReturn(mImage3).
                                                   thenThrow(new RuntimeException());
        try {
            mReader.acquireLatestImage();
            fail("Impossible");
        } catch(RuntimeException e) {
        }

        verify(mImage1, atLeastOnce()).close();
        verify(mImage2, atLeastOnce()).close();
        verify(mImage3, atLeastOnce()).close();
