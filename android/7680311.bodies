class NetworkAgentInfo
!!!84594359.java!!!	NetworkAgentInfo(inout messenger : Messenger, inout ac : AsyncChannel, inout net : Network, inout info : NetworkInfo, inout lp : LinkProperties, inout nc : NetworkCapabilities, in score : int, inout context : Context, inout handler : Handler, inout misc : NetworkMisc, inout defaultRequest : NetworkRequest, inout connService : ConnectivityService)
        this.messenger = messenger;
        asyncChannel = ac;
        network = net;
        networkInfo = info;
        linkProperties = lp;
        networkCapabilities = nc;
        currentScore = score;
        networkMonitor = connService.createNetworkMonitor(context, handler, this, defaultRequest);
        networkMisc = misc;
!!!84594487.java!!!	addRequest(inout networkRequest : NetworkRequest) : boolean
        if (networkRequests.get(networkRequest.requestId) == networkRequest) return false;
        networkRequests.put(networkRequest.requestId, networkRequest);
        return true;
!!!84594615.java!!!	satisfies(inout request : NetworkRequest) : boolean
        return created &&
                request.networkCapabilities.satisfiedByNetworkCapabilities(networkCapabilities);
!!!84594743.java!!!	satisfiesImmutableCapabilitiesOf(inout request : NetworkRequest) : boolean
        return created &&
                request.networkCapabilities.satisfiedByImmutableNetworkCapabilities(
                        networkCapabilities);
!!!84594871.java!!!	isVPN() : boolean
        return networkCapabilities.hasTransport(NetworkCapabilities.TRANSPORT_VPN);
!!!84594999.java!!!	getCurrentScore(inout pretendValidated : boolean) : int
        // TODO: We may want to refactor this into a NetworkScore class that takes a base score from
        // the NetworkAgent and signals from the NetworkAgent and uses those signals to modify the
        // score.  The NetworkScore class would provide a nice place to centralize score constants
        // so they are not scattered about the transports.

        // If this network is explicitly selected and the user has decided to use it even if it's
        // unvalidated, give it the maximum score. Also give it the maximum score if it's explicitly
        // selected and we're trying to see what its score could be. This ensures that we don't tear
        // down an explicitly selected network before the user gets a chance to prefer it when
        // a higher-scoring network (e.g., Ethernet) is available.
        if (networkMisc.explicitlySelected && (networkMisc.acceptUnvalidated || pretendValidated)) {
            return MAXIMUM_NETWORK_SCORE;
        }

        int score = currentScore;
        // Use NET_CAPABILITY_VALIDATED here instead of lastValidated, this allows
        // ConnectivityService.updateCapabilities() to compute the old score prior to updating
        // networkCapabilities (with a potentially different validated state).
        if (!networkCapabilities.hasCapability(NET_CAPABILITY_VALIDATED) && !pretendValidated) {
            score -= UNVALIDATED_SCORE_PENALTY;
        }
        if (score < 0) score = 0;
        return score;
!!!84595127.java!!!	getCurrentScore() : int
        return getCurrentScore(false);
!!!84595255.java!!!	getCurrentScoreAsValidated() : int
        return getCurrentScore(true);
!!!84595383.java!!!	setCurrentScore(in newScore : int) : void
        currentScore = newScore;
!!!84595511.java!!!	getNetworkState() : NetworkState
        synchronized (this) {
            // Network objects are outwardly immutable so there is no point to duplicating.
            // Duplicating also precludes sharing socket factories and connection pools.
            final String subscriberId = (networkMisc != null) ? networkMisc.subscriberId : null;
            return new NetworkState(new NetworkInfo(networkInfo),
                    new LinkProperties(linkProperties),
                    new NetworkCapabilities(networkCapabilities), network, subscriberId, null);
        }
!!!84595639.java!!!	toString() : String
        return "NetworkAgentInfo{ ni{" + networkInfo + "}  " +
                "network{" + network + "}  nethandle{" + network.getNetworkHandle() + "}  " +
                "lp{" + linkProperties + "}  " +
                "nc{" + networkCapabilities + "}  Score{" + getCurrentScore() + "}  " +
                "everValidated{" + everValidated + "}  lastValidated{" + lastValidated + "}  " +
                "created{" + created + "} lingering{" + lingering + "} " +
                "explicitlySelected{" + networkMisc.explicitlySelected + "} " +
                "acceptUnvalidated{" + networkMisc.acceptUnvalidated + "} " +
                "everCaptivePortalDetected{" + everCaptivePortalDetected + "} " +
                "lastCaptivePortalDetected{" + lastCaptivePortalDetected + "} " +
                "}";
!!!84595767.java!!!	name() : String
        return "NetworkAgentInfo [" + networkInfo.getTypeName() + " (" +
                networkInfo.getSubtypeName() + ") - " +
                (network == null ? "null" : network.toString()) + "]";
!!!84595895.java!!!	compareTo(inout other : NetworkAgentInfo) : int
        return other.getCurrentScore() - getCurrentScore();
