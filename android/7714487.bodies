class ActivityContainer
!!!84425783.java!!!	ActivityContainer(in stackId : int)
            synchronized (mService) {
                mStackId = stackId;
                mStack = new ActivityStack(this, mRecentTasks);
                mIdString = "ActivtyContainer{" + mStackId + "}";
                if (DEBUG_STACK) Slog.d(TAG_STACK, "Creating " + this);
            }
!!!84425911.java!!!	attachToDisplayLocked(inout activityDisplay : ActivityStackSupervisor::ActivityDisplay, inout onTop : boolean) : void
            if (DEBUG_STACK) Slog.d(TAG_STACK, "attachToDisplayLocked: " + this
                    + " to display=" + activityDisplay + " onTop=" + onTop);
            mActivityDisplay = activityDisplay;
            mStack.attachDisplay(activityDisplay, onTop);
            activityDisplay.attachActivities(mStack, onTop);
!!!84426039.java!!!	attachToDisplay(in displayId : int) : void
            synchronized (mService) {
                ActivityDisplay activityDisplay = mActivityDisplays.get(displayId);
                if (activityDisplay == null) {
                    return;
                }
                attachToDisplayLocked(activityDisplay, true);
            }
!!!84426167.java!!!	getDisplayId() : int
            synchronized (mService) {
                if (mActivityDisplay != null) {
                    return mActivityDisplay.mDisplayId;
                }
            }
            return -1;
!!!84426295.java!!!	getStackId() : int
            synchronized (mService) {
                return mStackId;
            }
!!!84426423.java!!!	injectEvent(inout event : InputEvent) : boolean
            final long origId = Binder.clearCallingIdentity();
            try {
                synchronized (mService) {
                    if (mActivityDisplay != null) {
                        return mInputManagerInternal.injectInputEvent(event,
                                mActivityDisplay.mDisplayId,
                                InputManager.INJECT_INPUT_EVENT_MODE_ASYNC);
                    }
                }
                return false;
            } finally {
                Binder.restoreCallingIdentity(origId);
            }
!!!84426551.java!!!	release() : void
            synchronized (mService) {
                if (mContainerState == CONTAINER_STATE_FINISHING) {
                    return;
                }
                mContainerState = CONTAINER_STATE_FINISHING;

                long origId = Binder.clearCallingIdentity();
                try {
                    mStack.finishAllActivitiesLocked(false);
                    mService.mActivityStarter.removePendingActivityLaunchesLocked(mStack);
                } finally {
                    Binder.restoreCallingIdentity(origId);
                }
            }
!!!84426679.java!!!	detachLocked() : void
            if (DEBUG_STACK) Slog.d(TAG_STACK, "detachLocked: " + this + " from display="
                    + mActivityDisplay + " Callers=" + Debug.getCallers(2));
            if (mActivityDisplay != null) {
                mActivityDisplay.detachActivitiesLocked(mStack);
                mActivityDisplay = null;
                mStack.detachDisplay();
            }
!!!84426807.java!!!	startActivity(inout intent : Intent) : int
            return mService.startActivity(intent, this);
!!!84426935.java!!!	startActivityIntentSender(inout intentSender : IIntentSender) : int
            mService.enforceNotIsolatedCaller("ActivityContainer.startActivityIntentSender");

            if (!(intentSender instanceof PendingIntentRecord)) {
                throw new IllegalArgumentException("Bad PendingIntent object");
            }

            final int userId = mService.mUserController.handleIncomingUser(Binder.getCallingPid(),
                    Binder.getCallingUid(), mCurrentUser, false,
                    ActivityManagerService.ALLOW_FULL_ONLY, "ActivityContainer", null);

            final PendingIntentRecord pendingIntent = (PendingIntentRecord) intentSender;
            checkEmbeddedAllowedInner(userId, pendingIntent.key.requestIntent,
                    pendingIntent.key.requestResolvedType);

            return pendingIntent.sendInner(0, null, null, null, null, null, null, 0,
                    FORCE_NEW_TASK_FLAGS, FORCE_NEW_TASK_FLAGS, null, this);
!!!84427063.java!!!	checkEmbeddedAllowedInner(in userId : int, inout intent : Intent, inout resolvedType : String) : void
            ActivityInfo aInfo = resolveActivity(intent, resolvedType, 0, null, userId);
            if (aInfo != null && (aInfo.flags & ActivityInfo.FLAG_ALLOW_EMBEDDED) == 0) {
                throw new SecurityException(
                        "Attempt to embed activity that has not set allowEmbedded=\"true\"");
            }
!!!84427191.java!!!	asBinder() : IBinder
            return this;
!!!84427319.java!!!	setSurface(inout surface : Surface, in width : int, in height : int, in density : int) : void
            mService.enforceNotIsolatedCaller("ActivityContainer.attachToSurface");
!!!84427447.java!!!	getOuter() : ActivityStackSupervisor
            return ActivityStackSupervisor.this;
!!!84427575.java!!!	isAttachedLocked() : boolean
            return mActivityDisplay != null;
!!!84427703.java!!!	setVisible(inout visible : boolean) : void
            if (mVisible != visible) {
                mVisible = visible;
                if (mCallback != null) {
                    mHandler.obtainMessage(CONTAINER_CALLBACK_VISIBILITY, visible ? 1 : 0,
                            0 /* unused */, this).sendToTarget();
                }
            }
!!!84427959.java!!!	isEligibleForNewTasks() : boolean
            return true;
!!!84428087.java!!!	onTaskListEmptyLocked() : void
            detachLocked();
            deleteActivityContainer(this);
            mHandler.obtainMessage(CONTAINER_CALLBACK_TASK_LIST_EMPTY, this).sendToTarget();
!!!84428215.java!!!	toString() : String
            return mIdString + (mActivityDisplay == null ? "N" : "A");
