class UserSwitchingDialog
!!!84527031.java!!!	UserSwitchingDialog(inout service : ActivityManagerService, inout context : Context, inout oldUser : UserInfo, inout newUser : UserInfo, inout aboveSystem : boolean)
        super(context);

        mService = service;
        mUserId = newUser.id;

        // Set up the dialog contents
        setCancelable(false);
        Resources res = getContext().getResources();
        // Custom view due to alignment and font size requirements
        View view = LayoutInflater.from(getContext()).inflate(R.layout.user_switching_dialog, null);

        String viewMessage;
        if (UserManager.isSplitSystemUser() && newUser.id == UserHandle.USER_SYSTEM) {
            viewMessage = res.getString(R.string.user_logging_out_message, oldUser.name);
        } else {
            viewMessage = res.getString(R.string.user_switching_message, newUser.name);
        }
        ((TextView) view.findViewById(R.id.message)).setText(viewMessage);
        setView(view);

        if (aboveSystem) {
            getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ERROR);
        }
        WindowManager.LayoutParams attrs = getWindow().getAttributes();
        attrs.privateFlags = WindowManager.LayoutParams.PRIVATE_FLAG_SYSTEM_ERROR |
                WindowManager.LayoutParams.PRIVATE_FLAG_SHOW_FOR_ALL_USERS;
        getWindow().setAttributes(attrs);
!!!84527159.java!!!	show() : void
        // Slog.v(TAG, "show called");
        super.show();
        final View decorView = getWindow().getDecorView();
        if (decorView != null) {
            decorView.getViewTreeObserver().addOnWindowShownListener(this);
        }
        // Add a timeout as a safeguard, in case a race in screen on/off causes the window
        // callback to never come.
        mHandler.sendMessageDelayed(mHandler.obtainMessage(MSG_START_USER),
                WINDOW_SHOWN_TIMEOUT_MS);
!!!84527287.java!!!	onWindowShown() : void
        // Slog.v(TAG, "onWindowShown called");
        startUser();
!!!84527415.java!!!	startUser() : void
        synchronized (this) {
            if (!mStartedUser) {
                mService.mUserController.startUserInForeground(mUserId, this);
                mStartedUser = true;
                final View decorView = getWindow().getDecorView();
                if (decorView != null) {
                    decorView.getViewTreeObserver().removeOnWindowShownListener(this);
                }
                mHandler.removeMessages(MSG_START_USER);
            }
        }
