class RecordingActivityMonitor
!!!84571447.java!!!	RecordingActivityMonitor()
        RecMonitorClient.sMonitor = this;
!!!84571575.java!!!	onRecordingConfigurationChanged(in event : int, in session : int, in source : int, inout recordingInfo : int [[]]) : void
        if (MediaRecorder.isSystemOnlyAudioSource(source)) {
            return;
        }
        final List<AudioRecordingConfiguration> configs =
                updateSnapshot(event, session, source, recordingInfo);
        if (configs != null){
            synchronized(mClients) {
                final Iterator<RecMonitorClient> clientIterator = mClients.iterator();
                while (clientIterator.hasNext()) {
                    try {
                        clientIterator.next().mDispatcherCb.dispatchRecordingConfigChange(
                                configs);
                    } catch (RemoteException e) {
                        Log.w(TAG, "Could not call dispatchRecordingConfigChange() on client", e);
                    }
                }
            }
        }
!!!84571703.java!!!	initMonitor() : void
        AudioSystem.setRecordingCallback(this);
!!!84571831.java!!!	registerRecordingCallback(inout rcdb : IRecordingConfigDispatcher) : void
        if (rcdb == null) {
            return;
        }
        synchronized(mClients) {
            final RecMonitorClient rmc = new RecMonitorClient(rcdb);
            if (rmc.init()) {
                mClients.add(rmc);
            }
        }
!!!84571959.java!!!	unregisterRecordingCallback(inout rcdb : IRecordingConfigDispatcher) : void
        if (rcdb == null) {
            return;
        }
        synchronized(mClients) {
            final Iterator<RecMonitorClient> clientIterator = mClients.iterator();
            while (clientIterator.hasNext()) {
                RecMonitorClient rmc = clientIterator.next();
                if (rcdb.equals(rmc.mDispatcherCb)) {
                    rmc.release();
                    clientIterator.remove();
                    break;
                }
            }
        }
!!!84572087.java!!!	getActiveRecordingConfigurations() : AudioRecordingConfiguration
        synchronized(mRecordConfigs) {
            return new ArrayList<AudioRecordingConfiguration>(mRecordConfigs.values());
        }
!!!84572215.java!!!	updateSnapshot(in event : int, in session : int, in source : int, inout recordingInfo : int [[]]) : AudioRecordingConfiguration
        final boolean configChanged;
        final ArrayList<AudioRecordingConfiguration> configs;
        synchronized(mRecordConfigs) {
            switch (event) {
            case AudioManager.RECORD_CONFIG_EVENT_STOP:
                // return failure if an unknown recording session stopped
                configChanged = (mRecordConfigs.remove(new Integer(session)) != null);
                break;
            case AudioManager.RECORD_CONFIG_EVENT_START:
                final AudioFormat clientFormat = new AudioFormat.Builder()
                        .setEncoding(recordingInfo[0])
                        // FIXME this doesn't support index-based masks
                        .setChannelMask(recordingInfo[1])
                        .setSampleRate(recordingInfo[2])
                        .build();
                final AudioFormat deviceFormat = new AudioFormat.Builder()
                        .setEncoding(recordingInfo[3])
                        // FIXME this doesn't support index-based masks
                        .setChannelMask(recordingInfo[4])
                        .setSampleRate(recordingInfo[5])
                        .build();
                final int patchHandle = recordingInfo[6];
                final Integer sessionKey = new Integer(session);
                if (mRecordConfigs.containsKey(sessionKey)) {
                    final AudioRecordingConfiguration updatedConfig =
                            new AudioRecordingConfiguration(session, source,
                                    clientFormat, deviceFormat, patchHandle);
                    if (updatedConfig.equals(mRecordConfigs.get(sessionKey))) {
                        configChanged = false;
                    } else {
                        // config exists but has been modified
                        mRecordConfigs.remove(sessionKey);
                        mRecordConfigs.put(sessionKey, updatedConfig);
                        configChanged = true;
                    }
                } else {
                    mRecordConfigs.put(sessionKey,
                            new AudioRecordingConfiguration(session, source,
                                    clientFormat, deviceFormat, patchHandle));
                    configChanged = true;
                }
                break;
            default:
                Log.e(TAG, String.format("Unknown event %d for session %d, source %d",
                        event, session, source));
                configChanged = false;
            }
            if (configChanged) {
                configs = new ArrayList<AudioRecordingConfiguration>(mRecordConfigs.values());
            } else {
                configs = null;
            }
        }
        return configs;
