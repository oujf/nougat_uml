class ClientMonitor
!!!84731959.java!!!	ClientMonitor(inout context : Context, in halDeviceId : long, inout token : IBinder, inout receiver : IFingerprintServiceReceiver, in userId : int, in groupId : int, inout restricted : boolean, inout owner : String)
        mContext = context;
        mHalDeviceId = halDeviceId;
        mToken = token;
        mReceiver = receiver;
        mTargetUserId = userId;
        mGroupId = groupId;
        mIsRestricted = restricted;
        mOwner = owner;
        try {
            token.linkToDeath(this, 0);
        } catch (RemoteException e) {
            Slog.w(TAG, "caught remote exception in linkToDeath: ", e);
        }
!!!84733111.java!!!	onAcquired(in acquiredInfo : int) : boolean
        if (mReceiver == null)
            return true; // client not connected
        try {
            mReceiver.onAcquired(getHalDeviceId(), acquiredInfo);
            return false; // acquisition continues...
        } catch (RemoteException e) {
            Slog.w(TAG, "Failed to invoke sendAcquired:", e);
            return true; // client failed
        } finally {
            // Good scans will keep the device awake
            if (acquiredInfo == FingerprintManager.FINGERPRINT_ACQUIRED_GOOD) {
                notifyUserActivity();
            }
        }
!!!84733239.java!!!	onError(in error : int) : boolean
        if (mReceiver != null) {
            try {
                mReceiver.onError(getHalDeviceId(), error);
            } catch (RemoteException e) {
                Slog.w(TAG, "Failed to invoke sendError:", e);
            }
        }
        return true; // errors always remove current client
!!!84733367.java!!!	destroy() : void
        if (mToken != null) {
            try {
                mToken.unlinkToDeath(this, 0);
            } catch (NoSuchElementException e) {
                // TODO: remove when duplicate call bug is found
                Slog.e(TAG, "destroy(): " + this + ":", new Exception("here"));
            }
            mToken = null;
        }
        mReceiver = null;
!!!84733495.java!!!	binderDied() : void
        mToken = null;
        mReceiver = null;
        onError(FingerprintManager.FINGERPRINT_ERROR_HW_UNAVAILABLE);
!!!84733623.java!!!	finalize() : void
        try {
            if (mToken != null) {
                if (DEBUG) Slog.w(TAG, "removing leaked reference: " + mToken);
                onError(FingerprintManager.FINGERPRINT_ERROR_HW_UNAVAILABLE);
            }
        } finally {
            super.finalize();
        }
!!!84733751.java!!!	getContext() : Context
        return mContext;
!!!84733879.java!!!	getHalDeviceId() : long
        return mHalDeviceId;
!!!84734007.java!!!	getOwnerString() : String
        return mOwner;
!!!84734135.java!!!	getReceiver() : IFingerprintServiceReceiver
        return mReceiver;
!!!84734263.java!!!	getIsRestricted() : boolean
        return mIsRestricted;
!!!84734391.java!!!	getTargetUserId() : int
        return mTargetUserId;
!!!84734519.java!!!	getGroupId() : int
        return mGroupId;
!!!84734647.java!!!	getToken() : IBinder
        return mToken;
