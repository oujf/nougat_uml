class HdmiCecKeycode
!!!84772535.java!!!	intToSingleByteArray(in value : int) : byte
        return new byte[] {
                (byte) (value & 0xFF) };
!!!84772663.java!!!	androidKeyToCecKey(in keycode : int) : byte
        for (int i = 0; i < KEYCODE_ENTRIES.length; ++i) {
            byte[] cecKeycodeAndParams = KEYCODE_ENTRIES[i].toCecKeycodeAndParamIfMatched(keycode);
            if (cecKeycodeAndParams != null) {
                return cecKeycodeAndParams;
            }
        }
        return null;
!!!84772791.java!!!	cecKeycodeAndParamsToAndroidKey(inout cecKeycodeAndParams : byte [[]]) : int
        for (int i = 0; i < KEYCODE_ENTRIES.length; ++i) {
            int androidKey = KEYCODE_ENTRIES[i].toAndroidKeycodeIfMatched(cecKeycodeAndParams);
            if (androidKey != UNSUPPORTED_KEYCODE) {
                return androidKey;
            }
        }
        return UNSUPPORTED_KEYCODE;
!!!84772919.java!!!	isRepeatableKey(in androidKeycode : int) : boolean
        for (int i = 0; i < KEYCODE_ENTRIES.length; ++i) {
            Boolean isRepeatable = KEYCODE_ENTRIES[i].isRepeatableIfMatched(androidKeycode);
            if (isRepeatable != null) {
                return isRepeatable;
            }
        }
        return false;
!!!84773047.java!!!	isSupportedKeycode(in androidKeycode : int) : boolean
        return HdmiCecKeycode.androidKeyToCecKey(androidKeycode) != null;
!!!84773175.java!!!	getMuteKey(inout muting : boolean) : int
        // CEC_KEYCODE_MUTE_FUNCTION, CEC_KEYCODE_RESTORE_VOLUME_FUNCTION are deterministic
        // commands that ensures the status changes to what we want, while CEC_KEYCODE_MUTE
        // simply toggles the status.
        // The former is a better choice in this regard, but there are compatibility issues
        // observed - many audio receivers don't recognize the commands. We fall back on
        // CEC_KEYCODE_MUTE for now.
        // return muting ? CEC_KEYCODE_MUTE_FUNCTION : CEC_KEYCODE_RESTORE_VOLUME_FUNCTION;
        return CEC_KEYCODE_MUTE;
