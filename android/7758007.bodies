class HdmiUtils
!!!84844343.java!!!	HdmiUtils()
 /* cannot be instantiated */
!!!84844471.java!!!	isValidAddress(in address : int) : boolean
        return (Constants.ADDR_TV <= address && address <= Constants.ADDR_SPECIFIC_USE);
!!!84844599.java!!!	getTypeFromAddress(in address : int) : int
        if (isValidAddress(address)) {
            return ADDRESS_TO_TYPE[address];
        }
        return HdmiDeviceInfo.DEVICE_INACTIVE;
!!!84844727.java!!!	getDefaultDeviceName(in address : int) : String
        if (isValidAddress(address)) {
            return DEFAULT_NAMES[address];
        }
        return "";
!!!84844855.java!!!	verifyAddressType(in logicalAddress : int, in deviceType : int) : void
        int actualDeviceType = getTypeFromAddress(logicalAddress);
        if (actualDeviceType != deviceType) {
            throw new IllegalArgumentException("Device type missmatch:[Expected:" + deviceType
                    + ", Actual:" + actualDeviceType);
        }
!!!84844983.java!!!	checkCommandSource(inout cmd : HdmiCecMessage, in expectedAddress : int, inout tag : String) : boolean
        int src = cmd.getSource();
        if (src != expectedAddress) {
            Slog.w(tag, "Invalid source [Expected:" + expectedAddress + ", Actual:" + src + "]");
            return false;
        }
        return true;
!!!84845111.java!!!	parseCommandParamSystemAudioStatus(inout cmd : HdmiCecMessage) : boolean
        return cmd.getParams()[0] == Constants.SYSTEM_AUDIO_STATUS_ON;
!!!84845239.java!!!	asImmutableList(in is : int [[]]) : List<Integer>
        ArrayList<Integer> list = new ArrayList<>(is.length);
        for (int type : is) {
            list.add(type);
        }
        return Collections.unmodifiableList(list);
!!!84845367.java!!!	twoBytesToInt(inout data : byte [[]]) : int
        return ((data[0] & 0xFF) << 8) | (data[1] & 0xFF);
!!!84845495.java!!!	twoBytesToInt(inout data : byte [[]], in offset : int) : int
        return ((data[offset] & 0xFF) << 8) | (data[offset + 1] & 0xFF);
!!!84845623.java!!!	threeBytesToInt(inout data : byte [[]]) : int
        return ((data[0] & 0xFF) << 16) | ((data[1] & 0xFF) << 8) | (data[2] & 0xFF);
!!!84845751.java!!!	sparseArrayToList(inout array : SparseArray) : List<T>
        ArrayList<T> list = new ArrayList<>();
        for (int i = 0; i < array.size(); ++i) {
            list.add(array.valueAt(i));
        }
        return list;
!!!84845879.java!!!	mergeToUnmodifiableList(inout a : List<T>, inout b : List<T>) : List<T>
        if (a.isEmpty() && b.isEmpty()) {
            return Collections.emptyList();
        }
        if (a.isEmpty()) {
            return Collections.unmodifiableList(b);
        }
        if (b.isEmpty()) {
            return Collections.unmodifiableList(a);
        }
        List<T> newList = new ArrayList<>();
        newList.addAll(a);
        newList.addAll(b);
        return Collections.unmodifiableList(newList);
!!!84846007.java!!!	isAffectingActiveRoutingPath(in activePath : int, in newPath : int) : boolean
        // The new path affects the current active path if the parent of the new path
        // is an ancestor of the active path.
        // (1.1.0.0, 2.0.0.0) -> true, new path alters the parent
        // (1.1.0.0, 1.2.0.0) -> true, new path is a sibling
        // (1.1.0.0, 1.2.1.0) -> false, new path is a descendant of a sibling
        // (1.0.0.0, 3.2.0.0) -> false, in a completely different path

        // Get the parent of the new path by clearing the least significant
        // non-zero nibble.
        for (int i = 0; i <= 12; i += 4) {
            int nibble = (newPath >> i) & 0xF;
            if (nibble != 0) {
                int mask = 0xFFF0 << i;
                newPath &= mask;
                break;
            }
        }
        if (newPath == 0x0000) {
            return true;  // Top path always affects the active path
        }
        return isInActiveRoutingPath(activePath, newPath);
!!!84846135.java!!!	isInActiveRoutingPath(in activePath : int, in newPath : int) : boolean
        // Check each nibble of the currently active path and the new path till the position
        // where the active nibble is not zero. For (activePath, newPath),
        // (1.1.0.0, 1.0.0.0) -> true, new path is a parent
        // (1.2.1.0, 1.2.1.2) -> true, new path is a descendant
        // (1.1.0.0, 1.2.0.0) -> false, new path is a sibling
        // (1.0.0.0, 2.0.0.0) -> false, in a completely different path
        for (int i = 12; i >= 0; i -= 4) {
            int nibbleActive = (activePath >> i) & 0xF;
            if (nibbleActive == 0) {
                break;
            }
            int nibbleNew = (newPath >> i) & 0xF;
            if (nibbleNew == 0) {
                break;
            }
            if (nibbleActive != nibbleNew) {
                return false;
            }
        }
        return true;
!!!84846263.java!!!	cloneHdmiDeviceInfo(inout info : HdmiDeviceInfo, in newPowerStatus : int) : HdmiDeviceInfo
        return new HdmiDeviceInfo(info.getLogicalAddress(),
                info.getPhysicalAddress(), info.getPortId(), info.getDeviceType(),
                info.getVendorId(), info.getDisplayName(), newPowerStatus);
!!!84846391.java!!!	languageToInt(inout language : String) : int
        String normalized = language.toLowerCase();
        return ((normalized.charAt(0) & 0xFF) << 16)
                | ((normalized.charAt(1) & 0xFF) << 8)
                | (normalized.charAt(2) & 0xFF);
