class NewDeviceAction
!!!84848823.java!!!	NewDeviceAction(inout source : HdmiCecLocalDevice, in deviceLogicalAddress : int, in devicePhysicalAddress : int, in deviceType : int)
        super(source);
        mDeviceLogicalAddress = deviceLogicalAddress;
        mDevicePhysicalAddress = devicePhysicalAddress;
        mDeviceType = deviceType;
        mVendorId = Constants.UNKNOWN_VENDOR_ID;
!!!84848951.java!!!	start() : boolean
        requestOsdName(true);
        return true;
!!!84849079.java!!!	requestOsdName(inout firstTry : boolean) : void
        if (firstTry) {
            mTimeoutRetry = 0;
        }
        mState = STATE_WAITING_FOR_SET_OSD_NAME;
        if (mayProcessCommandIfCached(mDeviceLogicalAddress, Constants.MESSAGE_SET_OSD_NAME)) {
            return;
        }

        sendCommand(HdmiCecMessageBuilder.buildGiveOsdNameCommand(getSourceAddress(),
                mDeviceLogicalAddress));
        addTimer(mState, HdmiConfig.TIMEOUT_MS);
!!!84849207.java!!!	processCommand(inout cmd : HdmiCecMessage) : boolean
        // For the logical device in interest, we want two more pieces of information -
        // osd name and vendor id. They are requested in sequence. In case we don't
        // get the expected responses (either by timeout or by receiving <feature abort> command),
        // set them to a default osd name and unknown vendor id respectively.
        int opcode = cmd.getOpcode();
        int src = cmd.getSource();
        byte[] params = cmd.getParams();

        if (mDeviceLogicalAddress != src) {
            return false;
        }

        if (mState == STATE_WAITING_FOR_SET_OSD_NAME) {
            if (opcode == Constants.MESSAGE_SET_OSD_NAME) {
                try {
                    mDisplayName = new String(params, "US-ASCII");
                } catch (UnsupportedEncodingException e) {
                    Slog.e(TAG, "Failed to get OSD name: " + e.getMessage());
                }
                requestVendorId(true);
                return true;
            } else if (opcode == Constants.MESSAGE_FEATURE_ABORT) {
                int requestOpcode = params[0] & 0xFF;
                if (requestOpcode == Constants.MESSAGE_GIVE_OSD_NAME) {
                    requestVendorId(true);
                    return true;
                }
            }
        } else if (mState == STATE_WAITING_FOR_DEVICE_VENDOR_ID) {
            if (opcode == Constants.MESSAGE_DEVICE_VENDOR_ID) {
                mVendorId = HdmiUtils.threeBytesToInt(params);
                addDeviceInfo();
                finish();
                return true;
            } else if (opcode == Constants.MESSAGE_FEATURE_ABORT) {
                int requestOpcode = params[0] & 0xFF;
                if (requestOpcode == Constants.MESSAGE_GIVE_DEVICE_VENDOR_ID) {
                    addDeviceInfo();
                    finish();
                    return true;
                }
            }
        }
        return false;
!!!84849335.java!!!	mayProcessCommandIfCached(in destAddress : int, in opcode : int) : boolean
        HdmiCecMessage message = getCecMessageCache().getMessage(destAddress, opcode);
        if (message != null) {
            return processCommand(message);
        }
        return false;
!!!84849463.java!!!	requestVendorId(inout firstTry : boolean) : void
        if (firstTry) {
            mTimeoutRetry = 0;
        }
        // At first, transit to waiting status for <Device Vendor Id>.
        mState = STATE_WAITING_FOR_DEVICE_VENDOR_ID;
        // If the message is already in cache, process it.
        if (mayProcessCommandIfCached(mDeviceLogicalAddress,
                Constants.MESSAGE_DEVICE_VENDOR_ID)) {
            return;
        }
        sendCommand(HdmiCecMessageBuilder.buildGiveDeviceVendorIdCommand(getSourceAddress(),
                mDeviceLogicalAddress));
        addTimer(mState, HdmiConfig.TIMEOUT_MS);
!!!84849591.java!!!	addDeviceInfo() : void
        // The device should be in the device list with default information.
        if (!tv().isInDeviceList(mDeviceLogicalAddress, mDevicePhysicalAddress)) {
            Slog.w(TAG, String.format("Device not found (%02x, %04x)",
                    mDeviceLogicalAddress, mDevicePhysicalAddress));
            return;
        }
        if (mDisplayName == null) {
            mDisplayName = HdmiUtils.getDefaultDeviceName(mDeviceLogicalAddress);
        }
        HdmiDeviceInfo deviceInfo = new HdmiDeviceInfo(
                mDeviceLogicalAddress, mDevicePhysicalAddress,
                tv().getPortId(mDevicePhysicalAddress),
                mDeviceType, mVendorId, mDisplayName);
        tv().addCecDevice(deviceInfo);

        // Consume CEC messages we already got for this newly found device.
        tv().processDelayedMessages(mDeviceLogicalAddress);

        if (HdmiUtils.getTypeFromAddress(mDeviceLogicalAddress)
                == HdmiDeviceInfo.DEVICE_AUDIO_SYSTEM) {
            tv().onNewAvrAdded(deviceInfo);
        }
!!!84849719.java!!!	handleTimerEvent(in state : int) : void
        if (mState == STATE_NONE || mState != state) {
            return;
        }
        if (state == STATE_WAITING_FOR_SET_OSD_NAME) {
            if (++mTimeoutRetry < HdmiConfig.TIMEOUT_RETRY) {
                requestOsdName(false);
                return;
            }
            // Osd name request timed out. Try vendor id
            requestVendorId(true);
        } else if (state == STATE_WAITING_FOR_DEVICE_VENDOR_ID) {
            if (++mTimeoutRetry < HdmiConfig.TIMEOUT_RETRY) {
                requestVendorId(false);
                return;
            }
            // vendor id timed out. Go ahead creating the device info what we've got so far.
            addDeviceInfo();
            finish();
        }
!!!84849847.java!!!	isActionOf(inout activeSource : HdmiCecLocalDevice::ActiveSource) : boolean
        return (mDeviceLogicalAddress == activeSource.logicalAddress)
                && (mDevicePhysicalAddress == activeSource.physicalAddress);
