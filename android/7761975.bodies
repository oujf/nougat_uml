class JobServiceContext
!!!84893879.java!!!	JobServiceContext(inout service : JobSchedulerService, inout batteryStats : IBatteryStats, inout tracker : JobPackageTracker, inout looper : Looper)
        this(service.getContext(), service.getLock(), batteryStats, tracker, service, looper);
!!!84894007.java!!!	JobServiceContext(inout context : Context, inout lock : Object, inout batteryStats : IBatteryStats, inout tracker : JobPackageTracker, inout completedListener : JobCompletedListener, inout looper : Looper)
        mContext = context;
        mLock = lock;
        mBatteryStats = batteryStats;
        mJobPackageTracker = tracker;
        mCallbackHandler = new JobServiceHandler(looper);
        mCompletedListener = completedListener;
        mAvailable = true;
        mVerb = VERB_FINISHED;
        mPreferredUid = NO_PREFERRED_UID;
!!!84894135.java!!!	executeRunnableJob(inout job : JobStatus) : boolean
        synchronized (mLock) {
            if (!mAvailable) {
                Slog.e(TAG, "Starting new runnable but context is unavailable > Error.");
                return false;
            }

            mPreferredUid = NO_PREFERRED_UID;

            mRunningJob = job;
            final boolean isDeadlineExpired =
                    job.hasDeadlineConstraint() &&
                            (job.getLatestRunTimeElapsed() < SystemClock.elapsedRealtime());
            Uri[] triggeredUris = null;
            if (job.changedUris != null) {
                triggeredUris = new Uri[job.changedUris.size()];
                job.changedUris.toArray(triggeredUris);
            }
            String[] triggeredAuthorities = null;
            if (job.changedAuthorities != null) {
                triggeredAuthorities = new String[job.changedAuthorities.size()];
                job.changedAuthorities.toArray(triggeredAuthorities);
            }
            mParams = new JobParameters(this, job.getJobId(), job.getExtras(), isDeadlineExpired,
                    triggeredUris, triggeredAuthorities);
            mExecutionStartTimeElapsed = SystemClock.elapsedRealtime();

            mVerb = VERB_BINDING;
            scheduleOpTimeOut();
            final Intent intent = new Intent().setComponent(job.getServiceComponent());
            boolean binding = mContext.bindServiceAsUser(intent, this,
                    Context.BIND_AUTO_CREATE | Context.BIND_NOT_FOREGROUND,
                    new UserHandle(job.getUserId()));
            if (!binding) {
                if (DEBUG) {
                    Slog.d(TAG, job.getServiceComponent().getShortClassName() + " unavailable.");
                }
                mRunningJob = null;
                mParams = null;
                mExecutionStartTimeElapsed = 0L;
                mVerb = VERB_FINISHED;
                removeOpTimeOut();
                return false;
            }
            try {
                mBatteryStats.noteJobStart(job.getBatteryName(), job.getSourceUid());
            } catch (RemoteException e) {
                // Whatever.
            }
            mJobPackageTracker.noteActive(job);
            mAvailable = false;
            return true;
        }
!!!84894263.java!!!	getRunningJob() : JobStatus
        final JobStatus job;
        synchronized (mLock) {
            job = mRunningJob;
        }
        return job == null ? null : new JobStatus(job);
!!!84894391.java!!!	cancelExecutingJob(in reason : int) : void
        mCallbackHandler.obtainMessage(MSG_CANCEL, reason, 0 /* unused */).sendToTarget();
!!!84894519.java!!!	preemptExecutingJob() : void
        Message m = mCallbackHandler.obtainMessage(MSG_CANCEL);
        m.arg1 = JobParameters.REASON_PREEMPT;
        m.sendToTarget();
!!!84894647.java!!!	getPreferredUid() : int
        return mPreferredUid;
!!!84894775.java!!!	clearPreferredUid() : void
        mPreferredUid = NO_PREFERRED_UID;
!!!84894903.java!!!	getExecutionStartTimeElapsed() : long
        return mExecutionStartTimeElapsed;
!!!84895031.java!!!	getTimeoutElapsed() : long
        return mTimeoutElapsed;
!!!84895159.java!!!	jobFinished(in jobId : int, inout reschedule : boolean) : void
        if (!verifyCallingUid()) {
            return;
        }
        mCallbackHandler.obtainMessage(MSG_CALLBACK, jobId, reschedule ? 1 : 0)
                .sendToTarget();
!!!84895287.java!!!	acknowledgeStopMessage(in jobId : int, inout reschedule : boolean) : void
        if (!verifyCallingUid()) {
            return;
        }
        mCallbackHandler.obtainMessage(MSG_CALLBACK, jobId, reschedule ? 1 : 0)
                .sendToTarget();
!!!84895415.java!!!	acknowledgeStartMessage(in jobId : int, inout ongoing : boolean) : void
        if (!verifyCallingUid()) {
            return;
        }
        mCallbackHandler.obtainMessage(MSG_CALLBACK, jobId, ongoing ? 1 : 0).sendToTarget();
!!!84895543.java!!!	onServiceConnected(inout name : ComponentName, inout service : IBinder) : void
        JobStatus runningJob;
        synchronized (mLock) {
            // This isn't strictly necessary b/c the JobServiceHandler is running on the main
            // looper and at this point we can't get any binder callbacks from the client. Better
            // safe than sorry.
            runningJob = mRunningJob;
        }
        if (runningJob == null || !name.equals(runningJob.getServiceComponent())) {
            mCallbackHandler.obtainMessage(MSG_SHUTDOWN_EXECUTION).sendToTarget();
            return;
        }
        this.service = IJobService.Stub.asInterface(service);
        final PowerManager pm =
                (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);
        mWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, runningJob.getTag());
        mWakeLock.setWorkSource(new WorkSource(runningJob.getSourceUid()));
        mWakeLock.setReferenceCounted(false);
        mWakeLock.acquire();
        mCallbackHandler.obtainMessage(MSG_SERVICE_BOUND).sendToTarget();
!!!84895671.java!!!	onServiceDisconnected(inout name : ComponentName) : void
        mCallbackHandler.obtainMessage(MSG_SHUTDOWN_EXECUTION).sendToTarget();
!!!84895799.java!!!	verifyCallingUid() : boolean
        synchronized (mLock) {
            if (mRunningJob == null || Binder.getCallingUid() != mRunningJob.getUid()) {
                if (DEBUG) {
                    Slog.d(TAG, "Stale callback received, ignoring.");
                }
                return false;
            }
            return true;
        }
!!!84897079.java!!!	scheduleOpTimeOut() : void
        removeOpTimeOut();

        final long timeoutMillis = (mVerb == VERB_EXECUTING) ?
                EXECUTING_TIMESLICE_MILLIS : OP_TIMEOUT_MILLIS;
        if (DEBUG) {
            Slog.d(TAG, "Scheduling time out for '" +
                    mRunningJob.getServiceComponent().getShortClassName() + "' jId: " +
                    mParams.getJobId() + ", in " + (timeoutMillis / 1000) + " s");
        }
        Message m = mCallbackHandler.obtainMessage(MSG_TIMEOUT);
        mCallbackHandler.sendMessageDelayed(m, timeoutMillis);
        mTimeoutElapsed = SystemClock.elapsedRealtime() + timeoutMillis;
!!!84897207.java!!!	removeOpTimeOut() : void
        mCallbackHandler.removeMessages(MSG_TIMEOUT);
