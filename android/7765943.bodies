class ActivityRecognitionProxy
!!!84919607.java!!!	ActivityRecognitionProxy(inout context : Context, inout handler : Handler, inout activityRecognitionHardwareIsSupported : boolean, inout activityRecognitionHardware : ActivityRecognitionHardware, in overlaySwitchResId : int, in defaultServicePackageNameResId : int, in initialPackageNameResId : int)
        mIsSupported = activityRecognitionHardwareIsSupported;
        mInstance = activityRecognitionHardware;

        Runnable newServiceWork = new Runnable() {
            @Override
            public void run() {
                bindProvider();
            }
        };

        // prepare the connection to the provider
        mServiceWatcher = new ServiceWatcher(
                context,
                TAG,
                "com.android.location.service.ActivityRecognitionProvider",
                overlaySwitchResId,
                defaultServicePackageNameResId,
                initialPackageNameResId,
                newServiceWork,
                handler);
!!!84919735.java!!!	createAndBind(inout context : Context, inout handler : Handler, inout activityRecognitionHardwareIsSupported : boolean, inout activityRecognitionHardware : ActivityRecognitionHardware, in overlaySwitchResId : int, in defaultServicePackageNameResId : int, in initialPackageNameResId : int) : ActivityRecognitionProxy
        ActivityRecognitionProxy activityRecognitionProxy = new ActivityRecognitionProxy(
                context,
                handler,
                activityRecognitionHardwareIsSupported,
                activityRecognitionHardware,
                overlaySwitchResId,
                defaultServicePackageNameResId,
                initialPackageNameResId);

        // try to bind the provider
        if (!activityRecognitionProxy.mServiceWatcher.start()) {
            Log.e(TAG, "ServiceWatcher could not start.");
            return null;
        }
        return activityRecognitionProxy;
!!!84919863.java!!!	bindProvider() : void
        IBinder binder = mServiceWatcher.getBinder();
        if (binder == null) {
            Log.e(TAG, "Null binder found on connection.");
            return;
        }
        String descriptor;
        try {
            descriptor = binder.getInterfaceDescriptor();
        } catch (RemoteException e) {
            Log.e(TAG, "Unable to get interface descriptor.", e);
            return;
        }

        if (IActivityRecognitionHardwareWatcher.class.getCanonicalName().equals(descriptor)) {
            IActivityRecognitionHardwareWatcher watcher =
                    IActivityRecognitionHardwareWatcher.Stub.asInterface(binder);
            if (watcher == null) {
                Log.e(TAG, "No watcher found on connection.");
                return;
            }
            if (mInstance == null) {
                // to keep backwards compatibility do not update the watcher when there is no
                // instance available, or it will cause an NPE
                Log.d(TAG, "AR HW instance not available, binding will be a no-op.");
                return;
            }
            try {
                watcher.onInstanceChanged(mInstance);
            } catch (RemoteException e) {
                Log.e(TAG, "Error delivering hardware interface to watcher.", e);
            }
        } else if (IActivityRecognitionHardwareClient.class.getCanonicalName().equals(descriptor)) {
            IActivityRecognitionHardwareClient client =
                    IActivityRecognitionHardwareClient.Stub.asInterface(binder);
            if (client == null) {
                Log.e(TAG, "No client found on connection.");
                return;
            }
            try {
                client.onAvailabilityChanged(mIsSupported, mInstance);
            } catch (RemoteException e) {
                Log.e(TAG, "Error delivering hardware interface to client.", e);
            }
        } else {
            Log.e(TAG, "Invalid descriptor found on connection: " + descriptor);
        }
