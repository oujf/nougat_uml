class RemoteDisplayProviderProxy
!!!84978487.java!!!	RemoteDisplayProviderProxy(inout context : Context, inout componentName : ComponentName, in userId : int)
        mContext = context;
        mComponentName = componentName;
        mUserId = userId;
        mHandler = new Handler();
!!!84978615.java!!!	dump(inout pw : PrintWriter, inout prefix : String) : void
        pw.println(prefix + "Proxy");
        pw.println(prefix + "  mUserId=" + mUserId);
        pw.println(prefix + "  mRunning=" + mRunning);
        pw.println(prefix + "  mBound=" + mBound);
        pw.println(prefix + "  mActiveConnection=" + mActiveConnection);
        pw.println(prefix + "  mConnectionReady=" + mConnectionReady);
        pw.println(prefix + "  mDiscoveryMode=" + mDiscoveryMode);
        pw.println(prefix + "  mSelectedDisplayId=" + mSelectedDisplayId);
        pw.println(prefix + "  mDisplayState=" + mDisplayState);
!!!84978743.java!!!	setCallback(inout callback : RemoteDisplayProviderProxy::Callback) : void
        mDisplayStateCallback = callback;
!!!84978871.java!!!	getDisplayState() : RemoteDisplayState
        return mDisplayState;
!!!84978999.java!!!	setDiscoveryMode(in mode : int) : void
        if (mDiscoveryMode != mode) {
            mDiscoveryMode = mode;
            if (mConnectionReady) {
                mActiveConnection.setDiscoveryMode(mode);
            }
            updateBinding();
        }
!!!84979127.java!!!	setSelectedDisplay(inout id : String) : void
        if (!Objects.equals(mSelectedDisplayId, id)) {
            if (mConnectionReady && mSelectedDisplayId != null) {
                mActiveConnection.disconnect(mSelectedDisplayId);
            }
            mSelectedDisplayId = id;
            if (mConnectionReady && id != null) {
                mActiveConnection.connect(id);
            }
            updateBinding();
        }
!!!84979255.java!!!	setDisplayVolume(in volume : int) : void
        if (mConnectionReady && mSelectedDisplayId != null) {
            mActiveConnection.setVolume(mSelectedDisplayId, volume);
        }
!!!84979383.java!!!	adjustDisplayVolume(in delta : int) : void
        if (mConnectionReady && mSelectedDisplayId != null) {
            mActiveConnection.adjustVolume(mSelectedDisplayId, delta);
        }
!!!84979511.java!!!	hasComponentName(inout packageName : String, inout className : String) : boolean
        return mComponentName.getPackageName().equals(packageName)
                && mComponentName.getClassName().equals(className);
!!!84979639.java!!!	getFlattenedComponentName() : String
        return mComponentName.flattenToShortString();
!!!84979767.java!!!	start() : void
        if (!mRunning) {
            if (DEBUG) {
                Slog.d(TAG, this + ": Starting");
            }

            mRunning = true;
            updateBinding();
        }
!!!84979895.java!!!	stop() : void
        if (mRunning) {
            if (DEBUG) {
                Slog.d(TAG, this + ": Stopping");
            }

            mRunning = false;
            updateBinding();
        }
!!!84980023.java!!!	rebindIfDisconnected() : void
        if (mActiveConnection == null && shouldBind()) {
            unbind();
            bind();
        }
!!!84980151.java!!!	updateBinding() : void
        if (shouldBind()) {
            bind();
        } else {
            unbind();
        }
!!!84980279.java!!!	shouldBind() : boolean
        if (mRunning) {
            // Bind whenever there is a discovery request or selected display.
            if (mDiscoveryMode != RemoteDisplayState.DISCOVERY_MODE_NONE
                    || mSelectedDisplayId != null) {
                return true;
            }
        }
        return false;
!!!84980407.java!!!	bind() : void
        if (!mBound) {
            if (DEBUG) {
                Slog.d(TAG, this + ": Binding");
            }

            Intent service = new Intent(RemoteDisplayState.SERVICE_INTERFACE);
            service.setComponent(mComponentName);
            try {
                mBound = mContext.bindServiceAsUser(service, this,
                        Context.BIND_AUTO_CREATE | Context.BIND_FOREGROUND_SERVICE,
                        new UserHandle(mUserId));
                if (!mBound && DEBUG) {
                    Slog.d(TAG, this + ": Bind failed");
                }
            } catch (SecurityException ex) {
                if (DEBUG) {
                    Slog.d(TAG, this + ": Bind failed", ex);
                }
            }
        }
!!!84980535.java!!!	unbind() : void
        if (mBound) {
            if (DEBUG) {
                Slog.d(TAG, this + ": Unbinding");
            }

            mBound = false;
            disconnect();
            mContext.unbindService(this);
        }
!!!84980663.java!!!	onServiceConnected(inout name : ComponentName, inout service : IBinder) : void
        if (DEBUG) {
            Slog.d(TAG, this + ": Connected");
        }

        if (mBound) {
            disconnect();

            IRemoteDisplayProvider provider = IRemoteDisplayProvider.Stub.asInterface(service);
            if (provider != null) {
                Connection connection = new Connection(provider);
                if (connection.register()) {
                    mActiveConnection = connection;
                } else {
                    if (DEBUG) {
                        Slog.d(TAG, this + ": Registration failed");
                    }
                }
            } else {
                Slog.e(TAG, this + ": Service returned invalid remote display provider binder");
            }
        }
!!!84980791.java!!!	onServiceDisconnected(inout name : ComponentName) : void
        if (DEBUG) {
            Slog.d(TAG, this + ": Service disconnected");
        }
        disconnect();
!!!84980919.java!!!	onConnectionReady(inout connection : RemoteDisplayProviderProxy::Connection) : void
        if (mActiveConnection == connection) {
            mConnectionReady = true;

            if (mDiscoveryMode != RemoteDisplayState.DISCOVERY_MODE_NONE) {
                mActiveConnection.setDiscoveryMode(mDiscoveryMode);
            }
            if (mSelectedDisplayId != null) {
                mActiveConnection.connect(mSelectedDisplayId);
            }
        }
!!!84981047.java!!!	onConnectionDied(inout connection : RemoteDisplayProviderProxy::Connection) : void
        if (mActiveConnection == connection) {
            if (DEBUG) {
                Slog.d(TAG, this + ": Service connection died");
            }
            disconnect();
        }
!!!84981175.java!!!	onDisplayStateChanged(inout connection : RemoteDisplayProviderProxy::Connection, inout state : RemoteDisplayState) : void
        if (mActiveConnection == connection) {
            if (DEBUG) {
                Slog.d(TAG, this + ": State changed, state=" + state);
            }
            setDisplayState(state);
        }
!!!84981303.java!!!	disconnect() : void
        if (mActiveConnection != null) {
            if (mSelectedDisplayId != null) {
                mActiveConnection.disconnect(mSelectedDisplayId);
            }
            mConnectionReady = false;
            mActiveConnection.dispose();
            mActiveConnection = null;
            setDisplayState(null);
        }
!!!84981431.java!!!	setDisplayState(inout state : RemoteDisplayState) : void
        if (!Objects.equals(mDisplayState, state)) {
            mDisplayState = state;
            if (!mScheduledDisplayStateChangedCallback) {
                mScheduledDisplayStateChangedCallback = true;
                mHandler.post(mDisplayStateChanged);
            }
        }
!!!84981559.java!!!	toString() : String
        return "Service connection " + mComponentName.flattenToShortString();
