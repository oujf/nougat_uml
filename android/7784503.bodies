class ScheduleConditionProvider
!!!85132471.java!!!	ScheduleConditionProvider()
        if (DEBUG) Slog.d(TAG, "new " + SIMPLE_NAME + "()");
!!!85132599.java!!!	getComponent() : ComponentName
        return COMPONENT;
!!!85132727.java!!!	isValidConditionId(inout id : Uri) : boolean
        return ZenModeConfig.isValidScheduleConditionId(id);
!!!85132855.java!!!	dump(inout pw : PrintWriter, inout filter : NotificationManagerService::DumpFilter) : void
        pw.print("    "); pw.print(SIMPLE_NAME); pw.println(":");
        pw.print("      mConnected="); pw.println(mConnected);
        pw.print("      mRegistered="); pw.println(mRegistered);
        pw.println("      mSubscriptions=");
        final long now = System.currentTimeMillis();
        for (Uri conditionId : mSubscriptions.keySet()) {
            pw.print("        ");
            pw.print(meetsSchedule(mSubscriptions.get(conditionId), now) ? "* " : "  ");
            pw.println(conditionId);
            pw.print("            ");
            pw.println(mSubscriptions.get(conditionId).toString());
        }
        dumpUpcomingTime(pw, "mNextAlarmTime", mNextAlarmTime, now);
!!!85132983.java!!!	onConnected() : void
        if (DEBUG) Slog.d(TAG, "onConnected");
        mConnected = true;
!!!85133111.java!!!	onBootComplete() : void
        // noop
!!!85133239.java!!!	onDestroy() : void
        super.onDestroy();
        if (DEBUG) Slog.d(TAG, "onDestroy");
        mConnected = false;
!!!85133367.java!!!	onSubscribe(inout conditionId : Uri) : void
        if (DEBUG) Slog.d(TAG, "onSubscribe " + conditionId);
        if (!ZenModeConfig.isValidScheduleConditionId(conditionId)) {
            notifyCondition(conditionId, Condition.STATE_FALSE, "badCondition");
            return;
        }
        mSubscriptions.put(conditionId, toScheduleCalendar(conditionId));
        evaluateSubscriptions();
!!!85133495.java!!!	onUnsubscribe(inout conditionId : Uri) : void
        if (DEBUG) Slog.d(TAG, "onUnsubscribe " + conditionId);
        mSubscriptions.remove(conditionId);
        evaluateSubscriptions();
!!!85133623.java!!!	attachBase(inout base : Context) : void
        attachBaseContext(base);
!!!85133751.java!!!	asInterface() : IConditionProvider
        return (IConditionProvider) onBind(null);
!!!85133879.java!!!	evaluateSubscriptions() : void
        if (mAlarmManager == null) {
            mAlarmManager = (AlarmManager) mContext.getSystemService(Context.ALARM_SERVICE);
        }
        setRegistered(!mSubscriptions.isEmpty());
        final long now = System.currentTimeMillis();
        mNextAlarmTime = 0;
        long nextUserAlarmTime = getNextAlarm();
        for (Uri conditionId : mSubscriptions.keySet()) {
            final ScheduleCalendar cal = mSubscriptions.get(conditionId);
            if (cal != null && cal.isInSchedule(now)) {
                notifyCondition(conditionId, Condition.STATE_TRUE, "meetsSchedule");
                cal.maybeSetNextAlarm(now, nextUserAlarmTime);
            } else {
                notifyCondition(conditionId, Condition.STATE_FALSE, "!meetsSchedule");
                if (nextUserAlarmTime == 0) {
                    cal.maybeSetNextAlarm(now, nextUserAlarmTime);
                }
            }
            if (cal != null) {
                final long nextChangeTime = cal.getNextChangeTime(now);
                if (nextChangeTime > 0 && nextChangeTime > now) {
                    if (mNextAlarmTime == 0 || nextChangeTime < mNextAlarmTime) {
                        mNextAlarmTime = nextChangeTime;
                    }
                }
            }
        }
        updateAlarm(now, mNextAlarmTime);
!!!85134007.java!!!	updateAlarm(in now : long, in time : long) : void
        final AlarmManager alarms = (AlarmManager) mContext.getSystemService(Context.ALARM_SERVICE);
        final PendingIntent pendingIntent = PendingIntent.getBroadcast(mContext,
                REQUEST_CODE_EVALUATE,
                new Intent(ACTION_EVALUATE)
                        .addFlags(Intent.FLAG_RECEIVER_FOREGROUND)
                        .putExtra(EXTRA_TIME, time),
                PendingIntent.FLAG_UPDATE_CURRENT);
        alarms.cancel(pendingIntent);
        if (time > now) {
            if (DEBUG) Slog.d(TAG, String.format("Scheduling evaluate for %s, in %s, now=%s",
                    ts(time), formatDuration(time - now), ts(now)));
            alarms.setExact(AlarmManager.RTC_WAKEUP, time, pendingIntent);
        } else {
            if (DEBUG) Slog.d(TAG, "Not scheduling evaluate");
        }
!!!85134135.java!!!	getNextAlarm() : long
        final AlarmManager.AlarmClockInfo info = mAlarmManager.getNextAlarmClock(
                ActivityManager.getCurrentUser());
        return info != null ? info.getTriggerTime() : 0;
!!!85134263.java!!!	meetsSchedule(inout cal : ScheduleCalendar, in time : long) : boolean
        return cal != null && cal.isInSchedule(time);
!!!85134391.java!!!	toScheduleCalendar(inout conditionId : Uri) : ScheduleCalendar
        final ScheduleInfo schedule = ZenModeConfig.tryParseScheduleConditionId(conditionId);
        if (schedule == null || schedule.days == null || schedule.days.length == 0) return null;
        final ScheduleCalendar sc = new ScheduleCalendar();
        sc.setSchedule(schedule);
        sc.setTimeZone(TimeZone.getDefault());
        return sc;
!!!85134519.java!!!	setRegistered(inout registered : boolean) : void
        if (mRegistered == registered) return;
        if (DEBUG) Slog.d(TAG, "setRegistered " + registered);
        mRegistered = registered;
        if (mRegistered) {
            final IntentFilter filter = new IntentFilter();
            filter.addAction(Intent.ACTION_TIME_CHANGED);
            filter.addAction(Intent.ACTION_TIMEZONE_CHANGED);
            filter.addAction(ACTION_EVALUATE);
            filter.addAction(AlarmManager.ACTION_NEXT_ALARM_CLOCK_CHANGED);
            registerReceiver(mReceiver, filter);
        } else {
            unregisterReceiver(mReceiver);
        }
!!!85134647.java!!!	notifyCondition(inout conditionId : Uri, in state : int, inout reason : String) : void
        if (DEBUG) Slog.d(TAG, "notifyCondition " + conditionId
                + " " + Condition.stateToString(state)
                + " reason=" + reason);
        notifyCondition(createCondition(conditionId, state));
!!!85134775.java!!!	createCondition(inout id : Uri, in state : int) : Condition
        final String summary = NOT_SHOWN;
        final String line1 = NOT_SHOWN;
        final String line2 = NOT_SHOWN;
        return new Condition(id, summary, line1, line2, 0, state, Condition.FLAG_RELEVANT_ALWAYS);
