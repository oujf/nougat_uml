class ShortcutPackageItem
!!!85348919.java!!!	ShortcutPackageItem(inout shortcutUser : ShortcutUser, in packageUserId : int, inout packageName : String, inout packageInfo : ShortcutPackageInfo)
        mShortcutUser = shortcutUser;
        mPackageUserId = packageUserId;
        mPackageName = Preconditions.checkStringNotEmpty(packageName);
        mPackageInfo = Preconditions.checkNotNull(packageInfo);
!!!85349047.java!!!	getPackageUserId() : int
        return mPackageUserId;
!!!85349303.java!!!	getPackageName() : String
        return mPackageName;
!!!85349431.java!!!	getPackageInfo() : ShortcutPackageInfo
        return mPackageInfo;
!!!85349559.java!!!	refreshPackageInfoAndSave(inout s : ShortcutService) : void
        if (mPackageInfo.isShadow()) {
            return; // Don't refresh for shadow user.
        }
        mPackageInfo.refresh(s, this);
        s.scheduleSaveUser(getOwnerUserId());
!!!85349687.java!!!	attemptToRestoreIfNeededAndSave(inout s : ShortcutService) : void
        if (!mPackageInfo.isShadow()) {
            return; // Already installed, nothing to do.
        }
        if (!s.isPackageInstalled(mPackageName, mPackageUserId)) {
            if (ShortcutService.DEBUG) {
                Slog.d(TAG, String.format("Package still not installed: %s user=%d",
                        mPackageName, mPackageUserId));
            }
            return; // Not installed, no need to restore yet.
        }
        if (!mPackageInfo.hasSignatures()) {
            s.wtf("Attempted to restore package " + mPackageName + ", user=" + mPackageUserId
                    + " but signatures not found in the restore data.");
            onRestoreBlocked(s);
            return;
        }

        final PackageInfo pi = s.getPackageInfoWithSignatures(mPackageName, mPackageUserId);
        if (!mPackageInfo.canRestoreTo(s, pi)) {
            // Package is now installed, but can't restore.  Let the subclass do the cleanup.
            onRestoreBlocked(s);
            return;
        }
        if (ShortcutService.DEBUG) {
            Slog.d(TAG, String.format("Restored package: %s/%d on user %d", mPackageName,
                    mPackageUserId, getOwnerUserId()));
        }

        onRestored(s);

        // Now the package is not shadow.
        mPackageInfo.setShadow(false);

        s.scheduleSaveUser(mPackageUserId);
