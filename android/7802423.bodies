class LocalService
!!!85399991.java!!!	setDevicePolicyUserRestrictions(in userId : int, inout localRestrictions : Bundle, inout globalRestrictions : Bundle) : void
            UserManagerService.this.setDevicePolicyUserRestrictionsInner(userId, localRestrictions,
                    globalRestrictions);
!!!85400119.java!!!	getBaseUserRestrictions(in userId : int) : Bundle
            synchronized (mRestrictionsLock) {
                return mBaseUserRestrictions.get(userId);
            }
!!!85400247.java!!!	setBaseUserRestrictionsByDpmsForMigration(in userId : int, inout baseRestrictions : Bundle) : void
            synchronized (mRestrictionsLock) {
                mBaseUserRestrictions.put(userId, new Bundle(baseRestrictions));
                invalidateEffectiveUserRestrictionsLR(userId);
            }

            final UserData userData = getUserDataNoChecks(userId);
            synchronized (mPackagesLock) {
                if (userData != null) {
                    writeUserLP(userData);
                } else {
                    Slog.w(LOG_TAG, "UserInfo not found for " + userId);
                }
            }
!!!85400375.java!!!	getUserRestriction(in userId : int, inout key : String) : boolean
            return getUserRestrictions(userId).getBoolean(key);
!!!85400503.java!!!	addUserRestrictionsListener(inout listener : UserManagerInternal::UserRestrictionsListener) : void
            synchronized (mUserRestrictionsListeners) {
                mUserRestrictionsListeners.add(listener);
            }
!!!85400631.java!!!	removeUserRestrictionsListener(inout listener : UserManagerInternal::UserRestrictionsListener) : void
            synchronized (mUserRestrictionsListeners) {
                mUserRestrictionsListeners.remove(listener);
            }
!!!85400759.java!!!	setDeviceManaged(inout isManaged : boolean) : void
            synchronized (mUsersLock) {
                mIsDeviceManaged = isManaged;
            }
!!!85400887.java!!!	setUserManaged(in userId : int, inout isManaged : boolean) : void
            synchronized (mUsersLock) {
                mIsUserManaged.put(userId, isManaged);
            }
!!!85401015.java!!!	setUserIcon(in userId : int, inout bitmap : Bitmap) : void
            long ident = Binder.clearCallingIdentity();
            try {
                synchronized (mPackagesLock) {
                    UserData userData = getUserDataNoChecks(userId);
                    if (userData == null || userData.info.partial) {
                        Slog.w(LOG_TAG, "setUserIcon: unknown user #" + userId);
                        return;
                    }
                    writeBitmapLP(userData.info, bitmap);
                    writeUserLP(userData);
                }
                sendUserInfoChangedBroadcast(userId);
            } finally {
                Binder.restoreCallingIdentity(ident);
            }
!!!85401143.java!!!	setForceEphemeralUsers(inout forceEphemeralUsers : boolean) : void
            synchronized (mUsersLock) {
                mForceEphemeralUsers = forceEphemeralUsers;
            }
!!!85401271.java!!!	removeAllUsers() : void
            if (UserHandle.USER_SYSTEM == ActivityManager.getCurrentUser()) {
                // Remove the non-system users straight away.
                removeNonSystemUsers();
            } else {
                // Switch to the system user first and then remove the other users.
                BroadcastReceiver userSwitchedReceiver = new BroadcastReceiver() {
                    @Override
                    public void onReceive(Context context, Intent intent) {
                        int userId =
                                intent.getIntExtra(Intent.EXTRA_USER_HANDLE, UserHandle.USER_NULL);
                        if (userId != UserHandle.USER_SYSTEM) {
                            return;
                        }
                        mContext.unregisterReceiver(this);
                        removeNonSystemUsers();
                    }
                };
                IntentFilter userSwitchedFilter = new IntentFilter();
                userSwitchedFilter.addAction(Intent.ACTION_USER_SWITCHED);
                mContext.registerReceiver(
                        userSwitchedReceiver, userSwitchedFilter, null, mHandler);

                // Switch to the system user.
                ActivityManager am =
                        (ActivityManager) mContext.getSystemService(Context.ACTIVITY_SERVICE);
                am.switchUser(UserHandle.USER_SYSTEM);
            }
!!!85401399.java!!!	onEphemeralUserStop(in userId : int) : void
            synchronized (mUsersLock) {
               UserInfo userInfo = getUserInfoLU(userId);
               if (userInfo != null && userInfo.isEphemeral()) {
                    // Do not allow switching back to the ephemeral user again as the user is going
                    // to be deleted.
                    userInfo.flags |= UserInfo.FLAG_DISABLED;
                    if (userInfo.isGuest()) {
                        // Indicate that the guest will be deleted after it stops.
                        userInfo.guestToRemove = true;
                    }
               }
            }
!!!85401527.java!!!	createUserEvenWhenDisallowed(inout name : String, in flags : int) : UserInfo
            UserInfo user = createUserInternalUnchecked(name, flags, UserHandle.USER_NULL);
            // Keep this in sync with UserManager.createUser
            if (user != null && !user.isAdmin()) {
                setUserRestriction(UserManager.DISALLOW_SMS, true, user.id);
                setUserRestriction(UserManager.DISALLOW_OUTGOING_CALLS, true, user.id);
            }
            return user;
!!!85401655.java!!!	isUserRunning(in userId : int) : boolean
            synchronized (mUserStates) {
                return mUserStates.get(userId, -1) >= 0;
            }
!!!85401783.java!!!	setUserState(in userId : int, in userState : int) : void
            synchronized (mUserStates) {
                mUserStates.put(userId, userState);
            }
!!!85401911.java!!!	removeUserState(in userId : int) : void
            synchronized (mUserStates) {
                mUserStates.delete(userId);
            }
!!!85402039.java!!!	isUserUnlockingOrUnlocked(in userId : int) : boolean
            synchronized (mUserStates) {
                int state = mUserStates.get(userId, -1);
                return (state == UserState.STATE_RUNNING_UNLOCKING)
                        || (state == UserState.STATE_RUNNING_UNLOCKED);
            }
