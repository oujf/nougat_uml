class PersistentDataStore
!!!85528887.java!!!	PersistentDataStore(inout context : Context, in userId : int)
        mContext = context;
        File userDir = Environment.getUserSystemDirectory(userId);
        if (!userDir.exists()) {
            if (!userDir.mkdirs()) {
                throw new IllegalStateException("User dir cannot be created: " + userDir);
            }
        }
        mAtomicFile = new AtomicFile(new File(userDir, "tv-input-manager-state.xml"));
!!!85529015.java!!!	isParentalControlsEnabled() : boolean
        loadIfNeeded();
        return mParentalControlsEnabled;
!!!85529143.java!!!	setParentalControlsEnabled(inout enabled : boolean) : void
        loadIfNeeded();
        if (mParentalControlsEnabled != enabled) {
            mParentalControlsEnabled = enabled;
            mParentalControlsEnabledChanged = true;
            postSave();
        }
!!!85529271.java!!!	isRatingBlocked(inout rating : TvContentRating) : boolean
        loadIfNeeded();
        synchronized (mBlockedRatings) {
            for (TvContentRating blockedRating : mBlockedRatings) {
                if (rating.contains(blockedRating)) {
                    return true;
                }
            }
        }
        return false;
!!!85529399.java!!!	getBlockedRatings() : TvContentRating
        loadIfNeeded();
        return mBlockedRatings.toArray(new TvContentRating[mBlockedRatings.size()]);
!!!85529527.java!!!	addBlockedRating(inout rating : TvContentRating) : void
        loadIfNeeded();
        if (rating != null && !mBlockedRatings.contains(rating)) {
            mBlockedRatings.add(rating);
            mBlockedRatingsChanged = true;
            postSave();
        }
!!!85529655.java!!!	removeBlockedRating(inout rating : TvContentRating) : void
        loadIfNeeded();
        if (rating != null && mBlockedRatings.contains(rating)) {
            mBlockedRatings.remove(rating);
            mBlockedRatingsChanged = true;
            postSave();
        }
!!!85529783.java!!!	loadIfNeeded() : void
        if (!mLoaded) {
            load();
            mLoaded = true;
        }
!!!85529911.java!!!	clearState() : void
        mBlockedRatings.clear();
        mParentalControlsEnabled = false;
!!!85530039.java!!!	load() : void
        clearState();

        final InputStream is;
        try {
            is = mAtomicFile.openRead();
        } catch (FileNotFoundException ex) {
            return;
        }

        XmlPullParser parser;
        try {
            parser = Xml.newPullParser();
            parser.setInput(new BufferedInputStream(is), StandardCharsets.UTF_8.name());
            loadFromXml(parser);
        } catch (IOException | XmlPullParserException ex) {
            Slog.w(TAG, "Failed to load tv input manager persistent store data.", ex);
            clearState();
        } finally {
            IoUtils.closeQuietly(is);
        }
!!!85530167.java!!!	postSave() : void
        mHandler.removeCallbacks(mSaveRunnable);
        mHandler.post(mSaveRunnable);
!!!85530295.java!!!	save() : void
        final FileOutputStream os;
        try {
            os = mAtomicFile.startWrite();
            boolean success = false;
            try {
                XmlSerializer serializer = new FastXmlSerializer();
                serializer.setOutput(new BufferedOutputStream(os), StandardCharsets.UTF_8.name());
                saveToXml(serializer);
                serializer.flush();
                success = true;
            } finally {
                if (success) {
                    mAtomicFile.finishWrite(os);
                    broadcastChangesIfNeeded();
                } else {
                    mAtomicFile.failWrite(os);
                }
            }
        } catch (IOException ex) {
            Slog.w(TAG, "Failed to save tv input manager persistent store data.", ex);
        }
!!!85530423.java!!!	broadcastChangesIfNeeded() : void
        if (mParentalControlsEnabledChanged) {
            mParentalControlsEnabledChanged = false;
            mContext.sendBroadcastAsUser(new Intent(
                    TvInputManager.ACTION_PARENTAL_CONTROLS_ENABLED_CHANGED), UserHandle.ALL);
        }
        if (mBlockedRatingsChanged) {
            mBlockedRatingsChanged = false;
            mContext.sendBroadcastAsUser(new Intent(TvInputManager.ACTION_BLOCKED_RATINGS_CHANGED),
                    UserHandle.ALL);
        }
!!!85530551.java!!!	loadFromXml(inout parser : XmlPullParser) : void
        XmlUtils.beginDocument(parser, TAG_TV_INPUT_MANAGER_STATE);
        final int outerDepth = parser.getDepth();
        while (XmlUtils.nextElementWithin(parser, outerDepth)) {
            if (parser.getName().equals(TAG_BLOCKED_RATINGS)) {
                loadBlockedRatingsFromXml(parser);
            } else if (parser.getName().equals(TAG_PARENTAL_CONTROLS)) {
                String enabled = parser.getAttributeValue(null, ATTR_ENABLED);
                if (TextUtils.isEmpty(enabled)) {
                    throw new XmlPullParserException(
                            "Missing " + ATTR_ENABLED + " attribute on " + TAG_PARENTAL_CONTROLS);
                }
                mParentalControlsEnabled = Boolean.valueOf(enabled);
            }
        }
!!!85530679.java!!!	loadBlockedRatingsFromXml(inout parser : XmlPullParser) : void
        final int outerDepth = parser.getDepth();
        while (XmlUtils.nextElementWithin(parser, outerDepth)) {
            if (parser.getName().equals(TAG_RATING)) {
                String ratingString = parser.getAttributeValue(null, ATTR_STRING);
                if (TextUtils.isEmpty(ratingString)) {
                    throw new XmlPullParserException(
                            "Missing " + ATTR_STRING + " attribute on " + TAG_RATING);
                }
                mBlockedRatings.add(TvContentRating.unflattenFromString(ratingString));
            }
        }
!!!85530807.java!!!	saveToXml(inout serializer : XmlSerializer) : void
        serializer.startDocument(null, true);
        serializer.setFeature("http://xmlpull.org/v1/doc/features.html#indent-output", true);
        serializer.startTag(null, TAG_TV_INPUT_MANAGER_STATE);
        serializer.startTag(null, TAG_BLOCKED_RATINGS);
        synchronized (mBlockedRatings) {
            for (TvContentRating rating : mBlockedRatings) {
                serializer.startTag(null, TAG_RATING);
                serializer.attribute(null, ATTR_STRING, rating.flattenToString());
                serializer.endTag(null, TAG_RATING);
            }
        }
        serializer.endTag(null, TAG_BLOCKED_RATINGS);
        serializer.startTag(null, TAG_PARENTAL_CONTROLS);
        serializer.attribute(null, ATTR_ENABLED, Boolean.toString(mParentalControlsEnabled));
        serializer.endTag(null, TAG_PARENTAL_CONTROLS);
        serializer.endTag(null, TAG_TV_INPUT_MANAGER_STATE);
        serializer.endDocument();
