class ServiceCallback
!!!85553463.java!!!	ServiceCallback(inout component : ComponentName, in userId : int)
            mComponent = component;
            mUserId = userId;
!!!85553591.java!!!	ensureHardwarePermission() : void
            if (mContext.checkCallingPermission(android.Manifest.permission.TV_INPUT_HARDWARE)
                    != PackageManager.PERMISSION_GRANTED) {
                throw new SecurityException("The caller does not have hardware permission");
            }
!!!85553719.java!!!	ensureValidInput(inout inputInfo : TvInputInfo) : void
            if (inputInfo.getId() == null || !mComponent.equals(inputInfo.getComponent())) {
                throw new IllegalArgumentException("Invalid TvInputInfo");
            }
!!!85553847.java!!!	addHardwareInputLocked(inout inputInfo : TvInputInfo) : void
            ServiceState serviceState = getServiceStateLocked(mComponent, mUserId);
            serviceState.hardwareInputList.add(inputInfo);
            buildTvInputListLocked(mUserId, null);
!!!85553975.java!!!	addHardwareInput(in deviceId : int, inout inputInfo : TvInputInfo) : void
            ensureHardwarePermission();
            ensureValidInput(inputInfo);
            synchronized (mLock) {
                mTvInputHardwareManager.addHardwareInput(deviceId, inputInfo);
                addHardwareInputLocked(inputInfo);
            }
!!!85554103.java!!!	addHdmiInput(in id : int, inout inputInfo : TvInputInfo) : void
            ensureHardwarePermission();
            ensureValidInput(inputInfo);
            synchronized (mLock) {
                mTvInputHardwareManager.addHdmiInput(id, inputInfo);
                addHardwareInputLocked(inputInfo);
            }
!!!85554231.java!!!	removeHardwareInput(inout inputId : String) : void
            ensureHardwarePermission();
            synchronized (mLock) {
                ServiceState serviceState = getServiceStateLocked(mComponent, mUserId);
                boolean removed = false;
                for (Iterator<TvInputInfo> it = serviceState.hardwareInputList.iterator();
                        it.hasNext(); ) {
                    if (it.next().getId().equals(inputId)) {
                        it.remove();
                        removed = true;
                        break;
                    }
                }
                if (removed) {
                    buildTvInputListLocked(mUserId, null);
                    mTvInputHardwareManager.removeHardwareInput(inputId);
                } else {
                    Slog.e(TAG, "failed to remove input " + inputId);
                }
            }
