class TvRemoteService
!!!85565751.java!!!	TvRemoteService(inout context : Context)
        super(context);
        mHandler = new UserHandler(new UserProvider(TvRemoteService.this), context);
        Watchdog.getInstance().addMonitor(this);
!!!85565879.java!!!	onStart() : void
        if (DEBUG) Slog.d(TAG, "onStart()");
!!!85566007.java!!!	monitor() : void
        synchronized (mLock) { /* check for deadlock */ }
!!!85566135.java!!!	onBootPhase(in phase : int) : void
        if (phase == SystemService.PHASE_THIRD_PARTY_APPS_CAN_START) {
            if (DEBUG) Slog.d(TAG, "PHASE_THIRD_PARTY_APPS_CAN_START");
            mHandler.sendEmptyMessage(UserHandler.MSG_START);
        }
!!!85566263.java!!!	informInputBridgeConnected(inout token : IBinder) : void
        mHandler.obtainMessage(UserHandler.MSG_INPUT_BRIDGE_CONNECTED, 0, 0, token).sendToTarget();
!!!85566391.java!!!	openInputBridgeInternalLocked(inout provider : TvRemoteProviderProxy, inout token : IBinder, inout name : String, in width : int, in height : int, in maxPointers : int) : void
        if (DEBUG) {
            Slog.d(TAG, "openInputBridgeInternalLocked(), token: " + token + ", name: " + name +
                    ", width: " + width + ", height: " + height + ", maxPointers: " + maxPointers);
        }

        try {
            //Create a new bridge, if one does not exist already
            if (mBridgeMap.containsKey(token)) {
                if (DEBUG) Slog.d(TAG, "RemoteBridge already exists");
                // Respond back with success.
                informInputBridgeConnected(token);
                return;
            }

            UinputBridge inputBridge = new UinputBridge(token, name, width, height, maxPointers);

            mBridgeMap.put(token, inputBridge);
            mProviderMap.put(token, provider);

            // Respond back with success.
            informInputBridgeConnected(token);

        } catch (IOException ioe) {
            Slog.e(TAG, "Cannot create device for " + name);
        }
!!!85566519.java!!!	closeInputBridgeInternalLocked(inout token : IBinder) : void
        if (DEBUG) {
            Slog.d(TAG, "closeInputBridgeInternalLocked(), token: " + token);
        }

        // Close an existing RemoteBridge
        UinputBridge inputBridge = mBridgeMap.get(token);
        if (inputBridge != null) {
            inputBridge.close(token);
        }

        mBridgeMap.remove(token);
!!!85566647.java!!!	clearInputBridgeInternalLocked(inout token : IBinder) : void
        if (DEBUG) {
            Slog.d(TAG, "clearInputBridgeInternalLocked(), token: " + token);
        }

        UinputBridge inputBridge = mBridgeMap.get(token);
        if (inputBridge != null) {
            inputBridge.clear(token);
        }
!!!85566775.java!!!	sendTimeStampInternalLocked(inout token : IBinder, in timestamp : long) : void
        UinputBridge inputBridge = mBridgeMap.get(token);
        if (inputBridge != null) {
            inputBridge.sendTimestamp(token, timestamp);
        }
!!!85566903.java!!!	sendKeyDownInternalLocked(inout token : IBinder, in keyCode : int) : void
        if (DEBUG_KEYS) {
            Slog.d(TAG, "sendKeyDownInternalLocked(), token: " + token + ", keyCode: " + keyCode);
        }

        UinputBridge inputBridge = mBridgeMap.get(token);
        if (inputBridge != null) {
            inputBridge.sendKeyDown(token, keyCode);
        }
!!!85567031.java!!!	sendKeyUpInternalLocked(inout token : IBinder, in keyCode : int) : void
        if (DEBUG_KEYS) {
            Slog.d(TAG, "sendKeyUpInternalLocked(), token: " + token + ", keyCode: " + keyCode);
        }

        UinputBridge inputBridge = mBridgeMap.get(token);
        if (inputBridge != null) {
            inputBridge.sendKeyUp(token, keyCode);
        }
!!!85567159.java!!!	sendPointerDownInternalLocked(inout token : IBinder, in pointerId : int, in x : int, in y : int) : void
        if (DEBUG_KEYS) {
            Slog.d(TAG, "sendPointerDownInternalLocked(), token: " + token + ", pointerId: " +
                    pointerId + ", x: " + x + ", y: " + y);
        }

        UinputBridge inputBridge = mBridgeMap.get(token);
        if (inputBridge != null) {
            inputBridge.sendPointerDown(token, pointerId, x, y);
        }
!!!85567287.java!!!	sendPointerUpInternalLocked(inout token : IBinder, in pointerId : int) : void
        if (DEBUG_KEYS) {
            Slog.d(TAG, "sendPointerUpInternalLocked(), token: " + token + ", pointerId: " +
                    pointerId);
        }

        UinputBridge inputBridge = mBridgeMap.get(token);
        if (inputBridge != null) {
            inputBridge.sendPointerUp(token, pointerId);
        }
!!!85567415.java!!!	sendPointerSyncInternalLocked(inout token : IBinder) : void
        if (DEBUG_KEYS) {
            Slog.d(TAG, "sendPointerSyncInternalLocked(), token: " + token);
        }

        UinputBridge inputBridge = mBridgeMap.get(token);
        if (inputBridge != null) {
            inputBridge.sendPointerSync(token);
        }
