class VrManagerService
!!!85585719.java!!!	onEnabledComponentChanged() : void
        synchronized (mLock) {
            int currentUser = ActivityManager.getCurrentUser();

            // Update listeners
            ArraySet<ComponentName> enabledListeners = mComponentObserver.getEnabled(currentUser);

            ArraySet<String> enabledPackages = new ArraySet<>();
            for (ComponentName n : enabledListeners) {
                String pkg = n.getPackageName();
                if (isDefaultAllowed(pkg)) {
                    enabledPackages.add(n.getPackageName());
                }
            }
            mNotifAccessManager.update(enabledPackages);

            if (mCurrentVrService == null) {
                return; // No active services
            }

            // If there is a pending state change, we'd better deal with that first
            consumeAndApplyPendingStateLocked();

            if (mCurrentVrService == null) {
                return; // No active services
            }

            // There is an active service, update it if needed
            updateCurrentVrServiceLocked(mVrModeEnabled, mCurrentVrService.getComponent(),
                    mCurrentVrService.getUserId(), null);
        }
!!!85585847.java!!!	enforceCallerPermission(inout permission : String) : void
        if (mContext.checkCallingOrSelfPermission(permission)
                != PackageManager.PERMISSION_GRANTED) {
            throw new SecurityException("Caller does not hold the permission " + permission);
        }
!!!85586487.java!!!	VrManagerService(inout context : Context)
        super(context);
!!!85586615.java!!!	onStart() : void
        synchronized(mLock) {
            initializeNative();
            mContext = getContext();
        }

        publishLocalService(VrManagerInternal.class, new LocalService());
        publishBinderService(VR_MANAGER_BINDER_SERVICE, mVrManager.asBinder());

        // If there are no VR packages installed on the device, then disable VR
        // components, otherwise, enable them.
        setEnabledStatusOfVrComponents();
!!!85586743.java!!!	setEnabledStatusOfVrComponents() : void
        ArraySet<ComponentName> vrComponents = SystemConfig.getInstance().getDefaultVrComponents();
        if (vrComponents == null) {
           return;
        }

        // We only want to enable VR components if there is a VR package installed on the device.
        // The VR components themselves do not quality as a VR package, so exclude them.
        ArraySet<String> vrComponentPackageNames = new ArraySet<>();
        for (ComponentName componentName : vrComponents) {
            vrComponentPackageNames.add(componentName.getPackageName());
        }

        // Check to see if there are any packages on the device, other than the VR component
        // packages.
        PackageManager pm = mContext.getPackageManager();
        List<PackageInfo> packageInfos = pm.getInstalledPackages(
                PackageManager.GET_CONFIGURATIONS);
        boolean vrModeIsUsed = false;
        for (PackageInfo packageInfo : packageInfos) {
            if (packageInfo != null && packageInfo.packageName != null &&
                    pm.getApplicationEnabledSetting(packageInfo.packageName) ==
                            PackageManager.COMPONENT_ENABLED_STATE_DEFAULT) {
                vrModeIsUsed = enableVrComponentsIfVrModeUsed(pm, packageInfo,
                        vrComponentPackageNames, vrComponents);
                if (vrModeIsUsed) {
                    break;
                }
            }
        }

        if (!vrModeIsUsed) {
            Slog.i(TAG, "No VR packages found, disabling VR components");
            setVrComponentsEnabledOrDisabled(vrComponents, false);

            // Register to receive an intent when a new package is installed, in case that package
            // requires VR components.
            IntentFilter intentFilter = new IntentFilter();
            intentFilter.addAction(Intent.ACTION_PACKAGE_ADDED);
            intentFilter.addDataScheme("package");
            mContext.registerReceiver(new BroadcastReceiver() {
                @Override
                public void onReceive(Context context, Intent intent) {
                    PackageManager pm = context.getPackageManager();
                    final String packageName = intent.getData().getSchemeSpecificPart();
                    if (packageName != null) {
                        try {
                            PackageInfo packageInfo = pm.getPackageInfo(packageName,
                                    PackageManager.GET_CONFIGURATIONS);
                            enableVrComponentsIfVrModeUsed(pm, packageInfo,
                                    vrComponentPackageNames, vrComponents);
                        } catch (NameNotFoundException e) {
                        }
                    }
                };
            }, intentFilter);
        }
!!!85586871.java!!!	setVrComponentsEnabledOrDisabled(inout vrComponents : ArraySet, inout enabled : boolean) : void
        int state = enabled ?
                PackageManager.COMPONENT_ENABLED_STATE_ENABLED :
                PackageManager.COMPONENT_ENABLED_STATE_DISABLED;
        PackageManager pm = mContext.getPackageManager();
        for (ComponentName componentName : vrComponents) {
            try {
                // Note that we must first check for the existance of the package before trying
                // to set its enabled state.  This is to prevent PackageManager from throwing
                // an excepton if the package is not found (not just a NameNotFoundException
                // exception).
                PackageInfo packageInfo = pm.getPackageInfo(componentName.getPackageName(),
                        PackageManager.GET_CONFIGURATIONS);
                pm.setApplicationEnabledSetting(componentName.getPackageName(), state , 0);
            } catch (NameNotFoundException e) {
            }
        }
!!!85586999.java!!!	enableVrComponentsIfVrModeUsed(inout pm : PackageManager, inout packageInfo : PackageInfo, inout vrComponentPackageNames : ArraySet, inout vrComponents : ArraySet) : boolean
        boolean isVrComponent = vrComponents != null &&
                vrComponentPackageNames.contains(packageInfo.packageName);
        if (packageInfo != null && packageInfo.reqFeatures != null && !isVrComponent) {
            for (FeatureInfo featureInfo : packageInfo.reqFeatures) {
                if (featureInfo.name != null &&
                    (featureInfo.name.equals(PackageManager.FEATURE_VR_MODE) ||
                     featureInfo.name.equals(PackageManager.FEATURE_VR_MODE_HIGH_PERFORMANCE))) {
                    Slog.i(TAG, "VR package found, enabling VR components");
                    setVrComponentsEnabledOrDisabled(vrComponents, true);
                    return true;
                }
            }
        }
        return false;
!!!85587127.java!!!	onBootPhase(in phase : int) : void
        if (phase == SystemService.PHASE_SYSTEM_SERVICES_READY) {
            synchronized (mLock) {
                Looper looper = Looper.getMainLooper();
                Handler handler = new Handler(looper);
                ArrayList<EnabledComponentChangeListener> listeners = new ArrayList<>();
                listeners.add(this);
                mComponentObserver = EnabledComponentsObserver.build(mContext, handler,
                        Settings.Secure.ENABLED_VR_LISTENERS, looper,
                        android.Manifest.permission.BIND_VR_LISTENER_SERVICE,
                        VrListenerService.SERVICE_INTERFACE, mLock, listeners);

                mComponentObserver.rebuildAll();
            }
        }
!!!85587255.java!!!	onStartUser(in userHandle : int) : void
        synchronized (mLock) {
            mComponentObserver.onUsersChanged();
        }
!!!85587383.java!!!	onSwitchUser(in userHandle : int) : void
        synchronized (mLock) {
            mComponentObserver.onUsersChanged();
        }

!!!85587511.java!!!	onStopUser(in userHandle : int) : void
        synchronized (mLock) {
            mComponentObserver.onUsersChanged();
        }

!!!85587639.java!!!	onCleanupUser(in userHandle : int) : void
        synchronized (mLock) {
            mComponentObserver.onUsersChanged();
        }
!!!85587767.java!!!	updateOverlayStateLocked(inout exemptedPackage : String, in newUserId : int, in oldUserId : int) : void
        AppOpsManager appOpsManager = getContext().getSystemService(AppOpsManager.class);

        // If user changed drop restrictions for the old user.
        if (oldUserId != newUserId) {
            appOpsManager.setUserRestrictionForUser(AppOpsManager.OP_SYSTEM_ALERT_WINDOW,
                    false, mOverlayToken, null, oldUserId);
        }

        // Apply the restrictions for the current user based on vr state
        String[] exemptions = (exemptedPackage == null) ? new String[0] :
                new String[] { exemptedPackage };

        appOpsManager.setUserRestrictionForUser(AppOpsManager.OP_SYSTEM_ALERT_WINDOW,
                mVrModeEnabled, mOverlayToken, exemptions, newUserId);
!!!85587895.java!!!	updateDependentAppOpsLocked(inout newVrServicePackage : String, in newUserId : int, inout oldVrServicePackage : String, in oldUserId : int) : void
        // If VR state changed and we also have a VR service change.
        if (Objects.equals(newVrServicePackage, oldVrServicePackage)) {
            return;
        }
        final long identity = Binder.clearCallingIdentity();
        try {
            // Set overlay exception state based on VR enabled and current service
            updateOverlayStateLocked(newVrServicePackage, newUserId, oldUserId);
        } finally {
            Binder.restoreCallingIdentity(identity);
        }
!!!85588023.java!!!	updateCurrentVrServiceLocked(inout enabled : boolean, inout component : ComponentName, in userId : int, inout calling : ComponentName) : boolean

        boolean sendUpdatedCaller = false;
        final long identity = Binder.clearCallingIdentity();
        try {

            boolean validUserComponent = (mComponentObserver.isValid(component, userId) ==
                    EnabledComponentsObserver.NO_ERROR);
            if (!mVrModeEnabled && !enabled) {
                return validUserComponent; // Disabled -> Disabled transition does nothing.
            }

            String oldVrServicePackage = mCurrentVrService != null
                    ? mCurrentVrService.getComponent().getPackageName() : null;
            final int oldUserId = mCurrentVrModeUser;

            // Always send mode change events.
            changeVrModeLocked(enabled);

            if (!enabled || !validUserComponent) {
                // Unbind whatever is running
                if (mCurrentVrService != null) {
                    Slog.i(TAG, "Disconnecting " + mCurrentVrService.getComponent() + " for user " +
                            mCurrentVrService.getUserId());
                    mCurrentVrService.disconnect();
                    mCurrentVrService = null;
                }
            } else {
                if (mCurrentVrService != null) {
                    // Unbind any running service that doesn't match the component/user selection
                    if (mCurrentVrService.disconnectIfNotMatching(component, userId)) {
                        Slog.i(TAG, "Disconnecting " + mCurrentVrService.getComponent() +
                                " for user " + mCurrentVrService.getUserId());
                        createAndConnectService(component, userId);
                        sendUpdatedCaller = true;
                    }
                    // The service with the correct component/user is bound
                } else {
                    // Nothing was previously running, bind a new service
                    createAndConnectService(component, userId);
                    sendUpdatedCaller = true;
                }
            }

            if (calling != null && !Objects.equals(calling, mCurrentVrModeComponent)) {
                mCurrentVrModeComponent = calling;
                sendUpdatedCaller = true;
            }

            if (mCurrentVrModeUser != userId) {
                mCurrentVrModeUser = userId;
                sendUpdatedCaller = true;
            }

            String newVrServicePackage = mCurrentVrService != null
                    ? mCurrentVrService.getComponent().getPackageName() : null;
            final int newUserId = mCurrentVrModeUser;

            // Update AppOps settings that change state when entering/exiting VR mode, or changing
            // the current VrListenerService.
            updateDependentAppOpsLocked(newVrServicePackage, newUserId,
                    oldVrServicePackage, oldUserId);

            if (mCurrentVrService != null && sendUpdatedCaller) {
                final ComponentName c = mCurrentVrModeComponent;
                mCurrentVrService.sendEvent(new PendingEvent() {
                    @Override
                    public void runEvent(IInterface service) throws RemoteException {
                        IVrListener l = (IVrListener) service;
                        l.focusedActivityChanged(c);
                    }
                });
            }
            logStateLocked();

            return validUserComponent;
        } finally {
            Binder.restoreCallingIdentity(identity);
        }
!!!85588151.java!!!	isDefaultAllowed(inout packageName : String) : boolean
        PackageManager pm = mContext.getPackageManager();

        ApplicationInfo info = null;
        try {
            info = pm.getApplicationInfo(packageName, PackageManager.GET_META_DATA);
        } catch (NameNotFoundException e) {
        }

        if (info == null || !(info.isSystemApp() || info.isUpdatedSystemApp())) {
            return false;
        }
        return true;
!!!85588279.java!!!	grantNotificationPolicyAccess(inout pkg : String) : void
        NotificationManager nm = mContext.getSystemService(NotificationManager.class);
        nm.setNotificationPolicyAccessGranted(pkg, true);
!!!85588407.java!!!	revokeNotificationPolicyAccess(inout pkg : String) : void
        NotificationManager nm = mContext.getSystemService(NotificationManager.class);
        // Remove any DND zen rules possibly created by the package.
        nm.removeAutomaticZenRules(pkg);
        // Remove Notification Policy Access.
        nm.setNotificationPolicyAccessGranted(pkg, false);
!!!85588535.java!!!	grantNotificationListenerAccess(inout pkg : String, in userId : int) : void
        PackageManager pm = mContext.getPackageManager();
        ArraySet<ComponentName> possibleServices = EnabledComponentsObserver.loadComponentNames(pm,
                userId, NotificationListenerService.SERVICE_INTERFACE,
                android.Manifest.permission.BIND_NOTIFICATION_LISTENER_SERVICE);
        ContentResolver resolver = mContext.getContentResolver();

        ArraySet<String> current = getNotificationListeners(resolver, userId);

        for (ComponentName c : possibleServices) {
            String flatName = c.flattenToString();
            if (Objects.equals(c.getPackageName(), pkg)
                    && !current.contains(flatName)) {
                current.add(flatName);
            }
        }

        if (current.size() > 0) {
            String flatSettings = formatSettings(current);
            Settings.Secure.putStringForUser(resolver,
                    Settings.Secure.ENABLED_NOTIFICATION_LISTENERS,
                    flatSettings, userId);
        }
!!!85588663.java!!!	revokeNotificationListenerAccess(inout pkg : String, in userId : int) : void
        ContentResolver resolver = mContext.getContentResolver();

        ArraySet<String> current = getNotificationListeners(resolver, userId);

        ArrayList<String> toRemove = new ArrayList<>();

        for (String c : current) {
            ComponentName component = ComponentName.unflattenFromString(c);
            if (component.getPackageName().equals(pkg)) {
                toRemove.add(c);
            }
        }

        current.removeAll(toRemove);

        String flatSettings = formatSettings(current);
        Settings.Secure.putStringForUser(resolver,
                Settings.Secure.ENABLED_NOTIFICATION_LISTENERS,
                flatSettings, userId);
!!!85588791.java!!!	isPermissionUserUpdated(inout permission : String, inout pkg : String, in userId : int) : boolean
        final int flags = mContext.getPackageManager().getPermissionFlags(
                permission, pkg, new UserHandle(userId));
        return (flags & (PackageManager.FLAG_PERMISSION_USER_SET
                | PackageManager.FLAG_PERMISSION_USER_FIXED)) != 0;
!!!85588919.java!!!	getNotificationListeners(inout resolver : ContentResolver, in userId : int) : ArraySet
        String flat = Settings.Secure.getStringForUser(resolver,
                Settings.Secure.ENABLED_NOTIFICATION_LISTENERS, userId);

        ArraySet<String> current = new ArraySet<>();
        if (flat != null) {
            String[] allowed = flat.split(":");
            for (String s : allowed) {
                current.add(s);
            }
        }
        return current;
!!!85589047.java!!!	formatSettings(inout c : Collection<String>) : String
        if (c == null || c.isEmpty()) {
            return "";
        }

        StringBuilder b = new StringBuilder();
        boolean start = true;
        for (String s : c) {
            if ("".equals(s)) {
                continue;
            }
            if (!start) {
                b.append(':');
            }
            b.append(s);
            start = false;
        }
        return b.toString();
!!!85589175.java!!!	createAndConnectService(inout component : ComponentName, in userId : int) : void
        mCurrentVrService = VrManagerService.create(mContext, component, userId);
        mCurrentVrService.connect();
        Slog.i(TAG, "Connecting " + component + " for user " + userId);
!!!85589303.java!!!	changeVrModeLocked(inout enabled : boolean) : void
        if (mVrModeEnabled != enabled) {
            mVrModeEnabled = enabled;

            // Log mode change event.
            Slog.i(TAG, "VR mode " + ((mVrModeEnabled) ? "enabled" : "disabled"));
            setVrModeNative(mVrModeEnabled);

            onVrModeChangedLocked();
        }
!!!85589431.java!!!	onVrModeChangedLocked() : void
        mHandler.sendMessage(mHandler.obtainMessage(MSG_VR_STATE_CHANGE,
                (mVrModeEnabled) ? 1 : 0, 0));
!!!85589559.java!!!	create(inout context : Context, inout component : ComponentName, in userId : int) : ManagedApplicationService
        return ManagedApplicationService.build(context, component, userId,
                R.string.vr_listener_binding_label, Settings.ACTION_VR_LISTENER_SETTINGS,
                sBinderChecker);
!!!85589687.java!!!	consumeAndApplyPendingStateLocked() : void
        if (mPendingState != null) {
            updateCurrentVrServiceLocked(mPendingState.enabled,
                    mPendingState.targetPackageName, mPendingState.userId,
                    mPendingState.callingPackage);
            mPendingState = null;
        }
!!!85589815.java!!!	logStateLocked() : void
        ComponentName currentBoundService = (mCurrentVrService == null) ? null :
            mCurrentVrService.getComponent();
        VrState current = new VrState(mVrModeEnabled, currentBoundService, mCurrentVrModeUser,
            mCurrentVrModeComponent, mWasDefaultGranted);
        if (mLoggingDeque.size() == EVENT_LOG_SIZE) {
            mLoggingDeque.removeFirst();
        }
        mLoggingDeque.add(current);
!!!85589943.java!!!	dumpStateTransitions(inout pw : PrintWriter) : void
        SimpleDateFormat d = new SimpleDateFormat("MM-dd HH:mm:ss.SSS");
        String tab = "  ";
        if (mLoggingDeque.size() == 0) {
            pw.print(tab);
            pw.println("None");
        }
        for (VrState state : mLoggingDeque) {
            pw.print(d.format(new Date(state.timestamp)));
            pw.print(tab);
            pw.print("State changed to:");
            pw.print(tab);
            pw.println((state.enabled) ? "ENABLED" : "DISABLED");
            if (state.enabled) {
                pw.print(tab);
                pw.print("User=");
                pw.println(state.userId);
                pw.print(tab);
                pw.print("Current VR Activity=");
                pw.println((state.callingPackage == null) ?
                    "None" : state.callingPackage.flattenToString());
                pw.print(tab);
                pw.print("Bound VrListenerService=");
                pw.println((state.targetPackageName == null) ?
                    "None" : state.targetPackageName.flattenToString());
                if (state.defaultPermissionsGranted) {
                    pw.print(tab);
                    pw.println("Default permissions granted to the bound VrListenerService.");
                }
            }
        }
!!!85590071.java!!!	setVrMode(inout enabled : boolean, inout targetPackageName : ComponentName, in userId : int, inout callingPackage : ComponentName, inout immediate : boolean) : void

        synchronized (mLock) {

            if (!enabled && mCurrentVrService != null && !immediate) {
                // If we're transitioning out of VR mode, delay briefly to avoid expensive HAL calls
                // and service bind/unbind in case we are immediately switching to another VR app.
                if (mPendingState == null) {
                    mHandler.sendEmptyMessageDelayed(MSG_PENDING_VR_STATE_CHANGE,
                            PENDING_STATE_DELAY_MS);
                }

                mPendingState = new VrState(enabled, targetPackageName, userId, callingPackage);
                return;
            } else {
                mHandler.removeMessages(MSG_PENDING_VR_STATE_CHANGE);
                mPendingState = null;
            }

            updateCurrentVrServiceLocked(enabled, targetPackageName, userId, callingPackage);
        }
!!!85590199.java!!!	hasVrPackage(inout targetPackageName : ComponentName, in userId : int) : int
        synchronized (mLock) {
            return mComponentObserver.isValid(targetPackageName, userId);
        }
!!!85590327.java!!!	isCurrentVrListener(inout packageName : String, in userId : int) : boolean
        synchronized (mLock) {
            if (mCurrentVrService == null) {
                return false;
            }
            return mCurrentVrService.getComponent().getPackageName().equals(packageName) &&
                    userId == mCurrentVrService.getUserId();
        }
!!!85590455.java!!!	addStateCallback(inout cb : IVrStateCallbacks) : void
        mRemoteCallbacks.register(cb);
!!!85590583.java!!!	removeStateCallback(inout cb : IVrStateCallbacks) : void
        mRemoteCallbacks.unregister(cb);
!!!85590711.java!!!	getVrMode() : boolean
        synchronized (mLock) {
            return mVrModeEnabled;
        }
