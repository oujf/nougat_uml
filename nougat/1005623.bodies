class KeyGenParameterSpec
!!!28104631.java!!!	KeyGenParameterSpec(inout keyStoreAlias : String, in uid : int, in keySize : int, inout spec : AlgorithmParameterSpec, inout certificateSubject : X500Principal, inout certificateSerialNumber : BigInteger, inout certificateNotBefore : Date, inout certificateNotAfter : Date, inout keyValidityStart : Date, inout keyValidityForOriginationEnd : Date, inout keyValidityForConsumptionEnd : Date, in purposes : int, inout digests : String, inout encryptionPaddings : String, inout signaturePaddings : String, inout blockModes : String, inout randomizedEncryptionRequired : boolean, inout userAuthenticationRequired : boolean, in userAuthenticationValidityDurationSeconds : int, inout attestationChallenge : byte, inout uniqueIdIncluded : boolean, inout userAuthenticationValidWhileOnBody : boolean, inout invalidatedByBiometricEnrollment : boolean)
        if (TextUtils.isEmpty(keyStoreAlias)) {
            throw new IllegalArgumentException("keyStoreAlias must not be empty");
        }

        if (certificateSubject == null) {
            certificateSubject = DEFAULT_CERT_SUBJECT;
        }
        if (certificateNotBefore == null) {
            certificateNotBefore = DEFAULT_CERT_NOT_BEFORE;
        }
        if (certificateNotAfter == null) {
            certificateNotAfter = DEFAULT_CERT_NOT_AFTER;
        }
        if (certificateSerialNumber == null) {
            certificateSerialNumber = DEFAULT_CERT_SERIAL_NUMBER;
        }

        if (certificateNotAfter.before(certificateNotBefore)) {
            throw new IllegalArgumentException("certificateNotAfter < certificateNotBefore");
        }

        mKeystoreAlias = keyStoreAlias;
        mUid = uid;
        mKeySize = keySize;
        mSpec = spec;
        mCertificateSubject = certificateSubject;
        mCertificateSerialNumber = certificateSerialNumber;
        mCertificateNotBefore = Utils.cloneIfNotNull(certificateNotBefore);
        mCertificateNotAfter = Utils.cloneIfNotNull(certificateNotAfter);
        mKeyValidityStart = Utils.cloneIfNotNull(keyValidityStart);
        mKeyValidityForOriginationEnd = Utils.cloneIfNotNull(keyValidityForOriginationEnd);
        mKeyValidityForConsumptionEnd = Utils.cloneIfNotNull(keyValidityForConsumptionEnd);
        mPurposes = purposes;
        mDigests = ArrayUtils.cloneIfNotEmpty(digests);
        mEncryptionPaddings =
                ArrayUtils.cloneIfNotEmpty(ArrayUtils.nullToEmpty(encryptionPaddings));
        mSignaturePaddings = ArrayUtils.cloneIfNotEmpty(ArrayUtils.nullToEmpty(signaturePaddings));
        mBlockModes = ArrayUtils.cloneIfNotEmpty(ArrayUtils.nullToEmpty(blockModes));
        mRandomizedEncryptionRequired = randomizedEncryptionRequired;
        mUserAuthenticationRequired = userAuthenticationRequired;
        mUserAuthenticationValidityDurationSeconds = userAuthenticationValidityDurationSeconds;
        mAttestationChallenge = Utils.cloneIfNotNull(attestationChallenge);
        mUniqueIdIncluded = uniqueIdIncluded;
        mUserAuthenticationValidWhileOnBody = userAuthenticationValidWhileOnBody;
        mInvalidatedByBiometricEnrollment = invalidatedByBiometricEnrollment;
!!!28104759.java!!!	getKeystoreAlias() : String
        return mKeystoreAlias;
!!!28104887.java!!!	getUid() : int
        return mUid;
!!!28105015.java!!!	getKeySize() : int
        return mKeySize;
!!!28105143.java!!!	getAlgorithmParameterSpec() : AlgorithmParameterSpec
        return mSpec;
!!!28105271.java!!!	getCertificateSubject() : X500Principal
        return mCertificateSubject;
!!!28105399.java!!!	getCertificateSerialNumber() : BigInteger
        return mCertificateSerialNumber;
!!!28105527.java!!!	getCertificateNotBefore() : Date
        return Utils.cloneIfNotNull(mCertificateNotBefore);
!!!28105655.java!!!	getCertificateNotAfter() : Date
        return Utils.cloneIfNotNull(mCertificateNotAfter);
!!!28105783.java!!!	getKeyValidityStart() : Date
        return Utils.cloneIfNotNull(mKeyValidityStart);
!!!28105911.java!!!	getKeyValidityForConsumptionEnd() : Date
        return Utils.cloneIfNotNull(mKeyValidityForConsumptionEnd);
!!!28106039.java!!!	getKeyValidityForOriginationEnd() : Date
        return Utils.cloneIfNotNull(mKeyValidityForOriginationEnd);
!!!28106167.java!!!	getPurposes() : int
        return mPurposes;
!!!28106295.java!!!	getDigests() : String
        if (mDigests == null) {
            throw new IllegalStateException("Digests not specified");
        }
        return ArrayUtils.cloneIfNotEmpty(mDigests);
!!!28106423.java!!!	isDigestsSpecified() : boolean
        return mDigests != null;
!!!28106551.java!!!	getEncryptionPaddings() : String
        return ArrayUtils.cloneIfNotEmpty(mEncryptionPaddings);
!!!28106679.java!!!	getSignaturePaddings() : String
        return ArrayUtils.cloneIfNotEmpty(mSignaturePaddings);
!!!28106807.java!!!	getBlockModes() : String
        return ArrayUtils.cloneIfNotEmpty(mBlockModes);
!!!28106935.java!!!	isRandomizedEncryptionRequired() : boolean
        return mRandomizedEncryptionRequired;
!!!28107063.java!!!	isUserAuthenticationRequired() : boolean
        return mUserAuthenticationRequired;
!!!28107191.java!!!	getUserAuthenticationValidityDurationSeconds() : int
        return mUserAuthenticationValidityDurationSeconds;
!!!28107319.java!!!	getAttestationChallenge() : byte
        return Utils.cloneIfNotNull(mAttestationChallenge);
!!!28107447.java!!!	isUniqueIdIncluded() : boolean
        return mUniqueIdIncluded;
!!!28107575.java!!!	isUserAuthenticationValidWhileOnBody() : boolean
        return mUserAuthenticationValidWhileOnBody;
!!!28107703.java!!!	isInvalidatedByBiometricEnrollment() : boolean
        return mInvalidatedByBiometricEnrollment;
