class LocalListenerHelper
!!!28181687.java!!!	LocalListenerHelper(inout context : Context, inout name : String)
        Preconditions.checkNotNull(name);
        mContext = context;
        mTag = name;
!!!28181815.java!!!	add(inout listener : TListener, inout handler : Handler) : boolean
        Preconditions.checkNotNull(listener);
        synchronized (mListeners) {
            // we need to register with the service first, because we need to find out if the
            // service will actually support the request before we attempt anything
            if (mListeners.isEmpty()) {
                boolean registeredWithService;
                try {
                    registeredWithService = registerWithServer();
                } catch (RemoteException e) {
                    Log.e(mTag, "Error handling first listener.", e);
                    return false;
                }
                if (!registeredWithService) {
                    Log.e(mTag, "Unable to register listener transport.");
                    return false;
                }
            }
            if (mListeners.containsKey(listener)) {
                return true;
            }
            mListeners.put(listener, handler);
            return true;
        }
!!!28181943.java!!!	remove(inout listener : TListener) : void
        Preconditions.checkNotNull(listener);
        synchronized (mListeners) {
            boolean removed = mListeners.containsKey(listener);
            mListeners.remove(listener);
            boolean isLastRemoved = removed && mListeners.isEmpty();
            if (isLastRemoved) {
                try {
                    unregisterFromServer();
                } catch (RemoteException e) {
                    Log.v(mTag, "Error handling last listener removal", e);
                }
            }
        }
!!!28182455.java!!!	getContext() : Context
        return mContext;
!!!28182583.java!!!	executeOperation(inout operation : LocalListenerHelper::ListenerOperation, inout listener : TListener) : void
        try {
            operation.execute(listener);
        } catch (RemoteException e) {
            Log.e(mTag, "Error in monitored listener.", e);
            // don't return, give a fair chance to all listeners to receive the event
        }
!!!28182711.java!!!	foreach(in operation : LocalListenerHelper::ListenerOperation) : void
        Collection<Map.Entry<TListener, Handler>> listeners;
        synchronized (mListeners) {
            listeners = new ArrayList<>(mListeners.entrySet());
        }
        for (final Map.Entry<TListener, Handler> listener : listeners) {
            if (listener.getValue() == null) {
                executeOperation(operation, listener.getKey());
            } else {
                listener.getValue().post(new Runnable() {
                    @Override
                    public void run() {
                        executeOperation(operation, listener.getKey());
                    }
                });
            }
        }
