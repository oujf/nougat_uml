class GpsMeasurement
!!!28197303.java!!!	GpsMeasurement()
        initialize();
!!!28197431.java!!!	set(inout measurement : GpsMeasurement) : void
        mFlags = measurement.mFlags;
        mPrn = measurement.mPrn;
        mTimeOffsetInNs = measurement.mTimeOffsetInNs;
        mState = measurement.mState;
        mReceivedGpsTowInNs = measurement.mReceivedGpsTowInNs;
        mReceivedGpsTowUncertaintyInNs = measurement.mReceivedGpsTowUncertaintyInNs;
        mCn0InDbHz = measurement.mCn0InDbHz;
        mPseudorangeRateInMetersPerSec = measurement.mPseudorangeRateInMetersPerSec;
        mPseudorangeRateUncertaintyInMetersPerSec =
                measurement.mPseudorangeRateUncertaintyInMetersPerSec;
        mAccumulatedDeltaRangeState = measurement.mAccumulatedDeltaRangeState;
        mAccumulatedDeltaRangeInMeters = measurement.mAccumulatedDeltaRangeInMeters;
        mAccumulatedDeltaRangeUncertaintyInMeters =
                measurement.mAccumulatedDeltaRangeUncertaintyInMeters;
        mPseudorangeInMeters = measurement.mPseudorangeInMeters;
        mPseudorangeUncertaintyInMeters = measurement.mPseudorangeUncertaintyInMeters;
        mCodePhaseInChips = measurement.mCodePhaseInChips;
        mCodePhaseUncertaintyInChips = measurement.mCodePhaseUncertaintyInChips;
        mCarrierFrequencyInHz = measurement.mCarrierFrequencyInHz;
        mCarrierCycles = measurement.mCarrierCycles;
        mCarrierPhase = measurement.mCarrierPhase;
        mCarrierPhaseUncertainty = measurement.mCarrierPhaseUncertainty;
        mLossOfLock = measurement.mLossOfLock;
        mBitNumber = measurement.mBitNumber;
        mTimeFromLastBitInMs = measurement.mTimeFromLastBitInMs;
        mDopplerShiftInHz = measurement.mDopplerShiftInHz;
        mDopplerShiftUncertaintyInHz = measurement.mDopplerShiftUncertaintyInHz;
        mMultipathIndicator = measurement.mMultipathIndicator;
        mSnrInDb = measurement.mSnrInDb;
        mElevationInDeg = measurement.mElevationInDeg;
        mElevationUncertaintyInDeg = measurement.mElevationUncertaintyInDeg;
        mAzimuthInDeg = measurement.mAzimuthInDeg;
        mAzimuthUncertaintyInDeg = measurement.mAzimuthUncertaintyInDeg;
        mUsedInFix = measurement.mUsedInFix;
!!!28197559.java!!!	reset() : void
        initialize();
!!!28197687.java!!!	getPrn() : byte
        return mPrn;
!!!28197815.java!!!	setPrn(in value : byte) : void
        mPrn = value;
!!!28197943.java!!!	getTimeOffsetInNs() : double
        return mTimeOffsetInNs;
!!!28198071.java!!!	setTimeOffsetInNs(in value : double) : void
        mTimeOffsetInNs = value;
!!!28198199.java!!!	getState() : short
        return mState;
!!!28198327.java!!!	setState(in value : short) : void
        mState = value;
!!!28198455.java!!!	getStateString() : String
        if (mState == STATE_UNKNOWN) {
            return "Unknown";
        }
        StringBuilder builder = new StringBuilder();
        if ((mState & STATE_CODE_LOCK) == STATE_CODE_LOCK) {
            builder.append("CodeLock|");
        }
        if ((mState & STATE_BIT_SYNC) == STATE_BIT_SYNC) {
            builder.append("BitSync|");
        }
        if ((mState & STATE_SUBFRAME_SYNC) == STATE_SUBFRAME_SYNC) {
            builder.append("SubframeSync|");
        }
        if ((mState & STATE_TOW_DECODED) == STATE_TOW_DECODED) {
            builder.append("TowDecoded|");
        }
        if ((mState & STATE_MSEC_AMBIGUOUS) == STATE_MSEC_AMBIGUOUS) {
            builder.append("MsecAmbiguous");
        }
        int remainingStates = mState & ~STATE_ALL;
        if (remainingStates > 0) {
            builder.append("Other(");
            builder.append(Integer.toBinaryString(remainingStates));
            builder.append(")|");
        }
        builder.deleteCharAt(builder.length() - 1);
        return builder.toString();
!!!28198583.java!!!	getReceivedGpsTowInNs() : long
        return mReceivedGpsTowInNs;
!!!28198711.java!!!	setReceivedGpsTowInNs(in value : long) : void
        mReceivedGpsTowInNs = value;
!!!28198839.java!!!	getReceivedGpsTowUncertaintyInNs() : long
        return mReceivedGpsTowUncertaintyInNs;
!!!28198967.java!!!	setReceivedGpsTowUncertaintyInNs(in value : long) : void
        mReceivedGpsTowUncertaintyInNs = value;
!!!28199095.java!!!	getCn0InDbHz() : double
        return mCn0InDbHz;
!!!28199223.java!!!	setCn0InDbHz(in value : double) : void
        mCn0InDbHz = value;
!!!28199351.java!!!	getPseudorangeRateInMetersPerSec() : double
        return mPseudorangeRateInMetersPerSec;
!!!28199479.java!!!	setPseudorangeRateInMetersPerSec(in value : double) : void
        mPseudorangeRateInMetersPerSec = value;
!!!28199607.java!!!	isPseudorangeRateCorrected() : boolean
        return !isFlagSet(GPS_MEASUREMENT_HAS_UNCORRECTED_PSEUDORANGE_RATE);
!!!28199735.java!!!	getPseudorangeRateUncertaintyInMetersPerSec() : double
        return mPseudorangeRateUncertaintyInMetersPerSec;
!!!28199863.java!!!	setPseudorangeRateUncertaintyInMetersPerSec(in value : double) : void
        mPseudorangeRateUncertaintyInMetersPerSec = value;
!!!28199991.java!!!	getAccumulatedDeltaRangeState() : short
        return mAccumulatedDeltaRangeState;
!!!28200119.java!!!	setAccumulatedDeltaRangeState(in value : short) : void
        mAccumulatedDeltaRangeState = value;
!!!28200247.java!!!	getAccumulatedDeltaRangeStateString() : String
        if (mAccumulatedDeltaRangeState == ADR_STATE_UNKNOWN) {
            return "Unknown";
        }
        StringBuilder builder = new StringBuilder();
        if ((mAccumulatedDeltaRangeState & ADR_STATE_VALID) == ADR_STATE_VALID) {
            builder.append("Valid|");
        }
        if ((mAccumulatedDeltaRangeState & ADR_STATE_RESET) == ADR_STATE_RESET) {
            builder.append("Reset|");
        }
        if ((mAccumulatedDeltaRangeState & ADR_STATE_CYCLE_SLIP) == ADR_STATE_CYCLE_SLIP) {
            builder.append("CycleSlip|");
        }
        int remainingStates = mAccumulatedDeltaRangeState & ~ADR_ALL;
        if (remainingStates > 0) {
            builder.append("Other(");
            builder.append(Integer.toBinaryString(remainingStates));
            builder.append(")|");
        }
        builder.deleteCharAt(builder.length() - 1);
        return builder.toString();
!!!28200375.java!!!	getAccumulatedDeltaRangeInMeters() : double
        return mAccumulatedDeltaRangeInMeters;
!!!28200503.java!!!	setAccumulatedDeltaRangeInMeters(in value : double) : void
        mAccumulatedDeltaRangeInMeters = value;
!!!28200631.java!!!	getAccumulatedDeltaRangeUncertaintyInMeters() : double
        return mAccumulatedDeltaRangeUncertaintyInMeters;
!!!28200759.java!!!	setAccumulatedDeltaRangeUncertaintyInMeters(in value : double) : void
        mAccumulatedDeltaRangeUncertaintyInMeters = value;
!!!28200887.java!!!	hasPseudorangeInMeters() : boolean
        return isFlagSet(HAS_PSEUDORANGE);
!!!28201015.java!!!	getPseudorangeInMeters() : double
        return mPseudorangeInMeters;
!!!28201143.java!!!	setPseudorangeInMeters(in value : double) : void
        setFlag(HAS_PSEUDORANGE);
        mPseudorangeInMeters = value;
!!!28201271.java!!!	resetPseudorangeInMeters() : void
        resetFlag(HAS_PSEUDORANGE);
        mPseudorangeInMeters = Double.NaN;
!!!28201399.java!!!	hasPseudorangeUncertaintyInMeters() : boolean
        return isFlagSet(HAS_PSEUDORANGE_UNCERTAINTY);
!!!28201527.java!!!	getPseudorangeUncertaintyInMeters() : double
        return mPseudorangeUncertaintyInMeters;
!!!28201655.java!!!	setPseudorangeUncertaintyInMeters(in value : double) : void
        setFlag(HAS_PSEUDORANGE_UNCERTAINTY);
        mPseudorangeUncertaintyInMeters = value;
!!!28201783.java!!!	resetPseudorangeUncertaintyInMeters() : void
        resetFlag(HAS_PSEUDORANGE_UNCERTAINTY);
        mPseudorangeUncertaintyInMeters = Double.NaN;
!!!28201911.java!!!	hasCodePhaseInChips() : boolean
        return isFlagSet(HAS_CODE_PHASE);
!!!28202039.java!!!	getCodePhaseInChips() : double
        return mCodePhaseInChips;
!!!28202167.java!!!	setCodePhaseInChips(in value : double) : void
        setFlag(HAS_CODE_PHASE);
        mCodePhaseInChips = value;
!!!28202295.java!!!	resetCodePhaseInChips() : void
        resetFlag(HAS_CODE_PHASE);
        mCodePhaseInChips = Double.NaN;
!!!28202423.java!!!	hasCodePhaseUncertaintyInChips() : boolean
        return isFlagSet(HAS_CODE_PHASE_UNCERTAINTY);
!!!28202551.java!!!	getCodePhaseUncertaintyInChips() : double
        return mCodePhaseUncertaintyInChips;
!!!28202679.java!!!	setCodePhaseUncertaintyInChips(in value : double) : void
        setFlag(HAS_CODE_PHASE_UNCERTAINTY);
        mCodePhaseUncertaintyInChips = value;
!!!28202807.java!!!	resetCodePhaseUncertaintyInChips() : void
        resetFlag(HAS_CODE_PHASE_UNCERTAINTY);
        mCodePhaseUncertaintyInChips = Double.NaN;
!!!28202935.java!!!	hasCarrierFrequencyInHz() : boolean
        return isFlagSet(HAS_CARRIER_FREQUENCY);
!!!28203063.java!!!	getCarrierFrequencyInHz() : float
        return mCarrierFrequencyInHz;
!!!28203191.java!!!	setCarrierFrequencyInHz(in carrierFrequencyInHz : float) : void
        setFlag(HAS_CARRIER_FREQUENCY);
        mCarrierFrequencyInHz = carrierFrequencyInHz;
!!!28203319.java!!!	resetCarrierFrequencyInHz() : void
        resetFlag(HAS_CARRIER_FREQUENCY);
        mCarrierFrequencyInHz = Float.NaN;
!!!28203447.java!!!	hasCarrierCycles() : boolean
        return isFlagSet(HAS_CARRIER_CYCLES);
!!!28203575.java!!!	getCarrierCycles() : long
        return mCarrierCycles;
!!!28203703.java!!!	setCarrierCycles(in value : long) : void
        setFlag(HAS_CARRIER_CYCLES);
        mCarrierCycles = value;
!!!28203831.java!!!	resetCarrierCycles() : void
        resetFlag(HAS_CARRIER_CYCLES);
        mCarrierCycles = Long.MIN_VALUE;
!!!28203959.java!!!	hasCarrierPhase() : boolean
        return isFlagSet(HAS_CARRIER_PHASE);
!!!28204087.java!!!	getCarrierPhase() : double
        return mCarrierPhase;
!!!28204215.java!!!	setCarrierPhase(in value : double) : void
        setFlag(HAS_CARRIER_PHASE);
        mCarrierPhase = value;
!!!28204343.java!!!	resetCarrierPhase() : void
        resetFlag(HAS_CARRIER_PHASE);
        mCarrierPhase = Double.NaN;
!!!28204471.java!!!	hasCarrierPhaseUncertainty() : boolean
        return isFlagSet(HAS_CARRIER_PHASE_UNCERTAINTY);
!!!28204599.java!!!	getCarrierPhaseUncertainty() : double
        return mCarrierPhaseUncertainty;
!!!28204727.java!!!	setCarrierPhaseUncertainty(in value : double) : void
        setFlag(HAS_CARRIER_PHASE_UNCERTAINTY);
        mCarrierPhaseUncertainty = value;
!!!28204855.java!!!	resetCarrierPhaseUncertainty() : void
        resetFlag(HAS_CARRIER_PHASE_UNCERTAINTY);
        mCarrierPhaseUncertainty = Double.NaN;
!!!28204983.java!!!	getLossOfLock() : byte
        return mLossOfLock;
!!!28205111.java!!!	setLossOfLock(in value : byte) : void
        mLossOfLock = value;
!!!28205239.java!!!	getLossOfLockString() : String
        switch (mLossOfLock) {
            case LOSS_OF_LOCK_UNKNOWN:
                return "Unknown";
            case LOSS_OF_LOCK_OK:
                return "Ok";
            case LOSS_OF_LOCK_CYCLE_SLIP:
                return "CycleSlip";
            default:
                return "<Invalid:" + mLossOfLock + ">";
        }
!!!28205367.java!!!	hasBitNumber() : boolean
        return isFlagSet(HAS_BIT_NUMBER);
!!!28205495.java!!!	getBitNumber() : int
        return mBitNumber;
!!!28205623.java!!!	setBitNumber(in bitNumber : int) : void
        setFlag(HAS_BIT_NUMBER);
        mBitNumber = bitNumber;
!!!28205751.java!!!	resetBitNumber() : void
        resetFlag(HAS_BIT_NUMBER);
        mBitNumber = Integer.MIN_VALUE;
!!!28205879.java!!!	hasTimeFromLastBitInMs() : boolean
        return isFlagSet(HAS_TIME_FROM_LAST_BIT);
!!!28206007.java!!!	getTimeFromLastBitInMs() : short
        return mTimeFromLastBitInMs;
!!!28206135.java!!!	setTimeFromLastBitInMs(in value : short) : void
        setFlag(HAS_TIME_FROM_LAST_BIT);
        mTimeFromLastBitInMs = value;
!!!28206263.java!!!	resetTimeFromLastBitInMs() : void
        resetFlag(HAS_TIME_FROM_LAST_BIT);
        mTimeFromLastBitInMs = Short.MIN_VALUE;
!!!28206391.java!!!	hasDopplerShiftInHz() : boolean
        return isFlagSet(HAS_DOPPLER_SHIFT);
!!!28206519.java!!!	getDopplerShiftInHz() : double
        return mDopplerShiftInHz;
!!!28206647.java!!!	setDopplerShiftInHz(in value : double) : void
        setFlag(HAS_DOPPLER_SHIFT);
        mDopplerShiftInHz = value;
!!!28206775.java!!!	resetDopplerShiftInHz() : void
        resetFlag(HAS_DOPPLER_SHIFT);
        mDopplerShiftInHz = Double.NaN;
!!!28206903.java!!!	hasDopplerShiftUncertaintyInHz() : boolean
        return isFlagSet(HAS_DOPPLER_SHIFT_UNCERTAINTY);
!!!28207031.java!!!	getDopplerShiftUncertaintyInHz() : double
        return mDopplerShiftUncertaintyInHz;
!!!28207159.java!!!	setDopplerShiftUncertaintyInHz(in value : double) : void
        setFlag(HAS_DOPPLER_SHIFT_UNCERTAINTY);
        mDopplerShiftUncertaintyInHz = value;
!!!28207287.java!!!	resetDopplerShiftUncertaintyInHz() : void
        resetFlag(HAS_DOPPLER_SHIFT_UNCERTAINTY);
        mDopplerShiftUncertaintyInHz = Double.NaN;
!!!28207415.java!!!	getMultipathIndicator() : byte
        return mMultipathIndicator;
!!!28207543.java!!!	setMultipathIndicator(in value : byte) : void
        mMultipathIndicator = value;
!!!28207671.java!!!	getMultipathIndicatorString() : String
        switch(mMultipathIndicator) {
            case MULTIPATH_INDICATOR_UNKNOWN:
                return "Unknown";
            case MULTIPATH_INDICATOR_DETECTED:
                return "Detected";
            case MULTIPATH_INDICATOR_NOT_USED:
                return "NotUsed";
            default:
                return "<Invalid:" + mMultipathIndicator + ">";
        }
!!!28207799.java!!!	hasSnrInDb() : boolean
        return isFlagSet(HAS_SNR);
!!!28207927.java!!!	getSnrInDb() : double
        return mSnrInDb;
!!!28208055.java!!!	setSnrInDb(in snrInDb : double) : void
        setFlag(HAS_SNR);
        mSnrInDb = snrInDb;
!!!28208183.java!!!	resetSnrInDb() : void
        resetFlag(HAS_SNR);
        mSnrInDb = Double.NaN;
!!!28208311.java!!!	hasElevationInDeg() : boolean
        return isFlagSet(HAS_ELEVATION);
!!!28208439.java!!!	getElevationInDeg() : double
        return mElevationInDeg;
!!!28208567.java!!!	setElevationInDeg(in elevationInDeg : double) : void
        setFlag(HAS_ELEVATION);
        mElevationInDeg = elevationInDeg;
!!!28208695.java!!!	resetElevationInDeg() : void
        resetFlag(HAS_ELEVATION);
        mElevationInDeg = Double.NaN;
!!!28208823.java!!!	hasElevationUncertaintyInDeg() : boolean
        return isFlagSet(HAS_ELEVATION_UNCERTAINTY);
!!!28208951.java!!!	getElevationUncertaintyInDeg() : double
        return mElevationUncertaintyInDeg;
!!!28209079.java!!!	setElevationUncertaintyInDeg(in value : double) : void
        setFlag(HAS_ELEVATION_UNCERTAINTY);
        mElevationUncertaintyInDeg = value;
!!!28209207.java!!!	resetElevationUncertaintyInDeg() : void
        resetFlag(HAS_ELEVATION_UNCERTAINTY);
        mElevationUncertaintyInDeg = Double.NaN;
!!!28209335.java!!!	hasAzimuthInDeg() : boolean
        return isFlagSet(HAS_AZIMUTH);
!!!28209463.java!!!	getAzimuthInDeg() : double
        return mAzimuthInDeg;
!!!28209591.java!!!	setAzimuthInDeg(in value : double) : void
        setFlag(HAS_AZIMUTH);
        mAzimuthInDeg = value;
!!!28209719.java!!!	resetAzimuthInDeg() : void
        resetFlag(HAS_AZIMUTH);
        mAzimuthInDeg = Double.NaN;
!!!28209847.java!!!	hasAzimuthUncertaintyInDeg() : boolean
        return isFlagSet(HAS_AZIMUTH_UNCERTAINTY);
!!!28209975.java!!!	getAzimuthUncertaintyInDeg() : double
        return mAzimuthUncertaintyInDeg;
!!!28210103.java!!!	setAzimuthUncertaintyInDeg(in value : double) : void
        setFlag(HAS_AZIMUTH_UNCERTAINTY);
        mAzimuthUncertaintyInDeg = value;
!!!28210231.java!!!	resetAzimuthUncertaintyInDeg() : void
        resetFlag(HAS_AZIMUTH_UNCERTAINTY);
        mAzimuthUncertaintyInDeg = Double.NaN;
!!!28210359.java!!!	isUsedInFix() : boolean
        return mUsedInFix;
!!!28210487.java!!!	setUsedInFix(inout value : boolean) : void
        mUsedInFix = value;
!!!28210615.java!!!	writeToParcel(inout parcel : Parcel, in flags : int) : void
        parcel.writeInt(mFlags);
        parcel.writeByte(mPrn);
        parcel.writeDouble(mTimeOffsetInNs);
        parcel.writeInt(mState);
        parcel.writeLong(mReceivedGpsTowInNs);
        parcel.writeLong(mReceivedGpsTowUncertaintyInNs);
        parcel.writeDouble(mCn0InDbHz);
        parcel.writeDouble(mPseudorangeRateInMetersPerSec);
        parcel.writeDouble(mPseudorangeRateUncertaintyInMetersPerSec);
        parcel.writeInt(mAccumulatedDeltaRangeState);
        parcel.writeDouble(mAccumulatedDeltaRangeInMeters);
        parcel.writeDouble(mAccumulatedDeltaRangeUncertaintyInMeters);
        parcel.writeDouble(mPseudorangeInMeters);
        parcel.writeDouble(mPseudorangeUncertaintyInMeters);
        parcel.writeDouble(mCodePhaseInChips);
        parcel.writeDouble(mCodePhaseUncertaintyInChips);
        parcel.writeFloat(mCarrierFrequencyInHz);
        parcel.writeLong(mCarrierCycles);
        parcel.writeDouble(mCarrierPhase);
        parcel.writeDouble(mCarrierPhaseUncertainty);
        parcel.writeByte(mLossOfLock);
        parcel.writeInt(mBitNumber);
        parcel.writeInt(mTimeFromLastBitInMs);
        parcel.writeDouble(mDopplerShiftInHz);
        parcel.writeDouble(mDopplerShiftUncertaintyInHz);
        parcel.writeByte(mMultipathIndicator);
        parcel.writeDouble(mSnrInDb);
        parcel.writeDouble(mElevationInDeg);
        parcel.writeDouble(mElevationUncertaintyInDeg);
        parcel.writeDouble(mAzimuthInDeg);
        parcel.writeDouble(mAzimuthUncertaintyInDeg);
        parcel.writeInt(mUsedInFix ? 1 : 0);
!!!28210743.java!!!	describeContents() : int
        return 0;
!!!28210871.java!!!	toString() : String
        final String format = "   %-29s = %s\n";
        final String formatWithUncertainty = "   %-29s = %-25s   %-40s = %s\n";
        StringBuilder builder = new StringBuilder("GpsMeasurement:\n");

        builder.append(String.format(format, "Prn", mPrn));

        builder.append(String.format(format, "TimeOffsetInNs", mTimeOffsetInNs));

        builder.append(String.format(format, "State", getStateString()));

        builder.append(String.format(
                formatWithUncertainty,
                "ReceivedGpsTowInNs",
                mReceivedGpsTowInNs,
                "ReceivedGpsTowUncertaintyInNs",
                mReceivedGpsTowUncertaintyInNs));

        builder.append(String.format(format, "Cn0InDbHz", mCn0InDbHz));

        builder.append(String.format(
                formatWithUncertainty,
                "PseudorangeRateInMetersPerSec",
                mPseudorangeRateInMetersPerSec,
                "PseudorangeRateUncertaintyInMetersPerSec",
                mPseudorangeRateUncertaintyInMetersPerSec));
        builder.append(String.format(
                format,
                "PseudorangeRateIsCorrected",
                isPseudorangeRateCorrected()));

        builder.append(String.format(
                format,
                "AccumulatedDeltaRangeState",
                getAccumulatedDeltaRangeStateString()));

        builder.append(String.format(
                formatWithUncertainty,
                "AccumulatedDeltaRangeInMeters",
                mAccumulatedDeltaRangeInMeters,
                "AccumulatedDeltaRangeUncertaintyInMeters",
                mAccumulatedDeltaRangeUncertaintyInMeters));

        builder.append(String.format(
                formatWithUncertainty,
                "PseudorangeInMeters",
                hasPseudorangeInMeters() ? mPseudorangeInMeters : null,
                "PseudorangeUncertaintyInMeters",
                hasPseudorangeUncertaintyInMeters() ? mPseudorangeUncertaintyInMeters : null));

        builder.append(String.format(
                formatWithUncertainty,
                "CodePhaseInChips",
                hasCodePhaseInChips() ? mCodePhaseInChips : null,
                "CodePhaseUncertaintyInChips",
                hasCodePhaseUncertaintyInChips() ? mCodePhaseUncertaintyInChips : null));

        builder.append(String.format(
                format,
                "CarrierFrequencyInHz",
                hasCarrierFrequencyInHz() ? mCarrierFrequencyInHz : null));

        builder.append(String.format(
                format,
                "CarrierCycles",
                hasCarrierCycles() ? mCarrierCycles : null));

        builder.append(String.format(
                formatWithUncertainty,
                "CarrierPhase",
                hasCarrierPhase() ? mCarrierPhase : null,
                "CarrierPhaseUncertainty",
                hasCarrierPhaseUncertainty() ? mCarrierPhaseUncertainty : null));

        builder.append(String.format(format, "LossOfLock", getLossOfLockString()));

        builder.append(String.format(
                format,
                "BitNumber",
                hasBitNumber() ? mBitNumber : null));

        builder.append(String.format(
                format,
                "TimeFromLastBitInMs",
                hasTimeFromLastBitInMs() ? mTimeFromLastBitInMs : null));

        builder.append(String.format(
                formatWithUncertainty,
                "DopplerShiftInHz",
                hasDopplerShiftInHz() ? mDopplerShiftInHz : null,
                "DopplerShiftUncertaintyInHz",
                hasDopplerShiftUncertaintyInHz() ? mDopplerShiftUncertaintyInHz : null));

        builder.append(String.format(format, "MultipathIndicator", getMultipathIndicatorString()));

        builder.append(String.format(
                format,
                "SnrInDb",
                hasSnrInDb() ? mSnrInDb : null));

        builder.append(String.format(
                formatWithUncertainty,
                "ElevationInDeg",
                hasElevationInDeg() ? mElevationInDeg : null,
                "ElevationUncertaintyInDeg",
                hasElevationUncertaintyInDeg() ? mElevationUncertaintyInDeg : null));

        builder.append(String.format(
                formatWithUncertainty,
                "AzimuthInDeg",
                hasAzimuthInDeg() ? mAzimuthInDeg : null,
                "AzimuthUncertaintyInDeg",
                hasAzimuthUncertaintyInDeg() ? mAzimuthUncertaintyInDeg : null));

        builder.append(String.format(format, "UsedInFix", mUsedInFix));

        return builder.toString();
!!!28210999.java!!!	initialize() : void
        mFlags = HAS_NO_FLAGS;
        setPrn(Byte.MIN_VALUE);
        setTimeOffsetInNs(Long.MIN_VALUE);
        setState(STATE_UNKNOWN);
        setReceivedGpsTowInNs(Long.MIN_VALUE);
        setReceivedGpsTowUncertaintyInNs(Long.MAX_VALUE);
        setCn0InDbHz(Double.MIN_VALUE);
        setPseudorangeRateInMetersPerSec(Double.MIN_VALUE);
        setPseudorangeRateUncertaintyInMetersPerSec(Double.MIN_VALUE);
        setAccumulatedDeltaRangeState(ADR_STATE_UNKNOWN);
        setAccumulatedDeltaRangeInMeters(Double.MIN_VALUE);
        setAccumulatedDeltaRangeUncertaintyInMeters(Double.MIN_VALUE);
        resetPseudorangeInMeters();
        resetPseudorangeUncertaintyInMeters();
        resetCodePhaseInChips();
        resetCodePhaseUncertaintyInChips();
        resetCarrierFrequencyInHz();
        resetCarrierCycles();
        resetCarrierPhase();
        resetCarrierPhaseUncertainty();
        setLossOfLock(LOSS_OF_LOCK_UNKNOWN);
        resetBitNumber();
        resetTimeFromLastBitInMs();
        resetDopplerShiftInHz();
        resetDopplerShiftUncertaintyInHz();
        setMultipathIndicator(MULTIPATH_INDICATOR_UNKNOWN);
        resetSnrInDb();
        resetElevationInDeg();
        resetElevationUncertaintyInDeg();
        resetAzimuthInDeg();
        resetAzimuthUncertaintyInDeg();
        setUsedInFix(false);
!!!28211127.java!!!	setFlag(in flag : int) : void
        mFlags |= flag;
!!!28211255.java!!!	resetFlag(in flag : int) : void
        mFlags &= ~flag;
!!!28211383.java!!!	isFlagSet(in flag : int) : boolean
        return (mFlags & flag) == flag;
