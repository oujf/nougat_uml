class GpsMeasurementsEvent
!!!28211767.java!!!	GpsMeasurementsEvent(inout clock : GpsClock, inout measurements : GpsMeasurement)
        if (clock == null) {
            throw new InvalidParameterException("Parameter 'clock' must not be null.");
        }
        if (measurements == null || measurements.length == 0) {
            throw new InvalidParameterException(
                    "Parameter 'measurements' must not be null or empty.");
        }

        mClock = clock;
        Collection<GpsMeasurement> measurementCollection = Arrays.asList(measurements);
        mReadOnlyMeasurements = Collections.unmodifiableCollection(measurementCollection);
!!!28211895.java!!!	getClock() : GpsClock
        return mClock;
!!!28212023.java!!!	getMeasurements() : GpsMeasurement
        return mReadOnlyMeasurements;
!!!28212151.java!!!	describeContents() : int
        return 0;
!!!28212279.java!!!	writeToParcel(inout parcel : Parcel, in flags : int) : void
        parcel.writeParcelable(mClock, flags);

        int measurementsCount = mReadOnlyMeasurements.size();
        GpsMeasurement[] measurementsArray =
                mReadOnlyMeasurements.toArray(new GpsMeasurement[measurementsCount]);
        parcel.writeInt(measurementsArray.length);
        parcel.writeTypedArray(measurementsArray, flags);
!!!28212407.java!!!	toString() : String
        StringBuilder builder = new StringBuilder("[ GpsMeasurementsEvent:\n\n");

        builder.append(mClock.toString());
        builder.append("\n");

        for (GpsMeasurement measurement : mReadOnlyMeasurements) {
            builder.append(measurement.toString());
            builder.append("\n");
        }

        builder.append("]");

        return builder.toString();
