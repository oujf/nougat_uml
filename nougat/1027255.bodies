class FusedLocationHardware
!!!28252855.java!!!	FusedLocationHardware(inout locationHardware : IFusedLocationHardware)
        mLocationHardware = locationHardware;
!!!28252983.java!!!	registerSink(inout sink : FusedLocationHardwareSink, inout looper : Looper) : void
        if(sink == null || looper == null) {
            throw new IllegalArgumentException("Parameter sink and looper cannot be null.");
        }

        boolean registerSink;
        synchronized (mSinkList) {
            // register only on first insertion
            registerSink = mSinkList.size() == 0;
            // guarantee uniqueness
            if(mSinkList.containsKey(sink)) {
                return;
            }

            HashMap<FusedLocationHardwareSink, DispatcherHandler> newSinkList =
                    new HashMap<FusedLocationHardwareSink, DispatcherHandler>(mSinkList);
            newSinkList.put(sink, new DispatcherHandler(looper));
            mSinkList = newSinkList;
        }

        if(registerSink) {
            try {
                mLocationHardware.registerSink(mInternalSink);
            } catch(RemoteException e) {
                Log.e(TAG, "RemoteException at registerSink");
            }
        }
!!!28253111.java!!!	unregisterSink(inout sink : FusedLocationHardwareSink) : void
        if(sink == null) {
            throw new IllegalArgumentException("Parameter sink cannot be null.");
        }

        boolean unregisterSink;
        synchronized(mSinkList) {
            if(!mSinkList.containsKey(sink)) {
                //done
                return;
            }

            HashMap<FusedLocationHardwareSink, DispatcherHandler> newSinkList =
                    new HashMap<FusedLocationHardwareSink, DispatcherHandler>(mSinkList);
            newSinkList.remove(sink);
            //unregister after the last sink
            unregisterSink = newSinkList.size() == 0;

            mSinkList = newSinkList;
        }

        if(unregisterSink) {
            try {
                mLocationHardware.unregisterSink(mInternalSink);
            } catch(RemoteException e) {
                Log.e(TAG, "RemoteException at unregisterSink");
            }
        }
!!!28253239.java!!!	getSupportedBatchSize() : int
        try {
            return mLocationHardware.getSupportedBatchSize();
        } catch(RemoteException e) {
            Log.e(TAG, "RemoteException at getSupportedBatchSize");
            return 0;
        }
!!!28253367.java!!!	startBatching(in id : int, inout batchOptions : GmsFusedBatchOptions) : void
        try {
            mLocationHardware.startBatching(id, batchOptions.getParcelableOptions());
        } catch(RemoteException e) {
            Log.e(TAG, "RemoteException at startBatching");
        }
!!!28253495.java!!!	stopBatching(in id : int) : void
        try {
            mLocationHardware.stopBatching(id);
        } catch(RemoteException e) {
            Log.e(TAG, "RemoteException at stopBatching");
        }
!!!28253623.java!!!	updateBatchingOptions(in id : int, inout batchOptions : GmsFusedBatchOptions) : void
        try {
            mLocationHardware.updateBatchingOptions(id, batchOptions.getParcelableOptions());
        } catch(RemoteException e) {
            Log.e(TAG, "RemoteException at updateBatchingOptions");
        }
!!!28253751.java!!!	requestBatchOfLocations(in batchSizeRequest : int) : void
        try {
            mLocationHardware.requestBatchOfLocations(batchSizeRequest);
        } catch(RemoteException e) {
            Log.e(TAG, "RemoteException at requestBatchOfLocations");
        }
!!!28253879.java!!!	flushBatchedLocations() : void
        try {
            mLocationHardware.flushBatchedLocations();
        } catch(RemoteException e) {
            Log.e(TAG, "RemoteException at flushBatchedLocations");
        }
!!!28254007.java!!!	supportsDiagnosticDataInjection() : boolean
        try {
            return mLocationHardware.supportsDiagnosticDataInjection();
        } catch(RemoteException e) {
            Log.e(TAG, "RemoteException at supportsDiagnisticDataInjection");
            return false;
        }
!!!28254135.java!!!	injectDiagnosticData(inout data : String) : void
        try {
            mLocationHardware.injectDiagnosticData(data);
        } catch(RemoteException e) {
            Log.e(TAG, "RemoteException at injectDiagnosticData");
        }
!!!28254263.java!!!	supportsDeviceContextInjection() : boolean
        try {
            return mLocationHardware.supportsDeviceContextInjection();
        } catch(RemoteException e) {
            Log.e(TAG, "RemoteException at supportsDeviceContextInjection");
            return false;
        }
!!!28254391.java!!!	injectDeviceContext(in deviceEnabledContext : int) : void
        try {
            mLocationHardware.injectDeviceContext(deviceEnabledContext);
        } catch(RemoteException e) {
            Log.e(TAG, "RemoteException at injectDeviceContext");
        }
!!!28254519.java!!!	getVersion() : int
        try {
            return mLocationHardware.getVersion();
        } catch(RemoteException e) {
            Log.e(TAG, "RemoteException at getVersion");
        }
        return 1;
!!!28255543.java!!!	dispatchLocations(inout locations : Location) : void
        HashMap<FusedLocationHardwareSink, DispatcherHandler> sinks;
        synchronized (mSinkList) {
            sinks = mSinkList;
        }

        for(Map.Entry<FusedLocationHardwareSink, DispatcherHandler> entry : sinks.entrySet()) {
            Message message = Message.obtain(
                    entry.getValue(),
                    DispatcherHandler.DISPATCH_LOCATION,
                    new MessageCommand(entry.getKey(), locations, null /*data*/, 0, 0));
            message.sendToTarget();
        }
!!!28255671.java!!!	dispatchDiagnosticData(inout data : String) : void
        HashMap<FusedLocationHardwareSink, DispatcherHandler> sinks;
        synchronized(mSinkList) {
            sinks = mSinkList;
        }

        for(Map.Entry<FusedLocationHardwareSink, DispatcherHandler> entry : sinks.entrySet()) {
            Message message = Message.obtain(
                    entry.getValue(),
                    DispatcherHandler.DISPATCH_DIAGNOSTIC_DATA,
                    new MessageCommand(entry.getKey(), null /*locations*/, data, 0, 0));
            message.sendToTarget();
        }
!!!28255799.java!!!	dispatchCapabilities(in capabilities : int) : void
        HashMap<FusedLocationHardwareSink, DispatcherHandler> sinks;
        synchronized(mSinkList) {
            sinks = mSinkList;
        }

        for(Map.Entry<FusedLocationHardwareSink, DispatcherHandler> entry : sinks.entrySet()) {
            Message message = Message.obtain(
                    entry.getValue(),
                    DispatcherHandler.DISPATCH_CAPABILITIES,
                    new MessageCommand(entry.getKey(), null /*locations*/, null, capabilities, 0));
            message.sendToTarget();
        }
!!!28255927.java!!!	dispatchStatus(in status : int) : void
        HashMap<FusedLocationHardwareSink, DispatcherHandler> sinks;
        synchronized(mSinkList) {
            sinks = mSinkList;
        }

        for(Map.Entry<FusedLocationHardwareSink, DispatcherHandler> entry : sinks.entrySet()) {
            Message message = Message.obtain(
                    entry.getValue(),
                    DispatcherHandler.DISPATCH_STATUS,
                    new MessageCommand(entry.getKey(), null /*locations*/, null, 0, status));
            message.sendToTarget();
        }
