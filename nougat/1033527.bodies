class AudioRecordingConfiguration
!!!28322103.java!!!	AudioRecordingConfiguration(in session : int, in source : int, inout devFormat : AudioFormat, inout clientFormat : AudioFormat, in patchHandle : int)
        mSessionId = session;
        mClientSource = source;
        mDeviceFormat = devFormat;
        mClientFormat = clientFormat;
        mPatchHandle = patchHandle;
!!!28322231.java!!!	getClientAudioSource() : int
 return mClientSource;
!!!28322359.java!!!	getClientAudioSessionId() : int
 return mSessionId;
!!!28322487.java!!!	getFormat() : AudioFormat
 return mDeviceFormat;
!!!28322615.java!!!	getClientFormat() : AudioFormat
 return mClientFormat;
!!!28322743.java!!!	getAudioDevice() : AudioDeviceInfo
        // build the AudioDeviceInfo from the patch handle
        ArrayList<AudioPatch> patches = new ArrayList<AudioPatch>();
        if (AudioManager.listAudioPatches(patches) != AudioManager.SUCCESS) {
            Log.e(TAG, "Error retrieving list of audio patches");
            return null;
        }
        for (int i = 0 ; i < patches.size() ; i++) {
            final AudioPatch patch = patches.get(i);
            if (patch.id() == mPatchHandle) {
                final AudioPortConfig[] sources = patch.sources();
                if ((sources != null) && (sources.length > 0)) {
                    // not supporting multiple sources, so just look at the first source
                    final int devId = sources[0].port().id();
                    final AudioDeviceInfo[] devices =
                            AudioManager.getDevicesStatic(AudioManager.GET_DEVICES_INPUTS);
                    for (int j = 0; j < devices.length; j++) {
                        if (devices[j].getId() == devId) {
                            return devices[j];
                        }
                    }
                }
                // patch handle is unique, there won't be another with the same handle
                break;
            }
        }
        Log.e(TAG, "Couldn't find device for recording, did recording end already?");
        return null;
!!!28322871.java!!!	hashCode() : int
        return Objects.hash(mSessionId, mClientSource);
!!!28322999.java!!!	describeContents() : int
        return 0;
!!!28323127.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        dest.writeInt(mSessionId);
        dest.writeInt(mClientSource);
        mClientFormat.writeToParcel(dest, 0);
        mDeviceFormat.writeToParcel(dest, 0);
        dest.writeInt(mPatchHandle);
!!!28323255.java!!!	AudioRecordingConfiguration(inout in : Parcel)
        mSessionId = in.readInt();
        mClientSource = in.readInt();
        mClientFormat = AudioFormat.CREATOR.createFromParcel(in);
        mDeviceFormat = AudioFormat.CREATOR.createFromParcel(in);
        mPatchHandle = in.readInt();
!!!28323383.java!!!	equals(inout o : Object) : boolean
        if (this == o) return true;
        if (o == null || !(o instanceof AudioRecordingConfiguration)) return false;

        AudioRecordingConfiguration that = (AudioRecordingConfiguration) o;

        return ((mSessionId == that.mSessionId)
                && (mClientSource == that.mClientSource)
                && (mPatchHandle == that.mPatchHandle)
                && (mClientFormat.equals(that.mClientFormat))
                && (mDeviceFormat.equals(that.mDeviceFormat)));
