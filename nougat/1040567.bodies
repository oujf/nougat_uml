class Cea608CCParser
!!!28357943.java!!!	Cea608CCParser(inout listener : Cea608CCParser::DisplayListener)
        mListener = listener;
!!!28358071.java!!!	parse(inout data : byte) : void
        CCData[] ccData = CCData.fromByteArray(data);

        for (int i = 0; i < ccData.length; i++) {
            if (DEBUG) {
                Log.d(TAG, ccData[i].toString());
            }

            if (handleCtrlCode(ccData[i])
                    || handleTabOffsets(ccData[i])
                    || handlePACCode(ccData[i])
                    || handleMidRowCode(ccData[i])) {
                continue;
            }

            handleDisplayableChars(ccData[i]);
        }
!!!28358455.java!!!	getMemory() : Cea608CCParser::CCMemory
        // get the CC memory to operate on for current mode
        switch (mMode) {
        case MODE_POP_ON:
            return mNonDisplay;
        case MODE_TEXT:
            // TODO(chz): support only caption mode for now,
            // in text mode, dump everything to text mem.
            return mTextMem;
        case MODE_PAINT_ON:
        case MODE_ROLL_UP:
            return mDisplay;
        default:
            Log.w(TAG, "unrecoginized mode: " + mMode);
        }
        return mDisplay;
!!!28358583.java!!!	handleDisplayableChars(inout ccData : Cea608CCParser::CCData) : boolean
        if (!ccData.isDisplayableChar()) {
            return false;
        }

        // Extended char includes 1 automatic backspace
        if (ccData.isExtendedChar()) {
            getMemory().bs();
        }

        getMemory().writeText(ccData.getDisplayText());

        if (mMode == MODE_PAINT_ON || mMode == MODE_ROLL_UP) {
            updateDisplay();
        }

        return true;
!!!28358711.java!!!	handleMidRowCode(inout ccData : Cea608CCParser::CCData) : boolean
        StyleCode m = ccData.getMidRow();
        if (m != null) {
            getMemory().writeMidRowCode(m);
            return true;
        }
        return false;
!!!28358839.java!!!	handlePACCode(inout ccData : Cea608CCParser::CCData) : boolean
        PAC pac = ccData.getPAC();

        if (pac != null) {
            if (mMode == MODE_ROLL_UP) {
                getMemory().moveBaselineTo(pac.getRow(), mRollUpSize);
            }
            getMemory().writePAC(pac);
            return true;
        }

        return false;
!!!28358967.java!!!	handleTabOffsets(inout ccData : Cea608CCParser::CCData) : boolean
        int tabs = ccData.getTabOffset();

        if (tabs > 0) {
            getMemory().tab(tabs);
            return true;
        }

        return false;
!!!28359095.java!!!	handleCtrlCode(inout ccData : Cea608CCParser::CCData) : boolean
        int ctrlCode = ccData.getCtrlCode();

        if (mPrevCtrlCode != INVALID && mPrevCtrlCode == ctrlCode) {
            // discard double ctrl codes (but if there's a 3rd one, we still take that)
            mPrevCtrlCode = INVALID;
            return true;
        }

        switch(ctrlCode) {
        case RCL:
            // select pop-on style
            mMode = MODE_POP_ON;
            break;
        case BS:
            getMemory().bs();
            break;
        case DER:
            getMemory().der();
            break;
        case RU2:
        case RU3:
        case RU4:
            mRollUpSize = (ctrlCode - 0x23);
            // erase memory if currently in other style
            if (mMode != MODE_ROLL_UP) {
                mDisplay.erase();
                mNonDisplay.erase();
            }
            // select roll-up style
            mMode = MODE_ROLL_UP;
            break;
        case FON:
            Log.i(TAG, "Flash On");
            break;
        case RDC:
            // select paint-on style
            mMode = MODE_PAINT_ON;
            break;
        case TR:
            mMode = MODE_TEXT;
            mTextMem.erase();
            break;
        case RTD:
            mMode = MODE_TEXT;
            break;
        case EDM:
            // erase display memory
            mDisplay.erase();
            updateDisplay();
            break;
        case CR:
            if (mMode == MODE_ROLL_UP) {
                getMemory().rollUp(mRollUpSize);
            } else {
                getMemory().cr();
            }
            if (mMode == MODE_ROLL_UP) {
                updateDisplay();
            }
            break;
        case ENM:
            // erase non-display memory
            mNonDisplay.erase();
            break;
        case EOC:
            // swap display/non-display memory
            swapMemory();
            // switch to pop-on style
            mMode = MODE_POP_ON;
            updateDisplay();
            break;
        case INVALID:
        default:
            mPrevCtrlCode = INVALID;
            return false;
        }

        mPrevCtrlCode = ctrlCode;

        // handled
        return true;
!!!28359223.java!!!	updateDisplay() : void
        if (mListener != null) {
            CaptionStyle captionStyle = mListener.getCaptionStyle();
            mListener.onDisplayChanged(mDisplay.getStyledText(captionStyle));
        }
!!!28359351.java!!!	swapMemory() : void
        CCMemory temp = mDisplay;
        mDisplay = mNonDisplay;
        mNonDisplay = temp;
