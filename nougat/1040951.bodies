class CCMemory
!!!28362551.java!!!	CCMemory()
            char[] blank = new char[MAX_COLS + 2];
            Arrays.fill(blank, TS);
            mBlankLine = new String(blank);
!!!28362679.java!!!	erase() : void
            // erase all lines
            for (int i = 0; i < mLines.length; i++) {
                mLines[i] = null;
            }
            mRow = MAX_ROWS;
            mCol = 1;
!!!28362807.java!!!	der() : void
            if (mLines[mRow] != null) {
                for (int i = 0; i < mCol; i++) {
                    if (mLines[mRow].charAt(i) != TS) {
                        for (int j = mCol; j < mLines[mRow].length(); j++) {
                            mLines[j].setCharAt(j, TS);
                        }
                        return;
                    }
                }
                mLines[mRow] = null;
            }
!!!28362935.java!!!	tab(in tabs : int) : void
            moveCursorByCol(tabs);
!!!28363063.java!!!	bs() : void
            moveCursorByCol(-1);
            if (mLines[mRow] != null) {
                mLines[mRow].setCharAt(mCol, TS);
                if (mCol == MAX_COLS - 1) {
                    // Spec recommendation:
                    // if cursor was at col 32, move cursor
                    // back to col 31 and erase both col 31&32
                    mLines[mRow].setCharAt(MAX_COLS, TS);
                }
            }
!!!28363191.java!!!	cr() : void
            moveCursorTo(mRow + 1, 1);
!!!28363319.java!!!	rollUp(in windowSize : int) : void
            int i;
            for (i = 0; i <= mRow - windowSize; i++) {
                mLines[i] = null;
            }
            int startRow = mRow - windowSize + 1;
            if (startRow < 1) {
                startRow = 1;
            }
            for (i = startRow; i < mRow; i++) {
                mLines[i] = mLines[i + 1];
            }
            for (i = mRow; i < mLines.length; i++) {
                // clear base row
                mLines[i] = null;
            }
            // default to col 1, in case PAC is not sent
            mCol = 1;
!!!28363447.java!!!	writeText(inout text : String) : void
            for (int i = 0; i < text.length(); i++) {
                getLineBuffer(mRow).setCharAt(mCol, text.charAt(i));
                moveCursorByCol(1);
            }
!!!28363575.java!!!	writeMidRowCode(inout m : Cea608CCParser::StyleCode) : void
            getLineBuffer(mRow).setMidRowAt(mCol, m);
            moveCursorByCol(1);
!!!28363703.java!!!	writePAC(inout pac : Cea608CCParser::PAC) : void
            if (pac.isIndentPAC()) {
                moveCursorTo(pac.getRow(), pac.getCol());
            } else {
                moveCursorTo(pac.getRow(), 1);
            }
            getLineBuffer(mRow).setPACAt(mCol, pac);
!!!28363831.java!!!	getStyledText(inout captionStyle : CaptioningManager::CaptionStyle) : SpannableStringBuilder
            ArrayList<SpannableStringBuilder> rows = new ArrayList<>(MAX_ROWS);
            for (int i = 1; i <= MAX_ROWS; i++) {
                rows.add(mLines[i] != null ?
                        mLines[i].getStyledText(captionStyle) : null);
            }
            return rows.toArray(new SpannableStringBuilder[MAX_ROWS]);
!!!28363959.java!!!	clamp(in x : int, in min : int, in max : int) : int
            return x < min ? min : (x > max ? max : x);
!!!28364087.java!!!	moveCursorTo(in row : int, in col : int) : void
            mRow = clamp(row, 1, MAX_ROWS);
            mCol = clamp(col, 1, MAX_COLS);
!!!28364215.java!!!	moveCursorToRow(in row : int) : void
            mRow = clamp(row, 1, MAX_ROWS);
!!!28364343.java!!!	moveCursorByCol(in col : int) : void
            mCol = clamp(mCol + col, 1, MAX_COLS);
!!!28364471.java!!!	moveBaselineTo(in baseRow : int, in windowSize : int) : void
            if (mRow == baseRow) {
                return;
            }
            int actualWindowSize = windowSize;
            if (baseRow < actualWindowSize) {
                actualWindowSize = baseRow;
            }
            if (mRow < actualWindowSize) {
                actualWindowSize = mRow;
            }

            int i;
            if (baseRow < mRow) {
                // copy from bottom to top row
                for (i = actualWindowSize - 1; i >= 0; i--) {
                    mLines[baseRow - i] = mLines[mRow - i];
                }
            } else {
                // copy from top to bottom row
                for (i = 0; i < actualWindowSize; i++) {
                    mLines[baseRow - i] = mLines[mRow - i];
                }
            }
            // clear rest of the rows
            for (i = 0; i <= baseRow - windowSize; i++) {
                mLines[i] = null;
            }
            for (i = baseRow + 1; i < mLines.length; i++) {
                mLines[i] = null;
            }
!!!28364599.java!!!	getLineBuffer(in row : int) : Cea608CCParser::CCLineBuilder
            if (mLines[row] == null) {
                mLines[row] = new CCLineBuilder(mBlankLine);
            }
            return mLines[row];
