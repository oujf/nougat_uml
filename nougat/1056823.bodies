class MediaMetadataRetriever
!!!28470327.java!!!	MediaMetadataRetriever()
        native_setup();
!!!28470455.java!!!	setDataSource(inout path : String) : void
        if (path == null) {
            throw new IllegalArgumentException();
        }

        try (FileInputStream is = new FileInputStream(path)) {
            FileDescriptor fd = is.getFD();
            setDataSource(fd, 0, 0x7ffffffffffffffL);
        } catch (FileNotFoundException fileEx) {
            throw new IllegalArgumentException();
        } catch (IOException ioEx) {
            throw new IllegalArgumentException();
        }
!!!28470583.java!!!	setDataSource(inout uri : String, inout headers : Map<String, String>) : void
        int i = 0;
        String[] keys = new String[headers.size()];
        String[] values = new String[headers.size()];
        for (Map.Entry<String, String> entry: headers.entrySet()) {
            keys[i] = entry.getKey();
            values[i] = entry.getValue();
            ++i;
        }

        _setDataSource(
                MediaHTTPService.createHttpServiceBinderIfNecessary(uri),
                uri,
                keys,
                values);
!!!28470967.java!!!	setDataSource(inout fd : FileDescriptor) : void
        // intentionally less than LONG_MAX
        setDataSource(fd, 0, 0x7ffffffffffffffL);
!!!28471095.java!!!	setDataSource(inout context : Context, inout uri : Uri) : void
        if (uri == null) {
            throw new IllegalArgumentException();
        }
        
        String scheme = uri.getScheme();
        if(scheme == null || scheme.equals("file")) {
            setDataSource(uri.getPath());
            return;
        }

        AssetFileDescriptor fd = null;
        try {
            ContentResolver resolver = context.getContentResolver();
            try {
                fd = resolver.openAssetFileDescriptor(uri, "r");
            } catch(FileNotFoundException e) {
                throw new IllegalArgumentException();
            }
            if (fd == null) {
                throw new IllegalArgumentException();
            }
            FileDescriptor descriptor = fd.getFileDescriptor();
            if (!descriptor.valid()) {
                throw new IllegalArgumentException();
            }
            // Note: using getDeclaredLength so that our behavior is the same
            // as previous versions when the content provider is returning
            // a full file.
            if (fd.getDeclaredLength() < 0) {
                setDataSource(descriptor);
            } else {
                setDataSource(descriptor, fd.getStartOffset(), fd.getDeclaredLength());
            }
            return;
        } catch (SecurityException ex) {
        } finally {
            try {
                if (fd != null) {
                    fd.close();
                }
            } catch(IOException ioEx) {
            }
        }
        setDataSource(uri.toString());
!!!28471223.java!!!	setDataSource(inout dataSource : MediaDataSource) : void
        _setDataSource(dataSource);
!!!28471607.java!!!	getFrameAtTime(in timeUs : long, in option : int) : Bitmap
        if (option < OPTION_PREVIOUS_SYNC ||
            option > OPTION_CLOSEST) {
            throw new IllegalArgumentException("Unsupported option: " + option);
        }

        return _getFrameAtTime(timeUs, option);
!!!28471735.java!!!	getFrameAtTime(in timeUs : long) : Bitmap
        return getFrameAtTime(timeUs, OPTION_CLOSEST_SYNC);
!!!28471863.java!!!	getFrameAtTime() : Bitmap
        return getFrameAtTime(-1, OPTION_CLOSEST_SYNC);
!!!28472119.java!!!	getEmbeddedPicture() : byte
        return getEmbeddedPicture(EMBEDDED_PICTURE_TYPE_ANY);
!!!28472887.java!!!	finalize() : void
        try {
            native_finalize();
        } finally {
            super.finalize();
        }
