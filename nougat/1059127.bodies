class MediaRecorder
!!!28495415.java!!!	MediaRecorder()

        Looper looper;
        if ((looper = Looper.myLooper()) != null) {
            mEventHandler = new EventHandler(this, looper);
        } else if ((looper = Looper.getMainLooper()) != null) {
            mEventHandler = new EventHandler(this, looper);
        } else {
            mEventHandler = null;
        }

        String packageName = ActivityThread.currentPackageName();
        /* Native setup requires a weak reference to our object.
         * It's easier to create it here than in C++.
         */
        native_setup(new WeakReference<MediaRecorder>(this), packageName,
                ActivityThread.currentOpPackageName());
!!!28495799.java!!!	setInputSurface(inout surface : Surface) : void
        if (!(surface instanceof MediaCodec.PersistentSurface)) {
            throw new IllegalArgumentException("not a PersistentSurface");
        }
        native_setInputSurface(surface);
!!!28496055.java!!!	setPreviewDisplay(inout sv : Surface) : void
        mSurface = sv;
!!!28496311.java!!!	isSystemOnlyAudioSource(in source : int) : boolean
        switch(source) {
        case AudioSource.DEFAULT:
        case AudioSource.MIC:
        case AudioSource.VOICE_UPLINK:
        case AudioSource.VOICE_DOWNLINK:
        case AudioSource.VOICE_CALL:
        case AudioSource.CAMCORDER:
        case AudioSource.VOICE_RECOGNITION:
        case AudioSource.VOICE_COMMUNICATION:
        //case REMOTE_SUBMIX:  considered "system" as it requires system permissions
        case AudioSource.UNPROCESSED:
            return false;
        default:
            return true;
        }
!!!28497079.java!!!	getAudioSourceMax() : int
        return AudioSource.UNPROCESSED;
!!!28497335.java!!!	setProfile(inout profile : CamcorderProfile) : void
        setOutputFormat(profile.fileFormat);
        setVideoFrameRate(profile.videoFrameRate);
        setVideoSize(profile.videoFrameWidth, profile.videoFrameHeight);
        setVideoEncodingBitRate(profile.videoBitRate);
        setVideoEncoder(profile.videoCodec);
        if (profile.quality >= CamcorderProfile.QUALITY_TIME_LAPSE_LOW &&
             profile.quality <= CamcorderProfile.QUALITY_TIME_LAPSE_QVGA) {
            // Nothing needs to be done. Call to setCaptureRate() enables
            // time lapse video recording.
        } else {
            setAudioEncodingBitRate(profile.audioBitRate);
            setAudioChannels(profile.audioChannels);
            setAudioSamplingRate(profile.audioSampleRate);
            setAudioEncoder(profile.audioCodec);
        }
!!!28497463.java!!!	setCaptureRate(in fps : double) : void
        // Make sure that time lapse is enabled when this method is called.
        setParameter("time-lapse-enable=1");
        setParameter("time-lapse-fps=" + fps);
!!!28497591.java!!!	setOrientationHint(in degrees : int) : void
        if (degrees != 0   &&
            degrees != 90  &&
            degrees != 180 &&
            degrees != 270) {
            throw new IllegalArgumentException("Unsupported angle: " + degrees);
        }
        setParameter("video-param-rotation-angle-degrees=" + degrees);
!!!28497719.java!!!	setLocation(in latitude : float, in longitude : float) : void
        int latitudex10000  = (int) (latitude * 10000 + 0.5);
        int longitudex10000 = (int) (longitude * 10000 + 0.5);

        if (latitudex10000 > 900000 || latitudex10000 < -900000) {
            String msg = "Latitude: " + latitude + " out of range.";
            throw new IllegalArgumentException(msg);
        }
        if (longitudex10000 > 1800000 || longitudex10000 < -1800000) {
            String msg = "Longitude: " + longitude + " out of range";
            throw new IllegalArgumentException(msg);
        }

        setParameter("param-geotag-latitude=" + latitudex10000);
        setParameter("param-geotag-longitude=" + longitudex10000);
!!!28498743.java!!!	setAudioSamplingRate(in samplingRate : int) : void
        if (samplingRate <= 0) {
            throw new IllegalArgumentException("Audio sampling rate is not positive");
        }
        setParameter("audio-param-sampling-rate=" + samplingRate);
!!!28498871.java!!!	setAudioChannels(in numChannels : int) : void
        if (numChannels <= 0) {
            throw new IllegalArgumentException("Number of channels is not positive");
        }
        setParameter("audio-param-number-of-channels=" + numChannels);
!!!28498999.java!!!	setAudioEncodingBitRate(in bitRate : int) : void
        if (bitRate <= 0) {
            throw new IllegalArgumentException("Audio encoding bit rate is not positive");
        }
        setParameter("audio-param-encoding-bitrate=" + bitRate);
!!!28499127.java!!!	setVideoEncodingBitRate(in bitRate : int) : void
        if (bitRate <= 0) {
            throw new IllegalArgumentException("Video encoding bit rate is not positive");
        }
        setParameter("video-param-encoding-bitrate=" + bitRate);
!!!28499255.java!!!	setAuxiliaryOutputFile(inout fd : FileDescriptor) : void
        Log.w(TAG, "setAuxiliaryOutputFile(FileDescriptor) is no longer supported.");
!!!28499383.java!!!	setAuxiliaryOutputFile(inout path : String) : void
        Log.w(TAG, "setAuxiliaryOutputFile(String) is no longer supported.");
!!!28499511.java!!!	setOutputFile(inout fd : FileDescriptor) : void
        mPath = null;
        mFd = fd;
!!!28499639.java!!!	setOutputFile(inout path : String) : void
        mFd = null;
        mPath = path;
!!!28500023.java!!!	prepare() : void
        if (mPath != null) {
            RandomAccessFile file = new RandomAccessFile(mPath, "rws");
            try {
                _setOutputFile(file.getFD(), 0, 0);
            } finally {
                file.close();
            }
        } else if (mFd != null) {
            _setOutputFile(mFd, 0, 0);
        } else {
            throw new IOException("No valid output file");
        }

        _prepare();
!!!28500663.java!!!	reset() : void
        native_reset();

        // make sure none of the listeners get called anymore
        mEventHandler.removeCallbacksAndMessages(null);
!!!28501175.java!!!	setOnErrorListener(inout l : MediaRecorder::OnErrorListener) : void
        mOnErrorListener = l;
!!!28501431.java!!!	setOnInfoListener(inout listener : MediaRecorder::OnInfoListener) : void
        mOnInfoListener = listener;
!!!28501815.java!!!	postEventFromNative(inout mediarecorder_ref : Object, in what : int, in arg1 : int, in arg2 : int, inout obj : Object) : void
        MediaRecorder mr = (MediaRecorder)((WeakReference)mediarecorder_ref).get();
        if (mr == null) {
            return;
        }

        if (mr.mEventHandler != null) {
            Message m = mr.mEventHandler.obtainMessage(what, arg1, arg2, obj);
            mr.mEventHandler.sendMessage(m);
        }
!!!28502583.java!!!	finalize() : void
 native_finalize();
