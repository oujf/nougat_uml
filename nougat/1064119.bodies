class MediaSessionManager
!!!28543159.java!!!	MediaSessionManager(inout context : Context)
        // Consider rewriting like DisplayManagerGlobal
        // Decide if we need context
        mContext = context;
        IBinder b = ServiceManager.getService(Context.MEDIA_SESSION_SERVICE);
        mService = ISessionManager.Stub.asInterface(b);
!!!28543287.java!!!	createSession(inout cbStub : MediaSession::CallbackStub, inout tag : String, in userId : int) : ISession
        return mService.createSession(mContext.getPackageName(), cbStub, tag, userId);
!!!28543415.java!!!	getActiveSessions(inout notificationListener : ComponentName) : MediaController
        return getActiveSessionsForUser(notificationListener, UserHandle.myUserId());
!!!28543543.java!!!	getActiveSessionsForUser(inout notificationListener : ComponentName, in userId : int) : MediaController
        ArrayList<MediaController> controllers = new ArrayList<MediaController>();
        try {
            List<IBinder> binders = mService.getSessions(notificationListener, userId);
            int size = binders.size();
            for (int i = 0; i < size; i++) {
                MediaController controller = new MediaController(mContext, ISessionController.Stub
                        .asInterface(binders.get(i)));
                controllers.add(controller);
            }
        } catch (RemoteException e) {
            Log.e(TAG, "Failed to get active sessions: ", e);
        }
        return controllers;
!!!28543671.java!!!	addOnActiveSessionsChangedListener(inout sessionListener : MediaSessionManager::OnActiveSessionsChangedListener, inout notificationListener : ComponentName) : void
        addOnActiveSessionsChangedListener(sessionListener, notificationListener, null);
!!!28543799.java!!!	addOnActiveSessionsChangedListener(inout sessionListener : MediaSessionManager::OnActiveSessionsChangedListener, inout notificationListener : ComponentName, inout handler : Handler) : void
        addOnActiveSessionsChangedListener(sessionListener, notificationListener,
                UserHandle.myUserId(), handler);
!!!28543927.java!!!	addOnActiveSessionsChangedListener(inout sessionListener : MediaSessionManager::OnActiveSessionsChangedListener, inout notificationListener : ComponentName, in userId : int, inout handler : Handler) : void
        if (sessionListener == null) {
            throw new IllegalArgumentException("listener may not be null");
        }
        if (handler == null) {
            handler = new Handler();
        }
        synchronized (mLock) {
            if (mListeners.get(sessionListener) != null) {
                Log.w(TAG, "Attempted to add session listener twice, ignoring.");
                return;
            }
            SessionsChangedWrapper wrapper = new SessionsChangedWrapper(mContext, sessionListener,
                    handler);
            try {
                mService.addSessionsListener(wrapper.mStub, notificationListener, userId);
                mListeners.put(sessionListener, wrapper);
            } catch (RemoteException e) {
                Log.e(TAG, "Error in addOnActiveSessionsChangedListener.", e);
            }
        }
!!!28544055.java!!!	removeOnActiveSessionsChangedListener(inout listener : MediaSessionManager::OnActiveSessionsChangedListener) : void
        if (listener == null) {
            throw new IllegalArgumentException("listener may not be null");
        }
        synchronized (mLock) {
            SessionsChangedWrapper wrapper = mListeners.remove(listener);
            if (wrapper != null) {
                try {
                    mService.removeSessionsListener(wrapper.mStub);
                } catch (RemoteException e) {
                    Log.e(TAG, "Error in removeOnActiveSessionsChangedListener.", e);
                } finally {
                    wrapper.release();
                }
            }
        }
!!!28544183.java!!!	setRemoteVolumeController(inout rvc : IRemoteVolumeController) : void
        try {
            mService.setRemoteVolumeController(rvc);
        } catch (RemoteException e) {
            Log.e(TAG, "Error in setRemoteVolumeController.", e);
        }
!!!28544311.java!!!	dispatchMediaKeyEvent(inout keyEvent : KeyEvent) : void
        dispatchMediaKeyEvent(keyEvent, false);
!!!28544439.java!!!	dispatchMediaKeyEvent(inout keyEvent : KeyEvent, inout needWakeLock : boolean) : void
        try {
            mService.dispatchMediaKeyEvent(keyEvent, needWakeLock);
        } catch (RemoteException e) {
            Log.e(TAG, "Failed to send key event.", e);
        }
!!!28544567.java!!!	dispatchAdjustVolume(in suggestedStream : int, in direction : int, in flags : int) : void
        try {
            mService.dispatchAdjustVolume(suggestedStream, direction, flags);
        } catch (RemoteException e) {
            Log.e(TAG, "Failed to send adjust volume.", e);
        }
!!!28544695.java!!!	isGlobalPriorityActive() : boolean
        try {
            return mService.isGlobalPriorityActive();
        } catch (RemoteException e) {
            Log.e(TAG, "Failed to check if the global priority is active.", e);
        }
        return false;
