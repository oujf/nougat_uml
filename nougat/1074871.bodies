class Virtualizer
!!!28607799.java!!!	Virtualizer(in priority : int, in audioSession : int)
        super(EFFECT_TYPE_VIRTUALIZER, EFFECT_TYPE_NULL, priority, audioSession);

        if (audioSession == 0) {
            Log.w(TAG, "WARNING: attaching a Virtualizer to global output mix is deprecated!");
        }

        int[] value = new int[1];
        checkStatus(getParameter(PARAM_STRENGTH_SUPPORTED, value));
        mStrengthSupported = (value[0] != 0);
!!!28607927.java!!!	getStrengthSupported() : boolean
       return mStrengthSupported;
!!!28608055.java!!!	setStrength(in strength : short) : void
        checkStatus(setParameter(PARAM_STRENGTH, strength));
!!!28608183.java!!!	getRoundedStrength() : short
        short[] value = new short[1];
        checkStatus(getParameter(PARAM_STRENGTH, value));
        return value[0];
!!!28608311.java!!!	getAnglesInt(in inputChannelMask : int, in deviceType : int, inout angles : int) : boolean
        // parameter check
        if (inputChannelMask == AudioFormat.CHANNEL_INVALID) {
            throw (new IllegalArgumentException(
                    "Virtualizer: illegal CHANNEL_INVALID channel mask"));
        }
        int channelMask = inputChannelMask == AudioFormat.CHANNEL_OUT_DEFAULT ?
                AudioFormat.CHANNEL_OUT_STEREO : inputChannelMask;
        int nbChannels = AudioFormat.channelCountFromOutChannelMask(channelMask);
        if ((angles != null) && (angles.length < (nbChannels * 3))) {
            Log.e(TAG, "Size of array for angles cannot accomodate number of channels in mask ("
                    + nbChannels + ")");
            throw (new IllegalArgumentException(
                    "Virtualizer: array for channel / angle pairs is too small: is " + angles.length
                    + ", should be " + (nbChannels * 3)));
        }

        ByteBuffer paramsConverter = ByteBuffer.allocate(3 /* param + mask + device*/ * 4);
        paramsConverter.order(ByteOrder.nativeOrder());
        paramsConverter.putInt(PARAM_VIRTUAL_SPEAKER_ANGLES);
        // convert channel mask to internal native representation
        paramsConverter.putInt(AudioFormat.convertChannelOutMaskToNativeMask(channelMask));
        // convert Java device type to internal representation
        paramsConverter.putInt(AudioDeviceInfo.convertDeviceTypeToInternalDevice(deviceType));
        // allocate an array to store the results
        byte[] result = new byte[nbChannels * 4/*int to byte*/ * 3/*for mask, azimuth, elevation*/];

        // call into the effect framework
        int status = getParameter(paramsConverter.array(), result);
        if (DEBUG) {
            Log.v(TAG, "getAngles(0x" + Integer.toHexString(inputChannelMask) + ", 0x"
                    + Integer.toHexString(deviceType) + ") returns " + status);
        }

        if (status >= 0) {
            if (angles != null) {
                // convert and copy the results
                ByteBuffer resultConverter = ByteBuffer.wrap(result);
                resultConverter.order(ByteOrder.nativeOrder());
                for (int i = 0 ; i < nbChannels ; i++) {
                    // write the channel mask
                    angles[3 * i] = AudioFormat.convertNativeChannelMaskToOutMask(
                            resultConverter.getInt((i * 4 * 3)));
                    // write the azimuth
                    angles[3 * i + 1] = resultConverter.getInt(i * 4 * 3 + 4);
                    // write the elevation
                    angles[3 * i + 2] = resultConverter.getInt(i * 4 * 3 + 8);
                    if (DEBUG) {
                        Log.v(TAG, "channel 0x" + Integer.toHexString(angles[3*i]).toUpperCase()
                                + " at az=" + angles[3*i+1] + "deg"
                                + " elev="  + angles[3*i+2] + "deg");
                    }
                }
            }
            return true;
        } else if (status == AudioEffect.ERROR_BAD_VALUE) {
            // a BAD_VALUE return from getParameter indicates the configuration is not supported
            // don't throw an exception, just return false
            return false;
        } else {
            // something wrong may have happened
            checkStatus(status);
        }
        // unexpected virtualizer behavior
        Log.e(TAG, "unexpected status code " + status
                + " after getParameter(PARAM_VIRTUAL_SPEAKER_ANGLES)");
        return false;
!!!28608439.java!!!	getDeviceForModeQuery(in virtualizationMode : int) : int
        switch (virtualizationMode) {
            case VIRTUALIZATION_MODE_BINAURAL:
                return AudioDeviceInfo.TYPE_WIRED_HEADPHONES;
            case VIRTUALIZATION_MODE_TRANSAURAL:
                return AudioDeviceInfo.TYPE_BUILTIN_SPEAKER;
            default:
                throw (new IllegalArgumentException(
                        "Virtualizer: illegal virtualization mode " + virtualizationMode));
        }
!!!28608567.java!!!	getDeviceForModeForce(in virtualizationMode : int) : int
        if (virtualizationMode == VIRTUALIZATION_MODE_AUTO) {
            return AudioDeviceInfo.TYPE_UNKNOWN;
        } else {
            return getDeviceForModeQuery(virtualizationMode);
        }
!!!28608695.java!!!	deviceToMode(in deviceType : int) : int
        switch (deviceType) {
            case AudioDeviceInfo.TYPE_WIRED_HEADSET:
            case AudioDeviceInfo.TYPE_WIRED_HEADPHONES:
            case AudioDeviceInfo.TYPE_BLUETOOTH_SCO:
            case AudioDeviceInfo.TYPE_BUILTIN_EARPIECE:
                return VIRTUALIZATION_MODE_BINAURAL;
            case AudioDeviceInfo.TYPE_BUILTIN_SPEAKER:
            case AudioDeviceInfo.TYPE_LINE_ANALOG:
            case AudioDeviceInfo.TYPE_LINE_DIGITAL:
            case AudioDeviceInfo.TYPE_BLUETOOTH_A2DP:
            case AudioDeviceInfo.TYPE_HDMI:
            case AudioDeviceInfo.TYPE_HDMI_ARC:
            case AudioDeviceInfo.TYPE_USB_DEVICE:
            case AudioDeviceInfo.TYPE_USB_ACCESSORY:
            case AudioDeviceInfo.TYPE_DOCK:
            case AudioDeviceInfo.TYPE_FM:
            case AudioDeviceInfo.TYPE_AUX_LINE:
                return VIRTUALIZATION_MODE_TRANSAURAL;
            case AudioDeviceInfo.TYPE_UNKNOWN:
            default:
                return VIRTUALIZATION_MODE_OFF;
        }
!!!28608823.java!!!	canVirtualize(in inputChannelMask : int, in virtualizationMode : int) : boolean
        return getAnglesInt(inputChannelMask, getDeviceForModeQuery(virtualizationMode), null);
!!!28608951.java!!!	getSpeakerAngles(in inputChannelMask : int, in virtualizationMode : int, inout angles : int) : boolean
        if (angles == null) {
            throw (new IllegalArgumentException(
                    "Virtualizer: illegal null channel / angle array"));
        }

        return getAnglesInt(inputChannelMask, getDeviceForModeQuery(virtualizationMode), angles);
!!!28609079.java!!!	forceVirtualizationMode(in virtualizationMode : int) : boolean
        // convert Java device type to internal representation
        int deviceType = getDeviceForModeForce(virtualizationMode);
        int internalDevice = AudioDeviceInfo.convertDeviceTypeToInternalDevice(deviceType);

        int status = setParameter(PARAM_FORCE_VIRTUALIZATION_MODE, internalDevice);

        if (status >= 0) {
            return true;
        } else if (status == AudioEffect.ERROR_BAD_VALUE) {
            // a BAD_VALUE return from setParameter indicates the mode can't be forced
            // don't throw an exception, just return false
            return false;
        } else {
            // something wrong may have happened
            checkStatus(status);
        }
        // unexpected virtualizer behavior
        Log.e(TAG, "unexpected status code " + status
                + " after setParameter(PARAM_FORCE_VIRTUALIZATION_MODE)");
        return false;
!!!28609207.java!!!	getVirtualizationMode() : int
        int[] value = new int[1];
        int status = getParameter(PARAM_VIRTUALIZATION_MODE, value);
        if (status >= 0) {
            return deviceToMode(AudioDeviceInfo.convertInternalDeviceToDeviceType(value[0]));
        } else if (status == AudioEffect.ERROR_BAD_VALUE) {
            return VIRTUALIZATION_MODE_OFF;
        } else {
            // something wrong may have happened
            checkStatus(status);
        }
        // unexpected virtualizer behavior
        Log.e(TAG, "unexpected status code " + status
                + " after getParameter(PARAM_VIRTUALIZATION_MODE)");
        return VIRTUALIZATION_MODE_OFF;
