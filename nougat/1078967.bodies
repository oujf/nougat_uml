class MidiDevice
!!!28633527.java!!!	MidiDevice(inout deviceInfo : MidiDeviceInfo, inout server : IMidiDeviceServer, inout midiManager : IMidiManager, inout clientToken : IBinder, inout deviceToken : IBinder)
        mDeviceInfo = deviceInfo;
        mDeviceServer = server;
        mMidiManager = midiManager;
        mClientToken = clientToken;
        mDeviceToken = deviceToken;
        mGuard.open("close");
!!!28633655.java!!!	getInfo() : MidiDeviceInfo
        return mDeviceInfo;
!!!28633783.java!!!	openInputPort(in portNumber : int) : MidiInputPort
        if (mIsDeviceClosed) {
            return null;
        }
        try {
            IBinder token = new Binder();
            ParcelFileDescriptor pfd = mDeviceServer.openInputPort(token, portNumber);
            if (pfd == null) {
                return null;
            }
            return new MidiInputPort(mDeviceServer, token, pfd, portNumber);
        } catch (RemoteException e) {
            Log.e(TAG, "RemoteException in openInputPort");
            return null;
        }
!!!28633911.java!!!	openOutputPort(in portNumber : int) : MidiOutputPort
        if (mIsDeviceClosed) {
            return null;
        }
        try {
            IBinder token = new Binder();
            ParcelFileDescriptor pfd = mDeviceServer.openOutputPort(token, portNumber);
            if (pfd == null) {
                return null;
            }
            return new MidiOutputPort(mDeviceServer, token, pfd, portNumber);
        } catch (RemoteException e) {
            Log.e(TAG, "RemoteException in openOutputPort");
            return null;
        }
!!!28634039.java!!!	connectPorts(inout inputPort : MidiInputPort, in outputPortNumber : int) : MidiDevice::MidiConnection
        if (outputPortNumber < 0 || outputPortNumber >= mDeviceInfo.getOutputPortCount()) {
            throw new IllegalArgumentException("outputPortNumber out of range");
        }
        if (mIsDeviceClosed) {
            return null;
        }

        ParcelFileDescriptor pfd = inputPort.claimFileDescriptor();
        if (pfd == null) {
            return null;
        }
        try {
            IBinder token = new Binder();
            int calleePid = mDeviceServer.connectPorts(token, pfd, outputPortNumber);
            // If the service is a different Process then it will duplicate the pfd
            // and we can safely close this one.
            // But if the service is in the same Process then closing the pfd will
            // kill the connection. So don't do that.
            if (calleePid != Process.myPid()) {
                // close our copy of the file descriptor
                IoUtils.closeQuietly(pfd);
            }

            return new MidiConnection(token, inputPort);
        } catch (RemoteException e) {
            Log.e(TAG, "RemoteException in connectPorts");
            return null;
        }
!!!28634167.java!!!	close() : void
        synchronized (mGuard) {
            if (!mIsDeviceClosed) {
                mGuard.close();
                mIsDeviceClosed = true;
                try {
                    mMidiManager.closeDevice(mClientToken, mDeviceToken);
                } catch (RemoteException e) {
                    Log.e(TAG, "RemoteException in closeDevice");
                }
            }
        }
!!!28634295.java!!!	finalize() : void
        try {
            mGuard.warnIfOpen();
            close();
        } finally {
            super.finalize();
        }
!!!28634423.java!!!	toString() : String
        return ("MidiDevice: " + mDeviceInfo.toString());
