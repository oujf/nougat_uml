class RecordingSession
!!!28726071.java!!!	RecordingSession(inout context : Context)
            mHandler = new Handler(context.getMainLooper());
!!!28726199.java!!!	notifyTuned(inout channelUri : Uri) : void
            executeOrPostRunnableOnMainThread(new Runnable() {
                @MainThread
                @Override
                public void run() {
                    try {
                        if (DEBUG) Log.d(TAG, "notifyTuned");
                        if (mSessionCallback != null) {
                            mSessionCallback.onTuned(channelUri);
                        }
                    } catch (RemoteException e) {
                        Log.w(TAG, "error in notifyTuned", e);
                    }
                }
            });
!!!28726327.java!!!	notifyRecordingStopped(in recordedProgramUri : Uri) : void
            executeOrPostRunnableOnMainThread(new Runnable() {
                @MainThread
                @Override
                public void run() {
                    try {
                        if (DEBUG) Log.d(TAG, "notifyRecordingStopped");
                        if (mSessionCallback != null) {
                            mSessionCallback.onRecordingStopped(recordedProgramUri);
                        }
                    } catch (RemoteException e) {
                        Log.w(TAG, "error in notifyRecordingStopped", e);
                    }
                }
            });
!!!28726455.java!!!	notifyError(in error : int) : void
            if (error < TvInputManager.RECORDING_ERROR_START
                    || error > TvInputManager.RECORDING_ERROR_END) {
                Log.w(TAG, "notifyError - invalid error code (" + error
                        + ") is changed to RECORDING_ERROR_UNKNOWN.");
                error = TvInputManager.RECORDING_ERROR_UNKNOWN;
            }
            final int validError = error;
            executeOrPostRunnableOnMainThread(new Runnable() {
                @MainThread
                @Override
                public void run() {
                    try {
                        if (DEBUG) Log.d(TAG, "notifyError");
                        if (mSessionCallback != null) {
                            mSessionCallback.onError(validError);
                        }
                    } catch (RemoteException e) {
                        Log.w(TAG, "error in notifyError", e);
                    }
                }
            });
!!!28726583.java!!!	notifySessionEvent(in eventType : String, in eventArgs : Bundle) : void
            Preconditions.checkNotNull(eventType);
            executeOrPostRunnableOnMainThread(new Runnable() {
                @MainThread
                @Override
                public void run() {
                    try {
                        if (DEBUG) Log.d(TAG, "notifySessionEvent(" + eventType + ")");
                        if (mSessionCallback != null) {
                            mSessionCallback.onSessionEvent(eventType, eventArgs);
                        }
                    } catch (RemoteException e) {
                        Log.w(TAG, "error in sending event (event=" + eventType + ")", e);
                    }
                }
            });
!!!28726839.java!!!	onTune(inout channelUri : Uri, inout params : Bundle) : void
            onTune(channelUri);
!!!28727479.java!!!	tune(inout channelUri : Uri, inout params : Bundle) : void
            onTune(channelUri, params);
!!!28727607.java!!!	release() : void
            onRelease();
!!!28727735.java!!!	startRecording(inout programUri : Uri) : void
            onStartRecording(programUri);
!!!28727863.java!!!	stopRecording() : void
            onStopRecording();
!!!28727991.java!!!	appPrivateCommand(inout action : String, inout data : Bundle) : void
            onAppPrivateCommand(action, data);
!!!28728119.java!!!	initialize(inout callback : ITvInputSessionCallback) : void
            synchronized(mLock) {
                mSessionCallback = callback;
                for (Runnable runnable : mPendingActions) {
                    runnable.run();
                }
                mPendingActions.clear();
            }
!!!28728247.java!!!	executeOrPostRunnableOnMainThread(inout action : Runnable) : void
            synchronized(mLock) {
                if (mSessionCallback == null) {
                    // The session is not initialized yet.
                    mPendingActions.add(action);
                } else {
                    if (mHandler.getLooper().isCurrentThread()) {
                        action.run();
                    } else {
                        // Posts the runnable if this is not called from the main thread
                        mHandler.post(action);
                    }
                }
            }
