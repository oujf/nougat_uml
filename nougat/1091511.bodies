class TvView
!!!28738487.java!!!	TvView(inout context : Context)
        this(context, null, 0);
!!!28738615.java!!!	TvView(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, 0);
!!!28738743.java!!!	TvView(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int)
        super(context, attrs, defStyleAttr);
        mAttrs = attrs;
        mDefStyleAttr = defStyleAttr;
        resetSurfaceView();
        mTvInputManager = (TvInputManager) getContext().getSystemService(Context.TV_INPUT_SERVICE);
!!!28738871.java!!!	setCallback(inout callback : TvView::TvInputCallback) : void
        mCallback = callback;
!!!28738999.java!!!	setMain() : void
        synchronized (sMainTvViewLock) {
            sMainTvView = new WeakReference<>(this);
            if (hasWindowFocus() && mSession != null) {
                mSession.setMain();
            }
        }
!!!28739127.java!!!	setZOrderMediaOverlay(inout isMediaOverlay : boolean) : void
        if (isMediaOverlay) {
            mWindowZOrder = ZORDER_MEDIA_OVERLAY;
            removeSessionOverlayView();
        } else {
            mWindowZOrder = ZORDER_MEDIA;
            createSessionOverlayView();
        }
        if (mSurfaceView != null) {
            // ZOrderOnTop(false) removes WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM
            // from WindowLayoutParam as well as changes window type.
            mSurfaceView.setZOrderOnTop(false);
            mSurfaceView.setZOrderMediaOverlay(isMediaOverlay);
        }
!!!28739255.java!!!	setZOrderOnTop(inout onTop : boolean) : void
        if (onTop) {
            mWindowZOrder = ZORDER_ON_TOP;
            removeSessionOverlayView();
        } else {
            mWindowZOrder = ZORDER_MEDIA;
            createSessionOverlayView();
        }
        if (mSurfaceView != null) {
            mSurfaceView.setZOrderMediaOverlay(false);
            mSurfaceView.setZOrderOnTop(onTop);
        }
!!!28739383.java!!!	setStreamVolume(in volume : float) : void
        if (DEBUG) Log.d(TAG, "setStreamVolume(" + volume + ")");
        mStreamVolume = volume;
        if (mSession == null) {
            // Volume will be set once the connection has been made.
            return;
        }
        mSession.setStreamVolume(volume);
!!!28739511.java!!!	tune(inout inputId : String, inout channelUri : Uri) : void
        tune(inputId, channelUri, null);
!!!28739639.java!!!	tune(inout inputId : String, inout channelUri : Uri, inout params : Bundle) : void
        if (DEBUG) Log.d(TAG, "tune(" + channelUri + ")");
        if (TextUtils.isEmpty(inputId)) {
            throw new IllegalArgumentException("inputId cannot be null or an empty string");
        }
        synchronized (sMainTvViewLock) {
            if (sMainTvView.get() == null) {
                sMainTvView = new WeakReference<>(this);
            }
        }
        if (mSessionCallback != null && TextUtils.equals(mSessionCallback.mInputId, inputId)) {
            if (mSession != null) {
                mSession.tune(channelUri, params);
            } else {
                // createSession() was called but the actual session for the given inputId has not
                // yet been created. Just replace the existing tuning params in the callback with
                // the new ones and tune later in onSessionCreated(). It is not necessary to create
                // a new callback because this tuning request was made on the same inputId.
                mSessionCallback.mChannelUri = channelUri;
                mSessionCallback.mTuneParams = params;
            }
        } else {
            resetInternal();
            // In case createSession() is called multiple times across different inputId's before
            // any session is created (e.g. when quickly tuning to a channel from input A and then
            // to another channel from input B), only the callback for the last createSession()
            // should be invoked. (The previous callbacks are simply ignored.) To do that, we create
            // a new callback each time and keep mSessionCallback pointing to the last one. If
            // MySessionCallback.this is different from mSessionCallback, we know that this callback
            // is obsolete and should ignore it.
            mSessionCallback = new MySessionCallback(inputId, channelUri, params);
            if (mTvInputManager != null) {
                mTvInputManager.createSession(inputId, mSessionCallback, mHandler);
            }
        }
!!!28739767.java!!!	reset() : void
        if (DEBUG) Log.d(TAG, "reset()");
        synchronized (sMainTvViewLock) {
            if (this == sMainTvView.get()) {
                sMainTvView = NULL_TV_VIEW;
            }
        }
        resetInternal();
!!!28739895.java!!!	resetInternal() : void
        mSessionCallback = null;
        mPendingAppPrivateCommands.clear();
        if (mSession != null) {
            setSessionSurface(null);
            removeSessionOverlayView();
            mUseRequestedSurfaceLayout = false;
            mSession.release();
            mSession = null;
            resetSurfaceView();
        }
!!!28740023.java!!!	requestUnblockContent(inout unblockedRating : TvContentRating) : void
        unblockContent(unblockedRating);
!!!28740151.java!!!	unblockContent(inout unblockedRating : TvContentRating) : void
        if (mSession != null) {
            mSession.unblockContent(unblockedRating);
        }
!!!28740279.java!!!	setCaptionEnabled(inout enabled : boolean) : void
        if (DEBUG) Log.d(TAG, "setCaptionEnabled(" + enabled + ")");
        mCaptionEnabled = enabled;
        if (mSession != null) {
            mSession.setCaptionEnabled(enabled);
        }
!!!28740407.java!!!	selectTrack(in type : int, inout trackId : String) : void
        if (mSession != null) {
            mSession.selectTrack(type, trackId);
        }
!!!28740535.java!!!	getTracks(in type : int) : TvTrackInfo
        if (mSession == null) {
            return null;
        }
        return mSession.getTracks(type);
!!!28740663.java!!!	getSelectedTrack(in type : int) : String
        if (mSession == null) {
            return null;
        }
        return mSession.getSelectedTrack(type);
!!!28740791.java!!!	timeShiftPlay(inout inputId : String, inout recordedProgramUri : Uri) : void
        if (DEBUG) Log.d(TAG, "timeShiftPlay(" + recordedProgramUri + ")");
        if (TextUtils.isEmpty(inputId)) {
            throw new IllegalArgumentException("inputId cannot be null or an empty string");
        }
        synchronized (sMainTvViewLock) {
            if (sMainTvView.get() == null) {
                sMainTvView = new WeakReference<>(this);
            }
        }
        if (mSessionCallback != null && TextUtils.equals(mSessionCallback.mInputId, inputId)) {
            if (mSession != null) {
                mSession.timeShiftPlay(recordedProgramUri);
            } else {
                mSessionCallback.mRecordedProgramUri = recordedProgramUri;
            }
        } else {
            resetInternal();
            mSessionCallback = new MySessionCallback(inputId, recordedProgramUri);
            if (mTvInputManager != null) {
                mTvInputManager.createSession(inputId, mSessionCallback, mHandler);
            }
        }
!!!28740919.java!!!	timeShiftPause() : void
        if (mSession != null) {
            mSession.timeShiftPause();
        }
!!!28741047.java!!!	timeShiftResume() : void
        if (mSession != null) {
            mSession.timeShiftResume();
        }
!!!28741175.java!!!	timeShiftSeekTo(in timeMs : long) : void
        if (mSession != null) {
            mSession.timeShiftSeekTo(timeMs);
        }
!!!28741303.java!!!	timeShiftSetPlaybackParams(inout params : PlaybackParams) : void
        if (mSession != null) {
            mSession.timeShiftSetPlaybackParams(params);
        }
!!!28741431.java!!!	setTimeShiftPositionCallback(inout callback : TvView::TimeShiftPositionCallback) : void
        mTimeShiftPositionCallback = callback;
        ensurePositionTracking();
!!!28741559.java!!!	ensurePositionTracking() : void
        if (mSession == null) {
            return;
        }
        mSession.timeShiftEnablePositionTracking(mTimeShiftPositionCallback != null);
!!!28741687.java!!!	sendAppPrivateCommand(inout action : String, inout data : Bundle) : void
        if (TextUtils.isEmpty(action)) {
            throw new IllegalArgumentException("action cannot be null or an empty string");
        }
        if (mSession != null) {
            mSession.sendAppPrivateCommand(action, data);
        } else {
            Log.w(TAG, "sendAppPrivateCommand - session not yet created (action \"" + action
                    + "\" pending)");
            mPendingAppPrivateCommands.add(Pair.create(action, data));
        }
!!!28741815.java!!!	dispatchUnhandledInputEvent(inout event : InputEvent) : boolean
        if (mOnUnhandledInputEventListener != null) {
            if (mOnUnhandledInputEventListener.onUnhandledInputEvent(event)) {
                return true;
            }
        }
        return onUnhandledInputEvent(event);
!!!28741943.java!!!	onUnhandledInputEvent(inout event : InputEvent) : boolean
        return false;
!!!28742071.java!!!	setOnUnhandledInputEventListener(inout listener : TvView::OnUnhandledInputEventListener) : void
        mOnUnhandledInputEventListener = listener;
!!!28742199.java!!!	dispatchKeyEvent(inout event : KeyEvent) : boolean
        if (super.dispatchKeyEvent(event)) {
            return true;
        }
        if (DEBUG) Log.d(TAG, "dispatchKeyEvent(" + event + ")");
        if (mSession == null) {
            return false;
        }
        InputEvent copiedEvent = event.copy();
        int ret = mSession.dispatchInputEvent(copiedEvent, copiedEvent, mFinishedInputEventCallback,
                mHandler);
        return ret != Session.DISPATCH_NOT_HANDLED;
!!!28742327.java!!!	dispatchTouchEvent(inout event : MotionEvent) : boolean
        if (super.dispatchTouchEvent(event)) {
            return true;
        }
        if (DEBUG) Log.d(TAG, "dispatchTouchEvent(" + event + ")");
        if (mSession == null) {
            return false;
        }
        InputEvent copiedEvent = event.copy();
        int ret = mSession.dispatchInputEvent(copiedEvent, copiedEvent, mFinishedInputEventCallback,
                mHandler);
        return ret != Session.DISPATCH_NOT_HANDLED;
!!!28742455.java!!!	dispatchTrackballEvent(inout event : MotionEvent) : boolean
        if (super.dispatchTrackballEvent(event)) {
            return true;
        }
        if (DEBUG) Log.d(TAG, "dispatchTrackballEvent(" + event + ")");
        if (mSession == null) {
            return false;
        }
        InputEvent copiedEvent = event.copy();
        int ret = mSession.dispatchInputEvent(copiedEvent, copiedEvent, mFinishedInputEventCallback,
                mHandler);
        return ret != Session.DISPATCH_NOT_HANDLED;
!!!28742583.java!!!	dispatchGenericMotionEvent(inout event : MotionEvent) : boolean
        if (super.dispatchGenericMotionEvent(event)) {
            return true;
        }
        if (DEBUG) Log.d(TAG, "dispatchGenericMotionEvent(" + event + ")");
        if (mSession == null) {
            return false;
        }
        InputEvent copiedEvent = event.copy();
        int ret = mSession.dispatchInputEvent(copiedEvent, copiedEvent, mFinishedInputEventCallback,
                mHandler);
        return ret != Session.DISPATCH_NOT_HANDLED;
!!!28742711.java!!!	dispatchWindowFocusChanged(inout hasFocus : boolean) : void
        super.dispatchWindowFocusChanged(hasFocus);
        // Other app may have shown its own main TvView.
        // Set main again to regain main session.
        synchronized (sMainTvViewLock) {
            if (hasFocus && this == sMainTvView.get() && mSession != null) {
                mSession.setMain();
            }
        }
!!!28742839.java!!!	onAttachedToWindow() : void
        super.onAttachedToWindow();
        createSessionOverlayView();
!!!28742967.java!!!	onDetachedFromWindow() : void
        removeSessionOverlayView();
        super.onDetachedFromWindow();
!!!28743095.java!!!	onLayout(inout changed : boolean, in left : int, in top : int, in right : int, in bottom : int) : void
        if (DEBUG) {
            Log.d(TAG, "onLayout (left=" + left + ", top=" + top + ", right=" + right
                    + ", bottom=" + bottom + ",)");
        }
        if (mUseRequestedSurfaceLayout) {
            mSurfaceView.layout(mSurfaceViewLeft, mSurfaceViewTop, mSurfaceViewRight,
                    mSurfaceViewBottom);
        } else {
            mSurfaceView.layout(0, 0, right - left, bottom - top);
        }
!!!28743223.java!!!	onMeasure(in widthMeasureSpec : int, in heightMeasureSpec : int) : void
        mSurfaceView.measure(widthMeasureSpec, heightMeasureSpec);
        int width = mSurfaceView.getMeasuredWidth();
        int height = mSurfaceView.getMeasuredHeight();
        int childState = mSurfaceView.getMeasuredState();
        setMeasuredDimension(resolveSizeAndState(width, widthMeasureSpec, childState),
                resolveSizeAndState(height, heightMeasureSpec,
                        childState << MEASURED_HEIGHT_STATE_SHIFT));
!!!28743351.java!!!	gatherTransparentRegion(inout region : Region) : boolean
        if (mWindowZOrder != ZORDER_ON_TOP) {
            if (region != null) {
                int width = getWidth();
                int height = getHeight();
                if (width > 0 && height > 0) {
                    int location[] = new int[2];
                    getLocationInWindow(location);
                    int left = location[0];
                    int top = location[1];
                    region.op(left, top, left + width, top + height, Region.Op.UNION);
                }
            }
        }
        return super.gatherTransparentRegion(region);
!!!28743479.java!!!	draw(inout canvas : Canvas) : void
        if (mWindowZOrder != ZORDER_ON_TOP) {
            // Punch a hole so that the underlying overlay view and surface can be shown.
            canvas.drawColor(0, PorterDuff.Mode.CLEAR);
        }
        super.draw(canvas);
!!!28743607.java!!!	dispatchDraw(inout canvas : Canvas) : void
        if (mWindowZOrder != ZORDER_ON_TOP) {
            // Punch a hole so that the underlying overlay view and surface can be shown.
            canvas.drawColor(0, PorterDuff.Mode.CLEAR);
        }
        super.dispatchDraw(canvas);
!!!28743735.java!!!	onVisibilityChanged(inout changedView : View, in visibility : int) : void
        super.onVisibilityChanged(changedView, visibility);
        mSurfaceView.setVisibility(visibility);
        if (visibility == View.VISIBLE) {
            createSessionOverlayView();
        } else {
            removeSessionOverlayView();
        }
!!!28743863.java!!!	resetSurfaceView() : void
        if (mSurfaceView != null) {
            mSurfaceView.getHolder().removeCallback(mSurfaceHolderCallback);
            removeView(mSurfaceView);
        }
        mSurface = null;
        mSurfaceView = new SurfaceView(getContext(), mAttrs, mDefStyleAttr) {
            @Override
            protected void updateWindow(boolean force, boolean redrawNeeded) {
                super.updateWindow(force, redrawNeeded);
                relayoutSessionOverlayView();
            }};
        // The surface view's content should be treated as secure all the time.
        mSurfaceView.setSecure(true);
        mSurfaceView.getHolder().addCallback(mSurfaceHolderCallback);
        if (mWindowZOrder == ZORDER_MEDIA_OVERLAY) {
            mSurfaceView.setZOrderMediaOverlay(true);
        } else if (mWindowZOrder == ZORDER_ON_TOP) {
            mSurfaceView.setZOrderOnTop(true);
        }
        addView(mSurfaceView);
!!!28743991.java!!!	setSessionSurface(inout surface : Surface) : void
        if (mSession == null) {
            return;
        }
        mSession.setSurface(surface);
!!!28744119.java!!!	dispatchSurfaceChanged(in format : int, in width : int, in height : int) : void
        if (mSession == null) {
            return;
        }
        mSession.dispatchSurfaceChanged(format, width, height);
!!!28744247.java!!!	createSessionOverlayView() : void
        if (mSession == null || !isAttachedToWindow()
                || mOverlayViewCreated || mWindowZOrder != ZORDER_MEDIA) {
            return;
        }
        mOverlayViewFrame = getViewFrameOnScreen();
        mSession.createOverlayView(this, mOverlayViewFrame);
        mOverlayViewCreated = true;
!!!28744375.java!!!	removeSessionOverlayView() : void
        if (mSession == null || !mOverlayViewCreated) {
            return;
        }
        mSession.removeOverlayView();
        mOverlayViewCreated = false;
        mOverlayViewFrame = null;
!!!28744503.java!!!	relayoutSessionOverlayView() : void
        if (mSession == null || !isAttachedToWindow() || !mOverlayViewCreated
                || mWindowZOrder != ZORDER_MEDIA) {
            return;
        }
        Rect viewFrame = getViewFrameOnScreen();
        if (viewFrame.equals(mOverlayViewFrame)) {
            return;
        }
        mSession.relayoutOverlayView(viewFrame);
        mOverlayViewFrame = viewFrame;
!!!28744631.java!!!	getViewFrameOnScreen() : Rect
        int[] location = new int[2];
        getLocationOnScreen(location);
        return new Rect(location[0], location[1],
                location[0] + getWidth(), location[1] + getHeight());
