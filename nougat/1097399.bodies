class FilterGraphEffect
!!!28791479.java!!!	FilterGraphEffect(inout context : EffectContext, inout name : String, inout graphString : String, inout inputName : String, inout outputName : String, inout scheduler : Class)
        super(context, name);

        mInputName = inputName;
        mOutputName = outputName;
        mSchedulerClass = scheduler;
        createGraph(graphString);

!!!28791607.java!!!	createGraph(inout graphString : String) : void
        GraphReader reader = new TextGraphReader();
        try {
            mGraph = reader.readGraphString(graphString);
        } catch (GraphIOException e) {
            throw new RuntimeException("Could not setup effect", e);
        }

        if (mGraph == null) {
            throw new RuntimeException("Could not setup effect");
        }
        mRunner = new SyncRunner(getFilterContext(), mGraph, mSchedulerClass);
!!!28791735.java!!!	apply(in inputTexId : int, in width : int, in height : int, in outputTexId : int) : void
        beginGLEffect();
        Filter src = mGraph.getFilter(mInputName);
        if (src != null) {
            src.setInputValue("texId", inputTexId);
            src.setInputValue("width", width);
            src.setInputValue("height", height);
        } else {
            throw new RuntimeException("Internal error applying effect");
        }
        Filter dest  = mGraph.getFilter(mOutputName);
        if (dest != null) {
            dest.setInputValue("texId", outputTexId);
        } else {
            throw new RuntimeException("Internal error applying effect");
        }
        try {
            mRunner.run();
        } catch (RuntimeException e) {
            throw new RuntimeException("Internal error applying effect: ", e);
        }
        endGLEffect();
!!!28791991.java!!!	release() : void
         mGraph.tearDown(getFilterContext());
         mGraph = null;
