class FieldPort
!!!28811191.java!!!	FieldPort(inout filter : Filter, inout name : String, inout field : Field, inout hasDefault : boolean)
        super(filter, name);
        mField = field;
        mHasFrame = hasDefault;
!!!28811447.java!!!	pushFrame(inout frame : Frame) : void
        setFieldFrame(frame, false);
!!!28811575.java!!!	setFrame(inout frame : Frame) : void
        setFieldFrame(frame, true);
!!!28811703.java!!!	getTarget() : Object
        try {
            return mField.get(mFilter);
        } catch (IllegalAccessException e) {
            return null;
        }
!!!28811831.java!!!	transfer(inout context : FilterContext) : void
        if (mValueWaiting) {
            try {
                mField.set(mFilter, mValue);
            } catch (IllegalAccessException e) {
                throw new RuntimeException(
                    "Access to field '" + mField.getName() + "' was denied!");
            }
            mValueWaiting = false;
            if (context != null) {
                mFilter.notifyFieldPortValueUpdated(mName, context);
            }
        }
!!!28811959.java!!!	pullFrame() : Frame
        throw new RuntimeException("Cannot pull frame on " + this + "!");
!!!28812087.java!!!	hasFrame() : boolean
        return mHasFrame;
!!!28812215.java!!!	acceptsFrame() : boolean
        return !mValueWaiting;
!!!28812343.java!!!	toString() : String
        return "field " + super.toString();
!!!28812471.java!!!	setFieldFrame(inout frame : Frame, inout isAssignment : boolean) : void
        assertPortIsOpen();
        checkFrameType(frame, isAssignment);

        // Store the object value
        Object value = frame.getObjectValue();
        if ((value == null && mValue != null) || !value.equals(mValue)) {
            mValue = value;
            mValueWaiting = true;
        }

        // Since a frame was set, mark this port as having a frame to pull
        mHasFrame = true;
