class Filter
!!!28812599.java!!!	Filter(inout name : String)
        mName = name;
        mFramesToRelease = new HashSet<Frame>();
        mFramesToSet = new HashMap<String, Frame>();
        mStatus = STATUS_PREINIT;

        mLogVerbose = Log.isLoggable(TAG, Log.VERBOSE);
!!!28812727.java!!!	isAvailable(inout filterName : String) : boolean
        ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
        Class filterClass;
        // First see if a class of that name exists
        try {
            filterClass = contextClassLoader.loadClass(filterName);
        } catch (ClassNotFoundException e) {
            return false;
        }
        // Then make sure it's a subclass of Filter.
        try {
            filterClass.asSubclass(Filter.class);
        } catch (ClassCastException e) {
            return false;
        }
        return true;
!!!28812855.java!!!	initWithValueMap(inout valueMap : KeyValueMap) : void
        // Initialization
        initFinalPorts(valueMap);

        // Setup remaining ports
        initRemainingPorts(valueMap);

        // This indicates that final ports can no longer be set
        mStatus = STATUS_UNPREPARED;
!!!28812983.java!!!	initWithAssignmentString(inout assignments : String) : void
        try {
            KeyValueMap valueMap = new TextGraphReader().readKeyValueAssignments(assignments);
            initWithValueMap(valueMap);
        } catch (GraphIOException e) {
            throw new IllegalArgumentException(e.getMessage());
        }
!!!28813111.java!!!	initWithAssignmentList(inout  : Object...keyValues) : void
        KeyValueMap valueMap = new KeyValueMap();
        valueMap.setKeyValues(keyValues);
        initWithValueMap(valueMap);
!!!28813239.java!!!	init() : void
        KeyValueMap valueMap = new KeyValueMap();
        initWithValueMap(valueMap);
!!!28813367.java!!!	getFilterClassName() : String
        return getClass().getSimpleName();
!!!28813495.java!!!	getName() : String
        return mName;
!!!28813623.java!!!	isOpen() : boolean
        return mIsOpen;
!!!28813751.java!!!	setInputFrame(inout inputName : String, inout frame : Frame) : void
        FilterPort port = getInputPort(inputName);
        if (!port.isOpen()) {
            port.open();
        }
        port.setFrame(frame);
!!!28813879.java!!!	setInputValue(inout inputName : String, inout value : Object) : void
        setInputFrame(inputName, wrapInputValue(inputName, value));
!!!28814263.java!!!	delayNextProcess(in millisecs : int) : void
        mSleepDelay = millisecs;
        mStatus = STATUS_SLEEPING;
!!!28814519.java!!!	getOutputFormat(inout portName : String, inout inputFormat : FrameFormat) : FrameFormat
        return null;
!!!28814647.java!!!	getInputFormat(inout portName : String) : FrameFormat
        InputPort inputPort = getInputPort(portName);
        return inputPort.getSourceFormat();
!!!28815031.java!!!	getSleepDelay() : int
        return 250;
!!!28815415.java!!!	getNumberOfConnectedInputs() : int
        int c = 0;
        for (InputPort inputPort : mInputPorts.values()) {
            if (inputPort.isConnected()) {
                ++c;
            }
        }
        return c;
!!!28815543.java!!!	getNumberOfConnectedOutputs() : int
        int c = 0;
        for (OutputPort outputPort : mOutputPorts.values()) {
            if (outputPort.isConnected()) {
                ++c;
            }
        }
        return c;
!!!28815671.java!!!	getNumberOfInputs() : int
        return mOutputPorts == null ? 0 : mInputPorts.size();
!!!28815799.java!!!	getNumberOfOutputs() : int
        return mInputPorts == null ? 0 : mOutputPorts.size();
!!!28815927.java!!!	getInputPort(inout portName : String) : InputPort
        if (mInputPorts == null) {
            throw new NullPointerException("Attempting to access input port '" + portName
                + "' of " + this + " before Filter has been initialized!");
        }
        InputPort result = mInputPorts.get(portName);
        if (result == null) {
            throw new IllegalArgumentException("Unknown input port '" + portName + "' on filter "
                + this + "!");
        }
        return result;
!!!28816055.java!!!	getOutputPort(inout portName : String) : OutputPort
        if (mInputPorts == null) {
            throw new NullPointerException("Attempting to access output port '" + portName
                + "' of " + this + " before Filter has been initialized!");
        }
        OutputPort result = mOutputPorts.get(portName);
        if (result == null) {
            throw new IllegalArgumentException("Unknown output port '" + portName + "' on filter "
                + this + "!");
        }
        return result;
!!!28816183.java!!!	pushOutput(inout name : String, inout frame : Frame) : void
        if (frame.getTimestamp() == Frame.TIMESTAMP_NOT_SET) {
            if (mLogVerbose) Log.v(TAG, "Default-setting output Frame timestamp on port " + name + " to " + mCurrentTimestamp);
            frame.setTimestamp(mCurrentTimestamp);
        }
        getOutputPort(name).pushFrame(frame);
!!!28816311.java!!!	pullInput(inout name : String) : Frame
        Frame result = getInputPort(name).pullFrame();
        if (mCurrentTimestamp == Frame.TIMESTAMP_UNKNOWN) {
            mCurrentTimestamp = result.getTimestamp();
            if (mLogVerbose) Log.v(TAG, "Default-setting current timestamp from input port " + name + " to " + mCurrentTimestamp);
        }
        // As result is retained, we add it to the release pool here
        mFramesToRelease.add(result);

        return result;
!!!28816567.java!!!	transferInputPortFrame(inout name : String, inout context : FilterContext) : void
        getInputPort(name).transfer(context);
!!!28816695.java!!!	initProgramInputs(inout program : Program, inout context : FilterContext) : void
        if (program != null) {
            for (InputPort inputPort : mInputPorts.values()) {
                if (inputPort.getTarget() == program) {
                    inputPort.transfer(context);
                }
            }
        }
!!!28816823.java!!!	addInputPort(inout name : String) : void
        addMaskedInputPort(name, null);
!!!28816951.java!!!	addMaskedInputPort(inout name : String, inout formatMask : FrameFormat) : void
        InputPort port = new StreamPort(this, name);
        if (mLogVerbose) Log.v(TAG, "Filter " + this + " adding " + port);
        mInputPorts.put(name, port);
        port.setPortFormat(formatMask);
!!!28817079.java!!!	addOutputPort(inout name : String, inout format : FrameFormat) : void
        OutputPort port = new OutputPort(this, name);
        if (mLogVerbose) Log.v(TAG, "Filter " + this + " adding " + port);
        port.setPortFormat(format);
        mOutputPorts.put(name, port);
!!!28817207.java!!!	addOutputBasedOnInput(inout outputName : String, inout inputName : String) : void
        OutputPort port = new OutputPort(this, outputName);
        if (mLogVerbose) Log.v(TAG, "Filter " + this + " adding " + port);
        port.setBasePort(getInputPort(inputName));
        mOutputPorts.put(outputName, port);
!!!28817335.java!!!	addFieldPort(inout name : String, inout field : Field, inout hasDefault : boolean, inout isFinal : boolean) : void
        // Make sure field is accessible
        field.setAccessible(true);

        // Create port for this input
        InputPort fieldPort = isFinal
            ? new FinalPort(this, name, field, hasDefault)
            : new FieldPort(this, name, field, hasDefault);

        // Create format for this input
        if (mLogVerbose) Log.v(TAG, "Filter " + this + " adding " + fieldPort);
        MutableFrameFormat format = ObjectFormat.fromClass(field.getType(),
                                                           FrameFormat.TARGET_SIMPLE);
        fieldPort.setPortFormat(format);

        // Add port
        mInputPorts.put(name, fieldPort);
!!!28817463.java!!!	addProgramPort(inout name : String, inout varName : String, inout field : Field, inout varType : Class, inout hasDefault : boolean) : void
        // Make sure field is accessible
        field.setAccessible(true);

        // Create port for this input
        InputPort programPort = new ProgramPort(this, name, varName, field, hasDefault);

        // Create format for this input
        if (mLogVerbose) Log.v(TAG, "Filter " + this + " adding " + programPort);
        MutableFrameFormat format = ObjectFormat.fromClass(varType,
                                                           FrameFormat.TARGET_SIMPLE);
        programPort.setPortFormat(format);

        // Add port
        mInputPorts.put(name, programPort);
!!!28817591.java!!!	closeOutputPort(inout name : String) : void
        getOutputPort(name).close();
!!!28817719.java!!!	setWaitsOnInputPort(inout portName : String, inout waits : boolean) : void
        getInputPort(portName).setBlocking(waits);
!!!28817847.java!!!	setWaitsOnOutputPort(inout portName : String, inout waits : boolean) : void
        getOutputPort(portName).setBlocking(waits);
!!!28817975.java!!!	toString() : String
        return "'" + getName() + "' (" + getFilterClassName() + ")";
!!!28818103.java!!!	getInputPorts() : InputPort
        return mInputPorts.values();
!!!28818231.java!!!	getOutputPorts() : OutputPort
        return mOutputPorts.values();
!!!28818359.java!!!	getStatus() : int
        return mStatus;
!!!28818487.java!!!	unsetStatus(in flag : int) : void
        mStatus &= ~flag;
!!!28818615.java!!!	performOpen(inout context : FilterContext) : void
        if (!mIsOpen) {
            if (mStatus == STATUS_UNPREPARED) {
                if (mLogVerbose) Log.v(TAG, "Preparing " + this);
                prepare(context);
                mStatus = STATUS_PREPARED;
            }
            if (mStatus == STATUS_PREPARED) {
                if (mLogVerbose) Log.v(TAG, "Opening " + this);
                open(context);
                mStatus = STATUS_PROCESSING;
            }
            if (mStatus != STATUS_PROCESSING) {
                throw new RuntimeException("Filter " + this + " was brought into invalid state during "
                    + "opening (state: " + mStatus + ")!");
            }
            mIsOpen = true;
        }
!!!28818743.java!!!	performProcess(inout context : FilterContext) : void
        if (mStatus == STATUS_RELEASED) {
            throw new RuntimeException("Filter " + this + " is already torn down!");
        }
        transferInputFrames(context);
        if (mStatus < STATUS_PROCESSING) {
            performOpen(context);
        }
        if (mLogVerbose) Log.v(TAG, "Processing " + this);
        mCurrentTimestamp = Frame.TIMESTAMP_UNKNOWN;
        process(context);
        releasePulledFrames(context);
        if (filterMustClose()) {
            performClose(context);
        }
!!!28818871.java!!!	performClose(inout context : FilterContext) : void
        if (mIsOpen) {
            if (mLogVerbose) Log.v(TAG, "Closing " + this);
            mIsOpen = false;
            mStatus = STATUS_PREPARED;
            close(context);
            closePorts();
        }
!!!28818999.java!!!	performTearDown(inout context : FilterContext) : void
        performClose(context);
        if (mStatus != STATUS_RELEASED) {
            tearDown(context);
            mStatus = STATUS_RELEASED;
        }
!!!28819127.java!!!	canProcess() : boolean
        if (mLogVerbose) Log.v(TAG, "Checking if can process: " + this + " (" + mStatus + ").");
        if (mStatus <= STATUS_PROCESSING) {
            return inputConditionsMet() && outputConditionsMet();
        } else {
            return false;
        }
!!!28819255.java!!!	openOutputs() : void
        if (mLogVerbose) Log.v(TAG, "Opening all output ports on " + this + "!");
        for (OutputPort outputPort : mOutputPorts.values()) {
            if (!outputPort.isOpen()) {
                outputPort.open();
            }
        }
!!!28819383.java!!!	clearInputs() : void
        for (InputPort inputPort : mInputPorts.values()) {
            inputPort.clear();
        }
!!!28819511.java!!!	clearOutputs() : void
        for (OutputPort outputPort : mOutputPorts.values()) {
            outputPort.clear();
        }
!!!28819639.java!!!	notifyFieldPortValueUpdated(inout name : String, inout context : FilterContext) : void
        if (mStatus == STATUS_PROCESSING || mStatus == STATUS_PREPARED) {
            fieldPortValueUpdated(name, context);
        }
!!!28819767.java!!!	pushInputFrame(inout inputName : String, inout frame : Frame) : void
        FilterPort port = getInputPort(inputName);
        if (!port.isOpen()) {
            port.open();
        }
        port.pushFrame(frame);
!!!28819895.java!!!	pushInputValue(inout inputName : String, inout value : Object) : void
        pushInputFrame(inputName, wrapInputValue(inputName, value));
!!!28820023.java!!!	initFinalPorts(inout values : KeyValueMap) : void
        mInputPorts = new HashMap<String, InputPort>();
        mOutputPorts = new HashMap<String, OutputPort>();
        addAndSetFinalPorts(values);
!!!28820151.java!!!	initRemainingPorts(inout values : KeyValueMap) : void
        addAnnotatedPorts();
        setupPorts();   // TODO: rename to addFilterPorts() ?
        setInitialInputValues(values);
!!!28820279.java!!!	addAndSetFinalPorts(inout values : KeyValueMap) : void
        Class filterClass = getClass();
        Annotation annotation;
        for (Field field : filterClass.getDeclaredFields()) {
            if ((annotation = field.getAnnotation(GenerateFinalPort.class)) != null) {
                GenerateFinalPort generator = (GenerateFinalPort)annotation;
                String name = generator.name().isEmpty() ? field.getName() : generator.name();
                boolean hasDefault = generator.hasDefault();
                addFieldPort(name, field, hasDefault, true);
                if (values.containsKey(name)) {
                    setImmediateInputValue(name, values.get(name));
                    values.remove(name);
                } else if (!generator.hasDefault()) {
                    throw new RuntimeException("No value specified for final input port '"
                        + name + "' of filter " + this + "!");
                }
            }
        }
!!!28820407.java!!!	addAnnotatedPorts() : void
        Class filterClass = getClass();
        Annotation annotation;
        for (Field field : filterClass.getDeclaredFields()) {
            if ((annotation = field.getAnnotation(GenerateFieldPort.class)) != null) {
                GenerateFieldPort generator = (GenerateFieldPort)annotation;
                addFieldGenerator(generator, field);
            } else if ((annotation = field.getAnnotation(GenerateProgramPort.class)) != null) {
                GenerateProgramPort generator = (GenerateProgramPort)annotation;
                addProgramGenerator(generator, field);
            } else if ((annotation = field.getAnnotation(GenerateProgramPorts.class)) != null) {
                GenerateProgramPorts generators = (GenerateProgramPorts)annotation;
                for (GenerateProgramPort generator : generators.value()) {
                    addProgramGenerator(generator, field);
                }
            }
        }
!!!28820535.java!!!	addFieldGenerator(inout generator : GenerateFieldPort, inout field : Field) : void
        String name = generator.name().isEmpty() ? field.getName() : generator.name();
        boolean hasDefault = generator.hasDefault();
        addFieldPort(name, field, hasDefault, false);
!!!28820663.java!!!	addProgramGenerator(inout generator : GenerateProgramPort, inout field : Field) : void
        String name = generator.name();
        String varName = generator.variableName().isEmpty() ? name
                                                            : generator.variableName();
        Class varType = generator.type();
        boolean hasDefault = generator.hasDefault();
        addProgramPort(name, varName, field, varType, hasDefault);
!!!28820791.java!!!	setInitialInputValues(inout values : KeyValueMap) : void
        for (Entry<String, Object> entry : values.entrySet()) {
            setInputValue(entry.getKey(), entry.getValue());
        }
!!!28820919.java!!!	setImmediateInputValue(inout name : String, inout value : Object) : void
        if (mLogVerbose) Log.v(TAG, "Setting immediate value " + value + " for port " + name + "!");
        FilterPort port = getInputPort(name);
        port.open();
        port.setFrame(SimpleFrame.wrapObject(value, null));
!!!28821047.java!!!	transferInputFrames(inout context : FilterContext) : void
        for (InputPort inputPort : mInputPorts.values()) {
            inputPort.transfer(context);
        }
!!!28821175.java!!!	wrapInputValue(inout inputName : String, inout value : Object) : Frame
        MutableFrameFormat inputFormat = ObjectFormat.fromObject(value, FrameFormat.TARGET_SIMPLE);
        if (value == null) {
            // If the value is null, the format cannot guess the class, so we adjust it to the
            // class of the input port here
            FrameFormat portFormat = getInputPort(inputName).getPortFormat();
            Class portClass = (portFormat == null) ? null : portFormat.getObjectClass();
            inputFormat.setObjectClass(portClass);
        }

        // Serialize if serializable, and type is not an immutable primitive.
        boolean shouldSerialize = !(value instanceof Number)
            && !(value instanceof Boolean)
            && !(value instanceof String)
            && value instanceof Serializable;

        // Create frame wrapper
        Frame frame = shouldSerialize
            ? new SerializedFrame(inputFormat, null)
            : new SimpleFrame(inputFormat, null);
        frame.setObjectValue(value);
        return frame;
!!!28821303.java!!!	releasePulledFrames(inout context : FilterContext) : void
        for (Frame frame : mFramesToRelease) {
            context.getFrameManager().releaseFrame(frame);
        }
        mFramesToRelease.clear();
!!!28821431.java!!!	inputConditionsMet() : boolean
        for (FilterPort port : mInputPorts.values()) {
            if (!port.isReady()) {
                if (mLogVerbose) Log.v(TAG, "Input condition not met: " + port + "!");
                return false;
            }
        }
        return true;
!!!28821559.java!!!	outputConditionsMet() : boolean
        for (FilterPort port : mOutputPorts.values()) {
            if (!port.isReady()) {
                if (mLogVerbose) Log.v(TAG, "Output condition not met: " + port + "!");
                return false;
            }
        }
        return true;
!!!28821687.java!!!	closePorts() : void
        if (mLogVerbose) Log.v(TAG, "Closing all ports on " + this + "!");
        for (InputPort inputPort : mInputPorts.values()) {
            inputPort.close();
        }
        for (OutputPort outputPort : mOutputPorts.values()) {
            outputPort.close();
        }
!!!28821815.java!!!	filterMustClose() : boolean
        for (InputPort inputPort : mInputPorts.values()) {
            if (inputPort.filterMustClose()) {
                if (mLogVerbose) Log.v(TAG, "Filter " + this + " must close due to port " + inputPort);
                return true;
            }
        }
        for (OutputPort outputPort : mOutputPorts.values()) {
            if (outputPort.filterMustClose()) {
                if (mLogVerbose) Log.v(TAG, "Filter " + this + " must close due to port " + outputPort);
                return true;
            }
        }
        return false;
