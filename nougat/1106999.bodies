class NativeBuffer
!!!28856887.java!!!	NativeBuffer(in count : int)
        allocate(count * getElementSize());
        mOwnsData = true;
!!!28857015.java!!!	mutableCopy() : NativeBuffer
        NativeBuffer result = null;
        try {
            Class myClass = getClass();
            result = (NativeBuffer)myClass.newInstance();
        } catch (Exception e) {
            throw new RuntimeException("Unable to allocate a copy of " + getClass() + "! Make " +
                                       "sure the class has a default constructor!");
        }
        if (mSize > 0 && !nativeCopyTo(result)) {
            throw new RuntimeException("Failed to copy NativeBuffer to mutable instance!");
        }
        return result;
!!!28857143.java!!!	size() : int
        return mSize;
!!!28857271.java!!!	count() : int
        return (mDataPointer != 0) ? mSize / getElementSize() : 0;
!!!28857399.java!!!	getElementSize() : int
        return 1;
!!!28857527.java!!!	retain() : NativeBuffer
        if (mAttachedFrame != null) {
            mAttachedFrame.retain();
        } else if (mOwnsData) {
            ++mRefCount;
        }
        return this;
!!!28857655.java!!!	release() : NativeBuffer
        // Decrement refcount
        boolean doDealloc = false;
        if (mAttachedFrame != null) {
            doDealloc = (mAttachedFrame.release() == null);
        } else if (mOwnsData) {
            --mRefCount;
            doDealloc = (mRefCount == 0);
        }

        // Deallocate if necessary
        if (doDealloc) {
            deallocate(mOwnsData);
            return null;
        } else {
            return this;
        }
!!!28857783.java!!!	isReadOnly() : boolean
        return (mAttachedFrame != null) ? mAttachedFrame.isReadOnly() : false;
!!!28857911.java!!!	attachToFrame(inout frame : Frame) : void
        // We do not auto-retain. We expect the user to call retain() if they want to hold on to
        // the frame.
        mAttachedFrame = frame;
!!!28858039.java!!!	assertReadable() : void
        if (mDataPointer == 0 || mSize == 0
        || (mAttachedFrame != null && !mAttachedFrame.hasNativeAllocation())) {
            throw new NullPointerException("Attempting to read from null data frame!");
        }
!!!28858167.java!!!	assertWritable() : void
        if (isReadOnly()) {
            throw new RuntimeException("Attempting to modify read-only native (structured) data!");
        }
