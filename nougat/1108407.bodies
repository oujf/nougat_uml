class ShaderProgram
!!!28875575.java!!!	setTimer() : void
        mTimer = new StopWatchMap();
!!!28875959.java!!!	ShaderProgram(inout context : FilterContext, inout fragmentShader : String)
        mGLEnvironment = getGLEnvironment(context);
        allocate(mGLEnvironment, null, fragmentShader);
        if (!compileAndLink()) {
            throw new RuntimeException("Could not compile and link shader!");
        }
        this.setTimer();
!!!28876087.java!!!	ShaderProgram(inout context : FilterContext, inout vertexShader : String, inout fragmentShader : String)
        mGLEnvironment = getGLEnvironment(context);
        allocate(mGLEnvironment, vertexShader, fragmentShader);
        if (!compileAndLink()) {
            throw new RuntimeException("Could not compile and link shader!");
        }
        this.setTimer();
!!!28876215.java!!!	createIdentity(inout context : FilterContext) : ShaderProgram
        ShaderProgram program = nativeCreateIdentity(getGLEnvironment(context));
        program.setTimer();
        return program;
!!!28876343.java!!!	finalize() : void
        deallocate();
!!!28876471.java!!!	getGLEnvironment() : GLEnvironment
        return mGLEnvironment;
!!!28876599.java!!!	process(inout inputs : Frame, inout output : Frame) : void
        if (mTimer.LOG_MFF_RUNNING_TIMES) {
          mTimer.start("glFinish");
          GLES20.glFinish();
          mTimer.stop("glFinish");
        }

        // Get the GL input frames
        // TODO: We do the same in the NativeProgram... can we find a better way?!
        GLFrame[] glInputs = new GLFrame[inputs.length];
        for (int i = 0; i < inputs.length; ++i) {
            if (inputs[i] instanceof GLFrame) {
                glInputs[i] = (GLFrame)inputs[i];
            } else {
                throw new RuntimeException("ShaderProgram got non-GL frame as input " + i + "!");
            }
        }

        // Get the GL output frame
        GLFrame glOutput = null;
        if (output instanceof GLFrame) {
            glOutput = (GLFrame)output;
        } else {
            throw new RuntimeException("ShaderProgram got non-GL output frame!");
        }

        // Adjust tiles to meet maximum tile size requirement
        if (mMaxTileSize > 0) {
            int xTiles = (output.getFormat().getWidth() + mMaxTileSize - 1) / mMaxTileSize;
            int yTiles = (output.getFormat().getHeight() + mMaxTileSize - 1) / mMaxTileSize;
            setShaderTileCounts(xTiles, yTiles);
        }

        // Process!
        if (!shaderProcess(glInputs, glOutput)) {
            throw new RuntimeException("Error executing ShaderProgram!");
        }

        if (mTimer.LOG_MFF_RUNNING_TIMES) {
          GLES20.glFinish();
        }
!!!28876727.java!!!	setHostValue(inout variableName : String, inout value : Object) : void
        if (!setUniformValue(variableName, value)) {
            throw new RuntimeException("Error setting uniform value for variable '" +
                                       variableName + "'!");
        }
!!!28876855.java!!!	getHostValue(inout variableName : String) : Object
        return getUniformValue(variableName);
!!!28876983.java!!!	setAttributeValues(inout attributeName : String, inout data : float, in componentCount : int) : void
        if (!setShaderAttributeValues(attributeName, data, componentCount)) {
            throw new RuntimeException("Error setting attribute value for attribute '" +
                                       attributeName + "'!");
        }
!!!28877111.java!!!	setAttributeValues(inout attributeName : String, inout vertexData : VertexFrame, in type : int, in componentCount : int, in strideInBytes : int, in offsetInBytes : int, inout normalize : boolean) : void
        if (!setShaderAttributeVertexFrame(attributeName,
                                           vertexData,
                                           type,
                                           componentCount,
                                           strideInBytes,
                                           offsetInBytes,
                                           normalize)) {
            throw new RuntimeException("Error setting attribute value for attribute '" +
                                       attributeName + "'!");
        }
!!!28877239.java!!!	setSourceRegion(inout region : Quad) : void
        setSourceRegion(region.p0.x, region.p0.y,
                        region.p1.x, region.p1.y,
                        region.p2.x, region.p2.y,
                        region.p3.x, region.p3.y);
!!!28877367.java!!!	setTargetRegion(inout region : Quad) : void
        setTargetRegion(region.p0.x, region.p0.y,
                        region.p1.x, region.p1.y,
                        region.p2.x, region.p2.y,
                        region.p3.x, region.p3.y);
!!!28877495.java!!!	setSourceRect(in x : float, in y : float, in width : float, in height : float) : void
        setSourceRegion(x, y, x + width, y, x, y + height, x + width, y + height);
!!!28877623.java!!!	setTargetRect(in x : float, in y : float, in width : float, in height : float) : void
        setTargetRegion(x, y, x + width, y, x, y + height, x + width, y + height);
!!!28877751.java!!!	setClearsOutput(inout clears : boolean) : void
        if (!setShaderClearsOutput(clears)) {
            throw new RuntimeException("Could not set clears-output flag to " + clears + "!");
        }
!!!28877879.java!!!	setClearColor(in r : float, in g : float, in b : float) : void
        if (!setShaderClearColor(r, g, b)) {
            throw new RuntimeException("Could not set clear color to " + r + "," + g + "," + b + "!");
        }
!!!28878007.java!!!	setBlendEnabled(inout enable : boolean) : void
        if (!setShaderBlendEnabled(enable)) {
            throw new RuntimeException("Could not set Blending " + enable + "!");
        }
!!!28878135.java!!!	setBlendFunc(in sfactor : int, in dfactor : int) : void
        if (!setShaderBlendFunc(sfactor, dfactor)) {
            throw new RuntimeException("Could not set BlendFunc " + sfactor +","+ dfactor + "!");
        }
!!!28878263.java!!!	setDrawMode(in drawMode : int) : void
        if (!setShaderDrawMode(drawMode)) {
            throw new RuntimeException("Could not set GL draw-mode to " + drawMode + "!");
        }
!!!28878391.java!!!	setVertexCount(in count : int) : void
        if (!setShaderVertexCount(count)) {
            throw new RuntimeException("Could not set GL vertex count to " + count + "!");
        }
!!!28878519.java!!!	setMaximumTileSize(in size : int) : void
        mMaxTileSize = size;
!!!28878647.java!!!	beginDrawing() : void
        if (!beginShaderDrawing()) {
            throw new RuntimeException("Could not prepare shader-program for drawing!");
        }
!!!28878775.java!!!	getGLEnvironment(inout context : FilterContext) : GLEnvironment
        GLEnvironment result = context != null ? context.getGLEnvironment() : null;
        if (result == null) {
            throw new NullPointerException("Attempting to create ShaderProgram with no GL "
                + "environment in place!");
        }
        return result;
