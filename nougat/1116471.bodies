class RedEyeFilter
!!!28929847.java!!!	RedEyeFilter(inout name : String)
        super(name);
!!!28929975.java!!!	setupPorts() : void
        addMaskedInputPort("image", ImageFormat.create(ImageFormat.COLORSPACE_RGBA));
        addOutputBasedOnInput("image", "image");
!!!28930103.java!!!	getOutputFormat(inout portName : String, inout inputFormat : FrameFormat) : FrameFormat
        return inputFormat;
!!!28930231.java!!!	initProgram(inout context : FilterContext, in target : int) : void
        switch (target) {
            case FrameFormat.TARGET_GPU:
                ShaderProgram shaderProgram = new ShaderProgram(context, mRedEyeShader);
                shaderProgram.setMaximumTileSize(mTileSize);
                mProgram = shaderProgram;
                mProgram.setHostValue("intensity", DEFAULT_RED_INTENSITY);
                break;
            default:
                throw new RuntimeException("Filter RedEye does not support frames of " +
                    "target " + target + "!");
        }
        mTarget = target;
!!!28930359.java!!!	process(inout context : FilterContext) : void
        // Get input frame
        Frame input = pullInput("image");
        FrameFormat inputFormat = input.getFormat();

        // Create output frame
        Frame output = context.getFrameManager().newFrame(inputFormat);

        // Create program if not created already
        if (mProgram == null || inputFormat.getTarget() != mTarget) {
            initProgram(context, inputFormat.getTarget());
        }

        // Check if the frame size has changed
        if (inputFormat.getWidth() != mWidth || inputFormat.getHeight() != mHeight) {
            mWidth = inputFormat.getWidth();
            mHeight = inputFormat.getHeight();
        }
        createRedEyeFrame(context);

        // Process
        Frame[] inputs = {input, mRedEyeFrame};
        mProgram.process(inputs, output);

        // Push output
        pushOutput("image", output);

        // Release pushed frame
        output.release();

        // Release unused frame
        mRedEyeFrame.release();
        mRedEyeFrame = null;
!!!28930487.java!!!	fieldPortValueUpdated(inout name : String, inout context : FilterContext) : void
         if (mProgram != null) {
            updateProgramParams();
        }
!!!28930615.java!!!	createRedEyeFrame(inout context : FilterContext) : void
        int bitmapWidth = mWidth / 2;
        int bitmapHeight = mHeight / 2;

        Bitmap redEyeBitmap = Bitmap.createBitmap(bitmapWidth, bitmapHeight, Bitmap.Config.ARGB_8888);
        mCanvas.setBitmap(redEyeBitmap);
        mPaint.setColor(Color.WHITE);
        mRadius = Math.max(MIN_RADIUS, RADIUS_RATIO * Math.min(bitmapWidth, bitmapHeight));

        for (int i = 0; i < mCenters.length; i += 2) {
            mCanvas.drawCircle(mCenters[i] * bitmapWidth, mCenters[i + 1] * bitmapHeight,
                               mRadius, mPaint);
        }

        FrameFormat format = ImageFormat.create(bitmapWidth, bitmapHeight,
                                                ImageFormat.COLORSPACE_RGBA,
                                                FrameFormat.TARGET_GPU);
        mRedEyeFrame = context.getFrameManager().newFrame(format);
        mRedEyeFrame.setBitmap(redEyeBitmap);
        redEyeBitmap.recycle();
!!!28930743.java!!!	updateProgramParams() : void
        if ( mCenters.length % 2 == 1) {
            throw new RuntimeException("The size of center array must be even.");
        }
