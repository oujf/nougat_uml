class StraightenFilter
!!!28935095.java!!!	StraightenFilter(inout name : String)
        super(name);
!!!28935223.java!!!	setupPorts() : void
        addMaskedInputPort("image", ImageFormat.create(ImageFormat.COLORSPACE_RGBA));
        addOutputBasedOnInput("image", "image");
!!!28935351.java!!!	initProgram(inout context : FilterContext, in target : int) : void
        switch (target) {
            case FrameFormat.TARGET_GPU:
                ShaderProgram shaderProgram = ShaderProgram.createIdentity(context);
                shaderProgram.setMaximumTileSize(mTileSize);
                mProgram = shaderProgram;
                break;

            default:
                throw new RuntimeException("Filter Sharpen does not support frames of " +
                    "target " + target + "!");
        }
        mTarget = target;
!!!28935479.java!!!	fieldPortValueUpdated(inout name : String, inout context : FilterContext) : void
        if (mProgram != null) {
            updateParameters();
        }
!!!28935607.java!!!	process(inout context : FilterContext) : void
        // Get input frame
        Frame input = pullInput("image");
        FrameFormat inputFormat = input.getFormat();

        // Create program if not created already
        if (mProgram == null || inputFormat.getTarget() != mTarget) {
            initProgram(context, inputFormat.getTarget());
        }

        // Create output frame
        if (inputFormat.getWidth() != mWidth || inputFormat.getHeight() != mHeight) {
            mWidth = inputFormat.getWidth();
            mHeight = inputFormat.getHeight();
            updateParameters();
        }

        Frame output = context.getFrameManager().newFrame(inputFormat);

        // Process
        mProgram.process(input, output);

        // Push output
        pushOutput("image", output);

        // Release pushed frame
        output.release();
!!!28935735.java!!!	updateParameters() : void
        float cosTheta = (float) Math.cos(mAngle * DEGREE_TO_RADIAN);
        float sinTheta = (float) Math.sin(mAngle * DEGREE_TO_RADIAN);

        if (mMaxAngle <= 0)
            throw new RuntimeException("Max angle is out of range (0-180).");
        mMaxAngle = (mMaxAngle > 90) ? 90 : mMaxAngle;

        Point p0 = new Point(-cosTheta * mWidth + sinTheta * mHeight,
                             -sinTheta * mWidth - cosTheta * mHeight);

        Point p1 = new Point(cosTheta * mWidth + sinTheta * mHeight,
                             sinTheta * mWidth - cosTheta * mHeight);

        Point p2 = new Point(-cosTheta * mWidth - sinTheta * mHeight,
                             -sinTheta * mWidth + cosTheta * mHeight);

        Point p3 = new Point(cosTheta * mWidth - sinTheta * mHeight,
                             sinTheta * mWidth + cosTheta * mHeight);

        float maxWidth = (float) Math.max(Math.abs(p0.x), Math.abs(p1.x));
        float maxHeight = (float) Math.max(Math.abs(p0.y), Math.abs(p1.y));

        float scale = 0.5f * Math.min( mWidth / maxWidth,
                                       mHeight / maxHeight);

        p0.set(scale * p0.x / mWidth + 0.5f, scale * p0.y / mHeight + 0.5f);
        p1.set(scale * p1.x / mWidth + 0.5f, scale * p1.y / mHeight + 0.5f);
        p2.set(scale * p2.x / mWidth + 0.5f, scale * p2.y / mHeight + 0.5f);
        p3.set(scale * p3.x / mWidth + 0.5f, scale * p3.y / mHeight + 0.5f);

        Quad quad = new Quad(p0, p1, p2, p3);
        ((ShaderProgram) mProgram).setSourceRegion(quad);
