class RgbView
!!!28990647.java!!!	RgbView(inout context : Context)
            super(context);

            // read properties
            Properties prop = new Properties();
            try {
                prop.loadFromXML(new FileInputStream("/sdcard/mediadump/prop.xml"));
            } catch (java.io.IOException e) {
                Log.e(TAG, e.getMessage(), e);
            }

            try {
                mStartX = Integer.parseInt(prop.getProperty("startX"));
                mStartY = Integer.parseInt(prop.getProperty("startY"));
                mWidth = Integer.parseInt(prop.getProperty("width"));
                mHeight = Integer.parseInt(prop.getProperty("height"));
                mBytesPerPixel = Integer.parseInt(prop.getProperty("bytesPerPixel"));
                mFrameRate = Integer.parseInt(prop.getProperty("frameRate"));
            } catch (java.lang.NumberFormatException e) {
                Log.e(TAG, e.getMessage(), e);
            }

            mBytesPerLine = mWidth * mBytesPerPixel;
            mBytesPerImage = mHeight * mBytesPerLine;
            mFlipBuf = ByteBuffer.allocate(mBytesPerImage);
            mBitmap = Bitmap.createBitmap(mWidth, mHeight,
                                          mBytesPerPixel == 2
                                          ? Bitmap.Config.RGB_565
                                          : Bitmap.Config.ARGB_8888);

            mImageList = new ArrayList<String>();
            try {
                BufferedReader reader = new BufferedReader(
                    new FileReader("/sdcard/mediadump/images.lst"));
                String line;
                while ((line = reader.readLine()) != null) {
                    mImageList.add(line);
                }
                reader.close();
            } catch (java.io.IOException e) {
                Log.e(TAG, e.getMessage(), e);
            }

            mMediaController = new MediaController(context);
            mTimer = new Timer();
            LoadImage();
!!!28990775.java!!!	attachMediaController() : void
            if (mMediaController != null) {
                if (!mMediaControllerAttached) {
                    mMediaController.setMediaPlayer(this);
                    View anchorView = this.getParent() instanceof View ?
                            (View)this.getParent() : this;
                    mMediaController.setAnchorView(anchorView);
                    mMediaController.setEnabled(true);
                    mMediaControllerAttached = true;
                    mTimer.scheduleAtFixedRate(mImageTask, 0, 1000 / mFrameRate);
                }
                mMediaController.show();
            }
!!!28990903.java!!!	onTouchEvent(inout event : MotionEvent) : boolean
            attachMediaController();
            return true;
!!!28991031.java!!!	LoadImage() : void
            try {
                if (mImageIndex < 0 || mImageIndex >= mImageList.size()) {
                    mImageIndex = 0;
                    mIsPlaying = false;
                }

                String filename = mImageList.get(mImageIndex);

                FileInputStream in = new FileInputStream(filename);
                mImageBytes = new byte[mBytesPerImage];
                in.read(mImageBytes);
            } catch (Exception e) {
                Log.e("Error reading file", e.toString());
            }

            // Flip the image vertically since the image from MediaDump is
            // upside down.
            for (int i = mHeight - 1; i >= 0; i--) {
                mFlipBuf.put(mImageBytes, i * mBytesPerLine, mBytesPerLine);
            }
            mFlipBuf.rewind();
            mBitmap.copyPixelsFromBuffer(mFlipBuf);
            mFlipBuf.rewind();
            mHandler.sendEmptyMessage(0);
!!!28991159.java!!!	onDraw(inout canvas : Canvas) : void
            canvas.drawBitmap(mBitmap, mStartX, mStartY, null);
!!!28991287.java!!!	canPause() : boolean
            return true;
!!!28991415.java!!!	canSeekBackward() : boolean
            return true;
!!!28991543.java!!!	canSeekForward() : boolean
            return true;
!!!28991671.java!!!	getBufferPercentage() : int
            return 1;
!!!28991799.java!!!	getCurrentPosition() : int
            return mImageIndex * 1000 / mFrameRate;
!!!28991927.java!!!	getDuration() : int
            return mImageList.size() * 1000 / mFrameRate;
!!!28992055.java!!!	isPlaying() : boolean
            return mIsPlaying;
!!!28992183.java!!!	pause() : void
            mIsPlaying = false;
!!!28992311.java!!!	seekTo(in pos : int) : void
            mImageIndex = pos * mFrameRate / 1000;
!!!28992439.java!!!	start() : void
            mIsPlaying = true;
!!!28992567.java!!!	getAudioSessionId() : int
            return 0;
