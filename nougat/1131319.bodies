class BlockingStateCallback
!!!36250423.java!!!	setCurrentState(in state : int) : void
        if (VERBOSE) Log.v(TAG, "Camera device state now " + stateToString(state));
        try {
            mRecentStates.put(state);
        } catch (InterruptedException e) {
            throw new RuntimeException("Unable to set device state", e);
        }
!!!36250551.java!!!	BlockingStateCallback()
        mProxy = null;
!!!36250679.java!!!	BlockingStateCallback(inout listener : CameraDevice::StateCallback)
        mProxy = listener;
!!!36250807.java!!!	onOpened(inout camera : CameraDevice) : void
        if (mProxy != null) {
            mProxy.onOpened(camera);
        }
        setCurrentState(STATE_OPENED);
!!!36250935.java!!!	onDisconnected(inout camera : CameraDevice) : void
        if (mProxy != null) {
            mProxy.onDisconnected(camera);
        }
        setCurrentState(STATE_DISCONNECTED);
!!!36251063.java!!!	onError(inout camera : CameraDevice, in error : int) : void
        if (mProxy != null) {
            mProxy.onError(camera, error);
        }
        setCurrentState(STATE_ERROR);
!!!36251191.java!!!	onClosed(inout camera : CameraDevice) : void
        if (mProxy != null) {
            mProxy.onClosed(camera);
        }
        setCurrentState(STATE_CLOSED);
!!!36251319.java!!!	waitForState(in state : int, in timeout : long) : void
        Integer[] stateArray = { state };

        waitForAnyOfStates(Arrays.asList(stateArray), timeout);
!!!36251447.java!!!	waitForAnyOfStates(inout states : Collection<Integer>, in timeout : long) : int
        synchronized (mLock) {
            if (mWaiting) {
                throw new IllegalStateException("Only one waiter allowed at a time");
            }
            mWaiting = true;
        }
        if (VERBOSE) {
            StringBuilder s = new StringBuilder("Waiting for state(s) ");
            appendStates(s, states);
            Log.v(TAG, s.toString());
        }

        Integer nextState = null;
        long timeoutLeft = timeout;
        long startMs = SystemClock.elapsedRealtime();
        try {
            while ((nextState = mRecentStates.poll(timeoutLeft, TimeUnit.MILLISECONDS))
                    != null) {
                if (VERBOSE) {
                    Log.v(TAG, "  Saw transition to " + stateToString(nextState));
                }
                if (states.contains(nextState)) break;
                long endMs = SystemClock.elapsedRealtime();
                timeoutLeft -= (endMs - startMs);
                startMs = endMs;
            }
        } catch (InterruptedException e) {
            throw new UnsupportedOperationException("Does not support interrupts on waits", e);
        }

        synchronized (mLock) {
            mWaiting = false;
        }

        if (!states.contains(nextState)) {
            StringBuilder s = new StringBuilder("Timed out after ");
            s.append(timeout);
            s.append(" ms waiting for state(s) ");
            appendStates(s, states);

            throw new TimeoutRuntimeException(s.toString());
        }

        return nextState;
!!!36251575.java!!!	stateToString(in state : int) : String
        return mStateNames[state + 1];
!!!36251703.java!!!	appendStates(inout s : StringBuilder, inout states : Collection<Integer>) : void
        boolean start = true;
        for (Integer state : states) {
            if (!start) s.append(" ");
            s.append(stateToString(state));
            start = false;
        }
