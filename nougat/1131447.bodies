class BlockingSessionCallback
!!!36248247.java!!!	BlockingSessionCallback()
        mProxy = null;
!!!36248375.java!!!	BlockingSessionCallback(inout listener : CameraCaptureSession::StateCallback)
        if (listener == null) {
            throw new NullPointerException("listener must not be null");
        }
        mProxy = listener;
!!!36248503.java!!!	getStateWaiter() : StateWaiter
        return mStateWaiter;
!!!36248631.java!!!	waitAndGetSession(in timeoutMs : long) : CameraCaptureSession
        try {
            return mSessionFuture.get(timeoutMs, TimeUnit.MILLISECONDS);
        } catch (TimeoutException e) {
            throw new TimeoutRuntimeException(
                    String.format("Failed to get session after %s milliseconds", timeoutMs), e);
        }
!!!36248759.java!!!	onActive(inout session : CameraCaptureSession) : void
        mSessionFuture.setSession(session);
        if (mProxy != null) mProxy.onActive(session);
        mStateChangeListener.onStateChanged(SESSION_ACTIVE);
!!!36248887.java!!!	onClosed(inout session : CameraCaptureSession) : void
        mSessionFuture.setSession(session);
        if (mProxy != null) mProxy.onClosed(session);
        mStateChangeListener.onStateChanged(SESSION_CLOSED);
        synchronized (mPreparedSurfaces) {
            mPreparedSurfaces.remove(session);
        }
!!!36249015.java!!!	onConfigured(inout session : CameraCaptureSession) : void
        mSessionFuture.setSession(session);
        if (mProxy != null) {
            mProxy.onConfigured(session);
        }
        mStateChangeListener.onStateChanged(SESSION_CONFIGURED);
!!!36249143.java!!!	onConfigureFailed(inout session : CameraCaptureSession) : void
        mSessionFuture.setSession(session);
        if (mProxy != null) {
            mProxy.onConfigureFailed(session);
        }
        mStateChangeListener.onStateChanged(SESSION_CONFIGURE_FAILED);
!!!36249271.java!!!	onReady(inout session : CameraCaptureSession) : void
        mSessionFuture.setSession(session);
        if (mProxy != null) {
            mProxy.onReady(session);
        }
        mStateChangeListener.onStateChanged(SESSION_READY);
!!!36249399.java!!!	onSurfacePrepared(inout session : CameraCaptureSession, inout surface : Surface) : void
        mSessionFuture.setSession(session);
        if (mProxy != null) {
            mProxy.onSurfacePrepared(session, surface);
        }
        // Surface prepared doesn't cause a session state change, so don't trigger the
        // state change listener
        synchronized (mPreparedSurfaces) {
            List<Surface> preparedSurfaces = mPreparedSurfaces.get(session);
            if (preparedSurfaces == null) {
                preparedSurfaces = new ArrayList<Surface>();
            }
            preparedSurfaces.add(surface);
            mPreparedSurfaces.put(session, preparedSurfaces);
            mPreparedSurfaces.notifyAll();
        }
!!!36249527.java!!!	waitForSurfacePrepared(inout session : CameraCaptureSession, inout surface : Surface, in timeoutMs : long) : void
        synchronized (mPreparedSurfaces) {
            List<Surface> preparedSurfaces = mPreparedSurfaces.get(session);
            if (preparedSurfaces != null && preparedSurfaces.contains(surface)) {
                return;
            }
            try {
                long waitTimeRemaining = timeoutMs;
                while (waitTimeRemaining > 0) {
                    long waitStartTime = SystemClock.elapsedRealtime();
                    mPreparedSurfaces.wait(timeoutMs);
                    long waitTime = SystemClock.elapsedRealtime() - waitStartTime;
                    waitTimeRemaining -= waitTime;
                    preparedSurfaces = mPreparedSurfaces.get(session);
                    if (waitTimeRemaining >= 0 && preparedSurfaces != null &&
                            preparedSurfaces.contains(surface)) {
                        return;
                    }
                }
                throw new TimeoutRuntimeException(
                        "Unable to get Surface prepared in " + timeoutMs + "ms");
            } catch (InterruptedException ie) {
                throw new AssertionError();
            }
        }
