class CameraErrorCollector
!!!29076535.java!!!	verify() : void
        // Do not remove if using JUnit 3 test runners. super.verify() is protected.
        super.verify();
!!!29076663.java!!!	addMessage(inout message : String) : void
        addErrorSuper(new Throwable(mCameraMsg + message));
!!!29076791.java!!!	addError(inout error : Throwable) : void
        addErrorSuper(new Throwable(mCameraMsg + error.getMessage(), error));
!!!29076919.java!!!	addErrorSuper(inout error : Throwable) : void
        if (LOG_ERRORS) Log.e(TAG, error.getMessage());
        super.addError(error);
!!!29077047.java!!!	checkThat(in value : T, in matcher : Matcher<T>) : void
        super.checkThat(mCameraMsg, value, matcher);
!!!29077175.java!!!	checkThat(in reason : String, in value : T, in matcher : Matcher<T>) : void
        super.checkThat(mCameraMsg + reason, value, matcher);
!!!29077303.java!!!	setCameraId(inout id : String) : void
        if (id != null) {
            mCameraMsg = "Test failed for camera " + id + ": ";
        } else {
            mCameraMsg = "";
        }
!!!29077431.java!!!	expectTrue(inout msg : String, inout condition : boolean) : boolean
        if (!condition) {
            addMessage(msg);
        }

        return condition;
!!!29077559.java!!!	expectEquals(inout msg : String, inout expected : T, inout actual : T) : boolean
        if (expected == null) {
            throw new IllegalArgumentException("expected value shouldn't be null");
        }

        if (!Objects.equals(expected, actual)) {
            addMessage(String.format("%s (expected = %s, actual = %s) ", msg, expected,
                    actual));
            return false;
        }

        return true;
!!!29077687.java!!!	expectNotEquals(inout msg : String, inout expected : T, inout actual : T) : boolean
        if (Objects.equals(expected, actual)) {
            addMessage(String.format("%s (expected = %s, actual = %s) ", msg, expected,
                    actual));
            return false;
        }

        return true;
!!!29077815.java!!!	expectEquals(inout msg : String, inout expected : T, inout actual : T) : boolean
        if (expected == null) {
            throw new IllegalArgumentException("expected value shouldn't be null");
        }

        if (!Arrays.deepEquals(expected, actual)) {
            addMessage(String.format("%s (expected = %s, actual = %s) ", msg,
                    Arrays.deepToString(expected), Arrays.deepToString(actual)));
            return false;
        }

        return true;
!!!29077943.java!!!	expectNotEquals(inout msg : String, inout expected : T, inout actual : T) : boolean
        if (expected == null) {
            throw new IllegalArgumentException("expected value shouldn't be null");
        }

        if (Arrays.deepEquals(expected, actual)) {
            addMessage(String.format("%s (expected = %s, actual = %s) ", msg,
                    Arrays.deepToString(expected), Arrays.deepToString(actual)));
            return false;
        }

        return true;
!!!29078071.java!!!	expectGreater(inout msg : String, inout expected : T, inout actual : T) : boolean
        return expectTrue(String.format("%s: (expected = %s was not greater than actual = %s) ",
                msg, expected, actual), actual.compareTo(expected) > 0);
!!!29078199.java!!!	expectGreaterOrEqual(inout msg : String, inout expected : T, inout actual : T) : boolean
        return expectTrue(String.format("%s: (expected = %s was not greater than actual = %s) ",
                msg, expected, actual), actual.compareTo(expected) >= 0);
!!!29078327.java!!!	expectLess(inout msg : String, inout expected : T, inout actual : T) : boolean
        return expectTrue(String.format("%s: (expected = %s was not greater than actual = %s) ",
                msg, expected, actual), actual.compareTo(expected) < 0);
!!!29078455.java!!!	expectLessOrEqual(inout msg : String, inout expected : T, inout actual : T) : boolean
        return expectTrue(String.format("%s: (expected = %s was not greater than actual = %s) ",
                msg, expected, actual), actual.compareTo(expected) <= 0);
!!!29078583.java!!!	expectEquals(inout msg : String, in expected : float, in actual : float, in tolerance : float) : boolean
        if (expected == actual) {
            return true;
        }

        if (!(Math.abs(expected - actual) <= tolerance)) {
            addMessage(String.format("%s (expected = %s, actual = %s, tolerance = %s) ", msg,
                    expected, actual, tolerance));
            return false;
        }

        return true;
!!!29078711.java!!!	expectEquals(inout msg : String, in expected : double, in actual : double, in tolerance : double) : boolean
        if (expected == actual) {
            return true;
        }

        if (!(Math.abs(expected - actual) <= tolerance)) {
            addMessage(String.format("%s (expected = %s, actual = %s, tolerance = %s) ", msg,
                    expected, actual, tolerance));
            return false;
        }

        return true;
!!!29078839.java!!!	expectValuesGreaterOrEqual(inout msg : String, inout list : List<T>, inout min : T) : void
        for (T value : list) {
            expectTrue(msg + String.format(", array value " + value.toString() +
                                    " is less than %s",
                            min.toString()), value.compareTo(min) >= 0);
        }
!!!29078967.java!!!	expectValuesGreaterOrEqual(inout msg : String, inout array : T, inout min : T) : void
        expectValuesGreaterOrEqual(msg, Arrays.asList(array), min);
!!!29079095.java!!!	expectValuesInRange(inout msg : String, inout list : List<T>, inout min : T, inout max : T) : void
        for (T value : list) {
            expectTrue(msg + String.format(", array value " + value.toString() +
                    " is out of range [%s, %s]",
                    min.toString(), max.toString()),
                    value.compareTo(max)<= 0 && value.compareTo(min) >= 0);
        }
!!!29079223.java!!!	expectValuesInRange(inout msg : String, inout array : T, inout min : T, inout max : T) : void
        expectValuesInRange(msg, Arrays.asList(array), min, max);
!!!29079351.java!!!	expectValuesInRange(inout msg : String, inout array : int, in min : int, in max : int) : void
        ArrayList<Integer> l = new ArrayList<>(array.length);
        for (int i : array) {
            l.add(i);
        }
        expectValuesInRange(msg, l, min, max);
!!!29079479.java!!!	expectInRange(inout msg : String, inout value : T, inout min : T, inout max : T) : boolean
        return expectTrue(msg + String.format(", value " + value.toString()
                + " is out of range [%s, %s]",
                min.toString(), max.toString()),
                value.compareTo(max)<= 0 && value.compareTo(min) >= 0);
!!!29079607.java!!!	expectMeteringRegionsAreSimilar(inout msg : String, inout expected : MeteringRectangle, inout actual : MeteringRectangle, in errorPercent : float) : boolean
        String expectedActualMsg = String.format("expected (%s), actual (%s)",
                Arrays.deepToString(expected), Arrays.deepToString(actual));

        String differentSizesMsg = String.format(
                "%s: rect lists are different sizes; %s",
                msg, expectedActualMsg);

        String differentWeightsMsg = String.format(
                "%s: rect weights are different; %s",
                msg, expectedActualMsg);

        if (!expectTrue(differentSizesMsg, actual != null)) {
            return false;
        }

        if (!expectEquals(differentSizesMsg, expected.length, actual.length)) return false;

        boolean succ = true;
        for (int i = 0; i < expected.length; ++i) {
            if (i < actual.length) {
                // Avoid printing multiple errors for the same rectangle
                if (!expectRectsAreSimilar(
                        msg, expected[i].getRect(), actual[i].getRect(), errorPercent)) {
                    succ = false;
                    continue;
                }
                if (!expectEquals(differentWeightsMsg,
                        expected[i].getMeteringWeight(), actual[i].getMeteringWeight())) {
                    succ = false;
                    continue;
                }
            }
        }

        return succ;
!!!29079735.java!!!	expectRectsAreSimilar(inout msg : String, inout expected : Rect, inout actual : Rect, in errorPercent : float) : boolean
        String formattedMsg = String.format("%s: rects are not similar enough; expected (%s), " +
                "actual (%s), error percent (%s), reason: ",
                msg, expected, actual, errorPercent);

        if (!expectSimilarValues(
                formattedMsg, "too wide", "too narrow", actual.width(), expected.width(),
                errorPercent)) return false;

        if (!expectSimilarValues(
                formattedMsg, "too tall", "too short", actual.height(), expected.height(),
                errorPercent)) return false;

        if (!expectSimilarValues(
                formattedMsg, "left pt too right", "left pt too left", actual.left, expected.left,
                errorPercent)) return false;

        if (!expectSimilarValues(
                formattedMsg, "right pt too right", "right pt too left",
                actual.right, expected.right, errorPercent)) return false;

        if (!expectSimilarValues(
                formattedMsg, "top pt too low", "top pt too high", actual.top, expected.top,
                errorPercent)) return false;

        if (!expectSimilarValues(
                formattedMsg, "bottom pt too low", "bottom pt too high", actual.top, expected.top,
                errorPercent)) return false;

        return true;
!!!29079863.java!!!	expectSizesAreSimilar(inout msg : String, inout expected : Size, inout actual : Size, in errorPercent : float) : boolean
        String formattedMsg = String.format("%s: rects are not similar enough; expected (%s), " +
                "actual (%s), error percent (%s), reason: ",
                msg, expected, actual, errorPercent);

        if (!expectSimilarValues(
                formattedMsg, "too wide", "too narrow", actual.getWidth(), expected.getWidth(),
                errorPercent)) return false;

        if (!expectSimilarValues(
                formattedMsg, "too tall", "too short", actual.getHeight(), expected.getHeight(),
                errorPercent)) return false;

        return true;
!!!29079991.java!!!	expectRectCentered(inout msg : String, inout expectedBounds : Size, inout actual : Rect, in errorPercent : float) : void
        String formattedMsg = String.format("%s: rect should be centered; expected bounds (%s), " +
                "actual (%s), error percent (%s), reason: ",
                msg, expectedBounds, actual, errorPercent);

        int centerBoundX = expectedBounds.getWidth() / 2;
        int centerBoundY = expectedBounds.getHeight() / 2;

        expectSimilarValues(
                formattedMsg, "too low", "too high", actual.centerY(), centerBoundY,
                errorPercent);

        expectSimilarValues(
                formattedMsg, "too right", "too left", actual.centerX(), centerBoundX,
                errorPercent);
!!!29080119.java!!!	expectSimilarValues(inout formattedMsg : String, inout tooSmall : String, inout tooLarge : String, in actualValue : int, in expectedValue : int, in errorPercent : float) : boolean
        boolean succ = true;
        succ = expectTrue(formattedMsg + tooLarge,
                actualValue <= (expectedValue * (1.0f + errorPercent))) && succ;
        succ = expectTrue(formattedMsg + tooSmall,
                actualValue >= (expectedValue * (1.0f - errorPercent))) && succ;

        return succ;
!!!29080247.java!!!	expectNotNull(inout msg : String, inout obj : Object) : void
        checkThat(msg, obj, CoreMatchers.notNullValue());
!!!29080375.java!!!	expectNull(inout msg : String, inout obj : Object) : void
        if (obj != null) {
            addMessage(msg);
        }
!!!29080503.java!!!	checkArrayMonotonicityAndNotAllEqual(inout array : T, inout ascendingOrder : boolean) : void
        String orderMsg = ascendingOrder ? ("increasing order") : ("decreasing order");
        for (int i = 0; i < array.length - 1; i++) {
            int compareResult = array[i + 1].compareTo(array[i]);
            boolean condition = compareResult >= 0;
            if (!ascendingOrder) {
                condition = compareResult <= 0;
            }

            expectTrue(String.format("Adjacent values (%s and %s) %s monotonicity is broken",
                    array[i].toString(), array[i + 1].toString(), orderMsg), condition);
        }

        expectTrue("All values of this array are equal: " + array[0].toString(),
                array[0].compareTo(array[array.length - 1]) != 0);
!!!29080631.java!!!	expectKeyValueNotNull(inout characteristics : CameraCharacteristics, inout key : CameraCharacteristics::Key) : T

        T value = characteristics.get(key);
        if (value == null) {
            addMessage("Key " + key.getName() + " shouldn't be null");
        }

        return value;
!!!29080759.java!!!	expectKeyValueNotNull(inout request : CaptureRequest, inout key : CaptureRequest::Key) : T

        T value = request.get(key);
        if (value == null) {
            addMessage("Key " + key.getName() + " shouldn't be null");
        }

        return value;
!!!29080887.java!!!	expectKeyValueNotNull(inout request : CaptureRequest::Builder, inout key : CaptureRequest::Key) : T

        T value = request.get(key);
        if (value == null) {
            addMessage("Key " + key.getName() + " shouldn't be null");
        }

        return value;
!!!29081015.java!!!	expectKeyValueNotNull(inout result : CaptureResult, inout key : CaptureResult::Key) : T
        return expectKeyValueNotNull("", result, key);
!!!29081143.java!!!	expectKeyValueNotNull(inout msg : String, inout result : CaptureResult, inout key : CaptureResult::Key) : T

        T value = result.get(key);
        if (value == null) {
            addMessage(msg + " Key " + key.getName() + " shouldn't be null");
        }

        return value;
!!!29081271.java!!!	expectKeyValueNotEquals(inout request : CaptureRequest::Builder, inout key : CaptureRequest::Key, inout expected : T) : void
        if (request == null || key == null || expected == null) {
            throw new IllegalArgumentException("request, key and expected shouldn't be null");
        }

        T value;
        if ((value = expectKeyValueNotNull(request, key)) == null) {
            return;
        }

        String reason = "Key " + key.getName() + " shouldn't have value " + value.toString();
        checkThat(reason, value, CoreMatchers.not(expected));
!!!29081399.java!!!	expectKeyValueNotEquals(inout result : CaptureResult, inout key : CaptureResult::Key, inout expected : T) : void
        if (result == null || key == null || expected == null) {
            throw new IllegalArgumentException("result, key and expected shouldn't be null");
        }

        T value;
        if ((value = expectKeyValueNotNull(result, key)) == null) {
            return;
        }

        String reason = "Key " + key.getName() + " shouldn't have value " + value.toString();
        checkThat(reason, value, CoreMatchers.not(expected));
!!!29081527.java!!!	expectKeyValueEquals(inout result : CaptureResult, inout key : CaptureResult::Key, inout expected : T) : void
        if (result == null || key == null || expected == null) {
            throw new IllegalArgumentException("request, key and expected shouldn't be null");
        }

        T value;
        if ((value = expectKeyValueNotNull(result, key)) == null) {
            return;
        }

        String reason = "Key " + key.getName() + " value " + value.toString()
                + " doesn't match the expected value " + expected.toString();
        checkThat(reason, value, CoreMatchers.equalTo(expected));
!!!29081655.java!!!	expectKeyValueEquals(inout request : CaptureRequest::Builder, inout key : CaptureRequest::Key, inout expected : T) : void
        if (request == null || key == null || expected == null) {
            throw new IllegalArgumentException("request, key and expected shouldn't be null");
        }

        T value;
        if ((value = expectKeyValueNotNull(request, key)) == null) {
            return;
        }

        String reason = "Key " + key.getName() + " value " + value.toString()
                + " doesn't match the expected value " + expected.toString();
        checkThat(reason, value, CoreMatchers.equalTo(expected));
!!!29081783.java!!!	expectKeyValueGreaterOrEqual(inout result : CaptureResult, inout key : CaptureResult::Key, inout expected : T) : void
        T value;
        if ((value = expectKeyValueNotNull(result, key)) == null) {
            return;
        }

        expectGreaterOrEqual(key.getName(), expected, value);
!!!29081911.java!!!	expectKeyValueGreaterThan(inout characteristics : CameraCharacteristics, inout key : CameraCharacteristics::Key, inout expected : T) : void
        T value;
        if ((value = expectKeyValueNotNull(characteristics, key)) == null) {
            return;
        }

        expectGreater(key.getName(), expected, value);
!!!29082039.java!!!	expectKeyValueInRange(inout characteristics : CameraCharacteristics, inout key : CameraCharacteristics::Key, inout min : T, inout max : T) : void
        T value;
        if ((value = expectKeyValueNotNull(characteristics, key)) == null) {
            return;
        }
        expectInRange(key.getName(), value, min, max);
!!!29082167.java!!!	expectKeyValueIsIn(inout characteristics : CameraCharacteristics, inout key : CameraCharacteristics::Key, inout  : T...expected) : void
        T value = expectKeyValueNotNull(characteristics, key);
        if (value == null) {
            return;
        }
        String reason = "Key " + key.getName() + " value " + value
                + " isn't one of the expected values " + Arrays.deepToString(expected);
        expectContains(reason, expected, value);
!!!29082295.java!!!	expectKeyValueIsIn(inout request : CaptureRequest::Builder, inout key : CaptureRequest::Key, inout  : T...expected) : void
        T value = expectKeyValueNotNull(request, key);
        if (value == null) {
            return;
        }
        String reason = "Key " + key.getName() + " value " + value
                + " isn't one of the expected values " + Arrays.deepToString(expected);
        expectContains(reason, expected, value);
!!!29082423.java!!!	expectKeyValueContains(inout characteristics : CameraCharacteristics, inout key : CameraCharacteristics::Key, inout expected : T) : void
        T[] value;
        if ((value = expectKeyValueNotNull(characteristics, key)) == null) {
            return;
        }
        String reason = "Key " + key.getName() + " value " + value
                + " doesn't contain the expected value " + expected;
        expectContains(reason, value, expected);
!!!29082551.java!!!	expectKeyValueContains(inout characteristics : CameraCharacteristics, inout key : CameraCharacteristics::Key, in expected : int) : void
        int[] value;
        if ((value = expectKeyValueNotNull(characteristics, key)) == null) {
            return;
        }
        String reason = "Key " + key.getName() + " value " + value
                + " doesn't contain the expected value " + expected;
        expectContains(reason, value, expected);
!!!29082679.java!!!	expectKeyValueContains(inout characteristics : CameraCharacteristics, inout key : CameraCharacteristics::Key, inout expected : boolean) : void
        boolean[] value;
        if ((value = expectKeyValueNotNull(characteristics, key)) == null) {
            return;
        }
        String reason = "Key " + key.getName() + " value " + value
                + " doesn't contain the expected value " + expected;
        expectContains(reason, value, expected);
!!!29082807.java!!!	expectContains(inout reason : String, inout values : T, inout expected : T) : void
        if (values == null) {
            throw new NullPointerException();
        }
        checkThat(reason, expected, InMatcher.in(values));
!!!29082935.java!!!	expectContains(inout values : T, inout expected : T) : void
        String reason = "Expected value " + expected
                + " is not contained in the given values " + values;
        expectContains(reason, values, expected);
!!!29083959.java!!!	expectContains(inout reason : String, inout values : int, in expected : int) : void
        if (values == null) {
            throw new NullPointerException();
        }

        checkThat(reason, expected, new IntInMatcher(values));
!!!29084087.java!!!	expectContains(inout values : int, in expected : int) : void
        String reason = "Expected value " + expected
                + " is not contained in the given values " + values;
        expectContains(reason, values, expected);
!!!29084343.java!!!	expectContains(inout reason : String, inout values : boolean, inout expected : boolean) : void
        if (values == null) {
            throw new NullPointerException();
        }

        checkThat(reason, expected, new BooleanInMatcher(values));
!!!29084471.java!!!	expectContains(inout values : boolean, inout expected : boolean) : void
        String reason = "Expected value " + expected
                + " is not contained in the given values " + values;
        expectContains(reason, values, expected);
!!!29084599.java!!!	expectValuesUnique(inout msg : String, inout list : List<T>) : void
        Set<T> sizeSet = new HashSet<T>(list);
        expectTrue(msg + " each element must be distinct", sizeSet.size() == list.size());
!!!29084727.java!!!	expectImageProperties(inout msg : String, inout image : Image, in format : int, inout size : Size, in timestampNs : long) : void
        expectEquals(msg + "Image format is wrong.", image.getFormat(), format);
        expectEquals(msg + "Image width is wrong.", image.getWidth(), size.getWidth());
        expectEquals(msg + "Image height is wrong.", image.getHeight(), size.getHeight());
        expectEquals(msg + "Image timestamp is wrong.", image.getTimestamp(), timestampNs);
