class MediaPlayerApiTest
!!!29062199.java!!!	MediaPlayerApiTest()
       super("com.android.mediaframeworktest", MediaFrameworkTest.class);
       isWMAEnable = MediaProfileReader.getWMAEnable();
       isWMVEnable = MediaProfileReader.getWMVEnable();
!!!29062327.java!!!	setUp() : void
       //Insert a 2 second before launching the test activity. This is
       //the workaround for the race condition of requesting the updated surface.
       Thread.sleep(2000);
       getActivity();
       super.setUp();
!!!29062455.java!!!	verifyDuration(in duration : int, in expectedDuration : int) : boolean
      if ((duration > expectedDuration * 1.1) || (duration < expectedDuration * 0.9))
         return false;
      else
        return true;
!!!29062583.java!!!	testMP3CBRGetDuration() : void
      int duration = CodecTest.getDuration(MediaNames.MP3CBR);
      duratoinWithinTolerence = verifyDuration(duration, MediaNames.MP3CBR_LENGTH);
      assertTrue("MP3CBR getDuration", duratoinWithinTolerence);  
!!!29062711.java!!!	testMP3VBRGetDuration() : void
      int duration = CodecTest.getDuration(MediaNames.MP3VBR);
      Log.v(TAG, "getDuration");
      duratoinWithinTolerence = verifyDuration(duration, MediaNames.MP3VBR_LENGTH);
      assertTrue("MP3VBR getDuration", duratoinWithinTolerence);  
!!!29062839.java!!!	testMIDIGetDuration() : void
      int duration = CodecTest.getDuration(MediaNames.MIDI);  
      duratoinWithinTolerence = verifyDuration(duration, MediaNames.MIDI_LENGTH);
      assertTrue("MIDI getDuration", duratoinWithinTolerence);  
!!!29062967.java!!!	testAMRGetDuration() : void
      int duration = CodecTest.getDuration(MediaNames.AMR);  
      duratoinWithinTolerence = verifyDuration(duration, MediaNames.AMR_LENGTH);
      assertTrue("AMR getDuration", duratoinWithinTolerence);  
!!!29063095.java!!!	testMP3CBRGetCurrentPosition() : void
      boolean currentPosition = CodecTest.getCurrentPosition(MediaNames.MP3CBR);       
      assertTrue("MP3CBR GetCurrentPosition", currentPosition);  
!!!29063223.java!!!	testMP3VBRGetCurrentPosition() : void
      boolean currentPosition = CodecTest.getCurrentPosition(MediaNames.MP3VBR);  
      assertTrue("MP3VBR GetCurrentPosition", currentPosition);  
!!!29063351.java!!!	testMIDIGetCurrentPosition() : void
      boolean currentPosition = CodecTest.getCurrentPosition(MediaNames.MIDI);  
      assertTrue("MIDI GetCurrentPosition", currentPosition);  
!!!29063479.java!!!	testAMRGetCurrentPosition() : void
      boolean currentPosition = CodecTest.getCurrentPosition(MediaNames.AMR);  
      assertTrue("AMR GetCurrentPosition", currentPosition);  
!!!29063607.java!!!	testMP3CBRPause() : void
      boolean isPaused = CodecTest.pause(MediaNames.MP3CBR);       
      assertTrue("MP3CBR Pause", isPaused);  
!!!29063735.java!!!	testMP3VBRPause() : void
      boolean isPaused = CodecTest.pause(MediaNames.MP3VBR);  
      assertTrue("MP3VBR Pause", isPaused);  
!!!29063863.java!!!	testMIDIPause() : void
      boolean isPaused = CodecTest.pause(MediaNames.MIDI);  
      assertTrue("MIDI Pause", isPaused);  
!!!29063991.java!!!	testAMRPause() : void
      boolean isPaused = CodecTest.pause(MediaNames.AMR);  
      assertTrue("AMR Pause", isPaused);  
!!!29064119.java!!!	testMP3CBRPrepareStopRelease() : void
      CodecTest.prepareStopRelease(MediaNames.MP3CBR);       
      assertTrue("MP3CBR prepareStopRelease", true);  
!!!29064247.java!!!	testMIDIPrepareStopRelease() : void
      CodecTest.prepareStopRelease(MediaNames.MIDI);  
      assertTrue("MIDI prepareStopRelease", true);  
!!!29064375.java!!!	testMP3CBRSeekBeforeStart() : void
      boolean seekBeforePlay = CodecTest.seektoBeforeStart(MediaNames.MP3CBR);       
      assertTrue("MP3CBR SeekBeforePlay", seekBeforePlay);  
!!!29064503.java!!!	testMP3CBRSetLooping() : void
      boolean isLoop = CodecTest.setLooping(MediaNames.MP3CBR);     
      assertTrue("MP3CBR setLooping", isLoop);  
!!!29064631.java!!!	testMP3VBRSetLooping() : void
      boolean isLoop = CodecTest.setLooping(MediaNames.MP3VBR);
      Log.v(TAG, "setLooping");
      assertTrue("MP3VBR setLooping", isLoop);  
!!!29064759.java!!!	testMIDISetLooping() : void
      boolean isLoop = CodecTest.setLooping(MediaNames.MIDI);  
      assertTrue("MIDI setLooping", isLoop);  
!!!29064887.java!!!	testAMRSetLooping() : void
      boolean isLoop = CodecTest.setLooping(MediaNames.AMR);  
      assertTrue("AMR setLooping", isLoop);  
!!!29065015.java!!!	testMP3CBRSeekTo() : void
      boolean isLoop = CodecTest.seekTo(MediaNames.MP3CBR);     
      assertTrue("MP3CBR seekTo", isLoop);  
!!!29065143.java!!!	testMP3VBRSeekTo() : void
      boolean isLoop = CodecTest.seekTo(MediaNames.MP3VBR);
      Log.v(TAG, "seekTo");
      assertTrue("MP3VBR seekTo", isLoop);  
!!!29065271.java!!!	testMIDISeekTo() : void
      boolean isLoop = CodecTest.seekTo(MediaNames.MIDI);  
      assertTrue("MIDI seekTo", isLoop);  
!!!29065399.java!!!	testAMRSeekTo() : void
      boolean isLoop = CodecTest.seekTo(MediaNames.AMR);  
      assertTrue("AMR seekTo", isLoop);  
!!!29065527.java!!!	testMP3CBRSeekToEnd() : void
      boolean isEnd = CodecTest.seekToEnd(MediaNames.MP3CBR);     
      assertTrue("MP3CBR seekToEnd", isEnd);  
!!!29065655.java!!!	testMP3VBRSeekToEnd() : void
      boolean isEnd = CodecTest.seekToEnd(MediaNames.MP3VBR);
      Log.v(TAG, "seekTo");
      assertTrue("MP3VBR seekToEnd", isEnd);  
!!!29065783.java!!!	testMIDISeekToEnd() : void
      boolean isEnd = CodecTest.seekToEnd(MediaNames.MIDI);  
      assertTrue("MIDI seekToEnd", isEnd);  
!!!29065911.java!!!	testAMRSeekToEnd() : void
      boolean isEnd = CodecTest.seekToEnd(MediaNames.AMR);  
      assertTrue("AMR seekToEnd", isEnd);  
!!!29066039.java!!!	testWAVSeekToEnd() : void
        boolean isEnd = CodecTest.seekToEnd(MediaNames.WAV);
        assertTrue("WAV seekToEnd", isEnd);
!!!29066167.java!!!	testLargeVideoHeigth() : void
      int height = 0;
      height = CodecTest.videoHeight(MediaNames.VIDEO_LARGE_SIZE_3GP);
      Log.v(TAG, "Video height = " +  height);
      assertEquals("streaming video height", 240, height);           
!!!29066295.java!!!	testLargeVideoWidth() : void
      int width = 0;
      width = CodecTest.videoWidth(MediaNames.VIDEO_LARGE_SIZE_3GP);
      Log.v(TAG, "Video width = " +  width);
      assertEquals("streaming video width", 320, width);           
!!!29066423.java!!!	testVideoMP4SeekTo() : void
      boolean isSeek = CodecTest.videoSeekTo(MediaNames.VIDEO_MP4);
      assertTrue("Local MP4 SeekTo", isSeek);          
!!!29066551.java!!!	testVideoH263AACSeekTo() : void
      boolean isSeek = CodecTest.videoSeekTo(MediaNames.VIDEO_H263_AAC);
      assertTrue("H263AAC SeekTo", isSeek);         
!!!29066679.java!!!	testVideoH263AMRSeekTo() : void
      boolean isSeek = CodecTest.videoSeekTo(MediaNames.VIDEO_H263_AMR);
      assertTrue("H263AMR SeekTo", isSeek);         
!!!29066807.java!!!	testVideoH264AACSeekTo() : void
      boolean isSeek = CodecTest.videoSeekTo(MediaNames.VIDEO_H264_AAC);
      assertTrue("H264AAC SeekTo", isSeek);         
!!!29066935.java!!!	testVideoH264AMRSeekTo() : void
      boolean isSeek = CodecTest.videoSeekTo(MediaNames.VIDEO_H264_AMR);
      assertTrue("H264AMR SeekTo", isSeek);         
!!!29067063.java!!!	testVideoWebmSeekTo() : void
      boolean isSeek = CodecTest.videoSeekTo(MediaNames.VIDEO_WEBM);
      assertTrue("WEBM SeekTo", isSeek);
!!!29067191.java!!!	testSoundRecord() : void
      boolean isRecordered = CodecTest.mediaRecorderRecord(MediaNames.RECORDER_OUTPUT);
      assertTrue("Recorder", isRecordered);         
!!!29067319.java!!!	testGetThumbnail() : void
      boolean getThumbnail = CodecTest.getThumbnail(MediaNames.VIDEO_H264_AAC, MediaNames.GOLDEN_THUMBNAIL_OUTPUT);
      assertTrue("Get Thumbnail", getThumbnail);         
!!!29067447.java!!!	testMidiResources() : void
      boolean midiResources = CodecTest.resourcesPlayback(MediaFrameworkTest.midiafd,16000);
      assertTrue("Play midi from resources", midiResources);         
!!!29067575.java!!!	testMp3Resources() : void
      boolean mp3Resources = CodecTest.resourcesPlayback(MediaFrameworkTest.mp3afd,25000);
      assertTrue("Play mp3 from resources", mp3Resources);         
!!!29067703.java!!!	testPrepareAsyncReset() : void
      //assertTrue(MediaFrameworkTest.checkStreamingServer());
      boolean isReset = CodecTest.prepareAsyncReset(MediaNames.STREAM_MP3);
      assertTrue("PrepareAsync Reset", isReset);         
!!!29067831.java!!!	testIsLooping() : void
        boolean isLooping = CodecTest.isLooping(MediaNames.AMR);
        assertTrue("isLooping", isLooping);
!!!29067959.java!!!	testIsLoopingAfterReset() : void
        boolean isLooping = CodecTest.isLoopingAfterReset(MediaNames.AMR);
        assertTrue("isLooping after reset", isLooping);
!!!29068087.java!!!	testLocalMp3PrepareAsyncCallback() : void
        boolean onPrepareSuccess = 
            CodecTest.prepareAsyncCallback(MediaNames.MP3CBR, false);
        assertTrue("LocalMp3prepareAsyncCallback", onPrepareSuccess);
!!!29068215.java!!!	testLocalH263AMRPrepareAsyncCallback() : void
        boolean onPrepareSuccess =
            CodecTest.prepareAsyncCallback(MediaNames.VIDEO_H263_AMR, false);
        assertTrue("testLocalH263AMRPrepareAsyncCallback", onPrepareSuccess);
!!!29068343.java!!!	testStreamPrepareAsyncCallback() : void
        //assertTrue(MediaFrameworkTest.checkStreamingServer());
        boolean onPrepareSuccess = 
            CodecTest.prepareAsyncCallback(MediaNames.STREAM_H264_480_360_1411k, false);
        assertTrue("StreamH264PrepareAsyncCallback", onPrepareSuccess);
!!!29068471.java!!!	testStreamPrepareAsyncCallbackReset() : void
        //assertTrue(MediaFrameworkTest.checkStreamingServer());
        boolean onPrepareSuccess = 
            CodecTest.prepareAsyncCallback(MediaNames.STREAM_H264_480_360_1411k, true);
        assertTrue("StreamH264PrepareAsyncCallback", onPrepareSuccess);
