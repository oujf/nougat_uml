class Camera2Focuser
!!!29074487.java!!!	Camera2Focuser(inout camera : CameraDevice, inout session : CameraCaptureSession, inout requestSurface : Surface, inout listener : Camera2Focuser::AutoFocusListener, inout staticInfo : CameraCharacteristics, inout handler : Handler)
        if (camera == null) {
            throw new IllegalArgumentException("camera must not be null");
        }
        if (session == null) {
            throw new IllegalArgumentException("session must not be null");
        }
        if (listener == null) {
            throw new IllegalArgumentException("listener must not be null");
        }
        if (handler == null) {
            throw new IllegalArgumentException("handler must not be null");
        }
        if (requestSurface == null) {
            throw new IllegalArgumentException("requestSurface must not be null");
        }
        if (staticInfo == null) {
            throw new IllegalArgumentException("staticInfo must not be null");
        }

        mCamera = camera;
        mSession = session;
        mRequestSurface = requestSurface;
        mAutoFocusListener = listener;
        mStaticInfo = new StaticMetadata(staticInfo,
                StaticMetadata.CheckLevel.ASSERT, /*collector*/null);
        mHandler = handler;

        if (!mStaticInfo.hasFocuser()) {
            throw new IllegalArgumentException("this camera doesn't have a focuser");
        }

        /**
         * Begin by always being in passive auto focus.
         */
        cancelAutoFocus();
!!!29074615.java!!!	onAutoFocusSuccess(inout result : CaptureResult, inout locked : boolean) : void
        mSuccess = true;
        mLocked = locked;

        if (locked) {
            dispatchAutoFocusStatusLocked(/*success*/true);
        }
!!!29074743.java!!!	onAutoFocusFail(inout result : CaptureResult, inout locked : boolean) : void
        mSuccess = false;
        mLocked = locked;

        if (locked) {
            dispatchAutoFocusStatusLocked(/*success*/false);
        }
!!!29074871.java!!!	onAutoFocusScan(inout result : CaptureResult) : void
        mSuccess = false;
        mLocked = false;
!!!29074999.java!!!	onAutoFocusInactive(inout result : CaptureResult) : void
        mSuccess = false;
        mLocked = false;
!!!29075127.java!!!	touchForAutoFocus(inout afRegions : MeteringRectangle) : void
        startAutoFocusLocked(/*active*/true, afRegions);
!!!29075255.java!!!	startAutoFocus(inout afRegions : MeteringRectangle) : void
        startAutoFocusLocked(/*forceActive*/false, afRegions);
!!!29075383.java!!!	cancelAutoFocus() : void
        mSuccess = false;
        mLocked = false;

        // reset the AF regions:
        setAfRegions(null);

        // Create request builders, the af regions are automatically updated.
        mRepeatingBuilder = createRequestBuilder();
        CaptureRequest.Builder requestBuilder = createRequestBuilder();
        mAutoFocus.setPassiveAutoFocus(/*picture*/true, mRepeatingBuilder);
        mAutoFocus.unlockAutoFocus(mRepeatingBuilder, requestBuilder);
        CaptureCallback listener = createCaptureListener();
        mSession.setRepeatingRequest(mRepeatingBuilder.build(), listener, mHandler);
        mSession.capture(requestBuilder.build(), listener, mHandler);
!!!29075511.java!!!	getCurrentAfMode() : int
        if (mRepeatingBuilder == null) {
            throw new IllegalStateException("Auto focus is not running, unable to get AF mode");
        }

        return mRepeatingBuilder.get(CaptureRequest.CONTROL_AF_MODE);
!!!29075639.java!!!	startAutoFocusLocked(inout forceActive : boolean, inout afRegions : MeteringRectangle) : void

        setAfRegions(afRegions);
        mAfRun++;

        // Create request builders, the af regions are automatically updated.
        mRepeatingBuilder = createRequestBuilder();
        CaptureRequest.Builder requestBuilder = createRequestBuilder();
        if (forceActive) {
            startAutoFocusFullActiveLocked();
        } else {
            // Not forcing a full active scan. If AF passively focused, lock it. If AF is already
            // locked, return. Otherwise, initiate a full active scan.
            if (mSuccess && mLocked) {
                dispatchAutoFocusStatusLocked(/*success*/true);
                return;
            } else if (mSuccess) {
                mAutoFocus.lockAutoFocus(mRepeatingBuilder, requestBuilder);
                CaptureCallback listener = createCaptureListener();
                mSession.setRepeatingRequest(mRepeatingBuilder.build(), listener, mHandler);
                mSession.capture(requestBuilder.build(), listener, mHandler);
            } else {
                startAutoFocusFullActiveLocked();
            }
        }
!!!29075767.java!!!	startAutoFocusFullActiveLocked() : void
        // Create request builders, the af regions are automatically updated.
        mRepeatingBuilder = createRequestBuilder();
        CaptureRequest.Builder requestBuilder = createRequestBuilder();
        mAutoFocus.setActiveAutoFocus(mRepeatingBuilder, requestBuilder);
        if (mRepeatingBuilder.get(CaptureRequest.CONTROL_AF_TRIGGER)
                != CaptureRequest.CONTROL_AF_TRIGGER_IDLE) {
            throw new AssertionError("Wrong trigger set in repeating request");
        }
        if (requestBuilder.get(CaptureRequest.CONTROL_AF_TRIGGER)
                != CaptureRequest.CONTROL_AF_TRIGGER_START) {
            throw new AssertionError("Wrong trigger set in queued request");
        }
        mAutoFocus.resetState();

        CaptureCallback listener = createCaptureListener();
        mSession.setRepeatingRequest(mRepeatingBuilder.build(), listener, mHandler);
        mSession.capture(requestBuilder.build(), listener, mHandler);
!!!29075895.java!!!	dispatchAutoFocusStatusLocked(in success : boolean) : void
        mHandler.post(new Runnable() {
            @Override
            public void run() {
                mAutoFocusListener.onAutoFocusLocked(success);
            }
        });
!!!29076023.java!!!	createRequestBuilder() : CaptureRequest::Builder
        CaptureRequest.Builder requestBuilder =
                mCamera.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);

        requestBuilder.set(CaptureRequest.CONTROL_AF_REGIONS, mAfRegions);
        requestBuilder.addTarget(mRequestSurface);

        return requestBuilder;
!!!29076151.java!!!	setAfRegions(inout afRegions : MeteringRectangle) : void
        if (afRegions == null) {
            setDefaultAfRegions();
            return;
        }
        // Throw IAE if AF regions are malformed.
        if (afRegions.length == 0) {
            throw new IllegalArgumentException("afRegions is malformed, length: 0");
        }

        mAfRegions = afRegions;
!!!29076279.java!!!	setDefaultAfRegions() : void
        // Initialize AF regions with all zeros, meaning that it is up to camera device to device
        // the regions used by AF.
        mAfRegions = new MeteringRectangle[] {
                new MeteringRectangle(0, 0, 0, 0, MeteringRectangle.METERING_WEIGHT_DONT_CARE)};
!!!29076407.java!!!	createCaptureListener() : CameraCaptureSession::CaptureCallback

        int thisAfRun;
        synchronized (this) {
            thisAfRun = mAfRun;
        }

        final int finalAfRun = thisAfRun;

        return new CaptureCallback() {
            private long mLatestFrameCount = -1;

            @Override
            public void onCaptureProgressed(CameraCaptureSession session, CaptureRequest request,
                    CaptureResult result) {
                // In case of a partial result, send to focuser if necessary
                // 3A fields are present
                if (result.get(CaptureResult.CONTROL_AF_STATE) != null &&
                        result.get(CaptureResult.CONTROL_AF_MODE) != null) {
                    if (VERBOSE) {
                        Log.v(TAG, "Focuser - got early AF state");
                    }

                    dispatchToFocuser(result);
                }
            }

            @Override
            public void onCaptureCompleted(CameraCaptureSession session, CaptureRequest request,
                    TotalCaptureResult result) {
                    dispatchToFocuser(result);
            }

            private void dispatchToFocuser(CaptureResult result) {
                int afRun;
                synchronized (Camera2Focuser.this) {
                    // In case of partial results, don't send AF update twice
                    long frameCount = result.getFrameNumber();
                    if (frameCount <= mLatestFrameCount) return;
                    mLatestFrameCount = frameCount;

                    afRun = mAfRun;
                }

                if (afRun != finalAfRun) {
                    if (VERBOSE) {
                        Log.w(TAG,
                                "onCaptureCompleted - Ignoring results from previous AF run "
                                + finalAfRun);
                    }
                    return;
                }

                mAutoFocus.onCaptureCompleted(result);
            }
        };
