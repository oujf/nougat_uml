class Camera2SwitchPreviewTest
!!!29136311.java!!!	setUp() : void
        super.setUp();
!!!29136439.java!!!	tearDown() : void
        super.tearDown();
!!!29136567.java!!!	testPreviewSwitchBackFrontCamera() : void
        List<String> mCameraColorOutputIds = cameraColorOutputCheck();
        // Test iteration starts...
        Log.i(TAG, "Testing preview switch back/front camera in still capture mode");
        for (int iteration = 0; iteration < getIterationCount(); ++iteration) {
            for (String id : mCameraColorOutputIds) {
                try {
                    openDevice(id);
                    // Preview for basic still capture:
                    Log.v(TAG, String.format("Preview pictures: %d/%d", iteration + 1,
                            getIterationCount()));
                    stillCapturePreviewPreparer(id);
                    getResultPrinter().printStatus(getIterationCount(), iteration + 1, id);
                } finally {
                    closeDevice();
                    closeImageReader();
                }
            }
        }
!!!29136695.java!!!	testPreviewSwitchBackFrontVideo() : void
        List<String> mCameraColorOutputIds = cameraColorOutputCheck();
        // Test iteration starts...
        Log.i(TAG, "Testing preview switch back/front camera in video mode");
        for (int iteration = 0; iteration < getIterationCount(); ++iteration) {
            for (String id : mCameraColorOutputIds) {
                try {
                    openDevice(id);
                    // Preview for basic video recording:
                    Log.v(TAG, String.format("Preview for recording videos: %d/%d", iteration + 1,
                            getIterationCount()));
                    recordingPreviewPreparer(id);
                    getResultPrinter().printStatus(getIterationCount(), iteration + 1, id);
                } finally {
                    closeDevice();
                    releaseRecorder();
                }
            }
        }
!!!29136823.java!!!	testPreviewSwitchBackCameraVideo() : void
        String id = mCameraIds[0];
        openDevice(id);
        if (!mStaticInfo.isColorOutputSupported()) {
            Log.i(TAG, "Camera " + id +
                    " does not support color outputs, skipping");
            return;
        }
        closeDevice();
        // Test iteration starts...
        Log.i(TAG, "Testing preview switch between still capture/video modes for back camera");
        for (int iteration = 0; iteration < getIterationCount(); ++iteration) {
            try {
                openDevice(id);

                // Preview for basic still capture:
                Log.v(TAG, String.format("Preview pictures: %d/%d", iteration + 1,
                        getIterationCount()));
                stillCapturePreviewPreparer(id);
                getResultPrinter().printStatus(getIterationCount(), iteration + 1, id);

                // Preview for basic video recording:
                Log.v(TAG, String.format("Preview for recording videos: %d/%d", iteration + 1,
                        getIterationCount()));
                recordingPreviewPreparer(id);
                getResultPrinter().printStatus(getIterationCount(), iteration + 1, id);
            } finally {
                closeDevice();
                closeImageReader();
            }
        }
!!!29136951.java!!!	testPreviewSwitchFrontCameraVideo() : void
        String id = mCameraIds[1];
        openDevice(id);
        if (!mStaticInfo.isColorOutputSupported()) {
            Log.i(TAG, "Camera " + id +
                    " does not support color outputs, skipping");
            return;
        }
        closeDevice();
        // Test iteration starts...
        Log.i(TAG, "Testing preview switch between still capture/video modes for front camera");
        for (int iteration = 0; iteration < getIterationCount(); ++iteration) {
            try {
                openDevice(id);

                // Preview for basic still capture:
                Log.v(TAG, String.format("Preview pictures: %d/%d", iteration + 1,
                        getIterationCount()));
                stillCapturePreviewPreparer(id);
                getResultPrinter().printStatus(getIterationCount(), iteration + 1, id);

                // Preview for basic video recording:
                Log.v(TAG, String.format("Preview for recording videos: %d/%d", iteration + 1,
                        getIterationCount()));
                recordingPreviewPreparer(id);
                getResultPrinter().printStatus(getIterationCount(), iteration + 1, id);
            } finally {
                closeDevice();
                closeImageReader();
            }
        }
!!!29137079.java!!!	stillCapturePreviewPreparer(inout id : String) : void
        CaptureResult result;
        SimpleCaptureCallback resultListener = new SimpleCaptureCallback();
        SimpleImageReaderListener imageListener = new SimpleImageReaderListener();
        CaptureRequest.Builder previewRequest =
                mCamera.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);
        CaptureRequest.Builder stillRequest =
                mCamera.createCaptureRequest(CameraDevice.TEMPLATE_STILL_CAPTURE);
        // Preview Setup:
        prepareCapturePreview(previewRequest, stillRequest, resultListener, imageListener);

        Thread.sleep(getTestWaitIntervalMs());
!!!29137207.java!!!	recordingPreviewPreparer(inout id : String) : void
        // Re-use the MediaRecorder object for the same camera device.
        mMediaRecorder = new MediaRecorder();
        initSupportedVideoSize(id);
        // preview Setup:
        basicRecordingPreviewTestByCamera(mCamcorderProfileList);

        Thread.sleep(getTestWaitIntervalMs());
!!!29137335.java!!!	initSupportedVideoSize(inout cameraId : String) : void
        Size maxVideoSize = SIZE_BOUND_1080P;
        if (CamcorderProfile.hasProfile(CamcorderProfile.QUALITY_2160P)) {
            maxVideoSize = SIZE_BOUND_2160P;
        }
        mSupportedVideoSizes =
                getSupportedVideoSizes(cameraId, mCameraManager, maxVideoSize);
!!!29137463.java!!!	basicRecordingPreviewTestByCamera(inout camcorderProfileList : int) : void
        Size maxPreviewSize = mOrderedPreviewSizes.get(0);
        List<Range<Integer> > fpsRanges = Arrays.asList(
                mStaticInfo.getAeAvailableTargetFpsRangesChecked());
        int cameraId = Integer.parseInt(mCamera.getId());
        int maxVideoFrameRate = -1;
        int profileId = camcorderProfileList[0];
        if (!CamcorderProfile.hasProfile(cameraId, profileId) ||
                allowedUnsupported(cameraId, profileId)) {
            return;
        }

        CamcorderProfile profile = CamcorderProfile.get(cameraId, profileId);
        Size videoSz = new Size(profile.videoFrameWidth, profile.videoFrameHeight);
        Range<Integer> fpsRange = new Range(profile.videoFrameRate, profile.videoFrameRate);
        if (maxVideoFrameRate < profile.videoFrameRate) {
                maxVideoFrameRate = profile.videoFrameRate;
        }
        if (mStaticInfo.isHardwareLevelLegacy() &&
                (videoSz.getWidth() > maxPreviewSize.getWidth() ||
                        videoSz.getHeight() > maxPreviewSize.getHeight())) {
            // Skip. Legacy mode can only do recording up to max preview size
            return;
        }
        assertTrue("Video size " + videoSz.toString() + " for profile ID " + profileId +
                            " must be one of the camera device supported video size!",
                    mSupportedVideoSizes.contains(videoSz));
        assertTrue("Frame rate range " + fpsRange + " (for profile ID " + profileId +
                            ") must be one of the camera device available FPS range!",
                fpsRanges.contains(fpsRange));

        if (VERBOSE) {
            Log.v(TAG, "Testing camera recording with video size " + videoSz.toString());
        }

        // Configure preview and recording surfaces.
        mOutMediaFileName = VIDEO_FILE_PATH + "/test_video.mp4";
        if (DEBUG_DUMP) {
            mOutMediaFileName = VIDEO_FILE_PATH + "/test_video_" + cameraId + "_"
                    + videoSz.toString() + ".mp4";
        }

        prepareRecordingWithProfile(profile);

        // prepare preview surface by using video size.
        updatePreviewSurfaceWithVideo(videoSz, profile.videoFrameRate);

        CaptureRequest.Builder previewRequest =
                mCamera.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);
        CaptureRequest.Builder recordingRequest =
                mCamera.createCaptureRequest(CameraDevice.TEMPLATE_RECORD);

        SimpleCaptureCallback resultListener = new SimpleCaptureCallback();
        SimpleImageReaderListener imageListener = new SimpleImageReaderListener();

        prepareVideoPreview(previewRequest, recordingRequest, resultListener, imageListener);

        // Can reuse the MediaRecorder object after reset.
        mMediaRecorder.reset();

        if (maxVideoFrameRate != -1) {
            // At least one CamcorderProfile is present, check FPS
            assertTrue("At least one CamcorderProfile must support >= 24 FPS",
                    maxVideoFrameRate >= 24);
        }
!!!29137591.java!!!	releaseRecorder() : void
        if (mMediaRecorder != null) {
            mMediaRecorder.release();
            mMediaRecorder = null;
        }
!!!29137719.java!!!	cameraColorOutputCheck() : String
        List<String> mCameraColorOutputIds = new ArrayList<String>();
        for (String id : mCameraIds) {
            openDevice(id);
            if (!mStaticInfo.isColorOutputSupported()) {
                Log.i(TAG, "Camera " + id +
                        " does not support color outputs, skipping");
                continue;
            }
            mCameraColorOutputIds.add(id);
            closeDevice();
        }
        return mCameraColorOutputIds;
!!!29137847.java!!!	allowedUnsupported(in cameraId : int, in profileId : int) : boolean
        if (!mStaticInfo.isHardwareLevelLegacy()) {
            return false;
        }

        switch(profileId) {
            case CamcorderProfile.QUALITY_2160P:
            case CamcorderProfile.QUALITY_1080P:
            case CamcorderProfile.QUALITY_HIGH:
                return !CamcorderProfile.hasProfile(cameraId, profileId) ||
                        CamcorderProfile.get(cameraId, profileId).videoFrameWidth >= 1080;
        }
        return false;
!!!29137975.java!!!	prepareRecordingWithProfile(inout profile : CamcorderProfile) : void
        // Prepare MediaRecorder.
        mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.CAMCORDER);
        mMediaRecorder.setVideoSource(MediaRecorder.VideoSource.SURFACE);
        mMediaRecorder.setProfile(profile);
        mMediaRecorder.setOutputFile(mOutMediaFileName);
        if (mPersistentSurface != null) {
            mMediaRecorder.setInputSurface(mPersistentSurface);
            mRecordingSurface = mPersistentSurface;
        }
        mMediaRecorder.prepare();
        if (mPersistentSurface == null) {
            mRecordingSurface = mMediaRecorder.getSurface();
        }
        assertNotNull("Recording surface must be non-null!", mRecordingSurface);
        mVideoFrameRate = profile.videoFrameRate;
        mVideoSize = new Size(profile.videoFrameWidth, profile.videoFrameHeight);
!!!29138103.java!!!	updatePreviewSurfaceWithVideo(inout videoSize : Size, in videoFrameRate : int) : void
        if (mOrderedPreviewSizes == null) {
            throw new IllegalStateException("supported preview size list is not initialized yet");
        }
        final float FRAME_DURATION_TOLERANCE = 0.01f;
        long videoFrameDuration = (long) (1e9 / videoFrameRate *
                (1.0 + FRAME_DURATION_TOLERANCE));
        HashMap<Size, Long> minFrameDurationMap = mStaticInfo.
                getAvailableMinFrameDurationsForFormatChecked(ImageFormat.PRIVATE);
        Size maxPreviewSize = mOrderedPreviewSizes.get(0);
        Size previewSize = null;
        if (videoSize.getWidth() > maxPreviewSize.getWidth() ||
                videoSize.getHeight() > maxPreviewSize.getHeight()) {
            for (Size s : mOrderedPreviewSizes) {
                Long frameDuration = minFrameDurationMap.get(s);
                if (mStaticInfo.isHardwareLevelLegacy()) {
                    // Legacy doesn't report min frame duration
                    frameDuration = new Long(0);
                }
                assertTrue("Cannot find minimum frame duration for private size" + s,
                        frameDuration != null);
                if (frameDuration <= videoFrameDuration &&
                        s.getWidth() <= videoSize.getWidth() &&
                        s.getHeight() <= videoSize.getHeight()) {
                    Log.w(TAG, "Overwrite preview size from " + videoSize.toString() +
                            " to " + s.toString());
                    previewSize = s;
                    break;
                    // If all preview size doesn't work then we fallback to video size
                }
            }
        }
        if (previewSize == null) {
            previewSize = videoSize;
        }

        updatePreviewSurface(previewSize);
!!!29138231.java!!!	prepareVideoPreview(inout previewRequest : CaptureRequest::Builder, inout recordingRequest : CaptureRequest::Builder, inout resultListener : CameraCaptureSession::CaptureCallback, inout imageListener : ImageReader::OnImageAvailableListener) : void

        // Configure output streams with preview and jpeg streams.
        List<Surface> outputSurfaces = new ArrayList<Surface>();
        outputSurfaces.add(mPreviewSurface);
        outputSurfaces.add(mRecordingSurface);

        mSessionListener = new BlockingSessionCallback();
        mSession = configureCameraSession(mCamera, outputSurfaces, mSessionListener, mHandler);

        previewRequest.addTarget(mPreviewSurface);
        recordingRequest.addTarget(mPreviewSurface);
        recordingRequest.addTarget(mRecordingSurface);

        // Start preview.
        mSession.setRepeatingRequest(previewRequest.build(), null, mHandler);
!!!29138359.java!!!	prepareCapturePreview(inout previewRequest : CaptureRequest::Builder, inout stillRequest : CaptureRequest::Builder, inout resultListener : CameraCaptureSession::CaptureCallback, inout imageListener : ImageReader::OnImageAvailableListener) : void

        Size captureSz = mOrderedStillSizes.get(0);
        Size previewSz = mOrderedPreviewSizes.get(1);

        if (VERBOSE) {
            Log.v(TAG, String.format("Prepare single capture (%s) and preview (%s)",
                    captureSz.toString(), previewSz.toString()));
        }

        // Update preview size.
        updatePreviewSurface(previewSz);

        // Create ImageReader.
        createImageReader(captureSz, ImageFormat.JPEG, MAX_READER_IMAGES, imageListener);

        // Configure output streams with preview and jpeg streams.
        List<Surface> outputSurfaces = new ArrayList<Surface>();
        outputSurfaces.add(mPreviewSurface);
        outputSurfaces.add(mReaderSurface);
        mSessionListener = new BlockingSessionCallback();
        mSession = configureCameraSession(mCamera, outputSurfaces, mSessionListener, mHandler);

        // Configure the requests.
        previewRequest.addTarget(mPreviewSurface);
        stillRequest.addTarget(mPreviewSurface);
        stillRequest.addTarget(mReaderSurface);

        // Start preview.
        mSession.setRepeatingRequest(previewRequest.build(), resultListener, mHandler);
