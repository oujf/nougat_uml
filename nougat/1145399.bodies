class ByteArrayHelpers
!!!29142583.java!!!	toByteArray(inout array : byte) : byte
        return array;
!!!29142711.java!!!	toByteArray(inout array : short) : byte
        return toByteArray(array, Short.SIZE);
!!!29142839.java!!!	toByteArray(inout array : char) : byte
        return toByteArray(array, Character.SIZE);
!!!29142967.java!!!	toByteArray(inout array : int) : byte
        return toByteArray(array, Integer.SIZE);
!!!29143095.java!!!	toByteArray(inout array : long) : byte
        return toByteArray(array, Long.SIZE);
!!!29143223.java!!!	toByteArray(inout array : float) : byte
        return toByteArray(array, Float.SIZE);
!!!29143351.java!!!	toByteArray(inout array : double) : byte
        return toByteArray(array, Double.SIZE);
!!!29143479.java!!!	toByteArray(inout array : T) : byte
        @SuppressWarnings("unchecked")
        Class<T> klass = (Class<T>) array.getClass();

        if (!klass.isArray()) {
            throw new IllegalArgumentException("array class must be an array");
        }

        Class<?> componentClass = klass.getComponentType();

        if (!componentClass.isPrimitive()) {
            throw new IllegalArgumentException("array's component must be a primitive");
        }

        int sizeInBits;
        if (klass == int.class) {
            sizeInBits = Integer.SIZE;
        } else if (klass == float.class) {
            sizeInBits = Float.SIZE;
        } else if (klass == double.class) {
            sizeInBits = Double.SIZE;
        } else if (klass == short.class) {
            sizeInBits = Short.SIZE;
        } else if (klass == char.class) {
            sizeInBits = Character.SIZE;
        } else if (klass == long.class) {
            sizeInBits = Long.SIZE;
        } else if (klass == byte.class) {
            sizeInBits = Byte.SIZE;
        } else {
            throw new AssertionError();
        }

        return toByteArray(array, sizeInBits);
!!!29143607.java!!!	toByteArray(inout  : Number...numbers) : byte
        if (numbers.length == 0) {
            throw new IllegalArgumentException("too few numbers");
        }

        if (VERBOSE) Log.v(TAG, "toByteArray - input: " + Arrays.toString(numbers));

        // Have a large enough capacity to fit in every number as a double
        ByteBuffer byteBuffer = ByteBuffer.allocate(numbers.length * (Double.SIZE / Byte.SIZE))
                .order(ByteOrder.nativeOrder());

        for (int i = 0; i < numbers.length; ++i) {
            Number value = numbers[i];
            Class<? extends Number> klass = value.getClass();

            if (VERBOSE) Log.v(TAG, "toByteArray - number " + i + ", class " + klass);

            if (klass == Integer.class) {
                byteBuffer.putInt((Integer)value);
            } else if (klass == Float.class) {
                byteBuffer.putFloat((Float)value);
            } else if (klass == Double.class) {
                byteBuffer.putDouble((Double)value);
            } else if (klass == Short.class) {
                byteBuffer.putShort((Short)value);
            } else if (klass == Long.class) {
                byteBuffer.putLong((Long)value);
            } else if (klass == Byte.class) {
                byteBuffer.put((Byte)value);
            } else {
                throw new IllegalArgumentException(
                        "number class invalid; must be wrapper around primitive class");
            }
        }

        if (VERBOSE) Log.v(TAG, "toByteArray - end of loop");

        // Each number written is at least 1 byte, so the position should be at least length
        if (numbers.length != 0 && byteBuffer.position() < numbers.length) {
            throw new AssertionError(String.format(
                    "Had %d numbers, but byte buffer position was only %d",
                    numbers.length, byteBuffer.position()));
        }

        byteBuffer.flip();

        byte[] bytes = new byte[byteBuffer.limit()];
        byteBuffer.get(bytes);

        if (VERBOSE) Log.v(TAG, "toByteArray - output: " + Arrays.toString(bytes));

        return bytes;
!!!29143735.java!!!	toByteArray(inout array : T, in sizeOfTBits : int) : byte
        @SuppressWarnings("unchecked")
        Class<T> klass = (Class<T>) array.getClass();

        if (!klass.isArray()) {
            throw new IllegalArgumentException("array class must be an array");
        }

        int sizeOfT = sizeOfTBits / Byte.SIZE;
        int byteLength = Array.getLength(array) * sizeOfT;

        if (klass == byte[].class) {
            // Always return a copy
            return Arrays.copyOf((byte[])array, byteLength);
        }

        ByteBuffer byteBuffer = ByteBuffer.allocate(byteLength).order(ByteOrder.nativeOrder());

        if (klass == int[].class) {
            byteBuffer.asIntBuffer().put((int[])array);
        } else if (klass == float[].class) {
            byteBuffer.asFloatBuffer().put((float[])array);
        } else if (klass == double[].class) {
            byteBuffer.asDoubleBuffer().put((double[])array);
        } else if (klass == short[].class) {
            byteBuffer.asShortBuffer().put((short[])array);
        } else if (klass == char[].class) {
            byteBuffer.asCharBuffer().put((char[])array);
        } else if (klass == long[].class) {
            byteBuffer.asLongBuffer().put((long[])array);
        } else {
            throw new IllegalArgumentException("array class invalid; must be a primitive array");
        }

        return byteBuffer.array();
!!!29143863.java!!!	ByteArrayHelpers()
        throw new AssertionError();
