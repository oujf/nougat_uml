class SimplePlayerController
!!!29186487.java!!!	SimplePlayerController(inout context : Context, in playPausebuttonId : int, in stopButtonId : int, inout fileName : String, in stream : int)
            super(context, playPausebuttonId, stopButtonId, fileName);
            
            mPlayImageResource = android.R.drawable.ic_media_play;
            mPauseImageResource = android.R.drawable.ic_media_pause;
            mStreamType = stream;
            mFileName = Environment.getExternalStorageDirectory().toString() + "/music/" +
                        mFileNameBase + "_" + ".wav";
!!!29186615.java!!!	SimplePlayerController(inout context : Context, in playPausebuttonId : int, in stopButtonId : int, in fileResId : int, in stream : int)
            super(context, playPausebuttonId, stopButtonId, fileResId);
            
            mPlayImageResource = android.R.drawable.ic_media_play;
            mPauseImageResource = android.R.drawable.ic_media_pause;
            mStreamType = stream;
            mFileName = "";
!!!29186743.java!!!	playOrPause() : void
            Log.e(TAG, "playOrPause playing: "+((mMediaPlayer == null)?false:!mMediaPlayer.isPlaying())+
                    " mMediaPlayer: "+mMediaPlayer+
                    " mFileName: "+mFileName+
                    " mLastRecordedFile: "+mLastRecordedFile);
            if (mMediaPlayer == null || !mMediaPlayer.isPlaying()){
                if (mMediaPlayer == null) {
                    if (mFileName != mLastRecordedFile) {
                        mFileName = mLastRecordedFile;
                        Log.e(TAG, "new recorded file: "+mFileName);
                    }
                    try {
                        mMediaPlayer = new MediaPlayer();
                        if (mFileName.equals("")) {
                            Log.e(TAG, "Playing from resource");
                            AssetFileDescriptor afd = mContext.getResources().openRawResourceFd(mFileResId);
                            mMediaPlayer.setDataSource(afd.getFileDescriptor(), afd.getStartOffset(), afd.getLength());
                            afd.close();
                        } else {
                            Log.e(TAG, "Playing file: "+mFileName);
                            mMediaPlayer.setDataSource(mFileName);
                        }
                        mMediaPlayer.setAudioStreamType(mStreamType);
                        mMediaPlayer.prepare();
                        mMediaPlayer.setLooping(true);
                    } catch (Exception ex) {
                        Log.e(TAG, "mMediaPlayercreate failed:", ex);
                        mMediaPlayer.release();
                        mMediaPlayer = null;
                    }

                    if (mMediaPlayer != null) {
                        mMediaPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                            @Override
                            public void onCompletion(MediaPlayer mp) {
                                updatePlayPauseButton();
                            }
                        });
                    }
                }
                if (mMediaPlayer != null) {
                    mMediaPlayer.start();
                }
            } else {
                mMediaPlayer.pause();
            }
            updatePlayPauseButton();
!!!29186871.java!!!	stop() : void
            if (mMediaPlayer != null) {
                mMediaPlayer.stop();
                mMediaPlayer.release();
                mMediaPlayer = null;
            }
            updatePlayPauseButton();
!!!29186999.java!!!	isPlaying() : boolean
            if (mMediaPlayer != null) {
                return mMediaPlayer.isPlaying();
            } else {
                return false;                
            }
