class PrivateInputStream
!!!29208759.java!!!	PrivateInputStream(inout p : BaseStream)
        mParent = p;
        mData = new byte[0];
        mIndex = 0;
        mOpen = true;
!!!29208887.java!!!	available() : int
        ensureOpen();
        return mData.length - mIndex;
!!!29209015.java!!!	read() : int
        ensureOpen();
        while (mData.length == mIndex) {
            if (!mParent.continueOperation(true, true)) {
                return -1;
            }
        }
        return (mData[mIndex++] & 0xFF);
!!!29209143.java!!!	read(inout b : byte) : int
        return read(b, 0, b.length);
!!!29209271.java!!!	read(inout b : byte, in offset : int, in length : int) : int

        if (b == null) {
            throw new IOException("buffer is null");
        }
        if ((offset | length) < 0 || length > b.length - offset) {
            throw new ArrayIndexOutOfBoundsException("index outof bound");
        }
        ensureOpen();

        int currentDataLength = mData.length - mIndex;
        int remainReadLength = length;
        int offset1 = offset;
        int result = 0;

        while (currentDataLength <= remainReadLength) {
            System.arraycopy(mData, mIndex, b, offset1, currentDataLength);
            mIndex += currentDataLength;
            offset1 += currentDataLength;
            result += currentDataLength;
            remainReadLength -= currentDataLength;

            if (!mParent.continueOperation(true, true)) {
                return result == 0 ? -1 : result;
            }
            currentDataLength = mData.length - mIndex;
        }
        if (remainReadLength > 0) {
            System.arraycopy(mData, mIndex, b, offset1, remainReadLength);
            mIndex += remainReadLength;
            result += remainReadLength;
        }
        return result;
!!!29209399.java!!!	writeBytes(inout body : byte, in start : int) : void

        int length = (body.length - start) + (mData.length - mIndex);
        byte[] temp = new byte[length];

        System.arraycopy(mData, mIndex, temp, 0, mData.length - mIndex);
        System.arraycopy(body, start, temp, mData.length - mIndex, body.length - start);

        mData = temp;
        mIndex = 0;
        notifyAll();
!!!29209527.java!!!	ensureOpen() : void
        mParent.ensureOpen();
        if (!mOpen) {
            throw new IOException("Input stream is closed");
        }
!!!29209655.java!!!	close() : void
        mOpen = false;
        mParent.streamClosed(true);
