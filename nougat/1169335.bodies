class SearchViewManager
!!!29518519.java!!!	SearchViewManager(inout listener : SearchViewManager::SearchManagerListener, inout savedState : Bundle)
        mListener = listener;
        mCurrentSearch = savedState != null ? savedState.getString(Shared.EXTRA_QUERY) : null;
!!!29518647.java!!!	setSearchMangerListener(inout listener : SearchViewManager::SearchManagerListener) : void
        mListener = listener;
!!!29518775.java!!!	install(inout actionBar : DocumentsToolbar, inout isFullBarSearch : boolean) : void
        mActionBar = actionBar;
        mMenuItem = actionBar.getSearchMenu();
        mSearchView = (SearchView) mMenuItem.getActionView();

        mSearchView.setOnQueryTextListener(this);
        mSearchView.setOnCloseListener(this);
        mSearchView.setOnSearchClickListener(this);
        mSearchView.setOnQueryTextFocusChangeListener(this);

        mFullBar = isFullBarSearch;
        if (mFullBar) {
            mMenuItem.setShowAsActionFlags(MenuItem.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW
                    | MenuItem.SHOW_AS_ACTION_ALWAYS);
            mMenuItem.setOnActionExpandListener(this);
        }

        restoreSearch();
!!!29518903.java!!!	updateMenu() : void
        if (isSearching() && mFullBar) {
            Menu menu = mActionBar.getMenu();
            menu.setGroupVisible(R.id.group_hide_when_searching, false);
        }
!!!29519031.java!!!	update(inout root : RootInfo) : void
        if (mMenuItem == null) {
            if (DEBUG) Log.d(TAG, "update called before Search MenuItem installed.");
            return;
        }

        if (mCurrentSearch != null) {
            mMenuItem.expandActionView();

            mSearchView.setIconified(false);
            mSearchView.clearFocus();
            mSearchView.setQuery(mCurrentSearch, false);
        } else {
            mSearchView.clearFocus();
            if (!mSearchView.isIconified()) {
                mIgnoreNextClose = true;
                mSearchView.setIconified(true);
            }

            if (mMenuItem.isActionViewExpanded()) {
                mMenuItem.collapseActionView();
            }
        }

        showMenu(root != null
                && ((root.flags & Root.FLAG_SUPPORTS_SEARCH) != 0));
!!!29519159.java!!!	showMenu(inout visible : boolean) : void
        if (mMenuItem == null) {
            if (DEBUG) Log.d(TAG, "showMenu called before Search MenuItem installed.");
            return;
        }

        if (!visible) {
            mCurrentSearch = null;
        }

        mMenuItem.setVisible(visible);
!!!29519287.java!!!	cancelSearch() : boolean
        if (isExpanded() || isSearching()) {
            // If the query string is not empty search view won't get iconified
            mSearchView.setQuery("", false);

            if (mFullBar) {
               onClose();
            } else {
                // Causes calling onClose(). onClose() is triggering directory content update.
                mSearchView.setIconified(true);
            }
            return true;
        }
        return false;
!!!29519415.java!!!	restoreSearch() : void
        if (isSearching()) {
            if(mFullBar) {
                mMenuItem.expandActionView();
            } else {
                mSearchView.setIconified(false);
            }
            onSearchExpanded();
            mSearchView.setQuery(mCurrentSearch, false);
            mSearchView.clearFocus();
        }
!!!29519543.java!!!	onSearchExpanded() : void
        mSearchExpanded = true;
        if(mFullBar) {
            Menu menu = mActionBar.getMenu();
            menu.setGroupVisible(R.id.group_hide_when_searching, false);
        }
!!!29519671.java!!!	onClose() : boolean
        mSearchExpanded = false;
        if (mIgnoreNextClose) {
            mIgnoreNextClose = false;
            return false;
        }

        // Refresh the directory if a search was done
        if (mCurrentSearch != null) {
            mCurrentSearch = null;
            if (mListener != null) {
                mListener.onSearchChanged(mCurrentSearch);
            }
        }

        if(mFullBar) {
            mMenuItem.collapseActionView();
        }
        mListener.onSearchFinished();

        return false;
!!!29519799.java!!!	onSaveInstanceState(inout state : Bundle) : void
        state.putString(Shared.EXTRA_QUERY, mCurrentSearch);
!!!29519927.java!!!	onClick(inout v : View) : void
        onSearchExpanded();
!!!29520055.java!!!	onQueryTextSubmit(inout query : String) : boolean
        mCurrentSearch = query;
        mSearchView.clearFocus();
        if (mListener != null) {
            mListener.onSearchChanged(mCurrentSearch);
        }
        return true;
!!!29520183.java!!!	onFocusChange(inout v : View, inout hasFocus : boolean) : void
        if (!hasFocus) {
            if (mCurrentSearch == null) {
                mSearchView.setIconified(true);
            } else if (TextUtils.isEmpty(mSearchView.getQuery())) {
                cancelSearch();
            }
        }
!!!29520311.java!!!	onQueryTextChange(inout newText : String) : boolean
        return false;
!!!29520439.java!!!	onMenuItemActionCollapse(inout item : MenuItem) : boolean
        Menu menu = mActionBar.getMenu();
        menu.setGroupVisible(R.id.group_hide_when_searching, true);

        // Handles case when search view is collapsed by using the arrow on the left of the bar
        if (isExpanded() || isSearching()) {
            cancelSearch();
            return false;
        }
        return true;
!!!29520567.java!!!	onMenuItemActionExpand(inout item : MenuItem) : boolean
        return true;
!!!29520695.java!!!	getCurrentSearch() : String
        return mCurrentSearch;
!!!29520823.java!!!	isSearching() : boolean
        return mCurrentSearch != null;
!!!29520951.java!!!	isExpanded() : boolean
        return mSearchExpanded;
