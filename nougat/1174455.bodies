class ViewDragCallback
!!!29564343.java!!!	ViewDragCallback(in gravity : int)
            mAbsGravity = gravity;
!!!29564471.java!!!	setDragger(inout dragger : ViewDragHelper) : void
            mDragger = dragger;
!!!29564599.java!!!	removeCallbacks() : void
            DrawerLayout.this.removeCallbacks(mPeekRunnable);
!!!29564727.java!!!	tryCaptureView(inout child : View, in pointerId : int) : boolean
            // Only capture views where the gravity matches what we're looking for.
            // This lets us use two ViewDragHelpers, one for each side drawer.
            return isDrawerView(child) && checkDrawerViewAbsoluteGravity(child, mAbsGravity)
                    && getDrawerLockMode(child) == LOCK_MODE_UNLOCKED;
!!!29564855.java!!!	onViewDragStateChanged(in state : int) : void
            updateDrawerState(mAbsGravity, state, mDragger.getCapturedView());
!!!29564983.java!!!	onViewPositionChanged(inout changedView : View, in left : int, in top : int, in dx : int, in dy : int) : void
            float offset;
            final int childWidth = changedView.getWidth();

            // This reverses the positioning shown in onLayout.
            if (checkDrawerViewAbsoluteGravity(changedView, Gravity.LEFT)) {
                offset = (float) (childWidth + left) / childWidth;
            } else {
                final int width = getWidth();
                offset = (float) (width - left) / childWidth;
            }
            setDrawerViewOffset(changedView, offset);
            changedView.setVisibility(offset == 0 ? INVISIBLE : VISIBLE);
            invalidate();
!!!29565111.java!!!	onViewCaptured(inout capturedChild : View, in activePointerId : int) : void
            final LayoutParams lp = (LayoutParams) capturedChild.getLayoutParams();
            lp.isPeeking = false;

            closeOtherDrawer();
!!!29565239.java!!!	closeOtherDrawer() : void
            final int otherGrav = mAbsGravity == Gravity.LEFT ? Gravity.RIGHT : Gravity.LEFT;
            final View toClose = findDrawerWithGravity(otherGrav);
            if (toClose != null) {
                closeDrawer(toClose);
            }
!!!29565367.java!!!	onViewReleased(inout releasedChild : View, in xvel : float, in yvel : float) : void
            // Offset is how open the drawer is, therefore left/right values
            // are reversed from one another.
            final float offset = getDrawerViewOffset(releasedChild);
            final int childWidth = releasedChild.getWidth();

            int left;
            if (checkDrawerViewAbsoluteGravity(releasedChild, Gravity.LEFT)) {
                left = xvel > 0 || xvel == 0 && offset > 0.5f ? 0 : -childWidth;
            } else {
                final int width = getWidth();
                left = xvel < 0 || xvel == 0 && offset > 0.5f ? width - childWidth : width;
            }

            mDragger.settleCapturedViewAt(left, releasedChild.getTop());
            invalidate();
!!!29565495.java!!!	onEdgeTouched(in edgeFlags : int, in pointerId : int) : void
            postDelayed(mPeekRunnable, PEEK_DELAY);
!!!29565623.java!!!	peekDrawer() : void
            final View toCapture;
            final int childLeft;
            final int peekDistance = mDragger.getEdgeSize();
            final boolean leftEdge = mAbsGravity == Gravity.LEFT;
            if (leftEdge) {
                toCapture = findDrawerWithGravity(Gravity.LEFT);
                childLeft = (toCapture != null ? -toCapture.getWidth() : 0) + peekDistance;
            } else {
                toCapture = findDrawerWithGravity(Gravity.RIGHT);
                childLeft = getWidth() - peekDistance;
            }
            // Only peek if it would mean making the drawer more visible and the drawer isn't locked
            if (toCapture != null && ((leftEdge && toCapture.getLeft() < childLeft) ||
                    (!leftEdge && toCapture.getLeft() > childLeft)) &&
                    getDrawerLockMode(toCapture) == LOCK_MODE_UNLOCKED) {
                final LayoutParams lp = (LayoutParams) toCapture.getLayoutParams();
                mDragger.smoothSlideViewTo(toCapture, childLeft, toCapture.getTop());
                lp.isPeeking = true;
                invalidate();

                closeOtherDrawer();

                cancelChildViewTouch();
            }
!!!29565751.java!!!	onEdgeLock(in edgeFlags : int) : boolean
            if (ALLOW_EDGE_LOCK) {
                final View drawer = findDrawerWithGravity(mAbsGravity);
                if (drawer != null && !isDrawerOpen(drawer)) {
                    closeDrawer(drawer);
                }
                return true;
            }
            return false;
!!!29565879.java!!!	onEdgeDragStarted(in edgeFlags : int, in pointerId : int) : void
            final View toCapture;
            if ((edgeFlags & ViewDragHelper.EDGE_LEFT) == ViewDragHelper.EDGE_LEFT) {
                toCapture = findDrawerWithGravity(Gravity.LEFT);
            } else {
                toCapture = findDrawerWithGravity(Gravity.RIGHT);
            }

            if (toCapture != null && getDrawerLockMode(toCapture) == LOCK_MODE_UNLOCKED) {
                mDragger.captureChildView(toCapture, pointerId);
            }
!!!29566007.java!!!	getViewHorizontalDragRange(inout child : View) : int
            return isDrawerView(child) ? child.getWidth() : 0;
!!!29566135.java!!!	clampViewPositionHorizontal(inout child : View, in left : int, in dx : int) : int
            if (checkDrawerViewAbsoluteGravity(child, Gravity.LEFT)) {
                return Math.max(-child.getWidth(), Math.min(left, 0));
            } else {
                final int width = getWidth();
                return Math.max(width - child.getWidth(), Math.min(left, width));
            }
!!!29566263.java!!!	clampViewPositionVertical(inout child : View, in top : int, in dy : int) : int
            return child.getTop();
