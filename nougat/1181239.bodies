class UriDerivativeLoader
!!!29592887.java!!!	loadInBackground() : Res
        synchronized (this) {
            if (isLoadInBackgroundCanceled()) {
                throw new OperationCanceledException();
            }
            mCancellationSignal = new CancellationSignal();
        }
        try {
            return loadInBackground(mParam, mCancellationSignal);
        } finally {
            synchronized (this) {
                mCancellationSignal = null;
            }
        }
!!!29593143.java!!!	cancelLoadInBackground() : void
        super.cancelLoadInBackground();

        synchronized (this) {
            if (mCancellationSignal != null) {
                mCancellationSignal.cancel();
            }
        }
!!!29593271.java!!!	deliverResult(inout result : Res) : void
        if (isReset()) {
            closeQuietly(result);
            return;
        }
        Res oldResult = mResult;
        mResult = result;

        if (isStarted()) {
            super.deliverResult(result);
        }

        if (oldResult != null && oldResult != result) {
            closeQuietly(oldResult);
        }
!!!29593399.java!!!	UriDerivativeLoader(inout context : Context, inout param : Param)
        super(context);
        mObserver = new ForceLoadContentObserver();
        mParam = param;
!!!29593527.java!!!	onStartLoading() : void
        if (mResult != null) {
            deliverResult(mResult);
        }
        if (takeContentChanged() || mResult == null) {
            forceLoad();
        }
!!!29593655.java!!!	onStopLoading() : void
        cancelLoad();
!!!29593783.java!!!	onCanceled(inout result : Res) : void
        closeQuietly(result);
!!!29593911.java!!!	onReset() : void
        super.onReset();

        // Ensure the loader is stopped
        onStopLoading();

        closeQuietly(mResult);
        mResult = null;

        getContext().getContentResolver().unregisterContentObserver(mObserver);
!!!29594039.java!!!	closeQuietly(inout result : Res) : void
        if (result instanceof AutoCloseable) {
            try {
                ((AutoCloseable) result).close();
            } catch (RuntimeException rethrown) {
                throw rethrown;
            } catch (Exception ignored) {
            }
        }
