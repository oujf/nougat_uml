class MultiSelectManager
!!!29687607.java!!!	MultiSelectManager(in recyclerView : RecyclerView, inout adapter : DocumentsAdapter, in mode : int, inout initialSelection : MultiSelectManager::Selection)

        this(new RuntimeSelectionEnvironment(recyclerView), adapter, mode, initialSelection);

        if (mode == MODE_MULTIPLE) {
            // TODO: Don't load this on low memory devices.
            mBandManager = new BandController();
        }

        recyclerView.addOnItemTouchListener(
                new RecyclerView.OnItemTouchListener() {
                    @Override
                    public boolean onInterceptTouchEvent(RecyclerView rv, MotionEvent e) {
                        if (mBandManager != null) {
                            return mBandManager.handleEvent(new MotionInputEvent(e, recyclerView));
                        }
                        return false;
                    }

                    @Override
                    public void onTouchEvent(RecyclerView rv, MotionEvent e) {
                        mBandManager.processInputEvent(
                                new MotionInputEvent(e, recyclerView));
                    }
                    @Override
                    public void onRequestDisallowInterceptTouchEvent(boolean disallowIntercept) {}
                });
!!!29687735.java!!!	MultiSelectManager(inout environment : MultiSelectManager::SelectionEnvironment, inout adapter : DocumentsAdapter, in mode : int, inout initialSelection : MultiSelectManager::Selection)

        assert(environment != null);
        assert(adapter != null);

        mEnvironment = environment;
        mAdapter = adapter;

        mSingleSelect = mode == MODE_SINGLE;
        if (initialSelection != null) {
            mSelection.copyFrom(initialSelection);
        }

        mAdapter.registerAdapterDataObserver(
                new RecyclerView.AdapterDataObserver() {

                    private List<String> mModelIds;

                    @Override
                    public void onChanged() {
                        mModelIds = mAdapter.getModelIds();

                        // Update the selection to remove any disappeared IDs.
                        mSelection.cancelProvisionalSelection();
                        mSelection.intersect(mModelIds);

                        if (mBandManager != null && mBandManager.isActive()) {
                            mBandManager.endBandSelect();
                        }
                    }

                    @Override
                    public void onItemRangeChanged(
                            int startPosition, int itemCount, Object payload) {
                        // No change in position. Ignoring.
                    }

                    @Override
                    public void onItemRangeInserted(int startPosition, int itemCount) {
                        mSelection.cancelProvisionalSelection();
                    }

                    @Override
                    public void onItemRangeRemoved(int startPosition, int itemCount) {
                        assert(startPosition >= 0);
                        assert(itemCount > 0);

                        mSelection.cancelProvisionalSelection();
                        // Remove any disappeared IDs from the selection.
                        mSelection.intersect(mModelIds);
                    }

                    @Override
                    public void onItemRangeMoved(int fromPosition, int toPosition, int itemCount) {
                        throw new UnsupportedOperationException();
                    }
                });
!!!29687863.java!!!	addCallback(inout callback : MultiSelectManager::Callback) : void
        mCallbacks.add(callback);
!!!29687991.java!!!	hasSelection() : boolean
        return !mSelection.isEmpty();
!!!29688119.java!!!	getSelection() : MultiSelectManager::Selection
        return mSelection;
!!!29688247.java!!!	getSelection(inout dest : MultiSelectManager::Selection) : MultiSelectManager::Selection
        dest.copyFrom(mSelection);
        return dest;
!!!29688375.java!!!	updateSelection(inout selection : MultiSelectManager::Selection) : void
        setItemsSelected(selection.toList(), true);
!!!29688503.java!!!	setItemsSelected(inout ids : Iterable<String>, inout selected : boolean) : boolean
        boolean changed = false;
        for (String id: ids) {
            boolean itemChanged = selected ? mSelection.add(id) : mSelection.remove(id);
            if (itemChanged) {
                notifyItemStateChanged(id, selected);
            }
            changed |= itemChanged;
        }
        notifySelectionChanged();
        return changed;
!!!29688631.java!!!	clearSelection() : void
        clearSelectionQuietly();
        notifySelectionChanged();
!!!29688759.java!!!	handleLayoutChanged() : void
        if (mBandManager != null) {
            mBandManager.handleLayoutChanged();
        }
!!!29688887.java!!!	clearSelectionQuietly() : void
        mRanger = null;

        if (!hasSelection()) {
            return;
        }

        Selection oldSelection = getSelection(new Selection());
        mSelection.clear();

        for (String id: oldSelection.getAll()) {
            notifyItemStateChanged(id, false);
        }
!!!29689015.java!!!	onLongPress(inout input : Events::InputEvent) : void
        if (DEBUG) Log.d(TAG, "Handling long press event.");

        if (!input.isOverItem()) {
            if (DEBUG) Log.i(TAG, "Cannot handle tap. No adapter position available.");
        }

        handleAdapterEvent(input);
!!!29689143.java!!!	onSingleTapUp(inout input : Events::InputEvent) : boolean
        if (DEBUG) Log.d(TAG, "Processing tap event.");
        if (!hasSelection()) {
            // No selection active - do nothing.
            return false;
        }

        if (!input.isOverItem()) {
            if (DEBUG) Log.d(TAG, "Activity has no position. Canceling selection.");
            clearSelection();
            return false;
        }

        handleAdapterEvent(input);
        return true;
!!!29689271.java!!!	handleAdapterEvent(inout input : Events::InputEvent) : void
        if (mRanger != null && input.isShiftKeyDown()) {
            mRanger.snapSelection(input.getItemPosition());

            // We're being lazy here notifying even when something might not have changed.
            // To make this more correct, we'd need to update the Ranger class to return
            // information about what has changed.
            notifySelectionChanged();
        } else {
            int position = input.getItemPosition();
            toggleSelection(position);
            setSelectionRangeBegin(position);
        }
!!!29689399.java!!!	toggleSelection(in position : int) : void
        // Position may be special "no position" during certain
        // transitional phases. If so, skip handling of the event.
        if (position == RecyclerView.NO_POSITION) {
            if (DEBUG) Log.d(TAG, "Ignoring toggle for element with no position.");
            return;
        }
        String id = mAdapter.getModelId(position);
        if (id != null) {
            toggleSelection(id);
        }
!!!29689527.java!!!	toggleSelection(inout modelId : String) : void
        assert(modelId != null);

        boolean changed = false;
        if (mSelection.contains(modelId)) {
            changed = attemptDeselect(modelId);
        } else {
            changed = attemptSelect(modelId);
        }

        if (changed) {
            notifySelectionChanged();
        }
!!!29689655.java!!!	startRangeSelection(in pos : int) : void
        attemptSelect(mAdapter.getModelId(pos));
        setSelectionRangeBegin(pos);
!!!29689783.java!!!	snapRangeSelection(in pos : int) : void
        assert(mRanger != null);

        mRanger.snapSelection(pos);
        notifySelectionChanged();
!!!29689911.java!!!	endRangeSelection() : void
        mRanger = null;
!!!29690039.java!!!	isRangeSelectionActive() : boolean
        return mRanger != null;
!!!29690167.java!!!	setSelectionRangeBegin(in position : int) : void
        if (position == RecyclerView.NO_POSITION) {
            return;
        }

        if (mSelection.contains(mAdapter.getModelId(position))) {
            mRanger = new Range(position);
        }
!!!29690295.java!!!	updateRange(in begin : int, in end : int, inout selected : boolean) : void
        assert(end >= begin);
        for (int i = begin; i <= end; i++) {
            String id = mAdapter.getModelId(i);
            if (id == null) {
                continue;
            }

            if (selected) {
                boolean canSelect = notifyBeforeItemStateChange(id, true);
                if (canSelect) {
                    if (mSingleSelect && hasSelection()) {
                        clearSelectionQuietly();
                    }
                    selectAndNotify(id);
                }
            } else {
                attemptDeselect(id);
            }
        }
!!!29690423.java!!!	selectAndNotify(inout modelId : String) : boolean
        boolean changed = mSelection.add(modelId);
        if (changed) {
            notifyItemStateChanged(modelId, true);
        }
        return changed;
!!!29690551.java!!!	attemptDeselect(inout id : String) : boolean
        assert(id != null);
        if (notifyBeforeItemStateChange(id, false)) {
            mSelection.remove(id);
            notifyItemStateChanged(id, false);
            if (DEBUG) Log.d(TAG, "Selection after deselect: " + mSelection);
            return true;
        } else {
            if (DEBUG) Log.d(TAG, "Select cancelled by listener.");
            return false;
        }
!!!29690679.java!!!	attemptSelect(inout id : String) : boolean
        assert(id != null);
        boolean canSelect = notifyBeforeItemStateChange(id, true);
        if (!canSelect) {
            return false;
        }
        if (mSingleSelect && hasSelection()) {
            clearSelectionQuietly();
        }

        selectAndNotify(id);
        return true;
!!!29690807.java!!!	notifyBeforeItemStateChange(inout id : String, inout nextState : boolean) : boolean
        int lastListener = mCallbacks.size() - 1;
        for (int i = lastListener; i > -1; i--) {
            if (!mCallbacks.get(i).onBeforeItemStateChange(id, nextState)) {
                return false;
            }
        }
        return true;
!!!29690935.java!!!	notifyItemStateChanged(inout id : String, inout selected : boolean) : void
        assert(id != null);
        int lastListener = mCallbacks.size() - 1;
        for (int i = lastListener; i > -1; i--) {
            mCallbacks.get(i).onItemStateChanged(id, selected);
        }
        mAdapter.onItemSelectionChanged(id);
!!!29691063.java!!!	notifySelectionChanged() : void
        int lastListener = mCallbacks.size() - 1;
        for (int i = lastListener; i > -1; i--) {
            mCallbacks.get(i).onSelectionChanged();
        }
