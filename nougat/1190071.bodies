class Selection
!!!29691959.java!!!	Selection()
            mSelection = new HashSet<String>();
            mProvisionalSelection = new HashSet<String>();
!!!29692087.java!!!	Selection(inout directoryKey : String, inout selection : Set<String>)
            mDirectoryKey = directoryKey;
            mSelection = selection;
            mProvisionalSelection = new HashSet<String>();
!!!29692215.java!!!	contains(inout id : String) : boolean
            return mSelection.contains(id) || mProvisionalSelection.contains(id);
!!!29692343.java!!!	getAll() : String
            return toList().toArray(new String[0]);
!!!29692471.java!!!	toList() : String
            ArrayList<String> selection = new ArrayList<String>(mSelection);
            selection.addAll(mProvisionalSelection);
            return selection;
!!!29692599.java!!!	size() : int
            return mSelection.size() + mProvisionalSelection.size();
!!!29692727.java!!!	isEmpty() : boolean
            return mSelection.isEmpty() && mProvisionalSelection.isEmpty();
!!!29692855.java!!!	setProvisionalSelection(inout newSelection : Set<String>) : String
            Map<String, Boolean> delta = new HashMap<>();

            for (String id: mProvisionalSelection) {
                // Mark each item that used to be in the selection but is unsaved and not in the new
                // provisional selection.
                if (!newSelection.contains(id) && !mSelection.contains(id)) {
                    delta.put(id, false);
                }
            }

            for (String id: mSelection) {
                // Mark each item that used to be in the selection but is unsaved and not in the new
                // provisional selection.
                if (!newSelection.contains(id)) {
                    delta.put(id, false);
                }
            }

            for (String id: newSelection) {
                // Mark each item that was not previously in the selection but is in the new
                // provisional selection.
                if (!mSelection.contains(id) && !mProvisionalSelection.contains(id)) {
                    delta.put(id, true);
                }
            }

            // Now, iterate through the changes and actually add/remove them to/from the current
            // selection. This could not be done in the previous loops because changing the size of
            // the selection mid-iteration changes iteration order erroneously.
            for (Map.Entry<String, Boolean> entry: delta.entrySet()) {
                String id = entry.getKey();
                if (entry.getValue()) {
                    mProvisionalSelection.add(id);
                } else {
                    mProvisionalSelection.remove(id);
                }
            }

            return delta;
!!!29692983.java!!!	applyProvisionalSelection() : void
            mSelection.addAll(mProvisionalSelection);
            mProvisionalSelection.clear();
!!!29693111.java!!!	cancelProvisionalSelection() : void
            mProvisionalSelection.clear();
!!!29693239.java!!!	add(inout id : String) : boolean
            if (!mSelection.contains(id)) {
                mSelection.add(id);
                return true;
            }
            return false;
!!!29693367.java!!!	remove(inout id : String) : boolean
            if (mSelection.contains(id)) {
                mSelection.remove(id);
                return true;
            }
            return false;
!!!29693495.java!!!	clear() : void
            mSelection.clear();
!!!29693623.java!!!	intersect(inout ids : Collection<String>) : void
            mSelection.retainAll(ids);
            mProvisionalSelection.retainAll(ids);
!!!29693751.java!!!	copyFrom(inout source : MultiSelectManager::Selection) : void
            mSelection.clear();
            mSelection.addAll(source.mSelection);

            mProvisionalSelection.clear();
            mProvisionalSelection.addAll(source.mProvisionalSelection);
!!!29693879.java!!!	toString() : String
            if (size() <= 0) {
                return "size=0, items=[]";
            }

            StringBuilder buffer = new StringBuilder(size() * 28);
            buffer.append("Selection{")
                .append("applied{size=" + mSelection.size())
                .append(", entries=" + mSelection)
                .append("}, provisional{size=" + mProvisionalSelection.size())
                .append(", entries=" + mProvisionalSelection)
                .append("}}");
            return buffer.toString();
!!!29694007.java!!!	hashCode() : int
            return mSelection.hashCode() ^ mProvisionalSelection.hashCode();
!!!29694135.java!!!	equals(inout that : Object) : boolean
          if (this == that) {
              return true;
          }

          if (!(that instanceof Selection)) {
              return false;
          }

          return mSelection.equals(((Selection) that).mSelection) &&
                  mProvisionalSelection.equals(((Selection) that).mProvisionalSelection);
!!!29694263.java!!!	setDirectoryKey(inout key : String) : void
            mDirectoryKey = key;
!!!29694391.java!!!	hasDirectoryKey(inout key : String) : boolean
            return key.equals(mDirectoryKey);
!!!29694519.java!!!	describeContents() : int
            return 0;
!!!29694647.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
            dest.writeString(mDirectoryKey);
            dest.writeStringList(new ArrayList<>(mSelection));
            // We don't include provisional selection since it is
            // typically coupled to some other runtime state (like a band).
