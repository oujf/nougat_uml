class ModelBackedDocumentsAdapter
!!!29736759.java!!!	ModelBackedDocumentsAdapter(inout env : DocumentsAdapter::Environment, inout iconHelper : IconHelper)
        mEnv = env;
        mIconHelper = iconHelper;
!!!29736887.java!!!	onCreateViewHolder(inout parent : ViewGroup, in viewType : int) : DocumentHolder
        DocumentHolder holder = null;
        final State state = mEnv.getDisplayState();
        switch (state.derivedMode) {
            case MODE_GRID:
                switch (viewType) {
                    case ITEM_TYPE_DIRECTORY:
                        holder = new GridDirectoryHolder(mEnv.getContext(), parent);
                        break;
                    case ITEM_TYPE_DOCUMENT:
                        holder = new GridDocumentHolder(mEnv.getContext(), parent, mIconHelper);
                        break;
                    default:
                        throw new IllegalStateException("Unsupported layout type.");
                }
                break;
            case MODE_LIST:
                holder = new ListDocumentHolder(mEnv.getContext(), parent, mIconHelper);
                break;
            default:
                throw new IllegalStateException("Unsupported layout mode.");
        }

        mEnv.initDocumentHolder(holder);
        return holder;
!!!29737015.java!!!	onBindViewHolder(inout holder : DocumentHolder, in position : int, inout payload : List<Object>) : void
        if (payload.contains(SELECTION_CHANGED_MARKER)) {
            final boolean selected = mEnv.isSelected(mModelIds.get(position));
            holder.setSelected(selected, true);
        } else {
            onBindViewHolder(holder, position);
        }
!!!29737143.java!!!	onBindViewHolder(inout holder : DocumentHolder, in position : int) : void
        String modelId = mModelIds.get(position);
        Cursor cursor = mEnv.getModel().getItem(modelId);
        holder.bind(cursor, modelId, mEnv.getDisplayState());

        final String docMimeType = getCursorString(cursor, Document.COLUMN_MIME_TYPE);
        final int docFlags = getCursorInt(cursor, Document.COLUMN_FLAGS);

        boolean enabled = mEnv.isDocumentEnabled(docMimeType, docFlags);
        boolean selected = mEnv.isSelected(modelId);
        if (!enabled) {
            assert(!selected);
        }
        holder.setEnabled(enabled);
        holder.setSelected(mEnv.isSelected(modelId), false);

        mEnv.onBindDocumentHolder(holder, cursor);
!!!29737271.java!!!	getItemCount() : int
        return mModelIds.size();
!!!29737399.java!!!	onModelUpdate(inout model : Model) : void
        if (DEBUG && mHiddenIds.size() > 0) {
            Log.d(TAG, "Updating model with hidden ids: " + mHiddenIds);
        }

        String[] modelIds = model.getModelIds();
        mModelIds = new ArrayList<>(modelIds.length);
        for (String id : modelIds) {
            if (!mHiddenIds.contains(id)) {
                mModelIds.add(id);
            } else {
                if (DEBUG) Log.d(TAG, "Omitting hidden id from model during update: " + id);
            }
        }

        // Finally remove any hidden ids that aren't present in the model.
        // This assumes that model updates represent a complete set of files.
        mHiddenIds.retainAll(mModelIds);
!!!29737527.java!!!	onModelUpdateFailed(inout e : Exception) : void
        Log.w(TAG, "Model update failed.", e);
        mModelIds.clear();
!!!29737655.java!!!	getModelId(in adapterPosition : int) : String
        return mModelIds.get(adapterPosition);
!!!29737783.java!!!	hide(inout  : String...ids) : SparseArray
        if (DEBUG) Log.d(TAG, "Hiding ids: " + ids);
        Set<String> toHide = Sets.newHashSet(ids);

        // Proceed backwards through the list of items, because each removal causes the
        // positions of all subsequent items to change.
        SparseArray<String> hiddenItems = new SparseArray<>();
        for (int i = mModelIds.size() - 1; i >= 0; --i) {
            String id = mModelIds.get(i);
            if (toHide.contains(id)) {
                mHiddenIds.add(id);
                hiddenItems.put(i, mModelIds.remove(i));
                notifyItemRemoved(i);
            }
        }

        return hiddenItems;
!!!29737911.java!!!	getModelIds() : String
        return mModelIds;
!!!29738039.java!!!	getItemViewType(in position : int) : int
        return isDirectory(mEnv.getModel(), position)
                ? ITEM_TYPE_DIRECTORY
                : ITEM_TYPE_DOCUMENT;
!!!29738167.java!!!	onItemSelectionChanged(inout id : String) : void
        int position = mModelIds.indexOf(id);

        if (position >= 0) {
            notifyItemChanged(position, SELECTION_CHANGED_MARKER);
        } else {
            Log.w(TAG, "Item change notification received for unknown item: " + id);
        }
