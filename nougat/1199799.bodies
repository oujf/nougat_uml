class RootsCacheTest
!!!29773879.java!!!	setUp() : void
        super.setUp();

        mRoots = Lists.newArrayList(
                mNull, mWild, mEmpty, mImages, mAudio, mDocs, mMalformed1, mMalformed2);

        mState = new State();
        mState.action = State.ACTION_OPEN;
        mState.showAdvanced = true;
        mState.localOnly = false;
!!!29774007.java!!!	testMatchingRoots_Everything() : void
        mState.acceptMimes = new String[] { "*/*" };
        assertContainsExactly(
                newArrayList(mNull, mWild, mImages, mAudio, mDocs, mMalformed1, mMalformed2),
                getMatchingRoots(mRoots, mState));
!!!29774135.java!!!	testMatchingRoots_DirectoryCopy() : void
        RootInfo downloads = buildForMimeTypes("*/*");
        downloads.authority = "com.android.providers.downloads.documents";
        mRoots.add(downloads);

        mState.acceptMimes = new String[] { "*/*" };
        mState.directoryCopy = true;

        // basically we're asserting that the results don't contain downloads
        assertContainsExactly(
                newArrayList(mNull, mWild, mImages, mAudio, mDocs, mMalformed1, mMalformed2),
                getMatchingRoots(mRoots, mState));
!!!29774263.java!!!	testMatchingRoots_PngOrWild() : void
        mState.acceptMimes = new String[] { "image/png", "*/*" };
        assertContainsExactly(
                newArrayList(mNull, mWild, mImages, mAudio, mDocs, mMalformed1, mMalformed2),
                getMatchingRoots(mRoots, mState));
!!!29774391.java!!!	testMatchingRoots_AudioWild() : void
        mState.acceptMimes = new String[] { "audio/*" };
        assertContainsExactly(
                newArrayList(mNull, mWild, mAudio),
                getMatchingRoots(mRoots, mState));
!!!29774519.java!!!	testMatchingRoots_AudioWildOrImageWild() : void
        mState.acceptMimes = new String[] { "audio/*", "image/*" };
        assertContainsExactly(
                newArrayList(mNull, mWild, mAudio, mImages),
                getMatchingRoots(mRoots, mState));
!!!29774647.java!!!	testMatchingRoots_AudioSpecific() : void
        mState.acceptMimes = new String[] { "audio/mpeg" };
        assertContainsExactly(
                newArrayList(mNull, mWild, mAudio),
                getMatchingRoots(mRoots, mState));
!!!29774775.java!!!	testMatchingRoots_Document() : void
        mState.acceptMimes = new String[] { "application/msword" };
        assertContainsExactly(
                newArrayList(mNull, mWild, mDocs),
                getMatchingRoots(mRoots, mState));
!!!29774903.java!!!	testMatchingRoots_Application() : void
        mState.acceptMimes = new String[] { "application/*" };
        assertContainsExactly(
                newArrayList(mNull, mWild, mAudio, mDocs),
                getMatchingRoots(mRoots, mState));
!!!29775031.java!!!	testMatchingRoots_FlacOrPng() : void
        mState.acceptMimes = new String[] { "application/x-flac", "image/png" };
        assertContainsExactly(
                newArrayList(mNull, mWild, mAudio, mImages),
                getMatchingRoots(mRoots, mState));
!!!29775159.java!!!	testExcludedAuthorities() : void
        final List<RootInfo> roots = newArrayList();

        // Set up some roots
        for (int i = 0; i < 5; ++i) {
            RootInfo root = new RootInfo();
            root.authority = "authority" + i;
            roots.add(root);
        }
        // Make some allowed authorities
        List<RootInfo> allowedRoots = newArrayList(
            roots.get(0), roots.get(2), roots.get(4));
        // Set up the excluded authority list
        for (RootInfo root: roots) {
            if (!allowedRoots.contains(root)) {
                mState.excludedAuthorities.add(root.authority);
            }
        }
        mState.acceptMimes = new String[] { "*/*" };

        assertContainsExactly(
            allowedRoots,
            getMatchingRoots(roots, mState));
!!!29775287.java!!!	assertContainsExactly(inout expected : List<?>, inout actual : List<?>) : void
        assertEquals(expected.size(), actual.size());
        for (Object o : expected) {
            assertTrue(actual.contains(o));
        }
!!!29775415.java!!!	buildForMimeTypes(inout  : String...mimeTypes) : RootInfo
        final RootInfo root = new RootInfo();
        root.derivedMimeTypes = mimeTypes;
        return root;
