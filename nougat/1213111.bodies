class KeyguardAbsKeyInputView
!!!29870519.java!!!	KeyguardAbsKeyInputView(inout context : Context)
        this(context, null);
!!!29870647.java!!!	KeyguardAbsKeyInputView(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);
!!!29870775.java!!!	setKeyguardCallback(inout callback : KeyguardSecurityCallback) : void
        mCallback = callback;
!!!29870903.java!!!	setLockPatternUtils(inout utils : LockPatternUtils) : void
        mLockPatternUtils = utils;
        mEnableHaptics = mLockPatternUtils.isTactileFeedbackEnabled();
!!!29871031.java!!!	reset() : void
        // start fresh
        mDismissing = false;
        resetPasswordText(false /* animate */, false /* announce */);
        // if the user is currently locked out, enforce it.
        long deadline = mLockPatternUtils.getLockoutAttemptDeadline(
                KeyguardUpdateMonitor.getCurrentUser());
        if (shouldLockout(deadline)) {
            handleAttemptLockout(deadline);
        } else {
            resetState();
        }
!!!29871159.java!!!	shouldLockout(in deadline : long) : boolean
        return deadline != 0;
!!!29871543.java!!!	onFinishInflate() : void
        mLockPatternUtils = new LockPatternUtils(mContext);
        mSecurityMessageDisplay = KeyguardMessageArea.findSecurityMessageDisplay(this);
        mEcaView = findViewById(R.id.keyguard_selector_fade_container);

        EmergencyButton button = (EmergencyButton) findViewById(R.id.emergency_call_button);
        if (button != null) {
            button.setCallback(this);
        }
!!!29871671.java!!!	onEmergencyButtonClickedWhenInCall() : void
        mCallback.reset();
!!!29871799.java!!!	getWrongPasswordStringId() : int
        return R.string.kg_wrong_password;
!!!29871927.java!!!	verifyPasswordAndUnlock() : void
        if (mDismissing) return; // already verified but haven't been dismissed; don't do it again.

        final String entry = getPasswordText();
        setPasswordEntryInputEnabled(false);
        if (mPendingLockCheck != null) {
            mPendingLockCheck.cancel(false);
        }

        final int userId = KeyguardUpdateMonitor.getCurrentUser();
        if (entry.length() <= MINIMUM_PASSWORD_LENGTH_BEFORE_REPORT) {
            // to avoid accidental lockout, only count attempts that are long enough to be a
            // real password. This may require some tweaking.
            setPasswordEntryInputEnabled(true);
            onPasswordChecked(userId, false /* matched */, 0, false /* not valid - too short */);
            return;
        }

        mPendingLockCheck = LockPatternChecker.checkPassword(
                mLockPatternUtils,
                entry,
                userId,
                new LockPatternChecker.OnCheckCallback() {
                    @Override
                    public void onChecked(boolean matched, int timeoutMs) {
                        setPasswordEntryInputEnabled(true);
                        mPendingLockCheck = null;
                        onPasswordChecked(userId, matched, timeoutMs,
                                true /* isValidPassword */);
                    }
                });
!!!29872055.java!!!	onPasswordChecked(in userId : int, inout matched : boolean, in timeoutMs : int, inout isValidPassword : boolean) : void
        boolean dismissKeyguard = KeyguardUpdateMonitor.getCurrentUser() == userId;
        if (matched) {
            mCallback.reportUnlockAttempt(userId, true, 0);
            if (dismissKeyguard) {
                mDismissing = true;
                mCallback.dismiss(true);
            }
        } else {
            if (isValidPassword) {
                mCallback.reportUnlockAttempt(userId, false, timeoutMs);
                if (timeoutMs > 0) {
                    long deadline = mLockPatternUtils.setLockoutAttemptDeadline(
                            userId, timeoutMs);
                    handleAttemptLockout(deadline);
                }
            }
            if (timeoutMs == 0) {
                mSecurityMessageDisplay.setMessage(getWrongPasswordStringId(), true);
            }
        }
        resetPasswordText(true /* animate */, !matched /* announce deletion if no match */);
!!!29872695.java!!!	handleAttemptLockout(in elapsedRealtimeDeadline : long) : void
        setPasswordEntryEnabled(false);
        long elapsedRealtime = SystemClock.elapsedRealtime();
        new CountDownTimer(elapsedRealtimeDeadline - elapsedRealtime, 1000) {

            @Override
            public void onTick(long millisUntilFinished) {
                int secondsRemaining = (int) (millisUntilFinished / 1000);
                mSecurityMessageDisplay.setMessage(
                        R.string.kg_too_many_failed_attempts_countdown, true, secondsRemaining);
            }

            @Override
            public void onFinish() {
                mSecurityMessageDisplay.setMessage("", false);
                resetState();
            }
        }.start();
!!!29872823.java!!!	onUserInput() : void
        if (mCallback != null) {
            mCallback.userActivity();
        }
        mSecurityMessageDisplay.setMessage("", false);
!!!29872951.java!!!	onKeyDown(in keyCode : int, inout event : KeyEvent) : boolean
        onUserInput();
        return false;
!!!29873079.java!!!	needsInput() : boolean
        return false;
!!!29873207.java!!!	onPause() : void
        if (mPendingLockCheck != null) {
            mPendingLockCheck.cancel(false);
            mPendingLockCheck = null;
        }
!!!29873335.java!!!	onResume(in reason : int) : void
        reset();
!!!29873463.java!!!	getCallback() : KeyguardSecurityCallback
        return mCallback;
!!!29873591.java!!!	showPromptReason(in reason : int) : void
        if (reason != PROMPT_REASON_NONE) {
            int promtReasonStringRes = getPromtReasonStringRes(reason);
            if (promtReasonStringRes != 0) {
                mSecurityMessageDisplay.setMessage(promtReasonStringRes,
                        true /* important */);
            }
        }
!!!29873719.java!!!	showMessage(inout message : String, in color : int) : void
        mSecurityMessageDisplay.setNextMessageColor(color);
        mSecurityMessageDisplay.setMessage(message, true /* important */);
!!!29873975.java!!!	doHapticKeyClick() : void
        if (mEnableHaptics) {
            performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY,
                    HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING
                    | HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
        }
!!!29874103.java!!!	startDisappearAnimation(inout finishRunnable : Runnable) : boolean
        return false;
