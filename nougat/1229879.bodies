class ExpandedEAPMethod
!!!30001207.java!!!	ExpandedEAPMethod(inout authInfoID : EAP::AuthInfoID, in length : int, inout payload : ByteBuffer)
        if (length != 7) {
            throw new ProtocolException("Bad length: " + payload.remaining());
        }

        mAuthInfoID = authInfoID;

        ByteBuffer vndBuffer = payload.duplicate().order(ByteOrder.BIG_ENDIAN);

        int id = vndBuffer.getShort() & SHORT_MASK;
        id = (id << Byte.SIZE) | (vndBuffer.get() & BYTE_MASK);
        mVendorID = id;
        mVendorType = vndBuffer.getInt() & INT_MASK;

        payload.position(payload.position()+7);
!!!30001335.java!!!	ExpandedEAPMethod(inout authInfoID : EAP::AuthInfoID, in vendorID : int, in vendorType : long)
        mAuthInfoID = authInfoID;
        mVendorID = vendorID;
        mVendorType = vendorType;
!!!30001463.java!!!	getAuthInfoID() : EAP::AuthInfoID
        return mAuthInfoID;
!!!30001591.java!!!	hashCode() : int
        return (mAuthInfoID.hashCode() * 31 + mVendorID) * 31 + (int) mVendorType;
!!!30001719.java!!!	equals(inout thatObject : Object) : boolean
        if (thatObject == this) {
            return true;
        } else if (thatObject == null || thatObject.getClass() != ExpandedEAPMethod.class) {
            return false;
        } else {
            ExpandedEAPMethod that = (ExpandedEAPMethod) thatObject;
            return that.getVendorID() == getVendorID() && that.getVendorType() == getVendorType();
        }
!!!30001847.java!!!	getVendorID() : int
        return mVendorID;
!!!30001975.java!!!	getVendorType() : long
        return mVendorType;
!!!30002103.java!!!	toString() : String
        return "Auth method " + mAuthInfoID + ", id " + mVendorID + ", type " + mVendorType + "\n";
