class WifiInfo
!!!35674039.java!!!	updatePacketRates(inout stats : WifiLinkLayerStats) : void
        if (stats != null) {
            long txgood = stats.txmpdu_be + stats.txmpdu_bk + stats.txmpdu_vi + stats.txmpdu_vo;
            long txretries = stats.retries_be + stats.retries_bk
                    + stats.retries_vi + stats.retries_vo;
            long rxgood = stats.rxmpdu_be + stats.rxmpdu_bk + stats.rxmpdu_vi + stats.rxmpdu_vo;
            long txbad = stats.lostmpdu_be + stats.lostmpdu_bk
                    + stats.lostmpdu_vi + stats.lostmpdu_vo;

            if (txBad <= txbad
                    && txSuccess <= txgood
                    && rxSuccess <= rxgood
                    && txRetries <= txretries) {
                txBadRate = (txBadRate * 0.5)
                        + ((double) (txbad - txBad) * 0.5);
                txSuccessRate = (txSuccessRate * 0.5)
                        + ((double) (txgood - txSuccess) * 0.5);
                rxSuccessRate = (rxSuccessRate * 0.5)
                        + ((double) (rxgood - rxSuccess) * 0.5);
                txRetriesRate = (txRetriesRate * 0.5)
                        + ((double) (txretries - txRetries) * 0.5);
            } else {
                txBadRate = 0;
                txSuccessRate = 0;
                rxSuccessRate = 0;
                txRetriesRate = 0;
            }
            txBad = txbad;
            txSuccess = txgood;
            rxSuccess = rxgood;
            txRetries = txretries;
        } else {
            txBad = 0;
            txSuccess = 0;
            rxSuccess = 0;
            txRetries = 0;
            txBadRate = 0;
            txSuccessRate = 0;
            rxSuccessRate = 0;
            txRetriesRate = 0;
        }
!!!35674167.java!!!	updatePacketRates(in txPackets : long, in rxPackets : long) : void
        //paranoia
        txBad = 0;
        txRetries = 0;
        txBadRate = 0;
        txRetriesRate = 0;
        if (txSuccess <= txPackets && rxSuccess <= rxPackets) {
            txSuccessRate = (txSuccessRate * 0.5)
                    + ((double) (txPackets - txSuccess) * 0.5);
            rxSuccessRate = (rxSuccessRate * 0.5)
                    + ((double) (rxPackets - rxSuccess) * 0.5);
        } else {
            txBadRate = 0;
            txRetriesRate = 0;
        }
        txSuccess = txPackets;
        rxSuccess = rxPackets;
!!!35674295.java!!!	WifiInfo()
        mWifiSsid = null;
        mBSSID = null;
        mNetworkId = -1;
        mSupplicantState = SupplicantState.UNINITIALIZED;
        mRssi = INVALID_RSSI;
        mLinkSpeed = -1;
        mFrequency = -1;
!!!35674423.java!!!	reset() : void
        setInetAddress(null);
        setBSSID(null);
        setSSID(null);
        setNetworkId(-1);
        setRssi(INVALID_RSSI);
        setLinkSpeed(-1);
        setFrequency(-1);
        setMeteredHint(false);
        setEphemeral(false);
        txBad = 0;
        txSuccess = 0;
        rxSuccess = 0;
        txRetries = 0;
        txBadRate = 0;
        txSuccessRate = 0;
        rxSuccessRate = 0;
        txRetriesRate = 0;
        lowRssiCount = 0;
        badRssiCount = 0;
        linkStuckCount = 0;
        score = 0;
!!!35674551.java!!!	WifiInfo(inout source : WifiInfo)
        if (source != null) {
            mSupplicantState = source.mSupplicantState;
            mBSSID = source.mBSSID;
            mWifiSsid = source.mWifiSsid;
            mNetworkId = source.mNetworkId;
            mRssi = source.mRssi;
            mLinkSpeed = source.mLinkSpeed;
            mFrequency = source.mFrequency;
            mIpAddress = source.mIpAddress;
            mMacAddress = source.mMacAddress;
            mMeteredHint = source.mMeteredHint;
            mEphemeral = source.mEphemeral;
            txBad = source.txBad;
            txRetries = source.txRetries;
            txSuccess = source.txSuccess;
            rxSuccess = source.rxSuccess;
            txBadRate = source.txBadRate;
            txRetriesRate = source.txRetriesRate;
            txSuccessRate = source.txSuccessRate;
            rxSuccessRate = source.rxSuccessRate;
            score = source.score;
            badRssiCount = source.badRssiCount;
            lowRssiCount = source.lowRssiCount;
            linkStuckCount = source.linkStuckCount;
        }
!!!35674679.java!!!	setSSID(inout wifiSsid : WifiSsid) : void
        mWifiSsid = wifiSsid;
!!!35674807.java!!!	getSSID() : String
        if (mWifiSsid != null) {
            String unicode = mWifiSsid.toString();
            if (!TextUtils.isEmpty(unicode)) {
                return "\"" + unicode + "\"";
            } else {
                String hex = mWifiSsid.getHexString();
                return (hex != null) ? hex : WifiSsid.NONE;
            }
        }
        return WifiSsid.NONE;
!!!35674935.java!!!	getWifiSsid() : WifiSsid
        return mWifiSsid;
!!!35675063.java!!!	setBSSID(inout BSSID : String) : void
        mBSSID = BSSID;
!!!35675191.java!!!	getBSSID() : String
        return mBSSID;
!!!35675319.java!!!	getRssi() : int
        return mRssi;
!!!35675447.java!!!	setRssi(in rssi : int) : void
        if (rssi < INVALID_RSSI)
            rssi = INVALID_RSSI;
        if (rssi > MAX_RSSI)
            rssi = MAX_RSSI;
        mRssi = rssi;
!!!35675575.java!!!	getLinkSpeed() : int
        return mLinkSpeed;
!!!35675703.java!!!	setLinkSpeed(in linkSpeed : int) : void
        this.mLinkSpeed = linkSpeed;
!!!35675831.java!!!	getFrequency() : int
        return mFrequency;
!!!35675959.java!!!	setFrequency(in frequency : int) : void
        this.mFrequency = frequency;
!!!35676087.java!!!	is24GHz() : boolean
        return ScanResult.is24GHz(mFrequency);
!!!35676215.java!!!	is5GHz() : boolean
        return ScanResult.is5GHz(mFrequency);
!!!35676343.java!!!	setMacAddress(inout macAddress : String) : void
        this.mMacAddress = macAddress;
!!!35676471.java!!!	getMacAddress() : String
        return mMacAddress;
!!!35676599.java!!!	hasRealMacAddress() : boolean
        return mMacAddress != null && !DEFAULT_MAC_ADDRESS.equals(mMacAddress);
!!!35676727.java!!!	setMeteredHint(inout meteredHint : boolean) : void
        mMeteredHint = meteredHint;
!!!35676855.java!!!	getMeteredHint() : boolean
        return mMeteredHint;
!!!35676983.java!!!	setEphemeral(inout ephemeral : boolean) : void
        mEphemeral = ephemeral;
!!!35677111.java!!!	isEphemeral() : boolean
        return mEphemeral;
!!!35677239.java!!!	setNetworkId(in id : int) : void
        mNetworkId = id;
!!!35677367.java!!!	getNetworkId() : int
        return mNetworkId;
!!!35677495.java!!!	getSupplicantState() : SupplicantState
        return mSupplicantState;
!!!35677623.java!!!	setSupplicantState(inout state : SupplicantState) : void
        mSupplicantState = state;
!!!35677751.java!!!	setInetAddress(inout address : InetAddress) : void
        mIpAddress = address;
!!!35677879.java!!!	getIpAddress() : int
        int result = 0;
        if (mIpAddress instanceof Inet4Address) {
            result = NetworkUtils.inetAddressToInt((Inet4Address)mIpAddress);
        }
        return result;
!!!35678007.java!!!	getHiddenSSID() : boolean
        if (mWifiSsid == null) return false;
        return mWifiSsid.isHidden();
!!!35678135.java!!!	getDetailedStateOf(inout suppState : SupplicantState) : NetworkInfo::DetailedState
        return stateMap.get(suppState);
!!!35678263.java!!!	setSupplicantState(inout stateName : String) : void
        mSupplicantState = valueOf(stateName);
!!!35678391.java!!!	valueOf(inout stateName : String) : SupplicantState
        if ("4WAY_HANDSHAKE".equalsIgnoreCase(stateName))
            return SupplicantState.FOUR_WAY_HANDSHAKE;
        else {
            try {
                return SupplicantState.valueOf(stateName.toUpperCase(Locale.ROOT));
            } catch (IllegalArgumentException e) {
                return SupplicantState.INVALID;
            }
        }
!!!35678519.java!!!	removeDoubleQuotes(inout string : String) : String
        if (string == null) return null;
        final int length = string.length();
        if ((length > 1) && (string.charAt(0) == '"') && (string.charAt(length - 1) == '"')) {
            return string.substring(1, length - 1);
        }
        return string;
!!!35678647.java!!!	toString() : String
        StringBuffer sb = new StringBuffer();
        String none = "<none>";

        sb.append("SSID: ").append(mWifiSsid == null ? WifiSsid.NONE : mWifiSsid).
            append(", BSSID: ").append(mBSSID == null ? none : mBSSID).
            append(", MAC: ").append(mMacAddress == null ? none : mMacAddress).
            append(", Supplicant state: ").
            append(mSupplicantState == null ? none : mSupplicantState).
            append(", RSSI: ").append(mRssi).
            append(", Link speed: ").append(mLinkSpeed).append(LINK_SPEED_UNITS).
            append(", Frequency: ").append(mFrequency).append(FREQUENCY_UNITS).
            append(", Net ID: ").append(mNetworkId).
            append(", Metered hint: ").append(mMeteredHint).
            append(", score: ").append(Integer.toString(score));
        return sb.toString();
!!!35678775.java!!!	describeContents() : int
        return 0;
!!!35678903.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        dest.writeInt(mNetworkId);
        dest.writeInt(mRssi);
        dest.writeInt(mLinkSpeed);
        dest.writeInt(mFrequency);
        if (mIpAddress != null) {
            dest.writeByte((byte)1);
            dest.writeByteArray(mIpAddress.getAddress());
        } else {
            dest.writeByte((byte)0);
        }
        if (mWifiSsid != null) {
            dest.writeInt(1);
            mWifiSsid.writeToParcel(dest, flags);
        } else {
            dest.writeInt(0);
        }
        dest.writeString(mBSSID);
        dest.writeString(mMacAddress);
        dest.writeInt(mMeteredHint ? 1 : 0);
        dest.writeInt(mEphemeral ? 1 : 0);
        dest.writeInt(score);
        dest.writeDouble(txSuccessRate);
        dest.writeDouble(txRetriesRate);
        dest.writeDouble(txBadRate);
        dest.writeDouble(rxSuccessRate);
        dest.writeInt(badRssiCount);
        dest.writeInt(lowRssiCount);
        mSupplicantState.writeToParcel(dest, flags);
