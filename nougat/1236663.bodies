class ClientKeyManager
!!!30048183.java!!!	ClientKeyManager(inout homeSP : HomeSP, inout keyStore : KeyStore)
        mKeyStore = keyStore;
        mAliasMap = new HashMap<>();
        mAliasMap.put(OSUCertType.AAA, OSUManager.CERT_CLT_CA_ALIAS + homeSP.getFQDN());
        mAliasMap.put(OSUCertType.Client, OSUManager.CERT_CLT_CERT_ALIAS + homeSP.getFQDN());
        mAliasMap.put(OSUCertType.PrivateKey, OSUManager.CERT_CLT_KEY_ALIAS + homeSP.getFQDN());
        mTempKeys = new HashMap<>();
!!!30048311.java!!!	reloadKeys(inout certs : Map<OSUCertType, List<X509Certificate>>, inout key : PrivateKey) : void
        List<X509Certificate> clientCerts = certs.get(OSUCertType.Client);
        X509Certificate[] certArray = new X509Certificate[clientCerts.size()];
        int n = 0;
        for (X509Certificate cert : clientCerts) {
            certArray[n++] = cert;
        }
        mTempKeys.put(OSUCertType.Client, certArray);
        mTempKeys.put(OSUCertType.PrivateKey, key);
!!!30048439.java!!!	chooseClientAlias(inout keyType : String, inout issuers : Principal, inout socket : Socket) : String
        if (mTempKeys.isEmpty()) {
            return mAliasMap.get(OSUCertType.Client);
        } else {
            return sTempAlias;
        }
!!!30048567.java!!!	getClientAliases(inout keyType : String, inout issuers : Principal) : String
        if (mTempKeys.isEmpty()) {
            String alias = mAliasMap.get(OSUCertType.Client);
            return alias != null ? new String[]{alias} : null;
        } else {
            return new String[]{sTempAlias};
        }
!!!30048695.java!!!	chooseServerAlias(inout keyType : String, inout issuers : Principal, inout socket : Socket) : String
        throw new UnsupportedOperationException();
!!!30048823.java!!!	getServerAliases(inout keyType : String, inout issuers : Principal) : String
        throw new UnsupportedOperationException();
!!!30048951.java!!!	getCertificateChain(inout alias : String) : X509Certificate
        if (mTempKeys.isEmpty()) {
            if (!mAliasMap.get(OSUCertType.Client).equals(alias)) {
                Log.w(OSUManager.TAG, "Bad cert alias requested: '" + alias + "'");
                return null;
            }
            try {
                List<X509Certificate> certs = new ArrayList<>();
                for (Certificate certificate :
                        mKeyStore.getCertificateChain(mAliasMap.get(OSUCertType.Client))) {
                    if (certificate instanceof X509Certificate) {
                        certs.add((X509Certificate) certificate);
                    }
                }
                return certs.toArray(new X509Certificate[certs.size()]);
            } catch (KeyStoreException kse) {
                Log.w(OSUManager.TAG, "Failed to retrieve certificates: " + kse);
                return null;
            }
        } else if (sTempAlias.equals(alias)) {
            return (X509Certificate[]) mTempKeys.get(OSUCertType.Client);
        } else {
            Log.w(OSUManager.TAG, "Bad cert alias requested: '" + alias + "'");
            return null;
        }
!!!30049079.java!!!	getPrivateKey(inout alias : String) : PrivateKey
        if (mTempKeys.isEmpty()) {
            if (!mAliasMap.get(OSUCertType.Client).equals(alias)) {
                Log.w(OSUManager.TAG, "Bad key alias requested: '" + alias + "'");
            }
            try {
                return (PrivateKey) mKeyStore.getKey(mAliasMap.get(OSUCertType.PrivateKey), null);
            } catch (GeneralSecurityException gse) {
                Log.w(OSUManager.TAG, "Failed to retrieve private key: " + gse);
                return null;
            }
        } else if (sTempAlias.equals(alias)) {
            return (PrivateKey) mTempKeys.get(OSUCertType.PrivateKey);
        } else {
            Log.w(OSUManager.TAG, "Bad cert alias requested: '" + alias + "'");
            return null;
        }
