class SubscriptionTimer
!!!30081719.java!!!	SubscriptionTimer(inout osuManager : OSUManager, inout wifiNetworkAdapter : WifiNetworkAdapter, inout context : Context)
        mOSUManager = osuManager;
        mWifiNetworkAdapter = wifiNetworkAdapter;
        mHandler = new Handler();
!!!30081847.java!!!	run() : void
        checkUpdates();
!!!30081975.java!!!	checkUpdates() : void
        mHandler.removeCallbacks(this);
        long now = System.currentTimeMillis();
        long next = Long.MAX_VALUE;
        Collection<HomeSP> homeSPs = mWifiNetworkAdapter.getLoadedSPs();
        if (homeSPs.isEmpty()) {
            return;
        }
        for (HomeSP homeSP : homeSPs) {
            UpdateAction updateAction = mOutstanding.get(homeSP);
            try {
                if (updateAction == null) {
                    updateAction = new UpdateAction(homeSP, now);
                    mOutstanding.put(homeSP, updateAction);
                } else if (updateAction.remediate(now)) {
                    mOSUManager.remediate(homeSP, false);
                    mOutstanding.put(homeSP, new UpdateAction(homeSP, now));
                } else if (updateAction.policyUpdate(now)) {
                    mOSUManager.remediate(homeSP, true);
                    mOutstanding.put(homeSP, new UpdateAction(homeSP, now));
                }
                next = Math.min(next, updateAction.nextExpiry(now));
            } catch (IOException | SAXException e) {
                Log.d(OSUManager.TAG, "Failed subscription update: " + e.getMessage());
            }
        }
        setAlarm(next);
!!!30082103.java!!!	setAlarm(in tod : long) : void
        long delay = tod - System.currentTimeMillis();
        mHandler.postAtTime(this, Math.max(1, delay));
