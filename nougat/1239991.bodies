class RedirectListener
!!!30080311.java!!!	RedirectListener(inout osuManager : OSUManager, inout spName : String)
        mOSUManager = osuManager;
        mSpName = spName;
        mServerSocket = new ServerSocket(0, 5, InetAddress.getLocalHost());
        Random rnd = new Random(System.currentTimeMillis());
        mPath = "rnd" + Integer.toString(Math.abs(rnd.nextInt()), Character.MAX_RADIX);
        mURL = new URL("http", mServerSocket.getInetAddress().getHostAddress(),
                mServerSocket.getLocalPort(), mPath);

        Log.d(TAG, "Redirect URL: " + mURL);
        setName("HS20-Redirect-Listener");
        setDaemon(true);
!!!30080439.java!!!	startService() : void
        start();
        synchronized (mLock) {
            long bail = System.currentTimeMillis() + ThreadTimeout;
            long remainder = ThreadTimeout;
            while (remainder > 0 && !mListening) {
                try {
                    mLock.wait(remainder);
                } catch (InterruptedException ie) {
                    /**/
                }
                if (mListening) {
                    break;
                }
                remainder = bail - System.currentTimeMillis();
            }
            if (!mListening) {
                throw new IOException("Failed to start listener");
            } else {
                Log.d(TAG, "OSU Redirect listener running");
            }
        }
!!!30080567.java!!!	waitForUser() : boolean
        boolean success;
        synchronized (mLock) {
            long bail = System.currentTimeMillis() + UserTimeout;
            long remainder = UserTimeout;
            while (remainder > 0 && mUserStatus == null) {
                try {
                    mLock.wait(remainder);
                } catch (InterruptedException ie) {
                    /**/
                }
                if (mUserStatus != null) {
                    break;
                }
                remainder = bail - System.currentTimeMillis();
            }
            success = mUserStatus == OSUOperationStatus.UserInputComplete;
        }
        abort();
        return success;
!!!30080695.java!!!	abort() : void
        try {
            mAborted = true;
            mServerSocket.close();
        } catch (IOException ioe) {
            /**/
        }
!!!30080823.java!!!	getURL() : URL
        return mURL;
!!!30080951.java!!!	run() : void
        int count = 0;
        synchronized (mLock) {
            mListening = true;
            mLock.notifyAll();
        }

        boolean terminate = false;

        for (; ; ) {
            count++;
            try (Socket instance = mServerSocket.accept()) {
                try (BufferedReader in = new BufferedReader(
                        new InputStreamReader(instance.getInputStream(), StandardCharsets.UTF_8))) {
                    boolean detected = false;
                    StringBuilder sb = new StringBuilder();
                    String s;
                    while ((s = in.readLine()) != null) {
                        sb.append(s).append('\n');
                        if (!detected && s.startsWith("GET")) {
                            String[] segments = s.split(" ");
                            if (segments.length == 3 &&
                                    segments[2].startsWith("HTTP/") &&
                                    segments[1].regionMatches(1, mPath, 0, mPath.length())) {
                                detected = true;
                            }
                        }
                        if (s.length() == 0) {
                            break;
                        }
                    }
                    Log.d(TAG, "Redirect receive: " + sb);
                    String response = null;
                    if (detected) {
                        response = status(OSUOperationStatus.UserInputComplete);
                        if (response == null) {
                            response = GoodBye;
                            terminate = true;
                        }
                    }
                    try (BufferedWriter out = new BufferedWriter(
                            new OutputStreamWriter(instance.getOutputStream(),
                                    StandardCharsets.UTF_8))) {

                        out.write(HTTPResponseHeader);
                        if (response != null) {
                            out.write(response);
                        }
                    }
                    if (terminate) {
                        break;
                    } else if (count > MaxRetry) {
                        status(OSUOperationStatus.UserInputAborted);
                        break;
                    }
                }
            } catch (IOException ioe) {
                if (mAborted) {
                    return;
                } else if (count > MaxRetry) {
                    status(OSUOperationStatus.UserInputAborted);
                    break;
                }
            }
        }
!!!30081079.java!!!	status(inout status : OSUOperationStatus) : String
        Log.d(TAG, "User input status: " + status);
        synchronized (mLock) {
            mUserStatus = status;
            mLock.notifyAll();
        }
        String message = (status == OSUOperationStatus.UserInputAborted) ?
                "Browser closed" : null;

        return mOSUManager.notifyUser(status, message, mSpName);
