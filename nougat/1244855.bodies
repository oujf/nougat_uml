class RemotePrintServicePlugin
!!!30096695.java!!!	RemotePrintServicePlugin(inout plugin : PrintServicePlugin, inout listener : RemotePrintServicePlugin::OnChangedListener, inout recommendsMultiVendorService : boolean)
        mListener = listener;
        mPlugin = plugin;
        this.recommendsMultiVendorService = recommendsMultiVendorService;

        // We handle any throwable to isolate our self from bugs in the plugin code.
        // Cache simple properties to avoid having to deal with exceptions later in the code.
        try {
            name = Preconditions.checkArgumentPositive(mPlugin.getName(), "name");
            packageName = Preconditions.checkStringNotEmpty(mPlugin.getPackageName(),
                    "packageName");
        } catch (Throwable e) {
            throw new PluginException(mPlugin, "Cannot cache simple properties ", e);
        }

        isRunning = false;
!!!30096823.java!!!	start() : void
        // We handle any throwable to isolate our self from bugs in the stub code
        try {
            synchronized (mLock) {
                isRunning = true;
                mPlugin.start(this);
            }
        } catch (Throwable e) {
            throw new PluginException(mPlugin, "Cannot start", e);
        }
!!!30096951.java!!!	stop() : void
        // We handle any throwable to isolate our self from bugs in the stub code
        try {
            synchronized (mLock) {
                mPlugin.stop();
                isRunning = false;
            }
        } catch (Throwable e) {
            throw new PluginException(mPlugin, "Cannot stop", e);
        }
!!!30097079.java!!!	getNumPrinters() : int
        return mNumPrinters;
!!!30097207.java!!!	onChanged(in numDiscoveredPrinters : int) : void
        synchronized (mLock) {
            Preconditions.checkState(isRunning);

            mNumPrinters = Preconditions.checkArgumentNonnegative(numDiscoveredPrinters,
                    "numDiscoveredPrinters");

            if (mNumPrinters > 0) {
                mListener.onChanged();
            }
        }
