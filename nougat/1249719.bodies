class CustomPrinterIconCache
!!!30117175.java!!!	CustomPrinterIconCache(inout cacheDirectory : File)
        mCacheDirectory = new File(cacheDirectory, "icons");
        if (!mCacheDirectory.exists()) {
            mCacheDirectory.mkdir();
        }
!!!30117303.java!!!	getIconFileName(inout printerId : PrinterId) : File
        StringBuffer sb = new StringBuffer(printerId.getServiceName().getPackageName());
        sb.append("-");

        try {
            MessageDigest md = MessageDigest.getInstance("SHA-1");
            md.update(
                    (printerId.getServiceName().getClassName() + ":" + printerId.getLocalId())
                            .getBytes("UTF-16"));
            sb.append(String.format("%#040x", new java.math.BigInteger(1, md.digest())));
        } catch (UnsupportedEncodingException|NoSuchAlgorithmException e) {
            Log.e(LOG_TAG, "Could not compute custom printer icon file name", e);
            return null;
        }

        return new File(mCacheDirectory, sb.toString());
!!!30117431.java!!!	getIcon(inout printerId : PrinterId) : Icon
        Icon icon;

        File iconFile = getIconFileName(printerId);
        if (iconFile != null && iconFile.exists()) {
            try (FileInputStream is = new FileInputStream(iconFile)) {
                icon = Icon.createFromStream(is);
            } catch (IOException e) {
                icon = null;
                Log.e(LOG_TAG, "Could not read icon from " + iconFile, e);
            }

            // Touch file so that it is the not likely to be removed
            iconFile.setLastModified(System.currentTimeMillis());
        } else {
            icon = null;
        }

        return icon;
!!!30117559.java!!!	removeOldFiles(in numFilesToKeep : int) : void
        File files[] = mCacheDirectory.listFiles();

        // To reduce the number of shrink operations, let the cache grow to twice the max size
        if (files.length > numFilesToKeep * 2) {
            SortedMap<Long, File> sortedFiles = new TreeMap<>();

            for (File f : files) {
                sortedFiles.put(f.lastModified(), f);
            }

            while (sortedFiles.size() > numFilesToKeep) {
                sortedFiles.remove(sortedFiles.firstKey());
            }
        }
!!!30117687.java!!!	onCustomPrinterIconLoaded(inout printerId : PrinterId, inout icon : Icon) : void
        File iconFile = getIconFileName(printerId);

        if (iconFile == null) {
            return;
        }

        try (FileOutputStream os = new FileOutputStream(iconFile)) {
            icon.writeToStream(os);
        } catch (IOException e) {
            Log.e(LOG_TAG, "Could not write icon for " + printerId + " to storage", e);
        }

        removeOldFiles(MAX_SIZE);
!!!30117815.java!!!	clear() : void
        for (File f : mCacheDirectory.listFiles()) {
            f.delete();
        }
