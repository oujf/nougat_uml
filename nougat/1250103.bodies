class NotificationController
!!!30118455.java!!!	NotificationController(inout context : Context)
        mContext = context;
        mNotificationManager = (NotificationManager)
                mContext.getSystemService(Context.NOTIFICATION_SERVICE);
        mNotifications = new ArraySet<>(0);
!!!30118583.java!!!	onUpdateNotifications(inout printJobs : List<PrintJobInfo>) : void
        List<PrintJobInfo> notifyPrintJobs = new ArrayList<>();

        final int printJobCount = printJobs.size();
        for (int i = 0; i < printJobCount; i++) {
            PrintJobInfo printJob = printJobs.get(i);
            if (shouldNotifyForState(printJob.getState())) {
                notifyPrintJobs.add(printJob);
            }
        }

        updateNotifications(notifyPrintJobs);
!!!30118711.java!!!	updateNotifications(inout printJobs : List<PrintJobInfo>) : void
        ArraySet<PrintJobId> removedPrintJobs = new ArraySet<>(mNotifications);

        final int numPrintJobs = printJobs.size();

        // Create summary notification
        if (numPrintJobs > 1) {
            createStackedNotification(printJobs);
        } else {
            mNotificationManager.cancel(PRINT_JOB_NOTIFICATION_SUMMARY, 0);
        }

        // Create per print job notification
        for (int i = 0; i < numPrintJobs; i++) {
            PrintJobInfo printJob = printJobs.get(i);
            PrintJobId printJobId = printJob.getId();

            removedPrintJobs.remove(printJobId);
            mNotifications.add(printJobId);

            createSimpleNotification(printJob);
        }

        // Remove notifications for print jobs that do not exist anymore
        final int numRemovedPrintJobs = removedPrintJobs.size();
        for (int i = 0; i < numRemovedPrintJobs; i++) {
            PrintJobId removedPrintJob = removedPrintJobs.valueAt(i);

            mNotificationManager.cancel(removedPrintJob.flattenToString(), 0);
            mNotifications.remove(removedPrintJob);
        }
!!!30118839.java!!!	createSimpleNotification(inout printJob : PrintJobInfo) : void
        switch (printJob.getState()) {
            case PrintJobInfo.STATE_FAILED: {
                createFailedNotification(printJob);
            } break;

            case PrintJobInfo.STATE_BLOCKED: {
                if (!printJob.isCancelling()) {
                    createBlockedNotification(printJob);
                } else {
                    createCancellingNotification(printJob);
                }
            } break;

            default: {
                if (!printJob.isCancelling()) {
                    createPrintingNotification(printJob);
                } else {
                    createCancellingNotification(printJob);
                }
            } break;
        }
!!!30118967.java!!!	createCancelAction(inout printJob : PrintJobInfo) : Notification::Action
        return new Action.Builder(
                Icon.createWithResource(mContext, R.drawable.stat_notify_cancelling),
                mContext.getString(R.string.cancel), createCancelIntent(printJob)).build();
!!!30119095.java!!!	createNotification(inout printJob : PrintJobInfo, inout firstAction : Notification::Action, inout secondAction : Notification::Action) : void
        Notification.Builder builder = new Notification.Builder(mContext)
                .setContentIntent(createContentIntent(printJob.getId()))
                .setSmallIcon(computeNotificationIcon(printJob))
                .setContentTitle(computeNotificationTitle(printJob))
                .setWhen(System.currentTimeMillis())
                .setOngoing(true)
                .setShowWhen(true)
                .setColor(mContext.getColor(
                        com.android.internal.R.color.system_notification_accent_color))
                .setGroup(PRINT_JOB_NOTIFICATION_GROUP_KEY);

        if (firstAction != null) {
            builder.addAction(firstAction);
        }

        if (secondAction != null) {
            builder.addAction(secondAction);
        }

        if (printJob.getState() == PrintJobInfo.STATE_STARTED
                || printJob.getState() == PrintJobInfo.STATE_QUEUED) {
            float progress = printJob.getProgress();
            if (progress >= 0) {
                builder.setProgress(Integer.MAX_VALUE, (int) (Integer.MAX_VALUE * progress),
                        false);
            } else {
                builder.setProgress(Integer.MAX_VALUE, 0, true);
            }
        }

        CharSequence status = printJob.getStatus(mContext.getPackageManager());
        if (status != null) {
            builder.setContentText(status);
        } else {
            builder.setContentText(printJob.getPrinterName());
        }

        mNotificationManager.notify(printJob.getId().flattenToString(), 0, builder.build());
!!!30119223.java!!!	createPrintingNotification(inout printJob : PrintJobInfo) : void
        createNotification(printJob, createCancelAction(printJob), null);
!!!30119351.java!!!	createFailedNotification(inout printJob : PrintJobInfo) : void
        Action.Builder restartActionBuilder = new Action.Builder(
                Icon.createWithResource(mContext, R.drawable.ic_restart),
                mContext.getString(R.string.restart), createRestartIntent(printJob.getId()));

        createNotification(printJob, createCancelAction(printJob), restartActionBuilder.build());
!!!30119479.java!!!	createBlockedNotification(inout printJob : PrintJobInfo) : void
        createNotification(printJob, createCancelAction(printJob), null);
!!!30119607.java!!!	createCancellingNotification(inout printJob : PrintJobInfo) : void
        createNotification(printJob, null, null);
!!!30119735.java!!!	createStackedNotification(inout printJobs : List<PrintJobInfo>) : void
        Notification.Builder builder = new Notification.Builder(mContext)
                .setContentIntent(createContentIntent(null))
                .setWhen(System.currentTimeMillis())
                .setOngoing(true)
                .setShowWhen(true)
                .setGroup(PRINT_JOB_NOTIFICATION_GROUP_KEY)
                .setGroupSummary(true);

        final int printJobCount = printJobs.size();

        InboxStyle inboxStyle = new InboxStyle();

        int icon = com.android.internal.R.drawable.ic_print;
        for (int i = printJobCount - 1; i>= 0; i--) {
            PrintJobInfo printJob = printJobs.get(i);

            inboxStyle.addLine(computeNotificationTitle(printJob));

            // if any print job is in an error state show an error icon for the summary
            if (printJob.getState() == PrintJobInfo.STATE_FAILED
                    || printJob.getState() == PrintJobInfo.STATE_BLOCKED) {
                icon = com.android.internal.R.drawable.ic_print_error;
            }
        }

        builder.setSmallIcon(icon);
        builder.setLargeIcon(
                ((BitmapDrawable) mContext.getResources().getDrawable(icon, null)).getBitmap());
        builder.setNumber(printJobCount);
        builder.setStyle(inboxStyle);
        builder.setColor(mContext.getColor(
                com.android.internal.R.color.system_notification_accent_color));

        mNotificationManager.notify(PRINT_JOB_NOTIFICATION_SUMMARY, 0, builder.build());
!!!30119863.java!!!	computeNotificationTitle(inout printJob : PrintJobInfo) : String
        switch (printJob.getState()) {
            case PrintJobInfo.STATE_FAILED: {
                return mContext.getString(R.string.failed_notification_title_template,
                        printJob.getLabel());
            }

            case PrintJobInfo.STATE_BLOCKED: {
                if (!printJob.isCancelling()) {
                    return mContext.getString(R.string.blocked_notification_title_template,
                            printJob.getLabel());
                } else {
                    return mContext.getString(
                            R.string.cancelling_notification_title_template,
                            printJob.getLabel());
                }
            }

            default: {
                if (!printJob.isCancelling()) {
                    return mContext.getString(R.string.printing_notification_title_template,
                            printJob.getLabel());
                } else {
                    return mContext.getString(
                            R.string.cancelling_notification_title_template,
                            printJob.getLabel());
                }
            }
        }
!!!30119991.java!!!	createContentIntent(inout printJobId : PrintJobId) : PendingIntent
        Intent intent = new Intent(Settings.ACTION_PRINT_SETTINGS);
        if (printJobId != null) {
            intent.putExtra(EXTRA_PRINT_JOB_ID, printJobId.flattenToString());
            intent.setData(Uri.fromParts("printjob", printJobId.flattenToString(), null));
        }
        return PendingIntent.getActivity(mContext, 0, intent, 0);
!!!30120119.java!!!	createCancelIntent(inout printJob : PrintJobInfo) : PendingIntent
        Intent intent = new Intent(mContext, NotificationBroadcastReceiver.class);
        intent.setAction(INTENT_ACTION_CANCEL_PRINTJOB + "_" + printJob.getId().flattenToString());
        intent.putExtra(EXTRA_PRINT_JOB_ID, printJob.getId());
        return PendingIntent.getBroadcast(mContext, 0, intent, PendingIntent.FLAG_ONE_SHOT);
!!!30120247.java!!!	createRestartIntent(inout printJobId : PrintJobId) : PendingIntent
        Intent intent = new Intent(mContext, NotificationBroadcastReceiver.class);
        intent.setAction(INTENT_ACTION_RESTART_PRINTJOB + "_" + printJobId.flattenToString());
        intent.putExtra(EXTRA_PRINT_JOB_ID, printJobId);
        return PendingIntent.getBroadcast(mContext, 0, intent, PendingIntent.FLAG_ONE_SHOT);
!!!30120375.java!!!	shouldNotifyForState(in state : int) : boolean
        switch (state) {
            case PrintJobInfo.STATE_QUEUED:
            case PrintJobInfo.STATE_STARTED:
            case PrintJobInfo.STATE_FAILED:
            case PrintJobInfo.STATE_COMPLETED:
            case PrintJobInfo.STATE_CANCELED:
            case PrintJobInfo.STATE_BLOCKED: {
                return true;
            }
        }
        return false;
!!!30120503.java!!!	computeNotificationIcon(inout printJob : PrintJobInfo) : int
        switch (printJob.getState()) {
            case PrintJobInfo.STATE_FAILED:
            case PrintJobInfo.STATE_BLOCKED: {
                return com.android.internal.R.drawable.ic_print_error;
            }
            default: {
                if (!printJob.isCancelling()) {
                    return com.android.internal.R.drawable.ic_print;
                } else {
                    return R.drawable.stat_notify_cancelling;
                }
            }
        }
