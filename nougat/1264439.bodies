class UsageView
!!!30339767.java!!!	UsageView(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);
        LayoutInflater.from(context).inflate(R.layout.usage_view, this);
        mUsageGraph = (UsageGraph) findViewById(R.id.usage_graph);
        mLabels = new TextView[] {
                (TextView) findViewById(R.id.label_bottom),
                (TextView) findViewById(R.id.label_middle),
                (TextView) findViewById(R.id.label_top),
        };
        mBottomLabels = new TextView[] {
                (TextView) findViewById(R.id.label_start),
                (TextView) findViewById(R.id.label_end),
        };
        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.UsageView, 0, 0);
        if (a.hasValue(R.styleable.UsageView_sideLabels)) {
            setSideLabels(a.getTextArray(R.styleable.UsageView_sideLabels));
        }
        if (a.hasValue(R.styleable.UsageView_bottomLabels)) {
            setBottomLabels(a.getTextArray(R.styleable.UsageView_bottomLabels));
        }
        if (a.hasValue(R.styleable.UsageView_textColor)) {
            int color = a.getColor(R.styleable.UsageView_textColor, 0);
            for (TextView v : mLabels) {
                v.setTextColor(color);
            }
            for (TextView v : mBottomLabels) {
                v.setTextColor(color);
            }
        }
        if (a.hasValue(R.styleable.UsageView_android_gravity)) {
            int gravity = a.getInt(R.styleable.UsageView_android_gravity, 0);
            if (gravity == Gravity.END) {
                LinearLayout layout = (LinearLayout) findViewById(R.id.graph_label_group);
                LinearLayout labels = (LinearLayout) findViewById(R.id.label_group);
                // Swap the children order.
                layout.removeView(labels);
                layout.addView(labels);
                // Set gravity.
                labels.setGravity(Gravity.END);
                // Swap the bottom label padding
                LinearLayout bottomLabels = (LinearLayout) findViewById(R.id.bottom_label_group);
                bottomLabels.setPadding(bottomLabels.getPaddingRight(), bottomLabels.getPaddingTop(),
                        bottomLabels.getPaddingLeft(), bottomLabels.getPaddingBottom());
            } else if (gravity != Gravity.START) {
                throw new IllegalArgumentException("Unsupported gravity " + gravity);
            }
        }
        mUsageGraph.setAccentColor(a.getColor(R.styleable.UsageView_android_colorAccent, 0));
!!!30339895.java!!!	clearPaths() : void
        mUsageGraph.clearPaths();
!!!30340023.java!!!	addPath(inout points : SparseIntArray) : void
        mUsageGraph.addPath(points);
!!!30340151.java!!!	configureGraph(in maxX : int, in maxY : int, inout showProjection : boolean, inout projectUp : boolean) : void
        mUsageGraph.setMax(maxX, maxY);
        mUsageGraph.setShowProjection(showProjection, projectUp);
!!!30340279.java!!!	setAccentColor(in color : int) : void
        mUsageGraph.setAccentColor(color);
!!!30340407.java!!!	setDividerLoc(in dividerLoc : int) : void
        mUsageGraph.setDividerLoc(dividerLoc);
!!!30340535.java!!!	setDividerColors(in middleColor : int, in topColor : int) : void
        mUsageGraph.setDividerColors(middleColor, topColor);
!!!30340663.java!!!	setSideLabelWeights(in before : float, in after : float) : void
        setWeight(R.id.space1, before);
        setWeight(R.id.space2, after);
!!!30340791.java!!!	setWeight(in id : int, in weight : float) : void
        View v = findViewById(id);
        LinearLayout.LayoutParams params = (LinearLayout.LayoutParams) v.getLayoutParams();
        params.weight = weight;
        v.setLayoutParams(params);
!!!30340919.java!!!	setSideLabels(inout labels : CharSequence) : void
        if (labels.length != mLabels.length) {
            throw new IllegalArgumentException("Invalid number of labels");
        }
        for (int i = 0; i < mLabels.length; i++) {
            mLabels[i].setText(labels[i]);
        }
!!!30341047.java!!!	setBottomLabels(inout labels : CharSequence) : void
        if (labels.length != mBottomLabels.length) {
            throw new IllegalArgumentException("Invalid number of labels");
        }
        for (int i = 0; i < mBottomLabels.length; i++) {
            mBottomLabels[i].setText(labels[i]);
        }
