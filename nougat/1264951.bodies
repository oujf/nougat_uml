class NetworkPolicyEditor
!!!30213175.java!!!	NetworkPolicyEditor(inout policyManager : NetworkPolicyManager)
        mPolicyManager = checkNotNull(policyManager);
!!!30213303.java!!!	read() : void
        final NetworkPolicy[] policies = mPolicyManager.getNetworkPolicies();

        boolean modified = false;
        mPolicies.clear();
        for (NetworkPolicy policy : policies) {
            // TODO: find better place to clamp these
            if (policy.limitBytes < -1) {
                policy.limitBytes = LIMIT_DISABLED;
                modified = true;
            }
            if (policy.warningBytes < -1) {
                policy.warningBytes = WARNING_DISABLED;
                modified = true;
            }

            mPolicies.add(policy);
        }

        // when we cleaned policies above, write back changes
        if (modified) writeAsync();
!!!30213431.java!!!	writeAsync() : void
        // TODO: consider making more robust by passing through service
        final NetworkPolicy[] policies = mPolicies.toArray(new NetworkPolicy[mPolicies.size()]);
        new AsyncTask<Void, Void, Void>() {
            @Override
            protected Void doInBackground(Void... params) {
                write(policies);
                return null;
            }
        }.execute();
!!!30213559.java!!!	write(inout policies : NetworkPolicy) : void
        mPolicyManager.setNetworkPolicies(policies);
!!!30213687.java!!!	hasLimitedPolicy(inout template : NetworkTemplate) : boolean
        final NetworkPolicy policy = getPolicy(template);
        return policy != null && policy.limitBytes != LIMIT_DISABLED;
!!!30213815.java!!!	getOrCreatePolicy(inout template : NetworkTemplate) : NetworkPolicy
        NetworkPolicy policy = getPolicy(template);
        if (policy == null) {
            policy = buildDefaultPolicy(template);
            mPolicies.add(policy);
        }
        return policy;
!!!30213943.java!!!	getPolicy(inout template : NetworkTemplate) : NetworkPolicy
        for (NetworkPolicy policy : mPolicies) {
            if (policy.template.equals(template)) {
                return policy;
            }
        }
        return null;
!!!30214071.java!!!	getPolicyMaybeUnquoted(inout template : NetworkTemplate) : NetworkPolicy
        NetworkPolicy policy = getPolicy(template);
        if (policy != null) {
            return policy;
        } else {
            return getPolicy(buildUnquotedNetworkTemplate(template));
        }
!!!30214199.java!!!	buildDefaultPolicy(inout template : NetworkTemplate) : NetworkPolicy
        // TODO: move this into framework to share with NetworkPolicyManagerService
        final int cycleDay;
        final String cycleTimezone;
        final boolean metered;

        if (template.getMatchRule() == MATCH_WIFI) {
            cycleDay = CYCLE_NONE;
            cycleTimezone = Time.TIMEZONE_UTC;
            metered = false;
        } else {
            final Time time = new Time();
            time.setToNow();
            cycleDay = time.monthDay;
            cycleTimezone = time.timezone;
            metered = true;
        }

        return new NetworkPolicy(template, cycleDay, cycleTimezone, WARNING_DISABLED,
                LIMIT_DISABLED, SNOOZE_NEVER, SNOOZE_NEVER, metered, true);
!!!30214327.java!!!	getPolicyCycleDay(inout template : NetworkTemplate) : int
        final NetworkPolicy policy = getPolicy(template);
        return (policy != null) ? policy.cycleDay : -1;
!!!30214455.java!!!	setPolicyCycleDay(inout template : NetworkTemplate, in cycleDay : int, inout cycleTimezone : String) : void
        final NetworkPolicy policy = getOrCreatePolicy(template);
        policy.cycleDay = cycleDay;
        policy.cycleTimezone = cycleTimezone;
        policy.inferred = false;
        policy.clearSnooze();
        writeAsync();
!!!30214583.java!!!	getPolicyWarningBytes(inout template : NetworkTemplate) : long
        final NetworkPolicy policy = getPolicy(template);
        return (policy != null) ? policy.warningBytes : WARNING_DISABLED;
!!!30214711.java!!!	setPolicyWarningBytes(inout template : NetworkTemplate, in warningBytes : long) : void
        final NetworkPolicy policy = getOrCreatePolicy(template);
        policy.warningBytes = warningBytes;
        policy.inferred = false;
        policy.clearSnooze();
        writeAsync();
!!!30214839.java!!!	getPolicyLimitBytes(inout template : NetworkTemplate) : long
        final NetworkPolicy policy = getPolicy(template);
        return (policy != null) ? policy.limitBytes : LIMIT_DISABLED;
!!!30214967.java!!!	setPolicyLimitBytes(inout template : NetworkTemplate, in limitBytes : long) : void
        final NetworkPolicy policy = getOrCreatePolicy(template);
        policy.limitBytes = limitBytes;
        policy.inferred = false;
        policy.clearSnooze();
        writeAsync();
!!!30215095.java!!!	getPolicyMetered(inout template : NetworkTemplate) : boolean
        NetworkPolicy policy = getPolicy(template);
        if (policy != null) {
            return policy.metered;
        } else {
            return false;
        }
!!!30215223.java!!!	setPolicyMetered(inout template : NetworkTemplate, inout metered : boolean) : void
        boolean modified = false;

        NetworkPolicy policy = getPolicy(template);
        if (metered) {
            if (policy == null) {
                policy = buildDefaultPolicy(template);
                policy.metered = true;
                policy.inferred = false;
                mPolicies.add(policy);
                modified = true;
            } else if (!policy.metered) {
                policy.metered = true;
                policy.inferred = false;
                modified = true;
            }

        } else {
            if (policy == null) {
                // ignore when policy doesn't exist
            } else if (policy.metered) {
                policy.metered = false;
                policy.inferred = false;
                modified = true;
            }
        }

        // Remove legacy unquoted policies while we're here
        final NetworkTemplate unquoted = buildUnquotedNetworkTemplate(template);
        final NetworkPolicy unquotedPolicy = getPolicy(unquoted);
        if (unquotedPolicy != null) {
            mPolicies.remove(unquotedPolicy);
            modified = true;
        }

        if (modified) writeAsync();
!!!30215351.java!!!	buildUnquotedNetworkTemplate(inout template : NetworkTemplate) : NetworkTemplate
        if (template == null) return null;
        final String networkId = template.getNetworkId();
        final String strippedNetworkId = WifiInfo.removeDoubleQuotes(networkId);
        if (!TextUtils.equals(strippedNetworkId, networkId)) {
            return new NetworkTemplate(
                    template.getMatchRule(), template.getSubscriberId(), strippedNetworkId);
        } else {
            return null;
        }
