class Preference
!!!30220599.java!!!	Preference(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int, in defStyleRes : int)
        mContext = context;

        final TypedArray a = context.obtainStyledAttributes(
                attrs, R.styleable.Preference, defStyleAttr, defStyleRes);

        mIconResId = TypedArrayUtils.getResourceId(a, R.styleable.Preference_icon,
                R.styleable.Preference_android_icon, 0);

        mKey = TypedArrayUtils.getString(a, R.styleable.Preference_key,
                R.styleable.Preference_android_key);

        mTitle = TypedArrayUtils.getString(a, R.styleable.Preference_title,
                R.styleable.Preference_android_title);

        mSummary = TypedArrayUtils.getString(a, R.styleable.Preference_summary,
                R.styleable.Preference_android_summary);

        mOrder = TypedArrayUtils.getInt(a, R.styleable.Preference_order,
                R.styleable.Preference_android_order, DEFAULT_ORDER);

        mFragment = TypedArrayUtils.getString(a, R.styleable.Preference_fragment,
                R.styleable.Preference_android_fragment);

        mLayoutResId = TypedArrayUtils.getResourceId(a, R.styleable.Preference_layout,
                R.styleable.Preference_android_layout, R.layout.preference);

        mWidgetLayoutResId = TypedArrayUtils.getResourceId(a, R.styleable.Preference_widgetLayout,
                R.styleable.Preference_android_widgetLayout, 0);

        mEnabled = TypedArrayUtils.getBoolean(a, R.styleable.Preference_enabled,
                R.styleable.Preference_android_enabled, true);

        mSelectable = TypedArrayUtils.getBoolean(a, R.styleable.Preference_selectable,
                R.styleable.Preference_android_selectable, true);

        mPersistent = TypedArrayUtils.getBoolean(a, R.styleable.Preference_persistent,
                R.styleable.Preference_android_persistent, true);

        mDependencyKey = TypedArrayUtils.getString(a, R.styleable.Preference_dependency,
                R.styleable.Preference_android_dependency);

        if (a.hasValue(R.styleable.Preference_defaultValue)) {
            mDefaultValue = onGetDefaultValue(a, R.styleable.Preference_defaultValue);
        } else if (a.hasValue(R.styleable.Preference_android_defaultValue)) {
            mDefaultValue = onGetDefaultValue(a, R.styleable.Preference_android_defaultValue);
        }

        mShouldDisableView =
                TypedArrayUtils.getBoolean(a, R.styleable.Preference_shouldDisableView,
                        R.styleable.Preference_android_shouldDisableView, true);

        a.recycle();
!!!30220727.java!!!	Preference(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int)
        this(context, attrs, defStyleAttr, 0);
!!!30220855.java!!!	Preference(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, TypedArrayUtils.getAttr(context, R.attr.preferenceStyle,
                android.R.attr.preferenceStyle));
!!!30220983.java!!!	Preference(inout context : Context)
        this(context, null);
!!!30221111.java!!!	onGetDefaultValue(inout a : TypedArray, in index : int) : Object
        return null;
!!!30221239.java!!!	setIntent(inout intent : Intent) : void
        mIntent = intent;
!!!30221367.java!!!	getIntent() : Intent
        return mIntent;
!!!30221495.java!!!	setFragment(inout fragment : String) : void
        mFragment = fragment;
!!!30221623.java!!!	getFragment() : String
        return mFragment;
!!!30221751.java!!!	getExtras() : Bundle
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        return mExtras;
!!!30221879.java!!!	peekExtras() : Bundle
        return mExtras;
!!!30222007.java!!!	setLayoutResource(in layoutResId : int) : void
        mLayoutResId = layoutResId;
!!!30222135.java!!!	getLayoutResource() : int
        return mLayoutResId;
!!!30222263.java!!!	setWidgetLayoutResource(in widgetLayoutResId : int) : void
        mWidgetLayoutResId = widgetLayoutResId;
!!!30222391.java!!!	getWidgetLayoutResource() : int
        return mWidgetLayoutResId;
!!!30222519.java!!!	onBindViewHolder(inout holder : PreferenceViewHolder) : void
        holder.itemView.setOnClickListener(mClickListener);
        holder.itemView.setId(mViewId);

        final TextView titleView = (TextView) holder.findViewById(android.R.id.title);
        if (titleView != null) {
            final CharSequence title = getTitle();
            if (!TextUtils.isEmpty(title)) {
                titleView.setText(title);
                titleView.setVisibility(View.VISIBLE);
            } else {
                titleView.setVisibility(View.GONE);
            }
        }

        final TextView summaryView = (TextView) holder.findViewById(android.R.id.summary);
        if (summaryView != null) {
            final CharSequence summary = getSummary();
            if (!TextUtils.isEmpty(summary)) {
                summaryView.setText(summary);
                summaryView.setVisibility(View.VISIBLE);
            } else {
                summaryView.setVisibility(View.GONE);
            }
        }

        final ImageView imageView = (ImageView) holder.findViewById(android.R.id.icon);
        if (imageView != null) {
            if (mIconResId != 0 || mIcon != null) {
                if (mIcon == null) {
                    mIcon = ContextCompat.getDrawable(getContext(), mIconResId);
                }
                if (mIcon != null) {
                    imageView.setImageDrawable(mIcon);
                }
            }
            imageView.setVisibility(mIcon != null ? View.VISIBLE : View.GONE);
        }

        View imageFrame = holder.findViewById(R.id.icon_frame);
        if (imageFrame == null) {
            imageFrame = holder.findViewById(AndroidResources.ANDROID_R_ICON_FRAME);
        }
        if (imageFrame != null) {
            imageFrame.setVisibility(mIcon != null ? View.VISIBLE : View.GONE);
        }

        if (mShouldDisableView) {
            setEnabledStateOnViews(holder.itemView, isEnabled());
        } else {
            setEnabledStateOnViews(holder.itemView, true);
        }

        final boolean selectable = isSelectable();
        holder.itemView.setFocusable(selectable);
        holder.itemView.setClickable(selectable);

        holder.setDividerAllowedAbove(selectable);
        holder.setDividerAllowedBelow(selectable);
!!!30222647.java!!!	setEnabledStateOnViews(inout v : View, inout enabled : boolean) : void
        v.setEnabled(enabled);

        if (v instanceof ViewGroup) {
            final ViewGroup vg = (ViewGroup) v;
            for (int i = vg.getChildCount() - 1; i >= 0; i--) {
                setEnabledStateOnViews(vg.getChildAt(i), enabled);
            }
        }
!!!30222775.java!!!	setOrder(in order : int) : void
        if (order != mOrder) {
            mOrder = order;

            // Reorder the list
            notifyHierarchyChanged();
        }
!!!30222903.java!!!	getOrder() : int
        return mOrder;
!!!30223031.java!!!	setViewId(in viewId : int) : void
        mViewId = viewId;
!!!30223159.java!!!	setTitle(inout title : CharSequence) : void
        if (title == null && mTitle != null || title != null && !title.equals(mTitle)) {
            mTitle = title;
            notifyChanged();
        }
!!!30223287.java!!!	setTitle(in titleResId : int) : void
        setTitle(mContext.getString(titleResId));
!!!30223415.java!!!	getTitle() : CharSequence
        return mTitle;
!!!30223543.java!!!	setIcon(inout icon : Drawable) : void
        if ((icon == null && mIcon != null) || (icon != null && mIcon != icon)) {
            mIcon = icon;
            mIconResId = 0;
            notifyChanged();
        }
!!!30223671.java!!!	setIcon(in iconResId : int) : void
        setIcon(ContextCompat.getDrawable(mContext, iconResId));
        mIconResId = iconResId;
!!!30223799.java!!!	getIcon() : Drawable
        return mIcon;
!!!30223927.java!!!	getSummary() : CharSequence
        return mSummary;
!!!30224055.java!!!	setSummary(inout summary : CharSequence) : void
        if (summary == null && mSummary != null || summary != null && !summary.equals(mSummary)) {
            mSummary = summary;
            notifyChanged();
        }
!!!30224183.java!!!	setSummary(in summaryResId : int) : void
        setSummary(mContext.getString(summaryResId));
!!!30224311.java!!!	setEnabled(inout enabled : boolean) : void
        if (mEnabled != enabled) {
            mEnabled = enabled;

            // Enabled state can change dependent preferences' states, so notify
            notifyDependencyChange(shouldDisableDependents());

            notifyChanged();
        }
!!!30224439.java!!!	isEnabled() : boolean
        return mEnabled && mDependencyMet && mParentDependencyMet;
!!!30224567.java!!!	setSelectable(inout selectable : boolean) : void
        if (mSelectable != selectable) {
            mSelectable = selectable;
            notifyChanged();
        }
!!!30224695.java!!!	isSelectable() : boolean
        return mSelectable;
!!!30224823.java!!!	setShouldDisableView(inout shouldDisableView : boolean) : void
        mShouldDisableView = shouldDisableView;
        notifyChanged();
!!!30224951.java!!!	getShouldDisableView() : boolean
        return mShouldDisableView;
!!!30225079.java!!!	setVisible(inout visible : boolean) : void
        if (mVisible != visible) {
            mVisible = visible;
            if (mListener != null) {
                mListener.onPreferenceVisibilityChange(this);
            }
        }
!!!30225207.java!!!	isVisible() : boolean
        return mVisible;
!!!30225335.java!!!	getId() : long
        return mId;
!!!30225591.java!!!	setKey(inout key : String) : void
        mKey = key;

        if (mRequiresKey && !hasKey()) {
            requireKey();
        }
!!!30225719.java!!!	getKey() : String
        return mKey;
!!!30225847.java!!!	requireKey() : void
        if (TextUtils.isEmpty(mKey)) {
            throw new IllegalStateException("Preference does not have a key assigned.");
        }

        mRequiresKey = true;
!!!30225975.java!!!	hasKey() : boolean
        return !TextUtils.isEmpty(mKey);
!!!30226103.java!!!	isPersistent() : boolean
        return mPersistent;
!!!30226231.java!!!	shouldPersist() : boolean
        return mPreferenceManager != null && isPersistent() && hasKey();
!!!30226359.java!!!	setPersistent(inout persistent : boolean) : void
        mPersistent = persistent;
!!!30226487.java!!!	callChangeListener(inout newValue : Object) : boolean
        return mOnChangeListener == null || mOnChangeListener.onPreferenceChange(this, newValue);
!!!30226615.java!!!	setOnPreferenceChangeListener(inout onPreferenceChangeListener : Preference::OnPreferenceChangeListener) : void
        mOnChangeListener = onPreferenceChangeListener;
!!!30226743.java!!!	getOnPreferenceChangeListener() : Preference::OnPreferenceChangeListener
        return mOnChangeListener;
!!!30226871.java!!!	setOnPreferenceClickListener(inout onPreferenceClickListener : Preference::OnPreferenceClickListener) : void
        mOnClickListener = onPreferenceClickListener;
!!!30226999.java!!!	getOnPreferenceClickListener() : Preference::OnPreferenceClickListener
        return mOnClickListener;
!!!30227127.java!!!	performClick(inout view : View) : void
        performClick();
!!!30227255.java!!!	performClick() : void

        if (!isEnabled()) {
            return;
        }

        onClick();

        if (mOnClickListener != null && mOnClickListener.onPreferenceClick(this)) {
            return;
        }

        PreferenceManager preferenceManager = getPreferenceManager();
        if (preferenceManager != null) {
            PreferenceManager.OnPreferenceTreeClickListener listener = preferenceManager
                    .getOnPreferenceTreeClickListener();
            if (listener != null && listener.onPreferenceTreeClick(this)) {
                return;
            }
        }

        if (mIntent != null) {
            Context context = getContext();
            context.startActivity(mIntent);
        }
!!!30227383.java!!!	getContext() : Context
        return mContext;
!!!30227511.java!!!	getSharedPreferences() : SharedPreferences
        if (mPreferenceManager == null) {
            return null;
        }

        return mPreferenceManager.getSharedPreferences();
!!!30227639.java!!!	compareTo(inout another : Preference) : int
        if (mOrder != another.mOrder) {
            // Do order comparison
            return mOrder - another.mOrder;
        } else if (mTitle == another.mTitle) {
            // If titles are null or share same object comparison
            return 0;
        } else if (mTitle == null) {
            return 1;
        } else if (another.mTitle == null) {
            return -1;
        } else {
            // Do name comparison
            return mTitle.toString().compareToIgnoreCase(another.mTitle.toString());
        }
!!!30227767.java!!!	setOnPreferenceChangeInternalListener(inout listener : Preference::OnPreferenceChangeInternalListener) : void
        mListener = listener;
!!!30227895.java!!!	notifyChanged() : void
        if (mListener != null) {
            mListener.onPreferenceChange(this);
        }
!!!30228023.java!!!	notifyHierarchyChanged() : void
        if (mListener != null) {
            mListener.onPreferenceHierarchyChange(this);
        }
!!!30228151.java!!!	getPreferenceManager() : PreferenceManager
        return mPreferenceManager;
!!!30228279.java!!!	onAttachedToHierarchy(inout preferenceManager : PreferenceManager) : void
        mPreferenceManager = preferenceManager;

        if (!mHasId) {
            mId = preferenceManager.getNextId();
        }

        dispatchSetInitialValue();
!!!30228407.java!!!	onAttachedToHierarchy(inout preferenceManager : PreferenceManager, in id : long) : void
        mId = id;
        mHasId = true;
        try {
            onAttachedToHierarchy(preferenceManager);
        } finally {
            mHasId = false;
        }
!!!30228535.java!!!	onAttached() : void
        // At this point, the hierarchy that this preference is in is connected
        // with all other preferences.
        registerDependency();
!!!30228663.java!!!	onDetached() : void
        unregisterDependency();
!!!30228791.java!!!	registerDependency() : void

        if (TextUtils.isEmpty(mDependencyKey)) return;

        Preference preference = findPreferenceInHierarchy(mDependencyKey);
        if (preference != null) {
            preference.registerDependent(this);
        } else {
            throw new IllegalStateException("Dependency \"" + mDependencyKey
                    + "\" not found for preference \"" + mKey + "\" (title: \"" + mTitle + "\"");
        }
!!!30228919.java!!!	unregisterDependency() : void
        if (mDependencyKey != null) {
            final Preference oldDependency = findPreferenceInHierarchy(mDependencyKey);
            if (oldDependency != null) {
                oldDependency.unregisterDependent(this);
            }
        }
!!!30229047.java!!!	findPreferenceInHierarchy(inout key : String) : Preference
        if (TextUtils.isEmpty(key) || mPreferenceManager == null) {
            return null;
        }

        return mPreferenceManager.findPreference(key);
!!!30229175.java!!!	registerDependent(inout dependent : Preference) : void
        if (mDependents == null) {
            mDependents = new ArrayList<Preference>();
        }

        mDependents.add(dependent);

        dependent.onDependencyChanged(this, shouldDisableDependents());
!!!30229303.java!!!	unregisterDependent(inout dependent : Preference) : void
        if (mDependents != null) {
            mDependents.remove(dependent);
        }
!!!30229431.java!!!	notifyDependencyChange(inout disableDependents : boolean) : void
        final List<Preference> dependents = mDependents;

        if (dependents == null) {
            return;
        }

        final int dependentsCount = dependents.size();
        for (int i = 0; i < dependentsCount; i++) {
            dependents.get(i).onDependencyChanged(this, disableDependents);
        }
!!!30229559.java!!!	onDependencyChanged(inout dependency : Preference, inout disableDependent : boolean) : void
        if (mDependencyMet == disableDependent) {
            mDependencyMet = !disableDependent;

            // Enabled state can change dependent preferences' states, so notify
            notifyDependencyChange(shouldDisableDependents());

            notifyChanged();
        }
!!!30229687.java!!!	onParentChanged(inout parent : Preference, inout disableChild : boolean) : void
        if (mParentDependencyMet == disableChild) {
            mParentDependencyMet = !disableChild;

            // Enabled state can change dependent preferences' states, so notify
            notifyDependencyChange(shouldDisableDependents());

            notifyChanged();
        }
!!!30229815.java!!!	shouldDisableDependents() : boolean
        return !isEnabled();
!!!30229943.java!!!	setDependency(inout dependencyKey : String) : void
        // Unregister the old dependency, if we had one
        unregisterDependency();

        // Register the new
        mDependencyKey = dependencyKey;
        registerDependency();
!!!30230071.java!!!	getDependency() : String
        return mDependencyKey;
!!!30230199.java!!!	onPrepareForRemoval() : void
        unregisterDependency();
!!!30230327.java!!!	setDefaultValue(inout defaultValue : Object) : void
        mDefaultValue = defaultValue;
!!!30230455.java!!!	dispatchSetInitialValue() : void
        // By now, we know if we are persistent.
        final boolean shouldPersist = shouldPersist();
        if (!shouldPersist || !getSharedPreferences().contains(mKey)) {
            if (mDefaultValue != null) {
                onSetInitialValue(false, mDefaultValue);
            }
        } else {
            onSetInitialValue(true, null);
        }
!!!30230711.java!!!	tryCommit(inout editor : SharedPreferences::Editor) : void
        if (mPreferenceManager.shouldCommit()) {
            SharedPreferencesCompat.EditorCompat.getInstance().apply(editor);
        }
!!!30230839.java!!!	persistString(inout value : String) : boolean
        if (shouldPersist()) {
            // Shouldn't store null
            if (value == getPersistedString(null)) {
                // It's already there, so the same as persisting
                return true;
            }

            SharedPreferences.Editor editor = mPreferenceManager.getEditor();
            editor.putString(mKey, value);
            tryCommit(editor);
            return true;
        }
        return false;
!!!30230967.java!!!	getPersistedString(inout defaultReturnValue : String) : String
        if (!shouldPersist()) {
            return defaultReturnValue;
        }

        return mPreferenceManager.getSharedPreferences().getString(mKey, defaultReturnValue);
!!!30231095.java!!!	persistInt(in value : int) : boolean
        if (shouldPersist()) {
            if (value == getPersistedInt(~value)) {
                // It's already there, so the same as persisting
                return true;
            }

            SharedPreferences.Editor editor = mPreferenceManager.getEditor();
            editor.putInt(mKey, value);
            tryCommit(editor);
            return true;
        }
        return false;
!!!30231223.java!!!	getPersistedInt(in defaultReturnValue : int) : int
        if (!shouldPersist()) {
            return defaultReturnValue;
        }

        return mPreferenceManager.getSharedPreferences().getInt(mKey, defaultReturnValue);
!!!30231351.java!!!	persistFloat(in value : float) : boolean
        if (shouldPersist()) {
            if (value == getPersistedFloat(Float.NaN)) {
                // It's already there, so the same as persisting
                return true;
            }

            SharedPreferences.Editor editor = mPreferenceManager.getEditor();
            editor.putFloat(mKey, value);
            tryCommit(editor);
            return true;
        }
        return false;
!!!30231479.java!!!	getPersistedFloat(in defaultReturnValue : float) : float
        if (!shouldPersist()) {
            return defaultReturnValue;
        }

        return mPreferenceManager.getSharedPreferences().getFloat(mKey, defaultReturnValue);
!!!30231607.java!!!	persistLong(in value : long) : boolean
        if (shouldPersist()) {
            if (value == getPersistedLong(~value)) {
                // It's already there, so the same as persisting
                return true;
            }

            SharedPreferences.Editor editor = mPreferenceManager.getEditor();
            editor.putLong(mKey, value);
            tryCommit(editor);
            return true;
        }
        return false;
!!!30231735.java!!!	getPersistedLong(in defaultReturnValue : long) : long
        if (!shouldPersist()) {
            return defaultReturnValue;
        }

        return mPreferenceManager.getSharedPreferences().getLong(mKey, defaultReturnValue);
!!!30231863.java!!!	persistBoolean(inout value : boolean) : boolean
        if (shouldPersist()) {
            if (value == getPersistedBoolean(!value)) {
                // It's already there, so the same as persisting
                return true;
            }

            SharedPreferences.Editor editor = mPreferenceManager.getEditor();
            editor.putBoolean(mKey, value);
            tryCommit(editor);
            return true;
        }
        return false;
!!!30231991.java!!!	getPersistedBoolean(inout defaultReturnValue : boolean) : boolean
        if (!shouldPersist()) {
            return defaultReturnValue;
        }

        return mPreferenceManager.getSharedPreferences().getBoolean(mKey, defaultReturnValue);
!!!30232119.java!!!	toString() : String
        return getFilterableStringBuilder().toString();
!!!30232247.java!!!	getFilterableStringBuilder() : StringBuilder
        StringBuilder sb = new StringBuilder();
        CharSequence title = getTitle();
        if (!TextUtils.isEmpty(title)) {
            sb.append(title).append(' ');
        }
        CharSequence summary = getSummary();
        if (!TextUtils.isEmpty(summary)) {
            sb.append(summary).append(' ');
        }
        if (sb.length() > 0) {
            // Drop the last space
            sb.setLength(sb.length() - 1);
        }
        return sb;
!!!30232375.java!!!	saveHierarchyState(inout container : Bundle) : void
        dispatchSaveInstanceState(container);
!!!30232503.java!!!	dispatchSaveInstanceState(inout container : Bundle) : void
        if (hasKey()) {
            mBaseMethodCalled = false;
            Parcelable state = onSaveInstanceState();
            if (!mBaseMethodCalled) {
                throw new IllegalStateException(
                        "Derived class did not call super.onSaveInstanceState()");
            }
            if (state != null) {
                container.putParcelable(mKey, state);
            }
        }
!!!30232631.java!!!	onSaveInstanceState() : Parcelable
        mBaseMethodCalled = true;
        return BaseSavedState.EMPTY_STATE;
!!!30232759.java!!!	restoreHierarchyState(inout container : Bundle) : void
        dispatchRestoreInstanceState(container);
!!!30232887.java!!!	dispatchRestoreInstanceState(inout container : Bundle) : void
        if (hasKey()) {
            Parcelable state = container.getParcelable(mKey);
            if (state != null) {
                mBaseMethodCalled = false;
                onRestoreInstanceState(state);
                if (!mBaseMethodCalled) {
                    throw new IllegalStateException(
                            "Derived class did not call super.onRestoreInstanceState()");
                }
            }
        }
!!!30233015.java!!!	onRestoreInstanceState(inout state : Parcelable) : void
        mBaseMethodCalled = true;
        if (state != BaseSavedState.EMPTY_STATE && state != null) {
            throw new IllegalArgumentException("Wrong state class -- expecting Preference State");
        }
