class CachedBluetoothDeviceManager
!!!30282423.java!!!	CachedBluetoothDeviceManager(inout context : Context, inout localBtManager : LocalBluetoothManager)
        mContext = context;
        mBtManager = localBtManager;
!!!30282551.java!!!	getCachedDevicesCopy() : CachedBluetoothDevice
        return new ArrayList<CachedBluetoothDevice>(mCachedDevices);
!!!30282679.java!!!	onDeviceDisappeared(inout cachedDevice : CachedBluetoothDevice) : boolean
        cachedDevice.setVisible(false);
        return cachedDevice.getBondState() == BluetoothDevice.BOND_NONE;
!!!30282807.java!!!	onDeviceNameUpdated(inout device : BluetoothDevice) : void
        CachedBluetoothDevice cachedDevice = findDevice(device);
        if (cachedDevice != null) {
            cachedDevice.refreshName();
        }
!!!30282935.java!!!	findDevice(inout device : BluetoothDevice) : CachedBluetoothDevice
        for (CachedBluetoothDevice cachedDevice : mCachedDevices) {
            if (cachedDevice.getDevice().equals(device)) {
                return cachedDevice;
            }
        }
        return null;
!!!30283063.java!!!	addDevice(inout adapter : LocalBluetoothAdapter, inout profileManager : LocalBluetoothProfileManager, inout device : BluetoothDevice) : CachedBluetoothDevice
        CachedBluetoothDevice newDevice = new CachedBluetoothDevice(mContext, adapter,
            profileManager, device);
        synchronized (mCachedDevices) {
            mCachedDevices.add(newDevice);
            mBtManager.getEventManager().dispatchDeviceAdded(newDevice);
        }
        return newDevice;
!!!30283191.java!!!	getName(inout device : BluetoothDevice) : String
        CachedBluetoothDevice cachedDevice = findDevice(device);
        if (cachedDevice != null) {
            return cachedDevice.getName();
        }

        String name = device.getAliasName();
        if (name != null) {
            return name;
        }

        return device.getAddress();
!!!30283319.java!!!	clearNonBondedDevices() : void
        for (int i = mCachedDevices.size() - 1; i >= 0; i--) {
            CachedBluetoothDevice cachedDevice = mCachedDevices.get(i);
            if (cachedDevice.getBondState() != BluetoothDevice.BOND_BONDED) {
                mCachedDevices.remove(i);
            }
        }
!!!30283447.java!!!	onScanningStateChanged(inout started : boolean) : void
        if (!started) return;

        // If starting a new scan, clear old visibility
        // Iterate in reverse order since devices may be removed.
        for (int i = mCachedDevices.size() - 1; i >= 0; i--) {
            CachedBluetoothDevice cachedDevice = mCachedDevices.get(i);
            cachedDevice.setVisible(false);
        }
!!!30283575.java!!!	onBtClassChanged(inout device : BluetoothDevice) : void
        CachedBluetoothDevice cachedDevice = findDevice(device);
        if (cachedDevice != null) {
            cachedDevice.refreshBtClass();
        }
!!!30283703.java!!!	onUuidChanged(inout device : BluetoothDevice) : void
        CachedBluetoothDevice cachedDevice = findDevice(device);
        if (cachedDevice != null) {
            cachedDevice.onUuidChanged();
        }
!!!30283831.java!!!	onBluetoothStateChanged(in bluetoothState : int) : void
        // When Bluetooth is turning off, we need to clear the non-bonded devices
        // Otherwise, they end up showing up on the next BT enable
        if (bluetoothState == BluetoothAdapter.STATE_TURNING_OFF) {
            for (int i = mCachedDevices.size() - 1; i >= 0; i--) {
                CachedBluetoothDevice cachedDevice = mCachedDevices.get(i);
                if (cachedDevice.getBondState() != BluetoothDevice.BOND_BONDED) {
                    cachedDevice.setVisible(false);
                    mCachedDevices.remove(i);
                } else {
                    // For bonded devices, we need to clear the connection status so that
                    // when BT is enabled next time, device connection status shall be retrieved
                    // by making a binder call.
                    cachedDevice.clearProfileConnectionState();
                }
            }
        }
!!!30283959.java!!!	log(inout msg : String) : void
        if (DEBUG) {
            Log.d(TAG, msg);
        }
