class A2dpSinkProfile
!!!30266039.java!!!	isProfileReady() : boolean
        return mIsProfileReady;
!!!30266167.java!!!	A2dpSinkProfile(inout context : Context, inout adapter : LocalBluetoothAdapter, inout deviceManager : CachedBluetoothDeviceManager, inout profileManager : LocalBluetoothProfileManager)
        mLocalAdapter = adapter;
        mDeviceManager = deviceManager;
        mProfileManager = profileManager;
        mLocalAdapter.getProfileProxy(context, new A2dpSinkServiceListener(),
                BluetoothProfile.A2DP_SINK);
!!!30266295.java!!!	isConnectable() : boolean
        return true;
!!!30266423.java!!!	isAutoConnectable() : boolean
        return true;
!!!30266551.java!!!	getConnectedDevices() : BluetoothDevice
        if (mService == null) return new ArrayList<BluetoothDevice>(0);
        return mService.getDevicesMatchingConnectionStates(
              new int[] {BluetoothProfile.STATE_CONNECTED,
                         BluetoothProfile.STATE_CONNECTING,
                         BluetoothProfile.STATE_DISCONNECTING});
!!!30266679.java!!!	connect(inout device : BluetoothDevice) : boolean
        if (mService == null) return false;
        List<BluetoothDevice> srcs = getConnectedDevices();
        if (srcs != null) {
            for (BluetoothDevice src : srcs) {
                if (src.equals(device)) {
                    // Connect to same device, Ignore it
                    Log.d(TAG,"Ignoring Connect");
                    return true;
                }
            }
            for (BluetoothDevice src : srcs) {
                mService.disconnect(src);
            }
        }
        return mService.connect(device);
!!!30266807.java!!!	disconnect(inout device : BluetoothDevice) : boolean
        if (mService == null) return false;
        // Downgrade priority as user is disconnecting the headset.
        if (mService.getPriority(device) > BluetoothProfile.PRIORITY_ON){
            mService.setPriority(device, BluetoothProfile.PRIORITY_ON);
        }
        return mService.disconnect(device);
!!!30266935.java!!!	getConnectionStatus(inout device : BluetoothDevice) : int
        if (mService == null) {
            return BluetoothProfile.STATE_DISCONNECTED;
        }
        return mService.getConnectionState(device);
!!!30267063.java!!!	isPreferred(inout device : BluetoothDevice) : boolean
        if (mService == null) return false;
        return mService.getPriority(device) > BluetoothProfile.PRIORITY_OFF;
!!!30267191.java!!!	getPreferred(inout device : BluetoothDevice) : int
        if (mService == null) return BluetoothProfile.PRIORITY_OFF;
        return mService.getPriority(device);
!!!30267319.java!!!	setPreferred(inout device : BluetoothDevice, inout preferred : boolean) : void
        if (mService == null) return;
        if (preferred) {
            if (mService.getPriority(device) < BluetoothProfile.PRIORITY_ON) {
                mService.setPriority(device, BluetoothProfile.PRIORITY_ON);
            }
        } else {
            mService.setPriority(device, BluetoothProfile.PRIORITY_OFF);
        }
!!!30267447.java!!!	isA2dpPlaying() : boolean
        if (mService == null) return false;
        List<BluetoothDevice> srcs = mService.getConnectedDevices();
        if (!srcs.isEmpty()) {
            if (mService.isA2dpPlaying(srcs.get(0))) {
                return true;
            }
        }
        return false;
!!!30267575.java!!!	toString() : String
        return NAME;
!!!30267703.java!!!	getOrdinal() : int
        return ORDINAL;
!!!30267831.java!!!	getNameResource(inout device : BluetoothDevice) : int
        // we need to have same string in UI for even SINK Media Audio.
        return R.string.bluetooth_profile_a2dp;
!!!30267959.java!!!	getSummaryResourceForDevice(inout device : BluetoothDevice) : int
        int state = getConnectionStatus(device);
        switch (state) {
            case BluetoothProfile.STATE_DISCONNECTED:
                return R.string.bluetooth_a2dp_profile_summary_use_for;

            case BluetoothProfile.STATE_CONNECTED:
                return R.string.bluetooth_a2dp_profile_summary_connected;

            default:
                return Utils.getConnectionStateSummary(state);
        }
!!!30268087.java!!!	getDrawableResource(inout btClass : BluetoothClass) : int
        return R.drawable.ic_bt_headphones_a2dp;
!!!30268215.java!!!	finalize() : void
        if (V) Log.d(TAG, "finalize()");
        if (mService != null) {
            try {
                BluetoothAdapter.getDefaultAdapter().closeProfileProxy(BluetoothProfile.A2DP_SINK,
                                                                       mService);
                mService = null;
            }catch (Throwable t) {
                Log.w(TAG, "Error cleaning up A2DP proxy", t);
            }
        }
