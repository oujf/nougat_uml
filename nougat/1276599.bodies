class PbapClientProfile
!!!30306487.java!!!	refreshProfiles() : void
        Collection<CachedBluetoothDevice> cachedDevices = mDeviceManager.getCachedDevicesCopy();
        for (CachedBluetoothDevice device : cachedDevices) {
            device.onUuidChanged();
        }
!!!30306615.java!!!	pbapClientExists() : boolean
        return (mService != null);
!!!30306743.java!!!	isProfileReady() : boolean
        return mIsProfileReady;
!!!30306871.java!!!	PbapClientProfile(inout context : Context, inout adapter : LocalBluetoothAdapter, inout deviceManager : CachedBluetoothDeviceManager, inout profileManager : LocalBluetoothProfileManager)
        mLocalAdapter = adapter;
        mDeviceManager = deviceManager;
        mProfileManager = profileManager;
        mLocalAdapter.getProfileProxy(context, new PbapClientServiceListener(),
                BluetoothProfile.PBAP_CLIENT);
!!!30306999.java!!!	isConnectable() : boolean
        return true;
!!!30307127.java!!!	isAutoConnectable() : boolean
        return true;
!!!30307255.java!!!	getConnectedDevices() : BluetoothDevice
        if (mService == null) {
            return new ArrayList<BluetoothDevice>(0);
        }
        return mService.getDevicesMatchingConnectionStates(
              new int[] {BluetoothProfile.STATE_CONNECTED,
                         BluetoothProfile.STATE_CONNECTING,
                         BluetoothProfile.STATE_DISCONNECTING});
!!!30307383.java!!!	connect(inout device : BluetoothDevice) : boolean
        if (V) {
            Log.d(TAG,"PBAPClientProfile got connect request");
        }
        if (mService == null) {
            return false;
        }
        List<BluetoothDevice> srcs = getConnectedDevices();
        if (srcs != null) {
            for (BluetoothDevice src : srcs) {
                if (src.equals(device)) {
                    // Connect to same device, Ignore it
                    Log.d(TAG,"Ignoring Connect");
                    return true;
                }
            }
            for (BluetoothDevice src : srcs) {
                mService.disconnect(device);
            }
        }
        Log.d(TAG,"PBAPClientProfile attempting to connect to " + device.getAddress());

        return mService.connect(device);
!!!30307511.java!!!	disconnect(inout device : BluetoothDevice) : boolean
        if (V) {
            Log.d(TAG,"PBAPClientProfile got disconnect request");
        }
        if (mService == null) {
            return false;
        }
        return mService.disconnect(device);
!!!30307639.java!!!	getConnectionStatus(inout device : BluetoothDevice) : int
        if (mService == null) {
            return BluetoothProfile.STATE_DISCONNECTED;
        }
        return mService.getConnectionState(device);
!!!30307767.java!!!	isPreferred(inout device : BluetoothDevice) : boolean
        if (mService == null) {
            return false;
        }
        return mService.getPriority(device) > BluetoothProfile.PRIORITY_OFF;
!!!30307895.java!!!	getPreferred(inout device : BluetoothDevice) : int
        if (mService == null) {
            return BluetoothProfile.PRIORITY_OFF;
        }
        return mService.getPriority(device);
!!!30308023.java!!!	setPreferred(inout device : BluetoothDevice, inout preferred : boolean) : void
        if (mService == null) {
            return;
        }
        if (preferred) {
            if (mService.getPriority(device) < BluetoothProfile.PRIORITY_ON) {
                mService.setPriority(device, BluetoothProfile.PRIORITY_ON);
            }
        } else {
            mService.setPriority(device, BluetoothProfile.PRIORITY_OFF);
        }
!!!30308151.java!!!	toString() : String
        return NAME;
!!!30308279.java!!!	getOrdinal() : int
        return ORDINAL;
!!!30308407.java!!!	getNameResource(inout device : BluetoothDevice) : int
        // we need to have same string in UI as the server side.
        return R.string.bluetooth_profile_pbap;
!!!30308535.java!!!	getSummaryResourceForDevice(inout device : BluetoothDevice) : int
        return R.string.bluetooth_profile_pbap_summary;
!!!30308663.java!!!	getDrawableResource(inout btClass : BluetoothClass) : int
        return R.drawable.ic_bt_cellphone;
!!!30308791.java!!!	finalize() : void
        if (V) {
            Log.d(TAG, "finalize()");
        }
        if (mService != null) {
            try {
                BluetoothAdapter.getDefaultAdapter().closeProfileProxy(
                    BluetoothProfile.PBAP_CLIENT,mService);
                mService = null;
            } catch (Throwable t) {
                Log.w(TAG, "Error cleaning up PBAP Client proxy", t);
            }
        }
