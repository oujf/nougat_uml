class UsageGraph
!!!30337207.java!!!	UsageGraph(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);
        final Resources resources = context.getResources();

        mLinePaint = new Paint();
        mLinePaint.setStyle(Style.STROKE);
        mLinePaint.setStrokeCap(Cap.ROUND);
        mLinePaint.setStrokeJoin(Join.ROUND);
        mLinePaint.setAntiAlias(true);
        mCornerRadius = resources.getDimensionPixelSize(R.dimen.usage_graph_line_corner_radius);
        mLinePaint.setPathEffect(new CornerPathEffect(mCornerRadius));
        mLinePaint.setStrokeWidth(resources.getDimensionPixelSize(R.dimen.usage_graph_line_width));

        mFillPaint = new Paint(mLinePaint);
        mFillPaint.setStyle(Style.FILL);

        mDottedPaint = new Paint(mLinePaint);
        mDottedPaint.setStyle(Style.STROKE);
        float dots = resources.getDimensionPixelSize(R.dimen.usage_graph_dot_size);
        float interval = resources.getDimensionPixelSize(R.dimen.usage_graph_dot_interval);
        mDottedPaint.setStrokeWidth(dots * 3);
        mDottedPaint.setPathEffect(new DashPathEffect(new float[] {dots, interval}, 0));
        mDottedPaint.setColor(context.getColor(R.color.usage_graph_dots));

        TypedValue v = new TypedValue();
        context.getTheme().resolveAttribute(com.android.internal.R.attr.listDivider, v, true);
        mDivider = context.getDrawable(v.resourceId);
        mTintedDivider = context.getDrawable(v.resourceId);
        mDividerSize = resources.getDimensionPixelSize(R.dimen.usage_graph_divider_size);
!!!30337335.java!!!	clearPaths() : void
        mPaths.clear();
!!!30337463.java!!!	setMax(in maxX : int, in maxY : int) : void
        mMaxX = maxX;
        mMaxY = maxY;
!!!30337591.java!!!	setDividerLoc(in height : int) : void
        mMiddleDividerLoc = 1 - height / mMaxY;
!!!30337719.java!!!	setDividerColors(in middleColor : int, in topColor : int) : void
        mMiddleDividerTint = middleColor;
        mTopDividerTint = topColor;
!!!30337847.java!!!	addPath(inout points : SparseIntArray) : void
        for (int i = 0; i < points.size(); i++) {
            mPaths.put(points.keyAt(i), points.valueAt(i));
        }
        mPaths.put(points.keyAt(points.size() - 1) + 1, PATH_DELIM);
        calculateLocalPaths();
        postInvalidate();
!!!30337975.java!!!	setAccentColor(in color : int) : void
        mAccentColor = color;
        mLinePaint.setColor(mAccentColor);
        updateGradient();
        postInvalidate();
!!!30338103.java!!!	setShowProjection(inout showProjection : boolean, inout projectUp : boolean) : void
        mShowProjection = showProjection;
        mProjectUp = projectUp;
        postInvalidate();
!!!30338231.java!!!	onSizeChanged(in w : int, in h : int, in oldw : int, in oldh : int) : void
        super.onSizeChanged(w, h, oldw, oldh);
        updateGradient();
        calculateLocalPaths();
!!!30338359.java!!!	calculateLocalPaths() : void
        if (getWidth() == 0) return;
        mLocalPaths.clear();
        int pendingXLoc = 0;
        int pendingYLoc = PATH_DELIM;
        for (int i = 0; i < mPaths.size(); i++) {
            int x = mPaths.keyAt(i);
            int y = mPaths.valueAt(i);
            if (y == PATH_DELIM) {
                if (i == mPaths.size() - 1 && pendingYLoc != PATH_DELIM) {
                    // Connect to the end of the graph.
                    mLocalPaths.put(pendingXLoc, pendingYLoc);
                }
                // Clear out any pending points.
                pendingYLoc = PATH_DELIM;
                mLocalPaths.put(pendingXLoc + 1, PATH_DELIM);
            } else {
                final int lx = getX(x);
                final int ly = getY(y);
                pendingXLoc = lx;
                if (mLocalPaths.size() > 0) {
                    int lastX = mLocalPaths.keyAt(mLocalPaths.size() - 1);
                    int lastY = mLocalPaths.valueAt(mLocalPaths.size() - 1);
                    if (lastY != PATH_DELIM && !hasDiff(lastX, lx) && !hasDiff(lastY, ly)) {
                        pendingYLoc = ly;
                        continue;
                    }
                }
                mLocalPaths.put(lx, ly);
            }
        }
!!!30338487.java!!!	hasDiff(in x1 : int, in x2 : int) : boolean
        return Math.abs(x2 - x1) >= mCornerRadius;
!!!30338615.java!!!	getX(in x : float) : int
        return (int) (x / mMaxX * getWidth());
!!!30338743.java!!!	getY(in y : float) : int
        return (int) (getHeight() * (1 - (y / mMaxY)));
!!!30338871.java!!!	updateGradient() : void
        mFillPaint.setShader(new LinearGradient(0, 0, 0, getHeight(),
                getColor(mAccentColor, .2f), 0, TileMode.CLAMP));
!!!30338999.java!!!	getColor(in color : int, in alphaScale : float) : int
        return (color & (((int) (0xff * alphaScale) << 24) | 0xffffff));
!!!30339127.java!!!	onDraw(inout canvas : Canvas) : void
        // Draw lines across the top, middle, and bottom.
        if (mMiddleDividerLoc != 0) {
            drawDivider(0, canvas, mTopDividerTint);
        }
        drawDivider((int) ((canvas.getHeight() - mDividerSize) * mMiddleDividerLoc), canvas,
                mMiddleDividerTint);
        drawDivider(canvas.getHeight() - mDividerSize, canvas, -1);

        if (mLocalPaths.size() == 0) {
            return;
        }
        if (mShowProjection) {
            drawProjection(canvas);
        }
        drawFilledPath(canvas);
        drawLinePath(canvas);
!!!30339255.java!!!	drawProjection(inout canvas : Canvas) : void
        mPath.reset();
        int x = mLocalPaths.keyAt(mLocalPaths.size() - 2);
        int y = mLocalPaths.valueAt(mLocalPaths.size() - 2);
        mPath.moveTo(x, y);
        mPath.lineTo(canvas.getWidth(), mProjectUp ? 0 : canvas.getHeight());
        canvas.drawPath(mPath, mDottedPaint);
!!!30339383.java!!!	drawLinePath(inout canvas : Canvas) : void
        mPath.reset();
        mPath.moveTo(mLocalPaths.keyAt(0), mLocalPaths.valueAt(0));
        for (int i = 1; i < mLocalPaths.size(); i++) {
            int x = mLocalPaths.keyAt(i);
            int y = mLocalPaths.valueAt(i);
            if (y == PATH_DELIM) {
                if (++i < mLocalPaths.size()) {
                    mPath.moveTo(mLocalPaths.keyAt(i), mLocalPaths.valueAt(i));
                }
            } else {
                mPath.lineTo(x, y);
            }
        }
        canvas.drawPath(mPath, mLinePaint);
!!!30339511.java!!!	drawFilledPath(inout canvas : Canvas) : void
        mPath.reset();
        float lastStartX = mLocalPaths.keyAt(0);
        mPath.moveTo(mLocalPaths.keyAt(0), mLocalPaths.valueAt(0));
        for (int i = 1; i < mLocalPaths.size(); i++) {
            int x = mLocalPaths.keyAt(i);
            int y = mLocalPaths.valueAt(i);
            if (y == PATH_DELIM) {
                mPath.lineTo(mLocalPaths.keyAt(i - 1), getHeight());
                mPath.lineTo(lastStartX, getHeight());
                mPath.close();
                if (++i < mLocalPaths.size()) {
                    lastStartX = mLocalPaths.keyAt(i);
                    mPath.moveTo(mLocalPaths.keyAt(i), mLocalPaths.valueAt(i));
                }
            } else {
                mPath.lineTo(x, y);
            }
        }
        canvas.drawPath(mPath, mFillPaint);
!!!30339639.java!!!	drawDivider(in y : int, inout canvas : Canvas, in tintColor : int) : void
        Drawable d = mDivider;
        if (tintColor != -1) {
            mTintedDivider.setTint(tintColor);
            d = mTintedDivider;
        }
        d.setBounds(0, y, canvas.getWidth(), y + mDividerSize);
        d.draw(canvas);
