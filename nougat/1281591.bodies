class ChartDataLoader
!!!30341687.java!!!	buildArgs(inout template : NetworkTemplate, inout app : AppItem) : Bundle
        return buildArgs(template, app, FIELD_RX_BYTES | FIELD_TX_BYTES);
!!!30341815.java!!!	buildArgs(inout template : NetworkTemplate, inout app : AppItem, in fields : int) : Bundle
        final Bundle args = new Bundle();
        args.putParcelable(KEY_TEMPLATE, template);
        args.putParcelable(KEY_APP, app);
        args.putInt(KEY_FIELDS, fields);
        return args;
!!!30341943.java!!!	ChartDataLoader(inout context : Context, inout session : INetworkStatsSession, inout args : Bundle)
        super(context);
        mSession = session;
        mArgs = args;
!!!30342071.java!!!	onStartLoading() : void
        super.onStartLoading();
        forceLoad();
!!!30342199.java!!!	loadInBackground() : ChartData
        final NetworkTemplate template = mArgs.getParcelable(KEY_TEMPLATE);
        final AppItem app = mArgs.getParcelable(KEY_APP);
        final int fields = mArgs.getInt(KEY_FIELDS);

        try {
            return loadInBackground(template, app, fields);
        } catch (RemoteException e) {
            // since we can't do much without history, and we don't want to
            // leave with half-baked UI, we bail hard.
            throw new RuntimeException("problem reading network stats", e);
        }
!!!30342327.java!!!	loadInBackground(inout template : NetworkTemplate, inout app : AppItem, in fields : int) : ChartData
        final ChartData data = new ChartData();
        data.network = mSession.getHistoryForNetwork(template, fields);

        if (app != null) {
            // load stats for current uid and template
            final int size = app.uids.size();
            for (int i = 0; i < size; i++) {
                final int uid = app.uids.keyAt(i);
                data.detailDefault = collectHistoryForUid(
                        template, uid, SET_DEFAULT, data.detailDefault);
                data.detailForeground = collectHistoryForUid(
                        template, uid, SET_FOREGROUND, data.detailForeground);
            }

            if (size > 0) {
                data.detail = new NetworkStatsHistory(data.detailForeground.getBucketDuration());
                data.detail.recordEntireHistory(data.detailDefault);
                data.detail.recordEntireHistory(data.detailForeground);
            } else {
                data.detailDefault = new NetworkStatsHistory(HOUR_IN_MILLIS);
                data.detailForeground = new NetworkStatsHistory(HOUR_IN_MILLIS);
                data.detail = new NetworkStatsHistory(HOUR_IN_MILLIS);
            }
        }

        return data;
!!!30342455.java!!!	onStopLoading() : void
        super.onStopLoading();
        cancelLoad();
!!!30342583.java!!!	onReset() : void
        super.onReset();
        cancelLoad();
!!!30342711.java!!!	collectHistoryForUid(inout template : NetworkTemplate, in uid : int, in set : int, inout existing : NetworkStatsHistory) : NetworkStatsHistory
        final NetworkStatsHistory history = mSession.getHistoryForUid(
                template, uid, set, TAG_NONE, FIELD_RX_BYTES | FIELD_TX_BYTES);

        if (existing != null) {
            existing.recordEntireHistory(history);
            return existing;
        } else {
            return history;
        }
