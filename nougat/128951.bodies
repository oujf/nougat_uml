class Resources
!!!2838711.java!!!	selectDefaultTheme(in curTheme : int, in targetSdkVersion : int) : int
        return selectSystemTheme(curTheme, targetSdkVersion,
                com.android.internal.R.style.Theme,
                com.android.internal.R.style.Theme_Holo,
                com.android.internal.R.style.Theme_DeviceDefault,
                com.android.internal.R.style.Theme_DeviceDefault_Light_DarkActionBar);
!!!2838839.java!!!	selectSystemTheme(in curTheme : int, in targetSdkVersion : int, in orig : int, in holo : int, in dark : int, in deviceDefault : int) : int
        if (curTheme != 0) {
            return curTheme;
        }
        if (targetSdkVersion < Build.VERSION_CODES.HONEYCOMB) {
            return orig;
        }
        if (targetSdkVersion < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
            return holo;
        }
        if (targetSdkVersion < Build.VERSION_CODES.N) {
            return dark;
        }
        return deviceDefault;
!!!2838967.java!!!	getSystem() : Resources
        synchronized (sSync) {
            Resources ret = mSystem;
            if (ret == null) {
                ret = new Resources();
                mSystem = ret;
            }
            return ret;
        }
!!!2839479.java!!!	Resources(inout assets : AssetManager, inout metrics : DisplayMetrics, inout config : Configuration)
        this(null);
        mResourcesImpl = new ResourcesImpl(assets, metrics, config, new DisplayAdjustments());
!!!2839607.java!!!	Resources(inout classLoader : ClassLoader)
        mClassLoader = classLoader == null ? ClassLoader.getSystemClassLoader() : classLoader;
!!!2839735.java!!!	Resources()
        this(null);

        final DisplayMetrics metrics = new DisplayMetrics();
        metrics.setToDefaults();

        final Configuration config = new Configuration();
        config.setToDefaults();

        mResourcesImpl = new ResourcesImpl(AssetManager.getSystem(), metrics, config,
                new DisplayAdjustments());
!!!2839863.java!!!	setImpl(inout impl : ResourcesImpl) : void
        if (impl == mResourcesImpl) {
            return;
        }

        mResourcesImpl = impl;

        // Create new ThemeImpls that are identical to the ones we have.
        synchronized (mThemeRefs) {
            final int count = mThemeRefs.size();
            for (int i = 0; i < count; i++) {
                WeakReference<Theme> weakThemeRef = mThemeRefs.get(i);
                Theme theme = weakThemeRef != null ? weakThemeRef.get() : null;
                if (theme != null) {
                    theme.setImpl(mResourcesImpl.newThemeImpl(theme.getKey()));
                }
            }
        }
!!!2839991.java!!!	getImpl() : ResourcesImpl
        return mResourcesImpl;
!!!2840119.java!!!	getClassLoader() : ClassLoader
        return mClassLoader;
!!!2840247.java!!!	getDrawableInflater() : DrawableInflater
        if (mDrawableInflater == null) {
            mDrawableInflater = new DrawableInflater(this, mClassLoader);
        }
        return mDrawableInflater;
!!!2840375.java!!!	getAnimatorCache() : ConfigurationBoundResourceCache
        return mResourcesImpl.getAnimatorCache();
!!!2840503.java!!!	getStateListAnimatorCache() : ConfigurationBoundResourceCache
        return mResourcesImpl.getStateListAnimatorCache();
!!!2840631.java!!!	getText(in id : int) : CharSequence
        CharSequence res = mResourcesImpl.getAssets().getResourceText(id);
        if (res != null) {
            return res;
        }
        throw new NotFoundException("String resource ID #0x"
                                    + Integer.toHexString(id));
!!!2840759.java!!!	getQuantityText(in id : int, in quantity : int) : CharSequence
        return mResourcesImpl.getQuantityText(id, quantity);
!!!2840887.java!!!	getString(in id : int) : String
        return getText(id).toString();
!!!2841015.java!!!	getString(in id : int, inout  : Object...formatArgs) : String
        final String raw = getString(id);
        return String.format(mResourcesImpl.getConfiguration().getLocales().get(0), raw,
                formatArgs);
!!!2841143.java!!!	getQuantityString(in id : int, in quantity : int, inout  : Object...formatArgs) : String
        String raw = getQuantityText(id, quantity).toString();
        return String.format(mResourcesImpl.getConfiguration().getLocales().get(0), raw,
                formatArgs);
!!!2841271.java!!!	getQuantityString(in id : int, in quantity : int) : String
        return getQuantityText(id, quantity).toString();
!!!2841399.java!!!	getText(in id : int, inout def : CharSequence) : CharSequence
        CharSequence res = id != 0 ? mResourcesImpl.getAssets().getResourceText(id) : null;
        return res != null ? res : def;
!!!2841527.java!!!	getTextArray(in id : int) : CharSequence
        CharSequence[] res = mResourcesImpl.getAssets().getResourceTextArray(id);
        if (res != null) {
            return res;
        }
        throw new NotFoundException("Text array resource ID #0x" + Integer.toHexString(id));
!!!2841655.java!!!	getStringArray(in id : int) : String
        String[] res = mResourcesImpl.getAssets().getResourceStringArray(id);
        if (res != null) {
            return res;
        }
        throw new NotFoundException("String array resource ID #0x" + Integer.toHexString(id));
!!!2841783.java!!!	getIntArray(in id : int) : int
        int[] res = mResourcesImpl.getAssets().getArrayIntResource(id);
        if (res != null) {
            return res;
        }
        throw new NotFoundException("Int array resource ID #0x" + Integer.toHexString(id));
!!!2841911.java!!!	obtainTypedArray(in id : int) : TypedArray
        final ResourcesImpl impl = mResourcesImpl;
        int len = impl.getAssets().getArraySize(id);
        if (len < 0) {
            throw new NotFoundException("Array resource ID #0x" + Integer.toHexString(id));
        }
        
        TypedArray array = TypedArray.obtain(this, len);
        array.mLength = impl.getAssets().retrieveArray(id, array.mData);
        array.mIndices[0] = 0;
        
        return array;
!!!2842039.java!!!	getDimension(in id : int) : float
        final TypedValue value = obtainTempTypedValue();
        try {
            final ResourcesImpl impl = mResourcesImpl;
            impl.getValue(id, value, true);
            if (value.type == TypedValue.TYPE_DIMENSION) {
                return TypedValue.complexToDimension(value.data, impl.getDisplayMetrics());
            }
            throw new NotFoundException("Resource ID #0x" + Integer.toHexString(id)
                    + " type #0x" + Integer.toHexString(value.type) + " is not valid");
        } finally {
            releaseTempTypedValue(value);
        }
!!!2842167.java!!!	getDimensionPixelOffset(in id : int) : int
        final TypedValue value = obtainTempTypedValue();
        try {
            final ResourcesImpl impl = mResourcesImpl;
            impl.getValue(id, value, true);
            if (value.type == TypedValue.TYPE_DIMENSION) {
                return TypedValue.complexToDimensionPixelOffset(value.data,
                        impl.getDisplayMetrics());
            }
            throw new NotFoundException("Resource ID #0x" + Integer.toHexString(id)
                    + " type #0x" + Integer.toHexString(value.type) + " is not valid");
        } finally {
            releaseTempTypedValue(value);
        }
!!!2842295.java!!!	getDimensionPixelSize(in id : int) : int
        final TypedValue value = obtainTempTypedValue();
        try {
            final ResourcesImpl impl = mResourcesImpl;
            impl.getValue(id, value, true);
            if (value.type == TypedValue.TYPE_DIMENSION) {
                return TypedValue.complexToDimensionPixelSize(value.data, impl.getDisplayMetrics());
            }
            throw new NotFoundException("Resource ID #0x" + Integer.toHexString(id)
                    + " type #0x" + Integer.toHexString(value.type) + " is not valid");
        } finally {
            releaseTempTypedValue(value);
        }
!!!2842423.java!!!	getFraction(in id : int, in base : int, in pbase : int) : float
        final TypedValue value = obtainTempTypedValue();
        try {
            mResourcesImpl.getValue(id, value, true);
            if (value.type == TypedValue.TYPE_FRACTION) {
                return TypedValue.complexToFraction(value.data, base, pbase);
            }
            throw new NotFoundException("Resource ID #0x" + Integer.toHexString(id)
                    + " type #0x" + Integer.toHexString(value.type) + " is not valid");
        } finally {
            releaseTempTypedValue(value);
        }
!!!2842551.java!!!	getDrawable(in id : int) : Drawable
        final Drawable d = getDrawable(id, null);
        if (d != null && d.canApplyTheme()) {
            Log.w(TAG, "Drawable " + getResourceName(id) + " has unresolved theme "
                    + "attributes! Consider using Resources.getDrawable(int, Theme) or "
                    + "Context.getDrawable(int).", new RuntimeException());
        }
        return d;
!!!2842679.java!!!	getDrawable(in id : int, inout theme : Resources::Theme) : Drawable
        final TypedValue value = obtainTempTypedValue();
        try {
            final ResourcesImpl impl = mResourcesImpl;
            impl.getValue(id, value, true);
            return impl.loadDrawable(this, value, id, theme, true);
        } finally {
            releaseTempTypedValue(value);
        }
!!!2842807.java!!!	getDrawableForDensity(in id : int, in density : int) : Drawable
        return getDrawableForDensity(id, density, null);
!!!2842935.java!!!	getDrawableForDensity(in id : int, in density : int, inout theme : Resources::Theme) : Drawable
        final TypedValue value = obtainTempTypedValue();
        try {
            final ResourcesImpl impl = mResourcesImpl;
            impl.getValueForDensity(id, density, value, true);

            // If the drawable's XML lives in our current density qualifier,
            // it's okay to use a scaled version from the cache. Otherwise, we
            // need to actually load the drawable from XML.
            final DisplayMetrics metrics = impl.getDisplayMetrics();
            final boolean useCache = value.density == metrics.densityDpi;

            /*
             * Pretend the requested density is actually the display density. If
             * the drawable returned is not the requested density, then force it
             * to be scaled later by dividing its density by the ratio of
             * requested density to actual device density. Drawables that have
             * undefined density or no density don't need to be handled here.
             */
            if (value.density > 0 && value.density != TypedValue.DENSITY_NONE) {
                if (value.density == density) {
                    value.density = metrics.densityDpi;
                } else {
                    value.density = (value.density * metrics.densityDpi) / density;
                }
            }
            return impl.loadDrawable(this, value, id, theme, useCache);
        } finally {
            releaseTempTypedValue(value);
        }
!!!2843063.java!!!	loadDrawable(inout value : TypedValue, in id : int, inout theme : Resources::Theme) : Drawable
        return mResourcesImpl.loadDrawable(this, value, id, theme, true);
!!!2843191.java!!!	getMovie(in id : int) : Movie
        final InputStream is = openRawResource(id);
        final Movie movie = Movie.decodeStream(is);
        try {
            is.close();
        } catch (IOException e) {
            // No one cares.
        }
        return movie;
!!!2843319.java!!!	getColor(in id : int) : int
        return getColor(id, null);
!!!2843447.java!!!	getColor(in id : int, inout theme : Resources::Theme) : int
        final TypedValue value = obtainTempTypedValue();
        try {
            final ResourcesImpl impl = mResourcesImpl;
            impl.getValue(id, value, true);
            if (value.type >= TypedValue.TYPE_FIRST_INT
                    && value.type <= TypedValue.TYPE_LAST_INT) {
                return value.data;
            } else if (value.type != TypedValue.TYPE_STRING) {
                throw new NotFoundException("Resource ID #0x" + Integer.toHexString(id)
                        + " type #0x" + Integer.toHexString(value.type) + " is not valid");
            }

            final ColorStateList csl = impl.loadColorStateList(this, value, id, theme);
            return csl.getDefaultColor();
        } finally {
            releaseTempTypedValue(value);
        }
!!!2843575.java!!!	getColorStateList(in id : int) : ColorStateList
        final ColorStateList csl = getColorStateList(id, null);
        if (csl != null && csl.canApplyTheme()) {
            Log.w(TAG, "ColorStateList " + getResourceName(id) + " has "
                    + "unresolved theme attributes! Consider using "
                    + "Resources.getColorStateList(int, Theme) or "
                    + "Context.getColorStateList(int).", new RuntimeException());
        }
        return csl;
!!!2843703.java!!!	getColorStateList(in id : int, inout theme : Resources::Theme) : ColorStateList
        final TypedValue value = obtainTempTypedValue();
        try {
            final ResourcesImpl impl = mResourcesImpl;
            impl.getValue(id, value, true);
            return impl.loadColorStateList(this, value, id, theme);
        } finally {
            releaseTempTypedValue(value);
        }
!!!2843831.java!!!	loadColorStateList(inout value : TypedValue, in id : int, inout theme : Resources::Theme) : ColorStateList
        return mResourcesImpl.loadColorStateList(this, value, id, theme);
!!!2843959.java!!!	loadComplexColor(inout value : TypedValue, in id : int, inout theme : Resources::Theme) : ComplexColor
        return mResourcesImpl.loadComplexColor(this, value, id, theme);
!!!2844087.java!!!	getBoolean(in id : int) : boolean
        final TypedValue value = obtainTempTypedValue();
        try {
            mResourcesImpl.getValue(id, value, true);
            if (value.type >= TypedValue.TYPE_FIRST_INT
                    && value.type <= TypedValue.TYPE_LAST_INT) {
                return value.data != 0;
            }
            throw new NotFoundException("Resource ID #0x" + Integer.toHexString(id)
                    + " type #0x" + Integer.toHexString(value.type) + " is not valid");
        } finally {
            releaseTempTypedValue(value);
        }
!!!2844215.java!!!	getInteger(in id : int) : int
        final TypedValue value = obtainTempTypedValue();
        try {
            mResourcesImpl.getValue(id, value, true);
            if (value.type >= TypedValue.TYPE_FIRST_INT
                    && value.type <= TypedValue.TYPE_LAST_INT) {
                return value.data;
            }
            throw new NotFoundException("Resource ID #0x" + Integer.toHexString(id)
                    + " type #0x" + Integer.toHexString(value.type) + " is not valid");
        } finally {
            releaseTempTypedValue(value);
        }
!!!2844343.java!!!	getFloat(in id : int) : float
        final TypedValue value = obtainTempTypedValue();
        try {
            mResourcesImpl.getValue(id, value, true);
            if (value.type == TypedValue.TYPE_FLOAT) {
                return value.getFloat();
            }
            throw new NotFoundException("Resource ID #0x" + Integer.toHexString(id)
                    + " type #0x" + Integer.toHexString(value.type) + " is not valid");
        } finally {
            releaseTempTypedValue(value);
        }
!!!2844471.java!!!	getLayout(in id : int) : XmlResourceParser
        return loadXmlResourceParser(id, "layout");
!!!2844599.java!!!	getAnimation(in id : int) : XmlResourceParser
        return loadXmlResourceParser(id, "anim");
!!!2844727.java!!!	getXml(in id : int) : XmlResourceParser
        return loadXmlResourceParser(id, "xml");
!!!2844855.java!!!	openRawResource(in id : int) : InputStream
        final TypedValue value = obtainTempTypedValue();
        try {
            return openRawResource(id, value);
        } finally {
            releaseTempTypedValue(value);
        }
!!!2844983.java!!!	obtainTempTypedValue() : TypedValue
        TypedValue tmpValue = null;
        synchronized (mTmpValueLock) {
            if (mTmpValue != null) {
                tmpValue = mTmpValue;
                mTmpValue = null;
            }
        }
        if (tmpValue == null) {
            return new TypedValue();
        }
        return tmpValue;
!!!2845111.java!!!	releaseTempTypedValue(inout value : TypedValue) : void
        synchronized (mTmpValueLock) {
            if (mTmpValue == null) {
                mTmpValue = value;
            }
        }
!!!2845239.java!!!	openRawResource(in id : int, inout value : TypedValue) : InputStream
        return mResourcesImpl.openRawResource(id, value);
!!!2845367.java!!!	openRawResourceFd(in id : int) : AssetFileDescriptor
        final TypedValue value = obtainTempTypedValue();
        try {
            return mResourcesImpl.openRawResourceFd(id, value);
        } finally {
            releaseTempTypedValue(value);
        }
!!!2845495.java!!!	getValue(in id : int, inout outValue : TypedValue, inout resolveRefs : boolean) : void
        mResourcesImpl.getValue(id, outValue, resolveRefs);
!!!2845623.java!!!	getValueForDensity(in id : int, in density : int, inout outValue : TypedValue, inout resolveRefs : boolean) : void
        mResourcesImpl.getValueForDensity(id, density, outValue, resolveRefs);
!!!2845751.java!!!	getValue(inout name : String, inout outValue : TypedValue, inout resolveRefs : boolean) : void
        mResourcesImpl.getValue(name, outValue, resolveRefs);
!!!2849207.java!!!	newTheme() : Resources::Theme
        Theme theme = new Theme();
        theme.setImpl(mResourcesImpl.newThemeImpl());
        mThemeRefs.add(new WeakReference<>(theme));
        return theme;
!!!2849335.java!!!	obtainAttributes(inout set : AttributeSet, inout attrs : int) : TypedArray
        int len = attrs.length;
        TypedArray array = TypedArray.obtain(this, len);

        // XXX note that for now we only work with compiled XML files.
        // To support generic XML files we will need to manually parse
        // out the attributes from the XML file (applying type information
        // contained in the resources and such).
        XmlBlock.Parser parser = (XmlBlock.Parser)set;
        mResourcesImpl.getAssets().retrieveAttributes(parser.mParseState, attrs,
                array.mData, array.mIndices);

        array.mXml = parser;

        return array;
!!!2849463.java!!!	updateConfiguration(inout config : Configuration, inout metrics : DisplayMetrics) : void
        updateConfiguration(config, metrics, null);
!!!2849591.java!!!	updateConfiguration(inout config : Configuration, inout metrics : DisplayMetrics, inout compat : CompatibilityInfo) : void
        mResourcesImpl.updateConfiguration(config, metrics, compat);
!!!2849719.java!!!	updateSystemConfiguration(inout config : Configuration, inout metrics : DisplayMetrics, inout compat : CompatibilityInfo) : void
        if (mSystem != null) {
            mSystem.updateConfiguration(config, metrics, compat);
            //Log.i(TAG, "Updated system resources " + mSystem
            //        + ": " + mSystem.getConfiguration());
        }
!!!2849847.java!!!	getDisplayMetrics() : DisplayMetrics
        return mResourcesImpl.getDisplayMetrics();
!!!2849975.java!!!	getDisplayAdjustments() : DisplayAdjustments
        return mResourcesImpl.getDisplayAdjustments();
!!!2850103.java!!!	getConfiguration() : Configuration
        return mResourcesImpl.getConfiguration();
!!!2850231.java!!!	getSizeConfigurations() : Configuration
        return mResourcesImpl.getSizeConfigurations();
!!!2850359.java!!!	getCompatibilityInfo() : CompatibilityInfo
        return mResourcesImpl.getCompatibilityInfo();
!!!2850487.java!!!	setCompatibilityInfo(inout ci : CompatibilityInfo) : void
        if (ci != null) {
            mResourcesImpl.updateConfiguration(null, null, ci);
        }
!!!2850615.java!!!	getIdentifier(inout name : String, inout defType : String, inout defPackage : String) : int
        return mResourcesImpl.getIdentifier(name, defType, defPackage);
!!!2850743.java!!!	resourceHasPackage(in resid : int) : boolean
        return (resid >>> 24) != 0;
!!!2850871.java!!!	getResourceName(in resid : int) : String
        return mResourcesImpl.getResourceName(resid);
!!!2850999.java!!!	getResourcePackageName(in resid : int) : String
        return mResourcesImpl.getResourcePackageName(resid);
!!!2851127.java!!!	getResourceTypeName(in resid : int) : String
        return mResourcesImpl.getResourceTypeName(resid);
!!!2851255.java!!!	getResourceEntryName(in resid : int) : String
        return mResourcesImpl.getResourceEntryName(resid);
!!!2851383.java!!!	parseBundleExtras(inout parser : XmlResourceParser, inout outBundle : Bundle) : void
        int outerDepth = parser.getDepth();
        int type;
        while ((type=parser.next()) != XmlPullParser.END_DOCUMENT
               && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
            if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
                continue;
            }
            
            String nodeName = parser.getName();
            if (nodeName.equals("extra")) {
                parseBundleExtra("extra", parser, outBundle);
                XmlUtils.skipCurrentTag(parser);

            } else {
                XmlUtils.skipCurrentTag(parser);
            }
        }        
!!!2851511.java!!!	parseBundleExtra(inout tagName : String, inout attrs : AttributeSet, inout outBundle : Bundle) : void
        TypedArray sa = obtainAttributes(attrs,
                com.android.internal.R.styleable.Extra);

        String name = sa.getString(
                com.android.internal.R.styleable.Extra_name);
        if (name == null) {
            sa.recycle();
            throw new XmlPullParserException("<" + tagName
                    + "> requires an android:name attribute at "
                    + attrs.getPositionDescription());
        }

        TypedValue v = sa.peekValue(
                com.android.internal.R.styleable.Extra_value);
        if (v != null) {
            if (v.type == TypedValue.TYPE_STRING) {
                CharSequence cs = v.coerceToString();
                outBundle.putCharSequence(name, cs);
            } else if (v.type == TypedValue.TYPE_INT_BOOLEAN) {
                outBundle.putBoolean(name, v.data != 0);
            } else if (v.type >= TypedValue.TYPE_FIRST_INT
                    && v.type <= TypedValue.TYPE_LAST_INT) {
                outBundle.putInt(name, v.data);
            } else if (v.type == TypedValue.TYPE_FLOAT) {
                outBundle.putFloat(name, v.getFloat());
            } else {
                sa.recycle();
                throw new XmlPullParserException("<" + tagName
                        + "> only supports string, integer, float, color, and boolean at "
                        + attrs.getPositionDescription());
            }
        } else {
            sa.recycle();
            throw new XmlPullParserException("<" + tagName
                    + "> requires an android:value or android:resource attribute at "
                    + attrs.getPositionDescription());
        }

        sa.recycle();
!!!2851639.java!!!	getAssets() : AssetManager
        return mResourcesImpl.getAssets();
!!!2851767.java!!!	flushLayoutCache() : void
        mResourcesImpl.flushLayoutCache();
!!!2851895.java!!!	startPreloading() : void
        mResourcesImpl.startPreloading();
!!!2852023.java!!!	finishPreloading() : void
        mResourcesImpl.finishPreloading();
!!!2852151.java!!!	getPreloadedDrawables() : LongSparseArray
        return mResourcesImpl.getPreloadedDrawables();
!!!2852279.java!!!	loadXmlResourceParser(in id : int, inout type : String) : XmlResourceParser
        final TypedValue value = obtainTempTypedValue();
        try {
            final ResourcesImpl impl = mResourcesImpl;
            impl.getValue(id, value, true);
            if (value.type == TypedValue.TYPE_STRING) {
                return impl.loadXmlResourceParser(value.string.toString(), id,
                        value.assetCookie, type);
            }
            throw new NotFoundException("Resource ID #0x" + Integer.toHexString(id)
                    + " type #0x" + Integer.toHexString(value.type) + " is not valid");
        } finally {
            releaseTempTypedValue(value);
        }
!!!2852407.java!!!	loadXmlResourceParser(inout file : String, in id : int, in assetCookie : int, inout type : String) : XmlResourceParser
        return mResourcesImpl.loadXmlResourceParser(file, id, assetCookie, type);
!!!2852535.java!!!	calcConfigChanges(inout config : Configuration) : int
        return mResourcesImpl.calcConfigChanges(config);
!!!2852663.java!!!	obtainAttributes(inout res : Resources, inout theme : Resources::Theme, inout set : AttributeSet, inout attrs : int) : TypedArray
        if (theme == null) {
            return res.obtainAttributes(set, attrs);
        }
        return theme.obtainStyledAttributes(set, attrs, 0, 0);
