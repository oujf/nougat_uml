class Utils
!!!30439095.java!!!	joinStrings(inout separator : String, inout strings : List<String>) : String
        switch(strings.size()) {
            case 0:
                return "";
            case 1:
                return strings.get(0);
            default:
                StringBuilder joiner = new StringBuilder();
                boolean first = true;
                for (String field : strings) {
                    if (first) {
                        first = false;
                    } else {
                        joiner.append(separator);
                    }
                    joiner.append(field);
                }
                return joiner.toString();
        }
!!!30439223.java!!!	getCertFingerprintsFromPackageManager(inout packageName : String, inout context : Context) : String
        Signature[] signatures = context.getPackageManager().getPackageInfo(packageName,
                PackageManager.GET_SIGNATURES).signatures;
        ArrayList<String> result = new ArrayList<String>(signatures.length);
        for (Signature sig : signatures) {
            result.add(computeNormalizedSha256Fingerprint(sig.toByteArray()));
        }
        return result;
!!!30439351.java!!!	computeNormalizedSha256Fingerprint(inout signature : byte) : String
        MessageDigest digester;
        try {
            digester = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
            throw new AssertionError("No SHA-256 implementation found.");
        }
        digester.update(signature);
        return byteArrayToHexString(digester.digest());
!!!30439479.java!!!	hasCommonString(inout list1 : List<String>, inout list2 : List<String>) : boolean
        HashSet<String> set2 = new HashSet<>(list2);
        for (String string : list1) {
            if (set2.contains(string)) {
                return true;
            }
        }
        return false;
!!!30439607.java!!!	byteArrayToHexString(inout array : byte) : String
        if (array.length == 0) {
          return "";
        }
        char[] buf = new char[array.length * 3 - 1];

        int bufIndex = 0;
        for (int i = 0; i < array.length; i++) {
            byte b = array[i];
            if (i > 0) {
                buf[bufIndex++] = ':';
            }
            buf[bufIndex++] = HEX_DIGITS[(b >>> 4) & 0x0F];
            buf[bufIndex++] = HEX_DIGITS[b & 0x0F];
        }
        return new String(buf);
