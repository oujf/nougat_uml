class Looper
!!!3793975.java!!!	prepare() : void
        prepare(true);
!!!3794103.java!!!	prepare(inout quitAllowed : boolean) : void
        if (sThreadLocal.get() != null) {
            throw new RuntimeException("Only one Looper may be created per thread");
        }
        sThreadLocal.set(new Looper(quitAllowed));
!!!3794231.java!!!	prepareMainLooper() : void
        prepare(false);
        synchronized (Looper.class) {
            if (sMainLooper != null) {
                throw new IllegalStateException("The main Looper has already been prepared.");
            }
            sMainLooper = myLooper();
        }
!!!3794359.java!!!	getMainLooper() : Looper
        synchronized (Looper.class) {
            return sMainLooper;
        }
!!!3794487.java!!!	loop() : void
        final Looper me = myLooper();
        if (me == null) {
            throw new RuntimeException("No Looper; Looper.prepare() wasn't called on this thread.");
        }
        final MessageQueue queue = me.mQueue;

        // Make sure the identity of this thread is that of the local process,
        // and keep track of what that identity token actually is.
        Binder.clearCallingIdentity();
        final long ident = Binder.clearCallingIdentity();

        for (;;) {
            Message msg = queue.next(); // might block
            if (msg == null) {
                // No message indicates that the message queue is quitting.
                return;
            }

            // This must be in a local variable, in case a UI event sets the logger
            final Printer logging = me.mLogging;
            if (logging != null) {
                logging.println(">>>>> Dispatching to " + msg.target + " " +
                        msg.callback + ": " + msg.what);
            }

            final long traceTag = me.mTraceTag;
            if (traceTag != 0) {
                Trace.traceBegin(traceTag, msg.target.getTraceName(msg));
            }
            try {
                msg.target.dispatchMessage(msg);
            } finally {
                if (traceTag != 0) {
                    Trace.traceEnd(traceTag);
                }
            }

            if (logging != null) {
                logging.println("<<<<< Finished to " + msg.target + " " + msg.callback);
            }

            // Make sure that during the course of dispatching the
            // identity of the thread wasn't corrupted.
            final long newIdent = Binder.clearCallingIdentity();
            if (ident != newIdent) {
                Log.wtf(TAG, "Thread identity changed from 0x"
                        + Long.toHexString(ident) + " to 0x"
                        + Long.toHexString(newIdent) + " while dispatching to "
                        + msg.target.getClass().getName() + " "
                        + msg.callback + " what=" + msg.what);
            }

            msg.recycleUnchecked();
        }
!!!3794615.java!!!	myLooper() : Looper
        return sThreadLocal.get();
!!!3794743.java!!!	myQueue() : MessageQueue
        return myLooper().mQueue;
!!!3794871.java!!!	Looper(inout quitAllowed : boolean)
        mQueue = new MessageQueue(quitAllowed);
        mThread = Thread.currentThread();
!!!3794999.java!!!	isCurrentThread() : boolean
        return Thread.currentThread() == mThread;
!!!3795127.java!!!	setMessageLogging(inout printer : Printer) : void
        mLogging = printer;
!!!3795255.java!!!	setTraceTag(in traceTag : long) : void
        mTraceTag = traceTag;
!!!3795383.java!!!	quit() : void
        mQueue.quit(false);
!!!3795511.java!!!	quitSafely() : void
        mQueue.quit(true);
!!!3795639.java!!!	getThread() : Thread
        return mThread;
!!!3795767.java!!!	getQueue() : MessageQueue
        return mQueue;
!!!3795895.java!!!	dump(inout pw : Printer, inout prefix : String) : void
        pw.println(prefix + toString());
        mQueue.dump(pw, prefix + "  ");
!!!3796023.java!!!	toString() : String
        return "Looper (" + mThread.getName() + ", tid " + mThread.getId()
                + ") {" + Integer.toHexString(System.identityHashCode(this)) + "}";
