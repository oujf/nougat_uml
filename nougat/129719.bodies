class Drawable
!!!171191.java!!!	setBounds(in left : int, in top : int, in right : int, in bottom : int) : void
        Rect oldBounds = mBounds;

        if (oldBounds == ZERO_BOUNDS_RECT) {
            oldBounds = mBounds = new Rect();
        }

        if (oldBounds.left != left || oldBounds.top != top ||
                oldBounds.right != right || oldBounds.bottom != bottom) {
            if (!oldBounds.isEmpty()) {
                // first invalidate the previous bounds
                invalidateSelf();
            }
            mBounds.set(left, top, right, bottom);
            onBoundsChange(mBounds);
        }
!!!171319.java!!!	setBounds(inout bounds : Rect) : void
        setBounds(bounds.left, bounds.top, bounds.right, bounds.bottom);
!!!171447.java!!!	copyBounds(inout bounds : Rect) : void
        bounds.set(mBounds);
!!!171575.java!!!	copyBounds() : Rect
        return new Rect(mBounds);
!!!171703.java!!!	getBounds() : Rect
        if (mBounds == ZERO_BOUNDS_RECT) {
            mBounds = new Rect();
        }

        return mBounds;
!!!171831.java!!!	getDirtyBounds() : Rect
        return getBounds();
!!!171959.java!!!	setChangingConfigurations(in configs : int) : void
        mChangingConfigurations = configs;
!!!172087.java!!!	getChangingConfigurations() : int
        return mChangingConfigurations;
!!!172471.java!!!	isFilterBitmap() : boolean
        return false;
!!!172983.java!!!	setCallback(inout cb : Drawable::Callback) : void
        mCallback = cb != null ? new WeakReference<>(cb) : null;
!!!173111.java!!!	getCallback() : Drawable::Callback
        return mCallback != null ? mCallback.get() : null;
!!!173239.java!!!	invalidateSelf() : void
        final Callback callback = getCallback();
        if (callback != null) {
            callback.invalidateDrawable(this);
        }
!!!173367.java!!!	scheduleSelf(inout what : Runnable, in when : long) : void
        final Callback callback = getCallback();
        if (callback != null) {
            callback.scheduleDrawable(this, what, when);
        }
!!!173495.java!!!	unscheduleSelf(inout what : Runnable) : void
        final Callback callback = getCallback();
        if (callback != null) {
            callback.unscheduleDrawable(this, what);
        }
!!!173623.java!!!	getLayoutDirection() : int
        return mLayoutDirection;
!!!173751.java!!!	setLayoutDirection(in layoutDirection : int) : boolean
        if (mLayoutDirection != layoutDirection) {
            mLayoutDirection = layoutDirection;
            return onLayoutDirectionChanged(layoutDirection);
        }
        return false;
!!!173879.java!!!	onLayoutDirectionChanged(in layoutDirection : int) : boolean
        return false;
!!!174135.java!!!	getAlpha() : int
        return 0xFF;
!!!174263.java!!!	setXfermode(inout mode : Xfermode) : void
        // Base implementation drops it on the floor for compatibility. Whee!
!!!174519.java!!!	setColorFilter(in color : int, inout mode : PorterDuff::Mode) : void
        setColorFilter(new PorterDuffColorFilter(color, mode));
!!!174647.java!!!	setTint(in tintColor : int) : void
        setTintList(ColorStateList.valueOf(tintColor));
!!!175031.java!!!	getColorFilter() : ColorFilter
        return null;
!!!175159.java!!!	clearColorFilter() : void
        setColorFilter(null);
!!!175543.java!!!	getHotspotBounds(inout outRect : Rect) : void
        outRect.set(getBounds());
!!!175671.java!!!	isProjected() : boolean
        return false;
!!!175799.java!!!	isStateful() : boolean
        return false;
!!!175927.java!!!	setState(in stateSet : int) : boolean
        if (!Arrays.equals(mStateSet, stateSet)) {
            mStateSet = stateSet;
            return onStateChange(stateSet);
        }
        return false;
!!!176055.java!!!	getState() : int
        return mStateSet;
!!!176311.java!!!	getCurrent() : Drawable
        return this;
!!!176439.java!!!	setLevel(in level : int) : boolean
        if (mLevel != level) {
            mLevel = level;
            return onLevelChange(level);
        }
        return false;
!!!176567.java!!!	getLevel() : int
        return mLevel;
!!!176695.java!!!	setVisible(inout visible : boolean, inout restart : boolean) : boolean
        boolean changed = mVisible != visible;
        if (changed) {
            mVisible = visible;
            invalidateSelf();
        }
        return changed;
!!!176823.java!!!	isVisible() : boolean
        return mVisible;
!!!177079.java!!!	isAutoMirrored() : boolean
        return false;
!!!177335.java!!!	canApplyTheme() : boolean
        return false;
!!!177591.java!!!	resolveOpacity(in op1 : int, in op2 : int) : int
        if (op1 == op2) {
            return op1;
        }
        if (op1 == PixelFormat.UNKNOWN || op2 == PixelFormat.UNKNOWN) {
            return PixelFormat.UNKNOWN;
        }
        if (op1 == PixelFormat.TRANSLUCENT || op2 == PixelFormat.TRANSLUCENT) {
            return PixelFormat.TRANSLUCENT;
        }
        if (op1 == PixelFormat.TRANSPARENT || op2 == PixelFormat.TRANSPARENT) {
            return PixelFormat.TRANSPARENT;
        }
        return PixelFormat.OPAQUE;
!!!177719.java!!!	getTransparentRegion() : Region
        return null;
!!!177847.java!!!	onStateChange(inout state : int) : boolean
        return false;
!!!177975.java!!!	onLevelChange(in level : int) : boolean
        return false;
!!!178103.java!!!	onBoundsChange(inout bounds : Rect) : void
        // Stub method.
!!!178231.java!!!	getIntrinsicWidth() : int
        return -1;
!!!178359.java!!!	getIntrinsicHeight() : int
        return -1;
!!!178487.java!!!	getMinimumWidth() : int
        final int intrinsicWidth = getIntrinsicWidth();
        return intrinsicWidth > 0 ? intrinsicWidth : 0;
!!!178615.java!!!	getMinimumHeight() : int
        final int intrinsicHeight = getIntrinsicHeight();
        return intrinsicHeight > 0 ? intrinsicHeight : 0;
!!!178743.java!!!	getPadding(inout padding : Rect) : boolean
        padding.set(0, 0, 0, 0);
        return false;
!!!178871.java!!!	getOpticalInsets() : Insets
        return Insets.NONE;
!!!178999.java!!!	getOutline(inout outline : Outline) : void
        outline.setRect(getBounds());
        outline.setAlpha(0);
!!!179127.java!!!	mutate() : Drawable
        return this;
!!!179255.java!!!	clearMutated() : void
        // Default implementation is no-op.
!!!179383.java!!!	createFromStream(inout is : InputStream, inout srcName : String) : Drawable
        Trace.traceBegin(Trace.TRACE_TAG_RESOURCES, srcName != null ? srcName : "Unknown drawable");
        try {
            return createFromResourceStream(null, null, is, srcName);
        } finally {
            Trace.traceEnd(Trace.TRACE_TAG_RESOURCES);
        }
!!!179511.java!!!	createFromResourceStream(inout res : Resources, inout value : TypedValue, inout is : InputStream, inout srcName : String) : Drawable
        Trace.traceBegin(Trace.TRACE_TAG_RESOURCES, srcName != null ? srcName : "Unknown drawable");
        try {
            return createFromResourceStream(res, value, is, srcName, null);
        } finally {
            Trace.traceEnd(Trace.TRACE_TAG_RESOURCES);
        }
!!!179639.java!!!	createFromResourceStream(inout res : Resources, inout value : TypedValue, inout is : InputStream, inout srcName : String, inout opts : BitmapFactory::Options) : Drawable
        if (is == null) {
            return null;
        }

        /*  ugh. The decodeStream contract is that we have already allocated
            the pad rect, but if the bitmap does not had a ninepatch chunk,
            then the pad will be ignored. If we could change this to lazily
            alloc/assign the rect, we could avoid the GC churn of making new
            Rects only to drop them on the floor.
        */
        Rect pad = new Rect();

        // Special stuff for compatibility mode: if the target density is not
        // the same as the display density, but the resource -is- the same as
        // the display density, then don't scale it down to the target density.
        // This allows us to load the system's density-correct resources into
        // an application in compatibility mode, without scaling those down
        // to the compatibility density only to have them scaled back up when
        // drawn to the screen.
        if (opts == null) opts = new BitmapFactory.Options();
        opts.inScreenDensity = Drawable.resolveDensity(res, 0);
        Bitmap  bm = BitmapFactory.decodeResourceStream(res, value, is, pad, opts);
        if (bm != null) {
            byte[] np = bm.getNinePatchChunk();
            if (np == null || !NinePatch.isNinePatchChunk(np)) {
                np = null;
                pad = null;
            }

            final Rect opticalInsets = new Rect();
            bm.getOpticalInsets(opticalInsets);
            return drawableFromBitmap(res, bm, np, pad, opticalInsets, srcName);
        }
        return null;
!!!179767.java!!!	createFromXml(inout r : Resources, inout parser : XmlPullParser) : Drawable
        return createFromXml(r, parser, null);
!!!179895.java!!!	createFromXml(inout r : Resources, inout parser : XmlPullParser, inout theme : Resources::Theme) : Drawable
        AttributeSet attrs = Xml.asAttributeSet(parser);

        int type;
        //noinspection StatementWithEmptyBody
        while ((type=parser.next()) != XmlPullParser.START_TAG
                && type != XmlPullParser.END_DOCUMENT) {
            // Empty loop.
        }

        if (type != XmlPullParser.START_TAG) {
            throw new XmlPullParserException("No start tag found");
        }

        Drawable drawable = createFromXmlInner(r, parser, attrs, theme);

        if (drawable == null) {
            throw new RuntimeException("Unknown initial tag: " + parser.getName());
        }

        return drawable;
!!!180023.java!!!	createFromXmlInner(inout r : Resources, inout parser : XmlPullParser, inout attrs : AttributeSet) : Drawable
        return createFromXmlInner(r, parser, attrs, null);
!!!180151.java!!!	createFromXmlInner(inout r : Resources, inout parser : XmlPullParser, inout attrs : AttributeSet, inout theme : Resources::Theme) : Drawable
        return r.getDrawableInflater().inflateFromXml(parser.getName(), parser, attrs, theme);
!!!180279.java!!!	createFromPath(inout pathName : String) : Drawable
        if (pathName == null) {
            return null;
        }

        Trace.traceBegin(Trace.TRACE_TAG_RESOURCES, pathName);
        try {
            Bitmap bm = BitmapFactory.decodeFile(pathName);
            if (bm != null) {
                return drawableFromBitmap(null, bm, null, null, null, pathName);
            }
        } finally {
            Trace.traceEnd(Trace.TRACE_TAG_RESOURCES);
        }

        return null;
!!!180407.java!!!	inflate(inout r : Resources, inout parser : XmlPullParser, inout attrs : AttributeSet) : void
        inflate(r, parser, attrs, null);
!!!180535.java!!!	inflate(inout r : Resources, inout parser : XmlPullParser, inout attrs : AttributeSet, inout theme : Resources::Theme) : void
        final TypedArray a = obtainAttributes(r, theme, attrs, R.styleable.Drawable);
        mVisible = a.getBoolean(R.styleable.Drawable_visible, mVisible);
        a.recycle();
!!!180663.java!!!	inflateWithAttributes(inout r : Resources, inout parser : XmlPullParser, inout attrs : TypedArray, in visibleAttr : int) : void
        mVisible = attrs.getBoolean(visibleAttr, mVisible);
!!!181687.java!!!	getConstantState() : Drawable::ConstantState
        return null;
!!!181815.java!!!	drawableFromBitmap(inout res : Resources, inout bm : Bitmap, inout np : byte, inout pad : Rect, inout layoutBounds : Rect, inout srcName : String) : Drawable

        if (np != null) {
            return new NinePatchDrawable(res, bm, np, pad, layoutBounds, srcName);
        }

        return new BitmapDrawable(res, bm);
!!!181943.java!!!	updateTintFilter(inout tintFilter : PorterDuffColorFilter, inout tint : ColorStateList, inout tintMode : PorterDuff::Mode) : PorterDuffColorFilter
        if (tint == null || tintMode == null) {
            return null;
        }

        final int color = tint.getColorForState(getState(), Color.TRANSPARENT);
        if (tintFilter == null) {
            return new PorterDuffColorFilter(color, tintMode);
        }

        tintFilter.setColor(color);
        tintFilter.setMode(tintMode);
        return tintFilter;
!!!182071.java!!!	obtainAttributes(inout res : Resources, inout theme : Resources::Theme, inout set : AttributeSet, inout attrs : int) : TypedArray
        if (theme == null) {
            return res.obtainAttributes(set, attrs);
        }
        return theme.obtainStyledAttributes(set, attrs, 0, 0);
!!!182199.java!!!	scaleFromDensity(in pixels : float, in sourceDensity : int, in targetDensity : int) : float
        return pixels * targetDensity / sourceDensity;
!!!182327.java!!!	scaleFromDensity(in pixels : int, in sourceDensity : int, in targetDensity : int, inout isSize : boolean) : int
        if (pixels == 0 || sourceDensity == targetDensity) {
            return pixels;
        }

        final float result = pixels * targetDensity / (float) sourceDensity;
        if (!isSize) {
            return (int) result;
        }

        final int rounded = Math.round(result);
        if (rounded != 0) {
            return rounded;
        } else if (pixels > 0) {
            return 1;
        } else {
            return -1;
        }
!!!182455.java!!!	resolveDensity(inout r : Resources, in parentDensity : int) : int
        final int densityDpi = r == null ? parentDensity : r.getDisplayMetrics().densityDpi;
        return densityDpi == 0 ? DisplayMetrics.DENSITY_DEFAULT : densityDpi;
!!!182583.java!!!	rethrowAsRuntimeException(inout cause : Exception) : void
        final RuntimeException e = new RuntimeException(cause);
        e.setStackTrace(new StackTraceElement[0]);
        throw e;
!!!182711.java!!!	parseTintMode(in value : int, inout defaultMode : PorterDuff::Mode) : PorterDuff::Mode
        switch (value) {
            case 3: return Mode.SRC_OVER;
            case 5: return Mode.SRC_IN;
            case 9: return Mode.SRC_ATOP;
            case 14: return Mode.MULTIPLY;
            case 15: return Mode.SCREEN;
            case 16: return Mode.ADD;
            default: return defaultMode;
        }
