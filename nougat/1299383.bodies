class FalsingManager
!!!30505399.java!!!	FalsingManager(inout context : Context)
        mContext = context;
        mSensorManager = mContext.getSystemService(SensorManager.class);
        mAccessibilityManager = context.getSystemService(AccessibilityManager.class);
        mDataCollector = DataCollector.getInstance(mContext);
        mHumanInteractionClassifier = HumanInteractionClassifier.getInstance(mContext);
        mScreenOn = context.getSystemService(PowerManager.class).isInteractive();

        mContext.getContentResolver().registerContentObserver(
                Settings.Secure.getUriFor(ENFORCE_BOUNCER), false,
                mSettingsObserver,
                UserHandle.USER_ALL);

        updateConfiguration();
!!!30505527.java!!!	getInstance(inout context : Context) : FalsingManager
        if (sInstance == null) {
            sInstance = new FalsingManager(context);
        }
        return sInstance;
!!!30505655.java!!!	updateConfiguration() : void
        mEnforceBouncer = 0 != Settings.Secure.getInt(mContext.getContentResolver(),
                ENFORCE_BOUNCER, 0);
!!!30505783.java!!!	shouldSessionBeActive() : boolean
        if (FalsingLog.ENABLED && FalsingLog.VERBOSE)
            FalsingLog.v("shouldBeActive", new StringBuilder()
                    .append("enabled=").append(isEnabled() ? 1 : 0)
                    .append(" mScreenOn=").append(mScreenOn ? 1 : 0)
                    .append(" mState=").append(StatusBarState.toShortString(mState))
                    .toString()
            );
        return isEnabled() && mScreenOn && (mState == StatusBarState.KEYGUARD);
!!!30505911.java!!!	sessionEntrypoint() : boolean
        if (!mSessionActive && shouldSessionBeActive()) {
            onSessionStart();
            return true;
        }
        return false;
!!!30506039.java!!!	sessionExitpoint(inout force : boolean) : void
        if (mSessionActive && (force || !shouldSessionBeActive())) {
            mSessionActive = false;
            mSensorManager.unregisterListener(this);
        }
!!!30506167.java!!!	onSessionStart() : void
        if (FalsingLog.ENABLED) {
            FalsingLog.i("onSessionStart", "classifierEnabled=" + isClassiferEnabled());
        }
        mBouncerOn = false;
        mSessionActive = true;

        if (mHumanInteractionClassifier.isEnabled()) {
            registerSensors(CLASSIFIER_SENSORS);
        }
        if (mDataCollector.isEnabled()) {
            registerSensors(COLLECTOR_SENSORS);
        }
!!!30506295.java!!!	registerSensors(inout sensors : int) : void
        for (int sensorType : sensors) {
            Sensor s = mSensorManager.getDefaultSensor(sensorType);
            if (s != null) {
                mSensorManager.registerListener(this, s, SensorManager.SENSOR_DELAY_GAME);
            }
        }
!!!30506423.java!!!	isClassiferEnabled() : boolean
        return mHumanInteractionClassifier.isEnabled();
!!!30506551.java!!!	isEnabled() : boolean
        return mHumanInteractionClassifier.isEnabled() || mDataCollector.isEnabled();
!!!30506679.java!!!	isFalseTouch() : boolean
        if (FalsingLog.ENABLED) {
            // We're getting some false wtfs from touches that happen after the device went
            // to sleep. Only report missing sessions that happen when the device is interactive.
            if (!mSessionActive && mContext.getSystemService(PowerManager.class).isInteractive()) {
                FalsingLog.wtf("isFalseTouch", new StringBuilder()
                        .append("Session is not active, yet there's a query for a false touch.")
                        .append(" enabled=").append(isEnabled() ? 1 : 0)
                        .append(" mScreenOn=").append(mScreenOn ? 1 : 0)
                        .append(" mState=").append(StatusBarState.toShortString(mState))
                        .toString());
            }
        }
        if (mAccessibilityManager.isTouchExplorationEnabled()) {
            // Touch exploration triggers false positives in the classifier and
            // already sufficiently prevents false unlocks.
            return false;
        }
        return mHumanInteractionClassifier.isFalseTouch();
!!!30506807.java!!!	onSensorChanged(inout event : SensorEvent) : void
        mDataCollector.onSensorChanged(event);
        mHumanInteractionClassifier.onSensorChanged(event);
!!!30506935.java!!!	onAccuracyChanged(inout sensor : Sensor, in accuracy : int) : void
        mDataCollector.onAccuracyChanged(sensor, accuracy);
!!!30507063.java!!!	shouldEnforceBouncer() : boolean
        return mEnforceBouncer;
!!!30507191.java!!!	setStatusBarState(in state : int) : void
        if (FalsingLog.ENABLED) {
            FalsingLog.i("setStatusBarState", new StringBuilder()
                    .append("from=").append(StatusBarState.toShortString(mState))
                    .append(" to=").append(StatusBarState.toShortString(state))
                    .toString());
        }
        mState = state;
        if (shouldSessionBeActive()) {
            sessionEntrypoint();
        } else {
            sessionExitpoint(false /* force */);
        }
!!!30507319.java!!!	onScreenTurningOn() : void
        if (FalsingLog.ENABLED) {
            FalsingLog.i("onScreenTurningOn", new StringBuilder()
                    .append("from=").append(mScreenOn ? 1 : 0)
                    .toString());
        }
        mScreenOn = true;
        if (sessionEntrypoint()) {
            mDataCollector.onScreenTurningOn();
        }
!!!30507447.java!!!	onScreenOnFromTouch() : void
        if (FalsingLog.ENABLED) {
            FalsingLog.i("onScreenOnFromTouch", new StringBuilder()
                    .append("from=").append(mScreenOn ? 1 : 0)
                    .toString());
        }
        mScreenOn = true;
        if (sessionEntrypoint()) {
            mDataCollector.onScreenOnFromTouch();
        }
!!!30507575.java!!!	onScreenOff() : void
        if (FalsingLog.ENABLED) {
            FalsingLog.i("onScreenOff", new StringBuilder()
                    .append("from=").append(mScreenOn ? 1 : 0)
                    .toString());
        }
        mDataCollector.onScreenOff();
        mScreenOn = false;
        sessionExitpoint(false /* force */);
!!!30507703.java!!!	onSucccessfulUnlock() : void
        if (FalsingLog.ENABLED) {
            FalsingLog.i("onSucccessfulUnlock", "");
        }
        mDataCollector.onSucccessfulUnlock();
!!!30507831.java!!!	onBouncerShown() : void
        if (FalsingLog.ENABLED) {
            FalsingLog.i("onBouncerShown", new StringBuilder()
                    .append("from=").append(mBouncerOn ? 1 : 0)
                    .toString());
        }
        if (!mBouncerOn) {
            mBouncerOn = true;
            mDataCollector.onBouncerShown();
        }
!!!30507959.java!!!	onBouncerHidden() : void
        if (FalsingLog.ENABLED) {
            FalsingLog.i("onBouncerHidden", new StringBuilder()
                    .append("from=").append(mBouncerOn ? 1 : 0)
                    .toString());
        }
        if (mBouncerOn) {
            mBouncerOn = false;
            mDataCollector.onBouncerHidden();
        }
!!!30508087.java!!!	onQsDown() : void
        if (FalsingLog.ENABLED) {
            FalsingLog.i("onQsDown", "");
        }
        mHumanInteractionClassifier.setType(Classifier.QUICK_SETTINGS);
        mDataCollector.onQsDown();
!!!30508215.java!!!	setQsExpanded(inout expanded : boolean) : void
        mDataCollector.setQsExpanded(expanded);
!!!30508343.java!!!	onTrackingStarted() : void
        if (FalsingLog.ENABLED) {
            FalsingLog.i("onTrackingStarted", "");
        }
        mHumanInteractionClassifier.setType(Classifier.UNLOCK);
        mDataCollector.onTrackingStarted();
!!!30508471.java!!!	onTrackingStopped() : void
        mDataCollector.onTrackingStopped();
!!!30508599.java!!!	onNotificationActive() : void
        mDataCollector.onNotificationActive();
!!!30508727.java!!!	onNotificationDoubleTap() : void
        mDataCollector.onNotificationDoubleTap();
!!!30508855.java!!!	setNotificationExpanded() : void
        mDataCollector.setNotificationExpanded();
!!!30508983.java!!!	onNotificatonStartDraggingDown() : void
        if (FalsingLog.ENABLED) {
            FalsingLog.i("onNotificatonStartDraggingDown", "");
        }
        mHumanInteractionClassifier.setType(Classifier.NOTIFICATION_DRAG_DOWN);
        mDataCollector.onNotificatonStartDraggingDown();
!!!30509111.java!!!	onNotificatonStopDraggingDown() : void
        mDataCollector.onNotificatonStopDraggingDown();
!!!30509239.java!!!	onNotificationDismissed() : void
        mDataCollector.onNotificationDismissed();
!!!30509367.java!!!	onNotificatonStartDismissing() : void
        if (FalsingLog.ENABLED) {
            FalsingLog.i("onNotificatonStartDismissing", "");
        }
        mHumanInteractionClassifier.setType(Classifier.NOTIFICATION_DISMISS);
        mDataCollector.onNotificatonStartDismissing();
!!!30509495.java!!!	onNotificatonStopDismissing() : void
        mDataCollector.onNotificatonStopDismissing();
!!!30509623.java!!!	onCameraOn() : void
        mDataCollector.onCameraOn();
!!!30509751.java!!!	onLeftAffordanceOn() : void
        mDataCollector.onLeftAffordanceOn();
!!!30509879.java!!!	onAffordanceSwipingStarted(inout rightCorner : boolean) : void
        if (FalsingLog.ENABLED) {
            FalsingLog.i("onAffordanceSwipingStarted", "");
        }
        if (rightCorner) {
            mHumanInteractionClassifier.setType(Classifier.RIGHT_AFFORDANCE);
        } else {
            mHumanInteractionClassifier.setType(Classifier.LEFT_AFFORDANCE);
        }
        mDataCollector.onAffordanceSwipingStarted(rightCorner);
!!!30510007.java!!!	onAffordanceSwipingAborted() : void
        mDataCollector.onAffordanceSwipingAborted();
!!!30510135.java!!!	onUnlockHintStarted() : void
        mDataCollector.onUnlockHintStarted();
!!!30510263.java!!!	onCameraHintStarted() : void
        mDataCollector.onCameraHintStarted();
!!!30510391.java!!!	onLeftAffordanceHintStarted() : void
        mDataCollector.onLeftAffordanceHintStarted();
!!!30510519.java!!!	onTouchEvent(inout event : MotionEvent, in width : int, in height : int) : void
        if (mSessionActive && !mBouncerOn) {
            mDataCollector.onTouchEvent(event, width, height);
            mHumanInteractionClassifier.onTouchEvent(event);
        }
!!!30510647.java!!!	dump(inout pw : PrintWriter) : void
        pw.println("FALSING MANAGER");
        pw.print("classifierEnabled="); pw.println(isClassiferEnabled() ? 1 : 0);
        pw.print("mSessionActive="); pw.println(mSessionActive ? 1 : 0);
        pw.print("mBouncerOn="); pw.println(mSessionActive ? 1 : 0);
        pw.print("mState="); pw.println(StatusBarState.toShortString(mState));
        pw.print("mScreenOn="); pw.println(mScreenOn ? 1 : 0);
        pw.println();
