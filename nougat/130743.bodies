class SQLiteDatabase
!!!2950071.java!!!	SQLiteDatabase(inout path : String, in openFlags : int, inout cursorFactory : SQLiteDatabase::CursorFactory, inout errorHandler : DatabaseErrorHandler)
        mCursorFactory = cursorFactory;
        mErrorHandler = errorHandler != null ? errorHandler : new DefaultDatabaseErrorHandler();
        mConfigurationLocked = new SQLiteDatabaseConfiguration(path, openFlags);
!!!2950199.java!!!	finalize() : void
        try {
            dispose(true);
        } finally {
            super.finalize();
        }
!!!2950327.java!!!	onAllReferencesReleased() : void
        dispose(false);
!!!2950455.java!!!	dispose(inout finalized : boolean) : void
        final SQLiteConnectionPool pool;
        synchronized (mLock) {
            if (mCloseGuardLocked != null) {
                if (finalized) {
                    mCloseGuardLocked.warnIfOpen();
                }
                mCloseGuardLocked.close();
            }

            pool = mConnectionPoolLocked;
            mConnectionPoolLocked = null;
        }

        if (!finalized) {
            synchronized (sActiveDatabases) {
                sActiveDatabases.remove(this);
            }

            if (pool != null) {
                pool.close();
            }
        }
!!!2950583.java!!!	releaseMemory() : int
        return SQLiteGlobal.releaseMemory();
!!!2950839.java!!!	getLabel() : String
        synchronized (mLock) {
            return mConfigurationLocked.label;
        }
!!!2950967.java!!!	onCorruption() : void
        EventLog.writeEvent(EVENT_DB_CORRUPT, getLabel());
        mErrorHandler.onCorruption(this);
!!!2951095.java!!!	getThreadSession() : SQLiteSession
        return mThreadSession.get(); // initialValue() throws if database closed
!!!2951223.java!!!	createSession() : SQLiteSession
        final SQLiteConnectionPool pool;
        synchronized (mLock) {
            throwIfNotOpenLocked();
            pool = mConnectionPoolLocked;
        }
        return new SQLiteSession(pool);
!!!2951351.java!!!	getThreadDefaultConnectionFlags(inout readOnly : boolean) : int
        int flags = readOnly ? SQLiteConnectionPool.CONNECTION_FLAG_READ_ONLY :
                SQLiteConnectionPool.CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY;
        if (isMainThread()) {
            flags |= SQLiteConnectionPool.CONNECTION_FLAG_INTERACTIVE;
        }
        return flags;
!!!2951479.java!!!	isMainThread() : boolean
        // FIXME: There should be a better way to do this.
        // Would also be nice to have something that would work across Binder calls.
        Looper looper = Looper.myLooper();
        return looper != null && looper == Looper.getMainLooper();
!!!2951607.java!!!	beginTransaction() : void
        beginTransaction(null /* transactionStatusCallback */, true);
!!!2951735.java!!!	beginTransactionNonExclusive() : void
        beginTransaction(null /* transactionStatusCallback */, false);
!!!2951863.java!!!	beginTransactionWithListener(inout transactionListener : SQLiteTransactionListener) : void
        beginTransaction(transactionListener, true);
!!!2951991.java!!!	beginTransactionWithListenerNonExclusive(inout transactionListener : SQLiteTransactionListener) : void
        beginTransaction(transactionListener, false);
!!!2952119.java!!!	beginTransaction(inout transactionListener : SQLiteTransactionListener, inout exclusive : boolean) : void
        acquireReference();
        try {
            getThreadSession().beginTransaction(
                    exclusive ? SQLiteSession.TRANSACTION_MODE_EXCLUSIVE :
                            SQLiteSession.TRANSACTION_MODE_IMMEDIATE,
                    transactionListener,
                    getThreadDefaultConnectionFlags(false /*readOnly*/), null);
        } finally {
            releaseReference();
        }
!!!2952247.java!!!	endTransaction() : void
        acquireReference();
        try {
            getThreadSession().endTransaction(null);
        } finally {
            releaseReference();
        }
!!!2952375.java!!!	setTransactionSuccessful() : void
        acquireReference();
        try {
            getThreadSession().setTransactionSuccessful();
        } finally {
            releaseReference();
        }
!!!2952503.java!!!	inTransaction() : boolean
        acquireReference();
        try {
            return getThreadSession().hasTransaction();
        } finally {
            releaseReference();
        }
!!!2952631.java!!!	isDbLockedByCurrentThread() : boolean
        acquireReference();
        try {
            return getThreadSession().hasConnection();
        } finally {
            releaseReference();
        }
!!!2952759.java!!!	isDbLockedByOtherThreads() : boolean
        return false;
!!!2952887.java!!!	yieldIfContended() : boolean
        return yieldIfContendedHelper(false /* do not check yielding */,
                -1 /* sleepAfterYieldDelay */);
!!!2953015.java!!!	yieldIfContendedSafely() : boolean
        return yieldIfContendedHelper(true /* check yielding */, -1 /* sleepAfterYieldDelay*/);
!!!2953143.java!!!	yieldIfContendedSafely(in sleepAfterYieldDelay : long) : boolean
        return yieldIfContendedHelper(true /* check yielding */, sleepAfterYieldDelay);
!!!2953271.java!!!	yieldIfContendedHelper(inout throwIfUnsafe : boolean, in sleepAfterYieldDelay : long) : boolean
        acquireReference();
        try {
            return getThreadSession().yieldTransaction(sleepAfterYieldDelay, throwIfUnsafe, null);
        } finally {
            releaseReference();
        }
!!!2953399.java!!!	getSyncedTables() : String
        return new HashMap<String, String>(0);
!!!2953527.java!!!	openDatabase(inout path : String, inout factory : SQLiteDatabase::CursorFactory, in flags : int) : SQLiteDatabase
        return openDatabase(path, factory, flags, null);
!!!2953655.java!!!	openDatabase(inout path : String, inout factory : SQLiteDatabase::CursorFactory, in flags : int, inout errorHandler : DatabaseErrorHandler) : SQLiteDatabase
        SQLiteDatabase db = new SQLiteDatabase(path, flags, factory, errorHandler);
        db.open();
        return db;
!!!2953783.java!!!	openOrCreateDatabase(inout file : File, inout factory : SQLiteDatabase::CursorFactory) : SQLiteDatabase
        return openOrCreateDatabase(file.getPath(), factory);
!!!2953911.java!!!	openOrCreateDatabase(inout path : String, inout factory : SQLiteDatabase::CursorFactory) : SQLiteDatabase
        return openDatabase(path, factory, CREATE_IF_NECESSARY, null);
!!!2954039.java!!!	openOrCreateDatabase(inout path : String, inout factory : SQLiteDatabase::CursorFactory, inout errorHandler : DatabaseErrorHandler) : SQLiteDatabase
        return openDatabase(path, factory, CREATE_IF_NECESSARY, errorHandler);
!!!2954167.java!!!	deleteDatabase(inout file : File) : boolean
        if (file == null) {
            throw new IllegalArgumentException("file must not be null");
        }

        boolean deleted = false;
        deleted |= file.delete();
        deleted |= new File(file.getPath() + "-journal").delete();
        deleted |= new File(file.getPath() + "-shm").delete();
        deleted |= new File(file.getPath() + "-wal").delete();

        File dir = file.getParentFile();
        if (dir != null) {
            final String prefix = file.getName() + "-mj";
            File[] files = dir.listFiles(new FileFilter() {
                @Override
                public boolean accept(File candidate) {
                    return candidate.getName().startsWith(prefix);
                }
            });
            if (files != null) {
                for (File masterJournal : files) {
                    deleted |= masterJournal.delete();
                }
            }
        }
        return deleted;
!!!2954295.java!!!	reopenReadWrite() : void
        synchronized (mLock) {
            throwIfNotOpenLocked();

            if (!isReadOnlyLocked()) {
                return; // nothing to do
            }

            // Reopen the database in read-write mode.
            final int oldOpenFlags = mConfigurationLocked.openFlags;
            mConfigurationLocked.openFlags = (mConfigurationLocked.openFlags & ~OPEN_READ_MASK)
                    | OPEN_READWRITE;
            try {
                mConnectionPoolLocked.reconfigure(mConfigurationLocked);
            } catch (RuntimeException ex) {
                mConfigurationLocked.openFlags = oldOpenFlags;
                throw ex;
            }
        }
!!!2954423.java!!!	open() : void
        try {
            try {
                openInner();
            } catch (SQLiteDatabaseCorruptException ex) {
                onCorruption();
                openInner();
            }
        } catch (SQLiteException ex) {
            Log.e(TAG, "Failed to open database '" + getLabel() + "'.", ex);
            close();
            throw ex;
        }
!!!2954551.java!!!	openInner() : void
        synchronized (mLock) {
            assert mConnectionPoolLocked == null;
            mConnectionPoolLocked = SQLiteConnectionPool.open(mConfigurationLocked);
            mCloseGuardLocked.open("close");
        }

        synchronized (sActiveDatabases) {
            sActiveDatabases.put(this, null);
        }
!!!2954679.java!!!	create(inout factory : SQLiteDatabase::CursorFactory) : SQLiteDatabase
        // This is a magic string with special meaning for SQLite.
        return openDatabase(SQLiteDatabaseConfiguration.MEMORY_DB_PATH,
                factory, CREATE_IF_NECESSARY);
!!!2954807.java!!!	addCustomFunction(inout name : String, in numArgs : int, inout function : SQLiteDatabase::CustomFunction) : void
        // Create wrapper (also validates arguments).
        SQLiteCustomFunction wrapper = new SQLiteCustomFunction(name, numArgs, function);

        synchronized (mLock) {
            throwIfNotOpenLocked();

            mConfigurationLocked.customFunctions.add(wrapper);
            try {
                mConnectionPoolLocked.reconfigure(mConfigurationLocked);
            } catch (RuntimeException ex) {
                mConfigurationLocked.customFunctions.remove(wrapper);
                throw ex;
            }
        }
!!!2954935.java!!!	getVersion() : int
        return ((Long) DatabaseUtils.longForQuery(this, "PRAGMA user_version;", null)).intValue();
!!!2955063.java!!!	setVersion(in version : int) : void
        execSQL("PRAGMA user_version = " + version);
!!!2955191.java!!!	getMaximumSize() : long
        long pageCount = DatabaseUtils.longForQuery(this, "PRAGMA max_page_count;", null);
        return pageCount * getPageSize();
!!!2955319.java!!!	setMaximumSize(in numBytes : long) : long
        long pageSize = getPageSize();
        long numPages = numBytes / pageSize;
        // If numBytes isn't a multiple of pageSize, bump up a page
        if ((numBytes % pageSize) != 0) {
            numPages++;
        }
        long newPageCount = DatabaseUtils.longForQuery(this, "PRAGMA max_page_count = " + numPages,
                null);
        return newPageCount * pageSize;
!!!2955447.java!!!	getPageSize() : long
        return DatabaseUtils.longForQuery(this, "PRAGMA page_size;", null);
!!!2955575.java!!!	setPageSize(in numBytes : long) : void
        execSQL("PRAGMA page_size = " + numBytes);
!!!2955959.java!!!	findEditTable(inout tables : String) : String
        if (!TextUtils.isEmpty(tables)) {
            // find the first word terminated by either a space or a comma
            int spacepos = tables.indexOf(' ');
            int commapos = tables.indexOf(',');

            if (spacepos > 0 && (spacepos < commapos || commapos < 0)) {
                return tables.substring(0, spacepos);
            } else if (commapos > 0 && (commapos < spacepos || spacepos < 0) ) {
                return tables.substring(0, commapos);
            }
            return tables;
        } else {
            throw new IllegalStateException("Invalid tables");
        }
!!!2956087.java!!!	compileStatement(inout sql : String) : SQLiteStatement
        acquireReference();
        try {
            return new SQLiteStatement(this, sql, null);
        } finally {
            releaseReference();
        }
!!!2956215.java!!!	query(inout distinct : boolean, inout table : String, inout columns : String, inout selection : String, inout selectionArgs : String, inout groupBy : String, inout having : String, inout orderBy : String, inout limit : String) : Cursor
        return queryWithFactory(null, distinct, table, columns, selection, selectionArgs,
                groupBy, having, orderBy, limit, null);
!!!2956343.java!!!	query(inout distinct : boolean, inout table : String, inout columns : String, inout selection : String, inout selectionArgs : String, inout groupBy : String, inout having : String, inout orderBy : String, inout limit : String, inout cancellationSignal : CancellationSignal) : Cursor
        return queryWithFactory(null, distinct, table, columns, selection, selectionArgs,
                groupBy, having, orderBy, limit, cancellationSignal);
!!!2956471.java!!!	queryWithFactory(inout cursorFactory : SQLiteDatabase::CursorFactory, inout distinct : boolean, inout table : String, inout columns : String, inout selection : String, inout selectionArgs : String, inout groupBy : String, inout having : String, inout orderBy : String, inout limit : String) : Cursor
        return queryWithFactory(cursorFactory, distinct, table, columns, selection,
                selectionArgs, groupBy, having, orderBy, limit, null);
!!!2956599.java!!!	queryWithFactory(inout cursorFactory : SQLiteDatabase::CursorFactory, inout distinct : boolean, inout table : String, inout columns : String, inout selection : String, inout selectionArgs : String, inout groupBy : String, inout having : String, inout orderBy : String, inout limit : String, inout cancellationSignal : CancellationSignal) : Cursor
        acquireReference();
        try {
            String sql = SQLiteQueryBuilder.buildQueryString(
                    distinct, table, columns, selection, groupBy, having, orderBy, limit);

            return rawQueryWithFactory(cursorFactory, sql, selectionArgs,
                    findEditTable(table), cancellationSignal);
        } finally {
            releaseReference();
        }
!!!2956727.java!!!	query(inout table : String, inout columns : String, inout selection : String, inout selectionArgs : String, inout groupBy : String, inout having : String, inout orderBy : String) : Cursor

        return query(false, table, columns, selection, selectionArgs, groupBy,
                having, orderBy, null /* limit */);
!!!2956855.java!!!	query(inout table : String, inout columns : String, inout selection : String, inout selectionArgs : String, inout groupBy : String, inout having : String, inout orderBy : String, inout limit : String) : Cursor

        return query(false, table, columns, selection, selectionArgs, groupBy,
                having, orderBy, limit);
!!!2956983.java!!!	rawQuery(inout sql : String, inout selectionArgs : String) : Cursor
        return rawQueryWithFactory(null, sql, selectionArgs, null, null);
!!!2957111.java!!!	rawQuery(inout sql : String, inout selectionArgs : String, inout cancellationSignal : CancellationSignal) : Cursor
        return rawQueryWithFactory(null, sql, selectionArgs, null, cancellationSignal);
!!!2957239.java!!!	rawQueryWithFactory(inout cursorFactory : SQLiteDatabase::CursorFactory, inout sql : String, inout selectionArgs : String, inout editTable : String) : Cursor
        return rawQueryWithFactory(cursorFactory, sql, selectionArgs, editTable, null);
!!!2957367.java!!!	rawQueryWithFactory(inout cursorFactory : SQLiteDatabase::CursorFactory, inout sql : String, inout selectionArgs : String, inout editTable : String, inout cancellationSignal : CancellationSignal) : Cursor
        acquireReference();
        try {
            SQLiteCursorDriver driver = new SQLiteDirectCursorDriver(this, sql, editTable,
                    cancellationSignal);
            return driver.query(cursorFactory != null ? cursorFactory : mCursorFactory,
                    selectionArgs);
        } finally {
            releaseReference();
        }
!!!2957495.java!!!	insert(inout table : String, inout nullColumnHack : String, inout values : ContentValues) : long
        try {
            return insertWithOnConflict(table, nullColumnHack, values, CONFLICT_NONE);
        } catch (SQLException e) {
            Log.e(TAG, "Error inserting " + values, e);
            return -1;
        }
!!!2957623.java!!!	insertOrThrow(inout table : String, inout nullColumnHack : String, inout values : ContentValues) : long
        return insertWithOnConflict(table, nullColumnHack, values, CONFLICT_NONE);
!!!2957751.java!!!	replace(inout table : String, inout nullColumnHack : String, inout initialValues : ContentValues) : long
        try {
            return insertWithOnConflict(table, nullColumnHack, initialValues,
                    CONFLICT_REPLACE);
        } catch (SQLException e) {
            Log.e(TAG, "Error inserting " + initialValues, e);
            return -1;
        }
!!!2957879.java!!!	replaceOrThrow(inout table : String, inout nullColumnHack : String, inout initialValues : ContentValues) : long
        return insertWithOnConflict(table, nullColumnHack, initialValues,
                CONFLICT_REPLACE);
!!!2958007.java!!!	insertWithOnConflict(inout table : String, inout nullColumnHack : String, inout initialValues : ContentValues, in conflictAlgorithm : int) : long
        acquireReference();
        try {
            StringBuilder sql = new StringBuilder();
            sql.append("INSERT");
            sql.append(CONFLICT_VALUES[conflictAlgorithm]);
            sql.append(" INTO ");
            sql.append(table);
            sql.append('(');

            Object[] bindArgs = null;
            int size = (initialValues != null && initialValues.size() > 0)
                    ? initialValues.size() : 0;
            if (size > 0) {
                bindArgs = new Object[size];
                int i = 0;
                for (String colName : initialValues.keySet()) {
                    sql.append((i > 0) ? "," : "");
                    sql.append(colName);
                    bindArgs[i++] = initialValues.get(colName);
                }
                sql.append(')');
                sql.append(" VALUES (");
                for (i = 0; i < size; i++) {
                    sql.append((i > 0) ? ",?" : "?");
                }
            } else {
                sql.append(nullColumnHack + ") VALUES (NULL");
            }
            sql.append(')');

            SQLiteStatement statement = new SQLiteStatement(this, sql.toString(), bindArgs);
            try {
                return statement.executeInsert();
            } finally {
                statement.close();
            }
        } finally {
            releaseReference();
        }
!!!2958135.java!!!	delete(inout table : String, inout whereClause : String, inout whereArgs : String) : int
        acquireReference();
        try {
            SQLiteStatement statement =  new SQLiteStatement(this, "DELETE FROM " + table +
                    (!TextUtils.isEmpty(whereClause) ? " WHERE " + whereClause : ""), whereArgs);
            try {
                return statement.executeUpdateDelete();
            } finally {
                statement.close();
            }
        } finally {
            releaseReference();
        }
!!!2958263.java!!!	update(inout table : String, inout values : ContentValues, inout whereClause : String, inout whereArgs : String) : int
        return updateWithOnConflict(table, values, whereClause, whereArgs, CONFLICT_NONE);
!!!2958391.java!!!	updateWithOnConflict(inout table : String, inout values : ContentValues, inout whereClause : String, inout whereArgs : String, in conflictAlgorithm : int) : int
        if (values == null || values.size() == 0) {
            throw new IllegalArgumentException("Empty values");
        }

        acquireReference();
        try {
            StringBuilder sql = new StringBuilder(120);
            sql.append("UPDATE ");
            sql.append(CONFLICT_VALUES[conflictAlgorithm]);
            sql.append(table);
            sql.append(" SET ");

            // move all bind args to one array
            int setValuesSize = values.size();
            int bindArgsSize = (whereArgs == null) ? setValuesSize : (setValuesSize + whereArgs.length);
            Object[] bindArgs = new Object[bindArgsSize];
            int i = 0;
            for (String colName : values.keySet()) {
                sql.append((i > 0) ? "," : "");
                sql.append(colName);
                bindArgs[i++] = values.get(colName);
                sql.append("=?");
            }
            if (whereArgs != null) {
                for (i = setValuesSize; i < bindArgsSize; i++) {
                    bindArgs[i] = whereArgs[i - setValuesSize];
                }
            }
            if (!TextUtils.isEmpty(whereClause)) {
                sql.append(" WHERE ");
                sql.append(whereClause);
            }

            SQLiteStatement statement = new SQLiteStatement(this, sql.toString(), bindArgs);
            try {
                return statement.executeUpdateDelete();
            } finally {
                statement.close();
            }
        } finally {
            releaseReference();
        }
!!!2958519.java!!!	execSQL(inout sql : String) : void
        executeSql(sql, null);
!!!2958647.java!!!	execSQL(inout sql : String, inout bindArgs : Object) : void
        if (bindArgs == null) {
            throw new IllegalArgumentException("Empty bindArgs");
        }
        executeSql(sql, bindArgs);
!!!2958775.java!!!	executeSql(inout sql : String, inout bindArgs : Object) : int
        acquireReference();
        try {
            if (DatabaseUtils.getSqlStatementType(sql) == DatabaseUtils.STATEMENT_ATTACH) {
                boolean disableWal = false;
                synchronized (mLock) {
                    if (!mHasAttachedDbsLocked) {
                        mHasAttachedDbsLocked = true;
                        disableWal = true;
                    }
                }
                if (disableWal) {
                    disableWriteAheadLogging();
                }
            }

            SQLiteStatement statement = new SQLiteStatement(this, sql, bindArgs);
            try {
                return statement.executeUpdateDelete();
            } finally {
                statement.close();
            }
        } finally {
            releaseReference();
        }
!!!2958903.java!!!	validateSql(inout sql : String, inout cancellationSignal : CancellationSignal) : void
        getThreadSession().prepare(sql,
                getThreadDefaultConnectionFlags(/* readOnly =*/ true), cancellationSignal, null);
!!!2959031.java!!!	isReadOnly() : boolean
        synchronized (mLock) {
            return isReadOnlyLocked();
        }
!!!2959159.java!!!	isReadOnlyLocked() : boolean
        return (mConfigurationLocked.openFlags & OPEN_READ_MASK) == OPEN_READONLY;
!!!2959287.java!!!	isInMemoryDatabase() : boolean
        synchronized (mLock) {
            return mConfigurationLocked.isInMemoryDb();
        }
!!!2959415.java!!!	isOpen() : boolean
        synchronized (mLock) {
            return mConnectionPoolLocked != null;
        }
!!!2959543.java!!!	needUpgrade(in newVersion : int) : boolean
        return newVersion > getVersion();
!!!2959671.java!!!	getPath() : String
        synchronized (mLock) {
            return mConfigurationLocked.path;
        }
!!!2959799.java!!!	setLocale(inout locale : Locale) : void
        if (locale == null) {
            throw new IllegalArgumentException("locale must not be null.");
        }

        synchronized (mLock) {
            throwIfNotOpenLocked();

            final Locale oldLocale = mConfigurationLocked.locale;
            mConfigurationLocked.locale = locale;
            try {
                mConnectionPoolLocked.reconfigure(mConfigurationLocked);
            } catch (RuntimeException ex) {
                mConfigurationLocked.locale = oldLocale;
                throw ex;
            }
        }
!!!2959927.java!!!	setMaxSqlCacheSize(in cacheSize : int) : void
        if (cacheSize > MAX_SQL_CACHE_SIZE || cacheSize < 0) {
            throw new IllegalStateException(
                    "expected value between 0 and " + MAX_SQL_CACHE_SIZE);
        }

        synchronized (mLock) {
            throwIfNotOpenLocked();

            final int oldMaxSqlCacheSize = mConfigurationLocked.maxSqlCacheSize;
            mConfigurationLocked.maxSqlCacheSize = cacheSize;
            try {
                mConnectionPoolLocked.reconfigure(mConfigurationLocked);
            } catch (RuntimeException ex) {
                mConfigurationLocked.maxSqlCacheSize = oldMaxSqlCacheSize;
                throw ex;
            }
        }
!!!2960055.java!!!	setForeignKeyConstraintsEnabled(inout enable : boolean) : void
        synchronized (mLock) {
            throwIfNotOpenLocked();

            if (mConfigurationLocked.foreignKeyConstraintsEnabled == enable) {
                return;
            }

            mConfigurationLocked.foreignKeyConstraintsEnabled = enable;
            try {
                mConnectionPoolLocked.reconfigure(mConfigurationLocked);
            } catch (RuntimeException ex) {
                mConfigurationLocked.foreignKeyConstraintsEnabled = !enable;
                throw ex;
            }
        }
!!!2960183.java!!!	enableWriteAheadLogging() : boolean
        synchronized (mLock) {
            throwIfNotOpenLocked();

            if ((mConfigurationLocked.openFlags & ENABLE_WRITE_AHEAD_LOGGING) != 0) {
                return true;
            }

            if (isReadOnlyLocked()) {
                // WAL doesn't make sense for readonly-databases.
                // TODO: True, but connection pooling does still make sense...
                return false;
            }

            if (mConfigurationLocked.isInMemoryDb()) {
                Log.i(TAG, "can't enable WAL for memory databases.");
                return false;
            }

            // make sure this database has NO attached databases because sqlite's write-ahead-logging
            // doesn't work for databases with attached databases
            if (mHasAttachedDbsLocked) {
                if (Log.isLoggable(TAG, Log.DEBUG)) {
                    Log.d(TAG, "this database: " + mConfigurationLocked.label
                            + " has attached databases. can't  enable WAL.");
                }
                return false;
            }

            mConfigurationLocked.openFlags |= ENABLE_WRITE_AHEAD_LOGGING;
            try {
                mConnectionPoolLocked.reconfigure(mConfigurationLocked);
            } catch (RuntimeException ex) {
                mConfigurationLocked.openFlags &= ~ENABLE_WRITE_AHEAD_LOGGING;
                throw ex;
            }
        }
        return true;
!!!2960311.java!!!	disableWriteAheadLogging() : void
        synchronized (mLock) {
            throwIfNotOpenLocked();

            if ((mConfigurationLocked.openFlags & ENABLE_WRITE_AHEAD_LOGGING) == 0) {
                return;
            }

            mConfigurationLocked.openFlags &= ~ENABLE_WRITE_AHEAD_LOGGING;
            try {
                mConnectionPoolLocked.reconfigure(mConfigurationLocked);
            } catch (RuntimeException ex) {
                mConfigurationLocked.openFlags |= ENABLE_WRITE_AHEAD_LOGGING;
                throw ex;
            }
        }
!!!2960439.java!!!	isWriteAheadLoggingEnabled() : boolean
        synchronized (mLock) {
            throwIfNotOpenLocked();

            return (mConfigurationLocked.openFlags & ENABLE_WRITE_AHEAD_LOGGING) != 0;
        }
!!!2960567.java!!!	getDbStats() : SQLiteDebug::DbStats
        ArrayList<DbStats> dbStatsList = new ArrayList<DbStats>();
        for (SQLiteDatabase db : getActiveDatabases()) {
            db.collectDbStats(dbStatsList);
        }
        return dbStatsList;
!!!2960695.java!!!	collectDbStats(inout dbStatsList : ArrayList<DbStats>) : void
        synchronized (mLock) {
            if (mConnectionPoolLocked != null) {
                mConnectionPoolLocked.collectDbStats(dbStatsList);
            }
        }
!!!2960823.java!!!	getActiveDatabases() : SQLiteDatabase
        ArrayList<SQLiteDatabase> databases = new ArrayList<SQLiteDatabase>();
        synchronized (sActiveDatabases) {
            databases.addAll(sActiveDatabases.keySet());
        }
        return databases;
!!!2960951.java!!!	dumpAll(inout printer : Printer, inout verbose : boolean) : void
        for (SQLiteDatabase db : getActiveDatabases()) {
            db.dump(printer, verbose);
        }
!!!2961079.java!!!	dump(inout printer : Printer, inout verbose : boolean) : void
        synchronized (mLock) {
            if (mConnectionPoolLocked != null) {
                printer.println("");
                mConnectionPoolLocked.dump(printer, verbose);
            }
        }
!!!2961207.java!!!	getAttachedDbs() : Pair
        ArrayList<Pair<String, String>> attachedDbs = new ArrayList<Pair<String, String>>();
        synchronized (mLock) {
            if (mConnectionPoolLocked == null) {
                return null; // not open
            }

            if (!mHasAttachedDbsLocked) {
                // No attached databases.
                // There is a small window where attached databases exist but this flag is not
                // set yet.  This can occur when this thread is in a race condition with another
                // thread that is executing the SQL statement: "attach database <blah> as <foo>"
                // If this thread is NOT ok with such a race condition (and thus possibly not
                // receivethe entire list of attached databases), then the caller should ensure
                // that no thread is executing any SQL statements while a thread is calling this
                // method.  Typically, this method is called when 'adb bugreport' is done or the
                // caller wants to collect stats on the database and all its attached databases.
                attachedDbs.add(new Pair<String, String>("main", mConfigurationLocked.path));
                return attachedDbs;
            }

            acquireReference();
        }

        try {
            // has attached databases. query sqlite to get the list of attached databases.
            Cursor c = null;
            try {
                c = rawQuery("pragma database_list;", null);
                while (c.moveToNext()) {
                    // sqlite returns a row for each database in the returned list of databases.
                    //   in each row,
                    //       1st column is the database name such as main, or the database
                    //                              name specified on the "ATTACH" command
                    //       2nd column is the database file path.
                    attachedDbs.add(new Pair<String, String>(c.getString(1), c.getString(2)));
                }
            } finally {
                if (c != null) {
                    c.close();
                }
            }
            return attachedDbs;
        } finally {
            releaseReference();
        }
!!!2961335.java!!!	isDatabaseIntegrityOk() : boolean
        acquireReference();
        try {
            List<Pair<String, String>> attachedDbs = null;
            try {
                attachedDbs = getAttachedDbs();
                if (attachedDbs == null) {
                    throw new IllegalStateException("databaselist for: " + getPath() + " couldn't " +
                            "be retrieved. probably because the database is closed");
                }
            } catch (SQLiteException e) {
                // can't get attachedDb list. do integrity check on the main database
                attachedDbs = new ArrayList<Pair<String, String>>();
                attachedDbs.add(new Pair<String, String>("main", getPath()));
            }

            for (int i = 0; i < attachedDbs.size(); i++) {
                Pair<String, String> p = attachedDbs.get(i);
                SQLiteStatement prog = null;
                try {
                    prog = compileStatement("PRAGMA " + p.first + ".integrity_check(1);");
                    String rslt = prog.simpleQueryForString();
                    if (!rslt.equalsIgnoreCase("ok")) {
                        // integrity_checker failed on main or attached databases
                        Log.e(TAG, "PRAGMA integrity_check on " + p.second + " returned: " + rslt);
                        return false;
                    }
                } finally {
                    if (prog != null) prog.close();
                }
            }
        } finally {
            releaseReference();
        }
        return true;
!!!2961463.java!!!	toString() : String
        return "SQLiteDatabase: " + getPath();
!!!2961591.java!!!	throwIfNotOpenLocked() : void
        if (mConnectionPoolLocked == null) {
            throw new IllegalStateException("The database '" + mConfigurationLocked.label
                    + "' is not open.");
        }
