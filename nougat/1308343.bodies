class Data
!!!30516791.java!!!	Data()
            mPreviousPoint = null;
            mPreviousAngle = (float) Math.PI;
            mSumSquares = 0.0f;
            mSum = 0.0f;
            mCount = 1.0f;
            mDist = 0.0f;
            mAnglesCount = mAcceleratingAngles = 0.0f;
!!!30516919.java!!!	addPoint(inout point : Point) : void
            if (mPreviousPoint != null) {
                mDist += mPreviousPoint.dist(point);
            }

            mPreviousPoint = point;
            Point speedPoint = new Point((float) point.timeOffsetNano / DURATION_SCALE,
                    mDist / LENGTH_SCALE);

            // Checking if the added point is different than the previously added point
            // Repetitions are being ignored so that proper angles are calculated.
            if (mLastThreePoints.isEmpty()
                    || !mLastThreePoints.get(mLastThreePoints.size() - 1).equals(speedPoint)) {
                mLastThreePoints.add(speedPoint);
                if (mLastThreePoints.size() == 4) {
                    mLastThreePoints.remove(0);

                    float angle = mLastThreePoints.get(1).getAngle(mLastThreePoints.get(0),
                            mLastThreePoints.get(2));

                    mAnglesCount++;
                    if (angle >= (float) Math.PI - ANGLE_DEVIATION) {
                        mAcceleratingAngles++;
                    }

                    float difference = angle - mPreviousAngle;
                    mSum += difference;
                    mSumSquares += difference * difference;
                    mCount += 1.0;
                    mPreviousAngle = angle;
                }
            }
!!!30517047.java!!!	getAnglesVariance() : float
            return mSumSquares / mCount - (mSum / mCount) * (mSum / mCount);
!!!30517175.java!!!	getAnglesPercentage() : float
            if (mAnglesCount == 0.0f) {
                return 1.0f;
            }
            return (mAcceleratingAngles) / mAnglesCount;
