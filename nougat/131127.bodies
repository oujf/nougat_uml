class Bitmap
!!!27729335.java!!!	setDefaultDensity(in density : int) : void
        sDefaultDensity = density;
!!!27729463.java!!!	getDefaultDensity() : int
        if (sDefaultDensity >= 0) {
            return sDefaultDensity;
        }
        sDefaultDensity = DisplayMetrics.DENSITY_DEVICE;
        return sDefaultDensity;
!!!27729591.java!!!	Bitmap(in nativeBitmap : long, inout buffer : byte, in width : int, in height : int, in density : int, inout isMutable : boolean, inout requestPremultiplied : boolean, inout ninePatchChunk : byte, inout ninePatchInsets : NinePatch::InsetStruct)
        if (nativeBitmap == 0) {
            throw new RuntimeException("internal error: native bitmap is 0");
        }

        mWidth = width;
        mHeight = height;
        mIsMutable = isMutable;
        mRequestPremultiplied = requestPremultiplied;
        mBuffer = buffer;

        mNinePatchChunk = ninePatchChunk;
        mNinePatchInsets = ninePatchInsets;
        if (density >= 0) {
            mDensity = density;
        }

        mNativePtr = nativeBitmap;
        long nativeSize = NATIVE_ALLOCATION_SIZE;
        if (buffer == null) {
            nativeSize += getByteCount();
        }
        NativeAllocationRegistry registry = new NativeAllocationRegistry(
            Bitmap.class.getClassLoader(), nativeGetNativeFinalizer(), nativeSize);
        registry.registerNativeAllocation(this, nativeBitmap);
!!!27729719.java!!!	getNativeInstance() : long
        return mNativePtr;
!!!27729847.java!!!	reinit(in width : int, in height : int, inout requestPremultiplied : boolean) : void
        mWidth = width;
        mHeight = height;
        mRequestPremultiplied = requestPremultiplied;
!!!27729975.java!!!	getDensity() : int
        if (mRecycled) {
            Log.w(TAG, "Called getDensity() on a recycle()'d bitmap! This is undefined behavior!");
        }
        return mDensity;
!!!27730103.java!!!	setDensity(in density : int) : void
        mDensity = density;
!!!27730231.java!!!	reconfigure(in width : int, in height : int, inout config : Bitmap::Config) : void
        checkRecycled("Can't call reconfigure() on a recycled bitmap");
        if (width <= 0 || height <= 0) {
            throw new IllegalArgumentException("width and height must be > 0");
        }
        if (!isMutable()) {
            throw new IllegalStateException("only mutable bitmaps may be reconfigured");
        }
        if (mBuffer == null) {
            throw new IllegalStateException("native-backed bitmaps may not be reconfigured");
        }

        nativeReconfigure(mNativePtr, width, height, config.nativeInt,
                mBuffer.length, mRequestPremultiplied);
        mWidth = width;
        mHeight = height;
!!!27730359.java!!!	setWidth(in width : int) : void
        reconfigure(width, getHeight(), getConfig());
!!!27730487.java!!!	setHeight(in height : int) : void
        reconfigure(getWidth(), height, getConfig());
!!!27730615.java!!!	setConfig(inout config : Bitmap::Config) : void
        reconfigure(getWidth(), getHeight(), config);
!!!27730743.java!!!	setNinePatchChunk(inout chunk : byte) : void
        mNinePatchChunk = chunk;
!!!27730871.java!!!	recycle() : void
        if (!mRecycled && mNativePtr != 0) {
            if (nativeRecycle(mNativePtr)) {
                // return value indicates whether native pixel object was actually recycled.
                // false indicates that it is still in use at the native level and these
                // objects should not be collected now. They will be collected later when the
                // Bitmap itself is collected.
                mBuffer = null;
                mNinePatchChunk = null;
            }
            mRecycled = true;
        }
!!!27730999.java!!!	isRecycled() : boolean
        return mRecycled;
!!!27731127.java!!!	getGenerationId() : int
        if (mRecycled) {
            Log.w(TAG, "Called getGenerationId() on a recycle()'d bitmap! This is undefined behavior!");
        }
        return nativeGenerationId(mNativePtr);
!!!27731255.java!!!	checkRecycled(inout errorMessage : String) : void
        if (mRecycled) {
            throw new IllegalStateException(errorMessage);
        }
!!!27731383.java!!!	checkXYSign(in x : int, in y : int) : void
        if (x < 0) {
            throw new IllegalArgumentException("x must be >= 0");
        }
        if (y < 0) {
            throw new IllegalArgumentException("y must be >= 0");
        }
!!!27731511.java!!!	checkWidthHeight(in width : int, in height : int) : void
        if (width <= 0) {
            throw new IllegalArgumentException("width must be > 0");
        }
        if (height <= 0) {
            throw new IllegalArgumentException("height must be > 0");
        }
!!!27731895.java!!!	copyPixelsToBuffer(inout dst : Buffer) : void
        int elements = dst.remaining();
        int shift;
        if (dst instanceof ByteBuffer) {
            shift = 0;
        } else if (dst instanceof ShortBuffer) {
            shift = 1;
        } else if (dst instanceof IntBuffer) {
            shift = 2;
        } else {
            throw new RuntimeException("unsupported Buffer subclass");
        }

        long bufferSize = (long)elements << shift;
        long pixelSize = getByteCount();

        if (bufferSize < pixelSize) {
            throw new RuntimeException("Buffer not large enough for pixels");
        }

        nativeCopyPixelsToBuffer(mNativePtr, dst);

        // now update the buffer's position
        int position = dst.position();
        position += pixelSize >> shift;
        dst.position(position);
!!!27732023.java!!!	copyPixelsFromBuffer(inout src : Buffer) : void
        checkRecycled("copyPixelsFromBuffer called on recycled bitmap");

        int elements = src.remaining();
        int shift;
        if (src instanceof ByteBuffer) {
            shift = 0;
        } else if (src instanceof ShortBuffer) {
            shift = 1;
        } else if (src instanceof IntBuffer) {
            shift = 2;
        } else {
            throw new RuntimeException("unsupported Buffer subclass");
        }

        long bufferBytes = (long) elements << shift;
        long bitmapBytes = getByteCount();

        if (bufferBytes < bitmapBytes) {
            throw new RuntimeException("Buffer not large enough for pixels");
        }

        nativeCopyPixelsFromBuffer(mNativePtr, src);

        // now update the buffer's position
        int position = src.position();
        position += bitmapBytes >> shift;
        src.position(position);
!!!27732151.java!!!	copy(inout config : Bitmap::Config, inout isMutable : boolean) : Bitmap
        checkRecycled("Can't copy a recycled bitmap");
        Bitmap b = nativeCopy(mNativePtr, config.nativeInt, isMutable);
        if (b != null) {
            b.setPremultiplied(mRequestPremultiplied);
            b.mDensity = mDensity;
        }
        return b;
!!!27732279.java!!!	createAshmemBitmap() : Bitmap
        checkRecycled("Can't copy a recycled bitmap");
        Bitmap b = nativeCopyAshmem(mNativePtr);
        if (b != null) {
            b.setPremultiplied(mRequestPremultiplied);
            b.mDensity = mDensity;
        }
        return b;
!!!27732407.java!!!	createAshmemBitmap(inout config : Bitmap::Config) : Bitmap
        checkRecycled("Can't copy a recycled bitmap");
        Bitmap b = nativeCopyAshmemConfig(mNativePtr, config.nativeInt);
        if (b != null) {
            b.setPremultiplied(mRequestPremultiplied);
            b.mDensity = mDensity;
        }
        return b;
!!!27732535.java!!!	createScaledBitmap(inout src : Bitmap, in dstWidth : int, in dstHeight : int, inout filter : boolean) : Bitmap
        Matrix m;
        synchronized (Bitmap.class) {
            // small pool of just 1 matrix
            m = sScaleMatrix;
            sScaleMatrix = null;
        }

        if (m == null) {
            m = new Matrix();
        }

        final int width = src.getWidth();
        final int height = src.getHeight();
        final float sx = dstWidth  / (float)width;
        final float sy = dstHeight / (float)height;
        m.setScale(sx, sy);
        Bitmap b = Bitmap.createBitmap(src, 0, 0, width, height, m, filter);

        synchronized (Bitmap.class) {
            // do we need to check for null? why not just assign everytime?
            if (sScaleMatrix == null) {
                sScaleMatrix = m;
            }
        }

        return b;
!!!27732663.java!!!	createBitmap(inout src : Bitmap) : Bitmap
        return createBitmap(src, 0, 0, src.getWidth(), src.getHeight());
!!!27732791.java!!!	createBitmap(inout source : Bitmap, in x : int, in y : int, in width : int, in height : int) : Bitmap
        return createBitmap(source, x, y, width, height, null, false);
!!!27732919.java!!!	createBitmap(inout source : Bitmap, in x : int, in y : int, in width : int, in height : int, inout m : Matrix, inout filter : boolean) : Bitmap

        checkXYSign(x, y);
        checkWidthHeight(width, height);
        if (x + width > source.getWidth()) {
            throw new IllegalArgumentException("x + width must be <= bitmap.width()");
        }
        if (y + height > source.getHeight()) {
            throw new IllegalArgumentException("y + height must be <= bitmap.height()");
        }

        // check if we can just return our argument unchanged
        if (!source.isMutable() && x == 0 && y == 0 && width == source.getWidth() &&
                height == source.getHeight() && (m == null || m.isIdentity())) {
            return source;
        }

        int neww = width;
        int newh = height;
        Canvas canvas = new Canvas();
        Bitmap bitmap;
        Paint paint;

        Rect srcR = new Rect(x, y, x + width, y + height);
        RectF dstR = new RectF(0, 0, width, height);

        Config newConfig = Config.ARGB_8888;
        final Config config = source.getConfig();
        // GIF files generate null configs, assume ARGB_8888
        if (config != null) {
            switch (config) {
                case RGB_565:
                    newConfig = Config.RGB_565;
                    break;
                case ALPHA_8:
                    newConfig = Config.ALPHA_8;
                    break;
                //noinspection deprecation
                case ARGB_4444:
                case ARGB_8888:
                default:
                    newConfig = Config.ARGB_8888;
                    break;
            }
        }

        if (m == null || m.isIdentity()) {
            bitmap = createBitmap(neww, newh, newConfig, source.hasAlpha());
            paint = null;   // not needed
        } else {
            final boolean transformed = !m.rectStaysRect();

            RectF deviceR = new RectF();
            m.mapRect(deviceR, dstR);

            neww = Math.round(deviceR.width());
            newh = Math.round(deviceR.height());

            bitmap = createBitmap(neww, newh, transformed ? Config.ARGB_8888 : newConfig,
                    transformed || source.hasAlpha());

            canvas.translate(-deviceR.left, -deviceR.top);
            canvas.concat(m);

            paint = new Paint();
            paint.setFilterBitmap(filter);
            if (transformed) {
                paint.setAntiAlias(true);
            }
        }

        // The new bitmap was created from a known bitmap source so assume that
        // they use the same density
        bitmap.mDensity = source.mDensity;
        bitmap.setHasAlpha(source.hasAlpha());
        bitmap.setPremultiplied(source.mRequestPremultiplied);

        canvas.setBitmap(bitmap);
        canvas.drawBitmap(source, srcR, dstR, paint);
        canvas.setBitmap(null);

        return bitmap;
!!!27733047.java!!!	createBitmap(in width : int, in height : int, inout config : Bitmap::Config) : Bitmap
        return createBitmap(width, height, config, true);
!!!27733175.java!!!	createBitmap(inout display : DisplayMetrics, in width : int, in height : int, inout config : Bitmap::Config) : Bitmap
        return createBitmap(display, width, height, config, true);
!!!27733303.java!!!	createBitmap(in width : int, in height : int, inout config : Bitmap::Config, inout hasAlpha : boolean) : Bitmap
        return createBitmap(null, width, height, config, hasAlpha);
!!!27733431.java!!!	createBitmap(inout display : DisplayMetrics, in width : int, in height : int, inout config : Bitmap::Config, inout hasAlpha : boolean) : Bitmap
        if (width <= 0 || height <= 0) {
            throw new IllegalArgumentException("width and height must be > 0");
        }
        Bitmap bm = nativeCreate(null, 0, width, width, height, config.nativeInt, true);
        if (display != null) {
            bm.mDensity = display.densityDpi;
        }
        bm.setHasAlpha(hasAlpha);
        if (config == Config.ARGB_8888 && !hasAlpha) {
            nativeErase(bm.mNativePtr, 0xff000000);
        }
        // No need to initialize the bitmap to zeroes with other configs;
        // it is backed by a VM byte array which is by definition preinitialized
        // to all zeroes.
        return bm;
!!!27733559.java!!!	createBitmap(inout colors : int, in offset : int, in stride : int, in width : int, in height : int, inout config : Bitmap::Config) : Bitmap
        return createBitmap(null, colors, offset, stride, width, height, config);
!!!27733687.java!!!	createBitmap(inout display : DisplayMetrics, inout colors : int, in offset : int, in stride : int, in width : int, in height : int, inout config : Bitmap::Config) : Bitmap

        checkWidthHeight(width, height);
        if (Math.abs(stride) < width) {
            throw new IllegalArgumentException("abs(stride) must be >= width");
        }
        int lastScanline = offset + (height - 1) * stride;
        int length = colors.length;
        if (offset < 0 || (offset + width > length) || lastScanline < 0 ||
                (lastScanline + width > length)) {
            throw new ArrayIndexOutOfBoundsException();
        }
        if (width <= 0 || height <= 0) {
            throw new IllegalArgumentException("width and height must be > 0");
        }
        Bitmap bm = nativeCreate(colors, offset, stride, width, height,
                            config.nativeInt, false);
        if (display != null) {
            bm.mDensity = display.densityDpi;
        }
        return bm;
!!!27733815.java!!!	createBitmap(inout colors : int, in width : int, in height : int, inout config : Bitmap::Config) : Bitmap
        return createBitmap(null, colors, 0, width, width, height, config);
!!!27733943.java!!!	createBitmap(inout display : DisplayMetrics, inout colors : int, in width : int, in height : int, inout config : Bitmap::Config) : Bitmap
        return createBitmap(display, colors, 0, width, width, height, config);
!!!27734071.java!!!	getNinePatchChunk() : byte
        return mNinePatchChunk;
!!!27734199.java!!!	getOpticalInsets(inout outInsets : Rect) : void
        if (mNinePatchInsets == null) {
            outInsets.setEmpty();
        } else {
            outInsets.set(mNinePatchInsets.opticalRect);
        }
!!!27734327.java!!!	getNinePatchInsets() : NinePatch::InsetStruct
        return mNinePatchInsets;
!!!27734583.java!!!	compress(inout format : Bitmap::CompressFormat, in quality : int, inout stream : OutputStream) : boolean
        checkRecycled("Can't compress a recycled bitmap");
        // do explicit check before calling the native method
        if (stream == null) {
            throw new NullPointerException();
        }
        if (quality < 0 || quality > 100) {
            throw new IllegalArgumentException("quality must be 0..100");
        }
        Trace.traceBegin(Trace.TRACE_TAG_RESOURCES, "Bitmap.compress");
        boolean result = nativeCompress(mNativePtr, format.nativeInt,
                quality, stream, new byte[WORKING_COMPRESS_STORAGE]);
        Trace.traceEnd(Trace.TRACE_TAG_RESOURCES);
        return result;
!!!27734711.java!!!	isMutable() : boolean
        return mIsMutable;
!!!27734839.java!!!	isPremultiplied() : boolean
        if (mRecycled) {
            Log.w(TAG, "Called isPremultiplied() on a recycle()'d bitmap! This is undefined behavior!");
        }
        return nativeIsPremultiplied(mNativePtr);
!!!27734967.java!!!	setPremultiplied(inout premultiplied : boolean) : void
        checkRecycled("setPremultiplied called on a recycled bitmap");
        mRequestPremultiplied = premultiplied;
        nativeSetPremultiplied(mNativePtr, premultiplied);
!!!27735095.java!!!	getWidth() : int
        if (mRecycled) {
            Log.w(TAG, "Called getWidth() on a recycle()'d bitmap! This is undefined behavior!");
        }
        return mWidth;
!!!27735223.java!!!	getHeight() : int
        if (mRecycled) {
            Log.w(TAG, "Called getHeight() on a recycle()'d bitmap! This is undefined behavior!");
        }
        return mHeight;
!!!27735351.java!!!	getScaledWidth(inout canvas : Canvas) : int
        return scaleFromDensity(getWidth(), mDensity, canvas.mDensity);
!!!27735479.java!!!	getScaledHeight(inout canvas : Canvas) : int
        return scaleFromDensity(getHeight(), mDensity, canvas.mDensity);
!!!27735607.java!!!	getScaledWidth(inout metrics : DisplayMetrics) : int
        return scaleFromDensity(getWidth(), mDensity, metrics.densityDpi);
!!!27735735.java!!!	getScaledHeight(inout metrics : DisplayMetrics) : int
        return scaleFromDensity(getHeight(), mDensity, metrics.densityDpi);
!!!27735863.java!!!	getScaledWidth(in targetDensity : int) : int
        return scaleFromDensity(getWidth(), mDensity, targetDensity);
!!!27735991.java!!!	getScaledHeight(in targetDensity : int) : int
        return scaleFromDensity(getHeight(), mDensity, targetDensity);
!!!27736119.java!!!	scaleFromDensity(in size : int, in sdensity : int, in tdensity : int) : int
        if (sdensity == DENSITY_NONE || tdensity == DENSITY_NONE || sdensity == tdensity) {
            return size;
        }

        // Scale by tdensity / sdensity, rounding up.
        return ((size * tdensity) + (sdensity >> 1)) / sdensity;
!!!27736247.java!!!	getRowBytes() : int
        if (mRecycled) {
            Log.w(TAG, "Called getRowBytes() on a recycle()'d bitmap! This is undefined behavior!");
        }
        return nativeRowBytes(mNativePtr);
!!!27736375.java!!!	getByteCount() : int
        // int result permits bitmaps up to 46,340 x 46,340
        return getRowBytes() * getHeight();
!!!27736503.java!!!	getAllocationByteCount() : int
        if (mBuffer == null) {
            // native backed bitmaps don't support reconfiguration,
            // so alloc size is always content size
            return getByteCount();
        }
        return mBuffer.length;
!!!27736631.java!!!	getConfig() : Bitmap::Config
        if (mRecycled) {
            Log.w(TAG, "Called getConfig() on a recycle()'d bitmap! This is undefined behavior!");
        }
        return Config.nativeToConfig(nativeConfig(mNativePtr));
!!!27736759.java!!!	hasAlpha() : boolean
        if (mRecycled) {
            Log.w(TAG, "Called hasAlpha() on a recycle()'d bitmap! This is undefined behavior!");
        }
        return nativeHasAlpha(mNativePtr);
!!!27736887.java!!!	setHasAlpha(inout hasAlpha : boolean) : void
        checkRecycled("setHasAlpha called on a recycled bitmap");
        nativeSetHasAlpha(mNativePtr, hasAlpha, mRequestPremultiplied);
!!!27737015.java!!!	hasMipMap() : boolean
        if (mRecycled) {
            Log.w(TAG, "Called hasMipMap() on a recycle()'d bitmap! This is undefined behavior!");
        }
        return nativeHasMipMap(mNativePtr);
!!!27737143.java!!!	setHasMipMap(inout hasMipMap : boolean) : void
        checkRecycled("setHasMipMap called on a recycled bitmap");
        nativeSetHasMipMap(mNativePtr, hasMipMap);
!!!27737271.java!!!	eraseColor(in c : int) : void
        checkRecycled("Can't erase a recycled bitmap");
        if (!isMutable()) {
            throw new IllegalStateException("cannot erase immutable bitmaps");
        }
        nativeErase(mNativePtr, c);
!!!27737399.java!!!	getPixel(in x : int, in y : int) : int
        checkRecycled("Can't call getPixel() on a recycled bitmap");
        checkPixelAccess(x, y);
        return nativeGetPixel(mNativePtr, x, y);
!!!27737527.java!!!	getPixels(inout pixels : int, in offset : int, in stride : int, in x : int, in y : int, in width : int, in height : int) : void
        checkRecycled("Can't call getPixels() on a recycled bitmap");
        if (width == 0 || height == 0) {
            return; // nothing to do
        }
        checkPixelsAccess(x, y, width, height, offset, stride, pixels);
        nativeGetPixels(mNativePtr, pixels, offset, stride,
                        x, y, width, height);
!!!27737655.java!!!	checkPixelAccess(in x : int, in y : int) : void
        checkXYSign(x, y);
        if (x >= getWidth()) {
            throw new IllegalArgumentException("x must be < bitmap.width()");
        }
        if (y >= getHeight()) {
            throw new IllegalArgumentException("y must be < bitmap.height()");
        }
!!!27737783.java!!!	checkPixelsAccess(in x : int, in y : int, in width : int, in height : int, in offset : int, in stride : int, inout pixels : int) : void
        checkXYSign(x, y);
        if (width < 0) {
            throw new IllegalArgumentException("width must be >= 0");
        }
        if (height < 0) {
            throw new IllegalArgumentException("height must be >= 0");
        }
        if (x + width > getWidth()) {
            throw new IllegalArgumentException(
                    "x + width must be <= bitmap.width()");
        }
        if (y + height > getHeight()) {
            throw new IllegalArgumentException(
                    "y + height must be <= bitmap.height()");
        }
        if (Math.abs(stride) < width) {
            throw new IllegalArgumentException("abs(stride) must be >= width");
        }
        int lastScanline = offset + (height - 1) * stride;
        int length = pixels.length;
        if (offset < 0 || (offset + width > length)
                || lastScanline < 0
                || (lastScanline + width > length)) {
            throw new ArrayIndexOutOfBoundsException();
        }
!!!27737911.java!!!	setPixel(in x : int, in y : int, in color : int) : void
        checkRecycled("Can't call setPixel() on a recycled bitmap");
        if (!isMutable()) {
            throw new IllegalStateException();
        }
        checkPixelAccess(x, y);
        nativeSetPixel(mNativePtr, x, y, color);
!!!27738039.java!!!	setPixels(inout pixels : int, in offset : int, in stride : int, in x : int, in y : int, in width : int, in height : int) : void
        checkRecycled("Can't call setPixels() on a recycled bitmap");
        if (!isMutable()) {
            throw new IllegalStateException();
        }
        if (width == 0 || height == 0) {
            return; // nothing to do
        }
        checkPixelsAccess(x, y, width, height, offset, stride, pixels);
        nativeSetPixels(mNativePtr, pixels, offset, stride,
                        x, y, width, height);
!!!27738167.java!!!	describeContents() : int
        return 0;
!!!27738295.java!!!	writeToParcel(inout p : Parcel, in flags : int) : void
        checkRecycled("Can't parcel a recycled bitmap");
        if (!nativeWriteToParcel(mNativePtr, mIsMutable, mDensity, p)) {
            throw new RuntimeException("native writeToParcel failed");
        }
!!!27738423.java!!!	extractAlpha() : Bitmap
        return extractAlpha(null, null);
!!!27738551.java!!!	extractAlpha(inout paint : Paint, inout offsetXY : int) : Bitmap
        checkRecycled("Can't extractAlpha on a recycled bitmap");
        long nativePaint = paint != null ? paint.getNativeInstance() : 0;
        Bitmap bm = nativeExtractAlpha(mNativePtr, nativePaint, offsetXY);
        if (bm == null) {
            throw new RuntimeException("Failed to extractAlpha on Bitmap");
        }
        bm.mDensity = mDensity;
        return bm;
!!!27738679.java!!!	sameAs(inout other : Bitmap) : boolean
        checkRecycled("Can't call sameAs on a recycled bitmap!");
        if (this == other) return true;
        if (other == null) return false;
        if (other.isRecycled()) {
            throw new IllegalArgumentException("Can't compare to a recycled bitmap!");
        }
        return nativeSameAs(mNativePtr, other.mNativePtr);
!!!27738807.java!!!	prepareToDraw() : void
        // TODO: Consider having this start an async upload?
        // With inPurgeable no-op'd there's currently no use for this
        // method, but it could have interesting future uses.
        checkRecycled("Can't prepareToDraw on a recycled bitmap!");
!!!27738935.java!!!	refSkPixelRef() : long
        checkRecycled("Can't refSkPixelRef on a recycled bitmap!");
        return nativeRefPixelRef(mNativePtr);
