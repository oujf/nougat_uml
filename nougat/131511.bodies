class Bundle
!!!3732151.java!!!	Bundle()
        super();
        mFlags = FLAG_HAS_FDS_KNOWN | FLAG_ALLOW_FDS;
!!!3732279.java!!!	Bundle(inout parcelledData : Parcel)
        super(parcelledData);
        mFlags = FLAG_HAS_FDS_KNOWN | FLAG_ALLOW_FDS;
        if (mParcelledData.hasFileDescriptors()) {
            mFlags |= FLAG_HAS_FDS;
        }
!!!3732407.java!!!	Bundle(inout parcelledData : Parcel, in length : int)
        super(parcelledData, length);
        mFlags = FLAG_HAS_FDS_KNOWN | FLAG_ALLOW_FDS;
        if (mParcelledData.hasFileDescriptors()) {
            mFlags |= FLAG_HAS_FDS;
        }
!!!3732535.java!!!	Bundle(inout loader : ClassLoader)
        super(loader);
        mFlags = FLAG_HAS_FDS_KNOWN | FLAG_ALLOW_FDS;
!!!3732663.java!!!	Bundle(in capacity : int)
        super(capacity);
        mFlags = FLAG_HAS_FDS_KNOWN | FLAG_ALLOW_FDS;
!!!3732791.java!!!	Bundle(inout b : Bundle)
        super(b);
        mFlags = b.mFlags;
!!!3732919.java!!!	Bundle(inout b : PersistableBundle)
        super(b);
        mFlags = FLAG_HAS_FDS_KNOWN | FLAG_ALLOW_FDS;
!!!3733047.java!!!	forPair(inout key : String, inout value : String) : Bundle
        Bundle b = new Bundle(1);
        b.putString(key, value);
        return b;
!!!3733175.java!!!	setClassLoader(inout loader : ClassLoader) : void
        super.setClassLoader(loader);
!!!3733303.java!!!	getClassLoader() : ClassLoader
        return super.getClassLoader();
!!!3733431.java!!!	setAllowFds(inout allowFds : boolean) : boolean
        final boolean orig = (mFlags & FLAG_ALLOW_FDS) != 0;
        if (allowFds) {
            mFlags |= FLAG_ALLOW_FDS;
        } else {
            mFlags &= ~FLAG_ALLOW_FDS;
        }
        return orig;
!!!3733559.java!!!	setDefusable(inout defusable : boolean) : void
        if (defusable) {
            mFlags |= FLAG_DEFUSABLE;
        } else {
            mFlags &= ~FLAG_DEFUSABLE;
        }
!!!3733687.java!!!	setDefusable(inout bundle : Bundle, inout defusable : boolean) : Bundle
        if (bundle != null) {
            bundle.setDefusable(defusable);
        }
        return bundle;
!!!3733815.java!!!	clone() : Object
        return new Bundle(this);
!!!3733943.java!!!	clear() : void
        super.clear();
        mFlags = FLAG_HAS_FDS_KNOWN | FLAG_ALLOW_FDS;
!!!3734071.java!!!	remove(inout key : String) : void
        super.remove(key);
        if ((mFlags & FLAG_HAS_FDS) != 0) {
            mFlags &= ~FLAG_HAS_FDS_KNOWN;
        }
!!!3734199.java!!!	putAll(inout bundle : Bundle) : void
        unparcel();
        bundle.unparcel();
        mMap.putAll(bundle.mMap);

        // FD state is now known if and only if both bundles already knew
        if ((bundle.mFlags & FLAG_HAS_FDS) != 0) {
            mFlags |= FLAG_HAS_FDS;
        }
        if ((bundle.mFlags & FLAG_HAS_FDS_KNOWN) == 0) {
            mFlags &= ~FLAG_HAS_FDS_KNOWN;
        }
!!!3734327.java!!!	hasFileDescriptors() : boolean
        if ((mFlags & FLAG_HAS_FDS_KNOWN) == 0) {
            boolean fdFound = false;    // keep going until we find one or run out of data

            if (mParcelledData != null) {
                if (mParcelledData.hasFileDescriptors()) {
                    fdFound = true;
                }
            } else {
                // It's been unparcelled, so we need to walk the map
                for (int i=mMap.size()-1; i>=0; i--) {
                    Object obj = mMap.valueAt(i);
                    if (obj instanceof Parcelable) {
                        if ((((Parcelable)obj).describeContents()
                                & Parcelable.CONTENTS_FILE_DESCRIPTOR) != 0) {
                            fdFound = true;
                            break;
                        }
                    } else if (obj instanceof Parcelable[]) {
                        Parcelable[] array = (Parcelable[]) obj;
                        for (int n = array.length - 1; n >= 0; n--) {
                            Parcelable p = array[n];
                            if (p != null && ((p.describeContents()
                                    & Parcelable.CONTENTS_FILE_DESCRIPTOR) != 0)) {
                                fdFound = true;
                                break;
                            }
                        }
                    } else if (obj instanceof SparseArray) {
                        SparseArray<? extends Parcelable> array =
                                (SparseArray<? extends Parcelable>) obj;
                        for (int n = array.size() - 1; n >= 0; n--) {
                            Parcelable p = array.valueAt(n);
                            if (p != null && (p.describeContents()
                                    & Parcelable.CONTENTS_FILE_DESCRIPTOR) != 0) {
                                fdFound = true;
                                break;
                            }
                        }
                    } else if (obj instanceof ArrayList) {
                        ArrayList array = (ArrayList) obj;
                        // an ArrayList here might contain either Strings or
                        // Parcelables; only look inside for Parcelables
                        if (!array.isEmpty() && (array.get(0) instanceof Parcelable)) {
                            for (int n = array.size() - 1; n >= 0; n--) {
                                Parcelable p = (Parcelable) array.get(n);
                                if (p != null && ((p.describeContents()
                                        & Parcelable.CONTENTS_FILE_DESCRIPTOR) != 0)) {
                                    fdFound = true;
                                    break;
                                }
                            }
                        }
                    }
                }
            }

            if (fdFound) {
                mFlags |= FLAG_HAS_FDS;
            } else {
                mFlags &= ~FLAG_HAS_FDS;
            }
            mFlags |= FLAG_HAS_FDS_KNOWN;
        }
        return (mFlags & FLAG_HAS_FDS) != 0;
!!!3734455.java!!!	filterValues() : void
        unparcel();
        if (mMap != null) {
            for (int i = mMap.size() - 1; i >= 0; i--) {
                Object value = mMap.valueAt(i);
                if (PersistableBundle.isValidType(value)) {
                    continue;
                }
                if (value instanceof Bundle) {
                    ((Bundle)value).filterValues();
                }
                if (value.getClass().getName().startsWith("android.")) {
                    continue;
                }
                mMap.removeAt(i);
            }
        }
        mFlags |= FLAG_HAS_FDS_KNOWN;
        mFlags &= ~FLAG_HAS_FDS;
!!!3734583.java!!!	putByte(inout key : String, in value : byte) : void
        super.putByte(key, value);
!!!3734711.java!!!	putChar(inout key : String, in value : char) : void
        super.putChar(key, value);
!!!3734839.java!!!	putShort(inout key : String, in value : short) : void
        super.putShort(key, value);
!!!3734967.java!!!	putFloat(inout key : String, in value : float) : void
        super.putFloat(key, value);
!!!3735095.java!!!	putCharSequence(inout key : String, inout value : CharSequence) : void
        super.putCharSequence(key, value);
!!!3735223.java!!!	putParcelable(inout key : String, inout value : Parcelable) : void
        unparcel();
        mMap.put(key, value);
        mFlags &= ~FLAG_HAS_FDS_KNOWN;
!!!3735351.java!!!	putSize(inout key : String, inout value : Size) : void
        unparcel();
        mMap.put(key, value);
!!!3735479.java!!!	putSizeF(inout key : String, inout value : SizeF) : void
        unparcel();
        mMap.put(key, value);
!!!3735607.java!!!	putParcelableArray(inout key : String, inout value : Parcelable) : void
        unparcel();
        mMap.put(key, value);
        mFlags &= ~FLAG_HAS_FDS_KNOWN;
!!!3735735.java!!!	putParcelableArrayList(inout key : String, inout value : ArrayList<? extends Parcelable>) : void
        unparcel();
        mMap.put(key, value);
        mFlags &= ~FLAG_HAS_FDS_KNOWN;
!!!3735863.java!!!	putParcelableList(inout key : String, inout value : List<? extends Parcelable>) : void
        unparcel();
        mMap.put(key, value);
        mFlags &= ~FLAG_HAS_FDS_KNOWN;
!!!3735991.java!!!	putSparseParcelableArray(inout key : String, inout value : SparseArray) : void
        unparcel();
        mMap.put(key, value);
        mFlags &= ~FLAG_HAS_FDS_KNOWN;
!!!3736119.java!!!	putIntegerArrayList(inout key : String, inout value : ArrayList<Integer>) : void
        super.putIntegerArrayList(key, value);
!!!3736247.java!!!	putStringArrayList(inout key : String, inout value : ArrayList<String>) : void
        super.putStringArrayList(key, value);
!!!3736375.java!!!	putCharSequenceArrayList(inout key : String, inout value : ArrayList<CharSequence>) : void
        super.putCharSequenceArrayList(key, value);
!!!3736503.java!!!	putSerializable(inout key : String, inout value : Serializable) : void
        super.putSerializable(key, value);
!!!3736631.java!!!	putByteArray(inout key : String, inout value : byte) : void
        super.putByteArray(key, value);
!!!3736759.java!!!	putShortArray(inout key : String, inout value : short) : void
        super.putShortArray(key, value);
!!!3736887.java!!!	putCharArray(inout key : String, inout value : char) : void
        super.putCharArray(key, value);
!!!3737015.java!!!	putFloatArray(inout key : String, inout value : float) : void
        super.putFloatArray(key, value);
!!!3737143.java!!!	putCharSequenceArray(inout key : String, inout value : CharSequence) : void
        super.putCharSequenceArray(key, value);
!!!3737271.java!!!	putBundle(inout key : String, inout value : Bundle) : void
        unparcel();
        mMap.put(key, value);
!!!3737399.java!!!	putBinder(inout key : String, inout value : IBinder) : void
        unparcel();
        mMap.put(key, value);
!!!3737527.java!!!	putIBinder(inout key : String, inout value : IBinder) : void
        unparcel();
        mMap.put(key, value);
!!!3737655.java!!!	getByte(inout key : String) : byte
        return super.getByte(key);
!!!3737783.java!!!	getByte(inout key : String, in defaultValue : byte) : Byte
        return super.getByte(key, defaultValue);
!!!3737911.java!!!	getChar(inout key : String) : char
        return super.getChar(key);
!!!3738039.java!!!	getChar(inout key : String, in defaultValue : char) : char
        return super.getChar(key, defaultValue);
!!!3738167.java!!!	getShort(inout key : String) : short
        return super.getShort(key);
!!!3738295.java!!!	getShort(inout key : String, in defaultValue : short) : short
        return super.getShort(key, defaultValue);
!!!3738423.java!!!	getFloat(inout key : String) : float
        return super.getFloat(key);
!!!3738551.java!!!	getFloat(inout key : String, in defaultValue : float) : float
        return super.getFloat(key, defaultValue);
!!!3738679.java!!!	getCharSequence(inout key : String) : CharSequence
        return super.getCharSequence(key);
!!!3738807.java!!!	getCharSequence(inout key : String, inout defaultValue : CharSequence) : CharSequence
        return super.getCharSequence(key, defaultValue);
!!!3738935.java!!!	getSize(inout key : String) : Size
        unparcel();
        final Object o = mMap.get(key);
        try {
            return (Size) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "Size", e);
            return null;
        }
!!!3739063.java!!!	getSizeF(inout key : String) : SizeF
        unparcel();
        final Object o = mMap.get(key);
        try {
            return (SizeF) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "SizeF", e);
            return null;
        }
!!!3739191.java!!!	getBundle(inout key : String) : Bundle
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (Bundle) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "Bundle", e);
            return null;
        }
!!!3739319.java!!!	getParcelable(inout key : String) : T
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (T) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "Parcelable", e);
            return null;
        }
!!!3739447.java!!!	getParcelableArray(inout key : String) : Parcelable
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (Parcelable[]) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "Parcelable[]", e);
            return null;
        }
!!!3739575.java!!!	getParcelableArrayList(inout key : String) : ArrayList<T>
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (ArrayList<T>) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "ArrayList", e);
            return null;
        }
!!!3739703.java!!!	getSparseParcelableArray(inout key : String) : SparseArray
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (SparseArray<T>) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "SparseArray", e);
            return null;
        }
!!!3739831.java!!!	getSerializable(inout key : String) : Serializable
        return super.getSerializable(key);
!!!3739959.java!!!	getIntegerArrayList(inout key : String) : ArrayList<Integer>
        return super.getIntegerArrayList(key);
!!!3740087.java!!!	getStringArrayList(inout key : String) : String
        return super.getStringArrayList(key);
!!!3740215.java!!!	getCharSequenceArrayList(inout key : String) : ArrayList<CharSequence>
        return super.getCharSequenceArrayList(key);
!!!3740343.java!!!	getByteArray(inout key : String) : byte
        return super.getByteArray(key);
!!!3740471.java!!!	getShortArray(inout key : String) : short
        return super.getShortArray(key);
!!!3740599.java!!!	getCharArray(inout key : String) : char
        return super.getCharArray(key);
!!!3740727.java!!!	getFloatArray(inout key : String) : float
        return super.getFloatArray(key);
!!!3740855.java!!!	getCharSequenceArray(inout key : String) : CharSequence
        return super.getCharSequenceArray(key);
!!!3740983.java!!!	getBinder(inout key : String) : IBinder
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (IBinder) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "IBinder", e);
            return null;
        }
!!!3741111.java!!!	getIBinder(inout key : String) : IBinder
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (IBinder) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "IBinder", e);
            return null;
        }
!!!3741239.java!!!	describeContents() : int
        int mask = 0;
        if (hasFileDescriptors()) {
            mask |= Parcelable.CONTENTS_FILE_DESCRIPTOR;
        }
        return mask;
!!!3741367.java!!!	writeToParcel(inout parcel : Parcel, in flags : int) : void
        final boolean oldAllowFds = parcel.pushAllowFds((mFlags & FLAG_ALLOW_FDS) != 0);
        try {
            super.writeToParcelInner(parcel, flags);
        } finally {
            parcel.restoreAllowFds(oldAllowFds);
        }
!!!3741495.java!!!	readFromParcel(inout parcel : Parcel) : void
        super.readFromParcelInner(parcel);
        mFlags = FLAG_HAS_FDS_KNOWN | FLAG_ALLOW_FDS;
        if (mParcelledData.hasFileDescriptors()) {
            mFlags |= FLAG_HAS_FDS;
        }
!!!3741623.java!!!	toString() : String
        if (mParcelledData != null) {
            if (isEmptyParcel()) {
                return "Bundle[EMPTY_PARCEL]";
            } else {
                return "Bundle[mParcelledData.dataSize=" +
                        mParcelledData.dataSize() + "]";
            }
        }
        return "Bundle[" + mMap.toString() + "]";
