class QSFooter
!!!30629943.java!!!	QSFooter(inout qsPanel : QSPanel, inout context : Context)
        mRootView = LayoutInflater.from(context)
                .inflate(R.layout.quick_settings_footer, qsPanel, false);
        mRootView.setOnClickListener(this);
        mFooterText = (TextView) mRootView.findViewById(R.id.footer_text);
        mFooterIcon = (ImageView) mRootView.findViewById(R.id.footer_icon);
        mContext = context;
        mMainHandler = new Handler();
!!!30630071.java!!!	setHost(inout host : QSTileHost) : void
        mHost = host;
        mSecurityController = host.getSecurityController();
        mHandler = new H(host.getLooper());
!!!30630199.java!!!	setListening(inout listening : boolean) : void
        if (listening) {
            mSecurityController.addCallback(mCallback);
        } else {
            mSecurityController.removeCallback(mCallback);
        }
!!!30630327.java!!!	onConfigurationChanged() : void
        FontSizeUtils.updateFontSize(mFooterText, R.dimen.qs_tile_text_size);
!!!30630455.java!!!	getView() : View
        return mRootView;
!!!30630583.java!!!	hasFooter() : boolean
        return mRootView.getVisibility() != View.GONE;
!!!30630711.java!!!	onClick(inout v : View) : void
        mHandler.sendEmptyMessage(H.CLICK);
!!!30630839.java!!!	handleClick() : void
        mHost.collapsePanels();
        // TODO: Delay dialog creation until after panels are collapsed.
        createDialog();
!!!30630967.java!!!	refreshState() : void
        mHandler.sendEmptyMessage(H.REFRESH_STATE);
!!!30631095.java!!!	handleRefreshState() : void
        mIsIconVisible = mSecurityController.isVpnEnabled();
        // If the device has device owner, show "Device may be monitored", but --
        // TODO See b/25779452 -- device owner doesn't actually have monitoring power.
        if (mSecurityController.isDeviceManaged()) {
            mFooterTextId = R.string.device_owned_footer;
            mIsVisible = true;
        } else {
            mFooterTextId = R.string.vpn_footer;
            mIsVisible = mIsIconVisible;
        }
        mMainHandler.post(mUpdateDisplayState);
!!!30631223.java!!!	onClick(inout dialog : DialogInterface, in which : int) : void
        if (which == DialogInterface.BUTTON_NEGATIVE) {
            final Intent settingsIntent = new Intent(ACTION_VPN_SETTINGS);
            mHost.startActivityDismissingKeyguard(settingsIntent);
        }
!!!30631351.java!!!	createDialog() : void
        String deviceOwner = mSecurityController.getDeviceOwnerName();
        String profileOwner = mSecurityController.getProfileOwnerName();
        String primaryVpn = mSecurityController.getPrimaryVpnName();
        String profileVpn = mSecurityController.getProfileVpnName();
        boolean managed = mSecurityController.hasProfileOwner();

        mDialog = new SystemUIDialog(mContext);
        mDialog.setTitle(getTitle(deviceOwner));
        mDialog.setMessage(getMessage(deviceOwner, profileOwner, primaryVpn, profileVpn, managed));
        mDialog.setButton(DialogInterface.BUTTON_POSITIVE, getPositiveButton(), this);
        if (mSecurityController.isVpnEnabled() && !mSecurityController.isVpnRestricted()) {
            mDialog.setButton(DialogInterface.BUTTON_NEGATIVE, getSettingsButton(), this);
        }
        mDialog.show();
!!!30631479.java!!!	getSettingsButton() : String
        return mContext.getString(R.string.status_bar_settings_settings_button);
!!!30631607.java!!!	getPositiveButton() : String
        return mContext.getString(R.string.quick_settings_done);
!!!30631735.java!!!	getMessage(inout deviceOwner : String, inout profileOwner : String, inout primaryVpn : String, inout profileVpn : String, inout primaryUserIsManaged : boolean) : String
        // Show a special warning when the device has device owner, but --
        // TODO See b/25779452 -- device owner doesn't actually have monitoring power.
        if (deviceOwner != null) {
            if (primaryVpn != null) {
                return mContext.getString(R.string.monitoring_description_vpn_app_device_owned,
                        deviceOwner, primaryVpn);
            } else {
                return mContext.getString(R.string.monitoring_description_device_owned,
                        deviceOwner);
            }
        } else if (primaryVpn != null) {
            if (profileVpn != null) {
                return mContext.getString(R.string.monitoring_description_app_personal_work,
                        profileOwner, profileVpn, primaryVpn);
            } else {
                return mContext.getString(R.string.monitoring_description_app_personal,
                        primaryVpn);
            }
        } else if (profileVpn != null) {
            return mContext.getString(R.string.monitoring_description_app_work,
                    profileOwner, profileVpn);
        } else if (profileOwner != null && primaryUserIsManaged) {
            return mContext.getString(R.string.monitoring_description_device_owned,
                    profileOwner);
        } else {
            // No device owner, no personal VPN, no work VPN, no user owner. Why are we here?
            return null;
        }
!!!30631863.java!!!	getTitle(inout deviceOwner : String) : int
        if (deviceOwner != null) {
            return R.string.monitoring_title_device_owned;
        } else {
            return R.string.monitoring_title;
        }
