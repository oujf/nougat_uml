format 76
"animation" // nougat_src::frameworks::base::core::java::android::animation
  revision 2
  modified_by 55 "Jeff"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "d:/Workspace/Android Source Code/nougat_src/frameworks/base/core/java/android/animation/"
  java_package "android.animation"
  classview 130231 "animation"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 144311 "StateListAnimator"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Lets you define a number of Animators that will run on the attached View depending on the View's
drawable state.
<p>
It can be defined in an XML file with the <code>&lt;selector></code> element.
Each State Animator is defined in a nested <code>&lt;item></code> element.

@attr ref android.R.styleable#DrawableStates_state_focused
@attr ref android.R.styleable#DrawableStates_state_window_focused
@attr ref android.R.styleable#DrawableStates_state_enabled
@attr ref android.R.styleable#DrawableStates_state_checkable
@attr ref android.R.styleable#DrawableStates_state_checked
@attr ref android.R.styleable#DrawableStates_state_selected
@attr ref android.R.styleable#DrawableStates_state_activated
@attr ref android.R.styleable#DrawableStates_state_active
@attr ref android.R.styleable#DrawableStates_state_single
@attr ref android.R.styleable#DrawableStates_state_first
@attr ref android.R.styleable#DrawableStates_state_middle
@attr ref android.R.styleable#DrawableStates_state_last
@attr ref android.R.styleable#DrawableStates_state_pressed
@attr ref android.R.styleable#StateListAnimatorItem_animation"
      classrelation 670647 // <realization>
	relation 670647 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 670647 // <realization>
	  b parent class_ref 242231 // Cloneable
      end

      class 322487 "Tuple"
	visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 612663 "mSpecs"
	  const_attribute package explicit_type "int"
	  multiplicity "[]"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 671543 // mAnimator (<unidirectional association>)
	  relation 671543 --->
	    a role_name "mAnimator" const_relation package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 671543 // mAnimator (<unidirectional association>)
	    b parent class_ref 314807 // Animator
	end

	operation 1567799 "Tuple"
	  private explicit_return_type ""
	  nparams 2
	    param inout name "specs" explicit_type "int"
	    param inout name "animator" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1567927 "getSpecs"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "@hide"
	end

	operation 1568055 "getAnimator"
	  public return_type class_ref 314807 // Animator
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "@hide"
	end
      end

      classrelation 670775 // mTuples (<unidirectional association>)
	relation 670775 --->
	  stereotype "ArrayList"
	  a role_name "mTuples" init_value " new ArrayList<Tuple>()" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 670775 // mTuples (<unidirectional association>)
	  b parent class_ref 322487 // Tuple
      end

      classrelation 670903 // mLastMatch (<unidirectional association>)
	relation 670903 --->
	  a role_name "mLastMatch" init_value " null" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 670903 // mLastMatch (<unidirectional association>)
	  b parent class_ref 322487 // Tuple
      end

      classrelation 671031 // mRunningAnimator (<unidirectional association>)
	relation 671031 --->
	  a role_name "mRunningAnimator" init_value " null" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 671031 // mRunningAnimator (<unidirectional association>)
	  b parent class_ref 314807 // Animator
      end

      classrelation 671159 // mViewRef (<unidirectional association>)
	relation 671159 --->
	  stereotype "WeakReference"
	  a role_name "mViewRef" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 671159 // mViewRef (<unidirectional association>)
	  b parent class_ref 134455 // View
      end

      class 322615 "StateListAnimatorConstantState"
	visibility private 
	nactuals 1
	actual class class_ref 315447 // ConstantState
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 671671 // <realization>
	  relation 671671 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 671671 // <realization>
	    b parent class_ref 315447 // ConstantState
	end

	classrelation 671799 // mAnimator (<unidirectional association>)
	  relation 671799 --->
	    a role_name "mAnimator" const_relation package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 671799 // mAnimator (<unidirectional association>)
	    b parent class_ref 144311 // StateListAnimator
	end

	attribute 612791 "mChangingConf"
	  package explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  java_annotation "@Config
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1568183 "StateListAnimatorConstantState"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "animator" type class_ref 144311 // StateListAnimator
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1568311 "getChangingConfigurations"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
@Config
"
	  
	  
	  
	end

	operation 1568439 "newInstance"
	  public return_type class_ref 144311 // StateListAnimator
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      classrelation 671287 // mConstantState (<unidirectional association>)
	relation 671287 --->
	  a role_name "mConstantState" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 671287 // mConstantState (<unidirectional association>)
	  b parent class_ref 322615 // StateListAnimatorConstantState
      end

      classrelation 671415 // mAnimatorListener (<unidirectional association>)
	relation 671415 --->
	  a role_name "mAnimatorListener" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 671415 // mAnimatorListener (<unidirectional association>)
	  b parent class_ref 316727 // AnimatorListenerAdapter
      end

      attribute 612535 "mChangingConfigurations"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Config
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1565623 "StateListAnimator"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1565751 "initAnimatorListener"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1565879 "addState"
	public explicit_return_type "void"
	nparams 2
	  param inout name "specs" explicit_type "int"
	  param inout name "animator" type class_ref 314807 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Associates the given animator with the provided drawable state specs so that it will be run
when the View's drawable state matches the specs.

@param specs The drawable state specs to match against
@param animator The animator to run when the specs match"
      end

      operation 1566007 "getRunningAnimator"
	public return_type class_ref 314807 // Animator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current {@link android.animation.Animator} which is started because of a state
change.

@return The currently running Animator or null if no Animator is running
@hide"
      end

      operation 1566135 "getTarget"
	public return_type class_ref 134455 // View
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 1566263 "setTarget"
	public explicit_return_type "void"
	nparams 1
	  param inout name "view" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by View
@hide"
      end

      operation 1566391 "clearTarget"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1566519 "clone"
	public return_type class_ref 144311 // StateListAnimator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1566647 "setState"
	public explicit_return_type "void"
	nparams 1
	  param inout name "state" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by View
@hide"
      end

      operation 1566775 "start"
	private explicit_return_type "void"
	nparams 1
	  param inout name "match" type class_ref 322487 // Tuple
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1566903 "cancel"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1567031 "getTuples"
	public return_type class_ref 322487 // Tuple
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}ArrayList<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 1567159 "jumpToCurrentState"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If there is an animation running for a recent state change, ends it.
<p>
This causes the animation to assign the end value(s) to the View."
      end

      operation 1567287 "getChangingConfigurations"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Config
"
	
	
	
	comment "Return a mask of the configuration parameters for which this animator may change, requiring
that it be re-created.  The default implementation returns whatever was provided through
{@link #setChangingConfigurations(int)} or 0 by default.

@return Returns a mask of the changing configuration parameters, as defined by
{@link android.content.pm.ActivityInfo}.

@see android.content.pm.ActivityInfo
@hide"
      end

      operation 1567415 "setChangingConfigurations"
	public explicit_return_type "void"
	nparams 1
	  param in name "configs" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Config ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a mask of the configuration parameters for which this animator may change, requiring
that it should be recreated from resources instead of being cloned.

@param configs A mask of the changing configuration parameters, as
defined by {@link android.content.pm.ActivityInfo}.

@see android.content.pm.ActivityInfo
@hide"
      end

      operation 1567543 "appendChangingConfigurations"
	public explicit_return_type "void"
	nparams 1
	  param in name "configs" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Config ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the changing configurations value to the union of the current changing configurations
and the provided configs.
This method is called while loading the animator.
@hide"
      end

      operation 1567671 "createConstantState"
	public return_type class_ref 315447 // ConstantState
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<StateListAnimator> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a {@link android.content.res.ConstantState} instance that holds the shared state of
this Animator.
<p>
This constant state is used to create new instances of this animator when needed. Default
implementation creates a new {@link StateListAnimatorConstantState}. You can override this
method to provide your custom logic or return null if you don't want this animator to be
cached.

@return The {@link android.content.res.ConstantState} associated to this Animator.
@see android.content.res.ConstantState
@see #clone()
@hide"
      end
    end

    class 152887 "LayoutTransition"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class enables automatic animations on layout changes in ViewGroup objects. To enable
transitions for a layout container, create a LayoutTransition object and set it on any
ViewGroup by calling {@link ViewGroup#setLayoutTransition(LayoutTransition)}. This will cause
default animations to run whenever items are added to or removed from that container. To specify
custom animations, use the {@link LayoutTransition#setAnimator(int, Animator)
setAnimator()} method.

<p>One of the core concepts of these transition animations is that there are two types of
changes that cause the transition and four different animations that run because of
those changes. The changes that trigger the transition are items being added to a container
(referred to as an \"appearing\" transition) or removed from a container (also known as
\"disappearing\"). Setting the visibility of views (between GONE and VISIBLE) will trigger
the same add/remove logic. The animations that run due to those events are one that animates
items being added, one that animates items being removed, and two that animate the other
items in the container that change due to the add/remove occurrence. Users of
the transition may want different animations for the changing items depending on whether
they are changing due to an appearing or disappearing event, so there is one animation for
each of these variations of the changing event. Most of the API of this class is concerned
with setting up the basic properties of the animations used in these four situations,
or with setting up custom animations for any or all of the four.</p>

<p>By default, the DISAPPEARING animation begins immediately, as does the CHANGE_APPEARING
animation. The other animations begin after a delay that is set to the default duration
of the animations. This behavior facilitates a sequence of animations in transitions as
follows: when an item is being added to a layout, the other children of that container will
move first (thus creating space for the new item), then the appearing animation will run to
animate the item being added. Conversely, when an item is removed from a container, the
animation to remove it will run first, then the animations of the other children in the
layout will run (closing the gap created in the layout when the item was removed). If this
default choreography behavior is not desired, the {@link #setDuration(int, long)} and
{@link #setStartDelay(int, long)} of any or all of the animations can be changed as
appropriate.</p>

<p>The animations specified for the transition, both the defaults and any custom animations
set on the transition object, are templates only. That is, these animations exist to hold the
basic animation properties, such as the duration, start delay, and properties being animated.
But the actual target object, as well as the start and end values for those properties, are
set automatically in the process of setting up the transition each time it runs. Each of the
animations is cloned from the original copy and the clone is then populated with the dynamic
values of the target being animated (such as one of the items in a layout container that is
moving as a result of the layout event) as well as the values that are changing (such as the
position and size of that object). The actual values that are pushed to each animation
depends on what properties are specified for the animation. For example, the default
CHANGE_APPEARING animation animates the <code>left</code>, <code>top</code>, <code>right</code>,
<code>bottom</code>, <code>scrollX</code>, and <code>scrollY</code> properties.
Values for these properties are updated with the pre- and post-layout
values when the transition begins. Custom animations will be similarly populated with
the target and values being animated, assuming they use ObjectAnimator objects with
property names that are known on the target object.</p>

<p>This class, and the associated XML flag for containers, animateLayoutChanges=\"true\",
provides a simple utility meant for automating changes in straightforward situations.
Using LayoutTransition at multiple levels of a nested view hierarchy may not work due to the
interrelationship of the various levels of layout. Also, a container that is being scrolled
at the same time as items are being added or removed is probably not a good candidate for
this utility, because the before/after locations calculated by LayoutTransition
may not match the actual locations when the animations finish due to the container
being scrolled as the animations are running. You can work around that
particular issue by disabling the 'changing' animations by setting the CHANGE_APPEARING
and CHANGE_DISAPPEARING animations to null, and setting the startDelay of the
other animations appropriately.</p>"
      class 153143 "TransitionListener"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 1526839 "startTransition"
	  public explicit_return_type "void"
	  nparams 4
	    param inout name "transition" type class_ref 152887 // LayoutTransition
	    param inout name "container" type class_ref 134711 // ViewGroup
	    param inout name "view" type class_ref 134455 // View
	    param in name "transitionType" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "This event is sent to listeners when any type of transition animation begins.

@param transition The LayoutTransition sending out the event.
@param container The ViewGroup on which the transition is playing.
@param view The View object being affected by the transition animation.
@param transitionType The type of transition that is beginning,
{@link android.animation.LayoutTransition#APPEARING},
{@link android.animation.LayoutTransition#DISAPPEARING},
{@link android.animation.LayoutTransition#CHANGE_APPEARING}, or
{@link android.animation.LayoutTransition#CHANGE_DISAPPEARING}."
	end

	operation 1526967 "endTransition"
	  public explicit_return_type "void"
	  nparams 4
	    param inout name "transition" type class_ref 152887 // LayoutTransition
	    param inout name "container" type class_ref 134711 // ViewGroup
	    param inout name "view" type class_ref 134455 // View
	    param in name "transitionType" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "This event is sent to listeners when any type of transition animation ends.

@param transition The LayoutTransition sending out the event.
@param container The ViewGroup on which the transition is playing.
@param view The View object being affected by the transition animation.
@param transitionType The type of transition that is ending,
{@link android.animation.LayoutTransition#APPEARING},
{@link android.animation.LayoutTransition#DISAPPEARING},
{@link android.animation.LayoutTransition#CHANGE_APPEARING}, or
{@link android.animation.LayoutTransition#CHANGE_DISAPPEARING}."
	end
      end

      attribute 600375 "CHANGE_APPEARING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A flag indicating the animation that runs on those items that are changing
due to a new item appearing in the container.
"
      end

      attribute 600503 "CHANGE_DISAPPEARING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A flag indicating the animation that runs on those items that are changing
due to an item disappearing from the container.
"
      end

      attribute 600631 "APPEARING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A flag indicating the animation that runs on those items that are appearing
in the container.
"
      end

      attribute 600759 "DISAPPEARING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A flag indicating the animation that runs on those items that are disappearing
from the container.
"
      end

      attribute 600887 "CHANGING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A flag indicating the animation that runs on those items that are changing
due to a layout change not caused by items being added to or removed
from the container. This transition type is not enabled by default; it can be
enabled via {@link #enableTransitionType(int)}.
"
      end

      attribute 601015 "FLAG_APPEARING"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x01"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Private bit fields used to set the collection of enabled transition types for
mTransitionTypes.
"
      end

      attribute 601143 "FLAG_DISAPPEARING"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x02"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 601271 "FLAG_CHANGE_APPEARING"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x04"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 601399 "FLAG_CHANGE_DISAPPEARING"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x08"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 601527 "FLAG_CHANGING"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x10"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 657335 // mDisappearingAnim (<unidirectional association>)
	relation 657335 --->
	  a role_name "mDisappearingAnim" init_value " null" private
	    comment "
These variables hold the animations that are currently used to run the transition effects.
These animations are set to defaults, but can be changed to custom animations by
calls to setAnimator().

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 657335 // mDisappearingAnim (<unidirectional association>)
	  b parent class_ref 314807 // Animator
      end

      classrelation 657463 // mAppearingAnim (<unidirectional association>)
	relation 657463 --->
	  a role_name "mAppearingAnim" init_value " null" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 657463 // mAppearingAnim (<unidirectional association>)
	  b parent class_ref 314807 // Animator
      end

      classrelation 657591 // mChangingAppearingAnim (<unidirectional association>)
	relation 657591 --->
	  a role_name "mChangingAppearingAnim" init_value " null" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 657591 // mChangingAppearingAnim (<unidirectional association>)
	  b parent class_ref 314807 // Animator
      end

      classrelation 657719 // mChangingDisappearingAnim (<unidirectional association>)
	relation 657719 --->
	  a role_name "mChangingDisappearingAnim" init_value " null" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 657719 // mChangingDisappearingAnim (<unidirectional association>)
	  b parent class_ref 314807 // Animator
      end

      classrelation 657847 // mChangingAnim (<unidirectional association>)
	relation 657847 --->
	  a role_name "mChangingAnim" init_value " null" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 657847 // mChangingAnim (<unidirectional association>)
	  b parent class_ref 314807 // Animator
      end

      classrelation 657975 // defaultChange (<unidirectional association>)
	relation 657975 --->
	  a role_name "defaultChange" class_relation private
	    comment "
These are the default animations, defined in the constructor, that will be used
unless the user specifies custom animations.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 657975 // defaultChange (<unidirectional association>)
	  b parent class_ref 314551 // ObjectAnimator
      end

      classrelation 658103 // defaultChangeIn (<unidirectional association>)
	relation 658103 --->
	  a role_name "defaultChangeIn" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 658103 // defaultChangeIn (<unidirectional association>)
	  b parent class_ref 314551 // ObjectAnimator
      end

      classrelation 658231 // defaultChangeOut (<unidirectional association>)
	relation 658231 --->
	  a role_name "defaultChangeOut" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 658231 // defaultChangeOut (<unidirectional association>)
	  b parent class_ref 314551 // ObjectAnimator
      end

      classrelation 658359 // defaultFadeIn (<unidirectional association>)
	relation 658359 --->
	  a role_name "defaultFadeIn" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 658359 // defaultFadeIn (<unidirectional association>)
	  b parent class_ref 314551 // ObjectAnimator
      end

      classrelation 658487 // defaultFadeOut (<unidirectional association>)
	relation 658487 --->
	  a role_name "defaultFadeOut" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 658487 // defaultFadeOut (<unidirectional association>)
	  b parent class_ref 314551 // ObjectAnimator
      end

      attribute 601655 "DEFAULT_DURATION"
	class_attribute private explicit_type "long"
	init_value " 300"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The default duration used by all animations.
"
      end

      attribute 601783 "mChangingAppearingDuration"
	private explicit_type "long"
	init_value " DEFAULT_DURATION"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The durations of the different animations
"
      end

      attribute 601911 "mChangingDisappearingDuration"
	private explicit_type "long"
	init_value " DEFAULT_DURATION"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 602039 "mChangingDuration"
	private explicit_type "long"
	init_value " DEFAULT_DURATION"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 602167 "mAppearingDuration"
	private explicit_type "long"
	init_value " DEFAULT_DURATION"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 602295 "mDisappearingDuration"
	private explicit_type "long"
	init_value " DEFAULT_DURATION"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 602423 "mAppearingDelay"
	private explicit_type "long"
	init_value " DEFAULT_DURATION"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The start delays of the different animations. Note that the default behavior of
the appearing item is the default duration, since it should wait for the items to move
before fading it. Same for the changing animation when disappearing; it waits for the item
to fade out before moving the other items.
"
      end

      attribute 602551 "mDisappearingDelay"
	private explicit_type "long"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 602679 "mChangingAppearingDelay"
	private explicit_type "long"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 602807 "mChangingDisappearingDelay"
	private explicit_type "long"
	init_value " DEFAULT_DURATION"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 602935 "mChangingDelay"
	private explicit_type "long"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 603063 "mChangingAppearingStagger"
	private explicit_type "long"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The inter-animation delays used on the changing animations
"
      end

      attribute 603191 "mChangingDisappearingStagger"
	private explicit_type "long"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 603319 "mChangingStagger"
	private explicit_type "long"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 658615 // ACCEL_DECEL_INTERPOLATOR (<unidirectional association>)
	relation 658615 --->
	  a role_name "ACCEL_DECEL_INTERPOLATOR" init_value "
            new AccelerateDecelerateInterpolator()" class_relation private
	    comment "
Static interpolators - these are stateless and can be shared across the instances

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 658615 // ACCEL_DECEL_INTERPOLATOR (<unidirectional association>)
	  b parent class_ref 315319 // TimeInterpolator
      end

      classrelation 658743 // DECEL_INTERPOLATOR (<unidirectional association>)
	relation 658743 --->
	  a role_name "DECEL_INTERPOLATOR" init_value " new DecelerateInterpolator()" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 658743 // DECEL_INTERPOLATOR (<unidirectional association>)
	  b parent class_ref 315319 // TimeInterpolator
      end

      classrelation 658871 // sAppearingInterpolator (<unidirectional association>)
	relation 658871 --->
	  a role_name "sAppearingInterpolator" init_value " ACCEL_DECEL_INTERPOLATOR" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 658871 // sAppearingInterpolator (<unidirectional association>)
	  b parent class_ref 315319 // TimeInterpolator
      end

      classrelation 658999 // sDisappearingInterpolator (<unidirectional association>)
	relation 658999 --->
	  a role_name "sDisappearingInterpolator" init_value " ACCEL_DECEL_INTERPOLATOR" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 658999 // sDisappearingInterpolator (<unidirectional association>)
	  b parent class_ref 315319 // TimeInterpolator
      end

      classrelation 659127 // sChangingAppearingInterpolator (<unidirectional association>)
	relation 659127 --->
	  a role_name "sChangingAppearingInterpolator" init_value " DECEL_INTERPOLATOR" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 659127 // sChangingAppearingInterpolator (<unidirectional association>)
	  b parent class_ref 315319 // TimeInterpolator
      end

      classrelation 659255 // sChangingDisappearingInterpolator (<unidirectional association>)
	relation 659255 --->
	  a role_name "sChangingDisappearingInterpolator" init_value " DECEL_INTERPOLATOR" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 659255 // sChangingDisappearingInterpolator (<unidirectional association>)
	  b parent class_ref 315319 // TimeInterpolator
      end

      classrelation 659383 // sChangingInterpolator (<unidirectional association>)
	relation 659383 --->
	  a role_name "sChangingInterpolator" init_value " DECEL_INTERPOLATOR" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 659383 // sChangingInterpolator (<unidirectional association>)
	  b parent class_ref 315319 // TimeInterpolator
      end

      classrelation 659511 // mAppearingInterpolator (<unidirectional association>)
	relation 659511 --->
	  a role_name "mAppearingInterpolator" init_value " sAppearingInterpolator" private
	    comment "
The default interpolators used for the animations

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 659511 // mAppearingInterpolator (<unidirectional association>)
	  b parent class_ref 315319 // TimeInterpolator
      end

      classrelation 659639 // mDisappearingInterpolator (<unidirectional association>)
	relation 659639 --->
	  a role_name "mDisappearingInterpolator" init_value " sDisappearingInterpolator" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 659639 // mDisappearingInterpolator (<unidirectional association>)
	  b parent class_ref 315319 // TimeInterpolator
      end

      classrelation 659767 // mChangingAppearingInterpolator (<unidirectional association>)
	relation 659767 --->
	  a role_name "mChangingAppearingInterpolator" init_value " sChangingAppearingInterpolator" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 659767 // mChangingAppearingInterpolator (<unidirectional association>)
	  b parent class_ref 315319 // TimeInterpolator
      end

      classrelation 659895 // mChangingDisappearingInterpolator (<unidirectional association>)
	relation 659895 --->
	  a role_name "mChangingDisappearingInterpolator" init_value " sChangingDisappearingInterpolator" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 659895 // mChangingDisappearingInterpolator (<unidirectional association>)
	  b parent class_ref 315319 // TimeInterpolator
      end

      classrelation 660023 // mChangingInterpolator (<unidirectional association>)
	relation 660023 --->
	  a role_name "mChangingInterpolator" init_value " sChangingInterpolator" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 660023 // mChangingInterpolator (<unidirectional association>)
	  b parent class_ref 315319 // TimeInterpolator
      end

      classrelation 660151 // pendingAnimations (<unidirectional association>)
	relation 660151 --->
	  stereotype "HashMap"
	  a role_name "pendingAnimations" init_value "
            new HashMap<View, Animator>()" const_relation private
	    comment "These hashmaps are used to store the animations that are currently running as part of
the transition. The reason for this is that a further layout event should cause
existing animations to stop where they are prior to starting new animations. So
we cache all of the current animations in this map for possible cancellation on
another layout event. LinkedHashMaps are used to preserve the order in which animations
are inserted, so that we process events (such as setting up start values) in the same order.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}, Animator> ${name}${value};
"
	    classrelation_ref 660151 // pendingAnimations (<unidirectional association>)
	  b parent class_ref 134455 // View
      end

      classrelation 660279 // currentChangingAnimations (<unidirectional association>)
	relation 660279 --->
	  stereotype "LinkedHashMap"
	  a role_name "currentChangingAnimations" init_value "
            new LinkedHashMap<View, Animator>()" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}, Animator> ${name}${value};
"
	    classrelation_ref 660279 // currentChangingAnimations (<unidirectional association>)
	  b parent class_ref 134455 // View
      end

      classrelation 660407 // currentAppearingAnimations (<unidirectional association>)
	relation 660407 --->
	  stereotype "LinkedHashMap"
	  a role_name "currentAppearingAnimations" init_value "
            new LinkedHashMap<View, Animator>()" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}, Animator> ${name}${value};
"
	    classrelation_ref 660407 // currentAppearingAnimations (<unidirectional association>)
	  b parent class_ref 134455 // View
      end

      classrelation 660535 // currentDisappearingAnimations (<unidirectional association>)
	relation 660535 --->
	  stereotype "LinkedHashMap"
	  a role_name "currentDisappearingAnimations" init_value "
            new LinkedHashMap<View, Animator>()" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}, Animator> ${name}${value};
"
	    classrelation_ref 660535 // currentDisappearingAnimations (<unidirectional association>)
	  b parent class_ref 134455 // View
      end

      classrelation 660663 // layoutChangeListenerMap (<unidirectional association>)
	relation 660663 --->
	  stereotype "HashMap"
	  a role_name "layoutChangeListenerMap" init_value "
            new HashMap<View, View.OnLayoutChangeListener>()" const_relation private
	    comment "This hashmap is used to track the listeners that have been added to the children of
a container. When a layout change occurs, an animation is created for each View, so that
the pre-layout values can be cached in that animation. Then a listener is added to the
view to see whether the layout changes the bounds of that view. If so, the animation
is set with the final values and then run. If not, the animation is not started. When
the process of setting up and running all appropriate animations is done, we need to
remove these listeners and clear out the map.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}, View.OnLayoutChangeListener> ${name}${value};
"
	    classrelation_ref 660663 // layoutChangeListenerMap (<unidirectional association>)
	  b parent class_ref 134455 // View
      end

      attribute 603447 "staggerDelay"
	private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Used to track the current delay being assigned to successive animations as they are
started. This value is incremented for each new animation, then zeroed before the next
transition begins.
"
      end

      attribute 603575 "mTransitionTypes"
	private explicit_type "int"
	init_value " FLAG_CHANGE_APPEARING | FLAG_CHANGE_DISAPPEARING |
            FLAG_APPEARING | FLAG_DISAPPEARING"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "These are the types of transition animations that the LayoutTransition is reacting
to. By default, appearing/disappearing and the change animations related to them are
enabled (not CHANGING).
"
      end

      classrelation 660791 // mListeners (<unidirectional association>)
	relation 660791 --->
	  stereotype "ArrayList"
	  a role_name "mListeners" private
	    comment "The set of listeners that should be notified when APPEARING/DISAPPEARING transitions
start and end.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 660791 // mListeners (<unidirectional association>)
	  b parent class_ref 153143 // TransitionListener
      end

      attribute 603703 "mAnimateParentHierarchy"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Controls whether changing animations automatically animate the parent hierarchy as well.
This behavior prevents artifacts when wrap_content layouts snap to the end state as the
transition begins, causing visual glitches and clipping.
Default value is true.
"
      end

      operation 1521847 "LayoutTransition"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a LayoutTransition object. By default, the object will listen to layout
events on any ViewGroup that it is set on and will run default animations for each
type of layout event."
      end

      operation 1521975 "setDuration"
	public explicit_return_type "void"
	nparams 1
	  param in name "duration" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the duration to be used by all animations of this transition object. If you want to
set the duration of just one of the animations in particular, use the
{@link #setDuration(int, long)} method.

@param duration The length of time, in milliseconds, that the transition animations
should last."
      end

      operation 1522103 "enableTransitionType"
	public explicit_return_type "void"
	nparams 1
	  param in name "transitionType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enables the specified transitionType for this LayoutTransition object.
By default, a LayoutTransition listens for changes in children being
added/remove/hidden/shown in the container, and runs the animations associated with
those events. That is, all transition types besides {@link #CHANGING} are enabled by default.
You can also enable {@link #CHANGING} animations by calling this method with the
{@link #CHANGING} transitionType.

@param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},
{@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}."
      end

      operation 1522231 "disableTransitionType"
	public explicit_return_type "void"
	nparams 1
	  param in name "transitionType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Disables the specified transitionType for this LayoutTransition object.
By default, all transition types except {@link #CHANGING} are enabled.

@param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},
{@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}."
      end

      operation 1522359 "isTransitionTypeEnabled"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "transitionType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether the specified transitionType is enabled for this LayoutTransition object.
By default, all transition types except {@link #CHANGING} are enabled.

@param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},
{@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}.
@return true if the specified transitionType is currently enabled, false otherwise."
      end

      operation 1522487 "setStartDelay"
	public explicit_return_type "void"
	nparams 2
	  param in name "transitionType" explicit_type "int"
	  param in name "delay" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the start delay on one of the animation objects used by this transition. The
<code>transitionType</code> parameter determines the animation whose start delay
is being set.

@param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},
{@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which determines
the animation whose start delay is being set.
@param delay The length of time, in milliseconds, to delay before starting the animation.
@see Animator#setStartDelay(long)"
      end

      operation 1522615 "getStartDelay"
	public explicit_return_type "long"
	nparams 1
	  param in name "transitionType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the start delay on one of the animation objects used by this transition. The
<code>transitionType</code> parameter determines the animation whose start delay
is returned.

@param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},
{@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which determines
the animation whose start delay is returned.
@return long The start delay of the specified animation.
@see Animator#getStartDelay()"
      end

      operation 1522743 "setDuration"
	public explicit_return_type "void"
	nparams 2
	  param in name "transitionType" explicit_type "int"
	  param in name "duration" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the duration on one of the animation objects used by this transition. The
<code>transitionType</code> parameter determines the animation whose duration
is being set.

@param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},
{@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which determines
the animation whose duration is being set.
@param duration The length of time, in milliseconds, that the specified animation should run.
@see Animator#setDuration(long)"
      end

      operation 1522871 "getDuration"
	public explicit_return_type "long"
	nparams 1
	  param in name "transitionType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the duration on one of the animation objects used by this transition. The
<code>transitionType</code> parameter determines the animation whose duration
is returned.

@param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},
{@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which determines
the animation whose duration is returned.
@return long The duration of the specified animation.
@see Animator#getDuration()"
      end

      operation 1522999 "setStagger"
	public explicit_return_type "void"
	nparams 2
	  param in name "transitionType" explicit_type "int"
	  param in name "duration" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the length of time to delay between starting each animation during one of the
change animations.

@param transitionType A value of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING}, or
{@link #CHANGING}.
@param duration The length of time, in milliseconds, to delay before launching the next
animation in the sequence."
      end

      operation 1523127 "getStagger"
	public explicit_return_type "long"
	nparams 1
	  param in name "transitionType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the length of time to delay between starting each animation during one of the
change animations.

@param transitionType A value of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING}, or
{@link #CHANGING}.
@return long The length of time, in milliseconds, to delay before launching the next
animation in the sequence."
      end

      operation 1523255 "setInterpolator"
	public explicit_return_type "void"
	nparams 2
	  param in name "transitionType" explicit_type "int"
	  param inout name "interpolator" type class_ref 315319 // TimeInterpolator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the interpolator on one of the animation objects used by this transition. The
<code>transitionType</code> parameter determines the animation whose interpolator
is being set.

@param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},
{@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which determines
the animation whose interpolator is being set.
@param interpolator The interpolator that the specified animation should use.
@see Animator#setInterpolator(TimeInterpolator)"
      end

      operation 1523383 "getInterpolator"
	public return_type class_ref 315319 // TimeInterpolator
	nparams 1
	  param in name "transitionType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the interpolator on one of the animation objects used by this transition. The
<code>transitionType</code> parameter determines the animation whose interpolator
is returned.

@param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},
{@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which determines
the animation whose interpolator is being returned.
@return TimeInterpolator The interpolator that the specified animation uses.
@see Animator#setInterpolator(TimeInterpolator)"
      end

      operation 1523511 "setAnimator"
	public explicit_return_type "void"
	nparams 2
	  param in name "transitionType" explicit_type "int"
	  param inout name "animator" type class_ref 314807 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the animation used during one of the transition types that may run. Any
Animator object can be used, but to be most useful in the context of layout
transitions, the animation should either be a ObjectAnimator or a AnimatorSet
of animations including PropertyAnimators. Also, these ObjectAnimator objects
should be able to get and set values on their target objects automatically. For
example, a ObjectAnimator that animates the property \"left\" is able to set and get the
<code>left</code> property from the View objects being animated by the layout
transition. The transition works by setting target objects and properties
dynamically, according to the pre- and post-layoout values of those objects, so
having animations that can handle those properties appropriately will work best
for custom animation. The dynamic setting of values is only the case for the
CHANGE animations; the APPEARING and DISAPPEARING animations are simply run with
the values they have.

<p>It is also worth noting that any and all animations (and their underlying
PropertyValuesHolder objects) will have their start and end values set according
to the pre- and post-layout values. So, for example, a custom animation on \"alpha\"
as the CHANGE_APPEARING animation will inherit the real value of alpha on the target
object (presumably 1) as its starting and ending value when the animation begins.
Animations which need to use values at the beginning and end that may not match the
values queried when the transition begins may need to use a different mechanism
than a standard ObjectAnimator object.</p>

@param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},
{@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which determines the
animation whose animator is being set.
@param animator The animation being assigned. A value of <code>null</code> means that no
animation will be run for the specified transitionType."
      end

      operation 1523639 "getAnimator"
	public return_type class_ref 314807 // Animator
	nparams 1
	  param in name "transitionType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the animation used during one of the transition types that may run.

@param transitionType One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING},
{@link #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which determines
the animation whose animator is being returned.
@return Animator The animation being used for the given transition type.
@see #setAnimator(int, Animator)"
      end

      operation 1523767 "runChangeTransition"
	private explicit_return_type "void"
	nparams 3
	  param in name "parent" type class_ref 134711 // ViewGroup
	  param inout name "newView" type class_ref 134455 // View
	  param in name "changeReason" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, ${t1} ${p1}, final ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This function sets up animations on all of the views that change during layout.
For every child in the parent, we create a change animation of the appropriate
type (appearing, disappearing, or changing) and ask it to populate its start values from its
target view. We add layout listeners to all child views and listen for changes. For
those views that change, we populate the end values for those animations and start them.
Animations are not run on unchanging views.

@param parent The container which is undergoing a change.
@param newView The view being added to or removed from the parent. May be null if the
changeReason is CHANGING.
@param changeReason A value of APPEARING, DISAPPEARING, or CHANGING, indicating whether the
transition is occurring because an item is being added to or removed from the parent, or
if it is running in response to a layout operation (that is, if the value is CHANGING)."
      end

      operation 1523895 "setAnimateParentHierarchy"
	public explicit_return_type "void"
	nparams 1
	  param inout name "animateParentHierarchy" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This flag controls whether CHANGE_APPEARING or CHANGE_DISAPPEARING animations will
cause the default changing animation to be run on the parent hierarchy as well. This allows
containers of transitioning views to also transition, which may be necessary in situations
where the containers bounds change between the before/after states and may clip their
children during the transition animations. For example, layouts with wrap_content will
adjust their bounds according to the dimensions of their children.

<p>The default changing transitions animate the bounds and scroll positions of the
target views. These are the animations that will run on the parent hierarchy, not
the custom animations that happen to be set on the transition. This allows custom
behavior for the children of the transitioning container, but uses standard behavior
of resizing/rescrolling on any changing parents.

@param animateParentHierarchy A boolean value indicating whether the parents of
transitioning views should also be animated during the transition. Default value is true."
      end

      operation 1524023 "setupChangeAnimation"
	private explicit_return_type "void"
	nparams 5
	  param in name "parent" type class_ref 134711 // ViewGroup
	  param in name "changeReason" explicit_type "int"
	  param inout name "baseAnimator" type class_ref 314807 // Animator
	  param in name "duration" explicit_type "long"
	  param in name "child" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}, ${t2} ${p2}, final ${t3} ${p3}, final ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function called by runChangingTransition for both the children and the parent
hierarchy."
      end

      operation 1524151 "startChangingAnimations"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Starts the animations set up for a CHANGING transition. We separate the setup of these
animations from actually starting them, to avoid side-effects that starting the animations
may have on the properties of the affected objects. After setup, we tell the affected parent
that this transition should be started. The parent informs its ViewAncestor, which then
starts the transition after the current layout/measurement phase, just prior to drawing
the view hierarchy.

@hide"
      end

      operation 1524279 "endChangingAnimations"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ends the animations that are set up for a CHANGING transition. This is a variant of
startChangingAnimations() which is called when the window the transition is playing in
is not visible. We need to make sure the animations put their targets in their end states
and that the transition finishes to remove any mid-process state (such as isRunning()).

@hide"
      end

      operation 1524407 "isChangingLayout"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if animations are running which animate layout-related properties. This
essentially means that either CHANGE_APPEARING or CHANGE_DISAPPEARING animations
are running, since these animations operate on layout-related properties.

@return true if CHANGE_APPEARING or CHANGE_DISAPPEARING animations are currently
running."
      end

      operation 1524535 "isRunning"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if any of the animations in this transition are currently running.

@return true if any animations in the transition are running."
      end

      operation 1524663 "cancel"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Cancels the currently running transition. Note that we cancel() the changing animations
but end() the visibility animations. This is because this method is currently called
in the context of starting a new transition, so we want to move things from their mid-
transition positions, but we want them to have their end-transition visibility.

@hide"
      end

      operation 1524791 "cancel"
	public explicit_return_type "void"
	nparams 1
	  param in name "transitionType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Cancels the specified type of transition. Note that we cancel() the changing animations
but end() the visibility animations. This is because this method is currently called
in the context of starting a new transition, so we want to move things from their mid-
transition positions, but we want them to have their end-transition visibility.

@hide"
      end

      operation 1524919 "runAppearingTransition"
	private explicit_return_type "void"
	nparams 2
	  param in name "parent" type class_ref 134711 // ViewGroup
	  param in name "child" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method runs the animation that makes an added item appear.

@param parent The ViewGroup to which the View is being added.
@param child The View being added to the ViewGroup."
      end

      operation 1525047 "runDisappearingTransition"
	private explicit_return_type "void"
	nparams 2
	  param in name "parent" type class_ref 134711 // ViewGroup
	  param in name "child" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method runs the animation that makes a removed item disappear.

@param parent The ViewGroup from which the View is being removed.
@param child The View being removed from the ViewGroup."
      end

      operation 1525175 "addChild"
	private explicit_return_type "void"
	nparams 3
	  param inout name "parent" type class_ref 134711 // ViewGroup
	  param inout name "child" type class_ref 134455 // View
	  param inout name "changesLayout" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called by ViewGroup when a child view is about to be added to the
container. This callback starts the process of a transition; we grab the starting
values, listen for changes to all of the children of the container, and start appropriate
animations.

@param parent The ViewGroup to which the View is being added.
@param child The View being added to the ViewGroup.
@param changesLayout Whether the removal will cause changes in the layout of other views
in the container. INVISIBLE views becoming VISIBLE will not cause changes and thus will not
affect CHANGE_APPEARING or CHANGE_DISAPPEARING animations."
      end

      operation 1525303 "hasListeners"
	private explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1525431 "layoutChange"
	public explicit_return_type "void"
	nparams 1
	  param inout name "parent" type class_ref 134711 // ViewGroup
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called by ViewGroup when there is a call to layout() on the container
with this LayoutTransition. If the CHANGING transition is enabled and if there is no other
transition currently running on the container, then this call runs a CHANGING transition.
The transition does not start immediately; it just sets up the mechanism to run if any
of the children of the container change their layout parameters (similar to
the CHANGE_APPEARING and CHANGE_DISAPPEARING transitions).

@param parent The ViewGroup whose layout() method has been called.

@hide"
      end

      operation 1525559 "addChild"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parent" type class_ref 134711 // ViewGroup
	  param inout name "child" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called by ViewGroup when a child view is about to be added to the
container. This callback starts the process of a transition; we grab the starting
values, listen for changes to all of the children of the container, and start appropriate
animations.

@param parent The ViewGroup to which the View is being added.
@param child The View being added to the ViewGroup."
      end

      operation 1525687 "showChild"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parent" type class_ref 134711 // ViewGroup
	  param inout name "child" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "@deprecated Use {@link #showChild(android.view.ViewGroup, android.view.View, int)}."
      end

      operation 1525815 "showChild"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parent" type class_ref 134711 // ViewGroup
	  param inout name "child" type class_ref 134455 // View
	  param in name "oldVisibility" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called by ViewGroup when a child view is about to be made visible in the
container. This callback starts the process of a transition; we grab the starting
values, listen for changes to all of the children of the container, and start appropriate
animations.

@param parent The ViewGroup in which the View is being made visible.
@param child The View being made visible.
@param oldVisibility The previous visibility value of the child View, either
{@link View#GONE} or {@link View#INVISIBLE}."
      end

      operation 1525943 "removeChild"
	private explicit_return_type "void"
	nparams 3
	  param inout name "parent" type class_ref 134711 // ViewGroup
	  param inout name "child" type class_ref 134455 // View
	  param inout name "changesLayout" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called by ViewGroup when a child view is about to be removed from the
container. This callback starts the process of a transition; we grab the starting
values, listen for changes to all of the children of the container, and start appropriate
animations.

@param parent The ViewGroup from which the View is being removed.
@param child The View being removed from the ViewGroup.
@param changesLayout Whether the removal will cause changes in the layout of other views
in the container. Views becoming INVISIBLE will not cause changes and thus will not
affect CHANGE_APPEARING or CHANGE_DISAPPEARING animations."
      end

      operation 1526071 "removeChild"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parent" type class_ref 134711 // ViewGroup
	  param inout name "child" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called by ViewGroup when a child view is about to be removed from the
container. This callback starts the process of a transition; we grab the starting
values, listen for changes to all of the children of the container, and start appropriate
animations.

@param parent The ViewGroup from which the View is being removed.
@param child The View being removed from the ViewGroup."
      end

      operation 1526199 "hideChild"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parent" type class_ref 134711 // ViewGroup
	  param inout name "child" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "@deprecated Use {@link #hideChild(android.view.ViewGroup, android.view.View, int)}."
      end

      operation 1526327 "hideChild"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parent" type class_ref 134711 // ViewGroup
	  param inout name "child" type class_ref 134455 // View
	  param in name "newVisibility" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called by ViewGroup when a child view is about to be hidden in
container. This callback starts the process of a transition; we grab the starting
values, listen for changes to all of the children of the container, and start appropriate
animations.

@param parent The parent ViewGroup of the View being hidden.
@param child The View being hidden.
@param newVisibility The new visibility value of the child View, either
{@link View#GONE} or {@link View#INVISIBLE}."
      end

      operation 1526455 "addTransitionListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 153143 // TransitionListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a listener that will be called when the bounds of the view change due to
layout processing.

@param listener The listener that will be called when layout bounds change."
      end

      operation 1526583 "removeTransitionListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 153143 // TransitionListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove a listener for layout changes.

@param listener The listener for layout bounds change."
      end

      operation 1526711 "getTransitionListeners"
	public return_type class_ref 153143 // TransitionListener
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the current list of listeners for layout changes.
@return"
      end

      class 319543 "CleanupCallback"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 660919 // <realization>
	  relation 660919 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 660919 // <realization>
	    b parent class_ref 268343 // OnPreDrawListener
	end

	classrelation 661047 // <realization>
	  relation 661047 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 661047 // <realization>
	    b parent class_ref 142519 // OnAttachStateChangeListener
	end

	classrelation 661175 // layoutChangeListenerMap (<unidirectional association>)
	  relation 661175 --->
	    stereotype "Map"
	    a role_name "layoutChangeListenerMap" const_relation package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}, View.OnLayoutChangeListener> ${name}${value};
"
	      classrelation_ref 661175 // layoutChangeListenerMap (<unidirectional association>)
	    b parent class_ref 134455 // View
	end

	classrelation 661303 // parent (<unidirectional association>)
	  relation 661303 --->
	    a role_name "parent" const_relation package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 661303 // parent (<unidirectional association>)
	    b parent class_ref 134711 // ViewGroup
	end

	operation 1527095 "CleanupCallback"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "listenerMap" explicit_type "Map<View, View.OnLayoutChangeListener>"
	    param inout name "parent" type class_ref 134711 // ViewGroup
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1527223 "cleanup"
	  private explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1527351 "onViewAttachedToWindow"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "v" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1527479 "onViewDetachedFromWindow"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "v" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1527607 "onPreDraw"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 314167 "AnimationHandler"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This custom, static handler handles the timing pulse that is shared by all active
ValueAnimators. This approach ensures that the setting of animation values will happen on the
same thread that animations start on, and that all animations will share the same times for
calculating their values, which makes synchronizing animations possible.

The handler uses the Choreographer by default for doing periodic callbacks. A custom
AnimationFrameCallbackProvider can be set on the handler to provide timing pulse that
may be independent of UI frame update. This could be useful in testing.

@hide"
      class 314295 "AnimationFrameCallback"
	visibility package stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 1492919 "doAnimationFrame"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "frameTime" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Run animation based on the frame time.
@param frameTime The frame start time, in the {@link SystemClock#uptimeMillis()} time
                 base."
	end

	operation 1493047 "commitAnimationFrame"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "frameTime" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "This notifies the callback of frame commit time. Frame commit time is the time after
traversals happen, as opposed to the normal animation frame time that is before
traversals. This is used to compensate expensive traversals that happen as the
animation starts. When traversals take a long time to complete, the rendering of the
initial frame will be delayed (by a long time). But since the startTime of the
animation is set before the traversal, by the time of next frame, a lot of time would
have passed since startTime was set, the animation will consequently skip a few frames
to respect the new frameTime. By having the commit time, we can adjust the start time to
when the first frame was drawn (after any expensive traversals) so that no frames
will be skipped.

@param frameTime The frame time after traversals happen, if any, in the
                 {@link SystemClock#uptimeMillis()} time base."
	end
      end

      classrelation 648247 // mDelayedCallbackStartTime (<unidirectional association>)
	relation 648247 --->
	  a role_name "mDelayedCallbackStartTime" init_value "
            new ArrayMap<>()" const_relation private
	    comment "
Internal per-thread collections used to avoid set collisions as animations start and end
while being processed.
@hide

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<AnimationFrameCallback, Long> ${name}${value};
"
	    classrelation_ref 648247 // mDelayedCallbackStartTime (<unidirectional association>)
	  b parent class_ref 156343 // ArrayMap
      end

      classrelation 648375 // mAnimationCallbacks (<unidirectional association>)
	relation 648375 --->
	  stereotype "ArrayList"
	  a role_name "mAnimationCallbacks" init_value "
            new ArrayList<>()" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 648375 // mAnimationCallbacks (<unidirectional association>)
	  b parent class_ref 314295 // AnimationFrameCallback
      end

      classrelation 648503 // mCommitCallbacks (<unidirectional association>)
	relation 648503 --->
	  stereotype "ArrayList"
	  a role_name "mCommitCallbacks" init_value "
            new ArrayList<>()" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 648503 // mCommitCallbacks (<unidirectional association>)
	  b parent class_ref 314295 // AnimationFrameCallback
      end

      class 314423 "AnimationFrameCallbackProvider"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 1493175 "postFrameCallback"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "callback" type class_ref 275511 // FrameCallback
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1493303 "postCommitCallback"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "runnable" explicit_type "Runnable"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1493431 "getFrameTime"
	  public explicit_return_type "long"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1493559 "getFrameDelay"
	  public explicit_return_type "long"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1493687 "setFrameDelay"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "delay" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 648631 // mProvider (<unidirectional association>)
	relation 648631 --->
	  a role_name "mProvider" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 648631 // mProvider (<unidirectional association>)
	  b parent class_ref 314423 // AnimationFrameCallbackProvider
      end

      classrelation 648759 // mFrameCallback (<unidirectional association>)
	relation 648759 --->
	  a role_name "mFrameCallback" init_value " new Choreographer.FrameCallback() {
        @Override
        public void doFrame(long frameTimeNanos) {
            doAnimationFrame(getProvider().getFrameTime());
            if (mAnimationCallbacks.size() > 0) {
                getProvider().postFrameCallback(this);
            }
        }
    }" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 648759 // mFrameCallback (<unidirectional association>)
	  b parent class_ref 275511 // FrameCallback
      end

      classrelation 648887 // sAnimatorHandler (<unidirectional association>)
	relation 648887 --->
	  stereotype "ThreadLocal"
	  a role_name "sAnimatorHandler" init_value " new ThreadLocal<>()" class_relation const_relation public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 648887 // sAnimatorHandler (<unidirectional association>)
	  b parent class_ref 314167 // AnimationHandler
      end

      attribute 594999 "mListDirty"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1490359 "getInstance"
	class_operation public return_type class_ref 314167 // AnimationHandler
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1490487 "setProvider"
	public explicit_return_type "void"
	nparams 1
	  param inout name "provider" type class_ref 314423 // AnimationFrameCallbackProvider
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "By default, the Choreographer is used to provide timing for frame callbacks. A custom
provider can be used here to provide different timing pulse."
      end

      operation 1490615 "getProvider"
	private return_type class_ref 314423 // AnimationFrameCallbackProvider
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1490743 "addAnimationFrameCallback"
	public explicit_return_type "void"
	nparams 2
	  param in name "callback" type class_ref 314295 // AnimationFrameCallback
	  param in name "delay" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Register to get a callback on the next frame after the delay."
      end

      operation 1490871 "addOneShotCommitCallback"
	public explicit_return_type "void"
	nparams 1
	  param in name "callback" type class_ref 314295 // AnimationFrameCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Register to get a one shot callback for frame commit timing. Frame commit timing is the
time *after* traversals are done, as opposed to the animation frame timing, which is
before any traversals. This timing can be used to adjust the start time of an animation
when expensive traversals create big delta between the animation frame timing and the time
that animation is first shown on screen.

Note this should only be called when the animation has already registered to receive
animation frame callbacks. This callback will be guaranteed to happen *after* the next
animation frame callback."
      end

      operation 1490999 "removeCallback"
	public explicit_return_type "void"
	nparams 1
	  param inout name "callback" type class_ref 314295 // AnimationFrameCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the given callback from the list, so it will no longer be called for frame related
timing."
      end

      operation 1491127 "doAnimationFrame"
	private explicit_return_type "void"
	nparams 1
	  param in name "frameTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1491255 "commitAnimationFrame"
	private explicit_return_type "void"
	nparams 2
	  param inout name "callback" type class_ref 314295 // AnimationFrameCallback
	  param in name "frameTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1491383 "isCallbackDue"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "callback" type class_ref 314295 // AnimationFrameCallback
	  param in name "currentTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove the callbacks from mDelayedCallbackStartTime once they have passed the initial delay
so that they can start getting frame callbacks.

@return true if they have passed the initial delay or have no delay, false otherwise."
      end

      operation 1491511 "getAnimationCount"
	class_operation public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the number of callbacks that have registered for frame callbacks."
      end

      operation 1491639 "setFrameDelay"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "delay" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1491767 "getFrameDelay"
	class_operation public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1491895 "autoCancelBasedOn"
	package explicit_return_type "void"
	nparams 1
	  param inout name "objectAnimator" type class_ref 314551 // ObjectAnimator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1492023 "cleanUpList"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1492151 "getCallbackSize"
	private explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 314679 "MyFrameCallbackProvider"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 649015 // <realization>
	  relation 649015 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 649015 // <realization>
	    b parent class_ref 314423 // AnimationFrameCallbackProvider
	end

	classrelation 649143 // mChoreographer (<unidirectional association>)
	  relation 649143 --->
	    a role_name "mChoreographer" init_value " Choreographer.getInstance()" const_relation package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 649143 // mChoreographer (<unidirectional association>)
	    b parent class_ref 275383 // Choreographer
	end

	operation 1492279 "postFrameCallback"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "callback" type class_ref 275511 // FrameCallback
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1492407 "postCommitCallback"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "runnable" explicit_type "Runnable"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1492535 "getFrameTime"
	  public explicit_return_type "long"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1492663 "getFrameDelay"
	  public explicit_return_type "long"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1492791 "setFrameDelay"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "delay" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 314551 "ObjectAnimator"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This subclass of {@link ValueAnimator} provides support for animating properties on target objects.
The constructors of this class take parameters to define the target object that will be animated
as well as the name of the property that will be animated. Appropriate set/get functions
are then determined internally and the animation will call these functions as necessary to
animate the property.

<p>Animators can be created from either code or resource files, as shown here:</p>

{@sample development/samples/ApiDemos/res/anim/object_animator.xml ObjectAnimatorResources}

<p>When using resource files, it is possible to use {@link PropertyValuesHolder} and
{@link Keyframe} to create more complex animations. Using PropertyValuesHolders
allows animators to animate several properties in parallel, as shown in this sample:</p>

{@sample development/samples/ApiDemos/res/anim/object_animator_pvh.xml
PropertyValuesHolderResources}

<p>Using Keyframes allows animations to follow more complex paths from the start
to the end values. Note that you can specify explicit fractional values (from 0 to 1) for
each keyframe to determine when, in the overall duration, the animation should arrive at that
value. Alternatively, you can leave the fractions off and the keyframes will be equally
distributed within the total duration. Also, a keyframe with no value will derive its value
from the target object when the animator starts, just like animators with only one
value specified. In addition, an optional interpolator can be specified. The interpolator will
be applied on the interval between the keyframe that the interpolator is set on and the previous
keyframe. When no interpolator is supplied, the default {@link AccelerateDecelerateInterpolator}
will be used. </p>

{@sample development/samples/ApiDemos/res/anim/object_animator_pvh_kf_interpolated.xml KeyframeResources}

<div class=\"special reference\">
<h3>Developer Guides</h3>
<p>For more information about animating with {@code ObjectAnimator}, read the
<a href=\"{@docRoot}guide/topics/graphics/prop-animation.html#object-animator\">Property
Animation</a> developer guide.</p>
</div>

@see #setPropertyName(String)
"
      classrelation 662455 // <generalisation>
	relation 662455 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 662455 // <generalisation>
	  b parent class_ref 316343 // ValueAnimator
      end

      classrelation 662583 // LOG_TAG (<unidirectional association>)
	relation 662583 --->
	  a role_name "LOG_TAG" init_value " \"ObjectAnimator\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 662583 // LOG_TAG (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      attribute 606775 "DBG"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 662711 // mTarget (<unidirectional association>)
	relation 662711 --->
	  stereotype "WeakReference"
	  a role_name "mTarget" private
	    comment "A weak reference to the target object on which the property exists, set
in the constructor. We'll cancel the animation if this goes away.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 662711 // mTarget (<unidirectional association>)
	  b parent class_ref 132663 // Object
      end

      classrelation 662839 // mPropertyName (<unidirectional association>)
	relation 662839 --->
	  a role_name "mPropertyName" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 662839 // mPropertyName (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 662967 // mProperty (<unidirectional association>)
	relation 662967 --->
	  a role_name "mProperty" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 662967 // mProperty (<unidirectional association>)
	  b parent class_ref 149559 // Property
      end

      attribute 606903 "mAutoCancel"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1536183 "setPropertyName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "propertyName" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the name of the property that will be animated. This name is used to derive
a setter function that will be called to set animated values.
For example, a property name of <code>foo</code> will result
in a call to the function <code>setFoo()</code> on the target object. If either
<code>valueFrom</code> or <code>valueTo</code> is null, then a getter function will
also be derived and called.

<p>For best performance of the mechanism that calls the setter function determined by the
name of the property being animated, use <code>float</code> or <code>int</code> typed values,
and make the setter function for those properties have a <code>void</code> return value. This
will cause the code to take an optimized path for these constrained circumstances. Other
property types and return types will work, but will have more overhead in processing
the requests due to normal reflection mechanisms.</p>

<p>Note that the setter function derived from this property name
must take the same parameter type as the
<code>valueFrom</code> and <code>valueTo</code> properties, otherwise the call to
the setter function will fail.</p>

<p>If this ObjectAnimator has been set up to animate several properties together,
using more than one PropertyValuesHolder objects, then setting the propertyName simply
sets the propertyName in the first of those PropertyValuesHolder objects.</p>

@param propertyName The name of the property being animated. Should not be null."
      end

      operation 1536311 "setProperty"
	public explicit_return_type "void"
	nparams 1
	  param inout name "property" type class_ref 149559 // Property
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the property that will be animated. Property objects will take precedence over
properties specified by the {@link #setPropertyName(String)} method. Animations should
be set up to use one or the other, not both.

@param property The property being animated. Should not be null."
      end

      operation 1536439 "getPropertyName"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Nullable
"
	
	
	
	comment "Gets the name of the property that will be animated. This name will be used to derive
a setter function that will be called to set animated values.
For example, a property name of <code>foo</code> will result
in a call to the function <code>setFoo()</code> on the target object. If either
<code>valueFrom</code> or <code>valueTo</code> is null, then a getter function will
also be derived and called.

<p>If this animator was created with a {@link Property} object instead of the
string name of a property, then this method will return the {@link
Property#getName() name} of that Property object instead. If this animator was
created with one or more {@link PropertyValuesHolder} objects, then this method
will return the {@link PropertyValuesHolder#getPropertyName() name} of that
object (if there was just one) or a comma-separated list of all of the
names (if there are more than one).</p>"
      end

      operation 1536567 "getNameForTrace"
	package return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1536695 "ObjectAnimator"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new ObjectAnimator object. This default constructor is primarily for
use internally; the other constructors which take parameters are more generally
useful."
      end

      operation 1536823 "ObjectAnimator"
	private explicit_return_type ""
	nparams 2
	  param inout name "target" type class_ref 132663 // Object
	  param inout name "propertyName" type class_ref 129591 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Private utility constructor that initializes the target object and name of the
property being animated.

@param target The object whose property is to be animated. This object should
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter.
@param propertyName The name of the property being animated."
      end

      operation 1536951 "ObjectAnimator"
	private explicit_return_type ""
	nparams 2
	  param inout name "target" explicit_type "T"
	  param inout name "property" type class_ref 149559 // Property
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}<T> ${name}${(}${t0} ${p0}, ${t1}<T, ?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Private utility constructor that initializes the target object and property being animated.

@param target The object whose property is to be animated.
@param property The property being animated."
      end

      operation 1537079 "ofInt"
	class_operation public return_type class_ref 314551 // ObjectAnimator
	nparams 3
	  param inout name "target" type class_ref 132663 // Object
	  param inout name "propertyName" type class_ref 129591 // String
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates between int values. A single
value implies that that value is the one being animated to, in which case the start value
will be derived from the property being animated and the target object when {@link #start()}
is called for the first time. Two values imply starting and ending values. More than two
values imply a starting value, values to animate through along the way, and an ending value
(these values will be distributed evenly across the duration of the animation).

@param target The object whose property is to be animated. This object should
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter.
@param propertyName The name of the property being animated.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values."
      end

      operation 1537207 "ofInt"
	class_operation public return_type class_ref 314551 // ObjectAnimator
	nparams 4
	  param inout name "target" type class_ref 132663 // Object
	  param inout name "xPropertyName" type class_ref 129591 // String
	  param inout name "yPropertyName" type class_ref 129591 // String
	  param inout name "path" type class_ref 272823 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates coordinates along a <code>Path</code>
using two properties. A <code>Path</code></> animation moves in two dimensions, animating
coordinates <code>(x, y)</code> together to follow the line. In this variation, the
coordinates are integers that are set to separate properties designated by
<code>xPropertyName</code> and <code>yPropertyName</code>.

@param target The object whose properties are to be animated. This object should
              have public methods on it called <code>setNameX()</code> and
              <code>setNameY</code>, where <code>nameX</code> and <code>nameY</code>
              are the value of <code>xPropertyName</code> and <code>yPropertyName</code>
              parameters, respectively.
@param xPropertyName The name of the property for the x coordinate being animated.
@param yPropertyName The name of the property for the y coordinate being animated.
@param path The <code>Path</code> to animate values along.
@return An ObjectAnimator object that is set up to animate along <code>path</code>."
      end

      operation 1537335 "ofInt"
	class_operation public return_type class_ref 314551 // ObjectAnimator
	nparams 3
	  param inout name "target" explicit_type "T"
	  param inout name "property" type class_ref 149559 // Property
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T, Integer> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates between int values. A single
value implies that that value is the one being animated to, in which case the start value
will be derived from the property being animated and the target object when {@link #start()}
is called for the first time. Two values imply starting and ending values. More than two
values imply a starting value, values to animate through along the way, and an ending value
(these values will be distributed evenly across the duration of the animation).

@param target The object whose property is to be animated.
@param property The property being animated.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values."
      end

      operation 1537463 "ofInt"
	class_operation public return_type class_ref 314551 // ObjectAnimator
	nparams 4
	  param inout name "target" explicit_type "T"
	  param inout name "xProperty" type class_ref 149559 // Property
	  param inout name "yProperty" type class_ref 149559 // Property
	  param inout name "path" type class_ref 272823 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T, Integer> ${p1}, ${t2}<T, Integer> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates coordinates along a <code>Path</code>
using two properties.  A <code>Path</code></> animation moves in two dimensions, animating
coordinates <code>(x, y)</code> together to follow the line. In this variation, the
coordinates are integers that are set to separate properties, <code>xProperty</code> and
<code>yProperty</code>.

@param target The object whose properties are to be animated.
@param xProperty The property for the x coordinate being animated.
@param yProperty The property for the y coordinate being animated.
@param path The <code>Path</code> to animate values along.
@return An ObjectAnimator object that is set up to animate along <code>path</code>."
      end

      operation 1537591 "ofMultiInt"
	class_operation public return_type class_ref 314551 // ObjectAnimator
	nparams 3
	  param inout name "target" type class_ref 132663 // Object
	  param inout name "propertyName" type class_ref 129591 // String
	  param inout name "values" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates over int values for a multiple
parameters setter. Only public methods that take only int parameters are supported.
Each <code>int[]</code> contains a complete set of parameters to the setter method.
At least two <code>int[]</code> values must be provided, a start and end. More than two
values imply a starting value, values to animate through along the way, and an ending
value (these values will be distributed evenly across the duration of the animation).

@param target The object whose property is to be animated. This object may
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter. <code>propertyName</code> may also
be the case-sensitive complete name of the public setter method.
@param propertyName The name of the property being animated or the name of the setter method.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values."
      end

      operation 1537719 "ofMultiInt"
	class_operation public return_type class_ref 314551 // ObjectAnimator
	nparams 3
	  param inout name "target" type class_ref 132663 // Object
	  param inout name "propertyName" type class_ref 129591 // String
	  param inout name "path" type class_ref 272823 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates the target using a multi-int setter
along the given <code>Path</code>. A <code>Path</code></> animation moves in two dimensions,
animating coordinates <code>(x, y)</code> together to follow the line. In this variation, the
coordinates are integer x and y coordinates used in the first and second parameter of the
setter, respectively.

@param target The object whose property is to be animated. This object may
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter. <code>propertyName</code> may also
be the case-sensitive complete name of the public setter method.
@param propertyName The name of the property being animated or the name of the setter method.
@param path The <code>Path</code> to animate values along.
@return An ObjectAnimator object that is set up to animate along <code>path</code>."
      end

      operation 1537847 "ofMultiInt"
	class_operation public return_type class_ref 314551 // ObjectAnimator
	nparams 5
	  param inout name "target" type class_ref 132663 // Object
	  param inout name "propertyName" type class_ref 129591 // String
	  param inout name "converter" type class_ref 317495 // TypeConverter
	  param inout name "evaluator" type class_ref 316087 // TypeEvaluator
	  param inout name "" explicit_type "T...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<T, int[]> ${p2}, ${t3}<T> ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SafeVarargs
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates over values for a multiple int
parameters setter. Only public methods that take only int parameters are supported.
<p>At least two values must be provided, a start and end. More than two
values imply a starting value, values to animate through along the way, and an ending
value (these values will be distributed evenly across the duration of the animation).</p>

@param target The object whose property is to be animated. This object may
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter. <code>propertyName</code> may also
be the case-sensitive complete name of the public setter method.
@param propertyName The name of the property being animated or the name of the setter method.
@param converter Converts T objects into int parameters for the multi-value setter.
@param evaluator A TypeEvaluator that will be called on each animation frame to
provide the necessary interpolation between the Object values to derive the animated
value.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values."
      end

      operation 1537975 "ofArgb"
	class_operation public return_type class_ref 314551 // ObjectAnimator
	nparams 3
	  param inout name "target" type class_ref 132663 // Object
	  param inout name "propertyName" type class_ref 129591 // String
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates between color values. A single
value implies that that value is the one being animated to, in which case the start value
will be derived from the property being animated and the target object when {@link #start()}
is called for the first time. Two values imply starting and ending values. More than two
values imply a starting value, values to animate through along the way, and an ending value
(these values will be distributed evenly across the duration of the animation).

@param target The object whose property is to be animated. This object should
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter.
@param propertyName The name of the property being animated.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values."
      end

      operation 1538103 "ofArgb"
	class_operation public return_type class_ref 314551 // ObjectAnimator
	nparams 3
	  param inout name "target" explicit_type "T"
	  param inout name "property" type class_ref 149559 // Property
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T, Integer> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates between color values. A single
value implies that that value is the one being animated to, in which case the start value
will be derived from the property being animated and the target object when {@link #start()}
is called for the first time. Two values imply starting and ending values. More than two
values imply a starting value, values to animate through along the way, and an ending value
(these values will be distributed evenly across the duration of the animation).

@param target The object whose property is to be animated.
@param property The property being animated.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values."
      end

      operation 1538231 "ofFloat"
	class_operation public return_type class_ref 314551 // ObjectAnimator
	nparams 3
	  param inout name "target" type class_ref 132663 // Object
	  param inout name "propertyName" type class_ref 129591 // String
	  param inout name "" explicit_type "float...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates between float values. A single
value implies that that value is the one being animated to, in which case the start value
will be derived from the property being animated and the target object when {@link #start()}
is called for the first time. Two values imply starting and ending values. More than two
values imply a starting value, values to animate through along the way, and an ending value
(these values will be distributed evenly across the duration of the animation).

@param target The object whose property is to be animated. This object should
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter.
@param propertyName The name of the property being animated.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values."
      end

      operation 1538359 "ofFloat"
	class_operation public return_type class_ref 314551 // ObjectAnimator
	nparams 4
	  param inout name "target" type class_ref 132663 // Object
	  param inout name "xPropertyName" type class_ref 129591 // String
	  param inout name "yPropertyName" type class_ref 129591 // String
	  param inout name "path" type class_ref 272823 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates coordinates along a <code>Path</code>
using two properties. A <code>Path</code></> animation moves in two dimensions, animating
coordinates <code>(x, y)</code> together to follow the line. In this variation, the
coordinates are floats that are set to separate properties designated by
<code>xPropertyName</code> and <code>yPropertyName</code>.

@param target The object whose properties are to be animated. This object should
              have public methods on it called <code>setNameX()</code> and
              <code>setNameY</code>, where <code>nameX</code> and <code>nameY</code>
              are the value of the <code>xPropertyName</code> and <code>yPropertyName</code>
              parameters, respectively.
@param xPropertyName The name of the property for the x coordinate being animated.
@param yPropertyName The name of the property for the y coordinate being animated.
@param path The <code>Path</code> to animate values along.
@return An ObjectAnimator object that is set up to animate along <code>path</code>."
      end

      operation 1538487 "ofFloat"
	class_operation public return_type class_ref 314551 // ObjectAnimator
	nparams 3
	  param inout name "target" explicit_type "T"
	  param inout name "property" type class_ref 149559 // Property
	  param inout name "" explicit_type "float...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T, Float> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates between float values. A single
value implies that that value is the one being animated to, in which case the start value
will be derived from the property being animated and the target object when {@link #start()}
is called for the first time. Two values imply starting and ending values. More than two
values imply a starting value, values to animate through along the way, and an ending value
(these values will be distributed evenly across the duration of the animation).

@param target The object whose property is to be animated.
@param property The property being animated.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values."
      end

      operation 1538615 "ofFloat"
	class_operation public return_type class_ref 314551 // ObjectAnimator
	nparams 4
	  param inout name "target" explicit_type "T"
	  param inout name "xProperty" type class_ref 149559 // Property
	  param inout name "yProperty" type class_ref 149559 // Property
	  param inout name "path" type class_ref 272823 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T, Float> ${p1}, ${t2}<T, Float> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates coordinates along a <code>Path</code>
using two properties. A <code>Path</code></> animation moves in two dimensions, animating
coordinates <code>(x, y)</code> together to follow the line. In this variation, the
coordinates are floats that are set to separate properties, <code>xProperty</code> and
<code>yProperty</code>.

@param target The object whose properties are to be animated.
@param xProperty The property for the x coordinate being animated.
@param yProperty The property for the y coordinate being animated.
@param path The <code>Path</code> to animate values along.
@return An ObjectAnimator object that is set up to animate along <code>path</code>."
      end

      operation 1538743 "ofMultiFloat"
	class_operation public return_type class_ref 314551 // ObjectAnimator
	nparams 3
	  param inout name "target" type class_ref 132663 // Object
	  param inout name "propertyName" type class_ref 129591 // String
	  param inout name "values" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates over float values for a multiple
parameters setter. Only public methods that take only float parameters are supported.
Each <code>float[]</code> contains a complete set of parameters to the setter method.
At least two <code>float[]</code> values must be provided, a start and end. More than two
values imply a starting value, values to animate through along the way, and an ending
value (these values will be distributed evenly across the duration of the animation).

@param target The object whose property is to be animated. This object may
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter. <code>propertyName</code> may also
be the case-sensitive complete name of the public setter method.
@param propertyName The name of the property being animated or the name of the setter method.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values."
      end

      operation 1538871 "ofMultiFloat"
	class_operation public return_type class_ref 314551 // ObjectAnimator
	nparams 3
	  param inout name "target" type class_ref 132663 // Object
	  param inout name "propertyName" type class_ref 129591 // String
	  param inout name "path" type class_ref 272823 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates the target using a multi-float setter
along the given <code>Path</code>. A <code>Path</code></> animation moves in two dimensions,
animating coordinates <code>(x, y)</code> together to follow the line. In this variation, the
coordinates are float x and y coordinates used in the first and second parameter of the
setter, respectively.

@param target The object whose property is to be animated. This object may
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter. <code>propertyName</code> may also
be the case-sensitive complete name of the public setter method.
@param propertyName The name of the property being animated or the name of the setter method.
@param path The <code>Path</code> to animate values along.
@return An ObjectAnimator object that is set up to animate along <code>path</code>."
      end

      operation 1538999 "ofMultiFloat"
	class_operation public return_type class_ref 314551 // ObjectAnimator
	nparams 5
	  param inout name "target" type class_ref 132663 // Object
	  param inout name "propertyName" type class_ref 129591 // String
	  param inout name "converter" type class_ref 317495 // TypeConverter
	  param inout name "evaluator" type class_ref 316087 // TypeEvaluator
	  param inout name "" explicit_type "T...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<T, float[]> ${p2}, ${t3}<T> ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SafeVarargs
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates over values for a multiple float
parameters setter. Only public methods that take only float parameters are supported.
<p>At least two values must be provided, a start and end. More than two
values imply a starting value, values to animate through along the way, and an ending
value (these values will be distributed evenly across the duration of the animation).</p>

@param target The object whose property is to be animated. This object may
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter. <code>propertyName</code> may also
be the case-sensitive complete name of the public setter method.
@param propertyName The name of the property being animated or the name of the setter method.
@param converter Converts T objects into float parameters for the multi-value setter.
@param evaluator A TypeEvaluator that will be called on each animation frame to
provide the necessary interpolation between the Object values to derive the animated
value.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values."
      end

      operation 1539127 "ofObject"
	class_operation public return_type class_ref 314551 // ObjectAnimator
	nparams 4
	  param inout name "target" type class_ref 132663 // Object
	  param inout name "propertyName" type class_ref 129591 // String
	  param inout name "evaluator" type class_ref 316087 // TypeEvaluator
	  param inout name "" explicit_type "Object...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates between Object values. A single
value implies that that value is the one being animated to, in which case the start value
will be derived from the property being animated and the target object when {@link #start()}
is called for the first time. Two values imply starting and ending values. More than two
values imply a starting value, values to animate through along the way, and an ending value
(these values will be distributed evenly across the duration of the animation).

<p><strong>Note:</strong> The values are stored as references to the original
objects, which means that changes to those objects after this method is called will
affect the values on the animator. If the objects will be mutated externally after
this method is called, callers should pass a copy of those objects instead.

@param target The object whose property is to be animated. This object should
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter.
@param propertyName The name of the property being animated.
@param evaluator A TypeEvaluator that will be called on each animation frame to
provide the necessary interpolation between the Object values to derive the animated
value.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values."
      end

      operation 1539255 "ofObject"
	class_operation public return_type class_ref 314551 // ObjectAnimator
	nparams 4
	  param inout name "target" type class_ref 132663 // Object
	  param inout name "propertyName" type class_ref 129591 // String
	  param inout name "converter" type class_ref 317495 // TypeConverter
	  param inout name "path" type class_ref 272823 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, @Nullable ${t2}<PointF, ?> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@NonNull
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates a property along a <code>Path</code>.
A <code>Path</code></> animation moves in two dimensions, animating coordinates
<code>(x, y)</code> together to follow the line. This variant animates the coordinates
in a <code>PointF</code> to follow the <code>Path</code>. If the <code>Property</code>
associated with <code>propertyName</code> uses a type other than <code>PointF</code>,
<code>converter</code> can be used to change from <code>PointF</code> to the type
associated with the <code>Property</code>.

@param target The object whose property is to be animated. This object should
have a public method on it called <code>setName()</code>, where <code>name</code> is
the value of the <code>propertyName</code> parameter.
@param propertyName The name of the property being animated.
@param converter Converts a PointF to the type associated with the setter. May be
                 null if conversion is unnecessary.
@param path The <code>Path</code> to animate values along.
@return An ObjectAnimator object that is set up to animate along <code>path</code>."
      end

      operation 1539383 "ofObject"
	class_operation public return_type class_ref 314551 // ObjectAnimator
	nparams 4
	  param inout name "target" explicit_type "T"
	  param inout name "property" type class_ref 149559 // Property
	  param inout name "evaluator" type class_ref 316087 // TypeEvaluator
	  param inout name "" explicit_type "V...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T, V> ${type} ${name}${(}${t0} ${p0}, ${t1}<T, V> ${p1}, ${t2}<V> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@NonNull
@SafeVarargs
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates between Object values. A single
value implies that that value is the one being animated to, in which case the start value
will be derived from the property being animated and the target object when {@link #start()}
is called for the first time. Two values imply starting and ending values. More than two
values imply a starting value, values to animate through along the way, and an ending value
(these values will be distributed evenly across the duration of the animation).

<p><strong>Note:</strong> The values are stored as references to the original
objects, which means that changes to those objects after this method is called will
affect the values on the animator. If the objects will be mutated externally after
this method is called, callers should pass a copy of those objects instead.

@param target The object whose property is to be animated.
@param property The property being animated.
@param evaluator A TypeEvaluator that will be called on each animation frame to
provide the necessary interpolation between the Object values to derive the animated
value.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values."
      end

      operation 1539511 "ofObject"
	class_operation public return_type class_ref 314551 // ObjectAnimator
	nparams 5
	  param inout name "target" explicit_type "T"
	  param inout name "property" type class_ref 149559 // Property
	  param inout name "converter" type class_ref 317495 // TypeConverter
	  param inout name "evaluator" type class_ref 316087 // TypeEvaluator
	  param inout name "" explicit_type "V...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T, V, P> ${type} ${name}${(}${t0} ${p0}, ${t1}<T, P> ${p1}, ${t2}<V, P> ${p2}, ${t3}<V> ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@NonNull
@SafeVarargs
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates between Object values. A single
value implies that that value is the one being animated to, in which case the start value
will be derived from the property being animated and the target object when {@link #start()}
is called for the first time. Two values imply starting and ending values. More than two
values imply a starting value, values to animate through along the way, and an ending value
(these values will be distributed evenly across the duration of the animation).
This variant supplies a <code>TypeConverter</code> to convert from the animated values to the
type of the property. If only one value is supplied, the <code>TypeConverter</code> must be a
{@link android.animation.BidirectionalTypeConverter} to retrieve the current value.

<p><strong>Note:</strong> The values are stored as references to the original
objects, which means that changes to those objects after this method is called will
affect the values on the animator. If the objects will be mutated externally after
this method is called, callers should pass a copy of those objects instead.

@param target The object whose property is to be animated.
@param property The property being animated.
@param converter Converts the animated object to the Property type.
@param evaluator A TypeEvaluator that will be called on each animation frame to
provide the necessary interpolation between the Object values to derive the animated
value.
@param values A set of values that the animation will animate between over time.
@return An ObjectAnimator object that is set up to animate between the given values."
      end

      operation 1539639 "ofObject"
	class_operation public return_type class_ref 314551 // ObjectAnimator
	nparams 4
	  param inout name "target" explicit_type "T"
	  param inout name "property" type class_ref 149559 // Property
	  param inout name "converter" type class_ref 317495 // TypeConverter
	  param inout name "path" type class_ref 272823 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T, V> ${type} ${name}${(}${t0} ${p0}, @NonNull ${t1}<T, V> ${p1}, @Nullable ${t2}<PointF, V> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@NonNull
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates a property along a <code>Path</code>.
A <code>Path</code></> animation moves in two dimensions, animating coordinates
<code>(x, y)</code> together to follow the line. This variant animates the coordinates
in a <code>PointF</code> to follow the <code>Path</code>. If <code>property</code>
uses a type other than <code>PointF</code>, <code>converter</code> can be used to change
from <code>PointF</code> to the type associated with the <code>Property</code>.

<p>The PointF passed to <code>converter</code> or <code>property</code>, if
<code>converter</code> is <code>null</code>, is reused on each animation frame and should
not be stored by the setter or TypeConverter.</p>

@param target The object whose property is to be animated.
@param property The property being animated. Should not be null.
@param converter Converts a PointF to the type associated with the setter. May be
                 null if conversion is unnecessary.
@param path The <code>Path</code> to animate values along.
@return An ObjectAnimator object that is set up to animate along <code>path</code>."
      end

      operation 1539767 "ofPropertyValuesHolder"
	class_operation public return_type class_ref 314551 // ObjectAnimator
	nparams 2
	  param inout name "target" type class_ref 132663 // Object
	  param inout name "" explicit_type "PropertyValuesHolder...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@NonNull
"
	
	
	
	comment "Constructs and returns an ObjectAnimator that animates between the sets of values specified
in <code>PropertyValueHolder</code> objects. This variant should be used when animating
several properties at once with the same ObjectAnimator, since PropertyValuesHolder allows
you to associate a set of animation values with a property name.

@param target The object whose property is to be animated. Depending on how the
PropertyValuesObjects were constructed, the target object should either have the {@link
android.util.Property} objects used to construct the PropertyValuesHolder objects or (if the
PropertyValuesHOlder objects were created with property names) the target object should have
public methods on it called <code>setName()</code>, where <code>name</code> is the name of
the property passed in as the <code>propertyName</code> parameter for each of the
PropertyValuesHolder objects.
@param values A set of PropertyValuesHolder objects whose values will be animated between
over time.
@return An ObjectAnimator object that is set up to animate between the given values."
      end

      operation 1539895 "setIntValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1540023 "setFloatValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "float...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1540151 "setObjectValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "Object...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1540279 "setAutoCancel"
	public explicit_return_type "void"
	nparams 1
	  param inout name "cancel" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "autoCancel controls whether an ObjectAnimator will be canceled automatically
when any other ObjectAnimator with the same target and properties is started.
Setting this flag may make it easier to run different animators on the same target
object without having to keep track of whether there are conflicting animators that
need to be manually canceled. Canceling animators must have the same exact set of
target properties, in the same order.

@param cancel Whether future ObjectAnimators with the same target and properties
as this ObjectAnimator will cause this ObjectAnimator to be canceled."
      end

      operation 1540407 "hasSameTargetAndProperties"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "anim" type class_ref 314807 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1540535 "start"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1540663 "shouldAutoCancel"
	package explicit_return_type "boolean"
	nparams 1
	  param inout name "anim" type class_ref 314295 // AnimationFrameCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1540791 "initAnimation"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallSuper
@Override
"
	
	
	
	comment "This function is called immediately before processing the first animation
frame of an animation. If there is a nonzero <code>startDelay</code>, the
function is called after that delay ends.
It takes care of the final initialization steps for the
animation. This includes setting mEvaluator, if the user has not yet
set it up, and the setter/getter methods, if the user did not supply
them.

 <p>Overriders of this method should call the superclass method to cause
 internal mechanisms to be set up correctly.</p>"
      end

      operation 1540919 "setDuration"
	public return_type class_ref 314551 // ObjectAnimator
	nparams 1
	  param in name "duration" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@NonNull
"
	
	
	
	comment "Sets the length of the animation. The default duration is 300 milliseconds.

@param duration The length of the animation, in milliseconds.
@return ObjectAnimator The object called with setDuration(). This return
value makes it easier to compose statements together that construct and then set the
duration, as in
<code>ObjectAnimator.ofInt(target, propertyName, 0, 10).setDuration(500).start()</code>."
      end

      operation 1541047 "getTarget"
	public return_type class_ref 132663 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Nullable
"
	
	
	
	comment "The target object whose property will be animated by this animation

@return The object being animated"
      end

      operation 1541175 "setTarget"
	public explicit_return_type "void"
	nparams 1
	  param inout name "target" type class_ref 132663 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1541303 "setupStartValues"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1541431 "setupEndValues"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1541559 "animateValue"
	package explicit_return_type "void"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallSuper
@Override
"
	
	
	
	comment "This method is called with the elapsed fraction of the animation during every
animation frame. This function turns the elapsed fraction into an interpolated fraction
and then into an animated value (from the evaluator. The function is called mostly during
animation updates, but it is also called when the <code>end()</code>
function is called, to set the final value on the property.

<p>Overrides of this method must call the superclass to perform the calculation
of the animated value.</p>

@param fraction The elapsed fraction of the animation."
      end

      operation 1541687 "clone"
	public return_type class_ref 314551 // ObjectAnimator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1541815 "toString"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@NonNull
"
	
	
	
      end
    end

    class 314807 "Animator"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This is the superclass for classes which provide basic support for animations which can be
started, ended, and have <code>AnimatorListeners</code> added to them."
      classrelation 649271 // <realization>
	relation 649271 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 649271 // <realization>
	  b parent class_ref 242231 // Cloneable
      end

      attribute 595127 "DURATION_INFINITE"
	class_attribute const_attribute public explicit_type "long"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The value used to indicate infinite duration (e.g. when Animators repeat infinitely).
"
      end

      class 314935 "AnimatorListener"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 1497783 "onAnimationStart"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "<p>Notifies the start of the animation.</p>

@param animation The started animation."
	end

	operation 1497911 "onAnimationEnd"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "<p>Notifies the end of the animation. This callback is not invoked
for animations with repeat count set to INFINITE.</p>

@param animation The animation which reached its end."
	end

	operation 1498039 "onAnimationCancel"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "<p>Notifies the cancellation of the animation. This callback is not invoked
for animations with repeat count set to INFINITE.</p>

@param animation The animation which was canceled."
	end

	operation 1498167 "onAnimationRepeat"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "<p>Notifies the repetition of the animation.</p>

@param animation The animation which was repeated."
	end
      end

      classrelation 649399 // mListeners (<unidirectional association>)
	relation 649399 --->
	  stereotype "ArrayList"
	  a role_name "mListeners" init_value " null" package
	    comment "The set of listeners to be sent events through the life of an animation.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 649399 // mListeners (<unidirectional association>)
	  b parent class_ref 314935 // AnimatorListener
      end

      class 315063 "AnimatorPauseListener"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 1498295 "onAnimationPause"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "<p>Notifies that the animation was paused.</p>

@param animation The animaton being paused.
@see #pause()"
	end

	operation 1498423 "onAnimationResume"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "<p>Notifies that the animation was resumed, after being
previously paused.</p>

@param animation The animation being resumed.
@see #resume()"
	end
      end

      classrelation 649527 // mPauseListeners (<unidirectional association>)
	relation 649527 --->
	  stereotype "ArrayList"
	  a role_name "mPauseListeners" init_value " null" package
	    comment "The set of listeners to be sent pause/resume events through the life
of an animation.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 649527 // mPauseListeners (<unidirectional association>)
	  b parent class_ref 315063 // AnimatorPauseListener
      end

      attribute 595255 "mPaused"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Whether this animator is currently in a paused state.
"
      end

      attribute 595383 "mChangingConfigurations"
	package explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Config
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A set of flags which identify the type of configuration changes that can affect this
Animator. Used by the Animator cache.
"
      end

      class 315191 "AnimatorConstantState"
	visibility private 
	nactuals 1
	actual class class_ref 315447 // ConstantState
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 649783 // <realization>
	  relation 649783 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 649783 // <realization>
	    b parent class_ref 315447 // ConstantState
	end

	classrelation 649911 // mAnimator (<unidirectional association>)
	  relation 649911 --->
	    a role_name "mAnimator" const_relation package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 649911 // mAnimator (<unidirectional association>)
	    b parent class_ref 314807 // Animator
	end

	attribute 595511 "mChangingConf"
	  package explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  java_annotation "@Config
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1499191 "AnimatorConstantState"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "animator" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1499319 "getChangingConfigurations"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
@Config
"
	  
	  
	  
	end

	operation 1499447 "newInstance"
	  public return_type class_ref 314807 // Animator
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      classrelation 649655 // mConstantState (<unidirectional association>)
	relation 649655 --->
	  a role_name "mConstantState" private
	    comment "
If this animator is inflated from a constant state, keep a reference to it so that
ConstantState will not be garbage collected until this animator is collected

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 649655 // mConstantState (<unidirectional association>)
	  b parent class_ref 315191 // AnimatorConstantState
      end

      operation 1493815 "start"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Starts this animation. If the animation has a nonzero startDelay, the animation will start
running after that delay elapses. A non-delayed animation will have its initial
value(s) set immediately, followed by calls to
{@link AnimatorListener#onAnimationStart(Animator)} for any listeners of this animator.

<p>The animation started by calling this method will be run on the thread that called
this method. This thread should have a Looper on it (a runtime exception will be thrown if
this is not the case). Also, if the animation will animate
properties of objects in the view hierarchy, then the calling thread should be the UI
thread for that view hierarchy.</p>
"
      end

      operation 1493943 "cancel"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Cancels the animation. Unlike {@link #end()}, <code>cancel()</code> causes the animation to
stop in its tracks, sending an
{@link android.animation.Animator.AnimatorListener#onAnimationCancel(Animator)} to
its listeners, followed by an
{@link android.animation.Animator.AnimatorListener#onAnimationEnd(Animator)} message.

<p>This method must be called on the thread that is running the animation.</p>"
      end

      operation 1494071 "end"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ends the animation. This causes the animation to assign the end value of the property being
animated, then calling the
{@link android.animation.Animator.AnimatorListener#onAnimationEnd(Animator)} method on
its listeners.

<p>This method must be called on the thread that is running the animation.</p>"
      end

      operation 1494199 "pause"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Pauses a running animation. This method should only be called on the same thread on
which the animation was started. If the animation has not yet been {@link
#isStarted() started} or has since ended, then the call is ignored. Paused
animations can be resumed by calling {@link #resume()}.

@see #resume()
@see #isPaused()
@see AnimatorPauseListener"
      end

      operation 1494327 "resume"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resumes a paused animation, causing the animator to pick up where it left off
when it was paused. This method should only be called on the same thread on
which the animation was started. Calls to resume() on an animator that is
not currently paused will be ignored.

@see #pause()
@see #isPaused()
@see AnimatorPauseListener"
      end

      operation 1494455 "isPaused"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether this animator is currently in a paused state.

@return True if the animator is currently paused, false otherwise.

@see #pause()
@see #resume()"
      end

      operation 1494583 "getStartDelay"
	abstract public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The amount of time, in milliseconds, to delay processing the animation
after {@link #start()} is called.

@return the number of milliseconds to delay running the animation"
      end

      operation 1494711 "setStartDelay"
	abstract public explicit_return_type "void"
	nparams 1
	  param in name "startDelay" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The amount of time, in milliseconds, to delay processing the animation
after {@link #start()} is called.

@param startDelay The amount of the delay, in milliseconds"
      end

      operation 1494839 "setDuration"
	abstract public return_type class_ref 314807 // Animator
	nparams 1
	  param in name "duration" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the duration of the animation.

@param duration The length of the animation, in milliseconds."
      end

      operation 1494967 "getDuration"
	abstract public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the duration of the animation.

@return The length of the animation, in milliseconds."
      end

      operation 1495095 "getTotalDuration"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the total duration of the animation, accounting for animation sequences, start delay,
and repeating. Return {@link #DURATION_INFINITE} if the duration is infinite.

@return  Total time an animation takes to finish, starting from the time {@link #start()}
         is called. {@link #DURATION_INFINITE} will be returned if the animation or any
         child animation repeats infinite times."
      end

      operation 1495223 "setInterpolator"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 315319 // TimeInterpolator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The time interpolator used in calculating the elapsed fraction of the
animation. The interpolator determines whether the animation runs with
linear or non-linear motion, such as acceleration and deceleration. The
default value is {@link android.view.animation.AccelerateDecelerateInterpolator}.

@param value the interpolator to be used by this animation"
      end

      operation 1495351 "getInterpolator"
	public return_type class_ref 315319 // TimeInterpolator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the timing interpolator that this animation uses.

@return The timing interpolator for this animation."
      end

      operation 1495479 "isRunning"
	abstract public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether this Animator is currently running (having been started and gone past any
initial startDelay period and not yet ended).

@return Whether the Animator is running."
      end

      operation 1495607 "isStarted"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether this Animator has been started and not yet ended. For reusable
Animators (which most Animators are, apart from the one-shot animator produced by
{@link android.view.ViewAnimationUtils#createCircularReveal(
android.view.View, int, int, float, float) createCircularReveal()}),
this state is a superset of {@link #isRunning()}, because an Animator with a
nonzero {@link #getStartDelay() startDelay} will return true for {@link #isStarted()} during
the delay phase, whereas {@link #isRunning()} will return true only after the delay phase
is complete. Non-reusable animators will always return true after they have been
started, because they cannot return to a non-started state.

@return Whether the Animator has been started and not yet ended."
      end

      operation 1495735 "addListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 314935 // AnimatorListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a listener to the set of listeners that are sent events through the life of an
animation, such as start, repeat, and end.

@param listener the listener to be added to the current set of listeners for this animation."
      end

      operation 1495863 "removeListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 314935 // AnimatorListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a listener from the set listening to this animation.

@param listener the listener to be removed from the current set of listeners for this
                animation."
      end

      operation 1495991 "getListeners"
	public return_type class_ref 314935 // AnimatorListener
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}ArrayList<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the set of {@link android.animation.Animator.AnimatorListener} objects that are currently
listening for events on this <code>Animator</code> object.

@return ArrayList<AnimatorListener> The set of listeners."
      end

      operation 1496119 "addPauseListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 315063 // AnimatorPauseListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a pause listener to this animator.

@param listener the listener to be added to the current set of pause listeners
for this animation."
      end

      operation 1496247 "removePauseListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 315063 // AnimatorPauseListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a pause listener from the set listening to this animation.

@param listener the listener to be removed from the current set of pause
listeners for this animation."
      end

      operation 1496375 "removeAllListeners"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all {@link #addListener(android.animation.Animator.AnimatorListener) listeners}
and {@link #addPauseListener(android.animation.Animator.AnimatorPauseListener)
pauseListeners} from this object."
      end

      operation 1496503 "getChangingConfigurations"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Config
"
	
	
	
	comment "Return a mask of the configuration parameters for which this animator may change, requiring
that it should be re-created from Resources. The default implementation returns whatever
value was provided through setChangingConfigurations(int) or 0 by default.

@return Returns a mask of the changing configuration parameters, as defined by
{@link android.content.pm.ActivityInfo}.
@see android.content.pm.ActivityInfo
@hide"
      end

      operation 1496631 "setChangingConfigurations"
	public explicit_return_type "void"
	nparams 1
	  param in name "configs" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Config ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a mask of the configuration parameters for which this animator may change, requiring
that it be re-created from resource.

@param configs A mask of the changing configuration parameters, as
defined by {@link android.content.pm.ActivityInfo}.

@see android.content.pm.ActivityInfo
@hide"
      end

      operation 1496759 "appendChangingConfigurations"
	public explicit_return_type "void"
	nparams 1
	  param in name "configs" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Config ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the changing configurations value to the union of the current changing configurations
and the provided configs.
This method is called while loading the animator.
@hide"
      end

      operation 1496887 "createConstantState"
	public return_type class_ref 315447 // ConstantState
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Animator> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a {@link android.content.res.ConstantState} instance that holds the shared state of
this Animator.
<p>
This constant state is used to create new instances of this animator when needed, instead
of re-loading it from resources. Default implementation creates a new
{@link AnimatorConstantState}. You can override this method to provide your custom logic or
return null if you don't want this animator to be cached.

@return The ConfigurationBoundResourceCache.BaseConstantState associated to this Animator.
@see android.content.res.ConstantState
@see #clone()
@hide"
      end

      operation 1497015 "clone"
	public return_type class_ref 314807 // Animator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1497143 "setupStartValues"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method tells the object to use appropriate information to extract
starting values for the animation. For example, a AnimatorSet object will pass
this call to its child objects to tell them to set up the values. A
ObjectAnimator object will use the information it has about its target object
and PropertyValuesHolder objects to get the start values for its properties.
A ValueAnimator object will ignore the request since it does not have enough
information (such as a target object) to gather these values."
      end

      operation 1497271 "setupEndValues"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method tells the object to use appropriate information to extract
ending values for the animation. For example, a AnimatorSet object will pass
this call to its child objects to tell them to set up the values. A
ObjectAnimator object will use the information it has about its target object
and PropertyValuesHolder objects to get the start values for its properties.
A ValueAnimator object will ignore the request since it does not have enough
information (such as a target object) to gather these values."
      end

      operation 1497399 "setTarget"
	public explicit_return_type "void"
	nparams 1
	  param inout name "target" type class_ref 132663 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the target object whose property will be animated by this animation. Not all subclasses
operate on target objects (for example, {@link ValueAnimator}, but this method
is on the superclass for the convenience of dealing generically with those subclasses
that do handle targets.
<p>
<strong>Note:</strong> The target is stored as a weak reference internally to avoid leaking
resources by having animators directly reference old targets. Therefore, you should
ensure that animator targets always have a hard reference elsewhere.

@param target The object being animated"
      end

      operation 1497527 "canReverse"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Hide reverse() and canReverse() for now since reverse() only work for simple
 cases, like we don't support sequential, neither startDelay.
 TODO: make reverse() works for all the Animators.

@hide"
      end

      operation 1497655 "reverse"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 1498551 "setAllowRunningAsynchronously"
	public explicit_return_type "void"
	nparams 1
	  param inout name "mayRunAsync" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Whether or not the Animator is allowed to run asynchronously off of
the UI thread. This is a hint that informs the Animator that it is
OK to run the animation off-thread, however the Animator may decide
that it must run the animation on the UI thread anyway.

<p>Regardless of whether or not the animation runs asynchronously, all
listener callbacks will be called on the UI thread.</p>

<p>To be able to use this hint the following must be true:</p>
<ol>
<li>The animator is immutable while {@link #isStarted()} is true. Requests
   to change duration, delay, etc... may be ignored.</li>
<li>Lifecycle callback events may be asynchronous. Events such as
   {@link Animator.AnimatorListener#onAnimationEnd(Animator)} or
   {@link Animator.AnimatorListener#onAnimationRepeat(Animator)} may end up delayed
   as they must be posted back to the UI thread, and any actions performed
   by those callbacks (such as starting new animations) will not happen
   in the same frame.</li>
<li>State change requests ({@link #cancel()}, {@link #end()}, {@link #reverse()}, etc...)
   may be asynchronous. It is guaranteed that all state changes that are
   performed on the UI thread in the same frame will be applied as a single
   atomic update, however that frame may be the current frame,
   the next frame, or some future frame. This will also impact the observed
   state of the Animator. For example, {@link #isStarted()} may still return true
   after a call to {@link #end()}. Using the lifecycle callbacks is preferred over
   queries to {@link #isStarted()}, {@link #isRunning()}, and {@link #isPaused()}
   for this reason.</li>
</ol>
@hide"
      end
    end

    class 315319 "TimeInterpolator"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A time interpolator defines the rate of change of an animation. This allows animations
to have non-linear motion, such as acceleration and deceleration."
      operation 1569463 "getInterpolation"
	public explicit_return_type "float"
	nparams 1
	  param in name "input" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Maps a value representing the elapsed fraction of an animation to a value that represents
the interpolated fraction. This interpolated value is then multiplied by the change in
value of an animation to derive the animated value at the current elapsed animation time.

@param input A value between 0 and 1.0 indicating our current point
       in the animation where 0 represents the start and 1.0 represents
       the end
@return The interpolation value. This value can be more than 1.0 for
        interpolators which overshoot their targets, or less than 0 for
        interpolators that undershoot their targets."
      end
    end

    class 315575 "AnimatorInflater"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class is used to instantiate animator XML files into Animator objects.
<p>
For performance reasons, inflation relies heavily on pre-processing of
XML files that is done at build time. Therefore, it is not currently possible
to use this inflater with an XmlPullParser over a plain XML file at runtime;
it only works with an XmlPullParser returned from a compiled resource (R.
<em>something</em> file.)"
      classrelation 650039 // TAG (<unidirectional association>)
	relation 650039 --->
	  a role_name "TAG" init_value " \"AnimatorInflater\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 650039 // TAG (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      attribute 595639 "TOGETHER"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "These flags are used when parsing AnimatorSet objects
"
      end

      attribute 595767 "SEQUENTIALLY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 595895 "VALUE_TYPE_FLOAT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Enum values used in XML attributes to indicate the value for mValueType
"
      end

      attribute 596023 "VALUE_TYPE_INT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 596151 "VALUE_TYPE_PATH"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 596279 "VALUE_TYPE_COLOR"
	class_attribute const_attribute private explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 596407 "VALUE_TYPE_UNDEFINED"
	class_attribute const_attribute private explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 596535 "DBG_ANIMATOR_INFLATER"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 650167 // sTmpTypedValue (<unidirectional association>)
	relation 650167 --->
	  a role_name "sTmpTypedValue" init_value " new TypedValue()" class_relation const_relation private
	    comment " used to calculate changing configs for resource references
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 650167 // sTmpTypedValue (<unidirectional association>)
	  b parent class_ref 134327 // TypedValue
      end

      operation 1499575 "loadAnimator"
	class_operation public return_type class_ref 314807 // Animator
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param in name "id" explicit_type "int"
	nexceptions 1
	  exception class_ref 130231 // NotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, @AnimatorRes ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Loads an {@link Animator} object from a resource

@param context Application context used to access resources
@param id The resource id of the animation to load
@return The animator object reference by the specified id
@throws android.content.res.Resources.NotFoundException when the animation cannot be loaded"
      end

      operation 1499703 "loadAnimator"
	class_operation public return_type class_ref 314807 // Animator
	nparams 3
	  param inout name "resources" type class_ref 128951 // Resources
	  param inout name "theme" type class_ref 129975 // Theme
	  param in name "id" explicit_type "int"
	nexceptions 1
	  exception class_ref 130231 // NotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Loads an {@link Animator} object from a resource

@param resources The resources
@param theme The theme
@param id The resource id of the animation to load
@return The animator object reference by the specified id
@throws android.content.res.Resources.NotFoundException when the animation cannot be loaded
@hide"
      end

      operation 1499831 "loadAnimator"
	class_operation public return_type class_ref 314807 // Animator
	nparams 4
	  param inout name "resources" type class_ref 128951 // Resources
	  param inout name "theme" type class_ref 129975 // Theme
	  param in name "id" explicit_type "int"
	  param in name "pathErrorScale" explicit_type "float"
	nexceptions 1
	  exception class_ref 130231 // NotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      operation 1499959 "loadStateListAnimator"
	class_operation public return_type class_ref 144311 // StateListAnimator
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param in name "id" explicit_type "int"
	nexceptions 1
	  exception class_ref 130231 // NotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1500087 "createStateListAnimatorFromXml"
	class_operation private return_type class_ref 144311 // StateListAnimator
	nparams 3
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "parser" explicit_type "XmlPullParser"
	  param inout name "attributeSet" type class_ref 130359 // AttributeSet
	nexceptions 2
	  explicit_exception "IOException"
	  explicit_exception "XmlPullParserException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 315703 "PathDataEvaluator"
	visibility private 
	nactuals 1
	actual class class_ref 316087 // TypeEvaluator
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 650295 // <realization>
	  relation 650295 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 650295 // <realization>
	    b parent class_ref 316087 // TypeEvaluator
	end

	classrelation 650423 // mPathData (<unidirectional association>)
	  relation 650423 --->
	    a role_name "mPathData" init_value " new PathParser.PathData()" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 650423 // mPathData (<unidirectional association>)
	    b parent class_ref 315959 // PathData
	end

	operation 1500343 "evaluate"
	  public return_type class_ref 315959 // PathData
	  nparams 3
	    param in name "fraction" explicit_type "float"
	    param inout name "startPathData" type class_ref 315959 // PathData
	    param inout name "endPathData" type class_ref 315959 // PathData
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      operation 1500471 "getPVH"
	class_operation private return_type class_ref 316215 // PropertyValuesHolder
	nparams 5
	  param inout name "styledAttributes" type class_ref 130103 // TypedArray
	  param in name "valueType" explicit_type "int"
	  param in name "valueFromId" explicit_type "int"
	  param in name "valueToId" explicit_type "int"
	  param inout name "propertyName" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1500599 "parseAnimatorFromTypeArray"
	class_operation private explicit_return_type "void"
	nparams 4
	  param inout name "anim" type class_ref 316343 // ValueAnimator
	  param inout name "arrayAnimator" type class_ref 130103 // TypedArray
	  param inout name "arrayObjectAnimator" type class_ref 130103 // TypedArray
	  param in name "pixelSize" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param anim The animator, must not be null
@param arrayAnimator Incoming typed array for Animator's attributes.
@param arrayObjectAnimator Incoming typed array for Object Animator's
           attributes.
@param pixelSize The relative pixel size, used to calculate the
                 maximum error for path animations."
      end

      operation 1500727 "setupAnimatorForPath"
	class_operation private return_type class_ref 316087 // TypeEvaluator
	nparams 2
	  param inout name "anim" type class_ref 316343 // ValueAnimator
	  param inout name "arrayAnimator" type class_ref 130103 // TypedArray
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Setup the Animator to achieve path morphing.

@param anim The target Animator which will be updated.
@param arrayAnimator TypedArray for the ValueAnimator.
@return the PathDataEvaluator."
      end

      operation 1500855 "setupObjectAnimator"
	class_operation private explicit_return_type "void"
	nparams 4
	  param inout name "anim" type class_ref 316343 // ValueAnimator
	  param inout name "arrayObjectAnimator" type class_ref 130103 // TypedArray
	  param inout name "getFloats" explicit_type "boolean"
	  param in name "pixelSize" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Setup ObjectAnimator's property or values from pathData.

@param anim The target Animator which will be updated.
@param arrayObjectAnimator TypedArray for the ObjectAnimator.
@param getFloats True if the value type is float.
@param pixelSize The relative pixel size, used to calculate the
                 maximum error for path animations."
      end

      operation 1500983 "setupValues"
	class_operation private explicit_return_type "void"
	nparams 7
	  param inout name "anim" type class_ref 316343 // ValueAnimator
	  param inout name "arrayAnimator" type class_ref 130103 // TypedArray
	  param inout name "getFloats" explicit_type "boolean"
	  param inout name "hasFrom" explicit_type "boolean"
	  param in name "fromType" explicit_type "int"
	  param inout name "hasTo" explicit_type "boolean"
	  param in name "toType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Setup ValueAnimator's values.
This will handle all of the integer, float and color types.

@param anim The target Animator which will be updated.
@param arrayAnimator TypedArray for the ValueAnimator.
@param getFloats True if the value type is float.
@param hasFrom True if \"valueFrom\" exists.
@param fromType The type of \"valueFrom\".
@param hasTo True if \"valueTo\" exists.
@param toType The type of \"valueTo\"."
      end

      operation 1501111 "createAnimatorFromXml"
	class_operation private return_type class_ref 314807 // Animator
	nparams 4
	  param inout name "res" type class_ref 128951 // Resources
	  param inout name "theme" type class_ref 129975 // Theme
	  param inout name "parser" explicit_type "XmlPullParser"
	  param in name "pixelSize" explicit_type "float"
	nexceptions 2
	  explicit_exception "XmlPullParserException"
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1501239 "createAnimatorFromXml"
	class_operation private return_type class_ref 314807 // Animator
	nparams 7
	  param inout name "res" type class_ref 128951 // Resources
	  param inout name "theme" type class_ref 129975 // Theme
	  param inout name "parser" explicit_type "XmlPullParser"
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	  param inout name "parent" type class_ref 316471 // AnimatorSet
	  param in name "sequenceOrdering" explicit_type "int"
	  param in name "pixelSize" explicit_type "float"
	nexceptions 2
	  explicit_exception "XmlPullParserException"
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1501367 "loadValues"
	class_operation private return_type class_ref 316215 // PropertyValuesHolder
	nparams 4
	  param inout name "res" type class_ref 128951 // Resources
	  param inout name "theme" type class_ref 129975 // Theme
	  param inout name "parser" explicit_type "XmlPullParser"
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	nexceptions 2
	  explicit_exception "XmlPullParserException"
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1501495 "inferValueTypeOfKeyframe"
	class_operation private explicit_return_type "int"
	nparams 3
	  param inout name "res" type class_ref 128951 // Resources
	  param inout name "theme" type class_ref 129975 // Theme
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " When no value type is provided in keyframe, we need to infer the type from the value. i.e.
 if value is defined in the style of a color value, then the color type is returned.
 Otherwise, default float type is returned."
      end

      operation 1501623 "inferValueTypeFromValues"
	class_operation private explicit_return_type "int"
	nparams 3
	  param inout name "styledAttributes" type class_ref 130103 // TypedArray
	  param in name "valueFromId" explicit_type "int"
	  param in name "valueToId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1501751 "dumpKeyframes"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "keyframes" type class_ref 132663 // Object
	  param inout name "header" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1501879 "loadPvh"
	class_operation private return_type class_ref 316215 // PropertyValuesHolder
	nparams 5
	  param inout name "res" type class_ref 128951 // Resources
	  param inout name "theme" type class_ref 129975 // Theme
	  param inout name "parser" explicit_type "XmlPullParser"
	  param inout name "propertyName" type class_ref 129591 // String
	  param in name "valueType" explicit_type "int"
	nexceptions 2
	  explicit_exception "XmlPullParserException"
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Load property values holder if there are keyframes defined in it. Otherwise return null."
      end

      operation 1502007 "createNewKeyframe"
	class_operation private return_type class_ref 316599 // Keyframe
	nparams 2
	  param inout name "sampleKeyframe" type class_ref 316599 // Keyframe
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1502135 "distributeKeyframes"
	class_operation private explicit_return_type "void"
	nparams 4
	  param inout name "keyframes" type class_ref 316599 // Keyframe
	  param in name "gap" explicit_type "float"
	  param in name "startIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function to set fractions on keyframes to cover a gap in which the
fractions are not currently set. Keyframe fractions will be distributed evenly
in this gap. For example, a gap of 1 keyframe in the range 0-1 will be at .5, a gap
of .6 spread between two keyframes will be at .2 and .4 beyond the fraction at the
keyframe before startIndex.
Assumptions:
- First and last keyframe fractions (bounding this spread) are already set. So,
for example, if no fractions are set, we will already set first and last keyframe
fraction values to 0 and 1.
- startIndex must be >0 (which follows from first assumption).
- endIndex must be >= startIndex.

@param keyframes the array of keyframes
@param gap The total gap we need to distribute
@param startIndex The index of the first keyframe whose fraction must be set
@param endIndex The index of the last keyframe whose fraction must be set"
      end

      operation 1502263 "loadKeyframe"
	class_operation private return_type class_ref 316599 // Keyframe
	nparams 4
	  param inout name "res" type class_ref 128951 // Resources
	  param inout name "theme" type class_ref 129975 // Theme
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	  param in name "valueType" explicit_type "int"
	nexceptions 2
	  explicit_exception "XmlPullParserException"
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1502391 "loadObjectAnimator"
	class_operation private return_type class_ref 314551 // ObjectAnimator
	nparams 4
	  param inout name "res" type class_ref 128951 // Resources
	  param inout name "theme" type class_ref 129975 // Theme
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	  param in name "pathErrorScale" explicit_type "float"
	nexceptions 1
	  exception class_ref 130231 // NotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1502519 "loadAnimator"
	class_operation private return_type class_ref 316343 // ValueAnimator
	nparams 5
	  param inout name "res" type class_ref 128951 // Resources
	  param inout name "theme" type class_ref 129975 // Theme
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	  param inout name "anim" type class_ref 316343 // ValueAnimator
	  param in name "pathErrorScale" explicit_type "float"
	nexceptions 1
	  exception class_ref 130231 // NotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new animation whose parameters come from the specified context
and attributes set.

@param res The resources
@param attrs The set of attributes holding the animation parameters
@param anim Null if this is a ValueAnimator, otherwise this is an
           ObjectAnimator"
      end

      operation 1502647 "getChangingConfigs"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "resources" type class_ref 128951 // Resources
	  param in name "id" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @AnyRes ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Config
"
	
	
	
      end

      operation 1502775 "isColorType"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "type" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 316087 "TypeEvaluator"
      visibility public stereotype "interface"
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Interface for use with the {@link ValueAnimator#setEvaluator(TypeEvaluator)} function. Evaluators
allow developers to create animations on arbitrary property types, by allowing them to supply
custom evaluators for types that are not automatically understood and used by the animation
system.

@see ValueAnimator#setEvaluator(TypeEvaluator)"
      operation 1500215 "evaluate"
	public explicit_return_type "T"
	nparams 3
	  param in name "fraction" explicit_type "float"
	  param inout name "startValue" explicit_type "T"
	  param inout name "endValue" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This function returns the result of linearly interpolating the start and end values, with
<code>fraction</code> representing the proportion between the start and end values. The
calculation is a simple parametric calculation: <code>result = x0 + t * (x1 - x0)</code>,
where <code>x0</code> is <code>startValue</code>, <code>x1</code> is <code>endValue</code>,
and <code>t</code> is <code>fraction</code>.

@param fraction   The fraction from the starting to the ending values
@param startValue The start value.
@param endValue   The end value.
@return A linear interpolation between the start and end values, given the
        <code>fraction</code> parameter."
      end
    end

    class 316215 "PropertyValuesHolder"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class holds information about a property and the values that that property
should take on during an animation. PropertyValuesHolder objects can be used to create
animations with ValueAnimator or ObjectAnimator that operate on several different properties
in parallel."
      classrelation 664375 // <realization>
	relation 664375 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 664375 // <realization>
	  b parent class_ref 242231 // Cloneable
      end

      classrelation 664503 // mPropertyName (<unidirectional association>)
	relation 664503 --->
	  a role_name "mPropertyName" package
	    comment "
The name of the property associated with the values. This need not be a real property,
unless this object is being used with ObjectAnimator. But this is the name by which
aniamted values are looked up with getAnimatedValue(String) in ValueAnimator.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 664503 // mPropertyName (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 664631 // mProperty (<unidirectional association>)
	relation 664631 --->
	  a role_name "mProperty" protected
	    comment "
@hide

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 664631 // mProperty (<unidirectional association>)
	  b parent class_ref 149559 // Property
      end

      attribute 607671 "mSetter"
	package explicit_type "Method"
	init_value " null"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The setter function, if needed. ObjectAnimator hands off this functionality to
PropertyValuesHolder, since it holds all of the per-property information. This
property is automatically
derived when the animation starts in setupSetterAndGetter() if using ObjectAnimator.
"
      end

      attribute 607799 "mGetter"
	private explicit_type "Method"
	init_value " null"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The getter function, if needed. ObjectAnimator hands off this functionality to
PropertyValuesHolder, since it holds all of the per-property information. This
property is automatically
derived when the animation starts in setupSetterAndGetter() if using ObjectAnimator.
The getter is only derived and used if one of the values is null.
"
      end

      classrelation 664759 // mValueType (<unidirectional association>)
	relation 664759 --->
	  a role_name "mValueType" package
	    comment "
The type of values supplied. This information is used both in deriving the setter/getter
functions and in deriving the type of TypeEvaluator.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 664759 // mValueType (<unidirectional association>)
	  b parent class_ref 132791 // Class
      end

      classrelation 664887 // mKeyframes (<unidirectional association>)
	relation 664887 --->
	  a role_name "mKeyframes" init_value " null" package
	    comment "
The set of keyframes (time/value pairs) that define this animation.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 664887 // mKeyframes (<unidirectional association>)
	  b parent class_ref 318263 // Keyframes
      end

      classrelation 665015 // sIntEvaluator (<unidirectional association>)
	relation 665015 --->
	  a role_name "sIntEvaluator" init_value " new IntEvaluator()" class_relation const_relation private
	    comment " type evaluators for the primitive types handled by this implementation
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 665015 // sIntEvaluator (<unidirectional association>)
	  b parent class_ref 316087 // TypeEvaluator
      end

      classrelation 665143 // sFloatEvaluator (<unidirectional association>)
	relation 665143 --->
	  a role_name "sFloatEvaluator" init_value " new FloatEvaluator()" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 665143 // sFloatEvaluator (<unidirectional association>)
	  b parent class_ref 316087 // TypeEvaluator
      end

      classrelation 665271 // FLOAT_VARIANTS (<unidirectional association>)
	relation 665271 --->
	  a role_name "FLOAT_VARIANTS" multiplicity "[]" init_value " {float.class, Float.class, double.class, int.class,
            Double.class, Integer.class}" class_relation private
	    comment " We try several different types when searching for appropriate setter/getter functions.
 The caller may have supplied values in a type that does not match the setter/getter
 functions (such as the integers 0 and 1 to represent floating point values for alpha).
 Also, the use of generics in constructors means that we end up with the Object versions
 of primitive types (Float vs. float). But most likely, the setter/getter functions
 will take primitive types instead.
 So we supply an ordered array of other types to try before giving up.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 665271 // FLOAT_VARIANTS (<unidirectional association>)
	  b parent class_ref 132791 // Class
      end

      classrelation 665399 // INTEGER_VARIANTS (<unidirectional association>)
	relation 665399 --->
	  a role_name "INTEGER_VARIANTS" multiplicity "[]" init_value " {int.class, Integer.class, float.class, double.class,
            Float.class, Double.class}" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 665399 // INTEGER_VARIANTS (<unidirectional association>)
	  b parent class_ref 132791 // Class
      end

      classrelation 665527 // DOUBLE_VARIANTS (<unidirectional association>)
	relation 665527 --->
	  a role_name "DOUBLE_VARIANTS" multiplicity "[]" init_value " {double.class, Double.class, float.class, int.class,
            Float.class, Integer.class}" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 665527 // DOUBLE_VARIANTS (<unidirectional association>)
	  b parent class_ref 132791 // Class
      end

      classrelation 665655 // sSetterPropertyMap (<unidirectional association>)
	relation 665655 --->
	  stereotype "HashMap"
	  a role_name "sSetterPropertyMap" init_value "
            new HashMap<Class, HashMap<String, Method>>()" class_relation const_relation private
	    comment " These maps hold all property entries for a particular class. This map
 is used to speed up property/setter/getter lookups for a given class/property
 combination. No need to use reflection on the combination more than once."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}, HashMap<String, Method>> ${name}${value};
"
	    classrelation_ref 665655 // sSetterPropertyMap (<unidirectional association>)
	  b parent class_ref 132791 // Class
      end

      classrelation 665783 // sGetterPropertyMap (<unidirectional association>)
	relation 665783 --->
	  stereotype "HashMap"
	  a role_name "sGetterPropertyMap" init_value "
            new HashMap<Class, HashMap<String, Method>>()" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}, HashMap<String, Method>> ${name}${value};
"
	    classrelation_ref 665783 // sGetterPropertyMap (<unidirectional association>)
	  b parent class_ref 132791 // Class
      end

      classrelation 665911 // mTmpValueArray (<unidirectional association>)
	relation 665911 --->
	  a role_name "mTmpValueArray" multiplicity "[]" init_value " new Object[1]" const_relation package
	    comment " Used to pass single value to varargs parameter in setter invocation
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 665911 // mTmpValueArray (<unidirectional association>)
	  b parent class_ref 132663 // Object
      end

      classrelation 666039 // mEvaluator (<unidirectional association>)
	relation 666039 --->
	  a role_name "mEvaluator" private
	    comment "
The type evaluator used to calculate the animated values. This evaluator is determined
automatically based on the type of the start/end objects passed into the constructor,
but the system only knows about the primitive types int and float. Any other
type will need to set the evaluator to a custom evaluator for that type.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 666039 // mEvaluator (<unidirectional association>)
	  b parent class_ref 316087 // TypeEvaluator
      end

      classrelation 666167 // mAnimatedValue (<unidirectional association>)
	relation 666167 --->
	  a role_name "mAnimatedValue" private
	    comment "
The value most recently calculated by calculateValue(). This is set during
that function and might be retrieved later either by ValueAnimator.animatedValue() or
by the property-setting logic in ObjectAnimator.animatedValue().

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 666167 // mAnimatedValue (<unidirectional association>)
	  b parent class_ref 132663 // Object
      end

      classrelation 666295 // mConverter (<unidirectional association>)
	relation 666295 --->
	  a role_name "mConverter" private
	    comment "
Converts from the source Object type to the setter Object type.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 666295 // mConverter (<unidirectional association>)
	  b parent class_ref 317495 // TypeConverter
      end

      operation 1545271 "PropertyValuesHolder"
	private explicit_return_type ""
	nparams 1
	  param inout name "propertyName" type class_ref 129591 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Internal utility constructor, used by the factory methods to set the property name.
@param propertyName The name of the property for this holder."
      end

      operation 1545399 "PropertyValuesHolder"
	private explicit_return_type ""
	nparams 1
	  param inout name "property" type class_ref 149559 // Property
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Internal utility constructor, used by the factory methods to set the property.
@param property The property for this holder."
      end

      operation 1545527 "ofInt"
	class_operation public return_type class_ref 316215 // PropertyValuesHolder
	nparams 2
	  param inout name "propertyName" type class_ref 129591 // String
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder with a given property name and
set of int values.
@param propertyName The name of the property being animated.
@param values The values that the named property will animate between.
@return PropertyValuesHolder The constructed PropertyValuesHolder object."
      end

      operation 1545655 "ofInt"
	class_operation public return_type class_ref 316215 // PropertyValuesHolder
	nparams 2
	  param inout name "property" type class_ref 149559 // Property
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?, Integer> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder with a given property and
set of int values.
@param property The property being animated. Should not be null.
@param values The values that the property will animate between.
@return PropertyValuesHolder The constructed PropertyValuesHolder object."
      end

      operation 1545783 "ofMultiInt"
	class_operation public return_type class_ref 316215 // PropertyValuesHolder
	nparams 2
	  param inout name "propertyName" type class_ref 129591 // String
	  param inout name "values" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder with a given property name and
set of <code>int[]</code> values. At least two <code>int[]</code> values must be supplied,
a start and end value. If more values are supplied, the values will be animated from the
start, through all intermediate values to the end value. When used with ObjectAnimator,
the elements of the array represent the parameters of the setter function.

@param propertyName The name of the property being animated. Can also be the
                    case-sensitive name of the entire setter method. Should not be null.
@param values The values that the property will animate between.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
@see IntArrayEvaluator#IntArrayEvaluator(int[])
@see ObjectAnimator#ofMultiInt(Object, String, TypeConverter, TypeEvaluator, Object[])"
      end

      operation 1545911 "ofMultiInt"
	class_operation public return_type class_ref 316215 // PropertyValuesHolder
	nparams 2
	  param inout name "propertyName" type class_ref 129591 // String
	  param inout name "path" type class_ref 272823 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder with a given property name to use
as a multi-int setter. The values are animated along the path, with the first
parameter of the setter set to the x coordinate and the second set to the y coordinate.

@param propertyName The name of the property being animated. Can also be the
                    case-sensitive name of the entire setter method. Should not be null.
                    The setter must take exactly two <code>int</code> parameters.
@param path The Path along which the values should be animated.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
@see ObjectAnimator#ofPropertyValuesHolder(Object, PropertyValuesHolder...)"
      end

      operation 1546039 "ofMultiInt"
	class_operation public return_type class_ref 316215 // PropertyValuesHolder
	nparams 4
	  param inout name "propertyName" type class_ref 129591 // String
	  param inout name "converter" type class_ref 317495 // TypeConverter
	  param inout name "evaluator" type class_ref 316087 // TypeEvaluator
	  param inout name "" explicit_type "V...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V> ${type} ${name}${(}${t0} ${p0}, ${t1}<V, int[]> ${p1}, ${t2}<V> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SafeVarargs
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder with a given property and
set of Object values for use with ObjectAnimator multi-value setters. The Object
values are converted to <code>int[]</code> using the converter.

@param propertyName The property being animated or complete name of the setter.
                    Should not be null.
@param converter Used to convert the animated value to setter parameters.
@param evaluator A TypeEvaluator that will be called on each animation frame to
provide the necessary interpolation between the Object values to derive the animated
value.
@param values The values that the property will animate between.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
@see ObjectAnimator#ofMultiInt(Object, String, TypeConverter, TypeEvaluator, Object[])
@see ObjectAnimator#ofPropertyValuesHolder(Object, PropertyValuesHolder...)"
      end

      operation 1546167 "ofMultiInt"
	class_operation public return_type class_ref 316215 // PropertyValuesHolder
	nparams 4
	  param inout name "propertyName" type class_ref 129591 // String
	  param inout name "converter" type class_ref 317495 // TypeConverter
	  param inout name "evaluator" type class_ref 316087 // TypeEvaluator
	  param inout name "" explicit_type "Keyframe...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T, int[]> ${p1}, ${t2}<T> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder object with the specified property name or
setter name for use in a multi-int setter function using ObjectAnimator. The values can be
of any type, but the type should be consistent so that the supplied
{@link android.animation.TypeEvaluator} can be used to to evaluate the animated value. The
<code>converter</code> converts the values to parameters in the setter function.

<p>At least two values must be supplied, a start and an end value.</p>

@param propertyName The name of the property to associate with the set of values. This
                    may also be the complete name of a setter function.
@param converter    Converts <code>values</code> into int parameters for the setter.
                    Can be null if the Keyframes have int[] values.
@param evaluator    Used to interpolate between values.
@param values       The values at specific fractional times to evaluate between
@return A PropertyValuesHolder for a multi-int parameter setter."
      end

      operation 1546295 "ofFloat"
	class_operation public return_type class_ref 316215 // PropertyValuesHolder
	nparams 2
	  param inout name "propertyName" type class_ref 129591 // String
	  param inout name "" explicit_type "float...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder with a given property name and
set of float values.
@param propertyName The name of the property being animated.
@param values The values that the named property will animate between.
@return PropertyValuesHolder The constructed PropertyValuesHolder object."
      end

      operation 1546423 "ofFloat"
	class_operation public return_type class_ref 316215 // PropertyValuesHolder
	nparams 2
	  param inout name "property" type class_ref 149559 // Property
	  param inout name "" explicit_type "float...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?, Float> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder with a given property and
set of float values.
@param property The property being animated. Should not be null.
@param values The values that the property will animate between.
@return PropertyValuesHolder The constructed PropertyValuesHolder object."
      end

      operation 1546551 "ofMultiFloat"
	class_operation public return_type class_ref 316215 // PropertyValuesHolder
	nparams 2
	  param inout name "propertyName" type class_ref 129591 // String
	  param inout name "values" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder with a given property name and
set of <code>float[]</code> values. At least two <code>float[]</code> values must be supplied,
a start and end value. If more values are supplied, the values will be animated from the
start, through all intermediate values to the end value. When used with ObjectAnimator,
the elements of the array represent the parameters of the setter function.

@param propertyName The name of the property being animated. Can also be the
                    case-sensitive name of the entire setter method. Should not be null.
@param values The values that the property will animate between.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
@see FloatArrayEvaluator#FloatArrayEvaluator(float[])
@see ObjectAnimator#ofMultiFloat(Object, String, TypeConverter, TypeEvaluator, Object[])"
      end

      operation 1546679 "ofMultiFloat"
	class_operation public return_type class_ref 316215 // PropertyValuesHolder
	nparams 2
	  param inout name "propertyName" type class_ref 129591 // String
	  param inout name "path" type class_ref 272823 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder with a given property name to use
as a multi-float setter. The values are animated along the path, with the first
parameter of the setter set to the x coordinate and the second set to the y coordinate.

@param propertyName The name of the property being animated. Can also be the
                    case-sensitive name of the entire setter method. Should not be null.
                    The setter must take exactly two <code>float</code> parameters.
@param path The Path along which the values should be animated.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
@see ObjectAnimator#ofPropertyValuesHolder(Object, PropertyValuesHolder...)"
      end

      operation 1546807 "ofMultiFloat"
	class_operation public return_type class_ref 316215 // PropertyValuesHolder
	nparams 4
	  param inout name "propertyName" type class_ref 129591 // String
	  param inout name "converter" type class_ref 317495 // TypeConverter
	  param inout name "evaluator" type class_ref 316087 // TypeEvaluator
	  param inout name "" explicit_type "V...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V> ${type} ${name}${(}${t0} ${p0}, ${t1}<V, float[]> ${p1}, ${t2}<V> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SafeVarargs
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder with a given property and
set of Object values for use with ObjectAnimator multi-value setters. The Object
values are converted to <code>float[]</code> using the converter.

@param propertyName The property being animated or complete name of the setter.
                    Should not be null.
@param converter Used to convert the animated value to setter parameters.
@param evaluator A TypeEvaluator that will be called on each animation frame to
provide the necessary interpolation between the Object values to derive the animated
value.
@param values The values that the property will animate between.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
@see ObjectAnimator#ofMultiFloat(Object, String, TypeConverter, TypeEvaluator, Object[])"
      end

      operation 1546935 "ofMultiFloat"
	class_operation public return_type class_ref 316215 // PropertyValuesHolder
	nparams 4
	  param inout name "propertyName" type class_ref 129591 // String
	  param inout name "converter" type class_ref 317495 // TypeConverter
	  param inout name "evaluator" type class_ref 316087 // TypeEvaluator
	  param inout name "" explicit_type "Keyframe...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T, float[]> ${p1}, ${t2}<T> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder object with the specified property name or
setter name for use in a multi-float setter function using ObjectAnimator. The values can be
of any type, but the type should be consistent so that the supplied
{@link android.animation.TypeEvaluator} can be used to to evaluate the animated value. The
<code>converter</code> converts the values to parameters in the setter function.

<p>At least two values must be supplied, a start and an end value.</p>

@param propertyName The name of the property to associate with the set of values. This
                    may also be the complete name of a setter function.
@param converter    Converts <code>values</code> into float parameters for the setter.
                    Can be null if the Keyframes have float[] values.
@param evaluator    Used to interpolate between values.
@param values       The values at specific fractional times to evaluate between
@return A PropertyValuesHolder for a multi-float parameter setter."
      end

      operation 1547063 "ofObject"
	class_operation public return_type class_ref 316215 // PropertyValuesHolder
	nparams 3
	  param inout name "propertyName" type class_ref 129591 // String
	  param inout name "evaluator" type class_ref 316087 // TypeEvaluator
	  param inout name "" explicit_type "Object...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder with a given property name and
set of Object values. This variant also takes a TypeEvaluator because the system
cannot automatically interpolate between objects of unknown type.

<p><strong>Note:</strong> The Object values are stored as references to the original
objects, which means that changes to those objects after this method is called will
affect the values on the PropertyValuesHolder. If the objects will be mutated externally
after this method is called, callers should pass a copy of those objects instead.

@param propertyName The name of the property being animated.
@param evaluator A TypeEvaluator that will be called on each animation frame to
provide the necessary interpolation between the Object values to derive the animated
value.
@param values The values that the named property will animate between.
@return PropertyValuesHolder The constructed PropertyValuesHolder object."
      end

      operation 1547191 "ofObject"
	class_operation public return_type class_ref 316215 // PropertyValuesHolder
	nparams 3
	  param inout name "propertyName" type class_ref 129591 // String
	  param inout name "converter" type class_ref 317495 // TypeConverter
	  param inout name "path" type class_ref 272823 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<PointF, ?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder with a given property name and
a Path along which the values should be animated. This variant supports a
<code>TypeConverter</code> to convert from <code>PointF</code> to the target
type.

<p>The PointF passed to <code>converter</code> or <code>property</code>, if
<code>converter</code> is <code>null</code>, is reused on each animation frame and should
not be stored by the setter or TypeConverter.</p>

@param propertyName The name of the property being animated.
@param converter Converts a PointF to the type associated with the setter. May be
                 null if conversion is unnecessary.
@param path The Path along which the values should be animated.
@return PropertyValuesHolder The constructed PropertyValuesHolder object."
      end

      operation 1547319 "ofObject"
	class_operation public return_type class_ref 316215 // PropertyValuesHolder
	nparams 3
	  param inout name "property" type class_ref 149559 // Property
	  param inout name "evaluator" type class_ref 316087 // TypeEvaluator
	  param inout name "" explicit_type "V...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V> ${type} ${name}${(}${t0} ${p0}, ${t1}<V> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SafeVarargs
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder with a given property and
set of Object values. This variant also takes a TypeEvaluator because the system
cannot automatically interpolate between objects of unknown type.

<p><strong>Note:</strong> The Object values are stored as references to the original
objects, which means that changes to those objects after this method is called will
affect the values on the PropertyValuesHolder. If the objects will be mutated externally
after this method is called, callers should pass a copy of those objects instead.

@param property The property being animated. Should not be null.
@param evaluator A TypeEvaluator that will be called on each animation frame to
provide the necessary interpolation between the Object values to derive the animated
value.
@param values The values that the property will animate between.
@return PropertyValuesHolder The constructed PropertyValuesHolder object."
      end

      operation 1547447 "ofObject"
	class_operation public return_type class_ref 316215 // PropertyValuesHolder
	nparams 4
	  param inout name "property" type class_ref 149559 // Property
	  param inout name "converter" type class_ref 317495 // TypeConverter
	  param inout name "evaluator" type class_ref 316087 // TypeEvaluator
	  param inout name "" explicit_type "T...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T, V> ${type} ${name}${(}${t0}<?, V> ${p0}, ${t1}<T, V> ${p1}, ${t2}<T> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SafeVarargs
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder with a given property and
set of Object values. This variant also takes a TypeEvaluator because the system
cannot automatically interpolate between objects of unknown type. This variant also
takes a <code>TypeConverter</code> to convert from animated values to the type
of the property. If only one value is supplied, the <code>TypeConverter</code>
must be a {@link android.animation.BidirectionalTypeConverter} to retrieve the current
value.

<p><strong>Note:</strong> The Object values are stored as references to the original
objects, which means that changes to those objects after this method is called will
affect the values on the PropertyValuesHolder. If the objects will be mutated externally
after this method is called, callers should pass a copy of those objects instead.

@param property The property being animated. Should not be null.
@param converter Converts the animated object to the Property type.
@param evaluator A TypeEvaluator that will be called on each animation frame to
provide the necessary interpolation between the Object values to derive the animated
value.
@param values The values that the property will animate between.
@return PropertyValuesHolder The constructed PropertyValuesHolder object.
@see #setConverter(TypeConverter)
@see TypeConverter"
      end

      operation 1547575 "ofObject"
	class_operation public return_type class_ref 316215 // PropertyValuesHolder
	nparams 3
	  param inout name "property" type class_ref 149559 // Property
	  param inout name "converter" type class_ref 317495 // TypeConverter
	  param inout name "path" type class_ref 272823 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V> ${type} ${name}${(}${t0}<?, V> ${p0}, ${t1}<PointF, V> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder with a given property and
a Path along which the values should be animated. This variant supports a
<code>TypeConverter</code> to convert from <code>PointF</code> to the target
type.

<p>The PointF passed to <code>converter</code> or <code>property</code>, if
<code>converter</code> is <code>null</code>, is reused on each animation frame and should
not be stored by the setter or TypeConverter.</p>

@param property The property being animated. Should not be null.
@param converter Converts a PointF to the type associated with the setter. May be
                 null if conversion is unnecessary.
@param path The Path along which the values should be animated.
@return PropertyValuesHolder The constructed PropertyValuesHolder object."
      end

      operation 1547703 "ofKeyframe"
	class_operation public return_type class_ref 316215 // PropertyValuesHolder
	nparams 2
	  param inout name "propertyName" type class_ref 129591 // String
	  param inout name "" explicit_type "Keyframe...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder object with the specified property name and set
of values. These values can be of any type, but the type should be consistent so that
an appropriate {@link android.animation.TypeEvaluator} can be found that matches
the common type.
<p>If there is only one value, it is assumed to be the end value of an animation,
and an initial value will be derived, if possible, by calling a getter function
on the object. Also, if any value is null, the value will be filled in when the animation
starts in the same way. This mechanism of automatically getting null values only works
if the PropertyValuesHolder object is used in conjunction
{@link ObjectAnimator}, and with a getter function
derived automatically from <code>propertyName</code>, since otherwise PropertyValuesHolder has
no way of determining what the value should be.
@param propertyName The name of the property associated with this set of values. This
can be the actual property name to be used when using a ObjectAnimator object, or
just a name used to get animated values, such as if this object is used with an
ValueAnimator object.
@param values The set of values to animate between."
      end

      operation 1547831 "ofKeyframe"
	class_operation public return_type class_ref 316215 // PropertyValuesHolder
	nparams 2
	  param inout name "property" type class_ref 149559 // Property
	  param inout name "" explicit_type "Keyframe...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a PropertyValuesHolder object with the specified property and set
of values. These values can be of any type, but the type should be consistent so that
an appropriate {@link android.animation.TypeEvaluator} can be found that matches
the common type.
<p>If there is only one value, it is assumed to be the end value of an animation,
and an initial value will be derived, if possible, by calling the property's
{@link android.util.Property#get(Object)} function.
Also, if any value is null, the value will be filled in when the animation
starts in the same way. This mechanism of automatically getting null values only works
if the PropertyValuesHolder object is used in conjunction with
{@link ObjectAnimator}, since otherwise PropertyValuesHolder has
no way of determining what the value should be.
@param property The property associated with this set of values. Should not be null.
@param values The set of values to animate between."
      end

      operation 1547959 "ofKeyframes"
	class_operation package return_type class_ref 316215 // PropertyValuesHolder
	nparams 2
	  param inout name "propertyName" type class_ref 129591 // String
	  param inout name "keyframes" type class_ref 318263 // Keyframes
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1548087 "ofKeyframes"
	class_operation package return_type class_ref 316215 // PropertyValuesHolder
	nparams 2
	  param inout name "property" type class_ref 149559 // Property
	  param inout name "keyframes" type class_ref 318263 // Keyframes
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1548215 "setIntValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the animated values for this object to this set of ints.
If there is only one value, it is assumed to be the end value of an animation,
and an initial value will be derived, if possible, by calling a getter function
on the object. Also, if any value is null, the value will be filled in when the animation
starts in the same way. This mechanism of automatically getting null values only works
if the PropertyValuesHolder object is used in conjunction
{@link ObjectAnimator}, and with a getter function
derived automatically from <code>propertyName</code>, since otherwise PropertyValuesHolder has
no way of determining what the value should be.

@param values One or more values that the animation will animate between."
      end

      operation 1548343 "setFloatValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "float...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the animated values for this object to this set of floats.
If there is only one value, it is assumed to be the end value of an animation,
and an initial value will be derived, if possible, by calling a getter function
on the object. Also, if any value is null, the value will be filled in when the animation
starts in the same way. This mechanism of automatically getting null values only works
if the PropertyValuesHolder object is used in conjunction
{@link ObjectAnimator}, and with a getter function
derived automatically from <code>propertyName</code>, since otherwise PropertyValuesHolder has
no way of determining what the value should be.

@param values One or more values that the animation will animate between."
      end

      operation 1548471 "setKeyframes"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "Keyframe...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the animated values for this object to this set of Keyframes.

@param values One or more values that the animation will animate between."
      end

      operation 1548599 "setObjectValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "Object...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the animated values for this object to this set of Objects.
If there is only one value, it is assumed to be the end value of an animation,
and an initial value will be derived, if possible, by calling a getter function
on the object. Also, if any value is null, the value will be filled in when the animation
starts in the same way. This mechanism of automatically getting null values only works
if the PropertyValuesHolder object is used in conjunction
{@link ObjectAnimator}, and with a getter function
derived automatically from <code>propertyName</code>, since otherwise PropertyValuesHolder has
no way of determining what the value should be.

<p><strong>Note:</strong> The Object values are stored as references to the original
objects, which means that changes to those objects after this method is called will
affect the values on the PropertyValuesHolder. If the objects will be mutated externally
after this method is called, callers should pass a copy of those objects instead.

@param values One or more values that the animation will animate between."
      end

      operation 1548727 "setConverter"
	public explicit_return_type "void"
	nparams 1
	  param inout name "converter" type class_ref 317495 // TypeConverter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the converter to convert from the values type to the setter's parameter type.
If only one value is supplied, <var>converter</var> must be a
{@link android.animation.BidirectionalTypeConverter}.
@param converter The converter to use to convert values."
      end

      operation 1548855 "getPropertyFunction"
	private explicit_return_type "Method"
	nparams 3
	  param inout name "targetClass" type class_ref 132791 // Class
	  param inout name "prefix" type class_ref 129591 // String
	  param inout name "valueType" type class_ref 132791 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine the setter or getter function using the JavaBeans convention of setFoo or
getFoo for a property named 'foo'. This function figures out what the name of the
function should be and uses reflection to find the Method with that name on the
target object.

@param targetClass The class to search for the method
@param prefix \"set\" or \"get\", depending on whether we need a setter or getter.
@param valueType The type of the parameter (in the case of a setter). This type
is derived from the values set on this PropertyValuesHolder. This type is used as
a first guess at the parameter type, but we check for methods with several different
types to avoid problems with slight mis-matches between supplied values and actual
value types used on the setter.
@return Method the method associated with mPropertyName."
      end

      operation 1548983 "setupSetterOrGetter"
	private explicit_return_type "Method"
	nparams 4
	  param inout name "targetClass" type class_ref 132791 // Class
	  param inout name "propertyMapMap" explicit_type "HashMap<Class, HashMap<String, Method>>"
	  param inout name "prefix" type class_ref 129591 // String
	  param inout name "valueType" type class_ref 132791 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the setter or getter requested. This utility function checks whether the
requested method exists in the propertyMapMap cache. If not, it calls another
utility function to request the Method from the targetClass directly.
@param targetClass The Class on which the requested method should exist.
@param propertyMapMap The cache of setters/getters derived so far.
@param prefix \"set\" or \"get\", for the setter or getter.
@param valueType The type of parameter passed into the method (null for getter).
@return Method the method associated with mPropertyName."
      end

      operation 1549111 "setupSetter"
	package explicit_return_type "void"
	nparams 1
	  param inout name "targetClass" type class_ref 132791 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function to get the setter from targetClass
@param targetClass The Class on which the requested method should exist."
      end

      operation 1549239 "setupGetter"
	private explicit_return_type "void"
	nparams 1
	  param inout name "targetClass" type class_ref 132791 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function to get the getter from targetClass"
      end

      operation 1549367 "setupSetterAndGetter"
	package explicit_return_type "void"
	nparams 1
	  param inout name "target" type class_ref 132663 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Internal function (called from ObjectAnimator) to set up the setter and getter
prior to running the animation. If the setter has not been manually set for this
object, it will be derived automatically given the property name, target object, and
types of values supplied. If no getter has been set, it will be supplied iff any of the
supplied values was null. If there is a null value, then the getter (supplied or derived)
will be called to set those null values to the current value of the property
on the target object.
@param target The object on which the setter (and possibly getter) exist."
      end

      operation 1549495 "convertBack"
	private return_type class_ref 132663 // Object
	nparams 1
	  param inout name "value" type class_ref 132663 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1549623 "setupValue"
	private explicit_return_type "void"
	nparams 2
	  param inout name "target" type class_ref 132663 // Object
	  param inout name "kf" type class_ref 316599 // Keyframe
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility function to set the value stored in a particular Keyframe. The value used is
whatever the value is for the property name specified in the keyframe on the target object.

@param target The target object from which the current value should be extracted.
@param kf The keyframe which holds the property name and value."
      end

      operation 1549751 "setupStartValue"
	package explicit_return_type "void"
	nparams 1
	  param inout name "target" type class_ref 132663 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This function is called by ObjectAnimator when setting the start values for an animation.
The start values are set according to the current values in the target object. The
property whose value is extracted is whatever is specified by the propertyName of this
PropertyValuesHolder object.

@param target The object which holds the start values that should be set."
      end

      operation 1549879 "setupEndValue"
	package explicit_return_type "void"
	nparams 1
	  param inout name "target" type class_ref 132663 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This function is called by ObjectAnimator when setting the end values for an animation.
The end values are set according to the current values in the target object. The
property whose value is extracted is whatever is specified by the propertyName of this
PropertyValuesHolder object.

@param target The object which holds the start values that should be set."
      end

      operation 1550007 "clone"
	public return_type class_ref 316215 // PropertyValuesHolder
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1550135 "setAnimatedValue"
	package explicit_return_type "void"
	nparams 1
	  param inout name "target" type class_ref 132663 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Internal function to set the value on the target object, using the setter set up
earlier on this PropertyValuesHolder object. This function is called by ObjectAnimator
to handle turning the value calculated by ValueAnimator into a value set on the object
according to the name of the property.
@param target The target object on which the value is set"
      end

      operation 1550263 "init"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Internal function, called by ValueAnimator, to set up the TypeEvaluator that will be used
to calculate animated values."
      end

      operation 1550391 "setEvaluator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "evaluator" type class_ref 316087 // TypeEvaluator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The TypeEvaluator will be automatically determined based on the type of values
supplied to PropertyValuesHolder. The evaluator can be manually set, however, if so
desired. This may be important in cases where either the type of the values supplied
do not match the way that they should be interpolated between, or if the values
are of a custom type or one not currently understood by the animation system. Currently,
only values of type float and int (and their Object equivalents: Float
and Integer) are  correctly interpolated; all other types require setting a TypeEvaluator.
@param evaluator"
      end

      operation 1550519 "calculateValue"
	package explicit_return_type "void"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Function used to calculate the value according to the evaluator set up for
this PropertyValuesHolder object. This function is called by ValueAnimator.animateValue().

@param fraction The elapsed, interpolated fraction of the animation."
      end

      operation 1550647 "setPropertyName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "propertyName" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the name of the property that will be animated. This name is used to derive
a setter function that will be called to set animated values.
For example, a property name of <code>foo</code> will result
in a call to the function <code>setFoo()</code> on the target object. If either
<code>valueFrom</code> or <code>valueTo</code> is null, then a getter function will
also be derived and called.

<p>Note that the setter function derived from this property name
must take the same parameter type as the
<code>valueFrom</code> and <code>valueTo</code> properties, otherwise the call to
the setter function will fail.</p>

@param propertyName The name of the property being animated."
      end

      operation 1550775 "setProperty"
	public explicit_return_type "void"
	nparams 1
	  param inout name "property" type class_ref 149559 // Property
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the property that will be animated.

<p>Note that if this PropertyValuesHolder object is used with ObjectAnimator, the property
must exist on the target object specified in that ObjectAnimator.</p>

@param property The property being animated."
      end

      operation 1550903 "getPropertyName"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the name of the property that will be animated. This name will be used to derive
a setter function that will be called to set animated values.
For example, a property name of <code>foo</code> will result
in a call to the function <code>setFoo()</code> on the target object. If either
<code>valueFrom</code> or <code>valueTo</code> is null, then a getter function will
also be derived and called."
      end

      operation 1551031 "getAnimatedValue"
	package return_type class_ref 132663 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Internal function, called by ValueAnimator and ObjectAnimator, to retrieve the value
most recently calculated in calculateValue().
@return"
      end

      operation 1551159 "getPropertyValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "values" type class_ref 320439 // PropertyValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "PropertyValuesHolder is Animators use to hold internal animation related data.
Therefore, in order to replicate the animation behavior, we need to get data out of
PropertyValuesHolder.
@hide"
      end

      class 320439 "PropertyValues"
	visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 668215 // propertyName (<unidirectional association>)
	  relation 668215 --->
	    a role_name "propertyName" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 668215 // propertyName (<unidirectional association>)
	    b parent class_ref 129591 // String
	end

	classrelation 668343 // type (<unidirectional association>)
	  relation 668343 --->
	    a role_name "type" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 668343 // type (<unidirectional association>)
	    b parent class_ref 132791 // Class
	end

	classrelation 668471 // startValue (<unidirectional association>)
	  relation 668471 --->
	    a role_name "startValue" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 668471 // startValue (<unidirectional association>)
	    b parent class_ref 132663 // Object
	end

	classrelation 668599 // endValue (<unidirectional association>)
	  relation 668599 --->
	    a role_name "endValue" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 668599 // endValue (<unidirectional association>)
	    b parent class_ref 132663 // Object
	end

	class 321591 "DataSource"
	  visibility public stereotype "interface"
	  cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	  java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	  operation 1555895 "getValueAtFraction"
	    public return_type class_ref 132663 // Object
	    nparams 1
	      param in name "fraction" explicit_type "float"
	    cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	    cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	    java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end
	end

	classrelation 668727 // dataSource (<unidirectional association>)
	  relation 668727 --->
	    a role_name "dataSource" init_value " null" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 668727 // dataSource (<unidirectional association>)
	    b parent class_ref 321591 // DataSource
	end

	operation 1556023 "toString"
	  public return_type class_ref 129591 // String
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 1551287 "toString"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1551415 "getMethodName"
	class_operation package return_type class_ref 129591 // String
	nparams 2
	  param inout name "prefix" type class_ref 129591 // String
	  param inout name "propertyName" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility method to derive a setter/getter method name from a property name, where the
prefix is typically \"set\" or \"get\" and the first letter of the property name is
capitalized.

@param prefix The precursor to the method name, before the property name begins, typically
\"set\" or \"get\".
@param propertyName The name of the property that represents the bulk of the method name
after the prefix. The first letter of this word will be capitalized in the resulting
method name.
@return String the property name converted to a method name according to the conventions
specified above."
      end

      class 320567 "IntPropertyValuesHolder"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 666423 // <generalisation>
	  relation 666423 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 666423 // <generalisation>
	    b parent class_ref 316215 // PropertyValuesHolder
	end

	classrelation 666551 // sJNISetterPropertyMap (<unidirectional association>)
	  relation 666551 --->
	    stereotype "HashMap"
	    a role_name "sJNISetterPropertyMap" init_value "
                new HashMap<Class, HashMap<String, Long>>()" class_relation const_relation private
	      comment " Cache JNI functions to avoid looking them up twice"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}, HashMap<String, Long>> ${name}${value};
"
	      classrelation_ref 666551 // sJNISetterPropertyMap (<unidirectional association>)
	    b parent class_ref 132791 // Class
	end

	attribute 607927 "mJniSetter"
	  package explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 666679 // mIntProperty (<unidirectional association>)
	  relation 666679 --->
	    a role_name "mIntProperty" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 666679 // mIntProperty (<unidirectional association>)
	    b parent class_ref 320695 // IntProperty
	end

	classrelation 666807 // mIntKeyframes (<unidirectional association>)
	  relation 666807 --->
	    a role_name "mIntKeyframes" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 666807 // mIntKeyframes (<unidirectional association>)
	    b parent class_ref 318391 // IntKeyframes
	end

	attribute 608055 "mIntAnimatedValue"
	  package explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1551543 "IntPropertyValuesHolder"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "propertyName" type class_ref 129591 // String
	    param inout name "keyframes" type class_ref 318391 // IntKeyframes
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1551671 "IntPropertyValuesHolder"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "property" type class_ref 149559 // Property
	    param inout name "keyframes" type class_ref 318391 // IntKeyframes
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1551799 "IntPropertyValuesHolder"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "propertyName" type class_ref 129591 // String
	    param inout name "" explicit_type "int...values"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1551927 "IntPropertyValuesHolder"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "property" type class_ref 149559 // Property
	    param inout name "" explicit_type "int...values"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1552055 "setIntValues"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "" explicit_type "int...values"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1552183 "calculateValue"
	  package explicit_return_type "void"
	  nparams 1
	    param in name "fraction" explicit_type "float"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1552311 "getAnimatedValue"
	  package return_type class_ref 132663 // Object
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1552439 "clone"
	  public return_type class_ref 320567 // IntPropertyValuesHolder
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1552567 "setAnimatedValue"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "target" type class_ref 132663 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Internal function to set the value on the target object, using the setter set up
earlier on this PropertyValuesHolder object. This function is called by ObjectAnimator
to handle turning the value calculated by ValueAnimator into a value set on the object
according to the name of the property.
@param target The target object on which the value is set"
	end

	operation 1552695 "setupSetter"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "targetClass" type class_ref 132791 // Class
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 320823 "FloatPropertyValuesHolder"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 666935 // <generalisation>
	  relation 666935 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 666935 // <generalisation>
	    b parent class_ref 316215 // PropertyValuesHolder
	end

	classrelation 667063 // sJNISetterPropertyMap (<unidirectional association>)
	  relation 667063 --->
	    stereotype "HashMap"
	    a role_name "sJNISetterPropertyMap" init_value "
                new HashMap<Class, HashMap<String, Long>>()" class_relation const_relation private
	      comment " Cache JNI functions to avoid looking them up twice"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}, HashMap<String, Long>> ${name}${value};
"
	      classrelation_ref 667063 // sJNISetterPropertyMap (<unidirectional association>)
	    b parent class_ref 132791 // Class
	end

	attribute 608183 "mJniSetter"
	  package explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 667191 // mFloatProperty (<unidirectional association>)
	  relation 667191 --->
	    a role_name "mFloatProperty" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 667191 // mFloatProperty (<unidirectional association>)
	    b parent class_ref 320951 // FloatProperty
	end

	classrelation 667319 // mFloatKeyframes (<unidirectional association>)
	  relation 667319 --->
	    a role_name "mFloatKeyframes" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 667319 // mFloatKeyframes (<unidirectional association>)
	    b parent class_ref 318519 // FloatKeyframes
	end

	attribute 608311 "mFloatAnimatedValue"
	  package explicit_type "float"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1552823 "FloatPropertyValuesHolder"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "propertyName" type class_ref 129591 // String
	    param inout name "keyframes" type class_ref 318519 // FloatKeyframes
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1552951 "FloatPropertyValuesHolder"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "property" type class_ref 149559 // Property
	    param inout name "keyframes" type class_ref 318519 // FloatKeyframes
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1553079 "FloatPropertyValuesHolder"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "propertyName" type class_ref 129591 // String
	    param inout name "" explicit_type "float...values"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1553207 "FloatPropertyValuesHolder"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "property" type class_ref 149559 // Property
	    param inout name "" explicit_type "float...values"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1553335 "setFloatValues"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "" explicit_type "float...values"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1553463 "calculateValue"
	  package explicit_return_type "void"
	  nparams 1
	    param in name "fraction" explicit_type "float"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1553591 "getAnimatedValue"
	  package return_type class_ref 132663 // Object
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1553719 "clone"
	  public return_type class_ref 320823 // FloatPropertyValuesHolder
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1553847 "setAnimatedValue"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "target" type class_ref 132663 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Internal function to set the value on the target object, using the setter set up
earlier on this PropertyValuesHolder object. This function is called by ObjectAnimator
to handle turning the value calculated by ValueAnimator into a value set on the object
according to the name of the property.
@param target The target object on which the value is set"
	end

	operation 1553975 "setupSetter"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "targetClass" type class_ref 132791 // Class
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 321079 "MultiFloatValuesHolder"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 667447 // <generalisation>
	  relation 667447 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 667447 // <generalisation>
	    b parent class_ref 316215 // PropertyValuesHolder
	end

	attribute 608439 "mJniSetter"
	  private explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 667575 // sJNISetterPropertyMap (<unidirectional association>)
	  relation 667575 --->
	    stereotype "HashMap"
	    a role_name "sJNISetterPropertyMap" init_value "
                new HashMap<Class, HashMap<String, Long>>()" class_relation const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}, HashMap<String, Long>> ${name}${value};
"
	      classrelation_ref 667575 // sJNISetterPropertyMap (<unidirectional association>)
	    b parent class_ref 132791 // Class
	end

	operation 1554103 "MultiFloatValuesHolder"
	  public explicit_return_type ""
	  nparams 4
	    param inout name "propertyName" type class_ref 129591 // String
	    param inout name "converter" type class_ref 317495 // TypeConverter
	    param inout name "evaluator" type class_ref 316087 // TypeEvaluator
	    param inout name "" explicit_type "Object...values"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1554231 "MultiFloatValuesHolder"
	  public explicit_return_type ""
	  nparams 4
	    param inout name "propertyName" type class_ref 129591 // String
	    param inout name "converter" type class_ref 317495 // TypeConverter
	    param inout name "evaluator" type class_ref 316087 // TypeEvaluator
	    param inout name "keyframes" type class_ref 318263 // Keyframes
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1554359 "setAnimatedValue"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "target" type class_ref 132663 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Internal function to set the value on the target object, using the setter set up
earlier on this PropertyValuesHolder object. This function is called by ObjectAnimator
to handle turning the value calculated by ValueAnimator into a value set on the object
according to the name of the property.

@param target The target object on which the value is set"
	end

	operation 1554487 "setupSetterAndGetter"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "target" type class_ref 132663 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Internal function (called from ObjectAnimator) to set up the setter and getter
prior to running the animation. No getter can be used for multiple parameters.

@param target The object on which the setter exists."
	end

	operation 1554615 "setupSetter"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "targetClass" type class_ref 132791 // Class
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 321207 "MultiIntValuesHolder"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 667703 // <generalisation>
	  relation 667703 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 667703 // <generalisation>
	    b parent class_ref 316215 // PropertyValuesHolder
	end

	attribute 608567 "mJniSetter"
	  private explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 667831 // sJNISetterPropertyMap (<unidirectional association>)
	  relation 667831 --->
	    stereotype "HashMap"
	    a role_name "sJNISetterPropertyMap" init_value "
                new HashMap<Class, HashMap<String, Long>>()" class_relation const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}, HashMap<String, Long>> ${name}${value};
"
	      classrelation_ref 667831 // sJNISetterPropertyMap (<unidirectional association>)
	    b parent class_ref 132791 // Class
	end

	operation 1554743 "MultiIntValuesHolder"
	  public explicit_return_type ""
	  nparams 4
	    param inout name "propertyName" type class_ref 129591 // String
	    param inout name "converter" type class_ref 317495 // TypeConverter
	    param inout name "evaluator" type class_ref 316087 // TypeEvaluator
	    param inout name "" explicit_type "Object...values"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1554871 "MultiIntValuesHolder"
	  public explicit_return_type ""
	  nparams 4
	    param inout name "propertyName" type class_ref 129591 // String
	    param inout name "converter" type class_ref 317495 // TypeConverter
	    param inout name "evaluator" type class_ref 316087 // TypeEvaluator
	    param inout name "keyframes" type class_ref 318263 // Keyframes
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1554999 "setAnimatedValue"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "target" type class_ref 132663 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Internal function to set the value on the target object, using the setter set up
earlier on this PropertyValuesHolder object. This function is called by ObjectAnimator
to handle turning the value calculated by ValueAnimator into a value set on the object
according to the name of the property.

@param target The target object on which the value is set"
	end

	operation 1555127 "setupSetterAndGetter"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "target" type class_ref 132663 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Internal function (called from ObjectAnimator) to set up the setter and getter
prior to running the animation. No getter can be used for multiple parameters.

@param target The object on which the setter exists."
	end

	operation 1555255 "setupSetter"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "targetClass" type class_ref 132791 // Class
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 321335 "PointFToFloatArray"
	visibility private 
	nactuals 2
	actual class class_ref 317495 // TypeConverter
	  rank 0 explicit_value ""
	actual class class_ref 317495 // TypeConverter
	  rank 1 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 667959 // <realization>
	  relation 667959 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 667959 // <realization>
	    b parent class_ref 317495 // TypeConverter
	end

	attribute 608695 "mCoordinates"
	  private explicit_type "float"
	  multiplicity "[]"
	  init_value " new float[2]"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1555383 "PointFToFloatArray"
	  public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1555511 "convert"
	  public explicit_return_type "float"
	  nparams 1
	    param inout name "value" type class_ref 152247 // PointF
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 321463 "PointFToIntArray"
	visibility private 
	nactuals 2
	actual class class_ref 317495 // TypeConverter
	  rank 0 explicit_value ""
	actual class class_ref 317495 // TypeConverter
	  rank 1 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 668087 // <realization>
	  relation 668087 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 668087 // <realization>
	    b parent class_ref 317495 // TypeConverter
	end

	attribute 608823 "mCoordinates"
	  private explicit_type "int"
	  multiplicity "[]"
	  init_value " new int[2]"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1555639 "PointFToIntArray"
	  public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1555767 "convert"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "value" type class_ref 152247 // PointF
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      operation 1556151 "nGetIntMethod"
	class_operation private explicit_return_type "long"
	nparams 2
	  param inout name "targetClass" type class_ref 132791 // Class
	  param inout name "methodName" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
      end

      operation 1556279 "nGetFloatMethod"
	class_operation private explicit_return_type "long"
	nparams 2
	  param inout name "targetClass" type class_ref 132791 // Class
	  param inout name "methodName" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
      end

      operation 1556407 "nGetMultipleIntMethod"
	class_operation private explicit_return_type "long"
	nparams 3
	  param inout name "targetClass" type class_ref 132791 // Class
	  param inout name "methodName" type class_ref 129591 // String
	  param in name "numParams" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
"
	
	
	
      end

      operation 1556535 "nGetMultipleFloatMethod"
	class_operation private explicit_return_type "long"
	nparams 3
	  param inout name "targetClass" type class_ref 132791 // Class
	  param inout name "methodName" type class_ref 129591 // String
	  param in name "numParams" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
"
	
	
	
      end

      operation 1556663 "nCallIntMethod"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "target" type class_ref 132663 // Object
	  param in name "methodID" explicit_type "long"
	  param in name "arg" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
"
	
	
	
      end

      operation 1556791 "nCallFloatMethod"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "target" type class_ref 132663 // Object
	  param in name "methodID" explicit_type "long"
	  param in name "arg" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
"
	
	
	
      end

      operation 1556919 "nCallTwoIntMethod"
	class_operation private explicit_return_type "void"
	nparams 4
	  param inout name "target" type class_ref 132663 // Object
	  param in name "methodID" explicit_type "long"
	  param in name "arg1" explicit_type "int"
	  param in name "arg2" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws};
"
	
	
	
      end

      operation 1557047 "nCallFourIntMethod"
	class_operation private explicit_return_type "void"
	nparams 6
	  param inout name "target" type class_ref 132663 // Object
	  param in name "methodID" explicit_type "long"
	  param in name "arg1" explicit_type "int"
	  param in name "arg2" explicit_type "int"
	  param in name "arg3" explicit_type "int"
	  param in name "arg4" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws};
"
	
	
	
      end

      operation 1557175 "nCallMultipleIntMethod"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "target" type class_ref 132663 // Object
	  param in name "methodID" explicit_type "long"
	  param inout name "args" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws};
"
	
	
	
      end

      operation 1557303 "nCallTwoFloatMethod"
	class_operation private explicit_return_type "void"
	nparams 4
	  param inout name "target" type class_ref 132663 // Object
	  param in name "methodID" explicit_type "long"
	  param in name "arg1" explicit_type "float"
	  param in name "arg2" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws};
"
	
	
	
      end

      operation 1557431 "nCallFourFloatMethod"
	class_operation private explicit_return_type "void"
	nparams 6
	  param inout name "target" type class_ref 132663 // Object
	  param in name "methodID" explicit_type "long"
	  param in name "arg1" explicit_type "float"
	  param in name "arg2" explicit_type "float"
	  param in name "arg3" explicit_type "float"
	  param in name "arg4" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws};
"
	
	
	
      end

      operation 1557559 "nCallMultipleFloatMethod"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "target" type class_ref 132663 // Object
	  param in name "methodID" explicit_type "long"
	  param inout name "args" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws};
"
	
	
	
      end
    end

    class 316343 "ValueAnimator"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SuppressWarnings(\"unchecked\")
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class provides a simple timing engine for running animations
which calculate animated values and set them on target objects.

<p>There is a single timing pulse that all animations use. It runs in a
custom handler to ensure that property changes happen on the UI thread.</p>

<p>By default, ValueAnimator uses non-linear time interpolation, via the
{@link AccelerateDecelerateInterpolator} class, which accelerates into and decelerates
out of an animation. This behavior can be changed by calling
{@link ValueAnimator#setInterpolator(TimeInterpolator)}.</p>

<p>Animators can be created from either code or resource files. Here is an example
of a ValueAnimator resource file:</p>

{@sample development/samples/ApiDemos/res/anim/animator.xml ValueAnimatorResources}

<p>It is also possible to use a combination of {@link PropertyValuesHolder} and
{@link Keyframe} resource tags to create a multi-step animation.
Note that you can specify explicit fractional values (from 0 to 1) for
each keyframe to determine when, in the overall duration, the animation should arrive at that
value. Alternatively, you can leave the fractions off and the keyframes will be equally
distributed within the total duration:</p>

{@sample development/samples/ApiDemos/res/anim/value_animator_pvh_kf.xml
ValueAnimatorKeyframeResources}

<div class=\"special reference\">
<h3>Developer Guides</h3>
<p>For more information about animating with {@code ValueAnimator}, read the
<a href=\"{@docRoot}guide/topics/graphics/prop-animation.html#value-animator\">Property
Animation</a> developer guide.</p>
</div>"
      classrelation 661431 // <generalisation>
	relation 661431 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 661431 // <generalisation>
	  b parent class_ref 314807 // Animator
      end

      classrelation 661559 // <realization>
	relation 661559 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 661559 // <realization>
	  b parent class_ref 314295 // AnimationFrameCallback
      end

      classrelation 661687 // TAG (<unidirectional association>)
	relation 661687 --->
	  a role_name "TAG" init_value " \"ValueAnimator\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 661687 // TAG (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      attribute 603831 "DEBUG"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 603959 "sDurationScale"
	class_attribute private explicit_type "float"
	init_value " 1.0f"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Internal constants
"
      end

      attribute 604087 "mStartTime"
	package explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Internal variables
NOTE: This object implements the clone() method, making a deep copy of any referenced
objects. As other non-trivial fields are added to this class, make sure to add logic
to clone() to make deep copies of them.


The first time that the animation's animateFrame() method is called. This time is used to
determine elapsed time (and therefore the elapsed fraction) in subsequent calls
to animateFrame().

Whenever mStartTime is set, you must also update mStartTimeCommitted.
"
      end

      attribute 604215 "mStartTimeCommitted"
	package explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "When true, the start time has been firmly committed as a chosen reference point in
time by which the progress of the animation will be evaluated.  When false, the
start time may be updated when the first animation frame is committed so as
to compensate for jank that may have occurred between when the start time was
initialized and when the frame was actually drawn.

This flag is generally set to false during the first frame of the animation
when the animation playing state transitions from STOPPED to RUNNING or
resumes after having been paused.  This flag is set to true when the start time
is firmly committed and should not be further compensated for jank.
"
      end

      attribute 604343 "mSeekFraction"
	package explicit_type "float"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Set when setCurrentPlayTime() is called. If negative, animation is not currently seeked
to a value.
"
      end

      attribute 604471 "mPauseTime"
	private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Set on the next frame after pause() is called, used to calculate a new startTime
or delayStartTime which allows the animator to continue from the point at which
it was paused. If negative, has not yet been set.
"
      end

      attribute 604599 "mResumed"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Set when an animator is resumed. This triggers logic in the next frame which
actually resumes the animator.
"
      end

      classrelation 661815 // sDefaultInterpolator (<unidirectional association>)
	relation 661815 --->
	  a role_name "sDefaultInterpolator" init_value "
            new AccelerateDecelerateInterpolator()" class_relation const_relation private
	    comment " The time interpolator to be used if none is set on the animation
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 661815 // sDefaultInterpolator (<unidirectional association>)
	  b parent class_ref 315319 // TimeInterpolator
      end

      attribute 604727 "mReversing"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag to indicate whether this animator is playing in reverse mode, specifically
by being started or interrupted by a call to reverse(). This flag is different than
mPlayingBackwards, which indicates merely whether the current iteration of the
animator is playing in reverse. It is used in corner cases to determine proper end
behavior.
"
      end

      attribute 604855 "mOverallFraction"
	private explicit_type "float"
	init_value " 0f"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Tracks the overall fraction of the animation, ranging from 0 to mRepeatCount + 1
"
      end

      attribute 604983 "mCurrentFraction"
	private explicit_type "float"
	init_value " 0f"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Tracks current elapsed/eased fraction, for querying in getAnimatedFraction().
This is calculated by interpolating the fraction (range: [0, 1]) in the current iteration.
"
      end

      attribute 605111 "mLastFrameTime"
	private explicit_type "long"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Tracks the time (in milliseconds) when the last frame arrived.
"
      end

      attribute 605239 "mRunning"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Additional playing state to indicate whether an animator has been start()'d. There is
some lag between a call to start() and the first animation frame. We should still note
that the animation has been started, even if it's first animation frame has not yet
happened, and reflect that state in isRunning().
Note that delayed animations are different: they are not started until their first
animation frame, which occurs after their delay elapses.
"
      end

      attribute 605367 "mStarted"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Additional playing state to indicate whether an animator has been start()'d, whether or
not there is a nonzero startDelay.
"
      end

      attribute 605495 "mStartListenersCalled"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Tracks whether we've notified listeners of the onAnimationStart() event. This can be
complex to keep track of since we notify listeners at different times depending on
startDelay and whether start() was called before end().
"
      end

      attribute 605623 "mInitialized"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag that denotes whether the animation is set up and ready to go. Used to
set up animation that has not yet been started.
"
      end

      attribute 605751 "mAnimationEndRequested"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag that tracks whether animation has been requested to end.
"
      end

      attribute 605879 "mDuration"
	private explicit_type "long"
	init_value " 300"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Backing variables

 How long the animation should last in ms"
      end

      attribute 606007 "mStartDelay"
	private explicit_type "long"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The amount of time in ms to delay starting the animation after start() is called. Note
 that this start delay is unscaled. When there is a duration scale set on the animator, the
 scaling factor will be applied to this delay."
      end

      attribute 606135 "mRepeatCount"
	private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The number of times the animation will repeat. The default is 0, which means the animation
 will play only once"
      end

      attribute 606263 "mRepeatMode"
	private explicit_type "int"
	init_value " RESTART"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type of repetition that will occur when repeatMode is nonzero. RESTART means the
animation will start from the beginning on every new cycle. REVERSE means the animation
will reverse directions on each iteration.
"
      end

      classrelation 661943 // mInterpolator (<unidirectional association>)
	relation 661943 --->
	  a role_name "mInterpolator" init_value " sDefaultInterpolator" private
	    comment "
The time interpolator to be used. The elapsed fraction of the animation will be passed
through this interpolator to calculate the interpolated fraction, which is then used to
calculate the animated values.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 661943 // mInterpolator (<unidirectional association>)
	  b parent class_ref 315319 // TimeInterpolator
      end

      class 319671 "AnimatorUpdateListener"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 1535671 "onAnimationUpdate"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 316343 // ValueAnimator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "<p>Notifies the occurrence of another frame of the animation.</p>

@param animation The animation which was repeated."
	end
      end

      classrelation 662071 // mUpdateListeners (<unidirectional association>)
	relation 662071 --->
	  stereotype "ArrayList"
	  a role_name "mUpdateListeners" init_value " null" package
	    comment "The set of listeners to be sent events through the life of an animation.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 662071 // mUpdateListeners (<unidirectional association>)
	  b parent class_ref 319671 // AnimatorUpdateListener
      end

      classrelation 662199 // mValues (<unidirectional association>)
	relation 662199 --->
	  a role_name "mValues" multiplicity "[]" package
	    comment "
The property/value sets being animated.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 662199 // mValues (<unidirectional association>)
	  b parent class_ref 316215 // PropertyValuesHolder
      end

      classrelation 662327 // mValuesMap (<unidirectional association>)
	relation 662327 --->
	  stereotype "HashMap"
	  a role_name "mValuesMap" package
	    comment "A hashmap of the PropertyValuesHolder objects. This map is used to lookup animated values
by property name during calls to getAnimatedValue(String).
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}, PropertyValuesHolder> ${name}${value};
"
	    classrelation_ref 662327 // mValuesMap (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      class 319799 "RepeatMode"
	visibility public stereotype "@interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}@interface ${name}${extends} {
${members}}
"
	java_annotation "@IntDef({RESTART, REVERSE})
@Retention(RetentionPolicy.SOURCE)
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      attribute 606391 "RESTART"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "When the animation reaches the end and <code>repeatCount</code> is INFINITE
or a positive value, the animation restarts from the beginning.
"
      end

      attribute 606519 "REVERSE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "When the animation reaches the end and <code>repeatCount</code> is INFINITE
or a positive value, the animation reverses direction on every iteration.
"
      end

      attribute 606647 "INFINITE"
	class_attribute const_attribute public explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This value used used with the {@link #setRepeatCount(int)} property to repeat
the animation indefinitely.
"
      end

      operation 1527735 "setDurationScale"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "durationScale" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 1527863 "getDurationScale"
	class_operation public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 1527991 "ValueAnimator"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new ValueAnimator object. This default constructor is primarily for
use internally; the factory methods which take parameters are more generally
useful."
      end

      operation 1528119 "ofInt"
	class_operation public return_type class_ref 316343 // ValueAnimator
	nparams 1
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a ValueAnimator that animates between int values. A single
value implies that that value is the one being animated to. However, this is not typically
useful in a ValueAnimator object because there is no way for the object to determine the
starting value for the animation (unlike ObjectAnimator, which can derive that value
from the target object and property being animated). Therefore, there should typically
be two or more values.

@param values A set of values that the animation will animate between over time.
@return A ValueAnimator object that is set up to animate between the given values."
      end

      operation 1528247 "ofArgb"
	class_operation public return_type class_ref 316343 // ValueAnimator
	nparams 1
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a ValueAnimator that animates between color values. A single
value implies that that value is the one being animated to. However, this is not typically
useful in a ValueAnimator object because there is no way for the object to determine the
starting value for the animation (unlike ObjectAnimator, which can derive that value
from the target object and property being animated). Therefore, there should typically
be two or more values.

@param values A set of values that the animation will animate between over time.
@return A ValueAnimator object that is set up to animate between the given values."
      end

      operation 1528375 "ofFloat"
	class_operation public return_type class_ref 316343 // ValueAnimator
	nparams 1
	  param inout name "" explicit_type "float...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a ValueAnimator that animates between float values. A single
value implies that that value is the one being animated to. However, this is not typically
useful in a ValueAnimator object because there is no way for the object to determine the
starting value for the animation (unlike ObjectAnimator, which can derive that value
from the target object and property being animated). Therefore, there should typically
be two or more values.

@param values A set of values that the animation will animate between over time.
@return A ValueAnimator object that is set up to animate between the given values."
      end

      operation 1528503 "ofPropertyValuesHolder"
	class_operation public return_type class_ref 316343 // ValueAnimator
	nparams 1
	  param inout name "" explicit_type "PropertyValuesHolder...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a ValueAnimator that animates between the values
specified in the PropertyValuesHolder objects.

@param values A set of PropertyValuesHolder objects whose values will be animated
between over time.
@return A ValueAnimator object that is set up to animate between the given values."
      end

      operation 1528631 "ofObject"
	class_operation public return_type class_ref 316343 // ValueAnimator
	nparams 2
	  param inout name "evaluator" type class_ref 316087 // TypeEvaluator
	  param inout name "" explicit_type "Object...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a ValueAnimator that animates between Object values. A single
value implies that that value is the one being animated to. However, this is not typically
useful in a ValueAnimator object because there is no way for the object to determine the
starting value for the animation (unlike ObjectAnimator, which can derive that value
from the target object and property being animated). Therefore, there should typically
be two or more values.

<p><strong>Note:</strong> The Object values are stored as references to the original
objects, which means that changes to those objects after this method is called will
affect the values on the animator. If the objects will be mutated externally after
this method is called, callers should pass a copy of those objects instead.

<p>Since ValueAnimator does not know how to animate between arbitrary Objects, this
factory method also takes a TypeEvaluator object that the ValueAnimator will use
to perform that interpolation.

@param evaluator A TypeEvaluator that will be called on each animation frame to
provide the ncessry interpolation between the Object values to derive the animated
value.
@param values A set of values that the animation will animate between over time.
@return A ValueAnimator object that is set up to animate between the given values."
      end

      operation 1528759 "setIntValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets int values that will be animated between. A single
value implies that that value is the one being animated to. However, this is not typically
useful in a ValueAnimator object because there is no way for the object to determine the
starting value for the animation (unlike ObjectAnimator, which can derive that value
from the target object and property being animated). Therefore, there should typically
be two or more values.

<p>If there are already multiple sets of values defined for this ValueAnimator via more
than one PropertyValuesHolder object, this method will set the values for the first
of those objects.</p>

@param values A set of values that the animation will animate between over time."
      end

      operation 1528887 "setFloatValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "float...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets float values that will be animated between. A single
value implies that that value is the one being animated to. However, this is not typically
useful in a ValueAnimator object because there is no way for the object to determine the
starting value for the animation (unlike ObjectAnimator, which can derive that value
from the target object and property being animated). Therefore, there should typically
be two or more values.

<p>If there are already multiple sets of values defined for this ValueAnimator via more
than one PropertyValuesHolder object, this method will set the values for the first
of those objects.</p>

@param values A set of values that the animation will animate between over time."
      end

      operation 1529015 "setObjectValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "Object...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the values to animate between for this animation. A single
value implies that that value is the one being animated to. However, this is not typically
useful in a ValueAnimator object because there is no way for the object to determine the
starting value for the animation (unlike ObjectAnimator, which can derive that value
from the target object and property being animated). Therefore, there should typically
be two or more values.

<p><strong>Note:</strong> The Object values are stored as references to the original
objects, which means that changes to those objects after this method is called will
affect the values on the animator. If the objects will be mutated externally after
this method is called, callers should pass a copy of those objects instead.

<p>If there are already multiple sets of values defined for this ValueAnimator via more
than one PropertyValuesHolder object, this method will set the values for the first
of those objects.</p>

<p>There should be a TypeEvaluator set on the ValueAnimator that knows how to interpolate
between these value objects. ValueAnimator only knows how to interpolate between the
primitive types specified in the other setValues() methods.</p>

@param values The set of values to animate between."
      end

      operation 1529143 "setValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "PropertyValuesHolder...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the values, per property, being animated between. This function is called internally
by the constructors of ValueAnimator that take a list of values. But a ValueAnimator can
be constructed without values and this method can be called to set the values manually
instead.

@param values The set of values, per property, being animated between."
      end

      operation 1529271 "getValues"
	public return_type class_ref 316215 // PropertyValuesHolder
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the values that this ValueAnimator animates between. These values are stored in
PropertyValuesHolder objects, even if the ValueAnimator was created with a simple list
of value objects instead.

@return PropertyValuesHolder[] An array of PropertyValuesHolder objects which hold the
values, per property, that define the animation."
      end

      operation 1529399 "initAnimation"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallSuper
"
	
	
	
	comment "This function is called immediately before processing the first animation
frame of an animation. If there is a nonzero <code>startDelay</code>, the
function is called after that delay ends.
It takes care of the final initialization steps for the
animation.

 <p>Overrides of this method should call the superclass method to ensure
 that internal mechanisms for the animation are set up correctly.</p>"
      end

      operation 1529527 "setDuration"
	public return_type class_ref 316343 // ValueAnimator
	nparams 1
	  param in name "duration" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets the length of the animation. The default duration is 300 milliseconds.

@param duration The length of the animation, in milliseconds. This value cannot
be negative.
@return ValueAnimator The object called with setDuration(). This return
value makes it easier to compose statements together that construct and then set the
duration, as in <code>ValueAnimator.ofInt(0, 10).setDuration(500).start()</code>."
      end

      operation 1529655 "getScaledDuration"
	private explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1529783 "getDuration"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the length of the animation. The default duration is 300 milliseconds.

@return The length of the animation, in milliseconds."
      end

      operation 1529911 "getTotalDuration"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1530039 "setCurrentPlayTime"
	public explicit_return_type "void"
	nparams 1
	  param in name "playTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the position of the animation to the specified point in time. This time should
be between 0 and the total duration of the animation, including any repetition. If
the animation has not yet been started, then it will not advance forward after it is
set to this time; it will simply set the time to this value and perform any appropriate
actions based on that time. If the animation is already running, then setCurrentPlayTime()
will set the current playing time to this value and continue playing from that point.

@param playTime The time, in milliseconds, to which the animation is advanced or rewound."
      end

      operation 1530167 "setCurrentFraction"
	public explicit_return_type "void"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the position of the animation to the specified fraction. This fraction should
be between 0 and the total fraction of the animation, including any repetition. That is,
a fraction of 0 will position the animation at the beginning, a value of 1 at the end,
and a value of 2 at the end of a reversing animator that repeats once. If
the animation has not yet been started, then it will not advance forward after it is
set to this fraction; it will simply set the fraction to this value and perform any
appropriate actions based on that fraction. If the animation is already running, then
setCurrentFraction() will set the current fraction to this value and continue
playing from that point. {@link Animator.AnimatorListener} events are not called
due to changing the fraction; those events are only processed while the animation
is running.

@param fraction The fraction to which the animation is advanced or rewound. Values
outside the range of 0 to the maximum fraction for the animator will be clamped to
the correct range."
      end

      operation 1530295 "getCurrentIteration"
	private explicit_return_type "int"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculates current iteration based on the overall fraction. The overall fraction will be
in the range of [0, mRepeatCount + 1]. Both current iteration and fraction in the current
iteration can be derived from it."
      end

      operation 1530423 "getCurrentIterationFraction"
	private explicit_return_type "float"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculates the fraction of the current iteration, taking into account whether the animation
should be played backwards. E.g. When the animation is played backwards in an iteration,
the fraction for that iteration will go from 1f to 0f."
      end

      operation 1530551 "clampFraction"
	private explicit_return_type "float"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clamps fraction into the correct range: [0, mRepeatCount + 1]. If repeat count is infinite,
no upper bound will be set for the fraction.

@param fraction fraction to be clamped
@return fraction clamped into the range of [0, mRepeatCount + 1]"
      end

      operation 1530679 "shouldPlayBackward"
	private explicit_return_type "boolean"
	nparams 1
	  param in name "iteration" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculates the direction of animation playing (i.e. forward or backward), based on 1)
whether the entire animation is being reversed, 2) repeat mode applied to the current
iteration."
      end

      operation 1530807 "getCurrentPlayTime"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the current position of the animation in time, which is equal to the current
time minus the time that the animation started. An animation that is not yet started will
return a value of zero, unless the animation has has its play time set via
{@link #setCurrentPlayTime(long)} or {@link #setCurrentFraction(float)}, in which case
it will return the time that was set.

@return The current position in time of the animation."
      end

      operation 1530935 "getStartDelay"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "The amount of time, in milliseconds, to delay starting the animation after
{@link #start()} is called.

@return the number of milliseconds to delay running the animation"
      end

      operation 1531063 "setStartDelay"
	public explicit_return_type "void"
	nparams 1
	  param in name "startDelay" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "The amount of time, in milliseconds, to delay starting the animation after
{@link #start()} is called. Note that the start delay should always be non-negative. Any
negative start delay will be clamped to 0 on N and above.

@param startDelay The amount of the delay, in milliseconds"
      end

      operation 1531191 "getFrameDelay"
	class_operation public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The amount of time, in milliseconds, between each frame of the animation. This is a
requested time that the animation will attempt to honor, but the actual delay between
frames may be different, depending on system load and capabilities. This is a static
function because the same delay will be applied to all animations, since they are all
run off of a single timing loop.

The frame delay may be ignored when the animation system uses an external timing
source, such as the display refresh rate (vsync), to govern animations.

Note that this method should be called from the same thread that {@link #start()} is
called in order to check the frame delay for that animation. A runtime exception will be
thrown if the calling thread does not have a Looper.

@return the requested time between frames, in milliseconds"
      end

      operation 1531319 "setFrameDelay"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "frameDelay" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The amount of time, in milliseconds, between each frame of the animation. This is a
requested time that the animation will attempt to honor, but the actual delay between
frames may be different, depending on system load and capabilities. This is a static
function because the same delay will be applied to all animations, since they are all
run off of a single timing loop.

The frame delay may be ignored when the animation system uses an external timing
source, such as the display refresh rate (vsync), to govern animations.

Note that this method should be called from the same thread that {@link #start()} is
called in order to have the new frame delay take effect on that animation. A runtime
exception will be thrown if the calling thread does not have a Looper.

@param frameDelay the requested time between frames, in milliseconds"
      end

      operation 1531447 "getAnimatedValue"
	public return_type class_ref 132663 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The most recent value calculated by this <code>ValueAnimator</code> when there is just one
property being animated. This value is only sensible while the animation is running. The main
purpose for this read-only property is to retrieve the value from the <code>ValueAnimator</code>
during a call to {@link AnimatorUpdateListener#onAnimationUpdate(ValueAnimator)}, which
is called during each animation frame, immediately after the value is calculated.

@return animatedValue The value most recently calculated by this <code>ValueAnimator</code> for
the single property being animated. If there are several properties being animated
(specified by several PropertyValuesHolder objects in the constructor), this function
returns the animated value for the first of those objects."
      end

      operation 1531575 "getAnimatedValue"
	public return_type class_ref 132663 // Object
	nparams 1
	  param inout name "propertyName" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The most recent value calculated by this <code>ValueAnimator</code> for <code>propertyName</code>.
The main purpose for this read-only property is to retrieve the value from the
<code>ValueAnimator</code> during a call to
{@link AnimatorUpdateListener#onAnimationUpdate(ValueAnimator)}, which
is called during each animation frame, immediately after the value is calculated.

@return animatedValue The value most recently calculated for the named property
by this <code>ValueAnimator</code>."
      end

      operation 1531703 "setRepeatCount"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets how many times the animation should be repeated. If the repeat
count is 0, the animation is never repeated. If the repeat count is
greater than 0 or {@link #INFINITE}, the repeat mode will be taken
into account. The repeat count is 0 by default.

@param value the number of times the animation should be repeated"
      end

      operation 1531831 "getRepeatCount"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defines how many times the animation should repeat. The default value
is 0.

@return the number of times the animation should repeat, or {@link #INFINITE}"
      end

      operation 1531959 "setRepeatMode"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@RepeatMode ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defines what this animation should do when it reaches the end. This
setting is applied only when the repeat count is either greater than
0 or {@link #INFINITE}. Defaults to {@link #RESTART}.

@param value {@link #RESTART} or {@link #REVERSE}"
      end

      operation 1532087 "getRepeatMode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@RepeatMode
"
	
	
	
	comment "Defines what this animation should do when it reaches the end.

@return either one of {@link #REVERSE} or {@link #RESTART}"
      end

      operation 1532215 "addUpdateListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 319671 // AnimatorUpdateListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a listener to the set of listeners that are sent update events through the life of
an animation. This method is called on all listeners for every frame of the animation,
after the values for the animation have been calculated.

@param listener the listener to be added to the current set of listeners for this animation."
      end

      operation 1532343 "removeAllUpdateListeners"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all listeners from the set listening to frame updates for this animation."
      end

      operation 1532471 "removeUpdateListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 319671 // AnimatorUpdateListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a listener from the set listening to frame updates for this animation.

@param listener the listener to be removed from the current set of update listeners
for this animation."
      end

      operation 1532599 "setInterpolator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 315319 // TimeInterpolator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "The time interpolator used in calculating the elapsed fraction of this animation. The
interpolator determines whether the animation runs with linear or non-linear motion,
such as acceleration and deceleration. The default value is
{@link android.view.animation.AccelerateDecelerateInterpolator}

@param value the interpolator to be used by this animation. A value of <code>null</code>
will result in linear interpolation."
      end

      operation 1532727 "getInterpolator"
	public return_type class_ref 315319 // TimeInterpolator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the timing interpolator that this ValueAnimator uses.

@return The timing interpolator for this ValueAnimator."
      end

      operation 1532855 "setEvaluator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 316087 // TypeEvaluator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The type evaluator to be used when calculating the animated values of this animation.
The system will automatically assign a float or int evaluator based on the type
of <code>startValue</code> and <code>endValue</code> in the constructor. But if these values
are not one of these primitive types, or if different evaluation is desired (such as is
necessary with int values that represent colors), a custom evaluator needs to be assigned.
For example, when running an animation on color values, the {@link ArgbEvaluator}
should be used to get correct RGB color interpolation.

<p>If this ValueAnimator has only one set of values being animated between, this evaluator
will be used for that set. If there are several sets of values being animated, which is
the case if PropertyValuesHolder objects were set on the ValueAnimator, then the evaluator
is assigned just to the first PropertyValuesHolder object.</p>

@param value the evaluator to be used this animation"
      end

      operation 1532983 "notifyStartListeners"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1533111 "start"
	private explicit_return_type "void"
	nparams 1
	  param inout name "playBackwards" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Start the animation playing. This version of start() takes a boolean flag that indicates
whether the animation should play in reverse. The flag is usually false, but may be set
to true if called from the reverse() method.

<p>The animation started by calling this method will be run on the thread that called
this method. This thread should have a Looper on it (a runtime exception will be thrown if
this is not the case). Also, if the animation will animate
properties of objects in the view hierarchy, then the calling thread should be the UI
thread for that view hierarchy.</p>

@param playBackwards Whether the ValueAnimator should start playing in reverse."
      end

      operation 1533239 "start"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1533367 "cancel"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1533495 "end"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1533623 "resume"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1533751 "pause"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1533879 "isRunning"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1534007 "isStarted"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1534135 "reverse"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Plays the ValueAnimator in reverse. If the animation is already running,
it will stop itself and play backwards from the point reached when reverse was called.
If the animation is not currently running, then it will start from the end and
play backwards. This behavior is only set for the current animation; future playing
of the animation will use the default behavior of playing forward."
      end

      operation 1534263 "canReverse"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "@hide"
      end

      operation 1534391 "endAnimation"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called internally to end an animation by removing it from the animations list. Must be
called on the UI thread."
      end

      operation 1534519 "startAnimation"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called internally to start an animation by adding it to the active animations list. Must be
called on the UI thread."
      end

      operation 1534647 "isPulsingInternal"
	private explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Internal only: This tracks whether the animation has gotten on the animation loop. Note
this is different than {@link #isRunning()} in that the latter tracks the time after start()
is called (or after start delay if any), which may be before the animation loop starts."
      end

      operation 1534775 "getNameForTrace"
	package return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of this animator for debugging purposes."
      end

      operation 1534903 "commitAnimationFrame"
	public explicit_return_type "void"
	nparams 1
	  param in name "frameTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies an adjustment to the animation to compensate for jank between when
the animation first ran and when the frame was drawn.
@hide"
      end

      operation 1535031 "animateBasedOnTime"
	package explicit_return_type "boolean"
	nparams 1
	  param in name "currentTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This internal function processes a single animation frame for a given animation. The
currentTime parameter is the timing pulse sent by the handler, used to calculate the
elapsed duration, and therefore
the elapsed fraction, of the animation. The return value indicates whether the animation
should be ended (which happens when the elapsed time of the animation exceeds the
animation's duration, including the repeatCount).

@param currentTime The current time, as tracked by the static timing handler
@return true if the animation's duration, including any repetitions due to
<code>repeatCount</code> has been exceeded and the animation should be ended."
      end

      operation 1535159 "doAnimationFrame"
	public explicit_return_type "void"
	nparams 1
	  param in name "frameTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Processes a frame of the animation, adjusting the start time if needed.

@param frameTime The frame time.
@return true if the animation has ended.
@hide"
      end

      operation 1535287 "getAnimatedFraction"
	public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current animation fraction, which is the elapsed/interpolated fraction used in
the most recent frame update on the animation.

@return Elapsed/interpolated fraction of the animation."
      end

      operation 1535415 "animateValue"
	package explicit_return_type "void"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallSuper
"
	
	
	
	comment "This method is called with the elapsed fraction of the animation during every
animation frame. This function turns the elapsed fraction into an interpolated fraction
and then into an animated value (from the evaluator. The function is called mostly during
animation updates, but it is also called when the <code>end()</code>
function is called, to set the final value on the property.

<p>Overrides of this method must call the superclass to perform the calculation
of the animated value.</p>

@param fraction The elapsed fraction of the animation."
      end

      operation 1535543 "clone"
	public return_type class_ref 316343 // ValueAnimator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1535799 "getCurrentAnimationsCount"
	class_operation public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the number of animations currently running.

Used by StrictMode internally to annotate violations.
May be called on arbitrary threads!

@hide"
      end

      operation 1535927 "toString"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1536055 "setAllowRunningAsynchronously"
	public explicit_return_type "void"
	nparams 1
	  param inout name "mayRunAsync" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "<p>Whether or not the ValueAnimator is allowed to run asynchronously off of
the UI thread. This is a hint that informs the ValueAnimator that it is
OK to run the animation off-thread, however ValueAnimator may decide
that it must run the animation on the UI thread anyway. For example if there
is an {@link AnimatorUpdateListener} the animation will run on the UI thread,
regardless of the value of this hint.</p>

<p>Regardless of whether or not the animation runs asynchronously, all
listener callbacks will be called on the UI thread.</p>

<p>To be able to use this hint the following must be true:</p>
<ol>
<li>{@link #getAnimatedFraction()} is not needed (it will return undefined values).</li>
<li>The animator is immutable while {@link #isStarted()} is true. Requests
   to change values, duration, delay, etc... may be ignored.</li>
<li>Lifecycle callback events may be asynchronous. Events such as
   {@link Animator.AnimatorListener#onAnimationEnd(Animator)} or
   {@link Animator.AnimatorListener#onAnimationRepeat(Animator)} may end up delayed
   as they must be posted back to the UI thread, and any actions performed
   by those callbacks (such as starting new animations) will not happen
   in the same frame.</li>
<li>State change requests ({@link #cancel()}, {@link #end()}, {@link #reverse()}, etc...)
   may be asynchronous. It is guaranteed that all state changes that are
   performed on the UI thread in the same frame will be applied as a single
   atomic update, however that frame may be the current frame,
   the next frame, or some future frame. This will also impact the observed
   state of the Animator. For example, {@link #isStarted()} may still return true
   after a call to {@link #end()}. Using the lifecycle callbacks is preferred over
   queries to {@link #isStarted()}, {@link #isRunning()}, and {@link #isPaused()}
   for this reason.</li>
</ol>
@hide"
      end
    end

    class 316471 "AnimatorSet"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class plays a set of {@link Animator} objects in the specified order. Animations
can be set up to play together, in sequence, or after a specified delay.

<p>There are two different approaches to adding animations to a <code>AnimatorSet</code>:
either the {@link AnimatorSet#playTogether(Animator[]) playTogether()} or
{@link AnimatorSet#playSequentially(Animator[]) playSequentially()} methods can be called to add
a set of animations all at once, or the {@link AnimatorSet#play(Animator)} can be
used in conjunction with methods in the {@link AnimatorSet.Builder Builder}
class to add animations
one by one.</p>

<p>It is possible to set up a <code>AnimatorSet</code> with circular dependencies between
its animations. For example, an animation a1 could be set up to start before animation a2, a2
before a3, and a3 before a1. The results of this configuration are undefined, but will typically
result in none of the affected animations being played. Because of this (and because
circular dependencies do not make logical sense anyway), circular dependencies
should be avoided, and the dependency flow of animations should only be in one direction.

<div class=\"special reference\">
<h3>Developer Guides</h3>
<p>For more information about animating with {@code AnimatorSet}, read the
<a href=\"{@docRoot}guide/topics/graphics/prop-animation.html#choreography\">Property
Animation</a> developer guide.</p>
</div>"
      classrelation 650807 // <generalisation>
	relation 650807 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 650807 // <generalisation>
	  b parent class_ref 314807 // Animator
      end

      classrelation 650935 // TAG (<unidirectional association>)
	relation 650935 --->
	  a role_name "TAG" init_value " \"AnimatorSet\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 650935 // TAG (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 651063 // mPlayingSet (<unidirectional association>)
	relation 651063 --->
	  stereotype "ArrayList"
	  a role_name "mPlayingSet" init_value " new ArrayList<Animator>()" private
	    comment "Internal variables
NOTE: This object implements the clone() method, making a deep copy of any referenced
objects. As other non-trivial fields are added to this class, make sure to add logic
to clone() to make deep copies of them.


Tracks animations currently being played, so that we know what to
cancel or end when cancel() or end() is called on this AnimatorSet
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 651063 // mPlayingSet (<unidirectional association>)
	  b parent class_ref 314807 // Animator
      end

      classrelation 651191 // mNodeMap (<unidirectional association>)
	relation 651191 --->
	  a role_name "mNodeMap" init_value " new ArrayMap<Animator, Node>()" private
	    comment "
Contains all nodes, mapped to their respective Animators. When new
dependency information is added for an Animator, we want to add it
to a single node representing that Animator, not create a new Node
if one already exists.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Animator, Node> ${name}${value};
"
	    classrelation_ref 651191 // mNodeMap (<unidirectional association>)
	  b parent class_ref 156343 // ArrayMap
      end

      class 316855 "Node"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 652215 // <realization>
	  relation 652215 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 652215 // <realization>
	    b parent class_ref 242231 // Cloneable
	end

	classrelation 652343 // mAnimation (<unidirectional association>)
	  relation 652343 --->
	    a role_name "mAnimation" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 652343 // mAnimation (<unidirectional association>)
	    b parent class_ref 314807 // Animator
	end

	classrelation 652471 // mChildNodes (<unidirectional association>)
	  relation 652471 --->
	    stereotype "ArrayList"
	    a role_name "mChildNodes" init_value " null" package
	      comment "Child nodes are the nodes associated with animations that will be played immediately
after current node.
"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	      classrelation_ref 652471 // mChildNodes (<unidirectional association>)
	    b parent class_ref 316855 // Node
	end

	classrelation 652599 // mTmpClone (<unidirectional association>)
	  relation 652599 --->
	    a role_name "mTmpClone" init_value " null" private
	      comment "
Temporary field to hold the clone in AnimatorSet#clone. Cleaned after clone is complete

"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 652599 // mTmpClone (<unidirectional association>)
	    b parent class_ref 316855 // Node
	end

	attribute 597687 "mEnded"
	  package explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Flag indicating whether the animation in this node is finished. This flag
is used by AnimatorSet to check, as each animation ends, whether all child animations
are mEnded and it's time to send out an end event for the entire AnimatorSet.
"
	end

	classrelation 652727 // mSiblings (<unidirectional association>)
	  relation 652727 --->
	    stereotype "ArrayList"
	    a role_name "mSiblings" package
	      comment "Nodes with animations that are defined to play simultaneously with the animation
associated with this current node.
"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	      classrelation_ref 652727 // mSiblings (<unidirectional association>)
	    b parent class_ref 316855 // Node
	end

	classrelation 652855 // mParents (<unidirectional association>)
	  relation 652855 --->
	    stereotype "ArrayList"
	    a role_name "mParents" package
	      comment "Parent nodes are the nodes with animations preceding current node's animation. Parent
nodes here are derived from user defined animation sequence.
"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	      classrelation_ref 652855 // mParents (<unidirectional association>)
	    b parent class_ref 316855 // Node
	end

	classrelation 652983 // mLatestParent (<unidirectional association>)
	  relation 652983 --->
	    a role_name "mLatestParent" init_value " null" package
	      comment "
Latest parent is the parent node associated with a animation that finishes after all
the other parents' animations.

"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 652983 // mLatestParent (<unidirectional association>)
	    b parent class_ref 316855 // Node
	end

	attribute 597815 "mParentsAdded"
	  package explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 597943 "mStartTime"
	  package explicit_type "long"
	  init_value " 0"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 598071 "mEndTime"
	  package explicit_type "long"
	  init_value " 0"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 598199 "mTotalDuration"
	  package explicit_type "long"
	  init_value " 0"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1509303 "Node"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "animation" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs the Node with the animation that it encapsulates. A Node has no
dependencies by default; dependencies are added via the addDependency()
method.

@param animation The animation that the Node encapsulates."
	end

	operation 1509431 "clone"
	  public return_type class_ref 316855 // Node
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1509559 "addChild"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "node" type class_ref 316855 // Node
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1509687 "addSibling"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "node" type class_ref 316855 // Node
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1509815 "addParent"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "node" type class_ref 316855 // Node
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1509943 "addParents"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "parents" explicit_type "ArrayList<Node>"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 651319 // mNodes (<unidirectional association>)
	relation 651319 --->
	  stereotype "ArrayList"
	  a role_name "mNodes" init_value " new ArrayList<Node>()" private
	    comment "Set of all nodes created for this AnimatorSet. This list is used upon
starting the set, and the nodes are placed in sorted order into the
sortedNodes collection.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 651319 // mNodes (<unidirectional association>)
	  b parent class_ref 316855 // Node
      end

      class 316983 "AnimatorSetListener"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 651959 // <realization>
	  relation 651959 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 651959 // <realization>
	    b parent class_ref 314935 // AnimatorListener
	end

	classrelation 652087 // mAnimatorSet (<unidirectional association>)
	  relation 652087 --->
	    a role_name "mAnimatorSet" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 652087 // mAnimatorSet (<unidirectional association>)
	    b parent class_ref 316471 // AnimatorSet
	end

	operation 1507255 "AnimatorSetListener"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "animatorSet" type class_ref 316471 // AnimatorSet
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1507383 "onAnimationCancel"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1507511 "onAnimationEnd"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@SuppressWarnings(\"unchecked\")
"
	  
	  
	  
	end

	operation 1507639 "onAnimationRepeat"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Nothing to do"
	end

	operation 1507767 "onAnimationStart"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Nothing to do"
	end
      end

      classrelation 651447 // mSetListener (<unidirectional association>)
	relation 651447 --->
	  a role_name "mSetListener" init_value " new AnimatorSetListener(this)" private
	    comment "
Animator Listener that tracks the lifecycle of each Animator in the set. It will be added
to each Animator before they start and removed after they end.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 651447 // mSetListener (<unidirectional association>)
	  b parent class_ref 316983 // AnimatorSetListener
      end

      attribute 596663 "mTerminated"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag indicating that the AnimatorSet has been manually
terminated (by calling cancel() or end()).
This flag is used to avoid starting other animations when currently-playing
child animations of this AnimatorSet end. It also determines whether cancel/end
notifications are sent out via the normal AnimatorSetListener mechanism.
"
      end

      attribute 596791 "mDependencyDirty"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Tracks whether any change has been made to the AnimatorSet, which is then used to
determine whether the dependency graph should be re-constructed.
"
      end

      attribute 596919 "mStarted"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates whether an AnimatorSet has been start()'d, whether or
not there is a nonzero startDelay.
"
      end

      attribute 597047 "mStartDelay"
	private explicit_type "long"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The amount of time in ms to delay starting the animation after start() is called"
      end

      classrelation 651575 // mDelayAnim (<unidirectional association>)
	relation 651575 --->
	  a role_name "mDelayAnim" init_value " ValueAnimator.ofFloat(0f, 1f).setDuration(0)" private
	    comment " Animator used for a nonzero startDelay
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 651575 // mDelayAnim (<unidirectional association>)
	  b parent class_ref 316343 // ValueAnimator
      end

      classrelation 651703 // mRootNode (<unidirectional association>)
	relation 651703 --->
	  a role_name "mRootNode" init_value " new Node(mDelayAnim)" private
	    comment " Root of the dependency tree of all the animators in the set. In this tree, parent-child
 relationship captures the order of animation (i.e. parent and child will play sequentially),
 and sibling relationship indicates \"with\" relationship, as sibling animators start at the
 same time.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 651703 // mRootNode (<unidirectional association>)
	  b parent class_ref 316855 // Node
      end

      attribute 597175 "mDuration"
	private explicit_type "long"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " How long the child animations should last in ms. The default value is negative, which
 simply means that there is no duration set on the AnimatorSet. When a real duration is
 set, it is passed along to the child animations."
      end

      classrelation 651831 // mInterpolator (<unidirectional association>)
	relation 651831 --->
	  a role_name "mInterpolator" init_value " null" private
	    comment " Records the interpolator for the set. Null value indicates that no interpolator
 was set on this AnimatorSet, so it should not be passed down to the children.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 651831 // mInterpolator (<unidirectional association>)
	  b parent class_ref 315319 // TimeInterpolator
      end

      attribute 597303 "mReversible"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Whether the AnimatorSet can be reversed."
      end

      attribute 597431 "mTotalDuration"
	private explicit_type "long"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The total duration of finishing all the Animators in the set."
      end

      attribute 597559 "mShouldIgnoreEndWithoutStart"
	const_attribute private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " In pre-N releases, calling end() before start() on an animator set is no-op. But that is not
 consistent with the behavior for other animator types. In order to keep the behavior
 consistent within Animation framework, when end() is called without start(), we will start
 the animator set and immediately end it for N and forward."
      end

      operation 1503671 "AnimatorSet"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1503799 "playTogether"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "Animator...items"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets up this AnimatorSet to play all of the supplied animations at the same time.
This is equivalent to calling {@link #play(Animator)} with the first animator in the
set and then {@link Builder#with(Animator)} with each of the other animators. Note that
an Animator with a {@link Animator#setStartDelay(long) startDelay} will not actually
start until that delay elapses, which means that if the first animator in the list
supplied to this constructor has a startDelay, none of the other animators will start
until that first animator's startDelay has elapsed.

@param items The animations that will be started simultaneously."
      end

      operation 1503927 "playTogether"
	public explicit_return_type "void"
	nparams 1
	  param inout name "items" explicit_type "Collection<Animator>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets up this AnimatorSet to play all of the supplied animations at the same time.

@param items The animations that will be started simultaneously."
      end

      operation 1504055 "playSequentially"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "Animator...items"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets up this AnimatorSet to play each of the supplied animations when the
previous animation ends.

@param items The animations that will be started one after another."
      end

      operation 1504183 "playSequentially"
	public explicit_return_type "void"
	nparams 1
	  param inout name "items" explicit_type "List<Animator>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets up this AnimatorSet to play each of the supplied animations when the
previous animation ends.

@param items The animations that will be started one after another."
      end

      operation 1504311 "getChildAnimations"
	public return_type class_ref 314807 // Animator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}ArrayList<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current list of child Animator objects controlled by this
AnimatorSet. This is a copy of the internal list; modifications to the returned list
will not affect the AnimatorSet, although changes to the underlying Animator objects
will affect those objects being managed by the AnimatorSet.

@return ArrayList<Animator> The list of child animations of this AnimatorSet."
      end

      operation 1504439 "setTarget"
	public explicit_return_type "void"
	nparams 1
	  param inout name "target" type class_ref 132663 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets the target object for all current {@link #getChildAnimations() child animations}
of this AnimatorSet that take targets ({@link ObjectAnimator} and
AnimatorSet).

@param target The object being animated"
      end

      operation 1504567 "getChangingConfigurations"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "@hide"
      end

      operation 1504695 "setInterpolator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "interpolator" type class_ref 315319 // TimeInterpolator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets the TimeInterpolator for all current {@link #getChildAnimations() child animations}
of this AnimatorSet. The default value is null, which means that no interpolator
is set on this AnimatorSet. Setting the interpolator to any non-null value
will cause that interpolator to be set on the child animations
when the set is started.

@param interpolator the interpolator to be used by each child animation of this AnimatorSet"
      end

      operation 1504823 "getInterpolator"
	public return_type class_ref 315319 // TimeInterpolator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      class 317111 "Builder"
	visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 653111 // mCurrentNode (<unidirectional association>)
	  relation 653111 --->
	    a role_name "mCurrentNode" private
	      comment "
This tracks the current node being processed. It is supplied to the play() method
of AnimatorSet and passed into the constructor of Builder.

"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 653111 // mCurrentNode (<unidirectional association>)
	    b parent class_ref 316855 // Node
	end

	operation 1510071 "Builder"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "anim" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "package-private constructor. Builders are only constructed by AnimatorSet, when the
play() method is called.

@param anim The animation that is the dependency for the other animations passed into
the other methods of this Builder object."
	end

	operation 1510199 "with"
	  public return_type class_ref 317111 // Builder
	  nparams 1
	    param inout name "anim" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets up the given animation to play at the same time as the animation supplied in the
{@link AnimatorSet#play(Animator)} call that created this <code>Builder</code> object.

@param anim The animation that will play when the animation supplied to the
{@link AnimatorSet#play(Animator)} method starts."
	end

	operation 1510327 "before"
	  public return_type class_ref 317111 // Builder
	  nparams 1
	    param inout name "anim" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets up the given animation to play when the animation supplied in the
{@link AnimatorSet#play(Animator)} call that created this <code>Builder</code> object
ends.

@param anim The animation that will play when the animation supplied to the
{@link AnimatorSet#play(Animator)} method ends."
	end

	operation 1510455 "after"
	  public return_type class_ref 317111 // Builder
	  nparams 1
	    param inout name "anim" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets up the given animation to play when the animation supplied in the
{@link AnimatorSet#play(Animator)} call that created this <code>Builder</code> object
to start when the animation supplied in this method call ends.

@param anim The animation whose end will cause the animation supplied to the
{@link AnimatorSet#play(Animator)} method to play."
	end

	operation 1510583 "after"
	  public return_type class_ref 317111 // Builder
	  nparams 1
	    param in name "delay" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets up the animation supplied in the
{@link AnimatorSet#play(Animator)} call that created this <code>Builder</code> object
to play when the given amount of time elapses.

@param delay The number of milliseconds that should elapse before the
animation starts."
	end
      end

      operation 1504951 "play"
	public return_type class_ref 317111 // Builder
	nparams 1
	  param inout name "anim" type class_ref 314807 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method creates a <code>Builder</code> object, which is used to
set up playing constraints. This initial <code>play()</code> method
tells the <code>Builder</code> the animation that is the dependency for
the succeeding commands to the <code>Builder</code>. For example,
calling <code>play(a1).with(a2)</code> sets up the AnimatorSet to play
<code>a1</code> and <code>a2</code> at the same time,
<code>play(a1).before(a2)</code> sets up the AnimatorSet to play
<code>a1</code> first, followed by <code>a2</code>, and
<code>play(a1).after(a2)</code> sets up the AnimatorSet to play
<code>a2</code> first, followed by <code>a1</code>.

<p>Note that <code>play()</code> is the only way to tell the
<code>Builder</code> the animation upon which the dependency is created,
so successive calls to the various functions in <code>Builder</code>
will all refer to the initial parameter supplied in <code>play()</code>
as the dependency of the other animations. For example, calling
<code>play(a1).before(a2).before(a3)</code> will play both <code>a2</code>
and <code>a3</code> when a1 ends; it does not set up a dependency between
<code>a2</code> and <code>a3</code>.</p>

@param anim The animation that is the dependency used in later calls to the
methods in the returned <code>Builder</code> object. A null parameter will result
in a null <code>Builder</code> return value.
@return Builder The object that constructs the AnimatorSet based on the dependencies
outlined in the calls to <code>play</code> and the other methods in the
<code>Builder</code object."
      end

      operation 1505079 "cancel"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
@Override
"
	
	
	
	comment "{@inheritDoc}

<p>Note that canceling a <code>AnimatorSet</code> also cancels all of the animations that it
is responsible for.</p>"
      end

      operation 1505207 "end"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}

<p>Note that ending a <code>AnimatorSet</code> also ends all of the animations that it is
responsible for.</p>"
      end

      operation 1505335 "endRemainingAnimations"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Iterate the animations that haven't finished or haven't started, and end them."
      end

      operation 1505463 "isRunning"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns true if any of the child animations of this AnimatorSet have been started and have
not yet ended. Child animations will not be started until the AnimatorSet has gone past
its initial delay set through {@link #setStartDelay(long)}.

@return Whether this AnimatorSet has gone past the initial delay, and at least one child
        animation has been started and not yet ended."
      end

      operation 1505591 "isStarted"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1505719 "getStartDelay"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "The amount of time, in milliseconds, to delay starting the animation after
{@link #start()} is called.

@return the number of milliseconds to delay running the animation"
      end

      operation 1505847 "setStartDelay"
	public explicit_return_type "void"
	nparams 1
	  param in name "startDelay" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "The amount of time, in milliseconds, to delay starting the animation after
{@link #start()} is called. Note that the start delay should always be non-negative. Any
negative start delay will be clamped to 0 on N and above.

@param startDelay The amount of the delay, in milliseconds"
      end

      operation 1505975 "getDuration"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the length of each of the child animations of this AnimatorSet. This value may
be less than 0, which indicates that no duration has been set on this AnimatorSet
and each of the child animations will use their own duration.

@return The length of the animation, in milliseconds, of each of the child
animations of this AnimatorSet."
      end

      operation 1506103 "setDuration"
	public return_type class_ref 316471 // AnimatorSet
	nparams 1
	  param in name "duration" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets the length of each of the current child animations of this AnimatorSet. By default,
each child animation will use its own duration. If the duration is set on the AnimatorSet,
then each child animation inherits this duration.

@param duration The length of the animation, in milliseconds, of each of the child
animations of this AnimatorSet."
      end

      operation 1506231 "setupStartValues"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1506359 "setupEndValues"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1506487 "pause"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1506615 "resume"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1506743 "start"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
@Override
"
	
	
	
	comment "{@inheritDoc}

<p>Starting this <code>AnimatorSet</code> will, in turn, start the animations for which
it is responsible. The details of when exactly those animations are started depends on
the dependency relationships that have been set up between the animations."
      end

      operation 1506871 "updateAnimatorsDuration"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1506999 "start"
	package explicit_return_type "void"
	nparams 1
	  param in name "node" type class_ref 316855 // Node
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1507127 "clone"
	public return_type class_ref 316471 // AnimatorSet
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1507895 "onChildAnimatorEnded"
	private explicit_return_type "void"
	nparams 1
	  param inout name "animation" type class_ref 314807 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1508023 "canReverse"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "AnimatorSet is only reversible when the set contains no sequential animation, and no child
animators have a start delay.
@hide"
      end

      operation 1508151 "reverse"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "@hide"
      end

      operation 1508279 "toString"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1508407 "printChildCount"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1508535 "createDependencyGraph"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1508663 "updatePlayTime"
	private explicit_return_type "void"
	nparams 2
	  param inout name "parent" type class_ref 316855 // Node
	  param inout name "visited" explicit_type "ArrayList<Node>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Based on parent's start/end time, calculate children's start/end time. If cycle exists in
the graph, all the nodes on the cycle will be marked to start at {@link #DURATION_INFINITE},
meaning they will ever play."
      end

      operation 1508791 "findSiblings"
	private explicit_return_type "void"
	nparams 2
	  param inout name "node" type class_ref 316855 // Node
	  param inout name "siblings" explicit_type "ArrayList<Node>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Recursively find all the siblings"
      end

      operation 1508919 "shouldPlayTogether"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide
TODO: For animatorSet defined in XML, we can use a flag to indicate what the play order
if defined (i.e. sequential or together), then we can use the flag instead of calculate
dynamically.
@return whether all the animators in the set are supposed to play together"
      end

      operation 1509047 "getTotalDuration"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1509175 "getNodeForAnimation"
	private return_type class_ref 316855 // Node
	nparams 1
	  param inout name "anim" type class_ref 314807 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 316599 "Keyframe"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class holds a time/value pair for an animation. The Keyframe class is used
by {@link ValueAnimator} to define the values that the animation target will have over the course
of the animation. As the time proceeds from one keyframe to the other, the value of the
target object will animate between the value at the previous keyframe and the value at the
next keyframe. Each keyframe also holds an optional {@link TimeInterpolator}
object, which defines the time interpolation over the intervalue preceding the keyframe.

<p>The Keyframe class itself is abstract. The type-specific factory methods will return
a subclass of Keyframe specific to the type of value being stored. This is done to improve
performance when dealing with the most common cases (e.g., <code>float</code> and
<code>int</code> values). Other types will fall into a more general Keyframe class that
treats its values as Objects. Unless your animation requires dealing with a custom type
or a data structure that needs to be animated directly (and evaluated using an implementation
of {@link TypeEvaluator}), you should stick to using float and int as animations using those
types have lower runtime overhead than other types.</p>"
      classrelation 656439 // <realization>
	relation 656439 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 656439 // <realization>
	  b parent class_ref 242231 // Cloneable
      end

      attribute 599735 "mHasValue"
	package explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag to indicate whether this keyframe has a valid value. This flag is used when an
animation first starts, to populate placeholder keyframes with real values derived
from the target object.
"
      end

      attribute 599863 "mValueWasSetOnStart"
	package explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag to indicate whether the value in the keyframe was read from the target object or not.
If so, its value will be recalculated if target changes.
"
      end

      attribute 599991 "mFraction"
	package explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The time at which mValue will hold true.
"
      end

      classrelation 656567 // mValueType (<unidirectional association>)
	relation 656567 --->
	  a role_name "mValueType" package
	    comment "
The type of the value in this Keyframe. This type is determined at construction time,
based on the type of the <code>value</code> object passed into the constructor.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 656567 // mValueType (<unidirectional association>)
	  b parent class_ref 132791 // Class
      end

      classrelation 656695 // mInterpolator (<unidirectional association>)
	relation 656695 --->
	  a role_name "mInterpolator" init_value " null" private
	    comment "
The optional time interpolator for the interval preceding this keyframe. A null interpolator
(the default) results in linear interpolation over the interval.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 656695 // mInterpolator (<unidirectional association>)
	  b parent class_ref 315319 // TimeInterpolator
      end

      operation 1517623 "ofInt"
	class_operation public return_type class_ref 316599 // Keyframe
	nparams 2
	  param in name "fraction" explicit_type "float"
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a Keyframe object with the given time and value. The time defines the
time, as a proportion of an overall animation's duration, at which the value will hold true
for the animation. The value for the animation between keyframes will be calculated as
an interpolation between the values at those keyframes.

@param fraction The time, expressed as a value between 0 and 1, representing the fraction
of time elapsed of the overall animation duration.
@param value The value that the object will animate to as the animation time approaches
the time in this keyframe, and the the value animated from as the time passes the time in
this keyframe."
      end

      operation 1517751 "ofInt"
	class_operation public return_type class_ref 316599 // Keyframe
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a Keyframe object with the given time. The value at this time will be derived
from the target object when the animation first starts (note that this implies that keyframes
with no initial value must be used as part of an {@link ObjectAnimator}).
The time defines the
time, as a proportion of an overall animation's duration, at which the value will hold true
for the animation. The value for the animation between keyframes will be calculated as
an interpolation between the values at those keyframes.

@param fraction The time, expressed as a value between 0 and 1, representing the fraction
of time elapsed of the overall animation duration."
      end

      operation 1517879 "ofFloat"
	class_operation public return_type class_ref 316599 // Keyframe
	nparams 2
	  param in name "fraction" explicit_type "float"
	  param in name "value" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a Keyframe object with the given time and value. The time defines the
time, as a proportion of an overall animation's duration, at which the value will hold true
for the animation. The value for the animation between keyframes will be calculated as
an interpolation between the values at those keyframes.

@param fraction The time, expressed as a value between 0 and 1, representing the fraction
of time elapsed of the overall animation duration.
@param value The value that the object will animate to as the animation time approaches
the time in this keyframe, and the the value animated from as the time passes the time in
this keyframe."
      end

      operation 1518007 "ofFloat"
	class_operation public return_type class_ref 316599 // Keyframe
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a Keyframe object with the given time. The value at this time will be derived
from the target object when the animation first starts (note that this implies that keyframes
with no initial value must be used as part of an {@link ObjectAnimator}).
The time defines the
time, as a proportion of an overall animation's duration, at which the value will hold true
for the animation. The value for the animation between keyframes will be calculated as
an interpolation between the values at those keyframes.

@param fraction The time, expressed as a value between 0 and 1, representing the fraction
of time elapsed of the overall animation duration."
      end

      operation 1518135 "ofObject"
	class_operation public return_type class_ref 316599 // Keyframe
	nparams 2
	  param in name "fraction" explicit_type "float"
	  param inout name "value" type class_ref 132663 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a Keyframe object with the given time and value. The time defines the
time, as a proportion of an overall animation's duration, at which the value will hold true
for the animation. The value for the animation between keyframes will be calculated as
an interpolation between the values at those keyframes.

@param fraction The time, expressed as a value between 0 and 1, representing the fraction
of time elapsed of the overall animation duration.
@param value The value that the object will animate to as the animation time approaches
the time in this keyframe, and the the value animated from as the time passes the time in
this keyframe."
      end

      operation 1518263 "ofObject"
	class_operation public return_type class_ref 316599 // Keyframe
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a Keyframe object with the given time. The value at this time will be derived
from the target object when the animation first starts (note that this implies that keyframes
with no initial value must be used as part of an {@link ObjectAnimator}).
The time defines the
time, as a proportion of an overall animation's duration, at which the value will hold true
for the animation. The value for the animation between keyframes will be calculated as
an interpolation between the values at those keyframes.

@param fraction The time, expressed as a value between 0 and 1, representing the fraction
of time elapsed of the overall animation duration."
      end

      operation 1518391 "hasValue"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this keyframe has a valid value. This method is called internally when
an {@link ObjectAnimator} first starts; keyframes without values are assigned values at
that time by deriving the value for the property from the target object.

@return boolean Whether this object has a value assigned."
      end

      operation 1518519 "valueWasSetOnStart"
	package explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the Keyframe's value was acquired from the target object, this flag should be set so that,
if target changes, value will be reset.

@return boolean Whether this Keyframe's value was retieved from the target object or not."
      end

      operation 1518647 "setValueWasSetOnStart"
	package explicit_return_type "void"
	nparams 1
	  param inout name "valueWasSetOnStart" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1518775 "getValue"
	abstract public return_type class_ref 132663 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value for this Keyframe.

@return The value for this Keyframe."
      end

      operation 1518903 "setValue"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 132663 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value for this Keyframe.

@param value value for this Keyframe."
      end

      operation 1519031 "getFraction"
	public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the time for this keyframe, as a fraction of the overall animation duration.

@return The time associated with this keyframe, as a fraction of the overall animation
duration. This should be a value between 0 and 1."
      end

      operation 1519159 "setFraction"
	public explicit_return_type "void"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the time for this keyframe, as a fraction of the overall animation duration.

@param fraction time associated with this keyframe, as a fraction of the overall animation
duration. This should be a value between 0 and 1."
      end

      operation 1519287 "getInterpolator"
	public return_type class_ref 315319 // TimeInterpolator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the optional interpolator for this Keyframe. A value of <code>null</code> indicates
that there is no interpolation, which is the same as linear interpolation.

@return The optional interpolator for this Keyframe."
      end

      operation 1519415 "setInterpolator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "interpolator" type class_ref 315319 // TimeInterpolator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the optional interpolator for this Keyframe. A value of <code>null</code> indicates
that there is no interpolation, which is the same as linear interpolation.

@return The optional interpolator for this Keyframe."
      end

      operation 1519543 "getType"
	public return_type class_ref 132791 // Class
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the type of keyframe. This information is used by ValueAnimator to determine the type of
{@link TypeEvaluator} to use when calculating values between keyframes. The type is based
on the type of Keyframe created.

@return The type of the value stored in the Keyframe."
      end

      operation 1519671 "clone"
	abstract public return_type class_ref 316599 // Keyframe
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      class 319159 "ObjectKeyframe"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 656823 // <generalisation>
	  relation 656823 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 656823 // <generalisation>
	    b parent class_ref 316599 // Keyframe
	end

	classrelation 656951 // mValue (<unidirectional association>)
	  relation 656951 --->
	    a role_name "mValue" package
	      comment "
The value of the animation at the time mFraction.

"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 656951 // mValue (<unidirectional association>)
	    b parent class_ref 132663 // Object
	end

	operation 1519799 "ObjectKeyframe"
	  package explicit_return_type ""
	  nparams 2
	    param in name "fraction" explicit_type "float"
	    param inout name "value" type class_ref 132663 // Object
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1519927 "getValue"
	  public return_type class_ref 132663 // Object
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1520055 "setValue"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "value" type class_ref 132663 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1520183 "clone"
	  public return_type class_ref 319159 // ObjectKeyframe
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 319287 "IntKeyframe"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 657079 // <generalisation>
	  relation 657079 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 657079 // <generalisation>
	    b parent class_ref 316599 // Keyframe
	end

	attribute 600119 "mValue"
	  package explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "The value of the animation at the time mFraction.
"
	end

	operation 1520311 "IntKeyframe"
	  package explicit_return_type ""
	  nparams 2
	    param in name "fraction" explicit_type "float"
	    param in name "value" explicit_type "int"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1520439 "IntKeyframe"
	  package explicit_return_type ""
	  nparams 1
	    param in name "fraction" explicit_type "float"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1520567 "getIntValue"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1520695 "getValue"
	  public return_type class_ref 132663 // Object
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1520823 "setValue"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "value" type class_ref 132663 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1520951 "clone"
	  public return_type class_ref 319287 // IntKeyframe
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 319415 "FloatKeyframe"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 657207 // <generalisation>
	  relation 657207 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 657207 // <generalisation>
	    b parent class_ref 316599 // Keyframe
	end

	attribute 600247 "mValue"
	  package explicit_type "float"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "The value of the animation at the time mFraction.
"
	end

	operation 1521079 "FloatKeyframe"
	  package explicit_return_type ""
	  nparams 2
	    param in name "fraction" explicit_type "float"
	    param in name "value" explicit_type "float"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1521207 "FloatKeyframe"
	  package explicit_return_type ""
	  nparams 1
	    param in name "fraction" explicit_type "float"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1521335 "getFloatValue"
	  public explicit_return_type "float"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1521463 "getValue"
	  public return_type class_ref 132663 // Object
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1521591 "setValue"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "value" type class_ref 132663 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1521719 "clone"
	  public return_type class_ref 319415 // FloatKeyframe
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 316727 "AnimatorListenerAdapter"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This adapter class provides empty implementations of the methods from {@link android.animation.Animator.AnimatorListener}.
Any custom listener that cares only about a subset of the methods of this listener can
simply subclass this adapter class instead of implementing the interface directly."
      classrelation 650551 // <realization>
	relation 650551 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 650551 // <realization>
	  b parent class_ref 314935 // AnimatorListener
      end

      classrelation 650679 // <realization>
	relation 650679 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 650679 // <realization>
	  b parent class_ref 315063 // AnimatorPauseListener
      end

      operation 1502903 "onAnimationCancel"
	public explicit_return_type "void"
	nparams 1
	  param inout name "animation" type class_ref 314807 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}"
      end

      operation 1503031 "onAnimationEnd"
	public explicit_return_type "void"
	nparams 1
	  param inout name "animation" type class_ref 314807 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}"
      end

      operation 1503159 "onAnimationRepeat"
	public explicit_return_type "void"
	nparams 1
	  param inout name "animation" type class_ref 314807 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}"
      end

      operation 1503287 "onAnimationStart"
	public explicit_return_type "void"
	nparams 1
	  param inout name "animation" type class_ref 314807 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}"
      end

      operation 1503415 "onAnimationPause"
	public explicit_return_type "void"
	nparams 1
	  param inout name "animation" type class_ref 314807 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}"
      end

      operation 1503543 "onAnimationResume"
	public explicit_return_type "void"
	nparams 1
	  param inout name "animation" type class_ref 314807 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}"
      end
    end

    class 317239 "ArgbEvaluator"
      visibility public 
      nactuals 1
      actual class class_ref 316087 // TypeEvaluator
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This evaluator can be used to perform type interpolation between integer
values that represent ARGB colors."
      classrelation 653239 // <realization>
	relation 653239 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 653239 // <realization>
	  b parent class_ref 316087 // TypeEvaluator
      end

      classrelation 653367 // sInstance (<unidirectional association>)
	relation 653367 --->
	  a role_name "sInstance" init_value " new ArgbEvaluator()" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 653367 // sInstance (<unidirectional association>)
	  b parent class_ref 317239 // ArgbEvaluator
      end

      operation 1510711 "getInstance"
	class_operation public return_type class_ref 317239 // ArgbEvaluator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an instance of <code>ArgbEvaluator</code> that may be used in
{@link ValueAnimator#setEvaluator(TypeEvaluator)}. The same instance may
be used in multiple <code>Animator</code>s because it holds no state.
@return An instance of <code>ArgbEvalutor</code>.

@hide"
      end

      operation 1510839 "evaluate"
	public return_type class_ref 132663 // Object
	nparams 3
	  param in name "fraction" explicit_type "float"
	  param inout name "startValue" type class_ref 132663 // Object
	  param inout name "endValue" type class_ref 132663 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This function returns the calculated in-between value for a color
given integers that represent the start and end values in the four
bytes of the 32-bit int. Each channel is separately linearly interpolated
and the resulting calculated values are recombined into the return value.

@param fraction The fraction from the starting to the ending values
@param startValue A 32-bit int value representing colors in the
separate bytes of the parameter
@param endValue A 32-bit int value representing colors in the
separate bytes of the parameter
@return A value that is calculated to be the linearly interpolated
result, derived by separating the start and end values into separate
color channels and interpolating each one separately, recombining the
resulting values in the same way."
      end
    end

    class 317367 "BidirectionalTypeConverter"
      abstract visibility public 
      nformals 2
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 317495 // TypeConverter
        rank 0 explicit_value ""
      actual class class_ref 317495 // TypeConverter
        rank 1 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Abstract base class used convert type T to another type V and back again. This
is necessary when the value types of in animation are different from the property
type. BidirectionalTypeConverter is needed when only the final value for the
animation is supplied to animators.
@see PropertyValuesHolder#setConverter(TypeConverter)"
      classrelation 653751 // <realization>
	relation 653751 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 653751 // <realization>
	  b parent class_ref 317495 // TypeConverter
      end

      classrelation 653879 // mInvertedConverter (<unidirectional association>)
	relation 653879 --->
	  a role_name "mInvertedConverter" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 653879 // mInvertedConverter (<unidirectional association>)
	  b parent class_ref 317367 // BidirectionalTypeConverter
      end

      operation 1511479 "BidirectionalTypeConverter"
	public explicit_return_type ""
	nparams 2
	  param inout name "fromClass" type class_ref 132791 // Class
	  param inout name "toClass" type class_ref 132791 // Class
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<T> ${p0}, ${t1}<V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1511607 "convertBack"
	abstract public explicit_return_type "T"
	nparams 1
	  param inout name "value" explicit_type "V"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Does a conversion from the target type back to the source type. The subclass
must implement this when a TypeConverter is used in animations and current
values will need to be read for an animation.
@param value The Object to convert.
@return A value of type T, converted from <code>value</code>."
      end

      operation 1511735 "invert"
	public return_type class_ref 317367 // BidirectionalTypeConverter
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V, T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the inverse of this converter, where the from and to classes are reversed.
The inverted converter uses this convert to call {@link #convertBack(Object)} for
{@link #convert(Object)} calls and {@link #convert(Object)} for
{@link #convertBack(Object)} calls.
@return The inverse of this converter, where the from and to classes are reversed."
      end

      class 317623 "InvertedConverter"
	visibility private 
	nformals 2
	formal name "From" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "To" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 2
	actual class class_ref 317367 // BidirectionalTypeConverter
	  rank 0 explicit_value ""
	actual class class_ref 317367 // BidirectionalTypeConverter
	  rank 1 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 654007 // <realization>
	  relation 654007 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 654007 // <realization>
	    b parent class_ref 317367 // BidirectionalTypeConverter
	end

	classrelation 654135 // mConverter (<unidirectional association>)
	  relation 654135 --->
	    a role_name "mConverter" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<To, From> ${name}${value};
"
	      classrelation_ref 654135 // mConverter (<unidirectional association>)
	    b parent class_ref 317367 // BidirectionalTypeConverter
	end

	operation 1511863 "InvertedConverter"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "converter" type class_ref 317367 // BidirectionalTypeConverter
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<To, From> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1511991 "convertBack"
	  public explicit_return_type "From"
	  nparams 1
	    param inout name "value" explicit_type "To"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1512119 "convert"
	  public explicit_return_type "To"
	  nparams 1
	    param inout name "value" explicit_type "From"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 317495 "TypeConverter"
      abstract visibility public 
      nformals 2
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Abstract base class used convert type T to another type V. This
is necessary when the value types of in animation are different
from the property type.
@see PropertyValuesHolder#setConverter(TypeConverter)"
      classrelation 653495 // mFromClass (<unidirectional association>)
	relation 653495 --->
	  a role_name "mFromClass" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	    classrelation_ref 653495 // mFromClass (<unidirectional association>)
	  b parent class_ref 132791 // Class
      end

      classrelation 653623 // mToClass (<unidirectional association>)
	relation 653623 --->
	  a role_name "mToClass" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<V> ${name}${value};
"
	    classrelation_ref 653623 // mToClass (<unidirectional association>)
	  b parent class_ref 132791 // Class
      end

      operation 1510967 "TypeConverter"
	public explicit_return_type ""
	nparams 2
	  param inout name "fromClass" type class_ref 132791 // Class
	  param inout name "toClass" type class_ref 132791 // Class
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<T> ${p0}, ${t1}<V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1511095 "getTargetType"
	package return_type class_ref 132791 // Class
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the target converted type. Used by the animation system to determine
the proper setter function to call.
@return The Class to convert the input to."
      end

      operation 1511223 "getSourceType"
	package return_type class_ref 132791 // Class
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the source conversion type."
      end

      operation 1511351 "convert"
	abstract public explicit_return_type "V"
	nparams 1
	  param inout name "value" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts a value from one type to another.
@param value The Object to convert.
@return A value of type V, converted from <code>value</code>."
      end
    end

    class 317751 "FloatArrayEvaluator"
      visibility public 
      nactuals 1
      actual class class_ref 316087 // TypeEvaluator
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This evaluator can be used to perform type interpolation between <code>float[]</code> values.
Each index into the array is treated as a separate value to interpolate. For example,
evaluating <code>{100, 200}</code> and <code>{300, 400}</code> will interpolate the value at
the first index between 100 and 300 and the value at the second index value between 200 and 400."
      classrelation 654263 // <realization>
	relation 654263 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 654263 // <realization>
	  b parent class_ref 316087 // TypeEvaluator
      end

      attribute 598327 "mArray"
	private explicit_type "float"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1512247 "FloatArrayEvaluator"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a FloatArrayEvaluator that does not reuse the animated value. Care must be taken
when using this option because on every evaluation a new <code>float[]</code> will be
allocated.

@see #FloatArrayEvaluator(float[])"
      end

      operation 1512375 "FloatArrayEvaluator"
	public explicit_return_type ""
	nparams 1
	  param inout name "reuseArray" explicit_type "float"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a FloatArrayEvaluator that reuses <code>reuseArray</code> for every evaluate() call.
Caution must be taken to ensure that the value returned from
{@link android.animation.ValueAnimator#getAnimatedValue()} is not cached, modified, or
used across threads. The value will be modified on each <code>evaluate()</code> call.

@param reuseArray The array to modify and return from <code>evaluate</code>."
      end

      operation 1512503 "evaluate"
	public explicit_return_type "float"
	nparams 3
	  param in name "fraction" explicit_type "float"
	  param inout name "startValue" explicit_type "float"
	  param inout name "endValue" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Interpolates the value at each index by the fraction. If
{@link #FloatArrayEvaluator(float[])} was used to construct this object,
<code>reuseArray</code> will be returned, otherwise a new <code>float[]</code>
will be returned.

@param fraction   The fraction from the starting to the ending values
@param startValue The start value.
@param endValue   The end value.
@return A <code>float[]</code> where each element is an interpolation between
        the same index in startValue and endValue."
      end
    end

    class 317879 "FloatEvaluator"
      visibility public 
      nactuals 1
      actual class class_ref 316087 // TypeEvaluator
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This evaluator can be used to perform type interpolation between <code>float</code> values."
      classrelation 654391 // <realization>
	relation 654391 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 654391 // <realization>
	  b parent class_ref 316087 // TypeEvaluator
      end

      operation 1512631 "evaluate"
	public explicit_return_type "Float"
	nparams 3
	  param in name "fraction" explicit_type "float"
	  param inout name "startValue" explicit_type "Number"
	  param inout name "endValue" explicit_type "Number"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This function returns the result of linearly interpolating the start and end values, with
<code>fraction</code> representing the proportion between the start and end values. The
calculation is a simple parametric calculation: <code>result = x0 + t * (v1 - v0)</code>,
where <code>x0</code> is <code>startValue</code>, <code>x1</code> is <code>endValue</code>,
and <code>t</code> is <code>fraction</code>.

@param fraction   The fraction from the starting to the ending values
@param startValue The start value; should be of type <code>float</code> or
                  <code>Float</code>
@param endValue   The end value; should be of type <code>float</code> or <code>Float</code>
@return A linear interpolation between the start and end values, given the
        <code>fraction</code> parameter."
      end
    end

    class 318007 "FloatKeyframeSet"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class holds a collection of FloatKeyframe objects and is called by ValueAnimator to calculate
values between those keyframes for a given animation. The class internal to the animation
package because it is an implementation detail of how Keyframes are stored and used.

<p>This type-specific subclass of KeyframeSet, along with the other type-specific subclass for
int, exists to speed up the getValue() method when there is no custom
TypeEvaluator set for the animation, so that values can be calculated without autoboxing to the
Object equivalents of these primitive types.</p>"
      classrelation 655671 // <generalisation>
	relation 655671 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 655671 // <generalisation>
	  b parent class_ref 318135 // KeyframeSet
      end

      classrelation 655799 // <realization>
	relation 655799 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 655799 // <realization>
	  b parent class_ref 318519 // FloatKeyframes
      end

      attribute 598583 "firstValue"
	private explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 598711 "lastValue"
	private explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 598839 "deltaValue"
	private explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 598967 "firstTime"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1515575 "FloatKeyframeSet"
	public explicit_return_type ""
	nparams 1
	  param inout name "" explicit_type "FloatKeyframe...keyframes"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1515703 "getValue"
	public return_type class_ref 132663 // Object
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1515831 "clone"
	public return_type class_ref 318007 // FloatKeyframeSet
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1515959 "invalidateCache"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1516087 "getFloatValue"
	public explicit_return_type "float"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1516215 "getType"
	public return_type class_ref 132791 // Class
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 318135 "KeyframeSet"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class holds a collection of Keyframe objects and is called by ValueAnimator to calculate
values between those keyframes for a given animation. The class internal to the animation
package because it is an implementation detail of how Keyframes are stored and used.
@hide"
      classrelation 654903 // <realization>
	relation 654903 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 654903 // <realization>
	  b parent class_ref 318263 // Keyframes
      end

      attribute 598455 "mNumKeyframes"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 655031 // mFirstKeyframe (<unidirectional association>)
	relation 655031 --->
	  a role_name "mFirstKeyframe" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 655031 // mFirstKeyframe (<unidirectional association>)
	  b parent class_ref 316599 // Keyframe
      end

      classrelation 655159 // mLastKeyframe (<unidirectional association>)
	relation 655159 --->
	  a role_name "mLastKeyframe" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 655159 // mLastKeyframe (<unidirectional association>)
	  b parent class_ref 316599 // Keyframe
      end

      classrelation 655287 // mInterpolator (<unidirectional association>)
	relation 655287 --->
	  a role_name "mInterpolator" package
	    comment " only used in the 2-keyframe case"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 655287 // mInterpolator (<unidirectional association>)
	  b parent class_ref 315319 // TimeInterpolator
      end

      classrelation 655415 // mKeyframes (<unidirectional association>)
	relation 655415 --->
	  stereotype "List"
	  a role_name "mKeyframes" package
	    comment " only used when there are not 2 keyframes"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 655415 // mKeyframes (<unidirectional association>)
	  b parent class_ref 316599 // Keyframe
      end

      classrelation 655543 // mEvaluator (<unidirectional association>)
	relation 655543 --->
	  a role_name "mEvaluator" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 655543 // mEvaluator (<unidirectional association>)
	  b parent class_ref 316087 // TypeEvaluator
      end

      operation 1513783 "KeyframeSet"
	public explicit_return_type ""
	nparams 1
	  param inout name "" explicit_type "Keyframe...keyframes"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1513911 "invalidateCache"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "If subclass has variables that it calculates based on the Keyframes, it should reset them
when this method is called because Keyframe contents might have changed."
      end

      operation 1514039 "getKeyframes"
	public return_type class_ref 316599 // Keyframe
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1514167 "ofInt"
	class_operation public return_type class_ref 318135 // KeyframeSet
	nparams 1
	  param inout name "" explicit_type "int...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1514295 "ofFloat"
	class_operation public return_type class_ref 318135 // KeyframeSet
	nparams 1
	  param inout name "" explicit_type "float...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1514423 "ofKeyframe"
	class_operation public return_type class_ref 318135 // KeyframeSet
	nparams 1
	  param inout name "" explicit_type "Keyframe...keyframes"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1514551 "ofObject"
	class_operation public return_type class_ref 318135 // KeyframeSet
	nparams 1
	  param inout name "" explicit_type "Object...values"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1514679 "ofPath"
	class_operation public return_type class_ref 318647 // PathKeyframes
	nparams 1
	  param inout name "path" type class_ref 272823 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1514807 "ofPath"
	class_operation public return_type class_ref 318647 // PathKeyframes
	nparams 2
	  param inout name "path" type class_ref 272823 // Path
	  param in name "error" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1514935 "setEvaluator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "evaluator" type class_ref 316087 // TypeEvaluator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the TypeEvaluator to be used when calculating animated values. This object
is required only for KeyframeSets that are not either IntKeyframeSet or FloatKeyframeSet,
both of which assume their own evaluator to speed up calculations with those primitive
types.

@param evaluator The TypeEvaluator to be used to calculate animated values."
      end

      operation 1515063 "getType"
	public return_type class_ref 132791 // Class
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1515191 "clone"
	public return_type class_ref 318135 // KeyframeSet
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1515319 "getValue"
	public return_type class_ref 132663 // Object
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the animated value, given the elapsed fraction of the animation (interpolated by the
animation's interpolator) and the evaluator used to calculate in-between values. This
function maps the input fraction to the appropriate keyframe interval and a fraction
between them and returns the interpolated value. Note that the input fraction may fall
outside the [0-1] bounds, if the animation's interpolator made that happen (e.g., a
spring interpolation that might send the fraction past 1.0). We handle this situation by
just using the two keyframes at the appropriate end when the value is outside those bounds.

@param fraction The elapsed fraction of the animation
@return The animated value."
      end

      operation 1515447 "toString"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 318263 "Keyframes"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This interface abstracts a collection of Keyframe objects and is called by
ValueAnimator to calculate values between those keyframes for a given animation.
@hide"
      classrelation 654519 // <generalisation>
	relation 654519 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 654519 // <generalisation>
	  b parent class_ref 242231 // Cloneable
      end

      operation 1512759 "setEvaluator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "evaluator" type class_ref 316087 // TypeEvaluator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the TypeEvaluator to be used when calculating animated values. This object
is required only for Keyframes that are not either IntKeyframes or FloatKeyframes,
both of which assume their own evaluator to speed up calculations with those primitive
types.

@param evaluator The TypeEvaluator to be used to calculate animated values."
      end

      operation 1512887 "getType"
	public return_type class_ref 132791 // Class
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return The value type contained by the contained Keyframes."
      end

      operation 1513015 "getValue"
	public return_type class_ref 132663 // Object
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the animated value, given the elapsed fraction of the animation (interpolated by the
animation's interpolator) and the evaluator used to calculate in-between values. This
function maps the input fraction to the appropriate keyframe interval and a fraction
between them and returns the interpolated value. Note that the input fraction may fall
outside the [0-1] bounds, if the animation's interpolator made that happen (e.g., a
spring interpolation that might send the fraction past 1.0). We handle this situation by
just using the two keyframes at the appropriate end when the value is outside those bounds.

@param fraction The elapsed fraction of the animation
@return The animated value."
      end

      operation 1513143 "invalidateCache"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If subclass has variables that it calculates based on the Keyframes, it should reset them
when this method is called because Keyframe contents might have changed."
      end

      operation 1513271 "getKeyframes"
	public return_type class_ref 316599 // Keyframe
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return A list of all Keyframes contained by this. This may return null if this is
not made up of Keyframes."
      end

      operation 1513399 "clone"
	public return_type class_ref 318263 // Keyframes
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 318391 "IntKeyframes"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 654647 // <generalisation>
	  relation 654647 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 654647 // <generalisation>
	    b parent class_ref 318263 // Keyframes
	end

	operation 1513527 "getIntValue"
	  public explicit_return_type "int"
	  nparams 1
	    param in name "fraction" explicit_type "float"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Works like {@link #getValue(float)}, but returning a primitive.
@param fraction The elapsed fraction of the animation
@return The animated value."
	end
      end

      class 318519 "FloatKeyframes"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 654775 // <generalisation>
	  relation 654775 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 654775 // <generalisation>
	    b parent class_ref 318263 // Keyframes
	end

	operation 1513655 "getFloatValue"
	  public explicit_return_type "float"
	  nparams 1
	    param in name "fraction" explicit_type "float"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Works like {@link #getValue(float)}, but returning a primitive.
@param fraction The elapsed fraction of the animation
@return The animated value."
	end
      end
    end

    class 318647 "PathKeyframes"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "PathKeyframes relies on approximating the Path as a series of line segments.
The line segments are recursively divided until there is less than 1/2 pixel error
between the lines and the curve. Each point of the line segment is converted
to a Keyframe and a linear interpolation between Keyframes creates a good approximation
of the curve.
<p>
PathKeyframes is optimized to reduce the number of objects created when there are
many keyframes for a curve.
</p>
<p>
Typically, the returned type is a PointF, but the individual components can be extracted
as either an IntKeyframes or FloatKeyframes.
</p>
@hide"
      classrelation 663095 // <realization>
	relation 663095 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 663095 // <realization>
	  b parent class_ref 318263 // Keyframes
      end

      attribute 607031 "FRACTION_OFFSET"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 607159 "X_OFFSET"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 607287 "Y_OFFSET"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 607415 "NUM_COMPONENTS"
	class_attribute const_attribute private explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 663223 // EMPTY_KEYFRAMES (<unidirectional association>)
	relation 663223 --->
	  stereotype "ArrayList"
	  a role_name "EMPTY_KEYFRAMES" init_value " new ArrayList<Keyframe>()" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 663223 // EMPTY_KEYFRAMES (<unidirectional association>)
	  b parent class_ref 316599 // Keyframe
      end

      classrelation 663351 // mTempPointF (<unidirectional association>)
	relation 663351 --->
	  a role_name "mTempPointF" init_value " new PointF()" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 663351 // mTempPointF (<unidirectional association>)
	  b parent class_ref 152247 // PointF
      end

      attribute 607543 "mKeyframeData"
	private explicit_type "float"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1541943 "PathKeyframes"
	public explicit_return_type ""
	nparams 1
	  param inout name "path" type class_ref 272823 // Path
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1542071 "PathKeyframes"
	public explicit_return_type ""
	nparams 2
	  param inout name "path" type class_ref 272823 // Path
	  param in name "error" explicit_type "float"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1542199 "getKeyframes"
	public return_type class_ref 316599 // Keyframe
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}ArrayList<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1542327 "getValue"
	public return_type class_ref 132663 // Object
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1542455 "interpolateInRange"
	private return_type class_ref 152247 // PointF
	nparams 3
	  param in name "fraction" explicit_type "float"
	  param in name "startIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1542583 "invalidateCache"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1542711 "setEvaluator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "evaluator" type class_ref 316087 // TypeEvaluator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1542839 "getType"
	public return_type class_ref 132791 // Class
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1542967 "clone"
	public return_type class_ref 318263 // Keyframes
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1543095 "pointForIndex"
	private return_type class_ref 152247 // PointF
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1543223 "interpolate"
	class_operation private explicit_return_type "float"
	nparams 3
	  param in name "fraction" explicit_type "float"
	  param in name "startValue" explicit_type "float"
	  param in name "endValue" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1543351 "createXFloatKeyframes"
	public return_type class_ref 318519 // FloatKeyframes
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a FloatKeyframes for the X component of the Path.
@return a FloatKeyframes for the X component of the Path."
      end

      operation 1543479 "createYFloatKeyframes"
	public return_type class_ref 318519 // FloatKeyframes
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a FloatKeyframes for the Y component of the Path.
@return a FloatKeyframes for the Y component of the Path."
      end

      operation 1543607 "createXIntKeyframes"
	public return_type class_ref 318391 // IntKeyframes
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an IntKeyframes for the X component of the Path.
@return an IntKeyframes for the X component of the Path."
      end

      operation 1543735 "createYIntKeyframes"
	public return_type class_ref 318391 // IntKeyframes
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an IntKeyframeSet for the Y component of the Path.
@return an IntKeyframeSet for the Y component of the Path."
      end

      class 319927 "SimpleKeyframes"
	abstract visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 663479 // <realization>
	  relation 663479 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 663479 // <realization>
	    b parent class_ref 318263 // Keyframes
	end

	operation 1543863 "setEvaluator"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "evaluator" type class_ref 316087 // TypeEvaluator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1543991 "invalidateCache"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1544119 "getKeyframes"
	  public return_type class_ref 316599 // Keyframe
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}ArrayList<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1544247 "clone"
	  public return_type class_ref 318263 // Keyframes
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 320055 "IntKeyframesBase"
	abstract visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 663607 // <generalisation>
	  relation 663607 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 663607 // <generalisation>
	    b parent class_ref 319927 // SimpleKeyframes
	end

	classrelation 663735 // <realization>
	  relation 663735 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 663735 // <realization>
	    b parent class_ref 318391 // IntKeyframes
	end

	operation 1544375 "getType"
	  public return_type class_ref 132791 // Class
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1544503 "getValue"
	  public return_type class_ref 132663 // Object
	  nparams 1
	    param in name "fraction" explicit_type "float"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 320183 "FloatKeyframesBase"
	abstract visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 663863 // <generalisation>
	  relation 663863 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 663863 // <generalisation>
	    b parent class_ref 319927 // SimpleKeyframes
	end

	classrelation 663991 // <realization>
	  relation 663991 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 663991 // <realization>
	    b parent class_ref 318519 // FloatKeyframes
	end

	operation 1544631 "getType"
	  public return_type class_ref 132791 // Class
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1544759 "getValue"
	  public return_type class_ref 132663 // Object
	  nparams 1
	    param in name "fraction" explicit_type "float"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 318775 "IntArrayEvaluator"
      visibility public 
      nactuals 1
      actual class class_ref 316087 // TypeEvaluator
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This evaluator can be used to perform type interpolation between <code>int[]</code> values.
Each index into the array is treated as a separate value to interpolate. For example,
evaluating <code>{100, 200}</code> and <code>{300, 400}</code> will interpolate the value at
the first index between 100 and 300 and the value at the second index value between 200 and 400."
      classrelation 655927 // <realization>
	relation 655927 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 655927 // <realization>
	  b parent class_ref 316087 // TypeEvaluator
      end

      attribute 599095 "mArray"
	private explicit_type "int"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1516343 "IntArrayEvaluator"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an IntArrayEvaluator that does not reuse the animated value. Care must be taken
when using this option because on every evaluation a new <code>int[]</code> will be
allocated.

@see #IntArrayEvaluator(int[])"
      end

      operation 1516471 "IntArrayEvaluator"
	public explicit_return_type ""
	nparams 1
	  param inout name "reuseArray" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an IntArrayEvaluator that reuses <code>reuseArray</code> for every evaluate() call.
Caution must be taken to ensure that the value returned from
{@link android.animation.ValueAnimator#getAnimatedValue()} is not cached, modified, or
used across threads. The value will be modified on each <code>evaluate()</code> call.

@param reuseArray The array to modify and return from <code>evaluate</code>."
      end

      operation 1516599 "evaluate"
	public explicit_return_type "int"
	nparams 3
	  param in name "fraction" explicit_type "float"
	  param inout name "startValue" explicit_type "int"
	  param inout name "endValue" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Interpolates the value at each index by the fraction. If {@link #IntArrayEvaluator(int[])}
was used to construct this object, <code>reuseArray</code> will be returned, otherwise
a new <code>int[]</code> will be returned.

@param fraction   The fraction from the starting to the ending values
@param startValue The start value.
@param endValue   The end value.
@return An <code>int[]</code> where each element is an interpolation between
        the same index in startValue and endValue."
      end
    end

    class 318903 "IntEvaluator"
      visibility public 
      nactuals 1
      actual class class_ref 316087 // TypeEvaluator
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This evaluator can be used to perform type interpolation between <code>int</code> values."
      classrelation 656055 // <realization>
	relation 656055 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 656055 // <realization>
	  b parent class_ref 316087 // TypeEvaluator
      end

      operation 1516727 "evaluate"
	public explicit_return_type "Integer"
	nparams 3
	  param in name "fraction" explicit_type "float"
	  param inout name "startValue" explicit_type "Integer"
	  param inout name "endValue" explicit_type "Integer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This function returns the result of linearly interpolating the start and end values, with
<code>fraction</code> representing the proportion between the start and end values. The
calculation is a simple parametric calculation: <code>result = x0 + t * (v1 - v0)</code>,
where <code>x0</code> is <code>startValue</code>, <code>x1</code> is <code>endValue</code>,
and <code>t</code> is <code>fraction</code>.

@param fraction   The fraction from the starting to the ending values
@param startValue The start value; should be of type <code>int</code> or
                  <code>Integer</code>
@param endValue   The end value; should be of type <code>int</code> or <code>Integer</code>
@return A linear interpolation between the start and end values, given the
        <code>fraction</code> parameter."
      end
    end

    class 319031 "IntKeyframeSet"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class holds a collection of IntKeyframe objects and is called by ValueAnimator to calculate
values between those keyframes for a given animation. The class internal to the animation
package because it is an implementation detail of how Keyframes are stored and used.

<p>This type-specific subclass of KeyframeSet, along with the other type-specific subclass for
float, exists to speed up the getValue() method when there is no custom
TypeEvaluator set for the animation, so that values can be calculated without autoboxing to the
Object equivalents of these primitive types.</p>"
      classrelation 656183 // <generalisation>
	relation 656183 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 656183 // <generalisation>
	  b parent class_ref 318135 // KeyframeSet
      end

      classrelation 656311 // <realization>
	relation 656311 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 656311 // <realization>
	  b parent class_ref 318391 // IntKeyframes
      end

      attribute 599223 "firstValue"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 599351 "lastValue"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 599479 "deltaValue"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 599607 "firstTime"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1516855 "IntKeyframeSet"
	public explicit_return_type ""
	nparams 1
	  param inout name "" explicit_type "IntKeyframe...keyframes"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1516983 "getValue"
	public return_type class_ref 132663 // Object
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1517111 "clone"
	public return_type class_ref 319031 // IntKeyframeSet
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1517239 "invalidateCache"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1517367 "getIntValue"
	public explicit_return_type "int"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1517495 "getType"
	public return_type class_ref 132791 // Class
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 320311 "PointFEvaluator"
      visibility public 
      nactuals 1
      actual class class_ref 316087 // TypeEvaluator
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This evaluator can be used to perform type interpolation between <code>PointF</code> values."
      classrelation 664119 // <realization>
	relation 664119 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 664119 // <realization>
	  b parent class_ref 316087 // TypeEvaluator
      end

      classrelation 664247 // mPoint (<unidirectional association>)
	relation 664247 --->
	  a role_name "mPoint" private
	    comment "
When null, a new PointF is returned on every evaluate call. When non-null,
mPoint will be modified and returned on every evaluate.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 664247 // mPoint (<unidirectional association>)
	  b parent class_ref 152247 // PointF
      end

      operation 1544887 "PointFEvaluator"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a PointFEvaluator that returns a new PointF on every evaluate call.
To avoid creating an object for each evaluate call,
{@link PointFEvaluator#PointFEvaluator(android.graphics.PointF)} should be used
whenever possible."
      end

      operation 1545015 "PointFEvaluator"
	public explicit_return_type ""
	nparams 1
	  param inout name "reuse" type class_ref 152247 // PointF
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a PointFEvaluator that modifies and returns <code>reuse</code>
in {@link #evaluate(float, android.graphics.PointF, android.graphics.PointF)} calls.
The value returned from
{@link #evaluate(float, android.graphics.PointF, android.graphics.PointF)} should
not be cached because it will change over time as the object is reused on each
call.

@param reuse A PointF to be modified and returned by evaluate."
      end

      operation 1545143 "evaluate"
	public return_type class_ref 152247 // PointF
	nparams 3
	  param in name "fraction" explicit_type "float"
	  param inout name "startValue" type class_ref 152247 // PointF
	  param inout name "endValue" type class_ref 152247 // PointF
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "This function returns the result of linearly interpolating the start and
end PointF values, with <code>fraction</code> representing the proportion
between the start and end values. The calculation is a simple parametric
calculation on each of the separate components in the PointF objects
(x, y).

<p>If {@link #PointFEvaluator(android.graphics.PointF)} was used to construct
this PointFEvaluator, the object returned will be the <code>reuse</code>
passed into the constructor.</p>

@param fraction   The fraction from the starting to the ending values
@param startValue The start PointF
@param endValue   The end PointF
@return A linear interpolation between the start and end values, given the
        <code>fraction</code> parameter."
      end
    end

    class 321719 "RectEvaluator"
      visibility public 
      nactuals 1
      actual class class_ref 316087 // TypeEvaluator
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This evaluator can be used to perform type interpolation between <code>Rect</code> values."
      classrelation 668855 // <realization>
	relation 668855 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 668855 // <realization>
	  b parent class_ref 316087 // TypeEvaluator
      end

      classrelation 668983 // mRect (<unidirectional association>)
	relation 668983 --->
	  a role_name "mRect" private
	    comment "
When null, a new Rect is returned on every evaluate call. When non-null,
mRect will be modified and returned on every evaluate.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 668983 // mRect (<unidirectional association>)
	  b parent class_ref 135351 // Rect
      end

      operation 1557687 "RectEvaluator"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a RectEvaluator that returns a new Rect on every evaluate call.
To avoid creating an object for each evaluate call,
{@link RectEvaluator#RectEvaluator(android.graphics.Rect)} should be used
whenever possible."
      end

      operation 1557815 "RectEvaluator"
	public explicit_return_type ""
	nparams 1
	  param inout name "reuseRect" type class_ref 135351 // Rect
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a RectEvaluator that modifies and returns <code>reuseRect</code>
in {@link #evaluate(float, android.graphics.Rect, android.graphics.Rect)} calls.
The value returned from
{@link #evaluate(float, android.graphics.Rect, android.graphics.Rect)} should
not be cached because it will change over time as the object is reused on each
call.

@param reuseRect A Rect to be modified and returned by evaluate."
      end

      operation 1557943 "evaluate"
	public return_type class_ref 135351 // Rect
	nparams 3
	  param in name "fraction" explicit_type "float"
	  param inout name "startValue" type class_ref 135351 // Rect
	  param inout name "endValue" type class_ref 135351 // Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "This function returns the result of linearly interpolating the start and
end Rect values, with <code>fraction</code> representing the proportion
between the start and end values. The calculation is a simple parametric
calculation on each of the separate components in the Rect objects
(left, top, right, and bottom).

<p>If {@link #RectEvaluator(android.graphics.Rect)} was used to construct
this RectEvaluator, the object returned will be the <code>reuseRect</code>
passed into the constructor.</p>

@param fraction   The fraction from the starting to the ending values
@param startValue The start Rect
@param endValue   The end Rect
@return A linear interpolation between the start and end values, given the
        <code>fraction</code> parameter."
      end
    end

    class 321847 "RevealAnimator"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Reveals a View with an animated clipping circle.
The clipping is implemented efficiently by talking to a private reveal API on View.
This hidden class currently only accessed by the {@link android.view.View}.

@hide"
      classrelation 670391 // <generalisation>
	relation 670391 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 670391 // <generalisation>
	  b parent class_ref 321975 // RenderNodeAnimator
      end

      classrelation 670519 // mClipView (<unidirectional association>)
	relation 670519 --->
	  a role_name "mClipView" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 670519 // mClipView (<unidirectional association>)
	  b parent class_ref 134455 // View
      end

      operation 1565367 "RevealAnimator"
	public explicit_return_type ""
	nparams 5
	  param inout name "clipView" type class_ref 134455 // View
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "startRadius" explicit_type "float"
	  param in name "endRadius" explicit_type "float"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1565495 "onFinished"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 322743 "TimeAnimator"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class provides a simple callback mechanism to listeners that is synchronized with all
other animators in the system. There is no duration, interpolation, or object value-setting
with this Animator. Instead, it is simply started, after which it proceeds to send out events
on every animation frame to its TimeListener (if set), with information about this animator,
the total elapsed time, and the elapsed time since the previous animation frame."
      classrelation 671927 // <generalisation>
	relation 671927 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 671927 // <generalisation>
	  b parent class_ref 316343 // ValueAnimator
      end

      class 322871 "TimeListener"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 1569335 "onTimeUpdate"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "animation" type class_ref 322743 // TimeAnimator
	    param in name "totalTime" explicit_type "long"
	    param in name "deltaTime" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "<p>Notifies listeners of the occurrence of another frame of the animation,
along with information about the elapsed time.</p>

@param animation The animator sending out the notification.
@param totalTime The total time elapsed since the animator started, in milliseconds.
@param deltaTime The time elapsed since the previous frame, in milliseconds."
	end
      end

      classrelation 672055 // mListener (<unidirectional association>)
	relation 672055 --->
	  a role_name "mListener" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 672055 // mListener (<unidirectional association>)
	  b parent class_ref 322871 // TimeListener
      end

      attribute 612919 "mPreviousTime"
	private explicit_type "long"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1568567 "start"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1568695 "animateBasedOnTime"
	package explicit_return_type "boolean"
	nparams 1
	  param in name "currentTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1568823 "setCurrentPlayTime"
	public explicit_return_type "void"
	nparams 1
	  param in name "playTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1568951 "setTimeListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 322871 // TimeListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a listener that is sent update events throughout the life of
an animation.

@param listener the listener to be set."
      end

      operation 1569079 "animateValue"
	package explicit_return_type "void"
	nparams 1
	  param in name "fraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1569207 "initAnimation"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 827831 "AnimatorInflaterTest"
      visibility public 
      nactuals 1
      actual class class_ref 828087 // ActivityInstrumentationTestCase2
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 2552503 // <realization>
	relation 2552503 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 2552503 // <realization>
	  b parent class_ref 828087 // ActivityInstrumentationTestCase2
      end

      attribute 2805815 "identityHashes"
	package explicit_type "Integer"
	init_value " new HashSet<Integer>()"
	stereotype "Set"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 6589367 "AnimatorInflaterTest"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6589495 "assertUnique"
	private explicit_return_type "void"
	nparams 1
	  param inout name "object" type class_ref 132663 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6589623 "assertUnique"
	private explicit_return_type "void"
	nparams 2
	  param inout name "object" type class_ref 132663 // Object
	  param inout name "msg" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6589751 "testLoadStateListAnimator"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 827959 "BasicAnimatorActivity"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 2557111 // <generalisation>
	relation 2557111 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 2557111 // <generalisation>
	  b parent class_ref 128183 // Activity
      end

      classrelation 2557239 // mAnimatingButton (<unidirectional association>)
	relation 2557239 --->
	  a role_name "mAnimatingButton" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2557239 // mAnimatingButton (<unidirectional association>)
	  b parent class_ref 268215 // Button
      end

      operation 6599095 "onCreate"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "savedInstanceState" type class_ref 131511 // Bundle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 828343 "AnimatorSetActivity"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 2552631 // <generalisation>
	relation 2552631 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 2552631 // <generalisation>
	  b parent class_ref 128183 // Activity
      end

      operation 6589879 "onCreate"
	public explicit_return_type "void"
	nparams 1
	  param inout name "savedBundleInstance" type class_ref 131511 // Bundle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 828471 "AnimatorSetActivityTest"
      visibility public 
      nactuals 1
      actual class class_ref 828087 // ActivityInstrumentationTestCase2
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 2552759 // <realization>
	relation 2552759 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 2552759 // <realization>
	  b parent class_ref 828087 // ActivityInstrumentationTestCase2
      end

      attribute 2805943 "POLL_INTERVAL"
	class_attribute const_attribute private explicit_type "long"
	init_value " 100"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " ms"
      end

      classrelation 2552887 // mActivity (<unidirectional association>)
	relation 2552887 --->
	  a role_name "mActivity" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2552887 // mActivity (<unidirectional association>)
	  b parent class_ref 828343 // AnimatorSetActivity
      end

      classrelation 2553015 // a1 (<unidirectional association>)
	relation 2553015 --->
	  a role_name "a1" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2553015 // a1 (<unidirectional association>)
	  b parent class_ref 314551 // ObjectAnimator
      end

      classrelation 2553143 // a2 (<unidirectional association>)
	relation 2553143 --->
	  a role_name "a2" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2553143 // a2 (<unidirectional association>)
	  b parent class_ref 314551 // ObjectAnimator
      end

      classrelation 2553271 // a3 (<unidirectional association>)
	relation 2553271 --->
	  a role_name "a3" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2553271 // a3 (<unidirectional association>)
	  b parent class_ref 314551 // ObjectAnimator
      end

      classrelation 2553399 // a4 (<unidirectional association>)
	relation 2553399 --->
	  a role_name "a4" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2553399 // a4 (<unidirectional association>)
	  b parent class_ref 316343 // ValueAnimator
      end

      classrelation 2553527 // a5 (<unidirectional association>)
	relation 2553527 --->
	  a role_name "a5" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2553527 // a5 (<unidirectional association>)
	  b parent class_ref 316343 // ValueAnimator
      end

      operation 6590007 "AnimatorSetActivityTest"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 828599 "MyListener"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 2553655 // <realization>
	  relation 2553655 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 2553655 // <realization>
	    b parent class_ref 314935 // AnimatorListener
	end

	attribute 2806071 "startIsCalled"
	  package explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2806199 "endIsCalled"
	  package explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2806327 "cancelIsCalled"
	  package explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 6590135 "onAnimationStart"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 6590263 "onAnimationEnd"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 6590391 "onAnimationCancel"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 6590519 "onAnimationRepeat"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      operation 6590647 "setUp"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 6590775 "tearDown"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 6590903 "testGetChildAnimations"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 6591031 "testTotalDuration"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 6591159 "testGetDuration"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 6591287 "testSetDuration"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
@UiThreadTest
"
	
	
	
      end

      operation 6591415 "testAddListener"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "InterruptedException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 6591543 "testRemoveListener"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 6591671 "testEnd"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 6591799 "testStart"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 6591927 "testCancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 6592055 "testIsRunning"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 6592183 "testPauseAndResume"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 6592311 "testClone"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 6592439 "onlyContains"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "animators" explicit_type "ArrayList<Animator>"
	  param inout name "" explicit_type "AnimatorSet...sets"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check that the animator list contains exactly the given animators and nothing else."
      end

      operation 6592567 "getSequentialSet"
	private return_type class_ref 316471 // AnimatorSet
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Create an AnimatorSet with all the animators running sequentially"
      end

      operation 6592695 "getAnimatorList"
	private return_type class_ref 314807 // Animator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}ArrayList<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 828727 "AnimatorSetEventsTest"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Listener tests for AnimatorSet."
      classrelation 2556215 // <generalisation>
	relation 2556215 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 2556215 // <generalisation>
	  b parent class_ref 828855 // EventsTest
      end

      classrelation 2556343 // button (<unidirectional association>)
	relation 2556343 --->
	  a role_name "button" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2556343 // button (<unidirectional association>)
	  b parent class_ref 268215 // Button
      end

      classrelation 2556471 // xAnim (<unidirectional association>)
	relation 2556471 --->
	  a role_name "xAnim" init_value " ObjectAnimator.ofFloat(this, \"translationX\", 0, 100)" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2556471 // xAnim (<unidirectional association>)
	  b parent class_ref 314551 // ObjectAnimator
      end

      classrelation 2556599 // yAnim (<unidirectional association>)
	relation 2556599 --->
	  a role_name "yAnim" init_value " ObjectAnimator.ofFloat(this, \"translationY\", 0, 100)" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2556599 // yAnim (<unidirectional association>)
	  b parent class_ref 314551 // ObjectAnimator
      end

      operation 6597175 "setUp"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 6597303 "getTimeout"
	protected explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 6597431 "testPlayingCancelDuringChildDelay"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Tests that an AnimatorSet can be correctly canceled during the delay of one of
its children"
      end

      operation 6597559 "setTranslationX"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6597687 "setTranslationY"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 828855 "EventsTest"
      abstract visibility public 
      nactuals 1
      actual class class_ref 828087 // ActivityInstrumentationTestCase2
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Tests for the various lifecycle events of Animators. This abstract class is subclassed by
concrete implementations that provide the actual Animator objects being tested. All of the
testing mechanisms are in this class; the subclasses are only responsible for providing
the mAnimator object.

This test is more complicated than a typical synchronous test because much of the functionality
must happen on the UI thread. Some tests do this by using the UiThreadTest annotation to
automatically run the whole test on that thread. Other tests must run on the UI thread and also
wait for some later event to occur before ending. These tests use a combination of an
AbstractFuture mechanism and a delayed action to release that Future later."
      classrelation 2553783 // <realization>
	relation 2553783 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 2553783 // <realization>
	  b parent class_ref 828087 // ActivityInstrumentationTestCase2
      end

      attribute 2806455 "ANIM_DURATION"
	class_attribute const_attribute protected explicit_type "int"
	init_value " 400"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2806583 "ANIM_DELAY"
	class_attribute const_attribute protected explicit_type "int"
	init_value " 100"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2806711 "ANIM_MID_DURATION"
	class_attribute const_attribute protected explicit_type "int"
	init_value " ANIM_DURATION / 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2806839 "ANIM_MID_DELAY"
	class_attribute const_attribute protected explicit_type "int"
	init_value " ANIM_DELAY / 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2806967 "ANIM_PAUSE_DURATION"
	class_attribute const_attribute protected explicit_type "int"
	init_value " ANIM_DELAY"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2807095 "ANIM_PAUSE_DELAY"
	class_attribute const_attribute protected explicit_type "int"
	init_value " ANIM_DELAY / 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2807223 "FUTURE_RELEASE_DELAY"
	class_attribute const_attribute protected explicit_type "int"
	init_value " 50"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2807351 "ANIM_FULL_DURATION_SLOP"
	class_attribute const_attribute protected explicit_type "int"
	init_value " 100"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2807479 "mStarted"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " tracks whether we've received the onAnimationStart() callback"
      end

      attribute 2807607 "mRunning"
	protected explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " tracks whether we've started the animator"
      end

      attribute 2807735 "mCanceled"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " tracks whether we've canceled the animator"
      end

      classrelation 2553911 // mFutureListener (<unidirectional association>)
	relation 2553911 --->
	  a role_name "mFutureListener" protected
	    comment " mechanism for delaying end of the test"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2553911 // mFutureListener (<unidirectional association>)
	  b parent class_ref 314935 // AnimatorListener
      end

      classrelation 2554039 // mFuture (<unidirectional association>)
	relation 2554039 --->
	  a role_name "mFuture" protected
	    comment " Mechanism for waiting for the UI test to complete"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2554039 // mFuture (<unidirectional association>)
	  b parent class_ref 828983 // FutureWaiter
      end

      classrelation 2554167 // mListener (<unidirectional association>)
	relation 2554167 --->
	  a role_name "mListener" private
	    comment " Listener that handles/tests the events"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2554167 // mListener (<unidirectional association>)
	  b parent class_ref 314935 // AnimatorListener
      end

      classrelation 2554295 // mAnimator (<unidirectional association>)
	relation 2554295 --->
	  a role_name "mAnimator" protected
	    comment " The animator used in the tests. Must be set in subclass"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2554295 // mAnimator (<unidirectional association>)
	  b parent class_ref 314807 // Animator
      end

      class 829111 "Canceler"
	visibility protected 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 2554423 // <realization>
	  relation 2554423 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 2554423 // <realization>
	    b parent class_ref 149943 // Runnable
	end

	classrelation 2554551 // mAnim (<unidirectional association>)
	  relation 2554551 --->
	    a role_name "mAnim" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2554551 // mAnim (<unidirectional association>)
	    b parent class_ref 314807 // Animator
	end

	classrelation 2554679 // mFuture (<unidirectional association>)
	  relation 2554679 --->
	    a role_name "mFuture" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2554679 // mFuture (<unidirectional association>)
	    b parent class_ref 828983 // FutureWaiter
	end

	operation 6592823 "Canceler"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "anim" type class_ref 314807 // Animator
	    param inout name "future" type class_ref 828983 // FutureWaiter
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6592951 "run"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      operation 6593079 "getTimeout"
	protected explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Timeout length, based on when the animation should reasonably be complete."
      end

      class 829239 "Ender"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 2554807 // <realization>
	  relation 2554807 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 2554807 // <realization>
	    b parent class_ref 149943 // Runnable
	end

	classrelation 2554935 // mAnim (<unidirectional association>)
	  relation 2554935 --->
	    a role_name "mAnim" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2554935 // mAnim (<unidirectional association>)
	    b parent class_ref 314807 // Animator
	end

	classrelation 2555063 // mFuture (<unidirectional association>)
	  relation 2555063 --->
	    a role_name "mFuture" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2555063 // mFuture (<unidirectional association>)
	    b parent class_ref 828983 // FutureWaiter
	end

	operation 6593207 "Ender"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "anim" type class_ref 314807 // Animator
	    param inout name "future" type class_ref 828983 // FutureWaiter
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6593335 "run"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 829367 "Pauser"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 2555191 // <realization>
	  relation 2555191 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 2555191 // <realization>
	    b parent class_ref 149943 // Runnable
	end

	classrelation 2555319 // mAnim (<unidirectional association>)
	  relation 2555319 --->
	    a role_name "mAnim" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2555319 // mAnim (<unidirectional association>)
	    b parent class_ref 314807 // Animator
	end

	classrelation 2555447 // mFuture (<unidirectional association>)
	  relation 2555447 --->
	    a role_name "mFuture" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2555447 // mFuture (<unidirectional association>)
	    b parent class_ref 828983 // FutureWaiter
	end

	operation 6593463 "Pauser"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "anim" type class_ref 314807 // Animator
	    param inout name "future" type class_ref 828983 // FutureWaiter
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6593591 "run"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 829495 "Resumer"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 2555575 // <realization>
	  relation 2555575 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 2555575 // <realization>
	    b parent class_ref 149943 // Runnable
	end

	classrelation 2555703 // mAnim (<unidirectional association>)
	  relation 2555703 --->
	    a role_name "mAnim" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2555703 // mAnim (<unidirectional association>)
	    b parent class_ref 314807 // Animator
	end

	classrelation 2555831 // mFuture (<unidirectional association>)
	  relation 2555831 --->
	    a role_name "mFuture" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2555831 // mFuture (<unidirectional association>)
	    b parent class_ref 828983 // FutureWaiter
	end

	operation 6593719 "Resumer"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "anim" type class_ref 314807 // Animator
	    param inout name "future" type class_ref 828983 // FutureWaiter
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6593847 "run"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 829623 "FutureReleaseListener"
	visibility protected 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 2555959 // <generalisation>
	  relation 2555959 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 2555959 // <generalisation>
	    b parent class_ref 316727 // AnimatorListenerAdapter
	end

	classrelation 2556087 // mFuture (<unidirectional association>)
	  relation 2556087 --->
	    a role_name "mFuture" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2556087 // mFuture (<unidirectional association>)
	    b parent class_ref 828983 // FutureWaiter
	end

	operation 6593975 "FutureReleaseListener"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "future" type class_ref 828983 // FutureWaiter
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6594103 "FutureReleaseListener"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "future" type class_ref 828983 // FutureWaiter
	    param in name "timeout" explicit_type "long"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Variant constructor that auto-releases the FutureWaiter after the specified timeout.
@param future
@param timeout"
	end

	operation 6594231 "onAnimationEnd"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      operation 6594359 "EventsTest"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6594487 "setUp"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets up the fields used by each test. Subclasses must override this method to create
the protected mAnimator object used in all tests. Overrides must create that animator
and then call super.setup(), where further properties are set on that animator.
@throws Exception"
      end

      operation 6594615 "testCancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@UiThreadTest
@SmallTest
"
	
	
	
	comment "Verify that calling cancel on an unstarted animator does nothing."
      end

      operation 6594743 "testEnd"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@UiThreadTest
@SmallTest
"
	
	
	
	comment "Verify that calling end on an unstarted animator starts/ends an animator."
      end

      operation 6594871 "testStartCancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@UiThreadTest
@SmallTest
"
	
	
	
	comment "Verify that calling cancel on a started animator does the right thing."
      end

      operation 6594999 "testStartEnd"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@UiThreadTest
@SmallTest
"
	
	
	
	comment "Verify that calling end on a started animator does the right thing."
      end

      operation 6595127 "testStartDelayedCancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
	comment "Same as testStartCancel, but with a startDelayed animator"
      end

      operation 6595255 "testStartDelayedEnd"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
	comment "Same as testStartEnd, but with a startDelayed animator"
      end

      operation 6595383 "testPlayingCancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Verify that canceling an animator that is playing does the right thing."
      end

      operation 6595511 "testPlayingEnd"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Verify that ending an animator that is playing does the right thing."
      end

      operation 6595639 "testPlayingDelayedCancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Same as testPlayingCancel, but with a startDelayed animator"
      end

      operation 6595767 "testPlayingDelayedEnd"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Same as testPlayingEnd, but with a startDelayed animator"
      end

      operation 6595895 "testPlayingDelayedCancelMidDelay"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Same as testPlayingDelayedCancel, but cancel during the startDelay period"
      end

      operation 6596023 "testPlayingDelayedEndMidDelay"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Same as testPlayingDelayedEnd, but end during the startDelay period"
      end

      operation 6596151 "testStartDoubleCancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Verifies that canceling a started animation after it has already been canceled
does nothing."
      end

      operation 6596279 "testStartDoubleEnd"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Verifies that ending a started animation after it has already been ended
does nothing."
      end

      operation 6596407 "testStartDelayedDoubleCancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Same as testStartDoubleCancel, but with a startDelayed animator"
      end

      operation 6596535 "testStartDelayedDoubleEnd"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Same as testStartDoubleEnd, but with a startDelayed animator"
      end

      operation 6596663 "testPauseResume"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Verify that pausing and resuming an animator ends within
the appropriate timeout duration."
      end

      operation 6596791 "testPauseResumeDelayed"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Verify that pausing and resuming a startDelayed animator ends within
the appropriate timeout duration."
      end

      operation 6596919 "testPauseTimeout"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Verify that pausing an animator without resuming it causes a timeout."
      end

      operation 6597047 "testPauseTimeoutDelayed"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Verify that pausing a startDelayed animator without resuming it causes a timeout."
      end
    end

    class 828983 "FutureWaiter"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Simple extension of {@link com.google.common.util.concurrent.AbstractFuture} which exposes a new
release() method which calls the protected
{@link com.google.common.util.concurrent.AbstractFuture#set(Object)} method internally. It
also exposes the protected {@link AbstractFuture#setException(Throwable)} method."
      classrelation 2557367 // <realization>
	relation 2557367 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}<Boolean>"
	    classrelation_ref 2557367 // <realization>
	  b parent class_ref 829879 // AbstractFuture
      end

      operation 6599223 "release"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Release the Future currently waiting on
{@link com.google.common.util.concurrent.AbstractFuture#get()}."
      end

      operation 6599351 "set"
	public explicit_return_type "void"
	nparams 1
	  param inout name "result" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used to indicate failure (when the result value is false)."
      end

      operation 6599479 "setException"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "throwable" explicit_type "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 829751 "AutoCancelTest"
      visibility public 
      nactuals 1
      actual class class_ref 828087 // ActivityInstrumentationTestCase2
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 2556727 // <realization>
	relation 2556727 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 2556727 // <realization>
	  b parent class_ref 828087 // ActivityInstrumentationTestCase2
      end

      attribute 2807863 "mAnimX1Canceled"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2807991 "mAnimXY1Canceled"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2808119 "mAnimX2Canceled"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2808247 "mAnimXY2Canceled"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2808375 "START_DELAY"
	class_attribute const_attribute private explicit_type "long"
	init_value " 100"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2808503 "DELAYED_START_DURATION"
	class_attribute const_attribute private explicit_type "long"
	init_value " 200"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2808631 "FUTURE_TIMEOUT"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 2556855 // mCanceledMap (<unidirectional association>)
	relation 2556855 --->
	  stereotype "HashMap"
	  a role_name "mCanceledMap" init_value " new HashMap<Animator, Boolean>()" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}, Boolean> ${name}${value};
"
	    classrelation_ref 2556855 // mCanceledMap (<unidirectional association>)
	  b parent class_ref 314807 // Animator
      end

      operation 6597815 "AutoCancelTest"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6597943 "setupAnimator"
	package return_type class_ref 314551 // ObjectAnimator
	nparams 2
	  param in name "startDelay" explicit_type "long"
	  param inout name "" explicit_type "String...properties"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6598071 "setupAnimators"
	private explicit_return_type "void"
	nparams 3
	  param in name "startDelay" explicit_type "long"
	  param inout name "startLater" explicit_type "boolean"
	  param in name "future" type class_ref 828983 // FutureWaiter
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, final ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6598199 "testAutoCancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 6598327 "testAutoCancelDelayed"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 6598455 "testAutoCancelTestLater"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 6598583 "testAutoCancelDelayedTestLater"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      classrelation 2556983 // mCanceledListener (<unidirectional association>)
	relation 2556983 --->
	  a role_name "mCanceledListener" init_value " new AnimatorListenerAdapter() {
        @Override
        public void onAnimationCancel(Animator animation) {
            mCanceledMap.put(animation, true);
        }
    }" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2556983 // mCanceledListener (<unidirectional association>)
	  b parent class_ref 316727 // AnimatorListenerAdapter
      end

      operation 6598711 "setX"
	public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6598839 "setY"
	public explicit_return_type "void"
	nparams 1
	  param in name "y" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6598967 "setZ"
	public explicit_return_type "void"
	nparams 1
	  param in name "z" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 830007 "ObjectAnimatorEventsTest"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Listener tests for ObjectAnimator."
      classrelation 2557495 // <generalisation>
	relation 2557495 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 2557495 // <generalisation>
	  b parent class_ref 828855 // EventsTest
      end

      operation 6599607 "setUp"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 830135 "StateListAnimatorTest"
      visibility public 
      nactuals 1
      actual class class_ref 828087 // ActivityInstrumentationTestCase2
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 2557623 // <realization>
	relation 2557623 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 2557623 // <realization>
	  b parent class_ref 828087 // ActivityInstrumentationTestCase2
      end

      operation 6599735 "StateListAnimatorTest"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6599863 "setUp"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 6599991 "testInflateFromAnimator"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6600119 "testAttachDetach"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@UiThreadTest
"
	
	
	
      end

      operation 6600247 "testStateListLoading"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "InterruptedException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 830263 "ValueAnimatorEventsTest"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Listener tests for ValueAnimator."
      classrelation 2557751 // <generalisation>
	relation 2557751 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 2557751 // <generalisation>
	  b parent class_ref 828855 // EventsTest
      end

      operation 6600375 "setUp"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 830391 "ValueAnimatorTests"
      visibility public 
      nactuals 1
      actual class class_ref 828087 // ActivityInstrumentationTestCase2
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 2557879 // <realization>
	relation 2557879 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 2557879 // <realization>
	  b parent class_ref 828087 // ActivityInstrumentationTestCase2
      end

      attribute 2808759 "WAIT_TIME_OUT"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 2558007 // a1 (<unidirectional association>)
	relation 2558007 --->
	  a role_name "a1" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2558007 // a1 (<unidirectional association>)
	  b parent class_ref 316343 // ValueAnimator
      end

      classrelation 2558135 // a2 (<unidirectional association>)
	relation 2558135 --->
	  a role_name "a2" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2558135 // a2 (<unidirectional association>)
	  b parent class_ref 316343 // ValueAnimator
      end

      attribute 2808887 "TOLERANCE"
	class_attribute const_attribute private explicit_type "long"
	init_value " 100"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Tolerance of error in calculations related to duration, frame time, etc. due to frame delay.
 ms"
      end

      attribute 2809015 "POLL_INTERVAL"
	class_attribute const_attribute private explicit_type "long"
	init_value " 100"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " ms"
      end

      attribute 2809143 "A1_START_VALUE"
	class_attribute const_attribute private explicit_type "float"
	init_value " 0f"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2809271 "A1_END_VALUE"
	class_attribute const_attribute private explicit_type "float"
	init_value " 1f"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2809399 "A2_START_VALUE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 100"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2809527 "A2_END_VALUE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 200"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2809655 "DEFAULT_FRAME_INTERVAL"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "ms"
      end

      attribute 2809783 "COMMIT_DELAY"
	class_attribute const_attribute private explicit_type "long"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "ms"
      end

      operation 6600503 "ValueAnimatorTests"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6600631 "setUp"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 6600759 "tearDown"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 6600887 "testStartDelay"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 6601015 "testListenerCallbacks"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 6601143 "testIsStarted"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 6601271 "testPause"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 6601399 "testPauseListener"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 6601527 "testResume"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 6601655 "testEnd"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 6601783 "testEndValue"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 6601911 "testUpdateListener"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "InterruptedException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 6602039 "testConcurrentModification"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 6602167 "testSeek"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 6602295 "testSeekWhileRunning"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 6602423 "testEndBeforeStart"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 6602551 "testZeroDuration"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 6602679 "testZeroScale"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 6602807 "testReverse"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      class 830519 "MyUpdateListener"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 2558263 // <realization>
	  relation 2558263 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 2558263 // <realization>
	    b parent class_ref 319671 // AnimatorUpdateListener
	end

	attribute 2809911 "wasRunning"
	  package explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2810039 "firstRunningFrameTime"
	  package explicit_type "long"
	  init_value " -1"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2810167 "lastUpdateTime"
	  package explicit_type "long"
	  init_value " -1"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2810295 "startFraction"
	  package explicit_type "float"
	  init_value " 0"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 6602935 "onAnimationUpdate"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 316343 // ValueAnimator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 6603063 "reset"
	  package explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 830647 "MyListener"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 2558391 // <realization>
	  relation 2558391 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 2558391 // <realization>
	    b parent class_ref 314935 // AnimatorListener
	end

	attribute 2810423 "startCalled"
	  package explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2810551 "cancelCalled"
	  package explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2810679 "endCalled"
	  package explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2810807 "startTime"
	  package explicit_type "long"
	  init_value " -1"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2810935 "endTime"
	  package explicit_type "long"
	  init_value " -1"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 6603191 "onAnimationStart"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 6603319 "onAnimationEnd"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 6603447 "onAnimationCancel"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 6603575 "onAnimationRepeat"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 830775 "MyPauseListener"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 2558519 // <realization>
	  relation 2558519 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 2558519 // <realization>
	    b parent class_ref 315063 // AnimatorPauseListener
	end

	attribute 2811063 "pauseCalled"
	  package explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2811191 "resumeCalled"
	  package explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 6603703 "onAnimationPause"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 6603831 "onAnimationResume"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 830903 "MyFrameCallbackProvider"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 2558647 // <realization>
	  relation 2558647 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 2558647 // <realization>
	    b parent class_ref 314423 // AnimationFrameCallbackProvider
	end

	classrelation 2558775 // mHandler (<unidirectional association>)
	  relation 2558775 --->
	    a role_name "mHandler" init_value " null" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2558775 // mHandler (<unidirectional association>)
	    b parent class_ref 132023 // Handler
	end

	attribute 2811319 "MSG_FRAME"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " 0"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2811447 "mFrameDelay"
	  private explicit_type "long"
	  init_value " DEFAULT_FRAME_INTERVAL"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 2558903 // mFrameCallbacks (<unidirectional association>)
	  relation 2558903 --->
	    stereotype "ArrayList"
	    a role_name "mFrameCallbacks" init_value " new ArrayList<>()" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	      classrelation_ref 2558903 // mFrameCallbacks (<unidirectional association>)
	    b parent class_ref 275511 // FrameCallback
	end

	class 831031 "LooperThread"
	  visibility package 
	  cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	  java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	  classrelation 2559159 // <generalisation>
	    relation 2559159 ---|>
	      a public
		cpp default "${type}"
		java "${type}"
		classrelation_ref 2559159 // <generalisation>
	      b parent class_ref 295863 // Thread
	  end

	  operation 6604727 "run"
	    public explicit_return_type "void"
	    nparams 0
	    cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	    cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end
	end

	classrelation 2559031 // mThread (<unidirectional association>)
	  relation 2559031 --->
	    a role_name "mThread" init_value " new LooperThread()" const_relation package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2559031 // mThread (<unidirectional association>)
	    b parent class_ref 831031 // LooperThread
	end

	operation 6603959 "MyFrameCallbackProvider"
	  public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6604087 "postFrameCallback"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "callback" type class_ref 275511 // FrameCallback
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 6604215 "postCommitCallback"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "runnable" explicit_type "Runnable"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 6604343 "getFrameTime"
	  public explicit_return_type "long"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 6604471 "getFrameDelay"
	  public explicit_return_type "long"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 6604599 "setFrameDelay"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "delay" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 831159 "ViewPropertyAnimatorTest"
      abstract visibility public 
      nactuals 1
      actual class class_ref 828087 // ActivityInstrumentationTestCase2
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Tests for the various lifecycle events of Animators. This abstract class is subclassed by
concrete implementations that provide the actual Animator objects being tested. All of the
testing mechanisms are in this class; the subclasses are only responsible for providing
the mAnimator object.

This test is more complicated than a typical synchronous test because much of the functionality
must happen on the UI thread. Some tests do this by using the UiThreadTest annotation to
automatically run the whole test on that thread. Other tests must run on the UI thread and also
wait for some later event to occur before ending. These tests use a combination of an
AbstractFuture mechanism and a delayed action to release that Future later."
      classrelation 2559287 // <realization>
	relation 2559287 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 2559287 // <realization>
	  b parent class_ref 828087 // ActivityInstrumentationTestCase2
      end

      attribute 2811575 "ANIM_DURATION"
	class_attribute const_attribute protected explicit_type "int"
	init_value " 400"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2811703 "ANIM_DELAY"
	class_attribute const_attribute protected explicit_type "int"
	init_value " 100"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2811831 "ANIM_MID_DURATION"
	class_attribute const_attribute protected explicit_type "int"
	init_value " ANIM_DURATION / 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2811959 "ANIM_MID_DELAY"
	class_attribute const_attribute protected explicit_type "int"
	init_value " ANIM_DELAY / 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2812087 "FUTURE_RELEASE_DELAY"
	class_attribute const_attribute protected explicit_type "int"
	init_value " 50"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2812215 "mStarted"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " tracks whether we've received the onAnimationStart() callback"
      end

      attribute 2812343 "mRunning"
	protected explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " tracks whether we've started the animator"
      end

      attribute 2812471 "mCanceled"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " trackes whether we've canceled the animator"
      end

      classrelation 2559415 // mFutureListener (<unidirectional association>)
	relation 2559415 --->
	  a role_name "mFutureListener" protected
	    comment " mechanism for delaying the end of the test"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2559415 // mFutureListener (<unidirectional association>)
	  b parent class_ref 314935 // AnimatorListener
      end

      classrelation 2559543 // mFuture (<unidirectional association>)
	relation 2559543 --->
	  a role_name "mFuture" protected
	    comment " Mechanism for waiting for the UI test to complete"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2559543 // mFuture (<unidirectional association>)
	  b parent class_ref 828983 // FutureWaiter
      end

      classrelation 2559671 // mListener (<unidirectional association>)
	relation 2559671 --->
	  a role_name "mListener" private
	    comment " Listener that handles/tests the events"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2559671 // mListener (<unidirectional association>)
	  b parent class_ref 314935 // AnimatorListener
      end

      classrelation 2559799 // mAnimator (<unidirectional association>)
	relation 2559799 --->
	  a role_name "mAnimator" protected
	    comment " The animator used in the tests. Must be set in subclass"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2559799 // mAnimator (<unidirectional association>)
	  b parent class_ref 145335 // ViewPropertyAnimator
      end

      class 831287 "Canceler"
	visibility protected 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 2559927 // <realization>
	  relation 2559927 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 2559927 // <realization>
	    b parent class_ref 149943 // Runnable
	end

	classrelation 2560055 // mAnim (<unidirectional association>)
	  relation 2560055 --->
	    a role_name "mAnim" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2560055 // mAnim (<unidirectional association>)
	    b parent class_ref 145335 // ViewPropertyAnimator
	end

	classrelation 2560183 // mFuture (<unidirectional association>)
	  relation 2560183 --->
	    a role_name "mFuture" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2560183 // mFuture (<unidirectional association>)
	    b parent class_ref 828983 // FutureWaiter
	end

	operation 6604855 "Canceler"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "anim" type class_ref 145335 // ViewPropertyAnimator
	    param inout name "future" type class_ref 828983 // FutureWaiter
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6604983 "run"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      operation 6605111 "getTimeout"
	protected explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Timeout length, based on when the animation should reasonably be complete."
      end

      class 831415 "FutureReleaseListener"
	visibility protected 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 2560311 // <generalisation>
	  relation 2560311 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 2560311 // <generalisation>
	    b parent class_ref 316727 // AnimatorListenerAdapter
	end

	classrelation 2560439 // mFuture (<unidirectional association>)
	  relation 2560439 --->
	    a role_name "mFuture" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2560439 // mFuture (<unidirectional association>)
	    b parent class_ref 828983 // FutureWaiter
	end

	operation 6605239 "FutureReleaseListener"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "future" type class_ref 828983 // FutureWaiter
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6605367 "FutureReleaseListener"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "future" type class_ref 828983 // FutureWaiter
	    param in name "timeout" explicit_type "long"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Variant constructor that auto-releases the FutureWaiter after the specified timeout.
@param future
@param timeout"
	end

	operation 6605495 "onAnimationEnd"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      operation 6605623 "ViewPropertyAnimatorTest"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6605751 "setUp"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets up the fields used by each test. Subclasses must override this method to create
the protected mAnimator object used in all tests. Overrides must create that animator
and then call super.setup(), where further properties are set on that animator.
@throws Exception"
      end

      operation 6605879 "testCancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@UiThreadTest
@SmallTest
"
	
	
	
	comment "Verify that calling cancel on an unstarted animator does nothing."
      end

      operation 6606007 "testStartCancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@UiThreadTest
@SmallTest
"
	
	
	
	comment "Verify that calling cancel on a started animator does the right thing."
      end

      operation 6606135 "testStartDelayedCancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
	comment "Same as testStartCancel, but with a startDelayed animator"
      end

      operation 6606263 "testPlayingCancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Verify that canceling an animator that is playing does the right thing."
      end

      operation 6606391 "testPlayingDelayedCancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Same as testPlayingCancel, but with a startDelayed animator"
      end

      operation 6606519 "testPlayingDelayedCancelMidDelay"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Same as testPlayingDelayedCancel, but cancel during the startDelay period"
      end

      operation 6606647 "testStartDoubleCancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Verifies that canceling a started animation after it has already been canceled
does nothing."
      end

      operation 6606775 "testStartDelayedDoubleCancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@MediumTest
"
	
	
	
	comment "Same as testStartDoubleCancel, but with a startDelayed animator"
      end
    end

    class 1837623 "AnimationThread"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Abstract animation thread.
<p/>
This does not actually start an animation, instead it fakes a looper that will play whatever
animation is sending messages to its own {@link Handler}.
<p/>
Classes should implement {@link #preAnimation()} and {@link #postAnimation()}.
<p/>
If {@link #preAnimation()} does not start an animation somehow then the thread doesn't do
anything.
"
      classrelation 5890103 // <generalisation>
	relation 5890103 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 5890103 // <generalisation>
	  b parent class_ref 1030455 // Thread
      end

      class 1837751 "MessageBundle"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 5890231 // <realization>
	  relation 5890231 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}<MessageBundle>"
	      classrelation_ref 5890231 // <realization>
	    b parent class_ref 153783 // Comparable
	end

	classrelation 5890359 // mTarget (<unidirectional association>)
	  relation 5890359 --->
	    a role_name "mTarget" const_relation package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 5890359 // mTarget (<unidirectional association>)
	    b parent class_ref 132023 // Handler
	end

	classrelation 5890487 // mMessage (<unidirectional association>)
	  relation 5890487 --->
	    a role_name "mMessage" const_relation package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 5890487 // mMessage (<unidirectional association>)
	    b parent class_ref 287287 // Message
	end

	attribute 6270519 "mUptimeMillis"
	  const_attribute package explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 35223095 "MessageBundle"
	  package explicit_return_type ""
	  nparams 3
	    param inout name "target" type class_ref 132023 // Handler
	    param inout name "message" type class_ref 287287 // Message
	    param in name "uptimeMillis" explicit_type "long"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 35223223 "compareTo"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "bundle" type class_ref 1837751 // MessageBundle
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      classrelation 5890743 // mQueue (<unidirectional association>)
	relation 5890743 --->
	  stereotype "Queue"
	  a role_name "mQueue" init_value " new PriorityQueue<MessageBundle>()" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 5890743 // mQueue (<unidirectional association>)
	  b parent class_ref 1837751 // MessageBundle
      end

      attribute 6270647 "mListener"
	const_attribute private explicit_type "IAnimationListener"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 35223351 "AnimationThread"
	public explicit_return_type ""
	nparams 3
	  param inout name "scene" explicit_type "RenderSessionImpl"
	  param inout name "threadName" type class_ref 129591 // String
	  param inout name "listener" explicit_type "IAnimationListener"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 35223479 "preAnimation"
	abstract public explicit_return_type "Result"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 35223607 "postAnimation"
	abstract public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 35223735 "run"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 1838007 "PropertyValuesHolder_Delegate"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SuppressWarnings(\"unused\")
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Delegate implementing the native methods of android.animation.PropertyValuesHolder

Through the layoutlib_create tool, the original native methods of PropertyValuesHolder have been
replaced by calls to methods of the same name in this delegate class.

Because it's a stateless class to start with, there's no need to keep a {@link DelegateManager}
around to map int to instance of the delegate.

The main goal of this class' methods are to provide a native way to access setters and getters
on some object. We override these methods to use reflection since the original reflection
implementation of the PropertyValuesHolder won't be able to access protected methods.


package"
      classrelation 5890871 // FLOAT_VARIANTS (<unidirectional association>)
	relation 5890871 --->
	  a role_name "FLOAT_VARIANTS" multiplicity "[]" init_value " {float.class, Float.class, double.class, int.class,
            Double.class, Integer.class}" class_relation private
	    comment " This code is copied from android.animation.PropertyValuesHolder and must be kept in sync
 We try several different types when searching for appropriate setter/getter functions.
 The caller may have supplied values in a type that does not match the setter/getter
 functions (such as the integers 0 and 1 to represent floating point values for alpha).
 Also, the use of generics in constructors means that we end up with the Object versions
 of primitive types (Float vs. float). But most likely, the setter/getter functions
 will take primitive types instead.
 So we supply an ordered array of other types to try before giving up.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 5890871 // FLOAT_VARIANTS (<unidirectional association>)
	  b parent class_ref 132791 // Class
      end

      classrelation 5890999 // INTEGER_VARIANTS (<unidirectional association>)
	relation 5890999 --->
	  a role_name "INTEGER_VARIANTS" multiplicity "[]" init_value " {int.class, Integer.class, float.class, double.class,
            Float.class, Double.class}" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 5890999 // INTEGER_VARIANTS (<unidirectional association>)
	  b parent class_ref 132791 // Class
      end

      classrelation 5891127 // sMethodIndexLock (<unidirectional association>)
	relation 5891127 --->
	  a role_name "sMethodIndexLock" init_value " new Object()" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5891127 // sMethodIndexLock (<unidirectional association>)
	  b parent class_ref 132663 // Object
      end

      attribute 6270775 "ID_TO_METHOD"
	class_attribute const_attribute private explicit_type "Long, Method"
	init_value " new HashMap<Long, Method>()"
	stereotype "Map"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 5891255 // METHOD_NAME_TO_ID (<unidirectional association>)
	relation 5891255 --->
	  stereotype "Map"
	  a role_name "METHOD_NAME_TO_ID" init_value " new HashMap<String, Long>()" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}, Long> ${name}${value};
"
	    classrelation_ref 5891255 // METHOD_NAME_TO_ID (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      attribute 6270903 "sNextId"
	class_attribute private explicit_type "long"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 35223863 "registerMethod"
	class_operation private explicit_return_type "long"
	nparams 4
	  param inout name "targetClass" type class_ref 132791 // Class
	  param inout name "methodName" type class_ref 129591 // String
	  param inout name "types" type class_ref 132791 // Class
	  param in name "nArgs" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 35223991 "callMethod"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "target" type class_ref 132663 // Object
	  param in name "methodID" explicit_type "long"
	  param inout name "" explicit_type "Object...args"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 35224119 "nGetIntMethod"
	class_operation package explicit_return_type "long"
	nparams 2
	  param inout name "targetClass" type class_ref 132791 // Class
	  param inout name "methodName" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@LayoutlibDelegate
"
	
	
	
	comment "package"
      end

      operation 35224247 "nGetFloatMethod"
	class_operation package explicit_return_type "long"
	nparams 2
	  param inout name "targetClass" type class_ref 132791 // Class
	  param inout name "methodName" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@LayoutlibDelegate
"
	
	
	
	comment "package"
      end

      operation 35224375 "nGetMultipleIntMethod"
	class_operation package explicit_return_type "long"
	nparams 3
	  param inout name "targetClass" type class_ref 132791 // Class
	  param inout name "methodName" type class_ref 129591 // String
	  param in name "numParams" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@LayoutlibDelegate
"
	
	
	
	comment "package"
      end

      operation 35224503 "nGetMultipleFloatMethod"
	class_operation package explicit_return_type "long"
	nparams 3
	  param inout name "targetClass" type class_ref 132791 // Class
	  param inout name "methodName" type class_ref 129591 // String
	  param in name "numParams" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@LayoutlibDelegate
"
	
	
	
	comment "package"
      end

      operation 35224631 "nCallIntMethod"
	class_operation package explicit_return_type "void"
	nparams 3
	  param inout name "target" type class_ref 132663 // Object
	  param in name "methodID" explicit_type "long"
	  param in name "arg" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@LayoutlibDelegate
"
	
	
	
	comment "package"
      end

      operation 35224759 "nCallFloatMethod"
	class_operation package explicit_return_type "void"
	nparams 3
	  param inout name "target" type class_ref 132663 // Object
	  param in name "methodID" explicit_type "long"
	  param in name "arg" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@LayoutlibDelegate
"
	
	
	
	comment "package"
      end

      operation 35224887 "nCallTwoIntMethod"
	class_operation package explicit_return_type "void"
	nparams 4
	  param inout name "target" type class_ref 132663 // Object
	  param in name "methodID" explicit_type "long"
	  param in name "arg1" explicit_type "int"
	  param in name "arg2" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@LayoutlibDelegate
"
	
	
	
	comment "package"
      end

      operation 35225015 "nCallFourIntMethod"
	class_operation package explicit_return_type "void"
	nparams 6
	  param inout name "target" type class_ref 132663 // Object
	  param in name "methodID" explicit_type "long"
	  param in name "arg1" explicit_type "int"
	  param in name "arg2" explicit_type "int"
	  param in name "arg3" explicit_type "int"
	  param in name "arg4" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@LayoutlibDelegate
"
	
	
	
	comment "package"
      end

      operation 35225143 "nCallMultipleIntMethod"
	class_operation package explicit_return_type "void"
	nparams 3
	  param inout name "target" type class_ref 132663 // Object
	  param in name "methodID" explicit_type "long"
	  param inout name "args" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@LayoutlibDelegate
"
	
	
	
	comment "package"
      end

      operation 35225271 "nCallTwoFloatMethod"
	class_operation package explicit_return_type "void"
	nparams 4
	  param inout name "target" type class_ref 132663 // Object
	  param in name "methodID" explicit_type "long"
	  param in name "arg1" explicit_type "float"
	  param in name "arg2" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@LayoutlibDelegate
"
	
	
	
	comment "package"
      end

      operation 35225399 "nCallFourFloatMethod"
	class_operation package explicit_return_type "void"
	nparams 6
	  param inout name "target" type class_ref 132663 // Object
	  param in name "methodID" explicit_type "long"
	  param in name "arg1" explicit_type "float"
	  param in name "arg2" explicit_type "float"
	  param in name "arg3" explicit_type "float"
	  param in name "arg4" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@LayoutlibDelegate
"
	
	
	
	comment "package"
      end

      operation 35225527 "nCallMultipleFloatMethod"
	class_operation package explicit_return_type "void"
	nparams 3
	  param inout name "target" type class_ref 132663 // Object
	  param in name "methodID" explicit_type "long"
	  param inout name "args" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@LayoutlibDelegate
"
	
	
	
	comment "package"
      end
    end
  end

  deploymentview 147639 "animation"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 235703 "AnimationHandler"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.os.SystemClock;
import android.util.ArrayMap;
import android.view.Choreographer;
import java.util.ArrayList;
${definition}"
      associated_classes
	class_ref 314167 // AnimationHandler
      end
      comment "Copyright (C) 2015 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 235959 "Animator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.annotation.Nullable;
import android.content.pm.ActivityInfo.Config;
import android.content.res.ConstantState;
import java.util.ArrayList;
${definition}"
      associated_classes
	class_ref 314807 // Animator
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 236087 "TypeEvaluator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 316087 // TypeEvaluator
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 236215 "AnimatorInflater"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.annotation.AnimatorRes;
import android.annotation.AnyRes;
import android.annotation.NonNull;
import android.content.Context;
import android.content.pm.ActivityInfo.Config;
import android.content.res.ConfigurationBoundResourceCache;
import android.content.res.ConstantState;
import android.content.res.Resources;
import android.content.res.Resources.NotFoundException;
import android.content.res.Resources.Theme;
import android.content.res.TypedArray;
import android.content.res.XmlResourceParser;
import android.graphics.Path;
import android.util.AttributeSet;
import android.util.Log;
import android.util.PathParser;
import android.util.StateSet;
import android.util.TypedValue;
import android.util.Xml;
import android.view.InflateException;
import android.view.animation.AnimationUtils;
import android.view.animation.BaseInterpolator;
import android.view.animation.Interpolator;
import com.android.internal.R;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import java.io.IOException;
import java.util.ArrayList;
${definition}"
      associated_classes
	class_ref 315575 // AnimatorInflater
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 236343 "AnimatorListenerAdapter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 316727 // AnimatorListenerAdapter
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 236471 "AnimatorSet"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.app.ActivityThread;
import android.app.Application;
import android.os.Build;
import android.util.ArrayMap;
import android.util.Log;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
${definition}"
      associated_classes
	class_ref 316471 // AnimatorSet
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 236599 "ArgbEvaluator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 317239 // ArgbEvaluator
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 236727 "TypeConverter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 317495 // TypeConverter
      end
      comment "Copyright (C) 2013 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 236855 "BidirectionalTypeConverter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 317367 // BidirectionalTypeConverter
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 236983 "FloatArrayEvaluator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 317751 // FloatArrayEvaluator
      end
      comment "Copyright (C) 2013 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 237111 "FloatEvaluator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 317879 // FloatEvaluator
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 237239 "Keyframes"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_classes
	class_ref 318263 // Keyframes
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 237367 "KeyframeSet"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
import java.util.List;
import android.animation.Keyframe.IntKeyframe;
import android.animation.Keyframe.FloatKeyframe;
import android.animation.Keyframe.ObjectKeyframe;
import android.graphics.Path;
import android.util.Log;
${definition}"
      associated_classes
	class_ref 318135 // KeyframeSet
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 237495 "FloatKeyframeSet"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.animation.Keyframe.FloatKeyframe;
import java.util.List;
${definition}"
      associated_classes
	class_ref 318007 // FloatKeyframeSet
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 237623 "IntArrayEvaluator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 318775 // IntArrayEvaluator
      end
      comment "Copyright (C) 2013 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 237751 "IntEvaluator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 318903 // IntEvaluator
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 237879 "IntKeyframeSet"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.animation.Keyframe.IntKeyframe;
import java.util.List;
${definition}"
      associated_classes
	class_ref 319031 // IntKeyframeSet
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 238007 "Keyframe"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 316599 // Keyframe
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 238135 "LayoutTransition"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewParent;
import android.view.ViewTreeObserver;
import android.view.animation.AccelerateDecelerateInterpolator;
import android.view.animation.DecelerateInterpolator;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
${definition}"
      associated_classes
	class_ref 152887 // LayoutTransition
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 238263 "ValueAnimator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.annotation.CallSuper;
import android.annotation.IntDef;
import android.os.Looper;
import android.os.Trace;
import android.util.AndroidRuntimeException;
import android.util.Log;
import android.view.animation.AccelerateDecelerateInterpolator;
import android.view.animation.AnimationUtils;
import android.view.animation.LinearInterpolator;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.util.ArrayList;
import java.util.HashMap;
${definition}"
      associated_classes
	class_ref 316343 // ValueAnimator
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 238391 "ObjectAnimator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.annotation.CallSuper;
import android.annotation.NonNull;
import android.annotation.Nullable;
import android.graphics.Path;
import android.graphics.PointF;
import android.util.Log;
import android.util.Property;
import android.view.animation.AccelerateDecelerateInterpolator;
import java.lang.ref.WeakReference;
${definition}"
      associated_classes
	class_ref 314551 // ObjectAnimator
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 238519 "PathKeyframes"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.graphics.Path;
import android.graphics.PointF;
import java.util.ArrayList;
${definition}"
      associated_classes
	class_ref 318647 // PathKeyframes
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 238647 "PointFEvaluator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.graphics.PointF;
${definition}"
      associated_classes
	class_ref 320311 // PointFEvaluator
      end
      comment "Copyright (C) 2013 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 238775 "PropertyValuesHolder"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.graphics.Path;
import android.graphics.PointF;
import android.util.FloatProperty;
import android.util.IntProperty;
import android.util.Log;
import android.util.PathParser;
import android.util.Property;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.List;
${definition}"
      associated_classes
	class_ref 316215 // PropertyValuesHolder
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 238903 "RectEvaluator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.graphics.Rect;
${definition}"
      associated_classes
	class_ref 321719 // RectEvaluator
      end
      comment "Copyright (C) 2013 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 239159 "RevealAnimator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.view.RenderNodeAnimator;
import android.view.View;
${definition}"
      associated_classes
	class_ref 321847 // RevealAnimator
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 239287 "StateListAnimator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.content.pm.ActivityInfo.Config;
import android.content.res.ConstantState;
import android.util.StateSet;
import android.view.View;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
${definition}"
      associated_classes
	class_ref 144311 // StateListAnimator
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 239415 "TimeAnimator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.view.animation.AnimationUtils;
${definition}"
      associated_classes
	class_ref 322743 // TimeAnimator
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 239543 "TimeInterpolator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 315319 // TimeInterpolator
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 484663 "AnimatorInflaterTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.test.ActivityInstrumentationTestCase2;
import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import com.android.frameworks.coretests.R;
${definition}"
      associated_classes
	class_ref 827831 // AnimatorInflaterTest
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 484791 "AnimatorSetActivity"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import com.android.frameworks.coretests.R;
import android.app.Activity;
import android.os.Bundle;
${definition}"
      associated_classes
	class_ref 828343 // AnimatorSetActivity
      end
    end

    artifact 484919 "AnimatorSetActivityTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import com.android.frameworks.coretests.R;
import android.test.ActivityInstrumentationTestCase2;
import android.test.UiThreadTest;
import android.test.suitebuilder.annotation.SmallTest;
import android.view.View;
import java.util.ArrayList;
${definition}"
      associated_classes
	class_ref 828471 // AnimatorSetActivityTest
      end
    end

    artifact 485047 "EventsTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.os.Handler;
import android.test.ActivityInstrumentationTestCase2;
import android.test.UiThreadTest;
import android.test.suitebuilder.annotation.MediumTest;
import android.test.suitebuilder.annotation.SmallTest;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
${definition}"
      associated_classes
	class_ref 828855 // EventsTest
      end
      comment "Copyright (C) 2011 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 485175 "AnimatorSetEventsTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.os.Handler;
import android.test.suitebuilder.annotation.MediumTest;
import android.test.suitebuilder.annotation.SmallTest;
import android.widget.Button;
import com.android.frameworks.coretests.R;
import java.util.concurrent.TimeUnit;
${definition}"
      associated_classes
	class_ref 828727 // AnimatorSetEventsTest
      end
      comment "Copyright (C) 2011 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 485303 "AutoCancelTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.os.Handler;
import android.test.ActivityInstrumentationTestCase2;
import android.test.suitebuilder.annotation.SmallTest;
import java.util.HashMap;
import java.util.concurrent.TimeUnit;
${definition}"
      associated_classes
	class_ref 829751 // AutoCancelTest
      end
      comment "Copyright (C) 2013 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 485431 "BasicAnimatorActivity"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import com.android.frameworks.coretests.R;
import android.app.Activity;
import android.os.Bundle;
import android.widget.Button;
${definition}"
      associated_classes
	class_ref 827959 // BasicAnimatorActivity
      end
      comment "Copyright (C) 2011 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 485559 "FutureWaiter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import com.google.common.util.concurrent.AbstractFuture;
${definition}"
      associated_classes
	class_ref 828983 // FutureWaiter
      end
      comment "Copyright (C) 2011 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 485687 "ObjectAnimatorEventsTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.widget.Button;
import com.android.frameworks.coretests.R;
${definition}"
      associated_classes
	class_ref 830007 // ObjectAnimatorEventsTest
      end
      comment "Copyright (C) 2011 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 485815 "StateListAnimatorTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.test.ActivityInstrumentationTestCase2;
import android.test.UiThreadTest;
import android.util.StateSet;
import android.view.View;
import android.view.ViewGroup;
import com.android.frameworks.coretests.R;
import java.util.concurrent.atomic.AtomicInteger;
${definition}"
      associated_classes
	class_ref 830135 // StateListAnimatorTest
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 485943 "ValueAnimatorEventsTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 830263 // ValueAnimatorEventsTest
      end
      comment "Copyright (C) 2011 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 486071 "ValueAnimatorTests"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.os.SystemClock;
import android.test.ActivityInstrumentationTestCase2;
import android.test.suitebuilder.annotation.SmallTest;
import android.view.Choreographer;
import android.view.animation.LinearInterpolator;
import java.util.ArrayList;
import static android.test.MoreAsserts.assertNotEqual;
${definition}"
      associated_classes
	class_ref 830391 // ValueAnimatorTests
      end
      comment "Copyright (C) 2015 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 486199 "ViewPropertyAnimatorTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.os.Handler;
import android.test.ActivityInstrumentationTestCase2;
import android.test.UiThreadTest;
import android.test.suitebuilder.annotation.MediumTest;
import android.test.suitebuilder.annotation.SmallTest;
import android.view.ViewPropertyAnimator;
import android.widget.Button;
import com.android.frameworks.coretests.R;
import java.util.concurrent.TimeUnit;
${definition}"
      associated_classes
	class_ref 831159 // ViewPropertyAnimatorTest
      end
      comment "Copyright (C) 2011 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 1022519 "AnimationThread"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import com.android.ide.common.rendering.api.IAnimationListener;
import com.android.ide.common.rendering.api.RenderSession;
import com.android.ide.common.rendering.api.Result;
import com.android.ide.common.rendering.api.Result.Status;
import com.android.layoutlib.bridge.Bridge;
import com.android.layoutlib.bridge.impl.RenderSessionImpl;
import android.os.Handler;
import android.os.Handler_Delegate;
import android.os.Handler_Delegate.IHandlerCallback;
import android.os.Message;
import java.util.PriorityQueue;
import java.util.Queue;
${definition}"
      associated_classes
	class_ref 1837623 // AnimationThread
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 1022647 "PropertyValuesHolder_Delegate"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import com.android.layoutlib.bridge.Bridge;
import com.android.layoutlib.bridge.impl.DelegateManager;
import com.android.tools.layoutlib.annotations.LayoutlibDelegate;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
${definition}"
      associated_classes
	class_ref 1838007 // PropertyValuesHolder_Delegate
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end
  end
end
