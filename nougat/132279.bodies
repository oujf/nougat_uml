class ComponentName
!!!2608695.java!!!	createRelative(inout pkg : String, inout cls : String) : ComponentName
        if (TextUtils.isEmpty(cls)) {
            throw new IllegalArgumentException("class name cannot be empty");
        }

        final String fullName;
        if (cls.charAt(0) == '.') {
            // Relative to the package. Prepend the package name.
            fullName = pkg + cls;
        } else {
            // Fully qualified package name.
            fullName = cls;
        }
        return new ComponentName(pkg, fullName);
!!!2608823.java!!!	createRelative(inout pkg : Context, inout cls : String) : ComponentName
        return createRelative(pkg.getPackageName(), cls);
!!!2608951.java!!!	ComponentName(inout pkg : String, inout cls : String)
        if (pkg == null) throw new NullPointerException("package name is null");
        if (cls == null) throw new NullPointerException("class name is null");
        mPackage = pkg;
        mClass = cls;
!!!2609079.java!!!	ComponentName(inout pkg : Context, inout cls : String)
        if (cls == null) throw new NullPointerException("class name is null");
        mPackage = pkg.getPackageName();
        mClass = cls;
!!!2609207.java!!!	ComponentName(inout pkg : Context, inout cls : Class)
        mPackage = pkg.getPackageName();
        mClass = cls.getName();
!!!2609335.java!!!	clone() : ComponentName
        return new ComponentName(mPackage, mClass);
!!!2609463.java!!!	getPackageName() : String
        return mPackage;
!!!2609591.java!!!	getClassName() : String
        return mClass;
!!!2609719.java!!!	getShortClassName() : String
        if (mClass.startsWith(mPackage)) {
            int PN = mPackage.length();
            int CN = mClass.length();
            if (CN > PN && mClass.charAt(PN) == '.') {
                return mClass.substring(PN, CN);
            }
        }
        return mClass;
!!!2609847.java!!!	appendShortClassName(inout sb : StringBuilder, inout packageName : String, inout className : String) : void
        if (className.startsWith(packageName)) {
            int PN = packageName.length();
            int CN = className.length();
            if (CN > PN && className.charAt(PN) == '.') {
                sb.append(className, PN, CN);
                return;
            }
        }
        sb.append(className);
!!!2609975.java!!!	printShortClassName(inout pw : PrintWriter, inout packageName : String, inout className : String) : void
        if (className.startsWith(packageName)) {
            int PN = packageName.length();
            int CN = className.length();
            if (CN > PN && className.charAt(PN) == '.') {
                pw.write(className, PN, CN-PN);
                return;
            }
        }
        pw.print(className);
!!!2610103.java!!!	flattenToString() : String
        return mPackage + "/" + mClass;
!!!2610231.java!!!	flattenToShortString() : String
        StringBuilder sb = new StringBuilder(mPackage.length() + mClass.length());
        appendShortString(sb, mPackage, mClass);
        return sb.toString();
!!!2610359.java!!!	appendShortString(inout sb : StringBuilder) : void
        appendShortString(sb, mPackage, mClass);
!!!2610487.java!!!	appendShortString(inout sb : StringBuilder, inout packageName : String, inout className : String) : void
        sb.append(packageName).append('/');
        appendShortClassName(sb, packageName, className);
!!!2610615.java!!!	printShortString(inout pw : PrintWriter, inout packageName : String, inout className : String) : void
        pw.print(packageName);
        pw.print('/');
        printShortClassName(pw, packageName, className);
!!!2610743.java!!!	unflattenFromString(inout str : String) : ComponentName
        int sep = str.indexOf('/');
        if (sep < 0 || (sep+1) >= str.length()) {
            return null;
        }
        String pkg = str.substring(0, sep);
        String cls = str.substring(sep+1);
        if (cls.length() > 0 && cls.charAt(0) == '.') {
            cls = pkg + cls;
        }
        return new ComponentName(pkg, cls);
!!!2610871.java!!!	toShortString() : String
        return "{" + mPackage + "/" + mClass + "}";
!!!2610999.java!!!	toString() : String
        return "ComponentInfo{" + mPackage + "/" + mClass + "}";
!!!2611127.java!!!	equals(inout obj : Object) : boolean
        try {
            if (obj != null) {
                ComponentName other = (ComponentName)obj;
                // Note: no null checks, because mPackage and mClass can
                // never be null.
                return mPackage.equals(other.mPackage)
                        && mClass.equals(other.mClass);
            }
        } catch (ClassCastException e) {
        }
        return false;
!!!2611255.java!!!	hashCode() : int
        return mPackage.hashCode() + mClass.hashCode();
!!!2611383.java!!!	compareTo(inout that : ComponentName) : int
        int v;
        v = this.mPackage.compareTo(that.mPackage);
        if (v != 0) {
            return v;
        }
        return this.mClass.compareTo(that.mClass);
!!!2611511.java!!!	describeContents() : int
        return 0;
!!!2611639.java!!!	writeToParcel(inout out : Parcel, in flags : int) : void
        out.writeString(mPackage);
        out.writeString(mClass);
!!!2611767.java!!!	writeToParcel(inout c : ComponentName, inout out : Parcel) : void
        if (c != null) {
            c.writeToParcel(out, 0);
        } else {
            out.writeString(null);
        }
!!!2611895.java!!!	readFromParcel(inout in : Parcel) : ComponentName
        String pkg = in.readString();
        return pkg != null ? new ComponentName(pkg, in) : null;
!!!2612023.java!!!	ComponentName(inout in : Parcel)
        mPackage = in.readString();
        if (mPackage == null) throw new NullPointerException(
                "package name is null");
        mClass = in.readString();
        if (mClass == null) throw new NullPointerException(
                "class name is null");
!!!2612151.java!!!	ComponentName(inout pkg : String, inout in : Parcel)
        mPackage = pkg;
        mClass = in.readString();
