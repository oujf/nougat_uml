class BatteryTile
!!!30664887.java!!!	BatteryTile(inout host : QSTile::Host)
        super(host);
        mBatteryController = host.getBatteryController();
!!!30665015.java!!!	newTileState() : QSTile::State
        return new QSTile.State();
!!!30665143.java!!!	getDetailAdapter() : QSTile::DetailAdapter
        return mBatteryDetail;
!!!30665271.java!!!	getMetricsCategory() : int
        return MetricsEvent.QS_BATTERY_TILE;
!!!30665399.java!!!	setListening(inout listening : boolean) : void
        if (listening) {
            mBatteryController.addStateChangedCallback(this);
        } else {
            mBatteryController.removeStateChangedCallback(this);
        }
!!!30665527.java!!!	setDetailListening(inout listening : boolean) : void
        super.setDetailListening(listening);
        if (!listening) {
            mBatteryDetail.mCurrentView = null;
        }
!!!30665655.java!!!	getLongClickIntent() : Intent
        return new Intent(Intent.ACTION_POWER_USAGE_SUMMARY);
!!!30665783.java!!!	handleClick() : void
        showDetail(true);
!!!30665911.java!!!	getTileLabel() : CharSequence
        return mContext.getString(R.string.battery);
!!!30666039.java!!!	handleUpdateState(inout state : QSTile::State, inout arg : Object) : void
        int level = (arg != null) ? (Integer) arg : mLevel;
        String percentage = NumberFormat.getPercentInstance().format((double) level / 100.0);

        state.icon = new Icon() {
            @Override
            public Drawable getDrawable(Context context) {
                BatteryMeterDrawable drawable =
                        new BatteryMeterDrawable(context, new Handler(Looper.getMainLooper()),
                        context.getColor(R.color.batterymeter_frame_color));
                drawable.onBatteryLevelChanged(mLevel, mPluggedIn, mCharging);
                drawable.onPowerSaveChanged(mPowerSave);
                return drawable;
            }

            @Override
            public int getPadding() {
                return mHost.getContext().getResources().getDimensionPixelSize(
                        R.dimen.qs_battery_padding);
            }
        };
        state.label = percentage;
        state.contentDescription = mContext.getString(R.string.accessibility_quick_settings_battery,
                percentage) + "," +
                (mPowerSave ? mContext.getString(R.string.battery_saver_notification_title)
                        : mCharging ? mContext.getString(R.string.expanded_header_battery_charging)
                                : "")
                + "," + mContext.getString(R.string.accessibility_battery_details);
        state.minimalAccessibilityClassName = state.expandedAccessibilityClassName
                = Button.class.getName();
!!!30666167.java!!!	onBatteryLevelChanged(in level : int, inout pluggedIn : boolean, inout charging : boolean) : void
        mLevel = level;
        mPluggedIn = pluggedIn;
        mCharging = charging;
        refreshState((Integer) level);
        if (mDetailShown) {
            mBatteryDetail.postBindView();
        }
!!!30666295.java!!!	onPowerSaveChanged(inout isPowerSave : boolean) : void
        mPowerSave = isPowerSave;
        refreshState(null);
        if (mDetailShown) {
            mBatteryDetail.postBindView();
        }
