class BluetoothDetailAdapter
!!!30669495.java!!!	getTitle() : CharSequence
            return mContext.getString(R.string.quick_settings_bluetooth_label);
!!!30669623.java!!!	getToggleState() : Boolean
            return mState.value;
!!!30669751.java!!!	getSettingsIntent() : Intent
            return BLUETOOTH_SETTINGS;
!!!30669879.java!!!	setToggleState(inout state : boolean) : void
            MetricsLogger.action(mContext, MetricsEvent.QS_BLUETOOTH_TOGGLE, state);
            mController.setBluetoothEnabled(state);
            showDetail(false);
!!!30670007.java!!!	getMetricsCategory() : int
            return MetricsEvent.QS_BLUETOOTH_DETAILS;
!!!30670135.java!!!	createDetailView(inout context : Context, inout convertView : View, inout parent : ViewGroup) : View
            mItems = QSDetailItems.convertOrInflate(context, convertView, parent);
            mItems.setTagSuffix("Bluetooth");
            mItems.setEmptyState(R.drawable.ic_qs_bluetooth_detail_empty,
                    R.string.quick_settings_bluetooth_detail_empty_text);
            mItems.setCallback(this);
            updateItems();
            setItemsVisible(mState.value);
            return mItems;
!!!30670263.java!!!	setItemsVisible(inout visible : boolean) : void
            if (mItems == null) return;
            mItems.setItemsVisible(visible);
!!!30670391.java!!!	updateItems() : void
            if (mItems == null) return;
            ArrayList<Item> items = new ArrayList<Item>();
            final Collection<CachedBluetoothDevice> devices = mController.getDevices();
            if (devices != null) {
                for (CachedBluetoothDevice device : devices) {
                    if (device.getBondState() == BluetoothDevice.BOND_NONE) continue;
                    final Item item = new Item();
                    item.icon = R.drawable.ic_qs_bluetooth_on;
                    item.line1 = device.getName();
                    int state = device.getMaxConnectionState();
                    if (state == BluetoothProfile.STATE_CONNECTED) {
                        item.icon = R.drawable.ic_qs_bluetooth_connected;
                        item.line2 = mContext.getString(R.string.quick_settings_connected);
                        item.canDisconnect = true;
                    } else if (state == BluetoothProfile.STATE_CONNECTING) {
                        item.icon = R.drawable.ic_qs_bluetooth_connecting;
                        item.line2 = mContext.getString(R.string.quick_settings_connecting);
                    }
                    item.tag = device;
                    items.add(item);
                }
            }
            mItems.setItems(items.toArray(new Item[items.size()]));
!!!30670519.java!!!	onDetailItemClick(inout item : QSDetailItems::Item) : void
            if (item == null || item.tag == null) return;
            final CachedBluetoothDevice device = (CachedBluetoothDevice) item.tag;
            if (device != null && device.getMaxConnectionState()
                    == BluetoothProfile.STATE_DISCONNECTED) {
                mController.connect(device);
            }
!!!30670647.java!!!	onDetailItemDisconnect(inout item : QSDetailItems::Item) : void
            if (item == null || item.tag == null) return;
            final CachedBluetoothDevice device = (CachedBluetoothDevice) item.tag;
            if (device != null) {
                mController.disconnect(device);
            }
